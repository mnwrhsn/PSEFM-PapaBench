
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 99 88 01 00 dd 88 01 00 dd 88 01 00     .P. ............
      10:	dd 88 01 00 dd 88 01 00 dd 88 01 00 00 00 00 00     ................
	...
      2c:	95 5c 00 00 dd 88 01 00 00 00 00 00 a1 5d 00 00     .\...........]..
      3c:	dd 5d 00 00 dd 88 01 00 dd 88 01 00 dd 88 01 00     .]..............
      4c:	dd 88 01 00 dd 88 01 00 dd 88 01 00 dd 88 01 00     ................
      5c:	dd 88 01 00 dd 88 01 00 dd 88 01 00 dd 88 01 00     ................
      6c:	dd 88 01 00 dd 88 01 00 dd 88 01 00 dd 88 01 00     ................
      7c:	dd 88 01 00 dd 88 01 00 dd 88 01 00 dd 88 01 00     ................
      8c:	dd 88 01 00 dd 88 01 00 dd 88 01 00 dd 88 01 00     ................
      9c:	dd 88 01 00 dd 88 01 00 dd 88 01 00 dd 88 01 00     ................
      ac:	dd 88 01 00 dd 88 01 00 dd 88 01 00 dd 88 01 00     ................
      bc:	dd 88 01 00 dd 88 01 00 dd 88 01 00 dd 88 01 00     ................
      cc:	dd 88 01 00 dd 88 01 00 dd 88 01 00 dd 88 01 00     ................
      dc:	dd 88 01 00 dd 88 01 00 dd 88 01 00 dd 88 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	000189c8 	.word	0x000189c8
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cba4 	.word	0x2004cba4

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fd19 	bl	5e30 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fe58 	bl	4100 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fe53 	bl	4100 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe33 	bl	4118 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fe72 	bl	41d8 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe1c 	bl	4168 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe0c 	bl	4168 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fdff 	bl	4168 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe20 	bl	41d8 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe17 	bl	41d8 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fd96 	bl	4118 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fe65 	bl	52d4 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fd8a 	bl	41d8 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fd81 	bl	41d8 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fcfc 	bl	4118 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc33 	bl	40c0 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc27 	bl	40c0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc21 	bl	40c0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc1b 	bl	40c0 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fc85 	bl	41d8 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc1c 	bl	4118 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b086      	sub	sp, #24
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f833 	bl	2994 <xEventGetpxDestination>
    292e:	6178      	str	r0, [r7, #20]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	1d3a      	adds	r2, r7, #4
    293e:	4610      	mov	r0, r2
    2940:	4619      	mov	r1, r3
    2942:	f000 f833 	bl	29ac <xEventGetxTag>
        if( xTaskGetTickCount() >= xTag.xTimestamp )
    2946:	f002 fcc5 	bl	52d4 <xTaskGetTickCount>
    294a:	4602      	mov	r2, r0
    294c:	68bb      	ldr	r3, [r7, #8]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6979      	ldr	r1, [r7, #20]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3718      	adds	r7, #24
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	681b      	ldr	r3, [r3, #0]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	685b      	ldr	r3, [r3, #4]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetxTag>:

struct tag xEventGetxTag( xEventHandle pxEvent)
{
    29ac:	b490      	push	{r4, r7}
    29ae:	b082      	sub	sp, #8
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    29b4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTag;
    29b6:	687a      	ldr	r2, [r7, #4]
    29b8:	683b      	ldr	r3, [r7, #0]
    29ba:	4614      	mov	r4, r2
    29bc:	3308      	adds	r3, #8
    29be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29c4:	6878      	ldr	r0, [r7, #4]
    29c6:	3708      	adds	r7, #8
    29c8:	46bd      	mov	sp, r7
    29ca:	bc90      	pop	{r4, r7}
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop

000029d0 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29d0:	b480      	push	{r7}
    29d2:	b083      	sub	sp, #12
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
    29d8:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	683a      	ldr	r2, [r7, #0]
    29de:	3218      	adds	r2, #24
    29e0:	e892 0003 	ldmia.w	r2, {r0, r1}
    29e4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    29e8:	6878      	ldr	r0, [r7, #4]
    29ea:	370c      	adds	r7, #12
    29ec:	46bd      	mov	sp, r7
    29ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    29f2:	4770      	bx	lr

000029f4 <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
    29fc:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	683a      	ldr	r2, [r7, #0]
    2a02:	fbb3 f2f2 	udiv	r2, r3, r2
    2a06:	6839      	ldr	r1, [r7, #0]
    2a08:	fb01 f202 	mul.w	r2, r1, r2
    2a0c:	1a9b      	subs	r3, r3, r2
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d00d      	beq.n	2a2e <getGCD+0x3a>
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	683a      	ldr	r2, [r7, #0]
    2a16:	fbb3 f2f2 	udiv	r2, r3, r2
    2a1a:	6839      	ldr	r1, [r7, #0]
    2a1c:	fb01 f202 	mul.w	r2, r1, r2
    2a20:	1a9b      	subs	r3, r3, r2
    2a22:	6838      	ldr	r0, [r7, #0]
    2a24:	4619      	mov	r1, r3
    2a26:	f7ff ffe5 	bl	29f4 <getGCD>
    2a2a:	4603      	mov	r3, r0
    2a2c:	e000      	b.n	2a30 <getGCD+0x3c>
    2a2e:	683b      	ldr	r3, [r7, #0]
}
    2a30:	4618      	mov	r0, r3
    2a32:	3708      	adds	r7, #8
    2a34:	46bd      	mov	sp, r7
    2a36:	bd80      	pop	{r7, pc}

00002a38 <GCDOfTaskPeriod>:

inline static portTickType GCDOfTaskPeriod()
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a3e:	f240 0328 	movw	r3, #40	; 0x28
    2a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a4a:	2301      	movs	r3, #1
    2a4c:	607b      	str	r3, [r7, #4]
    2a4e:	e00f      	b.n	2a70 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a50:	f240 0328 	movw	r3, #40	; 0x28
    2a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a58:	687a      	ldr	r2, [r7, #4]
    2a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a5e:	6838      	ldr	r0, [r7, #0]
    2a60:	4619      	mov	r1, r3
    2a62:	f7ff ffc7 	bl	29f4 <getGCD>
    2a66:	4603      	mov	r3, r0
    2a68:	603b      	str	r3, [r7, #0]
inline static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	3301      	adds	r3, #1
    2a6e:	607b      	str	r3, [r7, #4]
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	2b0c      	cmp	r3, #12
    2a74:	ddec      	ble.n	2a50 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a76:	683b      	ldr	r3, [r7, #0]
}
    2a78:	4618      	mov	r0, r3
    2a7a:	3708      	adds	r7, #8
    2a7c:	46bd      	mov	sp, r7
    2a7e:	bd80      	pop	{r7, pc}

00002a80 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a80:	b590      	push	{r4, r7, lr}
    2a82:	b091      	sub	sp, #68	; 0x44
    2a84:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a86:	f7ff ffd7 	bl	2a38 <GCDOfTaskPeriod>
    2a8a:	4602      	mov	r2, r0
    2a8c:	f240 6358 	movw	r3, #1624	; 0x658
    2a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a94:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a96:	f240 6060 	movw	r0, #1632	; 0x660
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fb0f 	bl	40c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2aa2:	f240 6074 	movw	r0, #1652	; 0x674
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fb09 	bl	40c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2aae:	f240 6088 	movw	r0, #1672	; 0x688
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fb03 	bl	40c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aba:	f240 609c 	movw	r0, #1692	; 0x69c
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 fafd 	bl	40c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2ac6:	f240 60b0 	movw	r0, #1712	; 0x6b0
    2aca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ace:	f001 faf7 	bl	40c0 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2ad2:	f240 60c4 	movw	r0, #1732	; 0x6c4
    2ad6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ada:	f001 faf1 	bl	40c0 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ade:	2300      	movs	r3, #0
    2ae0:	637b      	str	r3, [r7, #52]	; 0x34
    2ae2:	e02f      	b.n	2b44 <vInitialiseEventLists+0xc4>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2ae4:	6b7c      	ldr	r4, [r7, #52]	; 0x34
    2ae6:	2034      	movs	r0, #52	; 0x34
    2ae8:	f003 f9a2 	bl	5e30 <pvPortMalloc>
    2aec:	4602      	mov	r2, r0
    2aee:	00a3      	lsls	r3, r4, #2
    2af0:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af4:	440b      	add	r3, r1
    2af6:	f843 2c40 	str.w	r2, [r3, #-64]
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
    2afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2afc:	009b      	lsls	r3, r3, #2
    2afe:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b02:	4413      	add	r3, r2
    2b04:	f853 2c40 	ldr.w	r2, [r3, #-64]
    2b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2b10:	440b      	add	r3, r1
    2b12:	f853 3c40 	ldr.w	r3, [r3, #-64]
    2b16:	3320      	adds	r3, #32
    2b18:	4610      	mov	r0, r2
    2b1a:	4619      	mov	r1, r3
    2b1c:	f000 f97a 	bl	2e14 <vListIntialiseEventItem>
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b22:	009b      	lsls	r3, r3, #2
    2b24:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b28:	4413      	add	r3, r2
    2b2a:	f853 3c40 	ldr.w	r3, [r3, #-64]
    2b2e:	3320      	adds	r3, #32
    2b30:	f240 6060 	movw	r0, #1632	; 0x660
    2b34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b38:	4619      	mov	r1, r3
    2b3a:	f001 faed 	bl	4118 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b40:	3301      	adds	r3, #1
    2b42:	637b      	str	r3, [r7, #52]	; 0x34
    2b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b46:	2b0c      	cmp	r3, #12
    2b48:	ddcc      	ble.n	2ae4 <vInitialiseEventLists+0x64>
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2b4a:	2034      	movs	r0, #52	; 0x34
    2b4c:	f003 f970 	bl	5e30 <pvPortMalloc>
    2b50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( pxEndFlagEvent != NULL )
    2b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b54:	2b00      	cmp	r3, #0
    2b56:	d01e      	beq.n	2b96 <vInitialiseEventLists+0x116>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTag.xDeadline= portMAX_DELAY;
    2b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b5a:	f04f 32ff 	mov.w	r2, #4294967295
    2b5e:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTag.xTimestamp = portMAX_DELAY;
    2b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b62:	f04f 32ff 	mov.w	r2, #4294967295
    2b66:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTag.xMicroStep = portMAX_DELAY;
    2b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b6a:	f04f 32ff 	mov.w	r2, #4294967295
    2b6e:	615a      	str	r2, [r3, #20]
        pxEndFlagEvent->xTag.xLevel = portMAX_DELAY;
    2b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b72:	f04f 32ff 	mov.w	r2, #4294967295
    2b76:	611a      	str	r2, [r3, #16]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b7a:	3320      	adds	r3, #32
    2b7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2b7e:	4619      	mov	r1, r3
    2b80:	f000 f948 	bl	2e14 <vListIntialiseEventItem>
        vListInsertEnd(&xEventNonExecutableList, &pxEndFlagEvent->xEventListItem); 
    2b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b86:	3320      	adds	r3, #32
    2b88:	f240 6088 	movw	r0, #1672	; 0x688
    2b8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b90:	4619      	mov	r1, r3
    2b92:	f001 fac1 	bl	4118 <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2b96:	2034      	movs	r0, #52	; 0x34
    2b98:	f003 f94a 	bl	5e30 <pvPortMalloc>
    2b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( pxEndFlagEvent != NULL )
    2b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d01e      	beq.n	2be2 <vInitialiseEventLists+0x162>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTag.xDeadline= portMAX_DELAY;
    2ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ba6:	f04f 32ff 	mov.w	r2, #4294967295
    2baa:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTag.xTimestamp = portMAX_DELAY;
    2bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bae:	f04f 32ff 	mov.w	r2, #4294967295
    2bb2:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTag.xMicroStep = portMAX_DELAY;
    2bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bb6:	f04f 32ff 	mov.w	r2, #4294967295
    2bba:	615a      	str	r2, [r3, #20]
        pxEndFlagEvent->xTag.xLevel = portMAX_DELAY;
    2bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bbe:	f04f 32ff 	mov.w	r2, #4294967295
    2bc2:	611a      	str	r2, [r3, #16]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bc6:	3320      	adds	r3, #32
    2bc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2bca:	4619      	mov	r1, r3
    2bcc:	f000 f922 	bl	2e14 <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent->xEventListItem); 
    2bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bd2:	3320      	adds	r3, #32
    2bd4:	f240 60b0 	movw	r0, #1712	; 0x6b0
    2bd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2bdc:	4619      	mov	r1, r3
    2bde:	f001 fa9b 	bl	4118 <vListInsertEnd>
    }
}
    2be2:	3744      	adds	r7, #68	; 0x44
    2be4:	46bd      	mov	sp, r7
    2be6:	bd90      	pop	{r4, r7, pc}

00002be8 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2be8:	b580      	push	{r7, lr}
    2bea:	b086      	sub	sp, #24
    2bec:	af00      	add	r7, sp, #0
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    struct tag xTag;
    
    if(listCURRENT_LIST_LENGTH(&xEventNonExecutableList) > 1)
    2bee:	f240 6388 	movw	r3, #1672	; 0x688
    2bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bf6:	681b      	ldr	r3, [r3, #0]
    2bf8:	2b01      	cmp	r3, #1
    2bfa:	d917      	bls.n	2c2c <xIsExecutableEventArrive+0x44>
    {
        temp_pxEventListItem = (xListItem *)xEventNonExecutableList.xListEnd.pxNext;
    2bfc:	f240 6388 	movw	r3, #1672	; 0x688
    2c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c04:	68db      	ldr	r3, [r3, #12]
    2c06:	617b      	str	r3, [r7, #20]
        xTag= xEventGetxTag( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2c08:	697b      	ldr	r3, [r7, #20]
    2c0a:	68db      	ldr	r3, [r3, #12]
    2c0c:	463a      	mov	r2, r7
    2c0e:	4610      	mov	r0, r2
    2c10:	4619      	mov	r1, r3
    2c12:	f7ff fecb 	bl	29ac <xEventGetxTag>
        xCurrentTime = xTaskGetTickCount();
    2c16:	f002 fb5d 	bl	52d4 <xTaskGetTickCount>
    2c1a:	6138      	str	r0, [r7, #16]
        return xTag.xTimestamp <= xCurrentTime? pdTRUE : pdFALSE;
    2c1c:	687a      	ldr	r2, [r7, #4]
    2c1e:	693b      	ldr	r3, [r7, #16]
    2c20:	429a      	cmp	r2, r3
    2c22:	bf8c      	ite	hi
    2c24:	2300      	movhi	r3, #0
    2c26:	2301      	movls	r3, #1
    2c28:	b2db      	uxtb	r3, r3
    2c2a:	e000      	b.n	2c2e <xIsExecutableEventArrive+0x46>
    }
    return 0;
    2c2c:	2300      	movs	r3, #0
}
    2c2e:	4618      	mov	r0, r3
    2c30:	3718      	adds	r7, #24
    2c32:	46bd      	mov	sp, r7
    2c34:	bd80      	pop	{r7, pc}
    2c36:	bf00      	nop

00002c38 <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct tag t1, const struct tag t2 )
{
    2c38:	b490      	push	{r4, r7}
    2c3a:	b084      	sub	sp, #16
    2c3c:	af00      	add	r7, sp, #0
    2c3e:	463c      	mov	r4, r7
    2c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTimestamp < t2.xTimestamp)
    2c44:	687a      	ldr	r2, [r7, #4]
    2c46:	69fb      	ldr	r3, [r7, #28]
    2c48:	429a      	cmp	r2, r3
    2c4a:	d201      	bcs.n	2c50 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2c4c:	2301      	movs	r3, #1
    2c4e:	e01e      	b.n	2c8e <xCompareFunction1+0x56>
    }
    else if( t1.xTimestamp == t2.xTimestamp)
    2c50:	687a      	ldr	r2, [r7, #4]
    2c52:	69fb      	ldr	r3, [r7, #28]
    2c54:	429a      	cmp	r2, r3
    2c56:	d119      	bne.n	2c8c <xCompareFunction1+0x54>
    {
        if( t1.xDeadline < t2.xDeadline )
    2c58:	683a      	ldr	r2, [r7, #0]
    2c5a:	69bb      	ldr	r3, [r7, #24]
    2c5c:	429a      	cmp	r2, r3
    2c5e:	d201      	bcs.n	2c64 <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2c60:	2301      	movs	r3, #1
    2c62:	e014      	b.n	2c8e <xCompareFunction1+0x56>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2c64:	683a      	ldr	r2, [r7, #0]
    2c66:	69bb      	ldr	r3, [r7, #24]
    2c68:	429a      	cmp	r2, r3
    2c6a:	d10f      	bne.n	2c8c <xCompareFunction1+0x54>
        {
            if( t1.xLevel < t2.xLevel )
    2c6c:	68ba      	ldr	r2, [r7, #8]
    2c6e:	6a3b      	ldr	r3, [r7, #32]
    2c70:	429a      	cmp	r2, r3
    2c72:	da01      	bge.n	2c78 <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2c74:	2301      	movs	r3, #1
    2c76:	e00a      	b.n	2c8e <xCompareFunction1+0x56>
            }
            else if( t1.xLevel == t2.xLevel && t1.xMicroStep < t2.xMicroStep )
    2c78:	68ba      	ldr	r2, [r7, #8]
    2c7a:	6a3b      	ldr	r3, [r7, #32]
    2c7c:	429a      	cmp	r2, r3
    2c7e:	d105      	bne.n	2c8c <xCompareFunction1+0x54>
    2c80:	68fa      	ldr	r2, [r7, #12]
    2c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c84:	429a      	cmp	r2, r3
    2c86:	da01      	bge.n	2c8c <xCompareFunction1+0x54>
            {
                return pdTRUE;
    2c88:	2301      	movs	r3, #1
    2c8a:	e000      	b.n	2c8e <xCompareFunction1+0x56>
            }
        }
    }
    return pdFALSE;
    2c8c:	2300      	movs	r3, #0
}
    2c8e:	4618      	mov	r0, r3
    2c90:	3710      	adds	r7, #16
    2c92:	46bd      	mov	sp, r7
    2c94:	bc90      	pop	{r4, r7}
    2c96:	4770      	bx	lr

00002c98 <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct tag t1, const struct tag t2 )
{
    2c98:	b490      	push	{r4, r7}
    2c9a:	b084      	sub	sp, #16
    2c9c:	af00      	add	r7, sp, #0
    2c9e:	463c      	mov	r4, r7
    2ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2ca4:	683a      	ldr	r2, [r7, #0]
    2ca6:	69bb      	ldr	r3, [r7, #24]
    2ca8:	429a      	cmp	r2, r3
    2caa:	d201      	bcs.n	2cb0 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2cac:	2301      	movs	r3, #1
    2cae:	e01e      	b.n	2cee <xCompareFunction2+0x56>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2cb0:	683a      	ldr	r2, [r7, #0]
    2cb2:	69bb      	ldr	r3, [r7, #24]
    2cb4:	429a      	cmp	r2, r3
    2cb6:	d119      	bne.n	2cec <xCompareFunction2+0x54>
    {
        if( t1.xTimestamp < t2.xTimestamp)
    2cb8:	687a      	ldr	r2, [r7, #4]
    2cba:	69fb      	ldr	r3, [r7, #28]
    2cbc:	429a      	cmp	r2, r3
    2cbe:	d201      	bcs.n	2cc4 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2cc0:	2301      	movs	r3, #1
    2cc2:	e014      	b.n	2cee <xCompareFunction2+0x56>
        }
        else if( t1.xTimestamp == t2.xTimestamp )
    2cc4:	687a      	ldr	r2, [r7, #4]
    2cc6:	69fb      	ldr	r3, [r7, #28]
    2cc8:	429a      	cmp	r2, r3
    2cca:	d10f      	bne.n	2cec <xCompareFunction2+0x54>
        {
            if( t1.xLevel < t2.xLevel )
    2ccc:	68ba      	ldr	r2, [r7, #8]
    2cce:	6a3b      	ldr	r3, [r7, #32]
    2cd0:	429a      	cmp	r2, r3
    2cd2:	da01      	bge.n	2cd8 <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2cd4:	2301      	movs	r3, #1
    2cd6:	e00a      	b.n	2cee <xCompareFunction2+0x56>
            }
            else if( t1.xLevel == t2.xLevel && t1.xMicroStep < t2.xMicroStep )
    2cd8:	68ba      	ldr	r2, [r7, #8]
    2cda:	6a3b      	ldr	r3, [r7, #32]
    2cdc:	429a      	cmp	r2, r3
    2cde:	d105      	bne.n	2cec <xCompareFunction2+0x54>
    2ce0:	68fa      	ldr	r2, [r7, #12]
    2ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ce4:	429a      	cmp	r2, r3
    2ce6:	da01      	bge.n	2cec <xCompareFunction2+0x54>
            {
                return pdTRUE;
    2ce8:	2301      	movs	r3, #1
    2cea:	e000      	b.n	2cee <xCompareFunction2+0x56>
            }
        }
    }

    return pdFALSE;
    2cec:	2300      	movs	r3, #0
}
    2cee:	4618      	mov	r0, r3
    2cf0:	3710      	adds	r7, #16
    2cf2:	46bd      	mov	sp, r7
    2cf4:	bc90      	pop	{r4, r7}
    2cf6:	4770      	bx	lr

00002cf8 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2cf8:	b480      	push	{r7}
    2cfa:	b087      	sub	sp, #28
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	60f8      	str	r0, [r7, #12]
    2d00:	60b9      	str	r1, [r7, #8]
    2d02:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2d08:	697b      	ldr	r3, [r7, #20]
    2d0a:	68fa      	ldr	r2, [r7, #12]
    2d0c:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2d0e:	697b      	ldr	r3, [r7, #20]
    2d10:	68ba      	ldr	r2, [r7, #8]
    2d12:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2d14:	697b      	ldr	r3, [r7, #20]
    2d16:	2200      	movs	r2, #0
    2d18:	615a      	str	r2, [r3, #20]
}
    2d1a:	371c      	adds	r7, #28
    2d1c:	46bd      	mov	sp, r7
    2d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d22:	4770      	bx	lr

00002d24 <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem, portBASE_TYPE comp)
{
    2d24:	b590      	push	{r4, r7, lr}
    2d26:	b095      	sub	sp, #84	; 0x54
    2d28:	af04      	add	r7, sp, #16
    2d2a:	6078      	str	r0, [r7, #4]
    2d2c:	6039      	str	r1, [r7, #0]
    volatile xListItem *pxIterator;
    struct tag xTagOfInsertion;
    xList * pxList; 

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	68db      	ldr	r3, [r3, #12]
    2d32:	f107 0208 	add.w	r2, r7, #8
    2d36:	4610      	mov	r0, r2
    2d38:	4619      	mov	r1, r3
    2d3a:	f7ff fe37 	bl	29ac <xEventGetxTag>

    if(comp == 1)
    2d3e:	683b      	ldr	r3, [r7, #0]
    2d40:	2b01      	cmp	r3, #1
    2d42:	d127      	bne.n	2d94 <prvEventListGenericInsert+0x70>
    {
        pxList = &xEventNonExecutableList;
    2d44:	f240 6388 	movw	r3, #1672	; 0x688
    2d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d4c:	63bb      	str	r3, [r7, #56]	; 0x38
        taskENTER_CRITICAL();
    2d4e:	f002 fff5 	bl	5d3c <vPortEnterCritical>
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2d54:	3308      	adds	r3, #8
    2d56:	63fb      	str	r3, [r7, #60]	; 0x3c
    2d58:	e002      	b.n	2d60 <prvEventListGenericInsert+0x3c>
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
    2d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d5c:	685b      	ldr	r3, [r3, #4]
    2d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(comp == 1)
    {
        pxList = &xEventNonExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
    2d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d62:	685b      	ldr	r3, [r3, #4]
    2d64:	68db      	ldr	r3, [r3, #12]
    2d66:	f107 0218 	add.w	r2, r7, #24
    2d6a:	4610      	mov	r0, r2
    2d6c:	4619      	mov	r1, r3
    2d6e:	f7ff fe1d 	bl	29ac <xEventGetxTag>
    2d72:	466c      	mov	r4, sp
    2d74:	f107 0308 	add.w	r3, r7, #8
    2d78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2d7e:	f107 0318 	add.w	r3, r7, #24
    2d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d84:	f7ff ff58 	bl	2c38 <xCompareFunction1>
    2d88:	4603      	mov	r3, r0

    if(comp == 1)
    {
        pxList = &xEventNonExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d1e5      	bne.n	2d5a <prvEventListGenericInsert+0x36>
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
        taskEXIT_CRITICAL();
    2d8e:	f002 ffeb 	bl	5d68 <vPortExitCritical>
    2d92:	e026      	b.n	2de2 <prvEventListGenericInsert+0xbe>
    }
    else 
    {
        pxList = &xEventExecutableList;
    2d94:	f240 63b0 	movw	r3, #1712	; 0x6b0
    2d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d9c:	63bb      	str	r3, [r7, #56]	; 0x38
        taskENTER_CRITICAL();
    2d9e:	f002 ffcd 	bl	5d3c <vPortEnterCritical>
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2da4:	3308      	adds	r3, #8
    2da6:	63fb      	str	r3, [r7, #60]	; 0x3c
    2da8:	e002      	b.n	2db0 <prvEventListGenericInsert+0x8c>
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
    2daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dac:	685b      	ldr	r3, [r3, #4]
    2dae:	63fb      	str	r3, [r7, #60]	; 0x3c
    else 
    {
        pxList = &xEventExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
    2db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2db2:	685b      	ldr	r3, [r3, #4]
    2db4:	68db      	ldr	r3, [r3, #12]
    2db6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2dba:	4610      	mov	r0, r2
    2dbc:	4619      	mov	r1, r3
    2dbe:	f7ff fdf5 	bl	29ac <xEventGetxTag>
    2dc2:	466c      	mov	r4, sp
    2dc4:	f107 0308 	add.w	r3, r7, #8
    2dc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
    2dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2dd4:	f7ff ff60 	bl	2c98 <xCompareFunction2>
    2dd8:	4603      	mov	r3, r0
    }
    else 
    {
        pxList = &xEventExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d1e5      	bne.n	2daa <prvEventListGenericInsert+0x86>
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
        taskEXIT_CRITICAL();
    2dde:	f002 ffc3 	bl	5d68 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2de4:	685a      	ldr	r2, [r3, #4]
    2de6:	687b      	ldr	r3, [r7, #4]
    2de8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2dea:	687b      	ldr	r3, [r7, #4]
    2dec:	685b      	ldr	r3, [r3, #4]
    2dee:	687a      	ldr	r2, [r7, #4]
    2df0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2df2:	687b      	ldr	r3, [r7, #4]
    2df4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2df6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dfa:	687a      	ldr	r2, [r7, #4]
    2dfc:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2e02:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e06:	681b      	ldr	r3, [r3, #0]
    2e08:	1c5a      	adds	r2, r3, #1
    2e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e0c:	601a      	str	r2, [r3, #0]
}
    2e0e:	3744      	adds	r7, #68	; 0x44
    2e10:	46bd      	mov	sp, r7
    2e12:	bd90      	pop	{r4, r7, pc}

00002e14 <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2e14:	b480      	push	{r7}
    2e16:	b083      	sub	sp, #12
    2e18:	af00      	add	r7, sp, #0
    2e1a:	6078      	str	r0, [r7, #4]
    2e1c:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2e1e:	683b      	ldr	r3, [r7, #0]
    2e20:	687a      	ldr	r2, [r7, #4]
    2e22:	60da      	str	r2, [r3, #12]
}
    2e24:	370c      	adds	r7, #12
    2e26:	46bd      	mov	sp, r7
    2e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e2c:	4770      	bx	lr
    2e2e:	bf00      	nop

00002e30 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData pdData)
{
    2e30:	b082      	sub	sp, #8
    2e32:	b580      	push	{r7, lr}
    2e34:	b086      	sub	sp, #24
    2e36:	af00      	add	r7, sp, #0
    2e38:	60f8      	str	r0, [r7, #12]
    2e3a:	60b9      	str	r1, [r7, #8]
    2e3c:	607a      	str	r2, [r7, #4]
    2e3e:	627b      	str	r3, [r7, #36]	; 0x24
    eveECB * pxNewEvent = NULL;
    2e40:	2300      	movs	r3, #0
    2e42:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2e44:	f002 ff7a 	bl	5d3c <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2e48:	f240 6360 	movw	r3, #1632	; 0x660
    2e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e50:	68db      	ldr	r3, [r3, #12]
    2e52:	68db      	ldr	r3, [r3, #12]
    2e54:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2e56:	697b      	ldr	r3, [r7, #20]
    2e58:	3320      	adds	r3, #32
    2e5a:	4618      	mov	r0, r3
    2e5c:	f001 f9bc 	bl	41d8 <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2e60:	697b      	ldr	r3, [r7, #20]
    2e62:	68fa      	ldr	r2, [r7, #12]
    2e64:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2e66:	68b8      	ldr	r0, [r7, #8]
    2e68:	6879      	ldr	r1, [r7, #4]
    2e6a:	697a      	ldr	r2, [r7, #20]
    2e6c:	f7ff ff44 	bl	2cf8 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = pdData;
    2e70:	697b      	ldr	r3, [r7, #20]
    2e72:	3318      	adds	r3, #24
    2e74:	f107 0224 	add.w	r2, r7, #36	; 0x24
    2e78:	e892 0003 	ldmia.w	r2, {r0, r1}
    2e7c:	e883 0003 	stmia.w	r3, {r0, r1}
    vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2e80:	697b      	ldr	r3, [r7, #20]
    2e82:	3320      	adds	r3, #32
    2e84:	6978      	ldr	r0, [r7, #20]
    2e86:	4619      	mov	r1, r3
    2e88:	f7ff ffc4 	bl	2e14 <vListIntialiseEventItem>

    taskEXIT_CRITICAL();
    2e8c:	f002 ff6c 	bl	5d68 <vPortExitCritical>

    return pxNewEvent;
    2e90:	697b      	ldr	r3, [r7, #20]
}
    2e92:	4618      	mov	r0, r3
    2e94:	3718      	adds	r7, #24
    2e96:	46bd      	mov	sp, r7
    2e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2e9c:	b002      	add	sp, #8
    2e9e:	4770      	bx	lr

00002ea0 <vEventListGenericTransit>:


// An API to transfer all executable Event Items from xEventNonExecutableList to xEventExecutablePool.
// function : transit the nonexecutable event to executable event, and update the inBoolCount of every event 
void vEventListGenericTransit() 
{
    2ea0:	b580      	push	{r7, lr}
    2ea2:	b088      	sub	sp, #32
    2ea4:	af00      	add	r7, sp, #0
    struct tag xTag;
    portBASE_TYPE pxDestination;
    portTickType xCurrentTime;

    // transmit the executable event from xEventNonExecutableList to xEventExecutablePool 
    while( listCURRENT_LIST_LENGTH( &xEventNonExecutableList) > 1 )
    2ea6:	e042      	b.n	2f2e <vEventListGenericTransit+0x8e>
    {
        temp_pxEventListItem = (xListItem *)xEventNonExecutableList.xListEnd.pxNext;
    2ea8:	f240 6388 	movw	r3, #1672	; 0x688
    2eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eb0:	68db      	ldr	r3, [r3, #12]
    2eb2:	61fb      	str	r3, [r7, #28]
        xTag= xEventGetxTag( temp_pxEventListItem->pvOwner );
    2eb4:	69fb      	ldr	r3, [r7, #28]
    2eb6:	68db      	ldr	r3, [r3, #12]
    2eb8:	1d3a      	adds	r2, r7, #4
    2eba:	4610      	mov	r0, r2
    2ebc:	4619      	mov	r1, r3
    2ebe:	f7ff fd75 	bl	29ac <xEventGetxTag>
        xCurrentTime = xTaskGetTickCount();
    2ec2:	f002 fa07 	bl	52d4 <xTaskGetTickCount>
    2ec6:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTag.xTimestamp <= xCurrentTime )
    2ec8:	68ba      	ldr	r2, [r7, #8]
    2eca:	69bb      	ldr	r3, [r7, #24]
    2ecc:	429a      	cmp	r2, r3
    2ece:	d82d      	bhi.n	2f2c <vEventListGenericTransit+0x8c>
        {
            // update the xInBoolCount of pxDestination
            pxDestination = xEventGetpxDestination( temp_pxEventListItem->pvOwner );
    2ed0:	69fb      	ldr	r3, [r7, #28]
    2ed2:	68db      	ldr	r3, [r3, #12]
    2ed4:	4618      	mov	r0, r3
    2ed6:	f7ff fd5d 	bl	2994 <xEventGetpxDestination>
    2eda:	6178      	str	r0, [r7, #20]
            xContexts[pxDestination].xInBoolCount ++ ;
    2edc:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2ee0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ee4:	6979      	ldr	r1, [r7, #20]
    2ee6:	460b      	mov	r3, r1
    2ee8:	00db      	lsls	r3, r3, #3
    2eea:	1a5b      	subs	r3, r3, r1
    2eec:	00db      	lsls	r3, r3, #3
    2eee:	4413      	add	r3, r2
    2ef0:	3334      	adds	r3, #52	; 0x34
    2ef2:	681b      	ldr	r3, [r3, #0]
    2ef4:	1c58      	adds	r0, r3, #1
    2ef6:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2efa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2efe:	6979      	ldr	r1, [r7, #20]
    2f00:	460b      	mov	r3, r1
    2f02:	00db      	lsls	r3, r3, #3
    2f04:	1a5b      	subs	r3, r3, r1
    2f06:	00db      	lsls	r3, r3, #3
    2f08:	4413      	add	r3, r2
    2f0a:	3334      	adds	r3, #52	; 0x34
    2f0c:	6018      	str	r0, [r3, #0]

            taskENTER_CRITICAL();
    2f0e:	f002 ff15 	bl	5d3c <vPortEnterCritical>
            /* remove pxListItem from xEventNonExecutableList */ 
            vListRemove(temp_pxEventListItem);
    2f12:	69f8      	ldr	r0, [r7, #28]
    2f14:	f001 f960 	bl	41d8 <vListRemove>
            /* insert the executable event into the xEventExecutablePool*/
            vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2f18:	f240 609c 	movw	r0, #1692	; 0x69c
    2f1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f20:	69f9      	ldr	r1, [r7, #28]
    2f22:	f001 f8f9 	bl	4118 <vListInsertEnd>
            taskEXIT_CRITICAL();
    2f26:	f002 ff1f 	bl	5d68 <vPortExitCritical>
    2f2a:	e000      	b.n	2f2e <vEventListGenericTransit+0x8e>
        }
        else
        {
          // no executable event
           break; 
    2f2c:	e006      	b.n	2f3c <vEventListGenericTransit+0x9c>
    struct tag xTag;
    portBASE_TYPE pxDestination;
    portTickType xCurrentTime;

    // transmit the executable event from xEventNonExecutableList to xEventExecutablePool 
    while( listCURRENT_LIST_LENGTH( &xEventNonExecutableList) > 1 )
    2f2e:	f240 6388 	movw	r3, #1672	; 0x688
    2f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f36:	681b      	ldr	r3, [r3, #0]
    2f38:	2b01      	cmp	r3, #1
    2f3a:	d8b5      	bhi.n	2ea8 <vEventListGenericTransit+0x8>
        {
          // no executable event
           break; 
        }
    }
}
    2f3c:	3720      	adds	r7, #32
    2f3e:	46bd      	mov	sp, r7
    2f40:	bd80      	pop	{r7, pc}
    2f42:	bf00      	nop

00002f44 <vEventGenericMap>:

void vEventGenericMap()
{
    2f44:	b580      	push	{r7, lr}
    2f46:	b088      	sub	sp, #32
    2f48:	af02      	add	r7, sp, #8
    eveECB * pxEvent; 
    eveECB * pxCopyEvent;
    xListItem * temp_pxEventListItem;

    // event map
    while(listCURRENT_LIST_LENGTH( &xEventNonExecutablePool ) > 0)
    2f4a:	e074      	b.n	3036 <vEventGenericMap+0xf2>
    {
        temp_pxEventListItem = (xListItem *) xEventNonExecutablePool.xListEnd.pxNext;    
    2f4c:	f240 6374 	movw	r3, #1652	; 0x674
    2f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f54:	68db      	ldr	r3, [r3, #12]
    2f56:	613b      	str	r3, [r7, #16]
        pxEvent = (eveECB *) temp_pxEventListItem->pvOwner;
    2f58:	693b      	ldr	r3, [r7, #16]
    2f5a:	68db      	ldr	r3, [r3, #12]
    2f5c:	60fb      	str	r3, [r7, #12]
        pxSource = pxEvent->pxSource;
    2f5e:	68fb      	ldr	r3, [r7, #12]
    2f60:	681b      	ldr	r3, [r3, #0]
    2f62:	60bb      	str	r3, [r7, #8]
        outs = xContexts[pxSource].xNumOfOut;
    2f64:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2f68:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f6c:	68b9      	ldr	r1, [r7, #8]
    2f6e:	460b      	mov	r3, r1
    2f70:	00db      	lsls	r3, r3, #3
    2f72:	1a5b      	subs	r3, r3, r1
    2f74:	00db      	lsls	r3, r3, #3
    2f76:	4413      	add	r3, r2
    2f78:	3310      	adds	r3, #16
    2f7a:	681b      	ldr	r3, [r3, #0]
    2f7c:	607b      	str	r3, [r7, #4]

        taskENTER_CRITICAL();
    2f7e:	f002 fedd 	bl	5d3c <vPortEnterCritical>
        vListRemove(temp_pxEventListItem);
    2f82:	6938      	ldr	r0, [r7, #16]
    2f84:	f001 f928 	bl	41d8 <vListRemove>
        // complete the information of the origin event.
        pxEvent->pxDestination = xContexts[pxSource].xOutFlag[0];
    2f88:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2f8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f90:	68b9      	ldr	r1, [r7, #8]
    2f92:	460b      	mov	r3, r1
    2f94:	00db      	lsls	r3, r3, #3
    2f96:	1a5b      	subs	r3, r3, r1
    2f98:	00db      	lsls	r3, r3, #3
    2f9a:	4413      	add	r3, r2
    2f9c:	331c      	adds	r3, #28
    2f9e:	681a      	ldr	r2, [r3, #0]
    2fa0:	68fb      	ldr	r3, [r7, #12]
    2fa2:	605a      	str	r2, [r3, #4]
        pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xTaskId;
    2fa4:	68fb      	ldr	r3, [r7, #12]
    2fa6:	6859      	ldr	r1, [r3, #4]
    2fa8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2fac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fb0:	460b      	mov	r3, r1
    2fb2:	00db      	lsls	r3, r3, #3
    2fb4:	1a5b      	subs	r3, r3, r1
    2fb6:	00db      	lsls	r3, r3, #3
    2fb8:	4413      	add	r3, r2
    2fba:	3330      	adds	r3, #48	; 0x30
    2fbc:	681a      	ldr	r2, [r3, #0]
    2fbe:	68fb      	ldr	r3, [r7, #12]
    2fc0:	611a      	str	r2, [r3, #16]
        prvEventListGenericInsert(temp_pxEventListItem,1); 
    2fc2:	6938      	ldr	r0, [r7, #16]
    2fc4:	2101      	movs	r1, #1
    2fc6:	f7ff fead 	bl	2d24 <prvEventListGenericInsert>

        // copy one event to multiples
        for(i = 1; i < outs; ++ i)
    2fca:	2301      	movs	r3, #1
    2fcc:	617b      	str	r3, [r7, #20]
    2fce:	e02c      	b.n	302a <vEventGenericMap+0xe6>
        {
            pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, pxEvent->xData);
    2fd0:	68fb      	ldr	r3, [r7, #12]
    2fd2:	6899      	ldr	r1, [r3, #8]
    2fd4:	68fb      	ldr	r3, [r7, #12]
    2fd6:	68da      	ldr	r2, [r3, #12]
    2fd8:	68fb      	ldr	r3, [r7, #12]
    2fda:	69d8      	ldr	r0, [r3, #28]
    2fdc:	9000      	str	r0, [sp, #0]
    2fde:	699b      	ldr	r3, [r3, #24]
    2fe0:	68b8      	ldr	r0, [r7, #8]
    2fe2:	f7ff ff25 	bl	2e30 <pxEventGenericCreate>
    2fe6:	6038      	str	r0, [r7, #0]
            // complete the information of the copied event.
            pxCopyEvent->xTag.xMicroStep = i;
    2fe8:	683b      	ldr	r3, [r7, #0]
    2fea:	697a      	ldr	r2, [r7, #20]
    2fec:	615a      	str	r2, [r3, #20]
            pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
    2fee:	68fb      	ldr	r3, [r7, #12]
    2ff0:	691a      	ldr	r2, [r3, #16]
    2ff2:	683b      	ldr	r3, [r7, #0]
    2ff4:	611a      	str	r2, [r3, #16]
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
    2ff6:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2ffa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ffe:	68b9      	ldr	r1, [r7, #8]
    3000:	460b      	mov	r3, r1
    3002:	00db      	lsls	r3, r3, #3
    3004:	1a5b      	subs	r3, r3, r1
    3006:	005b      	lsls	r3, r3, #1
    3008:	6979      	ldr	r1, [r7, #20]
    300a:	440b      	add	r3, r1
    300c:	3306      	adds	r3, #6
    300e:	009b      	lsls	r3, r3, #2
    3010:	4413      	add	r3, r2
    3012:	685a      	ldr	r2, [r3, #4]
    3014:	683b      	ldr	r3, [r7, #0]
    3016:	605a      	str	r2, [r3, #4]
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
    3018:	683b      	ldr	r3, [r7, #0]
    301a:	3320      	adds	r3, #32
    301c:	4618      	mov	r0, r3
    301e:	2101      	movs	r1, #1
    3020:	f7ff fe80 	bl	2d24 <prvEventListGenericInsert>
        pxEvent->pxDestination = xContexts[pxSource].xOutFlag[0];
        pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xTaskId;
        prvEventListGenericInsert(temp_pxEventListItem,1); 

        // copy one event to multiples
        for(i = 1; i < outs; ++ i)
    3024:	697b      	ldr	r3, [r7, #20]
    3026:	3301      	adds	r3, #1
    3028:	617b      	str	r3, [r7, #20]
    302a:	697a      	ldr	r2, [r7, #20]
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	429a      	cmp	r2, r3
    3030:	dbce      	blt.n	2fd0 <vEventGenericMap+0x8c>
            pxCopyEvent->xTag.xMicroStep = i;
            pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
        }
        taskEXIT_CRITICAL();
    3032:	f002 fe99 	bl	5d68 <vPortExitCritical>
    eveECB * pxEvent; 
    eveECB * pxCopyEvent;
    xListItem * temp_pxEventListItem;

    // event map
    while(listCURRENT_LIST_LENGTH( &xEventNonExecutablePool ) > 0)
    3036:	f240 6374 	movw	r3, #1652	; 0x674
    303a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    303e:	681b      	ldr	r3, [r3, #0]
    3040:	2b00      	cmp	r3, #0
    3042:	d183      	bne.n	2f4c <vEventGenericMap+0x8>
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
        }
        taskEXIT_CRITICAL();
    }
}
    3044:	3718      	adds	r7, #24
    3046:	46bd      	mov	sp, r7
    3048:	bd80      	pop	{r7, pc}
    304a:	bf00      	nop

0000304c <vEventGenericReduce>:

void vEventGenericReduce()
{
    304c:	b580      	push	{r7, lr}
    304e:	b08c      	sub	sp, #48	; 0x30
    3050:	af00      	add	r7, sp, #0
    portBASE_TYPE i, pxDestination;
    struct tag temp_tag;
    struct eventData temp_data;
    volatile xListItem * pxIterator1, *pxIterator2;
    // event reduce 
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 0 )
    3052:	f240 639c 	movw	r3, #1692	; 0x69c
    3056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    305a:	681b      	ldr	r3, [r3, #0]
    305c:	2b00      	cmp	r3, #0
    305e:	f000 80ad 	beq.w	31bc <vEventGenericReduce+0x170>
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    3062:	f240 639c 	movw	r3, #1692	; 0x69c
    3066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    306a:	68db      	ldr	r3, [r3, #12]
    306c:	62bb      	str	r3, [r7, #40]	; 0x28
    306e:	e0a0      	b.n	31b2 <vEventGenericReduce+0x166>
                pxIterator1 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
        {
            reduce_pxEventListItem = (xListItem *) pxIterator1; 
    3070:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3072:	623b      	str	r3, [r7, #32]
            pxDestination = xEventGetpxDestination(reduce_pxEventListItem->pvOwner); 
    3074:	6a3b      	ldr	r3, [r7, #32]
    3076:	68db      	ldr	r3, [r3, #12]
    3078:	4618      	mov	r0, r3
    307a:	f7ff fc8b 	bl	2994 <xEventGetpxDestination>
    307e:	61f8      	str	r0, [r7, #28]

            // if the communication between servant is multiple to one,
            // then other events for the same servant need to be found
            if( xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    3080:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3084:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3088:	69f9      	ldr	r1, [r7, #28]
    308a:	460b      	mov	r3, r1
    308c:	00db      	lsls	r3, r3, #3
    308e:	1a5b      	subs	r3, r3, r1
    3090:	00db      	lsls	r3, r3, #3
    3092:	4413      	add	r3, r2
    3094:	3334      	adds	r3, #52	; 0x34
    3096:	6818      	ldr	r0, [r3, #0]
    3098:	f240 62d8 	movw	r2, #1752	; 0x6d8
    309c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30a0:	69f9      	ldr	r1, [r7, #28]
    30a2:	460b      	mov	r3, r1
    30a4:	00db      	lsls	r3, r3, #3
    30a6:	1a5b      	subs	r3, r3, r1
    30a8:	00db      	lsls	r3, r3, #3
    30aa:	4413      	add	r3, r2
    30ac:	330c      	adds	r3, #12
    30ae:	681b      	ldr	r3, [r3, #0]
    30b0:	4298      	cmp	r0, r3
    30b2:	d17b      	bne.n	31ac <vEventGenericReduce+0x160>
            {
                taskENTER_CRITICAL();
    30b4:	f002 fe42 	bl	5d3c <vPortEnterCritical>
                if(xContexts[pxDestination].xInBoolCount > 1)
    30b8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    30bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30c0:	69f9      	ldr	r1, [r7, #28]
    30c2:	460b      	mov	r3, r1
    30c4:	00db      	lsls	r3, r3, #3
    30c6:	1a5b      	subs	r3, r3, r1
    30c8:	00db      	lsls	r3, r3, #3
    30ca:	4413      	add	r3, r2
    30cc:	3334      	adds	r3, #52	; 0x34
    30ce:	681b      	ldr	r3, [r3, #0]
    30d0:	2b01      	cmp	r3, #1
    30d2:	dd51      	ble.n	3178 <vEventGenericReduce+0x12c>
                {
                    i = 1;
    30d4:	2301      	movs	r3, #1
    30d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    30d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    30da:	685b      	ldr	r3, [r3, #4]
    30dc:	627b      	str	r3, [r7, #36]	; 0x24
    30de:	e047      	b.n	3170 <vEventGenericReduce+0x124>
                    {
                        // find another event for the same destinate servant, copy the data to the first one
                        if( xEventGetpxDestination(pxIterator2->pvOwner) == pxDestination ) 
    30e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30e2:	68db      	ldr	r3, [r3, #12]
    30e4:	4618      	mov	r0, r3
    30e6:	f7ff fc55 	bl	2994 <xEventGetpxDestination>
    30ea:	4602      	mov	r2, r0
    30ec:	69fb      	ldr	r3, [r7, #28]
    30ee:	429a      	cmp	r2, r3
    30f0:	d13b      	bne.n	316a <vEventGenericReduce+0x11e>
                        {
                            // collecting data into the first event
                            temp_data = xEventGetxData(pxIterator2->pvOwner); 
    30f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30f4:	68db      	ldr	r3, [r3, #12]
    30f6:	463a      	mov	r2, r7
    30f8:	4610      	mov	r0, r2
    30fa:	4619      	mov	r1, r3
    30fc:	f7ff fc68 	bl	29d0 <xEventGetxData>
                            ((eveECB *)reduce_pxEventListItem->pvOwner)->xData.xDataArray[i++] = temp_data.xDataArray[0];
    3100:	6a3b      	ldr	r3, [r7, #32]
    3102:	68da      	ldr	r2, [r3, #12]
    3104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3106:	1c59      	adds	r1, r3, #1
    3108:	62f9      	str	r1, [r7, #44]	; 0x2c
    310a:	6839      	ldr	r1, [r7, #0]
    310c:	3306      	adds	r3, #6
    310e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                            // set the timestamp to the biggest one
                            temp_tag = xEventGetxTag(pxIterator2->pvOwner);
    3112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3114:	68db      	ldr	r3, [r3, #12]
    3116:	f107 0208 	add.w	r2, r7, #8
    311a:	4610      	mov	r0, r2
    311c:	4619      	mov	r1, r3
    311e:	f7ff fc45 	bl	29ac <xEventGetxTag>
                            if(((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp < temp_tag.xTimestamp)
    3122:	6a3b      	ldr	r3, [r7, #32]
    3124:	68db      	ldr	r3, [r3, #12]
    3126:	68da      	ldr	r2, [r3, #12]
    3128:	68fb      	ldr	r3, [r7, #12]
    312a:	429a      	cmp	r2, r3
    312c:	d203      	bcs.n	3136 <vEventGenericReduce+0xea>
                            {
                                ((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp = temp_tag.xTimestamp;
    312e:	6a3b      	ldr	r3, [r7, #32]
    3130:	68db      	ldr	r3, [r3, #12]
    3132:	68fa      	ldr	r2, [r7, #12]
    3134:	60da      	str	r2, [r3, #12]
                            }
                            // delete the useless event, and return it back to event idle list
                            temp_pxEventListItem = (xListItem *) pxIterator2; 
    3136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3138:	61bb      	str	r3, [r7, #24]
                            pxIterator2 = pxIterator2->pxNext;
    313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    313c:	685b      	ldr	r3, [r3, #4]
    313e:	627b      	str	r3, [r7, #36]	; 0x24
                            vEventGenericDelete(temp_pxEventListItem->pvOwner); 
    3140:	69bb      	ldr	r3, [r7, #24]
    3142:	68db      	ldr	r3, [r3, #12]
    3144:	4618      	mov	r0, r3
    3146:	f000 f9fb 	bl	3540 <vEventGenericDelete>
                            if( i == xContexts[pxDestination].xInBoolCount )
    314a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    314e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3152:	69f9      	ldr	r1, [r7, #28]
    3154:	460b      	mov	r3, r1
    3156:	00db      	lsls	r3, r3, #3
    3158:	1a5b      	subs	r3, r3, r1
    315a:	00db      	lsls	r3, r3, #3
    315c:	4413      	add	r3, r2
    315e:	3334      	adds	r3, #52	; 0x34
    3160:	681a      	ldr	r2, [r3, #0]
    3162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3164:	429a      	cmp	r2, r3
    3166:	d103      	bne.n	3170 <vEventGenericReduce+0x124>
                            {
                                break;   // find all event for the same servant 
    3168:	e006      	b.n	3178 <vEventGenericReduce+0x12c>
                            }
                        }
                        else
                        {
                            pxIterator2 = pxIterator2->pxNext;
    316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    316c:	685b      	ldr	r3, [r3, #4]
    316e:	627b      	str	r3, [r7, #36]	; 0x24
            {
                taskENTER_CRITICAL();
                if(xContexts[pxDestination].xInBoolCount > 1)
                {
                    i = 1;
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    3170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3172:	4b14      	ldr	r3, [pc, #80]	; (31c4 <vEventGenericReduce+0x178>)
    3174:	429a      	cmp	r2, r3
    3176:	d1b3      	bne.n	30e0 <vEventGenericReduce+0x94>
                        {
                            pxIterator2 = pxIterator2->pxNext;
                        }
                    }
                }
                xContexts[pxDestination].xInBoolCount = 0; 
    3178:	f240 62d8 	movw	r2, #1752	; 0x6d8
    317c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3180:	69f9      	ldr	r1, [r7, #28]
    3182:	460b      	mov	r3, r1
    3184:	00db      	lsls	r3, r3, #3
    3186:	1a5b      	subs	r3, r3, r1
    3188:	00db      	lsls	r3, r3, #3
    318a:	4413      	add	r3, r2
    318c:	3334      	adds	r3, #52	; 0x34
    318e:	2200      	movs	r2, #0
    3190:	601a      	str	r2, [r3, #0]
                pxIterator1 = pxIterator1->pxNext; 
    3192:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3194:	685b      	ldr	r3, [r3, #4]
    3196:	62bb      	str	r3, [r7, #40]	; 0x28
                vListRemove(reduce_pxEventListItem);
    3198:	6a38      	ldr	r0, [r7, #32]
    319a:	f001 f81d 	bl	41d8 <vListRemove>
                prvEventListGenericInsert(reduce_pxEventListItem, 2);
    319e:	6a38      	ldr	r0, [r7, #32]
    31a0:	2102      	movs	r1, #2
    31a2:	f7ff fdbf 	bl	2d24 <prvEventListGenericInsert>
                taskEXIT_CRITICAL();
    31a6:	f002 fddf 	bl	5d68 <vPortExitCritical>
    31aa:	e002      	b.n	31b2 <vEventGenericReduce+0x166>
            }
            else
            {
                pxIterator1 = pxIterator1->pxNext;
    31ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    31ae:	685b      	ldr	r3, [r3, #4]
    31b0:	62bb      	str	r3, [r7, #40]	; 0x28
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 0 )
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    31b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    31b4:	4b03      	ldr	r3, [pc, #12]	; (31c4 <vEventGenericReduce+0x178>)
    31b6:	429a      	cmp	r2, r3
    31b8:	f47f af5a 	bne.w	3070 <vEventGenericReduce+0x24>
                pxIterator1 = pxIterator1->pxNext;
            }

        }
    }
}
    31bc:	3730      	adds	r7, #48	; 0x30
    31be:	46bd      	mov	sp, r7
    31c0:	bd80      	pop	{r7, pc}
    31c2:	bf00      	nop
    31c4:	200006a4 	.word	0x200006a4

000031c8 <pOverLap>:



static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    31c8:	b480      	push	{r7}
    31ca:	b087      	sub	sp, #28
    31cc:	af00      	add	r7, sp, #0
    31ce:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	68db      	ldr	r3, [r3, #12]
    31d4:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    31d6:	697b      	ldr	r3, [r7, #20]
    31d8:	685b      	ldr	r3, [r3, #4]
    31da:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    31dc:	697b      	ldr	r3, [r7, #20]
    31de:	68db      	ldr	r3, [r3, #12]
    31e0:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    31e2:	f240 62d8 	movw	r2, #1752	; 0x6d8
    31e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31ea:	6939      	ldr	r1, [r7, #16]
    31ec:	460b      	mov	r3, r1
    31ee:	00db      	lsls	r3, r3, #3
    31f0:	1a5b      	subs	r3, r3, r1
    31f2:	00db      	lsls	r3, r3, #3
    31f4:	4413      	add	r3, r2
    31f6:	3324      	adds	r3, #36	; 0x24
    31f8:	681a      	ldr	r2, [r3, #0]
    31fa:	68fb      	ldr	r3, [r7, #12]
    31fc:	4413      	add	r3, r2
    31fe:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    3200:	f240 6358 	movw	r3, #1624	; 0x658
    3204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3208:	681a      	ldr	r2, [r3, #0]
    320a:	68fb      	ldr	r3, [r7, #12]
    320c:	fbb3 f1f2 	udiv	r1, r3, r2
    3210:	fb02 f201 	mul.w	r2, r2, r1
    3214:	1a9b      	subs	r3, r3, r2
    3216:	2b02      	cmp	r3, #2
    3218:	d932      	bls.n	3280 <pOverLap+0xb8>
    321a:	f240 6358 	movw	r3, #1624	; 0x658
    321e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3222:	681a      	ldr	r2, [r3, #0]
    3224:	68fb      	ldr	r3, [r7, #12]
    3226:	fbb3 f1f2 	udiv	r1, r3, r2
    322a:	fb02 f201 	mul.w	r2, r2, r1
    322e:	1a9a      	subs	r2, r3, r2
    3230:	f240 6358 	movw	r3, #1624	; 0x658
    3234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3238:	681b      	ldr	r3, [r3, #0]
    323a:	3b03      	subs	r3, #3
    323c:	429a      	cmp	r2, r3
    323e:	d81f      	bhi.n	3280 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3240:	f240 6358 	movw	r3, #1624	; 0x658
    3244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3248:	681a      	ldr	r2, [r3, #0]
    324a:	68bb      	ldr	r3, [r7, #8]
    324c:	fbb3 f1f2 	udiv	r1, r3, r2
    3250:	fb02 f201 	mul.w	r2, r2, r1
    3254:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    3256:	2b02      	cmp	r3, #2
    3258:	d912      	bls.n	3280 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    325a:	f240 6358 	movw	r3, #1624	; 0x658
    325e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3262:	681a      	ldr	r2, [r3, #0]
    3264:	68bb      	ldr	r3, [r7, #8]
    3266:	fbb3 f1f2 	udiv	r1, r3, r2
    326a:	fb02 f201 	mul.w	r2, r2, r1
    326e:	1a9a      	subs	r2, r3, r2
    3270:	f240 6358 	movw	r3, #1624	; 0x658
    3274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3278:	681b      	ldr	r3, [r3, #0]
    327a:	3b03      	subs	r3, #3
    327c:	429a      	cmp	r2, r3
    327e:	d901      	bls.n	3284 <pOverLap+0xbc>
    {
        return 1;
    3280:	2301      	movs	r3, #1
    3282:	e000      	b.n	3286 <pOverLap+0xbe>
    }
    return 0;
    3284:	2300      	movs	r3, #0
}
    3286:	4618      	mov	r0, r3
    3288:	371c      	adds	r7, #28
    328a:	46bd      	mov	sp, r7
    328c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3290:	4770      	bx	lr
    3292:	bf00      	nop

00003294 <xSetTimestamp>:

static void xSetTimestamp( xListItem * pxEventListItem)
{
    3294:	b580      	push	{r7, lr}
    3296:	b084      	sub	sp, #16
    3298:	af00      	add	r7, sp, #0
    329a:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	68db      	ldr	r3, [r3, #12]
    32a0:	60fb      	str	r3, [r7, #12]
    pxEvent->xTag.xTimestamp = xFutureModelTime;
    32a2:	f240 635c 	movw	r3, #1628	; 0x65c
    32a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32aa:	681a      	ldr	r2, [r3, #0]
    32ac:	68fb      	ldr	r3, [r7, #12]
    32ae:	60da      	str	r2, [r3, #12]

    if( pOverLap(pxEventListItem )== 0 ) // not overlaped
    32b0:	6878      	ldr	r0, [r7, #4]
    32b2:	f7ff ff89 	bl	31c8 <pOverLap>
    32b6:	4603      	mov	r3, r0
    32b8:	2b00      	cmp	r3, #0
    32ba:	d122      	bne.n	3302 <xSetTimestamp+0x6e>
    {
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet; // update future model time
    32bc:	68fb      	ldr	r3, [r7, #12]
    32be:	6859      	ldr	r1, [r3, #4]
    32c0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    32c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    32c8:	460b      	mov	r3, r1
    32ca:	00db      	lsls	r3, r3, #3
    32cc:	1a5b      	subs	r3, r3, r1
    32ce:	00db      	lsls	r3, r3, #3
    32d0:	4413      	add	r3, r2
    32d2:	3324      	adds	r3, #36	; 0x24
    32d4:	681a      	ldr	r2, [r3, #0]
    32d6:	f240 635c 	movw	r3, #1628	; 0x65c
    32da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	441a      	add	r2, r3
    32e2:	f240 635c 	movw	r3, #1628	; 0x65c
    32e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ea:	601a      	str	r2, [r3, #0]
        vListRemove( pxEventListItem); 
    32ec:	6878      	ldr	r0, [r7, #4]
    32ee:	f000 ff73 	bl	41d8 <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    32f2:	f240 60c4 	movw	r0, #1732	; 0x6c4
    32f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    32fa:	6879      	ldr	r1, [r7, #4]
    32fc:	f000 ff0c 	bl	4118 <vListInsertEnd>
    3300:	e042      	b.n	3388 <xSetTimestamp+0xf4>
    }
    else  // overlaped
    {
        // set the future model time to start time of next LET
        xFutureModelTime = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;  
    3302:	f240 635c 	movw	r3, #1628	; 0x65c
    3306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    330a:	681a      	ldr	r2, [r3, #0]
    330c:	f240 6358 	movw	r3, #1624	; 0x658
    3310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	fbb2 f3f3 	udiv	r3, r2, r3
    331a:	1c5a      	adds	r2, r3, #1
    331c:	f240 6358 	movw	r3, #1624	; 0x658
    3320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3324:	681b      	ldr	r3, [r3, #0]
    3326:	fb03 f302 	mul.w	r3, r3, r2
    332a:	1cda      	adds	r2, r3, #3
    332c:	f240 635c 	movw	r3, #1628	; 0x65c
    3330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3334:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    3336:	f240 635c 	movw	r3, #1628	; 0x65c
    333a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    333e:	681a      	ldr	r2, [r3, #0]
    3340:	68fb      	ldr	r3, [r7, #12]
    3342:	60da      	str	r2, [r3, #12]
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;
    3344:	68fb      	ldr	r3, [r7, #12]
    3346:	6859      	ldr	r1, [r3, #4]
    3348:	f240 62d8 	movw	r2, #1752	; 0x6d8
    334c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3350:	460b      	mov	r3, r1
    3352:	00db      	lsls	r3, r3, #3
    3354:	1a5b      	subs	r3, r3, r1
    3356:	00db      	lsls	r3, r3, #3
    3358:	4413      	add	r3, r2
    335a:	3324      	adds	r3, #36	; 0x24
    335c:	681a      	ldr	r2, [r3, #0]
    335e:	f240 635c 	movw	r3, #1628	; 0x65c
    3362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3366:	681b      	ldr	r3, [r3, #0]
    3368:	441a      	add	r2, r3
    336a:	f240 635c 	movw	r3, #1628	; 0x65c
    336e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3372:	601a      	str	r2, [r3, #0]

        vListRemove( pxEventListItem); 
    3374:	6878      	ldr	r0, [r7, #4]
    3376:	f000 ff2f 	bl	41d8 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    337a:	f240 6074 	movw	r0, #1652	; 0x674
    337e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3382:	6879      	ldr	r1, [r7, #4]
    3384:	f000 fec8 	bl	4118 <vListInsertEnd>
    }
}
    3388:	3710      	adds	r7, #16
    338a:	46bd      	mov	sp, r7
    338c:	bd80      	pop	{r7, pc}
    338e:	bf00      	nop

00003390 <pEqualxDeadline>:

inline static portBASE_TYPE pEqualxDeadline(struct tag xTag1, struct tag xTag2)
{
    3390:	b490      	push	{r4, r7}
    3392:	b084      	sub	sp, #16
    3394:	af00      	add	r7, sp, #0
    3396:	463c      	mov	r4, r7
    3398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return (xTag1.xDeadline == xTag2.xDeadline);
    339c:	683a      	ldr	r2, [r7, #0]
    339e:	69bb      	ldr	r3, [r7, #24]
    33a0:	429a      	cmp	r2, r3
    33a2:	bf14      	ite	ne
    33a4:	2300      	movne	r3, #0
    33a6:	2301      	moveq	r3, #1
    33a8:	b2db      	uxtb	r3, r3
}
    33aa:	4618      	mov	r0, r3
    33ac:	3710      	adds	r7, #16
    33ae:	46bd      	mov	sp, r7
    33b0:	bc90      	pop	{r4, r7}
    33b2:	4770      	bx	lr

000033b4 <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    33b4:	b590      	push	{r4, r7, lr}
    33b6:	b08f      	sub	sp, #60	; 0x3c
    33b8:	af04      	add	r7, sp, #16
    xListItem * flag_pxEventListItem;
    struct tag origin_tag;
    portBASE_TYPE count = 1;
    33ba:	2301      	movs	r3, #1
    33bc:	627b      	str	r3, [r7, #36]	; 0x24

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 1 )
    33be:	f240 63b0 	movw	r3, #1712	; 0x6b0
    33c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33c6:	681b      	ldr	r3, [r3, #0]
    33c8:	2b01      	cmp	r3, #1
    33ca:	d90b      	bls.n	33e4 <xEventGenericSerialize+0x30>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    33cc:	f240 63b0 	movw	r3, #1712	; 0x6b0
    33d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33d4:	68db      	ldr	r3, [r3, #12]
    33d6:	68db      	ldr	r3, [r3, #12]
    33d8:	463a      	mov	r2, r7
    33da:	4610      	mov	r0, r2
    33dc:	4619      	mov	r1, r3
    33de:	f7ff fae5 	bl	29ac <xEventGetxTag>
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 1 )
    33e2:	e03d      	b.n	3460 <xEventGenericSerialize+0xac>
    33e4:	e03c      	b.n	3460 <xEventGenericSerialize+0xac>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    33e6:	f240 63b0 	movw	r3, #1712	; 0x6b0
    33ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ee:	68db      	ldr	r3, [r3, #12]
    33f0:	623b      	str	r3, [r7, #32]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    33f2:	6a3b      	ldr	r3, [r7, #32]
    33f4:	68db      	ldr	r3, [r3, #12]
    33f6:	4618      	mov	r0, r3
    33f8:	f7ff facc 	bl	2994 <xEventGetpxDestination>
    33fc:	4601      	mov	r1, r0
    33fe:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3402:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3406:	460b      	mov	r3, r1
    3408:	00db      	lsls	r3, r3, #3
    340a:	1a5b      	subs	r3, r3, r1
    340c:	00db      	lsls	r3, r3, #3
    340e:	4413      	add	r3, r2
    3410:	3304      	adds	r3, #4
    3412:	681b      	ldr	r3, [r3, #0]
    3414:	2b02      	cmp	r3, #2
    3416:	d119      	bne.n	344c <xEventGenericSerialize+0x98>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    3418:	6a3b      	ldr	r3, [r7, #32]
    341a:	68db      	ldr	r3, [r3, #12]
    341c:	f107 0210 	add.w	r2, r7, #16
    3420:	4610      	mov	r0, r2
    3422:	4619      	mov	r1, r3
    3424:	f7ff fac2 	bl	29ac <xEventGetxTag>
    3428:	466c      	mov	r4, sp
    342a:	463b      	mov	r3, r7
    342c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    342e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3432:	f107 0310 	add.w	r3, r7, #16
    3436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3438:	f7ff ffaa 	bl	3390 <pEqualxDeadline>
    343c:	4603      	mov	r3, r0
    343e:	2b00      	cmp	r3, #0
    3440:	d003      	beq.n	344a <xEventGenericSerialize+0x96>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                xSetTimestamp( flag_pxEventListItem);
    3442:	6a38      	ldr	r0, [r7, #32]
    3444:	f7ff ff26 	bl	3294 <xSetTimestamp>
    3448:	e00a      	b.n	3460 <xEventGenericSerialize+0xac>
            }
            else
            {
                break;
    344a:	e010      	b.n	346e <xEventGenericSerialize+0xba>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    344c:	6a38      	ldr	r0, [r7, #32]
    344e:	f000 fec3 	bl	41d8 <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    3452:	f240 60c4 	movw	r0, #1732	; 0x6c4
    3456:	f2c2 0000 	movt	r0, #8192	; 0x2000
    345a:	6a39      	ldr	r1, [r7, #32]
    345c:	f000 fe5c 	bl	4118 <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 1 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 1 )
    3460:	f240 63b0 	movw	r3, #1712	; 0x6b0
    3464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3468:	681b      	ldr	r3, [r3, #0]
    346a:	2b01      	cmp	r3, #1
    346c:	d8bb      	bhi.n	33e6 <xEventGenericSerialize+0x32>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    346e:	f240 63c4 	movw	r3, #1732	; 0x6c4
    3472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3476:	681b      	ldr	r3, [r3, #0]
    3478:	2b00      	cmp	r3, #0
    347a:	d00a      	beq.n	3492 <xEventGenericSerialize+0xde>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    347c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    3480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3484:	68db      	ldr	r3, [r3, #12]
    3486:	68db      	ldr	r3, [r3, #12]
    3488:	4618      	mov	r0, r3
    348a:	f7ff fa83 	bl	2994 <xEventGetpxDestination>
    348e:	4603      	mov	r3, r0
    3490:	e001      	b.n	3496 <xEventGenericSerialize+0xe2>
    }
    return -1; // no event avaliable
    3492:	f04f 33ff 	mov.w	r3, #4294967295
}
    3496:	4618      	mov	r0, r3
    3498:	372c      	adds	r7, #44	; 0x2c
    349a:	46bd      	mov	sp, r7
    349c:	bd90      	pop	{r4, r7, pc}
    349e:	bf00      	nop

000034a0 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    34a0:	b580      	push	{r7, lr}
    34a2:	b082      	sub	sp, #8
    34a4:	af00      	add	r7, sp, #0
    34a6:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	3320      	adds	r3, #32
    34ac:	f240 6074 	movw	r0, #1652	; 0x674
    34b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34b4:	4619      	mov	r1, r3
    34b6:	f000 fe2f 	bl	4118 <vListInsertEnd>
}
    34ba:	3708      	adds	r7, #8
    34bc:	46bd      	mov	sp, r7
    34be:	bd80      	pop	{r7, pc}

000034c0 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    34c0:	b580      	push	{r7, lr}
    34c2:	b082      	sub	sp, #8
    34c4:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant

    taskENTER_CRITICAL();
    34c6:	f002 fc39 	bl	5d3c <vPortEnterCritical>
    xListItem * pxFlag = (xListItem *)xEventReadyList.xListEnd.pxNext;
    34ca:	f240 63c4 	movw	r3, #1732	; 0x6c4
    34ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34d2:	68db      	ldr	r3, [r3, #12]
    34d4:	607b      	str	r3, [r7, #4]
    vListRemove(pxFlag);
    34d6:	6878      	ldr	r0, [r7, #4]
    34d8:	f000 fe7e 	bl	41d8 <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxFlag);  // reuse event, which will be update by servant 
    34dc:	f240 6074 	movw	r0, #1652	; 0x674
    34e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34e4:	6879      	ldr	r1, [r7, #4]
    34e6:	f000 fe17 	bl	4118 <vListInsertEnd>
    taskEXIT_CRITICAL();
    34ea:	f002 fc3d 	bl	5d68 <vPortExitCritical>

    return (xEventHandle) pxFlag->pvOwner;
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	68db      	ldr	r3, [r3, #12]
}
    34f2:	4618      	mov	r0, r3
    34f4:	3708      	adds	r7, #8
    34f6:	46bd      	mov	sp, r7
    34f8:	bd80      	pop	{r7, pc}
    34fa:	bf00      	nop

000034fc <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData xData)
{
    34fc:	b480      	push	{r7}
    34fe:	b087      	sub	sp, #28
    3500:	af00      	add	r7, sp, #0
    3502:	60f8      	str	r0, [r7, #12]
    3504:	60b9      	str	r1, [r7, #8]
    3506:	607a      	str	r2, [r7, #4]
    3508:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    350a:	68fb      	ldr	r3, [r7, #12]
    350c:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    350e:	697b      	ldr	r3, [r7, #20]
    3510:	68ba      	ldr	r2, [r7, #8]
    3512:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    3514:	697b      	ldr	r3, [r7, #20]
    3516:	687a      	ldr	r2, [r7, #4]
    3518:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    351a:	697b      	ldr	r3, [r7, #20]
    351c:	683a      	ldr	r2, [r7, #0]
    351e:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    3520:	697b      	ldr	r3, [r7, #20]
    3522:	2200      	movs	r2, #0
    3524:	615a      	str	r2, [r3, #20]
    pxEvent->xData = xData;
    3526:	697b      	ldr	r3, [r7, #20]
    3528:	3318      	adds	r3, #24
    352a:	f107 0220 	add.w	r2, r7, #32
    352e:	e892 0003 	ldmia.w	r2, {r0, r1}
    3532:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3536:	371c      	adds	r7, #28
    3538:	46bd      	mov	sp, r7
    353a:	f85d 7b04 	ldr.w	r7, [sp], #4
    353e:	4770      	bx	lr

00003540 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    3540:	b580      	push	{r7, lr}
    3542:	b084      	sub	sp, #16
    3544:	af00      	add	r7, sp, #0
    3546:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    3548:	f002 fbf8 	bl	5d3c <vPortEnterCritical>

    xListItem * pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    354c:	687b      	ldr	r3, [r7, #4]
    354e:	3320      	adds	r3, #32
    3550:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    3552:	68f8      	ldr	r0, [r7, #12]
    3554:	f000 fe40 	bl	41d8 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    3558:	f240 6060 	movw	r0, #1632	; 0x660
    355c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3560:	68f9      	ldr	r1, [r7, #12]
    3562:	f000 fdd9 	bl	4118 <vListInsertEnd>

    taskEXIT_CRITICAL();
    3566:	f002 fbff 	bl	5d68 <vPortExitCritical>
}
    356a:	3710      	adds	r7, #16
    356c:	46bd      	mov	sp, r7
    356e:	bd80      	pop	{r7, pc}

00003570 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3570:	b580      	push	{r7, lr}
    3572:	b082      	sub	sp, #8
    3574:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    3576:	2300      	movs	r3, #0
    3578:	607b      	str	r3, [r7, #4]
    357a:	e033      	b.n	35e4 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    357c:	2001      	movs	r0, #1
    357e:	2100      	movs	r1, #0
    3580:	2203      	movs	r2, #3
    3582:	f000 fe9f 	bl	42c4 <xQueueGenericCreate>
    3586:	4601      	mov	r1, r0
    3588:	f241 1320 	movw	r3, #4384	; 0x1120
    358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3590:	687a      	ldr	r2, [r7, #4]
    3592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    3596:	f241 1320 	movw	r3, #4384	; 0x1120
    359a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    359e:	687a      	ldr	r2, [r7, #4]
    35a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35a4:	2b00      	cmp	r3, #0
    35a6:	d00c      	beq.n	35c2 <vSemaphoreInitialise+0x52>
    35a8:	f241 1320 	movw	r3, #4384	; 0x1120
    35ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35b0:	687a      	ldr	r2, [r7, #4]
    35b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35b6:	4618      	mov	r0, r3
    35b8:	2100      	movs	r1, #0
    35ba:	2200      	movs	r2, #0
    35bc:	2300      	movs	r3, #0
    35be:	f000 ff0f 	bl	43e0 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    35c2:	f241 1320 	movw	r3, #4384	; 0x1120
    35c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ca:	687a      	ldr	r2, [r7, #4]
    35cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35d0:	4618      	mov	r0, r3
    35d2:	2100      	movs	r1, #0
    35d4:	f04f 32ff 	mov.w	r2, #4294967295
    35d8:	2300      	movs	r3, #0
    35da:	f000 ffc7 	bl	456c <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    35de:	687b      	ldr	r3, [r7, #4]
    35e0:	3301      	adds	r3, #1
    35e2:	607b      	str	r3, [r7, #4]
    35e4:	687b      	ldr	r3, [r7, #4]
    35e6:	2b03      	cmp	r3, #3
    35e8:	ddc8      	ble.n	357c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    35ea:	3708      	adds	r7, #8
    35ec:	46bd      	mov	sp, r7
    35ee:	bd80      	pop	{r7, pc}

000035f0 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    35f0:	b480      	push	{r7}
    35f2:	b085      	sub	sp, #20
    35f4:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    35f6:	2300      	movs	r3, #0
    35f8:	60fb      	str	r3, [r7, #12]
    35fa:	e0a1      	b.n	3740 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    35fc:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3600:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3604:	68f9      	ldr	r1, [r7, #12]
    3606:	460b      	mov	r3, r1
    3608:	00db      	lsls	r3, r3, #3
    360a:	1a5b      	subs	r3, r3, r1
    360c:	00db      	lsls	r3, r3, #3
    360e:	4413      	add	r3, r2
    3610:	68fa      	ldr	r2, [r7, #12]
    3612:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    3614:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3618:	f2c2 0200 	movt	r2, #8192	; 0x2000
    361c:	68f9      	ldr	r1, [r7, #12]
    361e:	460b      	mov	r3, r1
    3620:	00db      	lsls	r3, r3, #3
    3622:	1a5b      	subs	r3, r3, r1
    3624:	00db      	lsls	r3, r3, #3
    3626:	4413      	add	r3, r2
    3628:	3304      	adds	r3, #4
    362a:	2202      	movs	r2, #2
    362c:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    362e:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3632:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3636:	68f9      	ldr	r1, [r7, #12]
    3638:	460b      	mov	r3, r1
    363a:	00db      	lsls	r3, r3, #3
    363c:	1a5b      	subs	r3, r3, r1
    363e:	00db      	lsls	r3, r3, #3
    3640:	4413      	add	r3, r2
    3642:	3308      	adds	r3, #8
    3644:	2201      	movs	r2, #1
    3646:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    3648:	f240 62d8 	movw	r2, #1752	; 0x6d8
    364c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3650:	68f9      	ldr	r1, [r7, #12]
    3652:	460b      	mov	r3, r1
    3654:	00db      	lsls	r3, r3, #3
    3656:	1a5b      	subs	r3, r3, r1
    3658:	00db      	lsls	r3, r3, #3
    365a:	4413      	add	r3, r2
    365c:	330c      	adds	r3, #12
    365e:	2200      	movs	r2, #0
    3660:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    3662:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3666:	f2c2 0200 	movt	r2, #8192	; 0x2000
    366a:	68f9      	ldr	r1, [r7, #12]
    366c:	460b      	mov	r3, r1
    366e:	00db      	lsls	r3, r3, #3
    3670:	1a5b      	subs	r3, r3, r1
    3672:	00db      	lsls	r3, r3, #3
    3674:	4413      	add	r3, r2
    3676:	3310      	adds	r3, #16
    3678:	2200      	movs	r2, #0
    367a:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    367c:	f240 03c4 	movw	r3, #196	; 0xc4
    3680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3684:	68fa      	ldr	r2, [r7, #12]
    3686:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    368a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    368e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3692:	68f9      	ldr	r1, [r7, #12]
    3694:	460b      	mov	r3, r1
    3696:	00db      	lsls	r3, r3, #3
    3698:	1a5b      	subs	r3, r3, r1
    369a:	00db      	lsls	r3, r3, #3
    369c:	4413      	add	r3, r2
    369e:	3324      	adds	r3, #36	; 0x24
    36a0:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    36a2:	f240 4374 	movw	r3, #1140	; 0x474
    36a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36aa:	68fa      	ldr	r2, [r7, #12]
    36ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36b0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    36b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36b8:	68f9      	ldr	r1, [r7, #12]
    36ba:	460b      	mov	r3, r1
    36bc:	00db      	lsls	r3, r3, #3
    36be:	1a5b      	subs	r3, r3, r1
    36c0:	00db      	lsls	r3, r3, #3
    36c2:	4413      	add	r3, r2
    36c4:	3328      	adds	r3, #40	; 0x28
    36c6:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    36c8:	f240 1380 	movw	r3, #384	; 0x180
    36cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36d0:	68fa      	ldr	r2, [r7, #12]
    36d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36d6:	f240 62d8 	movw	r2, #1752	; 0x6d8
    36da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36de:	68f9      	ldr	r1, [r7, #12]
    36e0:	460b      	mov	r3, r1
    36e2:	00db      	lsls	r3, r3, #3
    36e4:	1a5b      	subs	r3, r3, r1
    36e6:	00db      	lsls	r3, r3, #3
    36e8:	4413      	add	r3, r2
    36ea:	3330      	adds	r3, #48	; 0x30
    36ec:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    36ee:	f240 1380 	movw	r3, #384	; 0x180
    36f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36f6:	68fa      	ldr	r2, [r7, #12]
    36f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    36fc:	f240 0328 	movw	r3, #40	; 0x28
    3700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3704:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3708:	f240 62d8 	movw	r2, #1752	; 0x6d8
    370c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3710:	68f9      	ldr	r1, [r7, #12]
    3712:	460b      	mov	r3, r1
    3714:	00db      	lsls	r3, r3, #3
    3716:	1a5b      	subs	r3, r3, r1
    3718:	00db      	lsls	r3, r3, #3
    371a:	4413      	add	r3, r2
    371c:	332c      	adds	r3, #44	; 0x2c
    371e:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    3720:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3724:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3728:	68f9      	ldr	r1, [r7, #12]
    372a:	460b      	mov	r3, r1
    372c:	00db      	lsls	r3, r3, #3
    372e:	1a5b      	subs	r3, r3, r1
    3730:	00db      	lsls	r3, r3, #3
    3732:	4413      	add	r3, r2
    3734:	3334      	adds	r3, #52	; 0x34
    3736:	2200      	movs	r2, #0
    3738:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    373a:	68fb      	ldr	r3, [r7, #12]
    373c:	3301      	adds	r3, #1
    373e:	60fb      	str	r3, [r7, #12]
    3740:	68fb      	ldr	r3, [r7, #12]
    3742:	2b2e      	cmp	r3, #46	; 0x2e
    3744:	f77f af5a 	ble.w	35fc <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3748:	2300      	movs	r3, #0
    374a:	60fb      	str	r3, [r7, #12]
    374c:	e028      	b.n	37a0 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    374e:	f240 035c 	movw	r3, #92	; 0x5c
    3752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3756:	68fa      	ldr	r2, [r7, #12]
    3758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    375c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3760:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3764:	460b      	mov	r3, r1
    3766:	00db      	lsls	r3, r3, #3
    3768:	1a5b      	subs	r3, r3, r1
    376a:	00db      	lsls	r3, r3, #3
    376c:	4413      	add	r3, r2
    376e:	3304      	adds	r3, #4
    3770:	2201      	movs	r2, #1
    3772:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    3774:	f240 0390 	movw	r3, #144	; 0x90
    3778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    377c:	68fa      	ldr	r2, [r7, #12]
    377e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3782:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3786:	f2c2 0200 	movt	r2, #8192	; 0x2000
    378a:	460b      	mov	r3, r1
    378c:	00db      	lsls	r3, r3, #3
    378e:	1a5b      	subs	r3, r3, r1
    3790:	00db      	lsls	r3, r3, #3
    3792:	4413      	add	r3, r2
    3794:	3304      	adds	r3, #4
    3796:	2203      	movs	r2, #3
    3798:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    379a:	68fb      	ldr	r3, [r7, #12]
    379c:	3301      	adds	r3, #1
    379e:	60fb      	str	r3, [r7, #12]
    37a0:	68fb      	ldr	r3, [r7, #12]
    37a2:	2b0c      	cmp	r3, #12
    37a4:	ddd3      	ble.n	374e <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    37a6:	2300      	movs	r3, #0
    37a8:	60fb      	str	r3, [r7, #12]
    37aa:	e084      	b.n	38b6 <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    37ac:	f240 223c 	movw	r2, #572	; 0x23c
    37b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37b4:	68f9      	ldr	r1, [r7, #12]
    37b6:	460b      	mov	r3, r1
    37b8:	005b      	lsls	r3, r3, #1
    37ba:	440b      	add	r3, r1
    37bc:	009b      	lsls	r3, r3, #2
    37be:	4413      	add	r3, r2
    37c0:	3304      	adds	r3, #4
    37c2:	681b      	ldr	r3, [r3, #0]
    37c4:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    37c6:	f240 223c 	movw	r2, #572	; 0x23c
    37ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37ce:	68f9      	ldr	r1, [r7, #12]
    37d0:	460b      	mov	r3, r1
    37d2:	005b      	lsls	r3, r3, #1
    37d4:	440b      	add	r3, r1
    37d6:	009b      	lsls	r3, r3, #2
    37d8:	4413      	add	r3, r2
    37da:	3308      	adds	r3, #8
    37dc:	681b      	ldr	r3, [r3, #0]
    37de:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    37e0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    37e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37e8:	68b9      	ldr	r1, [r7, #8]
    37ea:	460b      	mov	r3, r1
    37ec:	00db      	lsls	r3, r3, #3
    37ee:	1a5b      	subs	r3, r3, r1
    37f0:	00db      	lsls	r3, r3, #3
    37f2:	4413      	add	r3, r2
    37f4:	3310      	adds	r3, #16
    37f6:	6818      	ldr	r0, [r3, #0]
    37f8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    37fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3800:	68b9      	ldr	r1, [r7, #8]
    3802:	460b      	mov	r3, r1
    3804:	00db      	lsls	r3, r3, #3
    3806:	1a5b      	subs	r3, r3, r1
    3808:	005b      	lsls	r3, r3, #1
    380a:	4403      	add	r3, r0
    380c:	3306      	adds	r3, #6
    380e:	009b      	lsls	r3, r3, #2
    3810:	4413      	add	r3, r2
    3812:	687a      	ldr	r2, [r7, #4]
    3814:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    3816:	f240 62d8 	movw	r2, #1752	; 0x6d8
    381a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    381e:	68b9      	ldr	r1, [r7, #8]
    3820:	460b      	mov	r3, r1
    3822:	00db      	lsls	r3, r3, #3
    3824:	1a5b      	subs	r3, r3, r1
    3826:	00db      	lsls	r3, r3, #3
    3828:	4413      	add	r3, r2
    382a:	3310      	adds	r3, #16
    382c:	681b      	ldr	r3, [r3, #0]
    382e:	1c58      	adds	r0, r3, #1
    3830:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3834:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3838:	68b9      	ldr	r1, [r7, #8]
    383a:	460b      	mov	r3, r1
    383c:	00db      	lsls	r3, r3, #3
    383e:	1a5b      	subs	r3, r3, r1
    3840:	00db      	lsls	r3, r3, #3
    3842:	4413      	add	r3, r2
    3844:	3310      	adds	r3, #16
    3846:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    3848:	f240 62d8 	movw	r2, #1752	; 0x6d8
    384c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3850:	6879      	ldr	r1, [r7, #4]
    3852:	460b      	mov	r3, r1
    3854:	00db      	lsls	r3, r3, #3
    3856:	1a5b      	subs	r3, r3, r1
    3858:	00db      	lsls	r3, r3, #3
    385a:	4413      	add	r3, r2
    385c:	330c      	adds	r3, #12
    385e:	6818      	ldr	r0, [r3, #0]
    3860:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3864:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3868:	6879      	ldr	r1, [r7, #4]
    386a:	460b      	mov	r3, r1
    386c:	00db      	lsls	r3, r3, #3
    386e:	1a5b      	subs	r3, r3, r1
    3870:	005b      	lsls	r3, r3, #1
    3872:	4403      	add	r3, r0
    3874:	3304      	adds	r3, #4
    3876:	009b      	lsls	r3, r3, #2
    3878:	4413      	add	r3, r2
    387a:	68ba      	ldr	r2, [r7, #8]
    387c:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    387e:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3882:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3886:	6879      	ldr	r1, [r7, #4]
    3888:	460b      	mov	r3, r1
    388a:	00db      	lsls	r3, r3, #3
    388c:	1a5b      	subs	r3, r3, r1
    388e:	00db      	lsls	r3, r3, #3
    3890:	4413      	add	r3, r2
    3892:	330c      	adds	r3, #12
    3894:	681b      	ldr	r3, [r3, #0]
    3896:	1c58      	adds	r0, r3, #1
    3898:	f240 62d8 	movw	r2, #1752	; 0x6d8
    389c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38a0:	6879      	ldr	r1, [r7, #4]
    38a2:	460b      	mov	r3, r1
    38a4:	00db      	lsls	r3, r3, #3
    38a6:	1a5b      	subs	r3, r3, r1
    38a8:	00db      	lsls	r3, r3, #3
    38aa:	4413      	add	r3, r2
    38ac:	330c      	adds	r3, #12
    38ae:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38b0:	68fb      	ldr	r3, [r7, #12]
    38b2:	3301      	adds	r3, #1
    38b4:	60fb      	str	r3, [r7, #12]
    38b6:	f240 233c 	movw	r3, #572	; 0x23c
    38ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38be:	681a      	ldr	r2, [r3, #0]
    38c0:	68fb      	ldr	r3, [r7, #12]
    38c2:	429a      	cmp	r2, r3
    38c4:	f73f af72 	bgt.w	37ac <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    38c8:	3714      	adds	r7, #20
    38ca:	46bd      	mov	sp, r7
    38cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    38d0:	4770      	bx	lr
    38d2:	bf00      	nop

000038d4 <vSensor>:

void vSensor( void * pvParameter )
{
    38d4:	b580      	push	{r7, lr}
    38d6:	b090      	sub	sp, #64	; 0x40
    38d8:	af02      	add	r7, sp, #8
    38da:	6078      	str	r0, [r7, #4]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    38dc:	f241 1320 	movw	r3, #4384	; 0x1120
    38e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e4:	685b      	ldr	r3, [r3, #4]
    38e6:	4618      	mov	r0, r3
    38e8:	2100      	movs	r1, #0
    38ea:	f04f 32ff 	mov.w	r2, #4294967295
    38ee:	2300      	movs	r3, #0
    38f0:	f000 fe3c 	bl	456c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    38f4:	e05b      	b.n	39ae <vSensor+0xda>
        {
            if(boolFlag == 0)
    38f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38f8:	2b00      	cmp	r3, #0
    38fa:	d100      	bne.n	38fe <vSensor+0x2a>
                continue;
    38fc:	e057      	b.n	39ae <vSensor+0xda>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    38fe:	f7ff fddf 	bl	34c0 <pxEventGenericReceive>
    3902:	6338      	str	r0, [r7, #48]	; 0x30
            xMyFlag = xEventGetpxDestination( pxEvent );
    3904:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3906:	f7ff f845 	bl	2994 <xEventGetpxDestination>
    390a:	62f8      	str	r0, [r7, #44]	; 0x2c
            xMyData = xEventGetxData( pxEvent );
    390c:	f107 031c 	add.w	r3, r7, #28
    3910:	4618      	mov	r0, r3
    3912:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3914:	f7ff f85c 	bl	29d0 <xEventGetxData>
            xMyTag = xEventGetxTag( pxEvent );
    3918:	f107 030c 	add.w	r3, r7, #12
    391c:	4618      	mov	r0, r3
    391e:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3920:	f7ff f844 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    3924:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3928:	f2c2 0200 	movt	r2, #8192	; 0x2000
    392c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    392e:	460b      	mov	r3, r1
    3930:	00db      	lsls	r3, r3, #3
    3932:	1a5b      	subs	r3, r3, r1
    3934:	00db      	lsls	r3, r3, #3
    3936:	4413      	add	r3, r2
    3938:	332c      	adds	r3, #44	; 0x2c
    393a:	681b      	ldr	r3, [r3, #0]
    393c:	62bb      	str	r3, [r7, #40]	; 0x28
            xContexts[xMyFlag].xCount ++;
    393e:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3942:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3948:	460b      	mov	r3, r1
    394a:	00db      	lsls	r3, r3, #3
    394c:	1a5b      	subs	r3, r3, r1
    394e:	00db      	lsls	r3, r3, #3
    3950:	4413      	add	r3, r2
    3952:	3308      	adds	r3, #8
    3954:	681b      	ldr	r3, [r3, #0]
    3956:	1c58      	adds	r0, r3, #1
    3958:	f240 62d8 	movw	r2, #1752	; 0x6d8
    395c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3960:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3962:	460b      	mov	r3, r1
    3964:	00db      	lsls	r3, r3, #3
    3966:	1a5b      	subs	r3, r3, r1
    3968:	00db      	lsls	r3, r3, #3
    396a:	4413      	add	r3, r2
    396c:	3308      	adds	r3, #8
    396e:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag.xTimestamp + INPUT;   
    3970:	693b      	ldr	r3, [r7, #16]
    3972:	3303      	adds	r3, #3
    3974:	627b      	str	r3, [r7, #36]	; 0x24
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    3976:	f240 635c 	movw	r3, #1628	; 0x65c
    397a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3980:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    3982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3984:	f013 fd80 	bl	17488 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3988:	f001 fca4 	bl	52d4 <xTaskGetTickCount>
    398c:	4603      	mov	r3, r0
    398e:	4618      	mov	r0, r3
    3990:	f013 fd7a 	bl	17488 <vPrintNumber>
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
    3994:	466b      	mov	r3, sp
    3996:	f107 021c 	add.w	r2, r7, #28
    399a:	e892 0003 	ldmia.w	r2, {r0, r1}
    399e:	e883 0003 	stmia.w	r3, {r0, r1}
    39a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    39a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    39a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    39a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39aa:	f7ff fda7 	bl	34fc <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    39ae:	f7fe ffab 	bl	2908 <xIsERLNull>
    39b2:	6378      	str	r0, [r7, #52]	; 0x34
    39b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39b6:	f1b3 3fff 	cmp.w	r3, #4294967295
    39ba:	d19c      	bne.n	38f6 <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    39bc:	f241 1320 	movw	r3, #4384	; 0x1120
    39c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39c4:	681b      	ldr	r3, [r3, #0]
    39c6:	4618      	mov	r0, r3
    39c8:	2100      	movs	r1, #0
    39ca:	2200      	movs	r2, #0
    39cc:	2300      	movs	r3, #0
    39ce:	f000 fd07 	bl	43e0 <xQueueGenericSend>
    }
    39d2:	e783      	b.n	38dc <vSensor+0x8>

000039d4 <vServant>:
}

void vServant( void * pvParameter )
{
    39d4:	b580      	push	{r7, lr}
    39d6:	b090      	sub	sp, #64	; 0x40
    39d8:	af02      	add	r7, sp, #8
    39da:	6078      	str	r0, [r7, #4]
    struct eventData xMyData;
    struct tag xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    39dc:	f241 1320 	movw	r3, #4384	; 0x1120
    39e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39e4:	689b      	ldr	r3, [r3, #8]
    39e6:	4618      	mov	r0, r3
    39e8:	2100      	movs	r1, #0
    39ea:	f04f 32ff 	mov.w	r2, #4294967295
    39ee:	2300      	movs	r3, #0
    39f0:	f000 fdbc 	bl	456c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    39f4:	e092      	b.n	3b1c <vServant+0x148>
        {
            if(boolFlag == 0)
    39f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39f8:	2b00      	cmp	r3, #0
    39fa:	d100      	bne.n	39fe <vServant+0x2a>
                continue;
    39fc:	e08e      	b.n	3b1c <vServant+0x148>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    39fe:	f7ff fd5f 	bl	34c0 <pxEventGenericReceive>
    3a02:	62f8      	str	r0, [r7, #44]	; 0x2c
            xMyFlag = xEventGetpxDestination( pxEvent );
    3a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3a06:	f7fe ffc5 	bl	2994 <xEventGetpxDestination>
    3a0a:	62b8      	str	r0, [r7, #40]	; 0x28
            xMyData = xEventGetxData( pxEvent );
    3a0c:	f107 0318 	add.w	r3, r7, #24
    3a10:	4618      	mov	r0, r3
    3a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3a14:	f7fe ffdc 	bl	29d0 <xEventGetxData>
            xMyTag = xEventGetxTag( pxEvent );
    3a18:	f107 0308 	add.w	r3, r7, #8
    3a1c:	4618      	mov	r0, r3
    3a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3a20:	f7fe ffc4 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    3a24:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3a28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3a2e:	460b      	mov	r3, r1
    3a30:	00db      	lsls	r3, r3, #3
    3a32:	1a5b      	subs	r3, r3, r1
    3a34:	00db      	lsls	r3, r3, #3
    3a36:	4413      	add	r3, r2
    3a38:	332c      	adds	r3, #44	; 0x2c
    3a3a:	681b      	ldr	r3, [r3, #0]
    3a3c:	627b      	str	r3, [r7, #36]	; 0x24
            xContexts[xMyFlag].xCount ++;
    3a3e:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3a42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3a48:	460b      	mov	r3, r1
    3a4a:	00db      	lsls	r3, r3, #3
    3a4c:	1a5b      	subs	r3, r3, r1
    3a4e:	00db      	lsls	r3, r3, #3
    3a50:	4413      	add	r3, r2
    3a52:	3308      	adds	r3, #8
    3a54:	681b      	ldr	r3, [r3, #0]
    3a56:	1c58      	adds	r0, r3, #1
    3a58:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3a5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3a62:	460b      	mov	r3, r1
    3a64:	00db      	lsls	r3, r3, #3
    3a66:	1a5b      	subs	r3, r3, r1
    3a68:	00db      	lsls	r3, r3, #3
    3a6a:	4413      	add	r3, r2
    3a6c:	3308      	adds	r3, #8
    3a6e:	6018      	str	r0, [r3, #0]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    3a70:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3a74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3a7a:	460b      	mov	r3, r1
    3a7c:	00db      	lsls	r3, r3, #3
    3a7e:	1a5b      	subs	r3, r3, r1
    3a80:	00db      	lsls	r3, r3, #3
    3a82:	4413      	add	r3, r2
    3a84:	331c      	adds	r3, #28
    3a86:	681b      	ldr	r3, [r3, #0]
    3a88:	623b      	str	r3, [r7, #32]
            switch(xContexts[pxDestination].xType)
    3a8a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3a8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a92:	6a39      	ldr	r1, [r7, #32]
    3a94:	460b      	mov	r3, r1
    3a96:	00db      	lsls	r3, r3, #3
    3a98:	1a5b      	subs	r3, r3, r1
    3a9a:	00db      	lsls	r3, r3, #3
    3a9c:	4413      	add	r3, r2
    3a9e:	3304      	adds	r3, #4
    3aa0:	681b      	ldr	r3, [r3, #0]
    3aa2:	2b02      	cmp	r3, #2
    3aa4:	d002      	beq.n	3aac <vServant+0xd8>
    3aa6:	2b03      	cmp	r3, #3
    3aa8:	d010      	beq.n	3acc <vServant+0xf8>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
                    break;
                default:
                    break;
    3aaa:	e021      	b.n	3af0 <vServant+0x11c>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag.xTimestamp + xContexts[xMyFlag].xLet;
    3aac:	68f8      	ldr	r0, [r7, #12]
    3aae:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3ab2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3ab8:	460b      	mov	r3, r1
    3aba:	00db      	lsls	r3, r3, #3
    3abc:	1a5b      	subs	r3, r3, r1
    3abe:	00db      	lsls	r3, r3, #3
    3ac0:	4413      	add	r3, r2
    3ac2:	3324      	adds	r3, #36	; 0x24
    3ac4:	681b      	ldr	r3, [r3, #0]
    3ac6:	4403      	add	r3, r0
    3ac8:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
    3aca:	e011      	b.n	3af0 <vServant+0x11c>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
    3acc:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3ad0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3ad6:	460b      	mov	r3, r1
    3ad8:	00db      	lsls	r3, r3, #3
    3ada:	1a5b      	subs	r3, r3, r1
    3adc:	00db      	lsls	r3, r3, #3
    3ade:	4413      	add	r3, r2
    3ae0:	3308      	adds	r3, #8
    3ae2:	681b      	ldr	r3, [r3, #0]
    3ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3ae6:	fb02 f303 	mul.w	r3, r2, r3
    3aea:	3b03      	subs	r3, #3
    3aec:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
    3aee:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3af2:	f013 fcc9 	bl	17488 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3af6:	f001 fbed 	bl	52d4 <xTaskGetTickCount>
    3afa:	4603      	mov	r3, r0
    3afc:	4618      	mov	r0, r3
    3afe:	f013 fcc3 	bl	17488 <vPrintNumber>
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
    3b02:	466b      	mov	r3, sp
    3b04:	f107 0218 	add.w	r2, r7, #24
    3b08:	e892 0003 	ldmia.w	r2, {r0, r1}
    3b0c:	e883 0003 	stmia.w	r3, {r0, r1}
    3b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b18:	f7ff fcf0 	bl	34fc <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3b1c:	f7fe fef4 	bl	2908 <xIsERLNull>
    3b20:	6338      	str	r0, [r7, #48]	; 0x30
    3b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3b24:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b28:	f47f af65 	bne.w	39f6 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3b2c:	f241 1320 	movw	r3, #4384	; 0x1120
    3b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b34:	681b      	ldr	r3, [r3, #0]
    3b36:	4618      	mov	r0, r3
    3b38:	2100      	movs	r1, #0
    3b3a:	2200      	movs	r2, #0
    3b3c:	2300      	movs	r3, #0
    3b3e:	f000 fc4f 	bl	43e0 <xQueueGenericSend>
    }
    3b42:	e74b      	b.n	39dc <vServant+0x8>

00003b44 <vActuator>:

}

void vActuator( void * pvParameter )
{
    3b44:	b580      	push	{r7, lr}
    3b46:	b090      	sub	sp, #64	; 0x40
    3b48:	af02      	add	r7, sp, #8
    3b4a:	6078      	str	r0, [r7, #4]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3b4c:	f241 1320 	movw	r3, #4384	; 0x1120
    3b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b54:	68db      	ldr	r3, [r3, #12]
    3b56:	4618      	mov	r0, r3
    3b58:	2100      	movs	r1, #0
    3b5a:	f04f 32ff 	mov.w	r2, #4294967295
    3b5e:	2300      	movs	r3, #0
    3b60:	f000 fd04 	bl	456c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3b64:	e055      	b.n	3c12 <vActuator+0xce>
        {
            if(boolFlag == 0)
    3b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b68:	2b00      	cmp	r3, #0
    3b6a:	d100      	bne.n	3b6e <vActuator+0x2a>
                continue;
    3b6c:	e051      	b.n	3c12 <vActuator+0xce>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3b6e:	f7ff fca7 	bl	34c0 <pxEventGenericReceive>
    3b72:	6338      	str	r0, [r7, #48]	; 0x30
            xMyFlag = xEventGetpxDestination( pxEvent );
    3b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3b76:	f7fe ff0d 	bl	2994 <xEventGetpxDestination>
    3b7a:	62f8      	str	r0, [r7, #44]	; 0x2c
            xMyData = xEventGetxData( pxEvent );
    3b7c:	f107 031c 	add.w	r3, r7, #28
    3b80:	4618      	mov	r0, r3
    3b82:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b84:	f7fe ff24 	bl	29d0 <xEventGetxData>
            xMyTag = xEventGetxTag( pxEvent );
    3b88:	f107 030c 	add.w	r3, r7, #12
    3b8c:	4618      	mov	r0, r3
    3b8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b90:	f7fe ff0c 	bl	29ac <xEventGetxTag>
            xPeriod = xContexts[xMyFlag].xPeriod;
    3b94:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3b98:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3b9e:	460b      	mov	r3, r1
    3ba0:	00db      	lsls	r3, r3, #3
    3ba2:	1a5b      	subs	r3, r3, r1
    3ba4:	00db      	lsls	r3, r3, #3
    3ba6:	4413      	add	r3, r2
    3ba8:	332c      	adds	r3, #44	; 0x2c
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	62bb      	str	r3, [r7, #40]	; 0x28
            xContexts[xMyFlag].xCount ++;
    3bae:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3bb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3bb8:	460b      	mov	r3, r1
    3bba:	00db      	lsls	r3, r3, #3
    3bbc:	1a5b      	subs	r3, r3, r1
    3bbe:	00db      	lsls	r3, r3, #3
    3bc0:	4413      	add	r3, r2
    3bc2:	3308      	adds	r3, #8
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	1c58      	adds	r0, r3, #1
    3bc8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3bcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3bd2:	460b      	mov	r3, r1
    3bd4:	00db      	lsls	r3, r3, #3
    3bd6:	1a5b      	subs	r3, r3, r1
    3bd8:	00db      	lsls	r3, r3, #3
    3bda:	4413      	add	r3, r2
    3bdc:	3308      	adds	r3, #8
    3bde:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag.xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3be0:	693b      	ldr	r3, [r7, #16]
    3be2:	3303      	adds	r3, #3
    3be4:	627b      	str	r3, [r7, #36]	; 0x24
            vPrintNumber(xMyFlag);
    3be6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3be8:	f013 fc4e 	bl	17488 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3bec:	f001 fb72 	bl	52d4 <xTaskGetTickCount>
    3bf0:	4603      	mov	r3, r0
    3bf2:	4618      	mov	r0, r3
    3bf4:	f013 fc48 	bl	17488 <vPrintNumber>
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
    3bf8:	466b      	mov	r3, sp
    3bfa:	f107 021c 	add.w	r2, r7, #28
    3bfe:	e892 0003 	ldmia.w	r2, {r0, r1}
    3c02:	e883 0003 	stmia.w	r3, {r0, r1}
    3c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3c08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c0e:	f7ff fc75 	bl	34fc <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3c12:	f7fe fe79 	bl	2908 <xIsERLNull>
    3c16:	6378      	str	r0, [r7, #52]	; 0x34
    3c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c1e:	d1a2      	bne.n	3b66 <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3c20:	f241 1320 	movw	r3, #4384	; 0x1120
    3c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c28:	681b      	ldr	r3, [r3, #0]
    3c2a:	4618      	mov	r0, r3
    3c2c:	2100      	movs	r1, #0
    3c2e:	2200      	movs	r2, #0
    3c30:	2300      	movs	r3, #0
    3c32:	f000 fbd5 	bl	43e0 <xQueueGenericSend>
    }
    3c36:	e789      	b.n	3b4c <vActuator+0x8>

00003c38 <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	b084      	sub	sp, #16
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3c40:	f241 1320 	movw	r3, #4384	; 0x1120
    3c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c48:	681b      	ldr	r3, [r3, #0]
    3c4a:	4618      	mov	r0, r3
    3c4c:	2100      	movs	r1, #0
    3c4e:	f04f 32ff 	mov.w	r2, #4294967295
    3c52:	2300      	movs	r3, #0
    3c54:	f000 fc8a 	bl	456c <xQueueGenericReceive>
        vPrintString("Actuator\n\r");
    3c58:	f648 00e0 	movw	r0, #35040	; 0x88e0
    3c5c:	f2c0 0001 	movt	r0, #1
    3c60:	f013 fbf8 	bl	17454 <vPrintString>

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventMap();
    3c64:	f7ff f96e 	bl	2f44 <vEventGenericMap>

        // transit the events from nonexecutable event list to executable event list
        vEventListTransit();
    3c68:	f7ff f91a 	bl	2ea0 <vEventListGenericTransit>
 
        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3c6c:	f7ff f9ee 	bl	304c <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3c70:	f7ff fba0 	bl	33b4 <xEventGenericSerialize>
    3c74:	60f8      	str	r0, [r7, #12]

        switch(xContexts[pxDestination].xType)
    3c76:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3c7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c7e:	68f9      	ldr	r1, [r7, #12]
    3c80:	460b      	mov	r3, r1
    3c82:	00db      	lsls	r3, r3, #3
    3c84:	1a5b      	subs	r3, r3, r1
    3c86:	00db      	lsls	r3, r3, #3
    3c88:	4413      	add	r3, r2
    3c8a:	3304      	adds	r3, #4
    3c8c:	681b      	ldr	r3, [r3, #0]
    3c8e:	2b02      	cmp	r3, #2
    3c90:	d010      	beq.n	3cb4 <vR_Servant+0x7c>
    3c92:	2b03      	cmp	r3, #3
    3c94:	d01a      	beq.n	3ccc <vR_Servant+0x94>
    3c96:	2b01      	cmp	r3, #1
    3c98:	d000      	beq.n	3c9c <vR_Servant+0x64>
                break;
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
                break;
            default:
                break;
    3c9a:	e023      	b.n	3ce4 <vR_Servant+0xac>
        pxDestination = xEventSerialize(); 

        switch(xContexts[pxDestination].xType)
        {
            case 1:
                xSemaphoreGive( xBinarySemaphore[1] );
    3c9c:	f241 1320 	movw	r3, #4384	; 0x1120
    3ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca4:	685b      	ldr	r3, [r3, #4]
    3ca6:	4618      	mov	r0, r3
    3ca8:	2100      	movs	r1, #0
    3caa:	2200      	movs	r2, #0
    3cac:	2300      	movs	r3, #0
    3cae:	f000 fb97 	bl	43e0 <xQueueGenericSend>
                break;
    3cb2:	e017      	b.n	3ce4 <vR_Servant+0xac>
            case 2:
                xSemaphoreGive( xBinarySemaphore[2] );
    3cb4:	f241 1320 	movw	r3, #4384	; 0x1120
    3cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cbc:	689b      	ldr	r3, [r3, #8]
    3cbe:	4618      	mov	r0, r3
    3cc0:	2100      	movs	r1, #0
    3cc2:	2200      	movs	r2, #0
    3cc4:	2300      	movs	r3, #0
    3cc6:	f000 fb8b 	bl	43e0 <xQueueGenericSend>
                break;
    3cca:	e00b      	b.n	3ce4 <vR_Servant+0xac>
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
    3ccc:	f241 1320 	movw	r3, #4384	; 0x1120
    3cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd4:	68db      	ldr	r3, [r3, #12]
    3cd6:	4618      	mov	r0, r3
    3cd8:	2100      	movs	r1, #0
    3cda:	2200      	movs	r2, #0
    3cdc:	2300      	movs	r3, #0
    3cde:	f000 fb7f 	bl	43e0 <xQueueGenericSend>
                break;
    3ce2:	bf00      	nop
            default:
                break;
                // no event available 
        }
    }
    3ce4:	e7ac      	b.n	3c40 <vR_Servant+0x8>
    3ce6:	bf00      	nop

00003ce8 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3ce8:	b480      	push	{r7}
    3cea:	b083      	sub	sp, #12
    3cec:	af00      	add	r7, sp, #0
    3cee:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3cf0:	370c      	adds	r7, #12
    3cf2:	46bd      	mov	sp, r7
    3cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf8:	4770      	bx	lr
    3cfa:	bf00      	nop

00003cfc <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3cfc:	b580      	push	{r7, lr}
    3cfe:	b082      	sub	sp, #8
    3d00:	af00      	add	r7, sp, #0
    3d02:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3d04:	f012 f9e4 	bl	160d0 <last_radio_from_ppm>
}
    3d08:	3708      	adds	r7, #8
    3d0a:	46bd      	mov	sp, r7
    3d0c:	bd80      	pop	{r7, pc}
    3d0e:	bf00      	nop

00003d10 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3d10:	b480      	push	{r7}
    3d12:	b083      	sub	sp, #12
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3d18:	370c      	adds	r7, #12
    3d1a:	46bd      	mov	sp, r7
    3d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d20:	4770      	bx	lr
    3d22:	bf00      	nop

00003d24 <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3d24:	b480      	push	{r7}
    3d26:	b083      	sub	sp, #12
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
}
    3d2c:	370c      	adds	r7, #12
    3d2e:	46bd      	mov	sp, r7
    3d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d34:	4770      	bx	lr
    3d36:	bf00      	nop

00003d38 <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3d38:	b480      	push	{r7}
    3d3a:	b083      	sub	sp, #12
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	6078      	str	r0, [r7, #4]
}
    3d40:	370c      	adds	r7, #12
    3d42:	46bd      	mov	sp, r7
    3d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d48:	4770      	bx	lr
    3d4a:	bf00      	nop

00003d4c <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b082      	sub	sp, #8
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3d54:	f012 fd76 	bl	16844 <to_autopilot_from_last_radio>
}
    3d58:	3708      	adds	r7, #8
    3d5a:	46bd      	mov	sp, r7
    3d5c:	bd80      	pop	{r7, pc}
    3d5e:	bf00      	nop

00003d60 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3d60:	b580      	push	{r7, lr}
    3d62:	b082      	sub	sp, #8
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3d68:	f012 fcaa 	bl	166c0 <spi_reset>
}
    3d6c:	3708      	adds	r7, #8
    3d6e:	46bd      	mov	sp, r7
    3d70:	bd80      	pop	{r7, pc}
    3d72:	bf00      	nop

00003d74 <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3d74:	b480      	push	{r7}
    3d76:	b083      	sub	sp, #12
    3d78:	af00      	add	r7, sp, #0
    3d7a:	6078      	str	r0, [r7, #4]
}
    3d7c:	370c      	adds	r7, #12
    3d7e:	46bd      	mov	sp, r7
    3d80:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d84:	4770      	bx	lr
    3d86:	bf00      	nop

00003d88 <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3d88:	b480      	push	{r7}
    3d8a:	b083      	sub	sp, #12
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
}
    3d90:	370c      	adds	r7, #12
    3d92:	46bd      	mov	sp, r7
    3d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d98:	4770      	bx	lr
    3d9a:	bf00      	nop

00003d9c <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3d9c:	b580      	push	{r7, lr}
    3d9e:	b082      	sub	sp, #8
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3da4:	f012 fe96 	bl	16ad4 <check_mega128_values_task>
}
    3da8:	3708      	adds	r7, #8
    3daa:	46bd      	mov	sp, r7
    3dac:	bd80      	pop	{r7, pc}
    3dae:	bf00      	nop

00003db0 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3db0:	b480      	push	{r7}
    3db2:	b083      	sub	sp, #12
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
}
    3db8:	370c      	adds	r7, #12
    3dba:	46bd      	mov	sp, r7
    3dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc0:	4770      	bx	lr
    3dc2:	bf00      	nop

00003dc4 <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3dc4:	b480      	push	{r7}
    3dc6:	b083      	sub	sp, #12
    3dc8:	af00      	add	r7, sp, #0
    3dca:	6078      	str	r0, [r7, #4]
}
    3dcc:	370c      	adds	r7, #12
    3dce:	46bd      	mov	sp, r7
    3dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd4:	4770      	bx	lr
    3dd6:	bf00      	nop

00003dd8 <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b082      	sub	sp, #8
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3de0:	f012 ff50 	bl	16c84 <servo_transmit>
}
    3de4:	3708      	adds	r7, #8
    3de6:	46bd      	mov	sp, r7
    3de8:	bd80      	pop	{r7, pc}
    3dea:	bf00      	nop

00003dec <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3dec:	b480      	push	{r7}
    3dee:	b083      	sub	sp, #12
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
}
    3df4:	370c      	adds	r7, #12
    3df6:	46bd      	mov	sp, r7
    3df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dfc:	4770      	bx	lr
    3dfe:	bf00      	nop

00003e00 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3e00:	b480      	push	{r7}
    3e02:	b083      	sub	sp, #12
    3e04:	af00      	add	r7, sp, #0
    3e06:	6078      	str	r0, [r7, #4]
}
    3e08:	370c      	adds	r7, #12
    3e0a:	46bd      	mov	sp, r7
    3e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e10:	4770      	bx	lr
    3e12:	bf00      	nop

00003e14 <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3e14:	b580      	push	{r7, lr}
    3e16:	b082      	sub	sp, #8
    3e18:	af00      	add	r7, sp, #0
    3e1a:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3e1c:	f012 fe50 	bl	16ac0 <check_failsafe_task>
}
    3e20:	3708      	adds	r7, #8
    3e22:	46bd      	mov	sp, r7
    3e24:	bd80      	pop	{r7, pc}
    3e26:	bf00      	nop

00003e28 <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3e28:	b480      	push	{r7}
    3e2a:	b083      	sub	sp, #12
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	6078      	str	r0, [r7, #4]
}
    3e30:	370c      	adds	r7, #12
    3e32:	46bd      	mov	sp, r7
    3e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop

00003e3c <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3e3c:	b480      	push	{r7}
    3e3e:	b083      	sub	sp, #12
    3e40:	af00      	add	r7, sp, #0
    3e42:	6078      	str	r0, [r7, #4]
}
    3e44:	370c      	adds	r7, #12
    3e46:	46bd      	mov	sp, r7
    3e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4c:	4770      	bx	lr
    3e4e:	bf00      	nop

00003e50 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b082      	sub	sp, #8
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3e58:	f009 f8cc 	bl	cff4 <radio_control_task>
}
    3e5c:	3708      	adds	r7, #8
    3e5e:	46bd      	mov	sp, r7
    3e60:	bd80      	pop	{r7, pc}
    3e62:	bf00      	nop

00003e64 <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3e64:	b580      	push	{r7, lr}
    3e66:	b082      	sub	sp, #8
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3e6c:	f00d ff74 	bl	11d58 <ir_gain_calib>
}
    3e70:	3708      	adds	r7, #8
    3e72:	46bd      	mov	sp, r7
    3e74:	bd80      	pop	{r7, pc}
    3e76:	bf00      	nop

00003e78 <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3e78:	b480      	push	{r7}
    3e7a:	b083      	sub	sp, #12
    3e7c:	af00      	add	r7, sp, #0
    3e7e:	6078      	str	r0, [r7, #4]
}
    3e80:	370c      	adds	r7, #12
    3e82:	46bd      	mov	sp, r7
    3e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e88:	4770      	bx	lr
    3e8a:	bf00      	nop

00003e8c <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3e8c:	b480      	push	{r7}
    3e8e:	b083      	sub	sp, #12
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
}
    3e94:	370c      	adds	r7, #12
    3e96:	46bd      	mov	sp, r7
    3e98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e9c:	4770      	bx	lr
    3e9e:	bf00      	nop

00003ea0 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3ea0:	b580      	push	{r7, lr}
    3ea2:	b082      	sub	sp, #8
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3ea8:	f00d ff18 	bl	11cdc <ir_update>
}
    3eac:	3708      	adds	r7, #8
    3eae:	46bd      	mov	sp, r7
    3eb0:	bd80      	pop	{r7, pc}
    3eb2:	bf00      	nop

00003eb4 <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3eb4:	b580      	push	{r7, lr}
    3eb6:	b082      	sub	sp, #8
    3eb8:	af00      	add	r7, sp, #0
    3eba:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3ebc:	f011 f996 	bl	151ec <estimator_update_state_infrared>
}
    3ec0:	3708      	adds	r7, #8
    3ec2:	46bd      	mov	sp, r7
    3ec4:	bd80      	pop	{r7, pc}
    3ec6:	bf00      	nop

00003ec8 <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3ec8:	b580      	push	{r7, lr}
    3eca:	b082      	sub	sp, #8
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3ed0:	f00d ff72 	bl	11db8 <roll_pitch_pid_run>
}
    3ed4:	3708      	adds	r7, #8
    3ed6:	46bd      	mov	sp, r7
    3ed8:	bd80      	pop	{r7, pc}
    3eda:	bf00      	nop

00003edc <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3edc:	b480      	push	{r7}
    3ede:	b083      	sub	sp, #12
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	6078      	str	r0, [r7, #4]
}
    3ee4:	370c      	adds	r7, #12
    3ee6:	46bd      	mov	sp, r7
    3ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eec:	4770      	bx	lr
    3eee:	bf00      	nop

00003ef0 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3ef0:	b480      	push	{r7}
    3ef2:	b083      	sub	sp, #12
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	6078      	str	r0, [r7, #4]
}
    3ef8:	370c      	adds	r7, #12
    3efa:	46bd      	mov	sp, r7
    3efc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f00:	4770      	bx	lr
    3f02:	bf00      	nop

00003f04 <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3f04:	b580      	push	{r7, lr}
    3f06:	b082      	sub	sp, #8
    3f08:	af00      	add	r7, sp, #0
    3f0a:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3f0c:	f00d f958 	bl	111c0 <link_fbw_send>
}
    3f10:	3708      	adds	r7, #8
    3f12:	46bd      	mov	sp, r7
    3f14:	bd80      	pop	{r7, pc}
    3f16:	bf00      	nop

00003f18 <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3f18:	b480      	push	{r7}
    3f1a:	b083      	sub	sp, #12
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
    3f20:	370c      	adds	r7, #12
    3f22:	46bd      	mov	sp, r7
    3f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f28:	4770      	bx	lr
    3f2a:	bf00      	nop

00003f2c <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    3f2c:	b480      	push	{r7}
    3f2e:	b083      	sub	sp, #12
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
}
    3f34:	370c      	adds	r7, #12
    3f36:	46bd      	mov	sp, r7
    3f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f3c:	4770      	bx	lr
    3f3e:	bf00      	nop

00003f40 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    3f40:	b580      	push	{r7, lr}
    3f42:	b082      	sub	sp, #8
    3f44:	af00      	add	r7, sp, #0
    3f46:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    3f48:	f00d fc12 	bl	11770 <parse_gps_msg>
}
    3f4c:	3708      	adds	r7, #8
    3f4e:	46bd      	mov	sp, r7
    3f50:	bd80      	pop	{r7, pc}
    3f52:	bf00      	nop

00003f54 <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    3f54:	b580      	push	{r7, lr}
    3f56:	b082      	sub	sp, #8
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3f5c:	f00a fe30 	bl	ebc0 <send_gps_pos>
    send_radIR();
    3f60:	f00b fff4 	bl	ff4c <send_radIR>
    send_takeOff();
    3f64:	f00c fdec 	bl	10b40 <send_takeOff>
}
    3f68:	3708      	adds	r7, #8
    3f6a:	46bd      	mov	sp, r7
    3f6c:	bd80      	pop	{r7, pc}
    3f6e:	bf00      	nop

00003f70 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    3f70:	b480      	push	{r7}
    3f72:	b083      	sub	sp, #12
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
    3f78:	370c      	adds	r7, #12
    3f7a:	46bd      	mov	sp, r7
    3f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f80:	4770      	bx	lr
    3f82:	bf00      	nop

00003f84 <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    3f84:	b480      	push	{r7}
    3f86:	b083      	sub	sp, #12
    3f88:	af00      	add	r7, sp, #0
    3f8a:	6078      	str	r0, [r7, #4]
}
    3f8c:	370c      	adds	r7, #12
    3f8e:	46bd      	mov	sp, r7
    3f90:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f94:	4770      	bx	lr
    3f96:	bf00      	nop

00003f98 <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    3f98:	b580      	push	{r7, lr}
    3f9a:	b082      	sub	sp, #8
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    3fa0:	f010 fea6 	bl	14cf0 <nav_home>
}
    3fa4:	3708      	adds	r7, #8
    3fa6:	46bd      	mov	sp, r7
    3fa8:	bd80      	pop	{r7, pc}
    3faa:	bf00      	nop

00003fac <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b082      	sub	sp, #8
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    3fb4:	f010 fec2 	bl	14d3c <nav_update>
}
    3fb8:	3708      	adds	r7, #8
    3fba:	46bd      	mov	sp, r7
    3fbc:	bd80      	pop	{r7, pc}
    3fbe:	bf00      	nop

00003fc0 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    3fc0:	b580      	push	{r7, lr}
    3fc2:	b082      	sub	sp, #8
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    3fc8:	f00d ffe2 	bl	11f90 <course_pid_run>
}
    3fcc:	3708      	adds	r7, #8
    3fce:	46bd      	mov	sp, r7
    3fd0:	bd80      	pop	{r7, pc}
    3fd2:	bf00      	nop

00003fd4 <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    3fd4:	b480      	push	{r7}
    3fd6:	b083      	sub	sp, #12
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
    3fdc:	370c      	adds	r7, #12
    3fde:	46bd      	mov	sp, r7
    3fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fe4:	4770      	bx	lr
    3fe6:	bf00      	nop

00003fe8 <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    3fe8:	b480      	push	{r7}
    3fea:	b083      	sub	sp, #12
    3fec:	af00      	add	r7, sp, #0
    3fee:	6078      	str	r0, [r7, #4]
}
    3ff0:	370c      	adds	r7, #12
    3ff2:	46bd      	mov	sp, r7
    3ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff8:	4770      	bx	lr
    3ffa:	bf00      	nop

00003ffc <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    3ffc:	b580      	push	{r7, lr}
    3ffe:	b082      	sub	sp, #8
    4000:	af00      	add	r7, sp, #0
    4002:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    4004:	f00e fa4c 	bl	124a0 <altitude_pid_run>
}
    4008:	3708      	adds	r7, #8
    400a:	46bd      	mov	sp, r7
    400c:	bd80      	pop	{r7, pc}
    400e:	bf00      	nop

00004010 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    4010:	b480      	push	{r7}
    4012:	b083      	sub	sp, #12
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
    4018:	370c      	adds	r7, #12
    401a:	46bd      	mov	sp, r7
    401c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4020:	4770      	bx	lr
    4022:	bf00      	nop

00004024 <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    4024:	b480      	push	{r7}
    4026:	b083      	sub	sp, #12
    4028:	af00      	add	r7, sp, #0
    402a:	6078      	str	r0, [r7, #4]
}
    402c:	370c      	adds	r7, #12
    402e:	46bd      	mov	sp, r7
    4030:	f85d 7b04 	ldr.w	r7, [sp], #4
    4034:	4770      	bx	lr
    4036:	bf00      	nop

00004038 <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    4038:	b580      	push	{r7, lr}
    403a:	b082      	sub	sp, #8
    403c:	af00      	add	r7, sp, #0
    403e:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    4040:	f00e f85e 	bl	12100 <climb_pid_run>
}
    4044:	3708      	adds	r7, #8
    4046:	46bd      	mov	sp, r7
    4048:	bd80      	pop	{r7, pc}
    404a:	bf00      	nop

0000404c <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    404c:	b480      	push	{r7}
    404e:	b083      	sub	sp, #12
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
    4054:	370c      	adds	r7, #12
    4056:	46bd      	mov	sp, r7
    4058:	f85d 7b04 	ldr.w	r7, [sp], #4
    405c:	4770      	bx	lr
    405e:	bf00      	nop

00004060 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    4060:	b480      	push	{r7}
    4062:	b083      	sub	sp, #12
    4064:	af00      	add	r7, sp, #0
    4066:	6078      	str	r0, [r7, #4]
}
    4068:	370c      	adds	r7, #12
    406a:	46bd      	mov	sp, r7
    406c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4070:	4770      	bx	lr
    4072:	bf00      	nop

00004074 <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    4074:	b580      	push	{r7, lr}
    4076:	b082      	sub	sp, #8
    4078:	af00      	add	r7, sp, #0
    407a:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    407c:	f003 fa82 	bl	7584 <send_boot>
    send_attitude();
    4080:	f004 fa50 	bl	8524 <send_attitude>
    send_adc();
    4084:	f004 ff42 	bl	8f0c <send_adc>
    send_settings();
    4088:	f005 f9c8 	bl	941c <send_settings>
    send_desired();
    408c:	f005 fdca 	bl	9c24 <send_desired>
    send_bat();
    4090:	f006 fcf8 	bl	aa84 <send_bat>
    send_climb();
    4094:	f007 f8ac 	bl	b1f0 <send_climb>
    send_mode();
    4098:	f007 fe1c 	bl	bcd4 <send_mode>
    send_debug();
    409c:	f008 f8ee 	bl	c27c <send_debug>
    send_nav_ref();
    40a0:	f008 fbc2 	bl	c828 <send_nav_ref>
}
    40a4:	3708      	adds	r7, #8
    40a6:	46bd      	mov	sp, r7
    40a8:	bd80      	pop	{r7, pc}
    40aa:	bf00      	nop

000040ac <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    40ac:	b480      	push	{r7}
    40ae:	b083      	sub	sp, #12
    40b0:	af00      	add	r7, sp, #0
    40b2:	6078      	str	r0, [r7, #4]
    40b4:	370c      	adds	r7, #12
    40b6:	46bd      	mov	sp, r7
    40b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40bc:	4770      	bx	lr
    40be:	bf00      	nop

000040c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    40c0:	b480      	push	{r7}
    40c2:	b083      	sub	sp, #12
    40c4:	af00      	add	r7, sp, #0
    40c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    40c8:	687b      	ldr	r3, [r7, #4]
    40ca:	f103 0208 	add.w	r2, r3, #8
    40ce:	687b      	ldr	r3, [r7, #4]
    40d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	f04f 32ff 	mov.w	r2, #4294967295
    40d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	f103 0208 	add.w	r2, r3, #8
    40e0:	687b      	ldr	r3, [r7, #4]
    40e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    40e4:	687b      	ldr	r3, [r7, #4]
    40e6:	f103 0208 	add.w	r2, r3, #8
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	2200      	movs	r2, #0
    40f2:	601a      	str	r2, [r3, #0]
}
    40f4:	370c      	adds	r7, #12
    40f6:	46bd      	mov	sp, r7
    40f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40fc:	4770      	bx	lr
    40fe:	bf00      	nop

00004100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    4100:	b480      	push	{r7}
    4102:	b083      	sub	sp, #12
    4104:	af00      	add	r7, sp, #0
    4106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4108:	687b      	ldr	r3, [r7, #4]
    410a:	2200      	movs	r2, #0
    410c:	611a      	str	r2, [r3, #16]
}
    410e:	370c      	adds	r7, #12
    4110:	46bd      	mov	sp, r7
    4112:	f85d 7b04 	ldr.w	r7, [sp], #4
    4116:	4770      	bx	lr

00004118 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    4118:	b480      	push	{r7}
    411a:	b085      	sub	sp, #20
    411c:	af00      	add	r7, sp, #0
    411e:	6078      	str	r0, [r7, #4]
    4120:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    4122:	687b      	ldr	r3, [r7, #4]
    4124:	685b      	ldr	r3, [r3, #4]
    4126:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    4128:	68fb      	ldr	r3, [r7, #12]
    412a:	685a      	ldr	r2, [r3, #4]
    412c:	683b      	ldr	r3, [r7, #0]
    412e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	685a      	ldr	r2, [r3, #4]
    4134:	683b      	ldr	r3, [r7, #0]
    4136:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4138:	68fb      	ldr	r3, [r7, #12]
    413a:	685b      	ldr	r3, [r3, #4]
    413c:	683a      	ldr	r2, [r7, #0]
    413e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4140:	68fb      	ldr	r3, [r7, #12]
    4142:	683a      	ldr	r2, [r7, #0]
    4144:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	683a      	ldr	r2, [r7, #0]
    414a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    414c:	683b      	ldr	r3, [r7, #0]
    414e:	687a      	ldr	r2, [r7, #4]
    4150:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	681b      	ldr	r3, [r3, #0]
    4156:	1c5a      	adds	r2, r3, #1
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	601a      	str	r2, [r3, #0]
}
    415c:	3714      	adds	r7, #20
    415e:	46bd      	mov	sp, r7
    4160:	f85d 7b04 	ldr.w	r7, [sp], #4
    4164:	4770      	bx	lr
    4166:	bf00      	nop

00004168 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    4168:	b480      	push	{r7}
    416a:	b085      	sub	sp, #20
    416c:	af00      	add	r7, sp, #0
    416e:	6078      	str	r0, [r7, #4]
    4170:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    4172:	683b      	ldr	r3, [r7, #0]
    4174:	681b      	ldr	r3, [r3, #0]
    4176:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    4178:	68bb      	ldr	r3, [r7, #8]
    417a:	f1b3 3fff 	cmp.w	r3, #4294967295
    417e:	d103      	bne.n	4188 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	691b      	ldr	r3, [r3, #16]
    4184:	60fb      	str	r3, [r7, #12]
    4186:	e00c      	b.n	41a2 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	3308      	adds	r3, #8
    418c:	60fb      	str	r3, [r7, #12]
    418e:	e002      	b.n	4196 <vListInsert+0x2e>
    4190:	68fb      	ldr	r3, [r7, #12]
    4192:	685b      	ldr	r3, [r3, #4]
    4194:	60fb      	str	r3, [r7, #12]
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	685b      	ldr	r3, [r3, #4]
    419a:	681a      	ldr	r2, [r3, #0]
    419c:	68bb      	ldr	r3, [r7, #8]
    419e:	429a      	cmp	r2, r3
    41a0:	d9f6      	bls.n	4190 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    41a2:	68fb      	ldr	r3, [r7, #12]
    41a4:	685a      	ldr	r2, [r3, #4]
    41a6:	683b      	ldr	r3, [r7, #0]
    41a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    41aa:	683b      	ldr	r3, [r7, #0]
    41ac:	685b      	ldr	r3, [r3, #4]
    41ae:	683a      	ldr	r2, [r7, #0]
    41b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    41b2:	683b      	ldr	r3, [r7, #0]
    41b4:	68fa      	ldr	r2, [r7, #12]
    41b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    41b8:	68fb      	ldr	r3, [r7, #12]
    41ba:	683a      	ldr	r2, [r7, #0]
    41bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    41be:	683b      	ldr	r3, [r7, #0]
    41c0:	687a      	ldr	r2, [r7, #4]
    41c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    41c4:	687b      	ldr	r3, [r7, #4]
    41c6:	681b      	ldr	r3, [r3, #0]
    41c8:	1c5a      	adds	r2, r3, #1
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	601a      	str	r2, [r3, #0]
}
    41ce:	3714      	adds	r7, #20
    41d0:	46bd      	mov	sp, r7
    41d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    41d6:	4770      	bx	lr

000041d8 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    41d8:	b480      	push	{r7}
    41da:	b085      	sub	sp, #20
    41dc:	af00      	add	r7, sp, #0
    41de:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	685b      	ldr	r3, [r3, #4]
    41e4:	687a      	ldr	r2, [r7, #4]
    41e6:	6892      	ldr	r2, [r2, #8]
    41e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    41ea:	687b      	ldr	r3, [r7, #4]
    41ec:	689b      	ldr	r3, [r3, #8]
    41ee:	687a      	ldr	r2, [r7, #4]
    41f0:	6852      	ldr	r2, [r2, #4]
    41f2:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	691b      	ldr	r3, [r3, #16]
    41f8:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    41fa:	68fb      	ldr	r3, [r7, #12]
    41fc:	685a      	ldr	r2, [r3, #4]
    41fe:	687b      	ldr	r3, [r7, #4]
    4200:	429a      	cmp	r2, r3
    4202:	d103      	bne.n	420c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	689a      	ldr	r2, [r3, #8]
    4208:	68fb      	ldr	r3, [r7, #12]
    420a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    420c:	687b      	ldr	r3, [r7, #4]
    420e:	2200      	movs	r2, #0
    4210:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    4212:	68fb      	ldr	r3, [r7, #12]
    4214:	681b      	ldr	r3, [r3, #0]
    4216:	1e5a      	subs	r2, r3, #1
    4218:	68fb      	ldr	r3, [r7, #12]
    421a:	601a      	str	r2, [r3, #0]
}
    421c:	3714      	adds	r7, #20
    421e:	46bd      	mov	sp, r7
    4220:	f85d 7b04 	ldr.w	r7, [sp], #4
    4224:	4770      	bx	lr
    4226:	bf00      	nop

00004228 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    4228:	b580      	push	{r7, lr}
    422a:	b084      	sub	sp, #16
    422c:	af00      	add	r7, sp, #0
    422e:	6078      	str	r0, [r7, #4]
    4230:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    4232:	2301      	movs	r3, #1
    4234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    4236:	683b      	ldr	r3, [r7, #0]
    4238:	2b01      	cmp	r3, #1
    423a:	d00b      	beq.n	4254 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4240:	2b00      	cmp	r3, #0
    4242:	d001      	beq.n	4248 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    4244:	2300      	movs	r3, #0
    4246:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	691b      	ldr	r3, [r3, #16]
    424c:	2b00      	cmp	r3, #0
    424e:	d001      	beq.n	4254 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4250:	2300      	movs	r3, #0
    4252:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    4254:	68fb      	ldr	r3, [r7, #12]
    4256:	2b01      	cmp	r3, #1
    4258:	d12f      	bne.n	42ba <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	681a      	ldr	r2, [r3, #0]
    425e:	687b      	ldr	r3, [r7, #4]
    4260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4262:	6879      	ldr	r1, [r7, #4]
    4264:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4266:	fb01 f303 	mul.w	r3, r1, r3
    426a:	441a      	add	r2, r3
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	2200      	movs	r2, #0
    4274:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	681a      	ldr	r2, [r3, #0]
    427a:	687b      	ldr	r3, [r7, #4]
    427c:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	681a      	ldr	r2, [r3, #0]
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4286:	3b01      	subs	r3, #1
    4288:	6879      	ldr	r1, [r7, #4]
    428a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    428c:	fb01 f303 	mul.w	r3, r1, r3
    4290:	441a      	add	r2, r3
    4292:	687b      	ldr	r3, [r7, #4]
    4294:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    4296:	687b      	ldr	r3, [r7, #4]
    4298:	f04f 32ff 	mov.w	r2, #4294967295
    429c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    429e:	687b      	ldr	r3, [r7, #4]
    42a0:	f04f 32ff 	mov.w	r2, #4294967295
    42a4:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	3310      	adds	r3, #16
    42aa:	4618      	mov	r0, r3
    42ac:	f7ff ff08 	bl	40c0 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	3324      	adds	r3, #36	; 0x24
    42b4:	4618      	mov	r0, r3
    42b6:	f7ff ff03 	bl	40c0 <vListInitialise>
	}

	return xReturn;
    42ba:	68fb      	ldr	r3, [r7, #12]
}
    42bc:	4618      	mov	r0, r3
    42be:	3710      	adds	r7, #16
    42c0:	46bd      	mov	sp, r7
    42c2:	bd80      	pop	{r7, pc}

000042c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    42c4:	b580      	push	{r7, lr}
    42c6:	b088      	sub	sp, #32
    42c8:	af00      	add	r7, sp, #0
    42ca:	60f8      	str	r0, [r7, #12]
    42cc:	60b9      	str	r1, [r7, #8]
    42ce:	4613      	mov	r3, r2
    42d0:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    42d2:	2300      	movs	r3, #0
    42d4:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    42d6:	68fb      	ldr	r3, [r7, #12]
    42d8:	2b00      	cmp	r3, #0
    42da:	d026      	beq.n	432a <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    42dc:	204c      	movs	r0, #76	; 0x4c
    42de:	f001 fda7 	bl	5e30 <pvPortMalloc>
    42e2:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    42e4:	69bb      	ldr	r3, [r7, #24]
    42e6:	2b00      	cmp	r3, #0
    42e8:	d01f      	beq.n	432a <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	68ba      	ldr	r2, [r7, #8]
    42ee:	fb02 f303 	mul.w	r3, r2, r3
    42f2:	3301      	adds	r3, #1
    42f4:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    42f6:	6978      	ldr	r0, [r7, #20]
    42f8:	f001 fd9a 	bl	5e30 <pvPortMalloc>
    42fc:	4602      	mov	r2, r0
    42fe:	69bb      	ldr	r3, [r7, #24]
    4300:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    4302:	69bb      	ldr	r3, [r7, #24]
    4304:	681b      	ldr	r3, [r3, #0]
    4306:	2b00      	cmp	r3, #0
    4308:	d00c      	beq.n	4324 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    430a:	69bb      	ldr	r3, [r7, #24]
    430c:	68fa      	ldr	r2, [r7, #12]
    430e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4310:	69bb      	ldr	r3, [r7, #24]
    4312:	68ba      	ldr	r2, [r7, #8]
    4314:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    4316:	69b8      	ldr	r0, [r7, #24]
    4318:	2101      	movs	r1, #1
    431a:	f7ff ff85 	bl	4228 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    431e:	69bb      	ldr	r3, [r7, #24]
    4320:	61fb      	str	r3, [r7, #28]
    4322:	e002      	b.n	432a <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    4324:	69b8      	ldr	r0, [r7, #24]
    4326:	f001 fe47 	bl	5fb8 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    432a:	69fb      	ldr	r3, [r7, #28]
}
    432c:	4618      	mov	r0, r3
    432e:	3720      	adds	r7, #32
    4330:	46bd      	mov	sp, r7
    4332:	bd80      	pop	{r7, pc}

00004334 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    4334:	b580      	push	{r7, lr}
    4336:	b084      	sub	sp, #16
    4338:	af00      	add	r7, sp, #0
    433a:	4603      	mov	r3, r0
    433c:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    433e:	204c      	movs	r0, #76	; 0x4c
    4340:	f001 fd76 	bl	5e30 <pvPortMalloc>
    4344:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    4346:	68fb      	ldr	r3, [r7, #12]
    4348:	2b00      	cmp	r3, #0
    434a:	d02c      	beq.n	43a6 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    434c:	68fb      	ldr	r3, [r7, #12]
    434e:	2200      	movs	r2, #0
    4350:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4352:	68fb      	ldr	r3, [r7, #12]
    4354:	2200      	movs	r2, #0
    4356:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    4358:	68fb      	ldr	r3, [r7, #12]
    435a:	2200      	movs	r2, #0
    435c:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    435e:	68fb      	ldr	r3, [r7, #12]
    4360:	2200      	movs	r2, #0
    4362:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	2200      	movs	r2, #0
    4368:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    436a:	68fb      	ldr	r3, [r7, #12]
    436c:	2201      	movs	r2, #1
    436e:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4370:	68fb      	ldr	r3, [r7, #12]
    4372:	2200      	movs	r2, #0
    4374:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    4376:	68fb      	ldr	r3, [r7, #12]
    4378:	f04f 32ff 	mov.w	r2, #4294967295
    437c:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    437e:	68fb      	ldr	r3, [r7, #12]
    4380:	f04f 32ff 	mov.w	r2, #4294967295
    4384:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	3310      	adds	r3, #16
    438a:	4618      	mov	r0, r3
    438c:	f7ff fe98 	bl	40c0 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4390:	68fb      	ldr	r3, [r7, #12]
    4392:	3324      	adds	r3, #36	; 0x24
    4394:	4618      	mov	r0, r3
    4396:	f7ff fe93 	bl	40c0 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    439a:	68f8      	ldr	r0, [r7, #12]
    439c:	2100      	movs	r1, #0
    439e:	2200      	movs	r2, #0
    43a0:	2300      	movs	r3, #0
    43a2:	f000 f81d 	bl	43e0 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    43a6:	68fb      	ldr	r3, [r7, #12]
	}
    43a8:	4618      	mov	r0, r3
    43aa:	3710      	adds	r7, #16
    43ac:	46bd      	mov	sp, r7
    43ae:	bd80      	pop	{r7, pc}

000043b0 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    43b0:	b580      	push	{r7, lr}
    43b2:	b084      	sub	sp, #16
    43b4:	af00      	add	r7, sp, #0
    43b6:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    43b8:	f001 fcc0 	bl	5d3c <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	681b      	ldr	r3, [r3, #0]
    43c0:	2b00      	cmp	r3, #0
    43c2:	d103      	bne.n	43cc <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    43c4:	687b      	ldr	r3, [r7, #4]
    43c6:	685b      	ldr	r3, [r3, #4]
    43c8:	60fb      	str	r3, [r7, #12]
    43ca:	e001      	b.n	43d0 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    43cc:	2300      	movs	r3, #0
    43ce:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    43d0:	f001 fcca 	bl	5d68 <vPortExitCritical>
		
		return pxReturn;
    43d4:	68fb      	ldr	r3, [r7, #12]
	}
    43d6:	4618      	mov	r0, r3
    43d8:	3710      	adds	r7, #16
    43da:	46bd      	mov	sp, r7
    43dc:	bd80      	pop	{r7, pc}
    43de:	bf00      	nop

000043e0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    43e0:	b580      	push	{r7, lr}
    43e2:	b088      	sub	sp, #32
    43e4:	af00      	add	r7, sp, #0
    43e6:	60f8      	str	r0, [r7, #12]
    43e8:	60b9      	str	r1, [r7, #8]
    43ea:	607a      	str	r2, [r7, #4]
    43ec:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    43ee:	2300      	movs	r3, #0
    43f0:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    43f2:	f001 fca3 	bl	5d3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    43f6:	68fb      	ldr	r3, [r7, #12]
    43f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    43fa:	68fb      	ldr	r3, [r7, #12]
    43fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    43fe:	429a      	cmp	r2, r3
    4400:	d216      	bcs.n	4430 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4402:	68f8      	ldr	r0, [r7, #12]
    4404:	68b9      	ldr	r1, [r7, #8]
    4406:	683a      	ldr	r2, [r7, #0]
    4408:	f000 f9d6 	bl	47b8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    440c:	68fb      	ldr	r3, [r7, #12]
    440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4410:	2b00      	cmp	r3, #0
    4412:	d009      	beq.n	4428 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    4414:	68fb      	ldr	r3, [r7, #12]
    4416:	3324      	adds	r3, #36	; 0x24
    4418:	4618      	mov	r0, r3
    441a:	f001 f905 	bl	5628 <xTaskRemoveFromEventList>
    441e:	4603      	mov	r3, r0
    4420:	2b01      	cmp	r3, #1
    4422:	d101      	bne.n	4428 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    4424:	f001 fc7c 	bl	5d20 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4428:	f001 fc9e 	bl	5d68 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    442c:	2301      	movs	r3, #1
    442e:	e059      	b.n	44e4 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4430:	687b      	ldr	r3, [r7, #4]
    4432:	2b00      	cmp	r3, #0
    4434:	d103      	bne.n	443e <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4436:	f001 fc97 	bl	5d68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    443a:	2300      	movs	r3, #0
    443c:	e052      	b.n	44e4 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    443e:	69fb      	ldr	r3, [r7, #28]
    4440:	2b00      	cmp	r3, #0
    4442:	d106      	bne.n	4452 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4444:	f107 0314 	add.w	r3, r7, #20
    4448:	4618      	mov	r0, r3
    444a:	f001 f945 	bl	56d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    444e:	2301      	movs	r3, #1
    4450:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4452:	f001 fc89 	bl	5d68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4456:	f000 fe93 	bl	5180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    445a:	f001 fc6f 	bl	5d3c <vPortEnterCritical>
    445e:	68fb      	ldr	r3, [r7, #12]
    4460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4462:	f1b3 3fff 	cmp.w	r3, #4294967295
    4466:	d102      	bne.n	446e <xQueueGenericSend+0x8e>
    4468:	68fb      	ldr	r3, [r7, #12]
    446a:	2200      	movs	r2, #0
    446c:	645a      	str	r2, [r3, #68]	; 0x44
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4472:	f1b3 3fff 	cmp.w	r3, #4294967295
    4476:	d102      	bne.n	447e <xQueueGenericSend+0x9e>
    4478:	68fb      	ldr	r3, [r7, #12]
    447a:	2200      	movs	r2, #0
    447c:	649a      	str	r2, [r3, #72]	; 0x48
    447e:	f001 fc73 	bl	5d68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4482:	f107 0214 	add.w	r2, r7, #20
    4486:	1d3b      	adds	r3, r7, #4
    4488:	4610      	mov	r0, r2
    448a:	4619      	mov	r1, r3
    448c:	f001 f93c 	bl	5708 <xTaskCheckForTimeOut>
    4490:	4603      	mov	r3, r0
    4492:	2b00      	cmp	r3, #0
    4494:	d11e      	bne.n	44d4 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4496:	68f8      	ldr	r0, [r7, #12]
    4498:	f000 fa86 	bl	49a8 <prvIsQueueFull>
    449c:	4603      	mov	r3, r0
    449e:	2b00      	cmp	r3, #0
    44a0:	d012      	beq.n	44c8 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	f103 0210 	add.w	r2, r3, #16
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	4610      	mov	r0, r2
    44ac:	4619      	mov	r1, r3
    44ae:	f001 f883 	bl	55b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    44b2:	68f8      	ldr	r0, [r7, #12]
    44b4:	f000 fa02 	bl	48bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    44b8:	f000 fe74 	bl	51a4 <xTaskResumeAll>
    44bc:	4603      	mov	r3, r0
    44be:	2b00      	cmp	r3, #0
    44c0:	d10f      	bne.n	44e2 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    44c2:	f001 fc2d 	bl	5d20 <vPortYieldFromISR>
    44c6:	e00c      	b.n	44e2 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    44c8:	68f8      	ldr	r0, [r7, #12]
    44ca:	f000 f9f7 	bl	48bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    44ce:	f000 fe69 	bl	51a4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    44d2:	e78e      	b.n	43f2 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    44d4:	68f8      	ldr	r0, [r7, #12]
    44d6:	f000 f9f1 	bl	48bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    44da:	f000 fe63 	bl	51a4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    44de:	2300      	movs	r3, #0
    44e0:	e000      	b.n	44e4 <xQueueGenericSend+0x104>
		}
	}
    44e2:	e786      	b.n	43f2 <xQueueGenericSend+0x12>
}
    44e4:	4618      	mov	r0, r3
    44e6:	3720      	adds	r7, #32
    44e8:	46bd      	mov	sp, r7
    44ea:	bd80      	pop	{r7, pc}

000044ec <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    44ec:	b580      	push	{r7, lr}
    44ee:	b086      	sub	sp, #24
    44f0:	af00      	add	r7, sp, #0
    44f2:	60f8      	str	r0, [r7, #12]
    44f4:	60b9      	str	r1, [r7, #8]
    44f6:	607a      	str	r2, [r7, #4]
    44f8:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    44fa:	2300      	movs	r3, #0
    44fc:	613b      	str	r3, [r7, #16]
    44fe:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4502:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    4506:	68fb      	ldr	r3, [r7, #12]
    4508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    450a:	68fb      	ldr	r3, [r7, #12]
    450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    450e:	429a      	cmp	r2, r3
    4510:	d221      	bcs.n	4556 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4512:	68f8      	ldr	r0, [r7, #12]
    4514:	68b9      	ldr	r1, [r7, #8]
    4516:	683a      	ldr	r2, [r7, #0]
    4518:	f000 f94e 	bl	47b8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    451c:	68fb      	ldr	r3, [r7, #12]
    451e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4520:	f1b3 3fff 	cmp.w	r3, #4294967295
    4524:	d10f      	bne.n	4546 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4526:	68fb      	ldr	r3, [r7, #12]
    4528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    452a:	2b00      	cmp	r3, #0
    452c:	d010      	beq.n	4550 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    452e:	68fb      	ldr	r3, [r7, #12]
    4530:	3324      	adds	r3, #36	; 0x24
    4532:	4618      	mov	r0, r3
    4534:	f001 f878 	bl	5628 <xTaskRemoveFromEventList>
    4538:	4603      	mov	r3, r0
    453a:	2b00      	cmp	r3, #0
    453c:	d008      	beq.n	4550 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	2201      	movs	r2, #1
    4542:	601a      	str	r2, [r3, #0]
    4544:	e004      	b.n	4550 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    4546:	68fb      	ldr	r3, [r7, #12]
    4548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    454a:	1c5a      	adds	r2, r3, #1
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4550:	2301      	movs	r3, #1
    4552:	617b      	str	r3, [r7, #20]
    4554:	e001      	b.n	455a <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    4556:	2300      	movs	r3, #0
    4558:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    455a:	f04f 0000 	mov.w	r0, #0
    455e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4562:	697b      	ldr	r3, [r7, #20]
}
    4564:	4618      	mov	r0, r3
    4566:	3718      	adds	r7, #24
    4568:	46bd      	mov	sp, r7
    456a:	bd80      	pop	{r7, pc}

0000456c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    456c:	b580      	push	{r7, lr}
    456e:	b088      	sub	sp, #32
    4570:	af00      	add	r7, sp, #0
    4572:	60f8      	str	r0, [r7, #12]
    4574:	60b9      	str	r1, [r7, #8]
    4576:	607a      	str	r2, [r7, #4]
    4578:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    457a:	2300      	movs	r3, #0
    457c:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    457e:	f001 fbdd 	bl	5d3c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4582:	68fb      	ldr	r3, [r7, #12]
    4584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4586:	2b00      	cmp	r3, #0
    4588:	d03b      	beq.n	4602 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    458a:	68fb      	ldr	r3, [r7, #12]
    458c:	68db      	ldr	r3, [r3, #12]
    458e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4590:	68f8      	ldr	r0, [r7, #12]
    4592:	68b9      	ldr	r1, [r7, #8]
    4594:	f000 f96c 	bl	4870 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4598:	683b      	ldr	r3, [r7, #0]
    459a:	2b00      	cmp	r3, #0
    459c:	d11c      	bne.n	45d8 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    459e:	68fb      	ldr	r3, [r7, #12]
    45a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45a2:	1e5a      	subs	r2, r3, #1
    45a4:	68fb      	ldr	r3, [r7, #12]
    45a6:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    45a8:	68fb      	ldr	r3, [r7, #12]
    45aa:	681b      	ldr	r3, [r3, #0]
    45ac:	2b00      	cmp	r3, #0
    45ae:	d104      	bne.n	45ba <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    45b0:	f001 fa5c 	bl	5a6c <xTaskGetCurrentTaskHandle>
    45b4:	4602      	mov	r2, r0
    45b6:	68fb      	ldr	r3, [r7, #12]
    45b8:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    45ba:	68fb      	ldr	r3, [r7, #12]
    45bc:	691b      	ldr	r3, [r3, #16]
    45be:	2b00      	cmp	r3, #0
    45c0:	d01b      	beq.n	45fa <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    45c2:	68fb      	ldr	r3, [r7, #12]
    45c4:	3310      	adds	r3, #16
    45c6:	4618      	mov	r0, r3
    45c8:	f001 f82e 	bl	5628 <xTaskRemoveFromEventList>
    45cc:	4603      	mov	r3, r0
    45ce:	2b01      	cmp	r3, #1
    45d0:	d113      	bne.n	45fa <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    45d2:	f001 fba5 	bl	5d20 <vPortYieldFromISR>
    45d6:	e010      	b.n	45fa <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    45d8:	68fb      	ldr	r3, [r7, #12]
    45da:	69ba      	ldr	r2, [r7, #24]
    45dc:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    45de:	68fb      	ldr	r3, [r7, #12]
    45e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45e2:	2b00      	cmp	r3, #0
    45e4:	d009      	beq.n	45fa <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    45e6:	68fb      	ldr	r3, [r7, #12]
    45e8:	3324      	adds	r3, #36	; 0x24
    45ea:	4618      	mov	r0, r3
    45ec:	f001 f81c 	bl	5628 <xTaskRemoveFromEventList>
    45f0:	4603      	mov	r3, r0
    45f2:	2b00      	cmp	r3, #0
    45f4:	d001      	beq.n	45fa <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    45f6:	f001 fb93 	bl	5d20 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    45fa:	f001 fbb5 	bl	5d68 <vPortExitCritical>
				return pdPASS;
    45fe:	2301      	movs	r3, #1
    4600:	e066      	b.n	46d0 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	2b00      	cmp	r3, #0
    4606:	d103      	bne.n	4610 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4608:	f001 fbae 	bl	5d68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    460c:	2300      	movs	r3, #0
    460e:	e05f      	b.n	46d0 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4610:	69fb      	ldr	r3, [r7, #28]
    4612:	2b00      	cmp	r3, #0
    4614:	d106      	bne.n	4624 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4616:	f107 0310 	add.w	r3, r7, #16
    461a:	4618      	mov	r0, r3
    461c:	f001 f85c 	bl	56d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4620:	2301      	movs	r3, #1
    4622:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4624:	f001 fba0 	bl	5d68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4628:	f000 fdaa 	bl	5180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    462c:	f001 fb86 	bl	5d3c <vPortEnterCritical>
    4630:	68fb      	ldr	r3, [r7, #12]
    4632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4634:	f1b3 3fff 	cmp.w	r3, #4294967295
    4638:	d102      	bne.n	4640 <xQueueGenericReceive+0xd4>
    463a:	68fb      	ldr	r3, [r7, #12]
    463c:	2200      	movs	r2, #0
    463e:	645a      	str	r2, [r3, #68]	; 0x44
    4640:	68fb      	ldr	r3, [r7, #12]
    4642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4644:	f1b3 3fff 	cmp.w	r3, #4294967295
    4648:	d102      	bne.n	4650 <xQueueGenericReceive+0xe4>
    464a:	68fb      	ldr	r3, [r7, #12]
    464c:	2200      	movs	r2, #0
    464e:	649a      	str	r2, [r3, #72]	; 0x48
    4650:	f001 fb8a 	bl	5d68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4654:	f107 0210 	add.w	r2, r7, #16
    4658:	1d3b      	adds	r3, r7, #4
    465a:	4610      	mov	r0, r2
    465c:	4619      	mov	r1, r3
    465e:	f001 f853 	bl	5708 <xTaskCheckForTimeOut>
    4662:	4603      	mov	r3, r0
    4664:	2b00      	cmp	r3, #0
    4666:	d12b      	bne.n	46c0 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4668:	68f8      	ldr	r0, [r7, #12]
    466a:	f000 f973 	bl	4954 <prvIsQueueEmpty>
    466e:	4603      	mov	r3, r0
    4670:	2b00      	cmp	r3, #0
    4672:	d01f      	beq.n	46b4 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4674:	68fb      	ldr	r3, [r7, #12]
    4676:	681b      	ldr	r3, [r3, #0]
    4678:	2b00      	cmp	r3, #0
    467a:	d108      	bne.n	468e <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    467c:	f001 fb5e 	bl	5d3c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4680:	68fb      	ldr	r3, [r7, #12]
    4682:	685b      	ldr	r3, [r3, #4]
    4684:	4618      	mov	r0, r3
    4686:	f001 fa01 	bl	5a8c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    468a:	f001 fb6d 	bl	5d68 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    468e:	68fb      	ldr	r3, [r7, #12]
    4690:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4694:	687b      	ldr	r3, [r7, #4]
    4696:	4610      	mov	r0, r2
    4698:	4619      	mov	r1, r3
    469a:	f000 ff8d 	bl	55b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    469e:	68f8      	ldr	r0, [r7, #12]
    46a0:	f000 f90c 	bl	48bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    46a4:	f000 fd7e 	bl	51a4 <xTaskResumeAll>
    46a8:	4603      	mov	r3, r0
    46aa:	2b00      	cmp	r3, #0
    46ac:	d10f      	bne.n	46ce <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    46ae:	f001 fb37 	bl	5d20 <vPortYieldFromISR>
    46b2:	e00c      	b.n	46ce <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    46b4:	68f8      	ldr	r0, [r7, #12]
    46b6:	f000 f901 	bl	48bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    46ba:	f000 fd73 	bl	51a4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    46be:	e75e      	b.n	457e <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    46c0:	68f8      	ldr	r0, [r7, #12]
    46c2:	f000 f8fb 	bl	48bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    46c6:	f000 fd6d 	bl	51a4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    46ca:	2300      	movs	r3, #0
    46cc:	e000      	b.n	46d0 <xQueueGenericReceive+0x164>
		}
	}
    46ce:	e756      	b.n	457e <xQueueGenericReceive+0x12>
}
    46d0:	4618      	mov	r0, r3
    46d2:	3720      	adds	r7, #32
    46d4:	46bd      	mov	sp, r7
    46d6:	bd80      	pop	{r7, pc}

000046d8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    46d8:	b580      	push	{r7, lr}
    46da:	b086      	sub	sp, #24
    46dc:	af00      	add	r7, sp, #0
    46de:	60f8      	str	r0, [r7, #12]
    46e0:	60b9      	str	r1, [r7, #8]
    46e2:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    46e4:	2300      	movs	r3, #0
    46e6:	613b      	str	r3, [r7, #16]
    46e8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46ec:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    46f0:	68fb      	ldr	r3, [r7, #12]
    46f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46f4:	2b00      	cmp	r3, #0
    46f6:	d025      	beq.n	4744 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    46f8:	68f8      	ldr	r0, [r7, #12]
    46fa:	68b9      	ldr	r1, [r7, #8]
    46fc:	f000 f8b8 	bl	4870 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4700:	68fb      	ldr	r3, [r7, #12]
    4702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4704:	1e5a      	subs	r2, r3, #1
    4706:	68fb      	ldr	r3, [r7, #12]
    4708:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    470a:	68fb      	ldr	r3, [r7, #12]
    470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    470e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4712:	d10f      	bne.n	4734 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4714:	68fb      	ldr	r3, [r7, #12]
    4716:	691b      	ldr	r3, [r3, #16]
    4718:	2b00      	cmp	r3, #0
    471a:	d010      	beq.n	473e <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    471c:	68fb      	ldr	r3, [r7, #12]
    471e:	3310      	adds	r3, #16
    4720:	4618      	mov	r0, r3
    4722:	f000 ff81 	bl	5628 <xTaskRemoveFromEventList>
    4726:	4603      	mov	r3, r0
    4728:	2b00      	cmp	r3, #0
    472a:	d008      	beq.n	473e <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    472c:	687b      	ldr	r3, [r7, #4]
    472e:	2201      	movs	r2, #1
    4730:	601a      	str	r2, [r3, #0]
    4732:	e004      	b.n	473e <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4734:	68fb      	ldr	r3, [r7, #12]
    4736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4738:	1c5a      	adds	r2, r3, #1
    473a:	68fb      	ldr	r3, [r7, #12]
    473c:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    473e:	2301      	movs	r3, #1
    4740:	617b      	str	r3, [r7, #20]
    4742:	e001      	b.n	4748 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4744:	2300      	movs	r3, #0
    4746:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4748:	f04f 0000 	mov.w	r0, #0
    474c:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4750:	697b      	ldr	r3, [r7, #20]
}
    4752:	4618      	mov	r0, r3
    4754:	3718      	adds	r7, #24
    4756:	46bd      	mov	sp, r7
    4758:	bd80      	pop	{r7, pc}
    475a:	bf00      	nop

0000475c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    475c:	b580      	push	{r7, lr}
    475e:	b084      	sub	sp, #16
    4760:	af00      	add	r7, sp, #0
    4762:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4764:	f001 faea 	bl	5d3c <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    476c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    476e:	f001 fafb 	bl	5d68 <vPortExitCritical>

	return uxReturn;
    4772:	68fb      	ldr	r3, [r7, #12]
}
    4774:	4618      	mov	r0, r3
    4776:	3710      	adds	r7, #16
    4778:	46bd      	mov	sp, r7
    477a:	bd80      	pop	{r7, pc}

0000477c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    477c:	b480      	push	{r7}
    477e:	b085      	sub	sp, #20
    4780:	af00      	add	r7, sp, #0
    4782:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4788:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    478a:	68fb      	ldr	r3, [r7, #12]
}
    478c:	4618      	mov	r0, r3
    478e:	3714      	adds	r7, #20
    4790:	46bd      	mov	sp, r7
    4792:	f85d 7b04 	ldr.w	r7, [sp], #4
    4796:	4770      	bx	lr

00004798 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4798:	b580      	push	{r7, lr}
    479a:	b082      	sub	sp, #8
    479c:	af00      	add	r7, sp, #0
    479e:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	681b      	ldr	r3, [r3, #0]
    47a4:	4618      	mov	r0, r3
    47a6:	f001 fc07 	bl	5fb8 <vPortFree>
	vPortFree( pxQueue );
    47aa:	6878      	ldr	r0, [r7, #4]
    47ac:	f001 fc04 	bl	5fb8 <vPortFree>
}
    47b0:	3708      	adds	r7, #8
    47b2:	46bd      	mov	sp, r7
    47b4:	bd80      	pop	{r7, pc}
    47b6:	bf00      	nop

000047b8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    47b8:	b580      	push	{r7, lr}
    47ba:	b084      	sub	sp, #16
    47bc:	af00      	add	r7, sp, #0
    47be:	60f8      	str	r0, [r7, #12]
    47c0:	60b9      	str	r1, [r7, #8]
    47c2:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    47c4:	68fb      	ldr	r3, [r7, #12]
    47c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47c8:	2b00      	cmp	r3, #0
    47ca:	d10c      	bne.n	47e6 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    47cc:	68fb      	ldr	r3, [r7, #12]
    47ce:	681b      	ldr	r3, [r3, #0]
    47d0:	2b00      	cmp	r3, #0
    47d2:	d145      	bne.n	4860 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    47d4:	68fb      	ldr	r3, [r7, #12]
    47d6:	685b      	ldr	r3, [r3, #4]
    47d8:	4618      	mov	r0, r3
    47da:	f001 f9bb 	bl	5b54 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    47de:	68fb      	ldr	r3, [r7, #12]
    47e0:	2200      	movs	r2, #0
    47e2:	605a      	str	r2, [r3, #4]
    47e4:	e03c      	b.n	4860 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    47e6:	687b      	ldr	r3, [r7, #4]
    47e8:	2b00      	cmp	r3, #0
    47ea:	d11a      	bne.n	4822 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    47ec:	68fb      	ldr	r3, [r7, #12]
    47ee:	689a      	ldr	r2, [r3, #8]
    47f0:	68fb      	ldr	r3, [r7, #12]
    47f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47f4:	4610      	mov	r0, r2
    47f6:	68b9      	ldr	r1, [r7, #8]
    47f8:	461a      	mov	r2, r3
    47fa:	f013 ff75 	bl	186e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    47fe:	68fb      	ldr	r3, [r7, #12]
    4800:	689a      	ldr	r2, [r3, #8]
    4802:	68fb      	ldr	r3, [r7, #12]
    4804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4806:	441a      	add	r2, r3
    4808:	68fb      	ldr	r3, [r7, #12]
    480a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    480c:	68fb      	ldr	r3, [r7, #12]
    480e:	689a      	ldr	r2, [r3, #8]
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	685b      	ldr	r3, [r3, #4]
    4814:	429a      	cmp	r2, r3
    4816:	d323      	bcc.n	4860 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4818:	68fb      	ldr	r3, [r7, #12]
    481a:	681a      	ldr	r2, [r3, #0]
    481c:	68fb      	ldr	r3, [r7, #12]
    481e:	609a      	str	r2, [r3, #8]
    4820:	e01e      	b.n	4860 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4822:	68fb      	ldr	r3, [r7, #12]
    4824:	68da      	ldr	r2, [r3, #12]
    4826:	68fb      	ldr	r3, [r7, #12]
    4828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    482a:	4610      	mov	r0, r2
    482c:	68b9      	ldr	r1, [r7, #8]
    482e:	461a      	mov	r2, r3
    4830:	f013 ff5a 	bl	186e8 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	68da      	ldr	r2, [r3, #12]
    4838:	68fb      	ldr	r3, [r7, #12]
    483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    483c:	425b      	negs	r3, r3
    483e:	441a      	add	r2, r3
    4840:	68fb      	ldr	r3, [r7, #12]
    4842:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4844:	68fb      	ldr	r3, [r7, #12]
    4846:	68da      	ldr	r2, [r3, #12]
    4848:	68fb      	ldr	r3, [r7, #12]
    484a:	681b      	ldr	r3, [r3, #0]
    484c:	429a      	cmp	r2, r3
    484e:	d207      	bcs.n	4860 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4850:	68fb      	ldr	r3, [r7, #12]
    4852:	685a      	ldr	r2, [r3, #4]
    4854:	68fb      	ldr	r3, [r7, #12]
    4856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4858:	425b      	negs	r3, r3
    485a:	441a      	add	r2, r3
    485c:	68fb      	ldr	r3, [r7, #12]
    485e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4860:	68fb      	ldr	r3, [r7, #12]
    4862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4864:	1c5a      	adds	r2, r3, #1
    4866:	68fb      	ldr	r3, [r7, #12]
    4868:	639a      	str	r2, [r3, #56]	; 0x38
}
    486a:	3710      	adds	r7, #16
    486c:	46bd      	mov	sp, r7
    486e:	bd80      	pop	{r7, pc}

00004870 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4870:	b580      	push	{r7, lr}
    4872:	b082      	sub	sp, #8
    4874:	af00      	add	r7, sp, #0
    4876:	6078      	str	r0, [r7, #4]
    4878:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    487a:	687b      	ldr	r3, [r7, #4]
    487c:	681b      	ldr	r3, [r3, #0]
    487e:	2b00      	cmp	r3, #0
    4880:	d019      	beq.n	48b6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4882:	687b      	ldr	r3, [r7, #4]
    4884:	68da      	ldr	r2, [r3, #12]
    4886:	687b      	ldr	r3, [r7, #4]
    4888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    488a:	441a      	add	r2, r3
    488c:	687b      	ldr	r3, [r7, #4]
    488e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4890:	687b      	ldr	r3, [r7, #4]
    4892:	68da      	ldr	r2, [r3, #12]
    4894:	687b      	ldr	r3, [r7, #4]
    4896:	685b      	ldr	r3, [r3, #4]
    4898:	429a      	cmp	r2, r3
    489a:	d303      	bcc.n	48a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    489c:	687b      	ldr	r3, [r7, #4]
    489e:	681a      	ldr	r2, [r3, #0]
    48a0:	687b      	ldr	r3, [r7, #4]
    48a2:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    48a4:	687b      	ldr	r3, [r7, #4]
    48a6:	68da      	ldr	r2, [r3, #12]
    48a8:	687b      	ldr	r3, [r7, #4]
    48aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48ac:	6838      	ldr	r0, [r7, #0]
    48ae:	4611      	mov	r1, r2
    48b0:	461a      	mov	r2, r3
    48b2:	f013 ff19 	bl	186e8 <memcpy>
	}
}
    48b6:	3708      	adds	r7, #8
    48b8:	46bd      	mov	sp, r7
    48ba:	bd80      	pop	{r7, pc}

000048bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    48bc:	b580      	push	{r7, lr}
    48be:	b082      	sub	sp, #8
    48c0:	af00      	add	r7, sp, #0
    48c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    48c4:	f001 fa3a 	bl	5d3c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    48c8:	e014      	b.n	48f4 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48ce:	2b00      	cmp	r3, #0
    48d0:	d00f      	beq.n	48f2 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    48d2:	687b      	ldr	r3, [r7, #4]
    48d4:	3324      	adds	r3, #36	; 0x24
    48d6:	4618      	mov	r0, r3
    48d8:	f000 fea6 	bl	5628 <xTaskRemoveFromEventList>
    48dc:	4603      	mov	r3, r0
    48de:	2b00      	cmp	r3, #0
    48e0:	d001      	beq.n	48e6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    48e2:	f000 ff5d 	bl	57a0 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    48e6:	687b      	ldr	r3, [r7, #4]
    48e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    48ea:	1e5a      	subs	r2, r3, #1
    48ec:	687b      	ldr	r3, [r7, #4]
    48ee:	649a      	str	r2, [r3, #72]	; 0x48
    48f0:	e000      	b.n	48f4 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    48f2:	e003      	b.n	48fc <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    48f8:	2b00      	cmp	r3, #0
    48fa:	dce6      	bgt.n	48ca <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    48fc:	687b      	ldr	r3, [r7, #4]
    48fe:	f04f 32ff 	mov.w	r2, #4294967295
    4902:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    4904:	f001 fa30 	bl	5d68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4908:	f001 fa18 	bl	5d3c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    490c:	e014      	b.n	4938 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    490e:	687b      	ldr	r3, [r7, #4]
    4910:	691b      	ldr	r3, [r3, #16]
    4912:	2b00      	cmp	r3, #0
    4914:	d00f      	beq.n	4936 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4916:	687b      	ldr	r3, [r7, #4]
    4918:	3310      	adds	r3, #16
    491a:	4618      	mov	r0, r3
    491c:	f000 fe84 	bl	5628 <xTaskRemoveFromEventList>
    4920:	4603      	mov	r3, r0
    4922:	2b00      	cmp	r3, #0
    4924:	d001      	beq.n	492a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    4926:	f000 ff3b 	bl	57a0 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    492a:	687b      	ldr	r3, [r7, #4]
    492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    492e:	1e5a      	subs	r2, r3, #1
    4930:	687b      	ldr	r3, [r7, #4]
    4932:	645a      	str	r2, [r3, #68]	; 0x44
    4934:	e000      	b.n	4938 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    4936:	e003      	b.n	4940 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    493c:	2b00      	cmp	r3, #0
    493e:	dce6      	bgt.n	490e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4940:	687b      	ldr	r3, [r7, #4]
    4942:	f04f 32ff 	mov.w	r2, #4294967295
    4946:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4948:	f001 fa0e 	bl	5d68 <vPortExitCritical>
}
    494c:	3708      	adds	r7, #8
    494e:	46bd      	mov	sp, r7
    4950:	bd80      	pop	{r7, pc}
    4952:	bf00      	nop

00004954 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4954:	b580      	push	{r7, lr}
    4956:	b084      	sub	sp, #16
    4958:	af00      	add	r7, sp, #0
    495a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    495c:	f001 f9ee 	bl	5d3c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4960:	687b      	ldr	r3, [r7, #4]
    4962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4964:	2b00      	cmp	r3, #0
    4966:	bf14      	ite	ne
    4968:	2300      	movne	r3, #0
    496a:	2301      	moveq	r3, #1
    496c:	b2db      	uxtb	r3, r3
    496e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4970:	f001 f9fa 	bl	5d68 <vPortExitCritical>

	return xReturn;
    4974:	68fb      	ldr	r3, [r7, #12]
}
    4976:	4618      	mov	r0, r3
    4978:	3710      	adds	r7, #16
    497a:	46bd      	mov	sp, r7
    497c:	bd80      	pop	{r7, pc}
    497e:	bf00      	nop

00004980 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4980:	b480      	push	{r7}
    4982:	b085      	sub	sp, #20
    4984:	af00      	add	r7, sp, #0
    4986:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4988:	687b      	ldr	r3, [r7, #4]
    498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    498c:	2b00      	cmp	r3, #0
    498e:	bf14      	ite	ne
    4990:	2300      	movne	r3, #0
    4992:	2301      	moveq	r3, #1
    4994:	b2db      	uxtb	r3, r3
    4996:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4998:	68fb      	ldr	r3, [r7, #12]
}
    499a:	4618      	mov	r0, r3
    499c:	3714      	adds	r7, #20
    499e:	46bd      	mov	sp, r7
    49a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    49a4:	4770      	bx	lr
    49a6:	bf00      	nop

000049a8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    49a8:	b580      	push	{r7, lr}
    49aa:	b084      	sub	sp, #16
    49ac:	af00      	add	r7, sp, #0
    49ae:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    49b0:	f001 f9c4 	bl	5d3c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    49b4:	687b      	ldr	r3, [r7, #4]
    49b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    49b8:	687b      	ldr	r3, [r7, #4]
    49ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    49bc:	429a      	cmp	r2, r3
    49be:	bf14      	ite	ne
    49c0:	2300      	movne	r3, #0
    49c2:	2301      	moveq	r3, #1
    49c4:	b2db      	uxtb	r3, r3
    49c6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    49c8:	f001 f9ce 	bl	5d68 <vPortExitCritical>

	return xReturn;
    49cc:	68fb      	ldr	r3, [r7, #12]
}
    49ce:	4618      	mov	r0, r3
    49d0:	3710      	adds	r7, #16
    49d2:	46bd      	mov	sp, r7
    49d4:	bd80      	pop	{r7, pc}
    49d6:	bf00      	nop

000049d8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    49d8:	b480      	push	{r7}
    49da:	b085      	sub	sp, #20
    49dc:	af00      	add	r7, sp, #0
    49de:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    49e4:	687b      	ldr	r3, [r7, #4]
    49e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    49e8:	429a      	cmp	r2, r3
    49ea:	bf14      	ite	ne
    49ec:	2300      	movne	r3, #0
    49ee:	2301      	moveq	r3, #1
    49f0:	b2db      	uxtb	r3, r3
    49f2:	60fb      	str	r3, [r7, #12]

	return xReturn;
    49f4:	68fb      	ldr	r3, [r7, #12]
}
    49f6:	4618      	mov	r0, r3
    49f8:	3714      	adds	r7, #20
    49fa:	46bd      	mov	sp, r7
    49fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a00:	4770      	bx	lr
    4a02:	bf00      	nop

00004a04 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4a04:	b580      	push	{r7, lr}
    4a06:	b08a      	sub	sp, #40	; 0x28
    4a08:	af02      	add	r7, sp, #8
    4a0a:	60f8      	str	r0, [r7, #12]
    4a0c:	60b9      	str	r1, [r7, #8]
    4a0e:	603b      	str	r3, [r7, #0]
    4a10:	4613      	mov	r3, r2
    4a12:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4a14:	88fb      	ldrh	r3, [r7, #6]
    4a16:	4618      	mov	r0, r3
    4a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4a1a:	f000 ffe5 	bl	59e8 <prvAllocateTCBAndStack>
    4a1e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4a20:	69bb      	ldr	r3, [r7, #24]
    4a22:	2b00      	cmp	r3, #0
    4a24:	f000 80a1 	beq.w	4b6a <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4a28:	69bb      	ldr	r3, [r7, #24]
    4a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4a2c:	88fb      	ldrh	r3, [r7, #6]
    4a2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a32:	3b01      	subs	r3, #1
    4a34:	009b      	lsls	r3, r3, #2
    4a36:	4413      	add	r3, r2
    4a38:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	f023 0307 	bic.w	r3, r3, #7
    4a40:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4a42:	88fb      	ldrh	r3, [r7, #6]
    4a44:	9300      	str	r3, [sp, #0]
    4a46:	69b8      	ldr	r0, [r7, #24]
    4a48:	68b9      	ldr	r1, [r7, #8]
    4a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a4e:	f000 febd 	bl	57cc <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4a52:	6978      	ldr	r0, [r7, #20]
    4a54:	68f9      	ldr	r1, [r7, #12]
    4a56:	683a      	ldr	r2, [r7, #0]
    4a58:	f001 f8f2 	bl	5c40 <pxPortInitialiseStack>
    4a5c:	4602      	mov	r2, r0
    4a5e:	69bb      	ldr	r3, [r7, #24]
    4a60:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a64:	2b00      	cmp	r3, #0
    4a66:	d002      	beq.n	4a6e <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a6a:	69ba      	ldr	r2, [r7, #24]
    4a6c:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4a6e:	f001 f965 	bl	5d3c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4a72:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a7a:	681b      	ldr	r3, [r3, #0]
    4a7c:	1c5a      	adds	r2, r3, #1
    4a7e:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a86:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4a88:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	2b00      	cmp	r3, #0
    4a94:	d10f      	bne.n	4ab6 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4a96:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a9e:	69ba      	ldr	r2, [r7, #24]
    4aa0:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4aa2:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aaa:	681b      	ldr	r3, [r3, #0]
    4aac:	2b01      	cmp	r3, #1
    4aae:	d118      	bne.n	4ae2 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4ab0:	f000 fec2 	bl	5838 <prvInitialiseTaskLists>
    4ab4:	e015      	b.n	4ae2 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4ab6:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	d10e      	bne.n	4ae2 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4ac4:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4acc:	681b      	ldr	r3, [r3, #0]
    4ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ad2:	429a      	cmp	r2, r3
    4ad4:	d805      	bhi.n	4ae2 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4ad6:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ade:	69ba      	ldr	r2, [r7, #24]
    4ae0:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4ae2:	69bb      	ldr	r3, [r7, #24]
    4ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ae6:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aee:	681b      	ldr	r3, [r3, #0]
    4af0:	429a      	cmp	r2, r3
    4af2:	d906      	bls.n	4b02 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4af4:	69bb      	ldr	r3, [r7, #24]
    4af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4af8:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b00:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4b02:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b0a:	681b      	ldr	r3, [r3, #0]
    4b0c:	1c5a      	adds	r2, r3, #1
    4b0e:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b16:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4b18:	69bb      	ldr	r3, [r7, #24]
    4b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b1c:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b24:	681b      	ldr	r3, [r3, #0]
    4b26:	429a      	cmp	r2, r3
    4b28:	d906      	bls.n	4b38 <xTaskGenericCreate+0x134>
    4b2a:	69bb      	ldr	r3, [r7, #24]
    4b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b2e:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b36:	601a      	str	r2, [r3, #0]
    4b38:	69bb      	ldr	r3, [r7, #24]
    4b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b3c:	4613      	mov	r3, r2
    4b3e:	009b      	lsls	r3, r3, #2
    4b40:	4413      	add	r3, r2
    4b42:	009b      	lsls	r3, r3, #2
    4b44:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4b48:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b4c:	441a      	add	r2, r3
    4b4e:	69bb      	ldr	r3, [r7, #24]
    4b50:	3304      	adds	r3, #4
    4b52:	4610      	mov	r0, r2
    4b54:	4619      	mov	r1, r3
    4b56:	f7ff fadf 	bl	4118 <vListInsertEnd>

			xReturn = pdPASS;
    4b5a:	2301      	movs	r3, #1
    4b5c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4b5e:	69b8      	ldr	r0, [r7, #24]
    4b60:	f012 fdb8 	bl	176d4 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4b64:	f001 f900 	bl	5d68 <vPortExitCritical>
    4b68:	e002      	b.n	4b70 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4b6a:	f04f 33ff 	mov.w	r3, #4294967295
    4b6e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4b70:	69fb      	ldr	r3, [r7, #28]
    4b72:	2b01      	cmp	r3, #1
    4b74:	d111      	bne.n	4b9a <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4b76:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7e:	681b      	ldr	r3, [r3, #0]
    4b80:	2b00      	cmp	r3, #0
    4b82:	d00a      	beq.n	4b9a <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4b84:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b8c:	681b      	ldr	r3, [r3, #0]
    4b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b92:	429a      	cmp	r2, r3
    4b94:	d201      	bcs.n	4b9a <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4b96:	f001 f8c3 	bl	5d20 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4b9a:	69fb      	ldr	r3, [r7, #28]
}
    4b9c:	4618      	mov	r0, r3
    4b9e:	3720      	adds	r7, #32
    4ba0:	46bd      	mov	sp, r7
    4ba2:	bd80      	pop	{r7, pc}

00004ba4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4ba4:	b580      	push	{r7, lr}
    4ba6:	b084      	sub	sp, #16
    4ba8:	af00      	add	r7, sp, #0
    4baa:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4bac:	f001 f8c6 	bl	5d3c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4bb0:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb8:	681b      	ldr	r3, [r3, #0]
    4bba:	687a      	ldr	r2, [r7, #4]
    4bbc:	429a      	cmp	r2, r3
    4bbe:	d101      	bne.n	4bc4 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4bc0:	2300      	movs	r3, #0
    4bc2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d105      	bne.n	4bd6 <vTaskDelete+0x32>
    4bca:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd2:	681b      	ldr	r3, [r3, #0]
    4bd4:	e000      	b.n	4bd8 <vTaskDelete+0x34>
    4bd6:	687b      	ldr	r3, [r7, #4]
    4bd8:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4bda:	68fb      	ldr	r3, [r7, #12]
    4bdc:	3304      	adds	r3, #4
    4bde:	4618      	mov	r0, r3
    4be0:	f7ff fafa 	bl	41d8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4be4:	68fb      	ldr	r3, [r7, #12]
    4be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4be8:	2b00      	cmp	r3, #0
    4bea:	d004      	beq.n	4bf6 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4bec:	68fb      	ldr	r3, [r7, #12]
    4bee:	3318      	adds	r3, #24
    4bf0:	4618      	mov	r0, r3
    4bf2:	f7ff faf1 	bl	41d8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4bf6:	68fb      	ldr	r3, [r7, #12]
    4bf8:	3304      	adds	r3, #4
    4bfa:	f241 2088 	movw	r0, #4744	; 0x1288
    4bfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4c02:	4619      	mov	r1, r3
    4c04:	f7ff fa88 	bl	4118 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4c08:	f241 239c 	movw	r3, #4764	; 0x129c
    4c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c10:	681b      	ldr	r3, [r3, #0]
    4c12:	1c5a      	adds	r2, r3, #1
    4c14:	f241 239c 	movw	r3, #4764	; 0x129c
    4c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c1c:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4c1e:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c26:	681b      	ldr	r3, [r3, #0]
    4c28:	1c5a      	adds	r2, r3, #1
    4c2a:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c32:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4c34:	f001 f898 	bl	5d68 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4c38:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c40:	681b      	ldr	r3, [r3, #0]
    4c42:	2b00      	cmp	r3, #0
    4c44:	d004      	beq.n	4c50 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4c46:	687b      	ldr	r3, [r7, #4]
    4c48:	2b00      	cmp	r3, #0
    4c4a:	d101      	bne.n	4c50 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4c4c:	f001 f868 	bl	5d20 <vPortYieldFromISR>
			}
		}
	}
    4c50:	3710      	adds	r7, #16
    4c52:	46bd      	mov	sp, r7
    4c54:	bd80      	pop	{r7, pc}
    4c56:	bf00      	nop

00004c58 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4c58:	b580      	push	{r7, lr}
    4c5a:	b086      	sub	sp, #24
    4c5c:	af00      	add	r7, sp, #0
    4c5e:	6078      	str	r0, [r7, #4]
    4c60:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4c62:	2300      	movs	r3, #0
    4c64:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4c66:	f000 fa8b 	bl	5180 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	681a      	ldr	r2, [r3, #0]
    4c6e:	683b      	ldr	r3, [r7, #0]
    4c70:	4413      	add	r3, r2
    4c72:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4c74:	687b      	ldr	r3, [r7, #4]
    4c76:	681a      	ldr	r2, [r3, #0]
    4c78:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c80:	681b      	ldr	r3, [r3, #0]
    4c82:	429a      	cmp	r2, r3
    4c84:	d90f      	bls.n	4ca6 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4c86:	687b      	ldr	r3, [r7, #4]
    4c88:	681a      	ldr	r2, [r3, #0]
    4c8a:	693b      	ldr	r3, [r7, #16]
    4c8c:	429a      	cmp	r2, r3
    4c8e:	d919      	bls.n	4cc4 <vTaskDelayUntil+0x6c>
    4c90:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c98:	681b      	ldr	r3, [r3, #0]
    4c9a:	693a      	ldr	r2, [r7, #16]
    4c9c:	429a      	cmp	r2, r3
    4c9e:	d911      	bls.n	4cc4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4ca0:	2301      	movs	r3, #1
    4ca2:	617b      	str	r3, [r7, #20]
    4ca4:	e00e      	b.n	4cc4 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	681a      	ldr	r2, [r3, #0]
    4caa:	693b      	ldr	r3, [r7, #16]
    4cac:	429a      	cmp	r2, r3
    4cae:	d807      	bhi.n	4cc0 <vTaskDelayUntil+0x68>
    4cb0:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb8:	681b      	ldr	r3, [r3, #0]
    4cba:	693a      	ldr	r2, [r7, #16]
    4cbc:	429a      	cmp	r2, r3
    4cbe:	d901      	bls.n	4cc4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4cc0:	2301      	movs	r3, #1
    4cc2:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	693a      	ldr	r2, [r7, #16]
    4cc8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4cca:	697b      	ldr	r3, [r7, #20]
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d00b      	beq.n	4ce8 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4cd0:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cd8:	681b      	ldr	r3, [r3, #0]
    4cda:	3304      	adds	r3, #4
    4cdc:	4618      	mov	r0, r3
    4cde:	f7ff fa7b 	bl	41d8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4ce2:	6938      	ldr	r0, [r7, #16]
    4ce4:	f000 fe3c 	bl	5960 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4ce8:	f000 fa5c 	bl	51a4 <xTaskResumeAll>
    4cec:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4cee:	68fb      	ldr	r3, [r7, #12]
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d101      	bne.n	4cf8 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4cf4:	f001 f814 	bl	5d20 <vPortYieldFromISR>
		}
	}
    4cf8:	3718      	adds	r7, #24
    4cfa:	46bd      	mov	sp, r7
    4cfc:	bd80      	pop	{r7, pc}
    4cfe:	bf00      	nop

00004d00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4d00:	b580      	push	{r7, lr}
    4d02:	b084      	sub	sp, #16
    4d04:	af00      	add	r7, sp, #0
    4d06:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4d08:	2300      	movs	r3, #0
    4d0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4d0c:	687b      	ldr	r3, [r7, #4]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d018      	beq.n	4d44 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4d12:	f000 fa35 	bl	5180 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4d16:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d1e:	681a      	ldr	r2, [r3, #0]
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	4413      	add	r3, r2
    4d24:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d26:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	3304      	adds	r3, #4
    4d32:	4618      	mov	r0, r3
    4d34:	f7ff fa50 	bl	41d8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d38:	68b8      	ldr	r0, [r7, #8]
    4d3a:	f000 fe11 	bl	5960 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4d3e:	f000 fa31 	bl	51a4 <xTaskResumeAll>
    4d42:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	2b00      	cmp	r3, #0
    4d48:	d101      	bne.n	4d4e <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4d4a:	f000 ffe9 	bl	5d20 <vPortYieldFromISR>
		}
	}
    4d4e:	3710      	adds	r7, #16
    4d50:	46bd      	mov	sp, r7
    4d52:	bd80      	pop	{r7, pc}

00004d54 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4d54:	b580      	push	{r7, lr}
    4d56:	b084      	sub	sp, #16
    4d58:	af00      	add	r7, sp, #0
    4d5a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4d5c:	f000 ffee 	bl	5d3c <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4d60:	687b      	ldr	r3, [r7, #4]
    4d62:	2b00      	cmp	r3, #0
    4d64:	d105      	bne.n	4d72 <uxTaskPriorityGet+0x1e>
    4d66:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d6e:	681b      	ldr	r3, [r3, #0]
    4d70:	e000      	b.n	4d74 <uxTaskPriorityGet+0x20>
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4d76:	68fb      	ldr	r3, [r7, #12]
    4d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d7a:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4d7c:	f000 fff4 	bl	5d68 <vPortExitCritical>

		return uxReturn;
    4d80:	68bb      	ldr	r3, [r7, #8]
	}
    4d82:	4618      	mov	r0, r3
    4d84:	3710      	adds	r7, #16
    4d86:	46bd      	mov	sp, r7
    4d88:	bd80      	pop	{r7, pc}
    4d8a:	bf00      	nop

00004d8c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4d8c:	b580      	push	{r7, lr}
    4d8e:	b086      	sub	sp, #24
    4d90:	af00      	add	r7, sp, #0
    4d92:	6078      	str	r0, [r7, #4]
    4d94:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4d96:	2300      	movs	r3, #0
    4d98:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4d9a:	683b      	ldr	r3, [r7, #0]
    4d9c:	2b04      	cmp	r3, #4
    4d9e:	d901      	bls.n	4da4 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4da0:	2304      	movs	r3, #4
    4da2:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4da4:	f000 ffca 	bl	5d3c <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4da8:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4db0:	681b      	ldr	r3, [r3, #0]
    4db2:	687a      	ldr	r2, [r7, #4]
    4db4:	429a      	cmp	r2, r3
    4db6:	d101      	bne.n	4dbc <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4db8:	2300      	movs	r3, #0
    4dba:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4dbc:	687b      	ldr	r3, [r7, #4]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d105      	bne.n	4dce <vTaskPrioritySet+0x42>
    4dc2:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dca:	681b      	ldr	r3, [r3, #0]
    4dcc:	e000      	b.n	4dd0 <vTaskPrioritySet+0x44>
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4dd2:	693b      	ldr	r3, [r7, #16]
    4dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4dd6:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4dd8:	68fa      	ldr	r2, [r7, #12]
    4dda:	683b      	ldr	r3, [r7, #0]
    4ddc:	429a      	cmp	r2, r3
    4dde:	d058      	beq.n	4e92 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4de0:	683a      	ldr	r2, [r7, #0]
    4de2:	68fb      	ldr	r3, [r7, #12]
    4de4:	429a      	cmp	r2, r3
    4de6:	d905      	bls.n	4df4 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4de8:	687b      	ldr	r3, [r7, #4]
    4dea:	2b00      	cmp	r3, #0
    4dec:	d007      	beq.n	4dfe <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4dee:	2301      	movs	r3, #1
    4df0:	617b      	str	r3, [r7, #20]
    4df2:	e004      	b.n	4dfe <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4df4:	687b      	ldr	r3, [r7, #4]
    4df6:	2b00      	cmp	r3, #0
    4df8:	d101      	bne.n	4dfe <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4dfa:	2301      	movs	r3, #1
    4dfc:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4dfe:	693b      	ldr	r3, [r7, #16]
    4e00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4e02:	693b      	ldr	r3, [r7, #16]
    4e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e06:	429a      	cmp	r2, r3
    4e08:	d102      	bne.n	4e10 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4e0a:	693b      	ldr	r3, [r7, #16]
    4e0c:	683a      	ldr	r2, [r7, #0]
    4e0e:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4e10:	693b      	ldr	r3, [r7, #16]
    4e12:	683a      	ldr	r2, [r7, #0]
    4e14:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4e16:	683b      	ldr	r3, [r7, #0]
    4e18:	f1c3 0205 	rsb	r2, r3, #5
    4e1c:	693b      	ldr	r3, [r7, #16]
    4e1e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4e20:	693b      	ldr	r3, [r7, #16]
    4e22:	6959      	ldr	r1, [r3, #20]
    4e24:	68fa      	ldr	r2, [r7, #12]
    4e26:	4613      	mov	r3, r2
    4e28:	009b      	lsls	r3, r3, #2
    4e2a:	4413      	add	r3, r2
    4e2c:	009b      	lsls	r3, r3, #2
    4e2e:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4e32:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e36:	4413      	add	r3, r2
    4e38:	4299      	cmp	r1, r3
    4e3a:	d125      	bne.n	4e88 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4e3c:	693b      	ldr	r3, [r7, #16]
    4e3e:	3304      	adds	r3, #4
    4e40:	4618      	mov	r0, r3
    4e42:	f7ff f9c9 	bl	41d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4e46:	693b      	ldr	r3, [r7, #16]
    4e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e4a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e52:	681b      	ldr	r3, [r3, #0]
    4e54:	429a      	cmp	r2, r3
    4e56:	d906      	bls.n	4e66 <vTaskPrioritySet+0xda>
    4e58:	693b      	ldr	r3, [r7, #16]
    4e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e5c:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e64:	601a      	str	r2, [r3, #0]
    4e66:	693b      	ldr	r3, [r7, #16]
    4e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e6a:	4613      	mov	r3, r2
    4e6c:	009b      	lsls	r3, r3, #2
    4e6e:	4413      	add	r3, r2
    4e70:	009b      	lsls	r3, r3, #2
    4e72:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4e76:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e7a:	441a      	add	r2, r3
    4e7c:	693b      	ldr	r3, [r7, #16]
    4e7e:	3304      	adds	r3, #4
    4e80:	4610      	mov	r0, r2
    4e82:	4619      	mov	r1, r3
    4e84:	f7ff f948 	bl	4118 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4e88:	697b      	ldr	r3, [r7, #20]
    4e8a:	2b01      	cmp	r3, #1
    4e8c:	d101      	bne.n	4e92 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4e8e:	f000 ff47 	bl	5d20 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4e92:	f000 ff69 	bl	5d68 <vPortExitCritical>
	}
    4e96:	3718      	adds	r7, #24
    4e98:	46bd      	mov	sp, r7
    4e9a:	bd80      	pop	{r7, pc}

00004e9c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4e9c:	b580      	push	{r7, lr}
    4e9e:	b084      	sub	sp, #16
    4ea0:	af00      	add	r7, sp, #0
    4ea2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4ea4:	f000 ff4a 	bl	5d3c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4ea8:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb0:	681b      	ldr	r3, [r3, #0]
    4eb2:	687a      	ldr	r2, [r7, #4]
    4eb4:	429a      	cmp	r2, r3
    4eb6:	d101      	bne.n	4ebc <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4eb8:	2300      	movs	r3, #0
    4eba:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d105      	bne.n	4ece <vTaskSuspend+0x32>
    4ec2:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eca:	681b      	ldr	r3, [r3, #0]
    4ecc:	e000      	b.n	4ed0 <vTaskSuspend+0x34>
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4ed2:	68fb      	ldr	r3, [r7, #12]
    4ed4:	3304      	adds	r3, #4
    4ed6:	4618      	mov	r0, r3
    4ed8:	f7ff f97e 	bl	41d8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4edc:	68fb      	ldr	r3, [r7, #12]
    4ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	d004      	beq.n	4eee <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4ee4:	68fb      	ldr	r3, [r7, #12]
    4ee6:	3318      	adds	r3, #24
    4ee8:	4618      	mov	r0, r3
    4eea:	f7ff f975 	bl	41d8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4eee:	68fb      	ldr	r3, [r7, #12]
    4ef0:	3304      	adds	r3, #4
    4ef2:	f241 20a0 	movw	r0, #4768	; 0x12a0
    4ef6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4efa:	4619      	mov	r1, r3
    4efc:	f7ff f90c 	bl	4118 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4f00:	f000 ff32 	bl	5d68 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	2b00      	cmp	r3, #0
    4f08:	d11e      	bne.n	4f48 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4f0a:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f12:	681b      	ldr	r3, [r3, #0]
    4f14:	2b00      	cmp	r3, #0
    4f16:	d002      	beq.n	4f1e <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4f18:	f000 ff02 	bl	5d20 <vPortYieldFromISR>
    4f1c:	e014      	b.n	4f48 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4f1e:	f241 23a0 	movw	r3, #4768	; 0x12a0
    4f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f26:	681a      	ldr	r2, [r3, #0]
    4f28:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f30:	681b      	ldr	r3, [r3, #0]
    4f32:	429a      	cmp	r2, r3
    4f34:	d106      	bne.n	4f44 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4f36:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f3e:	2200      	movs	r2, #0
    4f40:	601a      	str	r2, [r3, #0]
    4f42:	e001      	b.n	4f48 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4f44:	f000 fadc 	bl	5500 <vTaskSwitchContext>
				}
			}
		}
	}
    4f48:	3710      	adds	r7, #16
    4f4a:	46bd      	mov	sp, r7
    4f4c:	bd80      	pop	{r7, pc}
    4f4e:	bf00      	nop

00004f50 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4f50:	b480      	push	{r7}
    4f52:	b085      	sub	sp, #20
    4f54:	af00      	add	r7, sp, #0
    4f56:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4f58:	2300      	movs	r3, #0
    4f5a:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4f5c:	687b      	ldr	r3, [r7, #4]
    4f5e:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4f60:	68bb      	ldr	r3, [r7, #8]
    4f62:	695a      	ldr	r2, [r3, #20]
    4f64:	f241 23a0 	movw	r3, #4768	; 0x12a0
    4f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f6c:	429a      	cmp	r2, r3
    4f6e:	d10d      	bne.n	4f8c <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4f70:	68bb      	ldr	r3, [r7, #8]
    4f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f74:	f241 2374 	movw	r3, #4724	; 0x1274
    4f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f7c:	429a      	cmp	r2, r3
    4f7e:	d005      	beq.n	4f8c <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4f80:	68bb      	ldr	r3, [r7, #8]
    4f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f84:	2b00      	cmp	r3, #0
    4f86:	d101      	bne.n	4f8c <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4f88:	2301      	movs	r3, #1
    4f8a:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4f8c:	68fb      	ldr	r3, [r7, #12]
	}
    4f8e:	4618      	mov	r0, r3
    4f90:	3714      	adds	r7, #20
    4f92:	46bd      	mov	sp, r7
    4f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f98:	4770      	bx	lr
    4f9a:	bf00      	nop

00004f9c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b084      	sub	sp, #16
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4fa4:	687b      	ldr	r3, [r7, #4]
    4fa6:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4fa8:	68fb      	ldr	r3, [r7, #12]
    4faa:	2b00      	cmp	r3, #0
    4fac:	d043      	beq.n	5036 <vTaskResume+0x9a>
    4fae:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb6:	681b      	ldr	r3, [r3, #0]
    4fb8:	68fa      	ldr	r2, [r7, #12]
    4fba:	429a      	cmp	r2, r3
    4fbc:	d03b      	beq.n	5036 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4fbe:	f000 febd 	bl	5d3c <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4fc2:	68f8      	ldr	r0, [r7, #12]
    4fc4:	f7ff ffc4 	bl	4f50 <xTaskIsTaskSuspended>
    4fc8:	4603      	mov	r3, r0
    4fca:	2b01      	cmp	r3, #1
    4fcc:	d131      	bne.n	5032 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4fce:	68fb      	ldr	r3, [r7, #12]
    4fd0:	3304      	adds	r3, #4
    4fd2:	4618      	mov	r0, r3
    4fd4:	f7ff f900 	bl	41d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4fd8:	68fb      	ldr	r3, [r7, #12]
    4fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fdc:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe4:	681b      	ldr	r3, [r3, #0]
    4fe6:	429a      	cmp	r2, r3
    4fe8:	d906      	bls.n	4ff8 <vTaskResume+0x5c>
    4fea:	68fb      	ldr	r3, [r7, #12]
    4fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fee:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff6:	601a      	str	r2, [r3, #0]
    4ff8:	68fb      	ldr	r3, [r7, #12]
    4ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ffc:	4613      	mov	r3, r2
    4ffe:	009b      	lsls	r3, r3, #2
    5000:	4413      	add	r3, r2
    5002:	009b      	lsls	r3, r3, #2
    5004:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5008:	f2c2 0200 	movt	r2, #8192	; 0x2000
    500c:	441a      	add	r2, r3
    500e:	68fb      	ldr	r3, [r7, #12]
    5010:	3304      	adds	r3, #4
    5012:	4610      	mov	r0, r2
    5014:	4619      	mov	r1, r3
    5016:	f7ff f87f 	bl	4118 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    501a:	68fb      	ldr	r3, [r7, #12]
    501c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    501e:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5026:	681b      	ldr	r3, [r3, #0]
    5028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    502a:	429a      	cmp	r2, r3
    502c:	d301      	bcc.n	5032 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    502e:	f000 fe77 	bl	5d20 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    5032:	f000 fe99 	bl	5d68 <vPortExitCritical>
		}
	}
    5036:	3710      	adds	r7, #16
    5038:	46bd      	mov	sp, r7
    503a:	bd80      	pop	{r7, pc}

0000503c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    503c:	b580      	push	{r7, lr}
    503e:	b086      	sub	sp, #24
    5040:	af00      	add	r7, sp, #0
    5042:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    5044:	2300      	movs	r3, #0
    5046:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    504c:	2300      	movs	r3, #0
    504e:	60fb      	str	r3, [r7, #12]
    5050:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5054:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    5058:	6938      	ldr	r0, [r7, #16]
    505a:	f7ff ff79 	bl	4f50 <xTaskIsTaskSuspended>
    505e:	4603      	mov	r3, r0
    5060:	2b01      	cmp	r3, #1
    5062:	d144      	bne.n	50ee <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5064:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506c:	681b      	ldr	r3, [r3, #0]
    506e:	2b00      	cmp	r3, #0
    5070:	d134      	bne.n	50dc <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    5072:	693b      	ldr	r3, [r7, #16]
    5074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5076:	f241 13dc 	movw	r3, #4572	; 0x11dc
    507a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    507e:	681b      	ldr	r3, [r3, #0]
    5080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5082:	429a      	cmp	r2, r3
    5084:	bf34      	ite	cc
    5086:	2300      	movcc	r3, #0
    5088:	2301      	movcs	r3, #1
    508a:	b2db      	uxtb	r3, r3
    508c:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    508e:	693b      	ldr	r3, [r7, #16]
    5090:	3304      	adds	r3, #4
    5092:	4618      	mov	r0, r3
    5094:	f7ff f8a0 	bl	41d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5098:	693b      	ldr	r3, [r7, #16]
    509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    509c:	f241 23c0 	movw	r3, #4800	; 0x12c0
    50a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50a4:	681b      	ldr	r3, [r3, #0]
    50a6:	429a      	cmp	r2, r3
    50a8:	d906      	bls.n	50b8 <xTaskResumeFromISR+0x7c>
    50aa:	693b      	ldr	r3, [r7, #16]
    50ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50ae:	f241 23c0 	movw	r3, #4800	; 0x12c0
    50b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b6:	601a      	str	r2, [r3, #0]
    50b8:	693b      	ldr	r3, [r7, #16]
    50ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50bc:	4613      	mov	r3, r2
    50be:	009b      	lsls	r3, r3, #2
    50c0:	4413      	add	r3, r2
    50c2:	009b      	lsls	r3, r3, #2
    50c4:	f241 12e0 	movw	r2, #4576	; 0x11e0
    50c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50cc:	441a      	add	r2, r3
    50ce:	693b      	ldr	r3, [r7, #16]
    50d0:	3304      	adds	r3, #4
    50d2:	4610      	mov	r0, r2
    50d4:	4619      	mov	r1, r3
    50d6:	f7ff f81f 	bl	4118 <vListInsertEnd>
    50da:	e008      	b.n	50ee <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    50dc:	693b      	ldr	r3, [r7, #16]
    50de:	3318      	adds	r3, #24
    50e0:	f241 2074 	movw	r0, #4724	; 0x1274
    50e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50e8:	4619      	mov	r1, r3
    50ea:	f7ff f815 	bl	4118 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    50ee:	f04f 0000 	mov.w	r0, #0
    50f2:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    50f6:	697b      	ldr	r3, [r7, #20]
	}
    50f8:	4618      	mov	r0, r3
    50fa:	3718      	adds	r7, #24
    50fc:	46bd      	mov	sp, r7
    50fe:	bd80      	pop	{r7, pc}

00005100 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    5100:	b580      	push	{r7, lr}
    5102:	b086      	sub	sp, #24
    5104:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    5106:	2300      	movs	r3, #0
    5108:	9300      	str	r3, [sp, #0]
    510a:	2300      	movs	r3, #0
    510c:	9301      	str	r3, [sp, #4]
    510e:	2300      	movs	r3, #0
    5110:	9302      	str	r3, [sp, #8]
    5112:	2300      	movs	r3, #0
    5114:	9303      	str	r3, [sp, #12]
    5116:	f245 70b9 	movw	r0, #22457	; 0x57b9
    511a:	f2c0 0000 	movt	r0, #0
    511e:	f648 01ec 	movw	r1, #35052	; 0x88ec
    5122:	f2c0 0101 	movt	r1, #1
    5126:	2280      	movs	r2, #128	; 0x80
    5128:	2300      	movs	r3, #0
    512a:	f7ff fc6b 	bl	4a04 <xTaskGenericCreate>
    512e:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5130:	687b      	ldr	r3, [r7, #4]
    5132:	2b01      	cmp	r3, #1
    5134:	d111      	bne.n	515a <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    5136:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    513a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    513e:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5146:	2201      	movs	r2, #1
    5148:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    514a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    514e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5152:	2200      	movs	r2, #0
    5154:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    5156:	f000 fdb5 	bl	5cc4 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    515a:	3708      	adds	r7, #8
    515c:	46bd      	mov	sp, r7
    515e:	bd80      	pop	{r7, pc}

00005160 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5160:	b580      	push	{r7, lr}
    5162:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    5164:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5168:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    516c:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5174:	2200      	movs	r2, #0
    5176:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    5178:	f000 fdcc 	bl	5d14 <vPortEndScheduler>
}
    517c:	bd80      	pop	{r7, pc}
    517e:	bf00      	nop

00005180 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    5180:	b480      	push	{r7}
    5182:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    5184:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518c:	681b      	ldr	r3, [r3, #0]
    518e:	1c5a      	adds	r2, r3, #1
    5190:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5198:	601a      	str	r2, [r3, #0]
}
    519a:	46bd      	mov	sp, r7
    519c:	f85d 7b04 	ldr.w	r7, [sp], #4
    51a0:	4770      	bx	lr
    51a2:	bf00      	nop

000051a4 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    51a4:	b590      	push	{r4, r7, lr}
    51a6:	b083      	sub	sp, #12
    51a8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    51aa:	2300      	movs	r3, #0
    51ac:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    51ae:	f000 fdc5 	bl	5d3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    51b2:	f241 23c8 	movw	r3, #4808	; 0x12c8
    51b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ba:	681b      	ldr	r3, [r3, #0]
    51bc:	1e5a      	subs	r2, r3, #1
    51be:	f241 23c8 	movw	r3, #4808	; 0x12c8
    51c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    51c8:	f241 23c8 	movw	r3, #4808	; 0x12c8
    51cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d0:	681b      	ldr	r3, [r3, #0]
    51d2:	2b00      	cmp	r3, #0
    51d4:	d177      	bne.n	52c6 <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    51d6:	f241 23b4 	movw	r3, #4788	; 0x12b4
    51da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51de:	681b      	ldr	r3, [r3, #0]
    51e0:	2b00      	cmp	r3, #0
    51e2:	d070      	beq.n	52c6 <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    51e4:	2300      	movs	r3, #0
    51e6:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    51e8:	e036      	b.n	5258 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    51ea:	f241 2374 	movw	r3, #4724	; 0x1274
    51ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f2:	68db      	ldr	r3, [r3, #12]
    51f4:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    51f6:	f104 0318 	add.w	r3, r4, #24
    51fa:	4618      	mov	r0, r3
    51fc:	f7fe ffec 	bl	41d8 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5200:	1d23      	adds	r3, r4, #4
    5202:	4618      	mov	r0, r3
    5204:	f7fe ffe8 	bl	41d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5208:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    520a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    520e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5212:	681b      	ldr	r3, [r3, #0]
    5214:	429a      	cmp	r2, r3
    5216:	d905      	bls.n	5224 <xTaskResumeAll+0x80>
    5218:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    521a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    521e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5222:	601a      	str	r2, [r3, #0]
    5224:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5226:	4613      	mov	r3, r2
    5228:	009b      	lsls	r3, r3, #2
    522a:	4413      	add	r3, r2
    522c:	009b      	lsls	r3, r3, #2
    522e:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5232:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5236:	441a      	add	r2, r3
    5238:	1d23      	adds	r3, r4, #4
    523a:	4610      	mov	r0, r2
    523c:	4619      	mov	r1, r3
    523e:	f7fe ff6b 	bl	4118 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5242:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5244:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    524c:	681b      	ldr	r3, [r3, #0]
    524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5250:	429a      	cmp	r2, r3
    5252:	d301      	bcc.n	5258 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    5254:	2301      	movs	r3, #1
    5256:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5258:	f241 2374 	movw	r3, #4724	; 0x1274
    525c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5260:	681b      	ldr	r3, [r3, #0]
    5262:	2b00      	cmp	r3, #0
    5264:	d1c1      	bne.n	51ea <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5266:	f241 23cc 	movw	r3, #4812	; 0x12cc
    526a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    526e:	681b      	ldr	r3, [r3, #0]
    5270:	2b00      	cmp	r3, #0
    5272:	d014      	beq.n	529e <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5274:	e00c      	b.n	5290 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    5276:	f000 f865 	bl	5344 <vTaskIncrementTick>
						--uxMissedTicks;
    527a:	f241 23cc 	movw	r3, #4812	; 0x12cc
    527e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5282:	681b      	ldr	r3, [r3, #0]
    5284:	1e5a      	subs	r2, r3, #1
    5286:	f241 23cc 	movw	r3, #4812	; 0x12cc
    528a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528e:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5290:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5298:	681b      	ldr	r3, [r3, #0]
    529a:	2b00      	cmp	r3, #0
    529c:	d1eb      	bne.n	5276 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    529e:	683b      	ldr	r3, [r7, #0]
    52a0:	2b01      	cmp	r3, #1
    52a2:	d006      	beq.n	52b2 <xTaskResumeAll+0x10e>
    52a4:	f241 23d0 	movw	r3, #4816	; 0x12d0
    52a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ac:	681b      	ldr	r3, [r3, #0]
    52ae:	2b01      	cmp	r3, #1
    52b0:	d109      	bne.n	52c6 <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    52b2:	2301      	movs	r3, #1
    52b4:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    52b6:	f241 23d0 	movw	r3, #4816	; 0x12d0
    52ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52be:	2200      	movs	r2, #0
    52c0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    52c2:	f000 fd2d 	bl	5d20 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    52c6:	f000 fd4f 	bl	5d68 <vPortExitCritical>

	return xAlreadyYielded;
    52ca:	687b      	ldr	r3, [r7, #4]
}
    52cc:	4618      	mov	r0, r3
    52ce:	370c      	adds	r7, #12
    52d0:	46bd      	mov	sp, r7
    52d2:	bd90      	pop	{r4, r7, pc}

000052d4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    52d4:	b580      	push	{r7, lr}
    52d6:	b082      	sub	sp, #8
    52d8:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    52da:	f000 fd2f 	bl	5d3c <vPortEnterCritical>
	{
		xTicks = xTickCount;
    52de:	f241 23b8 	movw	r3, #4792	; 0x12b8
    52e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e6:	681b      	ldr	r3, [r3, #0]
    52e8:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    52ea:	f000 fd3d 	bl	5d68 <vPortExitCritical>

	return xTicks;
    52ee:	687b      	ldr	r3, [r7, #4]
}
    52f0:	4618      	mov	r0, r3
    52f2:	3708      	adds	r7, #8
    52f4:	46bd      	mov	sp, r7
    52f6:	bd80      	pop	{r7, pc}

000052f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    52f8:	b480      	push	{r7}
    52fa:	b083      	sub	sp, #12
    52fc:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    52fe:	2300      	movs	r3, #0
    5300:	607b      	str	r3, [r7, #4]
    5302:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5306:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    530a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    530e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5312:	681b      	ldr	r3, [r3, #0]
    5314:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    5316:	f04f 0000 	mov.w	r0, #0
    531a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    531e:	683b      	ldr	r3, [r7, #0]
}
    5320:	4618      	mov	r0, r3
    5322:	370c      	adds	r7, #12
    5324:	46bd      	mov	sp, r7
    5326:	f85d 7b04 	ldr.w	r7, [sp], #4
    532a:	4770      	bx	lr

0000532c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    532c:	b480      	push	{r7}
    532e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5330:	f241 23b4 	movw	r3, #4788	; 0x12b4
    5334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5338:	681b      	ldr	r3, [r3, #0]
}
    533a:	4618      	mov	r0, r3
    533c:	46bd      	mov	sp, r7
    533e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5342:	4770      	bx	lr

00005344 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5344:	b580      	push	{r7, lr}
    5346:	b084      	sub	sp, #16
    5348:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    534a:	f241 23c8 	movw	r3, #4808	; 0x12c8
    534e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5352:	681b      	ldr	r3, [r3, #0]
    5354:	2b00      	cmp	r3, #0
    5356:	f040 80b9 	bne.w	54cc <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    535a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    535e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5362:	681b      	ldr	r3, [r3, #0]
    5364:	1c5a      	adds	r2, r3, #1
    5366:	f241 23b8 	movw	r3, #4792	; 0x12b8
    536a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    536e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5370:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5378:	681b      	ldr	r3, [r3, #0]
    537a:	2b00      	cmp	r3, #0
    537c:	d13f      	bne.n	53fe <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    537e:	f241 236c 	movw	r3, #4716	; 0x126c
    5382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5386:	681b      	ldr	r3, [r3, #0]
    5388:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    538a:	f241 2370 	movw	r3, #4720	; 0x1270
    538e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5392:	681a      	ldr	r2, [r3, #0]
    5394:	f241 236c 	movw	r3, #4716	; 0x126c
    5398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    539c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    539e:	f241 2370 	movw	r3, #4720	; 0x1270
    53a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a6:	68fa      	ldr	r2, [r7, #12]
    53a8:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    53aa:	f241 23d4 	movw	r3, #4820	; 0x12d4
    53ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b2:	681b      	ldr	r3, [r3, #0]
    53b4:	1c5a      	adds	r2, r3, #1
    53b6:	f241 23d4 	movw	r3, #4820	; 0x12d4
    53ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53be:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    53c0:	f241 236c 	movw	r3, #4716	; 0x126c
    53c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c8:	681b      	ldr	r3, [r3, #0]
    53ca:	681b      	ldr	r3, [r3, #0]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d107      	bne.n	53e0 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    53d0:	f240 5330 	movw	r3, #1328	; 0x530
    53d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d8:	f04f 32ff 	mov.w	r2, #4294967295
    53dc:	601a      	str	r2, [r3, #0]
    53de:	e00e      	b.n	53fe <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    53e0:	f241 236c 	movw	r3, #4716	; 0x126c
    53e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e8:	681b      	ldr	r3, [r3, #0]
    53ea:	68db      	ldr	r3, [r3, #12]
    53ec:	68db      	ldr	r3, [r3, #12]
    53ee:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    53f0:	68bb      	ldr	r3, [r7, #8]
    53f2:	685a      	ldr	r2, [r3, #4]
    53f4:	f240 5330 	movw	r3, #1328	; 0x530
    53f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fc:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    53fe:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5406:	681a      	ldr	r2, [r3, #0]
    5408:	f240 5330 	movw	r3, #1328	; 0x530
    540c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5410:	681b      	ldr	r3, [r3, #0]
    5412:	429a      	cmp	r2, r3
    5414:	d359      	bcc.n	54ca <vTaskIncrementTick+0x186>
    5416:	f241 236c 	movw	r3, #4716	; 0x126c
    541a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    541e:	681b      	ldr	r3, [r3, #0]
    5420:	681b      	ldr	r3, [r3, #0]
    5422:	2b00      	cmp	r3, #0
    5424:	d107      	bne.n	5436 <vTaskIncrementTick+0xf2>
    5426:	f240 5330 	movw	r3, #1328	; 0x530
    542a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542e:	f04f 32ff 	mov.w	r2, #4294967295
    5432:	601a      	str	r2, [r3, #0]
    5434:	e049      	b.n	54ca <vTaskIncrementTick+0x186>
    5436:	f241 236c 	movw	r3, #4716	; 0x126c
    543a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    543e:	681b      	ldr	r3, [r3, #0]
    5440:	68db      	ldr	r3, [r3, #12]
    5442:	68db      	ldr	r3, [r3, #12]
    5444:	60bb      	str	r3, [r7, #8]
    5446:	68bb      	ldr	r3, [r7, #8]
    5448:	685b      	ldr	r3, [r3, #4]
    544a:	607b      	str	r3, [r7, #4]
    544c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5454:	681a      	ldr	r2, [r3, #0]
    5456:	687b      	ldr	r3, [r7, #4]
    5458:	429a      	cmp	r2, r3
    545a:	d206      	bcs.n	546a <vTaskIncrementTick+0x126>
    545c:	f240 5330 	movw	r3, #1328	; 0x530
    5460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5464:	687a      	ldr	r2, [r7, #4]
    5466:	601a      	str	r2, [r3, #0]
    5468:	e02f      	b.n	54ca <vTaskIncrementTick+0x186>
    546a:	68bb      	ldr	r3, [r7, #8]
    546c:	3304      	adds	r3, #4
    546e:	4618      	mov	r0, r3
    5470:	f7fe feb2 	bl	41d8 <vListRemove>
    5474:	68bb      	ldr	r3, [r7, #8]
    5476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5478:	2b00      	cmp	r3, #0
    547a:	d004      	beq.n	5486 <vTaskIncrementTick+0x142>
    547c:	68bb      	ldr	r3, [r7, #8]
    547e:	3318      	adds	r3, #24
    5480:	4618      	mov	r0, r3
    5482:	f7fe fea9 	bl	41d8 <vListRemove>
    5486:	68bb      	ldr	r3, [r7, #8]
    5488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    548a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    548e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	429a      	cmp	r2, r3
    5496:	d906      	bls.n	54a6 <vTaskIncrementTick+0x162>
    5498:	68bb      	ldr	r3, [r7, #8]
    549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    549c:	f241 23c0 	movw	r3, #4800	; 0x12c0
    54a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a4:	601a      	str	r2, [r3, #0]
    54a6:	68bb      	ldr	r3, [r7, #8]
    54a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54aa:	4613      	mov	r3, r2
    54ac:	009b      	lsls	r3, r3, #2
    54ae:	4413      	add	r3, r2
    54b0:	009b      	lsls	r3, r3, #2
    54b2:	f241 12e0 	movw	r2, #4576	; 0x11e0
    54b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54ba:	441a      	add	r2, r3
    54bc:	68bb      	ldr	r3, [r7, #8]
    54be:	3304      	adds	r3, #4
    54c0:	4610      	mov	r0, r2
    54c2:	4619      	mov	r1, r3
    54c4:	f7fe fe28 	bl	4118 <vListInsertEnd>
    54c8:	e7a5      	b.n	5416 <vTaskIncrementTick+0xd2>
    54ca:	e00c      	b.n	54e6 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    54cc:	f241 23cc 	movw	r3, #4812	; 0x12cc
    54d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	1c5a      	adds	r2, r3, #1
    54d8:	f241 23cc 	movw	r3, #4812	; 0x12cc
    54dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54e0:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    54e2:	f012 f909 	bl	176f8 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    54e6:	f241 23cc 	movw	r3, #4812	; 0x12cc
    54ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ee:	681b      	ldr	r3, [r3, #0]
    54f0:	2b00      	cmp	r3, #0
    54f2:	d101      	bne.n	54f8 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    54f4:	f012 f900 	bl	176f8 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    54f8:	3710      	adds	r7, #16
    54fa:	46bd      	mov	sp, r7
    54fc:	bd80      	pop	{r7, pc}
    54fe:	bf00      	nop

00005500 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5500:	b580      	push	{r7, lr}
    5502:	b082      	sub	sp, #8
    5504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    5506:	f241 23c8 	movw	r3, #4808	; 0x12c8
    550a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    550e:	681b      	ldr	r3, [r3, #0]
    5510:	2b00      	cmp	r3, #0
    5512:	d006      	beq.n	5522 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5514:	f241 23d0 	movw	r3, #4816	; 0x12d0
    5518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    551c:	2201      	movs	r2, #1
    551e:	601a      	str	r2, [r3, #0]
    5520:	e047      	b.n	55b2 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    5522:	f012 f8e3 	bl	176ec <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5526:	e00a      	b.n	553e <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5528:	f241 23c0 	movw	r3, #4800	; 0x12c0
    552c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5530:	681b      	ldr	r3, [r3, #0]
    5532:	1e5a      	subs	r2, r3, #1
    5534:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    553c:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    553e:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5546:	6819      	ldr	r1, [r3, #0]
    5548:	f241 12e0 	movw	r2, #4576	; 0x11e0
    554c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5550:	460b      	mov	r3, r1
    5552:	009b      	lsls	r3, r3, #2
    5554:	440b      	add	r3, r1
    5556:	009b      	lsls	r3, r3, #2
    5558:	4413      	add	r3, r2
    555a:	681b      	ldr	r3, [r3, #0]
    555c:	2b00      	cmp	r3, #0
    555e:	d0e3      	beq.n	5528 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5560:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5568:	681a      	ldr	r2, [r3, #0]
    556a:	4613      	mov	r3, r2
    556c:	009b      	lsls	r3, r3, #2
    556e:	4413      	add	r3, r2
    5570:	009b      	lsls	r3, r3, #2
    5572:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5576:	f2c2 0200 	movt	r2, #8192	; 0x2000
    557a:	4413      	add	r3, r2
    557c:	607b      	str	r3, [r7, #4]
    557e:	687b      	ldr	r3, [r7, #4]
    5580:	685b      	ldr	r3, [r3, #4]
    5582:	685a      	ldr	r2, [r3, #4]
    5584:	687b      	ldr	r3, [r7, #4]
    5586:	605a      	str	r2, [r3, #4]
    5588:	687b      	ldr	r3, [r7, #4]
    558a:	685a      	ldr	r2, [r3, #4]
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	3308      	adds	r3, #8
    5590:	429a      	cmp	r2, r3
    5592:	d104      	bne.n	559e <vTaskSwitchContext+0x9e>
    5594:	687b      	ldr	r3, [r7, #4]
    5596:	685b      	ldr	r3, [r3, #4]
    5598:	685a      	ldr	r2, [r3, #4]
    559a:	687b      	ldr	r3, [r7, #4]
    559c:	605a      	str	r2, [r3, #4]
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	685b      	ldr	r3, [r3, #4]
    55a2:	68da      	ldr	r2, [r3, #12]
    55a4:	f241 13dc 	movw	r3, #4572	; 0x11dc
    55a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ac:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    55ae:	f012 f897 	bl	176e0 <myTraceSwitchedIn>
	}
}
    55b2:	3708      	adds	r7, #8
    55b4:	46bd      	mov	sp, r7
    55b6:	bd80      	pop	{r7, pc}

000055b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    55b8:	b580      	push	{r7, lr}
    55ba:	b084      	sub	sp, #16
    55bc:	af00      	add	r7, sp, #0
    55be:	6078      	str	r0, [r7, #4]
    55c0:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    55c2:	f241 13dc 	movw	r3, #4572	; 0x11dc
    55c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	3318      	adds	r3, #24
    55ce:	6878      	ldr	r0, [r7, #4]
    55d0:	4619      	mov	r1, r3
    55d2:	f7fe fdc9 	bl	4168 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    55d6:	f241 13dc 	movw	r3, #4572	; 0x11dc
    55da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55de:	681b      	ldr	r3, [r3, #0]
    55e0:	3304      	adds	r3, #4
    55e2:	4618      	mov	r0, r3
    55e4:	f7fe fdf8 	bl	41d8 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    55e8:	683b      	ldr	r3, [r7, #0]
    55ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    55ee:	d10d      	bne.n	560c <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    55f0:	f241 13dc 	movw	r3, #4572	; 0x11dc
    55f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f8:	681b      	ldr	r3, [r3, #0]
    55fa:	3304      	adds	r3, #4
    55fc:	f241 20a0 	movw	r0, #4768	; 0x12a0
    5600:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5604:	4619      	mov	r1, r3
    5606:	f7fe fd87 	bl	4118 <vListInsertEnd>
    560a:	e00a      	b.n	5622 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    560c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5614:	681a      	ldr	r2, [r3, #0]
    5616:	683b      	ldr	r3, [r7, #0]
    5618:	4413      	add	r3, r2
    561a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    561c:	68f8      	ldr	r0, [r7, #12]
    561e:	f000 f99f 	bl	5960 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    5622:	3710      	adds	r7, #16
    5624:	46bd      	mov	sp, r7
    5626:	bd80      	pop	{r7, pc}

00005628 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5628:	b580      	push	{r7, lr}
    562a:	b084      	sub	sp, #16
    562c:	af00      	add	r7, sp, #0
    562e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5630:	687b      	ldr	r3, [r7, #4]
    5632:	68db      	ldr	r3, [r3, #12]
    5634:	68db      	ldr	r3, [r3, #12]
    5636:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5638:	68bb      	ldr	r3, [r7, #8]
    563a:	3318      	adds	r3, #24
    563c:	4618      	mov	r0, r3
    563e:	f7fe fdcb 	bl	41d8 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5642:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    564a:	681b      	ldr	r3, [r3, #0]
    564c:	2b00      	cmp	r3, #0
    564e:	d126      	bne.n	569e <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5650:	68bb      	ldr	r3, [r7, #8]
    5652:	3304      	adds	r3, #4
    5654:	4618      	mov	r0, r3
    5656:	f7fe fdbf 	bl	41d8 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    565a:	68bb      	ldr	r3, [r7, #8]
    565c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    565e:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5666:	681b      	ldr	r3, [r3, #0]
    5668:	429a      	cmp	r2, r3
    566a:	d906      	bls.n	567a <xTaskRemoveFromEventList+0x52>
    566c:	68bb      	ldr	r3, [r7, #8]
    566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5670:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5678:	601a      	str	r2, [r3, #0]
    567a:	68bb      	ldr	r3, [r7, #8]
    567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    567e:	4613      	mov	r3, r2
    5680:	009b      	lsls	r3, r3, #2
    5682:	4413      	add	r3, r2
    5684:	009b      	lsls	r3, r3, #2
    5686:	f241 12e0 	movw	r2, #4576	; 0x11e0
    568a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    568e:	441a      	add	r2, r3
    5690:	68bb      	ldr	r3, [r7, #8]
    5692:	3304      	adds	r3, #4
    5694:	4610      	mov	r0, r2
    5696:	4619      	mov	r1, r3
    5698:	f7fe fd3e 	bl	4118 <vListInsertEnd>
    569c:	e008      	b.n	56b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    569e:	68bb      	ldr	r3, [r7, #8]
    56a0:	3318      	adds	r3, #24
    56a2:	f241 2074 	movw	r0, #4724	; 0x1274
    56a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    56aa:	4619      	mov	r1, r3
    56ac:	f7fe fd34 	bl	4118 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    56b0:	68bb      	ldr	r3, [r7, #8]
    56b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56b4:	f241 13dc 	movw	r3, #4572	; 0x11dc
    56b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56bc:	681b      	ldr	r3, [r3, #0]
    56be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56c0:	429a      	cmp	r2, r3
    56c2:	d302      	bcc.n	56ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    56c4:	2301      	movs	r3, #1
    56c6:	60fb      	str	r3, [r7, #12]
    56c8:	e001      	b.n	56ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    56ca:	2300      	movs	r3, #0
    56cc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    56ce:	68fb      	ldr	r3, [r7, #12]
}
    56d0:	4618      	mov	r0, r3
    56d2:	3710      	adds	r7, #16
    56d4:	46bd      	mov	sp, r7
    56d6:	bd80      	pop	{r7, pc}

000056d8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    56d8:	b480      	push	{r7}
    56da:	b083      	sub	sp, #12
    56dc:	af00      	add	r7, sp, #0
    56de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    56e0:	f241 23d4 	movw	r3, #4820	; 0x12d4
    56e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e8:	681a      	ldr	r2, [r3, #0]
    56ea:	687b      	ldr	r3, [r7, #4]
    56ec:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    56ee:	f241 23b8 	movw	r3, #4792	; 0x12b8
    56f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f6:	681a      	ldr	r2, [r3, #0]
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	605a      	str	r2, [r3, #4]
}
    56fc:	370c      	adds	r7, #12
    56fe:	46bd      	mov	sp, r7
    5700:	f85d 7b04 	ldr.w	r7, [sp], #4
    5704:	4770      	bx	lr
    5706:	bf00      	nop

00005708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5708:	b580      	push	{r7, lr}
    570a:	b084      	sub	sp, #16
    570c:	af00      	add	r7, sp, #0
    570e:	6078      	str	r0, [r7, #4]
    5710:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5712:	f000 fb13 	bl	5d3c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    5716:	683b      	ldr	r3, [r7, #0]
    5718:	681b      	ldr	r3, [r3, #0]
    571a:	f1b3 3fff 	cmp.w	r3, #4294967295
    571e:	d102      	bne.n	5726 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5720:	2300      	movs	r3, #0
    5722:	60fb      	str	r3, [r7, #12]
    5724:	e035      	b.n	5792 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    5726:	687b      	ldr	r3, [r7, #4]
    5728:	681a      	ldr	r2, [r3, #0]
    572a:	f241 23d4 	movw	r3, #4820	; 0x12d4
    572e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5732:	681b      	ldr	r3, [r3, #0]
    5734:	429a      	cmp	r2, r3
    5736:	d00b      	beq.n	5750 <xTaskCheckForTimeOut+0x48>
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	685a      	ldr	r2, [r3, #4]
    573c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5744:	681b      	ldr	r3, [r3, #0]
    5746:	429a      	cmp	r2, r3
    5748:	d802      	bhi.n	5750 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    574a:	2301      	movs	r3, #1
    574c:	60fb      	str	r3, [r7, #12]
    574e:	e020      	b.n	5792 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5750:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5758:	681a      	ldr	r2, [r3, #0]
    575a:	687b      	ldr	r3, [r7, #4]
    575c:	685b      	ldr	r3, [r3, #4]
    575e:	1ad2      	subs	r2, r2, r3
    5760:	683b      	ldr	r3, [r7, #0]
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	429a      	cmp	r2, r3
    5766:	d212      	bcs.n	578e <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5768:	683b      	ldr	r3, [r7, #0]
    576a:	681a      	ldr	r2, [r3, #0]
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	6859      	ldr	r1, [r3, #4]
    5770:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	1acb      	subs	r3, r1, r3
    577c:	441a      	add	r2, r3
    577e:	683b      	ldr	r3, [r7, #0]
    5780:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    5782:	6878      	ldr	r0, [r7, #4]
    5784:	f7ff ffa8 	bl	56d8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5788:	2300      	movs	r3, #0
    578a:	60fb      	str	r3, [r7, #12]
    578c:	e001      	b.n	5792 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    578e:	2301      	movs	r3, #1
    5790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5792:	f000 fae9 	bl	5d68 <vPortExitCritical>

	return xReturn;
    5796:	68fb      	ldr	r3, [r7, #12]
}
    5798:	4618      	mov	r0, r3
    579a:	3710      	adds	r7, #16
    579c:	46bd      	mov	sp, r7
    579e:	bd80      	pop	{r7, pc}

000057a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    57a0:	b480      	push	{r7}
    57a2:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    57a4:	f241 23d0 	movw	r3, #4816	; 0x12d0
    57a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ac:	2201      	movs	r2, #1
    57ae:	601a      	str	r2, [r3, #0]
}
    57b0:	46bd      	mov	sp, r7
    57b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57b6:	4770      	bx	lr

000057b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    57b8:	b580      	push	{r7, lr}
    57ba:	b082      	sub	sp, #8
    57bc:	af00      	add	r7, sp, #0
    57be:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    57c0:	f000 f886 	bl	58d0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    57c4:	f000 faac 	bl	5d20 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    57c8:	e7fa      	b.n	57c0 <prvIdleTask+0x8>
    57ca:	bf00      	nop

000057cc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    57cc:	b580      	push	{r7, lr}
    57ce:	b084      	sub	sp, #16
    57d0:	af00      	add	r7, sp, #0
    57d2:	60f8      	str	r0, [r7, #12]
    57d4:	60b9      	str	r1, [r7, #8]
    57d6:	607a      	str	r2, [r7, #4]
    57d8:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    57da:	68fb      	ldr	r3, [r7, #12]
    57dc:	3334      	adds	r3, #52	; 0x34
    57de:	4618      	mov	r0, r3
    57e0:	68b9      	ldr	r1, [r7, #8]
    57e2:	2210      	movs	r2, #16
    57e4:	f013 f824 	bl	18830 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    57e8:	68fb      	ldr	r3, [r7, #12]
    57ea:	2200      	movs	r2, #0
    57ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    57f0:	687b      	ldr	r3, [r7, #4]
    57f2:	2b04      	cmp	r3, #4
    57f4:	d901      	bls.n	57fa <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    57f6:	2304      	movs	r3, #4
    57f8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    57fa:	68fb      	ldr	r3, [r7, #12]
    57fc:	687a      	ldr	r2, [r7, #4]
    57fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5800:	68fb      	ldr	r3, [r7, #12]
    5802:	687a      	ldr	r2, [r7, #4]
    5804:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    5806:	68fb      	ldr	r3, [r7, #12]
    5808:	3304      	adds	r3, #4
    580a:	4618      	mov	r0, r3
    580c:	f7fe fc78 	bl	4100 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5810:	68fb      	ldr	r3, [r7, #12]
    5812:	3318      	adds	r3, #24
    5814:	4618      	mov	r0, r3
    5816:	f7fe fc73 	bl	4100 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    581a:	68fb      	ldr	r3, [r7, #12]
    581c:	68fa      	ldr	r2, [r7, #12]
    581e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5820:	687b      	ldr	r3, [r7, #4]
    5822:	f1c3 0205 	rsb	r2, r3, #5
    5826:	68fb      	ldr	r3, [r7, #12]
    5828:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    582a:	68fb      	ldr	r3, [r7, #12]
    582c:	68fa      	ldr	r2, [r7, #12]
    582e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5830:	3710      	adds	r7, #16
    5832:	46bd      	mov	sp, r7
    5834:	bd80      	pop	{r7, pc}
    5836:	bf00      	nop

00005838 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5838:	b580      	push	{r7, lr}
    583a:	b082      	sub	sp, #8
    583c:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    583e:	2300      	movs	r3, #0
    5840:	607b      	str	r3, [r7, #4]
    5842:	e00f      	b.n	5864 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5844:	687a      	ldr	r2, [r7, #4]
    5846:	4613      	mov	r3, r2
    5848:	009b      	lsls	r3, r3, #2
    584a:	4413      	add	r3, r2
    584c:	009b      	lsls	r3, r3, #2
    584e:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5852:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5856:	4413      	add	r3, r2
    5858:	4618      	mov	r0, r3
    585a:	f7fe fc31 	bl	40c0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    585e:	687b      	ldr	r3, [r7, #4]
    5860:	3301      	adds	r3, #1
    5862:	607b      	str	r3, [r7, #4]
    5864:	687b      	ldr	r3, [r7, #4]
    5866:	2b04      	cmp	r3, #4
    5868:	d9ec      	bls.n	5844 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    586a:	f241 2044 	movw	r0, #4676	; 0x1244
    586e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5872:	f7fe fc25 	bl	40c0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    5876:	f241 2058 	movw	r0, #4696	; 0x1258
    587a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    587e:	f7fe fc1f 	bl	40c0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5882:	f241 2074 	movw	r0, #4724	; 0x1274
    5886:	f2c2 0000 	movt	r0, #8192	; 0x2000
    588a:	f7fe fc19 	bl	40c0 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    588e:	f241 2088 	movw	r0, #4744	; 0x1288
    5892:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5896:	f7fe fc13 	bl	40c0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    589a:	f241 20a0 	movw	r0, #4768	; 0x12a0
    589e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58a2:	f7fe fc0d 	bl	40c0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    58a6:	f241 236c 	movw	r3, #4716	; 0x126c
    58aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ae:	f241 2244 	movw	r2, #4676	; 0x1244
    58b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    58b8:	f241 2370 	movw	r3, #4720	; 0x1270
    58bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c0:	f241 2258 	movw	r2, #4696	; 0x1258
    58c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58c8:	601a      	str	r2, [r3, #0]
}
    58ca:	3708      	adds	r7, #8
    58cc:	46bd      	mov	sp, r7
    58ce:	bd80      	pop	{r7, pc}

000058d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    58d0:	b580      	push	{r7, lr}
    58d2:	b082      	sub	sp, #8
    58d4:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    58d6:	f241 239c 	movw	r3, #4764	; 0x129c
    58da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58de:	681b      	ldr	r3, [r3, #0]
    58e0:	2b00      	cmp	r3, #0
    58e2:	d03a      	beq.n	595a <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    58e4:	f7ff fc4c 	bl	5180 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    58e8:	f241 2388 	movw	r3, #4744	; 0x1288
    58ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58f0:	681b      	ldr	r3, [r3, #0]
    58f2:	2b00      	cmp	r3, #0
    58f4:	bf14      	ite	ne
    58f6:	2300      	movne	r3, #0
    58f8:	2301      	moveq	r3, #1
    58fa:	b2db      	uxtb	r3, r3
    58fc:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    58fe:	f7ff fc51 	bl	51a4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    5902:	687b      	ldr	r3, [r7, #4]
    5904:	2b00      	cmp	r3, #0
    5906:	d128      	bne.n	595a <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5908:	f000 fa18 	bl	5d3c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    590c:	f241 2388 	movw	r3, #4744	; 0x1288
    5910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5914:	68db      	ldr	r3, [r3, #12]
    5916:	68db      	ldr	r3, [r3, #12]
    5918:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    591a:	683b      	ldr	r3, [r7, #0]
    591c:	3304      	adds	r3, #4
    591e:	4618      	mov	r0, r3
    5920:	f7fe fc5a 	bl	41d8 <vListRemove>
					--uxCurrentNumberOfTasks;
    5924:	f241 23b4 	movw	r3, #4788	; 0x12b4
    5928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    592c:	681b      	ldr	r3, [r3, #0]
    592e:	1e5a      	subs	r2, r3, #1
    5930:	f241 23b4 	movw	r3, #4788	; 0x12b4
    5934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5938:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    593a:	f241 239c 	movw	r3, #4764	; 0x129c
    593e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	1e5a      	subs	r2, r3, #1
    5946:	f241 239c 	movw	r3, #4764	; 0x129c
    594a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    594e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5950:	f000 fa0a 	bl	5d68 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5954:	6838      	ldr	r0, [r7, #0]
    5956:	f000 f879 	bl	5a4c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    595a:	3708      	adds	r7, #8
    595c:	46bd      	mov	sp, r7
    595e:	bd80      	pop	{r7, pc}

00005960 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5960:	b580      	push	{r7, lr}
    5962:	b082      	sub	sp, #8
    5964:	af00      	add	r7, sp, #0
    5966:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5968:	f241 13dc 	movw	r3, #4572	; 0x11dc
    596c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5970:	681b      	ldr	r3, [r3, #0]
    5972:	687a      	ldr	r2, [r7, #4]
    5974:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    5976:	f241 23b8 	movw	r3, #4792	; 0x12b8
    597a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    597e:	681b      	ldr	r3, [r3, #0]
    5980:	687a      	ldr	r2, [r7, #4]
    5982:	429a      	cmp	r2, r3
    5984:	d20f      	bcs.n	59a6 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5986:	f241 2370 	movw	r3, #4720	; 0x1270
    598a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    598e:	681a      	ldr	r2, [r3, #0]
    5990:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	3304      	adds	r3, #4
    599c:	4610      	mov	r0, r2
    599e:	4619      	mov	r1, r3
    59a0:	f7fe fbe2 	bl	4168 <vListInsert>
    59a4:	e01c      	b.n	59e0 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    59a6:	f241 236c 	movw	r3, #4716	; 0x126c
    59aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ae:	681a      	ldr	r2, [r3, #0]
    59b0:	f241 13dc 	movw	r3, #4572	; 0x11dc
    59b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b8:	681b      	ldr	r3, [r3, #0]
    59ba:	3304      	adds	r3, #4
    59bc:	4610      	mov	r0, r2
    59be:	4619      	mov	r1, r3
    59c0:	f7fe fbd2 	bl	4168 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    59c4:	f240 5330 	movw	r3, #1328	; 0x530
    59c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59cc:	681b      	ldr	r3, [r3, #0]
    59ce:	687a      	ldr	r2, [r7, #4]
    59d0:	429a      	cmp	r2, r3
    59d2:	d205      	bcs.n	59e0 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    59d4:	f240 5330 	movw	r3, #1328	; 0x530
    59d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59dc:	687a      	ldr	r2, [r7, #4]
    59de:	601a      	str	r2, [r3, #0]
		}
	}
}
    59e0:	3708      	adds	r7, #8
    59e2:	46bd      	mov	sp, r7
    59e4:	bd80      	pop	{r7, pc}
    59e6:	bf00      	nop

000059e8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    59e8:	b580      	push	{r7, lr}
    59ea:	b084      	sub	sp, #16
    59ec:	af00      	add	r7, sp, #0
    59ee:	4603      	mov	r3, r0
    59f0:	6039      	str	r1, [r7, #0]
    59f2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    59f4:	2050      	movs	r0, #80	; 0x50
    59f6:	f000 fa1b 	bl	5e30 <pvPortMalloc>
    59fa:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    59fc:	68fb      	ldr	r3, [r7, #12]
    59fe:	2b00      	cmp	r3, #0
    5a00:	d01f      	beq.n	5a42 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5a02:	683b      	ldr	r3, [r7, #0]
    5a04:	2b00      	cmp	r3, #0
    5a06:	d106      	bne.n	5a16 <prvAllocateTCBAndStack+0x2e>
    5a08:	88fb      	ldrh	r3, [r7, #6]
    5a0a:	009b      	lsls	r3, r3, #2
    5a0c:	4618      	mov	r0, r3
    5a0e:	f000 fa0f 	bl	5e30 <pvPortMalloc>
    5a12:	4603      	mov	r3, r0
    5a14:	e000      	b.n	5a18 <prvAllocateTCBAndStack+0x30>
    5a16:	683b      	ldr	r3, [r7, #0]
    5a18:	68fa      	ldr	r2, [r7, #12]
    5a1a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5a1c:	68fb      	ldr	r3, [r7, #12]
    5a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a20:	2b00      	cmp	r3, #0
    5a22:	d105      	bne.n	5a30 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5a24:	68f8      	ldr	r0, [r7, #12]
    5a26:	f000 fac7 	bl	5fb8 <vPortFree>
			pxNewTCB = NULL;
    5a2a:	2300      	movs	r3, #0
    5a2c:	60fb      	str	r3, [r7, #12]
    5a2e:	e008      	b.n	5a42 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5a30:	68fb      	ldr	r3, [r7, #12]
    5a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5a34:	88fb      	ldrh	r3, [r7, #6]
    5a36:	009b      	lsls	r3, r3, #2
    5a38:	4610      	mov	r0, r2
    5a3a:	21a5      	movs	r1, #165	; 0xa5
    5a3c:	461a      	mov	r2, r3
    5a3e:	f012 fea7 	bl	18790 <memset>
		}
	}

	return pxNewTCB;
    5a42:	68fb      	ldr	r3, [r7, #12]
}
    5a44:	4618      	mov	r0, r3
    5a46:	3710      	adds	r7, #16
    5a48:	46bd      	mov	sp, r7
    5a4a:	bd80      	pop	{r7, pc}

00005a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5a4c:	b580      	push	{r7, lr}
    5a4e:	b082      	sub	sp, #8
    5a50:	af00      	add	r7, sp, #0
    5a52:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5a54:	687b      	ldr	r3, [r7, #4]
    5a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a58:	4618      	mov	r0, r3
    5a5a:	f000 faad 	bl	5fb8 <vPortFree>
		vPortFree( pxTCB );
    5a5e:	6878      	ldr	r0, [r7, #4]
    5a60:	f000 faaa 	bl	5fb8 <vPortFree>
	}
    5a64:	3708      	adds	r7, #8
    5a66:	46bd      	mov	sp, r7
    5a68:	bd80      	pop	{r7, pc}
    5a6a:	bf00      	nop

00005a6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5a6c:	b480      	push	{r7}
    5a6e:	b083      	sub	sp, #12
    5a70:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5a72:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a7a:	681b      	ldr	r3, [r3, #0]
    5a7c:	607b      	str	r3, [r7, #4]

		return xReturn;
    5a7e:	687b      	ldr	r3, [r7, #4]
	}
    5a80:	4618      	mov	r0, r3
    5a82:	370c      	adds	r7, #12
    5a84:	46bd      	mov	sp, r7
    5a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a8a:	4770      	bx	lr

00005a8c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5a8c:	b580      	push	{r7, lr}
    5a8e:	b084      	sub	sp, #16
    5a90:	af00      	add	r7, sp, #0
    5a92:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5a94:	687b      	ldr	r3, [r7, #4]
    5a96:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5a98:	68fb      	ldr	r3, [r7, #12]
    5a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a9c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa4:	681b      	ldr	r3, [r3, #0]
    5aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5aa8:	429a      	cmp	r2, r3
    5aaa:	d24f      	bcs.n	5b4c <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5aac:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab4:	681b      	ldr	r3, [r3, #0]
    5ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ab8:	f1c3 0205 	rsb	r2, r3, #5
    5abc:	68fb      	ldr	r3, [r7, #12]
    5abe:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5ac0:	68fb      	ldr	r3, [r7, #12]
    5ac2:	6959      	ldr	r1, [r3, #20]
    5ac4:	68fb      	ldr	r3, [r7, #12]
    5ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ac8:	4613      	mov	r3, r2
    5aca:	009b      	lsls	r3, r3, #2
    5acc:	4413      	add	r3, r2
    5ace:	009b      	lsls	r3, r3, #2
    5ad0:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5ad4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ad8:	4413      	add	r3, r2
    5ada:	4299      	cmp	r1, r3
    5adc:	d12e      	bne.n	5b3c <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5ade:	68fb      	ldr	r3, [r7, #12]
    5ae0:	3304      	adds	r3, #4
    5ae2:	4618      	mov	r0, r3
    5ae4:	f7fe fb78 	bl	41d8 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5ae8:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5af0:	681b      	ldr	r3, [r3, #0]
    5af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5af4:	68fb      	ldr	r3, [r7, #12]
    5af6:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5af8:	68fb      	ldr	r3, [r7, #12]
    5afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5afc:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b04:	681b      	ldr	r3, [r3, #0]
    5b06:	429a      	cmp	r2, r3
    5b08:	d906      	bls.n	5b18 <vTaskPriorityInherit+0x8c>
    5b0a:	68fb      	ldr	r3, [r7, #12]
    5b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b0e:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b16:	601a      	str	r2, [r3, #0]
    5b18:	68fb      	ldr	r3, [r7, #12]
    5b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b1c:	4613      	mov	r3, r2
    5b1e:	009b      	lsls	r3, r3, #2
    5b20:	4413      	add	r3, r2
    5b22:	009b      	lsls	r3, r3, #2
    5b24:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5b28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b2c:	441a      	add	r2, r3
    5b2e:	68fb      	ldr	r3, [r7, #12]
    5b30:	3304      	adds	r3, #4
    5b32:	4610      	mov	r0, r2
    5b34:	4619      	mov	r1, r3
    5b36:	f7fe faef 	bl	4118 <vListInsertEnd>
    5b3a:	e007      	b.n	5b4c <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5b3c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b44:	681b      	ldr	r3, [r3, #0]
    5b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b48:	68fb      	ldr	r3, [r7, #12]
    5b4a:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5b4c:	3710      	adds	r7, #16
    5b4e:	46bd      	mov	sp, r7
    5b50:	bd80      	pop	{r7, pc}
    5b52:	bf00      	nop

00005b54 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5b54:	b580      	push	{r7, lr}
    5b56:	b084      	sub	sp, #16
    5b58:	af00      	add	r7, sp, #0
    5b5a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5b5c:	687b      	ldr	r3, [r7, #4]
    5b5e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	2b00      	cmp	r3, #0
    5b64:	d035      	beq.n	5bd2 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5b66:	68fb      	ldr	r3, [r7, #12]
    5b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b6a:	68fb      	ldr	r3, [r7, #12]
    5b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5b6e:	429a      	cmp	r2, r3
    5b70:	d02f      	beq.n	5bd2 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	3304      	adds	r3, #4
    5b76:	4618      	mov	r0, r3
    5b78:	f7fe fb2e 	bl	41d8 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5b7c:	68fb      	ldr	r3, [r7, #12]
    5b7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5b80:	68fb      	ldr	r3, [r7, #12]
    5b82:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5b84:	68fb      	ldr	r3, [r7, #12]
    5b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b88:	f1c3 0205 	rsb	r2, r3, #5
    5b8c:	68fb      	ldr	r3, [r7, #12]
    5b8e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5b90:	68fb      	ldr	r3, [r7, #12]
    5b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b94:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b9c:	681b      	ldr	r3, [r3, #0]
    5b9e:	429a      	cmp	r2, r3
    5ba0:	d906      	bls.n	5bb0 <vTaskPriorityDisinherit+0x5c>
    5ba2:	68fb      	ldr	r3, [r7, #12]
    5ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ba6:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bae:	601a      	str	r2, [r3, #0]
    5bb0:	68fb      	ldr	r3, [r7, #12]
    5bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bb4:	4613      	mov	r3, r2
    5bb6:	009b      	lsls	r3, r3, #2
    5bb8:	4413      	add	r3, r2
    5bba:	009b      	lsls	r3, r3, #2
    5bbc:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5bc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bc4:	441a      	add	r2, r3
    5bc6:	68fb      	ldr	r3, [r7, #12]
    5bc8:	3304      	adds	r3, #4
    5bca:	4610      	mov	r0, r2
    5bcc:	4619      	mov	r1, r3
    5bce:	f7fe faa3 	bl	4118 <vListInsertEnd>
			}
		}
	}
    5bd2:	3710      	adds	r7, #16
    5bd4:	46bd      	mov	sp, r7
    5bd6:	bd80      	pop	{r7, pc}

00005bd8 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5bd8:	b480      	push	{r7}
    5bda:	b083      	sub	sp, #12
    5bdc:	af00      	add	r7, sp, #0
    5bde:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5be0:	687b      	ldr	r3, [r7, #4]
    5be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5be4:	4618      	mov	r0, r3
    5be6:	370c      	adds	r7, #12
    5be8:	46bd      	mov	sp, r7
    5bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bee:	4770      	bx	lr

00005bf0 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5bf0:	b480      	push	{r7}
    5bf2:	b083      	sub	sp, #12
    5bf4:	af00      	add	r7, sp, #0
    5bf6:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5bf8:	687b      	ldr	r3, [r7, #4]
    5bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5bfc:	4618      	mov	r0, r3
    5bfe:	370c      	adds	r7, #12
    5c00:	46bd      	mov	sp, r7
    5c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c06:	4770      	bx	lr

00005c08 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5c08:	b480      	push	{r7}
    5c0a:	b083      	sub	sp, #12
    5c0c:	af00      	add	r7, sp, #0
    5c0e:	6078      	str	r0, [r7, #4]
    5c10:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5c12:	687b      	ldr	r3, [r7, #4]
    5c14:	683a      	ldr	r2, [r7, #0]
    5c16:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5c18:	370c      	adds	r7, #12
    5c1a:	46bd      	mov	sp, r7
    5c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c20:	4770      	bx	lr
    5c22:	bf00      	nop

00005c24 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5c24:	b480      	push	{r7}
    5c26:	b083      	sub	sp, #12
    5c28:	af00      	add	r7, sp, #0
    5c2a:	6078      	str	r0, [r7, #4]
    5c2c:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5c2e:	687b      	ldr	r3, [r7, #4]
    5c30:	683a      	ldr	r2, [r7, #0]
    5c32:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5c34:	370c      	adds	r7, #12
    5c36:	46bd      	mov	sp, r7
    5c38:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c3c:	4770      	bx	lr
    5c3e:	bf00      	nop

00005c40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5c40:	b480      	push	{r7}
    5c42:	b085      	sub	sp, #20
    5c44:	af00      	add	r7, sp, #0
    5c46:	60f8      	str	r0, [r7, #12]
    5c48:	60b9      	str	r1, [r7, #8]
    5c4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5c4c:	68fb      	ldr	r3, [r7, #12]
    5c4e:	3b04      	subs	r3, #4
    5c50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5c52:	68fb      	ldr	r3, [r7, #12]
    5c54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5c5a:	68fb      	ldr	r3, [r7, #12]
    5c5c:	3b04      	subs	r3, #4
    5c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5c60:	68ba      	ldr	r2, [r7, #8]
    5c62:	68fb      	ldr	r3, [r7, #12]
    5c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5c66:	68fb      	ldr	r3, [r7, #12]
    5c68:	3b04      	subs	r3, #4
    5c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5c6c:	68fb      	ldr	r3, [r7, #12]
    5c6e:	2200      	movs	r2, #0
    5c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5c72:	68fb      	ldr	r3, [r7, #12]
    5c74:	3b14      	subs	r3, #20
    5c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5c78:	687a      	ldr	r2, [r7, #4]
    5c7a:	68fb      	ldr	r3, [r7, #12]
    5c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5c7e:	68fb      	ldr	r3, [r7, #12]
    5c80:	3b20      	subs	r3, #32
    5c82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5c84:	68fb      	ldr	r3, [r7, #12]
}
    5c86:	4618      	mov	r0, r3
    5c88:	3714      	adds	r7, #20
    5c8a:	46bd      	mov	sp, r7
    5c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c90:	4770      	bx	lr
    5c92:	bf00      	nop

00005c94 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5c94:	4b06      	ldr	r3, [pc, #24]	; (5cb0 <pxCurrentTCBConst2>)
    5c96:	6819      	ldr	r1, [r3, #0]
    5c98:	6808      	ldr	r0, [r1, #0]
    5c9a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5c9e:	f380 8809 	msr	PSP, r0
    5ca2:	f04f 0000 	mov.w	r0, #0
    5ca6:	f380 8811 	msr	BASEPRI, r0
    5caa:	f04e 0e0d 	orr.w	lr, lr, #13
    5cae:	4770      	bx	lr

00005cb0 <pxCurrentTCBConst2>:
    5cb0:	200011dc 	.word	0x200011dc

00005cb4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5cb4:	485d      	ldr	r0, [pc, #372]	; (5e2c <prvSetupTimerInterrupt+0x2c>)
    5cb6:	6800      	ldr	r0, [r0, #0]
    5cb8:	6800      	ldr	r0, [r0, #0]
    5cba:	f380 8808 	msr	MSP, r0
    5cbe:	b662      	cpsie	i
    5cc0:	df00      	svc	0
    5cc2:	bf00      	nop

00005cc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5cc4:	b580      	push	{r7, lr}
    5cc6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5cc8:	f64e 5320 	movw	r3, #60704	; 0xed20
    5ccc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5cd0:	f64e 5220 	movw	r2, #60704	; 0xed20
    5cd4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5cd8:	6812      	ldr	r2, [r2, #0]
    5cda:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5cde:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5ce0:	f64e 5320 	movw	r3, #60704	; 0xed20
    5ce4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5ce8:	f64e 5220 	movw	r2, #60704	; 0xed20
    5cec:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5cf0:	6812      	ldr	r2, [r2, #0]
    5cf2:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5cf6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5cf8:	f000 f882 	bl	5e00 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5cfc:	f240 5334 	movw	r3, #1332	; 0x534
    5d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d04:	2200      	movs	r2, #0
    5d06:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5d08:	f7ff ffd4 	bl	5cb4 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5d0c:	2300      	movs	r3, #0
}
    5d0e:	4618      	mov	r0, r3
    5d10:	bd80      	pop	{r7, pc}
    5d12:	bf00      	nop

00005d14 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5d14:	b480      	push	{r7}
    5d16:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5d18:	46bd      	mov	sp, r7
    5d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d1e:	4770      	bx	lr

00005d20 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5d20:	b480      	push	{r7}
    5d22:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5d24:	f64e 5304 	movw	r3, #60676	; 0xed04
    5d28:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5d30:	601a      	str	r2, [r3, #0]
}
    5d32:	46bd      	mov	sp, r7
    5d34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d38:	4770      	bx	lr
    5d3a:	bf00      	nop

00005d3c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5d3c:	b480      	push	{r7}
    5d3e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5d40:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5d44:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5d48:	f240 5334 	movw	r3, #1332	; 0x534
    5d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	1c5a      	adds	r2, r3, #1
    5d54:	f240 5334 	movw	r3, #1332	; 0x534
    5d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d5c:	601a      	str	r2, [r3, #0]
}
    5d5e:	46bd      	mov	sp, r7
    5d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d64:	4770      	bx	lr
    5d66:	bf00      	nop

00005d68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5d68:	b480      	push	{r7}
    5d6a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5d6c:	f240 5334 	movw	r3, #1332	; 0x534
    5d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d74:	681b      	ldr	r3, [r3, #0]
    5d76:	1e5a      	subs	r2, r3, #1
    5d78:	f240 5334 	movw	r3, #1332	; 0x534
    5d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d80:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5d82:	f240 5334 	movw	r3, #1332	; 0x534
    5d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d8a:	681b      	ldr	r3, [r3, #0]
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d103      	bne.n	5d98 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5d90:	f04f 0000 	mov.w	r0, #0
    5d94:	f380 8811 	msr	BASEPRI, r0
	}
}
    5d98:	46bd      	mov	sp, r7
    5d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d9e:	4770      	bx	lr

00005da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5da0:	f3ef 8009 	mrs	r0, PSP
    5da4:	4b0c      	ldr	r3, [pc, #48]	; (5dd8 <pxCurrentTCBConst>)
    5da6:	681a      	ldr	r2, [r3, #0]
    5da8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5dac:	6010      	str	r0, [r2, #0]
    5dae:	e92d 4008 	stmdb	sp!, {r3, lr}
    5db2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5db6:	f380 8811 	msr	BASEPRI, r0
    5dba:	f7ff fba1 	bl	5500 <vTaskSwitchContext>
    5dbe:	f04f 0000 	mov.w	r0, #0
    5dc2:	f380 8811 	msr	BASEPRI, r0
    5dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5dca:	6819      	ldr	r1, [r3, #0]
    5dcc:	6808      	ldr	r0, [r1, #0]
    5dce:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5dd2:	f380 8809 	msr	PSP, r0
    5dd6:	4770      	bx	lr

00005dd8 <pxCurrentTCBConst>:
    5dd8:	200011dc 	.word	0x200011dc

00005ddc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5ddc:	b580      	push	{r7, lr}
    5dde:	b082      	sub	sp, #8
    5de0:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5de2:	2300      	movs	r3, #0
    5de4:	607b      	str	r3, [r7, #4]
    5de6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5dea:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5dee:	f7ff faa9 	bl	5344 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5df2:	f04f 0000 	mov.w	r0, #0
    5df6:	f380 8811 	msr	BASEPRI, r0
}
    5dfa:	3708      	adds	r7, #8
    5dfc:	46bd      	mov	sp, r7
    5dfe:	bd80      	pop	{r7, pc}

00005e00 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5e00:	b480      	push	{r7}
    5e02:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5e04:	f24e 0314 	movw	r3, #57364	; 0xe014
    5e08:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e0c:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5e10:	f2c0 0203 	movt	r2, #3
    5e14:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5e16:	f24e 0310 	movw	r3, #57360	; 0xe010
    5e1a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e1e:	2207      	movs	r2, #7
    5e20:	601a      	str	r2, [r3, #0]
}
    5e22:	46bd      	mov	sp, r7
    5e24:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e28:	4770      	bx	lr
    5e2a:	0000      	.short	0x0000
    5e2c:	e000ed08 	.word	0xe000ed08

00005e30 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5e30:	b580      	push	{r7, lr}
    5e32:	b08a      	sub	sp, #40	; 0x28
    5e34:	af00      	add	r7, sp, #0
    5e36:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5e38:	2300      	movs	r3, #0
    5e3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5e3c:	f7ff f9a0 	bl	5180 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5e40:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d130      	bne.n	5eb0 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5e4e:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e56:	f241 22e0 	movw	r2, #4832	; 0x12e0
    5e5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5e5e:	601a      	str	r2, [r3, #0]
    5e60:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e68:	2200      	movs	r2, #0
    5e6a:	605a      	str	r2, [r3, #4]
    5e6c:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e74:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5e78:	605a      	str	r2, [r3, #4]
    5e7a:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e82:	2200      	movs	r2, #0
    5e84:	601a      	str	r2, [r3, #0]
    5e86:	f241 23e0 	movw	r3, #4832	; 0x12e0
    5e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e8e:	617b      	str	r3, [r7, #20]
    5e90:	697b      	ldr	r3, [r7, #20]
    5e92:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5e96:	605a      	str	r2, [r3, #4]
    5e98:	697a      	ldr	r2, [r7, #20]
    5e9a:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ea2:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5ea4:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eac:	2201      	movs	r2, #1
    5eae:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5eb0:	687b      	ldr	r3, [r7, #4]
    5eb2:	2b00      	cmp	r3, #0
    5eb4:	d00d      	beq.n	5ed2 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5eb6:	2310      	movs	r3, #16
    5eb8:	687a      	ldr	r2, [r7, #4]
    5eba:	4413      	add	r3, r2
    5ebc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5ebe:	687b      	ldr	r3, [r7, #4]
    5ec0:	f003 0307 	and.w	r3, r3, #7
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	d004      	beq.n	5ed2 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5ec8:	687b      	ldr	r3, [r7, #4]
    5eca:	f023 0307 	bic.w	r3, r3, #7
    5ece:	3308      	adds	r3, #8
    5ed0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5ed2:	687b      	ldr	r3, [r7, #4]
    5ed4:	2b00      	cmp	r3, #0
    5ed6:	d068      	beq.n	5faa <pvPortMalloc+0x17a>
    5ed8:	687b      	ldr	r3, [r7, #4]
    5eda:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5ede:	d264      	bcs.n	5faa <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5ee0:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ee8:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5eea:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ef2:	681b      	ldr	r3, [r3, #0]
    5ef4:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5ef6:	e004      	b.n	5f02 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5efa:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5efe:	681b      	ldr	r3, [r3, #0]
    5f00:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f04:	685a      	ldr	r2, [r3, #4]
    5f06:	687b      	ldr	r3, [r7, #4]
    5f08:	429a      	cmp	r2, r3
    5f0a:	d203      	bcs.n	5f14 <pvPortMalloc+0xe4>
    5f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f0e:	681b      	ldr	r3, [r3, #0]
    5f10:	2b00      	cmp	r3, #0
    5f12:	d1f1      	bne.n	5ef8 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5f16:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f1e:	429a      	cmp	r2, r3
    5f20:	d043      	beq.n	5faa <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5f22:	6a3b      	ldr	r3, [r7, #32]
    5f24:	681a      	ldr	r2, [r3, #0]
    5f26:	2310      	movs	r3, #16
    5f28:	4413      	add	r3, r2
    5f2a:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f2e:	681a      	ldr	r2, [r3, #0]
    5f30:	6a3b      	ldr	r3, [r7, #32]
    5f32:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f36:	685a      	ldr	r2, [r3, #4]
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	1ad2      	subs	r2, r2, r3
    5f3c:	2310      	movs	r3, #16
    5f3e:	005b      	lsls	r3, r3, #1
    5f40:	429a      	cmp	r2, r3
    5f42:	d925      	bls.n	5f90 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5f46:	687b      	ldr	r3, [r7, #4]
    5f48:	4413      	add	r3, r2
    5f4a:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f4e:	685a      	ldr	r2, [r3, #4]
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	1ad2      	subs	r2, r2, r3
    5f54:	693b      	ldr	r3, [r7, #16]
    5f56:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f5a:	687a      	ldr	r2, [r7, #4]
    5f5c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5f5e:	693b      	ldr	r3, [r7, #16]
    5f60:	685b      	ldr	r3, [r3, #4]
    5f62:	60fb      	str	r3, [r7, #12]
    5f64:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f6c:	61bb      	str	r3, [r7, #24]
    5f6e:	e002      	b.n	5f76 <pvPortMalloc+0x146>
    5f70:	69bb      	ldr	r3, [r7, #24]
    5f72:	681b      	ldr	r3, [r3, #0]
    5f74:	61bb      	str	r3, [r7, #24]
    5f76:	69bb      	ldr	r3, [r7, #24]
    5f78:	681b      	ldr	r3, [r3, #0]
    5f7a:	685a      	ldr	r2, [r3, #4]
    5f7c:	68fb      	ldr	r3, [r7, #12]
    5f7e:	429a      	cmp	r2, r3
    5f80:	d3f6      	bcc.n	5f70 <pvPortMalloc+0x140>
    5f82:	69bb      	ldr	r3, [r7, #24]
    5f84:	681a      	ldr	r2, [r3, #0]
    5f86:	693b      	ldr	r3, [r7, #16]
    5f88:	601a      	str	r2, [r3, #0]
    5f8a:	69bb      	ldr	r3, [r7, #24]
    5f8c:	693a      	ldr	r2, [r7, #16]
    5f8e:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5f90:	f240 5338 	movw	r3, #1336	; 0x538
    5f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f98:	681a      	ldr	r2, [r3, #0]
    5f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f9c:	685b      	ldr	r3, [r3, #4]
    5f9e:	1ad2      	subs	r2, r2, r3
    5fa0:	f240 5338 	movw	r3, #1336	; 0x538
    5fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fa8:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5faa:	f7ff f8fb 	bl	51a4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5fae:	69fb      	ldr	r3, [r7, #28]
}
    5fb0:	4618      	mov	r0, r3
    5fb2:	3728      	adds	r7, #40	; 0x28
    5fb4:	46bd      	mov	sp, r7
    5fb6:	bd80      	pop	{r7, pc}

00005fb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5fb8:	b580      	push	{r7, lr}
    5fba:	b086      	sub	sp, #24
    5fbc:	af00      	add	r7, sp, #0
    5fbe:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5fc0:	687b      	ldr	r3, [r7, #4]
    5fc2:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d030      	beq.n	602c <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5fca:	2310      	movs	r3, #16
    5fcc:	425b      	negs	r3, r3
    5fce:	693a      	ldr	r2, [r7, #16]
    5fd0:	4413      	add	r3, r2
    5fd2:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5fd4:	693b      	ldr	r3, [r7, #16]
    5fd6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5fd8:	f7ff f8d2 	bl	5180 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5fdc:	68fb      	ldr	r3, [r7, #12]
    5fde:	685b      	ldr	r3, [r3, #4]
    5fe0:	60bb      	str	r3, [r7, #8]
    5fe2:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fea:	617b      	str	r3, [r7, #20]
    5fec:	e002      	b.n	5ff4 <vPortFree+0x3c>
    5fee:	697b      	ldr	r3, [r7, #20]
    5ff0:	681b      	ldr	r3, [r3, #0]
    5ff2:	617b      	str	r3, [r7, #20]
    5ff4:	697b      	ldr	r3, [r7, #20]
    5ff6:	681b      	ldr	r3, [r3, #0]
    5ff8:	685a      	ldr	r2, [r3, #4]
    5ffa:	68bb      	ldr	r3, [r7, #8]
    5ffc:	429a      	cmp	r2, r3
    5ffe:	d3f6      	bcc.n	5fee <vPortFree+0x36>
    6000:	697b      	ldr	r3, [r7, #20]
    6002:	681a      	ldr	r2, [r3, #0]
    6004:	68fb      	ldr	r3, [r7, #12]
    6006:	601a      	str	r2, [r3, #0]
    6008:	697b      	ldr	r3, [r7, #20]
    600a:	68fa      	ldr	r2, [r7, #12]
    600c:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    600e:	68fb      	ldr	r3, [r7, #12]
    6010:	685a      	ldr	r2, [r3, #4]
    6012:	f240 5338 	movw	r3, #1336	; 0x538
    6016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    601a:	681b      	ldr	r3, [r3, #0]
    601c:	441a      	add	r2, r3
    601e:	f240 5338 	movw	r3, #1336	; 0x538
    6022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6026:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    6028:	f7ff f8bc 	bl	51a4 <xTaskResumeAll>
	}
}
    602c:	3718      	adds	r7, #24
    602e:	46bd      	mov	sp, r7
    6030:	bd80      	pop	{r7, pc}
    6032:	bf00      	nop

00006034 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    6034:	b480      	push	{r7}
    6036:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    6038:	f240 5338 	movw	r3, #1336	; 0x538
    603c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6040:	681b      	ldr	r3, [r3, #0]
}
    6042:	4618      	mov	r0, r3
    6044:	46bd      	mov	sp, r7
    6046:	f85d 7b04 	ldr.w	r7, [sp], #4
    604a:	4770      	bx	lr

0000604c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    604c:	b480      	push	{r7}
    604e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    6050:	46bd      	mov	sp, r7
    6052:	f85d 7b04 	ldr.w	r7, [sp], #4
    6056:	4770      	bx	lr

00006058 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    6058:	b580      	push	{r7, lr}
    605a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    605c:	f24c 3312 	movw	r3, #49938	; 0xc312
    6060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6064:	781b      	ldrb	r3, [r3, #0]
    6066:	2b00      	cmp	r3, #0
    6068:	f040 815d 	bne.w	6326 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    606c:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
    6070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6074:	881b      	ldrh	r3, [r3, #0]
    6076:	2b09      	cmp	r3, #9
    6078:	f201 8145 	bhi.w	7306 <ground_calibrate+0x12ae>
    607c:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    6080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	2b01      	cmp	r3, #1
    6088:	f041 813d 	bne.w	7306 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    608c:	f24c 3312 	movw	r3, #49938	; 0xc312
    6090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6094:	2201      	movs	r2, #1
    6096:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    6098:	f24c 3319 	movw	r3, #49945	; 0xc319
    609c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a0:	781a      	ldrb	r2, [r3, #0]
    60a2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    60a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60aa:	781b      	ldrb	r3, [r3, #0]
    60ac:	b2db      	uxtb	r3, r3
    60ae:	429a      	cmp	r2, r3
    60b0:	d313      	bcc.n	60da <ground_calibrate+0x82>
    60b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    60b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ba:	781b      	ldrb	r3, [r3, #0]
    60bc:	b2db      	uxtb	r3, r3
    60be:	461a      	mov	r2, r3
    60c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    60c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c8:	781b      	ldrb	r3, [r3, #0]
    60ca:	1ad3      	subs	r3, r2, r3
    60cc:	33ff      	adds	r3, #255	; 0xff
    60ce:	2b04      	cmp	r3, #4
    60d0:	bfd4      	ite	le
    60d2:	2300      	movle	r3, #0
    60d4:	2301      	movgt	r3, #1
    60d6:	b2db      	uxtb	r3, r3
    60d8:	e011      	b.n	60fe <ground_calibrate+0xa6>
    60da:	f24c 331a 	movw	r3, #49946	; 0xc31a
    60de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e2:	781b      	ldrb	r3, [r3, #0]
    60e4:	b2db      	uxtb	r3, r3
    60e6:	461a      	mov	r2, r3
    60e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    60ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f0:	781b      	ldrb	r3, [r3, #0]
    60f2:	1ad3      	subs	r3, r2, r3
    60f4:	2b04      	cmp	r3, #4
    60f6:	bfd4      	ite	le
    60f8:	2300      	movle	r3, #0
    60fa:	2301      	movgt	r3, #1
    60fc:	b2db      	uxtb	r3, r3
    60fe:	2b00      	cmp	r3, #0
    6100:	f000 8103 	beq.w	630a <ground_calibrate+0x2b2>
    6104:	f24c 3319 	movw	r3, #49945	; 0xc319
    6108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610c:	781b      	ldrb	r3, [r3, #0]
    610e:	461a      	mov	r2, r3
    6110:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6118:	2105      	movs	r1, #5
    611a:	5499      	strb	r1, [r3, r2]
    611c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6124:	781b      	ldrb	r3, [r3, #0]
    6126:	3301      	adds	r3, #1
    6128:	b2da      	uxtb	r2, r3
    612a:	f24c 3319 	movw	r3, #49945	; 0xc319
    612e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6132:	701a      	strb	r2, [r3, #0]
    6134:	f24c 3319 	movw	r3, #49945	; 0xc319
    6138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	2bff      	cmp	r3, #255	; 0xff
    6140:	d105      	bne.n	614e <ground_calibrate+0xf6>
    6142:	f24c 3319 	movw	r3, #49945	; 0xc319
    6146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614a:	2200      	movs	r2, #0
    614c:	701a      	strb	r2, [r3, #0]
    614e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6156:	781b      	ldrb	r3, [r3, #0]
    6158:	461a      	mov	r2, r3
    615a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    615e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6162:	2102      	movs	r1, #2
    6164:	5499      	strb	r1, [r3, r2]
    6166:	f24c 3319 	movw	r3, #49945	; 0xc319
    616a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    616e:	781b      	ldrb	r3, [r3, #0]
    6170:	3301      	adds	r3, #1
    6172:	b2da      	uxtb	r2, r3
    6174:	f24c 3319 	movw	r3, #49945	; 0xc319
    6178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    617c:	701a      	strb	r2, [r3, #0]
    617e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6186:	781b      	ldrb	r3, [r3, #0]
    6188:	2bff      	cmp	r3, #255	; 0xff
    618a:	d105      	bne.n	6198 <ground_calibrate+0x140>
    618c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6194:	2200      	movs	r2, #0
    6196:	701a      	strb	r2, [r3, #0]
    6198:	f24c 431d 	movw	r3, #50205	; 0xc41d
    619c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a0:	2202      	movs	r2, #2
    61a2:	701a      	strb	r2, [r3, #0]
    61a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    61a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ac:	2202      	movs	r2, #2
    61ae:	701a      	strb	r2, [r3, #0]
    61b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    61b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b8:	781b      	ldrb	r3, [r3, #0]
    61ba:	461a      	mov	r2, r3
    61bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    61c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c4:	7819      	ldrb	r1, [r3, #0]
    61c6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    61ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ce:	5499      	strb	r1, [r3, r2]
    61d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    61d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d8:	781b      	ldrb	r3, [r3, #0]
    61da:	3301      	adds	r3, #1
    61dc:	b2da      	uxtb	r2, r3
    61de:	f24c 3319 	movw	r3, #49945	; 0xc319
    61e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e6:	701a      	strb	r2, [r3, #0]
    61e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    61ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f0:	781b      	ldrb	r3, [r3, #0]
    61f2:	2bff      	cmp	r3, #255	; 0xff
    61f4:	d105      	bne.n	6202 <ground_calibrate+0x1aa>
    61f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    61fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61fe:	2200      	movs	r2, #0
    6200:	701a      	strb	r2, [r3, #0]
    6202:	f24c 3319 	movw	r3, #49945	; 0xc319
    6206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620a:	781b      	ldrb	r3, [r3, #0]
    620c:	461a      	mov	r2, r3
    620e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6216:	7819      	ldrb	r1, [r3, #0]
    6218:	f24c 331c 	movw	r3, #49948	; 0xc31c
    621c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6220:	5499      	strb	r1, [r3, r2]
    6222:	f24c 3319 	movw	r3, #49945	; 0xc319
    6226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    622a:	781b      	ldrb	r3, [r3, #0]
    622c:	3301      	adds	r3, #1
    622e:	b2da      	uxtb	r2, r3
    6230:	f24c 3319 	movw	r3, #49945	; 0xc319
    6234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6238:	701a      	strb	r2, [r3, #0]
    623a:	f24c 3319 	movw	r3, #49945	; 0xc319
    623e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6242:	781b      	ldrb	r3, [r3, #0]
    6244:	2bff      	cmp	r3, #255	; 0xff
    6246:	d105      	bne.n	6254 <ground_calibrate+0x1fc>
    6248:	f24c 3319 	movw	r3, #49945	; 0xc319
    624c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6250:	2200      	movs	r2, #0
    6252:	701a      	strb	r2, [r3, #0]
    6254:	f242 0339 	movw	r3, #8249	; 0x2039
    6258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625c:	781b      	ldrb	r3, [r3, #0]
    625e:	b2db      	uxtb	r3, r3
    6260:	f003 0310 	and.w	r3, r3, #16
    6264:	2b00      	cmp	r3, #0
    6266:	f041 804e 	bne.w	7306 <ground_calibrate+0x12ae>
    626a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    626e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6272:	781b      	ldrb	r3, [r3, #0]
    6274:	b2db      	uxtb	r3, r3
    6276:	461a      	mov	r2, r3
    6278:	f24c 331c 	movw	r3, #49948	; 0xc31c
    627c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6280:	5c9a      	ldrb	r2, [r3, r2]
    6282:	f24c 431b 	movw	r3, #50203	; 0xc41b
    6286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    628a:	701a      	strb	r2, [r3, #0]
    628c:	f24c 431c 	movw	r3, #50204	; 0xc41c
    6290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6294:	2200      	movs	r2, #0
    6296:	701a      	strb	r2, [r3, #0]
    6298:	f24c 331a 	movw	r3, #49946	; 0xc31a
    629c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a0:	781b      	ldrb	r3, [r3, #0]
    62a2:	b2db      	uxtb	r3, r3
    62a4:	3301      	adds	r3, #1
    62a6:	b2da      	uxtb	r2, r3
    62a8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    62ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b0:	701a      	strb	r2, [r3, #0]
    62b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    62b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ba:	781b      	ldrb	r3, [r3, #0]
    62bc:	b2db      	uxtb	r3, r3
    62be:	2bff      	cmp	r3, #255	; 0xff
    62c0:	d105      	bne.n	62ce <ground_calibrate+0x276>
    62c2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    62c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ca:	2200      	movs	r2, #0
    62cc:	701a      	strb	r2, [r3, #0]
    62ce:	f242 0338 	movw	r3, #8248	; 0x2038
    62d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d6:	f242 0238 	movw	r2, #8248	; 0x2038
    62da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    62de:	7812      	ldrb	r2, [r2, #0]
    62e0:	b2d2      	uxtb	r2, r2
    62e2:	f042 0201 	orr.w	r2, r2, #1
    62e6:	b2d2      	uxtb	r2, r2
    62e8:	701a      	strb	r2, [r3, #0]
    62ea:	f242 0339 	movw	r3, #8249	; 0x2039
    62ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f2:	f242 0239 	movw	r2, #8249	; 0x2039
    62f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    62fa:	7812      	ldrb	r2, [r2, #0]
    62fc:	b2d2      	uxtb	r2, r2
    62fe:	f042 0210 	orr.w	r2, r2, #16
    6302:	b2d2      	uxtb	r2, r2
    6304:	701a      	strb	r2, [r3, #0]
    6306:	f000 bffe 	b.w	7306 <ground_calibrate+0x12ae>
    630a:	f24c 3318 	movw	r3, #49944	; 0xc318
    630e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6312:	781b      	ldrb	r3, [r3, #0]
    6314:	3301      	adds	r3, #1
    6316:	b2da      	uxtb	r2, r3
    6318:	f24c 3318 	movw	r3, #49944	; 0xc318
    631c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6320:	701a      	strb	r2, [r3, #0]
    6322:	f000 bff0 	b.w	7306 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    6326:	f24c 3312 	movw	r3, #49938	; 0xc312
    632a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    632e:	781b      	ldrb	r3, [r3, #0]
    6330:	2b01      	cmp	r3, #1
    6332:	f040 87e8 	bne.w	7306 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    6336:	f24c 4320 	movw	r3, #50208	; 0xc420
    633a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    633e:	885b      	ldrh	r3, [r3, #2]
    6340:	b21b      	sxth	r3, r3
    6342:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    6346:	db09      	blt.n	635c <ground_calibrate+0x304>
    6348:	f24c 4320 	movw	r3, #50208	; 0xc420
    634c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6350:	885b      	ldrh	r3, [r3, #2]
    6352:	b21b      	sxth	r3, r3
    6354:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6358:	f340 87d5 	ble.w	7306 <ground_calibrate+0x12ae>
      ir_gain_calib();
    635c:	f00b fcfc 	bl	11d58 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6360:	f240 5348 	movw	r3, #1352	; 0x548
    6364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6368:	681a      	ldr	r2, [r3, #0]
    636a:	f64c 130c 	movw	r3, #51468	; 0xc90c
    636e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6372:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    6374:	f24c 3319 	movw	r3, #49945	; 0xc319
    6378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    637c:	781a      	ldrb	r2, [r3, #0]
    637e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6386:	781b      	ldrb	r3, [r3, #0]
    6388:	b2db      	uxtb	r3, r3
    638a:	429a      	cmp	r2, r3
    638c:	d313      	bcc.n	63b6 <ground_calibrate+0x35e>
    638e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6396:	781b      	ldrb	r3, [r3, #0]
    6398:	b2db      	uxtb	r3, r3
    639a:	461a      	mov	r2, r3
    639c:	f24c 3319 	movw	r3, #49945	; 0xc319
    63a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a4:	781b      	ldrb	r3, [r3, #0]
    63a6:	1ad3      	subs	r3, r2, r3
    63a8:	33ff      	adds	r3, #255	; 0xff
    63aa:	2b14      	cmp	r3, #20
    63ac:	bfd4      	ite	le
    63ae:	2300      	movle	r3, #0
    63b0:	2301      	movgt	r3, #1
    63b2:	b2db      	uxtb	r3, r3
    63b4:	e011      	b.n	63da <ground_calibrate+0x382>
    63b6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    63ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63be:	781b      	ldrb	r3, [r3, #0]
    63c0:	b2db      	uxtb	r3, r3
    63c2:	461a      	mov	r2, r3
    63c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    63c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63cc:	781b      	ldrb	r3, [r3, #0]
    63ce:	1ad3      	subs	r3, r2, r3
    63d0:	2b14      	cmp	r3, #20
    63d2:	bfd4      	ite	le
    63d4:	2300      	movle	r3, #0
    63d6:	2301      	movgt	r3, #1
    63d8:	b2db      	uxtb	r3, r3
    63da:	2b00      	cmp	r3, #0
    63dc:	f000 85a6 	beq.w	6f2c <ground_calibrate+0xed4>
    63e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    63e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e8:	781b      	ldrb	r3, [r3, #0]
    63ea:	461a      	mov	r2, r3
    63ec:	f24c 331c 	movw	r3, #49948	; 0xc31c
    63f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f4:	2105      	movs	r1, #5
    63f6:	5499      	strb	r1, [r3, r2]
    63f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    63fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6400:	781b      	ldrb	r3, [r3, #0]
    6402:	3301      	adds	r3, #1
    6404:	b2da      	uxtb	r2, r3
    6406:	f24c 3319 	movw	r3, #49945	; 0xc319
    640a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    640e:	701a      	strb	r2, [r3, #0]
    6410:	f24c 3319 	movw	r3, #49945	; 0xc319
    6414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6418:	781b      	ldrb	r3, [r3, #0]
    641a:	2bff      	cmp	r3, #255	; 0xff
    641c:	d105      	bne.n	642a <ground_calibrate+0x3d2>
    641e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6426:	2200      	movs	r2, #0
    6428:	701a      	strb	r2, [r3, #0]
    642a:	f24c 3319 	movw	r3, #49945	; 0xc319
    642e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6432:	781b      	ldrb	r3, [r3, #0]
    6434:	461a      	mov	r2, r3
    6436:	f24c 331c 	movw	r3, #49948	; 0xc31c
    643a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    643e:	2105      	movs	r1, #5
    6440:	5499      	strb	r1, [r3, r2]
    6442:	f24c 3319 	movw	r3, #49945	; 0xc319
    6446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    644a:	781b      	ldrb	r3, [r3, #0]
    644c:	3301      	adds	r3, #1
    644e:	b2da      	uxtb	r2, r3
    6450:	f24c 3319 	movw	r3, #49945	; 0xc319
    6454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6458:	701a      	strb	r2, [r3, #0]
    645a:	f24c 3319 	movw	r3, #49945	; 0xc319
    645e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6462:	781b      	ldrb	r3, [r3, #0]
    6464:	2bff      	cmp	r3, #255	; 0xff
    6466:	d105      	bne.n	6474 <ground_calibrate+0x41c>
    6468:	f24c 3319 	movw	r3, #49945	; 0xc319
    646c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6470:	2200      	movs	r2, #0
    6472:	701a      	strb	r2, [r3, #0]
    6474:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    647c:	2205      	movs	r2, #5
    647e:	701a      	strb	r2, [r3, #0]
    6480:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6488:	2205      	movs	r2, #5
    648a:	701a      	strb	r2, [r3, #0]
    648c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6494:	781b      	ldrb	r3, [r3, #0]
    6496:	461a      	mov	r2, r3
    6498:	f64c 1310 	movw	r3, #51472	; 0xc910
    649c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a0:	7819      	ldrb	r1, [r3, #0]
    64a2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    64a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64aa:	5499      	strb	r1, [r3, r2]
    64ac:	f64c 1310 	movw	r3, #51472	; 0xc910
    64b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b4:	781a      	ldrb	r2, [r3, #0]
    64b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    64ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64be:	781b      	ldrb	r3, [r3, #0]
    64c0:	4413      	add	r3, r2
    64c2:	b2da      	uxtb	r2, r3
    64c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    64c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64cc:	701a      	strb	r2, [r3, #0]
    64ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    64d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d6:	781a      	ldrb	r2, [r3, #0]
    64d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    64dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e0:	781b      	ldrb	r3, [r3, #0]
    64e2:	4413      	add	r3, r2
    64e4:	b2da      	uxtb	r2, r3
    64e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    64ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ee:	701a      	strb	r2, [r3, #0]
    64f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    64f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f8:	781b      	ldrb	r3, [r3, #0]
    64fa:	3301      	adds	r3, #1
    64fc:	b2da      	uxtb	r2, r3
    64fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    6502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6506:	701a      	strb	r2, [r3, #0]
    6508:	f24c 3319 	movw	r3, #49945	; 0xc319
    650c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6510:	781b      	ldrb	r3, [r3, #0]
    6512:	2bff      	cmp	r3, #255	; 0xff
    6514:	d105      	bne.n	6522 <ground_calibrate+0x4ca>
    6516:	f24c 3319 	movw	r3, #49945	; 0xc319
    651a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    651e:	2200      	movs	r2, #0
    6520:	701a      	strb	r2, [r3, #0]
    6522:	f24c 3319 	movw	r3, #49945	; 0xc319
    6526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    652a:	781b      	ldrb	r3, [r3, #0]
    652c:	461a      	mov	r2, r3
    652e:	f64c 1310 	movw	r3, #51472	; 0xc910
    6532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6536:	7859      	ldrb	r1, [r3, #1]
    6538:	f24c 331c 	movw	r3, #49948	; 0xc31c
    653c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6540:	5499      	strb	r1, [r3, r2]
    6542:	4bd2      	ldr	r3, [pc, #840]	; (688c <ground_calibrate+0x834>)
    6544:	781a      	ldrb	r2, [r3, #0]
    6546:	f24c 431d 	movw	r3, #50205	; 0xc41d
    654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654e:	781b      	ldrb	r3, [r3, #0]
    6550:	4413      	add	r3, r2
    6552:	b2da      	uxtb	r2, r3
    6554:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655c:	701a      	strb	r2, [r3, #0]
    655e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6566:	781a      	ldrb	r2, [r3, #0]
    6568:	f24c 431d 	movw	r3, #50205	; 0xc41d
    656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6570:	781b      	ldrb	r3, [r3, #0]
    6572:	4413      	add	r3, r2
    6574:	b2da      	uxtb	r2, r3
    6576:	f24c 431e 	movw	r3, #50206	; 0xc41e
    657a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657e:	701a      	strb	r2, [r3, #0]
    6580:	f24c 3319 	movw	r3, #49945	; 0xc319
    6584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	3301      	adds	r3, #1
    658c:	b2da      	uxtb	r2, r3
    658e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	701a      	strb	r2, [r3, #0]
    6598:	f24c 3319 	movw	r3, #49945	; 0xc319
    659c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	2bff      	cmp	r3, #255	; 0xff
    65a4:	d105      	bne.n	65b2 <ground_calibrate+0x55a>
    65a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	2200      	movs	r2, #0
    65b0:	701a      	strb	r2, [r3, #0]
    65b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    65b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ba:	781b      	ldrb	r3, [r3, #0]
    65bc:	461a      	mov	r2, r3
    65be:	f64c 1310 	movw	r3, #51472	; 0xc910
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	7899      	ldrb	r1, [r3, #2]
    65c8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    65cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d0:	5499      	strb	r1, [r3, r2]
    65d2:	4baf      	ldr	r3, [pc, #700]	; (6890 <ground_calibrate+0x838>)
    65d4:	781a      	ldrb	r2, [r3, #0]
    65d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	781b      	ldrb	r3, [r3, #0]
    65e0:	4413      	add	r3, r2
    65e2:	b2da      	uxtb	r2, r3
    65e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    65e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ec:	701a      	strb	r2, [r3, #0]
    65ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    65f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f6:	781a      	ldrb	r2, [r3, #0]
    65f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    65fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6600:	781b      	ldrb	r3, [r3, #0]
    6602:	4413      	add	r3, r2
    6604:	b2da      	uxtb	r2, r3
    6606:	f24c 431e 	movw	r3, #50206	; 0xc41e
    660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    660e:	701a      	strb	r2, [r3, #0]
    6610:	f24c 3319 	movw	r3, #49945	; 0xc319
    6614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6618:	781b      	ldrb	r3, [r3, #0]
    661a:	3301      	adds	r3, #1
    661c:	b2da      	uxtb	r2, r3
    661e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6626:	701a      	strb	r2, [r3, #0]
    6628:	f24c 3319 	movw	r3, #49945	; 0xc319
    662c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6630:	781b      	ldrb	r3, [r3, #0]
    6632:	2bff      	cmp	r3, #255	; 0xff
    6634:	d105      	bne.n	6642 <ground_calibrate+0x5ea>
    6636:	f24c 3319 	movw	r3, #49945	; 0xc319
    663a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    663e:	2200      	movs	r2, #0
    6640:	701a      	strb	r2, [r3, #0]
    6642:	f24c 3319 	movw	r3, #49945	; 0xc319
    6646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664a:	781b      	ldrb	r3, [r3, #0]
    664c:	461a      	mov	r2, r3
    664e:	f64c 1310 	movw	r3, #51472	; 0xc910
    6652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6656:	78d9      	ldrb	r1, [r3, #3]
    6658:	f24c 331c 	movw	r3, #49948	; 0xc31c
    665c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6660:	5499      	strb	r1, [r3, r2]
    6662:	4b8c      	ldr	r3, [pc, #560]	; (6894 <ground_calibrate+0x83c>)
    6664:	781a      	ldrb	r2, [r3, #0]
    6666:	f24c 431d 	movw	r3, #50205	; 0xc41d
    666a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    666e:	781b      	ldrb	r3, [r3, #0]
    6670:	4413      	add	r3, r2
    6672:	b2da      	uxtb	r2, r3
    6674:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667c:	701a      	strb	r2, [r3, #0]
    667e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6686:	781a      	ldrb	r2, [r3, #0]
    6688:	f24c 431d 	movw	r3, #50205	; 0xc41d
    668c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6690:	781b      	ldrb	r3, [r3, #0]
    6692:	4413      	add	r3, r2
    6694:	b2da      	uxtb	r2, r3
    6696:	f24c 431e 	movw	r3, #50206	; 0xc41e
    669a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    669e:	701a      	strb	r2, [r3, #0]
    66a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    66a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a8:	781b      	ldrb	r3, [r3, #0]
    66aa:	3301      	adds	r3, #1
    66ac:	b2da      	uxtb	r2, r3
    66ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    66b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b6:	701a      	strb	r2, [r3, #0]
    66b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    66bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c0:	781b      	ldrb	r3, [r3, #0]
    66c2:	2bff      	cmp	r3, #255	; 0xff
    66c4:	d105      	bne.n	66d2 <ground_calibrate+0x67a>
    66c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    66ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ce:	2200      	movs	r2, #0
    66d0:	701a      	strb	r2, [r3, #0]
    66d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    66d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66da:	781b      	ldrb	r3, [r3, #0]
    66dc:	461a      	mov	r2, r3
    66de:	f64c 1314 	movw	r3, #51476	; 0xc914
    66e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e6:	7819      	ldrb	r1, [r3, #0]
    66e8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    66ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f0:	5499      	strb	r1, [r3, r2]
    66f2:	f64c 1314 	movw	r3, #51476	; 0xc914
    66f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66fa:	781a      	ldrb	r2, [r3, #0]
    66fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6704:	781b      	ldrb	r3, [r3, #0]
    6706:	4413      	add	r3, r2
    6708:	b2da      	uxtb	r2, r3
    670a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    670e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6712:	701a      	strb	r2, [r3, #0]
    6714:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    671c:	781a      	ldrb	r2, [r3, #0]
    671e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6726:	781b      	ldrb	r3, [r3, #0]
    6728:	4413      	add	r3, r2
    672a:	b2da      	uxtb	r2, r3
    672c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6734:	701a      	strb	r2, [r3, #0]
    6736:	f24c 3319 	movw	r3, #49945	; 0xc319
    673a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    673e:	781b      	ldrb	r3, [r3, #0]
    6740:	3301      	adds	r3, #1
    6742:	b2da      	uxtb	r2, r3
    6744:	f24c 3319 	movw	r3, #49945	; 0xc319
    6748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674c:	701a      	strb	r2, [r3, #0]
    674e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6756:	781b      	ldrb	r3, [r3, #0]
    6758:	2bff      	cmp	r3, #255	; 0xff
    675a:	d105      	bne.n	6768 <ground_calibrate+0x710>
    675c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6764:	2200      	movs	r2, #0
    6766:	701a      	strb	r2, [r3, #0]
    6768:	f24c 3319 	movw	r3, #49945	; 0xc319
    676c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6770:	781b      	ldrb	r3, [r3, #0]
    6772:	461a      	mov	r2, r3
    6774:	f64c 1314 	movw	r3, #51476	; 0xc914
    6778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677c:	7859      	ldrb	r1, [r3, #1]
    677e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6786:	5499      	strb	r1, [r3, r2]
    6788:	4b43      	ldr	r3, [pc, #268]	; (6898 <ground_calibrate+0x840>)
    678a:	781a      	ldrb	r2, [r3, #0]
    678c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6794:	781b      	ldrb	r3, [r3, #0]
    6796:	4413      	add	r3, r2
    6798:	b2da      	uxtb	r2, r3
    679a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    679e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a2:	701a      	strb	r2, [r3, #0]
    67a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    67a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ac:	781a      	ldrb	r2, [r3, #0]
    67ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b6:	781b      	ldrb	r3, [r3, #0]
    67b8:	4413      	add	r3, r2
    67ba:	b2da      	uxtb	r2, r3
    67bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    67c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c4:	701a      	strb	r2, [r3, #0]
    67c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    67ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ce:	781b      	ldrb	r3, [r3, #0]
    67d0:	3301      	adds	r3, #1
    67d2:	b2da      	uxtb	r2, r3
    67d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    67d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67dc:	701a      	strb	r2, [r3, #0]
    67de:	f24c 3319 	movw	r3, #49945	; 0xc319
    67e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e6:	781b      	ldrb	r3, [r3, #0]
    67e8:	2bff      	cmp	r3, #255	; 0xff
    67ea:	d105      	bne.n	67f8 <ground_calibrate+0x7a0>
    67ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	2200      	movs	r2, #0
    67f6:	701a      	strb	r2, [r3, #0]
    67f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    67fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6800:	781b      	ldrb	r3, [r3, #0]
    6802:	461a      	mov	r2, r3
    6804:	f64c 1314 	movw	r3, #51476	; 0xc914
    6808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680c:	7899      	ldrb	r1, [r3, #2]
    680e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6816:	5499      	strb	r1, [r3, r2]
    6818:	4b20      	ldr	r3, [pc, #128]	; (689c <ground_calibrate+0x844>)
    681a:	781a      	ldrb	r2, [r3, #0]
    681c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	781b      	ldrb	r3, [r3, #0]
    6826:	4413      	add	r3, r2
    6828:	b2da      	uxtb	r2, r3
    682a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    682e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6832:	701a      	strb	r2, [r3, #0]
    6834:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683c:	781a      	ldrb	r2, [r3, #0]
    683e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6846:	781b      	ldrb	r3, [r3, #0]
    6848:	4413      	add	r3, r2
    684a:	b2da      	uxtb	r2, r3
    684c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6854:	701a      	strb	r2, [r3, #0]
    6856:	f24c 3319 	movw	r3, #49945	; 0xc319
    685a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685e:	781b      	ldrb	r3, [r3, #0]
    6860:	3301      	adds	r3, #1
    6862:	b2da      	uxtb	r2, r3
    6864:	f24c 3319 	movw	r3, #49945	; 0xc319
    6868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686c:	701a      	strb	r2, [r3, #0]
    686e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6876:	781b      	ldrb	r3, [r3, #0]
    6878:	2bff      	cmp	r3, #255	; 0xff
    687a:	d111      	bne.n	68a0 <ground_calibrate+0x848>
    687c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6884:	2200      	movs	r2, #0
    6886:	701a      	strb	r2, [r3, #0]
    6888:	e00a      	b.n	68a0 <ground_calibrate+0x848>
    688a:	bf00      	nop
    688c:	2004c911 	.word	0x2004c911
    6890:	2004c912 	.word	0x2004c912
    6894:	2004c913 	.word	0x2004c913
    6898:	2004c915 	.word	0x2004c915
    689c:	2004c916 	.word	0x2004c916
    68a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    68a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a8:	781b      	ldrb	r3, [r3, #0]
    68aa:	461a      	mov	r2, r3
    68ac:	f64c 1314 	movw	r3, #51476	; 0xc914
    68b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b4:	78d9      	ldrb	r1, [r3, #3]
    68b6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    68ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68be:	5499      	strb	r1, [r3, r2]
    68c0:	4bd3      	ldr	r3, [pc, #844]	; (6c10 <ground_calibrate+0xbb8>)
    68c2:	781a      	ldrb	r2, [r3, #0]
    68c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    68c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68cc:	781b      	ldrb	r3, [r3, #0]
    68ce:	4413      	add	r3, r2
    68d0:	b2da      	uxtb	r2, r3
    68d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    68d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68da:	701a      	strb	r2, [r3, #0]
    68dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    68e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e4:	781a      	ldrb	r2, [r3, #0]
    68e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    68ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ee:	781b      	ldrb	r3, [r3, #0]
    68f0:	4413      	add	r3, r2
    68f2:	b2da      	uxtb	r2, r3
    68f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    68f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68fc:	701a      	strb	r2, [r3, #0]
    68fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    6902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6906:	781b      	ldrb	r3, [r3, #0]
    6908:	3301      	adds	r3, #1
    690a:	b2da      	uxtb	r2, r3
    690c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6914:	701a      	strb	r2, [r3, #0]
    6916:	f24c 3319 	movw	r3, #49945	; 0xc319
    691a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691e:	781b      	ldrb	r3, [r3, #0]
    6920:	2bff      	cmp	r3, #255	; 0xff
    6922:	d105      	bne.n	6930 <ground_calibrate+0x8d8>
    6924:	f24c 3319 	movw	r3, #49945	; 0xc319
    6928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    692c:	2200      	movs	r2, #0
    692e:	701a      	strb	r2, [r3, #0]
    6930:	f24c 3319 	movw	r3, #49945	; 0xc319
    6934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6938:	781b      	ldrb	r3, [r3, #0]
    693a:	461a      	mov	r2, r3
    693c:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6944:	7819      	ldrb	r1, [r3, #0]
    6946:	f24c 331c 	movw	r3, #49948	; 0xc31c
    694a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694e:	5499      	strb	r1, [r3, r2]
    6950:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6958:	781a      	ldrb	r2, [r3, #0]
    695a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    695e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6962:	781b      	ldrb	r3, [r3, #0]
    6964:	4413      	add	r3, r2
    6966:	b2da      	uxtb	r2, r3
    6968:	f24c 431d 	movw	r3, #50205	; 0xc41d
    696c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6970:	701a      	strb	r2, [r3, #0]
    6972:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697a:	781a      	ldrb	r2, [r3, #0]
    697c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6984:	781b      	ldrb	r3, [r3, #0]
    6986:	4413      	add	r3, r2
    6988:	b2da      	uxtb	r2, r3
    698a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    698e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6992:	701a      	strb	r2, [r3, #0]
    6994:	f24c 3319 	movw	r3, #49945	; 0xc319
    6998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    699c:	781b      	ldrb	r3, [r3, #0]
    699e:	3301      	adds	r3, #1
    69a0:	b2da      	uxtb	r2, r3
    69a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    69a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69aa:	701a      	strb	r2, [r3, #0]
    69ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    69b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	2bff      	cmp	r3, #255	; 0xff
    69b8:	d105      	bne.n	69c6 <ground_calibrate+0x96e>
    69ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    69be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c2:	2200      	movs	r2, #0
    69c4:	701a      	strb	r2, [r3, #0]
    69c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    69ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ce:	781b      	ldrb	r3, [r3, #0]
    69d0:	461a      	mov	r2, r3
    69d2:	f64c 130c 	movw	r3, #51468	; 0xc90c
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	7859      	ldrb	r1, [r3, #1]
    69dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    69e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e4:	5499      	strb	r1, [r3, r2]
    69e6:	4b8b      	ldr	r3, [pc, #556]	; (6c14 <ground_calibrate+0xbbc>)
    69e8:	781a      	ldrb	r2, [r3, #0]
    69ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f2:	781b      	ldrb	r3, [r3, #0]
    69f4:	4413      	add	r3, r2
    69f6:	b2da      	uxtb	r2, r3
    69f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a00:	701a      	strb	r2, [r3, #0]
    6a02:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0a:	781a      	ldrb	r2, [r3, #0]
    6a0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a14:	781b      	ldrb	r3, [r3, #0]
    6a16:	4413      	add	r3, r2
    6a18:	b2da      	uxtb	r2, r3
    6a1a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a22:	701a      	strb	r2, [r3, #0]
    6a24:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a2c:	781b      	ldrb	r3, [r3, #0]
    6a2e:	3301      	adds	r3, #1
    6a30:	b2da      	uxtb	r2, r3
    6a32:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3a:	701a      	strb	r2, [r3, #0]
    6a3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	2bff      	cmp	r3, #255	; 0xff
    6a48:	d105      	bne.n	6a56 <ground_calibrate+0x9fe>
    6a4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a52:	2200      	movs	r2, #0
    6a54:	701a      	strb	r2, [r3, #0]
    6a56:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5e:	781b      	ldrb	r3, [r3, #0]
    6a60:	461a      	mov	r2, r3
    6a62:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6a:	7899      	ldrb	r1, [r3, #2]
    6a6c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a74:	5499      	strb	r1, [r3, r2]
    6a76:	4b68      	ldr	r3, [pc, #416]	; (6c18 <ground_calibrate+0xbc0>)
    6a78:	781a      	ldrb	r2, [r3, #0]
    6a7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a82:	781b      	ldrb	r3, [r3, #0]
    6a84:	4413      	add	r3, r2
    6a86:	b2da      	uxtb	r2, r3
    6a88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a90:	701a      	strb	r2, [r3, #0]
    6a92:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9a:	781a      	ldrb	r2, [r3, #0]
    6a9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa4:	781b      	ldrb	r3, [r3, #0]
    6aa6:	4413      	add	r3, r2
    6aa8:	b2da      	uxtb	r2, r3
    6aaa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab2:	701a      	strb	r2, [r3, #0]
    6ab4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6abc:	781b      	ldrb	r3, [r3, #0]
    6abe:	3301      	adds	r3, #1
    6ac0:	b2da      	uxtb	r2, r3
    6ac2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aca:	701a      	strb	r2, [r3, #0]
    6acc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad4:	781b      	ldrb	r3, [r3, #0]
    6ad6:	2bff      	cmp	r3, #255	; 0xff
    6ad8:	d105      	bne.n	6ae6 <ground_calibrate+0xa8e>
    6ada:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae2:	2200      	movs	r2, #0
    6ae4:	701a      	strb	r2, [r3, #0]
    6ae6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aee:	781b      	ldrb	r3, [r3, #0]
    6af0:	461a      	mov	r2, r3
    6af2:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6afa:	78d9      	ldrb	r1, [r3, #3]
    6afc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b04:	5499      	strb	r1, [r3, r2]
    6b06:	4b45      	ldr	r3, [pc, #276]	; (6c1c <ground_calibrate+0xbc4>)
    6b08:	781a      	ldrb	r2, [r3, #0]
    6b0a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b12:	781b      	ldrb	r3, [r3, #0]
    6b14:	4413      	add	r3, r2
    6b16:	b2da      	uxtb	r2, r3
    6b18:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b20:	701a      	strb	r2, [r3, #0]
    6b22:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b2a:	781a      	ldrb	r2, [r3, #0]
    6b2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b34:	781b      	ldrb	r3, [r3, #0]
    6b36:	4413      	add	r3, r2
    6b38:	b2da      	uxtb	r2, r3
    6b3a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b42:	701a      	strb	r2, [r3, #0]
    6b44:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b4c:	781b      	ldrb	r3, [r3, #0]
    6b4e:	3301      	adds	r3, #1
    6b50:	b2da      	uxtb	r2, r3
    6b52:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5a:	701a      	strb	r2, [r3, #0]
    6b5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b64:	781b      	ldrb	r3, [r3, #0]
    6b66:	2bff      	cmp	r3, #255	; 0xff
    6b68:	d105      	bne.n	6b76 <ground_calibrate+0xb1e>
    6b6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b72:	2200      	movs	r2, #0
    6b74:	701a      	strb	r2, [r3, #0]
    6b76:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7e:	781b      	ldrb	r3, [r3, #0]
    6b80:	461a      	mov	r2, r3
    6b82:	f240 5342 	movw	r3, #1346	; 0x542
    6b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b8a:	7819      	ldrb	r1, [r3, #0]
    6b8c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b94:	5499      	strb	r1, [r3, r2]
    6b96:	f240 5342 	movw	r3, #1346	; 0x542
    6b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b9e:	781a      	ldrb	r2, [r3, #0]
    6ba0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba8:	781b      	ldrb	r3, [r3, #0]
    6baa:	4413      	add	r3, r2
    6bac:	b2da      	uxtb	r2, r3
    6bae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bb6:	701a      	strb	r2, [r3, #0]
    6bb8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc0:	781a      	ldrb	r2, [r3, #0]
    6bc2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bca:	781b      	ldrb	r3, [r3, #0]
    6bcc:	4413      	add	r3, r2
    6bce:	b2da      	uxtb	r2, r3
    6bd0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd8:	701a      	strb	r2, [r3, #0]
    6bda:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be2:	781b      	ldrb	r3, [r3, #0]
    6be4:	3301      	adds	r3, #1
    6be6:	b2da      	uxtb	r2, r3
    6be8:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf0:	701a      	strb	r2, [r3, #0]
    6bf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfa:	781b      	ldrb	r3, [r3, #0]
    6bfc:	2bff      	cmp	r3, #255	; 0xff
    6bfe:	d10f      	bne.n	6c20 <ground_calibrate+0xbc8>
    6c00:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c08:	2200      	movs	r2, #0
    6c0a:	701a      	strb	r2, [r3, #0]
    6c0c:	e008      	b.n	6c20 <ground_calibrate+0xbc8>
    6c0e:	bf00      	nop
    6c10:	2004c917 	.word	0x2004c917
    6c14:	2004c90d 	.word	0x2004c90d
    6c18:	2004c90e 	.word	0x2004c90e
    6c1c:	2004c90f 	.word	0x2004c90f
    6c20:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c28:	781b      	ldrb	r3, [r3, #0]
    6c2a:	461a      	mov	r2, r3
    6c2c:	f240 5342 	movw	r3, #1346	; 0x542
    6c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c34:	7859      	ldrb	r1, [r3, #1]
    6c36:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c3e:	5499      	strb	r1, [r3, r2]
    6c40:	4bd4      	ldr	r3, [pc, #848]	; (6f94 <ground_calibrate+0xf3c>)
    6c42:	781a      	ldrb	r2, [r3, #0]
    6c44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	4413      	add	r3, r2
    6c50:	b2da      	uxtb	r2, r3
    6c52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c5a:	701a      	strb	r2, [r3, #0]
    6c5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c64:	781a      	ldrb	r2, [r3, #0]
    6c66:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c6e:	781b      	ldrb	r3, [r3, #0]
    6c70:	4413      	add	r3, r2
    6c72:	b2da      	uxtb	r2, r3
    6c74:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c7c:	701a      	strb	r2, [r3, #0]
    6c7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c86:	781b      	ldrb	r3, [r3, #0]
    6c88:	3301      	adds	r3, #1
    6c8a:	b2da      	uxtb	r2, r3
    6c8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c94:	701a      	strb	r2, [r3, #0]
    6c96:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c9e:	781b      	ldrb	r3, [r3, #0]
    6ca0:	2bff      	cmp	r3, #255	; 0xff
    6ca2:	d105      	bne.n	6cb0 <ground_calibrate+0xc58>
    6ca4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cac:	2200      	movs	r2, #0
    6cae:	701a      	strb	r2, [r3, #0]
    6cb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb8:	781b      	ldrb	r3, [r3, #0]
    6cba:	461a      	mov	r2, r3
    6cbc:	f240 5344 	movw	r3, #1348	; 0x544
    6cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc4:	7819      	ldrb	r1, [r3, #0]
    6cc6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cce:	5499      	strb	r1, [r3, r2]
    6cd0:	f240 5344 	movw	r3, #1348	; 0x544
    6cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cd8:	781a      	ldrb	r2, [r3, #0]
    6cda:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce2:	781b      	ldrb	r3, [r3, #0]
    6ce4:	4413      	add	r3, r2
    6ce6:	b2da      	uxtb	r2, r3
    6ce8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf0:	701a      	strb	r2, [r3, #0]
    6cf2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfa:	781a      	ldrb	r2, [r3, #0]
    6cfc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d04:	781b      	ldrb	r3, [r3, #0]
    6d06:	4413      	add	r3, r2
    6d08:	b2da      	uxtb	r2, r3
    6d0a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d12:	701a      	strb	r2, [r3, #0]
    6d14:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d1c:	781b      	ldrb	r3, [r3, #0]
    6d1e:	3301      	adds	r3, #1
    6d20:	b2da      	uxtb	r2, r3
    6d22:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d2a:	701a      	strb	r2, [r3, #0]
    6d2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d34:	781b      	ldrb	r3, [r3, #0]
    6d36:	2bff      	cmp	r3, #255	; 0xff
    6d38:	d105      	bne.n	6d46 <ground_calibrate+0xcee>
    6d3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d42:	2200      	movs	r2, #0
    6d44:	701a      	strb	r2, [r3, #0]
    6d46:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d4e:	781b      	ldrb	r3, [r3, #0]
    6d50:	461a      	mov	r2, r3
    6d52:	f240 5344 	movw	r3, #1348	; 0x544
    6d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d5a:	7859      	ldrb	r1, [r3, #1]
    6d5c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d64:	5499      	strb	r1, [r3, r2]
    6d66:	4b8c      	ldr	r3, [pc, #560]	; (6f98 <ground_calibrate+0xf40>)
    6d68:	781a      	ldrb	r2, [r3, #0]
    6d6a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d72:	781b      	ldrb	r3, [r3, #0]
    6d74:	4413      	add	r3, r2
    6d76:	b2da      	uxtb	r2, r3
    6d78:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d80:	701a      	strb	r2, [r3, #0]
    6d82:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d8a:	781a      	ldrb	r2, [r3, #0]
    6d8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d94:	781b      	ldrb	r3, [r3, #0]
    6d96:	4413      	add	r3, r2
    6d98:	b2da      	uxtb	r2, r3
    6d9a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da2:	701a      	strb	r2, [r3, #0]
    6da4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dac:	781b      	ldrb	r3, [r3, #0]
    6dae:	3301      	adds	r3, #1
    6db0:	b2da      	uxtb	r2, r3
    6db2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dba:	701a      	strb	r2, [r3, #0]
    6dbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc4:	781b      	ldrb	r3, [r3, #0]
    6dc6:	2bff      	cmp	r3, #255	; 0xff
    6dc8:	d105      	bne.n	6dd6 <ground_calibrate+0xd7e>
    6dca:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd2:	2200      	movs	r2, #0
    6dd4:	701a      	strb	r2, [r3, #0]
    6dd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dde:	781b      	ldrb	r3, [r3, #0]
    6de0:	461a      	mov	r2, r3
    6de2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dea:	7819      	ldrb	r1, [r3, #0]
    6dec:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df4:	5499      	strb	r1, [r3, r2]
    6df6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfe:	781b      	ldrb	r3, [r3, #0]
    6e00:	3301      	adds	r3, #1
    6e02:	b2da      	uxtb	r2, r3
    6e04:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e0c:	701a      	strb	r2, [r3, #0]
    6e0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e16:	781b      	ldrb	r3, [r3, #0]
    6e18:	2bff      	cmp	r3, #255	; 0xff
    6e1a:	d105      	bne.n	6e28 <ground_calibrate+0xdd0>
    6e1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e24:	2200      	movs	r2, #0
    6e26:	701a      	strb	r2, [r3, #0]
    6e28:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e30:	781b      	ldrb	r3, [r3, #0]
    6e32:	461a      	mov	r2, r3
    6e34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3c:	7819      	ldrb	r1, [r3, #0]
    6e3e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e46:	5499      	strb	r1, [r3, r2]
    6e48:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e50:	781b      	ldrb	r3, [r3, #0]
    6e52:	3301      	adds	r3, #1
    6e54:	b2da      	uxtb	r2, r3
    6e56:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e5e:	701a      	strb	r2, [r3, #0]
    6e60:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e68:	781b      	ldrb	r3, [r3, #0]
    6e6a:	2bff      	cmp	r3, #255	; 0xff
    6e6c:	d105      	bne.n	6e7a <ground_calibrate+0xe22>
    6e6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e76:	2200      	movs	r2, #0
    6e78:	701a      	strb	r2, [r3, #0]
    6e7a:	f242 0339 	movw	r3, #8249	; 0x2039
    6e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e82:	781b      	ldrb	r3, [r3, #0]
    6e84:	b2db      	uxtb	r3, r3
    6e86:	f003 0310 	and.w	r3, r3, #16
    6e8a:	2b00      	cmp	r3, #0
    6e8c:	d15a      	bne.n	6f44 <ground_calibrate+0xeec>
    6e8e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e96:	781b      	ldrb	r3, [r3, #0]
    6e98:	b2db      	uxtb	r3, r3
    6e9a:	461a      	mov	r2, r3
    6e9c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ea4:	5c9a      	ldrb	r2, [r3, r2]
    6ea6:	f24c 431b 	movw	r3, #50203	; 0xc41b
    6eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eae:	701a      	strb	r2, [r3, #0]
    6eb0:	f24c 431c 	movw	r3, #50204	; 0xc41c
    6eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb8:	2200      	movs	r2, #0
    6eba:	701a      	strb	r2, [r3, #0]
    6ebc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec4:	781b      	ldrb	r3, [r3, #0]
    6ec6:	b2db      	uxtb	r3, r3
    6ec8:	3301      	adds	r3, #1
    6eca:	b2da      	uxtb	r2, r3
    6ecc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed4:	701a      	strb	r2, [r3, #0]
    6ed6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ede:	781b      	ldrb	r3, [r3, #0]
    6ee0:	b2db      	uxtb	r3, r3
    6ee2:	2bff      	cmp	r3, #255	; 0xff
    6ee4:	d105      	bne.n	6ef2 <ground_calibrate+0xe9a>
    6ee6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eee:	2200      	movs	r2, #0
    6ef0:	701a      	strb	r2, [r3, #0]
    6ef2:	f242 0338 	movw	r3, #8248	; 0x2038
    6ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6efa:	f242 0238 	movw	r2, #8248	; 0x2038
    6efe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f02:	7812      	ldrb	r2, [r2, #0]
    6f04:	b2d2      	uxtb	r2, r2
    6f06:	f042 0201 	orr.w	r2, r2, #1
    6f0a:	b2d2      	uxtb	r2, r2
    6f0c:	701a      	strb	r2, [r3, #0]
    6f0e:	f242 0339 	movw	r3, #8249	; 0x2039
    6f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f16:	f242 0239 	movw	r2, #8249	; 0x2039
    6f1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f1e:	7812      	ldrb	r2, [r2, #0]
    6f20:	b2d2      	uxtb	r2, r2
    6f22:	f042 0210 	orr.w	r2, r2, #16
    6f26:	b2d2      	uxtb	r2, r2
    6f28:	701a      	strb	r2, [r3, #0]
    6f2a:	e00b      	b.n	6f44 <ground_calibrate+0xeec>
    6f2c:	f24c 3318 	movw	r3, #49944	; 0xc318
    6f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f34:	781b      	ldrb	r3, [r3, #0]
    6f36:	3301      	adds	r3, #1
    6f38:	b2da      	uxtb	r2, r3
    6f3a:	f24c 3318 	movw	r3, #49944	; 0xc318
    6f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f42:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6f44:	f24c 3312 	movw	r3, #49938	; 0xc312
    6f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4c:	2202      	movs	r2, #2
    6f4e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6f50:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f58:	781a      	ldrb	r2, [r3, #0]
    6f5a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f62:	781b      	ldrb	r3, [r3, #0]
    6f64:	b2db      	uxtb	r3, r3
    6f66:	429a      	cmp	r2, r3
    6f68:	d318      	bcc.n	6f9c <ground_calibrate+0xf44>
    6f6a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f72:	781b      	ldrb	r3, [r3, #0]
    6f74:	b2db      	uxtb	r3, r3
    6f76:	461a      	mov	r2, r3
    6f78:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f80:	781b      	ldrb	r3, [r3, #0]
    6f82:	1ad3      	subs	r3, r2, r3
    6f84:	33ff      	adds	r3, #255	; 0xff
    6f86:	2b06      	cmp	r3, #6
    6f88:	bfd4      	ite	le
    6f8a:	2300      	movle	r3, #0
    6f8c:	2301      	movgt	r3, #1
    6f8e:	b2db      	uxtb	r3, r3
    6f90:	e016      	b.n	6fc0 <ground_calibrate+0xf68>
    6f92:	bf00      	nop
    6f94:	20000543 	.word	0x20000543
    6f98:	20000545 	.word	0x20000545
    6f9c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa4:	781b      	ldrb	r3, [r3, #0]
    6fa6:	b2db      	uxtb	r3, r3
    6fa8:	461a      	mov	r2, r3
    6faa:	f24c 3319 	movw	r3, #49945	; 0xc319
    6fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb2:	781b      	ldrb	r3, [r3, #0]
    6fb4:	1ad3      	subs	r3, r2, r3
    6fb6:	2b06      	cmp	r3, #6
    6fb8:	bfd4      	ite	le
    6fba:	2300      	movle	r3, #0
    6fbc:	2301      	movgt	r3, #1
    6fbe:	b2db      	uxtb	r3, r3
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	f000 8194 	beq.w	72ee <ground_calibrate+0x1296>
    6fc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fce:	781b      	ldrb	r3, [r3, #0]
    6fd0:	461a      	mov	r2, r3
    6fd2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fda:	2105      	movs	r1, #5
    6fdc:	5499      	strb	r1, [r3, r2]
    6fde:	f24c 3319 	movw	r3, #49945	; 0xc319
    6fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe6:	781b      	ldrb	r3, [r3, #0]
    6fe8:	3301      	adds	r3, #1
    6fea:	b2da      	uxtb	r2, r3
    6fec:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff4:	701a      	strb	r2, [r3, #0]
    6ff6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ffe:	781b      	ldrb	r3, [r3, #0]
    7000:	2bff      	cmp	r3, #255	; 0xff
    7002:	d105      	bne.n	7010 <ground_calibrate+0xfb8>
    7004:	f24c 3319 	movw	r3, #49945	; 0xc319
    7008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700c:	2200      	movs	r2, #0
    700e:	701a      	strb	r2, [r3, #0]
    7010:	f24c 3319 	movw	r3, #49945	; 0xc319
    7014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7018:	781b      	ldrb	r3, [r3, #0]
    701a:	461a      	mov	r2, r3
    701c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7024:	2103      	movs	r1, #3
    7026:	5499      	strb	r1, [r3, r2]
    7028:	f24c 3319 	movw	r3, #49945	; 0xc319
    702c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7030:	781b      	ldrb	r3, [r3, #0]
    7032:	3301      	adds	r3, #1
    7034:	b2da      	uxtb	r2, r3
    7036:	f24c 3319 	movw	r3, #49945	; 0xc319
    703a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    703e:	701a      	strb	r2, [r3, #0]
    7040:	f24c 3319 	movw	r3, #49945	; 0xc319
    7044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7048:	781b      	ldrb	r3, [r3, #0]
    704a:	2bff      	cmp	r3, #255	; 0xff
    704c:	d105      	bne.n	705a <ground_calibrate+0x1002>
    704e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7056:	2200      	movs	r2, #0
    7058:	701a      	strb	r2, [r3, #0]
    705a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    705e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7062:	2203      	movs	r2, #3
    7064:	701a      	strb	r2, [r3, #0]
    7066:	f24c 431e 	movw	r3, #50206	; 0xc41e
    706a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    706e:	2203      	movs	r2, #3
    7070:	701a      	strb	r2, [r3, #0]
    7072:	f24c 3319 	movw	r3, #49945	; 0xc319
    7076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707a:	781b      	ldrb	r3, [r3, #0]
    707c:	461a      	mov	r2, r3
    707e:	f240 5340 	movw	r3, #1344	; 0x540
    7082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7086:	7819      	ldrb	r1, [r3, #0]
    7088:	f24c 331c 	movw	r3, #49948	; 0xc31c
    708c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7090:	5499      	strb	r1, [r3, r2]
    7092:	f240 5340 	movw	r3, #1344	; 0x540
    7096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    709a:	781a      	ldrb	r2, [r3, #0]
    709c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    70a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a4:	781b      	ldrb	r3, [r3, #0]
    70a6:	4413      	add	r3, r2
    70a8:	b2da      	uxtb	r2, r3
    70aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    70ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b2:	701a      	strb	r2, [r3, #0]
    70b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    70b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70bc:	781a      	ldrb	r2, [r3, #0]
    70be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    70c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c6:	781b      	ldrb	r3, [r3, #0]
    70c8:	4413      	add	r3, r2
    70ca:	b2da      	uxtb	r2, r3
    70cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    70d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d4:	701a      	strb	r2, [r3, #0]
    70d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    70da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70de:	781b      	ldrb	r3, [r3, #0]
    70e0:	3301      	adds	r3, #1
    70e2:	b2da      	uxtb	r2, r3
    70e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    70e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ec:	701a      	strb	r2, [r3, #0]
    70ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    70f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f6:	781b      	ldrb	r3, [r3, #0]
    70f8:	2bff      	cmp	r3, #255	; 0xff
    70fa:	d105      	bne.n	7108 <ground_calibrate+0x10b0>
    70fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7104:	2200      	movs	r2, #0
    7106:	701a      	strb	r2, [r3, #0]
    7108:	f24c 3319 	movw	r3, #49945	; 0xc319
    710c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7110:	781b      	ldrb	r3, [r3, #0]
    7112:	461a      	mov	r2, r3
    7114:	f240 5340 	movw	r3, #1344	; 0x540
    7118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    711c:	7859      	ldrb	r1, [r3, #1]
    711e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7126:	5499      	strb	r1, [r3, r2]
    7128:	4b77      	ldr	r3, [pc, #476]	; (7308 <ground_calibrate+0x12b0>)
    712a:	781a      	ldrb	r2, [r3, #0]
    712c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7134:	781b      	ldrb	r3, [r3, #0]
    7136:	4413      	add	r3, r2
    7138:	b2da      	uxtb	r2, r3
    713a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    713e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7142:	701a      	strb	r2, [r3, #0]
    7144:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    714c:	781a      	ldrb	r2, [r3, #0]
    714e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7156:	781b      	ldrb	r3, [r3, #0]
    7158:	4413      	add	r3, r2
    715a:	b2da      	uxtb	r2, r3
    715c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7164:	701a      	strb	r2, [r3, #0]
    7166:	f24c 3319 	movw	r3, #49945	; 0xc319
    716a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716e:	781b      	ldrb	r3, [r3, #0]
    7170:	3301      	adds	r3, #1
    7172:	b2da      	uxtb	r2, r3
    7174:	f24c 3319 	movw	r3, #49945	; 0xc319
    7178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717c:	701a      	strb	r2, [r3, #0]
    717e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7186:	781b      	ldrb	r3, [r3, #0]
    7188:	2bff      	cmp	r3, #255	; 0xff
    718a:	d105      	bne.n	7198 <ground_calibrate+0x1140>
    718c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7194:	2200      	movs	r2, #0
    7196:	701a      	strb	r2, [r3, #0]
    7198:	f24c 3319 	movw	r3, #49945	; 0xc319
    719c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a0:	781b      	ldrb	r3, [r3, #0]
    71a2:	461a      	mov	r2, r3
    71a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    71a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ac:	7819      	ldrb	r1, [r3, #0]
    71ae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    71b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b6:	5499      	strb	r1, [r3, r2]
    71b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    71bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c0:	781b      	ldrb	r3, [r3, #0]
    71c2:	3301      	adds	r3, #1
    71c4:	b2da      	uxtb	r2, r3
    71c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    71ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ce:	701a      	strb	r2, [r3, #0]
    71d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    71d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d8:	781b      	ldrb	r3, [r3, #0]
    71da:	2bff      	cmp	r3, #255	; 0xff
    71dc:	d105      	bne.n	71ea <ground_calibrate+0x1192>
    71de:	f24c 3319 	movw	r3, #49945	; 0xc319
    71e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e6:	2200      	movs	r2, #0
    71e8:	701a      	strb	r2, [r3, #0]
    71ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    71ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71f2:	781b      	ldrb	r3, [r3, #0]
    71f4:	461a      	mov	r2, r3
    71f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    71fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fe:	7819      	ldrb	r1, [r3, #0]
    7200:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7208:	5499      	strb	r1, [r3, r2]
    720a:	f24c 3319 	movw	r3, #49945	; 0xc319
    720e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7212:	781b      	ldrb	r3, [r3, #0]
    7214:	3301      	adds	r3, #1
    7216:	b2da      	uxtb	r2, r3
    7218:	f24c 3319 	movw	r3, #49945	; 0xc319
    721c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7220:	701a      	strb	r2, [r3, #0]
    7222:	f24c 3319 	movw	r3, #49945	; 0xc319
    7226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722a:	781b      	ldrb	r3, [r3, #0]
    722c:	2bff      	cmp	r3, #255	; 0xff
    722e:	d105      	bne.n	723c <ground_calibrate+0x11e4>
    7230:	f24c 3319 	movw	r3, #49945	; 0xc319
    7234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7238:	2200      	movs	r2, #0
    723a:	701a      	strb	r2, [r3, #0]
    723c:	f242 0339 	movw	r3, #8249	; 0x2039
    7240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7244:	781b      	ldrb	r3, [r3, #0]
    7246:	b2db      	uxtb	r3, r3
    7248:	f003 0310 	and.w	r3, r3, #16
    724c:	2b00      	cmp	r3, #0
    724e:	d15a      	bne.n	7306 <ground_calibrate+0x12ae>
    7250:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7258:	781b      	ldrb	r3, [r3, #0]
    725a:	b2db      	uxtb	r3, r3
    725c:	461a      	mov	r2, r3
    725e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7266:	5c9a      	ldrb	r2, [r3, r2]
    7268:	f24c 431b 	movw	r3, #50203	; 0xc41b
    726c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7270:	701a      	strb	r2, [r3, #0]
    7272:	f24c 431c 	movw	r3, #50204	; 0xc41c
    7276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    727a:	2200      	movs	r2, #0
    727c:	701a      	strb	r2, [r3, #0]
    727e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7286:	781b      	ldrb	r3, [r3, #0]
    7288:	b2db      	uxtb	r3, r3
    728a:	3301      	adds	r3, #1
    728c:	b2da      	uxtb	r2, r3
    728e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7296:	701a      	strb	r2, [r3, #0]
    7298:	f24c 331a 	movw	r3, #49946	; 0xc31a
    729c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	b2db      	uxtb	r3, r3
    72a4:	2bff      	cmp	r3, #255	; 0xff
    72a6:	d105      	bne.n	72b4 <ground_calibrate+0x125c>
    72a8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    72ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b0:	2200      	movs	r2, #0
    72b2:	701a      	strb	r2, [r3, #0]
    72b4:	f242 0338 	movw	r3, #8248	; 0x2038
    72b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72bc:	f242 0238 	movw	r2, #8248	; 0x2038
    72c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    72c4:	7812      	ldrb	r2, [r2, #0]
    72c6:	b2d2      	uxtb	r2, r2
    72c8:	f042 0201 	orr.w	r2, r2, #1
    72cc:	b2d2      	uxtb	r2, r2
    72ce:	701a      	strb	r2, [r3, #0]
    72d0:	f242 0339 	movw	r3, #8249	; 0x2039
    72d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d8:	f242 0239 	movw	r2, #8249	; 0x2039
    72dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    72e0:	7812      	ldrb	r2, [r2, #0]
    72e2:	b2d2      	uxtb	r2, r2
    72e4:	f042 0210 	orr.w	r2, r2, #16
    72e8:	b2d2      	uxtb	r2, r2
    72ea:	701a      	strb	r2, [r3, #0]
    72ec:	e00b      	b.n	7306 <ground_calibrate+0x12ae>
    72ee:	f24c 3318 	movw	r3, #49944	; 0xc318
    72f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f6:	781b      	ldrb	r3, [r3, #0]
    72f8:	3301      	adds	r3, #1
    72fa:	b2da      	uxtb	r2, r3
    72fc:	f24c 3318 	movw	r3, #49944	; 0xc318
    7300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7304:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    7306:	bd80      	pop	{r7, pc}
    7308:	20000541 	.word	0x20000541

0000730c <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    730c:	b480      	push	{r7}
    730e:	b083      	sub	sp, #12
    7310:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    7312:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    7316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    731a:	781b      	ldrb	r3, [r3, #0]
    731c:	2b03      	cmp	r3, #3
    731e:	d10c      	bne.n	733a <pprz_mode_update+0x2e>
    7320:	f24c 3300 	movw	r3, #49920	; 0xc300
    7324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7328:	781b      	ldrb	r3, [r3, #0]
    732a:	2b00      	cmp	r3, #0
    732c:	d032      	beq.n	7394 <pprz_mode_update+0x88>
    732e:	f24c 3300 	movw	r3, #49920	; 0xc300
    7332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7336:	2200      	movs	r2, #0
    7338:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    733a:	f24c 4320 	movw	r3, #50208	; 0xc420
    733e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7342:	891b      	ldrh	r3, [r3, #8]
    7344:	b21b      	sxth	r3, r3
    7346:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    734a:	dc0f      	bgt.n	736c <pprz_mode_update+0x60>
    734c:	f24c 4320 	movw	r3, #50208	; 0xc420
    7350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7354:	891b      	ldrh	r3, [r3, #8]
    7356:	b21a      	sxth	r2, r3
    7358:	f64e 5341 	movw	r3, #60737	; 0xed41
    735c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7360:	429a      	cmp	r2, r3
    7362:	bfb4      	ite	lt
    7364:	2300      	movlt	r3, #0
    7366:	2301      	movge	r3, #1
    7368:	b2db      	uxtb	r3, r3
    736a:	e000      	b.n	736e <pprz_mode_update+0x62>
    736c:	2302      	movs	r3, #2
    736e:	71fb      	strb	r3, [r7, #7]
    7370:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    7374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7378:	781b      	ldrb	r3, [r3, #0]
    737a:	79fa      	ldrb	r2, [r7, #7]
    737c:	429a      	cmp	r2, r3
    737e:	d007      	beq.n	7390 <pprz_mode_update+0x84>
    7380:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    7384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7388:	79fa      	ldrb	r2, [r7, #7]
    738a:	701a      	strb	r2, [r3, #0]
    738c:	2301      	movs	r3, #1
    738e:	e002      	b.n	7396 <pprz_mode_update+0x8a>
    7390:	2300      	movs	r3, #0
    7392:	e000      	b.n	7396 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    7394:	2300      	movs	r3, #0
}
    7396:	4618      	mov	r0, r3
    7398:	370c      	adds	r7, #12
    739a:	46bd      	mov	sp, r7
    739c:	f85d 7b04 	ldr.w	r7, [sp], #4
    73a0:	4770      	bx	lr
    73a2:	bf00      	nop

000073a4 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    73a4:	b480      	push	{r7}
    73a6:	b083      	sub	sp, #12
    73a8:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    73aa:	f24c 4320 	movw	r3, #50208	; 0xc420
    73ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b2:	89db      	ldrh	r3, [r3, #14]
    73b4:	b21a      	sxth	r2, r3
    73b6:	f640 437f 	movw	r3, #3199	; 0xc7f
    73ba:	429a      	cmp	r2, r3
    73bc:	bfd4      	ite	le
    73be:	2300      	movle	r3, #0
    73c0:	2301      	movgt	r3, #1
    73c2:	b2db      	uxtb	r3, r3
    73c4:	71fb      	strb	r3, [r7, #7]
    73c6:	f240 533c 	movw	r3, #1340	; 0x53c
    73ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ce:	781b      	ldrb	r3, [r3, #0]
    73d0:	79fa      	ldrb	r2, [r7, #7]
    73d2:	429a      	cmp	r2, r3
    73d4:	d007      	beq.n	73e6 <ir_estim_mode_update+0x42>
    73d6:	f240 533c 	movw	r3, #1340	; 0x53c
    73da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73de:	79fa      	ldrb	r2, [r7, #7]
    73e0:	701a      	strb	r2, [r3, #0]
    73e2:	2301      	movs	r3, #1
    73e4:	e000      	b.n	73e8 <ir_estim_mode_update+0x44>
    73e6:	2300      	movs	r3, #0
}
    73e8:	4618      	mov	r0, r3
    73ea:	370c      	adds	r7, #12
    73ec:	46bd      	mov	sp, r7
    73ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    73f2:	4770      	bx	lr

000073f4 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    73f4:	b480      	push	{r7}
    73f6:	b083      	sub	sp, #12
    73f8:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    73fa:	f24c 4320 	movw	r3, #50208	; 0xc420
    73fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7402:	7cdb      	ldrb	r3, [r3, #19]
    7404:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    7406:	f24c 3303 	movw	r3, #49923	; 0xc303
    740a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    740e:	781b      	ldrb	r3, [r3, #0]
    7410:	79fa      	ldrb	r2, [r7, #7]
    7412:	429a      	cmp	r2, r3
    7414:	d017      	beq.n	7446 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    7416:	f24c 3303 	movw	r3, #49923	; 0xc303
    741a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741e:	781b      	ldrb	r3, [r3, #0]
    7420:	461a      	mov	r2, r3
    7422:	79fb      	ldrb	r3, [r7, #7]
    7424:	4053      	eors	r3, r2
    7426:	f003 0303 	and.w	r3, r3, #3
    742a:	2b00      	cmp	r3, #0
    742c:	bf0c      	ite	eq
    742e:	2300      	moveq	r3, #0
    7430:	2301      	movne	r3, #1
    7432:	b2db      	uxtb	r3, r3
    7434:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    7436:	f24c 3303 	movw	r3, #49923	; 0xc303
    743a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    743e:	79fa      	ldrb	r2, [r7, #7]
    7440:	701a      	strb	r2, [r3, #0]
    return changed;
    7442:	79bb      	ldrb	r3, [r7, #6]
    7444:	e000      	b.n	7448 <mcu1_status_update+0x54>
  }
  return FALSE;
    7446:	2300      	movs	r3, #0
}
    7448:	4618      	mov	r0, r3
    744a:	370c      	adds	r7, #12
    744c:	46bd      	mov	sp, r7
    744e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7452:	4770      	bx	lr

00007454 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    7454:	b480      	push	{r7}
    7456:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7458:	f64c 132c 	movw	r3, #51500	; 0xc92c
    745c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7460:	781b      	ldrb	r3, [r3, #0]
    7462:	2b00      	cmp	r3, #0
    7464:	d12a      	bne.n	74bc <events_update+0x68>
    7466:	f24c 4320 	movw	r3, #50208	; 0xc420
    746a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    746e:	895b      	ldrh	r3, [r3, #10]
    7470:	b21b      	sxth	r3, r3
    7472:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    7476:	dd21      	ble.n	74bc <events_update+0x68>
    7478:	f24c 3314 	movw	r3, #49940	; 0xc314
    747c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7480:	881b      	ldrh	r3, [r3, #0]
    7482:	2b13      	cmp	r3, #19
    7484:	d819      	bhi.n	74ba <events_update+0x66>
    7486:	f24c 3314 	movw	r3, #49940	; 0xc314
    748a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748e:	881b      	ldrh	r3, [r3, #0]
    7490:	3301      	adds	r3, #1
    7492:	b29a      	uxth	r2, r3
    7494:	f24c 3314 	movw	r3, #49940	; 0xc314
    7498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    749c:	801a      	strh	r2, [r3, #0]
    749e:	f24c 3314 	movw	r3, #49940	; 0xc314
    74a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a6:	881b      	ldrh	r3, [r3, #0]
    74a8:	2b14      	cmp	r3, #20
    74aa:	d106      	bne.n	74ba <events_update+0x66>
    74ac:	f24c 3300 	movw	r3, #49920	; 0xc300
    74b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b4:	2201      	movs	r2, #1
    74b6:	701a      	strb	r2, [r3, #0]
    74b8:	e00c      	b.n	74d4 <events_update+0x80>
    74ba:	e00b      	b.n	74d4 <events_update+0x80>
    74bc:	f24c 3314 	movw	r3, #49940	; 0xc314
    74c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c4:	2200      	movs	r2, #0
    74c6:	801a      	strh	r2, [r3, #0]
    74c8:	f24c 3300 	movw	r3, #49920	; 0xc300
    74cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d0:	2200      	movs	r2, #0
    74d2:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    74d4:	f64c 132c 	movw	r3, #51500	; 0xc92c
    74d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74dc:	781b      	ldrb	r3, [r3, #0]
    74de:	2b00      	cmp	r3, #0
    74e0:	d12a      	bne.n	7538 <events_update+0xe4>
    74e2:	f24c 4320 	movw	r3, #50208	; 0xc420
    74e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ea:	895b      	ldrh	r3, [r3, #10]
    74ec:	b21b      	sxth	r3, r3
    74ee:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    74f2:	da21      	bge.n	7538 <events_update+0xe4>
    74f4:	f24c 3316 	movw	r3, #49942	; 0xc316
    74f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74fc:	881b      	ldrh	r3, [r3, #0]
    74fe:	2b13      	cmp	r3, #19
    7500:	d819      	bhi.n	7536 <events_update+0xe2>
    7502:	f24c 3316 	movw	r3, #49942	; 0xc316
    7506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    750a:	881b      	ldrh	r3, [r3, #0]
    750c:	3301      	adds	r3, #1
    750e:	b29a      	uxth	r2, r3
    7510:	f24c 3316 	movw	r3, #49942	; 0xc316
    7514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7518:	801a      	strh	r2, [r3, #0]
    751a:	f24c 3316 	movw	r3, #49942	; 0xc316
    751e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7522:	881b      	ldrh	r3, [r3, #0]
    7524:	2b14      	cmp	r3, #20
    7526:	d106      	bne.n	7536 <events_update+0xe2>
    7528:	f24c 3301 	movw	r3, #49921	; 0xc301
    752c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7530:	2201      	movs	r2, #1
    7532:	701a      	strb	r2, [r3, #0]
    7534:	e00c      	b.n	7550 <events_update+0xfc>
    7536:	e00b      	b.n	7550 <events_update+0xfc>
    7538:	f24c 3316 	movw	r3, #49942	; 0xc316
    753c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7540:	2200      	movs	r2, #0
    7542:	801a      	strh	r2, [r3, #0]
    7544:	f24c 3301 	movw	r3, #49921	; 0xc301
    7548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754c:	2200      	movs	r2, #0
    754e:	701a      	strb	r2, [r3, #0]
}  
    7550:	46bd      	mov	sp, r7
    7552:	f85d 7b04 	ldr.w	r7, [sp], #4
    7556:	4770      	bx	lr

00007558 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7558:	b480      	push	{r7}
    755a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    755c:	f24c 4320 	movw	r3, #50208	; 0xc420
    7560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7564:	88da      	ldrh	r2, [r3, #6]
    7566:	f24c 4338 	movw	r3, #50232	; 0xc438
    756a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    756e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7570:	f24c 4338 	movw	r3, #50232	; 0xc438
    7574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7578:	2200      	movs	r2, #0
    757a:	74da      	strb	r2, [r3, #19]
}
    757c:	46bd      	mov	sp, r7
    757e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7582:	4770      	bx	lr

00007584 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7584:	b480      	push	{r7}
    7586:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    7588:	f24c 3319 	movw	r3, #49945	; 0xc319
    758c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7590:	781a      	ldrb	r2, [r3, #0]
    7592:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759a:	781b      	ldrb	r3, [r3, #0]
    759c:	b2db      	uxtb	r3, r3
    759e:	429a      	cmp	r2, r3
    75a0:	d313      	bcc.n	75ca <send_boot+0x46>
    75a2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    75a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75aa:	781b      	ldrb	r3, [r3, #0]
    75ac:	b2db      	uxtb	r3, r3
    75ae:	461a      	mov	r2, r3
    75b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    75b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b8:	781b      	ldrb	r3, [r3, #0]
    75ba:	1ad3      	subs	r3, r2, r3
    75bc:	33ff      	adds	r3, #255	; 0xff
    75be:	2b06      	cmp	r3, #6
    75c0:	bfd4      	ite	le
    75c2:	2300      	movle	r3, #0
    75c4:	2301      	movgt	r3, #1
    75c6:	b2db      	uxtb	r3, r3
    75c8:	e011      	b.n	75ee <send_boot+0x6a>
    75ca:	f24c 331a 	movw	r3, #49946	; 0xc31a
    75ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d2:	781b      	ldrb	r3, [r3, #0]
    75d4:	b2db      	uxtb	r3, r3
    75d6:	461a      	mov	r2, r3
    75d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    75dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e0:	781b      	ldrb	r3, [r3, #0]
    75e2:	1ad3      	subs	r3, r2, r3
    75e4:	2b06      	cmp	r3, #6
    75e6:	bfd4      	ite	le
    75e8:	2300      	movle	r3, #0
    75ea:	2301      	movgt	r3, #1
    75ec:	b2db      	uxtb	r3, r3
    75ee:	2b00      	cmp	r3, #0
    75f0:	f000 8194 	beq.w	791c <send_boot+0x398>
    75f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    75f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fc:	781b      	ldrb	r3, [r3, #0]
    75fe:	461a      	mov	r2, r3
    7600:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7608:	2105      	movs	r1, #5
    760a:	5499      	strb	r1, [r3, r2]
    760c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7614:	781b      	ldrb	r3, [r3, #0]
    7616:	3301      	adds	r3, #1
    7618:	b2da      	uxtb	r2, r3
    761a:	f24c 3319 	movw	r3, #49945	; 0xc319
    761e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7622:	701a      	strb	r2, [r3, #0]
    7624:	f24c 3319 	movw	r3, #49945	; 0xc319
    7628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    762c:	781b      	ldrb	r3, [r3, #0]
    762e:	2bff      	cmp	r3, #255	; 0xff
    7630:	d105      	bne.n	763e <send_boot+0xba>
    7632:	f24c 3319 	movw	r3, #49945	; 0xc319
    7636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    763a:	2200      	movs	r2, #0
    763c:	701a      	strb	r2, [r3, #0]
    763e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7646:	781b      	ldrb	r3, [r3, #0]
    7648:	461a      	mov	r2, r3
    764a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    764e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7652:	2101      	movs	r1, #1
    7654:	5499      	strb	r1, [r3, r2]
    7656:	f24c 3319 	movw	r3, #49945	; 0xc319
    765a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765e:	781b      	ldrb	r3, [r3, #0]
    7660:	3301      	adds	r3, #1
    7662:	b2da      	uxtb	r2, r3
    7664:	f24c 3319 	movw	r3, #49945	; 0xc319
    7668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    766c:	701a      	strb	r2, [r3, #0]
    766e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7676:	781b      	ldrb	r3, [r3, #0]
    7678:	2bff      	cmp	r3, #255	; 0xff
    767a:	d105      	bne.n	7688 <send_boot+0x104>
    767c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7684:	2200      	movs	r2, #0
    7686:	701a      	strb	r2, [r3, #0]
    7688:	f24c 431d 	movw	r3, #50205	; 0xc41d
    768c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7690:	2201      	movs	r2, #1
    7692:	701a      	strb	r2, [r3, #0]
    7694:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    769c:	2201      	movs	r2, #1
    769e:	701a      	strb	r2, [r3, #0]
    76a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    76a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a8:	781b      	ldrb	r3, [r3, #0]
    76aa:	461a      	mov	r2, r3
    76ac:	f648 03fa 	movw	r3, #35066	; 0x88fa
    76b0:	f2c0 0301 	movt	r3, #1
    76b4:	7819      	ldrb	r1, [r3, #0]
    76b6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    76ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76be:	5499      	strb	r1, [r3, r2]
    76c0:	f648 03fa 	movw	r3, #35066	; 0x88fa
    76c4:	f2c0 0301 	movt	r3, #1
    76c8:	781a      	ldrb	r2, [r3, #0]
    76ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    76ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d2:	781b      	ldrb	r3, [r3, #0]
    76d4:	4413      	add	r3, r2
    76d6:	b2da      	uxtb	r2, r3
    76d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    76dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e0:	701a      	strb	r2, [r3, #0]
    76e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    76e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ea:	781a      	ldrb	r2, [r3, #0]
    76ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    76f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f4:	781b      	ldrb	r3, [r3, #0]
    76f6:	4413      	add	r3, r2
    76f8:	b2da      	uxtb	r2, r3
    76fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    76fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7702:	701a      	strb	r2, [r3, #0]
    7704:	f24c 3319 	movw	r3, #49945	; 0xc319
    7708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770c:	781b      	ldrb	r3, [r3, #0]
    770e:	3301      	adds	r3, #1
    7710:	b2da      	uxtb	r2, r3
    7712:	f24c 3319 	movw	r3, #49945	; 0xc319
    7716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    771a:	701a      	strb	r2, [r3, #0]
    771c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7724:	781b      	ldrb	r3, [r3, #0]
    7726:	2bff      	cmp	r3, #255	; 0xff
    7728:	d105      	bne.n	7736 <send_boot+0x1b2>
    772a:	f24c 3319 	movw	r3, #49945	; 0xc319
    772e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7732:	2200      	movs	r2, #0
    7734:	701a      	strb	r2, [r3, #0]
    7736:	f24c 3319 	movw	r3, #49945	; 0xc319
    773a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    773e:	781b      	ldrb	r3, [r3, #0]
    7740:	461a      	mov	r2, r3
    7742:	f648 03fa 	movw	r3, #35066	; 0x88fa
    7746:	f2c0 0301 	movt	r3, #1
    774a:	7859      	ldrb	r1, [r3, #1]
    774c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7754:	5499      	strb	r1, [r3, r2]
    7756:	4b88      	ldr	r3, [pc, #544]	; (7978 <send_boot+0x3f4>)
    7758:	781a      	ldrb	r2, [r3, #0]
    775a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    775e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7762:	781b      	ldrb	r3, [r3, #0]
    7764:	4413      	add	r3, r2
    7766:	b2da      	uxtb	r2, r3
    7768:	f24c 431d 	movw	r3, #50205	; 0xc41d
    776c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7770:	701a      	strb	r2, [r3, #0]
    7772:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777a:	781a      	ldrb	r2, [r3, #0]
    777c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7784:	781b      	ldrb	r3, [r3, #0]
    7786:	4413      	add	r3, r2
    7788:	b2da      	uxtb	r2, r3
    778a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    778e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7792:	701a      	strb	r2, [r3, #0]
    7794:	f24c 3319 	movw	r3, #49945	; 0xc319
    7798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    779c:	781b      	ldrb	r3, [r3, #0]
    779e:	3301      	adds	r3, #1
    77a0:	b2da      	uxtb	r2, r3
    77a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    77a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77aa:	701a      	strb	r2, [r3, #0]
    77ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    77b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b4:	781b      	ldrb	r3, [r3, #0]
    77b6:	2bff      	cmp	r3, #255	; 0xff
    77b8:	d105      	bne.n	77c6 <send_boot+0x242>
    77ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    77be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c2:	2200      	movs	r2, #0
    77c4:	701a      	strb	r2, [r3, #0]
    77c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    77ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ce:	781b      	ldrb	r3, [r3, #0]
    77d0:	461a      	mov	r2, r3
    77d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    77d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77da:	7819      	ldrb	r1, [r3, #0]
    77dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    77e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e4:	5499      	strb	r1, [r3, r2]
    77e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    77ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ee:	781b      	ldrb	r3, [r3, #0]
    77f0:	3301      	adds	r3, #1
    77f2:	b2da      	uxtb	r2, r3
    77f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    77f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fc:	701a      	strb	r2, [r3, #0]
    77fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    7802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7806:	781b      	ldrb	r3, [r3, #0]
    7808:	2bff      	cmp	r3, #255	; 0xff
    780a:	d105      	bne.n	7818 <send_boot+0x294>
    780c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7814:	2200      	movs	r2, #0
    7816:	701a      	strb	r2, [r3, #0]
    7818:	f24c 3319 	movw	r3, #49945	; 0xc319
    781c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7820:	781b      	ldrb	r3, [r3, #0]
    7822:	461a      	mov	r2, r3
    7824:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782c:	7819      	ldrb	r1, [r3, #0]
    782e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7836:	5499      	strb	r1, [r3, r2]
    7838:	f24c 3319 	movw	r3, #49945	; 0xc319
    783c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7840:	781b      	ldrb	r3, [r3, #0]
    7842:	3301      	adds	r3, #1
    7844:	b2da      	uxtb	r2, r3
    7846:	f24c 3319 	movw	r3, #49945	; 0xc319
    784a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    784e:	701a      	strb	r2, [r3, #0]
    7850:	f24c 3319 	movw	r3, #49945	; 0xc319
    7854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7858:	781b      	ldrb	r3, [r3, #0]
    785a:	2bff      	cmp	r3, #255	; 0xff
    785c:	d105      	bne.n	786a <send_boot+0x2e6>
    785e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7866:	2200      	movs	r2, #0
    7868:	701a      	strb	r2, [r3, #0]
    786a:	f242 0339 	movw	r3, #8249	; 0x2039
    786e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7872:	781b      	ldrb	r3, [r3, #0]
    7874:	b2db      	uxtb	r3, r3
    7876:	f003 0310 	and.w	r3, r3, #16
    787a:	2b00      	cmp	r3, #0
    787c:	d15a      	bne.n	7934 <send_boot+0x3b0>
    787e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7886:	781b      	ldrb	r3, [r3, #0]
    7888:	b2db      	uxtb	r3, r3
    788a:	461a      	mov	r2, r3
    788c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7894:	5c9a      	ldrb	r2, [r3, r2]
    7896:	f24c 431b 	movw	r3, #50203	; 0xc41b
    789a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    789e:	701a      	strb	r2, [r3, #0]
    78a0:	f24c 431c 	movw	r3, #50204	; 0xc41c
    78a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a8:	2200      	movs	r2, #0
    78aa:	701a      	strb	r2, [r3, #0]
    78ac:	f24c 331a 	movw	r3, #49946	; 0xc31a
    78b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b4:	781b      	ldrb	r3, [r3, #0]
    78b6:	b2db      	uxtb	r3, r3
    78b8:	3301      	adds	r3, #1
    78ba:	b2da      	uxtb	r2, r3
    78bc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    78c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c4:	701a      	strb	r2, [r3, #0]
    78c6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    78ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ce:	781b      	ldrb	r3, [r3, #0]
    78d0:	b2db      	uxtb	r3, r3
    78d2:	2bff      	cmp	r3, #255	; 0xff
    78d4:	d105      	bne.n	78e2 <send_boot+0x35e>
    78d6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    78da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78de:	2200      	movs	r2, #0
    78e0:	701a      	strb	r2, [r3, #0]
    78e2:	f242 0338 	movw	r3, #8248	; 0x2038
    78e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ea:	f242 0238 	movw	r2, #8248	; 0x2038
    78ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    78f2:	7812      	ldrb	r2, [r2, #0]
    78f4:	b2d2      	uxtb	r2, r2
    78f6:	f042 0201 	orr.w	r2, r2, #1
    78fa:	b2d2      	uxtb	r2, r2
    78fc:	701a      	strb	r2, [r3, #0]
    78fe:	f242 0339 	movw	r3, #8249	; 0x2039
    7902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7906:	f242 0239 	movw	r2, #8249	; 0x2039
    790a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    790e:	7812      	ldrb	r2, [r2, #0]
    7910:	b2d2      	uxtb	r2, r2
    7912:	f042 0210 	orr.w	r2, r2, #16
    7916:	b2d2      	uxtb	r2, r2
    7918:	701a      	strb	r2, [r3, #0]
    791a:	e00b      	b.n	7934 <send_boot+0x3b0>
    791c:	f24c 3318 	movw	r3, #49944	; 0xc318
    7920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7924:	781b      	ldrb	r3, [r3, #0]
    7926:	3301      	adds	r3, #1
    7928:	b2da      	uxtb	r2, r3
    792a:	f24c 3318 	movw	r3, #49944	; 0xc318
    792e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7932:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7934:	f24c 3319 	movw	r3, #49945	; 0xc319
    7938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793c:	781a      	ldrb	r2, [r3, #0]
    793e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7946:	781b      	ldrb	r3, [r3, #0]
    7948:	b2db      	uxtb	r3, r3
    794a:	429a      	cmp	r2, r3
    794c:	d316      	bcc.n	797c <send_boot+0x3f8>
    794e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7956:	781b      	ldrb	r3, [r3, #0]
    7958:	b2db      	uxtb	r3, r3
    795a:	461a      	mov	r2, r3
    795c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7964:	781b      	ldrb	r3, [r3, #0]
    7966:	1ad3      	subs	r3, r2, r3
    7968:	33ff      	adds	r3, #255	; 0xff
    796a:	2b14      	cmp	r3, #20
    796c:	bfd4      	ite	le
    796e:	2300      	movle	r3, #0
    7970:	2301      	movgt	r3, #1
    7972:	b2db      	uxtb	r3, r3
    7974:	e014      	b.n	79a0 <send_boot+0x41c>
    7976:	bf00      	nop
    7978:	000188fb 	.word	0x000188fb
    797c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7984:	781b      	ldrb	r3, [r3, #0]
    7986:	b2db      	uxtb	r3, r3
    7988:	461a      	mov	r2, r3
    798a:	f24c 3319 	movw	r3, #49945	; 0xc319
    798e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7992:	781b      	ldrb	r3, [r3, #0]
    7994:	1ad3      	subs	r3, r2, r3
    7996:	2b14      	cmp	r3, #20
    7998:	bfd4      	ite	le
    799a:	2300      	movle	r3, #0
    799c:	2301      	movgt	r3, #1
    799e:	b2db      	uxtb	r3, r3
    79a0:	2b00      	cmp	r3, #0
    79a2:	f000 85a5 	beq.w	84f0 <send_boot+0xf6c>
    79a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    79aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ae:	781b      	ldrb	r3, [r3, #0]
    79b0:	461a      	mov	r2, r3
    79b2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    79b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ba:	2105      	movs	r1, #5
    79bc:	5499      	strb	r1, [r3, r2]
    79be:	f24c 3319 	movw	r3, #49945	; 0xc319
    79c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c6:	781b      	ldrb	r3, [r3, #0]
    79c8:	3301      	adds	r3, #1
    79ca:	b2da      	uxtb	r2, r3
    79cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    79d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d4:	701a      	strb	r2, [r3, #0]
    79d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    79da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79de:	781b      	ldrb	r3, [r3, #0]
    79e0:	2bff      	cmp	r3, #255	; 0xff
    79e2:	d105      	bne.n	79f0 <send_boot+0x46c>
    79e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    79e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ec:	2200      	movs	r2, #0
    79ee:	701a      	strb	r2, [r3, #0]
    79f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    79f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f8:	781b      	ldrb	r3, [r3, #0]
    79fa:	461a      	mov	r2, r3
    79fc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a04:	2105      	movs	r1, #5
    7a06:	5499      	strb	r1, [r3, r2]
    7a08:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a10:	781b      	ldrb	r3, [r3, #0]
    7a12:	3301      	adds	r3, #1
    7a14:	b2da      	uxtb	r2, r3
    7a16:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1e:	701a      	strb	r2, [r3, #0]
    7a20:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a28:	781b      	ldrb	r3, [r3, #0]
    7a2a:	2bff      	cmp	r3, #255	; 0xff
    7a2c:	d105      	bne.n	7a3a <send_boot+0x4b6>
    7a2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a36:	2200      	movs	r2, #0
    7a38:	701a      	strb	r2, [r3, #0]
    7a3a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a42:	2205      	movs	r2, #5
    7a44:	701a      	strb	r2, [r3, #0]
    7a46:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a4e:	2205      	movs	r2, #5
    7a50:	701a      	strb	r2, [r3, #0]
    7a52:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5a:	781b      	ldrb	r3, [r3, #0]
    7a5c:	461a      	mov	r2, r3
    7a5e:	f64c 1310 	movw	r3, #51472	; 0xc910
    7a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a66:	7819      	ldrb	r1, [r3, #0]
    7a68:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a70:	5499      	strb	r1, [r3, r2]
    7a72:	f64c 1310 	movw	r3, #51472	; 0xc910
    7a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7a:	781a      	ldrb	r2, [r3, #0]
    7a7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a84:	781b      	ldrb	r3, [r3, #0]
    7a86:	4413      	add	r3, r2
    7a88:	b2da      	uxtb	r2, r3
    7a8a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a92:	701a      	strb	r2, [r3, #0]
    7a94:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a9c:	781a      	ldrb	r2, [r3, #0]
    7a9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa6:	781b      	ldrb	r3, [r3, #0]
    7aa8:	4413      	add	r3, r2
    7aaa:	b2da      	uxtb	r2, r3
    7aac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab4:	701a      	strb	r2, [r3, #0]
    7ab6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7abe:	781b      	ldrb	r3, [r3, #0]
    7ac0:	3301      	adds	r3, #1
    7ac2:	b2da      	uxtb	r2, r3
    7ac4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7acc:	701a      	strb	r2, [r3, #0]
    7ace:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad6:	781b      	ldrb	r3, [r3, #0]
    7ad8:	2bff      	cmp	r3, #255	; 0xff
    7ada:	d105      	bne.n	7ae8 <send_boot+0x564>
    7adc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae4:	2200      	movs	r2, #0
    7ae6:	701a      	strb	r2, [r3, #0]
    7ae8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af0:	781b      	ldrb	r3, [r3, #0]
    7af2:	461a      	mov	r2, r3
    7af4:	f64c 1310 	movw	r3, #51472	; 0xc910
    7af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afc:	7859      	ldrb	r1, [r3, #1]
    7afe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b06:	5499      	strb	r1, [r3, r2]
    7b08:	4bd1      	ldr	r3, [pc, #836]	; (7e50 <send_boot+0x8cc>)
    7b0a:	781a      	ldrb	r2, [r3, #0]
    7b0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b14:	781b      	ldrb	r3, [r3, #0]
    7b16:	4413      	add	r3, r2
    7b18:	b2da      	uxtb	r2, r3
    7b1a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b22:	701a      	strb	r2, [r3, #0]
    7b24:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2c:	781a      	ldrb	r2, [r3, #0]
    7b2e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b36:	781b      	ldrb	r3, [r3, #0]
    7b38:	4413      	add	r3, r2
    7b3a:	b2da      	uxtb	r2, r3
    7b3c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b44:	701a      	strb	r2, [r3, #0]
    7b46:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b4e:	781b      	ldrb	r3, [r3, #0]
    7b50:	3301      	adds	r3, #1
    7b52:	b2da      	uxtb	r2, r3
    7b54:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5c:	701a      	strb	r2, [r3, #0]
    7b5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b66:	781b      	ldrb	r3, [r3, #0]
    7b68:	2bff      	cmp	r3, #255	; 0xff
    7b6a:	d105      	bne.n	7b78 <send_boot+0x5f4>
    7b6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b74:	2200      	movs	r2, #0
    7b76:	701a      	strb	r2, [r3, #0]
    7b78:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b80:	781b      	ldrb	r3, [r3, #0]
    7b82:	461a      	mov	r2, r3
    7b84:	f64c 1310 	movw	r3, #51472	; 0xc910
    7b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8c:	7899      	ldrb	r1, [r3, #2]
    7b8e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b96:	5499      	strb	r1, [r3, r2]
    7b98:	4bae      	ldr	r3, [pc, #696]	; (7e54 <send_boot+0x8d0>)
    7b9a:	781a      	ldrb	r2, [r3, #0]
    7b9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba4:	781b      	ldrb	r3, [r3, #0]
    7ba6:	4413      	add	r3, r2
    7ba8:	b2da      	uxtb	r2, r3
    7baa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb2:	701a      	strb	r2, [r3, #0]
    7bb4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bbc:	781a      	ldrb	r2, [r3, #0]
    7bbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc6:	781b      	ldrb	r3, [r3, #0]
    7bc8:	4413      	add	r3, r2
    7bca:	b2da      	uxtb	r2, r3
    7bcc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd4:	701a      	strb	r2, [r3, #0]
    7bd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bde:	781b      	ldrb	r3, [r3, #0]
    7be0:	3301      	adds	r3, #1
    7be2:	b2da      	uxtb	r2, r3
    7be4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bec:	701a      	strb	r2, [r3, #0]
    7bee:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf6:	781b      	ldrb	r3, [r3, #0]
    7bf8:	2bff      	cmp	r3, #255	; 0xff
    7bfa:	d105      	bne.n	7c08 <send_boot+0x684>
    7bfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c04:	2200      	movs	r2, #0
    7c06:	701a      	strb	r2, [r3, #0]
    7c08:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c10:	781b      	ldrb	r3, [r3, #0]
    7c12:	461a      	mov	r2, r3
    7c14:	f64c 1310 	movw	r3, #51472	; 0xc910
    7c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1c:	78d9      	ldrb	r1, [r3, #3]
    7c1e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c26:	5499      	strb	r1, [r3, r2]
    7c28:	4b8b      	ldr	r3, [pc, #556]	; (7e58 <send_boot+0x8d4>)
    7c2a:	781a      	ldrb	r2, [r3, #0]
    7c2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c34:	781b      	ldrb	r3, [r3, #0]
    7c36:	4413      	add	r3, r2
    7c38:	b2da      	uxtb	r2, r3
    7c3a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c42:	701a      	strb	r2, [r3, #0]
    7c44:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c4c:	781a      	ldrb	r2, [r3, #0]
    7c4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c56:	781b      	ldrb	r3, [r3, #0]
    7c58:	4413      	add	r3, r2
    7c5a:	b2da      	uxtb	r2, r3
    7c5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c64:	701a      	strb	r2, [r3, #0]
    7c66:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6e:	781b      	ldrb	r3, [r3, #0]
    7c70:	3301      	adds	r3, #1
    7c72:	b2da      	uxtb	r2, r3
    7c74:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7c:	701a      	strb	r2, [r3, #0]
    7c7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c86:	781b      	ldrb	r3, [r3, #0]
    7c88:	2bff      	cmp	r3, #255	; 0xff
    7c8a:	d105      	bne.n	7c98 <send_boot+0x714>
    7c8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c94:	2200      	movs	r2, #0
    7c96:	701a      	strb	r2, [r3, #0]
    7c98:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca0:	781b      	ldrb	r3, [r3, #0]
    7ca2:	461a      	mov	r2, r3
    7ca4:	f64c 1314 	movw	r3, #51476	; 0xc914
    7ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cac:	7819      	ldrb	r1, [r3, #0]
    7cae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb6:	5499      	strb	r1, [r3, r2]
    7cb8:	f64c 1314 	movw	r3, #51476	; 0xc914
    7cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc0:	781a      	ldrb	r2, [r3, #0]
    7cc2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cca:	781b      	ldrb	r3, [r3, #0]
    7ccc:	4413      	add	r3, r2
    7cce:	b2da      	uxtb	r2, r3
    7cd0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd8:	701a      	strb	r2, [r3, #0]
    7cda:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce2:	781a      	ldrb	r2, [r3, #0]
    7ce4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cec:	781b      	ldrb	r3, [r3, #0]
    7cee:	4413      	add	r3, r2
    7cf0:	b2da      	uxtb	r2, r3
    7cf2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfa:	701a      	strb	r2, [r3, #0]
    7cfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d04:	781b      	ldrb	r3, [r3, #0]
    7d06:	3301      	adds	r3, #1
    7d08:	b2da      	uxtb	r2, r3
    7d0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d12:	701a      	strb	r2, [r3, #0]
    7d14:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d1c:	781b      	ldrb	r3, [r3, #0]
    7d1e:	2bff      	cmp	r3, #255	; 0xff
    7d20:	d105      	bne.n	7d2e <send_boot+0x7aa>
    7d22:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2a:	2200      	movs	r2, #0
    7d2c:	701a      	strb	r2, [r3, #0]
    7d2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d36:	781b      	ldrb	r3, [r3, #0]
    7d38:	461a      	mov	r2, r3
    7d3a:	f64c 1314 	movw	r3, #51476	; 0xc914
    7d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d42:	7859      	ldrb	r1, [r3, #1]
    7d44:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d4c:	5499      	strb	r1, [r3, r2]
    7d4e:	4b43      	ldr	r3, [pc, #268]	; (7e5c <send_boot+0x8d8>)
    7d50:	781a      	ldrb	r2, [r3, #0]
    7d52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5a:	781b      	ldrb	r3, [r3, #0]
    7d5c:	4413      	add	r3, r2
    7d5e:	b2da      	uxtb	r2, r3
    7d60:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d68:	701a      	strb	r2, [r3, #0]
    7d6a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d72:	781a      	ldrb	r2, [r3, #0]
    7d74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7c:	781b      	ldrb	r3, [r3, #0]
    7d7e:	4413      	add	r3, r2
    7d80:	b2da      	uxtb	r2, r3
    7d82:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d8a:	701a      	strb	r2, [r3, #0]
    7d8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d94:	781b      	ldrb	r3, [r3, #0]
    7d96:	3301      	adds	r3, #1
    7d98:	b2da      	uxtb	r2, r3
    7d9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da2:	701a      	strb	r2, [r3, #0]
    7da4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dac:	781b      	ldrb	r3, [r3, #0]
    7dae:	2bff      	cmp	r3, #255	; 0xff
    7db0:	d105      	bne.n	7dbe <send_boot+0x83a>
    7db2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dba:	2200      	movs	r2, #0
    7dbc:	701a      	strb	r2, [r3, #0]
    7dbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    7dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc6:	781b      	ldrb	r3, [r3, #0]
    7dc8:	461a      	mov	r2, r3
    7dca:	f64c 1314 	movw	r3, #51476	; 0xc914
    7dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd2:	7899      	ldrb	r1, [r3, #2]
    7dd4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ddc:	5499      	strb	r1, [r3, r2]
    7dde:	4b20      	ldr	r3, [pc, #128]	; (7e60 <send_boot+0x8dc>)
    7de0:	781a      	ldrb	r2, [r3, #0]
    7de2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dea:	781b      	ldrb	r3, [r3, #0]
    7dec:	4413      	add	r3, r2
    7dee:	b2da      	uxtb	r2, r3
    7df0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df8:	701a      	strb	r2, [r3, #0]
    7dfa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e02:	781a      	ldrb	r2, [r3, #0]
    7e04:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e0c:	781b      	ldrb	r3, [r3, #0]
    7e0e:	4413      	add	r3, r2
    7e10:	b2da      	uxtb	r2, r3
    7e12:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1a:	701a      	strb	r2, [r3, #0]
    7e1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e24:	781b      	ldrb	r3, [r3, #0]
    7e26:	3301      	adds	r3, #1
    7e28:	b2da      	uxtb	r2, r3
    7e2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e32:	701a      	strb	r2, [r3, #0]
    7e34:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e3c:	781b      	ldrb	r3, [r3, #0]
    7e3e:	2bff      	cmp	r3, #255	; 0xff
    7e40:	d110      	bne.n	7e64 <send_boot+0x8e0>
    7e42:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4a:	2200      	movs	r2, #0
    7e4c:	701a      	strb	r2, [r3, #0]
    7e4e:	e009      	b.n	7e64 <send_boot+0x8e0>
    7e50:	2004c911 	.word	0x2004c911
    7e54:	2004c912 	.word	0x2004c912
    7e58:	2004c913 	.word	0x2004c913
    7e5c:	2004c915 	.word	0x2004c915
    7e60:	2004c916 	.word	0x2004c916
    7e64:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e6c:	781b      	ldrb	r3, [r3, #0]
    7e6e:	461a      	mov	r2, r3
    7e70:	f64c 1314 	movw	r3, #51476	; 0xc914
    7e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e78:	78d9      	ldrb	r1, [r3, #3]
    7e7a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e82:	5499      	strb	r1, [r3, r2]
    7e84:	4bd3      	ldr	r3, [pc, #844]	; (81d4 <send_boot+0xc50>)
    7e86:	781a      	ldrb	r2, [r3, #0]
    7e88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e90:	781b      	ldrb	r3, [r3, #0]
    7e92:	4413      	add	r3, r2
    7e94:	b2da      	uxtb	r2, r3
    7e96:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e9e:	701a      	strb	r2, [r3, #0]
    7ea0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea8:	781a      	ldrb	r2, [r3, #0]
    7eaa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb2:	781b      	ldrb	r3, [r3, #0]
    7eb4:	4413      	add	r3, r2
    7eb6:	b2da      	uxtb	r2, r3
    7eb8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec0:	701a      	strb	r2, [r3, #0]
    7ec2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eca:	781b      	ldrb	r3, [r3, #0]
    7ecc:	3301      	adds	r3, #1
    7ece:	b2da      	uxtb	r2, r3
    7ed0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed8:	701a      	strb	r2, [r3, #0]
    7eda:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee2:	781b      	ldrb	r3, [r3, #0]
    7ee4:	2bff      	cmp	r3, #255	; 0xff
    7ee6:	d105      	bne.n	7ef4 <send_boot+0x970>
    7ee8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef0:	2200      	movs	r2, #0
    7ef2:	701a      	strb	r2, [r3, #0]
    7ef4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7efc:	781b      	ldrb	r3, [r3, #0]
    7efe:	461a      	mov	r2, r3
    7f00:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f08:	7819      	ldrb	r1, [r3, #0]
    7f0a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f12:	5499      	strb	r1, [r3, r2]
    7f14:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f1c:	781a      	ldrb	r2, [r3, #0]
    7f1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f26:	781b      	ldrb	r3, [r3, #0]
    7f28:	4413      	add	r3, r2
    7f2a:	b2da      	uxtb	r2, r3
    7f2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f34:	701a      	strb	r2, [r3, #0]
    7f36:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f3e:	781a      	ldrb	r2, [r3, #0]
    7f40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f48:	781b      	ldrb	r3, [r3, #0]
    7f4a:	4413      	add	r3, r2
    7f4c:	b2da      	uxtb	r2, r3
    7f4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f56:	701a      	strb	r2, [r3, #0]
    7f58:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f60:	781b      	ldrb	r3, [r3, #0]
    7f62:	3301      	adds	r3, #1
    7f64:	b2da      	uxtb	r2, r3
    7f66:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f6e:	701a      	strb	r2, [r3, #0]
    7f70:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f78:	781b      	ldrb	r3, [r3, #0]
    7f7a:	2bff      	cmp	r3, #255	; 0xff
    7f7c:	d105      	bne.n	7f8a <send_boot+0xa06>
    7f7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f86:	2200      	movs	r2, #0
    7f88:	701a      	strb	r2, [r3, #0]
    7f8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f92:	781b      	ldrb	r3, [r3, #0]
    7f94:	461a      	mov	r2, r3
    7f96:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f9e:	7859      	ldrb	r1, [r3, #1]
    7fa0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa8:	5499      	strb	r1, [r3, r2]
    7faa:	4b8b      	ldr	r3, [pc, #556]	; (81d8 <send_boot+0xc54>)
    7fac:	781a      	ldrb	r2, [r3, #0]
    7fae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb6:	781b      	ldrb	r3, [r3, #0]
    7fb8:	4413      	add	r3, r2
    7fba:	b2da      	uxtb	r2, r3
    7fbc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc4:	701a      	strb	r2, [r3, #0]
    7fc6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fce:	781a      	ldrb	r2, [r3, #0]
    7fd0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd8:	781b      	ldrb	r3, [r3, #0]
    7fda:	4413      	add	r3, r2
    7fdc:	b2da      	uxtb	r2, r3
    7fde:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe6:	701a      	strb	r2, [r3, #0]
    7fe8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff0:	781b      	ldrb	r3, [r3, #0]
    7ff2:	3301      	adds	r3, #1
    7ff4:	b2da      	uxtb	r2, r3
    7ff6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ffe:	701a      	strb	r2, [r3, #0]
    8000:	f24c 3319 	movw	r3, #49945	; 0xc319
    8004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8008:	781b      	ldrb	r3, [r3, #0]
    800a:	2bff      	cmp	r3, #255	; 0xff
    800c:	d105      	bne.n	801a <send_boot+0xa96>
    800e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8016:	2200      	movs	r2, #0
    8018:	701a      	strb	r2, [r3, #0]
    801a:	f24c 3319 	movw	r3, #49945	; 0xc319
    801e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8022:	781b      	ldrb	r3, [r3, #0]
    8024:	461a      	mov	r2, r3
    8026:	f64c 130c 	movw	r3, #51468	; 0xc90c
    802a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    802e:	7899      	ldrb	r1, [r3, #2]
    8030:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8038:	5499      	strb	r1, [r3, r2]
    803a:	4b68      	ldr	r3, [pc, #416]	; (81dc <send_boot+0xc58>)
    803c:	781a      	ldrb	r2, [r3, #0]
    803e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8046:	781b      	ldrb	r3, [r3, #0]
    8048:	4413      	add	r3, r2
    804a:	b2da      	uxtb	r2, r3
    804c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8054:	701a      	strb	r2, [r3, #0]
    8056:	f24c 431e 	movw	r3, #50206	; 0xc41e
    805a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805e:	781a      	ldrb	r2, [r3, #0]
    8060:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8068:	781b      	ldrb	r3, [r3, #0]
    806a:	4413      	add	r3, r2
    806c:	b2da      	uxtb	r2, r3
    806e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8076:	701a      	strb	r2, [r3, #0]
    8078:	f24c 3319 	movw	r3, #49945	; 0xc319
    807c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8080:	781b      	ldrb	r3, [r3, #0]
    8082:	3301      	adds	r3, #1
    8084:	b2da      	uxtb	r2, r3
    8086:	f24c 3319 	movw	r3, #49945	; 0xc319
    808a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    808e:	701a      	strb	r2, [r3, #0]
    8090:	f24c 3319 	movw	r3, #49945	; 0xc319
    8094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8098:	781b      	ldrb	r3, [r3, #0]
    809a:	2bff      	cmp	r3, #255	; 0xff
    809c:	d105      	bne.n	80aa <send_boot+0xb26>
    809e:	f24c 3319 	movw	r3, #49945	; 0xc319
    80a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a6:	2200      	movs	r2, #0
    80a8:	701a      	strb	r2, [r3, #0]
    80aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    80ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b2:	781b      	ldrb	r3, [r3, #0]
    80b4:	461a      	mov	r2, r3
    80b6:	f64c 130c 	movw	r3, #51468	; 0xc90c
    80ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80be:	78d9      	ldrb	r1, [r3, #3]
    80c0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    80c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c8:	5499      	strb	r1, [r3, r2]
    80ca:	4b45      	ldr	r3, [pc, #276]	; (81e0 <send_boot+0xc5c>)
    80cc:	781a      	ldrb	r2, [r3, #0]
    80ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    80d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d6:	781b      	ldrb	r3, [r3, #0]
    80d8:	4413      	add	r3, r2
    80da:	b2da      	uxtb	r2, r3
    80dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    80e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e4:	701a      	strb	r2, [r3, #0]
    80e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    80ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ee:	781a      	ldrb	r2, [r3, #0]
    80f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    80f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f8:	781b      	ldrb	r3, [r3, #0]
    80fa:	4413      	add	r3, r2
    80fc:	b2da      	uxtb	r2, r3
    80fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8106:	701a      	strb	r2, [r3, #0]
    8108:	f24c 3319 	movw	r3, #49945	; 0xc319
    810c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8110:	781b      	ldrb	r3, [r3, #0]
    8112:	3301      	adds	r3, #1
    8114:	b2da      	uxtb	r2, r3
    8116:	f24c 3319 	movw	r3, #49945	; 0xc319
    811a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    811e:	701a      	strb	r2, [r3, #0]
    8120:	f24c 3319 	movw	r3, #49945	; 0xc319
    8124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8128:	781b      	ldrb	r3, [r3, #0]
    812a:	2bff      	cmp	r3, #255	; 0xff
    812c:	d105      	bne.n	813a <send_boot+0xbb6>
    812e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8136:	2200      	movs	r2, #0
    8138:	701a      	strb	r2, [r3, #0]
    813a:	f24c 3319 	movw	r3, #49945	; 0xc319
    813e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8142:	781b      	ldrb	r3, [r3, #0]
    8144:	461a      	mov	r2, r3
    8146:	f240 5342 	movw	r3, #1346	; 0x542
    814a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    814e:	7819      	ldrb	r1, [r3, #0]
    8150:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8158:	5499      	strb	r1, [r3, r2]
    815a:	f240 5342 	movw	r3, #1346	; 0x542
    815e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8162:	781a      	ldrb	r2, [r3, #0]
    8164:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    816c:	781b      	ldrb	r3, [r3, #0]
    816e:	4413      	add	r3, r2
    8170:	b2da      	uxtb	r2, r3
    8172:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    817a:	701a      	strb	r2, [r3, #0]
    817c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8184:	781a      	ldrb	r2, [r3, #0]
    8186:	f24c 431d 	movw	r3, #50205	; 0xc41d
    818a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    818e:	781b      	ldrb	r3, [r3, #0]
    8190:	4413      	add	r3, r2
    8192:	b2da      	uxtb	r2, r3
    8194:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    819c:	701a      	strb	r2, [r3, #0]
    819e:	f24c 3319 	movw	r3, #49945	; 0xc319
    81a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a6:	781b      	ldrb	r3, [r3, #0]
    81a8:	3301      	adds	r3, #1
    81aa:	b2da      	uxtb	r2, r3
    81ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    81b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b4:	701a      	strb	r2, [r3, #0]
    81b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    81ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81be:	781b      	ldrb	r3, [r3, #0]
    81c0:	2bff      	cmp	r3, #255	; 0xff
    81c2:	d10f      	bne.n	81e4 <send_boot+0xc60>
    81c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    81c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81cc:	2200      	movs	r2, #0
    81ce:	701a      	strb	r2, [r3, #0]
    81d0:	e008      	b.n	81e4 <send_boot+0xc60>
    81d2:	bf00      	nop
    81d4:	2004c917 	.word	0x2004c917
    81d8:	2004c90d 	.word	0x2004c90d
    81dc:	2004c90e 	.word	0x2004c90e
    81e0:	2004c90f 	.word	0x2004c90f
    81e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    81e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ec:	781b      	ldrb	r3, [r3, #0]
    81ee:	461a      	mov	r2, r3
    81f0:	f240 5342 	movw	r3, #1346	; 0x542
    81f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81f8:	7859      	ldrb	r1, [r3, #1]
    81fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    81fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8202:	5499      	strb	r1, [r3, r2]
    8204:	4bc5      	ldr	r3, [pc, #788]	; (851c <send_boot+0xf98>)
    8206:	781a      	ldrb	r2, [r3, #0]
    8208:	f24c 431d 	movw	r3, #50205	; 0xc41d
    820c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8210:	781b      	ldrb	r3, [r3, #0]
    8212:	4413      	add	r3, r2
    8214:	b2da      	uxtb	r2, r3
    8216:	f24c 431d 	movw	r3, #50205	; 0xc41d
    821a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    821e:	701a      	strb	r2, [r3, #0]
    8220:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8228:	781a      	ldrb	r2, [r3, #0]
    822a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    822e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8232:	781b      	ldrb	r3, [r3, #0]
    8234:	4413      	add	r3, r2
    8236:	b2da      	uxtb	r2, r3
    8238:	f24c 431e 	movw	r3, #50206	; 0xc41e
    823c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8240:	701a      	strb	r2, [r3, #0]
    8242:	f24c 3319 	movw	r3, #49945	; 0xc319
    8246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	3301      	adds	r3, #1
    824e:	b2da      	uxtb	r2, r3
    8250:	f24c 3319 	movw	r3, #49945	; 0xc319
    8254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8258:	701a      	strb	r2, [r3, #0]
    825a:	f24c 3319 	movw	r3, #49945	; 0xc319
    825e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8262:	781b      	ldrb	r3, [r3, #0]
    8264:	2bff      	cmp	r3, #255	; 0xff
    8266:	d105      	bne.n	8274 <send_boot+0xcf0>
    8268:	f24c 3319 	movw	r3, #49945	; 0xc319
    826c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8270:	2200      	movs	r2, #0
    8272:	701a      	strb	r2, [r3, #0]
    8274:	f24c 3319 	movw	r3, #49945	; 0xc319
    8278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    827c:	781b      	ldrb	r3, [r3, #0]
    827e:	461a      	mov	r2, r3
    8280:	f240 5344 	movw	r3, #1348	; 0x544
    8284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8288:	7819      	ldrb	r1, [r3, #0]
    828a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    828e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8292:	5499      	strb	r1, [r3, r2]
    8294:	f240 5344 	movw	r3, #1348	; 0x544
    8298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    829c:	781a      	ldrb	r2, [r3, #0]
    829e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    82a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a6:	781b      	ldrb	r3, [r3, #0]
    82a8:	4413      	add	r3, r2
    82aa:	b2da      	uxtb	r2, r3
    82ac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    82b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b4:	701a      	strb	r2, [r3, #0]
    82b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    82ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82be:	781a      	ldrb	r2, [r3, #0]
    82c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    82c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c8:	781b      	ldrb	r3, [r3, #0]
    82ca:	4413      	add	r3, r2
    82cc:	b2da      	uxtb	r2, r3
    82ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    82d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d6:	701a      	strb	r2, [r3, #0]
    82d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    82dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e0:	781b      	ldrb	r3, [r3, #0]
    82e2:	3301      	adds	r3, #1
    82e4:	b2da      	uxtb	r2, r3
    82e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    82ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ee:	701a      	strb	r2, [r3, #0]
    82f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    82f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f8:	781b      	ldrb	r3, [r3, #0]
    82fa:	2bff      	cmp	r3, #255	; 0xff
    82fc:	d105      	bne.n	830a <send_boot+0xd86>
    82fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    8302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8306:	2200      	movs	r2, #0
    8308:	701a      	strb	r2, [r3, #0]
    830a:	f24c 3319 	movw	r3, #49945	; 0xc319
    830e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8312:	781b      	ldrb	r3, [r3, #0]
    8314:	461a      	mov	r2, r3
    8316:	f240 5344 	movw	r3, #1348	; 0x544
    831a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    831e:	7859      	ldrb	r1, [r3, #1]
    8320:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8328:	5499      	strb	r1, [r3, r2]
    832a:	4b7d      	ldr	r3, [pc, #500]	; (8520 <send_boot+0xf9c>)
    832c:	781a      	ldrb	r2, [r3, #0]
    832e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8336:	781b      	ldrb	r3, [r3, #0]
    8338:	4413      	add	r3, r2
    833a:	b2da      	uxtb	r2, r3
    833c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8344:	701a      	strb	r2, [r3, #0]
    8346:	f24c 431e 	movw	r3, #50206	; 0xc41e
    834a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    834e:	781a      	ldrb	r2, [r3, #0]
    8350:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8358:	781b      	ldrb	r3, [r3, #0]
    835a:	4413      	add	r3, r2
    835c:	b2da      	uxtb	r2, r3
    835e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8366:	701a      	strb	r2, [r3, #0]
    8368:	f24c 3319 	movw	r3, #49945	; 0xc319
    836c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8370:	781b      	ldrb	r3, [r3, #0]
    8372:	3301      	adds	r3, #1
    8374:	b2da      	uxtb	r2, r3
    8376:	f24c 3319 	movw	r3, #49945	; 0xc319
    837a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    837e:	701a      	strb	r2, [r3, #0]
    8380:	f24c 3319 	movw	r3, #49945	; 0xc319
    8384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8388:	781b      	ldrb	r3, [r3, #0]
    838a:	2bff      	cmp	r3, #255	; 0xff
    838c:	d105      	bne.n	839a <send_boot+0xe16>
    838e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8396:	2200      	movs	r2, #0
    8398:	701a      	strb	r2, [r3, #0]
    839a:	f24c 3319 	movw	r3, #49945	; 0xc319
    839e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a2:	781b      	ldrb	r3, [r3, #0]
    83a4:	461a      	mov	r2, r3
    83a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    83aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ae:	7819      	ldrb	r1, [r3, #0]
    83b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    83b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b8:	5499      	strb	r1, [r3, r2]
    83ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    83be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c2:	781b      	ldrb	r3, [r3, #0]
    83c4:	3301      	adds	r3, #1
    83c6:	b2da      	uxtb	r2, r3
    83c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    83cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d0:	701a      	strb	r2, [r3, #0]
    83d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    83d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83da:	781b      	ldrb	r3, [r3, #0]
    83dc:	2bff      	cmp	r3, #255	; 0xff
    83de:	d105      	bne.n	83ec <send_boot+0xe68>
    83e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    83e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e8:	2200      	movs	r2, #0
    83ea:	701a      	strb	r2, [r3, #0]
    83ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    83f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f4:	781b      	ldrb	r3, [r3, #0]
    83f6:	461a      	mov	r2, r3
    83f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    83fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8400:	7819      	ldrb	r1, [r3, #0]
    8402:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    840a:	5499      	strb	r1, [r3, r2]
    840c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8414:	781b      	ldrb	r3, [r3, #0]
    8416:	3301      	adds	r3, #1
    8418:	b2da      	uxtb	r2, r3
    841a:	f24c 3319 	movw	r3, #49945	; 0xc319
    841e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8422:	701a      	strb	r2, [r3, #0]
    8424:	f24c 3319 	movw	r3, #49945	; 0xc319
    8428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    842c:	781b      	ldrb	r3, [r3, #0]
    842e:	2bff      	cmp	r3, #255	; 0xff
    8430:	d105      	bne.n	843e <send_boot+0xeba>
    8432:	f24c 3319 	movw	r3, #49945	; 0xc319
    8436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    843a:	2200      	movs	r2, #0
    843c:	701a      	strb	r2, [r3, #0]
    843e:	f242 0339 	movw	r3, #8249	; 0x2039
    8442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8446:	781b      	ldrb	r3, [r3, #0]
    8448:	b2db      	uxtb	r3, r3
    844a:	f003 0310 	and.w	r3, r3, #16
    844e:	2b00      	cmp	r3, #0
    8450:	d15a      	bne.n	8508 <send_boot+0xf84>
    8452:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    845a:	781b      	ldrb	r3, [r3, #0]
    845c:	b2db      	uxtb	r3, r3
    845e:	461a      	mov	r2, r3
    8460:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8468:	5c9a      	ldrb	r2, [r3, r2]
    846a:	f24c 431b 	movw	r3, #50203	; 0xc41b
    846e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8472:	701a      	strb	r2, [r3, #0]
    8474:	f24c 431c 	movw	r3, #50204	; 0xc41c
    8478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    847c:	2200      	movs	r2, #0
    847e:	701a      	strb	r2, [r3, #0]
    8480:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8488:	781b      	ldrb	r3, [r3, #0]
    848a:	b2db      	uxtb	r3, r3
    848c:	3301      	adds	r3, #1
    848e:	b2da      	uxtb	r2, r3
    8490:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8498:	701a      	strb	r2, [r3, #0]
    849a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    849e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a2:	781b      	ldrb	r3, [r3, #0]
    84a4:	b2db      	uxtb	r3, r3
    84a6:	2bff      	cmp	r3, #255	; 0xff
    84a8:	d105      	bne.n	84b6 <send_boot+0xf32>
    84aa:	f24c 331a 	movw	r3, #49946	; 0xc31a
    84ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b2:	2200      	movs	r2, #0
    84b4:	701a      	strb	r2, [r3, #0]
    84b6:	f242 0338 	movw	r3, #8248	; 0x2038
    84ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84be:	f242 0238 	movw	r2, #8248	; 0x2038
    84c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    84c6:	7812      	ldrb	r2, [r2, #0]
    84c8:	b2d2      	uxtb	r2, r2
    84ca:	f042 0201 	orr.w	r2, r2, #1
    84ce:	b2d2      	uxtb	r2, r2
    84d0:	701a      	strb	r2, [r3, #0]
    84d2:	f242 0339 	movw	r3, #8249	; 0x2039
    84d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84da:	f242 0239 	movw	r2, #8249	; 0x2039
    84de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    84e2:	7812      	ldrb	r2, [r2, #0]
    84e4:	b2d2      	uxtb	r2, r2
    84e6:	f042 0210 	orr.w	r2, r2, #16
    84ea:	b2d2      	uxtb	r2, r2
    84ec:	701a      	strb	r2, [r3, #0]
    84ee:	e00b      	b.n	8508 <send_boot+0xf84>
    84f0:	f24c 3318 	movw	r3, #49944	; 0xc318
    84f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f8:	781b      	ldrb	r3, [r3, #0]
    84fa:	3301      	adds	r3, #1
    84fc:	b2da      	uxtb	r2, r3
    84fe:	f24c 3318 	movw	r3, #49944	; 0xc318
    8502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8506:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8508:	f240 533d 	movw	r3, #1341	; 0x53d
    850c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8510:	2200      	movs	r2, #0
    8512:	701a      	strb	r2, [r3, #0]
  }
}
    8514:	46bd      	mov	sp, r7
    8516:	f85d 7b04 	ldr.w	r7, [sp], #4
    851a:	4770      	bx	lr
    851c:	20000543 	.word	0x20000543
    8520:	20000545 	.word	0x20000545

00008524 <send_attitude>:
void send_attitude(void){ //499ms
    8524:	b480      	push	{r7}
    8526:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8528:	f24c 3311 	movw	r3, #49937	; 0xc311
    852c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8530:	781b      	ldrb	r3, [r3, #0]
    8532:	3301      	adds	r3, #1
    8534:	b2da      	uxtb	r2, r3
    8536:	f24c 3311 	movw	r3, #49937	; 0xc311
    853a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    853e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8540:	f24c 3311 	movw	r3, #49937	; 0xc311
    8544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8548:	781b      	ldrb	r3, [r3, #0]
    854a:	2bfa      	cmp	r3, #250	; 0xfa
    854c:	d105      	bne.n	855a <send_attitude+0x36>
    854e:	f24c 3311 	movw	r3, #49937	; 0xc311
    8552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8556:	2200      	movs	r2, #0
    8558:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    855a:	f24c 3311 	movw	r3, #49937	; 0xc311
    855e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8562:	781a      	ldrb	r2, [r3, #0]
    8564:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8568:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    856c:	fba3 1302 	umull	r1, r3, r3, r2
    8570:	0899      	lsrs	r1, r3, #2
    8572:	460b      	mov	r3, r1
    8574:	009b      	lsls	r3, r3, #2
    8576:	440b      	add	r3, r1
    8578:	1ad3      	subs	r3, r2, r3
    857a:	b2db      	uxtb	r3, r3
    857c:	2b00      	cmp	r3, #0
    857e:	f040 84c1 	bne.w	8f04 <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    8582:	f24c 3319 	movw	r3, #49945	; 0xc319
    8586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858a:	781a      	ldrb	r2, [r3, #0]
    858c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8594:	781b      	ldrb	r3, [r3, #0]
    8596:	b2db      	uxtb	r3, r3
    8598:	429a      	cmp	r2, r3
    859a:	d313      	bcc.n	85c4 <send_attitude+0xa0>
    859c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    85a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a4:	781b      	ldrb	r3, [r3, #0]
    85a6:	b2db      	uxtb	r3, r3
    85a8:	461a      	mov	r2, r3
    85aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    85ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b2:	781b      	ldrb	r3, [r3, #0]
    85b4:	1ad3      	subs	r3, r2, r3
    85b6:	33ff      	adds	r3, #255	; 0xff
    85b8:	2b10      	cmp	r3, #16
    85ba:	bfd4      	ite	le
    85bc:	2300      	movle	r3, #0
    85be:	2301      	movgt	r3, #1
    85c0:	b2db      	uxtb	r3, r3
    85c2:	e011      	b.n	85e8 <send_attitude+0xc4>
    85c4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    85c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85cc:	781b      	ldrb	r3, [r3, #0]
    85ce:	b2db      	uxtb	r3, r3
    85d0:	461a      	mov	r2, r3
    85d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    85d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85da:	781b      	ldrb	r3, [r3, #0]
    85dc:	1ad3      	subs	r3, r2, r3
    85de:	2b10      	cmp	r3, #16
    85e0:	bfd4      	ite	le
    85e2:	2300      	movle	r3, #0
    85e4:	2301      	movgt	r3, #1
    85e6:	b2db      	uxtb	r3, r3
    85e8:	2b00      	cmp	r3, #0
    85ea:	f000 847f 	beq.w	8eec <send_attitude+0x9c8>
    85ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    85f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f6:	781b      	ldrb	r3, [r3, #0]
    85f8:	461a      	mov	r2, r3
    85fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    85fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8602:	2105      	movs	r1, #5
    8604:	5499      	strb	r1, [r3, r2]
    8606:	f24c 3319 	movw	r3, #49945	; 0xc319
    860a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    860e:	781b      	ldrb	r3, [r3, #0]
    8610:	3301      	adds	r3, #1
    8612:	b2da      	uxtb	r2, r3
    8614:	f24c 3319 	movw	r3, #49945	; 0xc319
    8618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    861c:	701a      	strb	r2, [r3, #0]
    861e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8626:	781b      	ldrb	r3, [r3, #0]
    8628:	2bff      	cmp	r3, #255	; 0xff
    862a:	d105      	bne.n	8638 <send_attitude+0x114>
    862c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8634:	2200      	movs	r2, #0
    8636:	701a      	strb	r2, [r3, #0]
    8638:	f24c 3319 	movw	r3, #49945	; 0xc319
    863c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	461a      	mov	r2, r3
    8644:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864c:	2106      	movs	r1, #6
    864e:	5499      	strb	r1, [r3, r2]
    8650:	f24c 3319 	movw	r3, #49945	; 0xc319
    8654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8658:	781b      	ldrb	r3, [r3, #0]
    865a:	3301      	adds	r3, #1
    865c:	b2da      	uxtb	r2, r3
    865e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8666:	701a      	strb	r2, [r3, #0]
    8668:	f24c 3319 	movw	r3, #49945	; 0xc319
    866c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8670:	781b      	ldrb	r3, [r3, #0]
    8672:	2bff      	cmp	r3, #255	; 0xff
    8674:	d105      	bne.n	8682 <send_attitude+0x15e>
    8676:	f24c 3319 	movw	r3, #49945	; 0xc319
    867a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    867e:	2200      	movs	r2, #0
    8680:	701a      	strb	r2, [r3, #0]
    8682:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868a:	2206      	movs	r2, #6
    868c:	701a      	strb	r2, [r3, #0]
    868e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8696:	2206      	movs	r2, #6
    8698:	701a      	strb	r2, [r3, #0]
    869a:	f24c 3319 	movw	r3, #49945	; 0xc319
    869e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a2:	781b      	ldrb	r3, [r3, #0]
    86a4:	461a      	mov	r2, r3
    86a6:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    86aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ae:	7819      	ldrb	r1, [r3, #0]
    86b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    86b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b8:	5499      	strb	r1, [r3, r2]
    86ba:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    86be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c2:	781a      	ldrb	r2, [r3, #0]
    86c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    86c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86cc:	781b      	ldrb	r3, [r3, #0]
    86ce:	4413      	add	r3, r2
    86d0:	b2da      	uxtb	r2, r3
    86d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    86d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86da:	701a      	strb	r2, [r3, #0]
    86dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    86e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e4:	781a      	ldrb	r2, [r3, #0]
    86e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    86ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ee:	781b      	ldrb	r3, [r3, #0]
    86f0:	4413      	add	r3, r2
    86f2:	b2da      	uxtb	r2, r3
    86f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    86f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fc:	701a      	strb	r2, [r3, #0]
    86fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    8702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8706:	781b      	ldrb	r3, [r3, #0]
    8708:	3301      	adds	r3, #1
    870a:	b2da      	uxtb	r2, r3
    870c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8714:	701a      	strb	r2, [r3, #0]
    8716:	f24c 3319 	movw	r3, #49945	; 0xc319
    871a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	2bff      	cmp	r3, #255	; 0xff
    8722:	d105      	bne.n	8730 <send_attitude+0x20c>
    8724:	f24c 3319 	movw	r3, #49945	; 0xc319
    8728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872c:	2200      	movs	r2, #0
    872e:	701a      	strb	r2, [r3, #0]
    8730:	f24c 3319 	movw	r3, #49945	; 0xc319
    8734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8738:	781b      	ldrb	r3, [r3, #0]
    873a:	461a      	mov	r2, r3
    873c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8744:	7859      	ldrb	r1, [r3, #1]
    8746:	f24c 331c 	movw	r3, #49948	; 0xc31c
    874a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    874e:	5499      	strb	r1, [r3, r2]
    8750:	4bd1      	ldr	r3, [pc, #836]	; (8a98 <send_attitude+0x574>)
    8752:	781a      	ldrb	r2, [r3, #0]
    8754:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    875c:	781b      	ldrb	r3, [r3, #0]
    875e:	4413      	add	r3, r2
    8760:	b2da      	uxtb	r2, r3
    8762:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876a:	701a      	strb	r2, [r3, #0]
    876c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8774:	781a      	ldrb	r2, [r3, #0]
    8776:	f24c 431d 	movw	r3, #50205	; 0xc41d
    877a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    877e:	781b      	ldrb	r3, [r3, #0]
    8780:	4413      	add	r3, r2
    8782:	b2da      	uxtb	r2, r3
    8784:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878c:	701a      	strb	r2, [r3, #0]
    878e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8796:	781b      	ldrb	r3, [r3, #0]
    8798:	3301      	adds	r3, #1
    879a:	b2da      	uxtb	r2, r3
    879c:	f24c 3319 	movw	r3, #49945	; 0xc319
    87a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a4:	701a      	strb	r2, [r3, #0]
    87a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    87aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ae:	781b      	ldrb	r3, [r3, #0]
    87b0:	2bff      	cmp	r3, #255	; 0xff
    87b2:	d105      	bne.n	87c0 <send_attitude+0x29c>
    87b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    87b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87bc:	2200      	movs	r2, #0
    87be:	701a      	strb	r2, [r3, #0]
    87c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    87c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c8:	781b      	ldrb	r3, [r3, #0]
    87ca:	461a      	mov	r2, r3
    87cc:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    87d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d4:	7899      	ldrb	r1, [r3, #2]
    87d6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    87da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87de:	5499      	strb	r1, [r3, r2]
    87e0:	4bae      	ldr	r3, [pc, #696]	; (8a9c <send_attitude+0x578>)
    87e2:	781a      	ldrb	r2, [r3, #0]
    87e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ec:	781b      	ldrb	r3, [r3, #0]
    87ee:	4413      	add	r3, r2
    87f0:	b2da      	uxtb	r2, r3
    87f2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fa:	701a      	strb	r2, [r3, #0]
    87fc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8804:	781a      	ldrb	r2, [r3, #0]
    8806:	f24c 431d 	movw	r3, #50205	; 0xc41d
    880a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880e:	781b      	ldrb	r3, [r3, #0]
    8810:	4413      	add	r3, r2
    8812:	b2da      	uxtb	r2, r3
    8814:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    881c:	701a      	strb	r2, [r3, #0]
    881e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8826:	781b      	ldrb	r3, [r3, #0]
    8828:	3301      	adds	r3, #1
    882a:	b2da      	uxtb	r2, r3
    882c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8834:	701a      	strb	r2, [r3, #0]
    8836:	f24c 3319 	movw	r3, #49945	; 0xc319
    883a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883e:	781b      	ldrb	r3, [r3, #0]
    8840:	2bff      	cmp	r3, #255	; 0xff
    8842:	d105      	bne.n	8850 <send_attitude+0x32c>
    8844:	f24c 3319 	movw	r3, #49945	; 0xc319
    8848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    884c:	2200      	movs	r2, #0
    884e:	701a      	strb	r2, [r3, #0]
    8850:	f24c 3319 	movw	r3, #49945	; 0xc319
    8854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8858:	781b      	ldrb	r3, [r3, #0]
    885a:	461a      	mov	r2, r3
    885c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8864:	78d9      	ldrb	r1, [r3, #3]
    8866:	f24c 331c 	movw	r3, #49948	; 0xc31c
    886a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886e:	5499      	strb	r1, [r3, r2]
    8870:	4b8b      	ldr	r3, [pc, #556]	; (8aa0 <send_attitude+0x57c>)
    8872:	781a      	ldrb	r2, [r3, #0]
    8874:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    887c:	781b      	ldrb	r3, [r3, #0]
    887e:	4413      	add	r3, r2
    8880:	b2da      	uxtb	r2, r3
    8882:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888a:	701a      	strb	r2, [r3, #0]
    888c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8894:	781a      	ldrb	r2, [r3, #0]
    8896:	f24c 431d 	movw	r3, #50205	; 0xc41d
    889a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889e:	781b      	ldrb	r3, [r3, #0]
    88a0:	4413      	add	r3, r2
    88a2:	b2da      	uxtb	r2, r3
    88a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    88a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ac:	701a      	strb	r2, [r3, #0]
    88ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    88b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b6:	781b      	ldrb	r3, [r3, #0]
    88b8:	3301      	adds	r3, #1
    88ba:	b2da      	uxtb	r2, r3
    88bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    88c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c4:	701a      	strb	r2, [r3, #0]
    88c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    88ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ce:	781b      	ldrb	r3, [r3, #0]
    88d0:	2bff      	cmp	r3, #255	; 0xff
    88d2:	d105      	bne.n	88e0 <send_attitude+0x3bc>
    88d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    88d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88dc:	2200      	movs	r2, #0
    88de:	701a      	strb	r2, [r3, #0]
    88e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    88e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e8:	781b      	ldrb	r3, [r3, #0]
    88ea:	461a      	mov	r2, r3
    88ec:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    88f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f4:	7819      	ldrb	r1, [r3, #0]
    88f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    88fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fe:	5499      	strb	r1, [r3, r2]
    8900:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8908:	781a      	ldrb	r2, [r3, #0]
    890a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    890e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8912:	781b      	ldrb	r3, [r3, #0]
    8914:	4413      	add	r3, r2
    8916:	b2da      	uxtb	r2, r3
    8918:	f24c 431d 	movw	r3, #50205	; 0xc41d
    891c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8920:	701a      	strb	r2, [r3, #0]
    8922:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    892a:	781a      	ldrb	r2, [r3, #0]
    892c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8934:	781b      	ldrb	r3, [r3, #0]
    8936:	4413      	add	r3, r2
    8938:	b2da      	uxtb	r2, r3
    893a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    893e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8942:	701a      	strb	r2, [r3, #0]
    8944:	f24c 3319 	movw	r3, #49945	; 0xc319
    8948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    894c:	781b      	ldrb	r3, [r3, #0]
    894e:	3301      	adds	r3, #1
    8950:	b2da      	uxtb	r2, r3
    8952:	f24c 3319 	movw	r3, #49945	; 0xc319
    8956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    895a:	701a      	strb	r2, [r3, #0]
    895c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8964:	781b      	ldrb	r3, [r3, #0]
    8966:	2bff      	cmp	r3, #255	; 0xff
    8968:	d105      	bne.n	8976 <send_attitude+0x452>
    896a:	f24c 3319 	movw	r3, #49945	; 0xc319
    896e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8972:	2200      	movs	r2, #0
    8974:	701a      	strb	r2, [r3, #0]
    8976:	f24c 3319 	movw	r3, #49945	; 0xc319
    897a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    897e:	781b      	ldrb	r3, [r3, #0]
    8980:	461a      	mov	r2, r3
    8982:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898a:	7859      	ldrb	r1, [r3, #1]
    898c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8994:	5499      	strb	r1, [r3, r2]
    8996:	4b43      	ldr	r3, [pc, #268]	; (8aa4 <send_attitude+0x580>)
    8998:	781a      	ldrb	r2, [r3, #0]
    899a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    899e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a2:	781b      	ldrb	r3, [r3, #0]
    89a4:	4413      	add	r3, r2
    89a6:	b2da      	uxtb	r2, r3
    89a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    89ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b0:	701a      	strb	r2, [r3, #0]
    89b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    89b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ba:	781a      	ldrb	r2, [r3, #0]
    89bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    89c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c4:	781b      	ldrb	r3, [r3, #0]
    89c6:	4413      	add	r3, r2
    89c8:	b2da      	uxtb	r2, r3
    89ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    89ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d2:	701a      	strb	r2, [r3, #0]
    89d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    89d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89dc:	781b      	ldrb	r3, [r3, #0]
    89de:	3301      	adds	r3, #1
    89e0:	b2da      	uxtb	r2, r3
    89e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    89e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ea:	701a      	strb	r2, [r3, #0]
    89ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    89f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f4:	781b      	ldrb	r3, [r3, #0]
    89f6:	2bff      	cmp	r3, #255	; 0xff
    89f8:	d105      	bne.n	8a06 <send_attitude+0x4e2>
    89fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    89fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a02:	2200      	movs	r2, #0
    8a04:	701a      	strb	r2, [r3, #0]
    8a06:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0e:	781b      	ldrb	r3, [r3, #0]
    8a10:	461a      	mov	r2, r3
    8a12:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1a:	7899      	ldrb	r1, [r3, #2]
    8a1c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a24:	5499      	strb	r1, [r3, r2]
    8a26:	4b20      	ldr	r3, [pc, #128]	; (8aa8 <send_attitude+0x584>)
    8a28:	781a      	ldrb	r2, [r3, #0]
    8a2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a32:	781b      	ldrb	r3, [r3, #0]
    8a34:	4413      	add	r3, r2
    8a36:	b2da      	uxtb	r2, r3
    8a38:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a40:	701a      	strb	r2, [r3, #0]
    8a42:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4a:	781a      	ldrb	r2, [r3, #0]
    8a4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a54:	781b      	ldrb	r3, [r3, #0]
    8a56:	4413      	add	r3, r2
    8a58:	b2da      	uxtb	r2, r3
    8a5a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a62:	701a      	strb	r2, [r3, #0]
    8a64:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a6c:	781b      	ldrb	r3, [r3, #0]
    8a6e:	3301      	adds	r3, #1
    8a70:	b2da      	uxtb	r2, r3
    8a72:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a7a:	701a      	strb	r2, [r3, #0]
    8a7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a84:	781b      	ldrb	r3, [r3, #0]
    8a86:	2bff      	cmp	r3, #255	; 0xff
    8a88:	d110      	bne.n	8aac <send_attitude+0x588>
    8a8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a92:	2200      	movs	r2, #0
    8a94:	701a      	strb	r2, [r3, #0]
    8a96:	e009      	b.n	8aac <send_attitude+0x588>
    8a98:	2004c8d9 	.word	0x2004c8d9
    8a9c:	2004c8da 	.word	0x2004c8da
    8aa0:	2004c8db 	.word	0x2004c8db
    8aa4:	2004c8dd 	.word	0x2004c8dd
    8aa8:	2004c8de 	.word	0x2004c8de
    8aac:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab4:	781b      	ldrb	r3, [r3, #0]
    8ab6:	461a      	mov	r2, r3
    8ab8:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac0:	78d9      	ldrb	r1, [r3, #3]
    8ac2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aca:	5499      	strb	r1, [r3, r2]
    8acc:	4bc2      	ldr	r3, [pc, #776]	; (8dd8 <send_attitude+0x8b4>)
    8ace:	781a      	ldrb	r2, [r3, #0]
    8ad0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad8:	781b      	ldrb	r3, [r3, #0]
    8ada:	4413      	add	r3, r2
    8adc:	b2da      	uxtb	r2, r3
    8ade:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae6:	701a      	strb	r2, [r3, #0]
    8ae8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af0:	781a      	ldrb	r2, [r3, #0]
    8af2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afa:	781b      	ldrb	r3, [r3, #0]
    8afc:	4413      	add	r3, r2
    8afe:	b2da      	uxtb	r2, r3
    8b00:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b08:	701a      	strb	r2, [r3, #0]
    8b0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b12:	781b      	ldrb	r3, [r3, #0]
    8b14:	3301      	adds	r3, #1
    8b16:	b2da      	uxtb	r2, r3
    8b18:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b20:	701a      	strb	r2, [r3, #0]
    8b22:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2a:	781b      	ldrb	r3, [r3, #0]
    8b2c:	2bff      	cmp	r3, #255	; 0xff
    8b2e:	d105      	bne.n	8b3c <send_attitude+0x618>
    8b30:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b38:	2200      	movs	r2, #0
    8b3a:	701a      	strb	r2, [r3, #0]
    8b3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b44:	781b      	ldrb	r3, [r3, #0]
    8b46:	461a      	mov	r2, r3
    8b48:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b50:	7819      	ldrb	r1, [r3, #0]
    8b52:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b5a:	5499      	strb	r1, [r3, r2]
    8b5c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b64:	781a      	ldrb	r2, [r3, #0]
    8b66:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6e:	781b      	ldrb	r3, [r3, #0]
    8b70:	4413      	add	r3, r2
    8b72:	b2da      	uxtb	r2, r3
    8b74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b7c:	701a      	strb	r2, [r3, #0]
    8b7e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b86:	781a      	ldrb	r2, [r3, #0]
    8b88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b90:	781b      	ldrb	r3, [r3, #0]
    8b92:	4413      	add	r3, r2
    8b94:	b2da      	uxtb	r2, r3
    8b96:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9e:	701a      	strb	r2, [r3, #0]
    8ba0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba8:	781b      	ldrb	r3, [r3, #0]
    8baa:	3301      	adds	r3, #1
    8bac:	b2da      	uxtb	r2, r3
    8bae:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb6:	701a      	strb	r2, [r3, #0]
    8bb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc0:	781b      	ldrb	r3, [r3, #0]
    8bc2:	2bff      	cmp	r3, #255	; 0xff
    8bc4:	d105      	bne.n	8bd2 <send_attitude+0x6ae>
    8bc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bce:	2200      	movs	r2, #0
    8bd0:	701a      	strb	r2, [r3, #0]
    8bd2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bda:	781b      	ldrb	r3, [r3, #0]
    8bdc:	461a      	mov	r2, r3
    8bde:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be6:	7859      	ldrb	r1, [r3, #1]
    8be8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf0:	5499      	strb	r1, [r3, r2]
    8bf2:	4b7a      	ldr	r3, [pc, #488]	; (8ddc <send_attitude+0x8b8>)
    8bf4:	781a      	ldrb	r2, [r3, #0]
    8bf6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfe:	781b      	ldrb	r3, [r3, #0]
    8c00:	4413      	add	r3, r2
    8c02:	b2da      	uxtb	r2, r3
    8c04:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c0c:	701a      	strb	r2, [r3, #0]
    8c0e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c16:	781a      	ldrb	r2, [r3, #0]
    8c18:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c20:	781b      	ldrb	r3, [r3, #0]
    8c22:	4413      	add	r3, r2
    8c24:	b2da      	uxtb	r2, r3
    8c26:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2e:	701a      	strb	r2, [r3, #0]
    8c30:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c38:	781b      	ldrb	r3, [r3, #0]
    8c3a:	3301      	adds	r3, #1
    8c3c:	b2da      	uxtb	r2, r3
    8c3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c46:	701a      	strb	r2, [r3, #0]
    8c48:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c50:	781b      	ldrb	r3, [r3, #0]
    8c52:	2bff      	cmp	r3, #255	; 0xff
    8c54:	d105      	bne.n	8c62 <send_attitude+0x73e>
    8c56:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5e:	2200      	movs	r2, #0
    8c60:	701a      	strb	r2, [r3, #0]
    8c62:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c6a:	781b      	ldrb	r3, [r3, #0]
    8c6c:	461a      	mov	r2, r3
    8c6e:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c76:	7899      	ldrb	r1, [r3, #2]
    8c78:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c80:	5499      	strb	r1, [r3, r2]
    8c82:	4b57      	ldr	r3, [pc, #348]	; (8de0 <send_attitude+0x8bc>)
    8c84:	781a      	ldrb	r2, [r3, #0]
    8c86:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c8e:	781b      	ldrb	r3, [r3, #0]
    8c90:	4413      	add	r3, r2
    8c92:	b2da      	uxtb	r2, r3
    8c94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c9c:	701a      	strb	r2, [r3, #0]
    8c9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca6:	781a      	ldrb	r2, [r3, #0]
    8ca8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb0:	781b      	ldrb	r3, [r3, #0]
    8cb2:	4413      	add	r3, r2
    8cb4:	b2da      	uxtb	r2, r3
    8cb6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cbe:	701a      	strb	r2, [r3, #0]
    8cc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc8:	781b      	ldrb	r3, [r3, #0]
    8cca:	3301      	adds	r3, #1
    8ccc:	b2da      	uxtb	r2, r3
    8cce:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd6:	701a      	strb	r2, [r3, #0]
    8cd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce0:	781b      	ldrb	r3, [r3, #0]
    8ce2:	2bff      	cmp	r3, #255	; 0xff
    8ce4:	d105      	bne.n	8cf2 <send_attitude+0x7ce>
    8ce6:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cee:	2200      	movs	r2, #0
    8cf0:	701a      	strb	r2, [r3, #0]
    8cf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cfa:	781b      	ldrb	r3, [r3, #0]
    8cfc:	461a      	mov	r2, r3
    8cfe:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d06:	78d9      	ldrb	r1, [r3, #3]
    8d08:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d10:	5499      	strb	r1, [r3, r2]
    8d12:	4b34      	ldr	r3, [pc, #208]	; (8de4 <send_attitude+0x8c0>)
    8d14:	781a      	ldrb	r2, [r3, #0]
    8d16:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d1e:	781b      	ldrb	r3, [r3, #0]
    8d20:	4413      	add	r3, r2
    8d22:	b2da      	uxtb	r2, r3
    8d24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d2c:	701a      	strb	r2, [r3, #0]
    8d2e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d36:	781a      	ldrb	r2, [r3, #0]
    8d38:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d40:	781b      	ldrb	r3, [r3, #0]
    8d42:	4413      	add	r3, r2
    8d44:	b2da      	uxtb	r2, r3
    8d46:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4e:	701a      	strb	r2, [r3, #0]
    8d50:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d58:	781b      	ldrb	r3, [r3, #0]
    8d5a:	3301      	adds	r3, #1
    8d5c:	b2da      	uxtb	r2, r3
    8d5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d66:	701a      	strb	r2, [r3, #0]
    8d68:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d70:	781b      	ldrb	r3, [r3, #0]
    8d72:	2bff      	cmp	r3, #255	; 0xff
    8d74:	d105      	bne.n	8d82 <send_attitude+0x85e>
    8d76:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d7e:	2200      	movs	r2, #0
    8d80:	701a      	strb	r2, [r3, #0]
    8d82:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	461a      	mov	r2, r3
    8d8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d96:	7819      	ldrb	r1, [r3, #0]
    8d98:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da0:	5499      	strb	r1, [r3, r2]
    8da2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8daa:	781b      	ldrb	r3, [r3, #0]
    8dac:	3301      	adds	r3, #1
    8dae:	b2da      	uxtb	r2, r3
    8db0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db8:	701a      	strb	r2, [r3, #0]
    8dba:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc2:	781b      	ldrb	r3, [r3, #0]
    8dc4:	2bff      	cmp	r3, #255	; 0xff
    8dc6:	d10f      	bne.n	8de8 <send_attitude+0x8c4>
    8dc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd0:	2200      	movs	r2, #0
    8dd2:	701a      	strb	r2, [r3, #0]
    8dd4:	e008      	b.n	8de8 <send_attitude+0x8c4>
    8dd6:	bf00      	nop
    8dd8:	2004c8df 	.word	0x2004c8df
    8ddc:	2004c8e1 	.word	0x2004c8e1
    8de0:	2004c8e2 	.word	0x2004c8e2
    8de4:	2004c8e3 	.word	0x2004c8e3
    8de8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df0:	781b      	ldrb	r3, [r3, #0]
    8df2:	461a      	mov	r2, r3
    8df4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dfc:	7819      	ldrb	r1, [r3, #0]
    8dfe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e06:	5499      	strb	r1, [r3, r2]
    8e08:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e10:	781b      	ldrb	r3, [r3, #0]
    8e12:	3301      	adds	r3, #1
    8e14:	b2da      	uxtb	r2, r3
    8e16:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e1e:	701a      	strb	r2, [r3, #0]
    8e20:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e28:	781b      	ldrb	r3, [r3, #0]
    8e2a:	2bff      	cmp	r3, #255	; 0xff
    8e2c:	d105      	bne.n	8e3a <send_attitude+0x916>
    8e2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e36:	2200      	movs	r2, #0
    8e38:	701a      	strb	r2, [r3, #0]
    8e3a:	f242 0339 	movw	r3, #8249	; 0x2039
    8e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e42:	781b      	ldrb	r3, [r3, #0]
    8e44:	b2db      	uxtb	r3, r3
    8e46:	f003 0310 	and.w	r3, r3, #16
    8e4a:	2b00      	cmp	r3, #0
    8e4c:	d15a      	bne.n	8f04 <send_attitude+0x9e0>
    8e4e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e56:	781b      	ldrb	r3, [r3, #0]
    8e58:	b2db      	uxtb	r3, r3
    8e5a:	461a      	mov	r2, r3
    8e5c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e64:	5c9a      	ldrb	r2, [r3, r2]
    8e66:	f24c 431b 	movw	r3, #50203	; 0xc41b
    8e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e6e:	701a      	strb	r2, [r3, #0]
    8e70:	f24c 431c 	movw	r3, #50204	; 0xc41c
    8e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e78:	2200      	movs	r2, #0
    8e7a:	701a      	strb	r2, [r3, #0]
    8e7c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	b2db      	uxtb	r3, r3
    8e88:	3301      	adds	r3, #1
    8e8a:	b2da      	uxtb	r2, r3
    8e8c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e94:	701a      	strb	r2, [r3, #0]
    8e96:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e9e:	781b      	ldrb	r3, [r3, #0]
    8ea0:	b2db      	uxtb	r3, r3
    8ea2:	2bff      	cmp	r3, #255	; 0xff
    8ea4:	d105      	bne.n	8eb2 <send_attitude+0x98e>
    8ea6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eae:	2200      	movs	r2, #0
    8eb0:	701a      	strb	r2, [r3, #0]
    8eb2:	f242 0338 	movw	r3, #8248	; 0x2038
    8eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eba:	f242 0238 	movw	r2, #8248	; 0x2038
    8ebe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8ec2:	7812      	ldrb	r2, [r2, #0]
    8ec4:	b2d2      	uxtb	r2, r2
    8ec6:	f042 0201 	orr.w	r2, r2, #1
    8eca:	b2d2      	uxtb	r2, r2
    8ecc:	701a      	strb	r2, [r3, #0]
    8ece:	f242 0339 	movw	r3, #8249	; 0x2039
    8ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ed6:	f242 0239 	movw	r2, #8249	; 0x2039
    8eda:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8ede:	7812      	ldrb	r2, [r2, #0]
    8ee0:	b2d2      	uxtb	r2, r2
    8ee2:	f042 0210 	orr.w	r2, r2, #16
    8ee6:	b2d2      	uxtb	r2, r2
    8ee8:	701a      	strb	r2, [r3, #0]
    8eea:	e00b      	b.n	8f04 <send_attitude+0x9e0>
    8eec:	f24c 3318 	movw	r3, #49944	; 0xc318
    8ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef4:	781b      	ldrb	r3, [r3, #0]
    8ef6:	3301      	adds	r3, #1
    8ef8:	b2da      	uxtb	r2, r3
    8efa:	f24c 3318 	movw	r3, #49944	; 0xc318
    8efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f02:	701a      	strb	r2, [r3, #0]
  }
}
    8f04:	46bd      	mov	sp, r7
    8f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f0a:	4770      	bx	lr

00008f0c <send_adc>:
  
void send_adc(void){  //500ms
    8f0c:	b480      	push	{r7}
    8f0e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8f10:	f24c 3311 	movw	r3, #49937	; 0xc311
    8f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f18:	781a      	ldrb	r2, [r3, #0]
    8f1a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8f1e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8f22:	fba3 1302 	umull	r1, r3, r3, r2
    8f26:	0899      	lsrs	r1, r3, #2
    8f28:	460b      	mov	r3, r1
    8f2a:	009b      	lsls	r3, r3, #2
    8f2c:	440b      	add	r3, r1
    8f2e:	1ad3      	subs	r3, r2, r3
    8f30:	b2db      	uxtb	r3, r3
    8f32:	2b01      	cmp	r3, #1
    8f34:	f040 8269 	bne.w	940a <send_adc+0x4fe>
    8f38:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f40:	781a      	ldrb	r2, [r3, #0]
    8f42:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f4a:	781b      	ldrb	r3, [r3, #0]
    8f4c:	b2db      	uxtb	r3, r3
    8f4e:	429a      	cmp	r2, r3
    8f50:	d313      	bcc.n	8f7a <send_adc+0x6e>
    8f52:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f5a:	781b      	ldrb	r3, [r3, #0]
    8f5c:	b2db      	uxtb	r3, r3
    8f5e:	461a      	mov	r2, r3
    8f60:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f68:	781b      	ldrb	r3, [r3, #0]
    8f6a:	1ad3      	subs	r3, r2, r3
    8f6c:	33ff      	adds	r3, #255	; 0xff
    8f6e:	2b08      	cmp	r3, #8
    8f70:	bfd4      	ite	le
    8f72:	2300      	movle	r3, #0
    8f74:	2301      	movgt	r3, #1
    8f76:	b2db      	uxtb	r3, r3
    8f78:	e011      	b.n	8f9e <send_adc+0x92>
    8f7a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f82:	781b      	ldrb	r3, [r3, #0]
    8f84:	b2db      	uxtb	r3, r3
    8f86:	461a      	mov	r2, r3
    8f88:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f90:	781b      	ldrb	r3, [r3, #0]
    8f92:	1ad3      	subs	r3, r2, r3
    8f94:	2b08      	cmp	r3, #8
    8f96:	bfd4      	ite	le
    8f98:	2300      	movle	r3, #0
    8f9a:	2301      	movgt	r3, #1
    8f9c:	b2db      	uxtb	r3, r3
    8f9e:	2b00      	cmp	r3, #0
    8fa0:	f000 8227 	beq.w	93f2 <send_adc+0x4e6>
    8fa4:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fac:	781b      	ldrb	r3, [r3, #0]
    8fae:	461a      	mov	r2, r3
    8fb0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb8:	2105      	movs	r1, #5
    8fba:	5499      	strb	r1, [r3, r2]
    8fbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc4:	781b      	ldrb	r3, [r3, #0]
    8fc6:	3301      	adds	r3, #1
    8fc8:	b2da      	uxtb	r2, r3
    8fca:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd2:	701a      	strb	r2, [r3, #0]
    8fd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fdc:	781b      	ldrb	r3, [r3, #0]
    8fde:	2bff      	cmp	r3, #255	; 0xff
    8fe0:	d105      	bne.n	8fee <send_adc+0xe2>
    8fe2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fea:	2200      	movs	r2, #0
    8fec:	701a      	strb	r2, [r3, #0]
    8fee:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff6:	781b      	ldrb	r3, [r3, #0]
    8ff8:	461a      	mov	r2, r3
    8ffa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9002:	2107      	movs	r1, #7
    9004:	5499      	strb	r1, [r3, r2]
    9006:	f24c 3319 	movw	r3, #49945	; 0xc319
    900a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    900e:	781b      	ldrb	r3, [r3, #0]
    9010:	3301      	adds	r3, #1
    9012:	b2da      	uxtb	r2, r3
    9014:	f24c 3319 	movw	r3, #49945	; 0xc319
    9018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    901c:	701a      	strb	r2, [r3, #0]
    901e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9026:	781b      	ldrb	r3, [r3, #0]
    9028:	2bff      	cmp	r3, #255	; 0xff
    902a:	d105      	bne.n	9038 <send_adc+0x12c>
    902c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9034:	2200      	movs	r2, #0
    9036:	701a      	strb	r2, [r3, #0]
    9038:	f24c 431d 	movw	r3, #50205	; 0xc41d
    903c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9040:	2207      	movs	r2, #7
    9042:	701a      	strb	r2, [r3, #0]
    9044:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    904c:	2207      	movs	r2, #7
    904e:	701a      	strb	r2, [r3, #0]
    9050:	f24c 3319 	movw	r3, #49945	; 0xc319
    9054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9058:	781b      	ldrb	r3, [r3, #0]
    905a:	461a      	mov	r2, r3
    905c:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    9060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9064:	7819      	ldrb	r1, [r3, #0]
    9066:	f24c 331c 	movw	r3, #49948	; 0xc31c
    906a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906e:	5499      	strb	r1, [r3, r2]
    9070:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    9074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9078:	781a      	ldrb	r2, [r3, #0]
    907a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    907e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9082:	781b      	ldrb	r3, [r3, #0]
    9084:	4413      	add	r3, r2
    9086:	b2da      	uxtb	r2, r3
    9088:	f24c 431d 	movw	r3, #50205	; 0xc41d
    908c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9090:	701a      	strb	r2, [r3, #0]
    9092:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909a:	781a      	ldrb	r2, [r3, #0]
    909c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    90a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a4:	781b      	ldrb	r3, [r3, #0]
    90a6:	4413      	add	r3, r2
    90a8:	b2da      	uxtb	r2, r3
    90aa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    90ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b2:	701a      	strb	r2, [r3, #0]
    90b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    90b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90bc:	781b      	ldrb	r3, [r3, #0]
    90be:	3301      	adds	r3, #1
    90c0:	b2da      	uxtb	r2, r3
    90c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    90c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ca:	701a      	strb	r2, [r3, #0]
    90cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    90d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d4:	781b      	ldrb	r3, [r3, #0]
    90d6:	2bff      	cmp	r3, #255	; 0xff
    90d8:	d105      	bne.n	90e6 <send_adc+0x1da>
    90da:	f24c 3319 	movw	r3, #49945	; 0xc319
    90de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e2:	2200      	movs	r2, #0
    90e4:	701a      	strb	r2, [r3, #0]
    90e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    90ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ee:	781b      	ldrb	r3, [r3, #0]
    90f0:	461a      	mov	r2, r3
    90f2:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    90f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fa:	7859      	ldrb	r1, [r3, #1]
    90fc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9104:	5499      	strb	r1, [r3, r2]
    9106:	4bc3      	ldr	r3, [pc, #780]	; (9414 <send_adc+0x508>)
    9108:	781a      	ldrb	r2, [r3, #0]
    910a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    910e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9112:	781b      	ldrb	r3, [r3, #0]
    9114:	4413      	add	r3, r2
    9116:	b2da      	uxtb	r2, r3
    9118:	f24c 431d 	movw	r3, #50205	; 0xc41d
    911c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9120:	701a      	strb	r2, [r3, #0]
    9122:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    912a:	781a      	ldrb	r2, [r3, #0]
    912c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9134:	781b      	ldrb	r3, [r3, #0]
    9136:	4413      	add	r3, r2
    9138:	b2da      	uxtb	r2, r3
    913a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    913e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9142:	701a      	strb	r2, [r3, #0]
    9144:	f24c 3319 	movw	r3, #49945	; 0xc319
    9148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    914c:	781b      	ldrb	r3, [r3, #0]
    914e:	3301      	adds	r3, #1
    9150:	b2da      	uxtb	r2, r3
    9152:	f24c 3319 	movw	r3, #49945	; 0xc319
    9156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    915a:	701a      	strb	r2, [r3, #0]
    915c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9164:	781b      	ldrb	r3, [r3, #0]
    9166:	2bff      	cmp	r3, #255	; 0xff
    9168:	d105      	bne.n	9176 <send_adc+0x26a>
    916a:	f24c 3319 	movw	r3, #49945	; 0xc319
    916e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9172:	2200      	movs	r2, #0
    9174:	701a      	strb	r2, [r3, #0]
    9176:	f24c 3319 	movw	r3, #49945	; 0xc319
    917a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    917e:	781b      	ldrb	r3, [r3, #0]
    9180:	461a      	mov	r2, r3
    9182:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    9186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    918a:	7819      	ldrb	r1, [r3, #0]
    918c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9194:	5499      	strb	r1, [r3, r2]
    9196:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    919a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919e:	781a      	ldrb	r2, [r3, #0]
    91a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a8:	781b      	ldrb	r3, [r3, #0]
    91aa:	4413      	add	r3, r2
    91ac:	b2da      	uxtb	r2, r3
    91ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b6:	701a      	strb	r2, [r3, #0]
    91b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    91bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c0:	781a      	ldrb	r2, [r3, #0]
    91c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ca:	781b      	ldrb	r3, [r3, #0]
    91cc:	4413      	add	r3, r2
    91ce:	b2da      	uxtb	r2, r3
    91d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    91d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d8:	701a      	strb	r2, [r3, #0]
    91da:	f24c 3319 	movw	r3, #49945	; 0xc319
    91de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e2:	781b      	ldrb	r3, [r3, #0]
    91e4:	3301      	adds	r3, #1
    91e6:	b2da      	uxtb	r2, r3
    91e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    91ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f0:	701a      	strb	r2, [r3, #0]
    91f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    91f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91fa:	781b      	ldrb	r3, [r3, #0]
    91fc:	2bff      	cmp	r3, #255	; 0xff
    91fe:	d105      	bne.n	920c <send_adc+0x300>
    9200:	f24c 3319 	movw	r3, #49945	; 0xc319
    9204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9208:	2200      	movs	r2, #0
    920a:	701a      	strb	r2, [r3, #0]
    920c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9214:	781b      	ldrb	r3, [r3, #0]
    9216:	461a      	mov	r2, r3
    9218:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    921c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9220:	7859      	ldrb	r1, [r3, #1]
    9222:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    922a:	5499      	strb	r1, [r3, r2]
    922c:	4b7a      	ldr	r3, [pc, #488]	; (9418 <send_adc+0x50c>)
    922e:	781a      	ldrb	r2, [r3, #0]
    9230:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9238:	781b      	ldrb	r3, [r3, #0]
    923a:	4413      	add	r3, r2
    923c:	b2da      	uxtb	r2, r3
    923e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9246:	701a      	strb	r2, [r3, #0]
    9248:	f24c 431e 	movw	r3, #50206	; 0xc41e
    924c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9250:	781a      	ldrb	r2, [r3, #0]
    9252:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    925a:	781b      	ldrb	r3, [r3, #0]
    925c:	4413      	add	r3, r2
    925e:	b2da      	uxtb	r2, r3
    9260:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9268:	701a      	strb	r2, [r3, #0]
    926a:	f24c 3319 	movw	r3, #49945	; 0xc319
    926e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9272:	781b      	ldrb	r3, [r3, #0]
    9274:	3301      	adds	r3, #1
    9276:	b2da      	uxtb	r2, r3
    9278:	f24c 3319 	movw	r3, #49945	; 0xc319
    927c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9280:	701a      	strb	r2, [r3, #0]
    9282:	f24c 3319 	movw	r3, #49945	; 0xc319
    9286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    928a:	781b      	ldrb	r3, [r3, #0]
    928c:	2bff      	cmp	r3, #255	; 0xff
    928e:	d105      	bne.n	929c <send_adc+0x390>
    9290:	f24c 3319 	movw	r3, #49945	; 0xc319
    9294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9298:	2200      	movs	r2, #0
    929a:	701a      	strb	r2, [r3, #0]
    929c:	f24c 3319 	movw	r3, #49945	; 0xc319
    92a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a4:	781b      	ldrb	r3, [r3, #0]
    92a6:	461a      	mov	r2, r3
    92a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    92ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b0:	7819      	ldrb	r1, [r3, #0]
    92b2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    92b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ba:	5499      	strb	r1, [r3, r2]
    92bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    92c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c4:	781b      	ldrb	r3, [r3, #0]
    92c6:	3301      	adds	r3, #1
    92c8:	b2da      	uxtb	r2, r3
    92ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    92ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d2:	701a      	strb	r2, [r3, #0]
    92d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    92d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92dc:	781b      	ldrb	r3, [r3, #0]
    92de:	2bff      	cmp	r3, #255	; 0xff
    92e0:	d105      	bne.n	92ee <send_adc+0x3e2>
    92e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    92e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ea:	2200      	movs	r2, #0
    92ec:	701a      	strb	r2, [r3, #0]
    92ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    92f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f6:	781b      	ldrb	r3, [r3, #0]
    92f8:	461a      	mov	r2, r3
    92fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    92fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9302:	7819      	ldrb	r1, [r3, #0]
    9304:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    930c:	5499      	strb	r1, [r3, r2]
    930e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9316:	781b      	ldrb	r3, [r3, #0]
    9318:	3301      	adds	r3, #1
    931a:	b2da      	uxtb	r2, r3
    931c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9324:	701a      	strb	r2, [r3, #0]
    9326:	f24c 3319 	movw	r3, #49945	; 0xc319
    932a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    932e:	781b      	ldrb	r3, [r3, #0]
    9330:	2bff      	cmp	r3, #255	; 0xff
    9332:	d105      	bne.n	9340 <send_adc+0x434>
    9334:	f24c 3319 	movw	r3, #49945	; 0xc319
    9338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933c:	2200      	movs	r2, #0
    933e:	701a      	strb	r2, [r3, #0]
    9340:	f242 0339 	movw	r3, #8249	; 0x2039
    9344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9348:	781b      	ldrb	r3, [r3, #0]
    934a:	b2db      	uxtb	r3, r3
    934c:	f003 0310 	and.w	r3, r3, #16
    9350:	2b00      	cmp	r3, #0
    9352:	d15a      	bne.n	940a <send_adc+0x4fe>
    9354:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    935c:	781b      	ldrb	r3, [r3, #0]
    935e:	b2db      	uxtb	r3, r3
    9360:	461a      	mov	r2, r3
    9362:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    936a:	5c9a      	ldrb	r2, [r3, r2]
    936c:	f24c 431b 	movw	r3, #50203	; 0xc41b
    9370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9374:	701a      	strb	r2, [r3, #0]
    9376:	f24c 431c 	movw	r3, #50204	; 0xc41c
    937a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    937e:	2200      	movs	r2, #0
    9380:	701a      	strb	r2, [r3, #0]
    9382:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    938a:	781b      	ldrb	r3, [r3, #0]
    938c:	b2db      	uxtb	r3, r3
    938e:	3301      	adds	r3, #1
    9390:	b2da      	uxtb	r2, r3
    9392:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    939a:	701a      	strb	r2, [r3, #0]
    939c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    93a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a4:	781b      	ldrb	r3, [r3, #0]
    93a6:	b2db      	uxtb	r3, r3
    93a8:	2bff      	cmp	r3, #255	; 0xff
    93aa:	d105      	bne.n	93b8 <send_adc+0x4ac>
    93ac:	f24c 331a 	movw	r3, #49946	; 0xc31a
    93b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b4:	2200      	movs	r2, #0
    93b6:	701a      	strb	r2, [r3, #0]
    93b8:	f242 0338 	movw	r3, #8248	; 0x2038
    93bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93c0:	f242 0238 	movw	r2, #8248	; 0x2038
    93c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93c8:	7812      	ldrb	r2, [r2, #0]
    93ca:	b2d2      	uxtb	r2, r2
    93cc:	f042 0201 	orr.w	r2, r2, #1
    93d0:	b2d2      	uxtb	r2, r2
    93d2:	701a      	strb	r2, [r3, #0]
    93d4:	f242 0339 	movw	r3, #8249	; 0x2039
    93d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93dc:	f242 0239 	movw	r2, #8249	; 0x2039
    93e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93e4:	7812      	ldrb	r2, [r2, #0]
    93e6:	b2d2      	uxtb	r2, r2
    93e8:	f042 0210 	orr.w	r2, r2, #16
    93ec:	b2d2      	uxtb	r2, r2
    93ee:	701a      	strb	r2, [r3, #0]
    93f0:	e00b      	b.n	940a <send_adc+0x4fe>
    93f2:	f24c 3318 	movw	r3, #49944	; 0xc318
    93f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93fa:	781b      	ldrb	r3, [r3, #0]
    93fc:	3301      	adds	r3, #1
    93fe:	b2da      	uxtb	r2, r3
    9400:	f24c 3318 	movw	r3, #49944	; 0xc318
    9404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9408:	701a      	strb	r2, [r3, #0]
}
    940a:	46bd      	mov	sp, r7
    940c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9410:	4770      	bx	lr
    9412:	bf00      	nop
    9414:	2004c5b9 	.word	0x2004c5b9
    9418:	2004c5bb 	.word	0x2004c5bb

0000941c <send_settings>:
void send_settings(void){ //500ms
    941c:	b480      	push	{r7}
    941e:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9420:	f24c 3311 	movw	r3, #49937	; 0xc311
    9424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9428:	781a      	ldrb	r2, [r3, #0]
    942a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    942e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9432:	fba3 1302 	umull	r1, r3, r3, r2
    9436:	0899      	lsrs	r1, r3, #2
    9438:	460b      	mov	r3, r1
    943a:	009b      	lsls	r3, r3, #2
    943c:	440b      	add	r3, r1
    943e:	1ad3      	subs	r3, r2, r3
    9440:	b2db      	uxtb	r3, r3
    9442:	2b02      	cmp	r3, #2
    9444:	f040 83e7 	bne.w	9c16 <send_settings+0x7fa>
    9448:	f64c 132c 	movw	r3, #51500	; 0xc92c
    944c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9450:	781b      	ldrb	r3, [r3, #0]
    9452:	2b00      	cmp	r3, #0
    9454:	f000 83df 	beq.w	9c16 <send_settings+0x7fa>
    9458:	f24c 3319 	movw	r3, #49945	; 0xc319
    945c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9460:	781a      	ldrb	r2, [r3, #0]
    9462:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	b2db      	uxtb	r3, r3
    946e:	429a      	cmp	r2, r3
    9470:	d313      	bcc.n	949a <send_settings+0x7e>
    9472:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    947a:	781b      	ldrb	r3, [r3, #0]
    947c:	b2db      	uxtb	r3, r3
    947e:	461a      	mov	r2, r3
    9480:	f24c 3319 	movw	r3, #49945	; 0xc319
    9484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9488:	781b      	ldrb	r3, [r3, #0]
    948a:	1ad3      	subs	r3, r2, r3
    948c:	33ff      	adds	r3, #255	; 0xff
    948e:	2b0d      	cmp	r3, #13
    9490:	bfd4      	ite	le
    9492:	2300      	movle	r3, #0
    9494:	2301      	movgt	r3, #1
    9496:	b2db      	uxtb	r3, r3
    9498:	e011      	b.n	94be <send_settings+0xa2>
    949a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    949e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a2:	781b      	ldrb	r3, [r3, #0]
    94a4:	b2db      	uxtb	r3, r3
    94a6:	461a      	mov	r2, r3
    94a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    94ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b0:	781b      	ldrb	r3, [r3, #0]
    94b2:	1ad3      	subs	r3, r2, r3
    94b4:	2b0d      	cmp	r3, #13
    94b6:	bfd4      	ite	le
    94b8:	2300      	movle	r3, #0
    94ba:	2301      	movgt	r3, #1
    94bc:	b2db      	uxtb	r3, r3
    94be:	2b00      	cmp	r3, #0
    94c0:	f000 839d 	beq.w	9bfe <send_settings+0x7e2>
    94c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    94c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94cc:	781b      	ldrb	r3, [r3, #0]
    94ce:	461a      	mov	r2, r3
    94d0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    94d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d8:	2105      	movs	r1, #5
    94da:	5499      	strb	r1, [r3, r2]
    94dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    94e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e4:	781b      	ldrb	r3, [r3, #0]
    94e6:	3301      	adds	r3, #1
    94e8:	b2da      	uxtb	r2, r3
    94ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    94ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f2:	701a      	strb	r2, [r3, #0]
    94f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    94f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94fc:	781b      	ldrb	r3, [r3, #0]
    94fe:	2bff      	cmp	r3, #255	; 0xff
    9500:	d105      	bne.n	950e <send_settings+0xf2>
    9502:	f24c 3319 	movw	r3, #49945	; 0xc319
    9506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    950a:	2200      	movs	r2, #0
    950c:	701a      	strb	r2, [r3, #0]
    950e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9516:	781b      	ldrb	r3, [r3, #0]
    9518:	461a      	mov	r2, r3
    951a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    951e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9522:	2111      	movs	r1, #17
    9524:	5499      	strb	r1, [r3, r2]
    9526:	f24c 3319 	movw	r3, #49945	; 0xc319
    952a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    952e:	781b      	ldrb	r3, [r3, #0]
    9530:	3301      	adds	r3, #1
    9532:	b2da      	uxtb	r2, r3
    9534:	f24c 3319 	movw	r3, #49945	; 0xc319
    9538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    953c:	701a      	strb	r2, [r3, #0]
    953e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9546:	781b      	ldrb	r3, [r3, #0]
    9548:	2bff      	cmp	r3, #255	; 0xff
    954a:	d105      	bne.n	9558 <send_settings+0x13c>
    954c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9554:	2200      	movs	r2, #0
    9556:	701a      	strb	r2, [r3, #0]
    9558:	f24c 431d 	movw	r3, #50205	; 0xc41d
    955c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9560:	2211      	movs	r2, #17
    9562:	701a      	strb	r2, [r3, #0]
    9564:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956c:	2211      	movs	r2, #17
    956e:	701a      	strb	r2, [r3, #0]
    9570:	f24c 3319 	movw	r3, #49945	; 0xc319
    9574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9578:	781b      	ldrb	r3, [r3, #0]
    957a:	461a      	mov	r2, r3
    957c:	f64c 132c 	movw	r3, #51500	; 0xc92c
    9580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9584:	7819      	ldrb	r1, [r3, #0]
    9586:	f24c 331c 	movw	r3, #49948	; 0xc31c
    958a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    958e:	5499      	strb	r1, [r3, r2]
    9590:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9598:	781a      	ldrb	r2, [r3, #0]
    959a:	f64c 132c 	movw	r3, #51500	; 0xc92c
    959e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a2:	781b      	ldrb	r3, [r3, #0]
    95a4:	4413      	add	r3, r2
    95a6:	b2da      	uxtb	r2, r3
    95a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    95ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b0:	701a      	strb	r2, [r3, #0]
    95b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    95b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ba:	781a      	ldrb	r2, [r3, #0]
    95bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    95c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c4:	781b      	ldrb	r3, [r3, #0]
    95c6:	4413      	add	r3, r2
    95c8:	b2da      	uxtb	r2, r3
    95ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    95ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d2:	701a      	strb	r2, [r3, #0]
    95d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    95d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95dc:	781b      	ldrb	r3, [r3, #0]
    95de:	3301      	adds	r3, #1
    95e0:	b2da      	uxtb	r2, r3
    95e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    95e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ea:	701a      	strb	r2, [r3, #0]
    95ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    95f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f4:	781b      	ldrb	r3, [r3, #0]
    95f6:	2bff      	cmp	r3, #255	; 0xff
    95f8:	d105      	bne.n	9606 <send_settings+0x1ea>
    95fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    95fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9602:	2200      	movs	r2, #0
    9604:	701a      	strb	r2, [r3, #0]
    9606:	f24c 3319 	movw	r3, #49945	; 0xc319
    960a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    960e:	781b      	ldrb	r3, [r3, #0]
    9610:	461a      	mov	r2, r3
    9612:	f24c 3308 	movw	r3, #49928	; 0xc308
    9616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    961a:	7819      	ldrb	r1, [r3, #0]
    961c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9624:	5499      	strb	r1, [r3, r2]
    9626:	f24c 3308 	movw	r3, #49928	; 0xc308
    962a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962e:	781a      	ldrb	r2, [r3, #0]
    9630:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9638:	781b      	ldrb	r3, [r3, #0]
    963a:	4413      	add	r3, r2
    963c:	b2da      	uxtb	r2, r3
    963e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9646:	701a      	strb	r2, [r3, #0]
    9648:	f24c 431e 	movw	r3, #50206	; 0xc41e
    964c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9650:	781a      	ldrb	r2, [r3, #0]
    9652:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    965a:	781b      	ldrb	r3, [r3, #0]
    965c:	4413      	add	r3, r2
    965e:	b2da      	uxtb	r2, r3
    9660:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9668:	701a      	strb	r2, [r3, #0]
    966a:	f24c 3319 	movw	r3, #49945	; 0xc319
    966e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9672:	781b      	ldrb	r3, [r3, #0]
    9674:	3301      	adds	r3, #1
    9676:	b2da      	uxtb	r2, r3
    9678:	f24c 3319 	movw	r3, #49945	; 0xc319
    967c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9680:	701a      	strb	r2, [r3, #0]
    9682:	f24c 3319 	movw	r3, #49945	; 0xc319
    9686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    968a:	781b      	ldrb	r3, [r3, #0]
    968c:	2bff      	cmp	r3, #255	; 0xff
    968e:	d105      	bne.n	969c <send_settings+0x280>
    9690:	f24c 3319 	movw	r3, #49945	; 0xc319
    9694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9698:	2200      	movs	r2, #0
    969a:	701a      	strb	r2, [r3, #0]
    969c:	f24c 3319 	movw	r3, #49945	; 0xc319
    96a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a4:	781b      	ldrb	r3, [r3, #0]
    96a6:	461a      	mov	r2, r3
    96a8:	f24c 3308 	movw	r3, #49928	; 0xc308
    96ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b0:	7859      	ldrb	r1, [r3, #1]
    96b2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    96b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ba:	5499      	strb	r1, [r3, r2]
    96bc:	4bd1      	ldr	r3, [pc, #836]	; (9a04 <send_settings+0x5e8>)
    96be:	781a      	ldrb	r2, [r3, #0]
    96c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c8:	781b      	ldrb	r3, [r3, #0]
    96ca:	4413      	add	r3, r2
    96cc:	b2da      	uxtb	r2, r3
    96ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d6:	701a      	strb	r2, [r3, #0]
    96d8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    96dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e0:	781a      	ldrb	r2, [r3, #0]
    96e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ea:	781b      	ldrb	r3, [r3, #0]
    96ec:	4413      	add	r3, r2
    96ee:	b2da      	uxtb	r2, r3
    96f0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    96f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f8:	701a      	strb	r2, [r3, #0]
    96fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    96fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9702:	781b      	ldrb	r3, [r3, #0]
    9704:	3301      	adds	r3, #1
    9706:	b2da      	uxtb	r2, r3
    9708:	f24c 3319 	movw	r3, #49945	; 0xc319
    970c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9710:	701a      	strb	r2, [r3, #0]
    9712:	f24c 3319 	movw	r3, #49945	; 0xc319
    9716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    971a:	781b      	ldrb	r3, [r3, #0]
    971c:	2bff      	cmp	r3, #255	; 0xff
    971e:	d105      	bne.n	972c <send_settings+0x310>
    9720:	f24c 3319 	movw	r3, #49945	; 0xc319
    9724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9728:	2200      	movs	r2, #0
    972a:	701a      	strb	r2, [r3, #0]
    972c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9734:	781b      	ldrb	r3, [r3, #0]
    9736:	461a      	mov	r2, r3
    9738:	f24c 3308 	movw	r3, #49928	; 0xc308
    973c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9740:	7899      	ldrb	r1, [r3, #2]
    9742:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    974a:	5499      	strb	r1, [r3, r2]
    974c:	4bae      	ldr	r3, [pc, #696]	; (9a08 <send_settings+0x5ec>)
    974e:	781a      	ldrb	r2, [r3, #0]
    9750:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9758:	781b      	ldrb	r3, [r3, #0]
    975a:	4413      	add	r3, r2
    975c:	b2da      	uxtb	r2, r3
    975e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9766:	701a      	strb	r2, [r3, #0]
    9768:	f24c 431e 	movw	r3, #50206	; 0xc41e
    976c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9770:	781a      	ldrb	r2, [r3, #0]
    9772:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    977a:	781b      	ldrb	r3, [r3, #0]
    977c:	4413      	add	r3, r2
    977e:	b2da      	uxtb	r2, r3
    9780:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9788:	701a      	strb	r2, [r3, #0]
    978a:	f24c 3319 	movw	r3, #49945	; 0xc319
    978e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9792:	781b      	ldrb	r3, [r3, #0]
    9794:	3301      	adds	r3, #1
    9796:	b2da      	uxtb	r2, r3
    9798:	f24c 3319 	movw	r3, #49945	; 0xc319
    979c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a0:	701a      	strb	r2, [r3, #0]
    97a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    97a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97aa:	781b      	ldrb	r3, [r3, #0]
    97ac:	2bff      	cmp	r3, #255	; 0xff
    97ae:	d105      	bne.n	97bc <send_settings+0x3a0>
    97b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    97b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b8:	2200      	movs	r2, #0
    97ba:	701a      	strb	r2, [r3, #0]
    97bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    97c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c4:	781b      	ldrb	r3, [r3, #0]
    97c6:	461a      	mov	r2, r3
    97c8:	f24c 3308 	movw	r3, #49928	; 0xc308
    97cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d0:	78d9      	ldrb	r1, [r3, #3]
    97d2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    97d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97da:	5499      	strb	r1, [r3, r2]
    97dc:	4b8b      	ldr	r3, [pc, #556]	; (9a0c <send_settings+0x5f0>)
    97de:	781a      	ldrb	r2, [r3, #0]
    97e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    97e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e8:	781b      	ldrb	r3, [r3, #0]
    97ea:	4413      	add	r3, r2
    97ec:	b2da      	uxtb	r2, r3
    97ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    97f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f6:	701a      	strb	r2, [r3, #0]
    97f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    97fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9800:	781a      	ldrb	r2, [r3, #0]
    9802:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    980a:	781b      	ldrb	r3, [r3, #0]
    980c:	4413      	add	r3, r2
    980e:	b2da      	uxtb	r2, r3
    9810:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9818:	701a      	strb	r2, [r3, #0]
    981a:	f24c 3319 	movw	r3, #49945	; 0xc319
    981e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9822:	781b      	ldrb	r3, [r3, #0]
    9824:	3301      	adds	r3, #1
    9826:	b2da      	uxtb	r2, r3
    9828:	f24c 3319 	movw	r3, #49945	; 0xc319
    982c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9830:	701a      	strb	r2, [r3, #0]
    9832:	f24c 3319 	movw	r3, #49945	; 0xc319
    9836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    983a:	781b      	ldrb	r3, [r3, #0]
    983c:	2bff      	cmp	r3, #255	; 0xff
    983e:	d105      	bne.n	984c <send_settings+0x430>
    9840:	f24c 3319 	movw	r3, #49945	; 0xc319
    9844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9848:	2200      	movs	r2, #0
    984a:	701a      	strb	r2, [r3, #0]
    984c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9854:	781b      	ldrb	r3, [r3, #0]
    9856:	461a      	mov	r2, r3
    9858:	f24c 330c 	movw	r3, #49932	; 0xc30c
    985c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9860:	7819      	ldrb	r1, [r3, #0]
    9862:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    986a:	5499      	strb	r1, [r3, r2]
    986c:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9874:	781a      	ldrb	r2, [r3, #0]
    9876:	f24c 431d 	movw	r3, #50205	; 0xc41d
    987a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    987e:	781b      	ldrb	r3, [r3, #0]
    9880:	4413      	add	r3, r2
    9882:	b2da      	uxtb	r2, r3
    9884:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    988c:	701a      	strb	r2, [r3, #0]
    988e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9896:	781a      	ldrb	r2, [r3, #0]
    9898:	f24c 431d 	movw	r3, #50205	; 0xc41d
    989c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a0:	781b      	ldrb	r3, [r3, #0]
    98a2:	4413      	add	r3, r2
    98a4:	b2da      	uxtb	r2, r3
    98a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    98aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ae:	701a      	strb	r2, [r3, #0]
    98b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    98b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b8:	781b      	ldrb	r3, [r3, #0]
    98ba:	3301      	adds	r3, #1
    98bc:	b2da      	uxtb	r2, r3
    98be:	f24c 3319 	movw	r3, #49945	; 0xc319
    98c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c6:	701a      	strb	r2, [r3, #0]
    98c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    98cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d0:	781b      	ldrb	r3, [r3, #0]
    98d2:	2bff      	cmp	r3, #255	; 0xff
    98d4:	d105      	bne.n	98e2 <send_settings+0x4c6>
    98d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    98da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98de:	2200      	movs	r2, #0
    98e0:	701a      	strb	r2, [r3, #0]
    98e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    98e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ea:	781b      	ldrb	r3, [r3, #0]
    98ec:	461a      	mov	r2, r3
    98ee:	f24c 330c 	movw	r3, #49932	; 0xc30c
    98f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f6:	7859      	ldrb	r1, [r3, #1]
    98f8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    98fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9900:	5499      	strb	r1, [r3, r2]
    9902:	4b43      	ldr	r3, [pc, #268]	; (9a10 <send_settings+0x5f4>)
    9904:	781a      	ldrb	r2, [r3, #0]
    9906:	f24c 431d 	movw	r3, #50205	; 0xc41d
    990a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    990e:	781b      	ldrb	r3, [r3, #0]
    9910:	4413      	add	r3, r2
    9912:	b2da      	uxtb	r2, r3
    9914:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    991c:	701a      	strb	r2, [r3, #0]
    991e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9926:	781a      	ldrb	r2, [r3, #0]
    9928:	f24c 431d 	movw	r3, #50205	; 0xc41d
    992c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9930:	781b      	ldrb	r3, [r3, #0]
    9932:	4413      	add	r3, r2
    9934:	b2da      	uxtb	r2, r3
    9936:	f24c 431e 	movw	r3, #50206	; 0xc41e
    993a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    993e:	701a      	strb	r2, [r3, #0]
    9940:	f24c 3319 	movw	r3, #49945	; 0xc319
    9944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9948:	781b      	ldrb	r3, [r3, #0]
    994a:	3301      	adds	r3, #1
    994c:	b2da      	uxtb	r2, r3
    994e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9956:	701a      	strb	r2, [r3, #0]
    9958:	f24c 3319 	movw	r3, #49945	; 0xc319
    995c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9960:	781b      	ldrb	r3, [r3, #0]
    9962:	2bff      	cmp	r3, #255	; 0xff
    9964:	d105      	bne.n	9972 <send_settings+0x556>
    9966:	f24c 3319 	movw	r3, #49945	; 0xc319
    996a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    996e:	2200      	movs	r2, #0
    9970:	701a      	strb	r2, [r3, #0]
    9972:	f24c 3319 	movw	r3, #49945	; 0xc319
    9976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    997a:	781b      	ldrb	r3, [r3, #0]
    997c:	461a      	mov	r2, r3
    997e:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9986:	7899      	ldrb	r1, [r3, #2]
    9988:	f24c 331c 	movw	r3, #49948	; 0xc31c
    998c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9990:	5499      	strb	r1, [r3, r2]
    9992:	4b20      	ldr	r3, [pc, #128]	; (9a14 <send_settings+0x5f8>)
    9994:	781a      	ldrb	r2, [r3, #0]
    9996:	f24c 431d 	movw	r3, #50205	; 0xc41d
    999a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    999e:	781b      	ldrb	r3, [r3, #0]
    99a0:	4413      	add	r3, r2
    99a2:	b2da      	uxtb	r2, r3
    99a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ac:	701a      	strb	r2, [r3, #0]
    99ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    99b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b6:	781a      	ldrb	r2, [r3, #0]
    99b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c0:	781b      	ldrb	r3, [r3, #0]
    99c2:	4413      	add	r3, r2
    99c4:	b2da      	uxtb	r2, r3
    99c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    99ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ce:	701a      	strb	r2, [r3, #0]
    99d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    99d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d8:	781b      	ldrb	r3, [r3, #0]
    99da:	3301      	adds	r3, #1
    99dc:	b2da      	uxtb	r2, r3
    99de:	f24c 3319 	movw	r3, #49945	; 0xc319
    99e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e6:	701a      	strb	r2, [r3, #0]
    99e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    99ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f0:	781b      	ldrb	r3, [r3, #0]
    99f2:	2bff      	cmp	r3, #255	; 0xff
    99f4:	d110      	bne.n	9a18 <send_settings+0x5fc>
    99f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    99fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99fe:	2200      	movs	r2, #0
    9a00:	701a      	strb	r2, [r3, #0]
    9a02:	e009      	b.n	9a18 <send_settings+0x5fc>
    9a04:	2004c309 	.word	0x2004c309
    9a08:	2004c30a 	.word	0x2004c30a
    9a0c:	2004c30b 	.word	0x2004c30b
    9a10:	2004c30d 	.word	0x2004c30d
    9a14:	2004c30e 	.word	0x2004c30e
    9a18:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a20:	781b      	ldrb	r3, [r3, #0]
    9a22:	461a      	mov	r2, r3
    9a24:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a2c:	78d9      	ldrb	r1, [r3, #3]
    9a2e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a36:	5499      	strb	r1, [r3, r2]
    9a38:	4b79      	ldr	r3, [pc, #484]	; (9c20 <send_settings+0x804>)
    9a3a:	781a      	ldrb	r2, [r3, #0]
    9a3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a44:	781b      	ldrb	r3, [r3, #0]
    9a46:	4413      	add	r3, r2
    9a48:	b2da      	uxtb	r2, r3
    9a4a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a52:	701a      	strb	r2, [r3, #0]
    9a54:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a5c:	781a      	ldrb	r2, [r3, #0]
    9a5e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a66:	781b      	ldrb	r3, [r3, #0]
    9a68:	4413      	add	r3, r2
    9a6a:	b2da      	uxtb	r2, r3
    9a6c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a74:	701a      	strb	r2, [r3, #0]
    9a76:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a7e:	781b      	ldrb	r3, [r3, #0]
    9a80:	3301      	adds	r3, #1
    9a82:	b2da      	uxtb	r2, r3
    9a84:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a8c:	701a      	strb	r2, [r3, #0]
    9a8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a96:	781b      	ldrb	r3, [r3, #0]
    9a98:	2bff      	cmp	r3, #255	; 0xff
    9a9a:	d105      	bne.n	9aa8 <send_settings+0x68c>
    9a9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa4:	2200      	movs	r2, #0
    9aa6:	701a      	strb	r2, [r3, #0]
    9aa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab0:	781b      	ldrb	r3, [r3, #0]
    9ab2:	461a      	mov	r2, r3
    9ab4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9abc:	7819      	ldrb	r1, [r3, #0]
    9abe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac6:	5499      	strb	r1, [r3, r2]
    9ac8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad0:	781b      	ldrb	r3, [r3, #0]
    9ad2:	3301      	adds	r3, #1
    9ad4:	b2da      	uxtb	r2, r3
    9ad6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ade:	701a      	strb	r2, [r3, #0]
    9ae0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae8:	781b      	ldrb	r3, [r3, #0]
    9aea:	2bff      	cmp	r3, #255	; 0xff
    9aec:	d105      	bne.n	9afa <send_settings+0x6de>
    9aee:	f24c 3319 	movw	r3, #49945	; 0xc319
    9af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af6:	2200      	movs	r2, #0
    9af8:	701a      	strb	r2, [r3, #0]
    9afa:	f24c 3319 	movw	r3, #49945	; 0xc319
    9afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b02:	781b      	ldrb	r3, [r3, #0]
    9b04:	461a      	mov	r2, r3
    9b06:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b0e:	7819      	ldrb	r1, [r3, #0]
    9b10:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b18:	5499      	strb	r1, [r3, r2]
    9b1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b22:	781b      	ldrb	r3, [r3, #0]
    9b24:	3301      	adds	r3, #1
    9b26:	b2da      	uxtb	r2, r3
    9b28:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b30:	701a      	strb	r2, [r3, #0]
    9b32:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b3a:	781b      	ldrb	r3, [r3, #0]
    9b3c:	2bff      	cmp	r3, #255	; 0xff
    9b3e:	d105      	bne.n	9b4c <send_settings+0x730>
    9b40:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b48:	2200      	movs	r2, #0
    9b4a:	701a      	strb	r2, [r3, #0]
    9b4c:	f242 0339 	movw	r3, #8249	; 0x2039
    9b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b54:	781b      	ldrb	r3, [r3, #0]
    9b56:	b2db      	uxtb	r3, r3
    9b58:	f003 0310 	and.w	r3, r3, #16
    9b5c:	2b00      	cmp	r3, #0
    9b5e:	d15a      	bne.n	9c16 <send_settings+0x7fa>
    9b60:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b68:	781b      	ldrb	r3, [r3, #0]
    9b6a:	b2db      	uxtb	r3, r3
    9b6c:	461a      	mov	r2, r3
    9b6e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b76:	5c9a      	ldrb	r2, [r3, r2]
    9b78:	f24c 431b 	movw	r3, #50203	; 0xc41b
    9b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b80:	701a      	strb	r2, [r3, #0]
    9b82:	f24c 431c 	movw	r3, #50204	; 0xc41c
    9b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b8a:	2200      	movs	r2, #0
    9b8c:	701a      	strb	r2, [r3, #0]
    9b8e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b96:	781b      	ldrb	r3, [r3, #0]
    9b98:	b2db      	uxtb	r3, r3
    9b9a:	3301      	adds	r3, #1
    9b9c:	b2da      	uxtb	r2, r3
    9b9e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba6:	701a      	strb	r2, [r3, #0]
    9ba8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb0:	781b      	ldrb	r3, [r3, #0]
    9bb2:	b2db      	uxtb	r3, r3
    9bb4:	2bff      	cmp	r3, #255	; 0xff
    9bb6:	d105      	bne.n	9bc4 <send_settings+0x7a8>
    9bb8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bc0:	2200      	movs	r2, #0
    9bc2:	701a      	strb	r2, [r3, #0]
    9bc4:	f242 0338 	movw	r3, #8248	; 0x2038
    9bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bcc:	f242 0238 	movw	r2, #8248	; 0x2038
    9bd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9bd4:	7812      	ldrb	r2, [r2, #0]
    9bd6:	b2d2      	uxtb	r2, r2
    9bd8:	f042 0201 	orr.w	r2, r2, #1
    9bdc:	b2d2      	uxtb	r2, r2
    9bde:	701a      	strb	r2, [r3, #0]
    9be0:	f242 0339 	movw	r3, #8249	; 0x2039
    9be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9be8:	f242 0239 	movw	r2, #8249	; 0x2039
    9bec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9bf0:	7812      	ldrb	r2, [r2, #0]
    9bf2:	b2d2      	uxtb	r2, r2
    9bf4:	f042 0210 	orr.w	r2, r2, #16
    9bf8:	b2d2      	uxtb	r2, r2
    9bfa:	701a      	strb	r2, [r3, #0]
    9bfc:	e00b      	b.n	9c16 <send_settings+0x7fa>
    9bfe:	f24c 3318 	movw	r3, #49944	; 0xc318
    9c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c06:	781b      	ldrb	r3, [r3, #0]
    9c08:	3301      	adds	r3, #1
    9c0a:	b2da      	uxtb	r2, r3
    9c0c:	f24c 3318 	movw	r3, #49944	; 0xc318
    9c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c14:	701a      	strb	r2, [r3, #0]
}
    9c16:	46bd      	mov	sp, r7
    9c18:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c1c:	4770      	bx	lr
    9c1e:	bf00      	nop
    9c20:	2004c30f 	.word	0x2004c30f

00009c24 <send_desired>:
void send_desired(void){  //1000ms
    9c24:	b480      	push	{r7}
    9c26:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9c28:	f24c 3311 	movw	r3, #49937	; 0xc311
    9c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c30:	781a      	ldrb	r2, [r3, #0]
    9c32:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9c36:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9c3a:	fba3 1302 	umull	r1, r3, r3, r2
    9c3e:	08d9      	lsrs	r1, r3, #3
    9c40:	460b      	mov	r3, r1
    9c42:	009b      	lsls	r3, r3, #2
    9c44:	440b      	add	r3, r1
    9c46:	005b      	lsls	r3, r3, #1
    9c48:	1ad3      	subs	r3, r2, r3
    9c4a:	b2db      	uxtb	r3, r3
    9c4c:	2b03      	cmp	r3, #3
    9c4e:	f040 8712 	bne.w	aa76 <send_desired+0xe52>
    9c52:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c5a:	781a      	ldrb	r2, [r3, #0]
    9c5c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c64:	781b      	ldrb	r3, [r3, #0]
    9c66:	b2db      	uxtb	r3, r3
    9c68:	429a      	cmp	r2, r3
    9c6a:	d313      	bcc.n	9c94 <send_desired+0x70>
    9c6c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c74:	781b      	ldrb	r3, [r3, #0]
    9c76:	b2db      	uxtb	r3, r3
    9c78:	461a      	mov	r2, r3
    9c7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c82:	781b      	ldrb	r3, [r3, #0]
    9c84:	1ad3      	subs	r3, r2, r3
    9c86:	33ff      	adds	r3, #255	; 0xff
    9c88:	2b18      	cmp	r3, #24
    9c8a:	bfd4      	ite	le
    9c8c:	2300      	movle	r3, #0
    9c8e:	2301      	movgt	r3, #1
    9c90:	b2db      	uxtb	r3, r3
    9c92:	e011      	b.n	9cb8 <send_desired+0x94>
    9c94:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c9c:	781b      	ldrb	r3, [r3, #0]
    9c9e:	b2db      	uxtb	r3, r3
    9ca0:	461a      	mov	r2, r3
    9ca2:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9caa:	781b      	ldrb	r3, [r3, #0]
    9cac:	1ad3      	subs	r3, r2, r3
    9cae:	2b18      	cmp	r3, #24
    9cb0:	bfd4      	ite	le
    9cb2:	2300      	movle	r3, #0
    9cb4:	2301      	movgt	r3, #1
    9cb6:	b2db      	uxtb	r3, r3
    9cb8:	2b00      	cmp	r3, #0
    9cba:	f000 86d0 	beq.w	aa5e <send_desired+0xe3a>
    9cbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    9cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc6:	781b      	ldrb	r3, [r3, #0]
    9cc8:	461a      	mov	r2, r3
    9cca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd2:	2105      	movs	r1, #5
    9cd4:	5499      	strb	r1, [r3, r2]
    9cd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cde:	781b      	ldrb	r3, [r3, #0]
    9ce0:	3301      	adds	r3, #1
    9ce2:	b2da      	uxtb	r2, r3
    9ce4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cec:	701a      	strb	r2, [r3, #0]
    9cee:	f24c 3319 	movw	r3, #49945	; 0xc319
    9cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf6:	781b      	ldrb	r3, [r3, #0]
    9cf8:	2bff      	cmp	r3, #255	; 0xff
    9cfa:	d105      	bne.n	9d08 <send_desired+0xe4>
    9cfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d04:	2200      	movs	r2, #0
    9d06:	701a      	strb	r2, [r3, #0]
    9d08:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	461a      	mov	r2, r3
    9d14:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1c:	2112      	movs	r1, #18
    9d1e:	5499      	strb	r1, [r3, r2]
    9d20:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d28:	781b      	ldrb	r3, [r3, #0]
    9d2a:	3301      	adds	r3, #1
    9d2c:	b2da      	uxtb	r2, r3
    9d2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d36:	701a      	strb	r2, [r3, #0]
    9d38:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d40:	781b      	ldrb	r3, [r3, #0]
    9d42:	2bff      	cmp	r3, #255	; 0xff
    9d44:	d105      	bne.n	9d52 <send_desired+0x12e>
    9d46:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4e:	2200      	movs	r2, #0
    9d50:	701a      	strb	r2, [r3, #0]
    9d52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d5a:	2212      	movs	r2, #18
    9d5c:	701a      	strb	r2, [r3, #0]
    9d5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d66:	2212      	movs	r2, #18
    9d68:	701a      	strb	r2, [r3, #0]
    9d6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d72:	781b      	ldrb	r3, [r3, #0]
    9d74:	461a      	mov	r2, r3
    9d76:	f24c 6344 	movw	r3, #50756	; 0xc644
    9d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d7e:	7819      	ldrb	r1, [r3, #0]
    9d80:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d88:	5499      	strb	r1, [r3, r2]
    9d8a:	f24c 6344 	movw	r3, #50756	; 0xc644
    9d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d92:	781a      	ldrb	r2, [r3, #0]
    9d94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9c:	781b      	ldrb	r3, [r3, #0]
    9d9e:	4413      	add	r3, r2
    9da0:	b2da      	uxtb	r2, r3
    9da2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9daa:	701a      	strb	r2, [r3, #0]
    9dac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db4:	781a      	ldrb	r2, [r3, #0]
    9db6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbe:	781b      	ldrb	r3, [r3, #0]
    9dc0:	4413      	add	r3, r2
    9dc2:	b2da      	uxtb	r2, r3
    9dc4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dcc:	701a      	strb	r2, [r3, #0]
    9dce:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd6:	781b      	ldrb	r3, [r3, #0]
    9dd8:	3301      	adds	r3, #1
    9dda:	b2da      	uxtb	r2, r3
    9ddc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de4:	701a      	strb	r2, [r3, #0]
    9de6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dee:	781b      	ldrb	r3, [r3, #0]
    9df0:	2bff      	cmp	r3, #255	; 0xff
    9df2:	d105      	bne.n	9e00 <send_desired+0x1dc>
    9df4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfc:	2200      	movs	r2, #0
    9dfe:	701a      	strb	r2, [r3, #0]
    9e00:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e08:	781b      	ldrb	r3, [r3, #0]
    9e0a:	461a      	mov	r2, r3
    9e0c:	f24c 6344 	movw	r3, #50756	; 0xc644
    9e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e14:	7859      	ldrb	r1, [r3, #1]
    9e16:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1e:	5499      	strb	r1, [r3, r2]
    9e20:	4bd1      	ldr	r3, [pc, #836]	; (a168 <send_desired+0x544>)
    9e22:	781a      	ldrb	r2, [r3, #0]
    9e24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	4413      	add	r3, r2
    9e30:	b2da      	uxtb	r2, r3
    9e32:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3a:	701a      	strb	r2, [r3, #0]
    9e3c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e44:	781a      	ldrb	r2, [r3, #0]
    9e46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4e:	781b      	ldrb	r3, [r3, #0]
    9e50:	4413      	add	r3, r2
    9e52:	b2da      	uxtb	r2, r3
    9e54:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e5c:	701a      	strb	r2, [r3, #0]
    9e5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e66:	781b      	ldrb	r3, [r3, #0]
    9e68:	3301      	adds	r3, #1
    9e6a:	b2da      	uxtb	r2, r3
    9e6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e74:	701a      	strb	r2, [r3, #0]
    9e76:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e7e:	781b      	ldrb	r3, [r3, #0]
    9e80:	2bff      	cmp	r3, #255	; 0xff
    9e82:	d105      	bne.n	9e90 <send_desired+0x26c>
    9e84:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8c:	2200      	movs	r2, #0
    9e8e:	701a      	strb	r2, [r3, #0]
    9e90:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e98:	781b      	ldrb	r3, [r3, #0]
    9e9a:	461a      	mov	r2, r3
    9e9c:	f24c 6344 	movw	r3, #50756	; 0xc644
    9ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea4:	7899      	ldrb	r1, [r3, #2]
    9ea6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eae:	5499      	strb	r1, [r3, r2]
    9eb0:	4bae      	ldr	r3, [pc, #696]	; (a16c <send_desired+0x548>)
    9eb2:	781a      	ldrb	r2, [r3, #0]
    9eb4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ebc:	781b      	ldrb	r3, [r3, #0]
    9ebe:	4413      	add	r3, r2
    9ec0:	b2da      	uxtb	r2, r3
    9ec2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eca:	701a      	strb	r2, [r3, #0]
    9ecc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed4:	781a      	ldrb	r2, [r3, #0]
    9ed6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ede:	781b      	ldrb	r3, [r3, #0]
    9ee0:	4413      	add	r3, r2
    9ee2:	b2da      	uxtb	r2, r3
    9ee4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eec:	701a      	strb	r2, [r3, #0]
    9eee:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef6:	781b      	ldrb	r3, [r3, #0]
    9ef8:	3301      	adds	r3, #1
    9efa:	b2da      	uxtb	r2, r3
    9efc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f04:	701a      	strb	r2, [r3, #0]
    9f06:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0e:	781b      	ldrb	r3, [r3, #0]
    9f10:	2bff      	cmp	r3, #255	; 0xff
    9f12:	d105      	bne.n	9f20 <send_desired+0x2fc>
    9f14:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f1c:	2200      	movs	r2, #0
    9f1e:	701a      	strb	r2, [r3, #0]
    9f20:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f28:	781b      	ldrb	r3, [r3, #0]
    9f2a:	461a      	mov	r2, r3
    9f2c:	f24c 6344 	movw	r3, #50756	; 0xc644
    9f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f34:	78d9      	ldrb	r1, [r3, #3]
    9f36:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3e:	5499      	strb	r1, [r3, r2]
    9f40:	4b8b      	ldr	r3, [pc, #556]	; (a170 <send_desired+0x54c>)
    9f42:	781a      	ldrb	r2, [r3, #0]
    9f44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f4c:	781b      	ldrb	r3, [r3, #0]
    9f4e:	4413      	add	r3, r2
    9f50:	b2da      	uxtb	r2, r3
    9f52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5a:	701a      	strb	r2, [r3, #0]
    9f5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f64:	781a      	ldrb	r2, [r3, #0]
    9f66:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6e:	781b      	ldrb	r3, [r3, #0]
    9f70:	4413      	add	r3, r2
    9f72:	b2da      	uxtb	r2, r3
    9f74:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f7c:	701a      	strb	r2, [r3, #0]
    9f7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f86:	781b      	ldrb	r3, [r3, #0]
    9f88:	3301      	adds	r3, #1
    9f8a:	b2da      	uxtb	r2, r3
    9f8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f94:	701a      	strb	r2, [r3, #0]
    9f96:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9e:	781b      	ldrb	r3, [r3, #0]
    9fa0:	2bff      	cmp	r3, #255	; 0xff
    9fa2:	d105      	bne.n	9fb0 <send_desired+0x38c>
    9fa4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fac:	2200      	movs	r2, #0
    9fae:	701a      	strb	r2, [r3, #0]
    9fb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb8:	781b      	ldrb	r3, [r3, #0]
    9fba:	461a      	mov	r2, r3
    9fbc:	f24c 6348 	movw	r3, #50760	; 0xc648
    9fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc4:	7819      	ldrb	r1, [r3, #0]
    9fc6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fce:	5499      	strb	r1, [r3, r2]
    9fd0:	f24c 6348 	movw	r3, #50760	; 0xc648
    9fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd8:	781a      	ldrb	r2, [r3, #0]
    9fda:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe2:	781b      	ldrb	r3, [r3, #0]
    9fe4:	4413      	add	r3, r2
    9fe6:	b2da      	uxtb	r2, r3
    9fe8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff0:	701a      	strb	r2, [r3, #0]
    9ff2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ffa:	781a      	ldrb	r2, [r3, #0]
    9ffc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a004:	781b      	ldrb	r3, [r3, #0]
    a006:	4413      	add	r3, r2
    a008:	b2da      	uxtb	r2, r3
    a00a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a012:	701a      	strb	r2, [r3, #0]
    a014:	f24c 3319 	movw	r3, #49945	; 0xc319
    a018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01c:	781b      	ldrb	r3, [r3, #0]
    a01e:	3301      	adds	r3, #1
    a020:	b2da      	uxtb	r2, r3
    a022:	f24c 3319 	movw	r3, #49945	; 0xc319
    a026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a02a:	701a      	strb	r2, [r3, #0]
    a02c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a034:	781b      	ldrb	r3, [r3, #0]
    a036:	2bff      	cmp	r3, #255	; 0xff
    a038:	d105      	bne.n	a046 <send_desired+0x422>
    a03a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a042:	2200      	movs	r2, #0
    a044:	701a      	strb	r2, [r3, #0]
    a046:	f24c 3319 	movw	r3, #49945	; 0xc319
    a04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04e:	781b      	ldrb	r3, [r3, #0]
    a050:	461a      	mov	r2, r3
    a052:	f24c 6348 	movw	r3, #50760	; 0xc648
    a056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05a:	7859      	ldrb	r1, [r3, #1]
    a05c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a064:	5499      	strb	r1, [r3, r2]
    a066:	4b43      	ldr	r3, [pc, #268]	; (a174 <send_desired+0x550>)
    a068:	781a      	ldrb	r2, [r3, #0]
    a06a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a072:	781b      	ldrb	r3, [r3, #0]
    a074:	4413      	add	r3, r2
    a076:	b2da      	uxtb	r2, r3
    a078:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a080:	701a      	strb	r2, [r3, #0]
    a082:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a08a:	781a      	ldrb	r2, [r3, #0]
    a08c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a094:	781b      	ldrb	r3, [r3, #0]
    a096:	4413      	add	r3, r2
    a098:	b2da      	uxtb	r2, r3
    a09a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a2:	701a      	strb	r2, [r3, #0]
    a0a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ac:	781b      	ldrb	r3, [r3, #0]
    a0ae:	3301      	adds	r3, #1
    a0b0:	b2da      	uxtb	r2, r3
    a0b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ba:	701a      	strb	r2, [r3, #0]
    a0bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c4:	781b      	ldrb	r3, [r3, #0]
    a0c6:	2bff      	cmp	r3, #255	; 0xff
    a0c8:	d105      	bne.n	a0d6 <send_desired+0x4b2>
    a0ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d2:	2200      	movs	r2, #0
    a0d4:	701a      	strb	r2, [r3, #0]
    a0d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0de:	781b      	ldrb	r3, [r3, #0]
    a0e0:	461a      	mov	r2, r3
    a0e2:	f24c 6348 	movw	r3, #50760	; 0xc648
    a0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ea:	7899      	ldrb	r1, [r3, #2]
    a0ec:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f4:	5499      	strb	r1, [r3, r2]
    a0f6:	4b20      	ldr	r3, [pc, #128]	; (a178 <send_desired+0x554>)
    a0f8:	781a      	ldrb	r2, [r3, #0]
    a0fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a102:	781b      	ldrb	r3, [r3, #0]
    a104:	4413      	add	r3, r2
    a106:	b2da      	uxtb	r2, r3
    a108:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a110:	701a      	strb	r2, [r3, #0]
    a112:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a11a:	781a      	ldrb	r2, [r3, #0]
    a11c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a124:	781b      	ldrb	r3, [r3, #0]
    a126:	4413      	add	r3, r2
    a128:	b2da      	uxtb	r2, r3
    a12a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a132:	701a      	strb	r2, [r3, #0]
    a134:	f24c 3319 	movw	r3, #49945	; 0xc319
    a138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13c:	781b      	ldrb	r3, [r3, #0]
    a13e:	3301      	adds	r3, #1
    a140:	b2da      	uxtb	r2, r3
    a142:	f24c 3319 	movw	r3, #49945	; 0xc319
    a146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14a:	701a      	strb	r2, [r3, #0]
    a14c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a154:	781b      	ldrb	r3, [r3, #0]
    a156:	2bff      	cmp	r3, #255	; 0xff
    a158:	d110      	bne.n	a17c <send_desired+0x558>
    a15a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a162:	2200      	movs	r2, #0
    a164:	701a      	strb	r2, [r3, #0]
    a166:	e009      	b.n	a17c <send_desired+0x558>
    a168:	2004c645 	.word	0x2004c645
    a16c:	2004c646 	.word	0x2004c646
    a170:	2004c647 	.word	0x2004c647
    a174:	2004c649 	.word	0x2004c649
    a178:	2004c64a 	.word	0x2004c64a
    a17c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a184:	781b      	ldrb	r3, [r3, #0]
    a186:	461a      	mov	r2, r3
    a188:	f24c 6348 	movw	r3, #50760	; 0xc648
    a18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a190:	78d9      	ldrb	r1, [r3, #3]
    a192:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19a:	5499      	strb	r1, [r3, r2]
    a19c:	4bd3      	ldr	r3, [pc, #844]	; (a4ec <send_desired+0x8c8>)
    a19e:	781a      	ldrb	r2, [r3, #0]
    a1a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a8:	781b      	ldrb	r3, [r3, #0]
    a1aa:	4413      	add	r3, r2
    a1ac:	b2da      	uxtb	r2, r3
    a1ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b6:	701a      	strb	r2, [r3, #0]
    a1b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c0:	781a      	ldrb	r2, [r3, #0]
    a1c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ca:	781b      	ldrb	r3, [r3, #0]
    a1cc:	4413      	add	r3, r2
    a1ce:	b2da      	uxtb	r2, r3
    a1d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d8:	701a      	strb	r2, [r3, #0]
    a1da:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e2:	781b      	ldrb	r3, [r3, #0]
    a1e4:	3301      	adds	r3, #1
    a1e6:	b2da      	uxtb	r2, r3
    a1e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f0:	701a      	strb	r2, [r3, #0]
    a1f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fa:	781b      	ldrb	r3, [r3, #0]
    a1fc:	2bff      	cmp	r3, #255	; 0xff
    a1fe:	d105      	bne.n	a20c <send_desired+0x5e8>
    a200:	f24c 3319 	movw	r3, #49945	; 0xc319
    a204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a208:	2200      	movs	r2, #0
    a20a:	701a      	strb	r2, [r3, #0]
    a20c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a214:	781b      	ldrb	r3, [r3, #0]
    a216:	461a      	mov	r2, r3
    a218:	f24c 6390 	movw	r3, #50832	; 0xc690
    a21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a220:	7819      	ldrb	r1, [r3, #0]
    a222:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22a:	5499      	strb	r1, [r3, r2]
    a22c:	f24c 6390 	movw	r3, #50832	; 0xc690
    a230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a234:	781a      	ldrb	r2, [r3, #0]
    a236:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23e:	781b      	ldrb	r3, [r3, #0]
    a240:	4413      	add	r3, r2
    a242:	b2da      	uxtb	r2, r3
    a244:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a24c:	701a      	strb	r2, [r3, #0]
    a24e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a256:	781a      	ldrb	r2, [r3, #0]
    a258:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a260:	781b      	ldrb	r3, [r3, #0]
    a262:	4413      	add	r3, r2
    a264:	b2da      	uxtb	r2, r3
    a266:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a26e:	701a      	strb	r2, [r3, #0]
    a270:	f24c 3319 	movw	r3, #49945	; 0xc319
    a274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a278:	781b      	ldrb	r3, [r3, #0]
    a27a:	3301      	adds	r3, #1
    a27c:	b2da      	uxtb	r2, r3
    a27e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a286:	701a      	strb	r2, [r3, #0]
    a288:	f24c 3319 	movw	r3, #49945	; 0xc319
    a28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a290:	781b      	ldrb	r3, [r3, #0]
    a292:	2bff      	cmp	r3, #255	; 0xff
    a294:	d105      	bne.n	a2a2 <send_desired+0x67e>
    a296:	f24c 3319 	movw	r3, #49945	; 0xc319
    a29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29e:	2200      	movs	r2, #0
    a2a0:	701a      	strb	r2, [r3, #0]
    a2a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2aa:	781b      	ldrb	r3, [r3, #0]
    a2ac:	461a      	mov	r2, r3
    a2ae:	f24c 6390 	movw	r3, #50832	; 0xc690
    a2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b6:	7859      	ldrb	r1, [r3, #1]
    a2b8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c0:	5499      	strb	r1, [r3, r2]
    a2c2:	4b8b      	ldr	r3, [pc, #556]	; (a4f0 <send_desired+0x8cc>)
    a2c4:	781a      	ldrb	r2, [r3, #0]
    a2c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ce:	781b      	ldrb	r3, [r3, #0]
    a2d0:	4413      	add	r3, r2
    a2d2:	b2da      	uxtb	r2, r3
    a2d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2dc:	701a      	strb	r2, [r3, #0]
    a2de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e6:	781a      	ldrb	r2, [r3, #0]
    a2e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f0:	781b      	ldrb	r3, [r3, #0]
    a2f2:	4413      	add	r3, r2
    a2f4:	b2da      	uxtb	r2, r3
    a2f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2fe:	701a      	strb	r2, [r3, #0]
    a300:	f24c 3319 	movw	r3, #49945	; 0xc319
    a304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a308:	781b      	ldrb	r3, [r3, #0]
    a30a:	3301      	adds	r3, #1
    a30c:	b2da      	uxtb	r2, r3
    a30e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a316:	701a      	strb	r2, [r3, #0]
    a318:	f24c 3319 	movw	r3, #49945	; 0xc319
    a31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a320:	781b      	ldrb	r3, [r3, #0]
    a322:	2bff      	cmp	r3, #255	; 0xff
    a324:	d105      	bne.n	a332 <send_desired+0x70e>
    a326:	f24c 3319 	movw	r3, #49945	; 0xc319
    a32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32e:	2200      	movs	r2, #0
    a330:	701a      	strb	r2, [r3, #0]
    a332:	f24c 3319 	movw	r3, #49945	; 0xc319
    a336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a33a:	781b      	ldrb	r3, [r3, #0]
    a33c:	461a      	mov	r2, r3
    a33e:	f24c 6390 	movw	r3, #50832	; 0xc690
    a342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a346:	7899      	ldrb	r1, [r3, #2]
    a348:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a350:	5499      	strb	r1, [r3, r2]
    a352:	4b68      	ldr	r3, [pc, #416]	; (a4f4 <send_desired+0x8d0>)
    a354:	781a      	ldrb	r2, [r3, #0]
    a356:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35e:	781b      	ldrb	r3, [r3, #0]
    a360:	4413      	add	r3, r2
    a362:	b2da      	uxtb	r2, r3
    a364:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a36c:	701a      	strb	r2, [r3, #0]
    a36e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a376:	781a      	ldrb	r2, [r3, #0]
    a378:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a380:	781b      	ldrb	r3, [r3, #0]
    a382:	4413      	add	r3, r2
    a384:	b2da      	uxtb	r2, r3
    a386:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a38e:	701a      	strb	r2, [r3, #0]
    a390:	f24c 3319 	movw	r3, #49945	; 0xc319
    a394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a398:	781b      	ldrb	r3, [r3, #0]
    a39a:	3301      	adds	r3, #1
    a39c:	b2da      	uxtb	r2, r3
    a39e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a6:	701a      	strb	r2, [r3, #0]
    a3a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b0:	781b      	ldrb	r3, [r3, #0]
    a3b2:	2bff      	cmp	r3, #255	; 0xff
    a3b4:	d105      	bne.n	a3c2 <send_desired+0x79e>
    a3b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3be:	2200      	movs	r2, #0
    a3c0:	701a      	strb	r2, [r3, #0]
    a3c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ca:	781b      	ldrb	r3, [r3, #0]
    a3cc:	461a      	mov	r2, r3
    a3ce:	f24c 6390 	movw	r3, #50832	; 0xc690
    a3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d6:	78d9      	ldrb	r1, [r3, #3]
    a3d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e0:	5499      	strb	r1, [r3, r2]
    a3e2:	4b45      	ldr	r3, [pc, #276]	; (a4f8 <send_desired+0x8d4>)
    a3e4:	781a      	ldrb	r2, [r3, #0]
    a3e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ee:	781b      	ldrb	r3, [r3, #0]
    a3f0:	4413      	add	r3, r2
    a3f2:	b2da      	uxtb	r2, r3
    a3f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3fc:	701a      	strb	r2, [r3, #0]
    a3fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a406:	781a      	ldrb	r2, [r3, #0]
    a408:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a410:	781b      	ldrb	r3, [r3, #0]
    a412:	4413      	add	r3, r2
    a414:	b2da      	uxtb	r2, r3
    a416:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a41e:	701a      	strb	r2, [r3, #0]
    a420:	f24c 3319 	movw	r3, #49945	; 0xc319
    a424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a428:	781b      	ldrb	r3, [r3, #0]
    a42a:	3301      	adds	r3, #1
    a42c:	b2da      	uxtb	r2, r3
    a42e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a436:	701a      	strb	r2, [r3, #0]
    a438:	f24c 3319 	movw	r3, #49945	; 0xc319
    a43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a440:	781b      	ldrb	r3, [r3, #0]
    a442:	2bff      	cmp	r3, #255	; 0xff
    a444:	d105      	bne.n	a452 <send_desired+0x82e>
    a446:	f24c 3319 	movw	r3, #49945	; 0xc319
    a44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a44e:	2200      	movs	r2, #0
    a450:	701a      	strb	r2, [r3, #0]
    a452:	f24c 3319 	movw	r3, #49945	; 0xc319
    a456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a45a:	781b      	ldrb	r3, [r3, #0]
    a45c:	461a      	mov	r2, r3
    a45e:	f24c 6394 	movw	r3, #50836	; 0xc694
    a462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a466:	7819      	ldrb	r1, [r3, #0]
    a468:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a470:	5499      	strb	r1, [r3, r2]
    a472:	f24c 6394 	movw	r3, #50836	; 0xc694
    a476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a47a:	781a      	ldrb	r2, [r3, #0]
    a47c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a484:	781b      	ldrb	r3, [r3, #0]
    a486:	4413      	add	r3, r2
    a488:	b2da      	uxtb	r2, r3
    a48a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a492:	701a      	strb	r2, [r3, #0]
    a494:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a49c:	781a      	ldrb	r2, [r3, #0]
    a49e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a6:	781b      	ldrb	r3, [r3, #0]
    a4a8:	4413      	add	r3, r2
    a4aa:	b2da      	uxtb	r2, r3
    a4ac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b4:	701a      	strb	r2, [r3, #0]
    a4b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4be:	781b      	ldrb	r3, [r3, #0]
    a4c0:	3301      	adds	r3, #1
    a4c2:	b2da      	uxtb	r2, r3
    a4c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4cc:	701a      	strb	r2, [r3, #0]
    a4ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d6:	781b      	ldrb	r3, [r3, #0]
    a4d8:	2bff      	cmp	r3, #255	; 0xff
    a4da:	d10f      	bne.n	a4fc <send_desired+0x8d8>
    a4dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e4:	2200      	movs	r2, #0
    a4e6:	701a      	strb	r2, [r3, #0]
    a4e8:	e008      	b.n	a4fc <send_desired+0x8d8>
    a4ea:	bf00      	nop
    a4ec:	2004c64b 	.word	0x2004c64b
    a4f0:	2004c691 	.word	0x2004c691
    a4f4:	2004c692 	.word	0x2004c692
    a4f8:	2004c693 	.word	0x2004c693
    a4fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a504:	781b      	ldrb	r3, [r3, #0]
    a506:	461a      	mov	r2, r3
    a508:	f24c 6394 	movw	r3, #50836	; 0xc694
    a50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a510:	7859      	ldrb	r1, [r3, #1]
    a512:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51a:	5499      	strb	r1, [r3, r2]
    a51c:	4bd1      	ldr	r3, [pc, #836]	; (a864 <send_desired+0xc40>)
    a51e:	781a      	ldrb	r2, [r3, #0]
    a520:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a528:	781b      	ldrb	r3, [r3, #0]
    a52a:	4413      	add	r3, r2
    a52c:	b2da      	uxtb	r2, r3
    a52e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a536:	701a      	strb	r2, [r3, #0]
    a538:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a540:	781a      	ldrb	r2, [r3, #0]
    a542:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54a:	781b      	ldrb	r3, [r3, #0]
    a54c:	4413      	add	r3, r2
    a54e:	b2da      	uxtb	r2, r3
    a550:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a558:	701a      	strb	r2, [r3, #0]
    a55a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a562:	781b      	ldrb	r3, [r3, #0]
    a564:	3301      	adds	r3, #1
    a566:	b2da      	uxtb	r2, r3
    a568:	f24c 3319 	movw	r3, #49945	; 0xc319
    a56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a570:	701a      	strb	r2, [r3, #0]
    a572:	f24c 3319 	movw	r3, #49945	; 0xc319
    a576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57a:	781b      	ldrb	r3, [r3, #0]
    a57c:	2bff      	cmp	r3, #255	; 0xff
    a57e:	d105      	bne.n	a58c <send_desired+0x968>
    a580:	f24c 3319 	movw	r3, #49945	; 0xc319
    a584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a588:	2200      	movs	r2, #0
    a58a:	701a      	strb	r2, [r3, #0]
    a58c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a594:	781b      	ldrb	r3, [r3, #0]
    a596:	461a      	mov	r2, r3
    a598:	f24c 6394 	movw	r3, #50836	; 0xc694
    a59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a0:	7899      	ldrb	r1, [r3, #2]
    a5a2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5aa:	5499      	strb	r1, [r3, r2]
    a5ac:	4bae      	ldr	r3, [pc, #696]	; (a868 <send_desired+0xc44>)
    a5ae:	781a      	ldrb	r2, [r3, #0]
    a5b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b8:	781b      	ldrb	r3, [r3, #0]
    a5ba:	4413      	add	r3, r2
    a5bc:	b2da      	uxtb	r2, r3
    a5be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c6:	701a      	strb	r2, [r3, #0]
    a5c8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d0:	781a      	ldrb	r2, [r3, #0]
    a5d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5da:	781b      	ldrb	r3, [r3, #0]
    a5dc:	4413      	add	r3, r2
    a5de:	b2da      	uxtb	r2, r3
    a5e0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e8:	701a      	strb	r2, [r3, #0]
    a5ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f2:	781b      	ldrb	r3, [r3, #0]
    a5f4:	3301      	adds	r3, #1
    a5f6:	b2da      	uxtb	r2, r3
    a5f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a600:	701a      	strb	r2, [r3, #0]
    a602:	f24c 3319 	movw	r3, #49945	; 0xc319
    a606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a60a:	781b      	ldrb	r3, [r3, #0]
    a60c:	2bff      	cmp	r3, #255	; 0xff
    a60e:	d105      	bne.n	a61c <send_desired+0x9f8>
    a610:	f24c 3319 	movw	r3, #49945	; 0xc319
    a614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a618:	2200      	movs	r2, #0
    a61a:	701a      	strb	r2, [r3, #0]
    a61c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a624:	781b      	ldrb	r3, [r3, #0]
    a626:	461a      	mov	r2, r3
    a628:	f24c 6394 	movw	r3, #50836	; 0xc694
    a62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a630:	78d9      	ldrb	r1, [r3, #3]
    a632:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a63a:	5499      	strb	r1, [r3, r2]
    a63c:	4b8b      	ldr	r3, [pc, #556]	; (a86c <send_desired+0xc48>)
    a63e:	781a      	ldrb	r2, [r3, #0]
    a640:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a648:	781b      	ldrb	r3, [r3, #0]
    a64a:	4413      	add	r3, r2
    a64c:	b2da      	uxtb	r2, r3
    a64e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a656:	701a      	strb	r2, [r3, #0]
    a658:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a660:	781a      	ldrb	r2, [r3, #0]
    a662:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a66a:	781b      	ldrb	r3, [r3, #0]
    a66c:	4413      	add	r3, r2
    a66e:	b2da      	uxtb	r2, r3
    a670:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a678:	701a      	strb	r2, [r3, #0]
    a67a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a682:	781b      	ldrb	r3, [r3, #0]
    a684:	3301      	adds	r3, #1
    a686:	b2da      	uxtb	r2, r3
    a688:	f24c 3319 	movw	r3, #49945	; 0xc319
    a68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a690:	701a      	strb	r2, [r3, #0]
    a692:	f24c 3319 	movw	r3, #49945	; 0xc319
    a696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a69a:	781b      	ldrb	r3, [r3, #0]
    a69c:	2bff      	cmp	r3, #255	; 0xff
    a69e:	d105      	bne.n	a6ac <send_desired+0xa88>
    a6a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a8:	2200      	movs	r2, #0
    a6aa:	701a      	strb	r2, [r3, #0]
    a6ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b4:	781b      	ldrb	r3, [r3, #0]
    a6b6:	461a      	mov	r2, r3
    a6b8:	f240 5374 	movw	r3, #1396	; 0x574
    a6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c0:	7819      	ldrb	r1, [r3, #0]
    a6c2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ca:	5499      	strb	r1, [r3, r2]
    a6cc:	f240 5374 	movw	r3, #1396	; 0x574
    a6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6d4:	781a      	ldrb	r2, [r3, #0]
    a6d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6de:	781b      	ldrb	r3, [r3, #0]
    a6e0:	4413      	add	r3, r2
    a6e2:	b2da      	uxtb	r2, r3
    a6e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ec:	701a      	strb	r2, [r3, #0]
    a6ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f6:	781a      	ldrb	r2, [r3, #0]
    a6f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a700:	781b      	ldrb	r3, [r3, #0]
    a702:	4413      	add	r3, r2
    a704:	b2da      	uxtb	r2, r3
    a706:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a70e:	701a      	strb	r2, [r3, #0]
    a710:	f24c 3319 	movw	r3, #49945	; 0xc319
    a714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a718:	781b      	ldrb	r3, [r3, #0]
    a71a:	3301      	adds	r3, #1
    a71c:	b2da      	uxtb	r2, r3
    a71e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a726:	701a      	strb	r2, [r3, #0]
    a728:	f24c 3319 	movw	r3, #49945	; 0xc319
    a72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a730:	781b      	ldrb	r3, [r3, #0]
    a732:	2bff      	cmp	r3, #255	; 0xff
    a734:	d105      	bne.n	a742 <send_desired+0xb1e>
    a736:	f24c 3319 	movw	r3, #49945	; 0xc319
    a73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a73e:	2200      	movs	r2, #0
    a740:	701a      	strb	r2, [r3, #0]
    a742:	f24c 3319 	movw	r3, #49945	; 0xc319
    a746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a74a:	781b      	ldrb	r3, [r3, #0]
    a74c:	461a      	mov	r2, r3
    a74e:	f240 5374 	movw	r3, #1396	; 0x574
    a752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a756:	7859      	ldrb	r1, [r3, #1]
    a758:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a760:	5499      	strb	r1, [r3, r2]
    a762:	4b43      	ldr	r3, [pc, #268]	; (a870 <send_desired+0xc4c>)
    a764:	781a      	ldrb	r2, [r3, #0]
    a766:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a76e:	781b      	ldrb	r3, [r3, #0]
    a770:	4413      	add	r3, r2
    a772:	b2da      	uxtb	r2, r3
    a774:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a77c:	701a      	strb	r2, [r3, #0]
    a77e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a786:	781a      	ldrb	r2, [r3, #0]
    a788:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a790:	781b      	ldrb	r3, [r3, #0]
    a792:	4413      	add	r3, r2
    a794:	b2da      	uxtb	r2, r3
    a796:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a79e:	701a      	strb	r2, [r3, #0]
    a7a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a8:	781b      	ldrb	r3, [r3, #0]
    a7aa:	3301      	adds	r3, #1
    a7ac:	b2da      	uxtb	r2, r3
    a7ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b6:	701a      	strb	r2, [r3, #0]
    a7b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c0:	781b      	ldrb	r3, [r3, #0]
    a7c2:	2bff      	cmp	r3, #255	; 0xff
    a7c4:	d105      	bne.n	a7d2 <send_desired+0xbae>
    a7c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ce:	2200      	movs	r2, #0
    a7d0:	701a      	strb	r2, [r3, #0]
    a7d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7da:	781b      	ldrb	r3, [r3, #0]
    a7dc:	461a      	mov	r2, r3
    a7de:	f240 5374 	movw	r3, #1396	; 0x574
    a7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7e6:	7899      	ldrb	r1, [r3, #2]
    a7e8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f0:	5499      	strb	r1, [r3, r2]
    a7f2:	4b20      	ldr	r3, [pc, #128]	; (a874 <send_desired+0xc50>)
    a7f4:	781a      	ldrb	r2, [r3, #0]
    a7f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7fe:	781b      	ldrb	r3, [r3, #0]
    a800:	4413      	add	r3, r2
    a802:	b2da      	uxtb	r2, r3
    a804:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a80c:	701a      	strb	r2, [r3, #0]
    a80e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a816:	781a      	ldrb	r2, [r3, #0]
    a818:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a820:	781b      	ldrb	r3, [r3, #0]
    a822:	4413      	add	r3, r2
    a824:	b2da      	uxtb	r2, r3
    a826:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a82e:	701a      	strb	r2, [r3, #0]
    a830:	f24c 3319 	movw	r3, #49945	; 0xc319
    a834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a838:	781b      	ldrb	r3, [r3, #0]
    a83a:	3301      	adds	r3, #1
    a83c:	b2da      	uxtb	r2, r3
    a83e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a846:	701a      	strb	r2, [r3, #0]
    a848:	f24c 3319 	movw	r3, #49945	; 0xc319
    a84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a850:	781b      	ldrb	r3, [r3, #0]
    a852:	2bff      	cmp	r3, #255	; 0xff
    a854:	d110      	bne.n	a878 <send_desired+0xc54>
    a856:	f24c 3319 	movw	r3, #49945	; 0xc319
    a85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a85e:	2200      	movs	r2, #0
    a860:	701a      	strb	r2, [r3, #0]
    a862:	e009      	b.n	a878 <send_desired+0xc54>
    a864:	2004c695 	.word	0x2004c695
    a868:	2004c696 	.word	0x2004c696
    a86c:	2004c697 	.word	0x2004c697
    a870:	20000575 	.word	0x20000575
    a874:	20000576 	.word	0x20000576
    a878:	f24c 3319 	movw	r3, #49945	; 0xc319
    a87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a880:	781b      	ldrb	r3, [r3, #0]
    a882:	461a      	mov	r2, r3
    a884:	f240 5374 	movw	r3, #1396	; 0x574
    a888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a88c:	78d9      	ldrb	r1, [r3, #3]
    a88e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a896:	5499      	strb	r1, [r3, r2]
    a898:	4b79      	ldr	r3, [pc, #484]	; (aa80 <send_desired+0xe5c>)
    a89a:	781a      	ldrb	r2, [r3, #0]
    a89c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a4:	781b      	ldrb	r3, [r3, #0]
    a8a6:	4413      	add	r3, r2
    a8a8:	b2da      	uxtb	r2, r3
    a8aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b2:	701a      	strb	r2, [r3, #0]
    a8b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8bc:	781a      	ldrb	r2, [r3, #0]
    a8be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c6:	781b      	ldrb	r3, [r3, #0]
    a8c8:	4413      	add	r3, r2
    a8ca:	b2da      	uxtb	r2, r3
    a8cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d4:	701a      	strb	r2, [r3, #0]
    a8d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8de:	781b      	ldrb	r3, [r3, #0]
    a8e0:	3301      	adds	r3, #1
    a8e2:	b2da      	uxtb	r2, r3
    a8e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ec:	701a      	strb	r2, [r3, #0]
    a8ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f6:	781b      	ldrb	r3, [r3, #0]
    a8f8:	2bff      	cmp	r3, #255	; 0xff
    a8fa:	d105      	bne.n	a908 <send_desired+0xce4>
    a8fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a904:	2200      	movs	r2, #0
    a906:	701a      	strb	r2, [r3, #0]
    a908:	f24c 3319 	movw	r3, #49945	; 0xc319
    a90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a910:	781b      	ldrb	r3, [r3, #0]
    a912:	461a      	mov	r2, r3
    a914:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a91c:	7819      	ldrb	r1, [r3, #0]
    a91e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a926:	5499      	strb	r1, [r3, r2]
    a928:	f24c 3319 	movw	r3, #49945	; 0xc319
    a92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a930:	781b      	ldrb	r3, [r3, #0]
    a932:	3301      	adds	r3, #1
    a934:	b2da      	uxtb	r2, r3
    a936:	f24c 3319 	movw	r3, #49945	; 0xc319
    a93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a93e:	701a      	strb	r2, [r3, #0]
    a940:	f24c 3319 	movw	r3, #49945	; 0xc319
    a944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a948:	781b      	ldrb	r3, [r3, #0]
    a94a:	2bff      	cmp	r3, #255	; 0xff
    a94c:	d105      	bne.n	a95a <send_desired+0xd36>
    a94e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a956:	2200      	movs	r2, #0
    a958:	701a      	strb	r2, [r3, #0]
    a95a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a962:	781b      	ldrb	r3, [r3, #0]
    a964:	461a      	mov	r2, r3
    a966:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a96e:	7819      	ldrb	r1, [r3, #0]
    a970:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a978:	5499      	strb	r1, [r3, r2]
    a97a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a97e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a982:	781b      	ldrb	r3, [r3, #0]
    a984:	3301      	adds	r3, #1
    a986:	b2da      	uxtb	r2, r3
    a988:	f24c 3319 	movw	r3, #49945	; 0xc319
    a98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a990:	701a      	strb	r2, [r3, #0]
    a992:	f24c 3319 	movw	r3, #49945	; 0xc319
    a996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a99a:	781b      	ldrb	r3, [r3, #0]
    a99c:	2bff      	cmp	r3, #255	; 0xff
    a99e:	d105      	bne.n	a9ac <send_desired+0xd88>
    a9a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a8:	2200      	movs	r2, #0
    a9aa:	701a      	strb	r2, [r3, #0]
    a9ac:	f242 0339 	movw	r3, #8249	; 0x2039
    a9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b4:	781b      	ldrb	r3, [r3, #0]
    a9b6:	b2db      	uxtb	r3, r3
    a9b8:	f003 0310 	and.w	r3, r3, #16
    a9bc:	2b00      	cmp	r3, #0
    a9be:	d15a      	bne.n	aa76 <send_desired+0xe52>
    a9c0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    a9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c8:	781b      	ldrb	r3, [r3, #0]
    a9ca:	b2db      	uxtb	r3, r3
    a9cc:	461a      	mov	r2, r3
    a9ce:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d6:	5c9a      	ldrb	r2, [r3, r2]
    a9d8:	f24c 431b 	movw	r3, #50203	; 0xc41b
    a9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e0:	701a      	strb	r2, [r3, #0]
    a9e2:	f24c 431c 	movw	r3, #50204	; 0xc41c
    a9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ea:	2200      	movs	r2, #0
    a9ec:	701a      	strb	r2, [r3, #0]
    a9ee:	f24c 331a 	movw	r3, #49946	; 0xc31a
    a9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f6:	781b      	ldrb	r3, [r3, #0]
    a9f8:	b2db      	uxtb	r3, r3
    a9fa:	3301      	adds	r3, #1
    a9fc:	b2da      	uxtb	r2, r3
    a9fe:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aa02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa06:	701a      	strb	r2, [r3, #0]
    aa08:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aa0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa10:	781b      	ldrb	r3, [r3, #0]
    aa12:	b2db      	uxtb	r3, r3
    aa14:	2bff      	cmp	r3, #255	; 0xff
    aa16:	d105      	bne.n	aa24 <send_desired+0xe00>
    aa18:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aa1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa20:	2200      	movs	r2, #0
    aa22:	701a      	strb	r2, [r3, #0]
    aa24:	f242 0338 	movw	r3, #8248	; 0x2038
    aa28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa2c:	f242 0238 	movw	r2, #8248	; 0x2038
    aa30:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aa34:	7812      	ldrb	r2, [r2, #0]
    aa36:	b2d2      	uxtb	r2, r2
    aa38:	f042 0201 	orr.w	r2, r2, #1
    aa3c:	b2d2      	uxtb	r2, r2
    aa3e:	701a      	strb	r2, [r3, #0]
    aa40:	f242 0339 	movw	r3, #8249	; 0x2039
    aa44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa48:	f242 0239 	movw	r2, #8249	; 0x2039
    aa4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aa50:	7812      	ldrb	r2, [r2, #0]
    aa52:	b2d2      	uxtb	r2, r2
    aa54:	f042 0210 	orr.w	r2, r2, #16
    aa58:	b2d2      	uxtb	r2, r2
    aa5a:	701a      	strb	r2, [r3, #0]
    aa5c:	e00b      	b.n	aa76 <send_desired+0xe52>
    aa5e:	f24c 3318 	movw	r3, #49944	; 0xc318
    aa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa66:	781b      	ldrb	r3, [r3, #0]
    aa68:	3301      	adds	r3, #1
    aa6a:	b2da      	uxtb	r2, r3
    aa6c:	f24c 3318 	movw	r3, #49944	; 0xc318
    aa70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa74:	701a      	strb	r2, [r3, #0]
}
    aa76:	46bd      	mov	sp, r7
    aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa7c:	4770      	bx	lr
    aa7e:	bf00      	nop
    aa80:	20000577 	.word	0x20000577

0000aa84 <send_bat>:
void send_bat(void){  //2000ms
    aa84:	b480      	push	{r7}
    aa86:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    aa88:	f24c 3311 	movw	r3, #49937	; 0xc311
    aa8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa90:	781a      	ldrb	r2, [r3, #0]
    aa92:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    aa96:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    aa9a:	fba3 1302 	umull	r1, r3, r3, r2
    aa9e:	0919      	lsrs	r1, r3, #4
    aaa0:	460b      	mov	r3, r1
    aaa2:	009b      	lsls	r3, r3, #2
    aaa4:	440b      	add	r3, r1
    aaa6:	009b      	lsls	r3, r3, #2
    aaa8:	1ad3      	subs	r3, r2, r3
    aaaa:	b2db      	uxtb	r3, r3
    aaac:	2b08      	cmp	r3, #8
    aaae:	f040 839a 	bne.w	b1e6 <send_bat+0x762>
    aab2:	f24c 3319 	movw	r3, #49945	; 0xc319
    aab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaba:	781a      	ldrb	r2, [r3, #0]
    aabc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac4:	781b      	ldrb	r3, [r3, #0]
    aac6:	b2db      	uxtb	r3, r3
    aac8:	429a      	cmp	r2, r3
    aaca:	d313      	bcc.n	aaf4 <send_bat+0x70>
    aacc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad4:	781b      	ldrb	r3, [r3, #0]
    aad6:	b2db      	uxtb	r3, r3
    aad8:	461a      	mov	r2, r3
    aada:	f24c 3319 	movw	r3, #49945	; 0xc319
    aade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae2:	781b      	ldrb	r3, [r3, #0]
    aae4:	1ad3      	subs	r3, r2, r3
    aae6:	33ff      	adds	r3, #255	; 0xff
    aae8:	2b0c      	cmp	r3, #12
    aaea:	bfd4      	ite	le
    aaec:	2300      	movle	r3, #0
    aaee:	2301      	movgt	r3, #1
    aaf0:	b2db      	uxtb	r3, r3
    aaf2:	e011      	b.n	ab18 <send_bat+0x94>
    aaf4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aaf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aafc:	781b      	ldrb	r3, [r3, #0]
    aafe:	b2db      	uxtb	r3, r3
    ab00:	461a      	mov	r2, r3
    ab02:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab0a:	781b      	ldrb	r3, [r3, #0]
    ab0c:	1ad3      	subs	r3, r2, r3
    ab0e:	2b0c      	cmp	r3, #12
    ab10:	bfd4      	ite	le
    ab12:	2300      	movle	r3, #0
    ab14:	2301      	movgt	r3, #1
    ab16:	b2db      	uxtb	r3, r3
    ab18:	2b00      	cmp	r3, #0
    ab1a:	f000 8358 	beq.w	b1ce <send_bat+0x74a>
    ab1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab26:	781b      	ldrb	r3, [r3, #0]
    ab28:	461a      	mov	r2, r3
    ab2a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ab2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab32:	2105      	movs	r1, #5
    ab34:	5499      	strb	r1, [r3, r2]
    ab36:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab3e:	781b      	ldrb	r3, [r3, #0]
    ab40:	3301      	adds	r3, #1
    ab42:	b2da      	uxtb	r2, r3
    ab44:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab4c:	701a      	strb	r2, [r3, #0]
    ab4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab56:	781b      	ldrb	r3, [r3, #0]
    ab58:	2bff      	cmp	r3, #255	; 0xff
    ab5a:	d105      	bne.n	ab68 <send_bat+0xe4>
    ab5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab64:	2200      	movs	r2, #0
    ab66:	701a      	strb	r2, [r3, #0]
    ab68:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab70:	781b      	ldrb	r3, [r3, #0]
    ab72:	461a      	mov	r2, r3
    ab74:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ab78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab7c:	210c      	movs	r1, #12
    ab7e:	5499      	strb	r1, [r3, r2]
    ab80:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab88:	781b      	ldrb	r3, [r3, #0]
    ab8a:	3301      	adds	r3, #1
    ab8c:	b2da      	uxtb	r2, r3
    ab8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab96:	701a      	strb	r2, [r3, #0]
    ab98:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba0:	781b      	ldrb	r3, [r3, #0]
    aba2:	2bff      	cmp	r3, #255	; 0xff
    aba4:	d105      	bne.n	abb2 <send_bat+0x12e>
    aba6:	f24c 3319 	movw	r3, #49945	; 0xc319
    abaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abae:	2200      	movs	r2, #0
    abb0:	701a      	strb	r2, [r3, #0]
    abb2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    abb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abba:	220c      	movs	r2, #12
    abbc:	701a      	strb	r2, [r3, #0]
    abbe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    abc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc6:	220c      	movs	r2, #12
    abc8:	701a      	strb	r2, [r3, #0]
    abca:	f24c 3319 	movw	r3, #49945	; 0xc319
    abce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd2:	781b      	ldrb	r3, [r3, #0]
    abd4:	461a      	mov	r2, r3
    abd6:	f24c 3302 	movw	r3, #49922	; 0xc302
    abda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abde:	7819      	ldrb	r1, [r3, #0]
    abe0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    abe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe8:	5499      	strb	r1, [r3, r2]
    abea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    abee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf2:	781a      	ldrb	r2, [r3, #0]
    abf4:	f24c 3302 	movw	r3, #49922	; 0xc302
    abf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfc:	781b      	ldrb	r3, [r3, #0]
    abfe:	4413      	add	r3, r2
    ac00:	b2da      	uxtb	r2, r3
    ac02:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0a:	701a      	strb	r2, [r3, #0]
    ac0c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ac10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac14:	781a      	ldrb	r2, [r3, #0]
    ac16:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1e:	781b      	ldrb	r3, [r3, #0]
    ac20:	4413      	add	r3, r2
    ac22:	b2da      	uxtb	r2, r3
    ac24:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ac28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac2c:	701a      	strb	r2, [r3, #0]
    ac2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac36:	781b      	ldrb	r3, [r3, #0]
    ac38:	3301      	adds	r3, #1
    ac3a:	b2da      	uxtb	r2, r3
    ac3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac44:	701a      	strb	r2, [r3, #0]
    ac46:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac4e:	781b      	ldrb	r3, [r3, #0]
    ac50:	2bff      	cmp	r3, #255	; 0xff
    ac52:	d105      	bne.n	ac60 <send_bat+0x1dc>
    ac54:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5c:	2200      	movs	r2, #0
    ac5e:	701a      	strb	r2, [r3, #0]
    ac60:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac68:	781b      	ldrb	r3, [r3, #0]
    ac6a:	461a      	mov	r2, r3
    ac6c:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ac70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac74:	7819      	ldrb	r1, [r3, #0]
    ac76:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ac7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac7e:	5499      	strb	r1, [r3, r2]
    ac80:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ac84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac88:	781a      	ldrb	r2, [r3, #0]
    ac8a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac92:	781b      	ldrb	r3, [r3, #0]
    ac94:	4413      	add	r3, r2
    ac96:	b2da      	uxtb	r2, r3
    ac98:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca0:	701a      	strb	r2, [r3, #0]
    aca2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acaa:	781a      	ldrb	r2, [r3, #0]
    acac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    acb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb4:	781b      	ldrb	r3, [r3, #0]
    acb6:	4413      	add	r3, r2
    acb8:	b2da      	uxtb	r2, r3
    acba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    acbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc2:	701a      	strb	r2, [r3, #0]
    acc4:	f24c 3319 	movw	r3, #49945	; 0xc319
    acc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    accc:	781b      	ldrb	r3, [r3, #0]
    acce:	3301      	adds	r3, #1
    acd0:	b2da      	uxtb	r2, r3
    acd2:	f24c 3319 	movw	r3, #49945	; 0xc319
    acd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acda:	701a      	strb	r2, [r3, #0]
    acdc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ace0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace4:	781b      	ldrb	r3, [r3, #0]
    ace6:	2bff      	cmp	r3, #255	; 0xff
    ace8:	d105      	bne.n	acf6 <send_bat+0x272>
    acea:	f24c 3319 	movw	r3, #49945	; 0xc319
    acee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf2:	2200      	movs	r2, #0
    acf4:	701a      	strb	r2, [r3, #0]
    acf6:	f24c 3319 	movw	r3, #49945	; 0xc319
    acfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acfe:	781b      	ldrb	r3, [r3, #0]
    ad00:	461a      	mov	r2, r3
    ad02:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ad06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0a:	7859      	ldrb	r1, [r3, #1]
    ad0c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ad10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad14:	5499      	strb	r1, [r3, r2]
    ad16:	4bd5      	ldr	r3, [pc, #852]	; (b06c <send_bat+0x5e8>)
    ad18:	781a      	ldrb	r2, [r3, #0]
    ad1a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad22:	781b      	ldrb	r3, [r3, #0]
    ad24:	4413      	add	r3, r2
    ad26:	b2da      	uxtb	r2, r3
    ad28:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad30:	701a      	strb	r2, [r3, #0]
    ad32:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3a:	781a      	ldrb	r2, [r3, #0]
    ad3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad44:	781b      	ldrb	r3, [r3, #0]
    ad46:	4413      	add	r3, r2
    ad48:	b2da      	uxtb	r2, r3
    ad4a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad52:	701a      	strb	r2, [r3, #0]
    ad54:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad5c:	781b      	ldrb	r3, [r3, #0]
    ad5e:	3301      	adds	r3, #1
    ad60:	b2da      	uxtb	r2, r3
    ad62:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6a:	701a      	strb	r2, [r3, #0]
    ad6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad74:	781b      	ldrb	r3, [r3, #0]
    ad76:	2bff      	cmp	r3, #255	; 0xff
    ad78:	d105      	bne.n	ad86 <send_bat+0x302>
    ad7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad82:	2200      	movs	r2, #0
    ad84:	701a      	strb	r2, [r3, #0]
    ad86:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8e:	781b      	ldrb	r3, [r3, #0]
    ad90:	461a      	mov	r2, r3
    ad92:	f24c 3305 	movw	r3, #49925	; 0xc305
    ad96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad9a:	7819      	ldrb	r1, [r3, #0]
    ad9c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ada0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada4:	5499      	strb	r1, [r3, r2]
    ada6:	f24c 3305 	movw	r3, #49925	; 0xc305
    adaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adae:	781a      	ldrb	r2, [r3, #0]
    adb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    adb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb8:	781b      	ldrb	r3, [r3, #0]
    adba:	4413      	add	r3, r2
    adbc:	b2da      	uxtb	r2, r3
    adbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    adc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc6:	701a      	strb	r2, [r3, #0]
    adc8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    adcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add0:	781a      	ldrb	r2, [r3, #0]
    add2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    add6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adda:	781b      	ldrb	r3, [r3, #0]
    addc:	4413      	add	r3, r2
    adde:	b2da      	uxtb	r2, r3
    ade0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ade4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade8:	701a      	strb	r2, [r3, #0]
    adea:	f24c 3319 	movw	r3, #49945	; 0xc319
    adee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf2:	781b      	ldrb	r3, [r3, #0]
    adf4:	3301      	adds	r3, #1
    adf6:	b2da      	uxtb	r2, r3
    adf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    adfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae00:	701a      	strb	r2, [r3, #0]
    ae02:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae0a:	781b      	ldrb	r3, [r3, #0]
    ae0c:	2bff      	cmp	r3, #255	; 0xff
    ae0e:	d105      	bne.n	ae1c <send_bat+0x398>
    ae10:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae18:	2200      	movs	r2, #0
    ae1a:	701a      	strb	r2, [r3, #0]
    ae1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae24:	781b      	ldrb	r3, [r3, #0]
    ae26:	461a      	mov	r2, r3
    ae28:	f24c 6386 	movw	r3, #50822	; 0xc686
    ae2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae30:	7819      	ldrb	r1, [r3, #0]
    ae32:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ae36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae3a:	5499      	strb	r1, [r3, r2]
    ae3c:	f24c 6386 	movw	r3, #50822	; 0xc686
    ae40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae44:	781a      	ldrb	r2, [r3, #0]
    ae46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4e:	781b      	ldrb	r3, [r3, #0]
    ae50:	4413      	add	r3, r2
    ae52:	b2da      	uxtb	r2, r3
    ae54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5c:	701a      	strb	r2, [r3, #0]
    ae5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae66:	781a      	ldrb	r2, [r3, #0]
    ae68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae70:	781b      	ldrb	r3, [r3, #0]
    ae72:	4413      	add	r3, r2
    ae74:	b2da      	uxtb	r2, r3
    ae76:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7e:	701a      	strb	r2, [r3, #0]
    ae80:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae88:	781b      	ldrb	r3, [r3, #0]
    ae8a:	3301      	adds	r3, #1
    ae8c:	b2da      	uxtb	r2, r3
    ae8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae96:	701a      	strb	r2, [r3, #0]
    ae98:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea0:	781b      	ldrb	r3, [r3, #0]
    aea2:	2bff      	cmp	r3, #255	; 0xff
    aea4:	d105      	bne.n	aeb2 <send_bat+0x42e>
    aea6:	f24c 3319 	movw	r3, #49945	; 0xc319
    aeaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeae:	2200      	movs	r2, #0
    aeb0:	701a      	strb	r2, [r3, #0]
    aeb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    aeb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeba:	781b      	ldrb	r3, [r3, #0]
    aebc:	461a      	mov	r2, r3
    aebe:	f24c 6386 	movw	r3, #50822	; 0xc686
    aec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec6:	7859      	ldrb	r1, [r3, #1]
    aec8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed0:	5499      	strb	r1, [r3, r2]
    aed2:	4b67      	ldr	r3, [pc, #412]	; (b070 <send_bat+0x5ec>)
    aed4:	781a      	ldrb	r2, [r3, #0]
    aed6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aeda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aede:	781b      	ldrb	r3, [r3, #0]
    aee0:	4413      	add	r3, r2
    aee2:	b2da      	uxtb	r2, r3
    aee4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeec:	701a      	strb	r2, [r3, #0]
    aeee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef6:	781a      	ldrb	r2, [r3, #0]
    aef8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af00:	781b      	ldrb	r3, [r3, #0]
    af02:	4413      	add	r3, r2
    af04:	b2da      	uxtb	r2, r3
    af06:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af0e:	701a      	strb	r2, [r3, #0]
    af10:	f24c 3319 	movw	r3, #49945	; 0xc319
    af14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af18:	781b      	ldrb	r3, [r3, #0]
    af1a:	3301      	adds	r3, #1
    af1c:	b2da      	uxtb	r2, r3
    af1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    af22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af26:	701a      	strb	r2, [r3, #0]
    af28:	f24c 3319 	movw	r3, #49945	; 0xc319
    af2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af30:	781b      	ldrb	r3, [r3, #0]
    af32:	2bff      	cmp	r3, #255	; 0xff
    af34:	d105      	bne.n	af42 <send_bat+0x4be>
    af36:	f24c 3319 	movw	r3, #49945	; 0xc319
    af3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af3e:	2200      	movs	r2, #0
    af40:	701a      	strb	r2, [r3, #0]
    af42:	f24c 3319 	movw	r3, #49945	; 0xc319
    af46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4a:	781b      	ldrb	r3, [r3, #0]
    af4c:	461a      	mov	r2, r3
    af4e:	f24c 6384 	movw	r3, #50820	; 0xc684
    af52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af56:	7819      	ldrb	r1, [r3, #0]
    af58:	f24c 331c 	movw	r3, #49948	; 0xc31c
    af5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af60:	5499      	strb	r1, [r3, r2]
    af62:	f24c 6384 	movw	r3, #50820	; 0xc684
    af66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af6a:	781a      	ldrb	r2, [r3, #0]
    af6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af74:	781b      	ldrb	r3, [r3, #0]
    af76:	4413      	add	r3, r2
    af78:	b2da      	uxtb	r2, r3
    af7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af82:	701a      	strb	r2, [r3, #0]
    af84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af8c:	781a      	ldrb	r2, [r3, #0]
    af8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af96:	781b      	ldrb	r3, [r3, #0]
    af98:	4413      	add	r3, r2
    af9a:	b2da      	uxtb	r2, r3
    af9c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    afa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa4:	701a      	strb	r2, [r3, #0]
    afa6:	f24c 3319 	movw	r3, #49945	; 0xc319
    afaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afae:	781b      	ldrb	r3, [r3, #0]
    afb0:	3301      	adds	r3, #1
    afb2:	b2da      	uxtb	r2, r3
    afb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    afb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbc:	701a      	strb	r2, [r3, #0]
    afbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    afc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc6:	781b      	ldrb	r3, [r3, #0]
    afc8:	2bff      	cmp	r3, #255	; 0xff
    afca:	d105      	bne.n	afd8 <send_bat+0x554>
    afcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    afd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd4:	2200      	movs	r2, #0
    afd6:	701a      	strb	r2, [r3, #0]
    afd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    afdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe0:	781b      	ldrb	r3, [r3, #0]
    afe2:	461a      	mov	r2, r3
    afe4:	f24c 6384 	movw	r3, #50820	; 0xc684
    afe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afec:	7859      	ldrb	r1, [r3, #1]
    afee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff6:	5499      	strb	r1, [r3, r2]
    aff8:	4b1e      	ldr	r3, [pc, #120]	; (b074 <send_bat+0x5f0>)
    affa:	781a      	ldrb	r2, [r3, #0]
    affc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b004:	781b      	ldrb	r3, [r3, #0]
    b006:	4413      	add	r3, r2
    b008:	b2da      	uxtb	r2, r3
    b00a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b012:	701a      	strb	r2, [r3, #0]
    b014:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01c:	781a      	ldrb	r2, [r3, #0]
    b01e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b026:	781b      	ldrb	r3, [r3, #0]
    b028:	4413      	add	r3, r2
    b02a:	b2da      	uxtb	r2, r3
    b02c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b034:	701a      	strb	r2, [r3, #0]
    b036:	f24c 3319 	movw	r3, #49945	; 0xc319
    b03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b03e:	781b      	ldrb	r3, [r3, #0]
    b040:	3301      	adds	r3, #1
    b042:	b2da      	uxtb	r2, r3
    b044:	f24c 3319 	movw	r3, #49945	; 0xc319
    b048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04c:	701a      	strb	r2, [r3, #0]
    b04e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b056:	781b      	ldrb	r3, [r3, #0]
    b058:	2bff      	cmp	r3, #255	; 0xff
    b05a:	d10d      	bne.n	b078 <send_bat+0x5f4>
    b05c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b064:	2200      	movs	r2, #0
    b066:	701a      	strb	r2, [r3, #0]
    b068:	e006      	b.n	b078 <send_bat+0x5f4>
    b06a:	bf00      	nop
    b06c:	2004c8fd 	.word	0x2004c8fd
    b070:	2004c687 	.word	0x2004c687
    b074:	2004c685 	.word	0x2004c685
    b078:	f24c 3319 	movw	r3, #49945	; 0xc319
    b07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b080:	781b      	ldrb	r3, [r3, #0]
    b082:	461a      	mov	r2, r3
    b084:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b08c:	7819      	ldrb	r1, [r3, #0]
    b08e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b096:	5499      	strb	r1, [r3, r2]
    b098:	f24c 3319 	movw	r3, #49945	; 0xc319
    b09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a0:	781b      	ldrb	r3, [r3, #0]
    b0a2:	3301      	adds	r3, #1
    b0a4:	b2da      	uxtb	r2, r3
    b0a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ae:	701a      	strb	r2, [r3, #0]
    b0b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b8:	781b      	ldrb	r3, [r3, #0]
    b0ba:	2bff      	cmp	r3, #255	; 0xff
    b0bc:	d105      	bne.n	b0ca <send_bat+0x646>
    b0be:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c6:	2200      	movs	r2, #0
    b0c8:	701a      	strb	r2, [r3, #0]
    b0ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d2:	781b      	ldrb	r3, [r3, #0]
    b0d4:	461a      	mov	r2, r3
    b0d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0de:	7819      	ldrb	r1, [r3, #0]
    b0e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e8:	5499      	strb	r1, [r3, r2]
    b0ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f2:	781b      	ldrb	r3, [r3, #0]
    b0f4:	3301      	adds	r3, #1
    b0f6:	b2da      	uxtb	r2, r3
    b0f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b100:	701a      	strb	r2, [r3, #0]
    b102:	f24c 3319 	movw	r3, #49945	; 0xc319
    b106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b10a:	781b      	ldrb	r3, [r3, #0]
    b10c:	2bff      	cmp	r3, #255	; 0xff
    b10e:	d105      	bne.n	b11c <send_bat+0x698>
    b110:	f24c 3319 	movw	r3, #49945	; 0xc319
    b114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b118:	2200      	movs	r2, #0
    b11a:	701a      	strb	r2, [r3, #0]
    b11c:	f242 0339 	movw	r3, #8249	; 0x2039
    b120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b124:	781b      	ldrb	r3, [r3, #0]
    b126:	b2db      	uxtb	r3, r3
    b128:	f003 0310 	and.w	r3, r3, #16
    b12c:	2b00      	cmp	r3, #0
    b12e:	d15a      	bne.n	b1e6 <send_bat+0x762>
    b130:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b138:	781b      	ldrb	r3, [r3, #0]
    b13a:	b2db      	uxtb	r3, r3
    b13c:	461a      	mov	r2, r3
    b13e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b146:	5c9a      	ldrb	r2, [r3, r2]
    b148:	f24c 431b 	movw	r3, #50203	; 0xc41b
    b14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b150:	701a      	strb	r2, [r3, #0]
    b152:	f24c 431c 	movw	r3, #50204	; 0xc41c
    b156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b15a:	2200      	movs	r2, #0
    b15c:	701a      	strb	r2, [r3, #0]
    b15e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b166:	781b      	ldrb	r3, [r3, #0]
    b168:	b2db      	uxtb	r3, r3
    b16a:	3301      	adds	r3, #1
    b16c:	b2da      	uxtb	r2, r3
    b16e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b176:	701a      	strb	r2, [r3, #0]
    b178:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b180:	781b      	ldrb	r3, [r3, #0]
    b182:	b2db      	uxtb	r3, r3
    b184:	2bff      	cmp	r3, #255	; 0xff
    b186:	d105      	bne.n	b194 <send_bat+0x710>
    b188:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b190:	2200      	movs	r2, #0
    b192:	701a      	strb	r2, [r3, #0]
    b194:	f242 0338 	movw	r3, #8248	; 0x2038
    b198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b19c:	f242 0238 	movw	r2, #8248	; 0x2038
    b1a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b1a4:	7812      	ldrb	r2, [r2, #0]
    b1a6:	b2d2      	uxtb	r2, r2
    b1a8:	f042 0201 	orr.w	r2, r2, #1
    b1ac:	b2d2      	uxtb	r2, r2
    b1ae:	701a      	strb	r2, [r3, #0]
    b1b0:	f242 0339 	movw	r3, #8249	; 0x2039
    b1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b8:	f242 0239 	movw	r2, #8249	; 0x2039
    b1bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b1c0:	7812      	ldrb	r2, [r2, #0]
    b1c2:	b2d2      	uxtb	r2, r2
    b1c4:	f042 0210 	orr.w	r2, r2, #16
    b1c8:	b2d2      	uxtb	r2, r2
    b1ca:	701a      	strb	r2, [r3, #0]
    b1cc:	e00b      	b.n	b1e6 <send_bat+0x762>
    b1ce:	f24c 3318 	movw	r3, #49944	; 0xc318
    b1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d6:	781b      	ldrb	r3, [r3, #0]
    b1d8:	3301      	adds	r3, #1
    b1da:	b2da      	uxtb	r2, r3
    b1dc:	f24c 3318 	movw	r3, #49944	; 0xc318
    b1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e4:	701a      	strb	r2, [r3, #0]
}
    b1e6:	46bd      	mov	sp, r7
    b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1ec:	4770      	bx	lr
    b1ee:	bf00      	nop

0000b1f0 <send_climb>:
void send_climb(void){  //2000ms
    b1f0:	b480      	push	{r7}
    b1f2:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b1f4:	f24c 3311 	movw	r3, #49937	; 0xc311
    b1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1fc:	781a      	ldrb	r2, [r3, #0]
    b1fe:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b202:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b206:	fba3 1302 	umull	r1, r3, r3, r2
    b20a:	0919      	lsrs	r1, r3, #4
    b20c:	460b      	mov	r3, r1
    b20e:	009b      	lsls	r3, r3, #2
    b210:	440b      	add	r3, r1
    b212:	009b      	lsls	r3, r3, #2
    b214:	1ad3      	subs	r3, r2, r3
    b216:	b2db      	uxtb	r3, r3
    b218:	2b12      	cmp	r3, #18
    b21a:	f040 8554 	bne.w	bcc6 <send_climb+0xad6>
    b21e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b226:	781a      	ldrb	r2, [r3, #0]
    b228:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b230:	781b      	ldrb	r3, [r3, #0]
    b232:	b2db      	uxtb	r3, r3
    b234:	429a      	cmp	r2, r3
    b236:	d313      	bcc.n	b260 <send_climb+0x70>
    b238:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b240:	781b      	ldrb	r3, [r3, #0]
    b242:	b2db      	uxtb	r3, r3
    b244:	461a      	mov	r2, r3
    b246:	f24c 3319 	movw	r3, #49945	; 0xc319
    b24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b24e:	781b      	ldrb	r3, [r3, #0]
    b250:	1ad3      	subs	r3, r2, r3
    b252:	33ff      	adds	r3, #255	; 0xff
    b254:	2b12      	cmp	r3, #18
    b256:	bfd4      	ite	le
    b258:	2300      	movle	r3, #0
    b25a:	2301      	movgt	r3, #1
    b25c:	b2db      	uxtb	r3, r3
    b25e:	e011      	b.n	b284 <send_climb+0x94>
    b260:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b268:	781b      	ldrb	r3, [r3, #0]
    b26a:	b2db      	uxtb	r3, r3
    b26c:	461a      	mov	r2, r3
    b26e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b276:	781b      	ldrb	r3, [r3, #0]
    b278:	1ad3      	subs	r3, r2, r3
    b27a:	2b12      	cmp	r3, #18
    b27c:	bfd4      	ite	le
    b27e:	2300      	movle	r3, #0
    b280:	2301      	movgt	r3, #1
    b282:	b2db      	uxtb	r3, r3
    b284:	2b00      	cmp	r3, #0
    b286:	f000 8512 	beq.w	bcae <send_climb+0xabe>
    b28a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b292:	781b      	ldrb	r3, [r3, #0]
    b294:	461a      	mov	r2, r3
    b296:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29e:	2105      	movs	r1, #5
    b2a0:	5499      	strb	r1, [r3, r2]
    b2a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2aa:	781b      	ldrb	r3, [r3, #0]
    b2ac:	3301      	adds	r3, #1
    b2ae:	b2da      	uxtb	r2, r3
    b2b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b8:	701a      	strb	r2, [r3, #0]
    b2ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c2:	781b      	ldrb	r3, [r3, #0]
    b2c4:	2bff      	cmp	r3, #255	; 0xff
    b2c6:	d105      	bne.n	b2d4 <send_climb+0xe4>
    b2c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d0:	2200      	movs	r2, #0
    b2d2:	701a      	strb	r2, [r3, #0]
    b2d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2dc:	781b      	ldrb	r3, [r3, #0]
    b2de:	461a      	mov	r2, r3
    b2e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e8:	210e      	movs	r1, #14
    b2ea:	5499      	strb	r1, [r3, r2]
    b2ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f4:	781b      	ldrb	r3, [r3, #0]
    b2f6:	3301      	adds	r3, #1
    b2f8:	b2da      	uxtb	r2, r3
    b2fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b302:	701a      	strb	r2, [r3, #0]
    b304:	f24c 3319 	movw	r3, #49945	; 0xc319
    b308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b30c:	781b      	ldrb	r3, [r3, #0]
    b30e:	2bff      	cmp	r3, #255	; 0xff
    b310:	d105      	bne.n	b31e <send_climb+0x12e>
    b312:	f24c 3319 	movw	r3, #49945	; 0xc319
    b316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b31a:	2200      	movs	r2, #0
    b31c:	701a      	strb	r2, [r3, #0]
    b31e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b326:	220e      	movs	r2, #14
    b328:	701a      	strb	r2, [r3, #0]
    b32a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b32e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b332:	220e      	movs	r2, #14
    b334:	701a      	strb	r2, [r3, #0]
    b336:	f24c 3319 	movw	r3, #49945	; 0xc319
    b33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b33e:	781b      	ldrb	r3, [r3, #0]
    b340:	461a      	mov	r2, r3
    b342:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b34a:	7819      	ldrb	r1, [r3, #0]
    b34c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b354:	5499      	strb	r1, [r3, r2]
    b356:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35e:	781a      	ldrb	r2, [r3, #0]
    b360:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b368:	781b      	ldrb	r3, [r3, #0]
    b36a:	4413      	add	r3, r2
    b36c:	b2da      	uxtb	r2, r3
    b36e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b376:	701a      	strb	r2, [r3, #0]
    b378:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b380:	781a      	ldrb	r2, [r3, #0]
    b382:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b38a:	781b      	ldrb	r3, [r3, #0]
    b38c:	4413      	add	r3, r2
    b38e:	b2da      	uxtb	r2, r3
    b390:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b398:	701a      	strb	r2, [r3, #0]
    b39a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a2:	781b      	ldrb	r3, [r3, #0]
    b3a4:	3301      	adds	r3, #1
    b3a6:	b2da      	uxtb	r2, r3
    b3a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b0:	701a      	strb	r2, [r3, #0]
    b3b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ba:	781b      	ldrb	r3, [r3, #0]
    b3bc:	2bff      	cmp	r3, #255	; 0xff
    b3be:	d105      	bne.n	b3cc <send_climb+0x1dc>
    b3c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c8:	2200      	movs	r2, #0
    b3ca:	701a      	strb	r2, [r3, #0]
    b3cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d4:	781b      	ldrb	r3, [r3, #0]
    b3d6:	461a      	mov	r2, r3
    b3d8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e0:	7859      	ldrb	r1, [r3, #1]
    b3e2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ea:	5499      	strb	r1, [r3, r2]
    b3ec:	4bd3      	ldr	r3, [pc, #844]	; (b73c <send_climb+0x54c>)
    b3ee:	781a      	ldrb	r2, [r3, #0]
    b3f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f8:	781b      	ldrb	r3, [r3, #0]
    b3fa:	4413      	add	r3, r2
    b3fc:	b2da      	uxtb	r2, r3
    b3fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b406:	701a      	strb	r2, [r3, #0]
    b408:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b410:	781a      	ldrb	r2, [r3, #0]
    b412:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b41a:	781b      	ldrb	r3, [r3, #0]
    b41c:	4413      	add	r3, r2
    b41e:	b2da      	uxtb	r2, r3
    b420:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b428:	701a      	strb	r2, [r3, #0]
    b42a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b432:	781b      	ldrb	r3, [r3, #0]
    b434:	3301      	adds	r3, #1
    b436:	b2da      	uxtb	r2, r3
    b438:	f24c 3319 	movw	r3, #49945	; 0xc319
    b43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b440:	701a      	strb	r2, [r3, #0]
    b442:	f24c 3319 	movw	r3, #49945	; 0xc319
    b446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b44a:	781b      	ldrb	r3, [r3, #0]
    b44c:	2bff      	cmp	r3, #255	; 0xff
    b44e:	d105      	bne.n	b45c <send_climb+0x26c>
    b450:	f24c 3319 	movw	r3, #49945	; 0xc319
    b454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b458:	2200      	movs	r2, #0
    b45a:	701a      	strb	r2, [r3, #0]
    b45c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b464:	781b      	ldrb	r3, [r3, #0]
    b466:	461a      	mov	r2, r3
    b468:	f24c 6360 	movw	r3, #50784	; 0xc660
    b46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b470:	7819      	ldrb	r1, [r3, #0]
    b472:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47a:	5499      	strb	r1, [r3, r2]
    b47c:	f24c 6360 	movw	r3, #50784	; 0xc660
    b480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b484:	781a      	ldrb	r2, [r3, #0]
    b486:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b48e:	781b      	ldrb	r3, [r3, #0]
    b490:	4413      	add	r3, r2
    b492:	b2da      	uxtb	r2, r3
    b494:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b49c:	701a      	strb	r2, [r3, #0]
    b49e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a6:	781a      	ldrb	r2, [r3, #0]
    b4a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b0:	781b      	ldrb	r3, [r3, #0]
    b4b2:	4413      	add	r3, r2
    b4b4:	b2da      	uxtb	r2, r3
    b4b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4be:	701a      	strb	r2, [r3, #0]
    b4c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c8:	781b      	ldrb	r3, [r3, #0]
    b4ca:	3301      	adds	r3, #1
    b4cc:	b2da      	uxtb	r2, r3
    b4ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d6:	701a      	strb	r2, [r3, #0]
    b4d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e0:	781b      	ldrb	r3, [r3, #0]
    b4e2:	2bff      	cmp	r3, #255	; 0xff
    b4e4:	d105      	bne.n	b4f2 <send_climb+0x302>
    b4e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ee:	2200      	movs	r2, #0
    b4f0:	701a      	strb	r2, [r3, #0]
    b4f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fa:	781b      	ldrb	r3, [r3, #0]
    b4fc:	461a      	mov	r2, r3
    b4fe:	f24c 6360 	movw	r3, #50784	; 0xc660
    b502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b506:	7859      	ldrb	r1, [r3, #1]
    b508:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b510:	5499      	strb	r1, [r3, r2]
    b512:	4b8b      	ldr	r3, [pc, #556]	; (b740 <send_climb+0x550>)
    b514:	781a      	ldrb	r2, [r3, #0]
    b516:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b51e:	781b      	ldrb	r3, [r3, #0]
    b520:	4413      	add	r3, r2
    b522:	b2da      	uxtb	r2, r3
    b524:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52c:	701a      	strb	r2, [r3, #0]
    b52e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b536:	781a      	ldrb	r2, [r3, #0]
    b538:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b540:	781b      	ldrb	r3, [r3, #0]
    b542:	4413      	add	r3, r2
    b544:	b2da      	uxtb	r2, r3
    b546:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b54e:	701a      	strb	r2, [r3, #0]
    b550:	f24c 3319 	movw	r3, #49945	; 0xc319
    b554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b558:	781b      	ldrb	r3, [r3, #0]
    b55a:	3301      	adds	r3, #1
    b55c:	b2da      	uxtb	r2, r3
    b55e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b566:	701a      	strb	r2, [r3, #0]
    b568:	f24c 3319 	movw	r3, #49945	; 0xc319
    b56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b570:	781b      	ldrb	r3, [r3, #0]
    b572:	2bff      	cmp	r3, #255	; 0xff
    b574:	d105      	bne.n	b582 <send_climb+0x392>
    b576:	f24c 3319 	movw	r3, #49945	; 0xc319
    b57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b57e:	2200      	movs	r2, #0
    b580:	701a      	strb	r2, [r3, #0]
    b582:	f24c 3319 	movw	r3, #49945	; 0xc319
    b586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b58a:	781b      	ldrb	r3, [r3, #0]
    b58c:	461a      	mov	r2, r3
    b58e:	f24c 6360 	movw	r3, #50784	; 0xc660
    b592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b596:	7899      	ldrb	r1, [r3, #2]
    b598:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a0:	5499      	strb	r1, [r3, r2]
    b5a2:	4b68      	ldr	r3, [pc, #416]	; (b744 <send_climb+0x554>)
    b5a4:	781a      	ldrb	r2, [r3, #0]
    b5a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ae:	781b      	ldrb	r3, [r3, #0]
    b5b0:	4413      	add	r3, r2
    b5b2:	b2da      	uxtb	r2, r3
    b5b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5bc:	701a      	strb	r2, [r3, #0]
    b5be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c6:	781a      	ldrb	r2, [r3, #0]
    b5c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d0:	781b      	ldrb	r3, [r3, #0]
    b5d2:	4413      	add	r3, r2
    b5d4:	b2da      	uxtb	r2, r3
    b5d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5de:	701a      	strb	r2, [r3, #0]
    b5e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e8:	781b      	ldrb	r3, [r3, #0]
    b5ea:	3301      	adds	r3, #1
    b5ec:	b2da      	uxtb	r2, r3
    b5ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f6:	701a      	strb	r2, [r3, #0]
    b5f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b600:	781b      	ldrb	r3, [r3, #0]
    b602:	2bff      	cmp	r3, #255	; 0xff
    b604:	d105      	bne.n	b612 <send_climb+0x422>
    b606:	f24c 3319 	movw	r3, #49945	; 0xc319
    b60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b60e:	2200      	movs	r2, #0
    b610:	701a      	strb	r2, [r3, #0]
    b612:	f24c 3319 	movw	r3, #49945	; 0xc319
    b616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b61a:	781b      	ldrb	r3, [r3, #0]
    b61c:	461a      	mov	r2, r3
    b61e:	f24c 6360 	movw	r3, #50784	; 0xc660
    b622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b626:	78d9      	ldrb	r1, [r3, #3]
    b628:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b630:	5499      	strb	r1, [r3, r2]
    b632:	4b45      	ldr	r3, [pc, #276]	; (b748 <send_climb+0x558>)
    b634:	781a      	ldrb	r2, [r3, #0]
    b636:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b63e:	781b      	ldrb	r3, [r3, #0]
    b640:	4413      	add	r3, r2
    b642:	b2da      	uxtb	r2, r3
    b644:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64c:	701a      	strb	r2, [r3, #0]
    b64e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b656:	781a      	ldrb	r2, [r3, #0]
    b658:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b660:	781b      	ldrb	r3, [r3, #0]
    b662:	4413      	add	r3, r2
    b664:	b2da      	uxtb	r2, r3
    b666:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b66e:	701a      	strb	r2, [r3, #0]
    b670:	f24c 3319 	movw	r3, #49945	; 0xc319
    b674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b678:	781b      	ldrb	r3, [r3, #0]
    b67a:	3301      	adds	r3, #1
    b67c:	b2da      	uxtb	r2, r3
    b67e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b686:	701a      	strb	r2, [r3, #0]
    b688:	f24c 3319 	movw	r3, #49945	; 0xc319
    b68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b690:	781b      	ldrb	r3, [r3, #0]
    b692:	2bff      	cmp	r3, #255	; 0xff
    b694:	d105      	bne.n	b6a2 <send_climb+0x4b2>
    b696:	f24c 3319 	movw	r3, #49945	; 0xc319
    b69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b69e:	2200      	movs	r2, #0
    b6a0:	701a      	strb	r2, [r3, #0]
    b6a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6aa:	781b      	ldrb	r3, [r3, #0]
    b6ac:	461a      	mov	r2, r3
    b6ae:	f24c 6368 	movw	r3, #50792	; 0xc668
    b6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b6:	7819      	ldrb	r1, [r3, #0]
    b6b8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c0:	5499      	strb	r1, [r3, r2]
    b6c2:	f24c 6368 	movw	r3, #50792	; 0xc668
    b6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ca:	781a      	ldrb	r2, [r3, #0]
    b6cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d4:	781b      	ldrb	r3, [r3, #0]
    b6d6:	4413      	add	r3, r2
    b6d8:	b2da      	uxtb	r2, r3
    b6da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e2:	701a      	strb	r2, [r3, #0]
    b6e4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ec:	781a      	ldrb	r2, [r3, #0]
    b6ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f6:	781b      	ldrb	r3, [r3, #0]
    b6f8:	4413      	add	r3, r2
    b6fa:	b2da      	uxtb	r2, r3
    b6fc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b704:	701a      	strb	r2, [r3, #0]
    b706:	f24c 3319 	movw	r3, #49945	; 0xc319
    b70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b70e:	781b      	ldrb	r3, [r3, #0]
    b710:	3301      	adds	r3, #1
    b712:	b2da      	uxtb	r2, r3
    b714:	f24c 3319 	movw	r3, #49945	; 0xc319
    b718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b71c:	701a      	strb	r2, [r3, #0]
    b71e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b726:	781b      	ldrb	r3, [r3, #0]
    b728:	2bff      	cmp	r3, #255	; 0xff
    b72a:	d10f      	bne.n	b74c <send_climb+0x55c>
    b72c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b734:	2200      	movs	r2, #0
    b736:	701a      	strb	r2, [r3, #0]
    b738:	e008      	b.n	b74c <send_climb+0x55c>
    b73a:	bf00      	nop
    b73c:	2004c64d 	.word	0x2004c64d
    b740:	2004c661 	.word	0x2004c661
    b744:	2004c662 	.word	0x2004c662
    b748:	2004c663 	.word	0x2004c663
    b74c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b754:	781b      	ldrb	r3, [r3, #0]
    b756:	461a      	mov	r2, r3
    b758:	f24c 6368 	movw	r3, #50792	; 0xc668
    b75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b760:	7859      	ldrb	r1, [r3, #1]
    b762:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b76a:	5499      	strb	r1, [r3, r2]
    b76c:	4bd1      	ldr	r3, [pc, #836]	; (bab4 <send_climb+0x8c4>)
    b76e:	781a      	ldrb	r2, [r3, #0]
    b770:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b778:	781b      	ldrb	r3, [r3, #0]
    b77a:	4413      	add	r3, r2
    b77c:	b2da      	uxtb	r2, r3
    b77e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b786:	701a      	strb	r2, [r3, #0]
    b788:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b790:	781a      	ldrb	r2, [r3, #0]
    b792:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b79a:	781b      	ldrb	r3, [r3, #0]
    b79c:	4413      	add	r3, r2
    b79e:	b2da      	uxtb	r2, r3
    b7a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a8:	701a      	strb	r2, [r3, #0]
    b7aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b2:	781b      	ldrb	r3, [r3, #0]
    b7b4:	3301      	adds	r3, #1
    b7b6:	b2da      	uxtb	r2, r3
    b7b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c0:	701a      	strb	r2, [r3, #0]
    b7c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ca:	781b      	ldrb	r3, [r3, #0]
    b7cc:	2bff      	cmp	r3, #255	; 0xff
    b7ce:	d105      	bne.n	b7dc <send_climb+0x5ec>
    b7d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d8:	2200      	movs	r2, #0
    b7da:	701a      	strb	r2, [r3, #0]
    b7dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e4:	781b      	ldrb	r3, [r3, #0]
    b7e6:	461a      	mov	r2, r3
    b7e8:	f24c 6368 	movw	r3, #50792	; 0xc668
    b7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f0:	7899      	ldrb	r1, [r3, #2]
    b7f2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7fa:	5499      	strb	r1, [r3, r2]
    b7fc:	4bae      	ldr	r3, [pc, #696]	; (bab8 <send_climb+0x8c8>)
    b7fe:	781a      	ldrb	r2, [r3, #0]
    b800:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b808:	781b      	ldrb	r3, [r3, #0]
    b80a:	4413      	add	r3, r2
    b80c:	b2da      	uxtb	r2, r3
    b80e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b816:	701a      	strb	r2, [r3, #0]
    b818:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b820:	781a      	ldrb	r2, [r3, #0]
    b822:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b82a:	781b      	ldrb	r3, [r3, #0]
    b82c:	4413      	add	r3, r2
    b82e:	b2da      	uxtb	r2, r3
    b830:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b838:	701a      	strb	r2, [r3, #0]
    b83a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b842:	781b      	ldrb	r3, [r3, #0]
    b844:	3301      	adds	r3, #1
    b846:	b2da      	uxtb	r2, r3
    b848:	f24c 3319 	movw	r3, #49945	; 0xc319
    b84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b850:	701a      	strb	r2, [r3, #0]
    b852:	f24c 3319 	movw	r3, #49945	; 0xc319
    b856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b85a:	781b      	ldrb	r3, [r3, #0]
    b85c:	2bff      	cmp	r3, #255	; 0xff
    b85e:	d105      	bne.n	b86c <send_climb+0x67c>
    b860:	f24c 3319 	movw	r3, #49945	; 0xc319
    b864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b868:	2200      	movs	r2, #0
    b86a:	701a      	strb	r2, [r3, #0]
    b86c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b874:	781b      	ldrb	r3, [r3, #0]
    b876:	461a      	mov	r2, r3
    b878:	f24c 6368 	movw	r3, #50792	; 0xc668
    b87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b880:	78d9      	ldrb	r1, [r3, #3]
    b882:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b88a:	5499      	strb	r1, [r3, r2]
    b88c:	4b8b      	ldr	r3, [pc, #556]	; (babc <send_climb+0x8cc>)
    b88e:	781a      	ldrb	r2, [r3, #0]
    b890:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b898:	781b      	ldrb	r3, [r3, #0]
    b89a:	4413      	add	r3, r2
    b89c:	b2da      	uxtb	r2, r3
    b89e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a6:	701a      	strb	r2, [r3, #0]
    b8a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b0:	781a      	ldrb	r2, [r3, #0]
    b8b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ba:	781b      	ldrb	r3, [r3, #0]
    b8bc:	4413      	add	r3, r2
    b8be:	b2da      	uxtb	r2, r3
    b8c0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c8:	701a      	strb	r2, [r3, #0]
    b8ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d2:	781b      	ldrb	r3, [r3, #0]
    b8d4:	3301      	adds	r3, #1
    b8d6:	b2da      	uxtb	r2, r3
    b8d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e0:	701a      	strb	r2, [r3, #0]
    b8e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ea:	781b      	ldrb	r3, [r3, #0]
    b8ec:	2bff      	cmp	r3, #255	; 0xff
    b8ee:	d105      	bne.n	b8fc <send_climb+0x70c>
    b8f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f8:	2200      	movs	r2, #0
    b8fa:	701a      	strb	r2, [r3, #0]
    b8fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    b900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b904:	781b      	ldrb	r3, [r3, #0]
    b906:	461a      	mov	r2, r3
    b908:	f648 1304 	movw	r3, #35076	; 0x8904
    b90c:	f2c0 0301 	movt	r3, #1
    b910:	7819      	ldrb	r1, [r3, #0]
    b912:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b91a:	5499      	strb	r1, [r3, r2]
    b91c:	f648 1304 	movw	r3, #35076	; 0x8904
    b920:	f2c0 0301 	movt	r3, #1
    b924:	781a      	ldrb	r2, [r3, #0]
    b926:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b92e:	781b      	ldrb	r3, [r3, #0]
    b930:	4413      	add	r3, r2
    b932:	b2da      	uxtb	r2, r3
    b934:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b93c:	701a      	strb	r2, [r3, #0]
    b93e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b946:	781a      	ldrb	r2, [r3, #0]
    b948:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b950:	781b      	ldrb	r3, [r3, #0]
    b952:	4413      	add	r3, r2
    b954:	b2da      	uxtb	r2, r3
    b956:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b95e:	701a      	strb	r2, [r3, #0]
    b960:	f24c 3319 	movw	r3, #49945	; 0xc319
    b964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b968:	781b      	ldrb	r3, [r3, #0]
    b96a:	3301      	adds	r3, #1
    b96c:	b2da      	uxtb	r2, r3
    b96e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b976:	701a      	strb	r2, [r3, #0]
    b978:	f24c 3319 	movw	r3, #49945	; 0xc319
    b97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b980:	781b      	ldrb	r3, [r3, #0]
    b982:	2bff      	cmp	r3, #255	; 0xff
    b984:	d105      	bne.n	b992 <send_climb+0x7a2>
    b986:	f24c 3319 	movw	r3, #49945	; 0xc319
    b98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b98e:	2200      	movs	r2, #0
    b990:	701a      	strb	r2, [r3, #0]
    b992:	f24c 3319 	movw	r3, #49945	; 0xc319
    b996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b99a:	781b      	ldrb	r3, [r3, #0]
    b99c:	461a      	mov	r2, r3
    b99e:	f648 1304 	movw	r3, #35076	; 0x8904
    b9a2:	f2c0 0301 	movt	r3, #1
    b9a6:	7859      	ldrb	r1, [r3, #1]
    b9a8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b0:	5499      	strb	r1, [r3, r2]
    b9b2:	4b43      	ldr	r3, [pc, #268]	; (bac0 <send_climb+0x8d0>)
    b9b4:	781a      	ldrb	r2, [r3, #0]
    b9b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9be:	781b      	ldrb	r3, [r3, #0]
    b9c0:	4413      	add	r3, r2
    b9c2:	b2da      	uxtb	r2, r3
    b9c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9cc:	701a      	strb	r2, [r3, #0]
    b9ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d6:	781a      	ldrb	r2, [r3, #0]
    b9d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e0:	781b      	ldrb	r3, [r3, #0]
    b9e2:	4413      	add	r3, r2
    b9e4:	b2da      	uxtb	r2, r3
    b9e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ee:	701a      	strb	r2, [r3, #0]
    b9f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f8:	781b      	ldrb	r3, [r3, #0]
    b9fa:	3301      	adds	r3, #1
    b9fc:	b2da      	uxtb	r2, r3
    b9fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba06:	701a      	strb	r2, [r3, #0]
    ba08:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba10:	781b      	ldrb	r3, [r3, #0]
    ba12:	2bff      	cmp	r3, #255	; 0xff
    ba14:	d105      	bne.n	ba22 <send_climb+0x832>
    ba16:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba1e:	2200      	movs	r2, #0
    ba20:	701a      	strb	r2, [r3, #0]
    ba22:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba2a:	781b      	ldrb	r3, [r3, #0]
    ba2c:	461a      	mov	r2, r3
    ba2e:	f648 1304 	movw	r3, #35076	; 0x8904
    ba32:	f2c0 0301 	movt	r3, #1
    ba36:	7899      	ldrb	r1, [r3, #2]
    ba38:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ba3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba40:	5499      	strb	r1, [r3, r2]
    ba42:	4b20      	ldr	r3, [pc, #128]	; (bac4 <send_climb+0x8d4>)
    ba44:	781a      	ldrb	r2, [r3, #0]
    ba46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba4e:	781b      	ldrb	r3, [r3, #0]
    ba50:	4413      	add	r3, r2
    ba52:	b2da      	uxtb	r2, r3
    ba54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba5c:	701a      	strb	r2, [r3, #0]
    ba5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba66:	781a      	ldrb	r2, [r3, #0]
    ba68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba70:	781b      	ldrb	r3, [r3, #0]
    ba72:	4413      	add	r3, r2
    ba74:	b2da      	uxtb	r2, r3
    ba76:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba7e:	701a      	strb	r2, [r3, #0]
    ba80:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba88:	781b      	ldrb	r3, [r3, #0]
    ba8a:	3301      	adds	r3, #1
    ba8c:	b2da      	uxtb	r2, r3
    ba8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba96:	701a      	strb	r2, [r3, #0]
    ba98:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa0:	781b      	ldrb	r3, [r3, #0]
    baa2:	2bff      	cmp	r3, #255	; 0xff
    baa4:	d110      	bne.n	bac8 <send_climb+0x8d8>
    baa6:	f24c 3319 	movw	r3, #49945	; 0xc319
    baaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baae:	2200      	movs	r2, #0
    bab0:	701a      	strb	r2, [r3, #0]
    bab2:	e009      	b.n	bac8 <send_climb+0x8d8>
    bab4:	2004c669 	.word	0x2004c669
    bab8:	2004c66a 	.word	0x2004c66a
    babc:	2004c66b 	.word	0x2004c66b
    bac0:	00018905 	.word	0x00018905
    bac4:	00018906 	.word	0x00018906
    bac8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad0:	781b      	ldrb	r3, [r3, #0]
    bad2:	461a      	mov	r2, r3
    bad4:	f648 1304 	movw	r3, #35076	; 0x8904
    bad8:	f2c0 0301 	movt	r3, #1
    badc:	78d9      	ldrb	r1, [r3, #3]
    bade:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae6:	5499      	strb	r1, [r3, r2]
    bae8:	4b79      	ldr	r3, [pc, #484]	; (bcd0 <send_climb+0xae0>)
    baea:	781a      	ldrb	r2, [r3, #0]
    baec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    baf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf4:	781b      	ldrb	r3, [r3, #0]
    baf6:	4413      	add	r3, r2
    baf8:	b2da      	uxtb	r2, r3
    bafa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb02:	701a      	strb	r2, [r3, #0]
    bb04:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb0c:	781a      	ldrb	r2, [r3, #0]
    bb0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb16:	781b      	ldrb	r3, [r3, #0]
    bb18:	4413      	add	r3, r2
    bb1a:	b2da      	uxtb	r2, r3
    bb1c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb24:	701a      	strb	r2, [r3, #0]
    bb26:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb2e:	781b      	ldrb	r3, [r3, #0]
    bb30:	3301      	adds	r3, #1
    bb32:	b2da      	uxtb	r2, r3
    bb34:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb3c:	701a      	strb	r2, [r3, #0]
    bb3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb46:	781b      	ldrb	r3, [r3, #0]
    bb48:	2bff      	cmp	r3, #255	; 0xff
    bb4a:	d105      	bne.n	bb58 <send_climb+0x968>
    bb4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb54:	2200      	movs	r2, #0
    bb56:	701a      	strb	r2, [r3, #0]
    bb58:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb60:	781b      	ldrb	r3, [r3, #0]
    bb62:	461a      	mov	r2, r3
    bb64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb6c:	7819      	ldrb	r1, [r3, #0]
    bb6e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb76:	5499      	strb	r1, [r3, r2]
    bb78:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb80:	781b      	ldrb	r3, [r3, #0]
    bb82:	3301      	adds	r3, #1
    bb84:	b2da      	uxtb	r2, r3
    bb86:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb8e:	701a      	strb	r2, [r3, #0]
    bb90:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb98:	781b      	ldrb	r3, [r3, #0]
    bb9a:	2bff      	cmp	r3, #255	; 0xff
    bb9c:	d105      	bne.n	bbaa <send_climb+0x9ba>
    bb9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba6:	2200      	movs	r2, #0
    bba8:	701a      	strb	r2, [r3, #0]
    bbaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb2:	781b      	ldrb	r3, [r3, #0]
    bbb4:	461a      	mov	r2, r3
    bbb6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbbe:	7819      	ldrb	r1, [r3, #0]
    bbc0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc8:	5499      	strb	r1, [r3, r2]
    bbca:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd2:	781b      	ldrb	r3, [r3, #0]
    bbd4:	3301      	adds	r3, #1
    bbd6:	b2da      	uxtb	r2, r3
    bbd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe0:	701a      	strb	r2, [r3, #0]
    bbe2:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbea:	781b      	ldrb	r3, [r3, #0]
    bbec:	2bff      	cmp	r3, #255	; 0xff
    bbee:	d105      	bne.n	bbfc <send_climb+0xa0c>
    bbf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf8:	2200      	movs	r2, #0
    bbfa:	701a      	strb	r2, [r3, #0]
    bbfc:	f242 0339 	movw	r3, #8249	; 0x2039
    bc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc04:	781b      	ldrb	r3, [r3, #0]
    bc06:	b2db      	uxtb	r3, r3
    bc08:	f003 0310 	and.w	r3, r3, #16
    bc0c:	2b00      	cmp	r3, #0
    bc0e:	d15a      	bne.n	bcc6 <send_climb+0xad6>
    bc10:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc18:	781b      	ldrb	r3, [r3, #0]
    bc1a:	b2db      	uxtb	r3, r3
    bc1c:	461a      	mov	r2, r3
    bc1e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc26:	5c9a      	ldrb	r2, [r3, r2]
    bc28:	f24c 431b 	movw	r3, #50203	; 0xc41b
    bc2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc30:	701a      	strb	r2, [r3, #0]
    bc32:	f24c 431c 	movw	r3, #50204	; 0xc41c
    bc36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc3a:	2200      	movs	r2, #0
    bc3c:	701a      	strb	r2, [r3, #0]
    bc3e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc46:	781b      	ldrb	r3, [r3, #0]
    bc48:	b2db      	uxtb	r3, r3
    bc4a:	3301      	adds	r3, #1
    bc4c:	b2da      	uxtb	r2, r3
    bc4e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc56:	701a      	strb	r2, [r3, #0]
    bc58:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc60:	781b      	ldrb	r3, [r3, #0]
    bc62:	b2db      	uxtb	r3, r3
    bc64:	2bff      	cmp	r3, #255	; 0xff
    bc66:	d105      	bne.n	bc74 <send_climb+0xa84>
    bc68:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc70:	2200      	movs	r2, #0
    bc72:	701a      	strb	r2, [r3, #0]
    bc74:	f242 0338 	movw	r3, #8248	; 0x2038
    bc78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc7c:	f242 0238 	movw	r2, #8248	; 0x2038
    bc80:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bc84:	7812      	ldrb	r2, [r2, #0]
    bc86:	b2d2      	uxtb	r2, r2
    bc88:	f042 0201 	orr.w	r2, r2, #1
    bc8c:	b2d2      	uxtb	r2, r2
    bc8e:	701a      	strb	r2, [r3, #0]
    bc90:	f242 0339 	movw	r3, #8249	; 0x2039
    bc94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc98:	f242 0239 	movw	r2, #8249	; 0x2039
    bc9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bca0:	7812      	ldrb	r2, [r2, #0]
    bca2:	b2d2      	uxtb	r2, r2
    bca4:	f042 0210 	orr.w	r2, r2, #16
    bca8:	b2d2      	uxtb	r2, r2
    bcaa:	701a      	strb	r2, [r3, #0]
    bcac:	e00b      	b.n	bcc6 <send_climb+0xad6>
    bcae:	f24c 3318 	movw	r3, #49944	; 0xc318
    bcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb6:	781b      	ldrb	r3, [r3, #0]
    bcb8:	3301      	adds	r3, #1
    bcba:	b2da      	uxtb	r2, r3
    bcbc:	f24c 3318 	movw	r3, #49944	; 0xc318
    bcc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc4:	701a      	strb	r2, [r3, #0]
}
    bcc6:	46bd      	mov	sp, r7
    bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    bccc:	4770      	bx	lr
    bcce:	bf00      	nop
    bcd0:	00018907 	.word	0x00018907

0000bcd4 <send_mode>:
void send_mode(void){  //5000ms
    bcd4:	b480      	push	{r7}
    bcd6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bcd8:	f24c 3311 	movw	r3, #49937	; 0xc311
    bcdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bce0:	781a      	ldrb	r2, [r3, #0]
    bce2:	f248 531f 	movw	r3, #34079	; 0x851f
    bce6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bcea:	fba3 1302 	umull	r1, r3, r3, r2
    bcee:	091b      	lsrs	r3, r3, #4
    bcf0:	2132      	movs	r1, #50	; 0x32
    bcf2:	fb01 f303 	mul.w	r3, r1, r3
    bcf6:	1ad3      	subs	r3, r2, r3
    bcf8:	b2db      	uxtb	r3, r3
    bcfa:	2b09      	cmp	r3, #9
    bcfc:	f040 82ba 	bne.w	c274 <send_mode+0x5a0>
    bd00:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd08:	781a      	ldrb	r2, [r3, #0]
    bd0a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd12:	781b      	ldrb	r3, [r3, #0]
    bd14:	b2db      	uxtb	r3, r3
    bd16:	429a      	cmp	r2, r3
    bd18:	d313      	bcc.n	bd42 <send_mode+0x6e>
    bd1a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd22:	781b      	ldrb	r3, [r3, #0]
    bd24:	b2db      	uxtb	r3, r3
    bd26:	461a      	mov	r2, r3
    bd28:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd30:	781b      	ldrb	r3, [r3, #0]
    bd32:	1ad3      	subs	r3, r2, r3
    bd34:	33ff      	adds	r3, #255	; 0xff
    bd36:	2b09      	cmp	r3, #9
    bd38:	bfd4      	ite	le
    bd3a:	2300      	movle	r3, #0
    bd3c:	2301      	movgt	r3, #1
    bd3e:	b2db      	uxtb	r3, r3
    bd40:	e011      	b.n	bd66 <send_mode+0x92>
    bd42:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd4a:	781b      	ldrb	r3, [r3, #0]
    bd4c:	b2db      	uxtb	r3, r3
    bd4e:	461a      	mov	r2, r3
    bd50:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd58:	781b      	ldrb	r3, [r3, #0]
    bd5a:	1ad3      	subs	r3, r2, r3
    bd5c:	2b09      	cmp	r3, #9
    bd5e:	bfd4      	ite	le
    bd60:	2300      	movle	r3, #0
    bd62:	2301      	movgt	r3, #1
    bd64:	b2db      	uxtb	r3, r3
    bd66:	2b00      	cmp	r3, #0
    bd68:	f000 8278 	beq.w	c25c <send_mode+0x588>
    bd6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd74:	781b      	ldrb	r3, [r3, #0]
    bd76:	461a      	mov	r2, r3
    bd78:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bd7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd80:	2105      	movs	r1, #5
    bd82:	5499      	strb	r1, [r3, r2]
    bd84:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8c:	781b      	ldrb	r3, [r3, #0]
    bd8e:	3301      	adds	r3, #1
    bd90:	b2da      	uxtb	r2, r3
    bd92:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd9a:	701a      	strb	r2, [r3, #0]
    bd9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda4:	781b      	ldrb	r3, [r3, #0]
    bda6:	2bff      	cmp	r3, #255	; 0xff
    bda8:	d105      	bne.n	bdb6 <send_mode+0xe2>
    bdaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb2:	2200      	movs	r2, #0
    bdb4:	701a      	strb	r2, [r3, #0]
    bdb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdbe:	781b      	ldrb	r3, [r3, #0]
    bdc0:	461a      	mov	r2, r3
    bdc2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bdc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdca:	210b      	movs	r1, #11
    bdcc:	5499      	strb	r1, [r3, r2]
    bdce:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd6:	781b      	ldrb	r3, [r3, #0]
    bdd8:	3301      	adds	r3, #1
    bdda:	b2da      	uxtb	r2, r3
    bddc:	f24c 3319 	movw	r3, #49945	; 0xc319
    bde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde4:	701a      	strb	r2, [r3, #0]
    bde6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdee:	781b      	ldrb	r3, [r3, #0]
    bdf0:	2bff      	cmp	r3, #255	; 0xff
    bdf2:	d105      	bne.n	be00 <send_mode+0x12c>
    bdf4:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdfc:	2200      	movs	r2, #0
    bdfe:	701a      	strb	r2, [r3, #0]
    be00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be08:	220b      	movs	r2, #11
    be0a:	701a      	strb	r2, [r3, #0]
    be0c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    be10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be14:	220b      	movs	r2, #11
    be16:	701a      	strb	r2, [r3, #0]
    be18:	f24c 3319 	movw	r3, #49945	; 0xc319
    be1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be20:	781b      	ldrb	r3, [r3, #0]
    be22:	461a      	mov	r2, r3
    be24:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    be28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be2c:	7819      	ldrb	r1, [r3, #0]
    be2e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    be32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be36:	5499      	strb	r1, [r3, r2]
    be38:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be40:	781a      	ldrb	r2, [r3, #0]
    be42:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    be46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be4a:	781b      	ldrb	r3, [r3, #0]
    be4c:	4413      	add	r3, r2
    be4e:	b2da      	uxtb	r2, r3
    be50:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be58:	701a      	strb	r2, [r3, #0]
    be5a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    be5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be62:	781a      	ldrb	r2, [r3, #0]
    be64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be6c:	781b      	ldrb	r3, [r3, #0]
    be6e:	4413      	add	r3, r2
    be70:	b2da      	uxtb	r2, r3
    be72:	f24c 431e 	movw	r3, #50206	; 0xc41e
    be76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be7a:	701a      	strb	r2, [r3, #0]
    be7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    be80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be84:	781b      	ldrb	r3, [r3, #0]
    be86:	3301      	adds	r3, #1
    be88:	b2da      	uxtb	r2, r3
    be8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    be8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be92:	701a      	strb	r2, [r3, #0]
    be94:	f24c 3319 	movw	r3, #49945	; 0xc319
    be98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be9c:	781b      	ldrb	r3, [r3, #0]
    be9e:	2bff      	cmp	r3, #255	; 0xff
    bea0:	d105      	bne.n	beae <send_mode+0x1da>
    bea2:	f24c 3319 	movw	r3, #49945	; 0xc319
    bea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beaa:	2200      	movs	r2, #0
    beac:	701a      	strb	r2, [r3, #0]
    beae:	f24c 3319 	movw	r3, #49945	; 0xc319
    beb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb6:	781b      	ldrb	r3, [r3, #0]
    beb8:	461a      	mov	r2, r3
    beba:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    bebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec2:	7819      	ldrb	r1, [r3, #0]
    bec4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    becc:	5499      	strb	r1, [r3, r2]
    bece:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed6:	781a      	ldrb	r2, [r3, #0]
    bed8:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    bedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee0:	781b      	ldrb	r3, [r3, #0]
    bee2:	4413      	add	r3, r2
    bee4:	b2da      	uxtb	r2, r3
    bee6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    beea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beee:	701a      	strb	r2, [r3, #0]
    bef0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef8:	781a      	ldrb	r2, [r3, #0]
    befa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    befe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf02:	781b      	ldrb	r3, [r3, #0]
    bf04:	4413      	add	r3, r2
    bf06:	b2da      	uxtb	r2, r3
    bf08:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bf0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf10:	701a      	strb	r2, [r3, #0]
    bf12:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1a:	781b      	ldrb	r3, [r3, #0]
    bf1c:	3301      	adds	r3, #1
    bf1e:	b2da      	uxtb	r2, r3
    bf20:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf28:	701a      	strb	r2, [r3, #0]
    bf2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf32:	781b      	ldrb	r3, [r3, #0]
    bf34:	2bff      	cmp	r3, #255	; 0xff
    bf36:	d105      	bne.n	bf44 <send_mode+0x270>
    bf38:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf40:	2200      	movs	r2, #0
    bf42:	701a      	strb	r2, [r3, #0]
    bf44:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf4c:	781b      	ldrb	r3, [r3, #0]
    bf4e:	461a      	mov	r2, r3
    bf50:	f64c 132c 	movw	r3, #51500	; 0xc92c
    bf54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf58:	7819      	ldrb	r1, [r3, #0]
    bf5a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bf5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf62:	5499      	strb	r1, [r3, r2]
    bf64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf6c:	781a      	ldrb	r2, [r3, #0]
    bf6e:	f64c 132c 	movw	r3, #51500	; 0xc92c
    bf72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf76:	781b      	ldrb	r3, [r3, #0]
    bf78:	4413      	add	r3, r2
    bf7a:	b2da      	uxtb	r2, r3
    bf7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf84:	701a      	strb	r2, [r3, #0]
    bf86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bf8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf8e:	781a      	ldrb	r2, [r3, #0]
    bf90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf98:	781b      	ldrb	r3, [r3, #0]
    bf9a:	4413      	add	r3, r2
    bf9c:	b2da      	uxtb	r2, r3
    bf9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bfa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa6:	701a      	strb	r2, [r3, #0]
    bfa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb0:	781b      	ldrb	r3, [r3, #0]
    bfb2:	3301      	adds	r3, #1
    bfb4:	b2da      	uxtb	r2, r3
    bfb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfbe:	701a      	strb	r2, [r3, #0]
    bfc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc8:	781b      	ldrb	r3, [r3, #0]
    bfca:	2bff      	cmp	r3, #255	; 0xff
    bfcc:	d105      	bne.n	bfda <send_mode+0x306>
    bfce:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd6:	2200      	movs	r2, #0
    bfd8:	701a      	strb	r2, [r3, #0]
    bfda:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe2:	781b      	ldrb	r3, [r3, #0]
    bfe4:	461a      	mov	r2, r3
    bfe6:	f24c 3303 	movw	r3, #49923	; 0xc303
    bfea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfee:	7819      	ldrb	r1, [r3, #0]
    bff0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff8:	5499      	strb	r1, [r3, r2]
    bffa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c002:	781a      	ldrb	r2, [r3, #0]
    c004:	f24c 3303 	movw	r3, #49923	; 0xc303
    c008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c00c:	781b      	ldrb	r3, [r3, #0]
    c00e:	4413      	add	r3, r2
    c010:	b2da      	uxtb	r2, r3
    c012:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c01a:	701a      	strb	r2, [r3, #0]
    c01c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c024:	781a      	ldrb	r2, [r3, #0]
    c026:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c02e:	781b      	ldrb	r3, [r3, #0]
    c030:	4413      	add	r3, r2
    c032:	b2da      	uxtb	r2, r3
    c034:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c03c:	701a      	strb	r2, [r3, #0]
    c03e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c046:	781b      	ldrb	r3, [r3, #0]
    c048:	3301      	adds	r3, #1
    c04a:	b2da      	uxtb	r2, r3
    c04c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c054:	701a      	strb	r2, [r3, #0]
    c056:	f24c 3319 	movw	r3, #49945	; 0xc319
    c05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c05e:	781b      	ldrb	r3, [r3, #0]
    c060:	2bff      	cmp	r3, #255	; 0xff
    c062:	d105      	bne.n	c070 <send_mode+0x39c>
    c064:	f24c 3319 	movw	r3, #49945	; 0xc319
    c068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06c:	2200      	movs	r2, #0
    c06e:	701a      	strb	r2, [r3, #0]
    c070:	f24c 3319 	movw	r3, #49945	; 0xc319
    c074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c078:	781b      	ldrb	r3, [r3, #0]
    c07a:	461a      	mov	r2, r3
    c07c:	f240 533c 	movw	r3, #1340	; 0x53c
    c080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c084:	7819      	ldrb	r1, [r3, #0]
    c086:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c08e:	5499      	strb	r1, [r3, r2]
    c090:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c098:	781a      	ldrb	r2, [r3, #0]
    c09a:	f240 533c 	movw	r3, #1340	; 0x53c
    c09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0a2:	781b      	ldrb	r3, [r3, #0]
    c0a4:	4413      	add	r3, r2
    c0a6:	b2da      	uxtb	r2, r3
    c0a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b0:	701a      	strb	r2, [r3, #0]
    c0b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ba:	781a      	ldrb	r2, [r3, #0]
    c0bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c4:	781b      	ldrb	r3, [r3, #0]
    c0c6:	4413      	add	r3, r2
    c0c8:	b2da      	uxtb	r2, r3
    c0ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d2:	701a      	strb	r2, [r3, #0]
    c0d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0dc:	781b      	ldrb	r3, [r3, #0]
    c0de:	3301      	adds	r3, #1
    c0e0:	b2da      	uxtb	r2, r3
    c0e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ea:	701a      	strb	r2, [r3, #0]
    c0ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f4:	781b      	ldrb	r3, [r3, #0]
    c0f6:	2bff      	cmp	r3, #255	; 0xff
    c0f8:	d105      	bne.n	c106 <send_mode+0x432>
    c0fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c102:	2200      	movs	r2, #0
    c104:	701a      	strb	r2, [r3, #0]
    c106:	f24c 3319 	movw	r3, #49945	; 0xc319
    c10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c10e:	781b      	ldrb	r3, [r3, #0]
    c110:	461a      	mov	r2, r3
    c112:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c11a:	7819      	ldrb	r1, [r3, #0]
    c11c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c124:	5499      	strb	r1, [r3, r2]
    c126:	f24c 3319 	movw	r3, #49945	; 0xc319
    c12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c12e:	781b      	ldrb	r3, [r3, #0]
    c130:	3301      	adds	r3, #1
    c132:	b2da      	uxtb	r2, r3
    c134:	f24c 3319 	movw	r3, #49945	; 0xc319
    c138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c13c:	701a      	strb	r2, [r3, #0]
    c13e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c146:	781b      	ldrb	r3, [r3, #0]
    c148:	2bff      	cmp	r3, #255	; 0xff
    c14a:	d105      	bne.n	c158 <send_mode+0x484>
    c14c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c154:	2200      	movs	r2, #0
    c156:	701a      	strb	r2, [r3, #0]
    c158:	f24c 3319 	movw	r3, #49945	; 0xc319
    c15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c160:	781b      	ldrb	r3, [r3, #0]
    c162:	461a      	mov	r2, r3
    c164:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c16c:	7819      	ldrb	r1, [r3, #0]
    c16e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c176:	5499      	strb	r1, [r3, r2]
    c178:	f24c 3319 	movw	r3, #49945	; 0xc319
    c17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c180:	781b      	ldrb	r3, [r3, #0]
    c182:	3301      	adds	r3, #1
    c184:	b2da      	uxtb	r2, r3
    c186:	f24c 3319 	movw	r3, #49945	; 0xc319
    c18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c18e:	701a      	strb	r2, [r3, #0]
    c190:	f24c 3319 	movw	r3, #49945	; 0xc319
    c194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c198:	781b      	ldrb	r3, [r3, #0]
    c19a:	2bff      	cmp	r3, #255	; 0xff
    c19c:	d105      	bne.n	c1aa <send_mode+0x4d6>
    c19e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a6:	2200      	movs	r2, #0
    c1a8:	701a      	strb	r2, [r3, #0]
    c1aa:	f242 0339 	movw	r3, #8249	; 0x2039
    c1ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1b2:	781b      	ldrb	r3, [r3, #0]
    c1b4:	b2db      	uxtb	r3, r3
    c1b6:	f003 0310 	and.w	r3, r3, #16
    c1ba:	2b00      	cmp	r3, #0
    c1bc:	d15a      	bne.n	c274 <send_mode+0x5a0>
    c1be:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c6:	781b      	ldrb	r3, [r3, #0]
    c1c8:	b2db      	uxtb	r3, r3
    c1ca:	461a      	mov	r2, r3
    c1cc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d4:	5c9a      	ldrb	r2, [r3, r2]
    c1d6:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1de:	701a      	strb	r2, [r3, #0]
    c1e0:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1e8:	2200      	movs	r2, #0
    c1ea:	701a      	strb	r2, [r3, #0]
    c1ec:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f4:	781b      	ldrb	r3, [r3, #0]
    c1f6:	b2db      	uxtb	r3, r3
    c1f8:	3301      	adds	r3, #1
    c1fa:	b2da      	uxtb	r2, r3
    c1fc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c204:	701a      	strb	r2, [r3, #0]
    c206:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c20e:	781b      	ldrb	r3, [r3, #0]
    c210:	b2db      	uxtb	r3, r3
    c212:	2bff      	cmp	r3, #255	; 0xff
    c214:	d105      	bne.n	c222 <send_mode+0x54e>
    c216:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c21e:	2200      	movs	r2, #0
    c220:	701a      	strb	r2, [r3, #0]
    c222:	f242 0338 	movw	r3, #8248	; 0x2038
    c226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c22a:	f242 0238 	movw	r2, #8248	; 0x2038
    c22e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c232:	7812      	ldrb	r2, [r2, #0]
    c234:	b2d2      	uxtb	r2, r2
    c236:	f042 0201 	orr.w	r2, r2, #1
    c23a:	b2d2      	uxtb	r2, r2
    c23c:	701a      	strb	r2, [r3, #0]
    c23e:	f242 0339 	movw	r3, #8249	; 0x2039
    c242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c246:	f242 0239 	movw	r2, #8249	; 0x2039
    c24a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c24e:	7812      	ldrb	r2, [r2, #0]
    c250:	b2d2      	uxtb	r2, r2
    c252:	f042 0210 	orr.w	r2, r2, #16
    c256:	b2d2      	uxtb	r2, r2
    c258:	701a      	strb	r2, [r3, #0]
    c25a:	e00b      	b.n	c274 <send_mode+0x5a0>
    c25c:	f24c 3318 	movw	r3, #49944	; 0xc318
    c260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c264:	781b      	ldrb	r3, [r3, #0]
    c266:	3301      	adds	r3, #1
    c268:	b2da      	uxtb	r2, r3
    c26a:	f24c 3318 	movw	r3, #49944	; 0xc318
    c26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c272:	701a      	strb	r2, [r3, #0]
}
    c274:	46bd      	mov	sp, r7
    c276:	f85d 7b04 	ldr.w	r7, [sp], #4
    c27a:	4770      	bx	lr

0000c27c <send_debug>:
void send_debug(void){  //5000ms
    c27c:	b480      	push	{r7}
    c27e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c280:	f24c 3311 	movw	r3, #49937	; 0xc311
    c284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c288:	781a      	ldrb	r2, [r3, #0]
    c28a:	f248 531f 	movw	r3, #34079	; 0x851f
    c28e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c292:	fba3 1302 	umull	r1, r3, r3, r2
    c296:	091b      	lsrs	r3, r3, #4
    c298:	2132      	movs	r1, #50	; 0x32
    c29a:	fb01 f303 	mul.w	r3, r1, r3
    c29e:	1ad3      	subs	r3, r2, r3
    c2a0:	b2db      	uxtb	r3, r3
    c2a2:	2b1d      	cmp	r3, #29
    c2a4:	f040 82bb 	bne.w	c81e <send_debug+0x5a2>
    c2a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b0:	781a      	ldrb	r2, [r3, #0]
    c2b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ba:	781b      	ldrb	r3, [r3, #0]
    c2bc:	b2db      	uxtb	r3, r3
    c2be:	429a      	cmp	r2, r3
    c2c0:	d313      	bcc.n	c2ea <send_debug+0x6e>
    c2c2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ca:	781b      	ldrb	r3, [r3, #0]
    c2cc:	b2db      	uxtb	r3, r3
    c2ce:	461a      	mov	r2, r3
    c2d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d8:	781b      	ldrb	r3, [r3, #0]
    c2da:	1ad3      	subs	r3, r2, r3
    c2dc:	33ff      	adds	r3, #255	; 0xff
    c2de:	2b09      	cmp	r3, #9
    c2e0:	bfd4      	ite	le
    c2e2:	2300      	movle	r3, #0
    c2e4:	2301      	movgt	r3, #1
    c2e6:	b2db      	uxtb	r3, r3
    c2e8:	e011      	b.n	c30e <send_debug+0x92>
    c2ea:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f2:	781b      	ldrb	r3, [r3, #0]
    c2f4:	b2db      	uxtb	r3, r3
    c2f6:	461a      	mov	r2, r3
    c2f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c300:	781b      	ldrb	r3, [r3, #0]
    c302:	1ad3      	subs	r3, r2, r3
    c304:	2b09      	cmp	r3, #9
    c306:	bfd4      	ite	le
    c308:	2300      	movle	r3, #0
    c30a:	2301      	movgt	r3, #1
    c30c:	b2db      	uxtb	r3, r3
    c30e:	2b00      	cmp	r3, #0
    c310:	f000 8279 	beq.w	c806 <send_debug+0x58a>
    c314:	f24c 3319 	movw	r3, #49945	; 0xc319
    c318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c31c:	781b      	ldrb	r3, [r3, #0]
    c31e:	461a      	mov	r2, r3
    c320:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c328:	2105      	movs	r1, #5
    c32a:	5499      	strb	r1, [r3, r2]
    c32c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c334:	781b      	ldrb	r3, [r3, #0]
    c336:	3301      	adds	r3, #1
    c338:	b2da      	uxtb	r2, r3
    c33a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c342:	701a      	strb	r2, [r3, #0]
    c344:	f24c 3319 	movw	r3, #49945	; 0xc319
    c348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c34c:	781b      	ldrb	r3, [r3, #0]
    c34e:	2bff      	cmp	r3, #255	; 0xff
    c350:	d105      	bne.n	c35e <send_debug+0xe2>
    c352:	f24c 3319 	movw	r3, #49945	; 0xc319
    c356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35a:	2200      	movs	r2, #0
    c35c:	701a      	strb	r2, [r3, #0]
    c35e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c366:	781b      	ldrb	r3, [r3, #0]
    c368:	461a      	mov	r2, r3
    c36a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c372:	210d      	movs	r1, #13
    c374:	5499      	strb	r1, [r3, r2]
    c376:	f24c 3319 	movw	r3, #49945	; 0xc319
    c37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c37e:	781b      	ldrb	r3, [r3, #0]
    c380:	3301      	adds	r3, #1
    c382:	b2da      	uxtb	r2, r3
    c384:	f24c 3319 	movw	r3, #49945	; 0xc319
    c388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c38c:	701a      	strb	r2, [r3, #0]
    c38e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c396:	781b      	ldrb	r3, [r3, #0]
    c398:	2bff      	cmp	r3, #255	; 0xff
    c39a:	d105      	bne.n	c3a8 <send_debug+0x12c>
    c39c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a4:	2200      	movs	r2, #0
    c3a6:	701a      	strb	r2, [r3, #0]
    c3a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b0:	220d      	movs	r2, #13
    c3b2:	701a      	strb	r2, [r3, #0]
    c3b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3bc:	220d      	movs	r2, #13
    c3be:	701a      	strb	r2, [r3, #0]
    c3c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3c8:	781b      	ldrb	r3, [r3, #0]
    c3ca:	461a      	mov	r2, r3
    c3cc:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d4:	781b      	ldrb	r3, [r3, #0]
    c3d6:	b2d9      	uxtb	r1, r3
    c3d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e0:	5499      	strb	r1, [r3, r2]
    c3e2:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ea:	781a      	ldrb	r2, [r3, #0]
    c3ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f4:	781b      	ldrb	r3, [r3, #0]
    c3f6:	4413      	add	r3, r2
    c3f8:	b2da      	uxtb	r2, r3
    c3fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c402:	701a      	strb	r2, [r3, #0]
    c404:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c40c:	781a      	ldrb	r2, [r3, #0]
    c40e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c416:	781b      	ldrb	r3, [r3, #0]
    c418:	4413      	add	r3, r2
    c41a:	b2da      	uxtb	r2, r3
    c41c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c424:	701a      	strb	r2, [r3, #0]
    c426:	f24c 3319 	movw	r3, #49945	; 0xc319
    c42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c42e:	781b      	ldrb	r3, [r3, #0]
    c430:	3301      	adds	r3, #1
    c432:	b2da      	uxtb	r2, r3
    c434:	f24c 3319 	movw	r3, #49945	; 0xc319
    c438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c43c:	701a      	strb	r2, [r3, #0]
    c43e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c446:	781b      	ldrb	r3, [r3, #0]
    c448:	2bff      	cmp	r3, #255	; 0xff
    c44a:	d105      	bne.n	c458 <send_debug+0x1dc>
    c44c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c454:	2200      	movs	r2, #0
    c456:	701a      	strb	r2, [r3, #0]
    c458:	f24c 3319 	movw	r3, #49945	; 0xc319
    c45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c460:	781b      	ldrb	r3, [r3, #0]
    c462:	461a      	mov	r2, r3
    c464:	f24c 4350 	movw	r3, #50256	; 0xc450
    c468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c46c:	7819      	ldrb	r1, [r3, #0]
    c46e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c476:	5499      	strb	r1, [r3, r2]
    c478:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c480:	781a      	ldrb	r2, [r3, #0]
    c482:	f24c 4350 	movw	r3, #50256	; 0xc450
    c486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c48a:	781b      	ldrb	r3, [r3, #0]
    c48c:	4413      	add	r3, r2
    c48e:	b2da      	uxtb	r2, r3
    c490:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c498:	701a      	strb	r2, [r3, #0]
    c49a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a2:	781a      	ldrb	r2, [r3, #0]
    c4a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ac:	781b      	ldrb	r3, [r3, #0]
    c4ae:	4413      	add	r3, r2
    c4b0:	b2da      	uxtb	r2, r3
    c4b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ba:	701a      	strb	r2, [r3, #0]
    c4bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c4:	781b      	ldrb	r3, [r3, #0]
    c4c6:	3301      	adds	r3, #1
    c4c8:	b2da      	uxtb	r2, r3
    c4ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d2:	701a      	strb	r2, [r3, #0]
    c4d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4dc:	781b      	ldrb	r3, [r3, #0]
    c4de:	2bff      	cmp	r3, #255	; 0xff
    c4e0:	d105      	bne.n	c4ee <send_debug+0x272>
    c4e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ea:	2200      	movs	r2, #0
    c4ec:	701a      	strb	r2, [r3, #0]
    c4ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f6:	781b      	ldrb	r3, [r3, #0]
    c4f8:	461a      	mov	r2, r3
    c4fa:	f24c 3318 	movw	r3, #49944	; 0xc318
    c4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c502:	7819      	ldrb	r1, [r3, #0]
    c504:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50c:	5499      	strb	r1, [r3, r2]
    c50e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c516:	781a      	ldrb	r2, [r3, #0]
    c518:	f24c 3318 	movw	r3, #49944	; 0xc318
    c51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c520:	781b      	ldrb	r3, [r3, #0]
    c522:	4413      	add	r3, r2
    c524:	b2da      	uxtb	r2, r3
    c526:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c52e:	701a      	strb	r2, [r3, #0]
    c530:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c538:	781a      	ldrb	r2, [r3, #0]
    c53a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c542:	781b      	ldrb	r3, [r3, #0]
    c544:	4413      	add	r3, r2
    c546:	b2da      	uxtb	r2, r3
    c548:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c550:	701a      	strb	r2, [r3, #0]
    c552:	f24c 3319 	movw	r3, #49945	; 0xc319
    c556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c55a:	781b      	ldrb	r3, [r3, #0]
    c55c:	3301      	adds	r3, #1
    c55e:	b2da      	uxtb	r2, r3
    c560:	f24c 3319 	movw	r3, #49945	; 0xc319
    c564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c568:	701a      	strb	r2, [r3, #0]
    c56a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c572:	781b      	ldrb	r3, [r3, #0]
    c574:	2bff      	cmp	r3, #255	; 0xff
    c576:	d105      	bne.n	c584 <send_debug+0x308>
    c578:	f24c 3319 	movw	r3, #49945	; 0xc319
    c57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c580:	2200      	movs	r2, #0
    c582:	701a      	strb	r2, [r3, #0]
    c584:	f24c 3319 	movw	r3, #49945	; 0xc319
    c588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c58c:	781b      	ldrb	r3, [r3, #0]
    c58e:	461a      	mov	r2, r3
    c590:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c598:	7819      	ldrb	r1, [r3, #0]
    c59a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a2:	5499      	strb	r1, [r3, r2]
    c5a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ac:	781a      	ldrb	r2, [r3, #0]
    c5ae:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b6:	781b      	ldrb	r3, [r3, #0]
    c5b8:	4413      	add	r3, r2
    c5ba:	b2da      	uxtb	r2, r3
    c5bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c4:	701a      	strb	r2, [r3, #0]
    c5c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ce:	781a      	ldrb	r2, [r3, #0]
    c5d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d8:	781b      	ldrb	r3, [r3, #0]
    c5da:	4413      	add	r3, r2
    c5dc:	b2da      	uxtb	r2, r3
    c5de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e6:	701a      	strb	r2, [r3, #0]
    c5e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f0:	781b      	ldrb	r3, [r3, #0]
    c5f2:	3301      	adds	r3, #1
    c5f4:	b2da      	uxtb	r2, r3
    c5f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5fe:	701a      	strb	r2, [r3, #0]
    c600:	f24c 3319 	movw	r3, #49945	; 0xc319
    c604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c608:	781b      	ldrb	r3, [r3, #0]
    c60a:	2bff      	cmp	r3, #255	; 0xff
    c60c:	d105      	bne.n	c61a <send_debug+0x39e>
    c60e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c616:	2200      	movs	r2, #0
    c618:	701a      	strb	r2, [r3, #0]
    c61a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c622:	781b      	ldrb	r3, [r3, #0]
    c624:	461a      	mov	r2, r3
    c626:	f24c 3304 	movw	r3, #49924	; 0xc304
    c62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c62e:	7819      	ldrb	r1, [r3, #0]
    c630:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c638:	5499      	strb	r1, [r3, r2]
    c63a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c642:	781a      	ldrb	r2, [r3, #0]
    c644:	f24c 3304 	movw	r3, #49924	; 0xc304
    c648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c64c:	781b      	ldrb	r3, [r3, #0]
    c64e:	4413      	add	r3, r2
    c650:	b2da      	uxtb	r2, r3
    c652:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c65a:	701a      	strb	r2, [r3, #0]
    c65c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c664:	781a      	ldrb	r2, [r3, #0]
    c666:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c66e:	781b      	ldrb	r3, [r3, #0]
    c670:	4413      	add	r3, r2
    c672:	b2da      	uxtb	r2, r3
    c674:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c67c:	701a      	strb	r2, [r3, #0]
    c67e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c686:	781b      	ldrb	r3, [r3, #0]
    c688:	3301      	adds	r3, #1
    c68a:	b2da      	uxtb	r2, r3
    c68c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c694:	701a      	strb	r2, [r3, #0]
    c696:	f24c 3319 	movw	r3, #49945	; 0xc319
    c69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c69e:	781b      	ldrb	r3, [r3, #0]
    c6a0:	2bff      	cmp	r3, #255	; 0xff
    c6a2:	d105      	bne.n	c6b0 <send_debug+0x434>
    c6a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ac:	2200      	movs	r2, #0
    c6ae:	701a      	strb	r2, [r3, #0]
    c6b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b8:	781b      	ldrb	r3, [r3, #0]
    c6ba:	461a      	mov	r2, r3
    c6bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c4:	7819      	ldrb	r1, [r3, #0]
    c6c6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ce:	5499      	strb	r1, [r3, r2]
    c6d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d8:	781b      	ldrb	r3, [r3, #0]
    c6da:	3301      	adds	r3, #1
    c6dc:	b2da      	uxtb	r2, r3
    c6de:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e6:	701a      	strb	r2, [r3, #0]
    c6e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f0:	781b      	ldrb	r3, [r3, #0]
    c6f2:	2bff      	cmp	r3, #255	; 0xff
    c6f4:	d105      	bne.n	c702 <send_debug+0x486>
    c6f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6fe:	2200      	movs	r2, #0
    c700:	701a      	strb	r2, [r3, #0]
    c702:	f24c 3319 	movw	r3, #49945	; 0xc319
    c706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c70a:	781b      	ldrb	r3, [r3, #0]
    c70c:	461a      	mov	r2, r3
    c70e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c716:	7819      	ldrb	r1, [r3, #0]
    c718:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c720:	5499      	strb	r1, [r3, r2]
    c722:	f24c 3319 	movw	r3, #49945	; 0xc319
    c726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c72a:	781b      	ldrb	r3, [r3, #0]
    c72c:	3301      	adds	r3, #1
    c72e:	b2da      	uxtb	r2, r3
    c730:	f24c 3319 	movw	r3, #49945	; 0xc319
    c734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c738:	701a      	strb	r2, [r3, #0]
    c73a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c742:	781b      	ldrb	r3, [r3, #0]
    c744:	2bff      	cmp	r3, #255	; 0xff
    c746:	d105      	bne.n	c754 <send_debug+0x4d8>
    c748:	f24c 3319 	movw	r3, #49945	; 0xc319
    c74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c750:	2200      	movs	r2, #0
    c752:	701a      	strb	r2, [r3, #0]
    c754:	f242 0339 	movw	r3, #8249	; 0x2039
    c758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c75c:	781b      	ldrb	r3, [r3, #0]
    c75e:	b2db      	uxtb	r3, r3
    c760:	f003 0310 	and.w	r3, r3, #16
    c764:	2b00      	cmp	r3, #0
    c766:	d15a      	bne.n	c81e <send_debug+0x5a2>
    c768:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c770:	781b      	ldrb	r3, [r3, #0]
    c772:	b2db      	uxtb	r3, r3
    c774:	461a      	mov	r2, r3
    c776:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c77e:	5c9a      	ldrb	r2, [r3, r2]
    c780:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c788:	701a      	strb	r2, [r3, #0]
    c78a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c792:	2200      	movs	r2, #0
    c794:	701a      	strb	r2, [r3, #0]
    c796:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c79e:	781b      	ldrb	r3, [r3, #0]
    c7a0:	b2db      	uxtb	r3, r3
    c7a2:	3301      	adds	r3, #1
    c7a4:	b2da      	uxtb	r2, r3
    c7a6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ae:	701a      	strb	r2, [r3, #0]
    c7b0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b8:	781b      	ldrb	r3, [r3, #0]
    c7ba:	b2db      	uxtb	r3, r3
    c7bc:	2bff      	cmp	r3, #255	; 0xff
    c7be:	d105      	bne.n	c7cc <send_debug+0x550>
    c7c0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c8:	2200      	movs	r2, #0
    c7ca:	701a      	strb	r2, [r3, #0]
    c7cc:	f242 0338 	movw	r3, #8248	; 0x2038
    c7d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d4:	f242 0238 	movw	r2, #8248	; 0x2038
    c7d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c7dc:	7812      	ldrb	r2, [r2, #0]
    c7de:	b2d2      	uxtb	r2, r2
    c7e0:	f042 0201 	orr.w	r2, r2, #1
    c7e4:	b2d2      	uxtb	r2, r2
    c7e6:	701a      	strb	r2, [r3, #0]
    c7e8:	f242 0339 	movw	r3, #8249	; 0x2039
    c7ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7f0:	f242 0239 	movw	r2, #8249	; 0x2039
    c7f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c7f8:	7812      	ldrb	r2, [r2, #0]
    c7fa:	b2d2      	uxtb	r2, r2
    c7fc:	f042 0210 	orr.w	r2, r2, #16
    c800:	b2d2      	uxtb	r2, r2
    c802:	701a      	strb	r2, [r3, #0]
    c804:	e00b      	b.n	c81e <send_debug+0x5a2>
    c806:	f24c 3318 	movw	r3, #49944	; 0xc318
    c80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c80e:	781b      	ldrb	r3, [r3, #0]
    c810:	3301      	adds	r3, #1
    c812:	b2da      	uxtb	r2, r3
    c814:	f24c 3318 	movw	r3, #49944	; 0xc318
    c818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c81c:	701a      	strb	r2, [r3, #0]
}
    c81e:	46bd      	mov	sp, r7
    c820:	f85d 7b04 	ldr.w	r7, [sp], #4
    c824:	4770      	bx	lr
    c826:	bf00      	nop

0000c828 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c828:	b480      	push	{r7}
    c82a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c82c:	f24c 3311 	movw	r3, #49937	; 0xc311
    c830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c834:	781a      	ldrb	r2, [r3, #0]
    c836:	f248 531f 	movw	r3, #34079	; 0x851f
    c83a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c83e:	fba3 1302 	umull	r1, r3, r3, r2
    c842:	095b      	lsrs	r3, r3, #5
    c844:	2164      	movs	r1, #100	; 0x64
    c846:	fb01 f303 	mul.w	r3, r1, r3
    c84a:	1ad3      	subs	r3, r2, r3
    c84c:	b2db      	uxtb	r3, r3
    c84e:	2b31      	cmp	r3, #49	; 0x31
    c850:	f040 8395 	bne.w	cf7e <send_nav_ref+0x756>
    c854:	f24c 3319 	movw	r3, #49945	; 0xc319
    c858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c85c:	781a      	ldrb	r2, [r3, #0]
    c85e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c866:	781b      	ldrb	r3, [r3, #0]
    c868:	b2db      	uxtb	r3, r3
    c86a:	429a      	cmp	r2, r3
    c86c:	d313      	bcc.n	c896 <send_nav_ref+0x6e>
    c86e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c876:	781b      	ldrb	r3, [r3, #0]
    c878:	b2db      	uxtb	r3, r3
    c87a:	461a      	mov	r2, r3
    c87c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c884:	781b      	ldrb	r3, [r3, #0]
    c886:	1ad3      	subs	r3, r2, r3
    c888:	33ff      	adds	r3, #255	; 0xff
    c88a:	2b0c      	cmp	r3, #12
    c88c:	bfd4      	ite	le
    c88e:	2300      	movle	r3, #0
    c890:	2301      	movgt	r3, #1
    c892:	b2db      	uxtb	r3, r3
    c894:	e011      	b.n	c8ba <send_nav_ref+0x92>
    c896:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c89e:	781b      	ldrb	r3, [r3, #0]
    c8a0:	b2db      	uxtb	r3, r3
    c8a2:	461a      	mov	r2, r3
    c8a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ac:	781b      	ldrb	r3, [r3, #0]
    c8ae:	1ad3      	subs	r3, r2, r3
    c8b0:	2b0c      	cmp	r3, #12
    c8b2:	bfd4      	ite	le
    c8b4:	2300      	movle	r3, #0
    c8b6:	2301      	movgt	r3, #1
    c8b8:	b2db      	uxtb	r3, r3
    c8ba:	2b00      	cmp	r3, #0
    c8bc:	f000 8353 	beq.w	cf66 <send_nav_ref+0x73e>
    c8c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c8:	781b      	ldrb	r3, [r3, #0]
    c8ca:	461a      	mov	r2, r3
    c8cc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d4:	2105      	movs	r1, #5
    c8d6:	5499      	strb	r1, [r3, r2]
    c8d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8e0:	781b      	ldrb	r3, [r3, #0]
    c8e2:	3301      	adds	r3, #1
    c8e4:	b2da      	uxtb	r2, r3
    c8e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ee:	701a      	strb	r2, [r3, #0]
    c8f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8f8:	781b      	ldrb	r3, [r3, #0]
    c8fa:	2bff      	cmp	r3, #255	; 0xff
    c8fc:	d105      	bne.n	c90a <send_nav_ref+0xe2>
    c8fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    c902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c906:	2200      	movs	r2, #0
    c908:	701a      	strb	r2, [r3, #0]
    c90a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c912:	781b      	ldrb	r3, [r3, #0]
    c914:	461a      	mov	r2, r3
    c916:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c91e:	2109      	movs	r1, #9
    c920:	5499      	strb	r1, [r3, r2]
    c922:	f24c 3319 	movw	r3, #49945	; 0xc319
    c926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c92a:	781b      	ldrb	r3, [r3, #0]
    c92c:	3301      	adds	r3, #1
    c92e:	b2da      	uxtb	r2, r3
    c930:	f24c 3319 	movw	r3, #49945	; 0xc319
    c934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c938:	701a      	strb	r2, [r3, #0]
    c93a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c942:	781b      	ldrb	r3, [r3, #0]
    c944:	2bff      	cmp	r3, #255	; 0xff
    c946:	d105      	bne.n	c954 <send_nav_ref+0x12c>
    c948:	f24c 3319 	movw	r3, #49945	; 0xc319
    c94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c950:	2200      	movs	r2, #0
    c952:	701a      	strb	r2, [r3, #0]
    c954:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c95c:	2209      	movs	r2, #9
    c95e:	701a      	strb	r2, [r3, #0]
    c960:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c968:	2209      	movs	r2, #9
    c96a:	701a      	strb	r2, [r3, #0]
    c96c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c974:	781b      	ldrb	r3, [r3, #0]
    c976:	461a      	mov	r2, r3
    c978:	f648 03fc 	movw	r3, #35068	; 0x88fc
    c97c:	f2c0 0301 	movt	r3, #1
    c980:	7819      	ldrb	r1, [r3, #0]
    c982:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c98a:	5499      	strb	r1, [r3, r2]
    c98c:	f648 03fc 	movw	r3, #35068	; 0x88fc
    c990:	f2c0 0301 	movt	r3, #1
    c994:	781a      	ldrb	r2, [r3, #0]
    c996:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c99e:	781b      	ldrb	r3, [r3, #0]
    c9a0:	4413      	add	r3, r2
    c9a2:	b2da      	uxtb	r2, r3
    c9a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ac:	701a      	strb	r2, [r3, #0]
    c9ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b6:	781a      	ldrb	r2, [r3, #0]
    c9b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9c0:	781b      	ldrb	r3, [r3, #0]
    c9c2:	4413      	add	r3, r2
    c9c4:	b2da      	uxtb	r2, r3
    c9c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ce:	701a      	strb	r2, [r3, #0]
    c9d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d8:	781b      	ldrb	r3, [r3, #0]
    c9da:	3301      	adds	r3, #1
    c9dc:	b2da      	uxtb	r2, r3
    c9de:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e6:	701a      	strb	r2, [r3, #0]
    c9e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f0:	781b      	ldrb	r3, [r3, #0]
    c9f2:	2bff      	cmp	r3, #255	; 0xff
    c9f4:	d105      	bne.n	ca02 <send_nav_ref+0x1da>
    c9f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9fe:	2200      	movs	r2, #0
    ca00:	701a      	strb	r2, [r3, #0]
    ca02:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0a:	781b      	ldrb	r3, [r3, #0]
    ca0c:	461a      	mov	r2, r3
    ca0e:	f648 03fc 	movw	r3, #35068	; 0x88fc
    ca12:	f2c0 0301 	movt	r3, #1
    ca16:	7859      	ldrb	r1, [r3, #1]
    ca18:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ca1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca20:	5499      	strb	r1, [r3, r2]
    ca22:	4bd2      	ldr	r3, [pc, #840]	; (cd6c <send_nav_ref+0x544>)
    ca24:	781a      	ldrb	r2, [r3, #0]
    ca26:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca2e:	781b      	ldrb	r3, [r3, #0]
    ca30:	4413      	add	r3, r2
    ca32:	b2da      	uxtb	r2, r3
    ca34:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3c:	701a      	strb	r2, [r3, #0]
    ca3e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ca42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca46:	781a      	ldrb	r2, [r3, #0]
    ca48:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca50:	781b      	ldrb	r3, [r3, #0]
    ca52:	4413      	add	r3, r2
    ca54:	b2da      	uxtb	r2, r3
    ca56:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ca5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca5e:	701a      	strb	r2, [r3, #0]
    ca60:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca68:	781b      	ldrb	r3, [r3, #0]
    ca6a:	3301      	adds	r3, #1
    ca6c:	b2da      	uxtb	r2, r3
    ca6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca76:	701a      	strb	r2, [r3, #0]
    ca78:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca80:	781b      	ldrb	r3, [r3, #0]
    ca82:	2bff      	cmp	r3, #255	; 0xff
    ca84:	d105      	bne.n	ca92 <send_nav_ref+0x26a>
    ca86:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca8e:	2200      	movs	r2, #0
    ca90:	701a      	strb	r2, [r3, #0]
    ca92:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca9a:	781b      	ldrb	r3, [r3, #0]
    ca9c:	461a      	mov	r2, r3
    ca9e:	f648 03fc 	movw	r3, #35068	; 0x88fc
    caa2:	f2c0 0301 	movt	r3, #1
    caa6:	7899      	ldrb	r1, [r3, #2]
    caa8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    caac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab0:	5499      	strb	r1, [r3, r2]
    cab2:	4baf      	ldr	r3, [pc, #700]	; (cd70 <send_nav_ref+0x548>)
    cab4:	781a      	ldrb	r2, [r3, #0]
    cab6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    caba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cabe:	781b      	ldrb	r3, [r3, #0]
    cac0:	4413      	add	r3, r2
    cac2:	b2da      	uxtb	r2, r3
    cac4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cacc:	701a      	strb	r2, [r3, #0]
    cace:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad6:	781a      	ldrb	r2, [r3, #0]
    cad8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae0:	781b      	ldrb	r3, [r3, #0]
    cae2:	4413      	add	r3, r2
    cae4:	b2da      	uxtb	r2, r3
    cae6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    caea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caee:	701a      	strb	r2, [r3, #0]
    caf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    caf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf8:	781b      	ldrb	r3, [r3, #0]
    cafa:	3301      	adds	r3, #1
    cafc:	b2da      	uxtb	r2, r3
    cafe:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb06:	701a      	strb	r2, [r3, #0]
    cb08:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb10:	781b      	ldrb	r3, [r3, #0]
    cb12:	2bff      	cmp	r3, #255	; 0xff
    cb14:	d105      	bne.n	cb22 <send_nav_ref+0x2fa>
    cb16:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb1e:	2200      	movs	r2, #0
    cb20:	701a      	strb	r2, [r3, #0]
    cb22:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2a:	781b      	ldrb	r3, [r3, #0]
    cb2c:	461a      	mov	r2, r3
    cb2e:	f648 03fc 	movw	r3, #35068	; 0x88fc
    cb32:	f2c0 0301 	movt	r3, #1
    cb36:	78d9      	ldrb	r1, [r3, #3]
    cb38:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb40:	5499      	strb	r1, [r3, r2]
    cb42:	4b8c      	ldr	r3, [pc, #560]	; (cd74 <send_nav_ref+0x54c>)
    cb44:	781a      	ldrb	r2, [r3, #0]
    cb46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb4e:	781b      	ldrb	r3, [r3, #0]
    cb50:	4413      	add	r3, r2
    cb52:	b2da      	uxtb	r2, r3
    cb54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb5c:	701a      	strb	r2, [r3, #0]
    cb5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb66:	781a      	ldrb	r2, [r3, #0]
    cb68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb70:	781b      	ldrb	r3, [r3, #0]
    cb72:	4413      	add	r3, r2
    cb74:	b2da      	uxtb	r2, r3
    cb76:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb7e:	701a      	strb	r2, [r3, #0]
    cb80:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb88:	781b      	ldrb	r3, [r3, #0]
    cb8a:	3301      	adds	r3, #1
    cb8c:	b2da      	uxtb	r2, r3
    cb8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb96:	701a      	strb	r2, [r3, #0]
    cb98:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba0:	781b      	ldrb	r3, [r3, #0]
    cba2:	2bff      	cmp	r3, #255	; 0xff
    cba4:	d105      	bne.n	cbb2 <send_nav_ref+0x38a>
    cba6:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbae:	2200      	movs	r2, #0
    cbb0:	701a      	strb	r2, [r3, #0]
    cbb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbba:	781b      	ldrb	r3, [r3, #0]
    cbbc:	461a      	mov	r2, r3
    cbbe:	f648 1300 	movw	r3, #35072	; 0x8900
    cbc2:	f2c0 0301 	movt	r3, #1
    cbc6:	7819      	ldrb	r1, [r3, #0]
    cbc8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd0:	5499      	strb	r1, [r3, r2]
    cbd2:	f648 1300 	movw	r3, #35072	; 0x8900
    cbd6:	f2c0 0301 	movt	r3, #1
    cbda:	781a      	ldrb	r2, [r3, #0]
    cbdc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cbe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe4:	781b      	ldrb	r3, [r3, #0]
    cbe6:	4413      	add	r3, r2
    cbe8:	b2da      	uxtb	r2, r3
    cbea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf2:	701a      	strb	r2, [r3, #0]
    cbf4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbfc:	781a      	ldrb	r2, [r3, #0]
    cbfe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc06:	781b      	ldrb	r3, [r3, #0]
    cc08:	4413      	add	r3, r2
    cc0a:	b2da      	uxtb	r2, r3
    cc0c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc14:	701a      	strb	r2, [r3, #0]
    cc16:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc1e:	781b      	ldrb	r3, [r3, #0]
    cc20:	3301      	adds	r3, #1
    cc22:	b2da      	uxtb	r2, r3
    cc24:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc2c:	701a      	strb	r2, [r3, #0]
    cc2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc36:	781b      	ldrb	r3, [r3, #0]
    cc38:	2bff      	cmp	r3, #255	; 0xff
    cc3a:	d105      	bne.n	cc48 <send_nav_ref+0x420>
    cc3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc44:	2200      	movs	r2, #0
    cc46:	701a      	strb	r2, [r3, #0]
    cc48:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc50:	781b      	ldrb	r3, [r3, #0]
    cc52:	461a      	mov	r2, r3
    cc54:	f648 1300 	movw	r3, #35072	; 0x8900
    cc58:	f2c0 0301 	movt	r3, #1
    cc5c:	7859      	ldrb	r1, [r3, #1]
    cc5e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc66:	5499      	strb	r1, [r3, r2]
    cc68:	4b43      	ldr	r3, [pc, #268]	; (cd78 <send_nav_ref+0x550>)
    cc6a:	781a      	ldrb	r2, [r3, #0]
    cc6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc74:	781b      	ldrb	r3, [r3, #0]
    cc76:	4413      	add	r3, r2
    cc78:	b2da      	uxtb	r2, r3
    cc7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc82:	701a      	strb	r2, [r3, #0]
    cc84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc8c:	781a      	ldrb	r2, [r3, #0]
    cc8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc96:	781b      	ldrb	r3, [r3, #0]
    cc98:	4413      	add	r3, r2
    cc9a:	b2da      	uxtb	r2, r3
    cc9c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca4:	701a      	strb	r2, [r3, #0]
    cca6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccae:	781b      	ldrb	r3, [r3, #0]
    ccb0:	3301      	adds	r3, #1
    ccb2:	b2da      	uxtb	r2, r3
    ccb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccbc:	701a      	strb	r2, [r3, #0]
    ccbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc6:	781b      	ldrb	r3, [r3, #0]
    ccc8:	2bff      	cmp	r3, #255	; 0xff
    ccca:	d105      	bne.n	ccd8 <send_nav_ref+0x4b0>
    cccc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd4:	2200      	movs	r2, #0
    ccd6:	701a      	strb	r2, [r3, #0]
    ccd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce0:	781b      	ldrb	r3, [r3, #0]
    cce2:	461a      	mov	r2, r3
    cce4:	f648 1300 	movw	r3, #35072	; 0x8900
    cce8:	f2c0 0301 	movt	r3, #1
    ccec:	7899      	ldrb	r1, [r3, #2]
    ccee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ccf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccf6:	5499      	strb	r1, [r3, r2]
    ccf8:	4b20      	ldr	r3, [pc, #128]	; (cd7c <send_nav_ref+0x554>)
    ccfa:	781a      	ldrb	r2, [r3, #0]
    ccfc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd04:	781b      	ldrb	r3, [r3, #0]
    cd06:	4413      	add	r3, r2
    cd08:	b2da      	uxtb	r2, r3
    cd0a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd12:	701a      	strb	r2, [r3, #0]
    cd14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd1c:	781a      	ldrb	r2, [r3, #0]
    cd1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd26:	781b      	ldrb	r3, [r3, #0]
    cd28:	4413      	add	r3, r2
    cd2a:	b2da      	uxtb	r2, r3
    cd2c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd34:	701a      	strb	r2, [r3, #0]
    cd36:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd3e:	781b      	ldrb	r3, [r3, #0]
    cd40:	3301      	adds	r3, #1
    cd42:	b2da      	uxtb	r2, r3
    cd44:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd4c:	701a      	strb	r2, [r3, #0]
    cd4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd56:	781b      	ldrb	r3, [r3, #0]
    cd58:	2bff      	cmp	r3, #255	; 0xff
    cd5a:	d111      	bne.n	cd80 <send_nav_ref+0x558>
    cd5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd64:	2200      	movs	r2, #0
    cd66:	701a      	strb	r2, [r3, #0]
    cd68:	e00a      	b.n	cd80 <send_nav_ref+0x558>
    cd6a:	bf00      	nop
    cd6c:	000188fd 	.word	0x000188fd
    cd70:	000188fe 	.word	0x000188fe
    cd74:	000188ff 	.word	0x000188ff
    cd78:	00018901 	.word	0x00018901
    cd7c:	00018902 	.word	0x00018902
    cd80:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd88:	781b      	ldrb	r3, [r3, #0]
    cd8a:	461a      	mov	r2, r3
    cd8c:	f648 1300 	movw	r3, #35072	; 0x8900
    cd90:	f2c0 0301 	movt	r3, #1
    cd94:	78d9      	ldrb	r1, [r3, #3]
    cd96:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd9e:	5499      	strb	r1, [r3, r2]
    cda0:	4b79      	ldr	r3, [pc, #484]	; (cf88 <send_nav_ref+0x760>)
    cda2:	781a      	ldrb	r2, [r3, #0]
    cda4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdac:	781b      	ldrb	r3, [r3, #0]
    cdae:	4413      	add	r3, r2
    cdb0:	b2da      	uxtb	r2, r3
    cdb2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cdb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdba:	701a      	strb	r2, [r3, #0]
    cdbc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cdc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc4:	781a      	ldrb	r2, [r3, #0]
    cdc6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cdca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdce:	781b      	ldrb	r3, [r3, #0]
    cdd0:	4413      	add	r3, r2
    cdd2:	b2da      	uxtb	r2, r3
    cdd4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cdd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cddc:	701a      	strb	r2, [r3, #0]
    cdde:	f24c 3319 	movw	r3, #49945	; 0xc319
    cde2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cde6:	781b      	ldrb	r3, [r3, #0]
    cde8:	3301      	adds	r3, #1
    cdea:	b2da      	uxtb	r2, r3
    cdec:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdf4:	701a      	strb	r2, [r3, #0]
    cdf6:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdfe:	781b      	ldrb	r3, [r3, #0]
    ce00:	2bff      	cmp	r3, #255	; 0xff
    ce02:	d105      	bne.n	ce10 <send_nav_ref+0x5e8>
    ce04:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce0c:	2200      	movs	r2, #0
    ce0e:	701a      	strb	r2, [r3, #0]
    ce10:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce18:	781b      	ldrb	r3, [r3, #0]
    ce1a:	461a      	mov	r2, r3
    ce1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce24:	7819      	ldrb	r1, [r3, #0]
    ce26:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ce2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce2e:	5499      	strb	r1, [r3, r2]
    ce30:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce38:	781b      	ldrb	r3, [r3, #0]
    ce3a:	3301      	adds	r3, #1
    ce3c:	b2da      	uxtb	r2, r3
    ce3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce46:	701a      	strb	r2, [r3, #0]
    ce48:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce50:	781b      	ldrb	r3, [r3, #0]
    ce52:	2bff      	cmp	r3, #255	; 0xff
    ce54:	d105      	bne.n	ce62 <send_nav_ref+0x63a>
    ce56:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce5e:	2200      	movs	r2, #0
    ce60:	701a      	strb	r2, [r3, #0]
    ce62:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce6a:	781b      	ldrb	r3, [r3, #0]
    ce6c:	461a      	mov	r2, r3
    ce6e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce76:	7819      	ldrb	r1, [r3, #0]
    ce78:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ce7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce80:	5499      	strb	r1, [r3, r2]
    ce82:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce8a:	781b      	ldrb	r3, [r3, #0]
    ce8c:	3301      	adds	r3, #1
    ce8e:	b2da      	uxtb	r2, r3
    ce90:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce98:	701a      	strb	r2, [r3, #0]
    ce9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea2:	781b      	ldrb	r3, [r3, #0]
    cea4:	2bff      	cmp	r3, #255	; 0xff
    cea6:	d105      	bne.n	ceb4 <send_nav_ref+0x68c>
    cea8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ceac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceb0:	2200      	movs	r2, #0
    ceb2:	701a      	strb	r2, [r3, #0]
    ceb4:	f242 0339 	movw	r3, #8249	; 0x2039
    ceb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cebc:	781b      	ldrb	r3, [r3, #0]
    cebe:	b2db      	uxtb	r3, r3
    cec0:	f003 0310 	and.w	r3, r3, #16
    cec4:	2b00      	cmp	r3, #0
    cec6:	d15a      	bne.n	cf7e <send_nav_ref+0x756>
    cec8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced0:	781b      	ldrb	r3, [r3, #0]
    ced2:	b2db      	uxtb	r3, r3
    ced4:	461a      	mov	r2, r3
    ced6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ceda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cede:	5c9a      	ldrb	r2, [r3, r2]
    cee0:	f24c 431b 	movw	r3, #50203	; 0xc41b
    cee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee8:	701a      	strb	r2, [r3, #0]
    ceea:	f24c 431c 	movw	r3, #50204	; 0xc41c
    ceee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef2:	2200      	movs	r2, #0
    cef4:	701a      	strb	r2, [r3, #0]
    cef6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cefe:	781b      	ldrb	r3, [r3, #0]
    cf00:	b2db      	uxtb	r3, r3
    cf02:	3301      	adds	r3, #1
    cf04:	b2da      	uxtb	r2, r3
    cf06:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf0e:	701a      	strb	r2, [r3, #0]
    cf10:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf18:	781b      	ldrb	r3, [r3, #0]
    cf1a:	b2db      	uxtb	r3, r3
    cf1c:	2bff      	cmp	r3, #255	; 0xff
    cf1e:	d105      	bne.n	cf2c <send_nav_ref+0x704>
    cf20:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf28:	2200      	movs	r2, #0
    cf2a:	701a      	strb	r2, [r3, #0]
    cf2c:	f242 0338 	movw	r3, #8248	; 0x2038
    cf30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf34:	f242 0238 	movw	r2, #8248	; 0x2038
    cf38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf3c:	7812      	ldrb	r2, [r2, #0]
    cf3e:	b2d2      	uxtb	r2, r2
    cf40:	f042 0201 	orr.w	r2, r2, #1
    cf44:	b2d2      	uxtb	r2, r2
    cf46:	701a      	strb	r2, [r3, #0]
    cf48:	f242 0339 	movw	r3, #8249	; 0x2039
    cf4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf50:	f242 0239 	movw	r2, #8249	; 0x2039
    cf54:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf58:	7812      	ldrb	r2, [r2, #0]
    cf5a:	b2d2      	uxtb	r2, r2
    cf5c:	f042 0210 	orr.w	r2, r2, #16
    cf60:	b2d2      	uxtb	r2, r2
    cf62:	701a      	strb	r2, [r3, #0]
    cf64:	e00b      	b.n	cf7e <send_nav_ref+0x756>
    cf66:	f24c 3318 	movw	r3, #49944	; 0xc318
    cf6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf6e:	781b      	ldrb	r3, [r3, #0]
    cf70:	3301      	adds	r3, #1
    cf72:	b2da      	uxtb	r2, r3
    cf74:	f24c 3318 	movw	r3, #49944	; 0xc318
    cf78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf7c:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cf7e:	46bd      	mov	sp, r7
    cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf84:	4770      	bx	lr
    cf86:	bf00      	nop
    cf88:	00018903 	.word	0x00018903

0000cf8c <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cf8c:	b480      	push	{r7}
    cf8e:	b083      	sub	sp, #12
    cf90:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cf92:	f24c 4320 	movw	r3, #50208	; 0xc420
    cf96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf9a:	8a1b      	ldrh	r3, [r3, #16]
    cf9c:	b21b      	sxth	r3, r3
    cf9e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cfa2:	db0d      	blt.n	cfc0 <inflight_calib_mode_update+0x34>
    cfa4:	f24c 4320 	movw	r3, #50208	; 0xc420
    cfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfac:	8a1b      	ldrh	r3, [r3, #16]
    cfae:	b21a      	sxth	r2, r3
    cfb0:	f640 437f 	movw	r3, #3199	; 0xc7f
    cfb4:	429a      	cmp	r2, r3
    cfb6:	bfd4      	ite	le
    cfb8:	2300      	movle	r3, #0
    cfba:	2301      	movgt	r3, #1
    cfbc:	b2db      	uxtb	r3, r3
    cfbe:	e000      	b.n	cfc2 <inflight_calib_mode_update+0x36>
    cfc0:	2302      	movs	r3, #2
    cfc2:	71fb      	strb	r3, [r7, #7]
    cfc4:	f64c 132c 	movw	r3, #51500	; 0xc92c
    cfc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfcc:	781b      	ldrb	r3, [r3, #0]
    cfce:	79fa      	ldrb	r2, [r7, #7]
    cfd0:	429a      	cmp	r2, r3
    cfd2:	d007      	beq.n	cfe4 <inflight_calib_mode_update+0x58>
    cfd4:	f64c 132c 	movw	r3, #51500	; 0xc92c
    cfd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfdc:	79fa      	ldrb	r2, [r7, #7]
    cfde:	701a      	strb	r2, [r3, #0]
    cfe0:	2301      	movs	r3, #1
    cfe2:	e000      	b.n	cfe6 <inflight_calib_mode_update+0x5a>
    cfe4:	2300      	movs	r3, #0
}
    cfe6:	4618      	mov	r0, r3
    cfe8:	370c      	adds	r7, #12
    cfea:	46bd      	mov	sp, r7
    cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
    cff0:	4770      	bx	lr
    cff2:	bf00      	nop

0000cff4 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    cff4:	b580      	push	{r7, lr}
    cff6:	b082      	sub	sp, #8
    cff8:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    cffa:	f24c 434e 	movw	r3, #50254	; 0xc44e
    cffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d002:	2201      	movs	r2, #1
    d004:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d006:	f24c 434e 	movw	r3, #50254	; 0xc44e
    d00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d00e:	781b      	ldrb	r3, [r3, #0]
    d010:	b2db      	uxtb	r3, r3
    d012:	2b00      	cmp	r3, #0
    d014:	f000 83b8 	beq.w	d788 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    d018:	2300      	movs	r3, #0
    d01a:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d01c:	f7fa fa9c 	bl	7558 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d020:	4b3a      	ldr	r3, [pc, #232]	; (d10c <radio_control_task+0x118>)
    d022:	781b      	ldrb	r3, [r3, #0]
    d024:	b2db      	uxtb	r3, r3
    d026:	f003 0302 	and.w	r3, r3, #2
    d02a:	2b00      	cmp	r3, #0
    d02c:	d00d      	beq.n	d04a <radio_control_task+0x56>
    d02e:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d036:	781b      	ldrb	r3, [r3, #0]
    d038:	2b01      	cmp	r3, #1
    d03a:	d00d      	beq.n	d058 <radio_control_task+0x64>
    d03c:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d044:	781b      	ldrb	r3, [r3, #0]
    d046:	2b00      	cmp	r3, #0
    d048:	d006      	beq.n	d058 <radio_control_task+0x64>
    d04a:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
    d04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d052:	781b      	ldrb	r3, [r3, #0]
    d054:	2b00      	cmp	r3, #0
    d056:	d007      	beq.n	d068 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d058:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d060:	2203      	movs	r2, #3
    d062:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d064:	2301      	movs	r3, #1
    d066:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d068:	f7fa f950 	bl	730c <pprz_mode_update>
    d06c:	4603      	mov	r3, r0
    d06e:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d070:	79fa      	ldrb	r2, [r7, #7]
    d072:	79bb      	ldrb	r3, [r7, #6]
    d074:	4313      	orrs	r3, r2
    d076:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d078:	f7fa f994 	bl	73a4 <ir_estim_mode_update>
    d07c:	4603      	mov	r3, r0
    d07e:	461a      	mov	r2, r3
    d080:	79fb      	ldrb	r3, [r7, #7]
    d082:	4313      	orrs	r3, r2
    d084:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d086:	f7ff ff81 	bl	cf8c <inflight_calib_mode_update>
    d08a:	4603      	mov	r3, r0
    d08c:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d08e:	797b      	ldrb	r3, [r7, #5]
    d090:	2b00      	cmp	r3, #0
    d092:	d102      	bne.n	d09a <radio_control_task+0xa6>
    d094:	79bb      	ldrb	r3, [r7, #6]
    d096:	2b00      	cmp	r3, #0
    d098:	d001      	beq.n	d09e <radio_control_task+0xaa>
    d09a:	2301      	movs	r3, #1
    d09c:	e000      	b.n	d0a0 <radio_control_task+0xac>
    d09e:	2300      	movs	r3, #0
    d0a0:	b2db      	uxtb	r3, r3
    d0a2:	4618      	mov	r0, r3
    d0a4:	f008 fba0 	bl	157e8 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d0a8:	79fa      	ldrb	r2, [r7, #7]
    d0aa:	797b      	ldrb	r3, [r7, #5]
    d0ac:	4313      	orrs	r3, r2
    d0ae:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d0b0:	f7fa f9a0 	bl	73f4 <mcu1_status_update>
    d0b4:	4603      	mov	r3, r0
    d0b6:	461a      	mov	r2, r3
    d0b8:	79fb      	ldrb	r3, [r7, #7]
    d0ba:	4313      	orrs	r3, r2
    d0bc:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d0be:	2301      	movs	r3, #1
    d0c0:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d0c2:	79fb      	ldrb	r3, [r7, #7]
    d0c4:	2b00      	cmp	r3, #0
    d0c6:	f000 82bc 	beq.w	d642 <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d0ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    d0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0d2:	781a      	ldrb	r2, [r3, #0]
    d0d4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0dc:	781b      	ldrb	r3, [r3, #0]
    d0de:	b2db      	uxtb	r3, r3
    d0e0:	429a      	cmp	r2, r3
    d0e2:	d315      	bcc.n	d110 <radio_control_task+0x11c>
    d0e4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0ec:	781b      	ldrb	r3, [r3, #0]
    d0ee:	b2db      	uxtb	r3, r3
    d0f0:	461a      	mov	r2, r3
    d0f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0fa:	781b      	ldrb	r3, [r3, #0]
    d0fc:	1ad3      	subs	r3, r2, r3
    d0fe:	33ff      	adds	r3, #255	; 0xff
    d100:	2b09      	cmp	r3, #9
    d102:	bfd4      	ite	le
    d104:	2300      	movle	r3, #0
    d106:	2301      	movgt	r3, #1
    d108:	b2db      	uxtb	r3, r3
    d10a:	e013      	b.n	d134 <radio_control_task+0x140>
    d10c:	2004c433 	.word	0x2004c433
    d110:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d118:	781b      	ldrb	r3, [r3, #0]
    d11a:	b2db      	uxtb	r3, r3
    d11c:	461a      	mov	r2, r3
    d11e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d126:	781b      	ldrb	r3, [r3, #0]
    d128:	1ad3      	subs	r3, r2, r3
    d12a:	2b09      	cmp	r3, #9
    d12c:	bfd4      	ite	le
    d12e:	2300      	movle	r3, #0
    d130:	2301      	movgt	r3, #1
    d132:	b2db      	uxtb	r3, r3
    d134:	2b00      	cmp	r3, #0
    d136:	f000 8278 	beq.w	d62a <radio_control_task+0x636>
    d13a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d142:	781b      	ldrb	r3, [r3, #0]
    d144:	461a      	mov	r2, r3
    d146:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d14e:	2105      	movs	r1, #5
    d150:	5499      	strb	r1, [r3, r2]
    d152:	f24c 3319 	movw	r3, #49945	; 0xc319
    d156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d15a:	781b      	ldrb	r3, [r3, #0]
    d15c:	3301      	adds	r3, #1
    d15e:	b2da      	uxtb	r2, r3
    d160:	f24c 3319 	movw	r3, #49945	; 0xc319
    d164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d168:	701a      	strb	r2, [r3, #0]
    d16a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d172:	781b      	ldrb	r3, [r3, #0]
    d174:	2bff      	cmp	r3, #255	; 0xff
    d176:	d105      	bne.n	d184 <radio_control_task+0x190>
    d178:	f24c 3319 	movw	r3, #49945	; 0xc319
    d17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d180:	2200      	movs	r2, #0
    d182:	701a      	strb	r2, [r3, #0]
    d184:	f24c 3319 	movw	r3, #49945	; 0xc319
    d188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d18c:	781b      	ldrb	r3, [r3, #0]
    d18e:	461a      	mov	r2, r3
    d190:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d198:	210b      	movs	r1, #11
    d19a:	5499      	strb	r1, [r3, r2]
    d19c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a4:	781b      	ldrb	r3, [r3, #0]
    d1a6:	3301      	adds	r3, #1
    d1a8:	b2da      	uxtb	r2, r3
    d1aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1b2:	701a      	strb	r2, [r3, #0]
    d1b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1bc:	781b      	ldrb	r3, [r3, #0]
    d1be:	2bff      	cmp	r3, #255	; 0xff
    d1c0:	d105      	bne.n	d1ce <radio_control_task+0x1da>
    d1c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ca:	2200      	movs	r2, #0
    d1cc:	701a      	strb	r2, [r3, #0]
    d1ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d6:	220b      	movs	r2, #11
    d1d8:	701a      	strb	r2, [r3, #0]
    d1da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e2:	220b      	movs	r2, #11
    d1e4:	701a      	strb	r2, [r3, #0]
    d1e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ee:	781b      	ldrb	r3, [r3, #0]
    d1f0:	461a      	mov	r2, r3
    d1f2:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1fa:	7819      	ldrb	r1, [r3, #0]
    d1fc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d204:	5499      	strb	r1, [r3, r2]
    d206:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d20e:	781a      	ldrb	r2, [r3, #0]
    d210:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d218:	781b      	ldrb	r3, [r3, #0]
    d21a:	4413      	add	r3, r2
    d21c:	b2da      	uxtb	r2, r3
    d21e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d226:	701a      	strb	r2, [r3, #0]
    d228:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d230:	781a      	ldrb	r2, [r3, #0]
    d232:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d23a:	781b      	ldrb	r3, [r3, #0]
    d23c:	4413      	add	r3, r2
    d23e:	b2da      	uxtb	r2, r3
    d240:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d248:	701a      	strb	r2, [r3, #0]
    d24a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d252:	781b      	ldrb	r3, [r3, #0]
    d254:	3301      	adds	r3, #1
    d256:	b2da      	uxtb	r2, r3
    d258:	f24c 3319 	movw	r3, #49945	; 0xc319
    d25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d260:	701a      	strb	r2, [r3, #0]
    d262:	f24c 3319 	movw	r3, #49945	; 0xc319
    d266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d26a:	781b      	ldrb	r3, [r3, #0]
    d26c:	2bff      	cmp	r3, #255	; 0xff
    d26e:	d105      	bne.n	d27c <radio_control_task+0x288>
    d270:	f24c 3319 	movw	r3, #49945	; 0xc319
    d274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d278:	2200      	movs	r2, #0
    d27a:	701a      	strb	r2, [r3, #0]
    d27c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d284:	781b      	ldrb	r3, [r3, #0]
    d286:	461a      	mov	r2, r3
    d288:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d290:	7819      	ldrb	r1, [r3, #0]
    d292:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29a:	5499      	strb	r1, [r3, r2]
    d29c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a4:	781a      	ldrb	r2, [r3, #0]
    d2a6:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ae:	781b      	ldrb	r3, [r3, #0]
    d2b0:	4413      	add	r3, r2
    d2b2:	b2da      	uxtb	r2, r3
    d2b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2bc:	701a      	strb	r2, [r3, #0]
    d2be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c6:	781a      	ldrb	r2, [r3, #0]
    d2c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d0:	781b      	ldrb	r3, [r3, #0]
    d2d2:	4413      	add	r3, r2
    d2d4:	b2da      	uxtb	r2, r3
    d2d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2de:	701a      	strb	r2, [r3, #0]
    d2e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e8:	781b      	ldrb	r3, [r3, #0]
    d2ea:	3301      	adds	r3, #1
    d2ec:	b2da      	uxtb	r2, r3
    d2ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f6:	701a      	strb	r2, [r3, #0]
    d2f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	2bff      	cmp	r3, #255	; 0xff
    d304:	d105      	bne.n	d312 <radio_control_task+0x31e>
    d306:	f24c 3319 	movw	r3, #49945	; 0xc319
    d30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d30e:	2200      	movs	r2, #0
    d310:	701a      	strb	r2, [r3, #0]
    d312:	f24c 3319 	movw	r3, #49945	; 0xc319
    d316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d31a:	781b      	ldrb	r3, [r3, #0]
    d31c:	461a      	mov	r2, r3
    d31e:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d326:	7819      	ldrb	r1, [r3, #0]
    d328:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d330:	5499      	strb	r1, [r3, r2]
    d332:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33a:	781a      	ldrb	r2, [r3, #0]
    d33c:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d344:	781b      	ldrb	r3, [r3, #0]
    d346:	4413      	add	r3, r2
    d348:	b2da      	uxtb	r2, r3
    d34a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d352:	701a      	strb	r2, [r3, #0]
    d354:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35c:	781a      	ldrb	r2, [r3, #0]
    d35e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d366:	781b      	ldrb	r3, [r3, #0]
    d368:	4413      	add	r3, r2
    d36a:	b2da      	uxtb	r2, r3
    d36c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d374:	701a      	strb	r2, [r3, #0]
    d376:	f24c 3319 	movw	r3, #49945	; 0xc319
    d37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d37e:	781b      	ldrb	r3, [r3, #0]
    d380:	3301      	adds	r3, #1
    d382:	b2da      	uxtb	r2, r3
    d384:	f24c 3319 	movw	r3, #49945	; 0xc319
    d388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d38c:	701a      	strb	r2, [r3, #0]
    d38e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d396:	781b      	ldrb	r3, [r3, #0]
    d398:	2bff      	cmp	r3, #255	; 0xff
    d39a:	d105      	bne.n	d3a8 <radio_control_task+0x3b4>
    d39c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a4:	2200      	movs	r2, #0
    d3a6:	701a      	strb	r2, [r3, #0]
    d3a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b0:	781b      	ldrb	r3, [r3, #0]
    d3b2:	461a      	mov	r2, r3
    d3b4:	f24c 3303 	movw	r3, #49923	; 0xc303
    d3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3bc:	7819      	ldrb	r1, [r3, #0]
    d3be:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c6:	5499      	strb	r1, [r3, r2]
    d3c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d0:	781a      	ldrb	r2, [r3, #0]
    d3d2:	f24c 3303 	movw	r3, #49923	; 0xc303
    d3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3da:	781b      	ldrb	r3, [r3, #0]
    d3dc:	4413      	add	r3, r2
    d3de:	b2da      	uxtb	r2, r3
    d3e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e8:	701a      	strb	r2, [r3, #0]
    d3ea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f2:	781a      	ldrb	r2, [r3, #0]
    d3f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3fc:	781b      	ldrb	r3, [r3, #0]
    d3fe:	4413      	add	r3, r2
    d400:	b2da      	uxtb	r2, r3
    d402:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d40a:	701a      	strb	r2, [r3, #0]
    d40c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d414:	781b      	ldrb	r3, [r3, #0]
    d416:	3301      	adds	r3, #1
    d418:	b2da      	uxtb	r2, r3
    d41a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d422:	701a      	strb	r2, [r3, #0]
    d424:	f24c 3319 	movw	r3, #49945	; 0xc319
    d428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d42c:	781b      	ldrb	r3, [r3, #0]
    d42e:	2bff      	cmp	r3, #255	; 0xff
    d430:	d105      	bne.n	d43e <radio_control_task+0x44a>
    d432:	f24c 3319 	movw	r3, #49945	; 0xc319
    d436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43a:	2200      	movs	r2, #0
    d43c:	701a      	strb	r2, [r3, #0]
    d43e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d446:	781b      	ldrb	r3, [r3, #0]
    d448:	461a      	mov	r2, r3
    d44a:	f240 533c 	movw	r3, #1340	; 0x53c
    d44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d452:	7819      	ldrb	r1, [r3, #0]
    d454:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d45c:	5499      	strb	r1, [r3, r2]
    d45e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d466:	781a      	ldrb	r2, [r3, #0]
    d468:	f240 533c 	movw	r3, #1340	; 0x53c
    d46c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d470:	781b      	ldrb	r3, [r3, #0]
    d472:	4413      	add	r3, r2
    d474:	b2da      	uxtb	r2, r3
    d476:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d47e:	701a      	strb	r2, [r3, #0]
    d480:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d488:	781a      	ldrb	r2, [r3, #0]
    d48a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d492:	781b      	ldrb	r3, [r3, #0]
    d494:	4413      	add	r3, r2
    d496:	b2da      	uxtb	r2, r3
    d498:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a0:	701a      	strb	r2, [r3, #0]
    d4a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4aa:	781b      	ldrb	r3, [r3, #0]
    d4ac:	3301      	adds	r3, #1
    d4ae:	b2da      	uxtb	r2, r3
    d4b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b8:	701a      	strb	r2, [r3, #0]
    d4ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c2:	781b      	ldrb	r3, [r3, #0]
    d4c4:	2bff      	cmp	r3, #255	; 0xff
    d4c6:	d105      	bne.n	d4d4 <radio_control_task+0x4e0>
    d4c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d0:	2200      	movs	r2, #0
    d4d2:	701a      	strb	r2, [r3, #0]
    d4d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4dc:	781b      	ldrb	r3, [r3, #0]
    d4de:	461a      	mov	r2, r3
    d4e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e8:	7819      	ldrb	r1, [r3, #0]
    d4ea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f2:	5499      	strb	r1, [r3, r2]
    d4f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4fc:	781b      	ldrb	r3, [r3, #0]
    d4fe:	3301      	adds	r3, #1
    d500:	b2da      	uxtb	r2, r3
    d502:	f24c 3319 	movw	r3, #49945	; 0xc319
    d506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d50a:	701a      	strb	r2, [r3, #0]
    d50c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d514:	781b      	ldrb	r3, [r3, #0]
    d516:	2bff      	cmp	r3, #255	; 0xff
    d518:	d105      	bne.n	d526 <radio_control_task+0x532>
    d51a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d522:	2200      	movs	r2, #0
    d524:	701a      	strb	r2, [r3, #0]
    d526:	f24c 3319 	movw	r3, #49945	; 0xc319
    d52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d52e:	781b      	ldrb	r3, [r3, #0]
    d530:	461a      	mov	r2, r3
    d532:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53a:	7819      	ldrb	r1, [r3, #0]
    d53c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d544:	5499      	strb	r1, [r3, r2]
    d546:	f24c 3319 	movw	r3, #49945	; 0xc319
    d54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d54e:	781b      	ldrb	r3, [r3, #0]
    d550:	3301      	adds	r3, #1
    d552:	b2da      	uxtb	r2, r3
    d554:	f24c 3319 	movw	r3, #49945	; 0xc319
    d558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d55c:	701a      	strb	r2, [r3, #0]
    d55e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d566:	781b      	ldrb	r3, [r3, #0]
    d568:	2bff      	cmp	r3, #255	; 0xff
    d56a:	d105      	bne.n	d578 <radio_control_task+0x584>
    d56c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d574:	2200      	movs	r2, #0
    d576:	701a      	strb	r2, [r3, #0]
    d578:	f242 0339 	movw	r3, #8249	; 0x2039
    d57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d580:	781b      	ldrb	r3, [r3, #0]
    d582:	b2db      	uxtb	r3, r3
    d584:	f003 0310 	and.w	r3, r3, #16
    d588:	2b00      	cmp	r3, #0
    d58a:	d15a      	bne.n	d642 <radio_control_task+0x64e>
    d58c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d594:	781b      	ldrb	r3, [r3, #0]
    d596:	b2db      	uxtb	r3, r3
    d598:	461a      	mov	r2, r3
    d59a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a2:	5c9a      	ldrb	r2, [r3, r2]
    d5a4:	f24c 431b 	movw	r3, #50203	; 0xc41b
    d5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ac:	701a      	strb	r2, [r3, #0]
    d5ae:	f24c 431c 	movw	r3, #50204	; 0xc41c
    d5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b6:	2200      	movs	r2, #0
    d5b8:	701a      	strb	r2, [r3, #0]
    d5ba:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c2:	781b      	ldrb	r3, [r3, #0]
    d5c4:	b2db      	uxtb	r3, r3
    d5c6:	3301      	adds	r3, #1
    d5c8:	b2da      	uxtb	r2, r3
    d5ca:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d2:	701a      	strb	r2, [r3, #0]
    d5d4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5dc:	781b      	ldrb	r3, [r3, #0]
    d5de:	b2db      	uxtb	r3, r3
    d5e0:	2bff      	cmp	r3, #255	; 0xff
    d5e2:	d105      	bne.n	d5f0 <radio_control_task+0x5fc>
    d5e4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ec:	2200      	movs	r2, #0
    d5ee:	701a      	strb	r2, [r3, #0]
    d5f0:	f242 0338 	movw	r3, #8248	; 0x2038
    d5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f8:	f242 0238 	movw	r2, #8248	; 0x2038
    d5fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d600:	7812      	ldrb	r2, [r2, #0]
    d602:	b2d2      	uxtb	r2, r2
    d604:	f042 0201 	orr.w	r2, r2, #1
    d608:	b2d2      	uxtb	r2, r2
    d60a:	701a      	strb	r2, [r3, #0]
    d60c:	f242 0339 	movw	r3, #8249	; 0x2039
    d610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d614:	f242 0239 	movw	r2, #8249	; 0x2039
    d618:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d61c:	7812      	ldrb	r2, [r2, #0]
    d61e:	b2d2      	uxtb	r2, r2
    d620:	f042 0210 	orr.w	r2, r2, #16
    d624:	b2d2      	uxtb	r2, r2
    d626:	701a      	strb	r2, [r3, #0]
    d628:	e00b      	b.n	d642 <radio_control_task+0x64e>
    d62a:	f24c 3318 	movw	r3, #49944	; 0xc318
    d62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d632:	781b      	ldrb	r3, [r3, #0]
    d634:	3301      	adds	r3, #1
    d636:	b2da      	uxtb	r2, r3
    d638:	f24c 3318 	movw	r3, #49944	; 0xc318
    d63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d640:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d642:	f24c 4320 	movw	r3, #50208	; 0xc420
    d646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d64a:	885b      	ldrh	r3, [r3, #2]
    d64c:	b21b      	sxth	r3, r3
    d64e:	4618      	mov	r0, r3
    d650:	f00a fe0a 	bl	18268 <__aeabi_i2f>
    d654:	4603      	mov	r3, r0
    d656:	4618      	mov	r0, r3
    d658:	f04f 0100 	mov.w	r1, #0
    d65c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d660:	f00a ff0a 	bl	18478 <__aeabi_fdiv>
    d664:	4603      	mov	r3, r0
    d666:	4618      	mov	r0, r3
    d668:	f00a f9be 	bl	179e8 <__aeabi_f2d>
    d66c:	4602      	mov	r2, r0
    d66e:	460b      	mov	r3, r1
    d670:	4610      	mov	r0, r2
    d672:	4619      	mov	r1, r3
    d674:	a346      	add	r3, pc, #280	; (adr r3, d790 <radio_control_task+0x79c>)
    d676:	e9d3 2300 	ldrd	r2, r3, [r3]
    d67a:	f00a fa09 	bl	17a90 <__aeabi_dmul>
    d67e:	4602      	mov	r2, r0
    d680:	460b      	mov	r3, r1
    d682:	4610      	mov	r0, r2
    d684:	4619      	mov	r1, r3
    d686:	f04f 0200 	mov.w	r2, #0
    d68a:	f04f 0300 	mov.w	r3, #0
    d68e:	f00a f84d 	bl	1772c <__adddf3>
    d692:	4602      	mov	r2, r0
    d694:	460b      	mov	r3, r1
    d696:	4610      	mov	r0, r2
    d698:	4619      	mov	r1, r3
    d69a:	f00a fcdb 	bl	18054 <__aeabi_d2f>
    d69e:	4602      	mov	r2, r0
    d6a0:	f24c 6344 	movw	r3, #50756	; 0xc644
    d6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6a8:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d6aa:	f24c 4320 	movw	r3, #50208	; 0xc420
    d6ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6b2:	889b      	ldrh	r3, [r3, #4]
    d6b4:	b21b      	sxth	r3, r3
    d6b6:	4618      	mov	r0, r3
    d6b8:	f00a fdd6 	bl	18268 <__aeabi_i2f>
    d6bc:	4603      	mov	r3, r0
    d6be:	4618      	mov	r0, r3
    d6c0:	f04f 0100 	mov.w	r1, #0
    d6c4:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d6c8:	f00a fed6 	bl	18478 <__aeabi_fdiv>
    d6cc:	4603      	mov	r3, r0
    d6ce:	4618      	mov	r0, r3
    d6d0:	f00a f98a 	bl	179e8 <__aeabi_f2d>
    d6d4:	4602      	mov	r2, r0
    d6d6:	460b      	mov	r3, r1
    d6d8:	4610      	mov	r0, r2
    d6da:	4619      	mov	r1, r3
    d6dc:	f04f 0200 	mov.w	r2, #0
    d6e0:	f04f 0300 	mov.w	r3, #0
    d6e4:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d6e8:	f00a f9d2 	bl	17a90 <__aeabi_dmul>
    d6ec:	4602      	mov	r2, r0
    d6ee:	460b      	mov	r3, r1
    d6f0:	4610      	mov	r0, r2
    d6f2:	4619      	mov	r1, r3
    d6f4:	f04f 0200 	mov.w	r2, #0
    d6f8:	f04f 0300 	mov.w	r3, #0
    d6fc:	f00a f816 	bl	1772c <__adddf3>
    d700:	4602      	mov	r2, r0
    d702:	460b      	mov	r3, r1
    d704:	4610      	mov	r0, r2
    d706:	4619      	mov	r1, r3
    d708:	f00a fca4 	bl	18054 <__aeabi_d2f>
    d70c:	4602      	mov	r2, r0
    d70e:	f24c 6348 	movw	r3, #50760	; 0xc648
    d712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d716:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d718:	f24c 4320 	movw	r3, #50208	; 0xc420
    d71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d720:	881a      	ldrh	r2, [r3, #0]
    d722:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d72a:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d72c:	f24c 4320 	movw	r3, #50208	; 0xc420
    d730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d734:	7c9a      	ldrb	r2, [r3, #18]
    d736:	f24c 3304 	movw	r3, #49924	; 0xc304
    d73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d73e:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d740:	f24c 4320 	movw	r3, #50208	; 0xc420
    d744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d748:	7d5a      	ldrb	r2, [r3, #21]
    d74a:	f24c 3302 	movw	r3, #49922	; 0xc302
    d74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d752:	701a      	strb	r2, [r3, #0]

    events_update();
    d754:	f7f9 fe7e 	bl	7454 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d758:	f7f8 fc7e 	bl	6058 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d75c:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d764:	781b      	ldrb	r3, [r3, #0]
    d766:	2b02      	cmp	r3, #2
    d768:	d10e      	bne.n	d788 <radio_control_task+0x794>
    d76a:	f24c 4320 	movw	r3, #50208	; 0xc420
    d76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d772:	881b      	ldrh	r3, [r3, #0]
    d774:	b21b      	sxth	r3, r3
    d776:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d77a:	dd05      	ble.n	d788 <radio_control_task+0x794>
	launch = TRUE;
    d77c:	f24c 3310 	movw	r3, #49936	; 0xc310
    d780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d784:	2201      	movs	r2, #1
    d786:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d788:	3708      	adds	r7, #8
    d78a:	46bd      	mov	sp, r7
    d78c:	bd80      	pop	{r7, pc}
    d78e:	bf00      	nop
    d790:	33333333 	.word	0x33333333
    d794:	bfe33333 	.word	0xbfe33333

0000d798 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d798:	b580      	push	{r7, lr}
    d79a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d79c:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    d7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7a4:	2203      	movs	r2, #3
    d7a6:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d7a8:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b0:	781b      	ldrb	r3, [r3, #0]
    d7b2:	2b03      	cmp	r3, #3
    d7b4:	d102      	bne.n	d7bc <navigation_update+0x24>
    nav_home();
    d7b6:	f007 fa9b 	bl	14cf0 <nav_home>
    d7ba:	e001      	b.n	d7c0 <navigation_update+0x28>
  else
    nav_update();
    d7bc:	f007 fabe 	bl	14d3c <nav_update>
}
    d7c0:	bd80      	pop	{r7, pc}
    d7c2:	bf00      	nop

0000d7c4 <send_nav_values>:

void send_nav_values(void){
    d7c4:	b480      	push	{r7}
    d7c6:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d7c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d0:	781a      	ldrb	r2, [r3, #0]
    d7d2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7da:	781b      	ldrb	r3, [r3, #0]
    d7dc:	b2db      	uxtb	r3, r3
    d7de:	429a      	cmp	r2, r3
    d7e0:	d313      	bcc.n	d80a <send_nav_values+0x46>
    d7e2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d7e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ea:	781b      	ldrb	r3, [r3, #0]
    d7ec:	b2db      	uxtb	r3, r3
    d7ee:	461a      	mov	r2, r3
    d7f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f8:	781b      	ldrb	r3, [r3, #0]
    d7fa:	1ad3      	subs	r3, r2, r3
    d7fc:	33ff      	adds	r3, #255	; 0xff
    d7fe:	2b1e      	cmp	r3, #30
    d800:	bfd4      	ite	le
    d802:	2300      	movle	r3, #0
    d804:	2301      	movgt	r3, #1
    d806:	b2db      	uxtb	r3, r3
    d808:	e011      	b.n	d82e <send_nav_values+0x6a>
    d80a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d812:	781b      	ldrb	r3, [r3, #0]
    d814:	b2db      	uxtb	r3, r3
    d816:	461a      	mov	r2, r3
    d818:	f24c 3319 	movw	r3, #49945	; 0xc319
    d81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d820:	781b      	ldrb	r3, [r3, #0]
    d822:	1ad3      	subs	r3, r2, r3
    d824:	2b1e      	cmp	r3, #30
    d826:	bfd4      	ite	le
    d828:	2300      	movle	r3, #0
    d82a:	2301      	movgt	r3, #1
    d82c:	b2db      	uxtb	r3, r3
    d82e:	2b00      	cmp	r3, #0
    d830:	f001 8094 	beq.w	e95c <send_nav_values+0x1198>
    d834:	f24c 3319 	movw	r3, #49945	; 0xc319
    d838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83c:	781b      	ldrb	r3, [r3, #0]
    d83e:	461a      	mov	r2, r3
    d840:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d848:	2105      	movs	r1, #5
    d84a:	5499      	strb	r1, [r3, r2]
    d84c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d854:	781b      	ldrb	r3, [r3, #0]
    d856:	3301      	adds	r3, #1
    d858:	b2da      	uxtb	r2, r3
    d85a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d862:	701a      	strb	r2, [r3, #0]
    d864:	f24c 3319 	movw	r3, #49945	; 0xc319
    d868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d86c:	781b      	ldrb	r3, [r3, #0]
    d86e:	2bff      	cmp	r3, #255	; 0xff
    d870:	d105      	bne.n	d87e <send_nav_values+0xba>
    d872:	f24c 3319 	movw	r3, #49945	; 0xc319
    d876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d87a:	2200      	movs	r2, #0
    d87c:	701a      	strb	r2, [r3, #0]
    d87e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d886:	781b      	ldrb	r3, [r3, #0]
    d888:	461a      	mov	r2, r3
    d88a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d892:	210a      	movs	r1, #10
    d894:	5499      	strb	r1, [r3, r2]
    d896:	f24c 3319 	movw	r3, #49945	; 0xc319
    d89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89e:	781b      	ldrb	r3, [r3, #0]
    d8a0:	3301      	adds	r3, #1
    d8a2:	b2da      	uxtb	r2, r3
    d8a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ac:	701a      	strb	r2, [r3, #0]
    d8ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b6:	781b      	ldrb	r3, [r3, #0]
    d8b8:	2bff      	cmp	r3, #255	; 0xff
    d8ba:	d105      	bne.n	d8c8 <send_nav_values+0x104>
    d8bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c4:	2200      	movs	r2, #0
    d8c6:	701a      	strb	r2, [r3, #0]
    d8c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d0:	220a      	movs	r2, #10
    d8d2:	701a      	strb	r2, [r3, #0]
    d8d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8dc:	220a      	movs	r2, #10
    d8de:	701a      	strb	r2, [r3, #0]
    d8e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e8:	781b      	ldrb	r3, [r3, #0]
    d8ea:	461a      	mov	r2, r3
    d8ec:	f24c 6371 	movw	r3, #50801	; 0xc671
    d8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f4:	7819      	ldrb	r1, [r3, #0]
    d8f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8fe:	5499      	strb	r1, [r3, r2]
    d900:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d908:	781a      	ldrb	r2, [r3, #0]
    d90a:	f24c 6371 	movw	r3, #50801	; 0xc671
    d90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d912:	781b      	ldrb	r3, [r3, #0]
    d914:	4413      	add	r3, r2
    d916:	b2da      	uxtb	r2, r3
    d918:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d920:	701a      	strb	r2, [r3, #0]
    d922:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92a:	781a      	ldrb	r2, [r3, #0]
    d92c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d934:	781b      	ldrb	r3, [r3, #0]
    d936:	4413      	add	r3, r2
    d938:	b2da      	uxtb	r2, r3
    d93a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d942:	701a      	strb	r2, [r3, #0]
    d944:	f24c 3319 	movw	r3, #49945	; 0xc319
    d948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94c:	781b      	ldrb	r3, [r3, #0]
    d94e:	3301      	adds	r3, #1
    d950:	b2da      	uxtb	r2, r3
    d952:	f24c 3319 	movw	r3, #49945	; 0xc319
    d956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d95a:	701a      	strb	r2, [r3, #0]
    d95c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d964:	781b      	ldrb	r3, [r3, #0]
    d966:	2bff      	cmp	r3, #255	; 0xff
    d968:	d105      	bne.n	d976 <send_nav_values+0x1b2>
    d96a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d972:	2200      	movs	r2, #0
    d974:	701a      	strb	r2, [r3, #0]
    d976:	f24c 3319 	movw	r3, #49945	; 0xc319
    d97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d97e:	781b      	ldrb	r3, [r3, #0]
    d980:	461a      	mov	r2, r3
    d982:	f24c 6370 	movw	r3, #50800	; 0xc670
    d986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98a:	7819      	ldrb	r1, [r3, #0]
    d98c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d994:	5499      	strb	r1, [r3, r2]
    d996:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d99e:	781a      	ldrb	r2, [r3, #0]
    d9a0:	f24c 6370 	movw	r3, #50800	; 0xc670
    d9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a8:	781b      	ldrb	r3, [r3, #0]
    d9aa:	4413      	add	r3, r2
    d9ac:	b2da      	uxtb	r2, r3
    d9ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b6:	701a      	strb	r2, [r3, #0]
    d9b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c0:	781a      	ldrb	r2, [r3, #0]
    d9c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ca:	781b      	ldrb	r3, [r3, #0]
    d9cc:	4413      	add	r3, r2
    d9ce:	b2da      	uxtb	r2, r3
    d9d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d8:	701a      	strb	r2, [r3, #0]
    d9da:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e2:	781b      	ldrb	r3, [r3, #0]
    d9e4:	3301      	adds	r3, #1
    d9e6:	b2da      	uxtb	r2, r3
    d9e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f0:	701a      	strb	r2, [r3, #0]
    d9f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9fa:	781b      	ldrb	r3, [r3, #0]
    d9fc:	2bff      	cmp	r3, #255	; 0xff
    d9fe:	d105      	bne.n	da0c <send_nav_values+0x248>
    da00:	f24c 3319 	movw	r3, #49945	; 0xc319
    da04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da08:	2200      	movs	r2, #0
    da0a:	701a      	strb	r2, [r3, #0]
    da0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    da10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da14:	781b      	ldrb	r3, [r3, #0]
    da16:	461a      	mov	r2, r3
    da18:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    da1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da20:	7819      	ldrb	r1, [r3, #0]
    da22:	f24c 331c 	movw	r3, #49948	; 0xc31c
    da26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da2a:	5499      	strb	r1, [r3, r2]
    da2c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    da30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da34:	781a      	ldrb	r2, [r3, #0]
    da36:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da3e:	781b      	ldrb	r3, [r3, #0]
    da40:	4413      	add	r3, r2
    da42:	b2da      	uxtb	r2, r3
    da44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4c:	701a      	strb	r2, [r3, #0]
    da4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    da52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da56:	781a      	ldrb	r2, [r3, #0]
    da58:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da60:	781b      	ldrb	r3, [r3, #0]
    da62:	4413      	add	r3, r2
    da64:	b2da      	uxtb	r2, r3
    da66:	f24c 431e 	movw	r3, #50206	; 0xc41e
    da6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da6e:	701a      	strb	r2, [r3, #0]
    da70:	f24c 3319 	movw	r3, #49945	; 0xc319
    da74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da78:	781b      	ldrb	r3, [r3, #0]
    da7a:	3301      	adds	r3, #1
    da7c:	b2da      	uxtb	r2, r3
    da7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    da82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da86:	701a      	strb	r2, [r3, #0]
    da88:	f24c 3319 	movw	r3, #49945	; 0xc319
    da8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da90:	781b      	ldrb	r3, [r3, #0]
    da92:	2bff      	cmp	r3, #255	; 0xff
    da94:	d105      	bne.n	daa2 <send_nav_values+0x2de>
    da96:	f24c 3319 	movw	r3, #49945	; 0xc319
    da9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9e:	2200      	movs	r2, #0
    daa0:	701a      	strb	r2, [r3, #0]
    daa2:	f24c 3319 	movw	r3, #49945	; 0xc319
    daa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daaa:	781b      	ldrb	r3, [r3, #0]
    daac:	461a      	mov	r2, r3
    daae:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab6:	7859      	ldrb	r1, [r3, #1]
    dab8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac0:	5499      	strb	r1, [r3, r2]
    dac2:	4bd2      	ldr	r3, [pc, #840]	; (de0c <send_nav_values+0x648>)
    dac4:	781a      	ldrb	r2, [r3, #0]
    dac6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    daca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dace:	781b      	ldrb	r3, [r3, #0]
    dad0:	4413      	add	r3, r2
    dad2:	b2da      	uxtb	r2, r3
    dad4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dadc:	701a      	strb	r2, [r3, #0]
    dade:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae6:	781a      	ldrb	r2, [r3, #0]
    dae8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    daec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf0:	781b      	ldrb	r3, [r3, #0]
    daf2:	4413      	add	r3, r2
    daf4:	b2da      	uxtb	r2, r3
    daf6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafe:	701a      	strb	r2, [r3, #0]
    db00:	f24c 3319 	movw	r3, #49945	; 0xc319
    db04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db08:	781b      	ldrb	r3, [r3, #0]
    db0a:	3301      	adds	r3, #1
    db0c:	b2da      	uxtb	r2, r3
    db0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    db12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db16:	701a      	strb	r2, [r3, #0]
    db18:	f24c 3319 	movw	r3, #49945	; 0xc319
    db1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db20:	781b      	ldrb	r3, [r3, #0]
    db22:	2bff      	cmp	r3, #255	; 0xff
    db24:	d105      	bne.n	db32 <send_nav_values+0x36e>
    db26:	f24c 3319 	movw	r3, #49945	; 0xc319
    db2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2e:	2200      	movs	r2, #0
    db30:	701a      	strb	r2, [r3, #0]
    db32:	f24c 3319 	movw	r3, #49945	; 0xc319
    db36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db3a:	781b      	ldrb	r3, [r3, #0]
    db3c:	461a      	mov	r2, r3
    db3e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    db42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db46:	7899      	ldrb	r1, [r3, #2]
    db48:	f24c 331c 	movw	r3, #49948	; 0xc31c
    db4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db50:	5499      	strb	r1, [r3, r2]
    db52:	4baf      	ldr	r3, [pc, #700]	; (de10 <send_nav_values+0x64c>)
    db54:	781a      	ldrb	r2, [r3, #0]
    db56:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5e:	781b      	ldrb	r3, [r3, #0]
    db60:	4413      	add	r3, r2
    db62:	b2da      	uxtb	r2, r3
    db64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db6c:	701a      	strb	r2, [r3, #0]
    db6e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db76:	781a      	ldrb	r2, [r3, #0]
    db78:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db80:	781b      	ldrb	r3, [r3, #0]
    db82:	4413      	add	r3, r2
    db84:	b2da      	uxtb	r2, r3
    db86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db8e:	701a      	strb	r2, [r3, #0]
    db90:	f24c 3319 	movw	r3, #49945	; 0xc319
    db94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db98:	781b      	ldrb	r3, [r3, #0]
    db9a:	3301      	adds	r3, #1
    db9c:	b2da      	uxtb	r2, r3
    db9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba6:	701a      	strb	r2, [r3, #0]
    dba8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb0:	781b      	ldrb	r3, [r3, #0]
    dbb2:	2bff      	cmp	r3, #255	; 0xff
    dbb4:	d105      	bne.n	dbc2 <send_nav_values+0x3fe>
    dbb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbbe:	2200      	movs	r2, #0
    dbc0:	701a      	strb	r2, [r3, #0]
    dbc2:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbca:	781b      	ldrb	r3, [r3, #0]
    dbcc:	461a      	mov	r2, r3
    dbce:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd6:	78d9      	ldrb	r1, [r3, #3]
    dbd8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe0:	5499      	strb	r1, [r3, r2]
    dbe2:	4b8c      	ldr	r3, [pc, #560]	; (de14 <send_nav_values+0x650>)
    dbe4:	781a      	ldrb	r2, [r3, #0]
    dbe6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbee:	781b      	ldrb	r3, [r3, #0]
    dbf0:	4413      	add	r3, r2
    dbf2:	b2da      	uxtb	r2, r3
    dbf4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbfc:	701a      	strb	r2, [r3, #0]
    dbfe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc06:	781a      	ldrb	r2, [r3, #0]
    dc08:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc10:	781b      	ldrb	r3, [r3, #0]
    dc12:	4413      	add	r3, r2
    dc14:	b2da      	uxtb	r2, r3
    dc16:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc1e:	701a      	strb	r2, [r3, #0]
    dc20:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc28:	781b      	ldrb	r3, [r3, #0]
    dc2a:	3301      	adds	r3, #1
    dc2c:	b2da      	uxtb	r2, r3
    dc2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc36:	701a      	strb	r2, [r3, #0]
    dc38:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc40:	781b      	ldrb	r3, [r3, #0]
    dc42:	2bff      	cmp	r3, #255	; 0xff
    dc44:	d105      	bne.n	dc52 <send_nav_values+0x48e>
    dc46:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc4e:	2200      	movs	r2, #0
    dc50:	701a      	strb	r2, [r3, #0]
    dc52:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc5a:	781b      	ldrb	r3, [r3, #0]
    dc5c:	461a      	mov	r2, r3
    dc5e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc66:	7819      	ldrb	r1, [r3, #0]
    dc68:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc70:	5499      	strb	r1, [r3, r2]
    dc72:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dc76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7a:	781a      	ldrb	r2, [r3, #0]
    dc7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc84:	781b      	ldrb	r3, [r3, #0]
    dc86:	4413      	add	r3, r2
    dc88:	b2da      	uxtb	r2, r3
    dc8a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc92:	701a      	strb	r2, [r3, #0]
    dc94:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc9c:	781a      	ldrb	r2, [r3, #0]
    dc9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca6:	781b      	ldrb	r3, [r3, #0]
    dca8:	4413      	add	r3, r2
    dcaa:	b2da      	uxtb	r2, r3
    dcac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dcb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb4:	701a      	strb	r2, [r3, #0]
    dcb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcbe:	781b      	ldrb	r3, [r3, #0]
    dcc0:	3301      	adds	r3, #1
    dcc2:	b2da      	uxtb	r2, r3
    dcc4:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dccc:	701a      	strb	r2, [r3, #0]
    dcce:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd6:	781b      	ldrb	r3, [r3, #0]
    dcd8:	2bff      	cmp	r3, #255	; 0xff
    dcda:	d105      	bne.n	dce8 <send_nav_values+0x524>
    dcdc:	f24c 3319 	movw	r3, #49945	; 0xc319
    dce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce4:	2200      	movs	r2, #0
    dce6:	701a      	strb	r2, [r3, #0]
    dce8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf0:	781b      	ldrb	r3, [r3, #0]
    dcf2:	461a      	mov	r2, r3
    dcf4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dcf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcfc:	7859      	ldrb	r1, [r3, #1]
    dcfe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd06:	5499      	strb	r1, [r3, r2]
    dd08:	4b43      	ldr	r3, [pc, #268]	; (de18 <send_nav_values+0x654>)
    dd0a:	781a      	ldrb	r2, [r3, #0]
    dd0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd14:	781b      	ldrb	r3, [r3, #0]
    dd16:	4413      	add	r3, r2
    dd18:	b2da      	uxtb	r2, r3
    dd1a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd22:	701a      	strb	r2, [r3, #0]
    dd24:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd2c:	781a      	ldrb	r2, [r3, #0]
    dd2e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd36:	781b      	ldrb	r3, [r3, #0]
    dd38:	4413      	add	r3, r2
    dd3a:	b2da      	uxtb	r2, r3
    dd3c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd44:	701a      	strb	r2, [r3, #0]
    dd46:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd4e:	781b      	ldrb	r3, [r3, #0]
    dd50:	3301      	adds	r3, #1
    dd52:	b2da      	uxtb	r2, r3
    dd54:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5c:	701a      	strb	r2, [r3, #0]
    dd5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd66:	781b      	ldrb	r3, [r3, #0]
    dd68:	2bff      	cmp	r3, #255	; 0xff
    dd6a:	d105      	bne.n	dd78 <send_nav_values+0x5b4>
    dd6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd74:	2200      	movs	r2, #0
    dd76:	701a      	strb	r2, [r3, #0]
    dd78:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd80:	781b      	ldrb	r3, [r3, #0]
    dd82:	461a      	mov	r2, r3
    dd84:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8c:	7899      	ldrb	r1, [r3, #2]
    dd8e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd96:	5499      	strb	r1, [r3, r2]
    dd98:	4b20      	ldr	r3, [pc, #128]	; (de1c <send_nav_values+0x658>)
    dd9a:	781a      	ldrb	r2, [r3, #0]
    dd9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda4:	781b      	ldrb	r3, [r3, #0]
    dda6:	4413      	add	r3, r2
    dda8:	b2da      	uxtb	r2, r3
    ddaa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ddae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb2:	701a      	strb	r2, [r3, #0]
    ddb4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ddb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddbc:	781a      	ldrb	r2, [r3, #0]
    ddbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ddc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc6:	781b      	ldrb	r3, [r3, #0]
    ddc8:	4413      	add	r3, r2
    ddca:	b2da      	uxtb	r2, r3
    ddcc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ddd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd4:	701a      	strb	r2, [r3, #0]
    ddd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddde:	781b      	ldrb	r3, [r3, #0]
    dde0:	3301      	adds	r3, #1
    dde2:	b2da      	uxtb	r2, r3
    dde4:	f24c 3319 	movw	r3, #49945	; 0xc319
    dde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddec:	701a      	strb	r2, [r3, #0]
    ddee:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf6:	781b      	ldrb	r3, [r3, #0]
    ddf8:	2bff      	cmp	r3, #255	; 0xff
    ddfa:	d111      	bne.n	de20 <send_nav_values+0x65c>
    ddfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    de00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de04:	2200      	movs	r2, #0
    de06:	701a      	strb	r2, [r3, #0]
    de08:	e00a      	b.n	de20 <send_nav_values+0x65c>
    de0a:	bf00      	nop
    de0c:	2004c8cd 	.word	0x2004c8cd
    de10:	2004c8ce 	.word	0x2004c8ce
    de14:	2004c8cf 	.word	0x2004c8cf
    de18:	2004c8d1 	.word	0x2004c8d1
    de1c:	2004c8d2 	.word	0x2004c8d2
    de20:	f24c 3319 	movw	r3, #49945	; 0xc319
    de24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de28:	781b      	ldrb	r3, [r3, #0]
    de2a:	461a      	mov	r2, r3
    de2c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    de30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de34:	78d9      	ldrb	r1, [r3, #3]
    de36:	f24c 331c 	movw	r3, #49948	; 0xc31c
    de3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3e:	5499      	strb	r1, [r3, r2]
    de40:	4bd3      	ldr	r3, [pc, #844]	; (e190 <send_nav_values+0x9cc>)
    de42:	781a      	ldrb	r2, [r3, #0]
    de44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de4c:	781b      	ldrb	r3, [r3, #0]
    de4e:	4413      	add	r3, r2
    de50:	b2da      	uxtb	r2, r3
    de52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5a:	701a      	strb	r2, [r3, #0]
    de5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de64:	781a      	ldrb	r2, [r3, #0]
    de66:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6e:	781b      	ldrb	r3, [r3, #0]
    de70:	4413      	add	r3, r2
    de72:	b2da      	uxtb	r2, r3
    de74:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de7c:	701a      	strb	r2, [r3, #0]
    de7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    de82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de86:	781b      	ldrb	r3, [r3, #0]
    de88:	3301      	adds	r3, #1
    de8a:	b2da      	uxtb	r2, r3
    de8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    de90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de94:	701a      	strb	r2, [r3, #0]
    de96:	f24c 3319 	movw	r3, #49945	; 0xc319
    de9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9e:	781b      	ldrb	r3, [r3, #0]
    dea0:	2bff      	cmp	r3, #255	; 0xff
    dea2:	d105      	bne.n	deb0 <send_nav_values+0x6ec>
    dea4:	f24c 3319 	movw	r3, #49945	; 0xc319
    dea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deac:	2200      	movs	r2, #0
    deae:	701a      	strb	r2, [r3, #0]
    deb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    deb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb8:	781b      	ldrb	r3, [r3, #0]
    deba:	461a      	mov	r2, r3
    debc:	f24c 635c 	movw	r3, #50780	; 0xc65c
    dec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec4:	7819      	ldrb	r1, [r3, #0]
    dec6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    deca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dece:	5499      	strb	r1, [r3, r2]
    ded0:	f24c 635c 	movw	r3, #50780	; 0xc65c
    ded4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded8:	781a      	ldrb	r2, [r3, #0]
    deda:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee2:	781b      	ldrb	r3, [r3, #0]
    dee4:	4413      	add	r3, r2
    dee6:	b2da      	uxtb	r2, r3
    dee8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    deec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def0:	701a      	strb	r2, [r3, #0]
    def2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    def6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    defa:	781a      	ldrb	r2, [r3, #0]
    defc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df04:	781b      	ldrb	r3, [r3, #0]
    df06:	4413      	add	r3, r2
    df08:	b2da      	uxtb	r2, r3
    df0a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df12:	701a      	strb	r2, [r3, #0]
    df14:	f24c 3319 	movw	r3, #49945	; 0xc319
    df18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1c:	781b      	ldrb	r3, [r3, #0]
    df1e:	3301      	adds	r3, #1
    df20:	b2da      	uxtb	r2, r3
    df22:	f24c 3319 	movw	r3, #49945	; 0xc319
    df26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2a:	701a      	strb	r2, [r3, #0]
    df2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    df30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df34:	781b      	ldrb	r3, [r3, #0]
    df36:	2bff      	cmp	r3, #255	; 0xff
    df38:	d105      	bne.n	df46 <send_nav_values+0x782>
    df3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    df3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df42:	2200      	movs	r2, #0
    df44:	701a      	strb	r2, [r3, #0]
    df46:	f24c 3319 	movw	r3, #49945	; 0xc319
    df4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4e:	781b      	ldrb	r3, [r3, #0]
    df50:	461a      	mov	r2, r3
    df52:	f24c 635c 	movw	r3, #50780	; 0xc65c
    df56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5a:	7859      	ldrb	r1, [r3, #1]
    df5c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    df60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df64:	5499      	strb	r1, [r3, r2]
    df66:	4b8b      	ldr	r3, [pc, #556]	; (e194 <send_nav_values+0x9d0>)
    df68:	781a      	ldrb	r2, [r3, #0]
    df6a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df72:	781b      	ldrb	r3, [r3, #0]
    df74:	4413      	add	r3, r2
    df76:	b2da      	uxtb	r2, r3
    df78:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df80:	701a      	strb	r2, [r3, #0]
    df82:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8a:	781a      	ldrb	r2, [r3, #0]
    df8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df94:	781b      	ldrb	r3, [r3, #0]
    df96:	4413      	add	r3, r2
    df98:	b2da      	uxtb	r2, r3
    df9a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa2:	701a      	strb	r2, [r3, #0]
    dfa4:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfac:	781b      	ldrb	r3, [r3, #0]
    dfae:	3301      	adds	r3, #1
    dfb0:	b2da      	uxtb	r2, r3
    dfb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfba:	701a      	strb	r2, [r3, #0]
    dfbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc4:	781b      	ldrb	r3, [r3, #0]
    dfc6:	2bff      	cmp	r3, #255	; 0xff
    dfc8:	d105      	bne.n	dfd6 <send_nav_values+0x812>
    dfca:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd2:	2200      	movs	r2, #0
    dfd4:	701a      	strb	r2, [r3, #0]
    dfd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfde:	781b      	ldrb	r3, [r3, #0]
    dfe0:	461a      	mov	r2, r3
    dfe2:	f24c 635c 	movw	r3, #50780	; 0xc65c
    dfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfea:	7899      	ldrb	r1, [r3, #2]
    dfec:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff4:	5499      	strb	r1, [r3, r2]
    dff6:	4b68      	ldr	r3, [pc, #416]	; (e198 <send_nav_values+0x9d4>)
    dff8:	781a      	ldrb	r2, [r3, #0]
    dffa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e002:	781b      	ldrb	r3, [r3, #0]
    e004:	4413      	add	r3, r2
    e006:	b2da      	uxtb	r2, r3
    e008:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e010:	701a      	strb	r2, [r3, #0]
    e012:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e01a:	781a      	ldrb	r2, [r3, #0]
    e01c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e024:	781b      	ldrb	r3, [r3, #0]
    e026:	4413      	add	r3, r2
    e028:	b2da      	uxtb	r2, r3
    e02a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e032:	701a      	strb	r2, [r3, #0]
    e034:	f24c 3319 	movw	r3, #49945	; 0xc319
    e038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03c:	781b      	ldrb	r3, [r3, #0]
    e03e:	3301      	adds	r3, #1
    e040:	b2da      	uxtb	r2, r3
    e042:	f24c 3319 	movw	r3, #49945	; 0xc319
    e046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e04a:	701a      	strb	r2, [r3, #0]
    e04c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e054:	781b      	ldrb	r3, [r3, #0]
    e056:	2bff      	cmp	r3, #255	; 0xff
    e058:	d105      	bne.n	e066 <send_nav_values+0x8a2>
    e05a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e062:	2200      	movs	r2, #0
    e064:	701a      	strb	r2, [r3, #0]
    e066:	f24c 3319 	movw	r3, #49945	; 0xc319
    e06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06e:	781b      	ldrb	r3, [r3, #0]
    e070:	461a      	mov	r2, r3
    e072:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e07a:	78d9      	ldrb	r1, [r3, #3]
    e07c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e084:	5499      	strb	r1, [r3, r2]
    e086:	4b45      	ldr	r3, [pc, #276]	; (e19c <send_nav_values+0x9d8>)
    e088:	781a      	ldrb	r2, [r3, #0]
    e08a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e092:	781b      	ldrb	r3, [r3, #0]
    e094:	4413      	add	r3, r2
    e096:	b2da      	uxtb	r2, r3
    e098:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a0:	701a      	strb	r2, [r3, #0]
    e0a2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0aa:	781a      	ldrb	r2, [r3, #0]
    e0ac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b4:	781b      	ldrb	r3, [r3, #0]
    e0b6:	4413      	add	r3, r2
    e0b8:	b2da      	uxtb	r2, r3
    e0ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c2:	701a      	strb	r2, [r3, #0]
    e0c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0cc:	781b      	ldrb	r3, [r3, #0]
    e0ce:	3301      	adds	r3, #1
    e0d0:	b2da      	uxtb	r2, r3
    e0d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0da:	701a      	strb	r2, [r3, #0]
    e0dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e4:	781b      	ldrb	r3, [r3, #0]
    e0e6:	2bff      	cmp	r3, #255	; 0xff
    e0e8:	d105      	bne.n	e0f6 <send_nav_values+0x932>
    e0ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f2:	2200      	movs	r2, #0
    e0f4:	701a      	strb	r2, [r3, #0]
    e0f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fe:	781b      	ldrb	r3, [r3, #0]
    e100:	461a      	mov	r2, r3
    e102:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10a:	7819      	ldrb	r1, [r3, #0]
    e10c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e114:	5499      	strb	r1, [r3, r2]
    e116:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e11e:	781a      	ldrb	r2, [r3, #0]
    e120:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e128:	781b      	ldrb	r3, [r3, #0]
    e12a:	4413      	add	r3, r2
    e12c:	b2da      	uxtb	r2, r3
    e12e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e136:	701a      	strb	r2, [r3, #0]
    e138:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e140:	781a      	ldrb	r2, [r3, #0]
    e142:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e14a:	781b      	ldrb	r3, [r3, #0]
    e14c:	4413      	add	r3, r2
    e14e:	b2da      	uxtb	r2, r3
    e150:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e158:	701a      	strb	r2, [r3, #0]
    e15a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e162:	781b      	ldrb	r3, [r3, #0]
    e164:	3301      	adds	r3, #1
    e166:	b2da      	uxtb	r2, r3
    e168:	f24c 3319 	movw	r3, #49945	; 0xc319
    e16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e170:	701a      	strb	r2, [r3, #0]
    e172:	f24c 3319 	movw	r3, #49945	; 0xc319
    e176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e17a:	781b      	ldrb	r3, [r3, #0]
    e17c:	2bff      	cmp	r3, #255	; 0xff
    e17e:	d10f      	bne.n	e1a0 <send_nav_values+0x9dc>
    e180:	f24c 3319 	movw	r3, #49945	; 0xc319
    e184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e188:	2200      	movs	r2, #0
    e18a:	701a      	strb	r2, [r3, #0]
    e18c:	e008      	b.n	e1a0 <send_nav_values+0x9dc>
    e18e:	bf00      	nop
    e190:	2004c8d3 	.word	0x2004c8d3
    e194:	2004c65d 	.word	0x2004c65d
    e198:	2004c65e 	.word	0x2004c65e
    e19c:	2004c65f 	.word	0x2004c65f
    e1a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a8:	781b      	ldrb	r3, [r3, #0]
    e1aa:	461a      	mov	r2, r3
    e1ac:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b4:	7859      	ldrb	r1, [r3, #1]
    e1b6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1be:	5499      	strb	r1, [r3, r2]
    e1c0:	4bd1      	ldr	r3, [pc, #836]	; (e508 <send_nav_values+0xd44>)
    e1c2:	781a      	ldrb	r2, [r3, #0]
    e1c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1cc:	781b      	ldrb	r3, [r3, #0]
    e1ce:	4413      	add	r3, r2
    e1d0:	b2da      	uxtb	r2, r3
    e1d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1da:	701a      	strb	r2, [r3, #0]
    e1dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e4:	781a      	ldrb	r2, [r3, #0]
    e1e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ee:	781b      	ldrb	r3, [r3, #0]
    e1f0:	4413      	add	r3, r2
    e1f2:	b2da      	uxtb	r2, r3
    e1f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1fc:	701a      	strb	r2, [r3, #0]
    e1fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    e202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e206:	781b      	ldrb	r3, [r3, #0]
    e208:	3301      	adds	r3, #1
    e20a:	b2da      	uxtb	r2, r3
    e20c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e214:	701a      	strb	r2, [r3, #0]
    e216:	f24c 3319 	movw	r3, #49945	; 0xc319
    e21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21e:	781b      	ldrb	r3, [r3, #0]
    e220:	2bff      	cmp	r3, #255	; 0xff
    e222:	d105      	bne.n	e230 <send_nav_values+0xa6c>
    e224:	f24c 3319 	movw	r3, #49945	; 0xc319
    e228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22c:	2200      	movs	r2, #0
    e22e:	701a      	strb	r2, [r3, #0]
    e230:	f24c 3319 	movw	r3, #49945	; 0xc319
    e234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e238:	781b      	ldrb	r3, [r3, #0]
    e23a:	461a      	mov	r2, r3
    e23c:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e244:	7899      	ldrb	r1, [r3, #2]
    e246:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e24e:	5499      	strb	r1, [r3, r2]
    e250:	4bae      	ldr	r3, [pc, #696]	; (e50c <send_nav_values+0xd48>)
    e252:	781a      	ldrb	r2, [r3, #0]
    e254:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e25c:	781b      	ldrb	r3, [r3, #0]
    e25e:	4413      	add	r3, r2
    e260:	b2da      	uxtb	r2, r3
    e262:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e26a:	701a      	strb	r2, [r3, #0]
    e26c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e274:	781a      	ldrb	r2, [r3, #0]
    e276:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27e:	781b      	ldrb	r3, [r3, #0]
    e280:	4413      	add	r3, r2
    e282:	b2da      	uxtb	r2, r3
    e284:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e28c:	701a      	strb	r2, [r3, #0]
    e28e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e296:	781b      	ldrb	r3, [r3, #0]
    e298:	3301      	adds	r3, #1
    e29a:	b2da      	uxtb	r2, r3
    e29c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a4:	701a      	strb	r2, [r3, #0]
    e2a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ae:	781b      	ldrb	r3, [r3, #0]
    e2b0:	2bff      	cmp	r3, #255	; 0xff
    e2b2:	d105      	bne.n	e2c0 <send_nav_values+0xafc>
    e2b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2bc:	2200      	movs	r2, #0
    e2be:	701a      	strb	r2, [r3, #0]
    e2c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c8:	781b      	ldrb	r3, [r3, #0]
    e2ca:	461a      	mov	r2, r3
    e2cc:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d4:	78d9      	ldrb	r1, [r3, #3]
    e2d6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2de:	5499      	strb	r1, [r3, r2]
    e2e0:	4b8b      	ldr	r3, [pc, #556]	; (e510 <send_nav_values+0xd4c>)
    e2e2:	781a      	ldrb	r2, [r3, #0]
    e2e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ec:	781b      	ldrb	r3, [r3, #0]
    e2ee:	4413      	add	r3, r2
    e2f0:	b2da      	uxtb	r2, r3
    e2f2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fa:	701a      	strb	r2, [r3, #0]
    e2fc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e304:	781a      	ldrb	r2, [r3, #0]
    e306:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e30e:	781b      	ldrb	r3, [r3, #0]
    e310:	4413      	add	r3, r2
    e312:	b2da      	uxtb	r2, r3
    e314:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e31c:	701a      	strb	r2, [r3, #0]
    e31e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e326:	781b      	ldrb	r3, [r3, #0]
    e328:	3301      	adds	r3, #1
    e32a:	b2da      	uxtb	r2, r3
    e32c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e334:	701a      	strb	r2, [r3, #0]
    e336:	f24c 3319 	movw	r3, #49945	; 0xc319
    e33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e33e:	781b      	ldrb	r3, [r3, #0]
    e340:	2bff      	cmp	r3, #255	; 0xff
    e342:	d105      	bne.n	e350 <send_nav_values+0xb8c>
    e344:	f24c 3319 	movw	r3, #49945	; 0xc319
    e348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e34c:	2200      	movs	r2, #0
    e34e:	701a      	strb	r2, [r3, #0]
    e350:	f24c 3319 	movw	r3, #49945	; 0xc319
    e354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e358:	781b      	ldrb	r3, [r3, #0]
    e35a:	461a      	mov	r2, r3
    e35c:	f240 5358 	movw	r3, #1368	; 0x558
    e360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e364:	7819      	ldrb	r1, [r3, #0]
    e366:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36e:	5499      	strb	r1, [r3, r2]
    e370:	f240 5358 	movw	r3, #1368	; 0x558
    e374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e378:	781a      	ldrb	r2, [r3, #0]
    e37a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e382:	781b      	ldrb	r3, [r3, #0]
    e384:	4413      	add	r3, r2
    e386:	b2da      	uxtb	r2, r3
    e388:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e390:	701a      	strb	r2, [r3, #0]
    e392:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39a:	781a      	ldrb	r2, [r3, #0]
    e39c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a4:	781b      	ldrb	r3, [r3, #0]
    e3a6:	4413      	add	r3, r2
    e3a8:	b2da      	uxtb	r2, r3
    e3aa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b2:	701a      	strb	r2, [r3, #0]
    e3b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3bc:	781b      	ldrb	r3, [r3, #0]
    e3be:	3301      	adds	r3, #1
    e3c0:	b2da      	uxtb	r2, r3
    e3c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ca:	701a      	strb	r2, [r3, #0]
    e3cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d4:	781b      	ldrb	r3, [r3, #0]
    e3d6:	2bff      	cmp	r3, #255	; 0xff
    e3d8:	d105      	bne.n	e3e6 <send_nav_values+0xc22>
    e3da:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e2:	2200      	movs	r2, #0
    e3e4:	701a      	strb	r2, [r3, #0]
    e3e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ee:	781b      	ldrb	r3, [r3, #0]
    e3f0:	461a      	mov	r2, r3
    e3f2:	f240 5358 	movw	r3, #1368	; 0x558
    e3f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3fa:	7859      	ldrb	r1, [r3, #1]
    e3fc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e404:	5499      	strb	r1, [r3, r2]
    e406:	4b43      	ldr	r3, [pc, #268]	; (e514 <send_nav_values+0xd50>)
    e408:	781a      	ldrb	r2, [r3, #0]
    e40a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e412:	781b      	ldrb	r3, [r3, #0]
    e414:	4413      	add	r3, r2
    e416:	b2da      	uxtb	r2, r3
    e418:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e420:	701a      	strb	r2, [r3, #0]
    e422:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e42a:	781a      	ldrb	r2, [r3, #0]
    e42c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e434:	781b      	ldrb	r3, [r3, #0]
    e436:	4413      	add	r3, r2
    e438:	b2da      	uxtb	r2, r3
    e43a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e442:	701a      	strb	r2, [r3, #0]
    e444:	f24c 3319 	movw	r3, #49945	; 0xc319
    e448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e44c:	781b      	ldrb	r3, [r3, #0]
    e44e:	3301      	adds	r3, #1
    e450:	b2da      	uxtb	r2, r3
    e452:	f24c 3319 	movw	r3, #49945	; 0xc319
    e456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e45a:	701a      	strb	r2, [r3, #0]
    e45c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e464:	781b      	ldrb	r3, [r3, #0]
    e466:	2bff      	cmp	r3, #255	; 0xff
    e468:	d105      	bne.n	e476 <send_nav_values+0xcb2>
    e46a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e472:	2200      	movs	r2, #0
    e474:	701a      	strb	r2, [r3, #0]
    e476:	f24c 3319 	movw	r3, #49945	; 0xc319
    e47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e47e:	781b      	ldrb	r3, [r3, #0]
    e480:	461a      	mov	r2, r3
    e482:	f240 5358 	movw	r3, #1368	; 0x558
    e486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e48a:	7899      	ldrb	r1, [r3, #2]
    e48c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e494:	5499      	strb	r1, [r3, r2]
    e496:	4b20      	ldr	r3, [pc, #128]	; (e518 <send_nav_values+0xd54>)
    e498:	781a      	ldrb	r2, [r3, #0]
    e49a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4a2:	781b      	ldrb	r3, [r3, #0]
    e4a4:	4413      	add	r3, r2
    e4a6:	b2da      	uxtb	r2, r3
    e4a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4b0:	701a      	strb	r2, [r3, #0]
    e4b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ba:	781a      	ldrb	r2, [r3, #0]
    e4bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c4:	781b      	ldrb	r3, [r3, #0]
    e4c6:	4413      	add	r3, r2
    e4c8:	b2da      	uxtb	r2, r3
    e4ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d2:	701a      	strb	r2, [r3, #0]
    e4d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4dc:	781b      	ldrb	r3, [r3, #0]
    e4de:	3301      	adds	r3, #1
    e4e0:	b2da      	uxtb	r2, r3
    e4e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ea:	701a      	strb	r2, [r3, #0]
    e4ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f4:	781b      	ldrb	r3, [r3, #0]
    e4f6:	2bff      	cmp	r3, #255	; 0xff
    e4f8:	d110      	bne.n	e51c <send_nav_values+0xd58>
    e4fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e502:	2200      	movs	r2, #0
    e504:	701a      	strb	r2, [r3, #0]
    e506:	e009      	b.n	e51c <send_nav_values+0xd58>
    e508:	2004c6a5 	.word	0x2004c6a5
    e50c:	2004c6a6 	.word	0x2004c6a6
    e510:	2004c6a7 	.word	0x2004c6a7
    e514:	20000559 	.word	0x20000559
    e518:	2000055a 	.word	0x2000055a
    e51c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e524:	781b      	ldrb	r3, [r3, #0]
    e526:	461a      	mov	r2, r3
    e528:	f240 5358 	movw	r3, #1368	; 0x558
    e52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e530:	78d9      	ldrb	r1, [r3, #3]
    e532:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e53a:	5499      	strb	r1, [r3, r2]
    e53c:	4bc2      	ldr	r3, [pc, #776]	; (e848 <send_nav_values+0x1084>)
    e53e:	781a      	ldrb	r2, [r3, #0]
    e540:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e548:	781b      	ldrb	r3, [r3, #0]
    e54a:	4413      	add	r3, r2
    e54c:	b2da      	uxtb	r2, r3
    e54e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e556:	701a      	strb	r2, [r3, #0]
    e558:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e560:	781a      	ldrb	r2, [r3, #0]
    e562:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e56a:	781b      	ldrb	r3, [r3, #0]
    e56c:	4413      	add	r3, r2
    e56e:	b2da      	uxtb	r2, r3
    e570:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e578:	701a      	strb	r2, [r3, #0]
    e57a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e582:	781b      	ldrb	r3, [r3, #0]
    e584:	3301      	adds	r3, #1
    e586:	b2da      	uxtb	r2, r3
    e588:	f24c 3319 	movw	r3, #49945	; 0xc319
    e58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e590:	701a      	strb	r2, [r3, #0]
    e592:	f24c 3319 	movw	r3, #49945	; 0xc319
    e596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59a:	781b      	ldrb	r3, [r3, #0]
    e59c:	2bff      	cmp	r3, #255	; 0xff
    e59e:	d105      	bne.n	e5ac <send_nav_values+0xde8>
    e5a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5a8:	2200      	movs	r2, #0
    e5aa:	701a      	strb	r2, [r3, #0]
    e5ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b4:	781b      	ldrb	r3, [r3, #0]
    e5b6:	461a      	mov	r2, r3
    e5b8:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c0:	7819      	ldrb	r1, [r3, #0]
    e5c2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ca:	5499      	strb	r1, [r3, r2]
    e5cc:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d4:	781a      	ldrb	r2, [r3, #0]
    e5d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5de:	781b      	ldrb	r3, [r3, #0]
    e5e0:	4413      	add	r3, r2
    e5e2:	b2da      	uxtb	r2, r3
    e5e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ec:	701a      	strb	r2, [r3, #0]
    e5ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f6:	781a      	ldrb	r2, [r3, #0]
    e5f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e600:	781b      	ldrb	r3, [r3, #0]
    e602:	4413      	add	r3, r2
    e604:	b2da      	uxtb	r2, r3
    e606:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e60e:	701a      	strb	r2, [r3, #0]
    e610:	f24c 3319 	movw	r3, #49945	; 0xc319
    e614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e618:	781b      	ldrb	r3, [r3, #0]
    e61a:	3301      	adds	r3, #1
    e61c:	b2da      	uxtb	r2, r3
    e61e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e626:	701a      	strb	r2, [r3, #0]
    e628:	f24c 3319 	movw	r3, #49945	; 0xc319
    e62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e630:	781b      	ldrb	r3, [r3, #0]
    e632:	2bff      	cmp	r3, #255	; 0xff
    e634:	d105      	bne.n	e642 <send_nav_values+0xe7e>
    e636:	f24c 3319 	movw	r3, #49945	; 0xc319
    e63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e63e:	2200      	movs	r2, #0
    e640:	701a      	strb	r2, [r3, #0]
    e642:	f24c 3319 	movw	r3, #49945	; 0xc319
    e646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e64a:	781b      	ldrb	r3, [r3, #0]
    e64c:	461a      	mov	r2, r3
    e64e:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e656:	7859      	ldrb	r1, [r3, #1]
    e658:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e660:	5499      	strb	r1, [r3, r2]
    e662:	4b7a      	ldr	r3, [pc, #488]	; (e84c <send_nav_values+0x1088>)
    e664:	781a      	ldrb	r2, [r3, #0]
    e666:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e66e:	781b      	ldrb	r3, [r3, #0]
    e670:	4413      	add	r3, r2
    e672:	b2da      	uxtb	r2, r3
    e674:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e67c:	701a      	strb	r2, [r3, #0]
    e67e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e686:	781a      	ldrb	r2, [r3, #0]
    e688:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e690:	781b      	ldrb	r3, [r3, #0]
    e692:	4413      	add	r3, r2
    e694:	b2da      	uxtb	r2, r3
    e696:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e69e:	701a      	strb	r2, [r3, #0]
    e6a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a8:	781b      	ldrb	r3, [r3, #0]
    e6aa:	3301      	adds	r3, #1
    e6ac:	b2da      	uxtb	r2, r3
    e6ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b6:	701a      	strb	r2, [r3, #0]
    e6b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c0:	781b      	ldrb	r3, [r3, #0]
    e6c2:	2bff      	cmp	r3, #255	; 0xff
    e6c4:	d105      	bne.n	e6d2 <send_nav_values+0xf0e>
    e6c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ce:	2200      	movs	r2, #0
    e6d0:	701a      	strb	r2, [r3, #0]
    e6d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6da:	781b      	ldrb	r3, [r3, #0]
    e6dc:	461a      	mov	r2, r3
    e6de:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e6:	7899      	ldrb	r1, [r3, #2]
    e6e8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f0:	5499      	strb	r1, [r3, r2]
    e6f2:	4b57      	ldr	r3, [pc, #348]	; (e850 <send_nav_values+0x108c>)
    e6f4:	781a      	ldrb	r2, [r3, #0]
    e6f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6fe:	781b      	ldrb	r3, [r3, #0]
    e700:	4413      	add	r3, r2
    e702:	b2da      	uxtb	r2, r3
    e704:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e70c:	701a      	strb	r2, [r3, #0]
    e70e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e716:	781a      	ldrb	r2, [r3, #0]
    e718:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e720:	781b      	ldrb	r3, [r3, #0]
    e722:	4413      	add	r3, r2
    e724:	b2da      	uxtb	r2, r3
    e726:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e72e:	701a      	strb	r2, [r3, #0]
    e730:	f24c 3319 	movw	r3, #49945	; 0xc319
    e734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e738:	781b      	ldrb	r3, [r3, #0]
    e73a:	3301      	adds	r3, #1
    e73c:	b2da      	uxtb	r2, r3
    e73e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e746:	701a      	strb	r2, [r3, #0]
    e748:	f24c 3319 	movw	r3, #49945	; 0xc319
    e74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e750:	781b      	ldrb	r3, [r3, #0]
    e752:	2bff      	cmp	r3, #255	; 0xff
    e754:	d105      	bne.n	e762 <send_nav_values+0xf9e>
    e756:	f24c 3319 	movw	r3, #49945	; 0xc319
    e75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e75e:	2200      	movs	r2, #0
    e760:	701a      	strb	r2, [r3, #0]
    e762:	f24c 3319 	movw	r3, #49945	; 0xc319
    e766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e76a:	781b      	ldrb	r3, [r3, #0]
    e76c:	461a      	mov	r2, r3
    e76e:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e776:	78d9      	ldrb	r1, [r3, #3]
    e778:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e780:	5499      	strb	r1, [r3, r2]
    e782:	4b34      	ldr	r3, [pc, #208]	; (e854 <send_nav_values+0x1090>)
    e784:	781a      	ldrb	r2, [r3, #0]
    e786:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e78e:	781b      	ldrb	r3, [r3, #0]
    e790:	4413      	add	r3, r2
    e792:	b2da      	uxtb	r2, r3
    e794:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e79c:	701a      	strb	r2, [r3, #0]
    e79e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a6:	781a      	ldrb	r2, [r3, #0]
    e7a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b0:	781b      	ldrb	r3, [r3, #0]
    e7b2:	4413      	add	r3, r2
    e7b4:	b2da      	uxtb	r2, r3
    e7b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7be:	701a      	strb	r2, [r3, #0]
    e7c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c8:	781b      	ldrb	r3, [r3, #0]
    e7ca:	3301      	adds	r3, #1
    e7cc:	b2da      	uxtb	r2, r3
    e7ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d6:	701a      	strb	r2, [r3, #0]
    e7d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e0:	781b      	ldrb	r3, [r3, #0]
    e7e2:	2bff      	cmp	r3, #255	; 0xff
    e7e4:	d105      	bne.n	e7f2 <send_nav_values+0x102e>
    e7e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ee:	2200      	movs	r2, #0
    e7f0:	701a      	strb	r2, [r3, #0]
    e7f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7fa:	781b      	ldrb	r3, [r3, #0]
    e7fc:	461a      	mov	r2, r3
    e7fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e806:	7819      	ldrb	r1, [r3, #0]
    e808:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e810:	5499      	strb	r1, [r3, r2]
    e812:	f24c 3319 	movw	r3, #49945	; 0xc319
    e816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e81a:	781b      	ldrb	r3, [r3, #0]
    e81c:	3301      	adds	r3, #1
    e81e:	b2da      	uxtb	r2, r3
    e820:	f24c 3319 	movw	r3, #49945	; 0xc319
    e824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e828:	701a      	strb	r2, [r3, #0]
    e82a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e82e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e832:	781b      	ldrb	r3, [r3, #0]
    e834:	2bff      	cmp	r3, #255	; 0xff
    e836:	d10f      	bne.n	e858 <send_nav_values+0x1094>
    e838:	f24c 3319 	movw	r3, #49945	; 0xc319
    e83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e840:	2200      	movs	r2, #0
    e842:	701a      	strb	r2, [r3, #0]
    e844:	e008      	b.n	e858 <send_nav_values+0x1094>
    e846:	bf00      	nop
    e848:	2000055b 	.word	0x2000055b
    e84c:	2004c6a9 	.word	0x2004c6a9
    e850:	2004c6aa 	.word	0x2004c6aa
    e854:	2004c6ab 	.word	0x2004c6ab
    e858:	f24c 3319 	movw	r3, #49945	; 0xc319
    e85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e860:	781b      	ldrb	r3, [r3, #0]
    e862:	461a      	mov	r2, r3
    e864:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e86c:	7819      	ldrb	r1, [r3, #0]
    e86e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e876:	5499      	strb	r1, [r3, r2]
    e878:	f24c 3319 	movw	r3, #49945	; 0xc319
    e87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e880:	781b      	ldrb	r3, [r3, #0]
    e882:	3301      	adds	r3, #1
    e884:	b2da      	uxtb	r2, r3
    e886:	f24c 3319 	movw	r3, #49945	; 0xc319
    e88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e88e:	701a      	strb	r2, [r3, #0]
    e890:	f24c 3319 	movw	r3, #49945	; 0xc319
    e894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e898:	781b      	ldrb	r3, [r3, #0]
    e89a:	2bff      	cmp	r3, #255	; 0xff
    e89c:	d105      	bne.n	e8aa <send_nav_values+0x10e6>
    e89e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a6:	2200      	movs	r2, #0
    e8a8:	701a      	strb	r2, [r3, #0]
    e8aa:	f242 0339 	movw	r3, #8249	; 0x2039
    e8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8b2:	781b      	ldrb	r3, [r3, #0]
    e8b4:	b2db      	uxtb	r3, r3
    e8b6:	f003 0310 	and.w	r3, r3, #16
    e8ba:	2b00      	cmp	r3, #0
    e8bc:	d15a      	bne.n	e974 <send_nav_values+0x11b0>
    e8be:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c6:	781b      	ldrb	r3, [r3, #0]
    e8c8:	b2db      	uxtb	r3, r3
    e8ca:	461a      	mov	r2, r3
    e8cc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d4:	5c9a      	ldrb	r2, [r3, r2]
    e8d6:	f24c 431b 	movw	r3, #50203	; 0xc41b
    e8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8de:	701a      	strb	r2, [r3, #0]
    e8e0:	f24c 431c 	movw	r3, #50204	; 0xc41c
    e8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e8:	2200      	movs	r2, #0
    e8ea:	701a      	strb	r2, [r3, #0]
    e8ec:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f4:	781b      	ldrb	r3, [r3, #0]
    e8f6:	b2db      	uxtb	r3, r3
    e8f8:	3301      	adds	r3, #1
    e8fa:	b2da      	uxtb	r2, r3
    e8fc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e904:	701a      	strb	r2, [r3, #0]
    e906:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e90e:	781b      	ldrb	r3, [r3, #0]
    e910:	b2db      	uxtb	r3, r3
    e912:	2bff      	cmp	r3, #255	; 0xff
    e914:	d105      	bne.n	e922 <send_nav_values+0x115e>
    e916:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e91e:	2200      	movs	r2, #0
    e920:	701a      	strb	r2, [r3, #0]
    e922:	f242 0338 	movw	r3, #8248	; 0x2038
    e926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e92a:	f242 0238 	movw	r2, #8248	; 0x2038
    e92e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e932:	7812      	ldrb	r2, [r2, #0]
    e934:	b2d2      	uxtb	r2, r2
    e936:	f042 0201 	orr.w	r2, r2, #1
    e93a:	b2d2      	uxtb	r2, r2
    e93c:	701a      	strb	r2, [r3, #0]
    e93e:	f242 0339 	movw	r3, #8249	; 0x2039
    e942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e946:	f242 0239 	movw	r2, #8249	; 0x2039
    e94a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e94e:	7812      	ldrb	r2, [r2, #0]
    e950:	b2d2      	uxtb	r2, r2
    e952:	f042 0210 	orr.w	r2, r2, #16
    e956:	b2d2      	uxtb	r2, r2
    e958:	701a      	strb	r2, [r3, #0]
    e95a:	e00b      	b.n	e974 <send_nav_values+0x11b0>
    e95c:	f24c 3318 	movw	r3, #49944	; 0xc318
    e960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e964:	781b      	ldrb	r3, [r3, #0]
    e966:	3301      	adds	r3, #1
    e968:	b2da      	uxtb	r2, r3
    e96a:	f24c 3318 	movw	r3, #49944	; 0xc318
    e96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e972:	701a      	strb	r2, [r3, #0]
}
    e974:	46bd      	mov	sp, r7
    e976:	f85d 7b04 	ldr.w	r7, [sp], #4
    e97a:	4770      	bx	lr

0000e97c <course_run>:

void course_run(void){
    e97c:	b580      	push	{r7, lr}
    e97e:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e980:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    e984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e988:	781b      	ldrb	r3, [r3, #0]
    e98a:	2b02      	cmp	r3, #2
    e98c:	d006      	beq.n	e99c <course_run+0x20>
    e98e:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    e992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e996:	781b      	ldrb	r3, [r3, #0]
    e998:	2b03      	cmp	r3, #3
    e99a:	d112      	bne.n	e9c2 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e99c:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    e9a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a4:	781b      	ldrb	r3, [r3, #0]
    e9a6:	2b02      	cmp	r3, #2
    e9a8:	d901      	bls.n	e9ae <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e9aa:	f003 faf1 	bl	11f90 <course_pid_run>
    desired_roll = nav_desired_roll;
    e9ae:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
    e9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b6:	681a      	ldr	r2, [r3, #0]
    e9b8:	f24c 6344 	movw	r3, #50756	; 0xc644
    e9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c0:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e9c2:	bd80      	pop	{r7, pc}

0000e9c4 <altitude_control_task>:

void altitude_control_task(void)
{
    e9c4:	b580      	push	{r7, lr}
    e9c6:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e9c8:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    e9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9d0:	781b      	ldrb	r3, [r3, #0]
    e9d2:	2b02      	cmp	r3, #2
    e9d4:	d006      	beq.n	e9e4 <altitude_control_task+0x20>
    e9d6:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    e9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9de:	781b      	ldrb	r3, [r3, #0]
    e9e0:	2b03      	cmp	r3, #3
    e9e2:	d108      	bne.n	e9f6 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e9e4:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    e9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ec:	781b      	ldrb	r3, [r3, #0]
    e9ee:	2b03      	cmp	r3, #3
    e9f0:	d101      	bne.n	e9f6 <altitude_control_task+0x32>
      			altitude_pid_run();
    e9f2:	f003 fd55 	bl	124a0 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e9f6:	bd80      	pop	{r7, pc}

0000e9f8 <climb_control_task>:
void climb_control_task(void)
{
    e9f8:	b580      	push	{r7, lr}
    e9fa:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e9fc:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ea00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea04:	781b      	ldrb	r3, [r3, #0]
    ea06:	2b02      	cmp	r3, #2
    ea08:	d006      	beq.n	ea18 <climb_control_task+0x20>
    ea0a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ea0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea12:	781b      	ldrb	r3, [r3, #0]
    ea14:	2b03      	cmp	r3, #3
    ea16:	d135      	bne.n	ea84 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    ea18:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    ea1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea20:	781b      	ldrb	r3, [r3, #0]
    ea22:	2b01      	cmp	r3, #1
    ea24:	d901      	bls.n	ea2a <climb_control_task+0x32>
        	climb_pid_run();
    ea26:	f003 fb6b 	bl	12100 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    ea2a:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    ea2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea32:	781b      	ldrb	r3, [r3, #0]
    ea34:	2b01      	cmp	r3, #1
    ea36:	d10a      	bne.n	ea4e <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    ea38:	f24c 6398 	movw	r3, #50840	; 0xc698
    ea3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea40:	881b      	ldrh	r3, [r3, #0]
    ea42:	b29a      	uxth	r2, r3
    ea44:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ea48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea4c:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    ea4e:	f24c 3305 	movw	r3, #49925	; 0xc305
    ea52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea56:	781b      	ldrb	r3, [r3, #0]
    ea58:	2b00      	cmp	r3, #0
    ea5a:	d10d      	bne.n	ea78 <climb_control_task+0x80>
    ea5c:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ea60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea64:	881b      	ldrh	r3, [r3, #0]
    ea66:	2b00      	cmp	r3, #0
    ea68:	d10c      	bne.n	ea84 <climb_control_task+0x8c>
    ea6a:	f24c 3310 	movw	r3, #49936	; 0xc310
    ea6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea72:	781b      	ldrb	r3, [r3, #0]
    ea74:	2b00      	cmp	r3, #0
    ea76:	d105      	bne.n	ea84 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    ea78:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ea7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea80:	2200      	movs	r2, #0
    ea82:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    ea84:	bd80      	pop	{r7, pc}
    ea86:	bf00      	nop

0000ea88 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    ea88:	b580      	push	{r7, lr}
    ea8a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    ea8c:	f003 f926 	bl	11cdc <ir_update>
    estimator_update_state_infrared();
    ea90:	f006 fbac 	bl	151ec <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    ea94:	f003 f990 	bl	11db8 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    ea98:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ea9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaa0:	881a      	ldrh	r2, [r3, #0]
    eaa2:	f24c 4338 	movw	r3, #50232	; 0xc438
    eaa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaaa:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    eaac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab4:	881a      	ldrh	r2, [r3, #0]
    eab6:	f24c 4338 	movw	r3, #50232	; 0xc438
    eaba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eabe:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    eac0:	f24c 6350 	movw	r3, #50768	; 0xc650
    eac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eac8:	881a      	ldrh	r2, [r3, #0]
    eaca:	f24c 4338 	movw	r3, #50232	; 0xc438
    eace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ead2:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    ead4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    ead8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eadc:	681b      	ldr	r3, [r3, #0]
    eade:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eae2:	4618      	mov	r0, r3
    eae4:	f008 ff80 	bl	179e8 <__aeabi_f2d>
    eae8:	4602      	mov	r2, r0
    eaea:	460b      	mov	r3, r1
    eaec:	4610      	mov	r0, r2
    eaee:	4619      	mov	r1, r3
    eaf0:	f04f 0200 	mov.w	r2, #0
    eaf4:	f04f 0300 	mov.w	r3, #0
    eaf8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eafc:	f008 ffc8 	bl	17a90 <__aeabi_dmul>
    eb00:	4602      	mov	r2, r0
    eb02:	460b      	mov	r3, r1
    eb04:	4610      	mov	r0, r2
    eb06:	4619      	mov	r1, r3
    eb08:	f04f 0200 	mov.w	r2, #0
    eb0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    eb10:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    eb14:	f009 fa2e 	bl	17f74 <__aeabi_dcmplt>
    eb18:	4603      	mov	r3, r0
    eb1a:	2b00      	cmp	r3, #0
    eb1c:	d002      	beq.n	eb24 <stabilisation_task+0x9c>
    eb1e:	f64d 2280 	movw	r2, #55936	; 0xda80
    eb22:	e046      	b.n	ebb2 <stabilisation_task+0x12a>
    eb24:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    eb28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb2c:	681b      	ldr	r3, [r3, #0]
    eb2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb32:	4618      	mov	r0, r3
    eb34:	f008 ff58 	bl	179e8 <__aeabi_f2d>
    eb38:	4602      	mov	r2, r0
    eb3a:	460b      	mov	r3, r1
    eb3c:	4610      	mov	r0, r2
    eb3e:	4619      	mov	r1, r3
    eb40:	f04f 0200 	mov.w	r2, #0
    eb44:	f04f 0300 	mov.w	r3, #0
    eb48:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb4c:	f008 ffa0 	bl	17a90 <__aeabi_dmul>
    eb50:	4602      	mov	r2, r0
    eb52:	460b      	mov	r3, r1
    eb54:	4610      	mov	r0, r2
    eb56:	4619      	mov	r1, r3
    eb58:	f04f 0200 	mov.w	r2, #0
    eb5c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    eb60:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    eb64:	f009 fa24 	bl	17fb0 <__aeabi_dcmpgt>
    eb68:	4603      	mov	r3, r0
    eb6a:	2b00      	cmp	r3, #0
    eb6c:	d002      	beq.n	eb74 <stabilisation_task+0xec>
    eb6e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    eb72:	e01d      	b.n	ebb0 <stabilisation_task+0x128>
    eb74:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    eb78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb7c:	681b      	ldr	r3, [r3, #0]
    eb7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb82:	4618      	mov	r0, r3
    eb84:	f008 ff30 	bl	179e8 <__aeabi_f2d>
    eb88:	4602      	mov	r2, r0
    eb8a:	460b      	mov	r3, r1
    eb8c:	4610      	mov	r0, r2
    eb8e:	4619      	mov	r1, r3
    eb90:	f04f 0200 	mov.w	r2, #0
    eb94:	f04f 0300 	mov.w	r3, #0
    eb98:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb9c:	f008 ff78 	bl	17a90 <__aeabi_dmul>
    eba0:	4602      	mov	r2, r0
    eba2:	460b      	mov	r3, r1
    eba4:	4610      	mov	r0, r2
    eba6:	4619      	mov	r1, r3
    eba8:	f009 fa0c 	bl	17fc4 <__aeabi_d2iz>
    ebac:	4603      	mov	r3, r0
    ebae:	b29b      	uxth	r3, r3
    ebb0:	b29a      	uxth	r2, r3
    ebb2:	f24c 4338 	movw	r3, #50232	; 0xc438
    ebb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebba:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ebbc:	bd80      	pop	{r7, pc}
    ebbe:	bf00      	nop

0000ebc0 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ebc0:	b580      	push	{r7, lr}
    ebc2:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ebc4:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
    ebc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebcc:	2200      	movs	r2, #0
    ebce:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    ebd0:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
    ebd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebd8:	781b      	ldrb	r3, [r3, #0]
    ebda:	2b00      	cmp	r3, #0
    ebdc:	f001 81af 	beq.w	ff3e <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ebe0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ebe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebe8:	781a      	ldrb	r2, [r3, #0]
    ebea:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ebee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebf2:	781b      	ldrb	r3, [r3, #0]
    ebf4:	b2db      	uxtb	r3, r3
    ebf6:	429a      	cmp	r2, r3
    ebf8:	d313      	bcc.n	ec22 <send_gps_pos+0x62>
    ebfa:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ebfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec02:	781b      	ldrb	r3, [r3, #0]
    ec04:	b2db      	uxtb	r3, r3
    ec06:	461a      	mov	r2, r3
    ec08:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec10:	781b      	ldrb	r3, [r3, #0]
    ec12:	1ad3      	subs	r3, r2, r3
    ec14:	33ff      	adds	r3, #255	; 0xff
    ec16:	2b21      	cmp	r3, #33	; 0x21
    ec18:	bfd4      	ite	le
    ec1a:	2300      	movle	r3, #0
    ec1c:	2301      	movgt	r3, #1
    ec1e:	b2db      	uxtb	r3, r3
    ec20:	e011      	b.n	ec46 <send_gps_pos+0x86>
    ec22:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ec26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec2a:	781b      	ldrb	r3, [r3, #0]
    ec2c:	b2db      	uxtb	r3, r3
    ec2e:	461a      	mov	r2, r3
    ec30:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec38:	781b      	ldrb	r3, [r3, #0]
    ec3a:	1ad3      	subs	r3, r2, r3
    ec3c:	2b21      	cmp	r3, #33	; 0x21
    ec3e:	bfd4      	ite	le
    ec40:	2300      	movle	r3, #0
    ec42:	2301      	movgt	r3, #1
    ec44:	b2db      	uxtb	r3, r3
    ec46:	2b00      	cmp	r3, #0
    ec48:	f001 816b 	beq.w	ff22 <send_gps_pos+0x1362>
    ec4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec54:	781b      	ldrb	r3, [r3, #0]
    ec56:	461a      	mov	r2, r3
    ec58:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ec5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec60:	2105      	movs	r1, #5
    ec62:	5499      	strb	r1, [r3, r2]
    ec64:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec6c:	781b      	ldrb	r3, [r3, #0]
    ec6e:	3301      	adds	r3, #1
    ec70:	b2da      	uxtb	r2, r3
    ec72:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec7a:	701a      	strb	r2, [r3, #0]
    ec7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec84:	781b      	ldrb	r3, [r3, #0]
    ec86:	2bff      	cmp	r3, #255	; 0xff
    ec88:	d105      	bne.n	ec96 <send_gps_pos+0xd6>
    ec8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec92:	2200      	movs	r2, #0
    ec94:	701a      	strb	r2, [r3, #0]
    ec96:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec9e:	781b      	ldrb	r3, [r3, #0]
    eca0:	461a      	mov	r2, r3
    eca2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    eca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecaa:	2108      	movs	r1, #8
    ecac:	5499      	strb	r1, [r3, r2]
    ecae:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb6:	781b      	ldrb	r3, [r3, #0]
    ecb8:	3301      	adds	r3, #1
    ecba:	b2da      	uxtb	r2, r3
    ecbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc4:	701a      	strb	r2, [r3, #0]
    ecc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecce:	781b      	ldrb	r3, [r3, #0]
    ecd0:	2bff      	cmp	r3, #255	; 0xff
    ecd2:	d105      	bne.n	ece0 <send_gps_pos+0x120>
    ecd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecdc:	2200      	movs	r2, #0
    ecde:	701a      	strb	r2, [r3, #0]
    ece0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ece4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece8:	2208      	movs	r2, #8
    ecea:	701a      	strb	r2, [r3, #0]
    ecec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ecf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf4:	2208      	movs	r2, #8
    ecf6:	701a      	strb	r2, [r3, #0]
    ecf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed00:	781b      	ldrb	r3, [r3, #0]
    ed02:	461a      	mov	r2, r3
    ed04:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    ed08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed0c:	7819      	ldrb	r1, [r3, #0]
    ed0e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ed12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed16:	5499      	strb	r1, [r3, r2]
    ed18:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ed1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed20:	781a      	ldrb	r2, [r3, #0]
    ed22:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    ed26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed2a:	781b      	ldrb	r3, [r3, #0]
    ed2c:	4413      	add	r3, r2
    ed2e:	b2da      	uxtb	r2, r3
    ed30:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ed34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed38:	701a      	strb	r2, [r3, #0]
    ed3a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ed3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed42:	781a      	ldrb	r2, [r3, #0]
    ed44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ed48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed4c:	781b      	ldrb	r3, [r3, #0]
    ed4e:	4413      	add	r3, r2
    ed50:	b2da      	uxtb	r2, r3
    ed52:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ed56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed5a:	701a      	strb	r2, [r3, #0]
    ed5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed64:	781b      	ldrb	r3, [r3, #0]
    ed66:	3301      	adds	r3, #1
    ed68:	b2da      	uxtb	r2, r3
    ed6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed72:	701a      	strb	r2, [r3, #0]
    ed74:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed7c:	781b      	ldrb	r3, [r3, #0]
    ed7e:	2bff      	cmp	r3, #255	; 0xff
    ed80:	d105      	bne.n	ed8e <send_gps_pos+0x1ce>
    ed82:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8a:	2200      	movs	r2, #0
    ed8c:	701a      	strb	r2, [r3, #0]
    ed8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed96:	781b      	ldrb	r3, [r3, #0]
    ed98:	461a      	mov	r2, r3
    ed9a:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ed9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda2:	7819      	ldrb	r1, [r3, #0]
    eda4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    eda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edac:	5499      	strb	r1, [r3, r2]
    edae:	f24c 439c 	movw	r3, #50332	; 0xc49c
    edb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb6:	781a      	ldrb	r2, [r3, #0]
    edb8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    edbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc0:	781b      	ldrb	r3, [r3, #0]
    edc2:	4413      	add	r3, r2
    edc4:	b2da      	uxtb	r2, r3
    edc6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    edca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edce:	701a      	strb	r2, [r3, #0]
    edd0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    edd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd8:	781a      	ldrb	r2, [r3, #0]
    edda:	f24c 431d 	movw	r3, #50205	; 0xc41d
    edde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede2:	781b      	ldrb	r3, [r3, #0]
    ede4:	4413      	add	r3, r2
    ede6:	b2da      	uxtb	r2, r3
    ede8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    edec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf0:	701a      	strb	r2, [r3, #0]
    edf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    edf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edfa:	781b      	ldrb	r3, [r3, #0]
    edfc:	3301      	adds	r3, #1
    edfe:	b2da      	uxtb	r2, r3
    ee00:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee08:	701a      	strb	r2, [r3, #0]
    ee0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee12:	781b      	ldrb	r3, [r3, #0]
    ee14:	2bff      	cmp	r3, #255	; 0xff
    ee16:	d105      	bne.n	ee24 <send_gps_pos+0x264>
    ee18:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee20:	2200      	movs	r2, #0
    ee22:	701a      	strb	r2, [r3, #0]
    ee24:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee2c:	781b      	ldrb	r3, [r3, #0]
    ee2e:	461a      	mov	r2, r3
    ee30:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ee34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee38:	7859      	ldrb	r1, [r3, #1]
    ee3a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ee3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee42:	5499      	strb	r1, [r3, r2]
    ee44:	4bd1      	ldr	r3, [pc, #836]	; (f18c <send_gps_pos+0x5cc>)
    ee46:	781a      	ldrb	r2, [r3, #0]
    ee48:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee50:	781b      	ldrb	r3, [r3, #0]
    ee52:	4413      	add	r3, r2
    ee54:	b2da      	uxtb	r2, r3
    ee56:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5e:	701a      	strb	r2, [r3, #0]
    ee60:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ee64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee68:	781a      	ldrb	r2, [r3, #0]
    ee6a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee72:	781b      	ldrb	r3, [r3, #0]
    ee74:	4413      	add	r3, r2
    ee76:	b2da      	uxtb	r2, r3
    ee78:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ee7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee80:	701a      	strb	r2, [r3, #0]
    ee82:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8a:	781b      	ldrb	r3, [r3, #0]
    ee8c:	3301      	adds	r3, #1
    ee8e:	b2da      	uxtb	r2, r3
    ee90:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee98:	701a      	strb	r2, [r3, #0]
    ee9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea2:	781b      	ldrb	r3, [r3, #0]
    eea4:	2bff      	cmp	r3, #255	; 0xff
    eea6:	d105      	bne.n	eeb4 <send_gps_pos+0x2f4>
    eea8:	f24c 3319 	movw	r3, #49945	; 0xc319
    eeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb0:	2200      	movs	r2, #0
    eeb2:	701a      	strb	r2, [r3, #0]
    eeb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    eeb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eebc:	781b      	ldrb	r3, [r3, #0]
    eebe:	461a      	mov	r2, r3
    eec0:	f24c 439c 	movw	r3, #50332	; 0xc49c
    eec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec8:	7899      	ldrb	r1, [r3, #2]
    eeca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    eece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed2:	5499      	strb	r1, [r3, r2]
    eed4:	4bae      	ldr	r3, [pc, #696]	; (f190 <send_gps_pos+0x5d0>)
    eed6:	781a      	ldrb	r2, [r3, #0]
    eed8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee0:	781b      	ldrb	r3, [r3, #0]
    eee2:	4413      	add	r3, r2
    eee4:	b2da      	uxtb	r2, r3
    eee6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eeea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeee:	701a      	strb	r2, [r3, #0]
    eef0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    eef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef8:	781a      	ldrb	r2, [r3, #0]
    eefa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eefe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef02:	781b      	ldrb	r3, [r3, #0]
    ef04:	4413      	add	r3, r2
    ef06:	b2da      	uxtb	r2, r3
    ef08:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef10:	701a      	strb	r2, [r3, #0]
    ef12:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef1a:	781b      	ldrb	r3, [r3, #0]
    ef1c:	3301      	adds	r3, #1
    ef1e:	b2da      	uxtb	r2, r3
    ef20:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef28:	701a      	strb	r2, [r3, #0]
    ef2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef32:	781b      	ldrb	r3, [r3, #0]
    ef34:	2bff      	cmp	r3, #255	; 0xff
    ef36:	d105      	bne.n	ef44 <send_gps_pos+0x384>
    ef38:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef40:	2200      	movs	r2, #0
    ef42:	701a      	strb	r2, [r3, #0]
    ef44:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef4c:	781b      	ldrb	r3, [r3, #0]
    ef4e:	461a      	mov	r2, r3
    ef50:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ef54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef58:	78d9      	ldrb	r1, [r3, #3]
    ef5a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ef5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef62:	5499      	strb	r1, [r3, r2]
    ef64:	4b8b      	ldr	r3, [pc, #556]	; (f194 <send_gps_pos+0x5d4>)
    ef66:	781a      	ldrb	r2, [r3, #0]
    ef68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef70:	781b      	ldrb	r3, [r3, #0]
    ef72:	4413      	add	r3, r2
    ef74:	b2da      	uxtb	r2, r3
    ef76:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef7e:	701a      	strb	r2, [r3, #0]
    ef80:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef88:	781a      	ldrb	r2, [r3, #0]
    ef8a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef92:	781b      	ldrb	r3, [r3, #0]
    ef94:	4413      	add	r3, r2
    ef96:	b2da      	uxtb	r2, r3
    ef98:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa0:	701a      	strb	r2, [r3, #0]
    efa2:	f24c 3319 	movw	r3, #49945	; 0xc319
    efa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efaa:	781b      	ldrb	r3, [r3, #0]
    efac:	3301      	adds	r3, #1
    efae:	b2da      	uxtb	r2, r3
    efb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    efb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb8:	701a      	strb	r2, [r3, #0]
    efba:	f24c 3319 	movw	r3, #49945	; 0xc319
    efbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc2:	781b      	ldrb	r3, [r3, #0]
    efc4:	2bff      	cmp	r3, #255	; 0xff
    efc6:	d105      	bne.n	efd4 <send_gps_pos+0x414>
    efc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    efcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd0:	2200      	movs	r2, #0
    efd2:	701a      	strb	r2, [r3, #0]
    efd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    efd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efdc:	781b      	ldrb	r3, [r3, #0]
    efde:	461a      	mov	r2, r3
    efe0:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    efe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe8:	7819      	ldrb	r1, [r3, #0]
    efea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    efee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff2:	5499      	strb	r1, [r3, r2]
    eff4:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    eff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    effc:	781a      	ldrb	r2, [r3, #0]
    effe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f006:	781b      	ldrb	r3, [r3, #0]
    f008:	4413      	add	r3, r2
    f00a:	b2da      	uxtb	r2, r3
    f00c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f014:	701a      	strb	r2, [r3, #0]
    f016:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f01e:	781a      	ldrb	r2, [r3, #0]
    f020:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f028:	781b      	ldrb	r3, [r3, #0]
    f02a:	4413      	add	r3, r2
    f02c:	b2da      	uxtb	r2, r3
    f02e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f036:	701a      	strb	r2, [r3, #0]
    f038:	f24c 3319 	movw	r3, #49945	; 0xc319
    f03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f040:	781b      	ldrb	r3, [r3, #0]
    f042:	3301      	adds	r3, #1
    f044:	b2da      	uxtb	r2, r3
    f046:	f24c 3319 	movw	r3, #49945	; 0xc319
    f04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f04e:	701a      	strb	r2, [r3, #0]
    f050:	f24c 3319 	movw	r3, #49945	; 0xc319
    f054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f058:	781b      	ldrb	r3, [r3, #0]
    f05a:	2bff      	cmp	r3, #255	; 0xff
    f05c:	d105      	bne.n	f06a <send_gps_pos+0x4aa>
    f05e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f066:	2200      	movs	r2, #0
    f068:	701a      	strb	r2, [r3, #0]
    f06a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f072:	781b      	ldrb	r3, [r3, #0]
    f074:	461a      	mov	r2, r3
    f076:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f07e:	7859      	ldrb	r1, [r3, #1]
    f080:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f088:	5499      	strb	r1, [r3, r2]
    f08a:	4b43      	ldr	r3, [pc, #268]	; (f198 <send_gps_pos+0x5d8>)
    f08c:	781a      	ldrb	r2, [r3, #0]
    f08e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f096:	781b      	ldrb	r3, [r3, #0]
    f098:	4413      	add	r3, r2
    f09a:	b2da      	uxtb	r2, r3
    f09c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a4:	701a      	strb	r2, [r3, #0]
    f0a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ae:	781a      	ldrb	r2, [r3, #0]
    f0b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b8:	781b      	ldrb	r3, [r3, #0]
    f0ba:	4413      	add	r3, r2
    f0bc:	b2da      	uxtb	r2, r3
    f0be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c6:	701a      	strb	r2, [r3, #0]
    f0c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d0:	781b      	ldrb	r3, [r3, #0]
    f0d2:	3301      	adds	r3, #1
    f0d4:	b2da      	uxtb	r2, r3
    f0d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0de:	701a      	strb	r2, [r3, #0]
    f0e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e8:	781b      	ldrb	r3, [r3, #0]
    f0ea:	2bff      	cmp	r3, #255	; 0xff
    f0ec:	d105      	bne.n	f0fa <send_gps_pos+0x53a>
    f0ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f6:	2200      	movs	r2, #0
    f0f8:	701a      	strb	r2, [r3, #0]
    f0fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f102:	781b      	ldrb	r3, [r3, #0]
    f104:	461a      	mov	r2, r3
    f106:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f10e:	7899      	ldrb	r1, [r3, #2]
    f110:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f118:	5499      	strb	r1, [r3, r2]
    f11a:	4b20      	ldr	r3, [pc, #128]	; (f19c <send_gps_pos+0x5dc>)
    f11c:	781a      	ldrb	r2, [r3, #0]
    f11e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f126:	781b      	ldrb	r3, [r3, #0]
    f128:	4413      	add	r3, r2
    f12a:	b2da      	uxtb	r2, r3
    f12c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f134:	701a      	strb	r2, [r3, #0]
    f136:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f13e:	781a      	ldrb	r2, [r3, #0]
    f140:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f148:	781b      	ldrb	r3, [r3, #0]
    f14a:	4413      	add	r3, r2
    f14c:	b2da      	uxtb	r2, r3
    f14e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f156:	701a      	strb	r2, [r3, #0]
    f158:	f24c 3319 	movw	r3, #49945	; 0xc319
    f15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f160:	781b      	ldrb	r3, [r3, #0]
    f162:	3301      	adds	r3, #1
    f164:	b2da      	uxtb	r2, r3
    f166:	f24c 3319 	movw	r3, #49945	; 0xc319
    f16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f16e:	701a      	strb	r2, [r3, #0]
    f170:	f24c 3319 	movw	r3, #49945	; 0xc319
    f174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f178:	781b      	ldrb	r3, [r3, #0]
    f17a:	2bff      	cmp	r3, #255	; 0xff
    f17c:	d110      	bne.n	f1a0 <send_gps_pos+0x5e0>
    f17e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f186:	2200      	movs	r2, #0
    f188:	701a      	strb	r2, [r3, #0]
    f18a:	e009      	b.n	f1a0 <send_gps_pos+0x5e0>
    f18c:	2004c49d 	.word	0x2004c49d
    f190:	2004c49e 	.word	0x2004c49e
    f194:	2004c49f 	.word	0x2004c49f
    f198:	2004c4a1 	.word	0x2004c4a1
    f19c:	2004c4a2 	.word	0x2004c4a2
    f1a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a8:	781b      	ldrb	r3, [r3, #0]
    f1aa:	461a      	mov	r2, r3
    f1ac:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b4:	78d9      	ldrb	r1, [r3, #3]
    f1b6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1be:	5499      	strb	r1, [r3, r2]
    f1c0:	4bd3      	ldr	r3, [pc, #844]	; (f510 <send_gps_pos+0x950>)
    f1c2:	781a      	ldrb	r2, [r3, #0]
    f1c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1cc:	781b      	ldrb	r3, [r3, #0]
    f1ce:	4413      	add	r3, r2
    f1d0:	b2da      	uxtb	r2, r3
    f1d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1da:	701a      	strb	r2, [r3, #0]
    f1dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e4:	781a      	ldrb	r2, [r3, #0]
    f1e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ee:	781b      	ldrb	r3, [r3, #0]
    f1f0:	4413      	add	r3, r2
    f1f2:	b2da      	uxtb	r2, r3
    f1f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1fc:	701a      	strb	r2, [r3, #0]
    f1fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    f202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f206:	781b      	ldrb	r3, [r3, #0]
    f208:	3301      	adds	r3, #1
    f20a:	b2da      	uxtb	r2, r3
    f20c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f214:	701a      	strb	r2, [r3, #0]
    f216:	f24c 3319 	movw	r3, #49945	; 0xc319
    f21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f21e:	781b      	ldrb	r3, [r3, #0]
    f220:	2bff      	cmp	r3, #255	; 0xff
    f222:	d105      	bne.n	f230 <send_gps_pos+0x670>
    f224:	f24c 3319 	movw	r3, #49945	; 0xc319
    f228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f22c:	2200      	movs	r2, #0
    f22e:	701a      	strb	r2, [r3, #0]
    f230:	f24c 3319 	movw	r3, #49945	; 0xc319
    f234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f238:	781b      	ldrb	r3, [r3, #0]
    f23a:	461a      	mov	r2, r3
    f23c:	f24c 4398 	movw	r3, #50328	; 0xc498
    f240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f244:	7819      	ldrb	r1, [r3, #0]
    f246:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f24e:	5499      	strb	r1, [r3, r2]
    f250:	f24c 4398 	movw	r3, #50328	; 0xc498
    f254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f258:	781a      	ldrb	r2, [r3, #0]
    f25a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f262:	781b      	ldrb	r3, [r3, #0]
    f264:	4413      	add	r3, r2
    f266:	b2da      	uxtb	r2, r3
    f268:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f270:	701a      	strb	r2, [r3, #0]
    f272:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f27a:	781a      	ldrb	r2, [r3, #0]
    f27c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f284:	781b      	ldrb	r3, [r3, #0]
    f286:	4413      	add	r3, r2
    f288:	b2da      	uxtb	r2, r3
    f28a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f292:	701a      	strb	r2, [r3, #0]
    f294:	f24c 3319 	movw	r3, #49945	; 0xc319
    f298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f29c:	781b      	ldrb	r3, [r3, #0]
    f29e:	3301      	adds	r3, #1
    f2a0:	b2da      	uxtb	r2, r3
    f2a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2aa:	701a      	strb	r2, [r3, #0]
    f2ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b4:	781b      	ldrb	r3, [r3, #0]
    f2b6:	2bff      	cmp	r3, #255	; 0xff
    f2b8:	d105      	bne.n	f2c6 <send_gps_pos+0x706>
    f2ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c2:	2200      	movs	r2, #0
    f2c4:	701a      	strb	r2, [r3, #0]
    f2c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ce:	781b      	ldrb	r3, [r3, #0]
    f2d0:	461a      	mov	r2, r3
    f2d2:	f24c 4398 	movw	r3, #50328	; 0xc498
    f2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2da:	7859      	ldrb	r1, [r3, #1]
    f2dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e4:	5499      	strb	r1, [r3, r2]
    f2e6:	4b8b      	ldr	r3, [pc, #556]	; (f514 <send_gps_pos+0x954>)
    f2e8:	781a      	ldrb	r2, [r3, #0]
    f2ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f2:	781b      	ldrb	r3, [r3, #0]
    f2f4:	4413      	add	r3, r2
    f2f6:	b2da      	uxtb	r2, r3
    f2f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f300:	701a      	strb	r2, [r3, #0]
    f302:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f30a:	781a      	ldrb	r2, [r3, #0]
    f30c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f314:	781b      	ldrb	r3, [r3, #0]
    f316:	4413      	add	r3, r2
    f318:	b2da      	uxtb	r2, r3
    f31a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f322:	701a      	strb	r2, [r3, #0]
    f324:	f24c 3319 	movw	r3, #49945	; 0xc319
    f328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f32c:	781b      	ldrb	r3, [r3, #0]
    f32e:	3301      	adds	r3, #1
    f330:	b2da      	uxtb	r2, r3
    f332:	f24c 3319 	movw	r3, #49945	; 0xc319
    f336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f33a:	701a      	strb	r2, [r3, #0]
    f33c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f344:	781b      	ldrb	r3, [r3, #0]
    f346:	2bff      	cmp	r3, #255	; 0xff
    f348:	d105      	bne.n	f356 <send_gps_pos+0x796>
    f34a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f352:	2200      	movs	r2, #0
    f354:	701a      	strb	r2, [r3, #0]
    f356:	f24c 3319 	movw	r3, #49945	; 0xc319
    f35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35e:	781b      	ldrb	r3, [r3, #0]
    f360:	461a      	mov	r2, r3
    f362:	f24c 4398 	movw	r3, #50328	; 0xc498
    f366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36a:	7899      	ldrb	r1, [r3, #2]
    f36c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f374:	5499      	strb	r1, [r3, r2]
    f376:	4b68      	ldr	r3, [pc, #416]	; (f518 <send_gps_pos+0x958>)
    f378:	781a      	ldrb	r2, [r3, #0]
    f37a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f382:	781b      	ldrb	r3, [r3, #0]
    f384:	4413      	add	r3, r2
    f386:	b2da      	uxtb	r2, r3
    f388:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f390:	701a      	strb	r2, [r3, #0]
    f392:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f39a:	781a      	ldrb	r2, [r3, #0]
    f39c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a4:	781b      	ldrb	r3, [r3, #0]
    f3a6:	4413      	add	r3, r2
    f3a8:	b2da      	uxtb	r2, r3
    f3aa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b2:	701a      	strb	r2, [r3, #0]
    f3b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3bc:	781b      	ldrb	r3, [r3, #0]
    f3be:	3301      	adds	r3, #1
    f3c0:	b2da      	uxtb	r2, r3
    f3c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ca:	701a      	strb	r2, [r3, #0]
    f3cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d4:	781b      	ldrb	r3, [r3, #0]
    f3d6:	2bff      	cmp	r3, #255	; 0xff
    f3d8:	d105      	bne.n	f3e6 <send_gps_pos+0x826>
    f3da:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e2:	2200      	movs	r2, #0
    f3e4:	701a      	strb	r2, [r3, #0]
    f3e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ee:	781b      	ldrb	r3, [r3, #0]
    f3f0:	461a      	mov	r2, r3
    f3f2:	f24c 4398 	movw	r3, #50328	; 0xc498
    f3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3fa:	78d9      	ldrb	r1, [r3, #3]
    f3fc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f404:	5499      	strb	r1, [r3, r2]
    f406:	4b45      	ldr	r3, [pc, #276]	; (f51c <send_gps_pos+0x95c>)
    f408:	781a      	ldrb	r2, [r3, #0]
    f40a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f412:	781b      	ldrb	r3, [r3, #0]
    f414:	4413      	add	r3, r2
    f416:	b2da      	uxtb	r2, r3
    f418:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f420:	701a      	strb	r2, [r3, #0]
    f422:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42a:	781a      	ldrb	r2, [r3, #0]
    f42c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f434:	781b      	ldrb	r3, [r3, #0]
    f436:	4413      	add	r3, r2
    f438:	b2da      	uxtb	r2, r3
    f43a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f442:	701a      	strb	r2, [r3, #0]
    f444:	f24c 3319 	movw	r3, #49945	; 0xc319
    f448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44c:	781b      	ldrb	r3, [r3, #0]
    f44e:	3301      	adds	r3, #1
    f450:	b2da      	uxtb	r2, r3
    f452:	f24c 3319 	movw	r3, #49945	; 0xc319
    f456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45a:	701a      	strb	r2, [r3, #0]
    f45c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f464:	781b      	ldrb	r3, [r3, #0]
    f466:	2bff      	cmp	r3, #255	; 0xff
    f468:	d105      	bne.n	f476 <send_gps_pos+0x8b6>
    f46a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f472:	2200      	movs	r2, #0
    f474:	701a      	strb	r2, [r3, #0]
    f476:	f24c 3319 	movw	r3, #49945	; 0xc319
    f47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47e:	781b      	ldrb	r3, [r3, #0]
    f480:	461a      	mov	r2, r3
    f482:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48a:	7819      	ldrb	r1, [r3, #0]
    f48c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f494:	5499      	strb	r1, [r3, r2]
    f496:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f49e:	781a      	ldrb	r2, [r3, #0]
    f4a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a8:	781b      	ldrb	r3, [r3, #0]
    f4aa:	4413      	add	r3, r2
    f4ac:	b2da      	uxtb	r2, r3
    f4ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b6:	701a      	strb	r2, [r3, #0]
    f4b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c0:	781a      	ldrb	r2, [r3, #0]
    f4c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ca:	781b      	ldrb	r3, [r3, #0]
    f4cc:	4413      	add	r3, r2
    f4ce:	b2da      	uxtb	r2, r3
    f4d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d8:	701a      	strb	r2, [r3, #0]
    f4da:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e2:	781b      	ldrb	r3, [r3, #0]
    f4e4:	3301      	adds	r3, #1
    f4e6:	b2da      	uxtb	r2, r3
    f4e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f0:	701a      	strb	r2, [r3, #0]
    f4f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fa:	781b      	ldrb	r3, [r3, #0]
    f4fc:	2bff      	cmp	r3, #255	; 0xff
    f4fe:	d10f      	bne.n	f520 <send_gps_pos+0x960>
    f500:	f24c 3319 	movw	r3, #49945	; 0xc319
    f504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f508:	2200      	movs	r2, #0
    f50a:	701a      	strb	r2, [r3, #0]
    f50c:	e008      	b.n	f520 <send_gps_pos+0x960>
    f50e:	bf00      	nop
    f510:	2004c4a3 	.word	0x2004c4a3
    f514:	2004c499 	.word	0x2004c499
    f518:	2004c49a 	.word	0x2004c49a
    f51c:	2004c49b 	.word	0x2004c49b
    f520:	f24c 3319 	movw	r3, #49945	; 0xc319
    f524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f528:	781b      	ldrb	r3, [r3, #0]
    f52a:	461a      	mov	r2, r3
    f52c:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f534:	7859      	ldrb	r1, [r3, #1]
    f536:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53e:	5499      	strb	r1, [r3, r2]
    f540:	4bd1      	ldr	r3, [pc, #836]	; (f888 <send_gps_pos+0xcc8>)
    f542:	781a      	ldrb	r2, [r3, #0]
    f544:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54c:	781b      	ldrb	r3, [r3, #0]
    f54e:	4413      	add	r3, r2
    f550:	b2da      	uxtb	r2, r3
    f552:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f55a:	701a      	strb	r2, [r3, #0]
    f55c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f564:	781a      	ldrb	r2, [r3, #0]
    f566:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f56e:	781b      	ldrb	r3, [r3, #0]
    f570:	4413      	add	r3, r2
    f572:	b2da      	uxtb	r2, r3
    f574:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f57c:	701a      	strb	r2, [r3, #0]
    f57e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f586:	781b      	ldrb	r3, [r3, #0]
    f588:	3301      	adds	r3, #1
    f58a:	b2da      	uxtb	r2, r3
    f58c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f594:	701a      	strb	r2, [r3, #0]
    f596:	f24c 3319 	movw	r3, #49945	; 0xc319
    f59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59e:	781b      	ldrb	r3, [r3, #0]
    f5a0:	2bff      	cmp	r3, #255	; 0xff
    f5a2:	d105      	bne.n	f5b0 <send_gps_pos+0x9f0>
    f5a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ac:	2200      	movs	r2, #0
    f5ae:	701a      	strb	r2, [r3, #0]
    f5b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b8:	781b      	ldrb	r3, [r3, #0]
    f5ba:	461a      	mov	r2, r3
    f5bc:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c4:	7899      	ldrb	r1, [r3, #2]
    f5c6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ce:	5499      	strb	r1, [r3, r2]
    f5d0:	4bae      	ldr	r3, [pc, #696]	; (f88c <send_gps_pos+0xccc>)
    f5d2:	781a      	ldrb	r2, [r3, #0]
    f5d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5dc:	781b      	ldrb	r3, [r3, #0]
    f5de:	4413      	add	r3, r2
    f5e0:	b2da      	uxtb	r2, r3
    f5e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ea:	701a      	strb	r2, [r3, #0]
    f5ec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f4:	781a      	ldrb	r2, [r3, #0]
    f5f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5fe:	781b      	ldrb	r3, [r3, #0]
    f600:	4413      	add	r3, r2
    f602:	b2da      	uxtb	r2, r3
    f604:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f60c:	701a      	strb	r2, [r3, #0]
    f60e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f616:	781b      	ldrb	r3, [r3, #0]
    f618:	3301      	adds	r3, #1
    f61a:	b2da      	uxtb	r2, r3
    f61c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f624:	701a      	strb	r2, [r3, #0]
    f626:	f24c 3319 	movw	r3, #49945	; 0xc319
    f62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f62e:	781b      	ldrb	r3, [r3, #0]
    f630:	2bff      	cmp	r3, #255	; 0xff
    f632:	d105      	bne.n	f640 <send_gps_pos+0xa80>
    f634:	f24c 3319 	movw	r3, #49945	; 0xc319
    f638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f63c:	2200      	movs	r2, #0
    f63e:	701a      	strb	r2, [r3, #0]
    f640:	f24c 3319 	movw	r3, #49945	; 0xc319
    f644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f648:	781b      	ldrb	r3, [r3, #0]
    f64a:	461a      	mov	r2, r3
    f64c:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f654:	78d9      	ldrb	r1, [r3, #3]
    f656:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65e:	5499      	strb	r1, [r3, r2]
    f660:	4b8b      	ldr	r3, [pc, #556]	; (f890 <send_gps_pos+0xcd0>)
    f662:	781a      	ldrb	r2, [r3, #0]
    f664:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f66c:	781b      	ldrb	r3, [r3, #0]
    f66e:	4413      	add	r3, r2
    f670:	b2da      	uxtb	r2, r3
    f672:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67a:	701a      	strb	r2, [r3, #0]
    f67c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f684:	781a      	ldrb	r2, [r3, #0]
    f686:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f68e:	781b      	ldrb	r3, [r3, #0]
    f690:	4413      	add	r3, r2
    f692:	b2da      	uxtb	r2, r3
    f694:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f69c:	701a      	strb	r2, [r3, #0]
    f69e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a6:	781b      	ldrb	r3, [r3, #0]
    f6a8:	3301      	adds	r3, #1
    f6aa:	b2da      	uxtb	r2, r3
    f6ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b4:	701a      	strb	r2, [r3, #0]
    f6b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6be:	781b      	ldrb	r3, [r3, #0]
    f6c0:	2bff      	cmp	r3, #255	; 0xff
    f6c2:	d105      	bne.n	f6d0 <send_gps_pos+0xb10>
    f6c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6cc:	2200      	movs	r2, #0
    f6ce:	701a      	strb	r2, [r3, #0]
    f6d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d8:	781b      	ldrb	r3, [r3, #0]
    f6da:	461a      	mov	r2, r3
    f6dc:	f24c 4390 	movw	r3, #50320	; 0xc490
    f6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e4:	7819      	ldrb	r1, [r3, #0]
    f6e6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ee:	5499      	strb	r1, [r3, r2]
    f6f0:	f24c 4390 	movw	r3, #50320	; 0xc490
    f6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f8:	781a      	ldrb	r2, [r3, #0]
    f6fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f702:	781b      	ldrb	r3, [r3, #0]
    f704:	4413      	add	r3, r2
    f706:	b2da      	uxtb	r2, r3
    f708:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f710:	701a      	strb	r2, [r3, #0]
    f712:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71a:	781a      	ldrb	r2, [r3, #0]
    f71c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f724:	781b      	ldrb	r3, [r3, #0]
    f726:	4413      	add	r3, r2
    f728:	b2da      	uxtb	r2, r3
    f72a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f732:	701a      	strb	r2, [r3, #0]
    f734:	f24c 3319 	movw	r3, #49945	; 0xc319
    f738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73c:	781b      	ldrb	r3, [r3, #0]
    f73e:	3301      	adds	r3, #1
    f740:	b2da      	uxtb	r2, r3
    f742:	f24c 3319 	movw	r3, #49945	; 0xc319
    f746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74a:	701a      	strb	r2, [r3, #0]
    f74c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f754:	781b      	ldrb	r3, [r3, #0]
    f756:	2bff      	cmp	r3, #255	; 0xff
    f758:	d105      	bne.n	f766 <send_gps_pos+0xba6>
    f75a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f762:	2200      	movs	r2, #0
    f764:	701a      	strb	r2, [r3, #0]
    f766:	f24c 3319 	movw	r3, #49945	; 0xc319
    f76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f76e:	781b      	ldrb	r3, [r3, #0]
    f770:	461a      	mov	r2, r3
    f772:	f24c 4390 	movw	r3, #50320	; 0xc490
    f776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77a:	7859      	ldrb	r1, [r3, #1]
    f77c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f784:	5499      	strb	r1, [r3, r2]
    f786:	4b43      	ldr	r3, [pc, #268]	; (f894 <send_gps_pos+0xcd4>)
    f788:	781a      	ldrb	r2, [r3, #0]
    f78a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f792:	781b      	ldrb	r3, [r3, #0]
    f794:	4413      	add	r3, r2
    f796:	b2da      	uxtb	r2, r3
    f798:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a0:	701a      	strb	r2, [r3, #0]
    f7a2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f7a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7aa:	781a      	ldrb	r2, [r3, #0]
    f7ac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b4:	781b      	ldrb	r3, [r3, #0]
    f7b6:	4413      	add	r3, r2
    f7b8:	b2da      	uxtb	r2, r3
    f7ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c2:	701a      	strb	r2, [r3, #0]
    f7c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7cc:	781b      	ldrb	r3, [r3, #0]
    f7ce:	3301      	adds	r3, #1
    f7d0:	b2da      	uxtb	r2, r3
    f7d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7da:	701a      	strb	r2, [r3, #0]
    f7dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e4:	781b      	ldrb	r3, [r3, #0]
    f7e6:	2bff      	cmp	r3, #255	; 0xff
    f7e8:	d105      	bne.n	f7f6 <send_gps_pos+0xc36>
    f7ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f2:	2200      	movs	r2, #0
    f7f4:	701a      	strb	r2, [r3, #0]
    f7f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fe:	781b      	ldrb	r3, [r3, #0]
    f800:	461a      	mov	r2, r3
    f802:	f24c 4390 	movw	r3, #50320	; 0xc490
    f806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f80a:	7899      	ldrb	r1, [r3, #2]
    f80c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f814:	5499      	strb	r1, [r3, r2]
    f816:	4b20      	ldr	r3, [pc, #128]	; (f898 <send_gps_pos+0xcd8>)
    f818:	781a      	ldrb	r2, [r3, #0]
    f81a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f822:	781b      	ldrb	r3, [r3, #0]
    f824:	4413      	add	r3, r2
    f826:	b2da      	uxtb	r2, r3
    f828:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f830:	701a      	strb	r2, [r3, #0]
    f832:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83a:	781a      	ldrb	r2, [r3, #0]
    f83c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f844:	781b      	ldrb	r3, [r3, #0]
    f846:	4413      	add	r3, r2
    f848:	b2da      	uxtb	r2, r3
    f84a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f852:	701a      	strb	r2, [r3, #0]
    f854:	f24c 3319 	movw	r3, #49945	; 0xc319
    f858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f85c:	781b      	ldrb	r3, [r3, #0]
    f85e:	3301      	adds	r3, #1
    f860:	b2da      	uxtb	r2, r3
    f862:	f24c 3319 	movw	r3, #49945	; 0xc319
    f866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86a:	701a      	strb	r2, [r3, #0]
    f86c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f874:	781b      	ldrb	r3, [r3, #0]
    f876:	2bff      	cmp	r3, #255	; 0xff
    f878:	d110      	bne.n	f89c <send_gps_pos+0xcdc>
    f87a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f882:	2200      	movs	r2, #0
    f884:	701a      	strb	r2, [r3, #0]
    f886:	e009      	b.n	f89c <send_gps_pos+0xcdc>
    f888:	2004c48d 	.word	0x2004c48d
    f88c:	2004c48e 	.word	0x2004c48e
    f890:	2004c48f 	.word	0x2004c48f
    f894:	2004c491 	.word	0x2004c491
    f898:	2004c492 	.word	0x2004c492
    f89c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a4:	781b      	ldrb	r3, [r3, #0]
    f8a6:	461a      	mov	r2, r3
    f8a8:	f24c 4390 	movw	r3, #50320	; 0xc490
    f8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b0:	78d9      	ldrb	r1, [r3, #3]
    f8b2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f8b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ba:	5499      	strb	r1, [r3, r2]
    f8bc:	4bd3      	ldr	r3, [pc, #844]	; (fc0c <send_gps_pos+0x104c>)
    f8be:	781a      	ldrb	r2, [r3, #0]
    f8c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c8:	781b      	ldrb	r3, [r3, #0]
    f8ca:	4413      	add	r3, r2
    f8cc:	b2da      	uxtb	r2, r3
    f8ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d6:	701a      	strb	r2, [r3, #0]
    f8d8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e0:	781a      	ldrb	r2, [r3, #0]
    f8e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f8e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ea:	781b      	ldrb	r3, [r3, #0]
    f8ec:	4413      	add	r3, r2
    f8ee:	b2da      	uxtb	r2, r3
    f8f0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f8:	701a      	strb	r2, [r3, #0]
    f8fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f902:	781b      	ldrb	r3, [r3, #0]
    f904:	3301      	adds	r3, #1
    f906:	b2da      	uxtb	r2, r3
    f908:	f24c 3319 	movw	r3, #49945	; 0xc319
    f90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f910:	701a      	strb	r2, [r3, #0]
    f912:	f24c 3319 	movw	r3, #49945	; 0xc319
    f916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91a:	781b      	ldrb	r3, [r3, #0]
    f91c:	2bff      	cmp	r3, #255	; 0xff
    f91e:	d105      	bne.n	f92c <send_gps_pos+0xd6c>
    f920:	f24c 3319 	movw	r3, #49945	; 0xc319
    f924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f928:	2200      	movs	r2, #0
    f92a:	701a      	strb	r2, [r3, #0]
    f92c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f934:	781b      	ldrb	r3, [r3, #0]
    f936:	461a      	mov	r2, r3
    f938:	f24c 4394 	movw	r3, #50324	; 0xc494
    f93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f940:	7819      	ldrb	r1, [r3, #0]
    f942:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f94a:	5499      	strb	r1, [r3, r2]
    f94c:	f24c 4394 	movw	r3, #50324	; 0xc494
    f950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f954:	781a      	ldrb	r2, [r3, #0]
    f956:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f95e:	781b      	ldrb	r3, [r3, #0]
    f960:	4413      	add	r3, r2
    f962:	b2da      	uxtb	r2, r3
    f964:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f96c:	701a      	strb	r2, [r3, #0]
    f96e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f976:	781a      	ldrb	r2, [r3, #0]
    f978:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f980:	781b      	ldrb	r3, [r3, #0]
    f982:	4413      	add	r3, r2
    f984:	b2da      	uxtb	r2, r3
    f986:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f98e:	701a      	strb	r2, [r3, #0]
    f990:	f24c 3319 	movw	r3, #49945	; 0xc319
    f994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f998:	781b      	ldrb	r3, [r3, #0]
    f99a:	3301      	adds	r3, #1
    f99c:	b2da      	uxtb	r2, r3
    f99e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a6:	701a      	strb	r2, [r3, #0]
    f9a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b0:	781b      	ldrb	r3, [r3, #0]
    f9b2:	2bff      	cmp	r3, #255	; 0xff
    f9b4:	d105      	bne.n	f9c2 <send_gps_pos+0xe02>
    f9b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9be:	2200      	movs	r2, #0
    f9c0:	701a      	strb	r2, [r3, #0]
    f9c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ca:	781b      	ldrb	r3, [r3, #0]
    f9cc:	461a      	mov	r2, r3
    f9ce:	f24c 4394 	movw	r3, #50324	; 0xc494
    f9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d6:	7859      	ldrb	r1, [r3, #1]
    f9d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e0:	5499      	strb	r1, [r3, r2]
    f9e2:	4b8b      	ldr	r3, [pc, #556]	; (fc10 <send_gps_pos+0x1050>)
    f9e4:	781a      	ldrb	r2, [r3, #0]
    f9e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ee:	781b      	ldrb	r3, [r3, #0]
    f9f0:	4413      	add	r3, r2
    f9f2:	b2da      	uxtb	r2, r3
    f9f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9fc:	701a      	strb	r2, [r3, #0]
    f9fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa06:	781a      	ldrb	r2, [r3, #0]
    fa08:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa10:	781b      	ldrb	r3, [r3, #0]
    fa12:	4413      	add	r3, r2
    fa14:	b2da      	uxtb	r2, r3
    fa16:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa1e:	701a      	strb	r2, [r3, #0]
    fa20:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa28:	781b      	ldrb	r3, [r3, #0]
    fa2a:	3301      	adds	r3, #1
    fa2c:	b2da      	uxtb	r2, r3
    fa2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa36:	701a      	strb	r2, [r3, #0]
    fa38:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa40:	781b      	ldrb	r3, [r3, #0]
    fa42:	2bff      	cmp	r3, #255	; 0xff
    fa44:	d105      	bne.n	fa52 <send_gps_pos+0xe92>
    fa46:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4e:	2200      	movs	r2, #0
    fa50:	701a      	strb	r2, [r3, #0]
    fa52:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa5a:	781b      	ldrb	r3, [r3, #0]
    fa5c:	461a      	mov	r2, r3
    fa5e:	f24c 4394 	movw	r3, #50324	; 0xc494
    fa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa66:	7899      	ldrb	r1, [r3, #2]
    fa68:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fa6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa70:	5499      	strb	r1, [r3, r2]
    fa72:	4b68      	ldr	r3, [pc, #416]	; (fc14 <send_gps_pos+0x1054>)
    fa74:	781a      	ldrb	r2, [r3, #0]
    fa76:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa7e:	781b      	ldrb	r3, [r3, #0]
    fa80:	4413      	add	r3, r2
    fa82:	b2da      	uxtb	r2, r3
    fa84:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa8c:	701a      	strb	r2, [r3, #0]
    fa8e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa96:	781a      	ldrb	r2, [r3, #0]
    fa98:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa0:	781b      	ldrb	r3, [r3, #0]
    faa2:	4413      	add	r3, r2
    faa4:	b2da      	uxtb	r2, r3
    faa6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    faaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faae:	701a      	strb	r2, [r3, #0]
    fab0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab8:	781b      	ldrb	r3, [r3, #0]
    faba:	3301      	adds	r3, #1
    fabc:	b2da      	uxtb	r2, r3
    fabe:	f24c 3319 	movw	r3, #49945	; 0xc319
    fac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac6:	701a      	strb	r2, [r3, #0]
    fac8:	f24c 3319 	movw	r3, #49945	; 0xc319
    facc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad0:	781b      	ldrb	r3, [r3, #0]
    fad2:	2bff      	cmp	r3, #255	; 0xff
    fad4:	d105      	bne.n	fae2 <send_gps_pos+0xf22>
    fad6:	f24c 3319 	movw	r3, #49945	; 0xc319
    fada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fade:	2200      	movs	r2, #0
    fae0:	701a      	strb	r2, [r3, #0]
    fae2:	f24c 3319 	movw	r3, #49945	; 0xc319
    fae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faea:	781b      	ldrb	r3, [r3, #0]
    faec:	461a      	mov	r2, r3
    faee:	f24c 4394 	movw	r3, #50324	; 0xc494
    faf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf6:	78d9      	ldrb	r1, [r3, #3]
    faf8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb00:	5499      	strb	r1, [r3, r2]
    fb02:	4b45      	ldr	r3, [pc, #276]	; (fc18 <send_gps_pos+0x1058>)
    fb04:	781a      	ldrb	r2, [r3, #0]
    fb06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb0e:	781b      	ldrb	r3, [r3, #0]
    fb10:	4413      	add	r3, r2
    fb12:	b2da      	uxtb	r2, r3
    fb14:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb1c:	701a      	strb	r2, [r3, #0]
    fb1e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb26:	781a      	ldrb	r2, [r3, #0]
    fb28:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb30:	781b      	ldrb	r3, [r3, #0]
    fb32:	4413      	add	r3, r2
    fb34:	b2da      	uxtb	r2, r3
    fb36:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb3e:	701a      	strb	r2, [r3, #0]
    fb40:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb48:	781b      	ldrb	r3, [r3, #0]
    fb4a:	3301      	adds	r3, #1
    fb4c:	b2da      	uxtb	r2, r3
    fb4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb56:	701a      	strb	r2, [r3, #0]
    fb58:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb60:	781b      	ldrb	r3, [r3, #0]
    fb62:	2bff      	cmp	r3, #255	; 0xff
    fb64:	d105      	bne.n	fb72 <send_gps_pos+0xfb2>
    fb66:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb6e:	2200      	movs	r2, #0
    fb70:	701a      	strb	r2, [r3, #0]
    fb72:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb7a:	781b      	ldrb	r3, [r3, #0]
    fb7c:	461a      	mov	r2, r3
    fb7e:	f24c 4388 	movw	r3, #50312	; 0xc488
    fb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb86:	7819      	ldrb	r1, [r3, #0]
    fb88:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb90:	5499      	strb	r1, [r3, r2]
    fb92:	f24c 4388 	movw	r3, #50312	; 0xc488
    fb96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb9a:	781a      	ldrb	r2, [r3, #0]
    fb9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba4:	781b      	ldrb	r3, [r3, #0]
    fba6:	4413      	add	r3, r2
    fba8:	b2da      	uxtb	r2, r3
    fbaa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fbae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb2:	701a      	strb	r2, [r3, #0]
    fbb4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fbb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbbc:	781a      	ldrb	r2, [r3, #0]
    fbbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc6:	781b      	ldrb	r3, [r3, #0]
    fbc8:	4413      	add	r3, r2
    fbca:	b2da      	uxtb	r2, r3
    fbcc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd4:	701a      	strb	r2, [r3, #0]
    fbd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbde:	781b      	ldrb	r3, [r3, #0]
    fbe0:	3301      	adds	r3, #1
    fbe2:	b2da      	uxtb	r2, r3
    fbe4:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbec:	701a      	strb	r2, [r3, #0]
    fbee:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf6:	781b      	ldrb	r3, [r3, #0]
    fbf8:	2bff      	cmp	r3, #255	; 0xff
    fbfa:	d10f      	bne.n	fc1c <send_gps_pos+0x105c>
    fbfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc04:	2200      	movs	r2, #0
    fc06:	701a      	strb	r2, [r3, #0]
    fc08:	e008      	b.n	fc1c <send_gps_pos+0x105c>
    fc0a:	bf00      	nop
    fc0c:	2004c493 	.word	0x2004c493
    fc10:	2004c495 	.word	0x2004c495
    fc14:	2004c496 	.word	0x2004c496
    fc18:	2004c497 	.word	0x2004c497
    fc1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc24:	781b      	ldrb	r3, [r3, #0]
    fc26:	461a      	mov	r2, r3
    fc28:	f24c 4388 	movw	r3, #50312	; 0xc488
    fc2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc30:	7859      	ldrb	r1, [r3, #1]
    fc32:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fc36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc3a:	5499      	strb	r1, [r3, r2]
    fc3c:	4bc0      	ldr	r3, [pc, #768]	; (ff40 <send_gps_pos+0x1380>)
    fc3e:	781a      	ldrb	r2, [r3, #0]
    fc40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc48:	781b      	ldrb	r3, [r3, #0]
    fc4a:	4413      	add	r3, r2
    fc4c:	b2da      	uxtb	r2, r3
    fc4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc56:	701a      	strb	r2, [r3, #0]
    fc58:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc60:	781a      	ldrb	r2, [r3, #0]
    fc62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc6a:	781b      	ldrb	r3, [r3, #0]
    fc6c:	4413      	add	r3, r2
    fc6e:	b2da      	uxtb	r2, r3
    fc70:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc78:	701a      	strb	r2, [r3, #0]
    fc7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc82:	781b      	ldrb	r3, [r3, #0]
    fc84:	3301      	adds	r3, #1
    fc86:	b2da      	uxtb	r2, r3
    fc88:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc90:	701a      	strb	r2, [r3, #0]
    fc92:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9a:	781b      	ldrb	r3, [r3, #0]
    fc9c:	2bff      	cmp	r3, #255	; 0xff
    fc9e:	d105      	bne.n	fcac <send_gps_pos+0x10ec>
    fca0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca8:	2200      	movs	r2, #0
    fcaa:	701a      	strb	r2, [r3, #0]
    fcac:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb4:	781b      	ldrb	r3, [r3, #0]
    fcb6:	461a      	mov	r2, r3
    fcb8:	f24c 4388 	movw	r3, #50312	; 0xc488
    fcbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc0:	7899      	ldrb	r1, [r3, #2]
    fcc2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fcc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcca:	5499      	strb	r1, [r3, r2]
    fccc:	4b9d      	ldr	r3, [pc, #628]	; (ff44 <send_gps_pos+0x1384>)
    fcce:	781a      	ldrb	r2, [r3, #0]
    fcd0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fcd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd8:	781b      	ldrb	r3, [r3, #0]
    fcda:	4413      	add	r3, r2
    fcdc:	b2da      	uxtb	r2, r3
    fcde:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce6:	701a      	strb	r2, [r3, #0]
    fce8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fcec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf0:	781a      	ldrb	r2, [r3, #0]
    fcf2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fcf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcfa:	781b      	ldrb	r3, [r3, #0]
    fcfc:	4413      	add	r3, r2
    fcfe:	b2da      	uxtb	r2, r3
    fd00:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd08:	701a      	strb	r2, [r3, #0]
    fd0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd12:	781b      	ldrb	r3, [r3, #0]
    fd14:	3301      	adds	r3, #1
    fd16:	b2da      	uxtb	r2, r3
    fd18:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd20:	701a      	strb	r2, [r3, #0]
    fd22:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd2a:	781b      	ldrb	r3, [r3, #0]
    fd2c:	2bff      	cmp	r3, #255	; 0xff
    fd2e:	d105      	bne.n	fd3c <send_gps_pos+0x117c>
    fd30:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd38:	2200      	movs	r2, #0
    fd3a:	701a      	strb	r2, [r3, #0]
    fd3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd44:	781b      	ldrb	r3, [r3, #0]
    fd46:	461a      	mov	r2, r3
    fd48:	f24c 4388 	movw	r3, #50312	; 0xc488
    fd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd50:	78d9      	ldrb	r1, [r3, #3]
    fd52:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd5a:	5499      	strb	r1, [r3, r2]
    fd5c:	4b7a      	ldr	r3, [pc, #488]	; (ff48 <send_gps_pos+0x1388>)
    fd5e:	781a      	ldrb	r2, [r3, #0]
    fd60:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd68:	781b      	ldrb	r3, [r3, #0]
    fd6a:	4413      	add	r3, r2
    fd6c:	b2da      	uxtb	r2, r3
    fd6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd76:	701a      	strb	r2, [r3, #0]
    fd78:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd80:	781a      	ldrb	r2, [r3, #0]
    fd82:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd8a:	781b      	ldrb	r3, [r3, #0]
    fd8c:	4413      	add	r3, r2
    fd8e:	b2da      	uxtb	r2, r3
    fd90:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd98:	701a      	strb	r2, [r3, #0]
    fd9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda2:	781b      	ldrb	r3, [r3, #0]
    fda4:	3301      	adds	r3, #1
    fda6:	b2da      	uxtb	r2, r3
    fda8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb0:	701a      	strb	r2, [r3, #0]
    fdb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdba:	781b      	ldrb	r3, [r3, #0]
    fdbc:	2bff      	cmp	r3, #255	; 0xff
    fdbe:	d105      	bne.n	fdcc <send_gps_pos+0x120c>
    fdc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc8:	2200      	movs	r2, #0
    fdca:	701a      	strb	r2, [r3, #0]
    fdcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd4:	781b      	ldrb	r3, [r3, #0]
    fdd6:	461a      	mov	r2, r3
    fdd8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde0:	7819      	ldrb	r1, [r3, #0]
    fde2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fde6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdea:	5499      	strb	r1, [r3, r2]
    fdec:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf4:	781b      	ldrb	r3, [r3, #0]
    fdf6:	3301      	adds	r3, #1
    fdf8:	b2da      	uxtb	r2, r3
    fdfa:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe02:	701a      	strb	r2, [r3, #0]
    fe04:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe0c:	781b      	ldrb	r3, [r3, #0]
    fe0e:	2bff      	cmp	r3, #255	; 0xff
    fe10:	d105      	bne.n	fe1e <send_gps_pos+0x125e>
    fe12:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe1a:	2200      	movs	r2, #0
    fe1c:	701a      	strb	r2, [r3, #0]
    fe1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe26:	781b      	ldrb	r3, [r3, #0]
    fe28:	461a      	mov	r2, r3
    fe2a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fe2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe32:	7819      	ldrb	r1, [r3, #0]
    fe34:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fe38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe3c:	5499      	strb	r1, [r3, r2]
    fe3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe46:	781b      	ldrb	r3, [r3, #0]
    fe48:	3301      	adds	r3, #1
    fe4a:	b2da      	uxtb	r2, r3
    fe4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe54:	701a      	strb	r2, [r3, #0]
    fe56:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe5e:	781b      	ldrb	r3, [r3, #0]
    fe60:	2bff      	cmp	r3, #255	; 0xff
    fe62:	d105      	bne.n	fe70 <send_gps_pos+0x12b0>
    fe64:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6c:	2200      	movs	r2, #0
    fe6e:	701a      	strb	r2, [r3, #0]
    fe70:	f242 0339 	movw	r3, #8249	; 0x2039
    fe74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe78:	781b      	ldrb	r3, [r3, #0]
    fe7a:	b2db      	uxtb	r3, r3
    fe7c:	f003 0310 	and.w	r3, r3, #16
    fe80:	2b00      	cmp	r3, #0
    fe82:	d15a      	bne.n	ff3a <send_gps_pos+0x137a>
    fe84:	f24c 331a 	movw	r3, #49946	; 0xc31a
    fe88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe8c:	781b      	ldrb	r3, [r3, #0]
    fe8e:	b2db      	uxtb	r3, r3
    fe90:	461a      	mov	r2, r3
    fe92:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fe96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe9a:	5c9a      	ldrb	r2, [r3, r2]
    fe9c:	f24c 431b 	movw	r3, #50203	; 0xc41b
    fea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea4:	701a      	strb	r2, [r3, #0]
    fea6:	f24c 431c 	movw	r3, #50204	; 0xc41c
    feaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feae:	2200      	movs	r2, #0
    feb0:	701a      	strb	r2, [r3, #0]
    feb2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    feb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feba:	781b      	ldrb	r3, [r3, #0]
    febc:	b2db      	uxtb	r3, r3
    febe:	3301      	adds	r3, #1
    fec0:	b2da      	uxtb	r2, r3
    fec2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    fec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feca:	701a      	strb	r2, [r3, #0]
    fecc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    fed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed4:	781b      	ldrb	r3, [r3, #0]
    fed6:	b2db      	uxtb	r3, r3
    fed8:	2bff      	cmp	r3, #255	; 0xff
    feda:	d105      	bne.n	fee8 <send_gps_pos+0x1328>
    fedc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    fee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee4:	2200      	movs	r2, #0
    fee6:	701a      	strb	r2, [r3, #0]
    fee8:	f242 0338 	movw	r3, #8248	; 0x2038
    feec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fef0:	f242 0238 	movw	r2, #8248	; 0x2038
    fef4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fef8:	7812      	ldrb	r2, [r2, #0]
    fefa:	b2d2      	uxtb	r2, r2
    fefc:	f042 0201 	orr.w	r2, r2, #1
    ff00:	b2d2      	uxtb	r2, r2
    ff02:	701a      	strb	r2, [r3, #0]
    ff04:	f242 0339 	movw	r3, #8249	; 0x2039
    ff08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff0c:	f242 0239 	movw	r2, #8249	; 0x2039
    ff10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff14:	7812      	ldrb	r2, [r2, #0]
    ff16:	b2d2      	uxtb	r2, r2
    ff18:	f042 0210 	orr.w	r2, r2, #16
    ff1c:	b2d2      	uxtb	r2, r2
    ff1e:	701a      	strb	r2, [r3, #0]
    ff20:	e00b      	b.n	ff3a <send_gps_pos+0x137a>
    ff22:	f24c 3318 	movw	r3, #49944	; 0xc318
    ff26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff2a:	781b      	ldrb	r3, [r3, #0]
    ff2c:	3301      	adds	r3, #1
    ff2e:	b2da      	uxtb	r2, r3
    ff30:	f24c 3318 	movw	r3, #49944	; 0xc318
    ff34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff38:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    ff3a:	f005 fbfd 	bl	15738 <estimator_update_state_gps>
  }
}
    ff3e:	bd80      	pop	{r7, pc}
    ff40:	2004c489 	.word	0x2004c489
    ff44:	2004c48a 	.word	0x2004c48a
    ff48:	2004c48b 	.word	0x2004c48b

0000ff4c <send_radIR>:

void send_radIR(void){
    ff4c:	b480      	push	{r7}
    ff4e:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    ff50:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
    ff54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff58:	781b      	ldrb	r3, [r3, #0]
    ff5a:	2b00      	cmp	r3, #0
    ff5c:	f000 85e8 	beq.w	10b30 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    ff60:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff68:	781a      	ldrb	r2, [r3, #0]
    ff6a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ff6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff72:	781b      	ldrb	r3, [r3, #0]
    ff74:	b2db      	uxtb	r3, r3
    ff76:	429a      	cmp	r2, r3
    ff78:	d313      	bcc.n	ffa2 <send_radIR+0x56>
    ff7a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ff7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff82:	781b      	ldrb	r3, [r3, #0]
    ff84:	b2db      	uxtb	r3, r3
    ff86:	461a      	mov	r2, r3
    ff88:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff90:	781b      	ldrb	r3, [r3, #0]
    ff92:	1ad3      	subs	r3, r2, r3
    ff94:	33ff      	adds	r3, #255	; 0xff
    ff96:	2b14      	cmp	r3, #20
    ff98:	bfd4      	ite	le
    ff9a:	2300      	movle	r3, #0
    ff9c:	2301      	movgt	r3, #1
    ff9e:	b2db      	uxtb	r3, r3
    ffa0:	e011      	b.n	ffc6 <send_radIR+0x7a>
    ffa2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ffa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffaa:	781b      	ldrb	r3, [r3, #0]
    ffac:	b2db      	uxtb	r3, r3
    ffae:	461a      	mov	r2, r3
    ffb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffb8:	781b      	ldrb	r3, [r3, #0]
    ffba:	1ad3      	subs	r3, r2, r3
    ffbc:	2b14      	cmp	r3, #20
    ffbe:	bfd4      	ite	le
    ffc0:	2300      	movle	r3, #0
    ffc2:	2301      	movgt	r3, #1
    ffc4:	b2db      	uxtb	r3, r3
    ffc6:	2b00      	cmp	r3, #0
    ffc8:	f000 85a6 	beq.w	10b18 <send_radIR+0xbcc>
    ffcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd4:	781b      	ldrb	r3, [r3, #0]
    ffd6:	461a      	mov	r2, r3
    ffd8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ffdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe0:	2105      	movs	r1, #5
    ffe2:	5499      	strb	r1, [r3, r2]
    ffe4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffec:	781b      	ldrb	r3, [r3, #0]
    ffee:	3301      	adds	r3, #1
    fff0:	b2da      	uxtb	r2, r3
    fff2:	f24c 3319 	movw	r3, #49945	; 0xc319
    fff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fffa:	701a      	strb	r2, [r3, #0]
    fffc:	f24c 3319 	movw	r3, #49945	; 0xc319
   10000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10004:	781b      	ldrb	r3, [r3, #0]
   10006:	2bff      	cmp	r3, #255	; 0xff
   10008:	d105      	bne.n	10016 <send_radIR+0xca>
   1000a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1000e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10012:	2200      	movs	r2, #0
   10014:	701a      	strb	r2, [r3, #0]
   10016:	f24c 3319 	movw	r3, #49945	; 0xc319
   1001a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1001e:	781b      	ldrb	r3, [r3, #0]
   10020:	461a      	mov	r2, r3
   10022:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10026:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1002a:	2105      	movs	r1, #5
   1002c:	5499      	strb	r1, [r3, r2]
   1002e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10036:	781b      	ldrb	r3, [r3, #0]
   10038:	3301      	adds	r3, #1
   1003a:	b2da      	uxtb	r2, r3
   1003c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10040:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10044:	701a      	strb	r2, [r3, #0]
   10046:	f24c 3319 	movw	r3, #49945	; 0xc319
   1004a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004e:	781b      	ldrb	r3, [r3, #0]
   10050:	2bff      	cmp	r3, #255	; 0xff
   10052:	d105      	bne.n	10060 <send_radIR+0x114>
   10054:	f24c 3319 	movw	r3, #49945	; 0xc319
   10058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1005c:	2200      	movs	r2, #0
   1005e:	701a      	strb	r2, [r3, #0]
   10060:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10068:	2205      	movs	r2, #5
   1006a:	701a      	strb	r2, [r3, #0]
   1006c:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10074:	2205      	movs	r2, #5
   10076:	701a      	strb	r2, [r3, #0]
   10078:	f24c 3319 	movw	r3, #49945	; 0xc319
   1007c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10080:	781b      	ldrb	r3, [r3, #0]
   10082:	461a      	mov	r2, r3
   10084:	f64c 1310 	movw	r3, #51472	; 0xc910
   10088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1008c:	7819      	ldrb	r1, [r3, #0]
   1008e:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10092:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10096:	5499      	strb	r1, [r3, r2]
   10098:	f64c 1310 	movw	r3, #51472	; 0xc910
   1009c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100a0:	781a      	ldrb	r2, [r3, #0]
   100a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
   100a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100aa:	781b      	ldrb	r3, [r3, #0]
   100ac:	4413      	add	r3, r2
   100ae:	b2da      	uxtb	r2, r3
   100b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   100b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b8:	701a      	strb	r2, [r3, #0]
   100ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
   100be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c2:	781a      	ldrb	r2, [r3, #0]
   100c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   100c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100cc:	781b      	ldrb	r3, [r3, #0]
   100ce:	4413      	add	r3, r2
   100d0:	b2da      	uxtb	r2, r3
   100d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
   100d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100da:	701a      	strb	r2, [r3, #0]
   100dc:	f24c 3319 	movw	r3, #49945	; 0xc319
   100e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e4:	781b      	ldrb	r3, [r3, #0]
   100e6:	3301      	adds	r3, #1
   100e8:	b2da      	uxtb	r2, r3
   100ea:	f24c 3319 	movw	r3, #49945	; 0xc319
   100ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f2:	701a      	strb	r2, [r3, #0]
   100f4:	f24c 3319 	movw	r3, #49945	; 0xc319
   100f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100fc:	781b      	ldrb	r3, [r3, #0]
   100fe:	2bff      	cmp	r3, #255	; 0xff
   10100:	d105      	bne.n	1010e <send_radIR+0x1c2>
   10102:	f24c 3319 	movw	r3, #49945	; 0xc319
   10106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1010a:	2200      	movs	r2, #0
   1010c:	701a      	strb	r2, [r3, #0]
   1010e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10112:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10116:	781b      	ldrb	r3, [r3, #0]
   10118:	461a      	mov	r2, r3
   1011a:	f64c 1310 	movw	r3, #51472	; 0xc910
   1011e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10122:	7859      	ldrb	r1, [r3, #1]
   10124:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1012c:	5499      	strb	r1, [r3, r2]
   1012e:	4bd2      	ldr	r3, [pc, #840]	; (10478 <send_radIR+0x52c>)
   10130:	781a      	ldrb	r2, [r3, #0]
   10132:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1013a:	781b      	ldrb	r3, [r3, #0]
   1013c:	4413      	add	r3, r2
   1013e:	b2da      	uxtb	r2, r3
   10140:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10144:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10148:	701a      	strb	r2, [r3, #0]
   1014a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1014e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10152:	781a      	ldrb	r2, [r3, #0]
   10154:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1015c:	781b      	ldrb	r3, [r3, #0]
   1015e:	4413      	add	r3, r2
   10160:	b2da      	uxtb	r2, r3
   10162:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1016a:	701a      	strb	r2, [r3, #0]
   1016c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10174:	781b      	ldrb	r3, [r3, #0]
   10176:	3301      	adds	r3, #1
   10178:	b2da      	uxtb	r2, r3
   1017a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1017e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10182:	701a      	strb	r2, [r3, #0]
   10184:	f24c 3319 	movw	r3, #49945	; 0xc319
   10188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018c:	781b      	ldrb	r3, [r3, #0]
   1018e:	2bff      	cmp	r3, #255	; 0xff
   10190:	d105      	bne.n	1019e <send_radIR+0x252>
   10192:	f24c 3319 	movw	r3, #49945	; 0xc319
   10196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019a:	2200      	movs	r2, #0
   1019c:	701a      	strb	r2, [r3, #0]
   1019e:	f24c 3319 	movw	r3, #49945	; 0xc319
   101a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a6:	781b      	ldrb	r3, [r3, #0]
   101a8:	461a      	mov	r2, r3
   101aa:	f64c 1310 	movw	r3, #51472	; 0xc910
   101ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b2:	7899      	ldrb	r1, [r3, #2]
   101b4:	f24c 331c 	movw	r3, #49948	; 0xc31c
   101b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101bc:	5499      	strb	r1, [r3, r2]
   101be:	4baf      	ldr	r3, [pc, #700]	; (1047c <send_radIR+0x530>)
   101c0:	781a      	ldrb	r2, [r3, #0]
   101c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
   101c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ca:	781b      	ldrb	r3, [r3, #0]
   101cc:	4413      	add	r3, r2
   101ce:	b2da      	uxtb	r2, r3
   101d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   101d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d8:	701a      	strb	r2, [r3, #0]
   101da:	f24c 431e 	movw	r3, #50206	; 0xc41e
   101de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e2:	781a      	ldrb	r2, [r3, #0]
   101e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   101e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ec:	781b      	ldrb	r3, [r3, #0]
   101ee:	4413      	add	r3, r2
   101f0:	b2da      	uxtb	r2, r3
   101f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
   101f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101fa:	701a      	strb	r2, [r3, #0]
   101fc:	f24c 3319 	movw	r3, #49945	; 0xc319
   10200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10204:	781b      	ldrb	r3, [r3, #0]
   10206:	3301      	adds	r3, #1
   10208:	b2da      	uxtb	r2, r3
   1020a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1020e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10212:	701a      	strb	r2, [r3, #0]
   10214:	f24c 3319 	movw	r3, #49945	; 0xc319
   10218:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1021c:	781b      	ldrb	r3, [r3, #0]
   1021e:	2bff      	cmp	r3, #255	; 0xff
   10220:	d105      	bne.n	1022e <send_radIR+0x2e2>
   10222:	f24c 3319 	movw	r3, #49945	; 0xc319
   10226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1022a:	2200      	movs	r2, #0
   1022c:	701a      	strb	r2, [r3, #0]
   1022e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10232:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10236:	781b      	ldrb	r3, [r3, #0]
   10238:	461a      	mov	r2, r3
   1023a:	f64c 1310 	movw	r3, #51472	; 0xc910
   1023e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10242:	78d9      	ldrb	r1, [r3, #3]
   10244:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024c:	5499      	strb	r1, [r3, r2]
   1024e:	4b8c      	ldr	r3, [pc, #560]	; (10480 <send_radIR+0x534>)
   10250:	781a      	ldrb	r2, [r3, #0]
   10252:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1025a:	781b      	ldrb	r3, [r3, #0]
   1025c:	4413      	add	r3, r2
   1025e:	b2da      	uxtb	r2, r3
   10260:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10268:	701a      	strb	r2, [r3, #0]
   1026a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1026e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10272:	781a      	ldrb	r2, [r3, #0]
   10274:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10278:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1027c:	781b      	ldrb	r3, [r3, #0]
   1027e:	4413      	add	r3, r2
   10280:	b2da      	uxtb	r2, r3
   10282:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10286:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1028a:	701a      	strb	r2, [r3, #0]
   1028c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10294:	781b      	ldrb	r3, [r3, #0]
   10296:	3301      	adds	r3, #1
   10298:	b2da      	uxtb	r2, r3
   1029a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1029e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a2:	701a      	strb	r2, [r3, #0]
   102a4:	f24c 3319 	movw	r3, #49945	; 0xc319
   102a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ac:	781b      	ldrb	r3, [r3, #0]
   102ae:	2bff      	cmp	r3, #255	; 0xff
   102b0:	d105      	bne.n	102be <send_radIR+0x372>
   102b2:	f24c 3319 	movw	r3, #49945	; 0xc319
   102b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ba:	2200      	movs	r2, #0
   102bc:	701a      	strb	r2, [r3, #0]
   102be:	f24c 3319 	movw	r3, #49945	; 0xc319
   102c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c6:	781b      	ldrb	r3, [r3, #0]
   102c8:	461a      	mov	r2, r3
   102ca:	f64c 1314 	movw	r3, #51476	; 0xc914
   102ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d2:	7819      	ldrb	r1, [r3, #0]
   102d4:	f24c 331c 	movw	r3, #49948	; 0xc31c
   102d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102dc:	5499      	strb	r1, [r3, r2]
   102de:	f64c 1314 	movw	r3, #51476	; 0xc914
   102e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e6:	781a      	ldrb	r2, [r3, #0]
   102e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f0:	781b      	ldrb	r3, [r3, #0]
   102f2:	4413      	add	r3, r2
   102f4:	b2da      	uxtb	r2, r3
   102f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102fe:	701a      	strb	r2, [r3, #0]
   10300:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10304:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10308:	781a      	ldrb	r2, [r3, #0]
   1030a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1030e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10312:	781b      	ldrb	r3, [r3, #0]
   10314:	4413      	add	r3, r2
   10316:	b2da      	uxtb	r2, r3
   10318:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1031c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10320:	701a      	strb	r2, [r3, #0]
   10322:	f24c 3319 	movw	r3, #49945	; 0xc319
   10326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1032a:	781b      	ldrb	r3, [r3, #0]
   1032c:	3301      	adds	r3, #1
   1032e:	b2da      	uxtb	r2, r3
   10330:	f24c 3319 	movw	r3, #49945	; 0xc319
   10334:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10338:	701a      	strb	r2, [r3, #0]
   1033a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1033e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10342:	781b      	ldrb	r3, [r3, #0]
   10344:	2bff      	cmp	r3, #255	; 0xff
   10346:	d105      	bne.n	10354 <send_radIR+0x408>
   10348:	f24c 3319 	movw	r3, #49945	; 0xc319
   1034c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10350:	2200      	movs	r2, #0
   10352:	701a      	strb	r2, [r3, #0]
   10354:	f24c 3319 	movw	r3, #49945	; 0xc319
   10358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1035c:	781b      	ldrb	r3, [r3, #0]
   1035e:	461a      	mov	r2, r3
   10360:	f64c 1314 	movw	r3, #51476	; 0xc914
   10364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10368:	7859      	ldrb	r1, [r3, #1]
   1036a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1036e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10372:	5499      	strb	r1, [r3, r2]
   10374:	4b43      	ldr	r3, [pc, #268]	; (10484 <send_radIR+0x538>)
   10376:	781a      	ldrb	r2, [r3, #0]
   10378:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1037c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10380:	781b      	ldrb	r3, [r3, #0]
   10382:	4413      	add	r3, r2
   10384:	b2da      	uxtb	r2, r3
   10386:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1038a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1038e:	701a      	strb	r2, [r3, #0]
   10390:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10398:	781a      	ldrb	r2, [r3, #0]
   1039a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1039e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a2:	781b      	ldrb	r3, [r3, #0]
   103a4:	4413      	add	r3, r2
   103a6:	b2da      	uxtb	r2, r3
   103a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   103ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b0:	701a      	strb	r2, [r3, #0]
   103b2:	f24c 3319 	movw	r3, #49945	; 0xc319
   103b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ba:	781b      	ldrb	r3, [r3, #0]
   103bc:	3301      	adds	r3, #1
   103be:	b2da      	uxtb	r2, r3
   103c0:	f24c 3319 	movw	r3, #49945	; 0xc319
   103c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c8:	701a      	strb	r2, [r3, #0]
   103ca:	f24c 3319 	movw	r3, #49945	; 0xc319
   103ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d2:	781b      	ldrb	r3, [r3, #0]
   103d4:	2bff      	cmp	r3, #255	; 0xff
   103d6:	d105      	bne.n	103e4 <send_radIR+0x498>
   103d8:	f24c 3319 	movw	r3, #49945	; 0xc319
   103dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e0:	2200      	movs	r2, #0
   103e2:	701a      	strb	r2, [r3, #0]
   103e4:	f24c 3319 	movw	r3, #49945	; 0xc319
   103e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ec:	781b      	ldrb	r3, [r3, #0]
   103ee:	461a      	mov	r2, r3
   103f0:	f64c 1314 	movw	r3, #51476	; 0xc914
   103f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f8:	7899      	ldrb	r1, [r3, #2]
   103fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
   103fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10402:	5499      	strb	r1, [r3, r2]
   10404:	4b20      	ldr	r3, [pc, #128]	; (10488 <send_radIR+0x53c>)
   10406:	781a      	ldrb	r2, [r3, #0]
   10408:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1040c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10410:	781b      	ldrb	r3, [r3, #0]
   10412:	4413      	add	r3, r2
   10414:	b2da      	uxtb	r2, r3
   10416:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1041a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1041e:	701a      	strb	r2, [r3, #0]
   10420:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10424:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10428:	781a      	ldrb	r2, [r3, #0]
   1042a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1042e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10432:	781b      	ldrb	r3, [r3, #0]
   10434:	4413      	add	r3, r2
   10436:	b2da      	uxtb	r2, r3
   10438:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1043c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10440:	701a      	strb	r2, [r3, #0]
   10442:	f24c 3319 	movw	r3, #49945	; 0xc319
   10446:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1044a:	781b      	ldrb	r3, [r3, #0]
   1044c:	3301      	adds	r3, #1
   1044e:	b2da      	uxtb	r2, r3
   10450:	f24c 3319 	movw	r3, #49945	; 0xc319
   10454:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10458:	701a      	strb	r2, [r3, #0]
   1045a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1045e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10462:	781b      	ldrb	r3, [r3, #0]
   10464:	2bff      	cmp	r3, #255	; 0xff
   10466:	d111      	bne.n	1048c <send_radIR+0x540>
   10468:	f24c 3319 	movw	r3, #49945	; 0xc319
   1046c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10470:	2200      	movs	r2, #0
   10472:	701a      	strb	r2, [r3, #0]
   10474:	e00a      	b.n	1048c <send_radIR+0x540>
   10476:	bf00      	nop
   10478:	2004c911 	.word	0x2004c911
   1047c:	2004c912 	.word	0x2004c912
   10480:	2004c913 	.word	0x2004c913
   10484:	2004c915 	.word	0x2004c915
   10488:	2004c916 	.word	0x2004c916
   1048c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10490:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	461a      	mov	r2, r3
   10498:	f64c 1314 	movw	r3, #51476	; 0xc914
   1049c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a0:	78d9      	ldrb	r1, [r3, #3]
   104a2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   104a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104aa:	5499      	strb	r1, [r3, r2]
   104ac:	4bd3      	ldr	r3, [pc, #844]	; (107fc <send_radIR+0x8b0>)
   104ae:	781a      	ldrb	r2, [r3, #0]
   104b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   104b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b8:	781b      	ldrb	r3, [r3, #0]
   104ba:	4413      	add	r3, r2
   104bc:	b2da      	uxtb	r2, r3
   104be:	f24c 431d 	movw	r3, #50205	; 0xc41d
   104c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c6:	701a      	strb	r2, [r3, #0]
   104c8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   104cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d0:	781a      	ldrb	r2, [r3, #0]
   104d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
   104d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104da:	781b      	ldrb	r3, [r3, #0]
   104dc:	4413      	add	r3, r2
   104de:	b2da      	uxtb	r2, r3
   104e0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   104e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e8:	701a      	strb	r2, [r3, #0]
   104ea:	f24c 3319 	movw	r3, #49945	; 0xc319
   104ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f2:	781b      	ldrb	r3, [r3, #0]
   104f4:	3301      	adds	r3, #1
   104f6:	b2da      	uxtb	r2, r3
   104f8:	f24c 3319 	movw	r3, #49945	; 0xc319
   104fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10500:	701a      	strb	r2, [r3, #0]
   10502:	f24c 3319 	movw	r3, #49945	; 0xc319
   10506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1050a:	781b      	ldrb	r3, [r3, #0]
   1050c:	2bff      	cmp	r3, #255	; 0xff
   1050e:	d105      	bne.n	1051c <send_radIR+0x5d0>
   10510:	f24c 3319 	movw	r3, #49945	; 0xc319
   10514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10518:	2200      	movs	r2, #0
   1051a:	701a      	strb	r2, [r3, #0]
   1051c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10524:	781b      	ldrb	r3, [r3, #0]
   10526:	461a      	mov	r2, r3
   10528:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1052c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10530:	7819      	ldrb	r1, [r3, #0]
   10532:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10536:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1053a:	5499      	strb	r1, [r3, r2]
   1053c:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10540:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10544:	781a      	ldrb	r2, [r3, #0]
   10546:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1054a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1054e:	781b      	ldrb	r3, [r3, #0]
   10550:	4413      	add	r3, r2
   10552:	b2da      	uxtb	r2, r3
   10554:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1055c:	701a      	strb	r2, [r3, #0]
   1055e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10566:	781a      	ldrb	r2, [r3, #0]
   10568:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1056c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10570:	781b      	ldrb	r3, [r3, #0]
   10572:	4413      	add	r3, r2
   10574:	b2da      	uxtb	r2, r3
   10576:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1057a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1057e:	701a      	strb	r2, [r3, #0]
   10580:	f24c 3319 	movw	r3, #49945	; 0xc319
   10584:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10588:	781b      	ldrb	r3, [r3, #0]
   1058a:	3301      	adds	r3, #1
   1058c:	b2da      	uxtb	r2, r3
   1058e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10596:	701a      	strb	r2, [r3, #0]
   10598:	f24c 3319 	movw	r3, #49945	; 0xc319
   1059c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a0:	781b      	ldrb	r3, [r3, #0]
   105a2:	2bff      	cmp	r3, #255	; 0xff
   105a4:	d105      	bne.n	105b2 <send_radIR+0x666>
   105a6:	f24c 3319 	movw	r3, #49945	; 0xc319
   105aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ae:	2200      	movs	r2, #0
   105b0:	701a      	strb	r2, [r3, #0]
   105b2:	f24c 3319 	movw	r3, #49945	; 0xc319
   105b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ba:	781b      	ldrb	r3, [r3, #0]
   105bc:	461a      	mov	r2, r3
   105be:	f64c 130c 	movw	r3, #51468	; 0xc90c
   105c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c6:	7859      	ldrb	r1, [r3, #1]
   105c8:	f24c 331c 	movw	r3, #49948	; 0xc31c
   105cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d0:	5499      	strb	r1, [r3, r2]
   105d2:	4b8b      	ldr	r3, [pc, #556]	; (10800 <send_radIR+0x8b4>)
   105d4:	781a      	ldrb	r2, [r3, #0]
   105d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   105da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105de:	781b      	ldrb	r3, [r3, #0]
   105e0:	4413      	add	r3, r2
   105e2:	b2da      	uxtb	r2, r3
   105e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   105e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ec:	701a      	strb	r2, [r3, #0]
   105ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
   105f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f6:	781a      	ldrb	r2, [r3, #0]
   105f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   105fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10600:	781b      	ldrb	r3, [r3, #0]
   10602:	4413      	add	r3, r2
   10604:	b2da      	uxtb	r2, r3
   10606:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1060a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1060e:	701a      	strb	r2, [r3, #0]
   10610:	f24c 3319 	movw	r3, #49945	; 0xc319
   10614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10618:	781b      	ldrb	r3, [r3, #0]
   1061a:	3301      	adds	r3, #1
   1061c:	b2da      	uxtb	r2, r3
   1061e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10626:	701a      	strb	r2, [r3, #0]
   10628:	f24c 3319 	movw	r3, #49945	; 0xc319
   1062c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10630:	781b      	ldrb	r3, [r3, #0]
   10632:	2bff      	cmp	r3, #255	; 0xff
   10634:	d105      	bne.n	10642 <send_radIR+0x6f6>
   10636:	f24c 3319 	movw	r3, #49945	; 0xc319
   1063a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063e:	2200      	movs	r2, #0
   10640:	701a      	strb	r2, [r3, #0]
   10642:	f24c 3319 	movw	r3, #49945	; 0xc319
   10646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1064a:	781b      	ldrb	r3, [r3, #0]
   1064c:	461a      	mov	r2, r3
   1064e:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10656:	7899      	ldrb	r1, [r3, #2]
   10658:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1065c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10660:	5499      	strb	r1, [r3, r2]
   10662:	4b68      	ldr	r3, [pc, #416]	; (10804 <send_radIR+0x8b8>)
   10664:	781a      	ldrb	r2, [r3, #0]
   10666:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1066a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1066e:	781b      	ldrb	r3, [r3, #0]
   10670:	4413      	add	r3, r2
   10672:	b2da      	uxtb	r2, r3
   10674:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10678:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1067c:	701a      	strb	r2, [r3, #0]
   1067e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10686:	781a      	ldrb	r2, [r3, #0]
   10688:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1068c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10690:	781b      	ldrb	r3, [r3, #0]
   10692:	4413      	add	r3, r2
   10694:	b2da      	uxtb	r2, r3
   10696:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1069a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1069e:	701a      	strb	r2, [r3, #0]
   106a0:	f24c 3319 	movw	r3, #49945	; 0xc319
   106a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a8:	781b      	ldrb	r3, [r3, #0]
   106aa:	3301      	adds	r3, #1
   106ac:	b2da      	uxtb	r2, r3
   106ae:	f24c 3319 	movw	r3, #49945	; 0xc319
   106b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b6:	701a      	strb	r2, [r3, #0]
   106b8:	f24c 3319 	movw	r3, #49945	; 0xc319
   106bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c0:	781b      	ldrb	r3, [r3, #0]
   106c2:	2bff      	cmp	r3, #255	; 0xff
   106c4:	d105      	bne.n	106d2 <send_radIR+0x786>
   106c6:	f24c 3319 	movw	r3, #49945	; 0xc319
   106ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ce:	2200      	movs	r2, #0
   106d0:	701a      	strb	r2, [r3, #0]
   106d2:	f24c 3319 	movw	r3, #49945	; 0xc319
   106d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106da:	781b      	ldrb	r3, [r3, #0]
   106dc:	461a      	mov	r2, r3
   106de:	f64c 130c 	movw	r3, #51468	; 0xc90c
   106e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e6:	78d9      	ldrb	r1, [r3, #3]
   106e8:	f24c 331c 	movw	r3, #49948	; 0xc31c
   106ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f0:	5499      	strb	r1, [r3, r2]
   106f2:	4b45      	ldr	r3, [pc, #276]	; (10808 <send_radIR+0x8bc>)
   106f4:	781a      	ldrb	r2, [r3, #0]
   106f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106fe:	781b      	ldrb	r3, [r3, #0]
   10700:	4413      	add	r3, r2
   10702:	b2da      	uxtb	r2, r3
   10704:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1070c:	701a      	strb	r2, [r3, #0]
   1070e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10716:	781a      	ldrb	r2, [r3, #0]
   10718:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1071c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10720:	781b      	ldrb	r3, [r3, #0]
   10722:	4413      	add	r3, r2
   10724:	b2da      	uxtb	r2, r3
   10726:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1072a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1072e:	701a      	strb	r2, [r3, #0]
   10730:	f24c 3319 	movw	r3, #49945	; 0xc319
   10734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10738:	781b      	ldrb	r3, [r3, #0]
   1073a:	3301      	adds	r3, #1
   1073c:	b2da      	uxtb	r2, r3
   1073e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10746:	701a      	strb	r2, [r3, #0]
   10748:	f24c 3319 	movw	r3, #49945	; 0xc319
   1074c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10750:	781b      	ldrb	r3, [r3, #0]
   10752:	2bff      	cmp	r3, #255	; 0xff
   10754:	d105      	bne.n	10762 <send_radIR+0x816>
   10756:	f24c 3319 	movw	r3, #49945	; 0xc319
   1075a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1075e:	2200      	movs	r2, #0
   10760:	701a      	strb	r2, [r3, #0]
   10762:	f24c 3319 	movw	r3, #49945	; 0xc319
   10766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1076a:	781b      	ldrb	r3, [r3, #0]
   1076c:	461a      	mov	r2, r3
   1076e:	f240 5342 	movw	r3, #1346	; 0x542
   10772:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10776:	7819      	ldrb	r1, [r3, #0]
   10778:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1077c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10780:	5499      	strb	r1, [r3, r2]
   10782:	f240 5342 	movw	r3, #1346	; 0x542
   10786:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1078a:	781a      	ldrb	r2, [r3, #0]
   1078c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10794:	781b      	ldrb	r3, [r3, #0]
   10796:	4413      	add	r3, r2
   10798:	b2da      	uxtb	r2, r3
   1079a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1079e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a2:	701a      	strb	r2, [r3, #0]
   107a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
   107a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ac:	781a      	ldrb	r2, [r3, #0]
   107ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
   107b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b6:	781b      	ldrb	r3, [r3, #0]
   107b8:	4413      	add	r3, r2
   107ba:	b2da      	uxtb	r2, r3
   107bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
   107c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c4:	701a      	strb	r2, [r3, #0]
   107c6:	f24c 3319 	movw	r3, #49945	; 0xc319
   107ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ce:	781b      	ldrb	r3, [r3, #0]
   107d0:	3301      	adds	r3, #1
   107d2:	b2da      	uxtb	r2, r3
   107d4:	f24c 3319 	movw	r3, #49945	; 0xc319
   107d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107dc:	701a      	strb	r2, [r3, #0]
   107de:	f24c 3319 	movw	r3, #49945	; 0xc319
   107e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e6:	781b      	ldrb	r3, [r3, #0]
   107e8:	2bff      	cmp	r3, #255	; 0xff
   107ea:	d10f      	bne.n	1080c <send_radIR+0x8c0>
   107ec:	f24c 3319 	movw	r3, #49945	; 0xc319
   107f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f4:	2200      	movs	r2, #0
   107f6:	701a      	strb	r2, [r3, #0]
   107f8:	e008      	b.n	1080c <send_radIR+0x8c0>
   107fa:	bf00      	nop
   107fc:	2004c917 	.word	0x2004c917
   10800:	2004c90d 	.word	0x2004c90d
   10804:	2004c90e 	.word	0x2004c90e
   10808:	2004c90f 	.word	0x2004c90f
   1080c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10814:	781b      	ldrb	r3, [r3, #0]
   10816:	461a      	mov	r2, r3
   10818:	f240 5342 	movw	r3, #1346	; 0x542
   1081c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10820:	7859      	ldrb	r1, [r3, #1]
   10822:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10826:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1082a:	5499      	strb	r1, [r3, r2]
   1082c:	4bc2      	ldr	r3, [pc, #776]	; (10b38 <send_radIR+0xbec>)
   1082e:	781a      	ldrb	r2, [r3, #0]
   10830:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10838:	781b      	ldrb	r3, [r3, #0]
   1083a:	4413      	add	r3, r2
   1083c:	b2da      	uxtb	r2, r3
   1083e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10846:	701a      	strb	r2, [r3, #0]
   10848:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1084c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10850:	781a      	ldrb	r2, [r3, #0]
   10852:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10856:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1085a:	781b      	ldrb	r3, [r3, #0]
   1085c:	4413      	add	r3, r2
   1085e:	b2da      	uxtb	r2, r3
   10860:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10868:	701a      	strb	r2, [r3, #0]
   1086a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1086e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10872:	781b      	ldrb	r3, [r3, #0]
   10874:	3301      	adds	r3, #1
   10876:	b2da      	uxtb	r2, r3
   10878:	f24c 3319 	movw	r3, #49945	; 0xc319
   1087c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10880:	701a      	strb	r2, [r3, #0]
   10882:	f24c 3319 	movw	r3, #49945	; 0xc319
   10886:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1088a:	781b      	ldrb	r3, [r3, #0]
   1088c:	2bff      	cmp	r3, #255	; 0xff
   1088e:	d105      	bne.n	1089c <send_radIR+0x950>
   10890:	f24c 3319 	movw	r3, #49945	; 0xc319
   10894:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10898:	2200      	movs	r2, #0
   1089a:	701a      	strb	r2, [r3, #0]
   1089c:	f24c 3319 	movw	r3, #49945	; 0xc319
   108a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a4:	781b      	ldrb	r3, [r3, #0]
   108a6:	461a      	mov	r2, r3
   108a8:	f240 5344 	movw	r3, #1348	; 0x544
   108ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108b0:	7819      	ldrb	r1, [r3, #0]
   108b2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   108b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ba:	5499      	strb	r1, [r3, r2]
   108bc:	f240 5344 	movw	r3, #1348	; 0x544
   108c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108c4:	781a      	ldrb	r2, [r3, #0]
   108c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   108ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ce:	781b      	ldrb	r3, [r3, #0]
   108d0:	4413      	add	r3, r2
   108d2:	b2da      	uxtb	r2, r3
   108d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   108d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108dc:	701a      	strb	r2, [r3, #0]
   108de:	f24c 431e 	movw	r3, #50206	; 0xc41e
   108e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e6:	781a      	ldrb	r2, [r3, #0]
   108e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   108ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f0:	781b      	ldrb	r3, [r3, #0]
   108f2:	4413      	add	r3, r2
   108f4:	b2da      	uxtb	r2, r3
   108f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   108fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108fe:	701a      	strb	r2, [r3, #0]
   10900:	f24c 3319 	movw	r3, #49945	; 0xc319
   10904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10908:	781b      	ldrb	r3, [r3, #0]
   1090a:	3301      	adds	r3, #1
   1090c:	b2da      	uxtb	r2, r3
   1090e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10916:	701a      	strb	r2, [r3, #0]
   10918:	f24c 3319 	movw	r3, #49945	; 0xc319
   1091c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10920:	781b      	ldrb	r3, [r3, #0]
   10922:	2bff      	cmp	r3, #255	; 0xff
   10924:	d105      	bne.n	10932 <send_radIR+0x9e6>
   10926:	f24c 3319 	movw	r3, #49945	; 0xc319
   1092a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1092e:	2200      	movs	r2, #0
   10930:	701a      	strb	r2, [r3, #0]
   10932:	f24c 3319 	movw	r3, #49945	; 0xc319
   10936:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1093a:	781b      	ldrb	r3, [r3, #0]
   1093c:	461a      	mov	r2, r3
   1093e:	f240 5344 	movw	r3, #1348	; 0x544
   10942:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10946:	7859      	ldrb	r1, [r3, #1]
   10948:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1094c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10950:	5499      	strb	r1, [r3, r2]
   10952:	4b7a      	ldr	r3, [pc, #488]	; (10b3c <send_radIR+0xbf0>)
   10954:	781a      	ldrb	r2, [r3, #0]
   10956:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1095a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1095e:	781b      	ldrb	r3, [r3, #0]
   10960:	4413      	add	r3, r2
   10962:	b2da      	uxtb	r2, r3
   10964:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10968:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1096c:	701a      	strb	r2, [r3, #0]
   1096e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10972:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10976:	781a      	ldrb	r2, [r3, #0]
   10978:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1097c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10980:	781b      	ldrb	r3, [r3, #0]
   10982:	4413      	add	r3, r2
   10984:	b2da      	uxtb	r2, r3
   10986:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1098a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1098e:	701a      	strb	r2, [r3, #0]
   10990:	f24c 3319 	movw	r3, #49945	; 0xc319
   10994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10998:	781b      	ldrb	r3, [r3, #0]
   1099a:	3301      	adds	r3, #1
   1099c:	b2da      	uxtb	r2, r3
   1099e:	f24c 3319 	movw	r3, #49945	; 0xc319
   109a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a6:	701a      	strb	r2, [r3, #0]
   109a8:	f24c 3319 	movw	r3, #49945	; 0xc319
   109ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b0:	781b      	ldrb	r3, [r3, #0]
   109b2:	2bff      	cmp	r3, #255	; 0xff
   109b4:	d105      	bne.n	109c2 <send_radIR+0xa76>
   109b6:	f24c 3319 	movw	r3, #49945	; 0xc319
   109ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109be:	2200      	movs	r2, #0
   109c0:	701a      	strb	r2, [r3, #0]
   109c2:	f24c 3319 	movw	r3, #49945	; 0xc319
   109c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ca:	781b      	ldrb	r3, [r3, #0]
   109cc:	461a      	mov	r2, r3
   109ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d6:	7819      	ldrb	r1, [r3, #0]
   109d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
   109dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e0:	5499      	strb	r1, [r3, r2]
   109e2:	f24c 3319 	movw	r3, #49945	; 0xc319
   109e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ea:	781b      	ldrb	r3, [r3, #0]
   109ec:	3301      	adds	r3, #1
   109ee:	b2da      	uxtb	r2, r3
   109f0:	f24c 3319 	movw	r3, #49945	; 0xc319
   109f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f8:	701a      	strb	r2, [r3, #0]
   109fa:	f24c 3319 	movw	r3, #49945	; 0xc319
   109fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a02:	781b      	ldrb	r3, [r3, #0]
   10a04:	2bff      	cmp	r3, #255	; 0xff
   10a06:	d105      	bne.n	10a14 <send_radIR+0xac8>
   10a08:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a10:	2200      	movs	r2, #0
   10a12:	701a      	strb	r2, [r3, #0]
   10a14:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a1c:	781b      	ldrb	r3, [r3, #0]
   10a1e:	461a      	mov	r2, r3
   10a20:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a28:	7819      	ldrb	r1, [r3, #0]
   10a2a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a32:	5499      	strb	r1, [r3, r2]
   10a34:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a3c:	781b      	ldrb	r3, [r3, #0]
   10a3e:	3301      	adds	r3, #1
   10a40:	b2da      	uxtb	r2, r3
   10a42:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a4a:	701a      	strb	r2, [r3, #0]
   10a4c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a54:	781b      	ldrb	r3, [r3, #0]
   10a56:	2bff      	cmp	r3, #255	; 0xff
   10a58:	d105      	bne.n	10a66 <send_radIR+0xb1a>
   10a5a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a62:	2200      	movs	r2, #0
   10a64:	701a      	strb	r2, [r3, #0]
   10a66:	f242 0339 	movw	r3, #8249	; 0x2039
   10a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a6e:	781b      	ldrb	r3, [r3, #0]
   10a70:	b2db      	uxtb	r3, r3
   10a72:	f003 0310 	and.w	r3, r3, #16
   10a76:	2b00      	cmp	r3, #0
   10a78:	d15a      	bne.n	10b30 <send_radIR+0xbe4>
   10a7a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a82:	781b      	ldrb	r3, [r3, #0]
   10a84:	b2db      	uxtb	r3, r3
   10a86:	461a      	mov	r2, r3
   10a88:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a90:	5c9a      	ldrb	r2, [r3, r2]
   10a92:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9a:	701a      	strb	r2, [r3, #0]
   10a9c:	f24c 431c 	movw	r3, #50204	; 0xc41c
   10aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa4:	2200      	movs	r2, #0
   10aa6:	701a      	strb	r2, [r3, #0]
   10aa8:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab0:	781b      	ldrb	r3, [r3, #0]
   10ab2:	b2db      	uxtb	r3, r3
   10ab4:	3301      	adds	r3, #1
   10ab6:	b2da      	uxtb	r2, r3
   10ab8:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac0:	701a      	strb	r2, [r3, #0]
   10ac2:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aca:	781b      	ldrb	r3, [r3, #0]
   10acc:	b2db      	uxtb	r3, r3
   10ace:	2bff      	cmp	r3, #255	; 0xff
   10ad0:	d105      	bne.n	10ade <send_radIR+0xb92>
   10ad2:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ada:	2200      	movs	r2, #0
   10adc:	701a      	strb	r2, [r3, #0]
   10ade:	f242 0338 	movw	r3, #8248	; 0x2038
   10ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ae6:	f242 0238 	movw	r2, #8248	; 0x2038
   10aea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10aee:	7812      	ldrb	r2, [r2, #0]
   10af0:	b2d2      	uxtb	r2, r2
   10af2:	f042 0201 	orr.w	r2, r2, #1
   10af6:	b2d2      	uxtb	r2, r2
   10af8:	701a      	strb	r2, [r3, #0]
   10afa:	f242 0339 	movw	r3, #8249	; 0x2039
   10afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b02:	f242 0239 	movw	r2, #8249	; 0x2039
   10b06:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b0a:	7812      	ldrb	r2, [r2, #0]
   10b0c:	b2d2      	uxtb	r2, r2
   10b0e:	f042 0210 	orr.w	r2, r2, #16
   10b12:	b2d2      	uxtb	r2, r2
   10b14:	701a      	strb	r2, [r3, #0]
   10b16:	e00b      	b.n	10b30 <send_radIR+0xbe4>
   10b18:	f24c 3318 	movw	r3, #49944	; 0xc318
   10b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b20:	781b      	ldrb	r3, [r3, #0]
   10b22:	3301      	adds	r3, #1
   10b24:	b2da      	uxtb	r2, r3
   10b26:	f24c 3318 	movw	r3, #49944	; 0xc318
   10b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b2e:	701a      	strb	r2, [r3, #0]
}
   10b30:	46bd      	mov	sp, r7
   10b32:	f85d 7b04 	ldr.w	r7, [sp], #4
   10b36:	4770      	bx	lr
   10b38:	20000543 	.word	0x20000543
   10b3c:	20000545 	.word	0x20000545

00010b40 <send_takeOff>:

void send_takeOff(void){
   10b40:	b580      	push	{r7, lr}
   10b42:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10b44:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   10b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b4c:	781b      	ldrb	r3, [r3, #0]
   10b4e:	2b00      	cmp	r3, #0
   10b50:	f000 8200 	beq.w	10f54 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10b54:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b5c:	881b      	ldrh	r3, [r3, #0]
   10b5e:	2b00      	cmp	r3, #0
   10b60:	f040 81f2 	bne.w	10f48 <send_takeOff+0x408>
   10b64:	f64c 1304 	movw	r3, #51460	; 0xc904
   10b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b6c:	681b      	ldr	r3, [r3, #0]
   10b6e:	4618      	mov	r0, r3
   10b70:	f04f 0100 	mov.w	r1, #0
   10b74:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10b78:	f007 fd86 	bl	18688 <__aeabi_fcmpgt>
   10b7c:	4603      	mov	r3, r0
   10b7e:	2b00      	cmp	r3, #0
   10b80:	f000 81e2 	beq.w	10f48 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10b84:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b8c:	2201      	movs	r2, #1
   10b8e:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10b90:	f24c 3310 	movw	r3, #49936	; 0xc310
   10b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b98:	2201      	movs	r2, #1
   10b9a:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10b9c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba4:	781a      	ldrb	r2, [r3, #0]
   10ba6:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bae:	781b      	ldrb	r3, [r3, #0]
   10bb0:	b2db      	uxtb	r3, r3
   10bb2:	429a      	cmp	r2, r3
   10bb4:	d313      	bcc.n	10bde <send_takeOff+0x9e>
   10bb6:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bbe:	781b      	ldrb	r3, [r3, #0]
   10bc0:	b2db      	uxtb	r3, r3
   10bc2:	461a      	mov	r2, r3
   10bc4:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bcc:	781b      	ldrb	r3, [r3, #0]
   10bce:	1ad3      	subs	r3, r2, r3
   10bd0:	33ff      	adds	r3, #255	; 0xff
   10bd2:	2b06      	cmp	r3, #6
   10bd4:	bfd4      	ite	le
   10bd6:	2300      	movle	r3, #0
   10bd8:	2301      	movgt	r3, #1
   10bda:	b2db      	uxtb	r3, r3
   10bdc:	e011      	b.n	10c02 <send_takeOff+0xc2>
   10bde:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10be6:	781b      	ldrb	r3, [r3, #0]
   10be8:	b2db      	uxtb	r3, r3
   10bea:	461a      	mov	r2, r3
   10bec:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf4:	781b      	ldrb	r3, [r3, #0]
   10bf6:	1ad3      	subs	r3, r2, r3
   10bf8:	2b06      	cmp	r3, #6
   10bfa:	bfd4      	ite	le
   10bfc:	2300      	movle	r3, #0
   10bfe:	2301      	movgt	r3, #1
   10c00:	b2db      	uxtb	r3, r3
   10c02:	2b00      	cmp	r3, #0
   10c04:	f000 8194 	beq.w	10f30 <send_takeOff+0x3f0>
   10c08:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c10:	781b      	ldrb	r3, [r3, #0]
   10c12:	461a      	mov	r2, r3
   10c14:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c1c:	2105      	movs	r1, #5
   10c1e:	5499      	strb	r1, [r3, r2]
   10c20:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c28:	781b      	ldrb	r3, [r3, #0]
   10c2a:	3301      	adds	r3, #1
   10c2c:	b2da      	uxtb	r2, r3
   10c2e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c36:	701a      	strb	r2, [r3, #0]
   10c38:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c40:	781b      	ldrb	r3, [r3, #0]
   10c42:	2bff      	cmp	r3, #255	; 0xff
   10c44:	d105      	bne.n	10c52 <send_takeOff+0x112>
   10c46:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c4e:	2200      	movs	r2, #0
   10c50:	701a      	strb	r2, [r3, #0]
   10c52:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c5a:	781b      	ldrb	r3, [r3, #0]
   10c5c:	461a      	mov	r2, r3
   10c5e:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c66:	2104      	movs	r1, #4
   10c68:	5499      	strb	r1, [r3, r2]
   10c6a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c72:	781b      	ldrb	r3, [r3, #0]
   10c74:	3301      	adds	r3, #1
   10c76:	b2da      	uxtb	r2, r3
   10c78:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c80:	701a      	strb	r2, [r3, #0]
   10c82:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c8a:	781b      	ldrb	r3, [r3, #0]
   10c8c:	2bff      	cmp	r3, #255	; 0xff
   10c8e:	d105      	bne.n	10c9c <send_takeOff+0x15c>
   10c90:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c98:	2200      	movs	r2, #0
   10c9a:	701a      	strb	r2, [r3, #0]
   10c9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca4:	2204      	movs	r2, #4
   10ca6:	701a      	strb	r2, [r3, #0]
   10ca8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb0:	2204      	movs	r2, #4
   10cb2:	701a      	strb	r2, [r3, #0]
   10cb4:	f24c 3319 	movw	r3, #49945	; 0xc319
   10cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cbc:	781b      	ldrb	r3, [r3, #0]
   10cbe:	461a      	mov	r2, r3
   10cc0:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc8:	7819      	ldrb	r1, [r3, #0]
   10cca:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd2:	5499      	strb	r1, [r3, r2]
   10cd4:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cdc:	781a      	ldrb	r2, [r3, #0]
   10cde:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce6:	781b      	ldrb	r3, [r3, #0]
   10ce8:	4413      	add	r3, r2
   10cea:	b2da      	uxtb	r2, r3
   10cec:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf4:	701a      	strb	r2, [r3, #0]
   10cf6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cfe:	781a      	ldrb	r2, [r3, #0]
   10d00:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d08:	781b      	ldrb	r3, [r3, #0]
   10d0a:	4413      	add	r3, r2
   10d0c:	b2da      	uxtb	r2, r3
   10d0e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d16:	701a      	strb	r2, [r3, #0]
   10d18:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d20:	781b      	ldrb	r3, [r3, #0]
   10d22:	3301      	adds	r3, #1
   10d24:	b2da      	uxtb	r2, r3
   10d26:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d2e:	701a      	strb	r2, [r3, #0]
   10d30:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d38:	781b      	ldrb	r3, [r3, #0]
   10d3a:	2bff      	cmp	r3, #255	; 0xff
   10d3c:	d105      	bne.n	10d4a <send_takeOff+0x20a>
   10d3e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d46:	2200      	movs	r2, #0
   10d48:	701a      	strb	r2, [r3, #0]
   10d4a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d52:	781b      	ldrb	r3, [r3, #0]
   10d54:	461a      	mov	r2, r3
   10d56:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d5e:	7859      	ldrb	r1, [r3, #1]
   10d60:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d68:	5499      	strb	r1, [r3, r2]
   10d6a:	4b7b      	ldr	r3, [pc, #492]	; (10f58 <send_takeOff+0x418>)
   10d6c:	781a      	ldrb	r2, [r3, #0]
   10d6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d76:	781b      	ldrb	r3, [r3, #0]
   10d78:	4413      	add	r3, r2
   10d7a:	b2da      	uxtb	r2, r3
   10d7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d84:	701a      	strb	r2, [r3, #0]
   10d86:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d8e:	781a      	ldrb	r2, [r3, #0]
   10d90:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d98:	781b      	ldrb	r3, [r3, #0]
   10d9a:	4413      	add	r3, r2
   10d9c:	b2da      	uxtb	r2, r3
   10d9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da6:	701a      	strb	r2, [r3, #0]
   10da8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db0:	781b      	ldrb	r3, [r3, #0]
   10db2:	3301      	adds	r3, #1
   10db4:	b2da      	uxtb	r2, r3
   10db6:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dbe:	701a      	strb	r2, [r3, #0]
   10dc0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc8:	781b      	ldrb	r3, [r3, #0]
   10dca:	2bff      	cmp	r3, #255	; 0xff
   10dcc:	d105      	bne.n	10dda <send_takeOff+0x29a>
   10dce:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd6:	2200      	movs	r2, #0
   10dd8:	701a      	strb	r2, [r3, #0]
   10dda:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de2:	781b      	ldrb	r3, [r3, #0]
   10de4:	461a      	mov	r2, r3
   10de6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dee:	7819      	ldrb	r1, [r3, #0]
   10df0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df8:	5499      	strb	r1, [r3, r2]
   10dfa:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e02:	781b      	ldrb	r3, [r3, #0]
   10e04:	3301      	adds	r3, #1
   10e06:	b2da      	uxtb	r2, r3
   10e08:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e10:	701a      	strb	r2, [r3, #0]
   10e12:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e1a:	781b      	ldrb	r3, [r3, #0]
   10e1c:	2bff      	cmp	r3, #255	; 0xff
   10e1e:	d105      	bne.n	10e2c <send_takeOff+0x2ec>
   10e20:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e28:	2200      	movs	r2, #0
   10e2a:	701a      	strb	r2, [r3, #0]
   10e2c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e34:	781b      	ldrb	r3, [r3, #0]
   10e36:	461a      	mov	r2, r3
   10e38:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e40:	7819      	ldrb	r1, [r3, #0]
   10e42:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e4a:	5499      	strb	r1, [r3, r2]
   10e4c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e54:	781b      	ldrb	r3, [r3, #0]
   10e56:	3301      	adds	r3, #1
   10e58:	b2da      	uxtb	r2, r3
   10e5a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e62:	701a      	strb	r2, [r3, #0]
   10e64:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e6c:	781b      	ldrb	r3, [r3, #0]
   10e6e:	2bff      	cmp	r3, #255	; 0xff
   10e70:	d105      	bne.n	10e7e <send_takeOff+0x33e>
   10e72:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e7a:	2200      	movs	r2, #0
   10e7c:	701a      	strb	r2, [r3, #0]
   10e7e:	f242 0339 	movw	r3, #8249	; 0x2039
   10e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e86:	781b      	ldrb	r3, [r3, #0]
   10e88:	b2db      	uxtb	r3, r3
   10e8a:	f003 0310 	and.w	r3, r3, #16
   10e8e:	2b00      	cmp	r3, #0
   10e90:	d15a      	bne.n	10f48 <send_takeOff+0x408>
   10e92:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e9a:	781b      	ldrb	r3, [r3, #0]
   10e9c:	b2db      	uxtb	r3, r3
   10e9e:	461a      	mov	r2, r3
   10ea0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea8:	5c9a      	ldrb	r2, [r3, r2]
   10eaa:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb2:	701a      	strb	r2, [r3, #0]
   10eb4:	f24c 431c 	movw	r3, #50204	; 0xc41c
   10eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ebc:	2200      	movs	r2, #0
   10ebe:	701a      	strb	r2, [r3, #0]
   10ec0:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec8:	781b      	ldrb	r3, [r3, #0]
   10eca:	b2db      	uxtb	r3, r3
   10ecc:	3301      	adds	r3, #1
   10ece:	b2da      	uxtb	r2, r3
   10ed0:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ed8:	701a      	strb	r2, [r3, #0]
   10eda:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee2:	781b      	ldrb	r3, [r3, #0]
   10ee4:	b2db      	uxtb	r3, r3
   10ee6:	2bff      	cmp	r3, #255	; 0xff
   10ee8:	d105      	bne.n	10ef6 <send_takeOff+0x3b6>
   10eea:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef2:	2200      	movs	r2, #0
   10ef4:	701a      	strb	r2, [r3, #0]
   10ef6:	f242 0338 	movw	r3, #8248	; 0x2038
   10efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10efe:	f242 0238 	movw	r2, #8248	; 0x2038
   10f02:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f06:	7812      	ldrb	r2, [r2, #0]
   10f08:	b2d2      	uxtb	r2, r2
   10f0a:	f042 0201 	orr.w	r2, r2, #1
   10f0e:	b2d2      	uxtb	r2, r2
   10f10:	701a      	strb	r2, [r3, #0]
   10f12:	f242 0339 	movw	r3, #8249	; 0x2039
   10f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f1a:	f242 0239 	movw	r2, #8249	; 0x2039
   10f1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f22:	7812      	ldrb	r2, [r2, #0]
   10f24:	b2d2      	uxtb	r2, r2
   10f26:	f042 0210 	orr.w	r2, r2, #16
   10f2a:	b2d2      	uxtb	r2, r2
   10f2c:	701a      	strb	r2, [r3, #0]
   10f2e:	e00b      	b.n	10f48 <send_takeOff+0x408>
   10f30:	f24c 3318 	movw	r3, #49944	; 0xc318
   10f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f38:	781b      	ldrb	r3, [r3, #0]
   10f3a:	3301      	adds	r3, #1
   10f3c:	b2da      	uxtb	r2, r3
   10f3e:	f24c 3318 	movw	r3, #49944	; 0xc318
   10f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f46:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10f48:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   10f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f50:	2200      	movs	r2, #0
   10f52:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10f54:	bd80      	pop	{r7, pc}
   10f56:	bf00      	nop
   10f58:	2004c2fb 	.word	0x2004c2fb
   10f5c:	f3af 8000 	nop.w

00010f60 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10f60:	b480      	push	{r7}
   10f62:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10f64:	f242 0317 	movw	r3, #8215	; 0x2017
   10f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f6c:	f242 0217 	movw	r2, #8215	; 0x2017
   10f70:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f74:	7812      	ldrb	r2, [r2, #0]
   10f76:	b2d2      	uxtb	r2, r2
   10f78:	f042 0210 	orr.w	r2, r2, #16
   10f7c:	b2d2      	uxtb	r2, r2
   10f7e:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10f80:	f242 0331 	movw	r3, #8241	; 0x2031
   10f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f88:	2201      	movs	r2, #1
   10f8a:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10f8c:	f242 0333 	movw	r3, #8243	; 0x2033
   10f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f94:	2219      	movs	r2, #25
   10f96:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10f98:	f242 0311 	movw	r3, #8209	; 0x2011
   10f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa0:	f242 0211 	movw	r2, #8209	; 0x2011
   10fa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fa8:	7812      	ldrb	r2, [r2, #0]
   10faa:	b2d2      	uxtb	r2, r2
   10fac:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10fb0:	b2d2      	uxtb	r2, r2
   10fb2:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10fb4:	f242 0312 	movw	r3, #8210	; 0x2012
   10fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fbc:	f242 0212 	movw	r2, #8210	; 0x2012
   10fc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fc4:	7812      	ldrb	r2, [r2, #0]
   10fc6:	b2d2      	uxtb	r2, r2
   10fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10fcc:	b2d2      	uxtb	r2, r2
   10fce:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10fd0:	f242 0312 	movw	r3, #8210	; 0x2012
   10fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd8:	f242 0212 	movw	r2, #8210	; 0x2012
   10fdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fe0:	7812      	ldrb	r2, [r2, #0]
   10fe2:	b2d2      	uxtb	r2, r2
   10fe4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10fe8:	b2d2      	uxtb	r2, r2
   10fea:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10fec:	f242 033a 	movw	r3, #8250	; 0x203a
   10ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff4:	f242 023a 	movw	r2, #8250	; 0x203a
   10ff8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ffc:	7812      	ldrb	r2, [r2, #0]
   10ffe:	b2d2      	uxtb	r2, r2
   11000:	f042 0202 	orr.w	r2, r2, #2
   11004:	b2d2      	uxtb	r2, r2
   11006:	701a      	strb	r2, [r3, #0]
}
   11008:	46bd      	mov	sp, r7
   1100a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1100e:	4770      	bx	lr

00011010 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   11010:	b480      	push	{r7}
   11012:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   11014:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1101c:	781b      	ldrb	r3, [r3, #0]
   1101e:	2b00      	cmp	r3, #0
   11020:	d10e      	bne.n	11040 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11022:	f242 0312 	movw	r3, #8210	; 0x2012
   11026:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1102a:	f242 0212 	movw	r2, #8210	; 0x2012
   1102e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11032:	7812      	ldrb	r2, [r2, #0]
   11034:	b2d2      	uxtb	r2, r2
   11036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1103a:	b2d2      	uxtb	r2, r2
   1103c:	701a      	strb	r2, [r3, #0]
   1103e:	e047      	b.n	110d0 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   11040:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11044:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11048:	781b      	ldrb	r3, [r3, #0]
   1104a:	2b08      	cmp	r3, #8
   1104c:	d832      	bhi.n	110b4 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   1104e:	f24c 431b 	movw	r3, #50203	; 0xc41b
   11052:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11056:	781b      	ldrb	r3, [r3, #0]
   11058:	f003 0301 	and.w	r3, r3, #1
   1105c:	2b00      	cmp	r3, #0
   1105e:	d00e      	beq.n	1107e <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11060:	f242 0312 	movw	r3, #8210	; 0x2012
   11064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11068:	f242 0212 	movw	r2, #8210	; 0x2012
   1106c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11070:	7812      	ldrb	r2, [r2, #0]
   11072:	b2d2      	uxtb	r2, r2
   11074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11078:	b2d2      	uxtb	r2, r2
   1107a:	701a      	strb	r2, [r3, #0]
   1107c:	e00d      	b.n	1109a <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1107e:	f242 0312 	movw	r3, #8210	; 0x2012
   11082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11086:	f242 0212 	movw	r2, #8210	; 0x2012
   1108a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1108e:	7812      	ldrb	r2, [r2, #0]
   11090:	b2d2      	uxtb	r2, r2
   11092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11096:	b2d2      	uxtb	r2, r2
   11098:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   1109a:	f24c 431b 	movw	r3, #50203	; 0xc41b
   1109e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110a2:	781b      	ldrb	r3, [r3, #0]
   110a4:	085b      	lsrs	r3, r3, #1
   110a6:	b2da      	uxtb	r2, r3
   110a8:	f24c 431b 	movw	r3, #50203	; 0xc41b
   110ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110b0:	701a      	strb	r2, [r3, #0]
   110b2:	e00d      	b.n	110d0 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   110b4:	f242 0312 	movw	r3, #8210	; 0x2012
   110b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110bc:	f242 0212 	movw	r2, #8210	; 0x2012
   110c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110c4:	7812      	ldrb	r2, [r2, #0]
   110c6:	b2d2      	uxtb	r2, r2
   110c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110cc:	b2d2      	uxtb	r2, r2
   110ce:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   110d0:	f24c 431c 	movw	r3, #50204	; 0xc41c
   110d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110d8:	781b      	ldrb	r3, [r3, #0]
   110da:	3301      	adds	r3, #1
   110dc:	b2da      	uxtb	r2, r3
   110de:	f24c 431c 	movw	r3, #50204	; 0xc41c
   110e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110e6:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   110e8:	f24c 431c 	movw	r3, #50204	; 0xc41c
   110ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f0:	781b      	ldrb	r3, [r3, #0]
   110f2:	2b09      	cmp	r3, #9
   110f4:	d94d      	bls.n	11192 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   110f6:	f24c 3319 	movw	r3, #49945	; 0xc319
   110fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110fe:	781a      	ldrb	r2, [r3, #0]
   11100:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11108:	781b      	ldrb	r3, [r3, #0]
   1110a:	b2db      	uxtb	r3, r3
   1110c:	429a      	cmp	r2, r3
   1110e:	d10e      	bne.n	1112e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   11110:	f242 0339 	movw	r3, #8249	; 0x2039
   11114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11118:	f242 0239 	movw	r2, #8249	; 0x2039
   1111c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11120:	7812      	ldrb	r2, [r2, #0]
   11122:	b2d2      	uxtb	r2, r2
   11124:	f022 0210 	bic.w	r2, r2, #16
   11128:	b2d2      	uxtb	r2, r2
   1112a:	701a      	strb	r2, [r3, #0]
   1112c:	e031      	b.n	11192 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   1112e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11132:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11136:	781b      	ldrb	r3, [r3, #0]
   11138:	b2db      	uxtb	r3, r3
   1113a:	461a      	mov	r2, r3
   1113c:	f24c 331c 	movw	r3, #49948	; 0xc31c
   11140:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11144:	5c9a      	ldrb	r2, [r3, r2]
   11146:	f24c 431b 	movw	r3, #50203	; 0xc41b
   1114a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1114e:	701a      	strb	r2, [r3, #0]
   11150:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11154:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11158:	2200      	movs	r2, #0
   1115a:	701a      	strb	r2, [r3, #0]
   1115c:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11160:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11164:	781b      	ldrb	r3, [r3, #0]
   11166:	b2db      	uxtb	r3, r3
   11168:	3301      	adds	r3, #1
   1116a:	b2da      	uxtb	r2, r3
   1116c:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11174:	701a      	strb	r2, [r3, #0]
   11176:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1117a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1117e:	781b      	ldrb	r3, [r3, #0]
   11180:	b2db      	uxtb	r3, r3
   11182:	2bff      	cmp	r3, #255	; 0xff
   11184:	d105      	bne.n	11192 <__vector_5+0x182>
   11186:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1118a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1118e:	2200      	movs	r2, #0
   11190:	701a      	strb	r2, [r3, #0]
    }
  }
}
   11192:	46bd      	mov	sp, r7
   11194:	f85d 7b04 	ldr.w	r7, [sp], #4
   11198:	4770      	bx	lr
   1119a:	bf00      	nop

0001119c <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   1119c:	b480      	push	{r7}
   1119e:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   111a0:	f24c 434f 	movw	r3, #50255	; 0xc44f
   111a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a8:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   111aa:	f240 533e 	movw	r3, #1342	; 0x53e
   111ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111b2:	2200      	movs	r2, #0
   111b4:	701a      	strb	r2, [r3, #0]
}
   111b6:	46bd      	mov	sp, r7
   111b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   111bc:	4770      	bx	lr
   111be:	bf00      	nop

000111c0 <link_fbw_send>:

void link_fbw_send(void) {
   111c0:	b480      	push	{r7}
   111c2:	b083      	sub	sp, #12
   111c4:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   111c6:	f24c 4354 	movw	r3, #50260	; 0xc454
   111ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ce:	781b      	ldrb	r3, [r3, #0]
   111d0:	b2db      	uxtb	r3, r3
   111d2:	2b00      	cmp	r3, #0
   111d4:	d00c      	beq.n	111f0 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   111d6:	f24c 4355 	movw	r3, #50261	; 0xc455
   111da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111de:	781b      	ldrb	r3, [r3, #0]
   111e0:	3301      	adds	r3, #1
   111e2:	b2da      	uxtb	r2, r3
   111e4:	f24c 4355 	movw	r3, #50261	; 0xc455
   111e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ec:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   111ee:	e064      	b.n	112ba <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   111f0:	f242 030d 	movw	r3, #8205	; 0x200d
   111f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111f8:	2251      	movs	r2, #81	; 0x51
   111fa:	701a      	strb	r2, [r3, #0]
   111fc:	f242 030e 	movw	r3, #8206	; 0x200e
   11200:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11204:	781b      	ldrb	r3, [r3, #0]
   11206:	b2db      	uxtb	r3, r3
   11208:	b2db      	uxtb	r3, r3
   1120a:	b25b      	sxtb	r3, r3
   1120c:	2b00      	cmp	r3, #0
   1120e:	da05      	bge.n	1121c <link_fbw_send+0x5c>
   11210:	f242 030f 	movw	r3, #8207	; 0x200f
   11214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11218:	781b      	ldrb	r3, [r3, #0]
   1121a:	71fb      	strb	r3, [r7, #7]
   1121c:	f242 030d 	movw	r3, #8205	; 0x200d
   11220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11224:	f242 020d 	movw	r2, #8205	; 0x200d
   11228:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1122c:	7812      	ldrb	r2, [r2, #0]
   1122e:	b2d2      	uxtb	r2, r2
   11230:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11234:	b2d2      	uxtb	r2, r2
   11236:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11238:	f24c 4354 	movw	r3, #50260	; 0xc454
   1123c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11240:	2201      	movs	r2, #1
   11242:	701a      	strb	r2, [r3, #0]
   11244:	f242 0318 	movw	r3, #8216	; 0x2018
   11248:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1124c:	f242 0218 	movw	r2, #8216	; 0x2018
   11250:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11254:	7812      	ldrb	r2, [r2, #0]
   11256:	b2d2      	uxtb	r2, r2
   11258:	f022 0201 	bic.w	r2, r2, #1
   1125c:	b2d2      	uxtb	r2, r2
   1125e:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11260:	f24c 4351 	movw	r3, #50257	; 0xc451
   11264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11268:	2200      	movs	r2, #0
   1126a:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   1126c:	f24c 4352 	movw	r3, #50258	; 0xc452
   11270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11274:	2200      	movs	r2, #0
   11276:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11278:	f24c 4351 	movw	r3, #50257	; 0xc451
   1127c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11280:	781b      	ldrb	r3, [r3, #0]
   11282:	461a      	mov	r2, r3
   11284:	f24c 4338 	movw	r3, #50232	; 0xc438
   11288:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1128c:	4413      	add	r3, r2
   1128e:	781a      	ldrb	r2, [r3, #0]
   11290:	f24c 4353 	movw	r3, #50259	; 0xc453
   11294:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11298:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   1129a:	f242 030f 	movw	r3, #8207	; 0x200f
   1129e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112a2:	f24c 4253 	movw	r2, #50259	; 0xc453
   112a6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   112aa:	7812      	ldrb	r2, [r2, #0]
   112ac:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   112ae:	f24c 434e 	movw	r3, #50254	; 0xc44e
   112b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112b6:	2200      	movs	r2, #0
   112b8:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   112ba:	370c      	adds	r7, #12
   112bc:	46bd      	mov	sp, r7
   112be:	f85d 7b04 	ldr.w	r7, [sp], #4
   112c2:	4770      	bx	lr

000112c4 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   112c4:	b480      	push	{r7}
   112c6:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   112c8:	f242 032a 	movw	r3, #8234	; 0x202a
   112cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112d0:	f242 022c 	movw	r2, #8236	; 0x202c
   112d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112d8:	8812      	ldrh	r2, [r2, #0]
   112da:	b292      	uxth	r2, r2
   112dc:	32c8      	adds	r2, #200	; 0xc8
   112de:	b292      	uxth	r2, r2
   112e0:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   112e2:	f242 0336 	movw	r3, #8246	; 0x2036
   112e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ea:	f242 0236 	movw	r2, #8246	; 0x2036
   112ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112f2:	7812      	ldrb	r2, [r2, #0]
   112f4:	b2d2      	uxtb	r2, r2
   112f6:	f042 0210 	orr.w	r2, r2, #16
   112fa:	b2d2      	uxtb	r2, r2
   112fc:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   112fe:	f242 0337 	movw	r3, #8247	; 0x2037
   11302:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11306:	f242 0237 	movw	r2, #8247	; 0x2037
   1130a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1130e:	7812      	ldrb	r2, [r2, #0]
   11310:	b2d2      	uxtb	r2, r2
   11312:	f042 0210 	orr.w	r2, r2, #16
   11316:	b2d2      	uxtb	r2, r2
   11318:	701a      	strb	r2, [r3, #0]
}
   1131a:	46bd      	mov	sp, r7
   1131c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11320:	4770      	bx	lr
   11322:	bf00      	nop

00011324 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   11324:	b480      	push	{r7}
   11326:	b083      	sub	sp, #12
   11328:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   1132a:	f242 0337 	movw	r3, #8247	; 0x2037
   1132e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11332:	f242 0237 	movw	r2, #8247	; 0x2037
   11336:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1133a:	7812      	ldrb	r2, [r2, #0]
   1133c:	b2d2      	uxtb	r2, r2
   1133e:	f022 0210 	bic.w	r2, r2, #16
   11342:	b2d2      	uxtb	r2, r2
   11344:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   11346:	f24c 4351 	movw	r3, #50257	; 0xc451
   1134a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1134e:	781b      	ldrb	r3, [r3, #0]
   11350:	3301      	adds	r3, #1
   11352:	b2da      	uxtb	r2, r3
   11354:	f24c 4351 	movw	r3, #50257	; 0xc451
   11358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1135c:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   1135e:	f24c 4351 	movw	r3, #50257	; 0xc451
   11362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11366:	781b      	ldrb	r3, [r3, #0]
   11368:	2b17      	cmp	r3, #23
   1136a:	d162      	bne.n	11432 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   1136c:	f242 030f 	movw	r3, #8207	; 0x200f
   11370:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11374:	781b      	ldrb	r3, [r3, #0]
   11376:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11378:	f24c 4352 	movw	r3, #50258	; 0xc452
   1137c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11380:	781b      	ldrb	r3, [r3, #0]
   11382:	79fa      	ldrb	r2, [r7, #7]
   11384:	429a      	cmp	r2, r3
   11386:	d110      	bne.n	113aa <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11388:	f24c 434e 	movw	r3, #50254	; 0xc44e
   1138c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11390:	2201      	movs	r2, #1
   11392:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   11394:	f24c 4320 	movw	r3, #50208	; 0xc420
   11398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1139c:	7d1a      	ldrb	r2, [r3, #20]
   1139e:	f24c 4350 	movw	r3, #50256	; 0xc450
   113a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113a6:	701a      	strb	r2, [r3, #0]
   113a8:	e00c      	b.n	113c4 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   113aa:	f24c 434f 	movw	r3, #50255	; 0xc44f
   113ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b2:	781b      	ldrb	r3, [r3, #0]
   113b4:	b2db      	uxtb	r3, r3
   113b6:	3301      	adds	r3, #1
   113b8:	b2da      	uxtb	r2, r3
   113ba:	f24c 434f 	movw	r3, #50255	; 0xc44f
   113be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113c2:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   113c4:	f240 533e 	movw	r3, #1342	; 0x53e
   113c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113cc:	2201      	movs	r2, #1
   113ce:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   113d0:	f24c 4354 	movw	r3, #50260	; 0xc454
   113d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113d8:	2200      	movs	r2, #0
   113da:	701a      	strb	r2, [r3, #0]
   113dc:	f242 0318 	movw	r3, #8216	; 0x2018
   113e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e4:	f242 0218 	movw	r2, #8216	; 0x2018
   113e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113ec:	7812      	ldrb	r2, [r2, #0]
   113ee:	b2d2      	uxtb	r2, r2
   113f0:	f042 0201 	orr.w	r2, r2, #1
   113f4:	b2d2      	uxtb	r2, r2
   113f6:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   113f8:	f242 030d 	movw	r3, #8205	; 0x200d
   113fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11400:	f242 020d 	movw	r2, #8205	; 0x200d
   11404:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11408:	7812      	ldrb	r2, [r2, #0]
   1140a:	b2d2      	uxtb	r2, r2
   1140c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11410:	b2d2      	uxtb	r2, r2
   11412:	701a      	strb	r2, [r3, #0]
   11414:	f242 030d 	movw	r3, #8205	; 0x200d
   11418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1141c:	f242 020d 	movw	r2, #8205	; 0x200d
   11420:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11424:	7812      	ldrb	r2, [r2, #0]
   11426:	b2d2      	uxtb	r2, r2
   11428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1142c:	b2d2      	uxtb	r2, r2
   1142e:	701a      	strb	r2, [r3, #0]
    return;
   11430:	e051      	b.n	114d6 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   11432:	f24c 4351 	movw	r3, #50257	; 0xc451
   11436:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1143a:	781b      	ldrb	r3, [r3, #0]
   1143c:	2b15      	cmp	r3, #21
   1143e:	d820      	bhi.n	11482 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11440:	f24c 4351 	movw	r3, #50257	; 0xc451
   11444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11448:	781b      	ldrb	r3, [r3, #0]
   1144a:	461a      	mov	r2, r3
   1144c:	f24c 4338 	movw	r3, #50232	; 0xc438
   11450:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11454:	4413      	add	r3, r2
   11456:	781b      	ldrb	r3, [r3, #0]
   11458:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   1145a:	f242 030f 	movw	r3, #8207	; 0x200f
   1145e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11462:	79fa      	ldrb	r2, [r7, #7]
   11464:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   11466:	f24c 4353 	movw	r3, #50259	; 0xc453
   1146a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1146e:	781a      	ldrb	r2, [r3, #0]
   11470:	79fb      	ldrb	r3, [r7, #7]
   11472:	4053      	eors	r3, r2
   11474:	b2da      	uxtb	r2, r3
   11476:	f24c 4353 	movw	r3, #50259	; 0xc453
   1147a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1147e:	701a      	strb	r2, [r3, #0]
   11480:	e009      	b.n	11496 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   11482:	f242 030f 	movw	r3, #8207	; 0x200f
   11486:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1148a:	f24c 4253 	movw	r2, #50259	; 0xc453
   1148e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11492:	7812      	ldrb	r2, [r2, #0]
   11494:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   11496:	f242 030f 	movw	r3, #8207	; 0x200f
   1149a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1149e:	781b      	ldrb	r3, [r3, #0]
   114a0:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   114a2:	f24c 4351 	movw	r3, #50257	; 0xc451
   114a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114aa:	781b      	ldrb	r3, [r3, #0]
   114ac:	1e5a      	subs	r2, r3, #1
   114ae:	f24c 4320 	movw	r3, #50208	; 0xc420
   114b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114b6:	4413      	add	r3, r2
   114b8:	79fa      	ldrb	r2, [r7, #7]
   114ba:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   114bc:	f24c 4352 	movw	r3, #50258	; 0xc452
   114c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114c4:	781a      	ldrb	r2, [r3, #0]
   114c6:	79fb      	ldrb	r3, [r7, #7]
   114c8:	4053      	eors	r3, r2
   114ca:	b2da      	uxtb	r2, r3
   114cc:	f24c 4352 	movw	r3, #50258	; 0xc452
   114d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114d4:	701a      	strb	r2, [r3, #0]
}
   114d6:	370c      	adds	r7, #12
   114d8:	46bd      	mov	sp, r7
   114da:	f85d 7b04 	ldr.w	r7, [sp], #4
   114de:	4770      	bx	lr

000114e0 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   114e0:	b480      	push	{r7}
   114e2:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   114e4:	f242 0317 	movw	r3, #8215	; 0x2017
   114e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ec:	f242 0217 	movw	r2, #8215	; 0x2017
   114f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114f4:	7812      	ldrb	r2, [r2, #0]
   114f6:	b2d2      	uxtb	r2, r2
   114f8:	f042 0206 	orr.w	r2, r2, #6
   114fc:	b2d2      	uxtb	r2, r2
   114fe:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11500:	f242 0317 	movw	r3, #8215	; 0x2017
   11504:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11508:	f242 0217 	movw	r2, #8215	; 0x2017
   1150c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11510:	7812      	ldrb	r2, [r2, #0]
   11512:	b2d2      	uxtb	r2, r2
   11514:	f042 0201 	orr.w	r2, r2, #1
   11518:	b2d2      	uxtb	r2, r2
   1151a:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   1151c:	f24c 4354 	movw	r3, #50260	; 0xc454
   11520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11524:	2200      	movs	r2, #0
   11526:	701a      	strb	r2, [r3, #0]
   11528:	f242 0318 	movw	r3, #8216	; 0x2018
   1152c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11530:	f242 0218 	movw	r2, #8216	; 0x2018
   11534:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11538:	7812      	ldrb	r2, [r2, #0]
   1153a:	b2d2      	uxtb	r2, r2
   1153c:	f042 0201 	orr.w	r2, r2, #1
   11540:	b2d2      	uxtb	r2, r2
   11542:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   11544:	f242 0302 	movw	r3, #8194	; 0x2002
   11548:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1154c:	f242 0202 	movw	r2, #8194	; 0x2002
   11550:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11554:	7812      	ldrb	r2, [r2, #0]
   11556:	b2d2      	uxtb	r2, r2
   11558:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1155c:	b2d2      	uxtb	r2, r2
   1155e:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11560:	f24c 4354 	movw	r3, #50260	; 0xc454
   11564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11568:	2200      	movs	r2, #0
   1156a:	701a      	strb	r2, [r3, #0]
   1156c:	f242 0303 	movw	r3, #8195	; 0x2003
   11570:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11574:	f242 0203 	movw	r2, #8195	; 0x2003
   11578:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1157c:	7812      	ldrb	r2, [r2, #0]
   1157e:	b2d2      	uxtb	r2, r2
   11580:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11584:	b2d2      	uxtb	r2, r2
   11586:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11588:	f24c 4354 	movw	r3, #50260	; 0xc454
   1158c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11590:	2200      	movs	r2, #0
   11592:	701a      	strb	r2, [r3, #0]
}
   11594:	46bd      	mov	sp, r7
   11596:	f85d 7b04 	ldr.w	r7, [sp], #4
   1159a:	4770      	bx	lr

0001159c <__vector_17>:


SIGNAL(SIG_SPI) {
   1159c:	b580      	push	{r7, lr}
   1159e:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   115a0:	f24c 4354 	movw	r3, #50260	; 0xc454
   115a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115a8:	781b      	ldrb	r3, [r3, #0]
   115aa:	b2db      	uxtb	r3, r3
   115ac:	2b01      	cmp	r3, #1
   115ae:	d102      	bne.n	115b6 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   115b0:	f7ff fe88 	bl	112c4 <link_fbw_on_spi_it>
   115b4:	e00b      	b.n	115ce <__vector_17+0x32>
  else
    fatal_error_nb++;
   115b6:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   115ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115be:	781b      	ldrb	r3, [r3, #0]
   115c0:	3301      	adds	r3, #1
   115c2:	b2da      	uxtb	r2, r3
   115c4:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   115c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115cc:	701a      	strb	r2, [r3, #0]
}
   115ce:	bd80      	pop	{r7, pc}

000115d0 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   115d0:	b480      	push	{r7}
   115d2:	b083      	sub	sp, #12
   115d4:	af00      	add	r7, sp, #0
   115d6:	4603      	mov	r3, r0
   115d8:	6039      	str	r1, [r7, #0]
   115da:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   115dc:	79fa      	ldrb	r2, [r7, #7]
   115de:	f24c 4368 	movw	r3, #50280	; 0xc468
   115e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115e6:	6839      	ldr	r1, [r7, #0]
   115e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   115ec:	370c      	adds	r7, #12
   115ee:	46bd      	mov	sp, r7
   115f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   115f4:	4770      	bx	lr
   115f6:	bf00      	nop

000115f8 <adc_init>:

void 
adc_init( void )
{
   115f8:	b480      	push	{r7}
   115fa:	b083      	sub	sp, #12
   115fc:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   115fe:	f242 0362 	movw	r3, #8290	; 0x2062
   11602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11606:	2200      	movs	r2, #0
   11608:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1160a:	f242 0361 	movw	r3, #8289	; 0x2061
   1160e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11612:	2200      	movs	r2, #0
   11614:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   11616:	f242 0307 	movw	r3, #8199	; 0x2007
   1161a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1161e:	2240      	movs	r2, #64	; 0x40
   11620:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   11622:	f242 0308 	movw	r3, #8200	; 0x2008
   11626:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1162a:	f242 0208 	movw	r2, #8200	; 0x2008
   1162e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11632:	7812      	ldrb	r2, [r2, #0]
   11634:	b2d2      	uxtb	r2, r2
   11636:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1163a:	b2d2      	uxtb	r2, r2
   1163c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   1163e:	f242 0306 	movw	r3, #8198	; 0x2006
   11642:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11646:	22cf      	movs	r2, #207	; 0xcf
   11648:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   1164a:	2300      	movs	r3, #0
   1164c:	71fb      	strb	r3, [r7, #7]
   1164e:	e00a      	b.n	11666 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11650:	79fa      	ldrb	r2, [r7, #7]
   11652:	f24c 4368 	movw	r3, #50280	; 0xc468
   11656:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1165a:	2100      	movs	r1, #0
   1165c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11660:	79fb      	ldrb	r3, [r7, #7]
   11662:	3301      	adds	r3, #1
   11664:	71fb      	strb	r3, [r7, #7]
   11666:	79fb      	ldrb	r3, [r7, #7]
   11668:	2b07      	cmp	r3, #7
   1166a:	d9f1      	bls.n	11650 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   1166c:	370c      	adds	r7, #12
   1166e:	46bd      	mov	sp, r7
   11670:	f85d 7b04 	ldr.w	r7, [sp], #4
   11674:	4770      	bx	lr
   11676:	bf00      	nop

00011678 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11678:	b480      	push	{r7}
   1167a:	b085      	sub	sp, #20
   1167c:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   1167e:	f242 0307 	movw	r3, #8199	; 0x2007
   11682:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11686:	781b      	ldrb	r3, [r3, #0]
   11688:	b2db      	uxtb	r3, r3
   1168a:	f003 0307 	and.w	r3, r3, #7
   1168e:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11690:	7bfa      	ldrb	r2, [r7, #15]
   11692:	f24c 4368 	movw	r3, #50280	; 0xc468
   11696:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1169a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1169e:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   116a0:	f242 0304 	movw	r3, #8196	; 0x2004
   116a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116a8:	881b      	ldrh	r3, [r3, #0]
   116aa:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   116ac:	7bfa      	ldrb	r2, [r7, #15]
   116ae:	f24c 4358 	movw	r3, #50264	; 0xc458
   116b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116b6:	88f9      	ldrh	r1, [r7, #6]
   116b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   116bc:	68bb      	ldr	r3, [r7, #8]
   116be:	2b00      	cmp	r3, #0
   116c0:	d025      	beq.n	1170e <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   116c2:	68bb      	ldr	r3, [r7, #8]
   116c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   116c8:	3301      	adds	r3, #1
   116ca:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   116cc:	7bbb      	ldrb	r3, [r7, #14]
   116ce:	2b1f      	cmp	r3, #31
   116d0:	d901      	bls.n	116d6 <__vector_21+0x5e>
   116d2:	2300      	movs	r3, #0
   116d4:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   116d6:	68bb      	ldr	r3, [r7, #8]
   116d8:	881a      	ldrh	r2, [r3, #0]
   116da:	7bbb      	ldrb	r3, [r7, #14]
   116dc:	68b9      	ldr	r1, [r7, #8]
   116de:	005b      	lsls	r3, r3, #1
   116e0:	440b      	add	r3, r1
   116e2:	885b      	ldrh	r3, [r3, #2]
   116e4:	1ad3      	subs	r3, r2, r3
   116e6:	b29a      	uxth	r2, r3
   116e8:	68bb      	ldr	r3, [r7, #8]
   116ea:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   116ec:	7bbb      	ldrb	r3, [r7, #14]
   116ee:	68ba      	ldr	r2, [r7, #8]
   116f0:	005b      	lsls	r3, r3, #1
   116f2:	4413      	add	r3, r2
   116f4:	88fa      	ldrh	r2, [r7, #6]
   116f6:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   116f8:	68bb      	ldr	r3, [r7, #8]
   116fa:	881a      	ldrh	r2, [r3, #0]
   116fc:	88fb      	ldrh	r3, [r7, #6]
   116fe:	4413      	add	r3, r2
   11700:	b29a      	uxth	r2, r3
   11702:	68bb      	ldr	r3, [r7, #8]
   11704:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   11706:	68bb      	ldr	r3, [r7, #8]
   11708:	7bba      	ldrb	r2, [r7, #14]
   1170a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   1170e:	7bfb      	ldrb	r3, [r7, #15]
   11710:	3301      	adds	r3, #1
   11712:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   11714:	7bfb      	ldrb	r3, [r7, #15]
   11716:	2b07      	cmp	r3, #7
   11718:	d901      	bls.n	1171e <__vector_21+0xa6>
    adc_input = 0;
   1171a:	2300      	movs	r3, #0
   1171c:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   1171e:	f242 0307 	movw	r3, #8199	; 0x2007
   11722:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11726:	7bfa      	ldrb	r2, [r7, #15]
   11728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1172c:	b2d2      	uxtb	r2, r2
   1172e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11730:	f242 0306 	movw	r3, #8198	; 0x2006
   11734:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11738:	f242 0206 	movw	r2, #8198	; 0x2006
   1173c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11740:	7812      	ldrb	r2, [r2, #0]
   11742:	b2d2      	uxtb	r2, r2
   11744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11748:	b2d2      	uxtb	r2, r2
   1174a:	701a      	strb	r2, [r3, #0]
  
}
   1174c:	3714      	adds	r7, #20
   1174e:	46bd      	mov	sp, r7
   11750:	f85d 7b04 	ldr.w	r7, [sp], #4
   11754:	4770      	bx	lr
   11756:	bf00      	nop

00011758 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11758:	b580      	push	{r7, lr}
   1175a:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   1175c:	f003 fca8 	bl	150b0 <uart1_init>
#endif
  ubx_status = UNINIT;
   11760:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11764:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11768:	2200      	movs	r2, #0
   1176a:	701a      	strb	r2, [r3, #0]
}
   1176c:	bd80      	pop	{r7, pc}
   1176e:	bf00      	nop

00011770 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11770:	b580      	push	{r7, lr}
   11772:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   11774:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   11778:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1177c:	781b      	ldrb	r3, [r3, #0]
   1177e:	2b01      	cmp	r3, #1
   11780:	f040 80f9 	bne.w	11976 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   11784:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11788:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1178c:	781b      	ldrb	r3, [r3, #0]
   1178e:	2b08      	cmp	r3, #8
   11790:	d128      	bne.n	117e4 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   11792:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11796:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1179a:	685a      	ldr	r2, [r3, #4]
   1179c:	f24c 439c 	movw	r3, #50332	; 0xc49c
   117a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117a4:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   117a6:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   117aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ae:	689a      	ldr	r2, [r3, #8]
   117b0:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   117b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117b8:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   117ba:	4b73      	ldr	r3, [pc, #460]	; (11988 <parse_gps_msg+0x218>)
   117bc:	681b      	ldr	r3, [r3, #0]
   117be:	4618      	mov	r0, r3
   117c0:	f006 fd52 	bl	18268 <__aeabi_i2f>
   117c4:	4603      	mov	r3, r0
   117c6:	4618      	mov	r0, r3
   117c8:	f04f 0100 	mov.w	r1, #0
   117cc:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   117d0:	f006 fe52 	bl	18478 <__aeabi_fdiv>
   117d4:	4603      	mov	r3, r0
   117d6:	461a      	mov	r2, r3
   117d8:	f24c 438c 	movw	r3, #50316	; 0xc48c
   117dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117e0:	601a      	str	r2, [r3, #0]
   117e2:	e0c8      	b.n	11976 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   117e4:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   117e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ec:	781b      	ldrb	r3, [r3, #0]
   117ee:	2b03      	cmp	r3, #3
   117f0:	d10a      	bne.n	11808 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   117f2:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   117f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117fa:	791a      	ldrb	r2, [r3, #4]
   117fc:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   11800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11804:	701a      	strb	r2, [r3, #0]
   11806:	e0b6      	b.n	11976 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11808:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   1180c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11810:	781b      	ldrb	r3, [r3, #0]
   11812:	2b12      	cmp	r3, #18
   11814:	f040 80af 	bne.w	11976 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11818:	4b5c      	ldr	r3, [pc, #368]	; (1198c <parse_gps_msg+0x21c>)
   1181a:	681b      	ldr	r3, [r3, #0]
   1181c:	4618      	mov	r0, r3
   1181e:	f006 fd1f 	bl	18260 <__aeabi_ui2f>
   11822:	4603      	mov	r3, r0
   11824:	4618      	mov	r0, r3
   11826:	f04f 0100 	mov.w	r1, #0
   1182a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1182e:	f006 fe23 	bl	18478 <__aeabi_fdiv>
   11832:	4603      	mov	r3, r0
   11834:	461a      	mov	r2, r3
   11836:	f24c 4390 	movw	r3, #50320	; 0xc490
   1183a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1183e:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11840:	4b51      	ldr	r3, [pc, #324]	; (11988 <parse_gps_msg+0x218>)
   11842:	681b      	ldr	r3, [r3, #0]
   11844:	4618      	mov	r0, r3
   11846:	f006 fd0f 	bl	18268 <__aeabi_i2f>
   1184a:	4603      	mov	r3, r0
   1184c:	4618      	mov	r0, r3
   1184e:	f04f 0100 	mov.w	r1, #0
   11852:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11856:	f006 fe0f 	bl	18478 <__aeabi_fdiv>
   1185a:	4603      	mov	r3, r0
   1185c:	461a      	mov	r2, r3
   1185e:	f24c 4394 	movw	r3, #50324	; 0xc494
   11862:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11866:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11868:	4b49      	ldr	r3, [pc, #292]	; (11990 <parse_gps_msg+0x220>)
   1186a:	681b      	ldr	r3, [r3, #0]
   1186c:	4618      	mov	r0, r3
   1186e:	f006 fcfb 	bl	18268 <__aeabi_i2f>
   11872:	4603      	mov	r3, r0
   11874:	4618      	mov	r0, r3
   11876:	f006 f8b7 	bl	179e8 <__aeabi_f2d>
   1187a:	4602      	mov	r2, r0
   1187c:	460b      	mov	r3, r1
   1187e:	4610      	mov	r0, r2
   11880:	4619      	mov	r1, r3
   11882:	a33d      	add	r3, pc, #244	; (adr r3, 11978 <parse_gps_msg+0x208>)
   11884:	e9d3 2300 	ldrd	r2, r3, [r3]
   11888:	f006 fa2c 	bl	17ce4 <__aeabi_ddiv>
   1188c:	4602      	mov	r2, r0
   1188e:	460b      	mov	r3, r1
   11890:	4610      	mov	r0, r2
   11892:	4619      	mov	r1, r3
   11894:	f04f 0200 	mov.w	r2, #0
   11898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1189c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   118a0:	f006 fa20 	bl	17ce4 <__aeabi_ddiv>
   118a4:	4602      	mov	r2, r0
   118a6:	460b      	mov	r3, r1
   118a8:	4610      	mov	r0, r2
   118aa:	4619      	mov	r1, r3
   118ac:	a334      	add	r3, pc, #208	; (adr r3, 11980 <parse_gps_msg+0x210>)
   118ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   118b2:	f006 f8ed 	bl	17a90 <__aeabi_dmul>
   118b6:	4602      	mov	r2, r0
   118b8:	460b      	mov	r3, r1
   118ba:	4610      	mov	r0, r2
   118bc:	4619      	mov	r1, r3
   118be:	f006 fbc9 	bl	18054 <__aeabi_d2f>
   118c2:	4602      	mov	r2, r0
   118c4:	f24c 4398 	movw	r3, #50328	; 0xc498
   118c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118cc:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   118ce:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   118d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118d6:	681b      	ldr	r3, [r3, #0]
   118d8:	4618      	mov	r0, r3
   118da:	f006 fcc1 	bl	18260 <__aeabi_ui2f>
   118de:	4603      	mov	r3, r0
   118e0:	4618      	mov	r0, r3
   118e2:	f04f 0100 	mov.w	r1, #0
   118e6:	f2c4 417a 	movt	r1, #17530	; 0x447a
   118ea:	f006 fdc5 	bl	18478 <__aeabi_fdiv>
   118ee:	4603      	mov	r3, r0
   118f0:	461a      	mov	r2, r3
   118f2:	f24c 4388 	movw	r3, #50312	; 0xc488
   118f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118fa:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   118fc:	f24c 439c 	movw	r3, #50332	; 0xc49c
   11900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11904:	681a      	ldr	r2, [r3, #0]
   11906:	f248 531f 	movw	r3, #34079	; 0x851f
   1190a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1190e:	fb83 1302 	smull	r1, r3, r3, r2
   11912:	1159      	asrs	r1, r3, #5
   11914:	17d3      	asrs	r3, r2, #31
   11916:	1acb      	subs	r3, r1, r3
   11918:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   1191c:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11920:	4618      	mov	r0, r3
   11922:	f006 fca1 	bl	18268 <__aeabi_i2f>
   11926:	4602      	mov	r2, r0
   11928:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   1192c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11930:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11932:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   11936:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1193a:	681a      	ldr	r2, [r3, #0]
   1193c:	f248 531f 	movw	r3, #34079	; 0x851f
   11940:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11944:	fb83 1302 	smull	r1, r3, r3, r2
   11948:	1159      	asrs	r1, r3, #5
   1194a:	17d3      	asrs	r3, r2, #31
   1194c:	1aca      	subs	r2, r1, r3
   1194e:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11952:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11956:	4413      	add	r3, r2
   11958:	4618      	mov	r0, r3
   1195a:	f006 fc85 	bl	18268 <__aeabi_i2f>
   1195e:	4602      	mov	r2, r0
   11960:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   11964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11968:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   1196a:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   1196e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11972:	2201      	movs	r2, #1
   11974:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11976:	bd80      	pop	{r7, pc}
   11978:	00000000 	.word	0x00000000
   1197c:	40f86a00 	.word	0x40f86a00
   11980:	5a7ed197 	.word	0x5a7ed197
   11984:	400921fb 	.word	0x400921fb
   11988:	2004c4bc 	.word	0x2004c4bc
   1198c:	2004c4c4 	.word	0x2004c4c4
   11990:	2004c4c8 	.word	0x2004c4c8

00011994 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11994:	b480      	push	{r7}
   11996:	b083      	sub	sp, #12
   11998:	af00      	add	r7, sp, #0
   1199a:	4603      	mov	r3, r0
   1199c:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   1199e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   119a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119a6:	781b      	ldrb	r3, [r3, #0]
   119a8:	2b06      	cmp	r3, #6
   119aa:	d81d      	bhi.n	119e8 <parse_ubx+0x54>
    ck_a += c;
   119ac:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   119b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119b4:	781a      	ldrb	r2, [r3, #0]
   119b6:	79fb      	ldrb	r3, [r7, #7]
   119b8:	4413      	add	r3, r2
   119ba:	b2da      	uxtb	r2, r3
   119bc:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   119c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119c4:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   119c6:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   119ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ce:	781a      	ldrb	r2, [r3, #0]
   119d0:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   119d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119d8:	781b      	ldrb	r3, [r3, #0]
   119da:	4413      	add	r3, r2
   119dc:	b2da      	uxtb	r2, r3
   119de:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   119e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119e6:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   119e8:	f24c 53af 	movw	r3, #50607	; 0xc5af
   119ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f0:	781b      	ldrb	r3, [r3, #0]
   119f2:	2b00      	cmp	r3, #0
   119f4:	d110      	bne.n	11a18 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   119f6:	79fb      	ldrb	r3, [r7, #7]
   119f8:	2bb5      	cmp	r3, #181	; 0xb5
   119fa:	f040 8135 	bne.w	11c68 <parse_ubx+0x2d4>
      ubx_status++;
   119fe:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a06:	781b      	ldrb	r3, [r3, #0]
   11a08:	3301      	adds	r3, #1
   11a0a:	b2da      	uxtb	r2, r3
   11a0c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a14:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11a16:	e12f      	b.n	11c78 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11a18:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a20:	781b      	ldrb	r3, [r3, #0]
   11a22:	2b01      	cmp	r3, #1
   11a24:	d11c      	bne.n	11a60 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11a26:	79fb      	ldrb	r3, [r7, #7]
   11a28:	2b62      	cmp	r3, #98	; 0x62
   11a2a:	d000      	beq.n	11a2e <parse_ubx+0x9a>
      goto error;
   11a2c:	e11d      	b.n	11c6a <parse_ubx+0x2d6>
    ck_a = 0;
   11a2e:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a36:	2200      	movs	r2, #0
   11a38:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11a3a:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a42:	2200      	movs	r2, #0
   11a44:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11a46:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a4e:	781b      	ldrb	r3, [r3, #0]
   11a50:	3301      	adds	r3, #1
   11a52:	b2da      	uxtb	r2, r3
   11a54:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a5c:	701a      	strb	r2, [r3, #0]
   11a5e:	e103      	b.n	11c68 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11a60:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a68:	781b      	ldrb	r3, [r3, #0]
   11a6a:	2b02      	cmp	r3, #2
   11a6c:	d127      	bne.n	11abe <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11a6e:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a76:	781b      	ldrb	r3, [r3, #0]
   11a78:	b2db      	uxtb	r3, r3
   11a7a:	2b00      	cmp	r3, #0
   11a7c:	d00c      	beq.n	11a98 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11a7e:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a86:	781b      	ldrb	r3, [r3, #0]
   11a88:	3301      	adds	r3, #1
   11a8a:	b2da      	uxtb	r2, r3
   11a8c:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a94:	701a      	strb	r2, [r3, #0]
      goto error;
   11a96:	e0e8      	b.n	11c6a <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11a98:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   11a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aa0:	79fa      	ldrb	r2, [r7, #7]
   11aa2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11aa4:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aac:	781b      	ldrb	r3, [r3, #0]
   11aae:	3301      	adds	r3, #1
   11ab0:	b2da      	uxtb	r2, r3
   11ab2:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aba:	701a      	strb	r2, [r3, #0]
   11abc:	e0d4      	b.n	11c68 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11abe:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac6:	781b      	ldrb	r3, [r3, #0]
   11ac8:	2b03      	cmp	r3, #3
   11aca:	d112      	bne.n	11af2 <parse_ubx+0x15e>
  {
    ubx_id = c;
   11acc:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ad4:	79fa      	ldrb	r2, [r7, #7]
   11ad6:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11ad8:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae0:	781b      	ldrb	r3, [r3, #0]
   11ae2:	3301      	adds	r3, #1
   11ae4:	b2da      	uxtb	r2, r3
   11ae6:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aee:	701a      	strb	r2, [r3, #0]
   11af0:	e0ba      	b.n	11c68 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11af2:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11afa:	781b      	ldrb	r3, [r3, #0]
   11afc:	2b04      	cmp	r3, #4
   11afe:	d113      	bne.n	11b28 <parse_ubx+0x194>
  {
    ubx_len = c;
   11b00:	79fb      	ldrb	r3, [r7, #7]
   11b02:	b29a      	uxth	r2, r3
   11b04:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b0c:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11b0e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b16:	781b      	ldrb	r3, [r3, #0]
   11b18:	3301      	adds	r3, #1
   11b1a:	b2da      	uxtb	r2, r3
   11b1c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b24:	701a      	strb	r2, [r3, #0]
   11b26:	e09f      	b.n	11c68 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11b28:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b30:	781b      	ldrb	r3, [r3, #0]
   11b32:	2b05      	cmp	r3, #5
   11b34:	d12b      	bne.n	11b8e <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11b36:	79fb      	ldrb	r3, [r7, #7]
   11b38:	021b      	lsls	r3, r3, #8
   11b3a:	b29a      	uxth	r2, r3
   11b3c:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b44:	881b      	ldrh	r3, [r3, #0]
   11b46:	b29b      	uxth	r3, r3
   11b48:	4313      	orrs	r3, r2
   11b4a:	b29b      	uxth	r3, r3
   11b4c:	b29a      	uxth	r2, r3
   11b4e:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b56:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11b58:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b60:	881b      	ldrh	r3, [r3, #0]
   11b62:	2bff      	cmp	r3, #255	; 0xff
   11b64:	d900      	bls.n	11b68 <parse_ubx+0x1d4>
      goto error;
   11b66:	e080      	b.n	11c6a <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11b68:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b70:	2200      	movs	r2, #0
   11b72:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b74:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b7c:	781b      	ldrb	r3, [r3, #0]
   11b7e:	3301      	adds	r3, #1
   11b80:	b2da      	uxtb	r2, r3
   11b82:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b8a:	701a      	strb	r2, [r3, #0]
   11b8c:	e06c      	b.n	11c68 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11b8e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b96:	781b      	ldrb	r3, [r3, #0]
   11b98:	2b06      	cmp	r3, #6
   11b9a:	d131      	bne.n	11c00 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11b9c:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ba4:	781b      	ldrb	r3, [r3, #0]
   11ba6:	461a      	mov	r2, r3
   11ba8:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bb0:	79f9      	ldrb	r1, [r7, #7]
   11bb2:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11bb4:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bbc:	781b      	ldrb	r3, [r3, #0]
   11bbe:	3301      	adds	r3, #1
   11bc0:	b2da      	uxtb	r2, r3
   11bc2:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bca:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11bcc:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd4:	781b      	ldrb	r3, [r3, #0]
   11bd6:	461a      	mov	r2, r3
   11bd8:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be0:	881b      	ldrh	r3, [r3, #0]
   11be2:	429a      	cmp	r2, r3
   11be4:	d340      	bcc.n	11c68 <parse_ubx+0x2d4>
      ubx_status++;
   11be6:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bee:	781b      	ldrb	r3, [r3, #0]
   11bf0:	3301      	adds	r3, #1
   11bf2:	b2da      	uxtb	r2, r3
   11bf4:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bfc:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11bfe:	e03b      	b.n	11c78 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11c00:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c08:	781b      	ldrb	r3, [r3, #0]
   11c0a:	2b07      	cmp	r3, #7
   11c0c:	d115      	bne.n	11c3a <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11c0e:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c16:	781b      	ldrb	r3, [r3, #0]
   11c18:	79fa      	ldrb	r2, [r7, #7]
   11c1a:	429a      	cmp	r2, r3
   11c1c:	d000      	beq.n	11c20 <parse_ubx+0x28c>
      goto error;
   11c1e:	e024      	b.n	11c6a <parse_ubx+0x2d6>
    ubx_status++;
   11c20:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c28:	781b      	ldrb	r3, [r3, #0]
   11c2a:	3301      	adds	r3, #1
   11c2c:	b2da      	uxtb	r2, r3
   11c2e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c36:	701a      	strb	r2, [r3, #0]
   11c38:	e016      	b.n	11c68 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11c3a:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c42:	781b      	ldrb	r3, [r3, #0]
   11c44:	2b08      	cmp	r3, #8
   11c46:	d10f      	bne.n	11c68 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11c48:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c50:	781b      	ldrb	r3, [r3, #0]
   11c52:	79fa      	ldrb	r2, [r7, #7]
   11c54:	429a      	cmp	r2, r3
   11c56:	d000      	beq.n	11c5a <parse_ubx+0x2c6>
      goto error;
   11c58:	e007      	b.n	11c6a <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11c5a:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c62:	2201      	movs	r2, #1
   11c64:	701a      	strb	r2, [r3, #0]
    goto restart;
   11c66:	e000      	b.n	11c6a <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11c68:	e006      	b.n	11c78 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11c6a:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c72:	2200      	movs	r2, #0
   11c74:	701a      	strb	r2, [r3, #0]
  return;
   11c76:	bf00      	nop
}
   11c78:	370c      	adds	r7, #12
   11c7a:	46bd      	mov	sp, r7
   11c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c80:	4770      	bx	lr
   11c82:	bf00      	nop

00011c84 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11c84:	b580      	push	{r7, lr}
   11c86:	b082      	sub	sp, #8
   11c88:	af00      	add	r7, sp, #0
   11c8a:	f242 039c 	movw	r3, #8348	; 0x209c
   11c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c92:	781b      	ldrb	r3, [r3, #0]
   11c94:	71fb      	strb	r3, [r7, #7]
   11c96:	79fb      	ldrb	r3, [r7, #7]
   11c98:	4618      	mov	r0, r3
   11c9a:	f7ff fe7b 	bl	11994 <parse_ubx>
   11c9e:	3708      	adds	r7, #8
   11ca0:	46bd      	mov	sp, r7
   11ca2:	bd80      	pop	{r7, pc}
   11ca4:	f3af 8000 	nop.w

00011ca8 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11ca8:	b580      	push	{r7, lr}
   11caa:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11cac:	f240 5348 	movw	r3, #1352	; 0x548
   11cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cb4:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11cb8:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11cbc:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11cbe:	2001      	movs	r0, #1
   11cc0:	f24c 51bc 	movw	r1, #50620	; 0xc5bc
   11cc4:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11cc8:	f7ff fc82 	bl	115d0 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11ccc:	2002      	movs	r0, #2
   11cce:	f24c 6100 	movw	r1, #50688	; 0xc600
   11cd2:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11cd6:	f7ff fc7b 	bl	115d0 <adc_buf_channel>
}
   11cda:	bd80      	pop	{r7, pc}

00011cdc <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11cdc:	b480      	push	{r7}
   11cde:	b083      	sub	sp, #12
   11ce0:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11ce2:	f24c 53bc 	movw	r3, #50620	; 0xc5bc
   11ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cea:	881b      	ldrh	r3, [r3, #0]
   11cec:	095b      	lsrs	r3, r3, #5
   11cee:	b29b      	uxth	r3, r3
   11cf0:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11cf2:	f24c 6300 	movw	r3, #50688	; 0xc600
   11cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cfa:	881b      	ldrh	r3, [r3, #0]
   11cfc:	095b      	lsrs	r3, r3, #5
   11cfe:	b29b      	uxth	r3, r3
   11d00:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11d02:	88fb      	ldrh	r3, [r7, #6]
   11d04:	425b      	negs	r3, r3
   11d06:	b29a      	uxth	r2, r3
   11d08:	88bb      	ldrh	r3, [r7, #4]
   11d0a:	1ad3      	subs	r3, r2, r3
   11d0c:	b29a      	uxth	r2, r3
   11d0e:	f240 5342 	movw	r3, #1346	; 0x542
   11d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d16:	881b      	ldrh	r3, [r3, #0]
   11d18:	b29b      	uxth	r3, r3
   11d1a:	1ad3      	subs	r3, r2, r3
   11d1c:	b29b      	uxth	r3, r3
   11d1e:	b29a      	uxth	r2, r3
   11d20:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   11d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d28:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11d2a:	88ba      	ldrh	r2, [r7, #4]
   11d2c:	88fb      	ldrh	r3, [r7, #6]
   11d2e:	1ad3      	subs	r3, r2, r3
   11d30:	b29a      	uxth	r2, r3
   11d32:	f240 5344 	movw	r3, #1348	; 0x544
   11d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d3a:	881b      	ldrh	r3, [r3, #0]
   11d3c:	b29b      	uxth	r3, r3
   11d3e:	1ad3      	subs	r3, r2, r3
   11d40:	b29b      	uxth	r3, r3
   11d42:	b29a      	uxth	r2, r3
   11d44:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d4c:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11d4e:	370c      	adds	r7, #12
   11d50:	46bd      	mov	sp, r7
   11d52:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d56:	4770      	bx	lr

00011d58 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11d58:	b580      	push	{r7, lr}
   11d5a:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11d5c:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d64:	881b      	ldrh	r3, [r3, #0]
   11d66:	b29b      	uxth	r3, r3
   11d68:	425b      	negs	r3, r3
   11d6a:	b29b      	uxth	r3, r3
   11d6c:	b29a      	uxth	r2, r3
   11d6e:	f240 5340 	movw	r3, #1344	; 0x540
   11d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d76:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11d78:	f240 5340 	movw	r3, #1344	; 0x540
   11d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d80:	881b      	ldrh	r3, [r3, #0]
   11d82:	b21b      	sxth	r3, r3
   11d84:	4618      	mov	r0, r3
   11d86:	f005 fe1d 	bl	179c4 <__aeabi_i2d>
   11d8a:	4602      	mov	r2, r0
   11d8c:	460b      	mov	r3, r1
   11d8e:	f04f 0000 	mov.w	r0, #0
   11d92:	f04f 0100 	mov.w	r1, #0
   11d96:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11d9a:	f005 ffa3 	bl	17ce4 <__aeabi_ddiv>
   11d9e:	4602      	mov	r2, r0
   11da0:	460b      	mov	r3, r1
   11da2:	4610      	mov	r0, r2
   11da4:	4619      	mov	r1, r3
   11da6:	f006 f955 	bl	18054 <__aeabi_d2f>
   11daa:	4602      	mov	r2, r0
   11dac:	f240 5348 	movw	r3, #1352	; 0x548
   11db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11db4:	601a      	str	r2, [r3, #0]
}
   11db6:	bd80      	pop	{r7, pc}

00011db8 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11db8:	b590      	push	{r4, r7, lr}
   11dba:	b083      	sub	sp, #12
   11dbc:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11dbe:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dc6:	681a      	ldr	r2, [r3, #0]
   11dc8:	f24c 6344 	movw	r3, #50756	; 0xc644
   11dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dd0:	681b      	ldr	r3, [r3, #0]
   11dd2:	4610      	mov	r0, r2
   11dd4:	4619      	mov	r1, r3
   11dd6:	f006 f991 	bl	180fc <__aeabi_fsub>
   11dda:	4603      	mov	r3, r0
   11ddc:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11dde:	f240 534c 	movw	r3, #1356	; 0x54c
   11de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11de6:	681b      	ldr	r3, [r3, #0]
   11de8:	4618      	mov	r0, r3
   11dea:	6879      	ldr	r1, [r7, #4]
   11dec:	f006 fa90 	bl	18310 <__aeabi_fmul>
   11df0:	4603      	mov	r3, r0
   11df2:	4618      	mov	r0, r3
   11df4:	f04f 0100 	mov.w	r1, #0
   11df8:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11dfc:	f006 fc26 	bl	1864c <__aeabi_fcmplt>
   11e00:	4603      	mov	r3, r0
   11e02:	2b00      	cmp	r3, #0
   11e04:	d002      	beq.n	11e0c <roll_pitch_pid_run+0x54>
   11e06:	f64d 2280 	movw	r2, #55936	; 0xda80
   11e0a:	e026      	b.n	11e5a <roll_pitch_pid_run+0xa2>
   11e0c:	f240 534c 	movw	r3, #1356	; 0x54c
   11e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e14:	681b      	ldr	r3, [r3, #0]
   11e16:	4618      	mov	r0, r3
   11e18:	6879      	ldr	r1, [r7, #4]
   11e1a:	f006 fa79 	bl	18310 <__aeabi_fmul>
   11e1e:	4603      	mov	r3, r0
   11e20:	4618      	mov	r0, r3
   11e22:	f04f 0100 	mov.w	r1, #0
   11e26:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e2a:	f006 fc2d 	bl	18688 <__aeabi_fcmpgt>
   11e2e:	4603      	mov	r3, r0
   11e30:	2b00      	cmp	r3, #0
   11e32:	d002      	beq.n	11e3a <roll_pitch_pid_run+0x82>
   11e34:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11e38:	e00e      	b.n	11e58 <roll_pitch_pid_run+0xa0>
   11e3a:	f240 534c 	movw	r3, #1356	; 0x54c
   11e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e42:	681b      	ldr	r3, [r3, #0]
   11e44:	4618      	mov	r0, r3
   11e46:	6879      	ldr	r1, [r7, #4]
   11e48:	f006 fa62 	bl	18310 <__aeabi_fmul>
   11e4c:	4603      	mov	r3, r0
   11e4e:	4618      	mov	r0, r3
   11e50:	f006 fc24 	bl	1869c <__aeabi_f2iz>
   11e54:	4603      	mov	r3, r0
   11e56:	b29b      	uxth	r3, r3
   11e58:	b29a      	uxth	r2, r3
   11e5a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   11e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e62:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11e64:	f24c 6354 	movw	r3, #50772	; 0xc654
   11e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e6c:	681b      	ldr	r3, [r3, #0]
   11e6e:	4618      	mov	r0, r3
   11e70:	f04f 0100 	mov.w	r1, #0
   11e74:	f006 fbea 	bl	1864c <__aeabi_fcmplt>
   11e78:	4603      	mov	r3, r0
   11e7a:	2b00      	cmp	r3, #0
   11e7c:	d006      	beq.n	11e8c <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11e7e:	f24c 6354 	movw	r3, #50772	; 0xc654
   11e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e86:	f04f 0200 	mov.w	r2, #0
   11e8a:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11e8c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   11e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e94:	681a      	ldr	r2, [r3, #0]
   11e96:	f24c 6348 	movw	r3, #50760	; 0xc648
   11e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e9e:	681b      	ldr	r3, [r3, #0]
   11ea0:	4610      	mov	r0, r2
   11ea2:	4619      	mov	r1, r3
   11ea4:	f006 f92a 	bl	180fc <__aeabi_fsub>
   11ea8:	4603      	mov	r3, r0
   11eaa:	461c      	mov	r4, r3
   11eac:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eb4:	681b      	ldr	r3, [r3, #0]
   11eb6:	4618      	mov	r0, r3
   11eb8:	f04f 0100 	mov.w	r1, #0
   11ebc:	f006 fbc6 	bl	1864c <__aeabi_fcmplt>
   11ec0:	4603      	mov	r3, r0
   11ec2:	2b00      	cmp	r3, #0
   11ec4:	d007      	beq.n	11ed6 <roll_pitch_pid_run+0x11e>
   11ec6:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ece:	681b      	ldr	r3, [r3, #0]
   11ed0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11ed4:	e004      	b.n	11ee0 <roll_pitch_pid_run+0x128>
   11ed6:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ede:	681a      	ldr	r2, [r3, #0]
   11ee0:	f24c 6354 	movw	r3, #50772	; 0xc654
   11ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ee8:	681b      	ldr	r3, [r3, #0]
   11eea:	4610      	mov	r0, r2
   11eec:	4619      	mov	r1, r3
   11eee:	f006 fa0f 	bl	18310 <__aeabi_fmul>
   11ef2:	4603      	mov	r3, r0
   11ef4:	4620      	mov	r0, r4
   11ef6:	4619      	mov	r1, r3
   11ef8:	f006 f900 	bl	180fc <__aeabi_fsub>
   11efc:	4603      	mov	r3, r0
   11efe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11f02:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11f04:	f240 5350 	movw	r3, #1360	; 0x550
   11f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f0c:	681b      	ldr	r3, [r3, #0]
   11f0e:	4618      	mov	r0, r3
   11f10:	6879      	ldr	r1, [r7, #4]
   11f12:	f006 f9fd 	bl	18310 <__aeabi_fmul>
   11f16:	4603      	mov	r3, r0
   11f18:	4618      	mov	r0, r3
   11f1a:	f04f 0100 	mov.w	r1, #0
   11f1e:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11f22:	f006 fb93 	bl	1864c <__aeabi_fcmplt>
   11f26:	4603      	mov	r3, r0
   11f28:	2b00      	cmp	r3, #0
   11f2a:	d002      	beq.n	11f32 <roll_pitch_pid_run+0x17a>
   11f2c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11f30:	e026      	b.n	11f80 <roll_pitch_pid_run+0x1c8>
   11f32:	f240 5350 	movw	r3, #1360	; 0x550
   11f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f3a:	681b      	ldr	r3, [r3, #0]
   11f3c:	4618      	mov	r0, r3
   11f3e:	6879      	ldr	r1, [r7, #4]
   11f40:	f006 f9e6 	bl	18310 <__aeabi_fmul>
   11f44:	4603      	mov	r3, r0
   11f46:	4618      	mov	r0, r3
   11f48:	f04f 0100 	mov.w	r1, #0
   11f4c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f50:	f006 fb9a 	bl	18688 <__aeabi_fcmpgt>
   11f54:	4603      	mov	r3, r0
   11f56:	2b00      	cmp	r3, #0
   11f58:	d002      	beq.n	11f60 <roll_pitch_pid_run+0x1a8>
   11f5a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11f5e:	e00e      	b.n	11f7e <roll_pitch_pid_run+0x1c6>
   11f60:	f240 5350 	movw	r3, #1360	; 0x550
   11f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f68:	681b      	ldr	r3, [r3, #0]
   11f6a:	4618      	mov	r0, r3
   11f6c:	6879      	ldr	r1, [r7, #4]
   11f6e:	f006 f9cf 	bl	18310 <__aeabi_fmul>
   11f72:	4603      	mov	r3, r0
   11f74:	4618      	mov	r0, r3
   11f76:	f006 fb91 	bl	1869c <__aeabi_f2iz>
   11f7a:	4603      	mov	r3, r0
   11f7c:	b29b      	uxth	r3, r3
   11f7e:	b29a      	uxth	r2, r3
   11f80:	f24c 6350 	movw	r3, #50768	; 0xc650
   11f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f88:	801a      	strh	r2, [r3, #0]
}
   11f8a:	370c      	adds	r7, #12
   11f8c:	46bd      	mov	sp, r7
   11f8e:	bd90      	pop	{r4, r7, pc}

00011f90 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11f90:	b580      	push	{r7, lr}
   11f92:	b082      	sub	sp, #8
   11f94:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11f96:	f64c 1308 	movw	r3, #51464	; 0xc908
   11f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f9e:	681a      	ldr	r2, [r3, #0]
   11fa0:	f24c 635c 	movw	r3, #50780	; 0xc65c
   11fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fa8:	681b      	ldr	r3, [r3, #0]
   11faa:	4610      	mov	r0, r2
   11fac:	4619      	mov	r1, r3
   11fae:	f006 f8a5 	bl	180fc <__aeabi_fsub>
   11fb2:	4603      	mov	r3, r0
   11fb4:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11fb6:	e013      	b.n	11fe0 <course_pid_run+0x50>
   11fb8:	6878      	ldr	r0, [r7, #4]
   11fba:	f005 fd15 	bl	179e8 <__aeabi_f2d>
   11fbe:	4602      	mov	r2, r0
   11fc0:	460b      	mov	r3, r1
   11fc2:	4610      	mov	r0, r2
   11fc4:	4619      	mov	r1, r3
   11fc6:	a348      	add	r3, pc, #288	; (adr r3, 120e8 <course_pid_run+0x158>)
   11fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11fcc:	f005 fbac 	bl	17728 <__aeabi_dsub>
   11fd0:	4602      	mov	r2, r0
   11fd2:	460b      	mov	r3, r1
   11fd4:	4610      	mov	r0, r2
   11fd6:	4619      	mov	r1, r3
   11fd8:	f006 f83c 	bl	18054 <__aeabi_d2f>
   11fdc:	4603      	mov	r3, r0
   11fde:	607b      	str	r3, [r7, #4]
   11fe0:	6878      	ldr	r0, [r7, #4]
   11fe2:	f005 fd01 	bl	179e8 <__aeabi_f2d>
   11fe6:	4602      	mov	r2, r0
   11fe8:	460b      	mov	r3, r1
   11fea:	4610      	mov	r0, r2
   11fec:	4619      	mov	r1, r3
   11fee:	a340      	add	r3, pc, #256	; (adr r3, 120f0 <course_pid_run+0x160>)
   11ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ff4:	f005 ffdc 	bl	17fb0 <__aeabi_dcmpgt>
   11ff8:	4603      	mov	r3, r0
   11ffa:	2b00      	cmp	r3, #0
   11ffc:	d1dc      	bne.n	11fb8 <course_pid_run+0x28>
   11ffe:	e013      	b.n	12028 <course_pid_run+0x98>
   12000:	6878      	ldr	r0, [r7, #4]
   12002:	f005 fcf1 	bl	179e8 <__aeabi_f2d>
   12006:	4602      	mov	r2, r0
   12008:	460b      	mov	r3, r1
   1200a:	4610      	mov	r0, r2
   1200c:	4619      	mov	r1, r3
   1200e:	a336      	add	r3, pc, #216	; (adr r3, 120e8 <course_pid_run+0x158>)
   12010:	e9d3 2300 	ldrd	r2, r3, [r3]
   12014:	f005 fb8a 	bl	1772c <__adddf3>
   12018:	4602      	mov	r2, r0
   1201a:	460b      	mov	r3, r1
   1201c:	4610      	mov	r0, r2
   1201e:	4619      	mov	r1, r3
   12020:	f006 f818 	bl	18054 <__aeabi_d2f>
   12024:	4603      	mov	r3, r0
   12026:	607b      	str	r3, [r7, #4]
   12028:	6878      	ldr	r0, [r7, #4]
   1202a:	f005 fcdd 	bl	179e8 <__aeabi_f2d>
   1202e:	4602      	mov	r2, r0
   12030:	460b      	mov	r3, r1
   12032:	4610      	mov	r0, r2
   12034:	4619      	mov	r1, r3
   12036:	a330      	add	r3, pc, #192	; (adr r3, 120f8 <course_pid_run+0x168>)
   12038:	e9d3 2300 	ldrd	r2, r3, [r3]
   1203c:	f005 ff9a 	bl	17f74 <__aeabi_dcmplt>
   12040:	4603      	mov	r3, r0
   12042:	2b00      	cmp	r3, #0
   12044:	d1dc      	bne.n	12000 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   12046:	f240 5358 	movw	r3, #1368	; 0x558
   1204a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1204e:	681b      	ldr	r3, [r3, #0]
   12050:	4618      	mov	r0, r3
   12052:	6879      	ldr	r1, [r7, #4]
   12054:	f006 f95c 	bl	18310 <__aeabi_fmul>
   12058:	4603      	mov	r3, r0
   1205a:	461a      	mov	r2, r3
   1205c:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12060:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12064:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   12066:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   1206a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1206e:	681a      	ldr	r2, [r3, #0]
   12070:	f240 535c 	movw	r3, #1372	; 0x55c
   12074:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12078:	681b      	ldr	r3, [r3, #0]
   1207a:	4610      	mov	r0, r2
   1207c:	4619      	mov	r1, r3
   1207e:	f006 fb03 	bl	18688 <__aeabi_fcmpgt>
   12082:	4603      	mov	r3, r0
   12084:	2b00      	cmp	r3, #0
   12086:	d00a      	beq.n	1209e <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   12088:	f240 535c 	movw	r3, #1372	; 0x55c
   1208c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12090:	681a      	ldr	r2, [r3, #0]
   12092:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1209a:	601a      	str	r2, [r3, #0]
   1209c:	e01e      	b.n	120dc <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   1209e:	f240 535c 	movw	r3, #1372	; 0x55c
   120a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a6:	681b      	ldr	r3, [r3, #0]
   120a8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   120ac:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   120b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120b4:	681b      	ldr	r3, [r3, #0]
   120b6:	4610      	mov	r0, r2
   120b8:	4619      	mov	r1, r3
   120ba:	f006 fae5 	bl	18688 <__aeabi_fcmpgt>
   120be:	4603      	mov	r3, r0
   120c0:	2b00      	cmp	r3, #0
   120c2:	d00b      	beq.n	120dc <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   120c4:	f240 535c 	movw	r3, #1372	; 0x55c
   120c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120cc:	681b      	ldr	r3, [r3, #0]
   120ce:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   120d2:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   120d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120da:	601a      	str	r2, [r3, #0]
}
   120dc:	3708      	adds	r7, #8
   120de:	46bd      	mov	sp, r7
   120e0:	bd80      	pop	{r7, pc}
   120e2:	bf00      	nop
   120e4:	f3af 8000 	nop.w
   120e8:	54442d18 	.word	0x54442d18
   120ec:	401921fb 	.word	0x401921fb
   120f0:	54442d18 	.word	0x54442d18
   120f4:	400921fb 	.word	0x400921fb
   120f8:	54442d18 	.word	0x54442d18
   120fc:	c00921fb 	.word	0xc00921fb

00012100 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   12100:	b5b0      	push	{r4, r5, r7, lr}
   12102:	b082      	sub	sp, #8
   12104:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   12106:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1210a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1210e:	681a      	ldr	r2, [r3, #0]
   12110:	f24c 6360 	movw	r3, #50784	; 0xc660
   12114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12118:	681b      	ldr	r3, [r3, #0]
   1211a:	4610      	mov	r0, r2
   1211c:	4619      	mov	r1, r3
   1211e:	f005 ffed 	bl	180fc <__aeabi_fsub>
   12122:	4603      	mov	r3, r0
   12124:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   12126:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1212a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1212e:	781b      	ldrb	r3, [r3, #0]
   12130:	2b00      	cmp	r3, #0
   12132:	f000 80a8 	beq.w	12286 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   12136:	f24c 6398 	movw	r3, #50840	; 0xc698
   1213a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1213e:	881b      	ldrh	r3, [r3, #0]
   12140:	b29a      	uxth	r2, r3
   12142:	f24c 634c 	movw	r3, #50764	; 0xc64c
   12146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1214a:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   1214c:	f240 5364 	movw	r3, #1380	; 0x564
   12150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12154:	681a      	ldr	r2, [r3, #0]
   12156:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1215a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1215e:	681b      	ldr	r3, [r3, #0]
   12160:	4610      	mov	r0, r2
   12162:	4619      	mov	r1, r3
   12164:	f006 f8d4 	bl	18310 <__aeabi_fmul>
   12168:	4603      	mov	r3, r0
   1216a:	4618      	mov	r0, r3
   1216c:	6879      	ldr	r1, [r7, #4]
   1216e:	f005 ffc7 	bl	18100 <__addsf3>
   12172:	4603      	mov	r3, r0
   12174:	461a      	mov	r2, r3
   12176:	f240 5360 	movw	r3, #1376	; 0x560
   1217a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1217e:	681b      	ldr	r3, [r3, #0]
   12180:	4610      	mov	r0, r2
   12182:	4619      	mov	r1, r3
   12184:	f006 f8c4 	bl	18310 <__aeabi_fmul>
   12188:	4603      	mov	r3, r0
   1218a:	461a      	mov	r2, r3
   1218c:	f24c 6348 	movw	r3, #50760	; 0xc648
   12190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12194:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   12196:	f24c 6348 	movw	r3, #50760	; 0xc648
   1219a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1219e:	681a      	ldr	r2, [r3, #0]
   121a0:	f240 5368 	movw	r3, #1384	; 0x568
   121a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a8:	681b      	ldr	r3, [r3, #0]
   121aa:	4610      	mov	r0, r2
   121ac:	4619      	mov	r1, r3
   121ae:	f006 fa6b 	bl	18688 <__aeabi_fcmpgt>
   121b2:	4603      	mov	r3, r0
   121b4:	2b00      	cmp	r3, #0
   121b6:	d009      	beq.n	121cc <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   121b8:	f240 5368 	movw	r3, #1384	; 0x568
   121bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121c0:	681a      	ldr	r2, [r3, #0]
   121c2:	f24c 6348 	movw	r3, #50760	; 0xc648
   121c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ca:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   121cc:	f24c 6348 	movw	r3, #50760	; 0xc648
   121d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121d4:	681a      	ldr	r2, [r3, #0]
   121d6:	f240 536c 	movw	r3, #1388	; 0x56c
   121da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121de:	681b      	ldr	r3, [r3, #0]
   121e0:	4610      	mov	r0, r2
   121e2:	4619      	mov	r1, r3
   121e4:	f006 fa32 	bl	1864c <__aeabi_fcmplt>
   121e8:	4603      	mov	r3, r0
   121ea:	2b00      	cmp	r3, #0
   121ec:	d009      	beq.n	12202 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   121ee:	f240 536c 	movw	r3, #1388	; 0x56c
   121f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121f6:	681a      	ldr	r2, [r3, #0]
   121f8:	f24c 6348 	movw	r3, #50760	; 0xc648
   121fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12200:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   12202:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1220a:	681b      	ldr	r3, [r3, #0]
   1220c:	4618      	mov	r0, r3
   1220e:	6879      	ldr	r1, [r7, #4]
   12210:	f005 ff76 	bl	18100 <__addsf3>
   12214:	4603      	mov	r3, r0
   12216:	461a      	mov	r2, r3
   12218:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1221c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12220:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   12222:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1222a:	681b      	ldr	r3, [r3, #0]
   1222c:	4618      	mov	r0, r3
   1222e:	f04f 0100 	mov.w	r1, #0
   12232:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12236:	f006 fa27 	bl	18688 <__aeabi_fcmpgt>
   1223a:	4603      	mov	r3, r0
   1223c:	2b00      	cmp	r3, #0
   1223e:	d008      	beq.n	12252 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12240:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12244:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12248:	f04f 0200 	mov.w	r2, #0
   1224c:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12250:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   12252:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1225a:	681b      	ldr	r3, [r3, #0]
   1225c:	4618      	mov	r0, r3
   1225e:	f04f 0100 	mov.w	r1, #0
   12262:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12266:	f006 f9f1 	bl	1864c <__aeabi_fcmplt>
   1226a:	4603      	mov	r3, r0
   1226c:	2b00      	cmp	r3, #0
   1226e:	d100      	bne.n	12272 <climb_pid_run+0x172>
   12270:	e109      	b.n	12486 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   12272:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1227a:	f04f 0200 	mov.w	r2, #0
   1227e:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   12282:	601a      	str	r2, [r3, #0]
   12284:	e0ff      	b.n	12486 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   12286:	f24c 6360 	movw	r3, #50784	; 0xc660
   1228a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1228e:	681b      	ldr	r3, [r3, #0]
   12290:	4618      	mov	r0, r3
   12292:	f04f 0100 	mov.w	r1, #0
   12296:	f006 f9f7 	bl	18688 <__aeabi_fcmpgt>
   1229a:	4603      	mov	r3, r0
   1229c:	2b00      	cmp	r3, #0
   1229e:	d010      	beq.n	122c2 <climb_pid_run+0x1c2>
   122a0:	f24c 6360 	movw	r3, #50784	; 0xc660
   122a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122a8:	681a      	ldr	r2, [r3, #0]
   122aa:	f240 5354 	movw	r3, #1364	; 0x554
   122ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122b2:	681b      	ldr	r3, [r3, #0]
   122b4:	4610      	mov	r0, r2
   122b6:	4619      	mov	r1, r3
   122b8:	f006 f82a 	bl	18310 <__aeabi_fmul>
   122bc:	4603      	mov	r3, r0
   122be:	461a      	mov	r2, r3
   122c0:	e001      	b.n	122c6 <climb_pid_run+0x1c6>
   122c2:	f04f 0200 	mov.w	r2, #0
   122c6:	f24c 6358 	movw	r3, #50776	; 0xc658
   122ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122ce:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   122d0:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   122d4:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   122d8:	f24c 6368 	movw	r3, #50792	; 0xc668
   122dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122e0:	681b      	ldr	r3, [r3, #0]
   122e2:	4610      	mov	r0, r2
   122e4:	4619      	mov	r1, r3
   122e6:	f006 f813 	bl	18310 <__aeabi_fmul>
   122ea:	4603      	mov	r3, r0
   122ec:	4618      	mov	r0, r3
   122ee:	6879      	ldr	r1, [r7, #4]
   122f0:	f005 ff06 	bl	18100 <__addsf3>
   122f4:	4603      	mov	r3, r0
   122f6:	461a      	mov	r2, r3
   122f8:	f24c 238f 	movw	r3, #49807	; 0xc28f
   122fc:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12300:	4610      	mov	r0, r2
   12302:	4619      	mov	r1, r3
   12304:	f006 f804 	bl	18310 <__aeabi_fmul>
   12308:	4603      	mov	r3, r0
   1230a:	4618      	mov	r0, r3
   1230c:	f005 fb6c 	bl	179e8 <__aeabi_f2d>
   12310:	4602      	mov	r2, r0
   12312:	460b      	mov	r3, r1
   12314:	4610      	mov	r0, r2
   12316:	4619      	mov	r1, r3
   12318:	a35d      	add	r3, pc, #372	; (adr r3, 12490 <climb_pid_run+0x390>)
   1231a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1231e:	f005 fa05 	bl	1772c <__adddf3>
   12322:	4602      	mov	r2, r0
   12324:	460b      	mov	r3, r1
   12326:	4614      	mov	r4, r2
   12328:	461d      	mov	r5, r3
   1232a:	f24c 6360 	movw	r3, #50784	; 0xc660
   1232e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12332:	681b      	ldr	r3, [r3, #0]
   12334:	4618      	mov	r0, r3
   12336:	f005 fb57 	bl	179e8 <__aeabi_f2d>
   1233a:	4602      	mov	r2, r0
   1233c:	460b      	mov	r3, r1
   1233e:	4610      	mov	r0, r2
   12340:	4619      	mov	r1, r3
   12342:	a355      	add	r3, pc, #340	; (adr r3, 12498 <climb_pid_run+0x398>)
   12344:	e9d3 2300 	ldrd	r2, r3, [r3]
   12348:	f005 fba2 	bl	17a90 <__aeabi_dmul>
   1234c:	4602      	mov	r2, r0
   1234e:	460b      	mov	r3, r1
   12350:	4620      	mov	r0, r4
   12352:	4629      	mov	r1, r5
   12354:	f005 f9ea 	bl	1772c <__adddf3>
   12358:	4602      	mov	r2, r0
   1235a:	460b      	mov	r3, r1
   1235c:	4610      	mov	r0, r2
   1235e:	4619      	mov	r1, r3
   12360:	f005 fe78 	bl	18054 <__aeabi_d2f>
   12364:	4603      	mov	r3, r0
   12366:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12368:	f24c 6368 	movw	r3, #50792	; 0xc668
   1236c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12370:	681b      	ldr	r3, [r3, #0]
   12372:	4618      	mov	r0, r3
   12374:	6879      	ldr	r1, [r7, #4]
   12376:	f005 fec3 	bl	18100 <__addsf3>
   1237a:	4603      	mov	r3, r0
   1237c:	461a      	mov	r2, r3
   1237e:	f24c 6368 	movw	r3, #50792	; 0xc668
   12382:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12386:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12388:	f24c 6368 	movw	r3, #50792	; 0xc668
   1238c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12390:	681b      	ldr	r3, [r3, #0]
   12392:	4618      	mov	r0, r3
   12394:	f04f 0100 	mov.w	r1, #0
   12398:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1239c:	f006 f974 	bl	18688 <__aeabi_fcmpgt>
   123a0:	4603      	mov	r3, r0
   123a2:	2b00      	cmp	r3, #0
   123a4:	d008      	beq.n	123b8 <climb_pid_run+0x2b8>
   123a6:	f24c 6368 	movw	r3, #50792	; 0xc668
   123aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123ae:	f04f 0200 	mov.w	r2, #0
   123b2:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   123b6:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   123b8:	f24c 6368 	movw	r3, #50792	; 0xc668
   123bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123c0:	681b      	ldr	r3, [r3, #0]
   123c2:	4618      	mov	r0, r3
   123c4:	f04f 0100 	mov.w	r1, #0
   123c8:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   123cc:	f006 f93e 	bl	1864c <__aeabi_fcmplt>
   123d0:	4603      	mov	r3, r0
   123d2:	2b00      	cmp	r3, #0
   123d4:	d008      	beq.n	123e8 <climb_pid_run+0x2e8>
   123d6:	f24c 6368 	movw	r3, #50792	; 0xc668
   123da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123de:	f04f 0200 	mov.w	r2, #0
   123e2:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   123e6:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   123e8:	6838      	ldr	r0, [r7, #0]
   123ea:	f04f 0100 	mov.w	r1, #0
   123ee:	f2c4 6116 	movt	r1, #17942	; 0x4616
   123f2:	f005 ff8d 	bl	18310 <__aeabi_fmul>
   123f6:	4603      	mov	r3, r0
   123f8:	4618      	mov	r0, r3
   123fa:	f04f 0100 	mov.w	r1, #0
   123fe:	f006 f925 	bl	1864c <__aeabi_fcmplt>
   12402:	4603      	mov	r3, r0
   12404:	2b00      	cmp	r3, #0
   12406:	d001      	beq.n	1240c <climb_pid_run+0x30c>
   12408:	2200      	movs	r2, #0
   1240a:	e022      	b.n	12452 <climb_pid_run+0x352>
   1240c:	6838      	ldr	r0, [r7, #0]
   1240e:	f04f 0100 	mov.w	r1, #0
   12412:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12416:	f005 ff7b 	bl	18310 <__aeabi_fmul>
   1241a:	4603      	mov	r3, r0
   1241c:	4618      	mov	r0, r3
   1241e:	f04f 0100 	mov.w	r1, #0
   12422:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12426:	f006 f92f 	bl	18688 <__aeabi_fcmpgt>
   1242a:	4603      	mov	r3, r0
   1242c:	2b00      	cmp	r3, #0
   1242e:	d002      	beq.n	12436 <climb_pid_run+0x336>
   12430:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12434:	e00c      	b.n	12450 <climb_pid_run+0x350>
   12436:	6838      	ldr	r0, [r7, #0]
   12438:	f04f 0100 	mov.w	r1, #0
   1243c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12440:	f005 ff66 	bl	18310 <__aeabi_fmul>
   12444:	4603      	mov	r3, r0
   12446:	4618      	mov	r0, r3
   12448:	f006 f928 	bl	1869c <__aeabi_f2iz>
   1244c:	4603      	mov	r3, r0
   1244e:	b29b      	uxth	r3, r3
   12450:	b29a      	uxth	r2, r3
   12452:	f24c 634c 	movw	r3, #50764	; 0xc64c
   12456:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1245a:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   1245c:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12460:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12464:	681a      	ldr	r2, [r3, #0]
   12466:	f24c 6358 	movw	r3, #50776	; 0xc658
   1246a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1246e:	681b      	ldr	r3, [r3, #0]
   12470:	4610      	mov	r0, r2
   12472:	4619      	mov	r1, r3
   12474:	f005 fe44 	bl	18100 <__addsf3>
   12478:	4603      	mov	r3, r0
   1247a:	461a      	mov	r2, r3
   1247c:	f24c 6348 	movw	r3, #50760	; 0xc648
   12480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12484:	601a      	str	r2, [r3, #0]
  }
}
   12486:	3708      	adds	r7, #8
   12488:	46bd      	mov	sp, r7
   1248a:	bdb0      	pop	{r4, r5, r7, pc}
   1248c:	f3af 8000 	nop.w
   12490:	3d70a3d7 	.word	0x3d70a3d7
   12494:	3fd3d70a 	.word	0x3fd3d70a
   12498:	9999999a 	.word	0x9999999a
   1249c:	3fc99999 	.word	0x3fc99999

000124a0 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   124a0:	b580      	push	{r7, lr}
   124a2:	b082      	sub	sp, #8
   124a4:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   124a6:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   124aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ae:	681a      	ldr	r2, [r3, #0]
   124b0:	f240 5374 	movw	r3, #1396	; 0x574
   124b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124b8:	681b      	ldr	r3, [r3, #0]
   124ba:	4610      	mov	r0, r2
   124bc:	4619      	mov	r1, r3
   124be:	f005 fe1d 	bl	180fc <__aeabi_fsub>
   124c2:	4603      	mov	r3, r0
   124c4:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   124c6:	f240 5370 	movw	r3, #1392	; 0x570
   124ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ce:	681b      	ldr	r3, [r3, #0]
   124d0:	4618      	mov	r0, r3
   124d2:	6879      	ldr	r1, [r7, #4]
   124d4:	f005 ff1c 	bl	18310 <__aeabi_fmul>
   124d8:	4603      	mov	r3, r0
   124da:	461a      	mov	r2, r3
   124dc:	f24c 6364 	movw	r3, #50788	; 0xc664
   124e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124e4:	681b      	ldr	r3, [r3, #0]
   124e6:	4610      	mov	r0, r2
   124e8:	4619      	mov	r1, r3
   124ea:	f005 fe09 	bl	18100 <__addsf3>
   124ee:	4603      	mov	r3, r0
   124f0:	461a      	mov	r2, r3
   124f2:	f24c 6360 	movw	r3, #50784	; 0xc660
   124f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124fa:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   124fc:	f24c 6360 	movw	r3, #50784	; 0xc660
   12500:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12504:	681b      	ldr	r3, [r3, #0]
   12506:	4618      	mov	r0, r3
   12508:	f04f 0100 	mov.w	r1, #0
   1250c:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12510:	f006 f89c 	bl	1864c <__aeabi_fcmplt>
   12514:	4603      	mov	r3, r0
   12516:	2b00      	cmp	r3, #0
   12518:	d008      	beq.n	1252c <altitude_pid_run+0x8c>
   1251a:	f24c 6360 	movw	r3, #50784	; 0xc660
   1251e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12522:	f04f 0200 	mov.w	r2, #0
   12526:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   1252a:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   1252c:	f24c 6360 	movw	r3, #50784	; 0xc660
   12530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12534:	681b      	ldr	r3, [r3, #0]
   12536:	4618      	mov	r0, r3
   12538:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1253c:	f006 f8a4 	bl	18688 <__aeabi_fcmpgt>
   12540:	4603      	mov	r3, r0
   12542:	2b00      	cmp	r3, #0
   12544:	d006      	beq.n	12554 <altitude_pid_run+0xb4>
   12546:	f24c 6360 	movw	r3, #50784	; 0xc660
   1254a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1254e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   12552:	601a      	str	r2, [r3, #0]
}
   12554:	3708      	adds	r7, #8
   12556:	46bd      	mov	sp, r7
   12558:	bd80      	pop	{r7, pc}
   1255a:	bf00      	nop
   1255c:	f3af 8000 	nop.w

00012560 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12560:	b5f0      	push	{r4, r5, r6, r7, lr}
   12562:	b08b      	sub	sp, #44	; 0x2c
   12564:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   12566:	f24c 6371 	movw	r3, #50801	; 0xc671
   1256a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1256e:	781b      	ldrb	r3, [r3, #0]
   12570:	2b00      	cmp	r3, #0
   12572:	f040 8169 	bne.w	12848 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   12576:	f24c 6370 	movw	r3, #50800	; 0xc670
   1257a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1257e:	781b      	ldrb	r3, [r3, #0]
   12580:	2b00      	cmp	r3, #0
   12582:	d13c      	bne.n	125fe <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   12584:	f24c 6370 	movw	r3, #50800	; 0xc670
   12588:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1258c:	2200      	movs	r2, #0
   1258e:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12590:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   12594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12598:	881b      	ldrh	r3, [r3, #0]
   1259a:	2b00      	cmp	r3, #0
   1259c:	d000      	beq.n	125a0 <auto_nav+0x40>
   1259e:	e03d      	b.n	1261c <auto_nav+0xbc>
	else NextStage(); 
   125a0:	f24c 6370 	movw	r3, #50800	; 0xc670
   125a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	3301      	adds	r3, #1
   125ac:	b2da      	uxtb	r2, r3
   125ae:	f24c 6370 	movw	r3, #50800	; 0xc670
   125b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125b6:	701a      	strb	r2, [r3, #0]
   125b8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   125bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125c0:	681a      	ldr	r2, [r3, #0]
   125c2:	f24c 6374 	movw	r3, #50804	; 0xc674
   125c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ca:	601a      	str	r2, [r3, #0]
   125cc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   125d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125d4:	681a      	ldr	r2, [r3, #0]
   125d6:	f24c 6378 	movw	r3, #50808	; 0xc678
   125da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125de:	601a      	str	r2, [r3, #0]
   125e0:	f24c 6384 	movw	r3, #50820	; 0xc684
   125e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125e8:	2200      	movs	r2, #0
   125ea:	801a      	strh	r2, [r3, #0]
   125ec:	f24c 6388 	movw	r3, #50824	; 0xc688
   125f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125f4:	f04f 0200 	mov.w	r2, #0
   125f8:	601a      	str	r2, [r3, #0]
   125fa:	f002 b883 	b.w	14704 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   125fe:	f24c 6370 	movw	r3, #50800	; 0xc670
   12602:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12606:	781b      	ldrb	r3, [r3, #0]
   12608:	2b01      	cmp	r3, #1
   1260a:	d100      	bne.n	1260e <auto_nav+0xae>
    {   Goto(while_1)}
   1260c:	e7ba      	b.n	12584 <auto_nav+0x24>
    else if (nav_stage == 2)
   1260e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12616:	781b      	ldrb	r3, [r3, #0]
   12618:	2b02      	cmp	r3, #2
   1261a:	d162      	bne.n	126e2 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   1261c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12624:	2202      	movs	r2, #2
   12626:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12628:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   1262c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12630:	881b      	ldrh	r3, [r3, #0]
   12632:	2b08      	cmp	r3, #8
   12634:	d92e      	bls.n	12694 <auto_nav+0x134>
   12636:	f24c 6370 	movw	r3, #50800	; 0xc670
   1263a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1263e:	781b      	ldrb	r3, [r3, #0]
   12640:	3301      	adds	r3, #1
   12642:	b2da      	uxtb	r2, r3
   12644:	f24c 6370 	movw	r3, #50800	; 0xc670
   12648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1264c:	701a      	strb	r2, [r3, #0]
   1264e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12656:	681a      	ldr	r2, [r3, #0]
   12658:	f24c 6374 	movw	r3, #50804	; 0xc674
   1265c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12660:	601a      	str	r2, [r3, #0]
   12662:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12666:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1266a:	681a      	ldr	r2, [r3, #0]
   1266c:	f24c 6378 	movw	r3, #50808	; 0xc678
   12670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12674:	601a      	str	r2, [r3, #0]
   12676:	f24c 6384 	movw	r3, #50820	; 0xc684
   1267a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1267e:	2200      	movs	r2, #0
   12680:	801a      	strh	r2, [r3, #0]
   12682:	f24c 6388 	movw	r3, #50824	; 0xc688
   12686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1268a:	f04f 0200 	mov.w	r2, #0
   1268e:	601a      	str	r2, [r3, #0]
   12690:	f002 b838 	b.w	14704 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12694:	f24c 635c 	movw	r3, #50780	; 0xc65c
   12698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1269c:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   126a0:	f2c4 0296 	movt	r2, #16534	; 0x4096
   126a4:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   126a6:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   126aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ae:	2200      	movs	r2, #0
   126b0:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   126b2:	f24c 639c 	movw	r3, #50844	; 0xc69c
   126b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ba:	f649 129a 	movw	r2, #39322	; 0x999a
   126be:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   126c2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   126c4:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   126c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126cc:	2201      	movs	r2, #1
   126ce:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   126d0:	f24c 6398 	movw	r3, #50840	; 0xc698
   126d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d8:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   126dc:	801a      	strh	r2, [r3, #0]
        }
        return;
   126de:	f002 b811 	b.w	14704 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   126e2:	f24c 6370 	movw	r3, #50800	; 0xc670
   126e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ea:	781b      	ldrb	r3, [r3, #0]
   126ec:	2b03      	cmp	r3, #3
   126ee:	d168      	bne.n	127c2 <auto_nav+0x262>
     {
	nav_stage = 3;	
   126f0:	f24c 6370 	movw	r3, #50800	; 0xc670
   126f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126f8:	2203      	movs	r2, #3
   126fa:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   126fc:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   12700:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12704:	681b      	ldr	r3, [r3, #0]
   12706:	4618      	mov	r0, r3
   12708:	f04f 0100 	mov.w	r1, #0
   1270c:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12710:	f005 ffba 	bl	18688 <__aeabi_fcmpgt>
   12714:	4603      	mov	r3, r0
   12716:	2b00      	cmp	r3, #0
   12718:	d02e      	beq.n	12778 <auto_nav+0x218>
   1271a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1271e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12722:	781b      	ldrb	r3, [r3, #0]
   12724:	3301      	adds	r3, #1
   12726:	b2da      	uxtb	r2, r3
   12728:	f24c 6370 	movw	r3, #50800	; 0xc670
   1272c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12730:	701a      	strb	r2, [r3, #0]
   12732:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1273a:	681a      	ldr	r2, [r3, #0]
   1273c:	f24c 6374 	movw	r3, #50804	; 0xc674
   12740:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12744:	601a      	str	r2, [r3, #0]
   12746:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1274a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1274e:	681a      	ldr	r2, [r3, #0]
   12750:	f24c 6378 	movw	r3, #50808	; 0xc678
   12754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12758:	601a      	str	r2, [r3, #0]
   1275a:	f24c 6384 	movw	r3, #50820	; 0xc684
   1275e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12762:	2200      	movs	r2, #0
   12764:	801a      	strh	r2, [r3, #0]
   12766:	f24c 6388 	movw	r3, #50824	; 0xc688
   1276a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1276e:	f04f 0200 	mov.w	r2, #0
   12772:	601a      	str	r2, [r3, #0]
   12774:	f001 bfc6 	b.w	14704 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12778:	f24c 635c 	movw	r3, #50780	; 0xc65c
   1277c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12780:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12784:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12788:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1278a:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1278e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12792:	2200      	movs	r2, #0
   12794:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   12796:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1279a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1279e:	f04f 0200 	mov.w	r2, #0
   127a2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   127a4:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   127a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ac:	2202      	movs	r2, #2
   127ae:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   127b0:	f24c 6360 	movw	r3, #50784	; 0xc660
   127b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   127bc:	601a      	str	r2, [r3, #0]
        }
        return;
   127be:	f001 bfa1 	b.w	14704 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   127c2:	f24c 6370 	movw	r3, #50800	; 0xc670
   127c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ca:	781b      	ldrb	r3, [r3, #0]
   127cc:	2b04      	cmp	r3, #4
   127ce:	f041 8799 	bne.w	14704 <auto_nav+0x21a4>
        NextBlock()
   127d2:	f24c 6371 	movw	r3, #50801	; 0xc671
   127d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127da:	781b      	ldrb	r3, [r3, #0]
   127dc:	3301      	adds	r3, #1
   127de:	b2da      	uxtb	r2, r3
   127e0:	f24c 6371 	movw	r3, #50801	; 0xc671
   127e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e8:	701a      	strb	r2, [r3, #0]
   127ea:	f24c 6370 	movw	r3, #50800	; 0xc670
   127ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f2:	2200      	movs	r2, #0
   127f4:	701a      	strb	r2, [r3, #0]
   127f6:	f24c 6386 	movw	r3, #50822	; 0xc686
   127fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127fe:	2200      	movs	r2, #0
   12800:	801a      	strh	r2, [r3, #0]
   12802:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1280a:	681a      	ldr	r2, [r3, #0]
   1280c:	f24c 6374 	movw	r3, #50804	; 0xc674
   12810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12814:	601a      	str	r2, [r3, #0]
   12816:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1281a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1281e:	681a      	ldr	r2, [r3, #0]
   12820:	f24c 6378 	movw	r3, #50808	; 0xc678
   12824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12828:	601a      	str	r2, [r3, #0]
   1282a:	f24c 6384 	movw	r3, #50820	; 0xc684
   1282e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12832:	2200      	movs	r2, #0
   12834:	801a      	strh	r2, [r3, #0]
   12836:	f24c 6388 	movw	r3, #50824	; 0xc688
   1283a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1283e:	f04f 0200 	mov.w	r2, #0
   12842:	601a      	str	r2, [r3, #0]
   12844:	f001 bf5e 	b.w	14704 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12848:	f24c 6371 	movw	r3, #50801	; 0xc671
   1284c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12850:	781b      	ldrb	r3, [r3, #0]
   12852:	2b01      	cmp	r3, #1
   12854:	f040 81bc 	bne.w	12bd0 <auto_nav+0x670>
{
    nav_block = 1;
   12858:	f24c 6371 	movw	r3, #50801	; 0xc671
   1285c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12860:	2201      	movs	r2, #1
   12862:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   12864:	f24c 3300 	movw	r3, #49920	; 0xc300
   12868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1286c:	781b      	ldrb	r3, [r3, #0]
   1286e:	2b00      	cmp	r3, #0
   12870:	d007      	beq.n	12882 <auto_nav+0x322>
   12872:	f24c 3300 	movw	r3, #49920	; 0xc300
   12876:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1287a:	2200      	movs	r2, #0
   1287c:	701a      	strb	r2, [r3, #0]
   1287e:	2301      	movs	r3, #1
   12880:	e000      	b.n	12884 <auto_nav+0x324>
   12882:	2300      	movs	r3, #0
   12884:	2b00      	cmp	r3, #0
   12886:	d034      	beq.n	128f2 <auto_nav+0x392>
	{ GotoBlock(2) }
   12888:	f24c 6371 	movw	r3, #50801	; 0xc671
   1288c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12890:	2202      	movs	r2, #2
   12892:	701a      	strb	r2, [r3, #0]
   12894:	f24c 6370 	movw	r3, #50800	; 0xc670
   12898:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1289c:	2200      	movs	r2, #0
   1289e:	701a      	strb	r2, [r3, #0]
   128a0:	f24c 6386 	movw	r3, #50822	; 0xc686
   128a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a8:	2200      	movs	r2, #0
   128aa:	801a      	strh	r2, [r3, #0]
   128ac:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   128b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b4:	681a      	ldr	r2, [r3, #0]
   128b6:	f24c 6374 	movw	r3, #50804	; 0xc674
   128ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128be:	601a      	str	r2, [r3, #0]
   128c0:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   128c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c8:	681a      	ldr	r2, [r3, #0]
   128ca:	f24c 6378 	movw	r3, #50808	; 0xc678
   128ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d2:	601a      	str	r2, [r3, #0]
   128d4:	f24c 6384 	movw	r3, #50820	; 0xc684
   128d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128dc:	2200      	movs	r2, #0
   128de:	801a      	strh	r2, [r3, #0]
   128e0:	f24c 6388 	movw	r3, #50824	; 0xc688
   128e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e8:	f04f 0200 	mov.w	r2, #0
   128ec:	601a      	str	r2, [r3, #0]
   128ee:	f001 bf09 	b.w	14704 <auto_nav+0x21a4>
    if(nav_stage == 0)
   128f2:	f24c 6370 	movw	r3, #50800	; 0xc670
   128f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128fa:	781b      	ldrb	r3, [r3, #0]
   128fc:	2b00      	cmp	r3, #0
   128fe:	d12e      	bne.n	1295e <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12900:	f24c 6370 	movw	r3, #50800	; 0xc670
   12904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12908:	781b      	ldrb	r3, [r3, #0]
   1290a:	3301      	adds	r3, #1
   1290c:	b2da      	uxtb	r2, r3
   1290e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12916:	701a      	strb	r2, [r3, #0]
   12918:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1291c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12920:	681a      	ldr	r2, [r3, #0]
   12922:	f24c 6374 	movw	r3, #50804	; 0xc674
   12926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1292a:	601a      	str	r2, [r3, #0]
   1292c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12934:	681a      	ldr	r2, [r3, #0]
   12936:	f24c 6378 	movw	r3, #50808	; 0xc678
   1293a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1293e:	601a      	str	r2, [r3, #0]
   12940:	f24c 6384 	movw	r3, #50820	; 0xc684
   12944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12948:	2200      	movs	r2, #0
   1294a:	801a      	strh	r2, [r3, #0]
   1294c:	f24c 6388 	movw	r3, #50824	; 0xc688
   12950:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12954:	f04f 0200 	mov.w	r2, #0
   12958:	601a      	str	r2, [r3, #0]
   1295a:	f001 bed3 	b.w	14704 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1295e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d169      	bne.n	12a40 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   1296c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12974:	2201      	movs	r2, #1
   12976:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12978:	2001      	movs	r0, #1
   1297a:	f001 fed1 	bl	14720 <approaching>
   1297e:	4603      	mov	r3, r0
   12980:	2b00      	cmp	r3, #0
   12982:	d034      	beq.n	129ee <auto_nav+0x48e>
   12984:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298c:	2201      	movs	r2, #1
   1298e:	701a      	strb	r2, [r3, #0]
   12990:	f24c 6370 	movw	r3, #50800	; 0xc670
   12994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12998:	781b      	ldrb	r3, [r3, #0]
   1299a:	3301      	adds	r3, #1
   1299c:	b2da      	uxtb	r2, r3
   1299e:	f24c 6370 	movw	r3, #50800	; 0xc670
   129a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a6:	701a      	strb	r2, [r3, #0]
   129a8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   129ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b0:	681a      	ldr	r2, [r3, #0]
   129b2:	f24c 6374 	movw	r3, #50804	; 0xc674
   129b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ba:	601a      	str	r2, [r3, #0]
   129bc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   129c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c4:	681a      	ldr	r2, [r3, #0]
   129c6:	f24c 6378 	movw	r3, #50808	; 0xc678
   129ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ce:	601a      	str	r2, [r3, #0]
   129d0:	f24c 6384 	movw	r3, #50820	; 0xc684
   129d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d8:	2200      	movs	r2, #0
   129da:	801a      	strh	r2, [r3, #0]
   129dc:	f24c 6388 	movw	r3, #50824	; 0xc688
   129e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e4:	f04f 0200 	mov.w	r2, #0
   129e8:	601a      	str	r2, [r3, #0]
   129ea:	f001 be8b 	b.w	14704 <auto_nav+0x21a4>
            fly_to(1);
   129ee:	2001      	movs	r0, #1
   129f0:	f001 ffca 	bl	14988 <fly_to>
            auto_pitch = FALSE;
   129f4:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   129f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129fc:	2200      	movs	r2, #0
   129fe:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12a00:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a08:	f04f 0200 	mov.w	r2, #0
   12a0c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12a0e:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a16:	2203      	movs	r2, #3
   12a18:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12a1a:	f240 5378 	movw	r3, #1400	; 0x578
   12a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a22:	695a      	ldr	r2, [r3, #20]
   12a24:	f240 5374 	movw	r3, #1396	; 0x574
   12a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a2c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a2e:	f24c 6364 	movw	r3, #50788	; 0xc664
   12a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a36:	f04f 0200 	mov.w	r2, #0
   12a3a:	601a      	str	r2, [r3, #0]
          }
          return;
   12a3c:	f001 be62 	b.w	14704 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12a40:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a48:	781b      	ldrb	r3, [r3, #0]
   12a4a:	2b02      	cmp	r3, #2
   12a4c:	d169      	bne.n	12b22 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12a4e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a56:	2202      	movs	r2, #2
   12a58:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12a5a:	2004      	movs	r0, #4
   12a5c:	f001 fe60 	bl	14720 <approaching>
   12a60:	4603      	mov	r3, r0
   12a62:	2b00      	cmp	r3, #0
   12a64:	d034      	beq.n	12ad0 <auto_nav+0x570>
   12a66:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a6e:	2204      	movs	r2, #4
   12a70:	701a      	strb	r2, [r3, #0]
   12a72:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a7a:	781b      	ldrb	r3, [r3, #0]
   12a7c:	3301      	adds	r3, #1
   12a7e:	b2da      	uxtb	r2, r3
   12a80:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a88:	701a      	strb	r2, [r3, #0]
   12a8a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a92:	681a      	ldr	r2, [r3, #0]
   12a94:	f24c 6374 	movw	r3, #50804	; 0xc674
   12a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a9c:	601a      	str	r2, [r3, #0]
   12a9e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa6:	681a      	ldr	r2, [r3, #0]
   12aa8:	f24c 6378 	movw	r3, #50808	; 0xc678
   12aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab0:	601a      	str	r2, [r3, #0]
   12ab2:	f24c 6384 	movw	r3, #50820	; 0xc684
   12ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aba:	2200      	movs	r2, #0
   12abc:	801a      	strh	r2, [r3, #0]
   12abe:	f24c 6388 	movw	r3, #50824	; 0xc688
   12ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ac6:	f04f 0200 	mov.w	r2, #0
   12aca:	601a      	str	r2, [r3, #0]
   12acc:	f001 be1a 	b.w	14704 <auto_nav+0x21a4>
            fly_to(4);
   12ad0:	2004      	movs	r0, #4
   12ad2:	f001 ff59 	bl	14988 <fly_to>
            auto_pitch = FALSE;
   12ad6:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ade:	2200      	movs	r2, #0
   12ae0:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ae2:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aea:	f04f 0200 	mov.w	r2, #0
   12aee:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12af0:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af8:	2203      	movs	r2, #3
   12afa:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12afc:	f240 5378 	movw	r3, #1400	; 0x578
   12b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12b06:	f240 5374 	movw	r3, #1396	; 0x574
   12b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b0e:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b10:	f24c 6364 	movw	r3, #50788	; 0xc664
   12b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b18:	f04f 0200 	mov.w	r2, #0
   12b1c:	601a      	str	r2, [r3, #0]
          }
          return;
   12b1e:	f001 bdf1 	b.w	14704 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12b22:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b2a:	781b      	ldrb	r3, [r3, #0]
   12b2c:	2b03      	cmp	r3, #3
   12b2e:	d106      	bne.n	12b3e <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12b30:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b38:	2203      	movs	r2, #3
   12b3a:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12b3c:	e6e0      	b.n	12900 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12b3e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b46:	781b      	ldrb	r3, [r3, #0]
   12b48:	2b04      	cmp	r3, #4
   12b4a:	f041 85db 	bne.w	14704 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12b4e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b56:	2204      	movs	r2, #4
   12b58:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12b5a:	f24c 6371 	movw	r3, #50801	; 0xc671
   12b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b62:	781b      	ldrb	r3, [r3, #0]
   12b64:	3301      	adds	r3, #1
   12b66:	b2da      	uxtb	r2, r3
   12b68:	f24c 6371 	movw	r3, #50801	; 0xc671
   12b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b70:	701a      	strb	r2, [r3, #0]
   12b72:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7a:	2200      	movs	r2, #0
   12b7c:	701a      	strb	r2, [r3, #0]
   12b7e:	f24c 6386 	movw	r3, #50822	; 0xc686
   12b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b86:	2200      	movs	r2, #0
   12b88:	801a      	strh	r2, [r3, #0]
   12b8a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b92:	681a      	ldr	r2, [r3, #0]
   12b94:	f24c 6374 	movw	r3, #50804	; 0xc674
   12b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b9c:	601a      	str	r2, [r3, #0]
   12b9e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ba6:	681a      	ldr	r2, [r3, #0]
   12ba8:	f24c 6378 	movw	r3, #50808	; 0xc678
   12bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb0:	601a      	str	r2, [r3, #0]
   12bb2:	f24c 6384 	movw	r3, #50820	; 0xc684
   12bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bba:	2200      	movs	r2, #0
   12bbc:	801a      	strh	r2, [r3, #0]
   12bbe:	f24c 6388 	movw	r3, #50824	; 0xc688
   12bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc6:	f04f 0200 	mov.w	r2, #0
   12bca:	601a      	str	r2, [r3, #0]
   12bcc:	f001 bd9a 	b.w	14704 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12bd0:	f24c 6371 	movw	r3, #50801	; 0xc671
   12bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd8:	781b      	ldrb	r3, [r3, #0]
   12bda:	2b02      	cmp	r3, #2
   12bdc:	f040 8392 	bne.w	13304 <auto_nav+0xda4>
{
	nav_block = 2;
   12be0:	f24c 6371 	movw	r3, #50801	; 0xc671
   12be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12be8:	2202      	movs	r2, #2
   12bea:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12bec:	f24c 3300 	movw	r3, #49920	; 0xc300
   12bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf4:	781b      	ldrb	r3, [r3, #0]
   12bf6:	2b00      	cmp	r3, #0
   12bf8:	d007      	beq.n	12c0a <auto_nav+0x6aa>
   12bfa:	f24c 3300 	movw	r3, #49920	; 0xc300
   12bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c02:	2200      	movs	r2, #0
   12c04:	701a      	strb	r2, [r3, #0]
   12c06:	2301      	movs	r3, #1
   12c08:	e000      	b.n	12c0c <auto_nav+0x6ac>
   12c0a:	2300      	movs	r3, #0
   12c0c:	2b00      	cmp	r3, #0
   12c0e:	d034      	beq.n	12c7a <auto_nav+0x71a>
   12c10:	f24c 6371 	movw	r3, #50801	; 0xc671
   12c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c18:	2203      	movs	r2, #3
   12c1a:	701a      	strb	r2, [r3, #0]
   12c1c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c24:	2200      	movs	r2, #0
   12c26:	701a      	strb	r2, [r3, #0]
   12c28:	f24c 6386 	movw	r3, #50822	; 0xc686
   12c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c30:	2200      	movs	r2, #0
   12c32:	801a      	strh	r2, [r3, #0]
   12c34:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c3c:	681a      	ldr	r2, [r3, #0]
   12c3e:	f24c 6374 	movw	r3, #50804	; 0xc674
   12c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c46:	601a      	str	r2, [r3, #0]
   12c48:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c50:	681a      	ldr	r2, [r3, #0]
   12c52:	f24c 6378 	movw	r3, #50808	; 0xc678
   12c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c5a:	601a      	str	r2, [r3, #0]
   12c5c:	f24c 6384 	movw	r3, #50820	; 0xc684
   12c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c64:	2200      	movs	r2, #0
   12c66:	801a      	strh	r2, [r3, #0]
   12c68:	f24c 6388 	movw	r3, #50824	; 0xc688
   12c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c70:	f04f 0200 	mov.w	r2, #0
   12c74:	601a      	str	r2, [r3, #0]
   12c76:	f001 bd45 	b.w	14704 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12c7a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c82:	781b      	ldrb	r3, [r3, #0]
   12c84:	2b00      	cmp	r3, #0
   12c86:	d134      	bne.n	12cf2 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12c88:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c90:	2200      	movs	r2, #0
   12c92:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12c94:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c9c:	781b      	ldrb	r3, [r3, #0]
   12c9e:	3301      	adds	r3, #1
   12ca0:	b2da      	uxtb	r2, r3
   12ca2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12caa:	701a      	strb	r2, [r3, #0]
   12cac:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cb4:	681a      	ldr	r2, [r3, #0]
   12cb6:	f24c 6374 	movw	r3, #50804	; 0xc674
   12cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cbe:	601a      	str	r2, [r3, #0]
   12cc0:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc8:	681a      	ldr	r2, [r3, #0]
   12cca:	f24c 6378 	movw	r3, #50808	; 0xc678
   12cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cd2:	601a      	str	r2, [r3, #0]
   12cd4:	f24c 6384 	movw	r3, #50820	; 0xc684
   12cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cdc:	2200      	movs	r2, #0
   12cde:	801a      	strh	r2, [r3, #0]
   12ce0:	f24c 6388 	movw	r3, #50824	; 0xc688
   12ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce8:	f04f 0200 	mov.w	r2, #0
   12cec:	601a      	str	r2, [r3, #0]
   12cee:	f001 bd09 	b.w	14704 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12cf2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cfa:	781b      	ldrb	r3, [r3, #0]
   12cfc:	2b01      	cmp	r3, #1
   12cfe:	d169      	bne.n	12dd4 <auto_nav+0x874>
    {
         nav_stage =1;
   12d00:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d08:	2201      	movs	r2, #1
   12d0a:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12d0c:	2006      	movs	r0, #6
   12d0e:	f001 fd07 	bl	14720 <approaching>
   12d12:	4603      	mov	r3, r0
   12d14:	2b00      	cmp	r3, #0
   12d16:	d034      	beq.n	12d82 <auto_nav+0x822>
   12d18:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d20:	2206      	movs	r2, #6
   12d22:	701a      	strb	r2, [r3, #0]
   12d24:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d2c:	781b      	ldrb	r3, [r3, #0]
   12d2e:	3301      	adds	r3, #1
   12d30:	b2da      	uxtb	r2, r3
   12d32:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d3a:	701a      	strb	r2, [r3, #0]
   12d3c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d44:	681a      	ldr	r2, [r3, #0]
   12d46:	f24c 6374 	movw	r3, #50804	; 0xc674
   12d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d4e:	601a      	str	r2, [r3, #0]
   12d50:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d58:	681a      	ldr	r2, [r3, #0]
   12d5a:	f24c 6378 	movw	r3, #50808	; 0xc678
   12d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d62:	601a      	str	r2, [r3, #0]
   12d64:	f24c 6384 	movw	r3, #50820	; 0xc684
   12d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d6c:	2200      	movs	r2, #0
   12d6e:	801a      	strh	r2, [r3, #0]
   12d70:	f24c 6388 	movw	r3, #50824	; 0xc688
   12d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d78:	f04f 0200 	mov.w	r2, #0
   12d7c:	601a      	str	r2, [r3, #0]
   12d7e:	f001 bcc1 	b.w	14704 <auto_nav+0x21a4>
            fly_to(6);
   12d82:	2006      	movs	r0, #6
   12d84:	f001 fe00 	bl	14988 <fly_to>
            auto_pitch = FALSE;
   12d88:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d90:	2200      	movs	r2, #0
   12d92:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12d94:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d9c:	f04f 0200 	mov.w	r2, #0
   12da0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12da2:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12daa:	2203      	movs	r2, #3
   12dac:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12dae:	f240 5378 	movw	r3, #1400	; 0x578
   12db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12db6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12db8:	f240 5374 	movw	r3, #1396	; 0x574
   12dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dc0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12dc2:	f24c 6364 	movw	r3, #50788	; 0xc664
   12dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dca:	f04f 0200 	mov.w	r2, #0
   12dce:	601a      	str	r2, [r3, #0]
          }
          return;
   12dd0:	f001 bc98 	b.w	14704 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12dd4:	f24c 6370 	movw	r3, #50800	; 0xc670
   12dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ddc:	781b      	ldrb	r3, [r3, #0]
   12dde:	2b02      	cmp	r3, #2
   12de0:	d169      	bne.n	12eb6 <auto_nav+0x956>
     {
         nav_stage =2; 
   12de2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dea:	2202      	movs	r2, #2
   12dec:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12dee:	2001      	movs	r0, #1
   12df0:	f001 fc96 	bl	14720 <approaching>
   12df4:	4603      	mov	r3, r0
   12df6:	2b00      	cmp	r3, #0
   12df8:	d034      	beq.n	12e64 <auto_nav+0x904>
   12dfa:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e02:	2201      	movs	r2, #1
   12e04:	701a      	strb	r2, [r3, #0]
   12e06:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e0e:	781b      	ldrb	r3, [r3, #0]
   12e10:	3301      	adds	r3, #1
   12e12:	b2da      	uxtb	r2, r3
   12e14:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e1c:	701a      	strb	r2, [r3, #0]
   12e1e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e26:	681a      	ldr	r2, [r3, #0]
   12e28:	f24c 6374 	movw	r3, #50804	; 0xc674
   12e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e30:	601a      	str	r2, [r3, #0]
   12e32:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e3a:	681a      	ldr	r2, [r3, #0]
   12e3c:	f24c 6378 	movw	r3, #50808	; 0xc678
   12e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e44:	601a      	str	r2, [r3, #0]
   12e46:	f24c 6384 	movw	r3, #50820	; 0xc684
   12e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e4e:	2200      	movs	r2, #0
   12e50:	801a      	strh	r2, [r3, #0]
   12e52:	f24c 6388 	movw	r3, #50824	; 0xc688
   12e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e5a:	f04f 0200 	mov.w	r2, #0
   12e5e:	601a      	str	r2, [r3, #0]
   12e60:	f001 bc50 	b.w	14704 <auto_nav+0x21a4>
            fly_to(1);
   12e64:	2001      	movs	r0, #1
   12e66:	f001 fd8f 	bl	14988 <fly_to>
            auto_pitch = FALSE;
   12e6a:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e72:	2200      	movs	r2, #0
   12e74:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e76:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e7e:	f04f 0200 	mov.w	r2, #0
   12e82:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e84:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e8c:	2203      	movs	r2, #3
   12e8e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12e90:	f240 5378 	movw	r3, #1400	; 0x578
   12e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e98:	695a      	ldr	r2, [r3, #20]
   12e9a:	f240 5374 	movw	r3, #1396	; 0x574
   12e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ea2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ea4:	f24c 6364 	movw	r3, #50788	; 0xc664
   12ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eac:	f04f 0200 	mov.w	r2, #0
   12eb0:	601a      	str	r2, [r3, #0]
          }
          return;
   12eb2:	f001 bc27 	b.w	14704 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12eb6:	f24c 6370 	movw	r3, #50800	; 0xc670
   12eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ebe:	781b      	ldrb	r3, [r3, #0]
   12ec0:	2b03      	cmp	r3, #3
   12ec2:	d16f      	bne.n	12fa4 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12ec4:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ecc:	2203      	movs	r2, #3
   12ece:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12ed0:	2002      	movs	r0, #2
   12ed2:	f001 fc25 	bl	14720 <approaching>
   12ed6:	4603      	mov	r3, r0
   12ed8:	2b00      	cmp	r3, #0
   12eda:	d034      	beq.n	12f46 <auto_nav+0x9e6>
   12edc:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee4:	2202      	movs	r2, #2
   12ee6:	701a      	strb	r2, [r3, #0]
   12ee8:	f24c 6370 	movw	r3, #50800	; 0xc670
   12eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef0:	781b      	ldrb	r3, [r3, #0]
   12ef2:	3301      	adds	r3, #1
   12ef4:	b2da      	uxtb	r2, r3
   12ef6:	f24c 6370 	movw	r3, #50800	; 0xc670
   12efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12efe:	701a      	strb	r2, [r3, #0]
   12f00:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f08:	681a      	ldr	r2, [r3, #0]
   12f0a:	f24c 6374 	movw	r3, #50804	; 0xc674
   12f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f12:	601a      	str	r2, [r3, #0]
   12f14:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f1c:	681a      	ldr	r2, [r3, #0]
   12f1e:	f24c 6378 	movw	r3, #50808	; 0xc678
   12f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f26:	601a      	str	r2, [r3, #0]
   12f28:	f24c 6384 	movw	r3, #50820	; 0xc684
   12f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f30:	2200      	movs	r2, #0
   12f32:	801a      	strh	r2, [r3, #0]
   12f34:	f24c 6388 	movw	r3, #50824	; 0xc688
   12f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f3c:	f04f 0200 	mov.w	r2, #0
   12f40:	601a      	str	r2, [r3, #0]
   12f42:	f001 bbdf 	b.w	14704 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12f46:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f4e:	781b      	ldrb	r3, [r3, #0]
   12f50:	4618      	mov	r0, r3
   12f52:	2102      	movs	r1, #2
   12f54:	f001 fd3a 	bl	149cc <route_to>
            auto_pitch = FALSE;
   12f58:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f60:	2200      	movs	r2, #0
   12f62:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f64:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f6c:	f04f 0200 	mov.w	r2, #0
   12f70:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f72:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f7a:	2203      	movs	r2, #3
   12f7c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12f7e:	f240 5378 	movw	r3, #1400	; 0x578
   12f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f86:	6a1a      	ldr	r2, [r3, #32]
   12f88:	f240 5374 	movw	r3, #1396	; 0x574
   12f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f90:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f92:	f24c 6364 	movw	r3, #50788	; 0xc664
   12f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f9a:	f04f 0200 	mov.w	r2, #0
   12f9e:	601a      	str	r2, [r3, #0]
          }
          return;
   12fa0:	f001 bbb0 	b.w	14704 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12fa4:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fac:	781b      	ldrb	r3, [r3, #0]
   12fae:	2b04      	cmp	r3, #4
   12fb0:	d169      	bne.n	13086 <auto_nav+0xb26>
       {
          nav_stage = 4;
   12fb2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fba:	2204      	movs	r2, #4
   12fbc:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12fbe:	2003      	movs	r0, #3
   12fc0:	f001 fbae 	bl	14720 <approaching>
   12fc4:	4603      	mov	r3, r0
   12fc6:	2b00      	cmp	r3, #0
   12fc8:	d034      	beq.n	13034 <auto_nav+0xad4>
   12fca:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd2:	2203      	movs	r2, #3
   12fd4:	701a      	strb	r2, [r3, #0]
   12fd6:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fde:	781b      	ldrb	r3, [r3, #0]
   12fe0:	3301      	adds	r3, #1
   12fe2:	b2da      	uxtb	r2, r3
   12fe4:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fec:	701a      	strb	r2, [r3, #0]
   12fee:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ff6:	681a      	ldr	r2, [r3, #0]
   12ff8:	f24c 6374 	movw	r3, #50804	; 0xc674
   12ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13000:	601a      	str	r2, [r3, #0]
   13002:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1300a:	681a      	ldr	r2, [r3, #0]
   1300c:	f24c 6378 	movw	r3, #50808	; 0xc678
   13010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13014:	601a      	str	r2, [r3, #0]
   13016:	f24c 6384 	movw	r3, #50820	; 0xc684
   1301a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1301e:	2200      	movs	r2, #0
   13020:	801a      	strh	r2, [r3, #0]
   13022:	f24c 6388 	movw	r3, #50824	; 0xc688
   13026:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1302a:	f04f 0200 	mov.w	r2, #0
   1302e:	601a      	str	r2, [r3, #0]
   13030:	f001 bb68 	b.w	14704 <auto_nav+0x21a4>
            fly_to(3);
   13034:	2003      	movs	r0, #3
   13036:	f001 fca7 	bl	14988 <fly_to>
            auto_pitch = FALSE;
   1303a:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1303e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13042:	2200      	movs	r2, #0
   13044:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13046:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1304a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1304e:	f04f 0200 	mov.w	r2, #0
   13052:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13054:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1305c:	2203      	movs	r2, #3
   1305e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   13060:	f240 5378 	movw	r3, #1400	; 0x578
   13064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1306a:	f240 5374 	movw	r3, #1396	; 0x574
   1306e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13072:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13074:	f24c 6364 	movw	r3, #50788	; 0xc664
   13078:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1307c:	f04f 0200 	mov.w	r2, #0
   13080:	601a      	str	r2, [r3, #0]
          }
          return;
   13082:	f001 bb3f 	b.w	14704 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   13086:	f24c 6370 	movw	r3, #50800	; 0xc670
   1308a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1308e:	781b      	ldrb	r3, [r3, #0]
   13090:	2b05      	cmp	r3, #5
   13092:	d169      	bne.n	13168 <auto_nav+0xc08>
       {
          nav_stage =5;
   13094:	f24c 6370 	movw	r3, #50800	; 0xc670
   13098:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1309c:	2205      	movs	r2, #5
   1309e:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   130a0:	2004      	movs	r0, #4
   130a2:	f001 fb3d 	bl	14720 <approaching>
   130a6:	4603      	mov	r3, r0
   130a8:	2b00      	cmp	r3, #0
   130aa:	d034      	beq.n	13116 <auto_nav+0xbb6>
   130ac:	f24c 637c 	movw	r3, #50812	; 0xc67c
   130b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b4:	2204      	movs	r2, #4
   130b6:	701a      	strb	r2, [r3, #0]
   130b8:	f24c 6370 	movw	r3, #50800	; 0xc670
   130bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c0:	781b      	ldrb	r3, [r3, #0]
   130c2:	3301      	adds	r3, #1
   130c4:	b2da      	uxtb	r2, r3
   130c6:	f24c 6370 	movw	r3, #50800	; 0xc670
   130ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ce:	701a      	strb	r2, [r3, #0]
   130d0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   130d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130d8:	681a      	ldr	r2, [r3, #0]
   130da:	f24c 6374 	movw	r3, #50804	; 0xc674
   130de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e2:	601a      	str	r2, [r3, #0]
   130e4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   130e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ec:	681a      	ldr	r2, [r3, #0]
   130ee:	f24c 6378 	movw	r3, #50808	; 0xc678
   130f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f6:	601a      	str	r2, [r3, #0]
   130f8:	f24c 6384 	movw	r3, #50820	; 0xc684
   130fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13100:	2200      	movs	r2, #0
   13102:	801a      	strh	r2, [r3, #0]
   13104:	f24c 6388 	movw	r3, #50824	; 0xc688
   13108:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1310c:	f04f 0200 	mov.w	r2, #0
   13110:	601a      	str	r2, [r3, #0]
   13112:	f001 baf7 	b.w	14704 <auto_nav+0x21a4>
            fly_to(4);
   13116:	2004      	movs	r0, #4
   13118:	f001 fc36 	bl	14988 <fly_to>
            auto_pitch = FALSE;
   1311c:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13120:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13124:	2200      	movs	r2, #0
   13126:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13128:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1312c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13130:	f04f 0200 	mov.w	r2, #0
   13134:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13136:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   1313a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1313e:	2203      	movs	r2, #3
   13140:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   13142:	f240 5378 	movw	r3, #1400	; 0x578
   13146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1314a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1314c:	f240 5374 	movw	r3, #1396	; 0x574
   13150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13154:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13156:	f24c 6364 	movw	r3, #50788	; 0xc664
   1315a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1315e:	f04f 0200 	mov.w	r2, #0
   13162:	601a      	str	r2, [r3, #0]
          }
          return;
   13164:	f001 bace 	b.w	14704 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13168:	f24c 6370 	movw	r3, #50800	; 0xc670
   1316c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13170:	781b      	ldrb	r3, [r3, #0]
   13172:	2b06      	cmp	r3, #6
   13174:	d16f      	bne.n	13256 <auto_nav+0xcf6>
       {
          nav_stage =6;
   13176:	f24c 6370 	movw	r3, #50800	; 0xc670
   1317a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1317e:	2206      	movs	r2, #6
   13180:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   13182:	2005      	movs	r0, #5
   13184:	f001 facc 	bl	14720 <approaching>
   13188:	4603      	mov	r3, r0
   1318a:	2b00      	cmp	r3, #0
   1318c:	d034      	beq.n	131f8 <auto_nav+0xc98>
   1318e:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13192:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13196:	2205      	movs	r2, #5
   13198:	701a      	strb	r2, [r3, #0]
   1319a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1319e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a2:	781b      	ldrb	r3, [r3, #0]
   131a4:	3301      	adds	r3, #1
   131a6:	b2da      	uxtb	r2, r3
   131a8:	f24c 6370 	movw	r3, #50800	; 0xc670
   131ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b0:	701a      	strb	r2, [r3, #0]
   131b2:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   131b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ba:	681a      	ldr	r2, [r3, #0]
   131bc:	f24c 6374 	movw	r3, #50804	; 0xc674
   131c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c4:	601a      	str	r2, [r3, #0]
   131c6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   131ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ce:	681a      	ldr	r2, [r3, #0]
   131d0:	f24c 6378 	movw	r3, #50808	; 0xc678
   131d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d8:	601a      	str	r2, [r3, #0]
   131da:	f24c 6384 	movw	r3, #50820	; 0xc684
   131de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e2:	2200      	movs	r2, #0
   131e4:	801a      	strh	r2, [r3, #0]
   131e6:	f24c 6388 	movw	r3, #50824	; 0xc688
   131ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ee:	f04f 0200 	mov.w	r2, #0
   131f2:	601a      	str	r2, [r3, #0]
   131f4:	f001 ba86 	b.w	14704 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   131f8:	f24c 637c 	movw	r3, #50812	; 0xc67c
   131fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13200:	781b      	ldrb	r3, [r3, #0]
   13202:	4618      	mov	r0, r3
   13204:	2105      	movs	r1, #5
   13206:	f001 fbe1 	bl	149cc <route_to>
            auto_pitch = FALSE;
   1320a:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1320e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13212:	2200      	movs	r2, #0
   13214:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13216:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1321a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1321e:	f04f 0200 	mov.w	r2, #0
   13222:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13224:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13228:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1322c:	2203      	movs	r2, #3
   1322e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13230:	f240 5378 	movw	r3, #1400	; 0x578
   13234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1323a:	f240 5374 	movw	r3, #1396	; 0x574
   1323e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13242:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13244:	f24c 6364 	movw	r3, #50788	; 0xc664
   13248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1324c:	f04f 0200 	mov.w	r2, #0
   13250:	601a      	str	r2, [r3, #0]
          }
          return;
   13252:	f001 ba57 	b.w	14704 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   13256:	f24c 6370 	movw	r3, #50800	; 0xc670
   1325a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1325e:	781b      	ldrb	r3, [r3, #0]
   13260:	2b07      	cmp	r3, #7
   13262:	d106      	bne.n	13272 <auto_nav+0xd12>
       {
	   nav_stage =7;
   13264:	f24c 6370 	movw	r3, #50800	; 0xc670
   13268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1326c:	2207      	movs	r2, #7
   1326e:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13270:	e50a      	b.n	12c88 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   13272:	f24c 6370 	movw	r3, #50800	; 0xc670
   13276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1327a:	781b      	ldrb	r3, [r3, #0]
   1327c:	2b08      	cmp	r3, #8
   1327e:	f041 8241 	bne.w	14704 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   13282:	f24c 6370 	movw	r3, #50800	; 0xc670
   13286:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1328a:	2208      	movs	r2, #8
   1328c:	701a      	strb	r2, [r3, #0]
          NextBlock();
   1328e:	f24c 6371 	movw	r3, #50801	; 0xc671
   13292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13296:	781b      	ldrb	r3, [r3, #0]
   13298:	3301      	adds	r3, #1
   1329a:	b2da      	uxtb	r2, r3
   1329c:	f24c 6371 	movw	r3, #50801	; 0xc671
   132a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132a4:	701a      	strb	r2, [r3, #0]
   132a6:	f24c 6370 	movw	r3, #50800	; 0xc670
   132aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ae:	2200      	movs	r2, #0
   132b0:	701a      	strb	r2, [r3, #0]
   132b2:	f24c 6386 	movw	r3, #50822	; 0xc686
   132b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ba:	2200      	movs	r2, #0
   132bc:	801a      	strh	r2, [r3, #0]
   132be:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   132c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132c6:	681a      	ldr	r2, [r3, #0]
   132c8:	f24c 6374 	movw	r3, #50804	; 0xc674
   132cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132d0:	601a      	str	r2, [r3, #0]
   132d2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   132d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132da:	681a      	ldr	r2, [r3, #0]
   132dc:	f24c 6378 	movw	r3, #50808	; 0xc678
   132e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132e4:	601a      	str	r2, [r3, #0]
   132e6:	f24c 6384 	movw	r3, #50820	; 0xc684
   132ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ee:	2200      	movs	r2, #0
   132f0:	801a      	strh	r2, [r3, #0]
   132f2:	f24c 6388 	movw	r3, #50824	; 0xc688
   132f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132fa:	f04f 0200 	mov.w	r2, #0
   132fe:	601a      	str	r2, [r3, #0]
   13300:	f001 ba00 	b.w	14704 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   13304:	f24c 6371 	movw	r3, #50801	; 0xc671
   13308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1330c:	781b      	ldrb	r3, [r3, #0]
   1330e:	2b03      	cmp	r3, #3
   13310:	f040 8388 	bne.w	13a24 <auto_nav+0x14c4>
{
    nav_block = 3;
   13314:	f24c 6371 	movw	r3, #50801	; 0xc671
   13318:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1331c:	2203      	movs	r2, #3
   1331e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13320:	f24c 3300 	movw	r3, #49920	; 0xc300
   13324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13328:	781b      	ldrb	r3, [r3, #0]
   1332a:	2b00      	cmp	r3, #0
   1332c:	d007      	beq.n	1333e <auto_nav+0xdde>
   1332e:	f24c 3300 	movw	r3, #49920	; 0xc300
   13332:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13336:	2200      	movs	r2, #0
   13338:	701a      	strb	r2, [r3, #0]
   1333a:	2301      	movs	r3, #1
   1333c:	e000      	b.n	13340 <auto_nav+0xde0>
   1333e:	2300      	movs	r3, #0
   13340:	2b00      	cmp	r3, #0
   13342:	d034      	beq.n	133ae <auto_nav+0xe4e>
   13344:	f24c 6371 	movw	r3, #50801	; 0xc671
   13348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1334c:	2204      	movs	r2, #4
   1334e:	701a      	strb	r2, [r3, #0]
   13350:	f24c 6370 	movw	r3, #50800	; 0xc670
   13354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13358:	2200      	movs	r2, #0
   1335a:	701a      	strb	r2, [r3, #0]
   1335c:	f24c 6386 	movw	r3, #50822	; 0xc686
   13360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13364:	2200      	movs	r2, #0
   13366:	801a      	strh	r2, [r3, #0]
   13368:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1336c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13370:	681a      	ldr	r2, [r3, #0]
   13372:	f24c 6374 	movw	r3, #50804	; 0xc674
   13376:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1337a:	601a      	str	r2, [r3, #0]
   1337c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13384:	681a      	ldr	r2, [r3, #0]
   13386:	f24c 6378 	movw	r3, #50808	; 0xc678
   1338a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1338e:	601a      	str	r2, [r3, #0]
   13390:	f24c 6384 	movw	r3, #50820	; 0xc684
   13394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13398:	2200      	movs	r2, #0
   1339a:	801a      	strh	r2, [r3, #0]
   1339c:	f24c 6388 	movw	r3, #50824	; 0xc688
   133a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133a4:	f04f 0200 	mov.w	r2, #0
   133a8:	601a      	str	r2, [r3, #0]
   133aa:	f001 b9ab 	b.w	14704 <auto_nav+0x21a4>
    if(nav_stage == 0)
   133ae:	f24c 6370 	movw	r3, #50800	; 0xc670
   133b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b6:	781b      	ldrb	r3, [r3, #0]
   133b8:	2b00      	cmp	r3, #0
   133ba:	f040 82ea 	bne.w	13992 <auto_nav+0x1432>
    {
        nav_stage = 0;
   133be:	f24c 6370 	movw	r3, #50800	; 0xc670
   133c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133c6:	2200      	movs	r2, #0
   133c8:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   133ca:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   133ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133d2:	781b      	ldrb	r3, [r3, #0]
   133d4:	2b02      	cmp	r3, #2
   133d6:	f040 81a5 	bne.w	13724 <auto_nav+0x11c4>
   133da:	f24c 4320 	movw	r3, #50208	; 0xc420
   133de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133e2:	88db      	ldrh	r3, [r3, #6]
   133e4:	84fb      	strh	r3, [r7, #38]	; 0x26
   133e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   133ea:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   133ee:	dc04      	bgt.n	133fa <auto_nav+0xe9a>
   133f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   133f4:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   133f8:	da7e      	bge.n	134f8 <auto_nav+0xf98>
   133fa:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   133fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13402:	681b      	ldr	r3, [r3, #0]
   13404:	4618      	mov	r0, r3
   13406:	f004 faef 	bl	179e8 <__aeabi_f2d>
   1340a:	4604      	mov	r4, r0
   1340c:	460d      	mov	r5, r1
   1340e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13412:	4618      	mov	r0, r3
   13414:	f004 ff28 	bl	18268 <__aeabi_i2f>
   13418:	4603      	mov	r3, r0
   1341a:	4618      	mov	r0, r3
   1341c:	f04f 0100 	mov.w	r1, #0
   13420:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13424:	f005 f828 	bl	18478 <__aeabi_fdiv>
   13428:	4603      	mov	r3, r0
   1342a:	4618      	mov	r0, r3
   1342c:	f004 fadc 	bl	179e8 <__aeabi_f2d>
   13430:	4602      	mov	r2, r0
   13432:	460b      	mov	r3, r1
   13434:	4610      	mov	r0, r2
   13436:	4619      	mov	r1, r3
   13438:	f04f 0200 	mov.w	r2, #0
   1343c:	f04f 0300 	mov.w	r3, #0
   13440:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13444:	f004 fb24 	bl	17a90 <__aeabi_dmul>
   13448:	4602      	mov	r2, r0
   1344a:	460b      	mov	r3, r1
   1344c:	4610      	mov	r0, r2
   1344e:	4619      	mov	r1, r3
   13450:	f04f 0200 	mov.w	r2, #0
   13454:	f04f 0300 	mov.w	r3, #0
   13458:	f004 f968 	bl	1772c <__adddf3>
   1345c:	4602      	mov	r2, r0
   1345e:	460b      	mov	r3, r1
   13460:	4620      	mov	r0, r4
   13462:	4629      	mov	r1, r5
   13464:	f004 f962 	bl	1772c <__adddf3>
   13468:	4602      	mov	r2, r0
   1346a:	460b      	mov	r3, r1
   1346c:	4610      	mov	r0, r2
   1346e:	4619      	mov	r1, r3
   13470:	f004 fdf0 	bl	18054 <__aeabi_d2f>
   13474:	4602      	mov	r2, r0
   13476:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1347a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1347e:	601a      	str	r2, [r3, #0]
   13480:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13488:	681b      	ldr	r3, [r3, #0]
   1348a:	4618      	mov	r0, r3
   1348c:	f04f 0100 	mov.w	r1, #0
   13490:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13494:	f005 f8e4 	bl	18660 <__aeabi_fcmple>
   13498:	4603      	mov	r3, r0
   1349a:	2b00      	cmp	r3, #0
   1349c:	d005      	beq.n	134aa <auto_nav+0xf4a>
   1349e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134a6:	681a      	ldr	r2, [r3, #0]
   134a8:	e003      	b.n	134b2 <auto_nav+0xf52>
   134aa:	f04f 0200 	mov.w	r2, #0
   134ae:	f2c4 327a 	movt	r2, #17274	; 0x437a
   134b2:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ba:	601a      	str	r2, [r3, #0]
   134bc:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134c4:	681b      	ldr	r3, [r3, #0]
   134c6:	4618      	mov	r0, r3
   134c8:	f04f 0100 	mov.w	r1, #0
   134cc:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   134d0:	f005 f8d0 	bl	18674 <__aeabi_fcmpge>
   134d4:	4603      	mov	r3, r0
   134d6:	2b00      	cmp	r3, #0
   134d8:	d005      	beq.n	134e6 <auto_nav+0xf86>
   134da:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134e2:	681a      	ldr	r2, [r3, #0]
   134e4:	e003      	b.n	134ee <auto_nav+0xf8e>
   134e6:	f04f 0200 	mov.w	r2, #0
   134ea:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   134ee:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134f6:	601a      	str	r2, [r3, #0]
   134f8:	f24c 4320 	movw	r3, #50208	; 0xc420
   134fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13500:	889b      	ldrh	r3, [r3, #4]
   13502:	84bb      	strh	r3, [r7, #36]	; 0x24
   13504:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13508:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1350c:	dc04      	bgt.n	13518 <auto_nav+0xfb8>
   1350e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13512:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13516:	da7e      	bge.n	13616 <auto_nav+0x10b6>
   13518:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1351c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13520:	681b      	ldr	r3, [r3, #0]
   13522:	4618      	mov	r0, r3
   13524:	f004 fa60 	bl	179e8 <__aeabi_f2d>
   13528:	4604      	mov	r4, r0
   1352a:	460d      	mov	r5, r1
   1352c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13530:	4618      	mov	r0, r3
   13532:	f004 fe99 	bl	18268 <__aeabi_i2f>
   13536:	4603      	mov	r3, r0
   13538:	4618      	mov	r0, r3
   1353a:	f04f 0100 	mov.w	r1, #0
   1353e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13542:	f004 ff99 	bl	18478 <__aeabi_fdiv>
   13546:	4603      	mov	r3, r0
   13548:	4618      	mov	r0, r3
   1354a:	f004 fa4d 	bl	179e8 <__aeabi_f2d>
   1354e:	4602      	mov	r2, r0
   13550:	460b      	mov	r3, r1
   13552:	4610      	mov	r0, r2
   13554:	4619      	mov	r1, r3
   13556:	f04f 0200 	mov.w	r2, #0
   1355a:	f04f 0300 	mov.w	r3, #0
   1355e:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13562:	f004 fa95 	bl	17a90 <__aeabi_dmul>
   13566:	4602      	mov	r2, r0
   13568:	460b      	mov	r3, r1
   1356a:	4610      	mov	r0, r2
   1356c:	4619      	mov	r1, r3
   1356e:	f04f 0200 	mov.w	r2, #0
   13572:	f04f 0300 	mov.w	r3, #0
   13576:	f004 f8d9 	bl	1772c <__adddf3>
   1357a:	4602      	mov	r2, r0
   1357c:	460b      	mov	r3, r1
   1357e:	4620      	mov	r0, r4
   13580:	4629      	mov	r1, r5
   13582:	f004 f8d3 	bl	1772c <__adddf3>
   13586:	4602      	mov	r2, r0
   13588:	460b      	mov	r3, r1
   1358a:	4610      	mov	r0, r2
   1358c:	4619      	mov	r1, r3
   1358e:	f004 fd61 	bl	18054 <__aeabi_d2f>
   13592:	4602      	mov	r2, r0
   13594:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1359c:	601a      	str	r2, [r3, #0]
   1359e:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135a6:	681b      	ldr	r3, [r3, #0]
   135a8:	4618      	mov	r0, r3
   135aa:	f04f 0100 	mov.w	r1, #0
   135ae:	f2c4 317a 	movt	r1, #17274	; 0x437a
   135b2:	f005 f855 	bl	18660 <__aeabi_fcmple>
   135b6:	4603      	mov	r3, r0
   135b8:	2b00      	cmp	r3, #0
   135ba:	d005      	beq.n	135c8 <auto_nav+0x1068>
   135bc:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135c4:	681a      	ldr	r2, [r3, #0]
   135c6:	e003      	b.n	135d0 <auto_nav+0x1070>
   135c8:	f04f 0200 	mov.w	r2, #0
   135cc:	f2c4 327a 	movt	r2, #17274	; 0x437a
   135d0:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135d8:	601a      	str	r2, [r3, #0]
   135da:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135e2:	681b      	ldr	r3, [r3, #0]
   135e4:	4618      	mov	r0, r3
   135e6:	f04f 0100 	mov.w	r1, #0
   135ea:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   135ee:	f005 f841 	bl	18674 <__aeabi_fcmpge>
   135f2:	4603      	mov	r3, r0
   135f4:	2b00      	cmp	r3, #0
   135f6:	d005      	beq.n	13604 <auto_nav+0x10a4>
   135f8:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13600:	681a      	ldr	r2, [r3, #0]
   13602:	e003      	b.n	1360c <auto_nav+0x10ac>
   13604:	f04f 0200 	mov.w	r2, #0
   13608:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   1360c:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13610:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13614:	601a      	str	r2, [r3, #0]
   13616:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   1361a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1361e:	2203      	movs	r2, #3
   13620:	701a      	strb	r2, [r3, #0]
   13622:	f24c 4320 	movw	r3, #50208	; 0xc420
   13626:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1362a:	885b      	ldrh	r3, [r3, #2]
   1362c:	847b      	strh	r3, [r7, #34]	; 0x22
   1362e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13632:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13636:	dc04      	bgt.n	13642 <auto_nav+0x10e2>
   13638:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1363c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13640:	da70      	bge.n	13724 <auto_nav+0x11c4>
   13642:	f240 5374 	movw	r3, #1396	; 0x574
   13646:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1364a:	681b      	ldr	r3, [r3, #0]
   1364c:	4618      	mov	r0, r3
   1364e:	f004 f9cb 	bl	179e8 <__aeabi_f2d>
   13652:	4604      	mov	r4, r0
   13654:	460d      	mov	r5, r1
   13656:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1365a:	4618      	mov	r0, r3
   1365c:	f004 fe04 	bl	18268 <__aeabi_i2f>
   13660:	4603      	mov	r3, r0
   13662:	4618      	mov	r0, r3
   13664:	f04f 0100 	mov.w	r1, #0
   13668:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1366c:	f004 ff04 	bl	18478 <__aeabi_fdiv>
   13670:	4603      	mov	r3, r0
   13672:	4618      	mov	r0, r3
   13674:	f004 f9b8 	bl	179e8 <__aeabi_f2d>
   13678:	4602      	mov	r2, r0
   1367a:	460b      	mov	r3, r1
   1367c:	f04f 0000 	mov.w	r0, #0
   13680:	f04f 0100 	mov.w	r1, #0
   13684:	f004 f850 	bl	17728 <__aeabi_dsub>
   13688:	4602      	mov	r2, r0
   1368a:	460b      	mov	r3, r1
   1368c:	4620      	mov	r0, r4
   1368e:	4629      	mov	r1, r5
   13690:	f004 f84c 	bl	1772c <__adddf3>
   13694:	4602      	mov	r2, r0
   13696:	460b      	mov	r3, r1
   13698:	4610      	mov	r0, r2
   1369a:	4619      	mov	r1, r3
   1369c:	f004 fcda 	bl	18054 <__aeabi_d2f>
   136a0:	4602      	mov	r2, r0
   136a2:	f240 5374 	movw	r3, #1396	; 0x574
   136a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136aa:	601a      	str	r2, [r3, #0]
   136ac:	f240 5374 	movw	r3, #1396	; 0x574
   136b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136b4:	681b      	ldr	r3, [r3, #0]
   136b6:	4618      	mov	r0, r3
   136b8:	f04f 0100 	mov.w	r1, #0
   136bc:	f2c4 312f 	movt	r1, #17199	; 0x432f
   136c0:	f004 ffd8 	bl	18674 <__aeabi_fcmpge>
   136c4:	4603      	mov	r3, r0
   136c6:	2b00      	cmp	r3, #0
   136c8:	d005      	beq.n	136d6 <auto_nav+0x1176>
   136ca:	f240 5374 	movw	r3, #1396	; 0x574
   136ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136d2:	681a      	ldr	r2, [r3, #0]
   136d4:	e003      	b.n	136de <auto_nav+0x117e>
   136d6:	f04f 0200 	mov.w	r2, #0
   136da:	f2c4 322f 	movt	r2, #17199	; 0x432f
   136de:	f240 5374 	movw	r3, #1396	; 0x574
   136e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136e6:	601a      	str	r2, [r3, #0]
   136e8:	f240 5374 	movw	r3, #1396	; 0x574
   136ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136f0:	681b      	ldr	r3, [r3, #0]
   136f2:	4618      	mov	r0, r3
   136f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   136f8:	f2c4 3189 	movt	r1, #17289	; 0x4389
   136fc:	f004 ffb0 	bl	18660 <__aeabi_fcmple>
   13700:	4603      	mov	r3, r0
   13702:	2b00      	cmp	r3, #0
   13704:	d005      	beq.n	13712 <auto_nav+0x11b2>
   13706:	f240 5374 	movw	r3, #1396	; 0x574
   1370a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1370e:	681a      	ldr	r2, [r3, #0]
   13710:	e003      	b.n	1371a <auto_nav+0x11ba>
   13712:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13716:	f2c4 3289 	movt	r2, #17289	; 0x4389
   1371a:	f240 5374 	movw	r3, #1396	; 0x574
   1371e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13722:	601a      	str	r2, [r3, #0]
   13724:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1372c:	681a      	ldr	r2, [r3, #0]
   1372e:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13736:	681b      	ldr	r3, [r3, #0]
   13738:	4610      	mov	r0, r2
   1373a:	4619      	mov	r1, r3
   1373c:	f004 fcde 	bl	180fc <__aeabi_fsub>
   13740:	4603      	mov	r3, r0
   13742:	4618      	mov	r0, r3
   13744:	f004 f950 	bl	179e8 <__aeabi_f2d>
   13748:	4604      	mov	r4, r0
   1374a:	460d      	mov	r5, r1
   1374c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13754:	681a      	ldr	r2, [r3, #0]
   13756:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1375a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1375e:	681b      	ldr	r3, [r3, #0]
   13760:	4610      	mov	r0, r2
   13762:	4619      	mov	r1, r3
   13764:	f004 fcca 	bl	180fc <__aeabi_fsub>
   13768:	4603      	mov	r3, r0
   1376a:	4618      	mov	r0, r3
   1376c:	f004 f93c 	bl	179e8 <__aeabi_f2d>
   13770:	4602      	mov	r2, r0
   13772:	460b      	mov	r3, r1
   13774:	4620      	mov	r0, r4
   13776:	4629      	mov	r1, r5
   13778:	f002 fa12 	bl	15ba0 <pp_atan2>
   1377c:	4602      	mov	r2, r0
   1377e:	460b      	mov	r3, r1
   13780:	4610      	mov	r0, r2
   13782:	4619      	mov	r1, r3
   13784:	f004 fc66 	bl	18054 <__aeabi_d2f>
   13788:	4603      	mov	r3, r0
   1378a:	61fb      	str	r3, [r7, #28]
   1378c:	69f8      	ldr	r0, [r7, #28]
   1378e:	f004 f92b 	bl	179e8 <__aeabi_f2d>
   13792:	4604      	mov	r4, r0
   13794:	460d      	mov	r5, r1
   13796:	f64c 1304 	movw	r3, #51460	; 0xc904
   1379a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1379e:	681b      	ldr	r3, [r3, #0]
   137a0:	4618      	mov	r0, r3
   137a2:	f04f 0100 	mov.w	r1, #0
   137a6:	f2cc 2148 	movt	r1, #49736	; 0xc248
   137aa:	f004 fdb1 	bl	18310 <__aeabi_fmul>
   137ae:	4603      	mov	r3, r0
   137b0:	4618      	mov	r0, r3
   137b2:	f004 f919 	bl	179e8 <__aeabi_f2d>
   137b6:	4602      	mov	r2, r0
   137b8:	460b      	mov	r3, r1
   137ba:	f04f 0000 	mov.w	r0, #0
   137be:	f04f 0100 	mov.w	r1, #0
   137c2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   137c6:	f004 fa8d 	bl	17ce4 <__aeabi_ddiv>
   137ca:	4602      	mov	r2, r0
   137cc:	460b      	mov	r3, r1
   137ce:	4620      	mov	r0, r4
   137d0:	4629      	mov	r1, r5
   137d2:	f003 ffab 	bl	1772c <__adddf3>
   137d6:	4602      	mov	r2, r0
   137d8:	460b      	mov	r3, r1
   137da:	4610      	mov	r0, r2
   137dc:	4619      	mov	r1, r3
   137de:	f004 fc39 	bl	18054 <__aeabi_d2f>
   137e2:	4603      	mov	r3, r0
   137e4:	61bb      	str	r3, [r7, #24]
   137e6:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   137ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137ee:	681b      	ldr	r3, [r3, #0]
   137f0:	4618      	mov	r0, r3
   137f2:	f004 f8f9 	bl	179e8 <__aeabi_f2d>
   137f6:	4604      	mov	r4, r0
   137f8:	460d      	mov	r5, r1
   137fa:	69b8      	ldr	r0, [r7, #24]
   137fc:	f004 f8f4 	bl	179e8 <__aeabi_f2d>
   13800:	4602      	mov	r2, r0
   13802:	460b      	mov	r3, r1
   13804:	4610      	mov	r0, r2
   13806:	4619      	mov	r1, r3
   13808:	a3b1      	add	r3, pc, #708	; (adr r3, 13ad0 <auto_nav+0x1570>)
   1380a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1380e:	f003 ff8d 	bl	1772c <__adddf3>
   13812:	4602      	mov	r2, r0
   13814:	460b      	mov	r3, r1
   13816:	4610      	mov	r0, r2
   13818:	4619      	mov	r1, r3
   1381a:	f002 fa81 	bl	15d20 <pp_sin>
   1381e:	4602      	mov	r2, r0
   13820:	460b      	mov	r3, r1
   13822:	4610      	mov	r0, r2
   13824:	4619      	mov	r1, r3
   13826:	f04f 0200 	mov.w	r2, #0
   1382a:	f04f 0300 	mov.w	r3, #0
   1382e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13832:	f004 f92d 	bl	17a90 <__aeabi_dmul>
   13836:	4602      	mov	r2, r0
   13838:	460b      	mov	r3, r1
   1383a:	4620      	mov	r0, r4
   1383c:	4629      	mov	r1, r5
   1383e:	f003 ff75 	bl	1772c <__adddf3>
   13842:	4602      	mov	r2, r0
   13844:	460b      	mov	r3, r1
   13846:	4610      	mov	r0, r2
   13848:	4619      	mov	r1, r3
   1384a:	f004 fc03 	bl	18054 <__aeabi_d2f>
   1384e:	4606      	mov	r6, r0
   13850:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13858:	681b      	ldr	r3, [r3, #0]
   1385a:	4618      	mov	r0, r3
   1385c:	f004 f8c4 	bl	179e8 <__aeabi_f2d>
   13860:	4604      	mov	r4, r0
   13862:	460d      	mov	r5, r1
   13864:	69b8      	ldr	r0, [r7, #24]
   13866:	f004 f8bf 	bl	179e8 <__aeabi_f2d>
   1386a:	4602      	mov	r2, r0
   1386c:	460b      	mov	r3, r1
   1386e:	4610      	mov	r0, r2
   13870:	4619      	mov	r1, r3
   13872:	f002 fa55 	bl	15d20 <pp_sin>
   13876:	4602      	mov	r2, r0
   13878:	460b      	mov	r3, r1
   1387a:	4610      	mov	r0, r2
   1387c:	4619      	mov	r1, r3
   1387e:	f04f 0200 	mov.w	r2, #0
   13882:	f04f 0300 	mov.w	r3, #0
   13886:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1388a:	f004 f901 	bl	17a90 <__aeabi_dmul>
   1388e:	4602      	mov	r2, r0
   13890:	460b      	mov	r3, r1
   13892:	4620      	mov	r0, r4
   13894:	4629      	mov	r1, r5
   13896:	f003 ff49 	bl	1772c <__adddf3>
   1389a:	4602      	mov	r2, r0
   1389c:	460b      	mov	r3, r1
   1389e:	4610      	mov	r0, r2
   138a0:	4619      	mov	r1, r3
   138a2:	f004 fbd7 	bl	18054 <__aeabi_d2f>
   138a6:	4603      	mov	r3, r0
   138a8:	4630      	mov	r0, r6
   138aa:	4619      	mov	r1, r3
   138ac:	f001 f81c 	bl	148e8 <fly_to_xy>
   138b0:	69b8      	ldr	r0, [r7, #24]
   138b2:	f004 f899 	bl	179e8 <__aeabi_f2d>
   138b6:	4602      	mov	r2, r0
   138b8:	460b      	mov	r3, r1
   138ba:	a185      	add	r1, pc, #532	; (adr r1, 13ad0 <auto_nav+0x1570>)
   138bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   138c0:	f003 ff32 	bl	17728 <__aeabi_dsub>
   138c4:	4602      	mov	r2, r0
   138c6:	460b      	mov	r3, r1
   138c8:	4610      	mov	r0, r2
   138ca:	4619      	mov	r1, r3
   138cc:	a382      	add	r3, pc, #520	; (adr r3, 13ad8 <auto_nav+0x1578>)
   138ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   138d2:	f004 fa07 	bl	17ce4 <__aeabi_ddiv>
   138d6:	4602      	mov	r2, r0
   138d8:	460b      	mov	r3, r1
   138da:	4610      	mov	r0, r2
   138dc:	4619      	mov	r1, r3
   138de:	f04f 0200 	mov.w	r2, #0
   138e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   138e6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   138ea:	f004 f8d1 	bl	17a90 <__aeabi_dmul>
   138ee:	4602      	mov	r2, r0
   138f0:	460b      	mov	r3, r1
   138f2:	4610      	mov	r0, r2
   138f4:	4619      	mov	r1, r3
   138f6:	f004 fbad 	bl	18054 <__aeabi_d2f>
   138fa:	4602      	mov	r2, r0
   138fc:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13904:	601a      	str	r2, [r3, #0]
   13906:	e012      	b.n	1392e <auto_nav+0x13ce>
   13908:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1390c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13910:	681b      	ldr	r3, [r3, #0]
   13912:	4618      	mov	r0, r3
   13914:	f04f 0100 	mov.w	r1, #0
   13918:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1391c:	f004 fbf0 	bl	18100 <__addsf3>
   13920:	4603      	mov	r3, r0
   13922:	461a      	mov	r2, r3
   13924:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1392c:	601a      	str	r2, [r3, #0]
   1392e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13932:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13936:	681b      	ldr	r3, [r3, #0]
   13938:	4618      	mov	r0, r3
   1393a:	f04f 0100 	mov.w	r1, #0
   1393e:	f004 fe85 	bl	1864c <__aeabi_fcmplt>
   13942:	4603      	mov	r3, r0
   13944:	2b00      	cmp	r3, #0
   13946:	d1df      	bne.n	13908 <auto_nav+0x13a8>
   13948:	e012      	b.n	13970 <auto_nav+0x1410>
   1394a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1394e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13952:	681b      	ldr	r3, [r3, #0]
   13954:	4618      	mov	r0, r3
   13956:	f04f 0100 	mov.w	r1, #0
   1395a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1395e:	f004 fbcd 	bl	180fc <__aeabi_fsub>
   13962:	4603      	mov	r3, r0
   13964:	461a      	mov	r2, r3
   13966:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1396a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1396e:	601a      	str	r2, [r3, #0]
   13970:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13974:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13978:	681b      	ldr	r3, [r3, #0]
   1397a:	4618      	mov	r0, r3
   1397c:	f04f 0100 	mov.w	r1, #0
   13980:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13984:	f004 fe76 	bl	18674 <__aeabi_fcmpge>
   13988:	4603      	mov	r3, r0
   1398a:	2b00      	cmp	r3, #0
   1398c:	d1dd      	bne.n	1394a <auto_nav+0x13ea>
        return;
   1398e:	f000 beb9 	b.w	14704 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13992:	f24c 6370 	movw	r3, #50800	; 0xc670
   13996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1399a:	781b      	ldrb	r3, [r3, #0]
   1399c:	2b01      	cmp	r3, #1
   1399e:	f040 86b1 	bne.w	14704 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   139a2:	f24c 6370 	movw	r3, #50800	; 0xc670
   139a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139aa:	2201      	movs	r2, #1
   139ac:	701a      	strb	r2, [r3, #0]
        NextBlock()
   139ae:	f24c 6371 	movw	r3, #50801	; 0xc671
   139b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139b6:	781b      	ldrb	r3, [r3, #0]
   139b8:	3301      	adds	r3, #1
   139ba:	b2da      	uxtb	r2, r3
   139bc:	f24c 6371 	movw	r3, #50801	; 0xc671
   139c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139c4:	701a      	strb	r2, [r3, #0]
   139c6:	f24c 6370 	movw	r3, #50800	; 0xc670
   139ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139ce:	2200      	movs	r2, #0
   139d0:	701a      	strb	r2, [r3, #0]
   139d2:	f24c 6386 	movw	r3, #50822	; 0xc686
   139d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139da:	2200      	movs	r2, #0
   139dc:	801a      	strh	r2, [r3, #0]
   139de:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   139e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139e6:	681a      	ldr	r2, [r3, #0]
   139e8:	f24c 6374 	movw	r3, #50804	; 0xc674
   139ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139f0:	601a      	str	r2, [r3, #0]
   139f2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   139f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139fa:	681a      	ldr	r2, [r3, #0]
   139fc:	f24c 6378 	movw	r3, #50808	; 0xc678
   13a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a04:	601a      	str	r2, [r3, #0]
   13a06:	f24c 6384 	movw	r3, #50820	; 0xc684
   13a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a0e:	2200      	movs	r2, #0
   13a10:	801a      	strh	r2, [r3, #0]
   13a12:	f24c 6388 	movw	r3, #50824	; 0xc688
   13a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a1a:	f04f 0200 	mov.w	r2, #0
   13a1e:	601a      	str	r2, [r3, #0]
   13a20:	f000 be70 	b.w	14704 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13a24:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a2c:	781b      	ldrb	r3, [r3, #0]
   13a2e:	2b04      	cmp	r3, #4
   13a30:	f040 8202 	bne.w	13e38 <auto_nav+0x18d8>
{
    nav_block = 4;
   13a34:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a3c:	2204      	movs	r2, #4
   13a3e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13a40:	f24c 3300 	movw	r3, #49920	; 0xc300
   13a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a48:	781b      	ldrb	r3, [r3, #0]
   13a4a:	2b00      	cmp	r3, #0
   13a4c:	d007      	beq.n	13a5e <auto_nav+0x14fe>
   13a4e:	f24c 3300 	movw	r3, #49920	; 0xc300
   13a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a56:	2200      	movs	r2, #0
   13a58:	701a      	strb	r2, [r3, #0]
   13a5a:	2301      	movs	r3, #1
   13a5c:	e000      	b.n	13a60 <auto_nav+0x1500>
   13a5e:	2300      	movs	r3, #0
   13a60:	2b00      	cmp	r3, #0
   13a62:	d03d      	beq.n	13ae0 <auto_nav+0x1580>
   13a64:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a6c:	2205      	movs	r2, #5
   13a6e:	701a      	strb	r2, [r3, #0]
   13a70:	f24c 6370 	movw	r3, #50800	; 0xc670
   13a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a78:	2200      	movs	r2, #0
   13a7a:	701a      	strb	r2, [r3, #0]
   13a7c:	f24c 6386 	movw	r3, #50822	; 0xc686
   13a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a84:	2200      	movs	r2, #0
   13a86:	801a      	strh	r2, [r3, #0]
   13a88:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a90:	681a      	ldr	r2, [r3, #0]
   13a92:	f24c 6374 	movw	r3, #50804	; 0xc674
   13a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a9a:	601a      	str	r2, [r3, #0]
   13a9c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aa4:	681a      	ldr	r2, [r3, #0]
   13aa6:	f24c 6378 	movw	r3, #50808	; 0xc678
   13aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aae:	601a      	str	r2, [r3, #0]
   13ab0:	f24c 6384 	movw	r3, #50820	; 0xc684
   13ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab8:	2200      	movs	r2, #0
   13aba:	801a      	strh	r2, [r3, #0]
   13abc:	f24c 6388 	movw	r3, #50824	; 0xc688
   13ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ac4:	f04f 0200 	mov.w	r2, #0
   13ac8:	601a      	str	r2, [r3, #0]
   13aca:	f000 be1b 	b.w	14704 <auto_nav+0x21a4>
   13ace:	bf00      	nop
   13ad0:	54442d18 	.word	0x54442d18
   13ad4:	3ff921fb 	.word	0x3ff921fb
   13ad8:	54442d18 	.word	0x54442d18
   13adc:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13ae0:	f24c 6370 	movw	r3, #50800	; 0xc670
   13ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ae8:	781b      	ldrb	r3, [r3, #0]
   13aea:	2b00      	cmp	r3, #0
   13aec:	f040 815b 	bne.w	13da6 <auto_nav+0x1846>
    {
        nav_stage = 0;
   13af0:	f24c 6370 	movw	r3, #50800	; 0xc670
   13af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13af8:	2200      	movs	r2, #0
   13afa:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13afc:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b04:	2200      	movs	r2, #0
   13b06:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13b08:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b10:	f04f 0200 	mov.w	r2, #0
   13b14:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13b16:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b1e:	2203      	movs	r2, #3
   13b20:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13b22:	f240 5378 	movw	r3, #1400	; 0x578
   13b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b2a:	689a      	ldr	r2, [r3, #8]
   13b2c:	f240 5374 	movw	r3, #1396	; 0x574
   13b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b34:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13b36:	f24c 6364 	movw	r3, #50788	; 0xc664
   13b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b3e:	f04f 0200 	mov.w	r2, #0
   13b42:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13b44:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b4c:	681a      	ldr	r2, [r3, #0]
   13b4e:	f240 5378 	movw	r3, #1400	; 0x578
   13b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b56:	685b      	ldr	r3, [r3, #4]
   13b58:	4610      	mov	r0, r2
   13b5a:	4619      	mov	r1, r3
   13b5c:	f004 face 	bl	180fc <__aeabi_fsub>
   13b60:	4603      	mov	r3, r0
   13b62:	4618      	mov	r0, r3
   13b64:	f003 ff40 	bl	179e8 <__aeabi_f2d>
   13b68:	4604      	mov	r4, r0
   13b6a:	460d      	mov	r5, r1
   13b6c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b74:	681a      	ldr	r2, [r3, #0]
   13b76:	f240 5378 	movw	r3, #1400	; 0x578
   13b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b7e:	681b      	ldr	r3, [r3, #0]
   13b80:	4610      	mov	r0, r2
   13b82:	4619      	mov	r1, r3
   13b84:	f004 faba 	bl	180fc <__aeabi_fsub>
   13b88:	4603      	mov	r3, r0
   13b8a:	4618      	mov	r0, r3
   13b8c:	f003 ff2c 	bl	179e8 <__aeabi_f2d>
   13b90:	4602      	mov	r2, r0
   13b92:	460b      	mov	r3, r1
   13b94:	4620      	mov	r0, r4
   13b96:	4629      	mov	r1, r5
   13b98:	f002 f802 	bl	15ba0 <pp_atan2>
   13b9c:	4602      	mov	r2, r0
   13b9e:	460b      	mov	r3, r1
   13ba0:	4610      	mov	r0, r2
   13ba2:	4619      	mov	r1, r3
   13ba4:	f004 fa56 	bl	18054 <__aeabi_d2f>
   13ba8:	4603      	mov	r3, r0
   13baa:	617b      	str	r3, [r7, #20]
   13bac:	6978      	ldr	r0, [r7, #20]
   13bae:	f003 ff1b 	bl	179e8 <__aeabi_f2d>
   13bb2:	4604      	mov	r4, r0
   13bb4:	460d      	mov	r5, r1
   13bb6:	f64c 1304 	movw	r3, #51460	; 0xc904
   13bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bbe:	681b      	ldr	r3, [r3, #0]
   13bc0:	4618      	mov	r0, r3
   13bc2:	f04f 0100 	mov.w	r1, #0
   13bc6:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13bca:	f004 fba1 	bl	18310 <__aeabi_fmul>
   13bce:	4603      	mov	r3, r0
   13bd0:	4618      	mov	r0, r3
   13bd2:	f003 ff09 	bl	179e8 <__aeabi_f2d>
   13bd6:	4602      	mov	r2, r0
   13bd8:	460b      	mov	r3, r1
   13bda:	f04f 0000 	mov.w	r0, #0
   13bde:	f04f 0100 	mov.w	r1, #0
   13be2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13be6:	f004 f87d 	bl	17ce4 <__aeabi_ddiv>
   13bea:	4602      	mov	r2, r0
   13bec:	460b      	mov	r3, r1
   13bee:	4620      	mov	r0, r4
   13bf0:	4629      	mov	r1, r5
   13bf2:	f003 fd9b 	bl	1772c <__adddf3>
   13bf6:	4602      	mov	r2, r0
   13bf8:	460b      	mov	r3, r1
   13bfa:	4610      	mov	r0, r2
   13bfc:	4619      	mov	r1, r3
   13bfe:	f004 fa29 	bl	18054 <__aeabi_d2f>
   13c02:	4603      	mov	r3, r0
   13c04:	613b      	str	r3, [r7, #16]
   13c06:	f240 5378 	movw	r3, #1400	; 0x578
   13c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c0e:	681b      	ldr	r3, [r3, #0]
   13c10:	4618      	mov	r0, r3
   13c12:	f003 fee9 	bl	179e8 <__aeabi_f2d>
   13c16:	4604      	mov	r4, r0
   13c18:	460d      	mov	r5, r1
   13c1a:	6938      	ldr	r0, [r7, #16]
   13c1c:	f003 fee4 	bl	179e8 <__aeabi_f2d>
   13c20:	4602      	mov	r2, r0
   13c22:	460b      	mov	r3, r1
   13c24:	4610      	mov	r0, r2
   13c26:	4619      	mov	r1, r3
   13c28:	a3af      	add	r3, pc, #700	; (adr r3, 13ee8 <auto_nav+0x1988>)
   13c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c2e:	f003 fd7d 	bl	1772c <__adddf3>
   13c32:	4602      	mov	r2, r0
   13c34:	460b      	mov	r3, r1
   13c36:	4610      	mov	r0, r2
   13c38:	4619      	mov	r1, r3
   13c3a:	f002 f871 	bl	15d20 <pp_sin>
   13c3e:	4602      	mov	r2, r0
   13c40:	460b      	mov	r3, r1
   13c42:	4610      	mov	r0, r2
   13c44:	4619      	mov	r1, r3
   13c46:	a3aa      	add	r3, pc, #680	; (adr r3, 13ef0 <auto_nav+0x1990>)
   13c48:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c4c:	f003 ff20 	bl	17a90 <__aeabi_dmul>
   13c50:	4602      	mov	r2, r0
   13c52:	460b      	mov	r3, r1
   13c54:	4620      	mov	r0, r4
   13c56:	4629      	mov	r1, r5
   13c58:	f003 fd68 	bl	1772c <__adddf3>
   13c5c:	4602      	mov	r2, r0
   13c5e:	460b      	mov	r3, r1
   13c60:	4610      	mov	r0, r2
   13c62:	4619      	mov	r1, r3
   13c64:	f004 f9f6 	bl	18054 <__aeabi_d2f>
   13c68:	4606      	mov	r6, r0
   13c6a:	f240 5378 	movw	r3, #1400	; 0x578
   13c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c72:	685b      	ldr	r3, [r3, #4]
   13c74:	4618      	mov	r0, r3
   13c76:	f003 feb7 	bl	179e8 <__aeabi_f2d>
   13c7a:	4604      	mov	r4, r0
   13c7c:	460d      	mov	r5, r1
   13c7e:	6938      	ldr	r0, [r7, #16]
   13c80:	f003 feb2 	bl	179e8 <__aeabi_f2d>
   13c84:	4602      	mov	r2, r0
   13c86:	460b      	mov	r3, r1
   13c88:	4610      	mov	r0, r2
   13c8a:	4619      	mov	r1, r3
   13c8c:	f002 f848 	bl	15d20 <pp_sin>
   13c90:	4602      	mov	r2, r0
   13c92:	460b      	mov	r3, r1
   13c94:	4610      	mov	r0, r2
   13c96:	4619      	mov	r1, r3
   13c98:	a395      	add	r3, pc, #596	; (adr r3, 13ef0 <auto_nav+0x1990>)
   13c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c9e:	f003 fef7 	bl	17a90 <__aeabi_dmul>
   13ca2:	4602      	mov	r2, r0
   13ca4:	460b      	mov	r3, r1
   13ca6:	4620      	mov	r0, r4
   13ca8:	4629      	mov	r1, r5
   13caa:	f003 fd3f 	bl	1772c <__adddf3>
   13cae:	4602      	mov	r2, r0
   13cb0:	460b      	mov	r3, r1
   13cb2:	4610      	mov	r0, r2
   13cb4:	4619      	mov	r1, r3
   13cb6:	f004 f9cd 	bl	18054 <__aeabi_d2f>
   13cba:	4603      	mov	r3, r0
   13cbc:	4630      	mov	r0, r6
   13cbe:	4619      	mov	r1, r3
   13cc0:	f000 fe12 	bl	148e8 <fly_to_xy>
   13cc4:	6938      	ldr	r0, [r7, #16]
   13cc6:	f003 fe8f 	bl	179e8 <__aeabi_f2d>
   13cca:	4602      	mov	r2, r0
   13ccc:	460b      	mov	r3, r1
   13cce:	a186      	add	r1, pc, #536	; (adr r1, 13ee8 <auto_nav+0x1988>)
   13cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
   13cd4:	f003 fd28 	bl	17728 <__aeabi_dsub>
   13cd8:	4602      	mov	r2, r0
   13cda:	460b      	mov	r3, r1
   13cdc:	4610      	mov	r0, r2
   13cde:	4619      	mov	r1, r3
   13ce0:	a385      	add	r3, pc, #532	; (adr r3, 13ef8 <auto_nav+0x1998>)
   13ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ce6:	f003 fffd 	bl	17ce4 <__aeabi_ddiv>
   13cea:	4602      	mov	r2, r0
   13cec:	460b      	mov	r3, r1
   13cee:	4610      	mov	r0, r2
   13cf0:	4619      	mov	r1, r3
   13cf2:	f04f 0200 	mov.w	r2, #0
   13cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13cfa:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13cfe:	f003 fec7 	bl	17a90 <__aeabi_dmul>
   13d02:	4602      	mov	r2, r0
   13d04:	460b      	mov	r3, r1
   13d06:	4610      	mov	r0, r2
   13d08:	4619      	mov	r1, r3
   13d0a:	f004 f9a3 	bl	18054 <__aeabi_d2f>
   13d0e:	4602      	mov	r2, r0
   13d10:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d18:	601a      	str	r2, [r3, #0]
   13d1a:	e012      	b.n	13d42 <auto_nav+0x17e2>
   13d1c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d24:	681b      	ldr	r3, [r3, #0]
   13d26:	4618      	mov	r0, r3
   13d28:	f04f 0100 	mov.w	r1, #0
   13d2c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d30:	f004 f9e6 	bl	18100 <__addsf3>
   13d34:	4603      	mov	r3, r0
   13d36:	461a      	mov	r2, r3
   13d38:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d40:	601a      	str	r2, [r3, #0]
   13d42:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d4a:	681b      	ldr	r3, [r3, #0]
   13d4c:	4618      	mov	r0, r3
   13d4e:	f04f 0100 	mov.w	r1, #0
   13d52:	f004 fc7b 	bl	1864c <__aeabi_fcmplt>
   13d56:	4603      	mov	r3, r0
   13d58:	2b00      	cmp	r3, #0
   13d5a:	d1df      	bne.n	13d1c <auto_nav+0x17bc>
   13d5c:	e012      	b.n	13d84 <auto_nav+0x1824>
   13d5e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d66:	681b      	ldr	r3, [r3, #0]
   13d68:	4618      	mov	r0, r3
   13d6a:	f04f 0100 	mov.w	r1, #0
   13d6e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d72:	f004 f9c3 	bl	180fc <__aeabi_fsub>
   13d76:	4603      	mov	r3, r0
   13d78:	461a      	mov	r2, r3
   13d7a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d82:	601a      	str	r2, [r3, #0]
   13d84:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d8c:	681b      	ldr	r3, [r3, #0]
   13d8e:	4618      	mov	r0, r3
   13d90:	f04f 0100 	mov.w	r1, #0
   13d94:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d98:	f004 fc6c 	bl	18674 <__aeabi_fcmpge>
   13d9c:	4603      	mov	r3, r0
   13d9e:	2b00      	cmp	r3, #0
   13da0:	d1dd      	bne.n	13d5e <auto_nav+0x17fe>
        return;
   13da2:	f000 bcaf 	b.w	14704 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13da6:	f24c 6370 	movw	r3, #50800	; 0xc670
   13daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dae:	781b      	ldrb	r3, [r3, #0]
   13db0:	2b01      	cmp	r3, #1
   13db2:	f040 84a7 	bne.w	14704 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13db6:	f24c 6370 	movw	r3, #50800	; 0xc670
   13dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dbe:	2201      	movs	r2, #1
   13dc0:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13dc2:	f24c 6371 	movw	r3, #50801	; 0xc671
   13dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dca:	781b      	ldrb	r3, [r3, #0]
   13dcc:	3301      	adds	r3, #1
   13dce:	b2da      	uxtb	r2, r3
   13dd0:	f24c 6371 	movw	r3, #50801	; 0xc671
   13dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dd8:	701a      	strb	r2, [r3, #0]
   13dda:	f24c 6370 	movw	r3, #50800	; 0xc670
   13dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13de2:	2200      	movs	r2, #0
   13de4:	701a      	strb	r2, [r3, #0]
   13de6:	f24c 6386 	movw	r3, #50822	; 0xc686
   13dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dee:	2200      	movs	r2, #0
   13df0:	801a      	strh	r2, [r3, #0]
   13df2:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dfa:	681a      	ldr	r2, [r3, #0]
   13dfc:	f24c 6374 	movw	r3, #50804	; 0xc674
   13e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e04:	601a      	str	r2, [r3, #0]
   13e06:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e0e:	681a      	ldr	r2, [r3, #0]
   13e10:	f24c 6378 	movw	r3, #50808	; 0xc678
   13e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e18:	601a      	str	r2, [r3, #0]
   13e1a:	f24c 6384 	movw	r3, #50820	; 0xc684
   13e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e22:	2200      	movs	r2, #0
   13e24:	801a      	strh	r2, [r3, #0]
   13e26:	f24c 6388 	movw	r3, #50824	; 0xc688
   13e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e2e:	f04f 0200 	mov.w	r2, #0
   13e32:	601a      	str	r2, [r3, #0]
   13e34:	f000 bc66 	b.w	14704 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13e38:	f24c 6371 	movw	r3, #50801	; 0xc671
   13e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e40:	781b      	ldrb	r3, [r3, #0]
   13e42:	2b05      	cmp	r3, #5
   13e44:	f040 845e 	bne.w	14704 <auto_nav+0x21a4>
{
    nav_block = 5;
   13e48:	f24c 6371 	movw	r3, #50801	; 0xc671
   13e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e50:	2205      	movs	r2, #5
   13e52:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13e54:	f24c 3300 	movw	r3, #49920	; 0xc300
   13e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e5c:	781b      	ldrb	r3, [r3, #0]
   13e5e:	2b00      	cmp	r3, #0
   13e60:	d007      	beq.n	13e72 <auto_nav+0x1912>
   13e62:	f24c 3300 	movw	r3, #49920	; 0xc300
   13e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e6a:	2200      	movs	r2, #0
   13e6c:	701a      	strb	r2, [r3, #0]
   13e6e:	2301      	movs	r3, #1
   13e70:	e000      	b.n	13e74 <auto_nav+0x1914>
   13e72:	2300      	movs	r3, #0
   13e74:	2b00      	cmp	r3, #0
   13e76:	d043      	beq.n	13f00 <auto_nav+0x19a0>
   13e78:	f24c 6371 	movw	r3, #50801	; 0xc671
   13e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e80:	2201      	movs	r2, #1
   13e82:	701a      	strb	r2, [r3, #0]
   13e84:	f24c 6370 	movw	r3, #50800	; 0xc670
   13e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e8c:	2200      	movs	r2, #0
   13e8e:	701a      	strb	r2, [r3, #0]
   13e90:	f24c 6386 	movw	r3, #50822	; 0xc686
   13e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e98:	2200      	movs	r2, #0
   13e9a:	801a      	strh	r2, [r3, #0]
   13e9c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ea4:	681a      	ldr	r2, [r3, #0]
   13ea6:	f24c 6374 	movw	r3, #50804	; 0xc674
   13eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eae:	601a      	str	r2, [r3, #0]
   13eb0:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eb8:	681a      	ldr	r2, [r3, #0]
   13eba:	f24c 6378 	movw	r3, #50808	; 0xc678
   13ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ec2:	601a      	str	r2, [r3, #0]
   13ec4:	f24c 6384 	movw	r3, #50820	; 0xc684
   13ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ecc:	2200      	movs	r2, #0
   13ece:	801a      	strh	r2, [r3, #0]
   13ed0:	f24c 6388 	movw	r3, #50824	; 0xc688
   13ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed8:	f04f 0200 	mov.w	r2, #0
   13edc:	601a      	str	r2, [r3, #0]
   13ede:	f000 bc11 	b.w	14704 <auto_nav+0x21a4>
   13ee2:	bf00      	nop
   13ee4:	f3af 8000 	nop.w
   13ee8:	54442d18 	.word	0x54442d18
   13eec:	3ff921fb 	.word	0x3ff921fb
   13ef0:	00000000 	.word	0x00000000
   13ef4:	4062c000 	.word	0x4062c000
   13ef8:	54442d18 	.word	0x54442d18
   13efc:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13f00:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f08:	781b      	ldrb	r3, [r3, #0]
   13f0a:	2b00      	cmp	r3, #0
   13f0c:	d133      	bne.n	13f76 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13f0e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f16:	2200      	movs	r2, #0
   13f18:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13f1a:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f22:	781b      	ldrb	r3, [r3, #0]
   13f24:	3301      	adds	r3, #1
   13f26:	b2da      	uxtb	r2, r3
   13f28:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f30:	701a      	strb	r2, [r3, #0]
   13f32:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f3a:	681a      	ldr	r2, [r3, #0]
   13f3c:	f24c 6374 	movw	r3, #50804	; 0xc674
   13f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f44:	601a      	str	r2, [r3, #0]
   13f46:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f4e:	681a      	ldr	r2, [r3, #0]
   13f50:	f24c 6378 	movw	r3, #50808	; 0xc678
   13f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f58:	601a      	str	r2, [r3, #0]
   13f5a:	f24c 6384 	movw	r3, #50820	; 0xc684
   13f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f62:	2200      	movs	r2, #0
   13f64:	801a      	strh	r2, [r3, #0]
   13f66:	f24c 6388 	movw	r3, #50824	; 0xc688
   13f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f6e:	f04f 0200 	mov.w	r2, #0
   13f72:	601a      	str	r2, [r3, #0]
   13f74:	e3c6      	b.n	14704 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13f76:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f7e:	781b      	ldrb	r3, [r3, #0]
   13f80:	2b01      	cmp	r3, #1
   13f82:	f040 81b5 	bne.w	142f0 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13f86:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f8e:	2201      	movs	r2, #1
   13f90:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13f92:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f9a:	2200      	movs	r2, #0
   13f9c:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13f9e:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fa6:	f04f 0200 	mov.w	r2, #0
   13faa:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13fac:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb4:	2203      	movs	r2, #3
   13fb6:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13fb8:	f240 5378 	movw	r3, #1400	; 0x578
   13fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fc0:	695a      	ldr	r2, [r3, #20]
   13fc2:	f240 5374 	movw	r3, #1396	; 0x574
   13fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fca:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13fcc:	f24c 6364 	movw	r3, #50788	; 0xc664
   13fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fd4:	f04f 0200 	mov.w	r2, #0
   13fd8:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13fda:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fe2:	681a      	ldr	r2, [r3, #0]
   13fe4:	f240 5378 	movw	r3, #1400	; 0x578
   13fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fec:	691b      	ldr	r3, [r3, #16]
   13fee:	4610      	mov	r0, r2
   13ff0:	4619      	mov	r1, r3
   13ff2:	f004 f883 	bl	180fc <__aeabi_fsub>
   13ff6:	4603      	mov	r3, r0
   13ff8:	4618      	mov	r0, r3
   13ffa:	f003 fcf5 	bl	179e8 <__aeabi_f2d>
   13ffe:	4604      	mov	r4, r0
   14000:	460d      	mov	r5, r1
   14002:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1400a:	681a      	ldr	r2, [r3, #0]
   1400c:	f240 5378 	movw	r3, #1400	; 0x578
   14010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14014:	68db      	ldr	r3, [r3, #12]
   14016:	4610      	mov	r0, r2
   14018:	4619      	mov	r1, r3
   1401a:	f004 f86f 	bl	180fc <__aeabi_fsub>
   1401e:	4603      	mov	r3, r0
   14020:	4618      	mov	r0, r3
   14022:	f003 fce1 	bl	179e8 <__aeabi_f2d>
   14026:	4602      	mov	r2, r0
   14028:	460b      	mov	r3, r1
   1402a:	4620      	mov	r0, r4
   1402c:	4629      	mov	r1, r5
   1402e:	f001 fdb7 	bl	15ba0 <pp_atan2>
   14032:	4602      	mov	r2, r0
   14034:	460b      	mov	r3, r1
   14036:	4610      	mov	r0, r2
   14038:	4619      	mov	r1, r3
   1403a:	f004 f80b 	bl	18054 <__aeabi_d2f>
   1403e:	4603      	mov	r3, r0
   14040:	60fb      	str	r3, [r7, #12]
   14042:	68f8      	ldr	r0, [r7, #12]
   14044:	f003 fcd0 	bl	179e8 <__aeabi_f2d>
   14048:	4604      	mov	r4, r0
   1404a:	460d      	mov	r5, r1
   1404c:	f64c 1304 	movw	r3, #51460	; 0xc904
   14050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14054:	681b      	ldr	r3, [r3, #0]
   14056:	4618      	mov	r0, r3
   14058:	f04f 0100 	mov.w	r1, #0
   1405c:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14060:	f004 f956 	bl	18310 <__aeabi_fmul>
   14064:	4603      	mov	r3, r0
   14066:	4618      	mov	r0, r3
   14068:	f003 fcbe 	bl	179e8 <__aeabi_f2d>
   1406c:	4602      	mov	r2, r0
   1406e:	460b      	mov	r3, r1
   14070:	f04f 0000 	mov.w	r0, #0
   14074:	f04f 0100 	mov.w	r1, #0
   14078:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1407c:	f003 fe32 	bl	17ce4 <__aeabi_ddiv>
   14080:	4602      	mov	r2, r0
   14082:	460b      	mov	r3, r1
   14084:	4620      	mov	r0, r4
   14086:	4629      	mov	r1, r5
   14088:	f003 fb50 	bl	1772c <__adddf3>
   1408c:	4602      	mov	r2, r0
   1408e:	460b      	mov	r3, r1
   14090:	4610      	mov	r0, r2
   14092:	4619      	mov	r1, r3
   14094:	f003 ffde 	bl	18054 <__aeabi_d2f>
   14098:	4603      	mov	r3, r0
   1409a:	60bb      	str	r3, [r7, #8]
   1409c:	f240 5378 	movw	r3, #1400	; 0x578
   140a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140a4:	68db      	ldr	r3, [r3, #12]
   140a6:	4618      	mov	r0, r3
   140a8:	f003 fc9e 	bl	179e8 <__aeabi_f2d>
   140ac:	4604      	mov	r4, r0
   140ae:	460d      	mov	r5, r1
   140b0:	68b8      	ldr	r0, [r7, #8]
   140b2:	f003 fc99 	bl	179e8 <__aeabi_f2d>
   140b6:	4602      	mov	r2, r0
   140b8:	460b      	mov	r3, r1
   140ba:	4610      	mov	r0, r2
   140bc:	4619      	mov	r1, r3
   140be:	a388      	add	r3, pc, #544	; (adr r3, 142e0 <auto_nav+0x1d80>)
   140c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   140c4:	f003 fb32 	bl	1772c <__adddf3>
   140c8:	4602      	mov	r2, r0
   140ca:	460b      	mov	r3, r1
   140cc:	4610      	mov	r0, r2
   140ce:	4619      	mov	r1, r3
   140d0:	f001 fe26 	bl	15d20 <pp_sin>
   140d4:	4602      	mov	r2, r0
   140d6:	460b      	mov	r3, r1
   140d8:	4610      	mov	r0, r2
   140da:	4619      	mov	r1, r3
   140dc:	f04f 0200 	mov.w	r2, #0
   140e0:	f04f 0300 	mov.w	r3, #0
   140e4:	f2c4 0359 	movt	r3, #16473	; 0x4059
   140e8:	f003 fcd2 	bl	17a90 <__aeabi_dmul>
   140ec:	4602      	mov	r2, r0
   140ee:	460b      	mov	r3, r1
   140f0:	4620      	mov	r0, r4
   140f2:	4629      	mov	r1, r5
   140f4:	f003 fb1a 	bl	1772c <__adddf3>
   140f8:	4602      	mov	r2, r0
   140fa:	460b      	mov	r3, r1
   140fc:	4610      	mov	r0, r2
   140fe:	4619      	mov	r1, r3
   14100:	f003 ffa8 	bl	18054 <__aeabi_d2f>
   14104:	4606      	mov	r6, r0
   14106:	f240 5378 	movw	r3, #1400	; 0x578
   1410a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1410e:	691b      	ldr	r3, [r3, #16]
   14110:	4618      	mov	r0, r3
   14112:	f003 fc69 	bl	179e8 <__aeabi_f2d>
   14116:	4604      	mov	r4, r0
   14118:	460d      	mov	r5, r1
   1411a:	68b8      	ldr	r0, [r7, #8]
   1411c:	f003 fc64 	bl	179e8 <__aeabi_f2d>
   14120:	4602      	mov	r2, r0
   14122:	460b      	mov	r3, r1
   14124:	4610      	mov	r0, r2
   14126:	4619      	mov	r1, r3
   14128:	f001 fdfa 	bl	15d20 <pp_sin>
   1412c:	4602      	mov	r2, r0
   1412e:	460b      	mov	r3, r1
   14130:	4610      	mov	r0, r2
   14132:	4619      	mov	r1, r3
   14134:	f04f 0200 	mov.w	r2, #0
   14138:	f04f 0300 	mov.w	r3, #0
   1413c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14140:	f003 fca6 	bl	17a90 <__aeabi_dmul>
   14144:	4602      	mov	r2, r0
   14146:	460b      	mov	r3, r1
   14148:	4620      	mov	r0, r4
   1414a:	4629      	mov	r1, r5
   1414c:	f003 faee 	bl	1772c <__adddf3>
   14150:	4602      	mov	r2, r0
   14152:	460b      	mov	r3, r1
   14154:	4610      	mov	r0, r2
   14156:	4619      	mov	r1, r3
   14158:	f003 ff7c 	bl	18054 <__aeabi_d2f>
   1415c:	4603      	mov	r3, r0
   1415e:	4630      	mov	r0, r6
   14160:	4619      	mov	r1, r3
   14162:	f000 fbc1 	bl	148e8 <fly_to_xy>
   14166:	68b8      	ldr	r0, [r7, #8]
   14168:	f003 fc3e 	bl	179e8 <__aeabi_f2d>
   1416c:	4602      	mov	r2, r0
   1416e:	460b      	mov	r3, r1
   14170:	a15b      	add	r1, pc, #364	; (adr r1, 142e0 <auto_nav+0x1d80>)
   14172:	e9d1 0100 	ldrd	r0, r1, [r1]
   14176:	f003 fad7 	bl	17728 <__aeabi_dsub>
   1417a:	4602      	mov	r2, r0
   1417c:	460b      	mov	r3, r1
   1417e:	4610      	mov	r0, r2
   14180:	4619      	mov	r1, r3
   14182:	a359      	add	r3, pc, #356	; (adr r3, 142e8 <auto_nav+0x1d88>)
   14184:	e9d3 2300 	ldrd	r2, r3, [r3]
   14188:	f003 fdac 	bl	17ce4 <__aeabi_ddiv>
   1418c:	4602      	mov	r2, r0
   1418e:	460b      	mov	r3, r1
   14190:	4610      	mov	r0, r2
   14192:	4619      	mov	r1, r3
   14194:	f04f 0200 	mov.w	r2, #0
   14198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1419c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   141a0:	f003 fc76 	bl	17a90 <__aeabi_dmul>
   141a4:	4602      	mov	r2, r0
   141a6:	460b      	mov	r3, r1
   141a8:	4610      	mov	r0, r2
   141aa:	4619      	mov	r1, r3
   141ac:	f003 ff52 	bl	18054 <__aeabi_d2f>
   141b0:	4602      	mov	r2, r0
   141b2:	f24c 638c 	movw	r3, #50828	; 0xc68c
   141b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141ba:	601a      	str	r2, [r3, #0]
   141bc:	e012      	b.n	141e4 <auto_nav+0x1c84>
   141be:	f24c 638c 	movw	r3, #50828	; 0xc68c
   141c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141c6:	681b      	ldr	r3, [r3, #0]
   141c8:	4618      	mov	r0, r3
   141ca:	f04f 0100 	mov.w	r1, #0
   141ce:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   141d2:	f003 ff95 	bl	18100 <__addsf3>
   141d6:	4603      	mov	r3, r0
   141d8:	461a      	mov	r2, r3
   141da:	f24c 638c 	movw	r3, #50828	; 0xc68c
   141de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141e2:	601a      	str	r2, [r3, #0]
   141e4:	f24c 638c 	movw	r3, #50828	; 0xc68c
   141e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141ec:	681b      	ldr	r3, [r3, #0]
   141ee:	4618      	mov	r0, r3
   141f0:	f04f 0100 	mov.w	r1, #0
   141f4:	f004 fa2a 	bl	1864c <__aeabi_fcmplt>
   141f8:	4603      	mov	r3, r0
   141fa:	2b00      	cmp	r3, #0
   141fc:	d1df      	bne.n	141be <auto_nav+0x1c5e>
   141fe:	e012      	b.n	14226 <auto_nav+0x1cc6>
   14200:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14208:	681b      	ldr	r3, [r3, #0]
   1420a:	4618      	mov	r0, r3
   1420c:	f04f 0100 	mov.w	r1, #0
   14210:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14214:	f003 ff72 	bl	180fc <__aeabi_fsub>
   14218:	4603      	mov	r3, r0
   1421a:	461a      	mov	r2, r3
   1421c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14224:	601a      	str	r2, [r3, #0]
   14226:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1422a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1422e:	681b      	ldr	r3, [r3, #0]
   14230:	4618      	mov	r0, r3
   14232:	f04f 0100 	mov.w	r1, #0
   14236:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1423a:	f004 fa1b 	bl	18674 <__aeabi_fcmpge>
   1423e:	4603      	mov	r3, r0
   14240:	2b00      	cmp	r3, #0
   14242:	d1dd      	bne.n	14200 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   14244:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1424c:	681b      	ldr	r3, [r3, #0]
   1424e:	4618      	mov	r0, r3
   14250:	f04f 0100 	mov.w	r1, #0
   14254:	f004 fa18 	bl	18688 <__aeabi_fcmpgt>
   14258:	4603      	mov	r3, r0
   1425a:	2b00      	cmp	r3, #0
   1425c:	d100      	bne.n	14260 <auto_nav+0x1d00>
        return;
   1425e:	e251      	b.n	14704 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14260:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14268:	681b      	ldr	r3, [r3, #0]
   1426a:	4618      	mov	r0, r3
   1426c:	f04f 0100 	mov.w	r1, #0
   14270:	f2c4 1120 	movt	r1, #16672	; 0x4120
   14274:	f004 f9ea 	bl	1864c <__aeabi_fcmplt>
   14278:	4603      	mov	r3, r0
   1427a:	2b00      	cmp	r3, #0
   1427c:	d100      	bne.n	14280 <auto_nav+0x1d20>
        return;
   1427e:	e241      	b.n	14704 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14280:	f24c 6370 	movw	r3, #50800	; 0xc670
   14284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14288:	781b      	ldrb	r3, [r3, #0]
   1428a:	3301      	adds	r3, #1
   1428c:	b2da      	uxtb	r2, r3
   1428e:	f24c 6370 	movw	r3, #50800	; 0xc670
   14292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14296:	701a      	strb	r2, [r3, #0]
   14298:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1429c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142a0:	681a      	ldr	r2, [r3, #0]
   142a2:	f24c 6374 	movw	r3, #50804	; 0xc674
   142a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142aa:	601a      	str	r2, [r3, #0]
   142ac:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   142b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142b4:	681a      	ldr	r2, [r3, #0]
   142b6:	f24c 6378 	movw	r3, #50808	; 0xc678
   142ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142be:	601a      	str	r2, [r3, #0]
   142c0:	f24c 6384 	movw	r3, #50820	; 0xc684
   142c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142c8:	2200      	movs	r2, #0
   142ca:	801a      	strh	r2, [r3, #0]
   142cc:	f24c 6388 	movw	r3, #50824	; 0xc688
   142d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142d4:	f04f 0200 	mov.w	r2, #0
   142d8:	601a      	str	r2, [r3, #0]
   142da:	e213      	b.n	14704 <auto_nav+0x21a4>
   142dc:	f3af 8000 	nop.w
   142e0:	54442d18 	.word	0x54442d18
   142e4:	3ff921fb 	.word	0x3ff921fb
   142e8:	54442d18 	.word	0x54442d18
   142ec:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   142f0:	f24c 6370 	movw	r3, #50800	; 0xc670
   142f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142f8:	781b      	ldrb	r3, [r3, #0]
   142fa:	2b02      	cmp	r3, #2
   142fc:	f040 81ad 	bne.w	1465a <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14300:	f24c 6370 	movw	r3, #50800	; 0xc670
   14304:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14308:	2202      	movs	r2, #2
   1430a:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   1430c:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   14310:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14314:	2200      	movs	r2, #0
   14316:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14318:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1431c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14320:	f04f 0200 	mov.w	r2, #0
   14324:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14326:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   1432a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1432e:	2203      	movs	r2, #3
   14330:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   14332:	f240 5378 	movw	r3, #1400	; 0x578
   14336:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1433a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1433c:	f240 5374 	movw	r3, #1396	; 0x574
   14340:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14344:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   14346:	f24c 6364 	movw	r3, #50788	; 0xc664
   1434a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1434e:	f04f 0200 	mov.w	r2, #0
   14352:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   14354:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1435c:	681a      	ldr	r2, [r3, #0]
   1435e:	f240 5378 	movw	r3, #1400	; 0x578
   14362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14368:	4610      	mov	r0, r2
   1436a:	4619      	mov	r1, r3
   1436c:	f003 fec6 	bl	180fc <__aeabi_fsub>
   14370:	4603      	mov	r3, r0
   14372:	4618      	mov	r0, r3
   14374:	f003 fb38 	bl	179e8 <__aeabi_f2d>
   14378:	4604      	mov	r4, r0
   1437a:	460d      	mov	r5, r1
   1437c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14384:	681a      	ldr	r2, [r3, #0]
   14386:	f240 5378 	movw	r3, #1400	; 0x578
   1438a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14390:	4610      	mov	r0, r2
   14392:	4619      	mov	r1, r3
   14394:	f003 feb2 	bl	180fc <__aeabi_fsub>
   14398:	4603      	mov	r3, r0
   1439a:	4618      	mov	r0, r3
   1439c:	f003 fb24 	bl	179e8 <__aeabi_f2d>
   143a0:	4602      	mov	r2, r0
   143a2:	460b      	mov	r3, r1
   143a4:	4620      	mov	r0, r4
   143a6:	4629      	mov	r1, r5
   143a8:	f001 fbfa 	bl	15ba0 <pp_atan2>
   143ac:	4602      	mov	r2, r0
   143ae:	460b      	mov	r3, r1
   143b0:	4610      	mov	r0, r2
   143b2:	4619      	mov	r1, r3
   143b4:	f003 fe4e 	bl	18054 <__aeabi_d2f>
   143b8:	4603      	mov	r3, r0
   143ba:	607b      	str	r3, [r7, #4]
   143bc:	6878      	ldr	r0, [r7, #4]
   143be:	f003 fb13 	bl	179e8 <__aeabi_f2d>
   143c2:	4604      	mov	r4, r0
   143c4:	460d      	mov	r5, r1
   143c6:	f64c 1304 	movw	r3, #51460	; 0xc904
   143ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ce:	681b      	ldr	r3, [r3, #0]
   143d0:	4618      	mov	r0, r3
   143d2:	f04f 0100 	mov.w	r1, #0
   143d6:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   143da:	f003 ff99 	bl	18310 <__aeabi_fmul>
   143de:	4603      	mov	r3, r0
   143e0:	4618      	mov	r0, r3
   143e2:	f003 fb01 	bl	179e8 <__aeabi_f2d>
   143e6:	4602      	mov	r2, r0
   143e8:	460b      	mov	r3, r1
   143ea:	f04f 0000 	mov.w	r0, #0
   143ee:	f04f 0100 	mov.w	r1, #0
   143f2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   143f6:	f003 fc75 	bl	17ce4 <__aeabi_ddiv>
   143fa:	4602      	mov	r2, r0
   143fc:	460b      	mov	r3, r1
   143fe:	4620      	mov	r0, r4
   14400:	4629      	mov	r1, r5
   14402:	f003 f993 	bl	1772c <__adddf3>
   14406:	4602      	mov	r2, r0
   14408:	460b      	mov	r3, r1
   1440a:	4610      	mov	r0, r2
   1440c:	4619      	mov	r1, r3
   1440e:	f003 fe21 	bl	18054 <__aeabi_d2f>
   14412:	4603      	mov	r3, r0
   14414:	603b      	str	r3, [r7, #0]
   14416:	f240 5378 	movw	r3, #1400	; 0x578
   1441a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14420:	4618      	mov	r0, r3
   14422:	f003 fae1 	bl	179e8 <__aeabi_f2d>
   14426:	4604      	mov	r4, r0
   14428:	460d      	mov	r5, r1
   1442a:	6838      	ldr	r0, [r7, #0]
   1442c:	f003 fadc 	bl	179e8 <__aeabi_f2d>
   14430:	4602      	mov	r2, r0
   14432:	460b      	mov	r3, r1
   14434:	4610      	mov	r0, r2
   14436:	4619      	mov	r1, r3
   14438:	a3b5      	add	r3, pc, #724	; (adr r3, 14710 <auto_nav+0x21b0>)
   1443a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1443e:	f003 f975 	bl	1772c <__adddf3>
   14442:	4602      	mov	r2, r0
   14444:	460b      	mov	r3, r1
   14446:	4610      	mov	r0, r2
   14448:	4619      	mov	r1, r3
   1444a:	f001 fc69 	bl	15d20 <pp_sin>
   1444e:	4602      	mov	r2, r0
   14450:	460b      	mov	r3, r1
   14452:	4610      	mov	r0, r2
   14454:	4619      	mov	r1, r3
   14456:	f04f 0200 	mov.w	r2, #0
   1445a:	f04f 0300 	mov.w	r3, #0
   1445e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14462:	f003 fb15 	bl	17a90 <__aeabi_dmul>
   14466:	4602      	mov	r2, r0
   14468:	460b      	mov	r3, r1
   1446a:	4620      	mov	r0, r4
   1446c:	4629      	mov	r1, r5
   1446e:	f003 f95d 	bl	1772c <__adddf3>
   14472:	4602      	mov	r2, r0
   14474:	460b      	mov	r3, r1
   14476:	4610      	mov	r0, r2
   14478:	4619      	mov	r1, r3
   1447a:	f003 fdeb 	bl	18054 <__aeabi_d2f>
   1447e:	4606      	mov	r6, r0
   14480:	f240 5378 	movw	r3, #1400	; 0x578
   14484:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1448a:	4618      	mov	r0, r3
   1448c:	f003 faac 	bl	179e8 <__aeabi_f2d>
   14490:	4604      	mov	r4, r0
   14492:	460d      	mov	r5, r1
   14494:	6838      	ldr	r0, [r7, #0]
   14496:	f003 faa7 	bl	179e8 <__aeabi_f2d>
   1449a:	4602      	mov	r2, r0
   1449c:	460b      	mov	r3, r1
   1449e:	4610      	mov	r0, r2
   144a0:	4619      	mov	r1, r3
   144a2:	f001 fc3d 	bl	15d20 <pp_sin>
   144a6:	4602      	mov	r2, r0
   144a8:	460b      	mov	r3, r1
   144aa:	4610      	mov	r0, r2
   144ac:	4619      	mov	r1, r3
   144ae:	f04f 0200 	mov.w	r2, #0
   144b2:	f04f 0300 	mov.w	r3, #0
   144b6:	f2c4 0359 	movt	r3, #16473	; 0x4059
   144ba:	f003 fae9 	bl	17a90 <__aeabi_dmul>
   144be:	4602      	mov	r2, r0
   144c0:	460b      	mov	r3, r1
   144c2:	4620      	mov	r0, r4
   144c4:	4629      	mov	r1, r5
   144c6:	f003 f931 	bl	1772c <__adddf3>
   144ca:	4602      	mov	r2, r0
   144cc:	460b      	mov	r3, r1
   144ce:	4610      	mov	r0, r2
   144d0:	4619      	mov	r1, r3
   144d2:	f003 fdbf 	bl	18054 <__aeabi_d2f>
   144d6:	4603      	mov	r3, r0
   144d8:	4630      	mov	r0, r6
   144da:	4619      	mov	r1, r3
   144dc:	f000 fa04 	bl	148e8 <fly_to_xy>
   144e0:	6838      	ldr	r0, [r7, #0]
   144e2:	f003 fa81 	bl	179e8 <__aeabi_f2d>
   144e6:	4602      	mov	r2, r0
   144e8:	460b      	mov	r3, r1
   144ea:	a189      	add	r1, pc, #548	; (adr r1, 14710 <auto_nav+0x21b0>)
   144ec:	e9d1 0100 	ldrd	r0, r1, [r1]
   144f0:	f003 f91a 	bl	17728 <__aeabi_dsub>
   144f4:	4602      	mov	r2, r0
   144f6:	460b      	mov	r3, r1
   144f8:	4610      	mov	r0, r2
   144fa:	4619      	mov	r1, r3
   144fc:	a386      	add	r3, pc, #536	; (adr r3, 14718 <auto_nav+0x21b8>)
   144fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   14502:	f003 fbef 	bl	17ce4 <__aeabi_ddiv>
   14506:	4602      	mov	r2, r0
   14508:	460b      	mov	r3, r1
   1450a:	4610      	mov	r0, r2
   1450c:	4619      	mov	r1, r3
   1450e:	f04f 0200 	mov.w	r2, #0
   14512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14516:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1451a:	f003 fab9 	bl	17a90 <__aeabi_dmul>
   1451e:	4602      	mov	r2, r0
   14520:	460b      	mov	r3, r1
   14522:	4610      	mov	r0, r2
   14524:	4619      	mov	r1, r3
   14526:	f003 fd95 	bl	18054 <__aeabi_d2f>
   1452a:	4602      	mov	r2, r0
   1452c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14534:	601a      	str	r2, [r3, #0]
   14536:	e012      	b.n	1455e <auto_nav+0x1ffe>
   14538:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1453c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14540:	681b      	ldr	r3, [r3, #0]
   14542:	4618      	mov	r0, r3
   14544:	f04f 0100 	mov.w	r1, #0
   14548:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1454c:	f003 fdd8 	bl	18100 <__addsf3>
   14550:	4603      	mov	r3, r0
   14552:	461a      	mov	r2, r3
   14554:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1455c:	601a      	str	r2, [r3, #0]
   1455e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14566:	681b      	ldr	r3, [r3, #0]
   14568:	4618      	mov	r0, r3
   1456a:	f04f 0100 	mov.w	r1, #0
   1456e:	f004 f86d 	bl	1864c <__aeabi_fcmplt>
   14572:	4603      	mov	r3, r0
   14574:	2b00      	cmp	r3, #0
   14576:	d1df      	bne.n	14538 <auto_nav+0x1fd8>
   14578:	e012      	b.n	145a0 <auto_nav+0x2040>
   1457a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1457e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14582:	681b      	ldr	r3, [r3, #0]
   14584:	4618      	mov	r0, r3
   14586:	f04f 0100 	mov.w	r1, #0
   1458a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1458e:	f003 fdb5 	bl	180fc <__aeabi_fsub>
   14592:	4603      	mov	r3, r0
   14594:	461a      	mov	r2, r3
   14596:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1459a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1459e:	601a      	str	r2, [r3, #0]
   145a0:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145a8:	681b      	ldr	r3, [r3, #0]
   145aa:	4618      	mov	r0, r3
   145ac:	f04f 0100 	mov.w	r1, #0
   145b0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   145b4:	f004 f85e 	bl	18674 <__aeabi_fcmpge>
   145b8:	4603      	mov	r3, r0
   145ba:	2b00      	cmp	r3, #0
   145bc:	d1dd      	bne.n	1457a <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   145be:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145c6:	681b      	ldr	r3, [r3, #0]
   145c8:	4618      	mov	r0, r3
   145ca:	f04f 0100 	mov.w	r1, #0
   145ce:	f2c4 3134 	movt	r1, #17204	; 0x4334
   145d2:	f004 f859 	bl	18688 <__aeabi_fcmpgt>
   145d6:	4603      	mov	r3, r0
   145d8:	2b00      	cmp	r3, #0
   145da:	d100      	bne.n	145de <auto_nav+0x207e>
          return;
   145dc:	e092      	b.n	14704 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   145de:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145e6:	681b      	ldr	r3, [r3, #0]
   145e8:	4618      	mov	r0, r3
   145ea:	f04f 0100 	mov.w	r1, #0
   145ee:	f2c4 313e 	movt	r1, #17214	; 0x433e
   145f2:	f004 f82b 	bl	1864c <__aeabi_fcmplt>
   145f6:	4603      	mov	r3, r0
   145f8:	2b00      	cmp	r3, #0
   145fa:	d100      	bne.n	145fe <auto_nav+0x209e>
          return;
   145fc:	e082      	b.n	14704 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   145fe:	f24c 6370 	movw	r3, #50800	; 0xc670
   14602:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14606:	781b      	ldrb	r3, [r3, #0]
   14608:	3301      	adds	r3, #1
   1460a:	b2da      	uxtb	r2, r3
   1460c:	f24c 6370 	movw	r3, #50800	; 0xc670
   14610:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14614:	701a      	strb	r2, [r3, #0]
   14616:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1461a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1461e:	681a      	ldr	r2, [r3, #0]
   14620:	f24c 6374 	movw	r3, #50804	; 0xc674
   14624:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14628:	601a      	str	r2, [r3, #0]
   1462a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1462e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14632:	681a      	ldr	r2, [r3, #0]
   14634:	f24c 6378 	movw	r3, #50808	; 0xc678
   14638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1463c:	601a      	str	r2, [r3, #0]
   1463e:	f24c 6384 	movw	r3, #50820	; 0xc684
   14642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14646:	2200      	movs	r2, #0
   14648:	801a      	strh	r2, [r3, #0]
   1464a:	f24c 6388 	movw	r3, #50824	; 0xc688
   1464e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14652:	f04f 0200 	mov.w	r2, #0
   14656:	601a      	str	r2, [r3, #0]
   14658:	e054      	b.n	14704 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   1465a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1465e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14662:	781b      	ldrb	r3, [r3, #0]
   14664:	2b03      	cmp	r3, #3
   14666:	d106      	bne.n	14676 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14668:	f24c 6370 	movw	r3, #50800	; 0xc670
   1466c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14670:	2203      	movs	r2, #3
   14672:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   14674:	e44b      	b.n	13f0e <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   14676:	f24c 6370 	movw	r3, #50800	; 0xc670
   1467a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1467e:	781b      	ldrb	r3, [r3, #0]
   14680:	2b04      	cmp	r3, #4
   14682:	d13f      	bne.n	14704 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   14684:	f24c 6370 	movw	r3, #50800	; 0xc670
   14688:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1468c:	2204      	movs	r2, #4
   1468e:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14690:	f24c 6371 	movw	r3, #50801	; 0xc671
   14694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14698:	781b      	ldrb	r3, [r3, #0]
   1469a:	3301      	adds	r3, #1
   1469c:	b2da      	uxtb	r2, r3
   1469e:	f24c 6371 	movw	r3, #50801	; 0xc671
   146a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146a6:	701a      	strb	r2, [r3, #0]
   146a8:	f24c 6370 	movw	r3, #50800	; 0xc670
   146ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b0:	2200      	movs	r2, #0
   146b2:	701a      	strb	r2, [r3, #0]
   146b4:	f24c 6386 	movw	r3, #50822	; 0xc686
   146b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146bc:	2200      	movs	r2, #0
   146be:	801a      	strh	r2, [r3, #0]
   146c0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   146c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146c8:	681a      	ldr	r2, [r3, #0]
   146ca:	f24c 6374 	movw	r3, #50804	; 0xc674
   146ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146d2:	601a      	str	r2, [r3, #0]
   146d4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   146d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146dc:	681a      	ldr	r2, [r3, #0]
   146de:	f24c 6378 	movw	r3, #50808	; 0xc678
   146e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146e6:	601a      	str	r2, [r3, #0]
   146e8:	f24c 6384 	movw	r3, #50820	; 0xc684
   146ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146f0:	2200      	movs	r2, #0
   146f2:	801a      	strh	r2, [r3, #0]
   146f4:	f24c 6388 	movw	r3, #50824	; 0xc688
   146f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146fc:	f04f 0200 	mov.w	r2, #0
   14700:	601a      	str	r2, [r3, #0]
   14702:	bf00      	nop
    else { }
}
else { }

//#endif
}
   14704:	372c      	adds	r7, #44	; 0x2c
   14706:	46bd      	mov	sp, r7
   14708:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1470a:	bf00      	nop
   1470c:	f3af 8000 	nop.w
   14710:	54442d18 	.word	0x54442d18
   14714:	3ff921fb 	.word	0x3ff921fb
   14718:	54442d18 	.word	0x54442d18
   1471c:	400921fb 	.word	0x400921fb

00014720 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14720:	b590      	push	{r4, r7, lr}
   14722:	b087      	sub	sp, #28
   14724:	af00      	add	r7, sp, #0
   14726:	4603      	mov	r3, r0
   14728:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   1472a:	79f9      	ldrb	r1, [r7, #7]
   1472c:	f240 5278 	movw	r2, #1400	; 0x578
   14730:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14734:	460b      	mov	r3, r1
   14736:	005b      	lsls	r3, r3, #1
   14738:	440b      	add	r3, r1
   1473a:	009b      	lsls	r3, r3, #2
   1473c:	4413      	add	r3, r2
   1473e:	681a      	ldr	r2, [r3, #0]
   14740:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14748:	681b      	ldr	r3, [r3, #0]
   1474a:	4610      	mov	r0, r2
   1474c:	4619      	mov	r1, r3
   1474e:	f003 fcd5 	bl	180fc <__aeabi_fsub>
   14752:	4603      	mov	r3, r0
   14754:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   14756:	79f9      	ldrb	r1, [r7, #7]
   14758:	f240 5278 	movw	r2, #1400	; 0x578
   1475c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14760:	460b      	mov	r3, r1
   14762:	005b      	lsls	r3, r3, #1
   14764:	440b      	add	r3, r1
   14766:	009b      	lsls	r3, r3, #2
   14768:	4413      	add	r3, r2
   1476a:	3304      	adds	r3, #4
   1476c:	681a      	ldr	r2, [r3, #0]
   1476e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14776:	681b      	ldr	r3, [r3, #0]
   14778:	4610      	mov	r0, r2
   1477a:	4619      	mov	r1, r3
   1477c:	f003 fcbe 	bl	180fc <__aeabi_fsub>
   14780:	4603      	mov	r3, r0
   14782:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   14784:	6978      	ldr	r0, [r7, #20]
   14786:	6979      	ldr	r1, [r7, #20]
   14788:	f003 fdc2 	bl	18310 <__aeabi_fmul>
   1478c:	4603      	mov	r3, r0
   1478e:	461c      	mov	r4, r3
   14790:	6938      	ldr	r0, [r7, #16]
   14792:	6939      	ldr	r1, [r7, #16]
   14794:	f003 fdbc 	bl	18310 <__aeabi_fmul>
   14798:	4603      	mov	r3, r0
   1479a:	4620      	mov	r0, r4
   1479c:	4619      	mov	r1, r3
   1479e:	f003 fcaf 	bl	18100 <__addsf3>
   147a2:	4603      	mov	r3, r0
   147a4:	461a      	mov	r2, r3
   147a6:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   147aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147ae:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   147b0:	f64c 1304 	movw	r3, #51460	; 0xc904
   147b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147b8:	681b      	ldr	r3, [r3, #0]
   147ba:	4618      	mov	r0, r3
   147bc:	f04f 0100 	mov.w	r1, #0
   147c0:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   147c4:	f003 fda4 	bl	18310 <__aeabi_fmul>
   147c8:	4603      	mov	r3, r0
   147ca:	461a      	mov	r2, r3
   147cc:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   147d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147d4:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   147d6:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   147da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147de:	681b      	ldr	r3, [r3, #0]
   147e0:	4618      	mov	r0, r3
   147e2:	f04f 0100 	mov.w	r1, #0
   147e6:	f2c4 2120 	movt	r1, #16928	; 0x4220
   147ea:	f003 ff2f 	bl	1864c <__aeabi_fcmplt>
   147ee:	4603      	mov	r3, r0
   147f0:	2b00      	cmp	r3, #0
   147f2:	d004      	beq.n	147fe <approaching+0xde>
   147f4:	f04f 0200 	mov.w	r2, #0
   147f8:	f2c4 2220 	movt	r2, #16928	; 0x4220
   147fc:	e004      	b.n	14808 <approaching+0xe8>
   147fe:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14806:	681a      	ldr	r2, [r3, #0]
   14808:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   1480c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14810:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   14812:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1481a:	681a      	ldr	r2, [r3, #0]
   1481c:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14824:	681b      	ldr	r3, [r3, #0]
   14826:	4610      	mov	r0, r2
   14828:	4619      	mov	r1, r3
   1482a:	f003 fd71 	bl	18310 <__aeabi_fmul>
   1482e:	4603      	mov	r3, r0
   14830:	461a      	mov	r2, r3
   14832:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   14836:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1483a:	681b      	ldr	r3, [r3, #0]
   1483c:	4610      	mov	r0, r2
   1483e:	4619      	mov	r1, r3
   14840:	f003 ff22 	bl	18688 <__aeabi_fcmpgt>
   14844:	4603      	mov	r3, r0
   14846:	2b00      	cmp	r3, #0
   14848:	d001      	beq.n	1484e <approaching+0x12e>
    return TRUE;
   1484a:	2301      	movs	r3, #1
   1484c:	e048      	b.n	148e0 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   1484e:	79f9      	ldrb	r1, [r7, #7]
   14850:	f240 5278 	movw	r2, #1400	; 0x578
   14854:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14858:	460b      	mov	r3, r1
   1485a:	005b      	lsls	r3, r3, #1
   1485c:	440b      	add	r3, r1
   1485e:	009b      	lsls	r3, r3, #2
   14860:	4413      	add	r3, r2
   14862:	681a      	ldr	r2, [r3, #0]
   14864:	f24c 6374 	movw	r3, #50804	; 0xc674
   14868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1486c:	681b      	ldr	r3, [r3, #0]
   1486e:	4610      	mov	r0, r2
   14870:	4619      	mov	r1, r3
   14872:	f003 fc43 	bl	180fc <__aeabi_fsub>
   14876:	4603      	mov	r3, r0
   14878:	4618      	mov	r0, r3
   1487a:	6979      	ldr	r1, [r7, #20]
   1487c:	f003 fd48 	bl	18310 <__aeabi_fmul>
   14880:	4603      	mov	r3, r0
   14882:	461c      	mov	r4, r3
   14884:	79f9      	ldrb	r1, [r7, #7]
   14886:	f240 5278 	movw	r2, #1400	; 0x578
   1488a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1488e:	460b      	mov	r3, r1
   14890:	005b      	lsls	r3, r3, #1
   14892:	440b      	add	r3, r1
   14894:	009b      	lsls	r3, r3, #2
   14896:	4413      	add	r3, r2
   14898:	3304      	adds	r3, #4
   1489a:	681a      	ldr	r2, [r3, #0]
   1489c:	f24c 6378 	movw	r3, #50808	; 0xc678
   148a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148a4:	681b      	ldr	r3, [r3, #0]
   148a6:	4610      	mov	r0, r2
   148a8:	4619      	mov	r1, r3
   148aa:	f003 fc27 	bl	180fc <__aeabi_fsub>
   148ae:	4603      	mov	r3, r0
   148b0:	4618      	mov	r0, r3
   148b2:	6939      	ldr	r1, [r7, #16]
   148b4:	f003 fd2c 	bl	18310 <__aeabi_fmul>
   148b8:	4603      	mov	r3, r0
   148ba:	4620      	mov	r0, r4
   148bc:	4619      	mov	r1, r3
   148be:	f003 fc1f 	bl	18100 <__addsf3>
   148c2:	4603      	mov	r3, r0
   148c4:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   148c6:	2301      	movs	r3, #1
   148c8:	461c      	mov	r4, r3
   148ca:	68f8      	ldr	r0, [r7, #12]
   148cc:	f04f 0100 	mov.w	r1, #0
   148d0:	f003 febc 	bl	1864c <__aeabi_fcmplt>
   148d4:	4603      	mov	r3, r0
   148d6:	2b00      	cmp	r3, #0
   148d8:	d101      	bne.n	148de <approaching+0x1be>
   148da:	2300      	movs	r3, #0
   148dc:	461c      	mov	r4, r3
   148de:	b2e3      	uxtb	r3, r4
}
   148e0:	4618      	mov	r0, r3
   148e2:	371c      	adds	r7, #28
   148e4:	46bd      	mov	sp, r7
   148e6:	bd90      	pop	{r4, r7, pc}

000148e8 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   148e8:	b5b0      	push	{r4, r5, r7, lr}
   148ea:	b082      	sub	sp, #8
   148ec:	af00      	add	r7, sp, #0
   148ee:	6078      	str	r0, [r7, #4]
   148f0:	6039      	str	r1, [r7, #0]
  desired_x = x;
   148f2:	f24c 6390 	movw	r3, #50832	; 0xc690
   148f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148fa:	687a      	ldr	r2, [r7, #4]
   148fc:	601a      	str	r2, [r3, #0]
  desired_y = y;
   148fe:	f24c 6394 	movw	r3, #50836	; 0xc694
   14902:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14906:	683a      	ldr	r2, [r7, #0]
   14908:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   1490a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1490e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14912:	681b      	ldr	r3, [r3, #0]
   14914:	6838      	ldr	r0, [r7, #0]
   14916:	4619      	mov	r1, r3
   14918:	f003 fbf0 	bl	180fc <__aeabi_fsub>
   1491c:	4603      	mov	r3, r0
   1491e:	4618      	mov	r0, r3
   14920:	f003 f862 	bl	179e8 <__aeabi_f2d>
   14924:	4604      	mov	r4, r0
   14926:	460d      	mov	r5, r1
   14928:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1492c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14930:	681b      	ldr	r3, [r3, #0]
   14932:	6878      	ldr	r0, [r7, #4]
   14934:	4619      	mov	r1, r3
   14936:	f003 fbe1 	bl	180fc <__aeabi_fsub>
   1493a:	4603      	mov	r3, r0
   1493c:	4618      	mov	r0, r3
   1493e:	f003 f853 	bl	179e8 <__aeabi_f2d>
   14942:	4602      	mov	r2, r0
   14944:	460b      	mov	r3, r1
   14946:	4620      	mov	r0, r4
   14948:	4629      	mov	r1, r5
   1494a:	f001 f929 	bl	15ba0 <pp_atan2>
   1494e:	4602      	mov	r2, r0
   14950:	460b      	mov	r3, r1
   14952:	a10b      	add	r1, pc, #44	; (adr r1, 14980 <fly_to_xy+0x98>)
   14954:	e9d1 0100 	ldrd	r0, r1, [r1]
   14958:	f002 fee6 	bl	17728 <__aeabi_dsub>
   1495c:	4602      	mov	r2, r0
   1495e:	460b      	mov	r3, r1
   14960:	4610      	mov	r0, r2
   14962:	4619      	mov	r1, r3
   14964:	f003 fb76 	bl	18054 <__aeabi_d2f>
   14968:	4602      	mov	r2, r0
   1496a:	f24c 635c 	movw	r3, #50780	; 0xc65c
   1496e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14972:	601a      	str	r2, [r3, #0]
}
   14974:	3708      	adds	r7, #8
   14976:	46bd      	mov	sp, r7
   14978:	bdb0      	pop	{r4, r5, r7, pc}
   1497a:	bf00      	nop
   1497c:	f3af 8000 	nop.w
   14980:	54442d18 	.word	0x54442d18
   14984:	3ff921fb 	.word	0x3ff921fb

00014988 <fly_to>:

static void fly_to(uint8_t wp) { 
   14988:	b580      	push	{r7, lr}
   1498a:	b082      	sub	sp, #8
   1498c:	af00      	add	r7, sp, #0
   1498e:	4603      	mov	r3, r0
   14990:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14992:	79f9      	ldrb	r1, [r7, #7]
   14994:	f240 5278 	movw	r2, #1400	; 0x578
   14998:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1499c:	460b      	mov	r3, r1
   1499e:	005b      	lsls	r3, r3, #1
   149a0:	440b      	add	r3, r1
   149a2:	009b      	lsls	r3, r3, #2
   149a4:	4413      	add	r3, r2
   149a6:	6818      	ldr	r0, [r3, #0]
   149a8:	79f9      	ldrb	r1, [r7, #7]
   149aa:	f240 5278 	movw	r2, #1400	; 0x578
   149ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149b2:	460b      	mov	r3, r1
   149b4:	005b      	lsls	r3, r3, #1
   149b6:	440b      	add	r3, r1
   149b8:	009b      	lsls	r3, r3, #2
   149ba:	4413      	add	r3, r2
   149bc:	3304      	adds	r3, #4
   149be:	681b      	ldr	r3, [r3, #0]
   149c0:	4619      	mov	r1, r3
   149c2:	f7ff ff91 	bl	148e8 <fly_to_xy>
}
   149c6:	3708      	adds	r7, #8
   149c8:	46bd      	mov	sp, r7
   149ca:	bd80      	pop	{r7, pc}

000149cc <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   149cc:	b5b0      	push	{r4, r5, r7, lr}
   149ce:	b088      	sub	sp, #32
   149d0:	af00      	add	r7, sp, #0
   149d2:	4602      	mov	r2, r0
   149d4:	460b      	mov	r3, r1
   149d6:	71fa      	strb	r2, [r7, #7]
   149d8:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   149da:	79f9      	ldrb	r1, [r7, #7]
   149dc:	f240 5278 	movw	r2, #1400	; 0x578
   149e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149e4:	460b      	mov	r3, r1
   149e6:	005b      	lsls	r3, r3, #1
   149e8:	440b      	add	r3, r1
   149ea:	009b      	lsls	r3, r3, #2
   149ec:	4413      	add	r3, r2
   149ee:	681b      	ldr	r3, [r3, #0]
   149f0:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   149f2:	79f9      	ldrb	r1, [r7, #7]
   149f4:	f240 5278 	movw	r2, #1400	; 0x578
   149f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149fc:	460b      	mov	r3, r1
   149fe:	005b      	lsls	r3, r3, #1
   14a00:	440b      	add	r3, r1
   14a02:	009b      	lsls	r3, r3, #2
   14a04:	4413      	add	r3, r2
   14a06:	3304      	adds	r3, #4
   14a08:	681b      	ldr	r3, [r3, #0]
   14a0a:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14a0c:	79b9      	ldrb	r1, [r7, #6]
   14a0e:	f240 5278 	movw	r2, #1400	; 0x578
   14a12:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a16:	460b      	mov	r3, r1
   14a18:	005b      	lsls	r3, r3, #1
   14a1a:	440b      	add	r3, r1
   14a1c:	009b      	lsls	r3, r3, #2
   14a1e:	4413      	add	r3, r2
   14a20:	681b      	ldr	r3, [r3, #0]
   14a22:	4618      	mov	r0, r3
   14a24:	69f9      	ldr	r1, [r7, #28]
   14a26:	f003 fb69 	bl	180fc <__aeabi_fsub>
   14a2a:	4603      	mov	r3, r0
   14a2c:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14a2e:	79b9      	ldrb	r1, [r7, #6]
   14a30:	f240 5278 	movw	r2, #1400	; 0x578
   14a34:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a38:	460b      	mov	r3, r1
   14a3a:	005b      	lsls	r3, r3, #1
   14a3c:	440b      	add	r3, r1
   14a3e:	009b      	lsls	r3, r3, #2
   14a40:	4413      	add	r3, r2
   14a42:	3304      	adds	r3, #4
   14a44:	681b      	ldr	r3, [r3, #0]
   14a46:	4618      	mov	r0, r3
   14a48:	69b9      	ldr	r1, [r7, #24]
   14a4a:	f003 fb57 	bl	180fc <__aeabi_fsub>
   14a4e:	4603      	mov	r3, r0
   14a50:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14a52:	6978      	ldr	r0, [r7, #20]
   14a54:	6979      	ldr	r1, [r7, #20]
   14a56:	f003 fc5b 	bl	18310 <__aeabi_fmul>
   14a5a:	4603      	mov	r3, r0
   14a5c:	461c      	mov	r4, r3
   14a5e:	6938      	ldr	r0, [r7, #16]
   14a60:	6939      	ldr	r1, [r7, #16]
   14a62:	f003 fc55 	bl	18310 <__aeabi_fmul>
   14a66:	4603      	mov	r3, r0
   14a68:	4620      	mov	r0, r4
   14a6a:	4619      	mov	r1, r3
   14a6c:	f003 fb48 	bl	18100 <__addsf3>
   14a70:	4603      	mov	r3, r0
   14a72:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14a74:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a7c:	681b      	ldr	r3, [r3, #0]
   14a7e:	4618      	mov	r0, r3
   14a80:	69f9      	ldr	r1, [r7, #28]
   14a82:	f003 fb3b 	bl	180fc <__aeabi_fsub>
   14a86:	4603      	mov	r3, r0
   14a88:	4618      	mov	r0, r3
   14a8a:	6979      	ldr	r1, [r7, #20]
   14a8c:	f003 fc40 	bl	18310 <__aeabi_fmul>
   14a90:	4603      	mov	r3, r0
   14a92:	461c      	mov	r4, r3
   14a94:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a9c:	681b      	ldr	r3, [r3, #0]
   14a9e:	4618      	mov	r0, r3
   14aa0:	69b9      	ldr	r1, [r7, #24]
   14aa2:	f003 fb2b 	bl	180fc <__aeabi_fsub>
   14aa6:	4603      	mov	r3, r0
   14aa8:	4618      	mov	r0, r3
   14aaa:	6939      	ldr	r1, [r7, #16]
   14aac:	f003 fc30 	bl	18310 <__aeabi_fmul>
   14ab0:	4603      	mov	r3, r0
   14ab2:	4620      	mov	r0, r4
   14ab4:	4619      	mov	r1, r3
   14ab6:	f003 fb23 	bl	18100 <__addsf3>
   14aba:	4603      	mov	r3, r0
   14abc:	4618      	mov	r0, r3
   14abe:	68f9      	ldr	r1, [r7, #12]
   14ac0:	f003 fcda 	bl	18478 <__aeabi_fdiv>
   14ac4:	4603      	mov	r3, r0
   14ac6:	461a      	mov	r2, r3
   14ac8:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ad0:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14ad2:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ada:	681b      	ldr	r3, [r3, #0]
   14adc:	4618      	mov	r0, r3
   14ade:	f04f 0100 	mov.w	r1, #0
   14ae2:	f003 fdc7 	bl	18674 <__aeabi_fcmpge>
   14ae6:	4603      	mov	r3, r0
   14ae8:	2b00      	cmp	r3, #0
   14aea:	d005      	beq.n	14af8 <route_to+0x12c>
   14aec:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14af4:	681a      	ldr	r2, [r3, #0]
   14af6:	e001      	b.n	14afc <route_to+0x130>
   14af8:	f04f 0200 	mov.w	r2, #0
   14afc:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b04:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14b06:	68f8      	ldr	r0, [r7, #12]
   14b08:	f002 ff6e 	bl	179e8 <__aeabi_f2d>
   14b0c:	4602      	mov	r2, r0
   14b0e:	460b      	mov	r3, r1
   14b10:	4610      	mov	r0, r2
   14b12:	4619      	mov	r1, r3
   14b14:	f001 f9f4 	bl	15f00 <pp_sqrt>
   14b18:	4602      	mov	r2, r0
   14b1a:	460b      	mov	r3, r1
   14b1c:	4610      	mov	r0, r2
   14b1e:	4619      	mov	r1, r3
   14b20:	f003 fa98 	bl	18054 <__aeabi_d2f>
   14b24:	4602      	mov	r2, r0
   14b26:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b2e:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14b30:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b38:	681b      	ldr	r3, [r3, #0]
   14b3a:	4618      	mov	r0, r3
   14b3c:	f002 ff54 	bl	179e8 <__aeabi_f2d>
   14b40:	4604      	mov	r4, r0
   14b42:	460d      	mov	r5, r1
   14b44:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b4c:	681a      	ldr	r2, [r3, #0]
   14b4e:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b56:	681b      	ldr	r3, [r3, #0]
   14b58:	4610      	mov	r0, r2
   14b5a:	4619      	mov	r1, r3
   14b5c:	f003 fc8c 	bl	18478 <__aeabi_fdiv>
   14b60:	4603      	mov	r3, r0
   14b62:	4618      	mov	r0, r3
   14b64:	f04f 0100 	mov.w	r1, #0
   14b68:	f003 fd84 	bl	18674 <__aeabi_fcmpge>
   14b6c:	4603      	mov	r3, r0
   14b6e:	2b00      	cmp	r3, #0
   14b70:	d014      	beq.n	14b9c <route_to+0x1d0>
   14b72:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b7a:	681a      	ldr	r2, [r3, #0]
   14b7c:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b84:	681b      	ldr	r3, [r3, #0]
   14b86:	4610      	mov	r0, r2
   14b88:	4619      	mov	r1, r3
   14b8a:	f003 fc75 	bl	18478 <__aeabi_fdiv>
   14b8e:	4603      	mov	r3, r0
   14b90:	4618      	mov	r0, r3
   14b92:	f002 ff29 	bl	179e8 <__aeabi_f2d>
   14b96:	4602      	mov	r2, r0
   14b98:	460b      	mov	r3, r1
   14b9a:	e003      	b.n	14ba4 <route_to+0x1d8>
   14b9c:	f04f 0200 	mov.w	r2, #0
   14ba0:	f04f 0300 	mov.w	r3, #0
   14ba4:	4620      	mov	r0, r4
   14ba6:	4629      	mov	r1, r5
   14ba8:	f002 fdc0 	bl	1772c <__adddf3>
   14bac:	4602      	mov	r2, r0
   14bae:	460b      	mov	r3, r1
   14bb0:	4610      	mov	r0, r2
   14bb2:	4619      	mov	r1, r3
   14bb4:	f003 fa4e 	bl	18054 <__aeabi_d2f>
   14bb8:	4602      	mov	r2, r0
   14bba:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bc2:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14bc4:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bcc:	681b      	ldr	r3, [r3, #0]
   14bce:	4618      	mov	r0, r3
   14bd0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14bd4:	f003 fd4e 	bl	18674 <__aeabi_fcmpge>
   14bd8:	4603      	mov	r3, r0
   14bda:	2b00      	cmp	r3, #0
   14bdc:	d002      	beq.n	14be4 <route_to+0x218>
   14bde:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14be2:	e004      	b.n	14bee <route_to+0x222>
   14be4:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bec:	681a      	ldr	r2, [r3, #0]
   14bee:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bf6:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14bf8:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c00:	681b      	ldr	r3, [r3, #0]
   14c02:	4618      	mov	r0, r3
   14c04:	6979      	ldr	r1, [r7, #20]
   14c06:	f003 fb83 	bl	18310 <__aeabi_fmul>
   14c0a:	4603      	mov	r3, r0
   14c0c:	4618      	mov	r0, r3
   14c0e:	69f9      	ldr	r1, [r7, #28]
   14c10:	f003 fa76 	bl	18100 <__addsf3>
   14c14:	4603      	mov	r3, r0
   14c16:	461c      	mov	r4, r3
   14c18:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c20:	681b      	ldr	r3, [r3, #0]
   14c22:	4618      	mov	r0, r3
   14c24:	6939      	ldr	r1, [r7, #16]
   14c26:	f003 fb73 	bl	18310 <__aeabi_fmul>
   14c2a:	4603      	mov	r3, r0
   14c2c:	4618      	mov	r0, r3
   14c2e:	69b9      	ldr	r1, [r7, #24]
   14c30:	f003 fa66 	bl	18100 <__addsf3>
   14c34:	4603      	mov	r3, r0
   14c36:	4620      	mov	r0, r4
   14c38:	4619      	mov	r1, r3
   14c3a:	f7ff fe55 	bl	148e8 <fly_to_xy>
}
   14c3e:	3720      	adds	r7, #32
   14c40:	46bd      	mov	sp, r7
   14c42:	bdb0      	pop	{r4, r5, r7, pc}

00014c44 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14c44:	b590      	push	{r4, r7, lr}
   14c46:	b083      	sub	sp, #12
   14c48:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14c4a:	f240 5378 	movw	r3, #1400	; 0x578
   14c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c52:	681a      	ldr	r2, [r3, #0]
   14c54:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c5c:	681b      	ldr	r3, [r3, #0]
   14c5e:	4610      	mov	r0, r2
   14c60:	4619      	mov	r1, r3
   14c62:	f003 fa4b 	bl	180fc <__aeabi_fsub>
   14c66:	4603      	mov	r3, r0
   14c68:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14c6a:	f240 5378 	movw	r3, #1400	; 0x578
   14c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c72:	685a      	ldr	r2, [r3, #4]
   14c74:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c7c:	681b      	ldr	r3, [r3, #0]
   14c7e:	4610      	mov	r0, r2
   14c80:	4619      	mov	r1, r3
   14c82:	f003 fa3b 	bl	180fc <__aeabi_fsub>
   14c86:	4603      	mov	r3, r0
   14c88:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14c8a:	6878      	ldr	r0, [r7, #4]
   14c8c:	6879      	ldr	r1, [r7, #4]
   14c8e:	f003 fb3f 	bl	18310 <__aeabi_fmul>
   14c92:	4603      	mov	r3, r0
   14c94:	461c      	mov	r4, r3
   14c96:	6838      	ldr	r0, [r7, #0]
   14c98:	6839      	ldr	r1, [r7, #0]
   14c9a:	f003 fb39 	bl	18310 <__aeabi_fmul>
   14c9e:	4603      	mov	r3, r0
   14ca0:	4620      	mov	r0, r4
   14ca2:	4619      	mov	r1, r3
   14ca4:	f003 fa2c 	bl	18100 <__addsf3>
   14ca8:	4603      	mov	r3, r0
   14caa:	461a      	mov	r2, r3
   14cac:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cb4:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14cb6:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cbe:	681b      	ldr	r3, [r3, #0]
   14cc0:	2201      	movs	r2, #1
   14cc2:	4614      	mov	r4, r2
   14cc4:	4618      	mov	r0, r3
   14cc6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14cca:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14cce:	f003 fcdb 	bl	18688 <__aeabi_fcmpgt>
   14cd2:	4603      	mov	r3, r0
   14cd4:	2b00      	cmp	r3, #0
   14cd6:	d101      	bne.n	14cdc <compute_dist2_to_home+0x98>
   14cd8:	2300      	movs	r3, #0
   14cda:	461c      	mov	r4, r3
   14cdc:	b2e3      	uxtb	r3, r4
   14cde:	461a      	mov	r2, r3
   14ce0:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
   14ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ce8:	701a      	strb	r2, [r3, #0]
}
   14cea:	370c      	adds	r7, #12
   14cec:	46bd      	mov	sp, r7
   14cee:	bd90      	pop	{r4, r7, pc}

00014cf0 <nav_home>:

void nav_home(void) {
   14cf0:	b580      	push	{r7, lr}
   14cf2:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14cf4:	f24c 639c 	movw	r3, #50844	; 0xc69c
   14cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cfc:	f04f 0200 	mov.w	r2, #0
   14d00:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14d02:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d0a:	2203      	movs	r2, #3
   14d0c:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14d0e:	f240 5374 	movw	r3, #1396	; 0x574
   14d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d16:	f04f 0200 	mov.w	r2, #0
   14d1a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14d1e:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14d20:	f7ff ff90 	bl	14c44 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14d24:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d2c:	681a      	ldr	r2, [r3, #0]
   14d2e:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   14d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d36:	601a      	str	r2, [r3, #0]
}
   14d38:	bd80      	pop	{r7, pc}
   14d3a:	bf00      	nop

00014d3c <nav_update>:

void nav_update(void) {
   14d3c:	b580      	push	{r7, lr}
   14d3e:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14d40:	f7ff ff80 	bl	14c44 <compute_dist2_to_home>

  auto_nav();
   14d44:	f7fd fc0c 	bl	12560 <auto_nav>
}
   14d48:	bd80      	pop	{r7, pc}
   14d4a:	bf00      	nop

00014d4c <nav_init>:


void nav_init(void) {
   14d4c:	b480      	push	{r7}
   14d4e:	af00      	add	r7, sp, #0
  nav_block = 0;
   14d50:	f24c 6371 	movw	r3, #50801	; 0xc671
   14d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d58:	2200      	movs	r2, #0
   14d5a:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14d5c:	f24c 6370 	movw	r3, #50800	; 0xc670
   14d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d64:	2200      	movs	r2, #0
   14d66:	701a      	strb	r2, [r3, #0]
}
   14d68:	46bd      	mov	sp, r7
   14d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d6e:	4770      	bx	lr

00014d70 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14d70:	b480      	push	{r7}
   14d72:	b083      	sub	sp, #12
   14d74:	af00      	add	r7, sp, #0
   14d76:	4603      	mov	r3, r0
   14d78:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14d7a:	f242 030a 	movw	r3, #8202	; 0x200a
   14d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d82:	781b      	ldrb	r3, [r3, #0]
   14d84:	b2db      	uxtb	r3, r3
   14d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14d8a:	2b00      	cmp	r3, #0
   14d8c:	d028      	beq.n	14de0 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14d8e:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d96:	781b      	ldrb	r3, [r3, #0]
   14d98:	b2db      	uxtb	r3, r3
   14d9a:	461a      	mov	r2, r3
   14d9c:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14da4:	781b      	ldrb	r3, [r3, #0]
   14da6:	3301      	adds	r3, #1
   14da8:	429a      	cmp	r2, r3
   14daa:	d100      	bne.n	14dae <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14dac:	e02c      	b.n	14e08 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14dae:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14db6:	781b      	ldrb	r3, [r3, #0]
   14db8:	461a      	mov	r2, r3
   14dba:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   14dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dc2:	79f9      	ldrb	r1, [r7, #7]
   14dc4:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14dc6:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dce:	781b      	ldrb	r3, [r3, #0]
   14dd0:	3301      	adds	r3, #1
   14dd2:	b2da      	uxtb	r2, r3
   14dd4:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ddc:	701a      	strb	r2, [r3, #0]
   14dde:	e013      	b.n	14e08 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14de0:	f242 030c 	movw	r3, #8204	; 0x200c
   14de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14de8:	79fa      	ldrb	r2, [r7, #7]
   14dea:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14dec:	f242 030a 	movw	r3, #8202	; 0x200a
   14df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14df4:	f242 020a 	movw	r2, #8202	; 0x200a
   14df8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14dfc:	7812      	ldrb	r2, [r2, #0]
   14dfe:	b2d2      	uxtb	r2, r2
   14e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14e04:	b2d2      	uxtb	r2, r2
   14e06:	701a      	strb	r2, [r3, #0]
  }
}
   14e08:	370c      	adds	r7, #12
   14e0a:	46bd      	mov	sp, r7
   14e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e10:	4770      	bx	lr
   14e12:	bf00      	nop

00014e14 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14e14:	b480      	push	{r7}
   14e16:	b083      	sub	sp, #12
   14e18:	af00      	add	r7, sp, #0
   14e1a:	4603      	mov	r3, r0
   14e1c:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14e1e:	f242 039a 	movw	r3, #8346	; 0x209a
   14e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e26:	781b      	ldrb	r3, [r3, #0]
   14e28:	b2db      	uxtb	r3, r3
   14e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14e2e:	2b00      	cmp	r3, #0
   14e30:	d028      	beq.n	14e84 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14e32:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   14e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e3a:	781b      	ldrb	r3, [r3, #0]
   14e3c:	b2db      	uxtb	r3, r3
   14e3e:	461a      	mov	r2, r3
   14e40:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e48:	781b      	ldrb	r3, [r3, #0]
   14e4a:	3301      	adds	r3, #1
   14e4c:	429a      	cmp	r2, r3
   14e4e:	d100      	bne.n	14e52 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14e50:	e02c      	b.n	14eac <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14e52:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e5a:	781b      	ldrb	r3, [r3, #0]
   14e5c:	461a      	mov	r2, r3
   14e5e:	f24c 73cc 	movw	r3, #51148	; 0xc7cc
   14e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e66:	79f9      	ldrb	r1, [r7, #7]
   14e68:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14e6a:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e72:	781b      	ldrb	r3, [r3, #0]
   14e74:	3301      	adds	r3, #1
   14e76:	b2da      	uxtb	r2, r3
   14e78:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e80:	701a      	strb	r2, [r3, #0]
   14e82:	e013      	b.n	14eac <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14e84:	f242 039c 	movw	r3, #8348	; 0x209c
   14e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e8c:	79fa      	ldrb	r2, [r7, #7]
   14e8e:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14e90:	f242 039a 	movw	r3, #8346	; 0x209a
   14e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e98:	f242 029a 	movw	r2, #8346	; 0x209a
   14e9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ea0:	7812      	ldrb	r2, [r2, #0]
   14ea2:	b2d2      	uxtb	r2, r2
   14ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14ea8:	b2d2      	uxtb	r2, r2
   14eaa:	701a      	strb	r2, [r3, #0]
  }
}
   14eac:	370c      	adds	r7, #12
   14eae:	46bd      	mov	sp, r7
   14eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
   14eb4:	4770      	bx	lr
   14eb6:	bf00      	nop

00014eb8 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14eb8:	b580      	push	{r7, lr}
   14eba:	b084      	sub	sp, #16
   14ebc:	af00      	add	r7, sp, #0
   14ebe:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14ec0:	2300      	movs	r3, #0
   14ec2:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14ec4:	e009      	b.n	14eda <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14ec6:	7bfb      	ldrb	r3, [r7, #15]
   14ec8:	687a      	ldr	r2, [r7, #4]
   14eca:	4413      	add	r3, r2
   14ecc:	781b      	ldrb	r3, [r3, #0]
   14ece:	4618      	mov	r0, r3
   14ed0:	f7ff ff4e 	bl	14d70 <uart0_transmit>
    i++;
   14ed4:	7bfb      	ldrb	r3, [r7, #15]
   14ed6:	3301      	adds	r3, #1
   14ed8:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14eda:	7bfb      	ldrb	r3, [r7, #15]
   14edc:	687a      	ldr	r2, [r7, #4]
   14ede:	4413      	add	r3, r2
   14ee0:	781b      	ldrb	r3, [r3, #0]
   14ee2:	2b00      	cmp	r3, #0
   14ee4:	d1ef      	bne.n	14ec6 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14ee6:	3710      	adds	r7, #16
   14ee8:	46bd      	mov	sp, r7
   14eea:	bd80      	pop	{r7, pc}

00014eec <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14eec:	b590      	push	{r4, r7, lr}
   14eee:	b089      	sub	sp, #36	; 0x24
   14ef0:	af00      	add	r7, sp, #0
   14ef2:	4603      	mov	r3, r0
   14ef4:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14ef6:	f648 131c 	movw	r3, #35100	; 0x891c
   14efa:	f2c0 0301 	movt	r3, #1
   14efe:	f107 040c 	add.w	r4, r7, #12
   14f02:	6818      	ldr	r0, [r3, #0]
   14f04:	6859      	ldr	r1, [r3, #4]
   14f06:	689a      	ldr	r2, [r3, #8]
   14f08:	68db      	ldr	r3, [r3, #12]
   14f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14f0c:	79fb      	ldrb	r3, [r7, #7]
   14f0e:	091b      	lsrs	r3, r3, #4
   14f10:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14f12:	79fb      	ldrb	r3, [r7, #7]
   14f14:	f003 030f 	and.w	r3, r3, #15
   14f18:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14f1a:	230f      	movs	r3, #15
   14f1c:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14f1e:	230f      	movs	r3, #15
   14f20:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14f22:	7ffb      	ldrb	r3, [r7, #31]
   14f24:	f107 0220 	add.w	r2, r7, #32
   14f28:	4413      	add	r3, r2
   14f2a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f2e:	4618      	mov	r0, r3
   14f30:	f7ff ff1e 	bl	14d70 <uart0_transmit>
  uart0_transmit(hex[low]);
   14f34:	7fbb      	ldrb	r3, [r7, #30]
   14f36:	f107 0220 	add.w	r2, r7, #32
   14f3a:	4413      	add	r3, r2
   14f3c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f40:	4618      	mov	r0, r3
   14f42:	f7ff ff15 	bl	14d70 <uart0_transmit>
}
   14f46:	3724      	adds	r7, #36	; 0x24
   14f48:	46bd      	mov	sp, r7
   14f4a:	bd90      	pop	{r4, r7, pc}

00014f4c <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14f4c:	b480      	push	{r7}
   14f4e:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14f50:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f58:	781a      	ldrb	r2, [r3, #0]
   14f5a:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f62:	781b      	ldrb	r3, [r3, #0]
   14f64:	b2db      	uxtb	r3, r3
   14f66:	429a      	cmp	r2, r3
   14f68:	d10e      	bne.n	14f88 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14f6a:	f242 030a 	movw	r3, #8202	; 0x200a
   14f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f72:	f242 020a 	movw	r2, #8202	; 0x200a
   14f76:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f7a:	7812      	ldrb	r2, [r2, #0]
   14f7c:	b2d2      	uxtb	r2, r2
   14f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14f82:	b2d2      	uxtb	r2, r2
   14f84:	701a      	strb	r2, [r3, #0]
   14f86:	e01d      	b.n	14fc4 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14f88:	f242 030c 	movw	r3, #8204	; 0x200c
   14f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f90:	f24c 62c5 	movw	r2, #50885	; 0xc6c5
   14f94:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14f98:	7812      	ldrb	r2, [r2, #0]
   14f9a:	b2d2      	uxtb	r2, r2
   14f9c:	4611      	mov	r1, r2
   14f9e:	f24c 62c8 	movw	r2, #50888	; 0xc6c8
   14fa2:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14fa6:	5c52      	ldrb	r2, [r2, r1]
   14fa8:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14faa:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fb2:	781b      	ldrb	r3, [r3, #0]
   14fb4:	b2db      	uxtb	r3, r3
   14fb6:	3301      	adds	r3, #1
   14fb8:	b2da      	uxtb	r2, r3
   14fba:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fc2:	701a      	strb	r2, [r3, #0]
  }
}
   14fc4:	46bd      	mov	sp, r7
   14fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14fca:	4770      	bx	lr

00014fcc <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14fcc:	b480      	push	{r7}
   14fce:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14fd0:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fd8:	781a      	ldrb	r2, [r3, #0]
   14fda:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   14fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fe2:	781b      	ldrb	r3, [r3, #0]
   14fe4:	b2db      	uxtb	r3, r3
   14fe6:	429a      	cmp	r2, r3
   14fe8:	d10e      	bne.n	15008 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14fea:	f242 039a 	movw	r3, #8346	; 0x209a
   14fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ff2:	f242 029a 	movw	r2, #8346	; 0x209a
   14ff6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ffa:	7812      	ldrb	r2, [r2, #0]
   14ffc:	b2d2      	uxtb	r2, r2
   14ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15002:	b2d2      	uxtb	r2, r2
   15004:	701a      	strb	r2, [r3, #0]
   15006:	e01d      	b.n	15044 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   15008:	f242 039c 	movw	r3, #8348	; 0x209c
   1500c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15010:	f24c 72c9 	movw	r2, #51145	; 0xc7c9
   15014:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15018:	7812      	ldrb	r2, [r2, #0]
   1501a:	b2d2      	uxtb	r2, r2
   1501c:	4611      	mov	r1, r2
   1501e:	f24c 72cc 	movw	r2, #51148	; 0xc7cc
   15022:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15026:	5c52      	ldrb	r2, [r2, r1]
   15028:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   1502a:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   1502e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15032:	781b      	ldrb	r3, [r3, #0]
   15034:	b2db      	uxtb	r3, r3
   15036:	3301      	adds	r3, #1
   15038:	b2da      	uxtb	r2, r3
   1503a:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   1503e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15042:	701a      	strb	r2, [r3, #0]
  }
}
   15044:	46bd      	mov	sp, r7
   15046:	f85d 7b04 	ldr.w	r7, [sp], #4
   1504a:	4770      	bx	lr

0001504c <uart0_init>:

void uart0_init( void ) {
   1504c:	b480      	push	{r7}
   1504e:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   15050:	f242 0390 	movw	r3, #8336	; 0x2090
   15054:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15058:	2200      	movs	r2, #0
   1505a:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   1505c:	f242 0309 	movw	r3, #8201	; 0x2009
   15060:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15064:	2219      	movs	r2, #25
   15066:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   15068:	f242 030b 	movw	r3, #8203	; 0x200b
   1506c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15070:	2200      	movs	r2, #0
   15072:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   15074:	f242 030a 	movw	r3, #8202	; 0x200a
   15078:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1507c:	2218      	movs	r2, #24
   1507e:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   15080:	f242 0395 	movw	r3, #8341	; 0x2095
   15084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15088:	2206      	movs	r2, #6
   1508a:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   1508c:	f242 030a 	movw	r3, #8202	; 0x200a
   15090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15094:	f242 020a 	movw	r2, #8202	; 0x200a
   15098:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1509c:	7812      	ldrb	r2, [r2, #0]
   1509e:	b2d2      	uxtb	r2, r2
   150a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   150a4:	b2d2      	uxtb	r2, r2
   150a6:	701a      	strb	r2, [r3, #0]
}
   150a8:	46bd      	mov	sp, r7
   150aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   150ae:	4770      	bx	lr

000150b0 <uart1_init>:

void uart1_init( void ) {
   150b0:	b480      	push	{r7}
   150b2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   150b4:	f242 0398 	movw	r3, #8344	; 0x2098
   150b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150bc:	2200      	movs	r2, #0
   150be:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   150c0:	f242 0399 	movw	r3, #8345	; 0x2099
   150c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150c8:	2219      	movs	r2, #25
   150ca:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   150cc:	f242 039b 	movw	r3, #8347	; 0x209b
   150d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150d4:	2200      	movs	r2, #0
   150d6:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   150d8:	f242 039a 	movw	r3, #8346	; 0x209a
   150dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e0:	2218      	movs	r2, #24
   150e2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   150e4:	f242 039d 	movw	r3, #8349	; 0x209d
   150e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150ec:	2206      	movs	r2, #6
   150ee:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   150f0:	f242 039a 	movw	r3, #8346	; 0x209a
   150f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150f8:	f242 029a 	movw	r2, #8346	; 0x209a
   150fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15100:	7812      	ldrb	r2, [r2, #0]
   15102:	b2d2      	uxtb	r2, r2
   15104:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15108:	b2d2      	uxtb	r2, r2
   1510a:	701a      	strb	r2, [r3, #0]
}
   1510c:	46bd      	mov	sp, r7
   1510e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15112:	4770      	bx	lr
   15114:	0000      	movs	r0, r0
	...

00015118 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   15118:	b480      	push	{r7}
   1511a:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   1511c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   15120:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15124:	f04f 0200 	mov.w	r2, #0
   15128:	601a      	str	r2, [r3, #0]
   1512a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1512e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15132:	f04f 0200 	mov.w	r2, #0
   15136:	601a      	str	r2, [r3, #0]
   15138:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1513c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15140:	f04f 0200 	mov.w	r2, #0
   15144:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   15146:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   1514a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1514e:	f04f 0200 	mov.w	r2, #0
   15152:	601a      	str	r2, [r3, #0]
   15154:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   15158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1515c:	f04f 0200 	mov.w	r2, #0
   15160:	601a      	str	r2, [r3, #0]
   15162:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   15166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1516a:	f04f 0200 	mov.w	r2, #0
   1516e:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15170:	f64c 1304 	movw	r3, #51460	; 0xc904
   15174:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15178:	f04f 0200 	mov.w	r2, #0
   1517c:	601a      	str	r2, [r3, #0]
   1517e:	f64c 1308 	movw	r3, #51464	; 0xc908
   15182:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15186:	f04f 0200 	mov.w	r2, #0
   1518a:	601a      	str	r2, [r3, #0]
   1518c:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   15190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15194:	f04f 0200 	mov.w	r2, #0
   15198:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   1519a:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1519e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151a2:	f04f 0200 	mov.w	r2, #0
   151a6:	601a      	str	r2, [r3, #0]
   151a8:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   151ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151b0:	f04f 0200 	mov.w	r2, #0
   151b4:	601a      	str	r2, [r3, #0]
   151b6:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   151ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151be:	f04f 0200 	mov.w	r2, #0
   151c2:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   151c4:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   151c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151cc:	2200      	movs	r2, #0
   151ce:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   151d0:	f240 5348 	movw	r3, #1352	; 0x548
   151d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151d8:	681a      	ldr	r2, [r3, #0]
   151da:	f64c 130c 	movw	r3, #51468	; 0xc90c
   151de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151e2:	601a      	str	r2, [r3, #0]
}
   151e4:	46bd      	mov	sp, r7
   151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   151ea:	4770      	bx	lr

000151ec <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   151ec:	b580      	push	{r7, lr}
   151ee:	b082      	sub	sp, #8
   151f0:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   151f2:	f240 533c 	movw	r3, #1340	; 0x53c
   151f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151fa:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   151fc:	2b01      	cmp	r3, #1
   151fe:	d105      	bne.n	1520c <estimator_update_state_infrared+0x20>
   15200:	f64c 130c 	movw	r3, #51468	; 0xc90c
   15204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15208:	681b      	ldr	r3, [r3, #0]
   1520a:	e004      	b.n	15216 <estimator_update_state_infrared+0x2a>
   1520c:	f240 5348 	movw	r3, #1352	; 0x548
   15210:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15214:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   15216:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   15218:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   1521c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15220:	881b      	ldrh	r3, [r3, #0]
   15222:	b21b      	sxth	r3, r3
   15224:	4618      	mov	r0, r3
   15226:	f003 f81f 	bl	18268 <__aeabi_i2f>
   1522a:	4603      	mov	r3, r0
   1522c:	4618      	mov	r0, r3
   1522e:	6879      	ldr	r1, [r7, #4]
   15230:	f003 f86e 	bl	18310 <__aeabi_fmul>
   15234:	4603      	mov	r3, r0
   15236:	461a      	mov	r2, r3
   15238:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   1523c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15240:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   15242:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   15246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1524a:	881b      	ldrh	r3, [r3, #0]
   1524c:	b21b      	sxth	r3, r3
   1524e:	4618      	mov	r0, r3
   15250:	f003 f80a 	bl	18268 <__aeabi_i2f>
   15254:	4603      	mov	r3, r0
   15256:	4618      	mov	r0, r3
   15258:	6879      	ldr	r1, [r7, #4]
   1525a:	f003 f859 	bl	18310 <__aeabi_fmul>
   1525e:	4603      	mov	r3, r0
   15260:	461a      	mov	r2, r3
   15262:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   15266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1526a:	601a      	str	r2, [r3, #0]
}
   1526c:	3708      	adds	r7, #8
   1526e:	46bd      	mov	sp, r7
   15270:	bd80      	pop	{r7, pc}
   15272:	bf00      	nop

00015274 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   15274:	b5b0      	push	{r4, r5, r7, lr}
   15276:	b084      	sub	sp, #16
   15278:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   1527a:	f64c 1318 	movw	r3, #51480	; 0xc918
   1527e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15282:	781b      	ldrb	r3, [r3, #0]
   15284:	2b00      	cmp	r3, #0
   15286:	f000 81e8 	beq.w	1565a <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   1528a:	f24c 4388 	movw	r3, #50312	; 0xc488
   1528e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15292:	681a      	ldr	r2, [r3, #0]
   15294:	f64c 131c 	movw	r3, #51484	; 0xc91c
   15298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1529c:	681b      	ldr	r3, [r3, #0]
   1529e:	4610      	mov	r0, r2
   152a0:	4619      	mov	r1, r3
   152a2:	f002 ff2b 	bl	180fc <__aeabi_fsub>
   152a6:	4603      	mov	r3, r0
   152a8:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   152aa:	68b8      	ldr	r0, [r7, #8]
   152ac:	f002 fb9c 	bl	179e8 <__aeabi_f2d>
   152b0:	4602      	mov	r2, r0
   152b2:	460b      	mov	r3, r1
   152b4:	4610      	mov	r0, r2
   152b6:	4619      	mov	r1, r3
   152b8:	a385      	add	r3, pc, #532	; (adr r3, 154d0 <estimator_update_ir_estim+0x25c>)
   152ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   152be:	f002 fe77 	bl	17fb0 <__aeabi_dcmpgt>
   152c2:	4603      	mov	r3, r0
   152c4:	2b00      	cmp	r3, #0
   152c6:	d100      	bne.n	152ca <estimator_update_ir_estim+0x56>
   152c8:	e219      	b.n	156fe <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   152ca:	f64c 1308 	movw	r3, #51464	; 0xc908
   152ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152d2:	681a      	ldr	r2, [r3, #0]
   152d4:	f64c 1320 	movw	r3, #51488	; 0xc920
   152d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152dc:	681b      	ldr	r3, [r3, #0]
   152de:	4610      	mov	r0, r2
   152e0:	4619      	mov	r1, r3
   152e2:	f002 ff0b 	bl	180fc <__aeabi_fsub>
   152e6:	4603      	mov	r3, r0
   152e8:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   152ea:	e013      	b.n	15314 <estimator_update_ir_estim+0xa0>
   152ec:	68f8      	ldr	r0, [r7, #12]
   152ee:	f002 fb7b 	bl	179e8 <__aeabi_f2d>
   152f2:	4602      	mov	r2, r0
   152f4:	460b      	mov	r3, r1
   152f6:	4610      	mov	r0, r2
   152f8:	4619      	mov	r1, r3
   152fa:	a377      	add	r3, pc, #476	; (adr r3, 154d8 <estimator_update_ir_estim+0x264>)
   152fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15300:	f002 fa12 	bl	17728 <__aeabi_dsub>
   15304:	4602      	mov	r2, r0
   15306:	460b      	mov	r3, r1
   15308:	4610      	mov	r0, r2
   1530a:	4619      	mov	r1, r3
   1530c:	f002 fea2 	bl	18054 <__aeabi_d2f>
   15310:	4603      	mov	r3, r0
   15312:	60fb      	str	r3, [r7, #12]
   15314:	68f8      	ldr	r0, [r7, #12]
   15316:	f002 fb67 	bl	179e8 <__aeabi_f2d>
   1531a:	4602      	mov	r2, r0
   1531c:	460b      	mov	r3, r1
   1531e:	4610      	mov	r0, r2
   15320:	4619      	mov	r1, r3
   15322:	a36f      	add	r3, pc, #444	; (adr r3, 154e0 <estimator_update_ir_estim+0x26c>)
   15324:	e9d3 2300 	ldrd	r2, r3, [r3]
   15328:	f002 fe42 	bl	17fb0 <__aeabi_dcmpgt>
   1532c:	4603      	mov	r3, r0
   1532e:	2b00      	cmp	r3, #0
   15330:	d1dc      	bne.n	152ec <estimator_update_ir_estim+0x78>
   15332:	e013      	b.n	1535c <estimator_update_ir_estim+0xe8>
   15334:	68f8      	ldr	r0, [r7, #12]
   15336:	f002 fb57 	bl	179e8 <__aeabi_f2d>
   1533a:	4602      	mov	r2, r0
   1533c:	460b      	mov	r3, r1
   1533e:	4610      	mov	r0, r2
   15340:	4619      	mov	r1, r3
   15342:	a365      	add	r3, pc, #404	; (adr r3, 154d8 <estimator_update_ir_estim+0x264>)
   15344:	e9d3 2300 	ldrd	r2, r3, [r3]
   15348:	f002 f9f0 	bl	1772c <__adddf3>
   1534c:	4602      	mov	r2, r0
   1534e:	460b      	mov	r3, r1
   15350:	4610      	mov	r0, r2
   15352:	4619      	mov	r1, r3
   15354:	f002 fe7e 	bl	18054 <__aeabi_d2f>
   15358:	4603      	mov	r3, r0
   1535a:	60fb      	str	r3, [r7, #12]
   1535c:	68f8      	ldr	r0, [r7, #12]
   1535e:	f002 fb43 	bl	179e8 <__aeabi_f2d>
   15362:	4602      	mov	r2, r0
   15364:	460b      	mov	r3, r1
   15366:	4610      	mov	r0, r2
   15368:	4619      	mov	r1, r3
   1536a:	a35f      	add	r3, pc, #380	; (adr r3, 154e8 <estimator_update_ir_estim+0x274>)
   1536c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15370:	f002 fe00 	bl	17f74 <__aeabi_dcmplt>
   15374:	4603      	mov	r3, r0
   15376:	2b00      	cmp	r3, #0
   15378:	d1dc      	bne.n	15334 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   1537a:	68f8      	ldr	r0, [r7, #12]
   1537c:	68b9      	ldr	r1, [r7, #8]
   1537e:	f003 f87b 	bl	18478 <__aeabi_fdiv>
   15382:	4603      	mov	r3, r0
   15384:	4618      	mov	r0, r3
   15386:	f002 fb2f 	bl	179e8 <__aeabi_f2d>
   1538a:	4602      	mov	r2, r0
   1538c:	460b      	mov	r3, r1
   1538e:	4610      	mov	r0, r2
   15390:	4619      	mov	r1, r3
   15392:	f04f 0200 	mov.w	r2, #0
   15396:	f04f 0300 	mov.w	r3, #0
   1539a:	f2c4 0324 	movt	r3, #16420	; 0x4024
   1539e:	f002 fb77 	bl	17a90 <__aeabi_dmul>
   153a2:	4602      	mov	r2, r0
   153a4:	460b      	mov	r3, r1
   153a6:	4610      	mov	r0, r2
   153a8:	4619      	mov	r1, r3
   153aa:	a351      	add	r3, pc, #324	; (adr r3, 154f0 <estimator_update_ir_estim+0x27c>)
   153ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   153b0:	f002 fc98 	bl	17ce4 <__aeabi_ddiv>
   153b4:	4602      	mov	r2, r0
   153b6:	460b      	mov	r3, r1
   153b8:	4610      	mov	r0, r2
   153ba:	4619      	mov	r1, r3
   153bc:	f002 fe4a 	bl	18054 <__aeabi_d2f>
   153c0:	4603      	mov	r3, r0
   153c2:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   153c4:	e013      	b.n	153ee <estimator_update_ir_estim+0x17a>
   153c6:	68f8      	ldr	r0, [r7, #12]
   153c8:	f002 fb0e 	bl	179e8 <__aeabi_f2d>
   153cc:	4602      	mov	r2, r0
   153ce:	460b      	mov	r3, r1
   153d0:	4610      	mov	r0, r2
   153d2:	4619      	mov	r1, r3
   153d4:	a340      	add	r3, pc, #256	; (adr r3, 154d8 <estimator_update_ir_estim+0x264>)
   153d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   153da:	f002 f9a5 	bl	17728 <__aeabi_dsub>
   153de:	4602      	mov	r2, r0
   153e0:	460b      	mov	r3, r1
   153e2:	4610      	mov	r0, r2
   153e4:	4619      	mov	r1, r3
   153e6:	f002 fe35 	bl	18054 <__aeabi_d2f>
   153ea:	4603      	mov	r3, r0
   153ec:	60fb      	str	r3, [r7, #12]
   153ee:	68f8      	ldr	r0, [r7, #12]
   153f0:	f002 fafa 	bl	179e8 <__aeabi_f2d>
   153f4:	4602      	mov	r2, r0
   153f6:	460b      	mov	r3, r1
   153f8:	4610      	mov	r0, r2
   153fa:	4619      	mov	r1, r3
   153fc:	a338      	add	r3, pc, #224	; (adr r3, 154e0 <estimator_update_ir_estim+0x26c>)
   153fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   15402:	f002 fdd5 	bl	17fb0 <__aeabi_dcmpgt>
   15406:	4603      	mov	r3, r0
   15408:	2b00      	cmp	r3, #0
   1540a:	d1dc      	bne.n	153c6 <estimator_update_ir_estim+0x152>
   1540c:	e013      	b.n	15436 <estimator_update_ir_estim+0x1c2>
   1540e:	68f8      	ldr	r0, [r7, #12]
   15410:	f002 faea 	bl	179e8 <__aeabi_f2d>
   15414:	4602      	mov	r2, r0
   15416:	460b      	mov	r3, r1
   15418:	4610      	mov	r0, r2
   1541a:	4619      	mov	r1, r3
   1541c:	a32e      	add	r3, pc, #184	; (adr r3, 154d8 <estimator_update_ir_estim+0x264>)
   1541e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15422:	f002 f983 	bl	1772c <__adddf3>
   15426:	4602      	mov	r2, r0
   15428:	460b      	mov	r3, r1
   1542a:	4610      	mov	r0, r2
   1542c:	4619      	mov	r1, r3
   1542e:	f002 fe11 	bl	18054 <__aeabi_d2f>
   15432:	4603      	mov	r3, r0
   15434:	60fb      	str	r3, [r7, #12]
   15436:	68f8      	ldr	r0, [r7, #12]
   15438:	f002 fad6 	bl	179e8 <__aeabi_f2d>
   1543c:	4602      	mov	r2, r0
   1543e:	460b      	mov	r3, r1
   15440:	4610      	mov	r0, r2
   15442:	4619      	mov	r1, r3
   15444:	a328      	add	r3, pc, #160	; (adr r3, 154e8 <estimator_update_ir_estim+0x274>)
   15446:	e9d3 2300 	ldrd	r2, r3, [r3]
   1544a:	f002 fd93 	bl	17f74 <__aeabi_dcmplt>
   1544e:	4603      	mov	r3, r0
   15450:	2b00      	cmp	r3, #0
   15452:	d1dc      	bne.n	1540e <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   15454:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   15458:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1545c:	881b      	ldrh	r3, [r3, #0]
   1545e:	b21b      	sxth	r3, r3
   15460:	4618      	mov	r0, r3
   15462:	f002 ff01 	bl	18268 <__aeabi_i2f>
   15466:	4602      	mov	r2, r0
   15468:	f64c 1310 	movw	r3, #51472	; 0xc910
   1546c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15470:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   15472:	f64c 1314 	movw	r3, #51476	; 0xc914
   15476:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1547a:	68fa      	ldr	r2, [r7, #12]
   1547c:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   1547e:	68f8      	ldr	r0, [r7, #12]
   15480:	f04f 0100 	mov.w	r1, #0
   15484:	f003 f8e2 	bl	1864c <__aeabi_fcmplt>
   15488:	4603      	mov	r3, r0
   1548a:	2b00      	cmp	r3, #0
   1548c:	d003      	beq.n	15496 <estimator_update_ir_estim+0x222>
   1548e:	68fb      	ldr	r3, [r7, #12]
   15490:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   15494:	e000      	b.n	15498 <estimator_update_ir_estim+0x224>
   15496:	68fb      	ldr	r3, [r7, #12]
   15498:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   1549a:	6878      	ldr	r0, [r7, #4]
   1549c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   154a0:	f003 f8d4 	bl	1864c <__aeabi_fcmplt>
   154a4:	4603      	mov	r3, r0
   154a6:	2b00      	cmp	r3, #0
   154a8:	d100      	bne.n	154ac <estimator_update_ir_estim+0x238>
   154aa:	e128      	b.n	156fe <estimator_update_ir_estim+0x48a>
   154ac:	6878      	ldr	r0, [r7, #4]
   154ae:	f002 fa9b 	bl	179e8 <__aeabi_f2d>
   154b2:	4602      	mov	r2, r0
   154b4:	460b      	mov	r3, r1
   154b6:	4610      	mov	r0, r2
   154b8:	4619      	mov	r1, r3
   154ba:	a30f      	add	r3, pc, #60	; (adr r3, 154f8 <estimator_update_ir_estim+0x284>)
   154bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   154c0:	f002 fd76 	bl	17fb0 <__aeabi_dcmpgt>
   154c4:	4603      	mov	r3, r0
   154c6:	2b00      	cmp	r3, #0
   154c8:	d11a      	bne.n	15500 <estimator_update_ir_estim+0x28c>
   154ca:	e118      	b.n	156fe <estimator_update_ir_estim+0x48a>
   154cc:	f3af 8000 	nop.w
   154d0:	9999999a 	.word	0x9999999a
   154d4:	3fb99999 	.word	0x3fb99999
   154d8:	54442d18 	.word	0x54442d18
   154dc:	401921fb 	.word	0x401921fb
   154e0:	54442d18 	.word	0x54442d18
   154e4:	400921fb 	.word	0x400921fb
   154e8:	54442d18 	.word	0x54442d18
   154ec:	c00921fb 	.word	0xc00921fb
   154f0:	51eb851f 	.word	0x51eb851f
   154f4:	40239eb8 	.word	0x40239eb8
   154f8:	9999999a 	.word	0x9999999a
   154fc:	3fa99999 	.word	0x3fa99999
   15500:	f240 5340 	movw	r3, #1344	; 0x540
   15504:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15508:	881b      	ldrh	r3, [r3, #0]
   1550a:	b21b      	sxth	r3, r3
   1550c:	425b      	negs	r3, r3
   1550e:	0fda      	lsrs	r2, r3, #31
   15510:	4413      	add	r3, r2
   15512:	105b      	asrs	r3, r3, #1
   15514:	461a      	mov	r2, r3
   15516:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   1551a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1551e:	881b      	ldrh	r3, [r3, #0]
   15520:	b21b      	sxth	r3, r3
   15522:	429a      	cmp	r2, r3
   15524:	f280 8098 	bge.w	15658 <estimator_update_ir_estim+0x3e4>
   15528:	f240 5340 	movw	r3, #1344	; 0x540
   1552c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15530:	881b      	ldrh	r3, [r3, #0]
   15532:	b21b      	sxth	r3, r3
   15534:	0fda      	lsrs	r2, r3, #31
   15536:	4413      	add	r3, r2
   15538:	105b      	asrs	r3, r3, #1
   1553a:	b29a      	uxth	r2, r3
   1553c:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   15540:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15544:	881b      	ldrh	r3, [r3, #0]
   15546:	b212      	sxth	r2, r2
   15548:	b21b      	sxth	r3, r3
   1554a:	429a      	cmp	r2, r3
   1554c:	f340 8084 	ble.w	15658 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15550:	f64c 1314 	movw	r3, #51476	; 0xc914
   15554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15558:	681a      	ldr	r2, [r3, #0]
   1555a:	f64c 1310 	movw	r3, #51472	; 0xc910
   1555e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15562:	681b      	ldr	r3, [r3, #0]
   15564:	4610      	mov	r0, r2
   15566:	4619      	mov	r1, r3
   15568:	f002 fed2 	bl	18310 <__aeabi_fmul>
   1556c:	4603      	mov	r3, r0
   1556e:	4618      	mov	r0, r3
   15570:	f002 fa3a 	bl	179e8 <__aeabi_f2d>
   15574:	4604      	mov	r4, r0
   15576:	460d      	mov	r5, r1
   15578:	f64c 1324 	movw	r3, #51492	; 0xc924
   1557c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15580:	681b      	ldr	r3, [r3, #0]
   15582:	4618      	mov	r0, r3
   15584:	f002 fa30 	bl	179e8 <__aeabi_f2d>
   15588:	4602      	mov	r2, r0
   1558a:	460b      	mov	r3, r1
   1558c:	4610      	mov	r0, r2
   1558e:	4619      	mov	r1, r3
   15590:	a367      	add	r3, pc, #412	; (adr r3, 15730 <estimator_update_ir_estim+0x4bc>)
   15592:	e9d3 2300 	ldrd	r2, r3, [r3]
   15596:	f002 fa7b 	bl	17a90 <__aeabi_dmul>
   1559a:	4602      	mov	r2, r0
   1559c:	460b      	mov	r3, r1
   1559e:	4620      	mov	r0, r4
   155a0:	4629      	mov	r1, r5
   155a2:	f002 f8c3 	bl	1772c <__adddf3>
   155a6:	4602      	mov	r2, r0
   155a8:	460b      	mov	r3, r1
   155aa:	4610      	mov	r0, r2
   155ac:	4619      	mov	r1, r3
   155ae:	f002 fd51 	bl	18054 <__aeabi_d2f>
   155b2:	4602      	mov	r2, r0
   155b4:	f64c 1324 	movw	r3, #51492	; 0xc924
   155b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155bc:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   155be:	f64c 1310 	movw	r3, #51472	; 0xc910
   155c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155c6:	681a      	ldr	r2, [r3, #0]
   155c8:	f64c 1310 	movw	r3, #51472	; 0xc910
   155cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155d0:	681b      	ldr	r3, [r3, #0]
   155d2:	4610      	mov	r0, r2
   155d4:	4619      	mov	r1, r3
   155d6:	f002 fe9b 	bl	18310 <__aeabi_fmul>
   155da:	4603      	mov	r3, r0
   155dc:	4618      	mov	r0, r3
   155de:	f002 fa03 	bl	179e8 <__aeabi_f2d>
   155e2:	4604      	mov	r4, r0
   155e4:	460d      	mov	r5, r1
   155e6:	f64c 1328 	movw	r3, #51496	; 0xc928
   155ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155ee:	681b      	ldr	r3, [r3, #0]
   155f0:	4618      	mov	r0, r3
   155f2:	f002 f9f9 	bl	179e8 <__aeabi_f2d>
   155f6:	4602      	mov	r2, r0
   155f8:	460b      	mov	r3, r1
   155fa:	4610      	mov	r0, r2
   155fc:	4619      	mov	r1, r3
   155fe:	a34c      	add	r3, pc, #304	; (adr r3, 15730 <estimator_update_ir_estim+0x4bc>)
   15600:	e9d3 2300 	ldrd	r2, r3, [r3]
   15604:	f002 fa44 	bl	17a90 <__aeabi_dmul>
   15608:	4602      	mov	r2, r0
   1560a:	460b      	mov	r3, r1
   1560c:	4620      	mov	r0, r4
   1560e:	4629      	mov	r1, r5
   15610:	f002 f88c 	bl	1772c <__adddf3>
   15614:	4602      	mov	r2, r0
   15616:	460b      	mov	r3, r1
   15618:	4610      	mov	r0, r2
   1561a:	4619      	mov	r1, r3
   1561c:	f002 fd1a 	bl	18054 <__aeabi_d2f>
   15620:	4602      	mov	r2, r0
   15622:	f64c 1328 	movw	r3, #51496	; 0xc928
   15626:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1562a:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   1562c:	f64c 1324 	movw	r3, #51492	; 0xc924
   15630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15634:	681a      	ldr	r2, [r3, #0]
   15636:	f64c 1328 	movw	r3, #51496	; 0xc928
   1563a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1563e:	681b      	ldr	r3, [r3, #0]
   15640:	4610      	mov	r0, r2
   15642:	4619      	mov	r1, r3
   15644:	f002 ff18 	bl	18478 <__aeabi_fdiv>
   15648:	4603      	mov	r3, r0
   1564a:	461a      	mov	r2, r3
   1564c:	f64c 130c 	movw	r3, #51468	; 0xc90c
   15650:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15654:	601a      	str	r2, [r3, #0]
   15656:	e052      	b.n	156fe <estimator_update_ir_estim+0x48a>
   15658:	e051      	b.n	156fe <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   1565a:	f64c 1318 	movw	r3, #51480	; 0xc918
   1565e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15662:	2201      	movs	r2, #1
   15664:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   15666:	f240 5340 	movw	r3, #1344	; 0x540
   1566a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1566e:	881b      	ldrh	r3, [r3, #0]
   15670:	b21b      	sxth	r3, r3
   15672:	4618      	mov	r0, r3
   15674:	f002 fdf8 	bl	18268 <__aeabi_i2f>
   15678:	4603      	mov	r3, r0
   1567a:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   1567c:	6838      	ldr	r0, [r7, #0]
   1567e:	6839      	ldr	r1, [r7, #0]
   15680:	f002 fe46 	bl	18310 <__aeabi_fmul>
   15684:	4603      	mov	r3, r0
   15686:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15688:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1568c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15690:	681b      	ldr	r3, [r3, #0]
   15692:	4618      	mov	r0, r3
   15694:	f002 f9a8 	bl	179e8 <__aeabi_f2d>
   15698:	4602      	mov	r2, r0
   1569a:	460b      	mov	r3, r1
   1569c:	4610      	mov	r0, r2
   1569e:	4619      	mov	r1, r3
   156a0:	f04f 0200 	mov.w	r2, #0
   156a4:	f04f 0300 	mov.w	r3, #0
   156a8:	f2c4 0359 	movt	r3, #16473	; 0x4059
   156ac:	f002 f9f0 	bl	17a90 <__aeabi_dmul>
   156b0:	4602      	mov	r2, r0
   156b2:	460b      	mov	r3, r1
   156b4:	4614      	mov	r4, r2
   156b6:	461d      	mov	r5, r3
   156b8:	6838      	ldr	r0, [r7, #0]
   156ba:	f002 f995 	bl	179e8 <__aeabi_f2d>
   156be:	4602      	mov	r2, r0
   156c0:	460b      	mov	r3, r1
   156c2:	4620      	mov	r0, r4
   156c4:	4629      	mov	r1, r5
   156c6:	f002 f9e3 	bl	17a90 <__aeabi_dmul>
   156ca:	4602      	mov	r2, r0
   156cc:	460b      	mov	r3, r1
   156ce:	4610      	mov	r0, r2
   156d0:	4619      	mov	r1, r3
   156d2:	f002 fcbf 	bl	18054 <__aeabi_d2f>
   156d6:	4602      	mov	r2, r0
   156d8:	f64c 1324 	movw	r3, #51492	; 0xc924
   156dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156e0:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   156e2:	6838      	ldr	r0, [r7, #0]
   156e4:	f04f 0100 	mov.w	r1, #0
   156e8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   156ec:	f002 fe10 	bl	18310 <__aeabi_fmul>
   156f0:	4603      	mov	r3, r0
   156f2:	461a      	mov	r2, r3
   156f4:	f64c 1328 	movw	r3, #51496	; 0xc928
   156f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156fc:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   156fe:	f64c 1308 	movw	r3, #51464	; 0xc908
   15702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15706:	681a      	ldr	r2, [r3, #0]
   15708:	f64c 1320 	movw	r3, #51488	; 0xc920
   1570c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15710:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   15712:	f24c 4388 	movw	r3, #50312	; 0xc488
   15716:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1571a:	681a      	ldr	r2, [r3, #0]
   1571c:	f64c 131c 	movw	r3, #51484	; 0xc91c
   15720:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15724:	601a      	str	r2, [r3, #0]
}
   15726:	3710      	adds	r7, #16
   15728:	46bd      	mov	sp, r7
   1572a:	bdb0      	pop	{r4, r5, r7, pc}
   1572c:	f3af 8000 	nop.w
   15730:	d916872b 	.word	0xd916872b
   15734:	3feff7ce 	.word	0x3feff7ce

00015738 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15738:	b580      	push	{r7, lr}
   1573a:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   1573c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   15740:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15744:	781b      	ldrb	r3, [r3, #0]
   15746:	f003 0320 	and.w	r3, r3, #32
   1574a:	2b00      	cmp	r3, #0
   1574c:	d044      	beq.n	157d8 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   1574e:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   15752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15756:	681a      	ldr	r2, [r3, #0]
   15758:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1575c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15760:	601a      	str	r2, [r3, #0]
   15762:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   15766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1576a:	681a      	ldr	r2, [r3, #0]
   1576c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   15770:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15774:	601a      	str	r2, [r3, #0]
   15776:	f24c 438c 	movw	r3, #50316	; 0xc48c
   1577a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1577e:	681a      	ldr	r2, [r3, #0]
   15780:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   15784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15788:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   1578a:	f24c 4390 	movw	r3, #50320	; 0xc490
   1578e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15792:	681a      	ldr	r2, [r3, #0]
   15794:	f64c 1304 	movw	r3, #51460	; 0xc904
   15798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1579c:	601a      	str	r2, [r3, #0]
   1579e:	f24c 4398 	movw	r3, #50328	; 0xc498
   157a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157a6:	681a      	ldr	r2, [r3, #0]
   157a8:	f64c 1308 	movw	r3, #51464	; 0xc908
   157ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157b0:	601a      	str	r2, [r3, #0]
   157b2:	f24c 4394 	movw	r3, #50324	; 0xc494
   157b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ba:	681a      	ldr	r2, [r3, #0]
   157bc:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   157c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157c4:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   157c6:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   157ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ce:	881b      	ldrh	r3, [r3, #0]
   157d0:	2b00      	cmp	r3, #0
   157d2:	d001      	beq.n	157d8 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   157d4:	f7ff fd4e 	bl	15274 <estimator_update_ir_estim>
  }
}
   157d8:	bd80      	pop	{r7, pc}
   157da:	bf00      	nop

000157dc <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   157dc:	b480      	push	{r7}
   157de:	af00      	add	r7, sp, #0
  
}
   157e0:	46bd      	mov	sp, r7
   157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   157e6:	4770      	bx	lr

000157e8 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   157e8:	b5b0      	push	{r4, r5, r7, lr}
   157ea:	b082      	sub	sp, #8
   157ec:	af00      	add	r7, sp, #0
   157ee:	4603      	mov	r3, r0
   157f0:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   157f2:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   157f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157fa:	781b      	ldrb	r3, [r3, #0]
   157fc:	2b01      	cmp	r3, #1
   157fe:	f040 80e0 	bne.w	159c2 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15802:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1580a:	781b      	ldrb	r3, [r3, #0]
   1580c:	2b02      	cmp	r3, #2
   1580e:	d168      	bne.n	158e2 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15810:	79fb      	ldrb	r3, [r7, #7]
   15812:	2b00      	cmp	r3, #0
   15814:	d013      	beq.n	1583e <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   15816:	f240 5344 	movw	r3, #1348	; 0x544
   1581a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1581e:	881a      	ldrh	r2, [r3, #0]
   15820:	f64c 1332 	movw	r3, #51506	; 0xc932
   15824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15828:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1582a:	f24c 4320 	movw	r3, #50208	; 0xc420
   1582e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15832:	895a      	ldrh	r2, [r3, #10]
   15834:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1583c:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1583e:	f24c 4320 	movw	r3, #50208	; 0xc420
   15842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15846:	895b      	ldrh	r3, [r3, #10]
   15848:	b21a      	sxth	r2, r3
   1584a:	f64c 132e 	movw	r3, #51502	; 0xc92e
   1584e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15852:	881b      	ldrh	r3, [r3, #0]
   15854:	b21b      	sxth	r3, r3
   15856:	1ad3      	subs	r3, r2, r3
   15858:	4618      	mov	r0, r3
   1585a:	f002 fd05 	bl	18268 <__aeabi_i2f>
   1585e:	4603      	mov	r3, r0
   15860:	4618      	mov	r0, r3
   15862:	f002 f8c1 	bl	179e8 <__aeabi_f2d>
   15866:	4602      	mov	r2, r0
   15868:	460b      	mov	r3, r1
   1586a:	4610      	mov	r0, r2
   1586c:	4619      	mov	r1, r3
   1586e:	f04f 0200 	mov.w	r2, #0
   15872:	f04f 0300 	mov.w	r3, #0
   15876:	f2c4 034e 	movt	r3, #16462	; 0x404e
   1587a:	f002 f909 	bl	17a90 <__aeabi_dmul>
   1587e:	4602      	mov	r2, r0
   15880:	460b      	mov	r3, r1
   15882:	4610      	mov	r0, r2
   15884:	4619      	mov	r1, r3
   15886:	f04f 0200 	mov.w	r2, #0
   1588a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1588e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15892:	f002 fa27 	bl	17ce4 <__aeabi_ddiv>
   15896:	4602      	mov	r2, r0
   15898:	460b      	mov	r3, r1
   1589a:	4610      	mov	r0, r2
   1589c:	4619      	mov	r1, r3
   1589e:	f002 fb91 	bl	17fc4 <__aeabi_d2iz>
   158a2:	4603      	mov	r3, r0
   158a4:	b29b      	uxth	r3, r3
   158a6:	b29a      	uxth	r2, r3
   158a8:	f64c 1332 	movw	r3, #51506	; 0xc932
   158ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158b0:	881b      	ldrh	r3, [r3, #0]
   158b2:	b29b      	uxth	r3, r3
   158b4:	4413      	add	r3, r2
   158b6:	b29b      	uxth	r3, r3
   158b8:	b29a      	uxth	r2, r3
   158ba:	f240 5344 	movw	r3, #1348	; 0x544
   158be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158c2:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   158c4:	f240 5344 	movw	r3, #1348	; 0x544
   158c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158cc:	881b      	ldrh	r3, [r3, #0]
   158ce:	b21b      	sxth	r3, r3
   158d0:	4618      	mov	r0, r3
   158d2:	f002 fcc9 	bl	18268 <__aeabi_i2f>
   158d6:	4602      	mov	r2, r0
   158d8:	f24c 3308 	movw	r3, #49928	; 0xc308
   158dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158e0:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   158e2:	f64c 132c 	movw	r3, #51500	; 0xc92c
   158e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ea:	781b      	ldrb	r3, [r3, #0]
   158ec:	2b02      	cmp	r3, #2
   158ee:	d168      	bne.n	159c2 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   158f0:	79fb      	ldrb	r3, [r7, #7]
   158f2:	2b00      	cmp	r3, #0
   158f4:	d013      	beq.n	1591e <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   158f6:	f240 5342 	movw	r3, #1346	; 0x542
   158fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158fe:	881a      	ldrh	r2, [r3, #0]
   15900:	f64c 1334 	movw	r3, #51508	; 0xc934
   15904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15908:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1590a:	f24c 4320 	movw	r3, #50208	; 0xc420
   1590e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15912:	899a      	ldrh	r2, [r3, #12]
   15914:	f64c 1330 	movw	r3, #51504	; 0xc930
   15918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1591c:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   1591e:	f24c 4320 	movw	r3, #50208	; 0xc420
   15922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15926:	899b      	ldrh	r3, [r3, #12]
   15928:	b21a      	sxth	r2, r3
   1592a:	f64c 1330 	movw	r3, #51504	; 0xc930
   1592e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15932:	881b      	ldrh	r3, [r3, #0]
   15934:	b21b      	sxth	r3, r3
   15936:	1ad3      	subs	r3, r2, r3
   15938:	4618      	mov	r0, r3
   1593a:	f002 fc95 	bl	18268 <__aeabi_i2f>
   1593e:	4603      	mov	r3, r0
   15940:	4618      	mov	r0, r3
   15942:	f002 f851 	bl	179e8 <__aeabi_f2d>
   15946:	4602      	mov	r2, r0
   15948:	460b      	mov	r3, r1
   1594a:	4610      	mov	r0, r2
   1594c:	4619      	mov	r1, r3
   1594e:	f04f 0200 	mov.w	r2, #0
   15952:	f04f 0300 	mov.w	r3, #0
   15956:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   1595a:	f002 f899 	bl	17a90 <__aeabi_dmul>
   1595e:	4602      	mov	r2, r0
   15960:	460b      	mov	r3, r1
   15962:	4610      	mov	r0, r2
   15964:	4619      	mov	r1, r3
   15966:	f04f 0200 	mov.w	r2, #0
   1596a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1596e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15972:	f002 f9b7 	bl	17ce4 <__aeabi_ddiv>
   15976:	4602      	mov	r2, r0
   15978:	460b      	mov	r3, r1
   1597a:	4610      	mov	r0, r2
   1597c:	4619      	mov	r1, r3
   1597e:	f002 fb21 	bl	17fc4 <__aeabi_d2iz>
   15982:	4603      	mov	r3, r0
   15984:	b29b      	uxth	r3, r3
   15986:	b29a      	uxth	r2, r3
   15988:	f64c 1334 	movw	r3, #51508	; 0xc934
   1598c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15990:	881b      	ldrh	r3, [r3, #0]
   15992:	b29b      	uxth	r3, r3
   15994:	4413      	add	r3, r2
   15996:	b29b      	uxth	r3, r3
   15998:	b29a      	uxth	r2, r3
   1599a:	f240 5342 	movw	r3, #1346	; 0x542
   1599e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159a2:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   159a4:	f240 5342 	movw	r3, #1346	; 0x542
   159a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ac:	881b      	ldrh	r3, [r3, #0]
   159ae:	b21b      	sxth	r3, r3
   159b0:	4618      	mov	r0, r3
   159b2:	f002 fc59 	bl	18268 <__aeabi_i2f>
   159b6:	4602      	mov	r2, r0
   159b8:	f24c 330c 	movw	r3, #49932	; 0xc30c
   159bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159c0:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   159c2:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   159c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159ca:	781b      	ldrb	r3, [r3, #0]
   159cc:	2b02      	cmp	r3, #2
   159ce:	f040 80da 	bne.w	15b86 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   159d2:	f64c 132c 	movw	r3, #51500	; 0xc92c
   159d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159da:	781b      	ldrb	r3, [r3, #0]
   159dc:	2b02      	cmp	r3, #2
   159de:	d165      	bne.n	15aac <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   159e0:	79fb      	ldrb	r3, [r7, #7]
   159e2:	2b00      	cmp	r3, #0
   159e4:	d013      	beq.n	15a0e <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   159e6:	f240 5358 	movw	r3, #1368	; 0x558
   159ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ee:	681a      	ldr	r2, [r3, #0]
   159f0:	f64c 1338 	movw	r3, #51512	; 0xc938
   159f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159f8:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   159fa:	f24c 4320 	movw	r3, #50208	; 0xc420
   159fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a02:	895a      	ldrh	r2, [r3, #10]
   15a04:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a0c:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15a0e:	f64c 1338 	movw	r3, #51512	; 0xc938
   15a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a16:	681b      	ldr	r3, [r3, #0]
   15a18:	4618      	mov	r0, r3
   15a1a:	f001 ffe5 	bl	179e8 <__aeabi_f2d>
   15a1e:	4604      	mov	r4, r0
   15a20:	460d      	mov	r5, r1
   15a22:	f24c 4320 	movw	r3, #50208	; 0xc420
   15a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a2a:	895b      	ldrh	r3, [r3, #10]
   15a2c:	b21a      	sxth	r2, r3
   15a2e:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a36:	881b      	ldrh	r3, [r3, #0]
   15a38:	b21b      	sxth	r3, r3
   15a3a:	1ad3      	subs	r3, r2, r3
   15a3c:	4618      	mov	r0, r3
   15a3e:	f002 fc13 	bl	18268 <__aeabi_i2f>
   15a42:	4603      	mov	r3, r0
   15a44:	4618      	mov	r0, r3
   15a46:	f001 ffcf 	bl	179e8 <__aeabi_f2d>
   15a4a:	4602      	mov	r2, r0
   15a4c:	460b      	mov	r3, r1
   15a4e:	4610      	mov	r0, r2
   15a50:	4619      	mov	r1, r3
   15a52:	a34f      	add	r3, pc, #316	; (adr r3, 15b90 <inflight_calib+0x3a8>)
   15a54:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a58:	f002 f81a 	bl	17a90 <__aeabi_dmul>
   15a5c:	4602      	mov	r2, r0
   15a5e:	460b      	mov	r3, r1
   15a60:	4610      	mov	r0, r2
   15a62:	4619      	mov	r1, r3
   15a64:	f04f 0200 	mov.w	r2, #0
   15a68:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a6c:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a70:	f002 f938 	bl	17ce4 <__aeabi_ddiv>
   15a74:	4602      	mov	r2, r0
   15a76:	460b      	mov	r3, r1
   15a78:	4620      	mov	r0, r4
   15a7a:	4629      	mov	r1, r5
   15a7c:	f001 fe56 	bl	1772c <__adddf3>
   15a80:	4602      	mov	r2, r0
   15a82:	460b      	mov	r3, r1
   15a84:	4610      	mov	r0, r2
   15a86:	4619      	mov	r1, r3
   15a88:	f002 fae4 	bl	18054 <__aeabi_d2f>
   15a8c:	4602      	mov	r2, r0
   15a8e:	f240 5358 	movw	r3, #1368	; 0x558
   15a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a96:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15a98:	f240 5358 	movw	r3, #1368	; 0x558
   15a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aa0:	681a      	ldr	r2, [r3, #0]
   15aa2:	f24c 3308 	movw	r3, #49928	; 0xc308
   15aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aaa:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15aac:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ab4:	781b      	ldrb	r3, [r3, #0]
   15ab6:	2b02      	cmp	r3, #2
   15ab8:	d165      	bne.n	15b86 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15aba:	79fb      	ldrb	r3, [r7, #7]
   15abc:	2b00      	cmp	r3, #0
   15abe:	d013      	beq.n	15ae8 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15ac0:	f240 535c 	movw	r3, #1372	; 0x55c
   15ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ac8:	681a      	ldr	r2, [r3, #0]
   15aca:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ad2:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15ad4:	f24c 4320 	movw	r3, #50208	; 0xc420
   15ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15adc:	899a      	ldrh	r2, [r3, #12]
   15ade:	f64c 1330 	movw	r3, #51504	; 0xc930
   15ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ae6:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15ae8:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15af0:	681b      	ldr	r3, [r3, #0]
   15af2:	4618      	mov	r0, r3
   15af4:	f001 ff78 	bl	179e8 <__aeabi_f2d>
   15af8:	4604      	mov	r4, r0
   15afa:	460d      	mov	r5, r1
   15afc:	f24c 4320 	movw	r3, #50208	; 0xc420
   15b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b04:	899b      	ldrh	r3, [r3, #12]
   15b06:	b21a      	sxth	r2, r3
   15b08:	f64c 1330 	movw	r3, #51504	; 0xc930
   15b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b10:	881b      	ldrh	r3, [r3, #0]
   15b12:	b21b      	sxth	r3, r3
   15b14:	1ad3      	subs	r3, r2, r3
   15b16:	4618      	mov	r0, r3
   15b18:	f002 fba6 	bl	18268 <__aeabi_i2f>
   15b1c:	4603      	mov	r3, r0
   15b1e:	4618      	mov	r0, r3
   15b20:	f001 ff62 	bl	179e8 <__aeabi_f2d>
   15b24:	4602      	mov	r2, r0
   15b26:	460b      	mov	r3, r1
   15b28:	4610      	mov	r0, r2
   15b2a:	4619      	mov	r1, r3
   15b2c:	a31a      	add	r3, pc, #104	; (adr r3, 15b98 <inflight_calib+0x3b0>)
   15b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b32:	f001 ffad 	bl	17a90 <__aeabi_dmul>
   15b36:	4602      	mov	r2, r0
   15b38:	460b      	mov	r3, r1
   15b3a:	4610      	mov	r0, r2
   15b3c:	4619      	mov	r1, r3
   15b3e:	f04f 0200 	mov.w	r2, #0
   15b42:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b46:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b4a:	f002 f8cb 	bl	17ce4 <__aeabi_ddiv>
   15b4e:	4602      	mov	r2, r0
   15b50:	460b      	mov	r3, r1
   15b52:	4620      	mov	r0, r4
   15b54:	4629      	mov	r1, r5
   15b56:	f001 fde9 	bl	1772c <__adddf3>
   15b5a:	4602      	mov	r2, r0
   15b5c:	460b      	mov	r3, r1
   15b5e:	4610      	mov	r0, r2
   15b60:	4619      	mov	r1, r3
   15b62:	f002 fa77 	bl	18054 <__aeabi_d2f>
   15b66:	4602      	mov	r2, r0
   15b68:	f240 535c 	movw	r3, #1372	; 0x55c
   15b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b70:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15b72:	f240 535c 	movw	r3, #1372	; 0x55c
   15b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b7a:	681a      	ldr	r2, [r3, #0]
   15b7c:	f24c 330c 	movw	r3, #49932	; 0xc30c
   15b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b84:	601a      	str	r2, [r3, #0]
    }
  }
}
   15b86:	3708      	adds	r7, #8
   15b88:	46bd      	mov	sp, r7
   15b8a:	bdb0      	pop	{r4, r5, r7, pc}
   15b8c:	f3af 8000 	nop.w
   15b90:	9999999a 	.word	0x9999999a
   15b94:	3fb99999 	.word	0x3fb99999
   15b98:	9999999a 	.word	0x9999999a
   15b9c:	bfc99999 	.word	0xbfc99999

00015ba0 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15ba4:	b08e      	sub	sp, #56	; 0x38
   15ba6:	af00      	add	r7, sp, #0
   15ba8:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15bac:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15bb0:	a357      	add	r3, pc, #348	; (adr r3, 15d10 <pp_atan2+0x170>)
   15bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15bba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15bbe:	f04f 0200 	mov.w	r2, #0
   15bc2:	f04f 0300 	mov.w	r3, #0
   15bc6:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15bca:	f001 ff61 	bl	17a90 <__aeabi_dmul>
   15bce:	4602      	mov	r2, r0
   15bd0:	460b      	mov	r3, r1
   15bd2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
   15bda:	f04f 0200 	mov.w	r2, #0
   15bde:	f04f 0300 	mov.w	r3, #0
   15be2:	f002 f9c7 	bl	17f74 <__aeabi_dcmplt>
   15be6:	4603      	mov	r3, r0
   15be8:	2b00      	cmp	r3, #0
   15bea:	d009      	beq.n	15c00 <pp_atan2+0x60>
   15bec:	a14a      	add	r1, pc, #296	; (adr r1, 15d18 <pp_atan2+0x178>)
   15bee:	e9d1 0100 	ldrd	r0, r1, [r1]
   15bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
   15bf6:	f001 fd97 	bl	17728 <__aeabi_dsub>
   15bfa:	4602      	mov	r2, r0
   15bfc:	460b      	mov	r3, r1
   15bfe:	e008      	b.n	15c12 <pp_atan2+0x72>
   15c00:	e9d7 0100 	ldrd	r0, r1, [r7]
   15c04:	a344      	add	r3, pc, #272	; (adr r3, 15d18 <pp_atan2+0x178>)
   15c06:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c0a:	f001 fd8f 	bl	1772c <__adddf3>
   15c0e:	4602      	mov	r2, r0
   15c10:	460b      	mov	r3, r1
   15c12:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c1a:	f04f 0200 	mov.w	r2, #0
   15c1e:	f04f 0300 	mov.w	r3, #0
   15c22:	f002 f9c5 	bl	17fb0 <__aeabi_dcmpgt>
   15c26:	4603      	mov	r3, r0
   15c28:	2b00      	cmp	r3, #0
   15c2a:	d02a      	beq.n	15c82 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15c2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c34:	f001 fd78 	bl	17728 <__aeabi_dsub>
   15c38:	4602      	mov	r2, r0
   15c3a:	460b      	mov	r3, r1
   15c3c:	4690      	mov	r8, r2
   15c3e:	4699      	mov	r9, r3
   15c40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c48:	f001 fd70 	bl	1772c <__adddf3>
   15c4c:	4602      	mov	r2, r0
   15c4e:	460b      	mov	r3, r1
   15c50:	4640      	mov	r0, r8
   15c52:	4649      	mov	r1, r9
   15c54:	f002 f846 	bl	17ce4 <__aeabi_ddiv>
   15c58:	4602      	mov	r2, r0
   15c5a:	460b      	mov	r3, r1
   15c5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15c60:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c68:	f001 ff12 	bl	17a90 <__aeabi_dmul>
   15c6c:	4602      	mov	r2, r0
   15c6e:	460b      	mov	r3, r1
   15c70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c74:	f001 fd58 	bl	17728 <__aeabi_dsub>
   15c78:	4602      	mov	r2, r0
   15c7a:	460b      	mov	r3, r1
   15c7c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15c80:	e029      	b.n	15cd6 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15c82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c8a:	f001 fd4f 	bl	1772c <__adddf3>
   15c8e:	4602      	mov	r2, r0
   15c90:	460b      	mov	r3, r1
   15c92:	4690      	mov	r8, r2
   15c94:	4699      	mov	r9, r3
   15c96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15c9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15c9e:	f001 fd43 	bl	17728 <__aeabi_dsub>
   15ca2:	4602      	mov	r2, r0
   15ca4:	460b      	mov	r3, r1
   15ca6:	4640      	mov	r0, r8
   15ca8:	4649      	mov	r1, r9
   15caa:	f002 f81b 	bl	17ce4 <__aeabi_ddiv>
   15cae:	4602      	mov	r2, r0
   15cb0:	460b      	mov	r3, r1
   15cb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15cb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15cba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15cbe:	f001 fee7 	bl	17a90 <__aeabi_dmul>
   15cc2:	4602      	mov	r2, r0
   15cc4:	460b      	mov	r3, r1
   15cc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15cca:	f001 fd2d 	bl	17728 <__aeabi_dsub>
   15cce:	4602      	mov	r2, r0
   15cd0:	460b      	mov	r3, r1
   15cd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15cd6:	e9d7 0100 	ldrd	r0, r1, [r7]
   15cda:	f04f 0200 	mov.w	r2, #0
   15cde:	f04f 0300 	mov.w	r3, #0
   15ce2:	f002 f947 	bl	17f74 <__aeabi_dcmplt>
   15ce6:	4603      	mov	r3, r0
   15ce8:	2b00      	cmp	r3, #0
   15cea:	d004      	beq.n	15cf6 <pp_atan2+0x156>
		return (-angle);
   15cec:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15cf0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15cf4:	e001      	b.n	15cfa <pp_atan2+0x15a>
	else
		return angle;
   15cf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15cfa:	4622      	mov	r2, r4
   15cfc:	462b      	mov	r3, r5
}
   15cfe:	4610      	mov	r0, r2
   15d00:	4619      	mov	r1, r3
   15d02:	3738      	adds	r7, #56	; 0x38
   15d04:	46bd      	mov	sp, r7
   15d06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15d0a:	bf00      	nop
   15d0c:	f3af 8000 	nop.w
   15d10:	54442d18 	.word	0x54442d18
   15d14:	3fe921fb 	.word	0x3fe921fb
   15d18:	d9d7bdbb 	.word	0xd9d7bdbb
   15d1c:	3ddb7cdf 	.word	0x3ddb7cdf

00015d20 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15d20:	b5b0      	push	{r4, r5, r7, lr}
   15d22:	b08c      	sub	sp, #48	; 0x30
   15d24:	af00      	add	r7, sp, #0
   15d26:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15d2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d32:	2301      	movs	r3, #1
   15d34:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15d36:	e00a      	b.n	15d4e <pp_sin+0x2e>
   15d38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d3c:	a35a      	add	r3, pc, #360	; (adr r3, 15ea8 <pp_sin+0x188>)
   15d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d42:	f001 fcf3 	bl	1772c <__adddf3>
   15d46:	4602      	mov	r2, r0
   15d48:	460b      	mov	r3, r1
   15d4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d52:	a357      	add	r3, pc, #348	; (adr r3, 15eb0 <pp_sin+0x190>)
   15d54:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d58:	f002 f90c 	bl	17f74 <__aeabi_dcmplt>
   15d5c:	4603      	mov	r3, r0
   15d5e:	2b00      	cmp	r3, #0
   15d60:	d1ea      	bne.n	15d38 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15d62:	e00a      	b.n	15d7a <pp_sin+0x5a>
   15d64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d68:	a34f      	add	r3, pc, #316	; (adr r3, 15ea8 <pp_sin+0x188>)
   15d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d6e:	f001 fcdb 	bl	17728 <__aeabi_dsub>
   15d72:	4602      	mov	r2, r0
   15d74:	460b      	mov	r3, r1
   15d76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d7e:	a34e      	add	r3, pc, #312	; (adr r3, 15eb8 <pp_sin+0x198>)
   15d80:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d84:	f002 f914 	bl	17fb0 <__aeabi_dcmpgt>
   15d88:	4603      	mov	r3, r0
   15d8a:	2b00      	cmp	r3, #0
   15d8c:	d1ea      	bne.n	15d64 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d92:	a34b      	add	r3, pc, #300	; (adr r3, 15ec0 <pp_sin+0x1a0>)
   15d94:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d98:	f002 f90a 	bl	17fb0 <__aeabi_dcmpgt>
   15d9c:	4603      	mov	r3, r0
   15d9e:	2b00      	cmp	r3, #0
   15da0:	d00d      	beq.n	15dbe <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15da2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15da6:	a348      	add	r3, pc, #288	; (adr r3, 15ec8 <pp_sin+0x1a8>)
   15da8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dac:	f001 fcbc 	bl	17728 <__aeabi_dsub>
   15db0:	4602      	mov	r2, r0
   15db2:	460b      	mov	r3, r1
   15db4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15db8:	f04f 33ff 	mov.w	r3, #4294967295
   15dbc:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dc2:	a343      	add	r3, pc, #268	; (adr r3, 15ed0 <pp_sin+0x1b0>)
   15dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dc8:	f001 ff8c 	bl	17ce4 <__aeabi_ddiv>
   15dcc:	4602      	mov	r2, r0
   15dce:	460b      	mov	r3, r1
   15dd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15dd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15ddc:	f001 fe58 	bl	17a90 <__aeabi_dmul>
   15de0:	4602      	mov	r2, r0
   15de2:	460b      	mov	r3, r1
   15de4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15de8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15dec:	a33a      	add	r3, pc, #232	; (adr r3, 15ed8 <pp_sin+0x1b8>)
   15dee:	e9d3 2300 	ldrd	r2, r3, [r3]
   15df2:	f001 fe4d 	bl	17a90 <__aeabi_dmul>
   15df6:	4602      	mov	r2, r0
   15df8:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15dfa:	4610      	mov	r0, r2
   15dfc:	4619      	mov	r1, r3
   15dfe:	a338      	add	r3, pc, #224	; (adr r3, 15ee0 <pp_sin+0x1c0>)
   15e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e04:	f001 fc90 	bl	17728 <__aeabi_dsub>
   15e08:	4602      	mov	r2, r0
   15e0a:	460b      	mov	r3, r1
   15e0c:	4610      	mov	r0, r2
   15e0e:	4619      	mov	r1, r3
   15e10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e14:	f001 fe3c 	bl	17a90 <__aeabi_dmul>
   15e18:	4602      	mov	r2, r0
   15e1a:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15e1c:	4610      	mov	r0, r2
   15e1e:	4619      	mov	r1, r3
   15e20:	a331      	add	r3, pc, #196	; (adr r3, 15ee8 <pp_sin+0x1c8>)
   15e22:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e26:	f001 fc81 	bl	1772c <__adddf3>
   15e2a:	4602      	mov	r2, r0
   15e2c:	460b      	mov	r3, r1
   15e2e:	4610      	mov	r0, r2
   15e30:	4619      	mov	r1, r3
   15e32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e36:	f001 fe2b 	bl	17a90 <__aeabi_dmul>
   15e3a:	4602      	mov	r2, r0
   15e3c:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15e3e:	4610      	mov	r0, r2
   15e40:	4619      	mov	r1, r3
   15e42:	a32b      	add	r3, pc, #172	; (adr r3, 15ef0 <pp_sin+0x1d0>)
   15e44:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e48:	f001 fc6e 	bl	17728 <__aeabi_dsub>
   15e4c:	4602      	mov	r2, r0
   15e4e:	460b      	mov	r3, r1
   15e50:	4610      	mov	r0, r2
   15e52:	4619      	mov	r1, r3
   15e54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e58:	f001 fe1a 	bl	17a90 <__aeabi_dmul>
   15e5c:	4602      	mov	r2, r0
   15e5e:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15e60:	4610      	mov	r0, r2
   15e62:	4619      	mov	r1, r3
   15e64:	a324      	add	r3, pc, #144	; (adr r3, 15ef8 <pp_sin+0x1d8>)
   15e66:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e6a:	f001 fc5f 	bl	1772c <__adddf3>
   15e6e:	4602      	mov	r2, r0
   15e70:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15e72:	4610      	mov	r0, r2
   15e74:	4619      	mov	r1, r3
   15e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15e7a:	f001 fe09 	bl	17a90 <__aeabi_dmul>
   15e7e:	4602      	mov	r2, r0
   15e80:	460b      	mov	r3, r1
   15e82:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e88:	2b00      	cmp	r3, #0
   15e8a:	da04      	bge.n	15e96 <pp_sin+0x176>
   15e8c:	68bc      	ldr	r4, [r7, #8]
   15e8e:	68fb      	ldr	r3, [r7, #12]
   15e90:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15e94:	e001      	b.n	15e9a <pp_sin+0x17a>
   15e96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15e9a:	4622      	mov	r2, r4
   15e9c:	462b      	mov	r3, r5
}
   15e9e:	4610      	mov	r0, r2
   15ea0:	4619      	mov	r1, r3
   15ea2:	3730      	adds	r7, #48	; 0x30
   15ea4:	46bd      	mov	sp, r7
   15ea6:	bdb0      	pop	{r4, r5, r7, pc}
   15ea8:	54442d18 	.word	0x54442d18
   15eac:	401921fb 	.word	0x401921fb
   15eb0:	54442d18 	.word	0x54442d18
   15eb4:	bff921fb 	.word	0xbff921fb
   15eb8:	7f3321d2 	.word	0x7f3321d2
   15ebc:	4012d97c 	.word	0x4012d97c
   15ec0:	54442d18 	.word	0x54442d18
   15ec4:	3ff921fb 	.word	0x3ff921fb
   15ec8:	54442d18 	.word	0x54442d18
   15ecc:	400921fb 	.word	0x400921fb
   15ed0:	5443d6f4 	.word	0x5443d6f4
   15ed4:	3ff921fb 	.word	0x3ff921fb
   15ed8:	48a890af 	.word	0x48a890af
   15edc:	3f23daf7 	.word	0x3f23daf7
   15ee0:	645b6d0e 	.word	0x645b6d0e
   15ee4:	3f7324cc 	.word	0x3f7324cc
   15ee8:	f65619a5 	.word	0xf65619a5
   15eec:	3fb4668a 	.word	0x3fb4668a
   15ef0:	16acf9cd 	.word	0x16acf9cd
   15ef4:	3fe4abbc 	.word	0x3fe4abbc
   15ef8:	520817f7 	.word	0x520817f7
   15efc:	3ff921fb 	.word	0x3ff921fb

00015f00 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15f00:	b480      	push	{r7}
   15f02:	b083      	sub	sp, #12
   15f04:	af00      	add	r7, sp, #0
   15f06:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15f0a:	4610      	mov	r0, r2
   15f0c:	4619      	mov	r1, r3
   15f0e:	370c      	adds	r7, #12
   15f10:	46bd      	mov	sp, r7
   15f12:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f16:	4770      	bx	lr

00015f18 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15f18:	b480      	push	{r7}
   15f1a:	b083      	sub	sp, #12
   15f1c:	af00      	add	r7, sp, #0
   15f1e:	4603      	mov	r3, r0
   15f20:	6039      	str	r1, [r7, #0]
   15f22:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15f24:	79fa      	ldrb	r2, [r7, #7]
   15f26:	f64c 1350 	movw	r3, #51536	; 0xc950
   15f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f2e:	6839      	ldr	r1, [r7, #0]
   15f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15f34:	370c      	adds	r7, #12
   15f36:	46bd      	mov	sp, r7
   15f38:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f3c:	4770      	bx	lr
   15f3e:	bf00      	nop

00015f40 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15f40:	b480      	push	{r7}
   15f42:	b083      	sub	sp, #12
   15f44:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15f46:	f242 0315 	movw	r3, #8213	; 0x2015
   15f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f4e:	2200      	movs	r2, #0
   15f50:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15f52:	f242 0314 	movw	r3, #8212	; 0x2014
   15f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f5a:	2200      	movs	r2, #0
   15f5c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15f5e:	f242 0307 	movw	r3, #8199	; 0x2007
   15f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f66:	22c0      	movs	r2, #192	; 0xc0
   15f68:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15f6a:	f242 0306 	movw	r3, #8198	; 0x2006
   15f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f72:	22cf      	movs	r2, #207	; 0xcf
   15f74:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15f76:	2300      	movs	r3, #0
   15f78:	71fb      	strb	r3, [r7, #7]
   15f7a:	e00a      	b.n	15f92 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15f7c:	79fa      	ldrb	r2, [r7, #7]
   15f7e:	f64c 1350 	movw	r3, #51536	; 0xc950
   15f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f86:	2100      	movs	r1, #0
   15f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15f8c:	79fb      	ldrb	r3, [r7, #7]
   15f8e:	3301      	adds	r3, #1
   15f90:	71fb      	strb	r3, [r7, #7]
   15f92:	79fb      	ldrb	r3, [r7, #7]
   15f94:	2b07      	cmp	r3, #7
   15f96:	d9f1      	bls.n	15f7c <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15f98:	370c      	adds	r7, #12
   15f9a:	46bd      	mov	sp, r7
   15f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fa0:	4770      	bx	lr
   15fa2:	bf00      	nop

00015fa4 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15fa4:	b480      	push	{r7}
   15fa6:	b083      	sub	sp, #12
   15fa8:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15faa:	f242 0326 	movw	r3, #8230	; 0x2026
   15fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fb2:	881b      	ldrh	r3, [r3, #0]
   15fb4:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15fb6:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   15fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fbe:	881b      	ldrh	r3, [r3, #0]
   15fc0:	88fa      	ldrh	r2, [r7, #6]
   15fc2:	1ad3      	subs	r3, r2, r3
   15fc4:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15fc6:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   15fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fce:	88fa      	ldrh	r2, [r7, #6]
   15fd0:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15fd2:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   15fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fda:	781b      	ldrb	r3, [r3, #0]
   15fdc:	2b00      	cmp	r3, #0
   15fde:	d11e      	bne.n	1601e <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15fe0:	f242 0324 	movw	r3, #8228	; 0x2024
   15fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fe8:	781b      	ldrb	r3, [r3, #0]
   15fea:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15fec:	f64c 13af 	movw	r3, #51631	; 0xc9af
   15ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ff4:	781b      	ldrb	r3, [r3, #0]
   15ff6:	78fa      	ldrb	r2, [r7, #3]
   15ff8:	1ad3      	subs	r3, r2, r3
   15ffa:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15ffc:	f64c 13af 	movw	r3, #51631	; 0xc9af
   16000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16004:	78fa      	ldrb	r2, [r7, #3]
   16006:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   16008:	78bb      	ldrb	r3, [r7, #2]
   1600a:	2b6d      	cmp	r3, #109	; 0x6d
   1600c:	d906      	bls.n	1601c <__vector_34+0x78>
      state = 1;
   1600e:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16012:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16016:	2201      	movs	r2, #1
   16018:	701a      	strb	r2, [r3, #0]
   1601a:	e053      	b.n	160c4 <__vector_34+0x120>
   1601c:	e052      	b.n	160c4 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   1601e:	88bb      	ldrh	r3, [r7, #4]
   16020:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   16024:	d304      	bcc.n	16030 <__vector_34+0x8c>
   16026:	88ba      	ldrh	r2, [r7, #4]
   16028:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   1602c:	429a      	cmp	r2, r3
   1602e:	d911      	bls.n	16054 <__vector_34+0xb0>
      RestartPpmCycle();
   16030:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16034:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16038:	2200      	movs	r2, #0
   1603a:	701a      	strb	r2, [r3, #0]
   1603c:	f242 0324 	movw	r3, #8228	; 0x2024
   16040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16044:	781b      	ldrb	r3, [r3, #0]
   16046:	b2da      	uxtb	r2, r3
   16048:	f64c 13af 	movw	r3, #51631	; 0xc9af
   1604c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16050:	701a      	strb	r2, [r3, #0]
   16052:	e038      	b.n	160c6 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   16054:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1605c:	781b      	ldrb	r3, [r3, #0]
   1605e:	1e5a      	subs	r2, r3, #1
   16060:	f64c 1370 	movw	r3, #51568	; 0xc970
   16064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16068:	88b9      	ldrh	r1, [r7, #4]
   1606a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   1606e:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16076:	781b      	ldrb	r3, [r3, #0]
   16078:	2b08      	cmp	r3, #8
   1607a:	d917      	bls.n	160ac <__vector_34+0x108>
      ppm_valid	= 1;
   1607c:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16084:	2201      	movs	r2, #1
   16086:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   16088:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   1608c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16090:	2200      	movs	r2, #0
   16092:	701a      	strb	r2, [r3, #0]
   16094:	f242 0324 	movw	r3, #8228	; 0x2024
   16098:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1609c:	781b      	ldrb	r3, [r3, #0]
   1609e:	b2da      	uxtb	r2, r3
   160a0:	f64c 13af 	movw	r3, #51631	; 0xc9af
   160a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160a8:	701a      	strb	r2, [r3, #0]
   160aa:	e00c      	b.n	160c6 <__vector_34+0x122>
    } else 
      state++;
   160ac:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   160b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160b4:	781b      	ldrb	r3, [r3, #0]
   160b6:	3301      	adds	r3, #1
   160b8:	b2da      	uxtb	r2, r3
   160ba:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   160be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160c2:	701a      	strb	r2, [r3, #0]
  }
  return;
   160c4:	bf00      	nop
}
   160c6:	370c      	adds	r7, #12
   160c8:	46bd      	mov	sp, r7
   160ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   160ce:	4770      	bx	lr

000160d0 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   160d0:	b590      	push	{r4, r7, lr}
   160d2:	b083      	sub	sp, #12
   160d4:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   160d6:	f64c 1370 	movw	r3, #51568	; 0xc970
   160da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160de:	881b      	ldrh	r3, [r3, #0]
   160e0:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   160e4:	b29b      	uxth	r3, r3
   160e6:	80fb      	strh	r3, [r7, #6]
   160e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   160ec:	4618      	mov	r0, r3
   160ee:	f002 f8bb 	bl	18268 <__aeabi_i2f>
   160f2:	4603      	mov	r3, r0
   160f4:	4618      	mov	r0, r3
   160f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   160fa:	f002 f909 	bl	18310 <__aeabi_fmul>
   160fe:	4603      	mov	r3, r0
   16100:	4618      	mov	r0, r3
   16102:	f002 facb 	bl	1869c <__aeabi_f2iz>
   16106:	4603      	mov	r3, r0
   16108:	b29a      	uxth	r2, r3
   1610a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1610e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16112:	801a      	strh	r2, [r3, #0]
   16114:	f64c 1384 	movw	r3, #51588	; 0xc984
   16118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1611c:	881b      	ldrh	r3, [r3, #0]
   1611e:	b21b      	sxth	r3, r3
   16120:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16124:	dd07      	ble.n	16136 <last_radio_from_ppm+0x66>
   16126:	f64c 1384 	movw	r3, #51588	; 0xc984
   1612a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1612e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16132:	801a      	strh	r2, [r3, #0]
   16134:	e00d      	b.n	16152 <last_radio_from_ppm+0x82>
   16136:	f64c 1384 	movw	r3, #51588	; 0xc984
   1613a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1613e:	881b      	ldrh	r3, [r3, #0]
   16140:	b21b      	sxth	r3, r3
   16142:	2b00      	cmp	r3, #0
   16144:	da05      	bge.n	16152 <last_radio_from_ppm+0x82>
   16146:	f64c 1384 	movw	r3, #51588	; 0xc984
   1614a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1614e:	2200      	movs	r2, #0
   16150:	801a      	strh	r2, [r3, #0]
   16152:	f64c 1370 	movw	r3, #51568	; 0xc970
   16156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1615a:	885b      	ldrh	r3, [r3, #2]
   1615c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16160:	b29b      	uxth	r3, r3
   16162:	80fb      	strh	r3, [r7, #6]
   16164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16168:	4618      	mov	r0, r3
   1616a:	f002 f87d 	bl	18268 <__aeabi_i2f>
   1616e:	4603      	mov	r3, r0
   16170:	4618      	mov	r0, r3
   16172:	f002 fa93 	bl	1869c <__aeabi_f2iz>
   16176:	4603      	mov	r3, r0
   16178:	b29a      	uxth	r2, r3
   1617a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1617e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16182:	805a      	strh	r2, [r3, #2]
   16184:	f64c 1384 	movw	r3, #51588	; 0xc984
   16188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1618c:	885b      	ldrh	r3, [r3, #2]
   1618e:	b21b      	sxth	r3, r3
   16190:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16194:	dd07      	ble.n	161a6 <last_radio_from_ppm+0xd6>
   16196:	f64c 1384 	movw	r3, #51588	; 0xc984
   1619a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1619e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   161a2:	805a      	strh	r2, [r3, #2]
   161a4:	e00f      	b.n	161c6 <last_radio_from_ppm+0xf6>
   161a6:	f64c 1384 	movw	r3, #51588	; 0xc984
   161aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ae:	885b      	ldrh	r3, [r3, #2]
   161b0:	b21b      	sxth	r3, r3
   161b2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   161b6:	da06      	bge.n	161c6 <last_radio_from_ppm+0xf6>
   161b8:	f64c 1384 	movw	r3, #51588	; 0xc984
   161bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161c0:	f64d 2280 	movw	r2, #55936	; 0xda80
   161c4:	805a      	strh	r2, [r3, #2]
   161c6:	f64c 1370 	movw	r3, #51568	; 0xc970
   161ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ce:	889b      	ldrh	r3, [r3, #4]
   161d0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161d4:	b29b      	uxth	r3, r3
   161d6:	80fb      	strh	r3, [r7, #6]
   161d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161dc:	4618      	mov	r0, r3
   161de:	f002 f843 	bl	18268 <__aeabi_i2f>
   161e2:	4603      	mov	r3, r0
   161e4:	4618      	mov	r0, r3
   161e6:	f002 fa59 	bl	1869c <__aeabi_f2iz>
   161ea:	4603      	mov	r3, r0
   161ec:	b29a      	uxth	r2, r3
   161ee:	f64c 1384 	movw	r3, #51588	; 0xc984
   161f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161f6:	809a      	strh	r2, [r3, #4]
   161f8:	f64c 1384 	movw	r3, #51588	; 0xc984
   161fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16200:	889b      	ldrh	r3, [r3, #4]
   16202:	b21b      	sxth	r3, r3
   16204:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16208:	dd07      	ble.n	1621a <last_radio_from_ppm+0x14a>
   1620a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1620e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16212:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16216:	809a      	strh	r2, [r3, #4]
   16218:	e00f      	b.n	1623a <last_radio_from_ppm+0x16a>
   1621a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1621e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16222:	889b      	ldrh	r3, [r3, #4]
   16224:	b21b      	sxth	r3, r3
   16226:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1622a:	da06      	bge.n	1623a <last_radio_from_ppm+0x16a>
   1622c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16234:	f64d 2280 	movw	r2, #55936	; 0xda80
   16238:	809a      	strh	r2, [r3, #4]
   1623a:	f64c 1370 	movw	r3, #51568	; 0xc970
   1623e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16242:	88db      	ldrh	r3, [r3, #6]
   16244:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16248:	b29b      	uxth	r3, r3
   1624a:	80fb      	strh	r3, [r7, #6]
   1624c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16250:	4618      	mov	r0, r3
   16252:	f002 f809 	bl	18268 <__aeabi_i2f>
   16256:	4603      	mov	r3, r0
   16258:	4618      	mov	r0, r3
   1625a:	f002 fa1f 	bl	1869c <__aeabi_f2iz>
   1625e:	4603      	mov	r3, r0
   16260:	b29a      	uxth	r2, r3
   16262:	f64c 1384 	movw	r3, #51588	; 0xc984
   16266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1626a:	80da      	strh	r2, [r3, #6]
   1626c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16274:	88db      	ldrh	r3, [r3, #6]
   16276:	b21b      	sxth	r3, r3
   16278:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1627c:	dd07      	ble.n	1628e <last_radio_from_ppm+0x1be>
   1627e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16286:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1628a:	80da      	strh	r2, [r3, #6]
   1628c:	e00f      	b.n	162ae <last_radio_from_ppm+0x1de>
   1628e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16296:	88db      	ldrh	r3, [r3, #6]
   16298:	b21b      	sxth	r3, r3
   1629a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1629e:	da06      	bge.n	162ae <last_radio_from_ppm+0x1de>
   162a0:	f64c 1384 	movw	r3, #51588	; 0xc984
   162a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162a8:	f64d 2280 	movw	r2, #55936	; 0xda80
   162ac:	80da      	strh	r2, [r3, #6]
   162ae:	f64c 1370 	movw	r3, #51568	; 0xc970
   162b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162b6:	891b      	ldrh	r3, [r3, #8]
   162b8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162bc:	b29b      	uxth	r3, r3
   162be:	80fb      	strh	r3, [r7, #6]
   162c0:	f64c 1398 	movw	r3, #51608	; 0xc998
   162c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162c8:	891b      	ldrh	r3, [r3, #8]
   162ca:	b21b      	sxth	r3, r3
   162cc:	4618      	mov	r0, r3
   162ce:	f001 ffcb 	bl	18268 <__aeabi_i2f>
   162d2:	4604      	mov	r4, r0
   162d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162d8:	4618      	mov	r0, r3
   162da:	f001 ffc5 	bl	18268 <__aeabi_i2f>
   162de:	4603      	mov	r3, r0
   162e0:	4618      	mov	r0, r3
   162e2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   162e6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   162ea:	f002 f811 	bl	18310 <__aeabi_fmul>
   162ee:	4603      	mov	r3, r0
   162f0:	4620      	mov	r0, r4
   162f2:	4619      	mov	r1, r3
   162f4:	f001 ff04 	bl	18100 <__addsf3>
   162f8:	4603      	mov	r3, r0
   162fa:	4618      	mov	r0, r3
   162fc:	f002 f9ce 	bl	1869c <__aeabi_f2iz>
   16300:	4603      	mov	r3, r0
   16302:	b29a      	uxth	r2, r3
   16304:	f64c 1398 	movw	r3, #51608	; 0xc998
   16308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1630c:	811a      	strh	r2, [r3, #8]
   1630e:	f64c 1370 	movw	r3, #51568	; 0xc970
   16312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16316:	895b      	ldrh	r3, [r3, #10]
   16318:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1631c:	b29b      	uxth	r3, r3
   1631e:	80fb      	strh	r3, [r7, #6]
   16320:	f64c 1398 	movw	r3, #51608	; 0xc998
   16324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16328:	895b      	ldrh	r3, [r3, #10]
   1632a:	b21b      	sxth	r3, r3
   1632c:	4618      	mov	r0, r3
   1632e:	f001 ff9b 	bl	18268 <__aeabi_i2f>
   16332:	4604      	mov	r4, r0
   16334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16338:	4618      	mov	r0, r3
   1633a:	f001 ff95 	bl	18268 <__aeabi_i2f>
   1633e:	4603      	mov	r3, r0
   16340:	4618      	mov	r0, r3
   16342:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16346:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1634a:	f001 ffe1 	bl	18310 <__aeabi_fmul>
   1634e:	4603      	mov	r3, r0
   16350:	4620      	mov	r0, r4
   16352:	4619      	mov	r1, r3
   16354:	f001 fed4 	bl	18100 <__addsf3>
   16358:	4603      	mov	r3, r0
   1635a:	4618      	mov	r0, r3
   1635c:	f002 f99e 	bl	1869c <__aeabi_f2iz>
   16360:	4603      	mov	r3, r0
   16362:	b29a      	uxth	r2, r3
   16364:	f64c 1398 	movw	r3, #51608	; 0xc998
   16368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1636c:	815a      	strh	r2, [r3, #10]
   1636e:	f64c 1370 	movw	r3, #51568	; 0xc970
   16372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16376:	899b      	ldrh	r3, [r3, #12]
   16378:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1637c:	b29b      	uxth	r3, r3
   1637e:	80fb      	strh	r3, [r7, #6]
   16380:	f64c 1398 	movw	r3, #51608	; 0xc998
   16384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16388:	899b      	ldrh	r3, [r3, #12]
   1638a:	b21b      	sxth	r3, r3
   1638c:	4618      	mov	r0, r3
   1638e:	f001 ff6b 	bl	18268 <__aeabi_i2f>
   16392:	4604      	mov	r4, r0
   16394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16398:	4618      	mov	r0, r3
   1639a:	f001 ff65 	bl	18268 <__aeabi_i2f>
   1639e:	4603      	mov	r3, r0
   163a0:	4618      	mov	r0, r3
   163a2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   163a6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   163aa:	f001 ffb1 	bl	18310 <__aeabi_fmul>
   163ae:	4603      	mov	r3, r0
   163b0:	4620      	mov	r0, r4
   163b2:	4619      	mov	r1, r3
   163b4:	f001 fea4 	bl	18100 <__addsf3>
   163b8:	4603      	mov	r3, r0
   163ba:	4618      	mov	r0, r3
   163bc:	f002 f96e 	bl	1869c <__aeabi_f2iz>
   163c0:	4603      	mov	r3, r0
   163c2:	b29a      	uxth	r2, r3
   163c4:	f64c 1398 	movw	r3, #51608	; 0xc998
   163c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163cc:	819a      	strh	r2, [r3, #12]
   163ce:	f64c 1370 	movw	r3, #51568	; 0xc970
   163d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163d6:	89db      	ldrh	r3, [r3, #14]
   163d8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163dc:	b29b      	uxth	r3, r3
   163de:	80fb      	strh	r3, [r7, #6]
   163e0:	f64c 1398 	movw	r3, #51608	; 0xc998
   163e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163e8:	89db      	ldrh	r3, [r3, #14]
   163ea:	b21b      	sxth	r3, r3
   163ec:	4618      	mov	r0, r3
   163ee:	f001 ff3b 	bl	18268 <__aeabi_i2f>
   163f2:	4604      	mov	r4, r0
   163f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163f8:	4618      	mov	r0, r3
   163fa:	f001 ff35 	bl	18268 <__aeabi_i2f>
   163fe:	4603      	mov	r3, r0
   16400:	4618      	mov	r0, r3
   16402:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16406:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1640a:	f001 ff81 	bl	18310 <__aeabi_fmul>
   1640e:	4603      	mov	r3, r0
   16410:	4620      	mov	r0, r4
   16412:	4619      	mov	r1, r3
   16414:	f001 fe74 	bl	18100 <__addsf3>
   16418:	4603      	mov	r3, r0
   1641a:	4618      	mov	r0, r3
   1641c:	f002 f93e 	bl	1869c <__aeabi_f2iz>
   16420:	4603      	mov	r3, r0
   16422:	b29a      	uxth	r2, r3
   16424:	f64c 1398 	movw	r3, #51608	; 0xc998
   16428:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1642c:	81da      	strh	r2, [r3, #14]
   1642e:	f64c 1370 	movw	r3, #51568	; 0xc970
   16432:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16436:	8a1b      	ldrh	r3, [r3, #16]
   16438:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1643c:	b29b      	uxth	r3, r3
   1643e:	80fb      	strh	r3, [r7, #6]
   16440:	f64c 1398 	movw	r3, #51608	; 0xc998
   16444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16448:	8a1b      	ldrh	r3, [r3, #16]
   1644a:	b21b      	sxth	r3, r3
   1644c:	4618      	mov	r0, r3
   1644e:	f001 ff0b 	bl	18268 <__aeabi_i2f>
   16452:	4604      	mov	r4, r0
   16454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16458:	4618      	mov	r0, r3
   1645a:	f001 ff05 	bl	18268 <__aeabi_i2f>
   1645e:	4603      	mov	r3, r0
   16460:	4618      	mov	r0, r3
   16462:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16466:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1646a:	f001 ff51 	bl	18310 <__aeabi_fmul>
   1646e:	4603      	mov	r3, r0
   16470:	4620      	mov	r0, r4
   16472:	4619      	mov	r1, r3
   16474:	f001 fe44 	bl	18100 <__addsf3>
   16478:	4603      	mov	r3, r0
   1647a:	4618      	mov	r0, r3
   1647c:	f002 f90e 	bl	1869c <__aeabi_f2iz>
   16480:	4603      	mov	r3, r0
   16482:	b29a      	uxth	r2, r3
   16484:	f64c 1398 	movw	r3, #51608	; 0xc998
   16488:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1648c:	821a      	strh	r2, [r3, #16]
   1648e:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   16492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16496:	781b      	ldrb	r3, [r3, #0]
   16498:	3301      	adds	r3, #1
   1649a:	b2da      	uxtb	r2, r3
   1649c:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   164a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164a4:	701a      	strb	r2, [r3, #0]
   164a6:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   164aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164ae:	781b      	ldrb	r3, [r3, #0]
   164b0:	2b0a      	cmp	r3, #10
   164b2:	f040 8101 	bne.w	166b8 <last_radio_from_ppm+0x5e8>
   164b6:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   164ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164be:	2200      	movs	r2, #0
   164c0:	701a      	strb	r2, [r3, #0]
   164c2:	f64c 1398 	movw	r3, #51608	; 0xc998
   164c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164ca:	891a      	ldrh	r2, [r3, #8]
   164cc:	f64c 1384 	movw	r3, #51588	; 0xc984
   164d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164d4:	811a      	strh	r2, [r3, #8]
   164d6:	f64c 1398 	movw	r3, #51608	; 0xc998
   164da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164de:	2200      	movs	r2, #0
   164e0:	811a      	strh	r2, [r3, #8]
   164e2:	f64c 1384 	movw	r3, #51588	; 0xc984
   164e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164ea:	891b      	ldrh	r3, [r3, #8]
   164ec:	b21b      	sxth	r3, r3
   164ee:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   164f2:	dd07      	ble.n	16504 <last_radio_from_ppm+0x434>
   164f4:	f64c 1384 	movw	r3, #51588	; 0xc984
   164f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16500:	811a      	strh	r2, [r3, #8]
   16502:	e00f      	b.n	16524 <last_radio_from_ppm+0x454>
   16504:	f64c 1384 	movw	r3, #51588	; 0xc984
   16508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1650c:	891b      	ldrh	r3, [r3, #8]
   1650e:	b21b      	sxth	r3, r3
   16510:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16514:	da06      	bge.n	16524 <last_radio_from_ppm+0x454>
   16516:	f64c 1384 	movw	r3, #51588	; 0xc984
   1651a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1651e:	f64d 2280 	movw	r2, #55936	; 0xda80
   16522:	811a      	strh	r2, [r3, #8]
   16524:	f64c 1398 	movw	r3, #51608	; 0xc998
   16528:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1652c:	895a      	ldrh	r2, [r3, #10]
   1652e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16536:	815a      	strh	r2, [r3, #10]
   16538:	f64c 1398 	movw	r3, #51608	; 0xc998
   1653c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16540:	2200      	movs	r2, #0
   16542:	815a      	strh	r2, [r3, #10]
   16544:	f64c 1384 	movw	r3, #51588	; 0xc984
   16548:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1654c:	895b      	ldrh	r3, [r3, #10]
   1654e:	b21b      	sxth	r3, r3
   16550:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16554:	dd07      	ble.n	16566 <last_radio_from_ppm+0x496>
   16556:	f64c 1384 	movw	r3, #51588	; 0xc984
   1655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1655e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16562:	815a      	strh	r2, [r3, #10]
   16564:	e00f      	b.n	16586 <last_radio_from_ppm+0x4b6>
   16566:	f64c 1384 	movw	r3, #51588	; 0xc984
   1656a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1656e:	895b      	ldrh	r3, [r3, #10]
   16570:	b21b      	sxth	r3, r3
   16572:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16576:	da06      	bge.n	16586 <last_radio_from_ppm+0x4b6>
   16578:	f64c 1384 	movw	r3, #51588	; 0xc984
   1657c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16580:	f64d 2280 	movw	r2, #55936	; 0xda80
   16584:	815a      	strh	r2, [r3, #10]
   16586:	f64c 1398 	movw	r3, #51608	; 0xc998
   1658a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1658e:	899a      	ldrh	r2, [r3, #12]
   16590:	f64c 1384 	movw	r3, #51588	; 0xc984
   16594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16598:	819a      	strh	r2, [r3, #12]
   1659a:	f64c 1398 	movw	r3, #51608	; 0xc998
   1659e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165a2:	2200      	movs	r2, #0
   165a4:	819a      	strh	r2, [r3, #12]
   165a6:	f64c 1384 	movw	r3, #51588	; 0xc984
   165aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ae:	899b      	ldrh	r3, [r3, #12]
   165b0:	b21b      	sxth	r3, r3
   165b2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   165b6:	dd07      	ble.n	165c8 <last_radio_from_ppm+0x4f8>
   165b8:	f64c 1384 	movw	r3, #51588	; 0xc984
   165bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   165c4:	819a      	strh	r2, [r3, #12]
   165c6:	e00f      	b.n	165e8 <last_radio_from_ppm+0x518>
   165c8:	f64c 1384 	movw	r3, #51588	; 0xc984
   165cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d0:	899b      	ldrh	r3, [r3, #12]
   165d2:	b21b      	sxth	r3, r3
   165d4:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   165d8:	da06      	bge.n	165e8 <last_radio_from_ppm+0x518>
   165da:	f64c 1384 	movw	r3, #51588	; 0xc984
   165de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e2:	f64d 2280 	movw	r2, #55936	; 0xda80
   165e6:	819a      	strh	r2, [r3, #12]
   165e8:	f64c 1398 	movw	r3, #51608	; 0xc998
   165ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f0:	89da      	ldrh	r2, [r3, #14]
   165f2:	f64c 1384 	movw	r3, #51588	; 0xc984
   165f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165fa:	81da      	strh	r2, [r3, #14]
   165fc:	f64c 1398 	movw	r3, #51608	; 0xc998
   16600:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16604:	2200      	movs	r2, #0
   16606:	81da      	strh	r2, [r3, #14]
   16608:	f64c 1384 	movw	r3, #51588	; 0xc984
   1660c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16610:	89db      	ldrh	r3, [r3, #14]
   16612:	b21b      	sxth	r3, r3
   16614:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16618:	dd07      	ble.n	1662a <last_radio_from_ppm+0x55a>
   1661a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1661e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16622:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16626:	81da      	strh	r2, [r3, #14]
   16628:	e00f      	b.n	1664a <last_radio_from_ppm+0x57a>
   1662a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1662e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16632:	89db      	ldrh	r3, [r3, #14]
   16634:	b21b      	sxth	r3, r3
   16636:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1663a:	da06      	bge.n	1664a <last_radio_from_ppm+0x57a>
   1663c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16640:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16644:	f64d 2280 	movw	r2, #55936	; 0xda80
   16648:	81da      	strh	r2, [r3, #14]
   1664a:	f64c 1398 	movw	r3, #51608	; 0xc998
   1664e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16652:	8a1a      	ldrh	r2, [r3, #16]
   16654:	f64c 1384 	movw	r3, #51588	; 0xc984
   16658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1665c:	821a      	strh	r2, [r3, #16]
   1665e:	f64c 1398 	movw	r3, #51608	; 0xc998
   16662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16666:	2200      	movs	r2, #0
   16668:	821a      	strh	r2, [r3, #16]
   1666a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1666e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16672:	8a1b      	ldrh	r3, [r3, #16]
   16674:	b21b      	sxth	r3, r3
   16676:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1667a:	dd07      	ble.n	1668c <last_radio_from_ppm+0x5bc>
   1667c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16684:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16688:	821a      	strh	r2, [r3, #16]
   1668a:	e00f      	b.n	166ac <last_radio_from_ppm+0x5dc>
   1668c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16694:	8a1b      	ldrh	r3, [r3, #16]
   16696:	b21b      	sxth	r3, r3
   16698:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1669c:	da06      	bge.n	166ac <last_radio_from_ppm+0x5dc>
   1669e:	f64c 1384 	movw	r3, #51588	; 0xc984
   166a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a6:	f64d 2280 	movw	r2, #55936	; 0xda80
   166aa:	821a      	strh	r2, [r3, #16]
   166ac:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   166b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166b4:	2201      	movs	r2, #1
   166b6:	701a      	strb	r2, [r3, #0]
}
   166b8:	370c      	adds	r7, #12
   166ba:	46bd      	mov	sp, r7
   166bc:	bd90      	pop	{r4, r7, pc}
   166be:	bf00      	nop

000166c0 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   166c0:	b480      	push	{r7}
   166c2:	af00      	add	r7, sp, #0
  idx_buf = 0;
   166c4:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   166c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166cc:	2200      	movs	r2, #0
   166ce:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   166d0:	f64c 13e5 	movw	r3, #51685	; 0xc9e5
   166d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166d8:	2200      	movs	r2, #0
   166da:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   166dc:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   166e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e4:	781b      	ldrb	r3, [r3, #0]
   166e6:	b2db      	uxtb	r3, r3
   166e8:	461a      	mov	r2, r3
   166ea:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   166ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166f2:	4413      	add	r3, r2
   166f4:	781a      	ldrb	r2, [r3, #0]
   166f6:	f64c 13e6 	movw	r3, #51686	; 0xc9e6
   166fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166fe:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16700:	f242 030f 	movw	r3, #8207	; 0x200f
   16704:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16708:	f64c 12e6 	movw	r2, #51686	; 0xc9e6
   1670c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   16710:	7812      	ldrb	r2, [r2, #0]
   16712:	b2d2      	uxtb	r2, r2
   16714:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   16716:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   1671a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1671e:	2200      	movs	r2, #0
   16720:	701a      	strb	r2, [r3, #0]
}
   16722:	46bd      	mov	sp, r7
   16724:	f85d 7b04 	ldr.w	r7, [sp], #4
   16728:	4770      	bx	lr
   1672a:	bf00      	nop

0001672c <fbw_spi_init>:

void fbw_spi_init(void) {
   1672c:	b480      	push	{r7}
   1672e:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16730:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16738:	2200      	movs	r2, #0
   1673a:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   1673c:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16740:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16744:	2200      	movs	r2, #0
   16746:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16748:	f242 0317 	movw	r3, #8215	; 0x2017
   1674c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16750:	f242 0217 	movw	r2, #8215	; 0x2017
   16754:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16758:	7812      	ldrb	r2, [r2, #0]
   1675a:	b2d2      	uxtb	r2, r2
   1675c:	f042 0210 	orr.w	r2, r2, #16
   16760:	b2d2      	uxtb	r2, r2
   16762:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   16764:	f242 030d 	movw	r3, #8205	; 0x200d
   16768:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1676c:	2240      	movs	r2, #64	; 0x40
   1676e:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16770:	f242 030d 	movw	r3, #8205	; 0x200d
   16774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16778:	f242 020d 	movw	r2, #8205	; 0x200d
   1677c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16780:	7812      	ldrb	r2, [r2, #0]
   16782:	b2d2      	uxtb	r2, r2
   16784:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16788:	b2d2      	uxtb	r2, r2
   1678a:	701a      	strb	r2, [r3, #0]
}
   1678c:	46bd      	mov	sp, r7
   1678e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16792:	4770      	bx	lr
   16794:	0000      	movs	r0, r0
	...

00016798 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16798:	b480      	push	{r7}
   1679a:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   1679c:	f242 032f 	movw	r3, #8239	; 0x202f
   167a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167a4:	2200      	movs	r2, #0
   167a6:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   167a8:	f242 032e 	movw	r3, #8238	; 0x202e
   167ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167b0:	2201      	movs	r2, #1
   167b2:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   167b4:	f242 0325 	movw	r3, #8229	; 0x2025
   167b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167bc:	2207      	movs	r2, #7
   167be:	701a      	strb	r2, [r3, #0]
}
   167c0:	46bd      	mov	sp, r7
   167c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   167c6:	4770      	bx	lr

000167c8 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   167c8:	b480      	push	{r7}
   167ca:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   167cc:	f242 032e 	movw	r3, #8238	; 0x202e
   167d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167d4:	f242 022e 	movw	r2, #8238	; 0x202e
   167d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167dc:	7812      	ldrb	r2, [r2, #0]
   167de:	b2d2      	uxtb	r2, r2
   167e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   167e4:	b2d2      	uxtb	r2, r2
   167e6:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   167e8:	f242 032e 	movw	r3, #8238	; 0x202e
   167ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167f0:	f242 022e 	movw	r2, #8238	; 0x202e
   167f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167f8:	7812      	ldrb	r2, [r2, #0]
   167fa:	b2d2      	uxtb	r2, r2
   167fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16800:	b2d2      	uxtb	r2, r2
   16802:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   16804:	f242 0317 	movw	r3, #8215	; 0x2017
   16808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1680c:	f242 0217 	movw	r2, #8215	; 0x2017
   16810:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16814:	7812      	ldrb	r2, [r2, #0]
   16816:	b2d2      	uxtb	r2, r2
   16818:	f022 0201 	bic.w	r2, r2, #1
   1681c:	b2d2      	uxtb	r2, r2
   1681e:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16820:	f242 0337 	movw	r3, #8247	; 0x2037
   16824:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16828:	f242 0237 	movw	r2, #8247	; 0x2037
   1682c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16830:	7812      	ldrb	r2, [r2, #0]
   16832:	b2d2      	uxtb	r2, r2
   16834:	f042 0220 	orr.w	r2, r2, #32
   16838:	b2d2      	uxtb	r2, r2
   1683a:	701a      	strb	r2, [r3, #0]
}
   1683c:	46bd      	mov	sp, r7
   1683e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16842:	4770      	bx	lr

00016844 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   16844:	b580      	push	{r7, lr}
   16846:	b082      	sub	sp, #8
   16848:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1684a:	2300      	movs	r3, #0
   1684c:	71fb      	strb	r3, [r7, #7]
   1684e:	e010      	b.n	16872 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16850:	79fa      	ldrb	r2, [r7, #7]
   16852:	79f9      	ldrb	r1, [r7, #7]
   16854:	f64c 1384 	movw	r3, #51588	; 0xc984
   16858:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1685c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16860:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16868:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1686c:	79fb      	ldrb	r3, [r7, #7]
   1686e:	3301      	adds	r3, #1
   16870:	71fb      	strb	r3, [r7, #7]
   16872:	79fb      	ldrb	r3, [r7, #7]
   16874:	2b08      	cmp	r3, #8
   16876:	d9eb      	bls.n	16850 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16878:	f64c 2374 	movw	r3, #51828	; 0xca74
   1687c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16880:	781b      	ldrb	r3, [r3, #0]
   16882:	2b00      	cmp	r3, #0
   16884:	bf0c      	ite	eq
   16886:	2300      	moveq	r3, #0
   16888:	2301      	movne	r3, #1
   1688a:	b2db      	uxtb	r3, r3
   1688c:	461a      	mov	r2, r3
   1688e:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16896:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16898:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1689c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168a0:	7cdb      	ldrb	r3, [r3, #19]
   168a2:	b2da      	uxtb	r2, r3
   168a4:	f64c 2376 	movw	r3, #51830	; 0xca76
   168a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168ac:	781b      	ldrb	r3, [r3, #0]
   168ae:	2b00      	cmp	r3, #0
   168b0:	d001      	beq.n	168b6 <to_autopilot_from_last_radio+0x72>
   168b2:	2302      	movs	r3, #2
   168b4:	e000      	b.n	168b8 <to_autopilot_from_last_radio+0x74>
   168b6:	2300      	movs	r3, #0
   168b8:	4313      	orrs	r3, r2
   168ba:	b2db      	uxtb	r3, r3
   168bc:	b2da      	uxtb	r2, r3
   168be:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168c6:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   168c8:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   168cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168d0:	781b      	ldrb	r3, [r3, #0]
   168d2:	2b00      	cmp	r3, #0
   168d4:	d012      	beq.n	168fc <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   168d6:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168de:	7cdb      	ldrb	r3, [r3, #19]
   168e0:	f043 0304 	orr.w	r3, r3, #4
   168e4:	b2da      	uxtb	r2, r3
   168e6:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168ee:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   168f0:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   168f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168f8:	2200      	movs	r2, #0
   168fa:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   168fc:	f64c 2378 	movw	r3, #51832	; 0xca78
   16900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16904:	781a      	ldrb	r2, [r3, #0]
   16906:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1690a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1690e:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16910:	f64c 13e8 	movw	r3, #51688	; 0xc9e8
   16914:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16918:	881b      	ldrh	r3, [r3, #0]
   1691a:	4618      	mov	r0, r3
   1691c:	f001 f852 	bl	179c4 <__aeabi_i2d>
   16920:	4602      	mov	r2, r0
   16922:	460b      	mov	r3, r1
   16924:	4610      	mov	r0, r2
   16926:	4619      	mov	r1, r3
   16928:	a31b      	add	r3, pc, #108	; (adr r3, 16998 <to_autopilot_from_last_radio+0x154>)
   1692a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1692e:	f001 f8af 	bl	17a90 <__aeabi_dmul>
   16932:	4602      	mov	r2, r0
   16934:	460b      	mov	r3, r1
   16936:	4610      	mov	r0, r2
   16938:	4619      	mov	r1, r3
   1693a:	f04f 0200 	mov.w	r2, #0
   1693e:	f04f 0300 	mov.w	r3, #0
   16942:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16946:	f001 f9cd 	bl	17ce4 <__aeabi_ddiv>
   1694a:	4602      	mov	r2, r0
   1694c:	460b      	mov	r3, r1
   1694e:	4610      	mov	r0, r2
   16950:	4619      	mov	r1, r3
   16952:	a313      	add	r3, pc, #76	; (adr r3, 169a0 <to_autopilot_from_last_radio+0x15c>)
   16954:	e9d3 2300 	ldrd	r2, r3, [r3]
   16958:	f000 fee8 	bl	1772c <__adddf3>
   1695c:	4602      	mov	r2, r0
   1695e:	460b      	mov	r3, r1
   16960:	4610      	mov	r0, r2
   16962:	4619      	mov	r1, r3
   16964:	f04f 0200 	mov.w	r2, #0
   16968:	f04f 0300 	mov.w	r3, #0
   1696c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16970:	f001 f88e 	bl	17a90 <__aeabi_dmul>
   16974:	4602      	mov	r2, r0
   16976:	460b      	mov	r3, r1
   16978:	4610      	mov	r0, r2
   1697a:	4619      	mov	r1, r3
   1697c:	f001 fb4a 	bl	18014 <__aeabi_d2uiz>
   16980:	4603      	mov	r3, r0
   16982:	b2da      	uxtb	r2, r3
   16984:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1698c:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   1698e:	3708      	adds	r7, #8
   16990:	46bd      	mov	sp, r7
   16992:	bd80      	pop	{r7, pc}
   16994:	f3af 8000 	nop.w
   16998:	1eb851ec 	.word	0x1eb851ec
   1699c:	3f91eb85 	.word	0x3f91eb85
   169a0:	020c49ba 	.word	0x020c49ba
   169a4:	3fb6872b 	.word	0x3fb6872b

000169a8 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   169a8:	b580      	push	{r7, lr}
   169aa:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   169ac:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   169b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169b4:	2200      	movs	r2, #0
   169b6:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   169b8:	f7ff ff44 	bl	16844 <to_autopilot_from_last_radio>
      spi_reset();
   169bc:	f7ff fe80 	bl	166c0 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   169c0:	bd80      	pop	{r7, pc}
   169c2:	bf00      	nop

000169c4 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   169c4:	b580      	push	{r7, lr}
   169c6:	af00      	add	r7, sp, #0
  uart_init_tx();
   169c8:	f000 fb02 	bl	16fd0 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   169cc:	f648 1040 	movw	r0, #35136	; 0x8940
   169d0:	f2c0 0001 	movt	r0, #1
   169d4:	f000 fbda 	bl	1718c <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   169d8:	f7ff fab2 	bl	15f40 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   169dc:	2003      	movs	r0, #3
   169de:	f64c 11e8 	movw	r1, #51688	; 0xc9e8
   169e2:	f2c2 0104 	movt	r1, #8196	; 0x2004
   169e6:	f7ff fa97 	bl	15f18 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   169ea:	2006      	movs	r0, #6
   169ec:	f64c 212c 	movw	r1, #51756	; 0xca2c
   169f0:	f2c2 0104 	movt	r1, #8196	; 0x2004
   169f4:	f7ff fa90 	bl	15f18 <fbw_adc_buf_channel>
#endif
  timer_init();
   169f8:	f7ff fece 	bl	16798 <timer_init>
  servo_init();
   169fc:	f000 f894 	bl	16b28 <servo_init>
  ppm_init();
   16a00:	f7ff fee2 	bl	167c8 <ppm_init>
  fbw_spi_init();
   16a04:	f7ff fe92 	bl	1672c <fbw_spi_init>
  //sei(); //FN
}
   16a08:	bd80      	pop	{r7, pc}
   16a0a:	bf00      	nop

00016a0c <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16a0c:	b580      	push	{r7, lr}
   16a0e:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16a10:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a18:	2200      	movs	r2, #0
   16a1a:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16a1c:	f64c 2377 	movw	r3, #51831	; 0xca77
   16a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a24:	781b      	ldrb	r3, [r3, #0]
   16a26:	3301      	adds	r3, #1
   16a28:	b2da      	uxtb	r2, r3
   16a2a:	f64c 2377 	movw	r3, #51831	; 0xca77
   16a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a32:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16a34:	f64c 2374 	movw	r3, #51828	; 0xca74
   16a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a3c:	2201      	movs	r2, #1
   16a3e:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16a40:	f64c 2376 	movw	r3, #51830	; 0xca76
   16a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a48:	2200      	movs	r2, #0
   16a4a:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16a4c:	f64c 2372 	movw	r3, #51826	; 0xca72
   16a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a54:	2200      	movs	r2, #0
   16a56:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16a58:	f7ff fb3a 	bl	160d0 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16a5c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a64:	891b      	ldrh	r3, [r3, #8]
   16a66:	b21b      	sxth	r3, r3
   16a68:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16a6c:	bfb4      	ite	lt
   16a6e:	2300      	movlt	r3, #0
   16a70:	2301      	movge	r3, #1
   16a72:	b2db      	uxtb	r3, r3
   16a74:	461a      	mov	r2, r3
   16a76:	f64c 2370 	movw	r3, #51824	; 0xca70
   16a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a7e:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16a80:	f64c 2370 	movw	r3, #51824	; 0xca70
   16a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a88:	781b      	ldrb	r3, [r3, #0]
   16a8a:	2b00      	cmp	r3, #0
   16a8c:	d105      	bne.n	16a9a <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   16a8e:	f64c 1084 	movw	r0, #51588	; 0xc984
   16a92:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16a96:	f000 f925 	bl	16ce4 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   16a9a:	f64c 2370 	movw	r3, #51824	; 0xca70
   16a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aa2:	2201      	movs	r2, #1
   16aa4:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   16aa6:	f64c 2374 	movw	r3, #51828	; 0xca74
   16aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aae:	2200      	movs	r2, #0
   16ab0:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   16ab2:	f64c 2376 	movw	r3, #51830	; 0xca76
   16ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aba:	2201      	movs	r2, #1
   16abc:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16abe:	bd80      	pop	{r7, pc}

00016ac0 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16ac0:	b580      	push	{r7, lr}
   16ac2:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   16ac4:	f648 102c 	movw	r0, #35116	; 0x892c
   16ac8:	f2c0 0001 	movt	r0, #1
   16acc:	f000 f90a 	bl	16ce4 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16ad0:	bd80      	pop	{r7, pc}
   16ad2:	bf00      	nop

00016ad4 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16ad4:	b580      	push	{r7, lr}
   16ad6:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   16ad8:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   16adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ae0:	781b      	ldrb	r3, [r3, #0]
   16ae2:	b2db      	uxtb	r3, r3
   16ae4:	2b00      	cmp	r3, #0
   16ae6:	d018      	beq.n	16b1a <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   16ae8:	f64c 2371 	movw	r3, #51825	; 0xca71
   16aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16af0:	2200      	movs	r2, #0
   16af2:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16af4:	f64c 2375 	movw	r3, #51829	; 0xca75
   16af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16afc:	2201      	movs	r2, #1
   16afe:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16b00:	f64c 2370 	movw	r3, #51824	; 0xca70
   16b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b08:	781b      	ldrb	r3, [r3, #0]
   16b0a:	2b01      	cmp	r3, #1
   16b0c:	d105      	bne.n	16b1a <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   16b0e:	f64c 10b4 	movw	r0, #51636	; 0xc9b4
   16b12:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16b16:	f000 f8e5 	bl	16ce4 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   16b1a:	f64c 2375 	movw	r3, #51829	; 0xca75
   16b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b22:	2200      	movs	r2, #0
   16b24:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16b26:	bd80      	pop	{r7, pc}

00016b28 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16b28:	b480      	push	{r7}
   16b2a:	b083      	sub	sp, #12
   16b2c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16b2e:	f242 0311 	movw	r3, #8209	; 0x2011
   16b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b36:	f242 0211 	movw	r2, #8209	; 0x2011
   16b3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b3e:	7812      	ldrb	r2, [r2, #0]
   16b40:	b2d2      	uxtb	r2, r2
   16b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16b46:	b2d2      	uxtb	r2, r2
   16b48:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16b4a:	f242 0317 	movw	r3, #8215	; 0x2017
   16b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b52:	f242 0217 	movw	r2, #8215	; 0x2017
   16b56:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b5a:	7812      	ldrb	r2, [r2, #0]
   16b5c:	b2d2      	uxtb	r2, r2
   16b5e:	f042 0202 	orr.w	r2, r2, #2
   16b62:	b2d2      	uxtb	r2, r2
   16b64:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16b66:	f242 0312 	movw	r3, #8210	; 0x2012
   16b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b6e:	f242 0212 	movw	r2, #8210	; 0x2012
   16b72:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b76:	7812      	ldrb	r2, [r2, #0]
   16b78:	b2d2      	uxtb	r2, r2
   16b7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16b7e:	b2d2      	uxtb	r2, r2
   16b80:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16b82:	f242 0318 	movw	r3, #8216	; 0x2018
   16b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b8a:	f242 0218 	movw	r2, #8216	; 0x2018
   16b8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b92:	7812      	ldrb	r2, [r2, #0]
   16b94:	b2d2      	uxtb	r2, r2
   16b96:	f022 0202 	bic.w	r2, r2, #2
   16b9a:	b2d2      	uxtb	r2, r2
   16b9c:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16b9e:	2300      	movs	r3, #0
   16ba0:	71fb      	strb	r3, [r7, #7]
   16ba2:	e00b      	b.n	16bbc <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16ba4:	79fa      	ldrb	r2, [r7, #7]
   16ba6:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bae:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16bb2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16bb6:	79fb      	ldrb	r3, [r7, #7]
   16bb8:	3301      	adds	r3, #1
   16bba:	71fb      	strb	r3, [r7, #7]
   16bbc:	79fb      	ldrb	r3, [r7, #7]
   16bbe:	2b09      	cmp	r3, #9
   16bc0:	d9f0      	bls.n	16ba4 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16bc2:	f242 032a 	movw	r3, #8234	; 0x202a
   16bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16bce:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16bd0:	f242 032f 	movw	r3, #8239	; 0x202f
   16bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bd8:	f242 022f 	movw	r2, #8239	; 0x202f
   16bdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16be0:	7812      	ldrb	r2, [r2, #0]
   16be2:	b2d2      	uxtb	r2, r2
   16be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16be8:	b2d2      	uxtb	r2, r2
   16bea:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16bec:	f242 0336 	movw	r3, #8246	; 0x2036
   16bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bf4:	2210      	movs	r2, #16
   16bf6:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16bf8:	f242 0312 	movw	r3, #8210	; 0x2012
   16bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c00:	f242 0212 	movw	r2, #8210	; 0x2012
   16c04:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c08:	7812      	ldrb	r2, [r2, #0]
   16c0a:	b2d2      	uxtb	r2, r2
   16c0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16c10:	b2d2      	uxtb	r2, r2
   16c12:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16c14:	f242 0337 	movw	r3, #8247	; 0x2037
   16c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c1c:	f242 0237 	movw	r2, #8247	; 0x2037
   16c20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c24:	7812      	ldrb	r2, [r2, #0]
   16c26:	b2d2      	uxtb	r2, r2
   16c28:	f042 0210 	orr.w	r2, r2, #16
   16c2c:	b2d2      	uxtb	r2, r2
   16c2e:	701a      	strb	r2, [r3, #0]
}
   16c30:	370c      	adds	r7, #12
   16c32:	46bd      	mov	sp, r7
   16c34:	f85d 7b04 	ldr.w	r7, [sp], #4
   16c38:	4770      	bx	lr
   16c3a:	bf00      	nop

00016c3c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16c3c:	b480      	push	{r7}
   16c3e:	b083      	sub	sp, #12
   16c40:	af00      	add	r7, sp, #0
   16c42:	4602      	mov	r2, r0
   16c44:	460b      	mov	r3, r1
   16c46:	71fa      	strb	r2, [r7, #7]
   16c48:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16c4a:	79f9      	ldrb	r1, [r7, #7]
   16c4c:	88bb      	ldrh	r3, [r7, #4]
   16c4e:	011b      	lsls	r3, r3, #4
   16c50:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16c54:	d308      	bcc.n	16c68 <servo_set_one+0x2c>
   16c56:	88bb      	ldrh	r3, [r7, #4]
   16c58:	011b      	lsls	r3, r3, #4
   16c5a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c5e:	bf28      	it	cs
   16c60:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c64:	b29a      	uxth	r2, r3
   16c66:	e001      	b.n	16c6c <servo_set_one+0x30>
   16c68:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c6c:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c74:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16c78:	370c      	adds	r7, #12
   16c7a:	46bd      	mov	sp, r7
   16c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16c80:	4770      	bx	lr
   16c82:	bf00      	nop

00016c84 <servo_transmit>:

void 
servo_transmit(void) {
   16c84:	b580      	push	{r7, lr}
   16c86:	b082      	sub	sp, #8
   16c88:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16c8a:	2000      	movs	r0, #0
   16c8c:	f000 f9e6 	bl	1705c <uart_transmit>
   16c90:	2000      	movs	r0, #0
   16c92:	f000 f9e3 	bl	1705c <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16c96:	2300      	movs	r3, #0
   16c98:	71fb      	strb	r3, [r7, #7]
   16c9a:	e01a      	b.n	16cd2 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16c9c:	79fa      	ldrb	r2, [r7, #7]
   16c9e:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ca6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16caa:	0a1b      	lsrs	r3, r3, #8
   16cac:	b29b      	uxth	r3, r3
   16cae:	b2db      	uxtb	r3, r3
   16cb0:	4618      	mov	r0, r3
   16cb2:	f000 f9d3 	bl	1705c <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16cb6:	79fa      	ldrb	r2, [r7, #7]
   16cb8:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cc0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16cc4:	b2db      	uxtb	r3, r3
   16cc6:	4618      	mov	r0, r3
   16cc8:	f000 f9c8 	bl	1705c <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16ccc:	79fb      	ldrb	r3, [r7, #7]
   16cce:	3301      	adds	r3, #1
   16cd0:	71fb      	strb	r3, [r7, #7]
   16cd2:	79fb      	ldrb	r3, [r7, #7]
   16cd4:	2b09      	cmp	r3, #9
   16cd6:	d9e1      	bls.n	16c9c <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16cd8:	200a      	movs	r0, #10
   16cda:	f000 f9bf 	bl	1705c <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16cde:	3708      	adds	r7, #8
   16ce0:	46bd      	mov	sp, r7
   16ce2:	bd80      	pop	{r7, pc}

00016ce4 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16ce4:	b5b0      	push	{r4, r5, r7, lr}
   16ce6:	b084      	sub	sp, #16
   16ce8:	af00      	add	r7, sp, #0
   16cea:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16cec:	687b      	ldr	r3, [r7, #4]
   16cee:	330a      	adds	r3, #10
   16cf0:	881b      	ldrh	r3, [r3, #0]
   16cf2:	b21b      	sxth	r3, r3
   16cf4:	005b      	lsls	r3, r3, #1
   16cf6:	4618      	mov	r0, r3
   16cf8:	f000 fe64 	bl	179c4 <__aeabi_i2d>
   16cfc:	4602      	mov	r2, r0
   16cfe:	460b      	mov	r3, r1
   16d00:	4610      	mov	r0, r2
   16d02:	4619      	mov	r1, r3
   16d04:	a3a6      	add	r3, pc, #664	; (adr r3, 16fa0 <servo_set+0x2bc>)
   16d06:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d0a:	f000 fec1 	bl	17a90 <__aeabi_dmul>
   16d0e:	4602      	mov	r2, r0
   16d10:	460b      	mov	r3, r1
   16d12:	4610      	mov	r0, r2
   16d14:	4619      	mov	r1, r3
   16d16:	f001 f955 	bl	17fc4 <__aeabi_d2iz>
   16d1a:	4603      	mov	r3, r0
   16d1c:	b29b      	uxth	r3, r3
   16d1e:	b29b      	uxth	r3, r3
   16d20:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16d24:	81fb      	strh	r3, [r7, #14]
   16d26:	89fb      	ldrh	r3, [r7, #14]
   16d28:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d2c:	d307      	bcc.n	16d3e <servo_set+0x5a>
   16d2e:	89fb      	ldrh	r3, [r7, #14]
   16d30:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d34:	bf28      	it	cs
   16d36:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d3a:	b29a      	uxth	r2, r3
   16d3c:	e001      	b.n	16d42 <servo_set+0x5e>
   16d3e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d42:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d4a:	80da      	strh	r2, [r3, #6]
   16d4c:	687b      	ldr	r3, [r7, #4]
   16d4e:	881b      	ldrh	r3, [r3, #0]
   16d50:	b21b      	sxth	r3, r3
   16d52:	005b      	lsls	r3, r3, #1
   16d54:	4618      	mov	r0, r3
   16d56:	f000 fe35 	bl	179c4 <__aeabi_i2d>
   16d5a:	4602      	mov	r2, r0
   16d5c:	460b      	mov	r3, r1
   16d5e:	4610      	mov	r0, r2
   16d60:	4619      	mov	r1, r3
   16d62:	a38f      	add	r3, pc, #572	; (adr r3, 16fa0 <servo_set+0x2bc>)
   16d64:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d68:	f000 fe92 	bl	17a90 <__aeabi_dmul>
   16d6c:	4602      	mov	r2, r0
   16d6e:	460b      	mov	r3, r1
   16d70:	4610      	mov	r0, r2
   16d72:	4619      	mov	r1, r3
   16d74:	f001 f926 	bl	17fc4 <__aeabi_d2iz>
   16d78:	4603      	mov	r3, r0
   16d7a:	b29b      	uxth	r3, r3
   16d7c:	b29b      	uxth	r3, r3
   16d7e:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16d82:	81fb      	strh	r3, [r7, #14]
   16d84:	89fb      	ldrh	r3, [r7, #14]
   16d86:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d8a:	d307      	bcc.n	16d9c <servo_set+0xb8>
   16d8c:	89fb      	ldrh	r3, [r7, #14]
   16d8e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d92:	bf28      	it	cs
   16d94:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d98:	b29a      	uxth	r2, r3
   16d9a:	e001      	b.n	16da0 <servo_set+0xbc>
   16d9c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16da0:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16da8:	825a      	strh	r2, [r3, #18]
   16daa:	687b      	ldr	r3, [r7, #4]
   16dac:	3304      	adds	r3, #4
   16dae:	881b      	ldrh	r3, [r3, #0]
   16db0:	b21b      	sxth	r3, r3
   16db2:	4618      	mov	r0, r3
   16db4:	f000 fe06 	bl	179c4 <__aeabi_i2d>
   16db8:	4602      	mov	r2, r0
   16dba:	460b      	mov	r3, r1
   16dbc:	4610      	mov	r0, r2
   16dbe:	4619      	mov	r1, r3
   16dc0:	a379      	add	r3, pc, #484	; (adr r3, 16fa8 <servo_set+0x2c4>)
   16dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   16dc6:	f000 fe63 	bl	17a90 <__aeabi_dmul>
   16dca:	4602      	mov	r2, r0
   16dcc:	460b      	mov	r3, r1
   16dce:	4610      	mov	r0, r2
   16dd0:	4619      	mov	r1, r3
   16dd2:	f001 f8f7 	bl	17fc4 <__aeabi_d2iz>
   16dd6:	4603      	mov	r3, r0
   16dd8:	b29b      	uxth	r3, r3
   16dda:	b29b      	uxth	r3, r3
   16ddc:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16de0:	3320      	adds	r3, #32
   16de2:	81fb      	strh	r3, [r7, #14]
   16de4:	89fb      	ldrh	r3, [r7, #14]
   16de6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16dea:	d307      	bcc.n	16dfc <servo_set+0x118>
   16dec:	89fb      	ldrh	r3, [r7, #14]
   16dee:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16df2:	bf28      	it	cs
   16df4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16df8:	b29a      	uxth	r2, r3
   16dfa:	e001      	b.n	16e00 <servo_set+0x11c>
   16dfc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e00:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e08:	819a      	strh	r2, [r3, #12]
   16e0a:	687b      	ldr	r3, [r7, #4]
   16e0c:	885b      	ldrh	r3, [r3, #2]
   16e0e:	81bb      	strh	r3, [r7, #12]
   16e10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16e14:	2b00      	cmp	r3, #0
   16e16:	dd06      	ble.n	16e26 <servo_set+0x142>
   16e18:	f04f 0400 	mov.w	r4, #0
   16e1c:	f04f 0500 	mov.w	r5, #0
   16e20:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16e24:	e002      	b.n	16e2c <servo_set+0x148>
   16e26:	a562      	add	r5, pc, #392	; (adr r5, 16fb0 <servo_set+0x2cc>)
   16e28:	e9d5 4500 	ldrd	r4, r5, [r5]
   16e2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16e30:	4618      	mov	r0, r3
   16e32:	f000 fdc7 	bl	179c4 <__aeabi_i2d>
   16e36:	4602      	mov	r2, r0
   16e38:	460b      	mov	r3, r1
   16e3a:	4620      	mov	r0, r4
   16e3c:	4629      	mov	r1, r5
   16e3e:	f000 fe27 	bl	17a90 <__aeabi_dmul>
   16e42:	4602      	mov	r2, r0
   16e44:	460b      	mov	r3, r1
   16e46:	4610      	mov	r0, r2
   16e48:	4619      	mov	r1, r3
   16e4a:	a35b      	add	r3, pc, #364	; (adr r3, 16fb8 <servo_set+0x2d4>)
   16e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e50:	f000 fe1e 	bl	17a90 <__aeabi_dmul>
   16e54:	4602      	mov	r2, r0
   16e56:	460b      	mov	r3, r1
   16e58:	4610      	mov	r0, r2
   16e5a:	4619      	mov	r1, r3
   16e5c:	f001 f8b2 	bl	17fc4 <__aeabi_d2iz>
   16e60:	4603      	mov	r3, r0
   16e62:	b29b      	uxth	r3, r3
   16e64:	b29b      	uxth	r3, r3
   16e66:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16e6a:	81fb      	strh	r3, [r7, #14]
   16e6c:	89fb      	ldrh	r3, [r7, #14]
   16e6e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e72:	d307      	bcc.n	16e84 <servo_set+0x1a0>
   16e74:	89fb      	ldrh	r3, [r7, #14]
   16e76:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e7a:	bf28      	it	cs
   16e7c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e80:	b29a      	uxth	r2, r3
   16e82:	e001      	b.n	16e88 <servo_set+0x1a4>
   16e84:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e88:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e90:	801a      	strh	r2, [r3, #0]
   16e92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16e96:	2b00      	cmp	r3, #0
   16e98:	dd03      	ble.n	16ea2 <servo_set+0x1be>
   16e9a:	a545      	add	r5, pc, #276	; (adr r5, 16fb0 <servo_set+0x2cc>)
   16e9c:	e9d5 4500 	ldrd	r4, r5, [r5]
   16ea0:	e005      	b.n	16eae <servo_set+0x1ca>
   16ea2:	f04f 0400 	mov.w	r4, #0
   16ea6:	f04f 0500 	mov.w	r5, #0
   16eaa:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16eae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16eb2:	4618      	mov	r0, r3
   16eb4:	f000 fd86 	bl	179c4 <__aeabi_i2d>
   16eb8:	4602      	mov	r2, r0
   16eba:	460b      	mov	r3, r1
   16ebc:	4620      	mov	r0, r4
   16ebe:	4629      	mov	r1, r5
   16ec0:	f000 fde6 	bl	17a90 <__aeabi_dmul>
   16ec4:	4602      	mov	r2, r0
   16ec6:	460b      	mov	r3, r1
   16ec8:	4610      	mov	r0, r2
   16eca:	4619      	mov	r1, r3
   16ecc:	a33c      	add	r3, pc, #240	; (adr r3, 16fc0 <servo_set+0x2dc>)
   16ece:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ed2:	f000 fddd 	bl	17a90 <__aeabi_dmul>
   16ed6:	4602      	mov	r2, r0
   16ed8:	460b      	mov	r3, r1
   16eda:	4610      	mov	r0, r2
   16edc:	4619      	mov	r1, r3
   16ede:	f001 f871 	bl	17fc4 <__aeabi_d2iz>
   16ee2:	4603      	mov	r3, r0
   16ee4:	b29b      	uxth	r3, r3
   16ee6:	b29b      	uxth	r3, r3
   16ee8:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16eec:	3320      	adds	r3, #32
   16eee:	81fb      	strh	r3, [r7, #14]
   16ef0:	89fb      	ldrh	r3, [r7, #14]
   16ef2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ef6:	d307      	bcc.n	16f08 <servo_set+0x224>
   16ef8:	89fb      	ldrh	r3, [r7, #14]
   16efa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16efe:	bf28      	it	cs
   16f00:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f04:	b29a      	uxth	r2, r3
   16f06:	e001      	b.n	16f0c <servo_set+0x228>
   16f08:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f0c:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f14:	809a      	strh	r2, [r3, #4]
   16f16:	687b      	ldr	r3, [r7, #4]
   16f18:	3306      	adds	r3, #6
   16f1a:	881b      	ldrh	r3, [r3, #0]
   16f1c:	b21b      	sxth	r3, r3
   16f1e:	4618      	mov	r0, r3
   16f20:	f000 fd50 	bl	179c4 <__aeabi_i2d>
   16f24:	4604      	mov	r4, r0
   16f26:	460d      	mov	r5, r1
   16f28:	687b      	ldr	r3, [r7, #4]
   16f2a:	3302      	adds	r3, #2
   16f2c:	881b      	ldrh	r3, [r3, #0]
   16f2e:	b21b      	sxth	r3, r3
   16f30:	4618      	mov	r0, r3
   16f32:	f000 fd47 	bl	179c4 <__aeabi_i2d>
   16f36:	4602      	mov	r2, r0
   16f38:	460b      	mov	r3, r1
   16f3a:	4620      	mov	r0, r4
   16f3c:	4629      	mov	r1, r5
   16f3e:	f000 fbf5 	bl	1772c <__adddf3>
   16f42:	4602      	mov	r2, r0
   16f44:	460b      	mov	r3, r1
   16f46:	4610      	mov	r0, r2
   16f48:	4619      	mov	r1, r3
   16f4a:	a31f      	add	r3, pc, #124	; (adr r3, 16fc8 <servo_set+0x2e4>)
   16f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f50:	f000 fd9e 	bl	17a90 <__aeabi_dmul>
   16f54:	4602      	mov	r2, r0
   16f56:	460b      	mov	r3, r1
   16f58:	4610      	mov	r0, r2
   16f5a:	4619      	mov	r1, r3
   16f5c:	f001 f832 	bl	17fc4 <__aeabi_d2iz>
   16f60:	4603      	mov	r3, r0
   16f62:	b29b      	uxth	r3, r3
   16f64:	b29b      	uxth	r3, r3
   16f66:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16f6a:	3320      	adds	r3, #32
   16f6c:	81fb      	strh	r3, [r7, #14]
   16f6e:	89fb      	ldrh	r3, [r7, #14]
   16f70:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f74:	d307      	bcc.n	16f86 <servo_set+0x2a2>
   16f76:	89fb      	ldrh	r3, [r7, #14]
   16f78:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f7c:	bf28      	it	cs
   16f7e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f82:	b29a      	uxth	r2, r3
   16f84:	e001      	b.n	16f8a <servo_set+0x2a6>
   16f86:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f8a:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f92:	81da      	strh	r2, [r3, #14]
}
   16f94:	3710      	adds	r7, #16
   16f96:	46bd      	mov	sp, r7
   16f98:	bdb0      	pop	{r4, r5, r7, pc}
   16f9a:	bf00      	nop
   16f9c:	f3af 8000 	nop.w
   16fa0:	aaaa9ef0 	.word	0xaaaa9ef0
   16fa4:	3feaaaaa 	.word	0x3feaaaaa
   16fa8:	fc96473e 	.word	0xfc96473e
   16fac:	3fdfc962 	.word	0x3fdfc962
   16fb0:	51eb851f 	.word	0x51eb851f
   16fb4:	3fe51eb8 	.word	0x3fe51eb8
   16fb8:	9999999a 	.word	0x9999999a
   16fbc:	bfe19999 	.word	0xbfe19999
   16fc0:	aaaa9ef0 	.word	0xaaaa9ef0
   16fc4:	bfe0aaaa 	.word	0xbfe0aaaa
   16fc8:	eeeed77a 	.word	0xeeeed77a
   16fcc:	bfdeeeee 	.word	0xbfdeeeee

00016fd0 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16fd0:	b480      	push	{r7}
   16fd2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16fd4:	f242 0320 	movw	r3, #8224	; 0x2020
   16fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fdc:	2200      	movs	r2, #0
   16fde:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16fe0:	f242 0309 	movw	r3, #8201	; 0x2009
   16fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fe8:	2219      	movs	r2, #25
   16fea:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16fec:	f242 030b 	movw	r3, #8203	; 0x200b
   16ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ff4:	2200      	movs	r2, #0
   16ff6:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16ff8:	f242 030a 	movw	r3, #8202	; 0x200a
   16ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17000:	2208      	movs	r2, #8
   17002:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   17004:	f242 0320 	movw	r3, #8224	; 0x2020
   17008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1700c:	2286      	movs	r2, #134	; 0x86
   1700e:	701a      	strb	r2, [r3, #0]
}
   17010:	46bd      	mov	sp, r7
   17012:	f85d 7b04 	ldr.w	r7, [sp], #4
   17016:	4770      	bx	lr

00017018 <uart_init_rx>:

void uart_init_rx() {
   17018:	b480      	push	{r7}
   1701a:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   1701c:	f242 030a 	movw	r3, #8202	; 0x200a
   17020:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17024:	f242 020a 	movw	r2, #8202	; 0x200a
   17028:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1702c:	7812      	ldrb	r2, [r2, #0]
   1702e:	b2d2      	uxtb	r2, r2
   17030:	f042 0210 	orr.w	r2, r2, #16
   17034:	b2d2      	uxtb	r2, r2
   17036:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   17038:	f242 030a 	movw	r3, #8202	; 0x200a
   1703c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17040:	f242 020a 	movw	r2, #8202	; 0x200a
   17044:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17048:	7812      	ldrb	r2, [r2, #0]
   1704a:	b2d2      	uxtb	r2, r2
   1704c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17050:	b2d2      	uxtb	r2, r2
   17052:	701a      	strb	r2, [r3, #0]
}
   17054:	46bd      	mov	sp, r7
   17056:	f85d 7b04 	ldr.w	r7, [sp], #4
   1705a:	4770      	bx	lr

0001705c <uart_transmit>:

void uart_transmit( unsigned char data ) {
   1705c:	b480      	push	{r7}
   1705e:	b083      	sub	sp, #12
   17060:	af00      	add	r7, sp, #0
   17062:	4603      	mov	r3, r0
   17064:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   17066:	f242 030a 	movw	r3, #8202	; 0x200a
   1706a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1706e:	781b      	ldrb	r3, [r3, #0]
   17070:	b2db      	uxtb	r3, r3
   17072:	f003 0340 	and.w	r3, r3, #64	; 0x40
   17076:	2b00      	cmp	r3, #0
   17078:	d028      	beq.n	170cc <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   1707a:	f64c 2391 	movw	r3, #51857	; 0xca91
   1707e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17082:	781b      	ldrb	r3, [r3, #0]
   17084:	b2db      	uxtb	r3, r3
   17086:	461a      	mov	r2, r3
   17088:	f64c 2390 	movw	r3, #51856	; 0xca90
   1708c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17090:	781b      	ldrb	r3, [r3, #0]
   17092:	3301      	adds	r3, #1
   17094:	429a      	cmp	r2, r3
   17096:	d100      	bne.n	1709a <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   17098:	e02c      	b.n	170f4 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   1709a:	f64c 2390 	movw	r3, #51856	; 0xca90
   1709e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170a2:	781b      	ldrb	r3, [r3, #0]
   170a4:	461a      	mov	r2, r3
   170a6:	f64c 2394 	movw	r3, #51860	; 0xca94
   170aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170ae:	79f9      	ldrb	r1, [r7, #7]
   170b0:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   170b2:	f64c 2390 	movw	r3, #51856	; 0xca90
   170b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170ba:	781b      	ldrb	r3, [r3, #0]
   170bc:	3301      	adds	r3, #1
   170be:	b2da      	uxtb	r2, r3
   170c0:	f64c 2390 	movw	r3, #51856	; 0xca90
   170c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170c8:	701a      	strb	r2, [r3, #0]
   170ca:	e013      	b.n	170f4 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   170cc:	f242 030c 	movw	r3, #8204	; 0x200c
   170d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170d4:	79fa      	ldrb	r2, [r7, #7]
   170d6:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   170d8:	f242 030a 	movw	r3, #8202	; 0x200a
   170dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170e0:	f242 020a 	movw	r2, #8202	; 0x200a
   170e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   170e8:	7812      	ldrb	r2, [r2, #0]
   170ea:	b2d2      	uxtb	r2, r2
   170ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   170f0:	b2d2      	uxtb	r2, r2
   170f2:	701a      	strb	r2, [r3, #0]
  }
}
   170f4:	370c      	adds	r7, #12
   170f6:	46bd      	mov	sp, r7
   170f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   170fc:	4770      	bx	lr
   170fe:	bf00      	nop

00017100 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   17100:	b590      	push	{r4, r7, lr}
   17102:	b089      	sub	sp, #36	; 0x24
   17104:	af00      	add	r7, sp, #0
   17106:	4603      	mov	r3, r0
   17108:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   1710a:	f648 1380 	movw	r3, #35200	; 0x8980
   1710e:	f2c0 0301 	movt	r3, #1
   17112:	f107 040c 	add.w	r4, r7, #12
   17116:	6818      	ldr	r0, [r3, #0]
   17118:	6859      	ldr	r1, [r3, #4]
   1711a:	689a      	ldr	r2, [r3, #8]
   1711c:	68db      	ldr	r3, [r3, #12]
   1711e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   17120:	79fb      	ldrb	r3, [r7, #7]
   17122:	091b      	lsrs	r3, r3, #4
   17124:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   17126:	79fb      	ldrb	r3, [r7, #7]
   17128:	f003 030f 	and.w	r3, r3, #15
   1712c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   1712e:	230f      	movs	r3, #15
   17130:	77fb      	strb	r3, [r7, #31]
        low = 15;
   17132:	230f      	movs	r3, #15
   17134:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   17136:	7ffb      	ldrb	r3, [r7, #31]
   17138:	f107 0220 	add.w	r2, r7, #32
   1713c:	4413      	add	r3, r2
   1713e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   17142:	4618      	mov	r0, r3
   17144:	f7ff ff8a 	bl	1705c <uart_transmit>
  uart_transmit(hex[low]);
   17148:	7fbb      	ldrb	r3, [r7, #30]
   1714a:	f107 0220 	add.w	r2, r7, #32
   1714e:	4413      	add	r3, r2
   17150:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   17154:	4618      	mov	r0, r3
   17156:	f7ff ff81 	bl	1705c <uart_transmit>
} 
   1715a:	3724      	adds	r7, #36	; 0x24
   1715c:	46bd      	mov	sp, r7
   1715e:	bd90      	pop	{r4, r7, pc}

00017160 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17160:	b580      	push	{r7, lr}
   17162:	b084      	sub	sp, #16
   17164:	af00      	add	r7, sp, #0
   17166:	4603      	mov	r3, r0
   17168:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   1716a:	88fb      	ldrh	r3, [r7, #6]
   1716c:	0a1b      	lsrs	r3, r3, #8
   1716e:	b29b      	uxth	r3, r3
   17170:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   17172:	88fb      	ldrh	r3, [r7, #6]
   17174:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   17176:	7bfb      	ldrb	r3, [r7, #15]
   17178:	4618      	mov	r0, r3
   1717a:	f7ff ffc1 	bl	17100 <uart_print_hex>
  uart_print_hex(low);
   1717e:	7bbb      	ldrb	r3, [r7, #14]
   17180:	4618      	mov	r0, r3
   17182:	f7ff ffbd 	bl	17100 <uart_print_hex>
}
   17186:	3710      	adds	r7, #16
   17188:	46bd      	mov	sp, r7
   1718a:	bd80      	pop	{r7, pc}

0001718c <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   1718c:	b580      	push	{r7, lr}
   1718e:	b084      	sub	sp, #16
   17190:	af00      	add	r7, sp, #0
   17192:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   17194:	2300      	movs	r3, #0
   17196:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   17198:	e009      	b.n	171ae <uart_print_string+0x22>
    uart_transmit(s[i]);
   1719a:	7bfb      	ldrb	r3, [r7, #15]
   1719c:	687a      	ldr	r2, [r7, #4]
   1719e:	4413      	add	r3, r2
   171a0:	781b      	ldrb	r3, [r3, #0]
   171a2:	4618      	mov	r0, r3
   171a4:	f7ff ff5a 	bl	1705c <uart_transmit>
    i++;
   171a8:	7bfb      	ldrb	r3, [r7, #15]
   171aa:	3301      	adds	r3, #1
   171ac:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   171ae:	7bfb      	ldrb	r3, [r7, #15]
   171b0:	687a      	ldr	r2, [r7, #4]
   171b2:	4413      	add	r3, r2
   171b4:	781b      	ldrb	r3, [r3, #0]
   171b6:	2b00      	cmp	r3, #0
   171b8:	d1ef      	bne.n	1719a <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   171ba:	3710      	adds	r7, #16
   171bc:	46bd      	mov	sp, r7
   171be:	bd80      	pop	{r7, pc}

000171c0 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   171c0:	b480      	push	{r7}
   171c2:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   171c4:	f64c 2390 	movw	r3, #51856	; 0xca90
   171c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171cc:	781a      	ldrb	r2, [r3, #0]
   171ce:	f64c 2391 	movw	r3, #51857	; 0xca91
   171d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171d6:	781b      	ldrb	r3, [r3, #0]
   171d8:	b2db      	uxtb	r3, r3
   171da:	429a      	cmp	r2, r3
   171dc:	d10e      	bne.n	171fc <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   171de:	f242 030a 	movw	r3, #8202	; 0x200a
   171e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171e6:	f242 020a 	movw	r2, #8202	; 0x200a
   171ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   171ee:	7812      	ldrb	r2, [r2, #0]
   171f0:	b2d2      	uxtb	r2, r2
   171f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   171f6:	b2d2      	uxtb	r2, r2
   171f8:	701a      	strb	r2, [r3, #0]
   171fa:	e01d      	b.n	17238 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   171fc:	f242 030c 	movw	r3, #8204	; 0x200c
   17200:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17204:	f64c 2291 	movw	r2, #51857	; 0xca91
   17208:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1720c:	7812      	ldrb	r2, [r2, #0]
   1720e:	b2d2      	uxtb	r2, r2
   17210:	4611      	mov	r1, r2
   17212:	f64c 2294 	movw	r2, #51860	; 0xca94
   17216:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1721a:	5c52      	ldrb	r2, [r2, r1]
   1721c:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   1721e:	f64c 2391 	movw	r3, #51857	; 0xca91
   17222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17226:	781b      	ldrb	r3, [r3, #0]
   17228:	b2db      	uxtb	r3, r3
   1722a:	3301      	adds	r3, #1
   1722c:	b2da      	uxtb	r2, r3
   1722e:	f64c 2391 	movw	r3, #51857	; 0xca91
   17232:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17236:	701a      	strb	r2, [r3, #0]
  }
}
   17238:	46bd      	mov	sp, r7
   1723a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1723e:	4770      	bx	lr

00017240 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17240:	b580      	push	{r7, lr}
   17242:	b082      	sub	sp, #8
   17244:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   17246:	2010      	movs	r0, #16
   17248:	2101      	movs	r1, #1
   1724a:	f7e9 fdb9 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   1724e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17252:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1725a:	2201      	movs	r2, #1
   1725c:	f7ea f8c0 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17264:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   17266:	2310      	movs	r3, #16
   17268:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1726a:	2303      	movs	r3, #3
   1726c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1726e:	1d3b      	adds	r3, r7, #4
   17270:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17274:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17278:	4619      	mov	r1, r3
   1727a:	f7e9 ff75 	bl	1168 <GPIO_Init>
}
   1727e:	3708      	adds	r7, #8
   17280:	46bd      	mov	sp, r7
   17282:	bd80      	pop	{r7, pc}

00017284 <init_button>:

void init_button(void)
{
   17284:	b580      	push	{r7, lr}
   17286:	b082      	sub	sp, #8
   17288:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   1728a:	2004      	movs	r0, #4
   1728c:	2101      	movs	r1, #1
   1728e:	f7e9 fd97 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   17292:	2301      	movs	r3, #1
   17294:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17296:	2304      	movs	r3, #4
   17298:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1729a:	2303      	movs	r3, #3
   1729c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1729e:	1d3b      	adds	r3, r7, #4
   172a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   172a4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   172a8:	4619      	mov	r1, r3
   172aa:	f7e9 ff5d 	bl	1168 <GPIO_Init>
}
   172ae:	3708      	adds	r7, #8
   172b0:	46bd      	mov	sp, r7
   172b2:	bd80      	pop	{r7, pc}

000172b4 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   172b4:	b580      	push	{r7, lr}
   172b6:	b084      	sub	sp, #16
   172b8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   172ba:	2001      	movs	r0, #1
   172bc:	2101      	movs	r1, #1
   172be:	f7e9 fd7f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   172c2:	2000      	movs	r0, #0
   172c4:	2100      	movs	r1, #0
   172c6:	f7ea f983 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   172ca:	2301      	movs	r3, #1
   172cc:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   172ce:	2300      	movs	r3, #0
   172d0:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   172d2:	2308      	movs	r3, #8
   172d4:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   172d6:	2301      	movs	r3, #1
   172d8:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   172da:	f107 0308 	add.w	r3, r7, #8
   172de:	4618      	mov	r0, r3
   172e0:	f7ea fe7c 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   172e4:	2306      	movs	r3, #6
   172e6:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   172e8:	230f      	movs	r3, #15
   172ea:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   172ec:	230f      	movs	r3, #15
   172ee:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   172f0:	2301      	movs	r3, #1
   172f2:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   172f4:	1d3b      	adds	r3, r7, #4
   172f6:	4618      	mov	r0, r3
   172f8:	f7ea ffaa 	bl	2250 <NVIC_Init>
}
   172fc:	3710      	adds	r7, #16
   172fe:	46bd      	mov	sp, r7
   17300:	bd80      	pop	{r7, pc}
   17302:	bf00      	nop

00017304 <init_rs232>:

void init_rs232(void)
{
   17304:	b580      	push	{r7, lr}
   17306:	b086      	sub	sp, #24
   17308:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   1730a:	2005      	movs	r0, #5
   1730c:	2101      	movs	r1, #1
   1730e:	f7e9 fd57 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   17312:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17316:	2101      	movs	r1, #1
   17318:	f7e9 fd7a 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   1731c:	2308      	movs	r3, #8
   1731e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17320:	2304      	movs	r3, #4
   17322:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17324:	1d3b      	adds	r3, r7, #4
   17326:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1732a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1732e:	4619      	mov	r1, r3
   17330:	f7e9 ff1a 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   17334:	2304      	movs	r3, #4
   17336:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17338:	2303      	movs	r3, #3
   1733a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   1733c:	2318      	movs	r3, #24
   1733e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17340:	1d3b      	adds	r3, r7, #4
   17342:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17346:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1734a:	4619      	mov	r1, r3
   1734c:	f7e9 ff0c 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17350:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   17354:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   17356:	2300      	movs	r3, #0
   17358:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   1735a:	2300      	movs	r3, #0
   1735c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   1735e:	2300      	movs	r3, #0
   17360:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   17362:	2300      	movs	r3, #0
   17364:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   17366:	230c      	movs	r3, #12
   17368:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   1736a:	f107 0308 	add.w	r3, r7, #8
   1736e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17372:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17376:	4619      	mov	r1, r3
   17378:	f7ea f9de 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   1737c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17380:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17384:	2101      	movs	r1, #1
   17386:	f7ea faf5 	bl	1974 <USART_Cmd>
}
   1738a:	3718      	adds	r7, #24
   1738c:	46bd      	mov	sp, r7
   1738e:	bd80      	pop	{r7, pc}

00017390 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17390:	b580      	push	{r7, lr}
   17392:	b082      	sub	sp, #8
   17394:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   17396:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1739a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1739e:	f240 7127 	movw	r1, #1831	; 0x727
   173a2:	2200      	movs	r2, #0
   173a4:	f7ea fb06 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   173a8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   173ac:	f2c4 0000 	movt	r0, #16384	; 0x4000
   173b0:	f240 5125 	movw	r1, #1317	; 0x525
   173b4:	2201      	movs	r2, #1
   173b6:	f7ea fafd 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   173ba:	2326      	movs	r3, #38	; 0x26
   173bc:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   173be:	2300      	movs	r3, #0
   173c0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   173c2:	2301      	movs	r3, #1
   173c4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   173c6:	1d3b      	adds	r3, r7, #4
   173c8:	4618      	mov	r0, r3
   173ca:	f7ea ff41 	bl	2250 <NVIC_Init>
}
   173ce:	3708      	adds	r7, #8
   173d0:	46bd      	mov	sp, r7
   173d2:	bd80      	pop	{r7, pc}

000173d4 <enable_rs232>:

void enable_rs232(void)
{
   173d4:	b580      	push	{r7, lr}
   173d6:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   173d8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   173dc:	f2c4 0000 	movt	r0, #16384	; 0x4000
   173e0:	2101      	movs	r1, #1
   173e2:	f7ea fac7 	bl	1974 <USART_Cmd>
}
   173e6:	bd80      	pop	{r7, pc}

000173e8 <send_byte>:

void send_byte(uint8_t b)
{
   173e8:	b580      	push	{r7, lr}
   173ea:	b082      	sub	sp, #8
   173ec:	af00      	add	r7, sp, #0
   173ee:	4603      	mov	r3, r0
   173f0:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   173f2:	bf00      	nop
   173f4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   173f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   173fc:	2180      	movs	r1, #128	; 0x80
   173fe:	f7ea fd25 	bl	1e4c <USART_GetFlagStatus>
   17402:	4603      	mov	r3, r0
   17404:	2b00      	cmp	r3, #0
   17406:	d0f5      	beq.n	173f4 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1740c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17414:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17418:	68d2      	ldr	r2, [r2, #12]
   1741a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   1741e:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17420:	79fb      	ldrb	r3, [r7, #7]
   17422:	b29b      	uxth	r3, r3
   17424:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17428:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1742c:	4619      	mov	r1, r3
   1742e:	f7ea fbc1 	bl	1bb4 <USART_SendData>
}
   17432:	3708      	adds	r7, #8
   17434:	46bd      	mov	sp, r7
   17436:	bd80      	pop	{r7, pc}

00017438 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17438:	b580      	push	{r7, lr}
   1743a:	b082      	sub	sp, #8
   1743c:	af00      	add	r7, sp, #0
   1743e:	4603      	mov	r3, r0
   17440:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   17442:	79fb      	ldrb	r3, [r7, #7]
   17444:	3330      	adds	r3, #48	; 0x30
   17446:	b2db      	uxtb	r3, r3
   17448:	4618      	mov	r0, r3
   1744a:	f7ff ffcd 	bl	173e8 <send_byte>
}
   1744e:	3708      	adds	r7, #8
   17450:	46bd      	mov	sp, r7
   17452:	bd80      	pop	{r7, pc}

00017454 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   17454:	b580      	push	{r7, lr}
   17456:	b084      	sub	sp, #16
   17458:	af00      	add	r7, sp, #0
   1745a:	6078      	str	r0, [r7, #4]
    int i = 0;
   1745c:	2300      	movs	r3, #0
   1745e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17460:	e009      	b.n	17476 <vPrintString+0x22>
    {
        send_byte(string[i]);
   17462:	68fb      	ldr	r3, [r7, #12]
   17464:	687a      	ldr	r2, [r7, #4]
   17466:	4413      	add	r3, r2
   17468:	781b      	ldrb	r3, [r3, #0]
   1746a:	4618      	mov	r0, r3
   1746c:	f7ff ffbc 	bl	173e8 <send_byte>
        i++;
   17470:	68fb      	ldr	r3, [r7, #12]
   17472:	3301      	adds	r3, #1
   17474:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   17476:	68fb      	ldr	r3, [r7, #12]
   17478:	687a      	ldr	r2, [r7, #4]
   1747a:	4413      	add	r3, r2
   1747c:	781b      	ldrb	r3, [r3, #0]
   1747e:	2b00      	cmp	r3, #0
   17480:	d1ef      	bne.n	17462 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   17482:	3710      	adds	r7, #16
   17484:	46bd      	mov	sp, r7
   17486:	bd80      	pop	{r7, pc}

00017488 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17488:	b580      	push	{r7, lr}
   1748a:	b08a      	sub	sp, #40	; 0x28
   1748c:	af00      	add	r7, sp, #0
   1748e:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17490:	2300      	movs	r3, #0
   17492:	623b      	str	r3, [r7, #32]
    long num = c_num;
   17494:	687b      	ldr	r3, [r7, #4]
   17496:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17498:	69fb      	ldr	r3, [r7, #28]
   1749a:	2b00      	cmp	r3, #0
   1749c:	d106      	bne.n	174ac <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   1749e:	f648 1090 	movw	r0, #35216	; 0x8990
   174a2:	f2c0 0001 	movt	r0, #1
   174a6:	f7ff ffd5 	bl	17454 <vPrintString>
   174aa:	e062      	b.n	17572 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   174ac:	e024      	b.n	174f8 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   174ae:	69f9      	ldr	r1, [r7, #28]
   174b0:	f246 6367 	movw	r3, #26215	; 0x6667
   174b4:	f2c6 6366 	movt	r3, #26214	; 0x6666
   174b8:	fb83 2301 	smull	r2, r3, r3, r1
   174bc:	109a      	asrs	r2, r3, #2
   174be:	17cb      	asrs	r3, r1, #31
   174c0:	1ad2      	subs	r2, r2, r3
   174c2:	4613      	mov	r3, r2
   174c4:	009b      	lsls	r3, r3, #2
   174c6:	4413      	add	r3, r2
   174c8:	005b      	lsls	r3, r3, #1
   174ca:	1aca      	subs	r2, r1, r3
   174cc:	b2d3      	uxtb	r3, r2
   174ce:	3330      	adds	r3, #48	; 0x30
   174d0:	b2da      	uxtb	r2, r3
   174d2:	f107 010c 	add.w	r1, r7, #12
   174d6:	6a3b      	ldr	r3, [r7, #32]
   174d8:	440b      	add	r3, r1
   174da:	701a      	strb	r2, [r3, #0]
            count ++;
   174dc:	6a3b      	ldr	r3, [r7, #32]
   174de:	3301      	adds	r3, #1
   174e0:	623b      	str	r3, [r7, #32]
            num /= 10;
   174e2:	69fa      	ldr	r2, [r7, #28]
   174e4:	f246 6367 	movw	r3, #26215	; 0x6667
   174e8:	f2c6 6366 	movt	r3, #26214	; 0x6666
   174ec:	fb83 1302 	smull	r1, r3, r3, r2
   174f0:	1099      	asrs	r1, r3, #2
   174f2:	17d3      	asrs	r3, r2, #31
   174f4:	1acb      	subs	r3, r1, r3
   174f6:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   174f8:	69fb      	ldr	r3, [r7, #28]
   174fa:	2b00      	cmp	r3, #0
   174fc:	d1d7      	bne.n	174ae <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   174fe:	f107 020c 	add.w	r2, r7, #12
   17502:	6a3b      	ldr	r3, [r7, #32]
   17504:	4413      	add	r3, r2
   17506:	2200      	movs	r2, #0
   17508:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   1750a:	2300      	movs	r3, #0
   1750c:	627b      	str	r3, [r7, #36]	; 0x24
   1750e:	e020      	b.n	17552 <vPrintNumber+0xca>
        {
            tmp = time[i];
   17510:	f107 020c 	add.w	r2, r7, #12
   17514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17516:	4413      	add	r3, r2
   17518:	781b      	ldrb	r3, [r3, #0]
   1751a:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   1751c:	6a3a      	ldr	r2, [r7, #32]
   1751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17520:	1ad3      	subs	r3, r2, r3
   17522:	3b01      	subs	r3, #1
   17524:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17528:	4413      	add	r3, r2
   1752a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   1752e:	f107 010c 	add.w	r1, r7, #12
   17532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17534:	440b      	add	r3, r1
   17536:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17538:	6a3a      	ldr	r2, [r7, #32]
   1753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1753c:	1ad3      	subs	r3, r2, r3
   1753e:	3b01      	subs	r3, #1
   17540:	f107 0128 	add.w	r1, r7, #40	; 0x28
   17544:	440b      	add	r3, r1
   17546:	7efa      	ldrb	r2, [r7, #27]
   17548:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   1754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1754e:	3301      	adds	r3, #1
   17550:	627b      	str	r3, [r7, #36]	; 0x24
   17552:	6a3b      	ldr	r3, [r7, #32]
   17554:	085a      	lsrs	r2, r3, #1
   17556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17558:	429a      	cmp	r2, r3
   1755a:	d8d9      	bhi.n	17510 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   1755c:	f107 030c 	add.w	r3, r7, #12
   17560:	4618      	mov	r0, r3
   17562:	f7ff ff77 	bl	17454 <vPrintString>
        vPrintString("\n\r");
   17566:	f648 1094 	movw	r0, #35220	; 0x8994
   1756a:	f2c0 0001 	movt	r0, #1
   1756e:	f7ff ff71 	bl	17454 <vPrintString>
    }
}
   17572:	3728      	adds	r7, #40	; 0x28
   17574:	46bd      	mov	sp, r7
   17576:	bd80      	pop	{r7, pc}

00017578 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   17578:	b580      	push	{r7, lr}
   1757a:	b086      	sub	sp, #24
   1757c:	af02      	add	r7, sp, #8
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   1757e:	2300      	movs	r3, #0
   17580:	60fb      	str	r3, [r7, #12]
   17582:	e020      	b.n	175c6 <vStartTask+0x4e>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], null_data);
   17584:	f240 0390 	movw	r3, #144	; 0x90
   17588:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1758c:	68fa      	ldr	r2, [r7, #12]
   1758e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   17592:	f240 0328 	movw	r3, #40	; 0x28
   17596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1759a:	68fa      	ldr	r2, [r7, #12]
   1759c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   175a0:	f240 0328 	movw	r3, #40	; 0x28
   175a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175a8:	68fa      	ldr	r2, [r7, #12]
   175aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   175ae:	687b      	ldr	r3, [r7, #4]
   175b0:	9300      	str	r3, [sp, #0]
   175b2:	683b      	ldr	r3, [r7, #0]
   175b4:	f7eb fc3c 	bl	2e30 <pxEventGenericCreate>
   175b8:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   175ba:	68b8      	ldr	r0, [r7, #8]
   175bc:	f7eb ff70 	bl	34a0 <vEventGenericSend>
void vStartTask()
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   175c0:	68fb      	ldr	r3, [r7, #12]
   175c2:	3301      	adds	r3, #1
   175c4:	60fb      	str	r3, [r7, #12]
   175c6:	68fb      	ldr	r3, [r7, #12]
   175c8:	2b0c      	cmp	r3, #12
   175ca:	dddb      	ble.n	17584 <vStartTask+0xc>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], null_data);
        vEventSend( pxEvent );   
    }
}
   175cc:	3710      	adds	r7, #16
   175ce:	46bd      	mov	sp, r7
   175d0:	bd80      	pop	{r7, pc}
   175d2:	bf00      	nop

000175d4 <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   175d4:	b580      	push	{r7, lr}
   175d6:	b086      	sub	sp, #24
   175d8:	af04      	add	r7, sp, #16
    init_led();
   175da:	f7ff fe31 	bl	17240 <init_led>
    init_rs232();
   175de:	f7ff fe91 	bl	17304 <init_rs232>
    enable_rs232_interrupts();
   175e2:	f7ff fed5 	bl	17390 <enable_rs232_interrupts>
    enable_rs232();
   175e6:	f7ff fef5 	bl	173d4 <enable_rs232>

    vSemaphoreInitialise();
   175ea:	f7eb ffc1 	bl	3570 <vSemaphoreInitialise>
    vContextInit();
   175ee:	f7eb ffff 	bl	35f0 <vContextInit>
    vInitialiseEventLists();  
   175f2:	f7eb fa45 	bl	2a80 <vInitialiseEventLists>
    vStartTask();
   175f6:	f7ff ffbf 	bl	17578 <vStartTask>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   175fa:	2300      	movs	r3, #0
   175fc:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   175fe:	2301      	movs	r3, #1
   17600:	9300      	str	r3, [sp, #0]
   17602:	f64c 3394 	movw	r3, #52116	; 0xcb94
   17606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1760a:	9301      	str	r3, [sp, #4]
   1760c:	2300      	movs	r3, #0
   1760e:	9302      	str	r3, [sp, #8]
   17610:	2300      	movs	r3, #0
   17612:	9303      	str	r3, [sp, #12]
   17614:	f643 4039 	movw	r0, #15417	; 0x3c39
   17618:	f2c0 0000 	movt	r0, #0
   1761c:	f648 1198 	movw	r1, #35224	; 0x8998
   17620:	f2c0 0101 	movt	r1, #1
   17624:	2280      	movs	r2, #128	; 0x80
   17626:	2300      	movs	r3, #0
   17628:	f7ed f9ec 	bl	4a04 <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 4, &xTaskOfHandle[1]);
   1762c:	2304      	movs	r3, #4
   1762e:	9300      	str	r3, [sp, #0]
   17630:	4b25      	ldr	r3, [pc, #148]	; (176c8 <main+0xf4>)
   17632:	9301      	str	r3, [sp, #4]
   17634:	2300      	movs	r3, #0
   17636:	9302      	str	r3, [sp, #8]
   17638:	2300      	movs	r3, #0
   1763a:	9303      	str	r3, [sp, #12]
   1763c:	f643 00d5 	movw	r0, #14549	; 0x38d5
   17640:	f2c0 0000 	movt	r0, #0
   17644:	f648 11a4 	movw	r1, #35236	; 0x89a4
   17648:	f2c0 0101 	movt	r1, #1
   1764c:	2280      	movs	r2, #128	; 0x80
   1764e:	2300      	movs	r3, #0
   17650:	f7ed f9d8 	bl	4a04 <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   17654:	2302      	movs	r3, #2
   17656:	9300      	str	r3, [sp, #0]
   17658:	4b1c      	ldr	r3, [pc, #112]	; (176cc <main+0xf8>)
   1765a:	9301      	str	r3, [sp, #4]
   1765c:	2300      	movs	r3, #0
   1765e:	9302      	str	r3, [sp, #8]
   17660:	2300      	movs	r3, #0
   17662:	9303      	str	r3, [sp, #12]
   17664:	f643 10d5 	movw	r0, #14805	; 0x39d5
   17668:	f2c0 0000 	movt	r0, #0
   1766c:	f648 11b0 	movw	r1, #35248	; 0x89b0
   17670:	f2c0 0101 	movt	r1, #1
   17674:	2280      	movs	r2, #128	; 0x80
   17676:	2300      	movs	r3, #0
   17678:	f7ed f9c4 	bl	4a04 <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 3, &xTaskOfHandle[3]);
   1767c:	2303      	movs	r3, #3
   1767e:	9300      	str	r3, [sp, #0]
   17680:	4b13      	ldr	r3, [pc, #76]	; (176d0 <main+0xfc>)
   17682:	9301      	str	r3, [sp, #4]
   17684:	2300      	movs	r3, #0
   17686:	9302      	str	r3, [sp, #8]
   17688:	2300      	movs	r3, #0
   1768a:	9303      	str	r3, [sp, #12]
   1768c:	f643 3045 	movw	r0, #15173	; 0x3b45
   17690:	f2c0 0000 	movt	r0, #0
   17694:	f648 11bc 	movw	r1, #35260	; 0x89bc
   17698:	f2c0 0101 	movt	r1, #1
   1769c:	2280      	movs	r2, #128	; 0x80
   1769e:	2300      	movs	r3, #0
   176a0:	f7ed f9b0 	bl	4a04 <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   176a4:	f241 1320 	movw	r3, #4384	; 0x1120
   176a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176ac:	681b      	ldr	r3, [r3, #0]
   176ae:	4618      	mov	r0, r3
   176b0:	2100      	movs	r1, #0
   176b2:	2200      	movs	r2, #0
   176b4:	2300      	movs	r3, #0
   176b6:	f7ec fe93 	bl	43e0 <xQueueGenericSend>
    vTaskStartScheduler();
   176ba:	f7ed fd21 	bl	5100 <vTaskStartScheduler>

    return 0;
   176be:	2300      	movs	r3, #0
}
   176c0:	4618      	mov	r0, r3
   176c2:	3708      	adds	r7, #8
   176c4:	46bd      	mov	sp, r7
   176c6:	bd80      	pop	{r7, pc}
   176c8:	2004cb98 	.word	0x2004cb98
   176cc:	2004cb9c 	.word	0x2004cb9c
   176d0:	2004cba0 	.word	0x2004cba0

000176d4 <myTraceCreate>:

void myTraceCreate      (){
   176d4:	b480      	push	{r7}
   176d6:	af00      	add	r7, sp, #0
}
   176d8:	46bd      	mov	sp, r7
   176da:	f85d 7b04 	ldr.w	r7, [sp], #4
   176de:	4770      	bx	lr

000176e0 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   176e0:	b480      	push	{r7}
   176e2:	af00      	add	r7, sp, #0
}
   176e4:	46bd      	mov	sp, r7
   176e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   176ea:	4770      	bx	lr

000176ec <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   176ec:	b480      	push	{r7}
   176ee:	af00      	add	r7, sp, #0
}
   176f0:	46bd      	mov	sp, r7
   176f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   176f6:	4770      	bx	lr

000176f8 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   176f8:	b580      	push	{r7, lr}
   176fa:	af00      	add	r7, sp, #0
    if(xIsExecutableEventArrive())
   176fc:	f7eb fa74 	bl	2be8 <xIsExecutableEventArrive>
   17700:	4603      	mov	r3, r0
   17702:	2b00      	cmp	r3, #0
   17704:	d00a      	beq.n	1771c <vApplicationTickHook+0x24>
       xSemaphoreGive( xBinarySemaphore[0] ); 
   17706:	f241 1320 	movw	r3, #4384	; 0x1120
   1770a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1770e:	681b      	ldr	r3, [r3, #0]
   17710:	4618      	mov	r0, r3
   17712:	2100      	movs	r1, #0
   17714:	2200      	movs	r2, #0
   17716:	2300      	movs	r3, #0
   17718:	f7ec fe62 	bl	43e0 <xQueueGenericSend>
}
   1771c:	bd80      	pop	{r7, pc}
   1771e:	bf00      	nop

00017720 <__aeabi_drsub>:
   17720:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   17724:	e002      	b.n	1772c <__adddf3>
   17726:	bf00      	nop

00017728 <__aeabi_dsub>:
   17728:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001772c <__adddf3>:
   1772c:	b530      	push	{r4, r5, lr}
   1772e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   17732:	ea4f 0543 	mov.w	r5, r3, lsl #1
   17736:	ea94 0f05 	teq	r4, r5
   1773a:	bf08      	it	eq
   1773c:	ea90 0f02 	teqeq	r0, r2
   17740:	bf1f      	itttt	ne
   17742:	ea54 0c00 	orrsne.w	ip, r4, r0
   17746:	ea55 0c02 	orrsne.w	ip, r5, r2
   1774a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1774e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17752:	f000 80e2 	beq.w	1791a <__adddf3+0x1ee>
   17756:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1775a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1775e:	bfb8      	it	lt
   17760:	426d      	neglt	r5, r5
   17762:	dd0c      	ble.n	1777e <__adddf3+0x52>
   17764:	442c      	add	r4, r5
   17766:	ea80 0202 	eor.w	r2, r0, r2
   1776a:	ea81 0303 	eor.w	r3, r1, r3
   1776e:	ea82 0000 	eor.w	r0, r2, r0
   17772:	ea83 0101 	eor.w	r1, r3, r1
   17776:	ea80 0202 	eor.w	r2, r0, r2
   1777a:	ea81 0303 	eor.w	r3, r1, r3
   1777e:	2d36      	cmp	r5, #54	; 0x36
   17780:	bf88      	it	hi
   17782:	bd30      	pophi	{r4, r5, pc}
   17784:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17788:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1778c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17790:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17794:	d002      	beq.n	1779c <__adddf3+0x70>
   17796:	4240      	negs	r0, r0
   17798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1779c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   177a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   177a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   177a8:	d002      	beq.n	177b0 <__adddf3+0x84>
   177aa:	4252      	negs	r2, r2
   177ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   177b0:	ea94 0f05 	teq	r4, r5
   177b4:	f000 80a7 	beq.w	17906 <__adddf3+0x1da>
   177b8:	f1a4 0401 	sub.w	r4, r4, #1
   177bc:	f1d5 0e20 	rsbs	lr, r5, #32
   177c0:	db0d      	blt.n	177de <__adddf3+0xb2>
   177c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   177c6:	fa22 f205 	lsr.w	r2, r2, r5
   177ca:	1880      	adds	r0, r0, r2
   177cc:	f141 0100 	adc.w	r1, r1, #0
   177d0:	fa03 f20e 	lsl.w	r2, r3, lr
   177d4:	1880      	adds	r0, r0, r2
   177d6:	fa43 f305 	asr.w	r3, r3, r5
   177da:	4159      	adcs	r1, r3
   177dc:	e00e      	b.n	177fc <__adddf3+0xd0>
   177de:	f1a5 0520 	sub.w	r5, r5, #32
   177e2:	f10e 0e20 	add.w	lr, lr, #32
   177e6:	2a01      	cmp	r2, #1
   177e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   177ec:	bf28      	it	cs
   177ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   177f2:	fa43 f305 	asr.w	r3, r3, r5
   177f6:	18c0      	adds	r0, r0, r3
   177f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   177fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17800:	d507      	bpl.n	17812 <__adddf3+0xe6>
   17802:	f04f 0e00 	mov.w	lr, #0
   17806:	f1dc 0c00 	rsbs	ip, ip, #0
   1780a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1780e:	eb6e 0101 	sbc.w	r1, lr, r1
   17812:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17816:	d31b      	bcc.n	17850 <__adddf3+0x124>
   17818:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1781c:	d30c      	bcc.n	17838 <__adddf3+0x10c>
   1781e:	0849      	lsrs	r1, r1, #1
   17820:	ea5f 0030 	movs.w	r0, r0, rrx
   17824:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17828:	f104 0401 	add.w	r4, r4, #1
   1782c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17830:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17834:	f080 809a 	bcs.w	1796c <__adddf3+0x240>
   17838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1783c:	bf08      	it	eq
   1783e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17842:	f150 0000 	adcs.w	r0, r0, #0
   17846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1784a:	ea41 0105 	orr.w	r1, r1, r5
   1784e:	bd30      	pop	{r4, r5, pc}
   17850:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17854:	4140      	adcs	r0, r0
   17856:	eb41 0101 	adc.w	r1, r1, r1
   1785a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1785e:	f1a4 0401 	sub.w	r4, r4, #1
   17862:	d1e9      	bne.n	17838 <__adddf3+0x10c>
   17864:	f091 0f00 	teq	r1, #0
   17868:	bf04      	itt	eq
   1786a:	4601      	moveq	r1, r0
   1786c:	2000      	moveq	r0, #0
   1786e:	fab1 f381 	clz	r3, r1
   17872:	bf08      	it	eq
   17874:	3320      	addeq	r3, #32
   17876:	f1a3 030b 	sub.w	r3, r3, #11
   1787a:	f1b3 0220 	subs.w	r2, r3, #32
   1787e:	da0c      	bge.n	1789a <__adddf3+0x16e>
   17880:	320c      	adds	r2, #12
   17882:	dd08      	ble.n	17896 <__adddf3+0x16a>
   17884:	f102 0c14 	add.w	ip, r2, #20
   17888:	f1c2 020c 	rsb	r2, r2, #12
   1788c:	fa01 f00c 	lsl.w	r0, r1, ip
   17890:	fa21 f102 	lsr.w	r1, r1, r2
   17894:	e00c      	b.n	178b0 <__adddf3+0x184>
   17896:	f102 0214 	add.w	r2, r2, #20
   1789a:	bfd8      	it	le
   1789c:	f1c2 0c20 	rsble	ip, r2, #32
   178a0:	fa01 f102 	lsl.w	r1, r1, r2
   178a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   178a8:	bfdc      	itt	le
   178aa:	ea41 010c 	orrle.w	r1, r1, ip
   178ae:	4090      	lslle	r0, r2
   178b0:	1ae4      	subs	r4, r4, r3
   178b2:	bfa2      	ittt	ge
   178b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   178b8:	4329      	orrge	r1, r5
   178ba:	bd30      	popge	{r4, r5, pc}
   178bc:	ea6f 0404 	mvn.w	r4, r4
   178c0:	3c1f      	subs	r4, #31
   178c2:	da1c      	bge.n	178fe <__adddf3+0x1d2>
   178c4:	340c      	adds	r4, #12
   178c6:	dc0e      	bgt.n	178e6 <__adddf3+0x1ba>
   178c8:	f104 0414 	add.w	r4, r4, #20
   178cc:	f1c4 0220 	rsb	r2, r4, #32
   178d0:	fa20 f004 	lsr.w	r0, r0, r4
   178d4:	fa01 f302 	lsl.w	r3, r1, r2
   178d8:	ea40 0003 	orr.w	r0, r0, r3
   178dc:	fa21 f304 	lsr.w	r3, r1, r4
   178e0:	ea45 0103 	orr.w	r1, r5, r3
   178e4:	bd30      	pop	{r4, r5, pc}
   178e6:	f1c4 040c 	rsb	r4, r4, #12
   178ea:	f1c4 0220 	rsb	r2, r4, #32
   178ee:	fa20 f002 	lsr.w	r0, r0, r2
   178f2:	fa01 f304 	lsl.w	r3, r1, r4
   178f6:	ea40 0003 	orr.w	r0, r0, r3
   178fa:	4629      	mov	r1, r5
   178fc:	bd30      	pop	{r4, r5, pc}
   178fe:	fa21 f004 	lsr.w	r0, r1, r4
   17902:	4629      	mov	r1, r5
   17904:	bd30      	pop	{r4, r5, pc}
   17906:	f094 0f00 	teq	r4, #0
   1790a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1790e:	bf06      	itte	eq
   17910:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17914:	3401      	addeq	r4, #1
   17916:	3d01      	subne	r5, #1
   17918:	e74e      	b.n	177b8 <__adddf3+0x8c>
   1791a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1791e:	bf18      	it	ne
   17920:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17924:	d029      	beq.n	1797a <__adddf3+0x24e>
   17926:	ea94 0f05 	teq	r4, r5
   1792a:	bf08      	it	eq
   1792c:	ea90 0f02 	teqeq	r0, r2
   17930:	d005      	beq.n	1793e <__adddf3+0x212>
   17932:	ea54 0c00 	orrs.w	ip, r4, r0
   17936:	bf04      	itt	eq
   17938:	4619      	moveq	r1, r3
   1793a:	4610      	moveq	r0, r2
   1793c:	bd30      	pop	{r4, r5, pc}
   1793e:	ea91 0f03 	teq	r1, r3
   17942:	bf1e      	ittt	ne
   17944:	2100      	movne	r1, #0
   17946:	2000      	movne	r0, #0
   17948:	bd30      	popne	{r4, r5, pc}
   1794a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1794e:	d105      	bne.n	1795c <__adddf3+0x230>
   17950:	0040      	lsls	r0, r0, #1
   17952:	4149      	adcs	r1, r1
   17954:	bf28      	it	cs
   17956:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1795a:	bd30      	pop	{r4, r5, pc}
   1795c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17960:	bf3c      	itt	cc
   17962:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17966:	bd30      	popcc	{r4, r5, pc}
   17968:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1796c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17970:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17974:	f04f 0000 	mov.w	r0, #0
   17978:	bd30      	pop	{r4, r5, pc}
   1797a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1797e:	bf1a      	itte	ne
   17980:	4619      	movne	r1, r3
   17982:	4610      	movne	r0, r2
   17984:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17988:	bf1c      	itt	ne
   1798a:	460b      	movne	r3, r1
   1798c:	4602      	movne	r2, r0
   1798e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17992:	bf06      	itte	eq
   17994:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17998:	ea91 0f03 	teqeq	r1, r3
   1799c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   179a0:	bd30      	pop	{r4, r5, pc}
   179a2:	bf00      	nop

000179a4 <__aeabi_ui2d>:
   179a4:	f090 0f00 	teq	r0, #0
   179a8:	bf04      	itt	eq
   179aa:	2100      	moveq	r1, #0
   179ac:	4770      	bxeq	lr
   179ae:	b530      	push	{r4, r5, lr}
   179b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   179b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   179b8:	f04f 0500 	mov.w	r5, #0
   179bc:	f04f 0100 	mov.w	r1, #0
   179c0:	e750      	b.n	17864 <__adddf3+0x138>
   179c2:	bf00      	nop

000179c4 <__aeabi_i2d>:
   179c4:	f090 0f00 	teq	r0, #0
   179c8:	bf04      	itt	eq
   179ca:	2100      	moveq	r1, #0
   179cc:	4770      	bxeq	lr
   179ce:	b530      	push	{r4, r5, lr}
   179d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   179d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   179d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   179dc:	bf48      	it	mi
   179de:	4240      	negmi	r0, r0
   179e0:	f04f 0100 	mov.w	r1, #0
   179e4:	e73e      	b.n	17864 <__adddf3+0x138>
   179e6:	bf00      	nop

000179e8 <__aeabi_f2d>:
   179e8:	0042      	lsls	r2, r0, #1
   179ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   179ee:	ea4f 0131 	mov.w	r1, r1, rrx
   179f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   179f6:	bf1f      	itttt	ne
   179f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   179fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17a00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17a04:	4770      	bxne	lr
   17a06:	f092 0f00 	teq	r2, #0
   17a0a:	bf14      	ite	ne
   17a0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17a10:	4770      	bxeq	lr
   17a12:	b530      	push	{r4, r5, lr}
   17a14:	f44f 7460 	mov.w	r4, #896	; 0x380
   17a18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17a20:	e720      	b.n	17864 <__adddf3+0x138>
   17a22:	bf00      	nop

00017a24 <__aeabi_ul2d>:
   17a24:	ea50 0201 	orrs.w	r2, r0, r1
   17a28:	bf08      	it	eq
   17a2a:	4770      	bxeq	lr
   17a2c:	b530      	push	{r4, r5, lr}
   17a2e:	f04f 0500 	mov.w	r5, #0
   17a32:	e00a      	b.n	17a4a <__aeabi_l2d+0x16>

00017a34 <__aeabi_l2d>:
   17a34:	ea50 0201 	orrs.w	r2, r0, r1
   17a38:	bf08      	it	eq
   17a3a:	4770      	bxeq	lr
   17a3c:	b530      	push	{r4, r5, lr}
   17a3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17a42:	d502      	bpl.n	17a4a <__aeabi_l2d+0x16>
   17a44:	4240      	negs	r0, r0
   17a46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17a4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17a4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17a52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17a56:	f43f aedc 	beq.w	17812 <__adddf3+0xe6>
   17a5a:	f04f 0203 	mov.w	r2, #3
   17a5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a62:	bf18      	it	ne
   17a64:	3203      	addne	r2, #3
   17a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a6a:	bf18      	it	ne
   17a6c:	3203      	addne	r2, #3
   17a6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17a72:	f1c2 0320 	rsb	r3, r2, #32
   17a76:	fa00 fc03 	lsl.w	ip, r0, r3
   17a7a:	fa20 f002 	lsr.w	r0, r0, r2
   17a7e:	fa01 fe03 	lsl.w	lr, r1, r3
   17a82:	ea40 000e 	orr.w	r0, r0, lr
   17a86:	fa21 f102 	lsr.w	r1, r1, r2
   17a8a:	4414      	add	r4, r2
   17a8c:	e6c1      	b.n	17812 <__adddf3+0xe6>
   17a8e:	bf00      	nop

00017a90 <__aeabi_dmul>:
   17a90:	b570      	push	{r4, r5, r6, lr}
   17a92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17a96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17a9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17a9e:	bf1d      	ittte	ne
   17aa0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17aa4:	ea94 0f0c 	teqne	r4, ip
   17aa8:	ea95 0f0c 	teqne	r5, ip
   17aac:	f000 f8de 	bleq	17c6c <__aeabi_dmul+0x1dc>
   17ab0:	442c      	add	r4, r5
   17ab2:	ea81 0603 	eor.w	r6, r1, r3
   17ab6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17aba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17abe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17ac2:	bf18      	it	ne
   17ac4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17ad0:	d038      	beq.n	17b44 <__aeabi_dmul+0xb4>
   17ad2:	fba0 ce02 	umull	ip, lr, r0, r2
   17ad6:	f04f 0500 	mov.w	r5, #0
   17ada:	fbe1 e502 	umlal	lr, r5, r1, r2
   17ade:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17ae2:	fbe0 e503 	umlal	lr, r5, r0, r3
   17ae6:	f04f 0600 	mov.w	r6, #0
   17aea:	fbe1 5603 	umlal	r5, r6, r1, r3
   17aee:	f09c 0f00 	teq	ip, #0
   17af2:	bf18      	it	ne
   17af4:	f04e 0e01 	orrne.w	lr, lr, #1
   17af8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17afc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17b00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17b04:	d204      	bcs.n	17b10 <__aeabi_dmul+0x80>
   17b06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17b0a:	416d      	adcs	r5, r5
   17b0c:	eb46 0606 	adc.w	r6, r6, r6
   17b10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17b14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17b18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17b1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17b20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17b24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17b28:	bf88      	it	hi
   17b2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17b2e:	d81e      	bhi.n	17b6e <__aeabi_dmul+0xde>
   17b30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17b34:	bf08      	it	eq
   17b36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17b3a:	f150 0000 	adcs.w	r0, r0, #0
   17b3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17b42:	bd70      	pop	{r4, r5, r6, pc}
   17b44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17b48:	ea46 0101 	orr.w	r1, r6, r1
   17b4c:	ea40 0002 	orr.w	r0, r0, r2
   17b50:	ea81 0103 	eor.w	r1, r1, r3
   17b54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17b58:	bfc2      	ittt	gt
   17b5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   17b5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17b62:	bd70      	popgt	{r4, r5, r6, pc}
   17b64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17b68:	f04f 0e00 	mov.w	lr, #0
   17b6c:	3c01      	subs	r4, #1
   17b6e:	f300 80ab 	bgt.w	17cc8 <__aeabi_dmul+0x238>
   17b72:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17b76:	bfde      	ittt	le
   17b78:	2000      	movle	r0, #0
   17b7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17b7e:	bd70      	pople	{r4, r5, r6, pc}
   17b80:	f1c4 0400 	rsb	r4, r4, #0
   17b84:	3c20      	subs	r4, #32
   17b86:	da35      	bge.n	17bf4 <__aeabi_dmul+0x164>
   17b88:	340c      	adds	r4, #12
   17b8a:	dc1b      	bgt.n	17bc4 <__aeabi_dmul+0x134>
   17b8c:	f104 0414 	add.w	r4, r4, #20
   17b90:	f1c4 0520 	rsb	r5, r4, #32
   17b94:	fa00 f305 	lsl.w	r3, r0, r5
   17b98:	fa20 f004 	lsr.w	r0, r0, r4
   17b9c:	fa01 f205 	lsl.w	r2, r1, r5
   17ba0:	ea40 0002 	orr.w	r0, r0, r2
   17ba4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17ba8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17bb0:	fa21 f604 	lsr.w	r6, r1, r4
   17bb4:	eb42 0106 	adc.w	r1, r2, r6
   17bb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17bbc:	bf08      	it	eq
   17bbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17bc2:	bd70      	pop	{r4, r5, r6, pc}
   17bc4:	f1c4 040c 	rsb	r4, r4, #12
   17bc8:	f1c4 0520 	rsb	r5, r4, #32
   17bcc:	fa00 f304 	lsl.w	r3, r0, r4
   17bd0:	fa20 f005 	lsr.w	r0, r0, r5
   17bd4:	fa01 f204 	lsl.w	r2, r1, r4
   17bd8:	ea40 0002 	orr.w	r0, r0, r2
   17bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17be0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17be4:	f141 0100 	adc.w	r1, r1, #0
   17be8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17bec:	bf08      	it	eq
   17bee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17bf2:	bd70      	pop	{r4, r5, r6, pc}
   17bf4:	f1c4 0520 	rsb	r5, r4, #32
   17bf8:	fa00 f205 	lsl.w	r2, r0, r5
   17bfc:	ea4e 0e02 	orr.w	lr, lr, r2
   17c00:	fa20 f304 	lsr.w	r3, r0, r4
   17c04:	fa01 f205 	lsl.w	r2, r1, r5
   17c08:	ea43 0302 	orr.w	r3, r3, r2
   17c0c:	fa21 f004 	lsr.w	r0, r1, r4
   17c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17c14:	fa21 f204 	lsr.w	r2, r1, r4
   17c18:	ea20 0002 	bic.w	r0, r0, r2
   17c1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17c20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17c24:	bf08      	it	eq
   17c26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17c2a:	bd70      	pop	{r4, r5, r6, pc}
   17c2c:	f094 0f00 	teq	r4, #0
   17c30:	d10f      	bne.n	17c52 <__aeabi_dmul+0x1c2>
   17c32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17c36:	0040      	lsls	r0, r0, #1
   17c38:	eb41 0101 	adc.w	r1, r1, r1
   17c3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17c40:	bf08      	it	eq
   17c42:	3c01      	subeq	r4, #1
   17c44:	d0f7      	beq.n	17c36 <__aeabi_dmul+0x1a6>
   17c46:	ea41 0106 	orr.w	r1, r1, r6
   17c4a:	f095 0f00 	teq	r5, #0
   17c4e:	bf18      	it	ne
   17c50:	4770      	bxne	lr
   17c52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17c56:	0052      	lsls	r2, r2, #1
   17c58:	eb43 0303 	adc.w	r3, r3, r3
   17c5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17c60:	bf08      	it	eq
   17c62:	3d01      	subeq	r5, #1
   17c64:	d0f7      	beq.n	17c56 <__aeabi_dmul+0x1c6>
   17c66:	ea43 0306 	orr.w	r3, r3, r6
   17c6a:	4770      	bx	lr
   17c6c:	ea94 0f0c 	teq	r4, ip
   17c70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17c74:	bf18      	it	ne
   17c76:	ea95 0f0c 	teqne	r5, ip
   17c7a:	d00c      	beq.n	17c96 <__aeabi_dmul+0x206>
   17c7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17c80:	bf18      	it	ne
   17c82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17c86:	d1d1      	bne.n	17c2c <__aeabi_dmul+0x19c>
   17c88:	ea81 0103 	eor.w	r1, r1, r3
   17c8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17c90:	f04f 0000 	mov.w	r0, #0
   17c94:	bd70      	pop	{r4, r5, r6, pc}
   17c96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17c9a:	bf06      	itte	eq
   17c9c:	4610      	moveq	r0, r2
   17c9e:	4619      	moveq	r1, r3
   17ca0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17ca4:	d019      	beq.n	17cda <__aeabi_dmul+0x24a>
   17ca6:	ea94 0f0c 	teq	r4, ip
   17caa:	d102      	bne.n	17cb2 <__aeabi_dmul+0x222>
   17cac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17cb0:	d113      	bne.n	17cda <__aeabi_dmul+0x24a>
   17cb2:	ea95 0f0c 	teq	r5, ip
   17cb6:	d105      	bne.n	17cc4 <__aeabi_dmul+0x234>
   17cb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17cbc:	bf1c      	itt	ne
   17cbe:	4610      	movne	r0, r2
   17cc0:	4619      	movne	r1, r3
   17cc2:	d10a      	bne.n	17cda <__aeabi_dmul+0x24a>
   17cc4:	ea81 0103 	eor.w	r1, r1, r3
   17cc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17ccc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17cd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17cd4:	f04f 0000 	mov.w	r0, #0
   17cd8:	bd70      	pop	{r4, r5, r6, pc}
   17cda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17cde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17ce2:	bd70      	pop	{r4, r5, r6, pc}

00017ce4 <__aeabi_ddiv>:
   17ce4:	b570      	push	{r4, r5, r6, lr}
   17ce6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17cea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17cee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17cf2:	bf1d      	ittte	ne
   17cf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17cf8:	ea94 0f0c 	teqne	r4, ip
   17cfc:	ea95 0f0c 	teqne	r5, ip
   17d00:	f000 f8a7 	bleq	17e52 <__aeabi_ddiv+0x16e>
   17d04:	eba4 0405 	sub.w	r4, r4, r5
   17d08:	ea81 0e03 	eor.w	lr, r1, r3
   17d0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17d10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17d14:	f000 8088 	beq.w	17e28 <__aeabi_ddiv+0x144>
   17d18:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17d1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17d20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17d24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17d28:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17d2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17d30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17d34:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17d38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17d3c:	429d      	cmp	r5, r3
   17d3e:	bf08      	it	eq
   17d40:	4296      	cmpeq	r6, r2
   17d42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17d46:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17d4a:	d202      	bcs.n	17d52 <__aeabi_ddiv+0x6e>
   17d4c:	085b      	lsrs	r3, r3, #1
   17d4e:	ea4f 0232 	mov.w	r2, r2, rrx
   17d52:	1ab6      	subs	r6, r6, r2
   17d54:	eb65 0503 	sbc.w	r5, r5, r3
   17d58:	085b      	lsrs	r3, r3, #1
   17d5a:	ea4f 0232 	mov.w	r2, r2, rrx
   17d5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17d62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17d66:	ebb6 0e02 	subs.w	lr, r6, r2
   17d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d6e:	bf22      	ittt	cs
   17d70:	1ab6      	subcs	r6, r6, r2
   17d72:	4675      	movcs	r5, lr
   17d74:	ea40 000c 	orrcs.w	r0, r0, ip
   17d78:	085b      	lsrs	r3, r3, #1
   17d7a:	ea4f 0232 	mov.w	r2, r2, rrx
   17d7e:	ebb6 0e02 	subs.w	lr, r6, r2
   17d82:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d86:	bf22      	ittt	cs
   17d88:	1ab6      	subcs	r6, r6, r2
   17d8a:	4675      	movcs	r5, lr
   17d8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17d90:	085b      	lsrs	r3, r3, #1
   17d92:	ea4f 0232 	mov.w	r2, r2, rrx
   17d96:	ebb6 0e02 	subs.w	lr, r6, r2
   17d9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d9e:	bf22      	ittt	cs
   17da0:	1ab6      	subcs	r6, r6, r2
   17da2:	4675      	movcs	r5, lr
   17da4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17da8:	085b      	lsrs	r3, r3, #1
   17daa:	ea4f 0232 	mov.w	r2, r2, rrx
   17dae:	ebb6 0e02 	subs.w	lr, r6, r2
   17db2:	eb75 0e03 	sbcs.w	lr, r5, r3
   17db6:	bf22      	ittt	cs
   17db8:	1ab6      	subcs	r6, r6, r2
   17dba:	4675      	movcs	r5, lr
   17dbc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17dc0:	ea55 0e06 	orrs.w	lr, r5, r6
   17dc4:	d018      	beq.n	17df8 <__aeabi_ddiv+0x114>
   17dc6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17dca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17dce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17dd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17dd6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17dda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17dde:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17de2:	d1c0      	bne.n	17d66 <__aeabi_ddiv+0x82>
   17de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17de8:	d10b      	bne.n	17e02 <__aeabi_ddiv+0x11e>
   17dea:	ea41 0100 	orr.w	r1, r1, r0
   17dee:	f04f 0000 	mov.w	r0, #0
   17df2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17df6:	e7b6      	b.n	17d66 <__aeabi_ddiv+0x82>
   17df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17dfc:	bf04      	itt	eq
   17dfe:	4301      	orreq	r1, r0
   17e00:	2000      	moveq	r0, #0
   17e02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17e06:	bf88      	it	hi
   17e08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17e0c:	f63f aeaf 	bhi.w	17b6e <__aeabi_dmul+0xde>
   17e10:	ebb5 0c03 	subs.w	ip, r5, r3
   17e14:	bf04      	itt	eq
   17e16:	ebb6 0c02 	subseq.w	ip, r6, r2
   17e1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17e1e:	f150 0000 	adcs.w	r0, r0, #0
   17e22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17e26:	bd70      	pop	{r4, r5, r6, pc}
   17e28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17e2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17e30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17e34:	bfc2      	ittt	gt
   17e36:	ebd4 050c 	rsbsgt	r5, r4, ip
   17e3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17e3e:	bd70      	popgt	{r4, r5, r6, pc}
   17e40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17e44:	f04f 0e00 	mov.w	lr, #0
   17e48:	3c01      	subs	r4, #1
   17e4a:	e690      	b.n	17b6e <__aeabi_dmul+0xde>
   17e4c:	ea45 0e06 	orr.w	lr, r5, r6
   17e50:	e68d      	b.n	17b6e <__aeabi_dmul+0xde>
   17e52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17e56:	ea94 0f0c 	teq	r4, ip
   17e5a:	bf08      	it	eq
   17e5c:	ea95 0f0c 	teqeq	r5, ip
   17e60:	f43f af3b 	beq.w	17cda <__aeabi_dmul+0x24a>
   17e64:	ea94 0f0c 	teq	r4, ip
   17e68:	d10a      	bne.n	17e80 <__aeabi_ddiv+0x19c>
   17e6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17e6e:	f47f af34 	bne.w	17cda <__aeabi_dmul+0x24a>
   17e72:	ea95 0f0c 	teq	r5, ip
   17e76:	f47f af25 	bne.w	17cc4 <__aeabi_dmul+0x234>
   17e7a:	4610      	mov	r0, r2
   17e7c:	4619      	mov	r1, r3
   17e7e:	e72c      	b.n	17cda <__aeabi_dmul+0x24a>
   17e80:	ea95 0f0c 	teq	r5, ip
   17e84:	d106      	bne.n	17e94 <__aeabi_ddiv+0x1b0>
   17e86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17e8a:	f43f aefd 	beq.w	17c88 <__aeabi_dmul+0x1f8>
   17e8e:	4610      	mov	r0, r2
   17e90:	4619      	mov	r1, r3
   17e92:	e722      	b.n	17cda <__aeabi_dmul+0x24a>
   17e94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e98:	bf18      	it	ne
   17e9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e9e:	f47f aec5 	bne.w	17c2c <__aeabi_dmul+0x19c>
   17ea2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17ea6:	f47f af0d 	bne.w	17cc4 <__aeabi_dmul+0x234>
   17eaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17eae:	f47f aeeb 	bne.w	17c88 <__aeabi_dmul+0x1f8>
   17eb2:	e712      	b.n	17cda <__aeabi_dmul+0x24a>

00017eb4 <__gedf2>:
   17eb4:	f04f 3cff 	mov.w	ip, #4294967295
   17eb8:	e006      	b.n	17ec8 <__cmpdf2+0x4>
   17eba:	bf00      	nop

00017ebc <__ledf2>:
   17ebc:	f04f 0c01 	mov.w	ip, #1
   17ec0:	e002      	b.n	17ec8 <__cmpdf2+0x4>
   17ec2:	bf00      	nop

00017ec4 <__cmpdf2>:
   17ec4:	f04f 0c01 	mov.w	ip, #1
   17ec8:	f84d cd04 	str.w	ip, [sp, #-4]!
   17ecc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17ed0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17ed4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17ed8:	bf18      	it	ne
   17eda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17ede:	d01b      	beq.n	17f18 <__cmpdf2+0x54>
   17ee0:	b001      	add	sp, #4
   17ee2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17ee6:	bf0c      	ite	eq
   17ee8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17eec:	ea91 0f03 	teqne	r1, r3
   17ef0:	bf02      	ittt	eq
   17ef2:	ea90 0f02 	teqeq	r0, r2
   17ef6:	2000      	moveq	r0, #0
   17ef8:	4770      	bxeq	lr
   17efa:	f110 0f00 	cmn.w	r0, #0
   17efe:	ea91 0f03 	teq	r1, r3
   17f02:	bf58      	it	pl
   17f04:	4299      	cmppl	r1, r3
   17f06:	bf08      	it	eq
   17f08:	4290      	cmpeq	r0, r2
   17f0a:	bf2c      	ite	cs
   17f0c:	17d8      	asrcs	r0, r3, #31
   17f0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17f12:	f040 0001 	orr.w	r0, r0, #1
   17f16:	4770      	bx	lr
   17f18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17f1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17f20:	d102      	bne.n	17f28 <__cmpdf2+0x64>
   17f22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17f26:	d107      	bne.n	17f38 <__cmpdf2+0x74>
   17f28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17f2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17f30:	d1d6      	bne.n	17ee0 <__cmpdf2+0x1c>
   17f32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17f36:	d0d3      	beq.n	17ee0 <__cmpdf2+0x1c>
   17f38:	f85d 0b04 	ldr.w	r0, [sp], #4
   17f3c:	4770      	bx	lr
   17f3e:	bf00      	nop

00017f40 <__aeabi_cdrcmple>:
   17f40:	4684      	mov	ip, r0
   17f42:	4610      	mov	r0, r2
   17f44:	4662      	mov	r2, ip
   17f46:	468c      	mov	ip, r1
   17f48:	4619      	mov	r1, r3
   17f4a:	4663      	mov	r3, ip
   17f4c:	e000      	b.n	17f50 <__aeabi_cdcmpeq>
   17f4e:	bf00      	nop

00017f50 <__aeabi_cdcmpeq>:
   17f50:	b501      	push	{r0, lr}
   17f52:	f7ff ffb7 	bl	17ec4 <__cmpdf2>
   17f56:	2800      	cmp	r0, #0
   17f58:	bf48      	it	mi
   17f5a:	f110 0f00 	cmnmi.w	r0, #0
   17f5e:	bd01      	pop	{r0, pc}

00017f60 <__aeabi_dcmpeq>:
   17f60:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f64:	f7ff fff4 	bl	17f50 <__aeabi_cdcmpeq>
   17f68:	bf0c      	ite	eq
   17f6a:	2001      	moveq	r0, #1
   17f6c:	2000      	movne	r0, #0
   17f6e:	f85d fb08 	ldr.w	pc, [sp], #8
   17f72:	bf00      	nop

00017f74 <__aeabi_dcmplt>:
   17f74:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f78:	f7ff ffea 	bl	17f50 <__aeabi_cdcmpeq>
   17f7c:	bf34      	ite	cc
   17f7e:	2001      	movcc	r0, #1
   17f80:	2000      	movcs	r0, #0
   17f82:	f85d fb08 	ldr.w	pc, [sp], #8
   17f86:	bf00      	nop

00017f88 <__aeabi_dcmple>:
   17f88:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f8c:	f7ff ffe0 	bl	17f50 <__aeabi_cdcmpeq>
   17f90:	bf94      	ite	ls
   17f92:	2001      	movls	r0, #1
   17f94:	2000      	movhi	r0, #0
   17f96:	f85d fb08 	ldr.w	pc, [sp], #8
   17f9a:	bf00      	nop

00017f9c <__aeabi_dcmpge>:
   17f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17fa0:	f7ff ffce 	bl	17f40 <__aeabi_cdrcmple>
   17fa4:	bf94      	ite	ls
   17fa6:	2001      	movls	r0, #1
   17fa8:	2000      	movhi	r0, #0
   17faa:	f85d fb08 	ldr.w	pc, [sp], #8
   17fae:	bf00      	nop

00017fb0 <__aeabi_dcmpgt>:
   17fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   17fb4:	f7ff ffc4 	bl	17f40 <__aeabi_cdrcmple>
   17fb8:	bf34      	ite	cc
   17fba:	2001      	movcc	r0, #1
   17fbc:	2000      	movcs	r0, #0
   17fbe:	f85d fb08 	ldr.w	pc, [sp], #8
   17fc2:	bf00      	nop

00017fc4 <__aeabi_d2iz>:
   17fc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17fc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17fcc:	d215      	bcs.n	17ffa <__aeabi_d2iz+0x36>
   17fce:	d511      	bpl.n	17ff4 <__aeabi_d2iz+0x30>
   17fd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17fd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17fd8:	d912      	bls.n	18000 <__aeabi_d2iz+0x3c>
   17fda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17fe2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17fe6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17fea:	fa23 f002 	lsr.w	r0, r3, r2
   17fee:	bf18      	it	ne
   17ff0:	4240      	negne	r0, r0
   17ff2:	4770      	bx	lr
   17ff4:	f04f 0000 	mov.w	r0, #0
   17ff8:	4770      	bx	lr
   17ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17ffe:	d105      	bne.n	1800c <__aeabi_d2iz+0x48>
   18000:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   18004:	bf08      	it	eq
   18006:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1800a:	4770      	bx	lr
   1800c:	f04f 0000 	mov.w	r0, #0
   18010:	4770      	bx	lr
   18012:	bf00      	nop

00018014 <__aeabi_d2uiz>:
   18014:	004a      	lsls	r2, r1, #1
   18016:	d211      	bcs.n	1803c <__aeabi_d2uiz+0x28>
   18018:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1801c:	d211      	bcs.n	18042 <__aeabi_d2uiz+0x2e>
   1801e:	d50d      	bpl.n	1803c <__aeabi_d2uiz+0x28>
   18020:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18024:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18028:	d40e      	bmi.n	18048 <__aeabi_d2uiz+0x34>
   1802a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1802e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18032:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18036:	fa23 f002 	lsr.w	r0, r3, r2
   1803a:	4770      	bx	lr
   1803c:	f04f 0000 	mov.w	r0, #0
   18040:	4770      	bx	lr
   18042:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18046:	d102      	bne.n	1804e <__aeabi_d2uiz+0x3a>
   18048:	f04f 30ff 	mov.w	r0, #4294967295
   1804c:	4770      	bx	lr
   1804e:	f04f 0000 	mov.w	r0, #0
   18052:	4770      	bx	lr

00018054 <__aeabi_d2f>:
   18054:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18058:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1805c:	bf24      	itt	cs
   1805e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18062:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18066:	d90d      	bls.n	18084 <__aeabi_d2f+0x30>
   18068:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1806c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18070:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18074:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18078:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1807c:	bf08      	it	eq
   1807e:	f020 0001 	biceq.w	r0, r0, #1
   18082:	4770      	bx	lr
   18084:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18088:	d121      	bne.n	180ce <__aeabi_d2f+0x7a>
   1808a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1808e:	bfbc      	itt	lt
   18090:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18094:	4770      	bxlt	lr
   18096:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1809a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1809e:	f1c2 0218 	rsb	r2, r2, #24
   180a2:	f1c2 0c20 	rsb	ip, r2, #32
   180a6:	fa10 f30c 	lsls.w	r3, r0, ip
   180aa:	fa20 f002 	lsr.w	r0, r0, r2
   180ae:	bf18      	it	ne
   180b0:	f040 0001 	orrne.w	r0, r0, #1
   180b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   180b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   180bc:	fa03 fc0c 	lsl.w	ip, r3, ip
   180c0:	ea40 000c 	orr.w	r0, r0, ip
   180c4:	fa23 f302 	lsr.w	r3, r3, r2
   180c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   180cc:	e7cc      	b.n	18068 <__aeabi_d2f+0x14>
   180ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   180d2:	d107      	bne.n	180e4 <__aeabi_d2f+0x90>
   180d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   180d8:	bf1e      	ittt	ne
   180da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   180de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   180e2:	4770      	bxne	lr
   180e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   180e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   180ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   180f0:	4770      	bx	lr
   180f2:	bf00      	nop

000180f4 <__aeabi_frsub>:
   180f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   180f8:	e002      	b.n	18100 <__addsf3>
   180fa:	bf00      	nop

000180fc <__aeabi_fsub>:
   180fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018100 <__addsf3>:
   18100:	0042      	lsls	r2, r0, #1
   18102:	bf1f      	itttt	ne
   18104:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18108:	ea92 0f03 	teqne	r2, r3
   1810c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18110:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18114:	d06a      	beq.n	181ec <__addsf3+0xec>
   18116:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1811a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1811e:	bfc1      	itttt	gt
   18120:	18d2      	addgt	r2, r2, r3
   18122:	4041      	eorgt	r1, r0
   18124:	4048      	eorgt	r0, r1
   18126:	4041      	eorgt	r1, r0
   18128:	bfb8      	it	lt
   1812a:	425b      	neglt	r3, r3
   1812c:	2b19      	cmp	r3, #25
   1812e:	bf88      	it	hi
   18130:	4770      	bxhi	lr
   18132:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18136:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1813a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1813e:	bf18      	it	ne
   18140:	4240      	negne	r0, r0
   18142:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18146:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1814a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1814e:	bf18      	it	ne
   18150:	4249      	negne	r1, r1
   18152:	ea92 0f03 	teq	r2, r3
   18156:	d03f      	beq.n	181d8 <__addsf3+0xd8>
   18158:	f1a2 0201 	sub.w	r2, r2, #1
   1815c:	fa41 fc03 	asr.w	ip, r1, r3
   18160:	eb10 000c 	adds.w	r0, r0, ip
   18164:	f1c3 0320 	rsb	r3, r3, #32
   18168:	fa01 f103 	lsl.w	r1, r1, r3
   1816c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18170:	d502      	bpl.n	18178 <__addsf3+0x78>
   18172:	4249      	negs	r1, r1
   18174:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18178:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1817c:	d313      	bcc.n	181a6 <__addsf3+0xa6>
   1817e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18182:	d306      	bcc.n	18192 <__addsf3+0x92>
   18184:	0840      	lsrs	r0, r0, #1
   18186:	ea4f 0131 	mov.w	r1, r1, rrx
   1818a:	f102 0201 	add.w	r2, r2, #1
   1818e:	2afe      	cmp	r2, #254	; 0xfe
   18190:	d251      	bcs.n	18236 <__addsf3+0x136>
   18192:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18196:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1819a:	bf08      	it	eq
   1819c:	f020 0001 	biceq.w	r0, r0, #1
   181a0:	ea40 0003 	orr.w	r0, r0, r3
   181a4:	4770      	bx	lr
   181a6:	0049      	lsls	r1, r1, #1
   181a8:	eb40 0000 	adc.w	r0, r0, r0
   181ac:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   181b0:	f1a2 0201 	sub.w	r2, r2, #1
   181b4:	d1ed      	bne.n	18192 <__addsf3+0x92>
   181b6:	fab0 fc80 	clz	ip, r0
   181ba:	f1ac 0c08 	sub.w	ip, ip, #8
   181be:	ebb2 020c 	subs.w	r2, r2, ip
   181c2:	fa00 f00c 	lsl.w	r0, r0, ip
   181c6:	bfaa      	itet	ge
   181c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   181cc:	4252      	neglt	r2, r2
   181ce:	4318      	orrge	r0, r3
   181d0:	bfbc      	itt	lt
   181d2:	40d0      	lsrlt	r0, r2
   181d4:	4318      	orrlt	r0, r3
   181d6:	4770      	bx	lr
   181d8:	f092 0f00 	teq	r2, #0
   181dc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   181e0:	bf06      	itte	eq
   181e2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   181e6:	3201      	addeq	r2, #1
   181e8:	3b01      	subne	r3, #1
   181ea:	e7b5      	b.n	18158 <__addsf3+0x58>
   181ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
   181f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   181f4:	bf18      	it	ne
   181f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   181fa:	d021      	beq.n	18240 <__addsf3+0x140>
   181fc:	ea92 0f03 	teq	r2, r3
   18200:	d004      	beq.n	1820c <__addsf3+0x10c>
   18202:	f092 0f00 	teq	r2, #0
   18206:	bf08      	it	eq
   18208:	4608      	moveq	r0, r1
   1820a:	4770      	bx	lr
   1820c:	ea90 0f01 	teq	r0, r1
   18210:	bf1c      	itt	ne
   18212:	2000      	movne	r0, #0
   18214:	4770      	bxne	lr
   18216:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1821a:	d104      	bne.n	18226 <__addsf3+0x126>
   1821c:	0040      	lsls	r0, r0, #1
   1821e:	bf28      	it	cs
   18220:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18224:	4770      	bx	lr
   18226:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1822a:	bf3c      	itt	cc
   1822c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18230:	4770      	bxcc	lr
   18232:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18236:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1823a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1823e:	4770      	bx	lr
   18240:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18244:	bf16      	itet	ne
   18246:	4608      	movne	r0, r1
   18248:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1824c:	4601      	movne	r1, r0
   1824e:	0242      	lsls	r2, r0, #9
   18250:	bf06      	itte	eq
   18252:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18256:	ea90 0f01 	teqeq	r0, r1
   1825a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1825e:	4770      	bx	lr

00018260 <__aeabi_ui2f>:
   18260:	f04f 0300 	mov.w	r3, #0
   18264:	e004      	b.n	18270 <__aeabi_i2f+0x8>
   18266:	bf00      	nop

00018268 <__aeabi_i2f>:
   18268:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1826c:	bf48      	it	mi
   1826e:	4240      	negmi	r0, r0
   18270:	ea5f 0c00 	movs.w	ip, r0
   18274:	bf08      	it	eq
   18276:	4770      	bxeq	lr
   18278:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1827c:	4601      	mov	r1, r0
   1827e:	f04f 0000 	mov.w	r0, #0
   18282:	e01c      	b.n	182be <__aeabi_l2f+0x2a>

00018284 <__aeabi_ul2f>:
   18284:	ea50 0201 	orrs.w	r2, r0, r1
   18288:	bf08      	it	eq
   1828a:	4770      	bxeq	lr
   1828c:	f04f 0300 	mov.w	r3, #0
   18290:	e00a      	b.n	182a8 <__aeabi_l2f+0x14>
   18292:	bf00      	nop

00018294 <__aeabi_l2f>:
   18294:	ea50 0201 	orrs.w	r2, r0, r1
   18298:	bf08      	it	eq
   1829a:	4770      	bxeq	lr
   1829c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   182a0:	d502      	bpl.n	182a8 <__aeabi_l2f+0x14>
   182a2:	4240      	negs	r0, r0
   182a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   182a8:	ea5f 0c01 	movs.w	ip, r1
   182ac:	bf02      	ittt	eq
   182ae:	4684      	moveq	ip, r0
   182b0:	4601      	moveq	r1, r0
   182b2:	2000      	moveq	r0, #0
   182b4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   182b8:	bf08      	it	eq
   182ba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   182be:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   182c2:	fabc f28c 	clz	r2, ip
   182c6:	3a08      	subs	r2, #8
   182c8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   182cc:	db10      	blt.n	182f0 <__aeabi_l2f+0x5c>
   182ce:	fa01 fc02 	lsl.w	ip, r1, r2
   182d2:	4463      	add	r3, ip
   182d4:	fa00 fc02 	lsl.w	ip, r0, r2
   182d8:	f1c2 0220 	rsb	r2, r2, #32
   182dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   182e0:	fa20 f202 	lsr.w	r2, r0, r2
   182e4:	eb43 0002 	adc.w	r0, r3, r2
   182e8:	bf08      	it	eq
   182ea:	f020 0001 	biceq.w	r0, r0, #1
   182ee:	4770      	bx	lr
   182f0:	f102 0220 	add.w	r2, r2, #32
   182f4:	fa01 fc02 	lsl.w	ip, r1, r2
   182f8:	f1c2 0220 	rsb	r2, r2, #32
   182fc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18300:	fa21 f202 	lsr.w	r2, r1, r2
   18304:	eb43 0002 	adc.w	r0, r3, r2
   18308:	bf08      	it	eq
   1830a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1830e:	4770      	bx	lr

00018310 <__aeabi_fmul>:
   18310:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18314:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18318:	bf1e      	ittt	ne
   1831a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1831e:	ea92 0f0c 	teqne	r2, ip
   18322:	ea93 0f0c 	teqne	r3, ip
   18326:	d06f      	beq.n	18408 <__aeabi_fmul+0xf8>
   18328:	441a      	add	r2, r3
   1832a:	ea80 0c01 	eor.w	ip, r0, r1
   1832e:	0240      	lsls	r0, r0, #9
   18330:	bf18      	it	ne
   18332:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18336:	d01e      	beq.n	18376 <__aeabi_fmul+0x66>
   18338:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1833c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18340:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18344:	fba0 3101 	umull	r3, r1, r0, r1
   18348:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1834c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18350:	bf3e      	ittt	cc
   18352:	0049      	lslcc	r1, r1, #1
   18354:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18358:	005b      	lslcc	r3, r3, #1
   1835a:	ea40 0001 	orr.w	r0, r0, r1
   1835e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   18362:	2afd      	cmp	r2, #253	; 0xfd
   18364:	d81d      	bhi.n	183a2 <__aeabi_fmul+0x92>
   18366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1836a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1836e:	bf08      	it	eq
   18370:	f020 0001 	biceq.w	r0, r0, #1
   18374:	4770      	bx	lr
   18376:	f090 0f00 	teq	r0, #0
   1837a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1837e:	bf08      	it	eq
   18380:	0249      	lsleq	r1, r1, #9
   18382:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18386:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1838a:	3a7f      	subs	r2, #127	; 0x7f
   1838c:	bfc2      	ittt	gt
   1838e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18392:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18396:	4770      	bxgt	lr
   18398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1839c:	f04f 0300 	mov.w	r3, #0
   183a0:	3a01      	subs	r2, #1
   183a2:	dc5d      	bgt.n	18460 <__aeabi_fmul+0x150>
   183a4:	f112 0f19 	cmn.w	r2, #25
   183a8:	bfdc      	itt	le
   183aa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   183ae:	4770      	bxle	lr
   183b0:	f1c2 0200 	rsb	r2, r2, #0
   183b4:	0041      	lsls	r1, r0, #1
   183b6:	fa21 f102 	lsr.w	r1, r1, r2
   183ba:	f1c2 0220 	rsb	r2, r2, #32
   183be:	fa00 fc02 	lsl.w	ip, r0, r2
   183c2:	ea5f 0031 	movs.w	r0, r1, rrx
   183c6:	f140 0000 	adc.w	r0, r0, #0
   183ca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   183ce:	bf08      	it	eq
   183d0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   183d4:	4770      	bx	lr
   183d6:	f092 0f00 	teq	r2, #0
   183da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   183de:	bf02      	ittt	eq
   183e0:	0040      	lsleq	r0, r0, #1
   183e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   183e6:	3a01      	subeq	r2, #1
   183e8:	d0f9      	beq.n	183de <__aeabi_fmul+0xce>
   183ea:	ea40 000c 	orr.w	r0, r0, ip
   183ee:	f093 0f00 	teq	r3, #0
   183f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   183f6:	bf02      	ittt	eq
   183f8:	0049      	lsleq	r1, r1, #1
   183fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   183fe:	3b01      	subeq	r3, #1
   18400:	d0f9      	beq.n	183f6 <__aeabi_fmul+0xe6>
   18402:	ea41 010c 	orr.w	r1, r1, ip
   18406:	e78f      	b.n	18328 <__aeabi_fmul+0x18>
   18408:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1840c:	ea92 0f0c 	teq	r2, ip
   18410:	bf18      	it	ne
   18412:	ea93 0f0c 	teqne	r3, ip
   18416:	d00a      	beq.n	1842e <__aeabi_fmul+0x11e>
   18418:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1841c:	bf18      	it	ne
   1841e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18422:	d1d8      	bne.n	183d6 <__aeabi_fmul+0xc6>
   18424:	ea80 0001 	eor.w	r0, r0, r1
   18428:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1842c:	4770      	bx	lr
   1842e:	f090 0f00 	teq	r0, #0
   18432:	bf17      	itett	ne
   18434:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18438:	4608      	moveq	r0, r1
   1843a:	f091 0f00 	teqne	r1, #0
   1843e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   18442:	d014      	beq.n	1846e <__aeabi_fmul+0x15e>
   18444:	ea92 0f0c 	teq	r2, ip
   18448:	d101      	bne.n	1844e <__aeabi_fmul+0x13e>
   1844a:	0242      	lsls	r2, r0, #9
   1844c:	d10f      	bne.n	1846e <__aeabi_fmul+0x15e>
   1844e:	ea93 0f0c 	teq	r3, ip
   18452:	d103      	bne.n	1845c <__aeabi_fmul+0x14c>
   18454:	024b      	lsls	r3, r1, #9
   18456:	bf18      	it	ne
   18458:	4608      	movne	r0, r1
   1845a:	d108      	bne.n	1846e <__aeabi_fmul+0x15e>
   1845c:	ea80 0001 	eor.w	r0, r0, r1
   18460:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18464:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18468:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1846c:	4770      	bx	lr
   1846e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18472:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   18476:	4770      	bx	lr

00018478 <__aeabi_fdiv>:
   18478:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1847c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18480:	bf1e      	ittt	ne
   18482:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18486:	ea92 0f0c 	teqne	r2, ip
   1848a:	ea93 0f0c 	teqne	r3, ip
   1848e:	d069      	beq.n	18564 <__aeabi_fdiv+0xec>
   18490:	eba2 0203 	sub.w	r2, r2, r3
   18494:	ea80 0c01 	eor.w	ip, r0, r1
   18498:	0249      	lsls	r1, r1, #9
   1849a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1849e:	d037      	beq.n	18510 <__aeabi_fdiv+0x98>
   184a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   184a4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   184a8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   184ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   184b0:	428b      	cmp	r3, r1
   184b2:	bf38      	it	cc
   184b4:	005b      	lslcc	r3, r3, #1
   184b6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   184ba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   184be:	428b      	cmp	r3, r1
   184c0:	bf24      	itt	cs
   184c2:	1a5b      	subcs	r3, r3, r1
   184c4:	ea40 000c 	orrcs.w	r0, r0, ip
   184c8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   184cc:	bf24      	itt	cs
   184ce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   184d2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   184d6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   184da:	bf24      	itt	cs
   184dc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   184e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   184e4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   184e8:	bf24      	itt	cs
   184ea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   184ee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   184f2:	011b      	lsls	r3, r3, #4
   184f4:	bf18      	it	ne
   184f6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   184fa:	d1e0      	bne.n	184be <__aeabi_fdiv+0x46>
   184fc:	2afd      	cmp	r2, #253	; 0xfd
   184fe:	f63f af50 	bhi.w	183a2 <__aeabi_fmul+0x92>
   18502:	428b      	cmp	r3, r1
   18504:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18508:	bf08      	it	eq
   1850a:	f020 0001 	biceq.w	r0, r0, #1
   1850e:	4770      	bx	lr
   18510:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18514:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18518:	327f      	adds	r2, #127	; 0x7f
   1851a:	bfc2      	ittt	gt
   1851c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18520:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18524:	4770      	bxgt	lr
   18526:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1852a:	f04f 0300 	mov.w	r3, #0
   1852e:	3a01      	subs	r2, #1
   18530:	e737      	b.n	183a2 <__aeabi_fmul+0x92>
   18532:	f092 0f00 	teq	r2, #0
   18536:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1853a:	bf02      	ittt	eq
   1853c:	0040      	lsleq	r0, r0, #1
   1853e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18542:	3a01      	subeq	r2, #1
   18544:	d0f9      	beq.n	1853a <__aeabi_fdiv+0xc2>
   18546:	ea40 000c 	orr.w	r0, r0, ip
   1854a:	f093 0f00 	teq	r3, #0
   1854e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18552:	bf02      	ittt	eq
   18554:	0049      	lsleq	r1, r1, #1
   18556:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1855a:	3b01      	subeq	r3, #1
   1855c:	d0f9      	beq.n	18552 <__aeabi_fdiv+0xda>
   1855e:	ea41 010c 	orr.w	r1, r1, ip
   18562:	e795      	b.n	18490 <__aeabi_fdiv+0x18>
   18564:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18568:	ea92 0f0c 	teq	r2, ip
   1856c:	d108      	bne.n	18580 <__aeabi_fdiv+0x108>
   1856e:	0242      	lsls	r2, r0, #9
   18570:	f47f af7d 	bne.w	1846e <__aeabi_fmul+0x15e>
   18574:	ea93 0f0c 	teq	r3, ip
   18578:	f47f af70 	bne.w	1845c <__aeabi_fmul+0x14c>
   1857c:	4608      	mov	r0, r1
   1857e:	e776      	b.n	1846e <__aeabi_fmul+0x15e>
   18580:	ea93 0f0c 	teq	r3, ip
   18584:	d104      	bne.n	18590 <__aeabi_fdiv+0x118>
   18586:	024b      	lsls	r3, r1, #9
   18588:	f43f af4c 	beq.w	18424 <__aeabi_fmul+0x114>
   1858c:	4608      	mov	r0, r1
   1858e:	e76e      	b.n	1846e <__aeabi_fmul+0x15e>
   18590:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18594:	bf18      	it	ne
   18596:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1859a:	d1ca      	bne.n	18532 <__aeabi_fdiv+0xba>
   1859c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   185a0:	f47f af5c 	bne.w	1845c <__aeabi_fmul+0x14c>
   185a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   185a8:	f47f af3c 	bne.w	18424 <__aeabi_fmul+0x114>
   185ac:	e75f      	b.n	1846e <__aeabi_fmul+0x15e>
   185ae:	bf00      	nop

000185b0 <__gesf2>:
   185b0:	f04f 3cff 	mov.w	ip, #4294967295
   185b4:	e006      	b.n	185c4 <__cmpsf2+0x4>
   185b6:	bf00      	nop

000185b8 <__lesf2>:
   185b8:	f04f 0c01 	mov.w	ip, #1
   185bc:	e002      	b.n	185c4 <__cmpsf2+0x4>
   185be:	bf00      	nop

000185c0 <__cmpsf2>:
   185c0:	f04f 0c01 	mov.w	ip, #1
   185c4:	f84d cd04 	str.w	ip, [sp, #-4]!
   185c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   185cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   185d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   185d4:	bf18      	it	ne
   185d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   185da:	d011      	beq.n	18600 <__cmpsf2+0x40>
   185dc:	b001      	add	sp, #4
   185de:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   185e2:	bf18      	it	ne
   185e4:	ea90 0f01 	teqne	r0, r1
   185e8:	bf58      	it	pl
   185ea:	ebb2 0003 	subspl.w	r0, r2, r3
   185ee:	bf88      	it	hi
   185f0:	17c8      	asrhi	r0, r1, #31
   185f2:	bf38      	it	cc
   185f4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   185f8:	bf18      	it	ne
   185fa:	f040 0001 	orrne.w	r0, r0, #1
   185fe:	4770      	bx	lr
   18600:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18604:	d102      	bne.n	1860c <__cmpsf2+0x4c>
   18606:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1860a:	d105      	bne.n	18618 <__cmpsf2+0x58>
   1860c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18610:	d1e4      	bne.n	185dc <__cmpsf2+0x1c>
   18612:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   18616:	d0e1      	beq.n	185dc <__cmpsf2+0x1c>
   18618:	f85d 0b04 	ldr.w	r0, [sp], #4
   1861c:	4770      	bx	lr
   1861e:	bf00      	nop

00018620 <__aeabi_cfrcmple>:
   18620:	4684      	mov	ip, r0
   18622:	4608      	mov	r0, r1
   18624:	4661      	mov	r1, ip
   18626:	e7ff      	b.n	18628 <__aeabi_cfcmpeq>

00018628 <__aeabi_cfcmpeq>:
   18628:	b50f      	push	{r0, r1, r2, r3, lr}
   1862a:	f7ff ffc9 	bl	185c0 <__cmpsf2>
   1862e:	2800      	cmp	r0, #0
   18630:	bf48      	it	mi
   18632:	f110 0f00 	cmnmi.w	r0, #0
   18636:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018638 <__aeabi_fcmpeq>:
   18638:	f84d ed08 	str.w	lr, [sp, #-8]!
   1863c:	f7ff fff4 	bl	18628 <__aeabi_cfcmpeq>
   18640:	bf0c      	ite	eq
   18642:	2001      	moveq	r0, #1
   18644:	2000      	movne	r0, #0
   18646:	f85d fb08 	ldr.w	pc, [sp], #8
   1864a:	bf00      	nop

0001864c <__aeabi_fcmplt>:
   1864c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18650:	f7ff ffea 	bl	18628 <__aeabi_cfcmpeq>
   18654:	bf34      	ite	cc
   18656:	2001      	movcc	r0, #1
   18658:	2000      	movcs	r0, #0
   1865a:	f85d fb08 	ldr.w	pc, [sp], #8
   1865e:	bf00      	nop

00018660 <__aeabi_fcmple>:
   18660:	f84d ed08 	str.w	lr, [sp, #-8]!
   18664:	f7ff ffe0 	bl	18628 <__aeabi_cfcmpeq>
   18668:	bf94      	ite	ls
   1866a:	2001      	movls	r0, #1
   1866c:	2000      	movhi	r0, #0
   1866e:	f85d fb08 	ldr.w	pc, [sp], #8
   18672:	bf00      	nop

00018674 <__aeabi_fcmpge>:
   18674:	f84d ed08 	str.w	lr, [sp, #-8]!
   18678:	f7ff ffd2 	bl	18620 <__aeabi_cfrcmple>
   1867c:	bf94      	ite	ls
   1867e:	2001      	movls	r0, #1
   18680:	2000      	movhi	r0, #0
   18682:	f85d fb08 	ldr.w	pc, [sp], #8
   18686:	bf00      	nop

00018688 <__aeabi_fcmpgt>:
   18688:	f84d ed08 	str.w	lr, [sp, #-8]!
   1868c:	f7ff ffc8 	bl	18620 <__aeabi_cfrcmple>
   18690:	bf34      	ite	cc
   18692:	2001      	movcc	r0, #1
   18694:	2000      	movcs	r0, #0
   18696:	f85d fb08 	ldr.w	pc, [sp], #8
   1869a:	bf00      	nop

0001869c <__aeabi_f2iz>:
   1869c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   186a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   186a4:	d30f      	bcc.n	186c6 <__aeabi_f2iz+0x2a>
   186a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   186aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   186ae:	d90d      	bls.n	186cc <__aeabi_f2iz+0x30>
   186b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   186b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   186b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   186bc:	fa23 f002 	lsr.w	r0, r3, r2
   186c0:	bf18      	it	ne
   186c2:	4240      	negne	r0, r0
   186c4:	4770      	bx	lr
   186c6:	f04f 0000 	mov.w	r0, #0
   186ca:	4770      	bx	lr
   186cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   186d0:	d101      	bne.n	186d6 <__aeabi_f2iz+0x3a>
   186d2:	0242      	lsls	r2, r0, #9
   186d4:	d105      	bne.n	186e2 <__aeabi_f2iz+0x46>
   186d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   186da:	bf08      	it	eq
   186dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   186e0:	4770      	bx	lr
   186e2:	f04f 0000 	mov.w	r0, #0
   186e6:	4770      	bx	lr

000186e8 <memcpy>:
   186e8:	2a0f      	cmp	r2, #15
   186ea:	b4f0      	push	{r4, r5, r6, r7}
   186ec:	d945      	bls.n	1877a <memcpy+0x92>
   186ee:	ea40 0301 	orr.w	r3, r0, r1
   186f2:	079b      	lsls	r3, r3, #30
   186f4:	d145      	bne.n	18782 <memcpy+0x9a>
   186f6:	f1a2 0710 	sub.w	r7, r2, #16
   186fa:	460c      	mov	r4, r1
   186fc:	4603      	mov	r3, r0
   186fe:	093f      	lsrs	r7, r7, #4
   18700:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   18704:	3610      	adds	r6, #16
   18706:	6825      	ldr	r5, [r4, #0]
   18708:	3310      	adds	r3, #16
   1870a:	3410      	adds	r4, #16
   1870c:	f843 5c10 	str.w	r5, [r3, #-16]
   18710:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   18714:	f843 5c0c 	str.w	r5, [r3, #-12]
   18718:	f854 5c08 	ldr.w	r5, [r4, #-8]
   1871c:	f843 5c08 	str.w	r5, [r3, #-8]
   18720:	f854 5c04 	ldr.w	r5, [r4, #-4]
   18724:	f843 5c04 	str.w	r5, [r3, #-4]
   18728:	42b3      	cmp	r3, r6
   1872a:	d1ec      	bne.n	18706 <memcpy+0x1e>
   1872c:	1c7b      	adds	r3, r7, #1
   1872e:	f002 0c0f 	and.w	ip, r2, #15
   18732:	f1bc 0f03 	cmp.w	ip, #3
   18736:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1873a:	4419      	add	r1, r3
   1873c:	4403      	add	r3, r0
   1873e:	d922      	bls.n	18786 <memcpy+0x9e>
   18740:	460e      	mov	r6, r1
   18742:	461d      	mov	r5, r3
   18744:	4664      	mov	r4, ip
   18746:	f856 7b04 	ldr.w	r7, [r6], #4
   1874a:	3c04      	subs	r4, #4
   1874c:	2c03      	cmp	r4, #3
   1874e:	f845 7b04 	str.w	r7, [r5], #4
   18752:	d8f8      	bhi.n	18746 <memcpy+0x5e>
   18754:	f1ac 0404 	sub.w	r4, ip, #4
   18758:	f002 0203 	and.w	r2, r2, #3
   1875c:	f024 0403 	bic.w	r4, r4, #3
   18760:	3404      	adds	r4, #4
   18762:	4423      	add	r3, r4
   18764:	4421      	add	r1, r4
   18766:	b132      	cbz	r2, 18776 <memcpy+0x8e>
   18768:	440a      	add	r2, r1
   1876a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1876e:	4291      	cmp	r1, r2
   18770:	f803 4b01 	strb.w	r4, [r3], #1
   18774:	d1f9      	bne.n	1876a <memcpy+0x82>
   18776:	bcf0      	pop	{r4, r5, r6, r7}
   18778:	4770      	bx	lr
   1877a:	4603      	mov	r3, r0
   1877c:	2a00      	cmp	r2, #0
   1877e:	d1f3      	bne.n	18768 <memcpy+0x80>
   18780:	e7f9      	b.n	18776 <memcpy+0x8e>
   18782:	4603      	mov	r3, r0
   18784:	e7f0      	b.n	18768 <memcpy+0x80>
   18786:	4662      	mov	r2, ip
   18788:	2a00      	cmp	r2, #0
   1878a:	d1ed      	bne.n	18768 <memcpy+0x80>
   1878c:	e7f3      	b.n	18776 <memcpy+0x8e>
   1878e:	bf00      	nop

00018790 <memset>:
   18790:	0783      	lsls	r3, r0, #30
   18792:	b4f0      	push	{r4, r5, r6, r7}
   18794:	d048      	beq.n	18828 <memset+0x98>
   18796:	1e54      	subs	r4, r2, #1
   18798:	2a00      	cmp	r2, #0
   1879a:	d043      	beq.n	18824 <memset+0x94>
   1879c:	b2cd      	uxtb	r5, r1
   1879e:	4603      	mov	r3, r0
   187a0:	e002      	b.n	187a8 <memset+0x18>
   187a2:	2c00      	cmp	r4, #0
   187a4:	d03e      	beq.n	18824 <memset+0x94>
   187a6:	4614      	mov	r4, r2
   187a8:	f803 5b01 	strb.w	r5, [r3], #1
   187ac:	f013 0f03 	tst.w	r3, #3
   187b0:	f104 32ff 	add.w	r2, r4, #4294967295
   187b4:	d1f5      	bne.n	187a2 <memset+0x12>
   187b6:	2c03      	cmp	r4, #3
   187b8:	d92d      	bls.n	18816 <memset+0x86>
   187ba:	b2cd      	uxtb	r5, r1
   187bc:	2c0f      	cmp	r4, #15
   187be:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   187c2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   187c6:	d918      	bls.n	187fa <memset+0x6a>
   187c8:	f1a4 0710 	sub.w	r7, r4, #16
   187cc:	f103 0610 	add.w	r6, r3, #16
   187d0:	461a      	mov	r2, r3
   187d2:	093f      	lsrs	r7, r7, #4
   187d4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   187d8:	6015      	str	r5, [r2, #0]
   187da:	3210      	adds	r2, #16
   187dc:	f842 5c0c 	str.w	r5, [r2, #-12]
   187e0:	f842 5c08 	str.w	r5, [r2, #-8]
   187e4:	f842 5c04 	str.w	r5, [r2, #-4]
   187e8:	42b2      	cmp	r2, r6
   187ea:	d1f5      	bne.n	187d8 <memset+0x48>
   187ec:	f004 040f 	and.w	r4, r4, #15
   187f0:	3701      	adds	r7, #1
   187f2:	2c03      	cmp	r4, #3
   187f4:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   187f8:	d90d      	bls.n	18816 <memset+0x86>
   187fa:	461e      	mov	r6, r3
   187fc:	4622      	mov	r2, r4
   187fe:	3a04      	subs	r2, #4
   18800:	f846 5b04 	str.w	r5, [r6], #4
   18804:	2a03      	cmp	r2, #3
   18806:	d8fa      	bhi.n	187fe <memset+0x6e>
   18808:	1f22      	subs	r2, r4, #4
   1880a:	f004 0403 	and.w	r4, r4, #3
   1880e:	f022 0203 	bic.w	r2, r2, #3
   18812:	3204      	adds	r2, #4
   18814:	4413      	add	r3, r2
   18816:	b12c      	cbz	r4, 18824 <memset+0x94>
   18818:	b2c9      	uxtb	r1, r1
   1881a:	441c      	add	r4, r3
   1881c:	f803 1b01 	strb.w	r1, [r3], #1
   18820:	42a3      	cmp	r3, r4
   18822:	d1fb      	bne.n	1881c <memset+0x8c>
   18824:	bcf0      	pop	{r4, r5, r6, r7}
   18826:	4770      	bx	lr
   18828:	4614      	mov	r4, r2
   1882a:	4603      	mov	r3, r0
   1882c:	e7c3      	b.n	187b6 <memset+0x26>
   1882e:	bf00      	nop

00018830 <strncpy>:
   18830:	ea40 0301 	orr.w	r3, r0, r1
   18834:	079b      	lsls	r3, r3, #30
   18836:	b470      	push	{r4, r5, r6}
   18838:	d12b      	bne.n	18892 <strncpy+0x62>
   1883a:	2a03      	cmp	r2, #3
   1883c:	bf84      	itt	hi
   1883e:	460b      	movhi	r3, r1
   18840:	4605      	movhi	r5, r0
   18842:	d926      	bls.n	18892 <strncpy+0x62>
   18844:	4619      	mov	r1, r3
   18846:	f853 4b04 	ldr.w	r4, [r3], #4
   1884a:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1884e:	ea26 0604 	bic.w	r6, r6, r4
   18852:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18856:	d105      	bne.n	18864 <strncpy+0x34>
   18858:	3a04      	subs	r2, #4
   1885a:	f845 4b04 	str.w	r4, [r5], #4
   1885e:	2a03      	cmp	r2, #3
   18860:	4619      	mov	r1, r3
   18862:	d8ef      	bhi.n	18844 <strncpy+0x14>
   18864:	b19a      	cbz	r2, 1888e <strncpy+0x5e>
   18866:	780c      	ldrb	r4, [r1, #0]
   18868:	3a01      	subs	r2, #1
   1886a:	1c6b      	adds	r3, r5, #1
   1886c:	702c      	strb	r4, [r5, #0]
   1886e:	b13c      	cbz	r4, 18880 <strncpy+0x50>
   18870:	b16a      	cbz	r2, 1888e <strncpy+0x5e>
   18872:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18876:	3a01      	subs	r2, #1
   18878:	f803 4b01 	strb.w	r4, [r3], #1
   1887c:	2c00      	cmp	r4, #0
   1887e:	d1f7      	bne.n	18870 <strncpy+0x40>
   18880:	b12a      	cbz	r2, 1888e <strncpy+0x5e>
   18882:	441a      	add	r2, r3
   18884:	2100      	movs	r1, #0
   18886:	f803 1b01 	strb.w	r1, [r3], #1
   1888a:	4293      	cmp	r3, r2
   1888c:	d1fb      	bne.n	18886 <strncpy+0x56>
   1888e:	bc70      	pop	{r4, r5, r6}
   18890:	4770      	bx	lr
   18892:	4605      	mov	r5, r0
   18894:	e7e6      	b.n	18864 <strncpy+0x34>
   18896:	bf00      	nop

00018898 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18898:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   1889a:	e003      	b.n	188a4 <LoopCopyDataInit>

0001889c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   1889c:	4b0a      	ldr	r3, [pc, #40]	; (188c8 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   1889e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   188a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   188a2:	3104      	adds	r1, #4

000188a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   188a4:	4809      	ldr	r0, [pc, #36]	; (188cc <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   188a6:	4b0a      	ldr	r3, [pc, #40]	; (188d0 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   188a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   188aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   188ac:	d3f6      	bcc.n	1889c <CopyDataInit>
	ldr	r2, =_sbss
   188ae:	4a09      	ldr	r2, [pc, #36]	; (188d4 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   188b0:	e002      	b.n	188b8 <LoopFillZerobss>

000188b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   188b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
   188b4:	f842 3b04 	str.w	r3, [r2], #4

000188b8 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   188b8:	4b07      	ldr	r3, [pc, #28]	; (188d8 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   188ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
   188bc:	d3f9      	bcc.n	188b2 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   188be:	f7e7 fd3d 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   188c2:	f7fe fe87 	bl	175d4 <main>
	bx	lr    
   188c6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   188c8:	000189c8 	.word	0x000189c8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   188cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   188d0:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   188d4:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   188d8:	2004cba4 	.word	0x2004cba4

000188dc <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   188dc:	e7fe      	b.n	188dc <ADC1_2_IRQHandler>
   188de:	0000      	movs	r0, r0
   188e0:	75746341 	.word	0x75746341
   188e4:	726f7461 	.word	0x726f7461
   188e8:	00000d0a 	.word	0x00000d0a
   188ec:	454c4449 	.word	0x454c4449
   188f0:	00000000 	.word	0x00000000

000188f4 <ulKernelPriority>:
   188f4:	0000007f                                ....

000188f8 <heapSTRUCT_SIZE>:
   188f8:	00010010                                         ..

000188fa <version>:
   188fa:	3d5a0001                                         ..

000188fc <utm_east0>:
   188fc:	00093d5a                                Z=..

00018900 <utm_north0>:
   18900:	005875e6                                .uX.

00018904 <climb_pgain>:
   18904:	bcf5c28f                                ....

00018908 <climb_igain>:
   18908:	3dcccccd                                ...=

0001890c <level_gaz>:
   1890c:	3e9eb852                                R..>

00018910 <nav_east0>:
   18910:	00093d5a                                Z=..

00018914 <nav_north0>:
   18914:	005875e6                                .uX.

00018918 <nb_waypoint>:
   18918:	00000007 33323130 37363534 42413938     ....0123456789AB
   18928:	46454443                                CDEF

0001892c <failsafe>:
	...
   18940:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18950:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18960:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18970:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18980:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18990:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   189a0:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   189b0:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   189c0:	6e617672 00000074                       rvant...
