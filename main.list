
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 c1 88 01 00 05 89 01 00 05 89 01 00     .P. ............
      10:	05 89 01 00 05 89 01 00 05 89 01 00 00 00 00 00     ................
	...
      2c:	b9 5c 00 00 05 89 01 00 00 00 00 00 c5 5d 00 00     .\...........]..
      3c:	01 5e 00 00 05 89 01 00 05 89 01 00 05 89 01 00     .^..............
      4c:	05 89 01 00 05 89 01 00 05 89 01 00 05 89 01 00     ................
      5c:	05 89 01 00 05 89 01 00 05 89 01 00 05 89 01 00     ................
      6c:	05 89 01 00 05 89 01 00 05 89 01 00 05 89 01 00     ................
      7c:	05 89 01 00 05 89 01 00 05 89 01 00 05 89 01 00     ................
      8c:	05 89 01 00 05 89 01 00 05 89 01 00 05 89 01 00     ................
      9c:	05 89 01 00 05 89 01 00 05 89 01 00 05 89 01 00     ................
      ac:	05 89 01 00 05 89 01 00 05 89 01 00 05 89 01 00     ................
      bc:	05 89 01 00 05 89 01 00 05 89 01 00 05 89 01 00     ................
      cc:	05 89 01 00 05 89 01 00 05 89 01 00 05 89 01 00     ................
      dc:	05 89 01 00 05 89 01 00 05 89 01 00 05 89 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	000189e4 	.word	0x000189e4
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cba4 	.word	0x2004cba4

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fd2b 	bl	5e54 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fe6a 	bl	4124 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fe65 	bl	4124 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe45 	bl	413c <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fe84 	bl	41fc <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe2e 	bl	418c <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe1e 	bl	418c <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fe11 	bl	418c <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe32 	bl	41fc <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe29 	bl	41fc <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fda8 	bl	413c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fe77 	bl	52f8 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fd9c 	bl	41fc <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fd93 	bl	41fc <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fd0e 	bl	413c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc45 	bl	40e4 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc39 	bl	40e4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc33 	bl	40e4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc2d 	bl	40e4 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fc97 	bl	41fc <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc2e 	bl	413c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b086      	sub	sp, #24
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f833 	bl	2994 <xEventGetpxDestination>
    292e:	6178      	str	r0, [r7, #20]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	1d3a      	adds	r2, r7, #4
    293e:	4610      	mov	r0, r2
    2940:	4619      	mov	r1, r3
    2942:	f000 f833 	bl	29ac <xEventGetxTag>
        if( xTaskGetTickCount() >= xTag.xTimestamp )
    2946:	f002 fcd7 	bl	52f8 <xTaskGetTickCount>
    294a:	4602      	mov	r2, r0
    294c:	68bb      	ldr	r3, [r7, #8]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f240 62dc 	movw	r2, #1756	; 0x6dc
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6979      	ldr	r1, [r7, #20]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3718      	adds	r7, #24
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	681b      	ldr	r3, [r3, #0]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	685b      	ldr	r3, [r3, #4]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetxTag>:

struct tag xEventGetxTag( xEventHandle pxEvent)
{
    29ac:	b490      	push	{r4, r7}
    29ae:	b082      	sub	sp, #8
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    29b4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTag;
    29b6:	687a      	ldr	r2, [r7, #4]
    29b8:	683b      	ldr	r3, [r7, #0]
    29ba:	4614      	mov	r4, r2
    29bc:	3308      	adds	r3, #8
    29be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29c4:	6878      	ldr	r0, [r7, #4]
    29c6:	3708      	adds	r7, #8
    29c8:	46bd      	mov	sp, r7
    29ca:	bc90      	pop	{r4, r7}
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop

000029d0 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29d0:	b480      	push	{r7}
    29d2:	b083      	sub	sp, #12
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
    29d8:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	683a      	ldr	r2, [r7, #0]
    29de:	3218      	adds	r2, #24
    29e0:	e892 0003 	ldmia.w	r2, {r0, r1}
    29e4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    29e8:	6878      	ldr	r0, [r7, #4]
    29ea:	370c      	adds	r7, #12
    29ec:	46bd      	mov	sp, r7
    29ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    29f2:	4770      	bx	lr

000029f4 <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
    29fc:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	683a      	ldr	r2, [r7, #0]
    2a02:	fbb3 f2f2 	udiv	r2, r3, r2
    2a06:	6839      	ldr	r1, [r7, #0]
    2a08:	fb01 f202 	mul.w	r2, r1, r2
    2a0c:	1a9b      	subs	r3, r3, r2
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d00d      	beq.n	2a2e <getGCD+0x3a>
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	683a      	ldr	r2, [r7, #0]
    2a16:	fbb3 f2f2 	udiv	r2, r3, r2
    2a1a:	6839      	ldr	r1, [r7, #0]
    2a1c:	fb01 f202 	mul.w	r2, r1, r2
    2a20:	1a9b      	subs	r3, r3, r2
    2a22:	6838      	ldr	r0, [r7, #0]
    2a24:	4619      	mov	r1, r3
    2a26:	f7ff ffe5 	bl	29f4 <getGCD>
    2a2a:	4603      	mov	r3, r0
    2a2c:	e000      	b.n	2a30 <getGCD+0x3c>
    2a2e:	683b      	ldr	r3, [r7, #0]
}
    2a30:	4618      	mov	r0, r3
    2a32:	3708      	adds	r7, #8
    2a34:	46bd      	mov	sp, r7
    2a36:	bd80      	pop	{r7, pc}

00002a38 <GCDOfTaskPeriod>:

inline static portTickType GCDOfTaskPeriod()
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a3e:	f240 0328 	movw	r3, #40	; 0x28
    2a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a4a:	2301      	movs	r3, #1
    2a4c:	607b      	str	r3, [r7, #4]
    2a4e:	e00f      	b.n	2a70 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a50:	f240 0328 	movw	r3, #40	; 0x28
    2a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a58:	687a      	ldr	r2, [r7, #4]
    2a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a5e:	6838      	ldr	r0, [r7, #0]
    2a60:	4619      	mov	r1, r3
    2a62:	f7ff ffc7 	bl	29f4 <getGCD>
    2a66:	4603      	mov	r3, r0
    2a68:	603b      	str	r3, [r7, #0]
inline static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	3301      	adds	r3, #1
    2a6e:	607b      	str	r3, [r7, #4]
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	2b0c      	cmp	r3, #12
    2a74:	ddec      	ble.n	2a50 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a76:	683b      	ldr	r3, [r7, #0]
}
    2a78:	4618      	mov	r0, r3
    2a7a:	3708      	adds	r7, #8
    2a7c:	46bd      	mov	sp, r7
    2a7e:	bd80      	pop	{r7, pc}

00002a80 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a80:	b590      	push	{r4, r7, lr}
    2a82:	b091      	sub	sp, #68	; 0x44
    2a84:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a86:	f7ff ffd7 	bl	2a38 <GCDOfTaskPeriod>
    2a8a:	4602      	mov	r2, r0
    2a8c:	f240 6358 	movw	r3, #1624	; 0x658
    2a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a94:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a96:	f240 6060 	movw	r0, #1632	; 0x660
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fb21 	bl	40e4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2aa2:	f240 6074 	movw	r0, #1652	; 0x674
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fb1b 	bl	40e4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2aae:	f240 6088 	movw	r0, #1672	; 0x688
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fb15 	bl	40e4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aba:	f240 609c 	movw	r0, #1692	; 0x69c
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 fb0f 	bl	40e4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2ac6:	f240 60b0 	movw	r0, #1712	; 0x6b0
    2aca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ace:	f001 fb09 	bl	40e4 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2ad2:	f240 60c4 	movw	r0, #1732	; 0x6c4
    2ad6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ada:	f001 fb03 	bl	40e4 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ade:	2300      	movs	r3, #0
    2ae0:	637b      	str	r3, [r7, #52]	; 0x34
    2ae2:	e02f      	b.n	2b44 <vInitialiseEventLists+0xc4>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2ae4:	6b7c      	ldr	r4, [r7, #52]	; 0x34
    2ae6:	2034      	movs	r0, #52	; 0x34
    2ae8:	f003 f9b4 	bl	5e54 <pvPortMalloc>
    2aec:	4602      	mov	r2, r0
    2aee:	00a3      	lsls	r3, r4, #2
    2af0:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af4:	440b      	add	r3, r1
    2af6:	f843 2c40 	str.w	r2, [r3, #-64]
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
    2afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2afc:	009b      	lsls	r3, r3, #2
    2afe:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b02:	4413      	add	r3, r2
    2b04:	f853 2c40 	ldr.w	r2, [r3, #-64]
    2b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2b10:	440b      	add	r3, r1
    2b12:	f853 3c40 	ldr.w	r3, [r3, #-64]
    2b16:	3320      	adds	r3, #32
    2b18:	4610      	mov	r0, r2
    2b1a:	4619      	mov	r1, r3
    2b1c:	f000 f98e 	bl	2e3c <vListIntialiseEventItem>
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b22:	009b      	lsls	r3, r3, #2
    2b24:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b28:	4413      	add	r3, r2
    2b2a:	f853 3c40 	ldr.w	r3, [r3, #-64]
    2b2e:	3320      	adds	r3, #32
    2b30:	f240 6060 	movw	r0, #1632	; 0x660
    2b34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b38:	4619      	mov	r1, r3
    2b3a:	f001 faff 	bl	413c <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b40:	3301      	adds	r3, #1
    2b42:	637b      	str	r3, [r7, #52]	; 0x34
    2b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b46:	2b0c      	cmp	r3, #12
    2b48:	ddcc      	ble.n	2ae4 <vInitialiseEventLists+0x64>
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2b4a:	2034      	movs	r0, #52	; 0x34
    2b4c:	f003 f982 	bl	5e54 <pvPortMalloc>
    2b50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( pxEndFlagEvent != NULL )
    2b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b54:	2b00      	cmp	r3, #0
    2b56:	d01e      	beq.n	2b96 <vInitialiseEventLists+0x116>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTag.xDeadline= portMAX_DELAY;
    2b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b5a:	f04f 32ff 	mov.w	r2, #4294967295
    2b5e:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTag.xTimestamp = portMAX_DELAY;
    2b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b62:	f04f 32ff 	mov.w	r2, #4294967295
    2b66:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTag.xMicroStep = portMAX_DELAY;
    2b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b6a:	f04f 32ff 	mov.w	r2, #4294967295
    2b6e:	615a      	str	r2, [r3, #20]
        pxEndFlagEvent->xTag.xLevel = portMAX_DELAY;
    2b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b72:	f04f 32ff 	mov.w	r2, #4294967295
    2b76:	611a      	str	r2, [r3, #16]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b7a:	3320      	adds	r3, #32
    2b7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2b7e:	4619      	mov	r1, r3
    2b80:	f000 f95c 	bl	2e3c <vListIntialiseEventItem>
        vListInsertEnd(&xEventNonExecutableList, &pxEndFlagEvent->xEventListItem); 
    2b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b86:	3320      	adds	r3, #32
    2b88:	f240 6088 	movw	r0, #1672	; 0x688
    2b8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b90:	4619      	mov	r1, r3
    2b92:	f001 fad3 	bl	413c <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2b96:	2034      	movs	r0, #52	; 0x34
    2b98:	f003 f95c 	bl	5e54 <pvPortMalloc>
    2b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( pxEndFlagEvent != NULL )
    2b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d01e      	beq.n	2be2 <vInitialiseEventLists+0x162>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTag.xDeadline= portMAX_DELAY;
    2ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ba6:	f04f 32ff 	mov.w	r2, #4294967295
    2baa:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTag.xTimestamp = portMAX_DELAY;
    2bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bae:	f04f 32ff 	mov.w	r2, #4294967295
    2bb2:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTag.xMicroStep = portMAX_DELAY;
    2bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bb6:	f04f 32ff 	mov.w	r2, #4294967295
    2bba:	615a      	str	r2, [r3, #20]
        pxEndFlagEvent->xTag.xLevel = portMAX_DELAY;
    2bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bbe:	f04f 32ff 	mov.w	r2, #4294967295
    2bc2:	611a      	str	r2, [r3, #16]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bc6:	3320      	adds	r3, #32
    2bc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2bca:	4619      	mov	r1, r3
    2bcc:	f000 f936 	bl	2e3c <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent->xEventListItem); 
    2bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bd2:	3320      	adds	r3, #32
    2bd4:	f240 60b0 	movw	r0, #1712	; 0x6b0
    2bd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2bdc:	4619      	mov	r1, r3
    2bde:	f001 faad 	bl	413c <vListInsertEnd>
    }
}
    2be2:	3744      	adds	r7, #68	; 0x44
    2be4:	46bd      	mov	sp, r7
    2be6:	bd90      	pop	{r4, r7, pc}

00002be8 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2be8:	b580      	push	{r7, lr}
    2bea:	b086      	sub	sp, #24
    2bec:	af00      	add	r7, sp, #0
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    struct tag xTag;
    
    if(listCURRENT_LIST_LENGTH(&xEventNonExecutableList) > 1)
    2bee:	f240 6388 	movw	r3, #1672	; 0x688
    2bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bf6:	681b      	ldr	r3, [r3, #0]
    2bf8:	2b01      	cmp	r3, #1
    2bfa:	d917      	bls.n	2c2c <xIsExecutableEventArrive+0x44>
    {
        temp_pxEventListItem = (xListItem *)xEventNonExecutableList.xListEnd.pxNext;
    2bfc:	f240 6388 	movw	r3, #1672	; 0x688
    2c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c04:	68db      	ldr	r3, [r3, #12]
    2c06:	617b      	str	r3, [r7, #20]
        xTag= xEventGetxTag( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2c08:	697b      	ldr	r3, [r7, #20]
    2c0a:	68db      	ldr	r3, [r3, #12]
    2c0c:	463a      	mov	r2, r7
    2c0e:	4610      	mov	r0, r2
    2c10:	4619      	mov	r1, r3
    2c12:	f7ff fecb 	bl	29ac <xEventGetxTag>
        xCurrentTime = xTaskGetTickCount();
    2c16:	f002 fb6f 	bl	52f8 <xTaskGetTickCount>
    2c1a:	6138      	str	r0, [r7, #16]
        return xTag.xTimestamp <= xCurrentTime? pdTRUE : pdFALSE;
    2c1c:	687a      	ldr	r2, [r7, #4]
    2c1e:	693b      	ldr	r3, [r7, #16]
    2c20:	429a      	cmp	r2, r3
    2c22:	bf8c      	ite	hi
    2c24:	2300      	movhi	r3, #0
    2c26:	2301      	movls	r3, #1
    2c28:	b2db      	uxtb	r3, r3
    2c2a:	e000      	b.n	2c2e <xIsExecutableEventArrive+0x46>
    }
    return 0;
    2c2c:	2300      	movs	r3, #0
}
    2c2e:	4618      	mov	r0, r3
    2c30:	3718      	adds	r7, #24
    2c32:	46bd      	mov	sp, r7
    2c34:	bd80      	pop	{r7, pc}
    2c36:	bf00      	nop

00002c38 <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct tag t1, const struct tag t2 )
{
    2c38:	b490      	push	{r4, r7}
    2c3a:	b084      	sub	sp, #16
    2c3c:	af00      	add	r7, sp, #0
    2c3e:	463c      	mov	r4, r7
    2c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTimestamp < t2.xTimestamp)
    2c44:	687a      	ldr	r2, [r7, #4]
    2c46:	69fb      	ldr	r3, [r7, #28]
    2c48:	429a      	cmp	r2, r3
    2c4a:	d201      	bcs.n	2c50 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2c4c:	2301      	movs	r3, #1
    2c4e:	e01e      	b.n	2c8e <xCompareFunction1+0x56>
    }
    else if( t1.xTimestamp == t2.xTimestamp)
    2c50:	687a      	ldr	r2, [r7, #4]
    2c52:	69fb      	ldr	r3, [r7, #28]
    2c54:	429a      	cmp	r2, r3
    2c56:	d119      	bne.n	2c8c <xCompareFunction1+0x54>
    {
        if( t1.xDeadline < t2.xDeadline )
    2c58:	683a      	ldr	r2, [r7, #0]
    2c5a:	69bb      	ldr	r3, [r7, #24]
    2c5c:	429a      	cmp	r2, r3
    2c5e:	d201      	bcs.n	2c64 <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2c60:	2301      	movs	r3, #1
    2c62:	e014      	b.n	2c8e <xCompareFunction1+0x56>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2c64:	683a      	ldr	r2, [r7, #0]
    2c66:	69bb      	ldr	r3, [r7, #24]
    2c68:	429a      	cmp	r2, r3
    2c6a:	d10f      	bne.n	2c8c <xCompareFunction1+0x54>
        {
            if( t1.xLevel < t2.xLevel )
    2c6c:	68ba      	ldr	r2, [r7, #8]
    2c6e:	6a3b      	ldr	r3, [r7, #32]
    2c70:	429a      	cmp	r2, r3
    2c72:	da01      	bge.n	2c78 <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2c74:	2301      	movs	r3, #1
    2c76:	e00a      	b.n	2c8e <xCompareFunction1+0x56>
            }
            else if( t1.xLevel == t2.xLevel && t1.xMicroStep < t2.xMicroStep )
    2c78:	68ba      	ldr	r2, [r7, #8]
    2c7a:	6a3b      	ldr	r3, [r7, #32]
    2c7c:	429a      	cmp	r2, r3
    2c7e:	d105      	bne.n	2c8c <xCompareFunction1+0x54>
    2c80:	68fa      	ldr	r2, [r7, #12]
    2c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c84:	429a      	cmp	r2, r3
    2c86:	da01      	bge.n	2c8c <xCompareFunction1+0x54>
            {
                return pdTRUE;
    2c88:	2301      	movs	r3, #1
    2c8a:	e000      	b.n	2c8e <xCompareFunction1+0x56>
            }
        }
    }
    return pdFALSE;
    2c8c:	2300      	movs	r3, #0
}
    2c8e:	4618      	mov	r0, r3
    2c90:	3710      	adds	r7, #16
    2c92:	46bd      	mov	sp, r7
    2c94:	bc90      	pop	{r4, r7}
    2c96:	4770      	bx	lr

00002c98 <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct tag t1, const struct tag t2 )
{
    2c98:	b490      	push	{r4, r7}
    2c9a:	b084      	sub	sp, #16
    2c9c:	af00      	add	r7, sp, #0
    2c9e:	463c      	mov	r4, r7
    2ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2ca4:	683a      	ldr	r2, [r7, #0]
    2ca6:	69bb      	ldr	r3, [r7, #24]
    2ca8:	429a      	cmp	r2, r3
    2caa:	d201      	bcs.n	2cb0 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2cac:	2301      	movs	r3, #1
    2cae:	e01e      	b.n	2cee <xCompareFunction2+0x56>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2cb0:	683a      	ldr	r2, [r7, #0]
    2cb2:	69bb      	ldr	r3, [r7, #24]
    2cb4:	429a      	cmp	r2, r3
    2cb6:	d119      	bne.n	2cec <xCompareFunction2+0x54>
    {
        if( t1.xTimestamp < t2.xTimestamp)
    2cb8:	687a      	ldr	r2, [r7, #4]
    2cba:	69fb      	ldr	r3, [r7, #28]
    2cbc:	429a      	cmp	r2, r3
    2cbe:	d201      	bcs.n	2cc4 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2cc0:	2301      	movs	r3, #1
    2cc2:	e014      	b.n	2cee <xCompareFunction2+0x56>
        }
        else if( t1.xTimestamp == t2.xTimestamp )
    2cc4:	687a      	ldr	r2, [r7, #4]
    2cc6:	69fb      	ldr	r3, [r7, #28]
    2cc8:	429a      	cmp	r2, r3
    2cca:	d10f      	bne.n	2cec <xCompareFunction2+0x54>
        {
            if( t1.xLevel < t2.xLevel )
    2ccc:	68ba      	ldr	r2, [r7, #8]
    2cce:	6a3b      	ldr	r3, [r7, #32]
    2cd0:	429a      	cmp	r2, r3
    2cd2:	da01      	bge.n	2cd8 <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2cd4:	2301      	movs	r3, #1
    2cd6:	e00a      	b.n	2cee <xCompareFunction2+0x56>
            }
            else if( t1.xLevel == t2.xLevel && t1.xMicroStep < t2.xMicroStep )
    2cd8:	68ba      	ldr	r2, [r7, #8]
    2cda:	6a3b      	ldr	r3, [r7, #32]
    2cdc:	429a      	cmp	r2, r3
    2cde:	d105      	bne.n	2cec <xCompareFunction2+0x54>
    2ce0:	68fa      	ldr	r2, [r7, #12]
    2ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ce4:	429a      	cmp	r2, r3
    2ce6:	da01      	bge.n	2cec <xCompareFunction2+0x54>
            {
                return pdTRUE;
    2ce8:	2301      	movs	r3, #1
    2cea:	e000      	b.n	2cee <xCompareFunction2+0x56>
            }
        }
    }

    return pdFALSE;
    2cec:	2300      	movs	r3, #0
}
    2cee:	4618      	mov	r0, r3
    2cf0:	3710      	adds	r7, #16
    2cf2:	46bd      	mov	sp, r7
    2cf4:	bc90      	pop	{r4, r7}
    2cf6:	4770      	bx	lr

00002cf8 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2cf8:	b480      	push	{r7}
    2cfa:	b087      	sub	sp, #28
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	60f8      	str	r0, [r7, #12]
    2d00:	60b9      	str	r1, [r7, #8]
    2d02:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2d08:	697b      	ldr	r3, [r7, #20]
    2d0a:	68fa      	ldr	r2, [r7, #12]
    2d0c:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2d0e:	697b      	ldr	r3, [r7, #20]
    2d10:	68ba      	ldr	r2, [r7, #8]
    2d12:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2d14:	697b      	ldr	r3, [r7, #20]
    2d16:	2200      	movs	r2, #0
    2d18:	615a      	str	r2, [r3, #20]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTag.xLevel = xEventSerialNumber;
    2d1a:	f240 63d8 	movw	r3, #1752	; 0x6d8
    2d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d22:	681b      	ldr	r3, [r3, #0]
    2d24:	461a      	mov	r2, r3
    2d26:	697b      	ldr	r3, [r7, #20]
    2d28:	611a      	str	r2, [r3, #16]

    xEventSerialNumber++;
    2d2a:	f240 63d8 	movw	r3, #1752	; 0x6d8
    2d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	1c5a      	adds	r2, r3, #1
    2d36:	f240 63d8 	movw	r3, #1752	; 0x6d8
    2d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d3e:	601a      	str	r2, [r3, #0]
}
    2d40:	371c      	adds	r7, #28
    2d42:	46bd      	mov	sp, r7
    2d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d48:	4770      	bx	lr
    2d4a:	bf00      	nop

00002d4c <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem, portBASE_TYPE comp)
{
    2d4c:	b590      	push	{r4, r7, lr}
    2d4e:	b095      	sub	sp, #84	; 0x54
    2d50:	af04      	add	r7, sp, #16
    2d52:	6078      	str	r0, [r7, #4]
    2d54:	6039      	str	r1, [r7, #0]
    volatile xListItem *pxIterator;
    struct tag xTagOfInsertion;
    xList * pxList; 

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	68db      	ldr	r3, [r3, #12]
    2d5a:	f107 0208 	add.w	r2, r7, #8
    2d5e:	4610      	mov	r0, r2
    2d60:	4619      	mov	r1, r3
    2d62:	f7ff fe23 	bl	29ac <xEventGetxTag>

    if(comp == 1)
    2d66:	683b      	ldr	r3, [r7, #0]
    2d68:	2b01      	cmp	r3, #1
    2d6a:	d127      	bne.n	2dbc <prvEventListGenericInsert+0x70>
    {
        pxList = &xEventNonExecutableList;
    2d6c:	f240 6388 	movw	r3, #1672	; 0x688
    2d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d74:	63bb      	str	r3, [r7, #56]	; 0x38
        taskENTER_CRITICAL();
    2d76:	f002 fff3 	bl	5d60 <vPortEnterCritical>
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2d7c:	3308      	adds	r3, #8
    2d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    2d80:	e002      	b.n	2d88 <prvEventListGenericInsert+0x3c>
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
    2d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d84:	685b      	ldr	r3, [r3, #4]
    2d86:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(comp == 1)
    {
        pxList = &xEventNonExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
    2d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d8a:	685b      	ldr	r3, [r3, #4]
    2d8c:	68db      	ldr	r3, [r3, #12]
    2d8e:	f107 0218 	add.w	r2, r7, #24
    2d92:	4610      	mov	r0, r2
    2d94:	4619      	mov	r1, r3
    2d96:	f7ff fe09 	bl	29ac <xEventGetxTag>
    2d9a:	466c      	mov	r4, sp
    2d9c:	f107 0308 	add.w	r3, r7, #8
    2da0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2da2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2da6:	f107 0318 	add.w	r3, r7, #24
    2daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2dac:	f7ff ff44 	bl	2c38 <xCompareFunction1>
    2db0:	4603      	mov	r3, r0

    if(comp == 1)
    {
        pxList = &xEventNonExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2db2:	2b00      	cmp	r3, #0
    2db4:	d1e5      	bne.n	2d82 <prvEventListGenericInsert+0x36>
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
        taskEXIT_CRITICAL();
    2db6:	f002 ffe9 	bl	5d8c <vPortExitCritical>
    2dba:	e026      	b.n	2e0a <prvEventListGenericInsert+0xbe>
    }
    else 
    {
        pxList = &xEventExecutableList;
    2dbc:	f240 63b0 	movw	r3, #1712	; 0x6b0
    2dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dc4:	63bb      	str	r3, [r7, #56]	; 0x38
        taskENTER_CRITICAL();
    2dc6:	f002 ffcb 	bl	5d60 <vPortEnterCritical>
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2dcc:	3308      	adds	r3, #8
    2dce:	63fb      	str	r3, [r7, #60]	; 0x3c
    2dd0:	e002      	b.n	2dd8 <prvEventListGenericInsert+0x8c>
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
    2dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dd4:	685b      	ldr	r3, [r3, #4]
    2dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    else 
    {
        pxList = &xEventExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
    2dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dda:	685b      	ldr	r3, [r3, #4]
    2ddc:	68db      	ldr	r3, [r3, #12]
    2dde:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2de2:	4610      	mov	r0, r2
    2de4:	4619      	mov	r1, r3
    2de6:	f7ff fde1 	bl	29ac <xEventGetxTag>
    2dea:	466c      	mov	r4, sp
    2dec:	f107 0308 	add.w	r3, r7, #8
    2df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2df6:	f107 0328 	add.w	r3, r7, #40	; 0x28
    2dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2dfc:	f7ff ff4c 	bl	2c98 <xCompareFunction2>
    2e00:	4603      	mov	r3, r0
    }
    else 
    {
        pxList = &xEventExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2e02:	2b00      	cmp	r3, #0
    2e04:	d1e5      	bne.n	2dd2 <prvEventListGenericInsert+0x86>
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
        taskEXIT_CRITICAL();
    2e06:	f002 ffc1 	bl	5d8c <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e0c:	685a      	ldr	r2, [r3, #4]
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	685b      	ldr	r3, [r3, #4]
    2e16:	687a      	ldr	r2, [r7, #4]
    2e18:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2e1a:	687b      	ldr	r3, [r7, #4]
    2e1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2e1e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e22:	687a      	ldr	r2, [r7, #4]
    2e24:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2e26:	687b      	ldr	r3, [r7, #4]
    2e28:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2e2a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e2e:	681b      	ldr	r3, [r3, #0]
    2e30:	1c5a      	adds	r2, r3, #1
    2e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e34:	601a      	str	r2, [r3, #0]
}
    2e36:	3744      	adds	r7, #68	; 0x44
    2e38:	46bd      	mov	sp, r7
    2e3a:	bd90      	pop	{r4, r7, pc}

00002e3c <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2e3c:	b480      	push	{r7}
    2e3e:	b083      	sub	sp, #12
    2e40:	af00      	add	r7, sp, #0
    2e42:	6078      	str	r0, [r7, #4]
    2e44:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2e46:	683b      	ldr	r3, [r7, #0]
    2e48:	687a      	ldr	r2, [r7, #4]
    2e4a:	60da      	str	r2, [r3, #12]
}
    2e4c:	370c      	adds	r7, #12
    2e4e:	46bd      	mov	sp, r7
    2e50:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e54:	4770      	bx	lr
    2e56:	bf00      	nop

00002e58 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData pdData)
{
    2e58:	b082      	sub	sp, #8
    2e5a:	b580      	push	{r7, lr}
    2e5c:	b086      	sub	sp, #24
    2e5e:	af00      	add	r7, sp, #0
    2e60:	60f8      	str	r0, [r7, #12]
    2e62:	60b9      	str	r1, [r7, #8]
    2e64:	607a      	str	r2, [r7, #4]
    2e66:	627b      	str	r3, [r7, #36]	; 0x24
    eveECB * pxNewEvent = NULL;
    2e68:	2300      	movs	r3, #0
    2e6a:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2e6c:	f002 ff78 	bl	5d60 <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2e70:	f240 6360 	movw	r3, #1632	; 0x660
    2e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e78:	68db      	ldr	r3, [r3, #12]
    2e7a:	68db      	ldr	r3, [r3, #12]
    2e7c:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2e7e:	697b      	ldr	r3, [r7, #20]
    2e80:	3320      	adds	r3, #32
    2e82:	4618      	mov	r0, r3
    2e84:	f001 f9ba 	bl	41fc <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2e88:	697b      	ldr	r3, [r7, #20]
    2e8a:	68fa      	ldr	r2, [r7, #12]
    2e8c:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2e8e:	68b8      	ldr	r0, [r7, #8]
    2e90:	6879      	ldr	r1, [r7, #4]
    2e92:	697a      	ldr	r2, [r7, #20]
    2e94:	f7ff ff30 	bl	2cf8 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = pdData;
    2e98:	697b      	ldr	r3, [r7, #20]
    2e9a:	3318      	adds	r3, #24
    2e9c:	f107 0224 	add.w	r2, r7, #36	; 0x24
    2ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
    2ea4:	e883 0003 	stmia.w	r3, {r0, r1}
    vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2ea8:	697b      	ldr	r3, [r7, #20]
    2eaa:	3320      	adds	r3, #32
    2eac:	6978      	ldr	r0, [r7, #20]
    2eae:	4619      	mov	r1, r3
    2eb0:	f7ff ffc4 	bl	2e3c <vListIntialiseEventItem>

    taskEXIT_CRITICAL();
    2eb4:	f002 ff6a 	bl	5d8c <vPortExitCritical>

    return pxNewEvent;
    2eb8:	697b      	ldr	r3, [r7, #20]
}
    2eba:	4618      	mov	r0, r3
    2ebc:	3718      	adds	r7, #24
    2ebe:	46bd      	mov	sp, r7
    2ec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2ec4:	b002      	add	sp, #8
    2ec6:	4770      	bx	lr

00002ec8 <vEventListGenericTransit>:


// An API to transfer all executable Event Items from xEventNonExecutableList to xEventExecutablePool.
// function : transit the nonexecutable event to executable event, and update the inBoolCount of every event 
void vEventListGenericTransit() 
{
    2ec8:	b580      	push	{r7, lr}
    2eca:	b088      	sub	sp, #32
    2ecc:	af00      	add	r7, sp, #0
    struct tag xTag;
    portBASE_TYPE pxDestination;
    portTickType xCurrentTime;

    // transmit the executable event from xEventNonExecutableList to xEventExecutablePool 
    while( listCURRENT_LIST_LENGTH( &xEventNonExecutableList) > 1 )
    2ece:	e042      	b.n	2f56 <vEventListGenericTransit+0x8e>
    {
        temp_pxEventListItem = (xListItem *)xEventNonExecutableList.xListEnd.pxNext;
    2ed0:	f240 6388 	movw	r3, #1672	; 0x688
    2ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ed8:	68db      	ldr	r3, [r3, #12]
    2eda:	61fb      	str	r3, [r7, #28]
        xTag= xEventGetxTag( temp_pxEventListItem->pvOwner );
    2edc:	69fb      	ldr	r3, [r7, #28]
    2ede:	68db      	ldr	r3, [r3, #12]
    2ee0:	1d3a      	adds	r2, r7, #4
    2ee2:	4610      	mov	r0, r2
    2ee4:	4619      	mov	r1, r3
    2ee6:	f7ff fd61 	bl	29ac <xEventGetxTag>
        xCurrentTime = xTaskGetTickCount();
    2eea:	f002 fa05 	bl	52f8 <xTaskGetTickCount>
    2eee:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTag.xTimestamp <= xCurrentTime )
    2ef0:	68ba      	ldr	r2, [r7, #8]
    2ef2:	69bb      	ldr	r3, [r7, #24]
    2ef4:	429a      	cmp	r2, r3
    2ef6:	d82d      	bhi.n	2f54 <vEventListGenericTransit+0x8c>
        {
            // update the xInBoolCount of pxDestination
            pxDestination = xEventGetpxDestination( temp_pxEventListItem->pvOwner );
    2ef8:	69fb      	ldr	r3, [r7, #28]
    2efa:	68db      	ldr	r3, [r3, #12]
    2efc:	4618      	mov	r0, r3
    2efe:	f7ff fd49 	bl	2994 <xEventGetpxDestination>
    2f02:	6178      	str	r0, [r7, #20]
            xContexts[pxDestination].xInBoolCount ++ ;
    2f04:	f240 62dc 	movw	r2, #1756	; 0x6dc
    2f08:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f0c:	6979      	ldr	r1, [r7, #20]
    2f0e:	460b      	mov	r3, r1
    2f10:	00db      	lsls	r3, r3, #3
    2f12:	1a5b      	subs	r3, r3, r1
    2f14:	00db      	lsls	r3, r3, #3
    2f16:	4413      	add	r3, r2
    2f18:	3334      	adds	r3, #52	; 0x34
    2f1a:	681b      	ldr	r3, [r3, #0]
    2f1c:	1c58      	adds	r0, r3, #1
    2f1e:	f240 62dc 	movw	r2, #1756	; 0x6dc
    2f22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f26:	6979      	ldr	r1, [r7, #20]
    2f28:	460b      	mov	r3, r1
    2f2a:	00db      	lsls	r3, r3, #3
    2f2c:	1a5b      	subs	r3, r3, r1
    2f2e:	00db      	lsls	r3, r3, #3
    2f30:	4413      	add	r3, r2
    2f32:	3334      	adds	r3, #52	; 0x34
    2f34:	6018      	str	r0, [r3, #0]

            taskENTER_CRITICAL();
    2f36:	f002 ff13 	bl	5d60 <vPortEnterCritical>
            /* remove pxListItem from xEventNonExecutableList */ 
            vListRemove(temp_pxEventListItem);
    2f3a:	69f8      	ldr	r0, [r7, #28]
    2f3c:	f001 f95e 	bl	41fc <vListRemove>
            /* insert the executable event into the xEventExecutablePool*/
            vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2f40:	f240 609c 	movw	r0, #1692	; 0x69c
    2f44:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f48:	69f9      	ldr	r1, [r7, #28]
    2f4a:	f001 f8f7 	bl	413c <vListInsertEnd>
            taskEXIT_CRITICAL();
    2f4e:	f002 ff1d 	bl	5d8c <vPortExitCritical>
    2f52:	e000      	b.n	2f56 <vEventListGenericTransit+0x8e>
        }
        else
        {
          // no executable event
           break; 
    2f54:	e006      	b.n	2f64 <vEventListGenericTransit+0x9c>
    struct tag xTag;
    portBASE_TYPE pxDestination;
    portTickType xCurrentTime;

    // transmit the executable event from xEventNonExecutableList to xEventExecutablePool 
    while( listCURRENT_LIST_LENGTH( &xEventNonExecutableList) > 1 )
    2f56:	f240 6388 	movw	r3, #1672	; 0x688
    2f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f5e:	681b      	ldr	r3, [r3, #0]
    2f60:	2b01      	cmp	r3, #1
    2f62:	d8b5      	bhi.n	2ed0 <vEventListGenericTransit+0x8>
        {
          // no executable event
           break; 
        }
    }
}
    2f64:	3720      	adds	r7, #32
    2f66:	46bd      	mov	sp, r7
    2f68:	bd80      	pop	{r7, pc}
    2f6a:	bf00      	nop

00002f6c <vEventGenericMap>:

void vEventGenericMap()
{
    2f6c:	b580      	push	{r7, lr}
    2f6e:	b088      	sub	sp, #32
    2f70:	af02      	add	r7, sp, #8
    eveECB * pxEvent; 
    eveECB * pxCopyEvent;
    xListItem * temp_pxEventListItem;

    // event map
    while(listCURRENT_LIST_LENGTH( &xEventNonExecutablePool ) > 0)
    2f72:	e065      	b.n	3040 <vEventGenericMap+0xd4>
    {
        temp_pxEventListItem = (xListItem *) xEventNonExecutablePool.xListEnd.pxNext;    
    2f74:	f240 6374 	movw	r3, #1652	; 0x674
    2f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f7c:	68db      	ldr	r3, [r3, #12]
    2f7e:	613b      	str	r3, [r7, #16]
        pxEvent = (eveECB *) temp_pxEventListItem->pvOwner;
    2f80:	693b      	ldr	r3, [r7, #16]
    2f82:	68db      	ldr	r3, [r3, #12]
    2f84:	60fb      	str	r3, [r7, #12]
        pxSource = pxEvent->pxSource;
    2f86:	68fb      	ldr	r3, [r7, #12]
    2f88:	681b      	ldr	r3, [r3, #0]
    2f8a:	60bb      	str	r3, [r7, #8]
        outs = xContexts[pxSource].xNumOfOut;
    2f8c:	f240 62dc 	movw	r2, #1756	; 0x6dc
    2f90:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f94:	68b9      	ldr	r1, [r7, #8]
    2f96:	460b      	mov	r3, r1
    2f98:	00db      	lsls	r3, r3, #3
    2f9a:	1a5b      	subs	r3, r3, r1
    2f9c:	00db      	lsls	r3, r3, #3
    2f9e:	4413      	add	r3, r2
    2fa0:	3310      	adds	r3, #16
    2fa2:	681b      	ldr	r3, [r3, #0]
    2fa4:	607b      	str	r3, [r7, #4]

        taskENTER_CRITICAL();
    2fa6:	f002 fedb 	bl	5d60 <vPortEnterCritical>
        vListRemove(temp_pxEventListItem);
    2faa:	6938      	ldr	r0, [r7, #16]
    2fac:	f001 f926 	bl	41fc <vListRemove>
        // complete the information of the origin event.
        pxEvent->pxDestination = xContexts[pxSource].xOutFlag[0];
    2fb0:	f240 62dc 	movw	r2, #1756	; 0x6dc
    2fb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fb8:	68b9      	ldr	r1, [r7, #8]
    2fba:	460b      	mov	r3, r1
    2fbc:	00db      	lsls	r3, r3, #3
    2fbe:	1a5b      	subs	r3, r3, r1
    2fc0:	00db      	lsls	r3, r3, #3
    2fc2:	4413      	add	r3, r2
    2fc4:	331c      	adds	r3, #28
    2fc6:	681a      	ldr	r2, [r3, #0]
    2fc8:	68fb      	ldr	r3, [r7, #12]
    2fca:	605a      	str	r2, [r3, #4]
        prvEventListGenericInsert(temp_pxEventListItem,1); 
    2fcc:	6938      	ldr	r0, [r7, #16]
    2fce:	2101      	movs	r1, #1
    2fd0:	f7ff febc 	bl	2d4c <prvEventListGenericInsert>

        // copy one event to multiples
        for(i = 1; i < outs; ++ i)
    2fd4:	2301      	movs	r3, #1
    2fd6:	617b      	str	r3, [r7, #20]
    2fd8:	e02c      	b.n	3034 <vEventGenericMap+0xc8>
        {
            pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, pxEvent->xData);
    2fda:	68fb      	ldr	r3, [r7, #12]
    2fdc:	6899      	ldr	r1, [r3, #8]
    2fde:	68fb      	ldr	r3, [r7, #12]
    2fe0:	68da      	ldr	r2, [r3, #12]
    2fe2:	68fb      	ldr	r3, [r7, #12]
    2fe4:	69d8      	ldr	r0, [r3, #28]
    2fe6:	9000      	str	r0, [sp, #0]
    2fe8:	699b      	ldr	r3, [r3, #24]
    2fea:	68b8      	ldr	r0, [r7, #8]
    2fec:	f7ff ff34 	bl	2e58 <pxEventGenericCreate>
    2ff0:	6038      	str	r0, [r7, #0]
            // complete the information of the copied event.
            pxCopyEvent->xTag.xMicroStep = i;
    2ff2:	683b      	ldr	r3, [r7, #0]
    2ff4:	697a      	ldr	r2, [r7, #20]
    2ff6:	615a      	str	r2, [r3, #20]
            pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
    2ff8:	68fb      	ldr	r3, [r7, #12]
    2ffa:	691a      	ldr	r2, [r3, #16]
    2ffc:	683b      	ldr	r3, [r7, #0]
    2ffe:	611a      	str	r2, [r3, #16]
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
    3000:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3004:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3008:	68b9      	ldr	r1, [r7, #8]
    300a:	460b      	mov	r3, r1
    300c:	00db      	lsls	r3, r3, #3
    300e:	1a5b      	subs	r3, r3, r1
    3010:	005b      	lsls	r3, r3, #1
    3012:	6979      	ldr	r1, [r7, #20]
    3014:	440b      	add	r3, r1
    3016:	3306      	adds	r3, #6
    3018:	009b      	lsls	r3, r3, #2
    301a:	4413      	add	r3, r2
    301c:	685a      	ldr	r2, [r3, #4]
    301e:	683b      	ldr	r3, [r7, #0]
    3020:	605a      	str	r2, [r3, #4]
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
    3022:	683b      	ldr	r3, [r7, #0]
    3024:	3320      	adds	r3, #32
    3026:	4618      	mov	r0, r3
    3028:	2101      	movs	r1, #1
    302a:	f7ff fe8f 	bl	2d4c <prvEventListGenericInsert>
        // complete the information of the origin event.
        pxEvent->pxDestination = xContexts[pxSource].xOutFlag[0];
        prvEventListGenericInsert(temp_pxEventListItem,1); 

        // copy one event to multiples
        for(i = 1; i < outs; ++ i)
    302e:	697b      	ldr	r3, [r7, #20]
    3030:	3301      	adds	r3, #1
    3032:	617b      	str	r3, [r7, #20]
    3034:	697a      	ldr	r2, [r7, #20]
    3036:	687b      	ldr	r3, [r7, #4]
    3038:	429a      	cmp	r2, r3
    303a:	dbce      	blt.n	2fda <vEventGenericMap+0x6e>
            pxCopyEvent->xTag.xMicroStep = i;
            pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
        }
        taskEXIT_CRITICAL();
    303c:	f002 fea6 	bl	5d8c <vPortExitCritical>
    eveECB * pxEvent; 
    eveECB * pxCopyEvent;
    xListItem * temp_pxEventListItem;

    // event map
    while(listCURRENT_LIST_LENGTH( &xEventNonExecutablePool ) > 0)
    3040:	f240 6374 	movw	r3, #1652	; 0x674
    3044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3048:	681b      	ldr	r3, [r3, #0]
    304a:	2b00      	cmp	r3, #0
    304c:	d192      	bne.n	2f74 <vEventGenericMap+0x8>
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
        }
        taskEXIT_CRITICAL();
    }
}
    304e:	3718      	adds	r7, #24
    3050:	46bd      	mov	sp, r7
    3052:	bd80      	pop	{r7, pc}

00003054 <vEventGenericReduce>:

void vEventGenericReduce()
{
    3054:	b580      	push	{r7, lr}
    3056:	b08c      	sub	sp, #48	; 0x30
    3058:	af00      	add	r7, sp, #0
    portBASE_TYPE i, pxDestination;
    struct tag temp_tag;
    struct eventData temp_data;
    volatile xListItem * pxIterator1, *pxIterator2;
    // event reduce 
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 0 )
    305a:	f240 639c 	movw	r3, #1692	; 0x69c
    305e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	2b00      	cmp	r3, #0
    3066:	f000 80ad 	beq.w	31c4 <vEventGenericReduce+0x170>
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    306a:	f240 639c 	movw	r3, #1692	; 0x69c
    306e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3072:	68db      	ldr	r3, [r3, #12]
    3074:	62bb      	str	r3, [r7, #40]	; 0x28
    3076:	e0a0      	b.n	31ba <vEventGenericReduce+0x166>
                pxIterator1 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
        {
            reduce_pxEventListItem = (xListItem *) pxIterator1; 
    3078:	6abb      	ldr	r3, [r7, #40]	; 0x28
    307a:	623b      	str	r3, [r7, #32]
            pxDestination = xEventGetpxDestination(reduce_pxEventListItem->pvOwner); 
    307c:	6a3b      	ldr	r3, [r7, #32]
    307e:	68db      	ldr	r3, [r3, #12]
    3080:	4618      	mov	r0, r3
    3082:	f7ff fc87 	bl	2994 <xEventGetpxDestination>
    3086:	61f8      	str	r0, [r7, #28]

            // if the communication between servant is multiple to one,
            // then other events for the same servant need to be found
            if( xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    3088:	f240 62dc 	movw	r2, #1756	; 0x6dc
    308c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3090:	69f9      	ldr	r1, [r7, #28]
    3092:	460b      	mov	r3, r1
    3094:	00db      	lsls	r3, r3, #3
    3096:	1a5b      	subs	r3, r3, r1
    3098:	00db      	lsls	r3, r3, #3
    309a:	4413      	add	r3, r2
    309c:	3334      	adds	r3, #52	; 0x34
    309e:	6818      	ldr	r0, [r3, #0]
    30a0:	f240 62dc 	movw	r2, #1756	; 0x6dc
    30a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30a8:	69f9      	ldr	r1, [r7, #28]
    30aa:	460b      	mov	r3, r1
    30ac:	00db      	lsls	r3, r3, #3
    30ae:	1a5b      	subs	r3, r3, r1
    30b0:	00db      	lsls	r3, r3, #3
    30b2:	4413      	add	r3, r2
    30b4:	330c      	adds	r3, #12
    30b6:	681b      	ldr	r3, [r3, #0]
    30b8:	4298      	cmp	r0, r3
    30ba:	d17b      	bne.n	31b4 <vEventGenericReduce+0x160>
            {
                taskENTER_CRITICAL();
    30bc:	f002 fe50 	bl	5d60 <vPortEnterCritical>
                if(xContexts[pxDestination].xInBoolCount > 1)
    30c0:	f240 62dc 	movw	r2, #1756	; 0x6dc
    30c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30c8:	69f9      	ldr	r1, [r7, #28]
    30ca:	460b      	mov	r3, r1
    30cc:	00db      	lsls	r3, r3, #3
    30ce:	1a5b      	subs	r3, r3, r1
    30d0:	00db      	lsls	r3, r3, #3
    30d2:	4413      	add	r3, r2
    30d4:	3334      	adds	r3, #52	; 0x34
    30d6:	681b      	ldr	r3, [r3, #0]
    30d8:	2b01      	cmp	r3, #1
    30da:	dd51      	ble.n	3180 <vEventGenericReduce+0x12c>
                {
                    i = 1;
    30dc:	2301      	movs	r3, #1
    30de:	62fb      	str	r3, [r7, #44]	; 0x2c
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    30e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    30e2:	685b      	ldr	r3, [r3, #4]
    30e4:	627b      	str	r3, [r7, #36]	; 0x24
    30e6:	e047      	b.n	3178 <vEventGenericReduce+0x124>
                    {
                        // find another event for the same destinate servant, copy the data to the first one
                        if( xEventGetpxDestination(pxIterator2->pvOwner) == pxDestination ) 
    30e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30ea:	68db      	ldr	r3, [r3, #12]
    30ec:	4618      	mov	r0, r3
    30ee:	f7ff fc51 	bl	2994 <xEventGetpxDestination>
    30f2:	4602      	mov	r2, r0
    30f4:	69fb      	ldr	r3, [r7, #28]
    30f6:	429a      	cmp	r2, r3
    30f8:	d13b      	bne.n	3172 <vEventGenericReduce+0x11e>
                        {
                            // collecting data into the first event
                            temp_data = xEventGetxData(pxIterator2->pvOwner); 
    30fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30fc:	68db      	ldr	r3, [r3, #12]
    30fe:	463a      	mov	r2, r7
    3100:	4610      	mov	r0, r2
    3102:	4619      	mov	r1, r3
    3104:	f7ff fc64 	bl	29d0 <xEventGetxData>
                            ((eveECB *)reduce_pxEventListItem->pvOwner)->xData.xDataArray[i++] = temp_data.xDataArray[0];
    3108:	6a3b      	ldr	r3, [r7, #32]
    310a:	68da      	ldr	r2, [r3, #12]
    310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    310e:	1c59      	adds	r1, r3, #1
    3110:	62f9      	str	r1, [r7, #44]	; 0x2c
    3112:	6839      	ldr	r1, [r7, #0]
    3114:	3306      	adds	r3, #6
    3116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                            // set the timestamp to the biggest one
                            temp_tag = xEventGetxTag(pxIterator2->pvOwner);
    311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    311c:	68db      	ldr	r3, [r3, #12]
    311e:	f107 0208 	add.w	r2, r7, #8
    3122:	4610      	mov	r0, r2
    3124:	4619      	mov	r1, r3
    3126:	f7ff fc41 	bl	29ac <xEventGetxTag>
                            if(((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp < temp_tag.xTimestamp)
    312a:	6a3b      	ldr	r3, [r7, #32]
    312c:	68db      	ldr	r3, [r3, #12]
    312e:	68da      	ldr	r2, [r3, #12]
    3130:	68fb      	ldr	r3, [r7, #12]
    3132:	429a      	cmp	r2, r3
    3134:	d203      	bcs.n	313e <vEventGenericReduce+0xea>
                            {
                                ((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp = temp_tag.xTimestamp;
    3136:	6a3b      	ldr	r3, [r7, #32]
    3138:	68db      	ldr	r3, [r3, #12]
    313a:	68fa      	ldr	r2, [r7, #12]
    313c:	60da      	str	r2, [r3, #12]
                            }
                            // delete the useless event, and return it back to event idle list
                            temp_pxEventListItem = (xListItem *) pxIterator2; 
    313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3140:	61bb      	str	r3, [r7, #24]
                            pxIterator2 = pxIterator2->pxNext;
    3142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3144:	685b      	ldr	r3, [r3, #4]
    3146:	627b      	str	r3, [r7, #36]	; 0x24
                            vEventGenericDelete(temp_pxEventListItem->pvOwner); 
    3148:	69bb      	ldr	r3, [r7, #24]
    314a:	68db      	ldr	r3, [r3, #12]
    314c:	4618      	mov	r0, r3
    314e:	f000 fa0f 	bl	3570 <vEventGenericDelete>
                            if( i == xContexts[pxDestination].xInBoolCount )
    3152:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3156:	f2c2 0200 	movt	r2, #8192	; 0x2000
    315a:	69f9      	ldr	r1, [r7, #28]
    315c:	460b      	mov	r3, r1
    315e:	00db      	lsls	r3, r3, #3
    3160:	1a5b      	subs	r3, r3, r1
    3162:	00db      	lsls	r3, r3, #3
    3164:	4413      	add	r3, r2
    3166:	3334      	adds	r3, #52	; 0x34
    3168:	681a      	ldr	r2, [r3, #0]
    316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    316c:	429a      	cmp	r2, r3
    316e:	d103      	bne.n	3178 <vEventGenericReduce+0x124>
                            {
                                break;   // find all event for the same servant 
    3170:	e006      	b.n	3180 <vEventGenericReduce+0x12c>
                            }
                        }
                        else
                        {
                            pxIterator2 = pxIterator2->pxNext;
    3172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3174:	685b      	ldr	r3, [r3, #4]
    3176:	627b      	str	r3, [r7, #36]	; 0x24
            {
                taskENTER_CRITICAL();
                if(xContexts[pxDestination].xInBoolCount > 1)
                {
                    i = 1;
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    3178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    317a:	4b14      	ldr	r3, [pc, #80]	; (31cc <vEventGenericReduce+0x178>)
    317c:	429a      	cmp	r2, r3
    317e:	d1b3      	bne.n	30e8 <vEventGenericReduce+0x94>
                        {
                            pxIterator2 = pxIterator2->pxNext;
                        }
                    }
                }
                xContexts[pxDestination].xInBoolCount = 0; 
    3180:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3184:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3188:	69f9      	ldr	r1, [r7, #28]
    318a:	460b      	mov	r3, r1
    318c:	00db      	lsls	r3, r3, #3
    318e:	1a5b      	subs	r3, r3, r1
    3190:	00db      	lsls	r3, r3, #3
    3192:	4413      	add	r3, r2
    3194:	3334      	adds	r3, #52	; 0x34
    3196:	2200      	movs	r2, #0
    3198:	601a      	str	r2, [r3, #0]
                pxIterator1 = pxIterator1->pxNext; 
    319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    319c:	685b      	ldr	r3, [r3, #4]
    319e:	62bb      	str	r3, [r7, #40]	; 0x28
                vListRemove(reduce_pxEventListItem);
    31a0:	6a38      	ldr	r0, [r7, #32]
    31a2:	f001 f82b 	bl	41fc <vListRemove>
                prvEventListGenericInsert(reduce_pxEventListItem, 2);
    31a6:	6a38      	ldr	r0, [r7, #32]
    31a8:	2102      	movs	r1, #2
    31aa:	f7ff fdcf 	bl	2d4c <prvEventListGenericInsert>
                taskEXIT_CRITICAL();
    31ae:	f002 fded 	bl	5d8c <vPortExitCritical>
    31b2:	e002      	b.n	31ba <vEventGenericReduce+0x166>
            }
            else
            {
                pxIterator1 = pxIterator1->pxNext;
    31b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    31b6:	685b      	ldr	r3, [r3, #4]
    31b8:	62bb      	str	r3, [r7, #40]	; 0x28
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 0 )
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    31ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    31bc:	4b03      	ldr	r3, [pc, #12]	; (31cc <vEventGenericReduce+0x178>)
    31be:	429a      	cmp	r2, r3
    31c0:	f47f af5a 	bne.w	3078 <vEventGenericReduce+0x24>
                pxIterator1 = pxIterator1->pxNext;
            }

        }
    }
}
    31c4:	3730      	adds	r7, #48	; 0x30
    31c6:	46bd      	mov	sp, r7
    31c8:	bd80      	pop	{r7, pc}
    31ca:	bf00      	nop
    31cc:	200006a4 	.word	0x200006a4

000031d0 <pOverLap>:



static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    31d0:	b480      	push	{r7}
    31d2:	b087      	sub	sp, #28
    31d4:	af00      	add	r7, sp, #0
    31d6:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    31d8:	687b      	ldr	r3, [r7, #4]
    31da:	68db      	ldr	r3, [r3, #12]
    31dc:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    31de:	697b      	ldr	r3, [r7, #20]
    31e0:	685b      	ldr	r3, [r3, #4]
    31e2:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    31e4:	697b      	ldr	r3, [r7, #20]
    31e6:	68db      	ldr	r3, [r3, #12]
    31e8:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    31ea:	f240 62dc 	movw	r2, #1756	; 0x6dc
    31ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31f2:	6939      	ldr	r1, [r7, #16]
    31f4:	460b      	mov	r3, r1
    31f6:	00db      	lsls	r3, r3, #3
    31f8:	1a5b      	subs	r3, r3, r1
    31fa:	00db      	lsls	r3, r3, #3
    31fc:	4413      	add	r3, r2
    31fe:	3324      	adds	r3, #36	; 0x24
    3200:	681a      	ldr	r2, [r3, #0]
    3202:	68fb      	ldr	r3, [r7, #12]
    3204:	4413      	add	r3, r2
    3206:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    3208:	f240 6358 	movw	r3, #1624	; 0x658
    320c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3210:	681a      	ldr	r2, [r3, #0]
    3212:	68fb      	ldr	r3, [r7, #12]
    3214:	fbb3 f1f2 	udiv	r1, r3, r2
    3218:	fb02 f201 	mul.w	r2, r2, r1
    321c:	1a9b      	subs	r3, r3, r2
    321e:	2b02      	cmp	r3, #2
    3220:	d932      	bls.n	3288 <pOverLap+0xb8>
    3222:	f240 6358 	movw	r3, #1624	; 0x658
    3226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    322a:	681a      	ldr	r2, [r3, #0]
    322c:	68fb      	ldr	r3, [r7, #12]
    322e:	fbb3 f1f2 	udiv	r1, r3, r2
    3232:	fb02 f201 	mul.w	r2, r2, r1
    3236:	1a9a      	subs	r2, r3, r2
    3238:	f240 6358 	movw	r3, #1624	; 0x658
    323c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3240:	681b      	ldr	r3, [r3, #0]
    3242:	3b03      	subs	r3, #3
    3244:	429a      	cmp	r2, r3
    3246:	d81f      	bhi.n	3288 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3248:	f240 6358 	movw	r3, #1624	; 0x658
    324c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3250:	681a      	ldr	r2, [r3, #0]
    3252:	68bb      	ldr	r3, [r7, #8]
    3254:	fbb3 f1f2 	udiv	r1, r3, r2
    3258:	fb02 f201 	mul.w	r2, r2, r1
    325c:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    325e:	2b02      	cmp	r3, #2
    3260:	d912      	bls.n	3288 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3262:	f240 6358 	movw	r3, #1624	; 0x658
    3266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    326a:	681a      	ldr	r2, [r3, #0]
    326c:	68bb      	ldr	r3, [r7, #8]
    326e:	fbb3 f1f2 	udiv	r1, r3, r2
    3272:	fb02 f201 	mul.w	r2, r2, r1
    3276:	1a9a      	subs	r2, r3, r2
    3278:	f240 6358 	movw	r3, #1624	; 0x658
    327c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3280:	681b      	ldr	r3, [r3, #0]
    3282:	3b03      	subs	r3, #3
    3284:	429a      	cmp	r2, r3
    3286:	d901      	bls.n	328c <pOverLap+0xbc>
    {
        return 1;
    3288:	2301      	movs	r3, #1
    328a:	e000      	b.n	328e <pOverLap+0xbe>
    }
    return 0;
    328c:	2300      	movs	r3, #0
}
    328e:	4618      	mov	r0, r3
    3290:	371c      	adds	r7, #28
    3292:	46bd      	mov	sp, r7
    3294:	f85d 7b04 	ldr.w	r7, [sp], #4
    3298:	4770      	bx	lr
    329a:	bf00      	nop

0000329c <xSetTimestamp>:

static void xSetTimestamp( xListItem * pxEventListItem)
{
    329c:	b580      	push	{r7, lr}
    329e:	b084      	sub	sp, #16
    32a0:	af00      	add	r7, sp, #0
    32a2:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    32a4:	687b      	ldr	r3, [r7, #4]
    32a6:	68db      	ldr	r3, [r3, #12]
    32a8:	60fb      	str	r3, [r7, #12]
    pxEvent->xTag.xTimestamp = xFutureModelTime;
    32aa:	f240 635c 	movw	r3, #1628	; 0x65c
    32ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32b2:	681a      	ldr	r2, [r3, #0]
    32b4:	68fb      	ldr	r3, [r7, #12]
    32b6:	60da      	str	r2, [r3, #12]

    if( pOverLap(pxEventListItem )== 0 ) // not overlaped
    32b8:	6878      	ldr	r0, [r7, #4]
    32ba:	f7ff ff89 	bl	31d0 <pOverLap>
    32be:	4603      	mov	r3, r0
    32c0:	2b00      	cmp	r3, #0
    32c2:	d122      	bne.n	330a <xSetTimestamp+0x6e>
    {
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet; // update future model time
    32c4:	68fb      	ldr	r3, [r7, #12]
    32c6:	6859      	ldr	r1, [r3, #4]
    32c8:	f240 62dc 	movw	r2, #1756	; 0x6dc
    32cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    32d0:	460b      	mov	r3, r1
    32d2:	00db      	lsls	r3, r3, #3
    32d4:	1a5b      	subs	r3, r3, r1
    32d6:	00db      	lsls	r3, r3, #3
    32d8:	4413      	add	r3, r2
    32da:	3324      	adds	r3, #36	; 0x24
    32dc:	681a      	ldr	r2, [r3, #0]
    32de:	f240 635c 	movw	r3, #1628	; 0x65c
    32e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32e6:	681b      	ldr	r3, [r3, #0]
    32e8:	441a      	add	r2, r3
    32ea:	f240 635c 	movw	r3, #1628	; 0x65c
    32ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32f2:	601a      	str	r2, [r3, #0]
        vListRemove( pxEventListItem); 
    32f4:	6878      	ldr	r0, [r7, #4]
    32f6:	f000 ff81 	bl	41fc <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    32fa:	f240 60c4 	movw	r0, #1732	; 0x6c4
    32fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3302:	6879      	ldr	r1, [r7, #4]
    3304:	f000 ff1a 	bl	413c <vListInsertEnd>
    3308:	e042      	b.n	3390 <xSetTimestamp+0xf4>
    }
    else  // overlaped
    {
        // set the future model time to start time of next LET
        xFutureModelTime = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;  
    330a:	f240 635c 	movw	r3, #1628	; 0x65c
    330e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3312:	681a      	ldr	r2, [r3, #0]
    3314:	f240 6358 	movw	r3, #1624	; 0x658
    3318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    331c:	681b      	ldr	r3, [r3, #0]
    331e:	fbb2 f3f3 	udiv	r3, r2, r3
    3322:	1c5a      	adds	r2, r3, #1
    3324:	f240 6358 	movw	r3, #1624	; 0x658
    3328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    332c:	681b      	ldr	r3, [r3, #0]
    332e:	fb03 f302 	mul.w	r3, r3, r2
    3332:	1cda      	adds	r2, r3, #3
    3334:	f240 635c 	movw	r3, #1628	; 0x65c
    3338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    333c:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    333e:	f240 635c 	movw	r3, #1628	; 0x65c
    3342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3346:	681a      	ldr	r2, [r3, #0]
    3348:	68fb      	ldr	r3, [r7, #12]
    334a:	60da      	str	r2, [r3, #12]
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;
    334c:	68fb      	ldr	r3, [r7, #12]
    334e:	6859      	ldr	r1, [r3, #4]
    3350:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3354:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3358:	460b      	mov	r3, r1
    335a:	00db      	lsls	r3, r3, #3
    335c:	1a5b      	subs	r3, r3, r1
    335e:	00db      	lsls	r3, r3, #3
    3360:	4413      	add	r3, r2
    3362:	3324      	adds	r3, #36	; 0x24
    3364:	681a      	ldr	r2, [r3, #0]
    3366:	f240 635c 	movw	r3, #1628	; 0x65c
    336a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    336e:	681b      	ldr	r3, [r3, #0]
    3370:	441a      	add	r2, r3
    3372:	f240 635c 	movw	r3, #1628	; 0x65c
    3376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    337a:	601a      	str	r2, [r3, #0]

        vListRemove( pxEventListItem); 
    337c:	6878      	ldr	r0, [r7, #4]
    337e:	f000 ff3d 	bl	41fc <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    3382:	f240 6074 	movw	r0, #1652	; 0x674
    3386:	f2c2 0000 	movt	r0, #8192	; 0x2000
    338a:	6879      	ldr	r1, [r7, #4]
    338c:	f000 fed6 	bl	413c <vListInsertEnd>
    }
}
    3390:	3710      	adds	r7, #16
    3392:	46bd      	mov	sp, r7
    3394:	bd80      	pop	{r7, pc}
    3396:	bf00      	nop

00003398 <pEqualxDeadline>:

inline static portBASE_TYPE pEqualxDeadline(struct tag xTag1, struct tag xTag2)
{
    3398:	b490      	push	{r4, r7}
    339a:	b084      	sub	sp, #16
    339c:	af00      	add	r7, sp, #0
    339e:	463c      	mov	r4, r7
    33a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return (xTag1.xDeadline == xTag2.xDeadline);
    33a4:	683a      	ldr	r2, [r7, #0]
    33a6:	69bb      	ldr	r3, [r7, #24]
    33a8:	429a      	cmp	r2, r3
    33aa:	bf14      	ite	ne
    33ac:	2300      	movne	r3, #0
    33ae:	2301      	moveq	r3, #1
    33b0:	b2db      	uxtb	r3, r3
}
    33b2:	4618      	mov	r0, r3
    33b4:	3710      	adds	r7, #16
    33b6:	46bd      	mov	sp, r7
    33b8:	bc90      	pop	{r4, r7}
    33ba:	4770      	bx	lr

000033bc <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    33bc:	b590      	push	{r4, r7, lr}
    33be:	b08f      	sub	sp, #60	; 0x3c
    33c0:	af04      	add	r7, sp, #16
    xListItem * flag_pxEventListItem;
    struct tag origin_tag;
    portBASE_TYPE count = 1;
    33c2:	2301      	movs	r3, #1
    33c4:	627b      	str	r3, [r7, #36]	; 0x24

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 1 )
    33c6:	f240 63b0 	movw	r3, #1712	; 0x6b0
    33ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ce:	681b      	ldr	r3, [r3, #0]
    33d0:	2b01      	cmp	r3, #1
    33d2:	d90b      	bls.n	33ec <xEventGenericSerialize+0x30>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    33d4:	f240 63b0 	movw	r3, #1712	; 0x6b0
    33d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33dc:	68db      	ldr	r3, [r3, #12]
    33de:	68db      	ldr	r3, [r3, #12]
    33e0:	463a      	mov	r2, r7
    33e2:	4610      	mov	r0, r2
    33e4:	4619      	mov	r1, r3
    33e6:	f7ff fae1 	bl	29ac <xEventGetxTag>
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 1 )
    33ea:	e03d      	b.n	3468 <xEventGenericSerialize+0xac>
    33ec:	e03c      	b.n	3468 <xEventGenericSerialize+0xac>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    33ee:	f240 63b0 	movw	r3, #1712	; 0x6b0
    33f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33f6:	68db      	ldr	r3, [r3, #12]
    33f8:	623b      	str	r3, [r7, #32]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    33fa:	6a3b      	ldr	r3, [r7, #32]
    33fc:	68db      	ldr	r3, [r3, #12]
    33fe:	4618      	mov	r0, r3
    3400:	f7ff fac8 	bl	2994 <xEventGetpxDestination>
    3404:	4601      	mov	r1, r0
    3406:	f240 62dc 	movw	r2, #1756	; 0x6dc
    340a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    340e:	460b      	mov	r3, r1
    3410:	00db      	lsls	r3, r3, #3
    3412:	1a5b      	subs	r3, r3, r1
    3414:	00db      	lsls	r3, r3, #3
    3416:	4413      	add	r3, r2
    3418:	3304      	adds	r3, #4
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	2b02      	cmp	r3, #2
    341e:	d119      	bne.n	3454 <xEventGenericSerialize+0x98>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    3420:	6a3b      	ldr	r3, [r7, #32]
    3422:	68db      	ldr	r3, [r3, #12]
    3424:	f107 0210 	add.w	r2, r7, #16
    3428:	4610      	mov	r0, r2
    342a:	4619      	mov	r1, r3
    342c:	f7ff fabe 	bl	29ac <xEventGetxTag>
    3430:	466c      	mov	r4, sp
    3432:	463b      	mov	r3, r7
    3434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    343a:	f107 0310 	add.w	r3, r7, #16
    343e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3440:	f7ff ffaa 	bl	3398 <pEqualxDeadline>
    3444:	4603      	mov	r3, r0
    3446:	2b00      	cmp	r3, #0
    3448:	d003      	beq.n	3452 <xEventGenericSerialize+0x96>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                xSetTimestamp( flag_pxEventListItem);
    344a:	6a38      	ldr	r0, [r7, #32]
    344c:	f7ff ff26 	bl	329c <xSetTimestamp>
    3450:	e00a      	b.n	3468 <xEventGenericSerialize+0xac>
            }
            else
            {
                break;
    3452:	e010      	b.n	3476 <xEventGenericSerialize+0xba>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    3454:	6a38      	ldr	r0, [r7, #32]
    3456:	f000 fed1 	bl	41fc <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    345a:	f240 60c4 	movw	r0, #1732	; 0x6c4
    345e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3462:	6a39      	ldr	r1, [r7, #32]
    3464:	f000 fe6a 	bl	413c <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 1 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 1 )
    3468:	f240 63b0 	movw	r3, #1712	; 0x6b0
    346c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3470:	681b      	ldr	r3, [r3, #0]
    3472:	2b01      	cmp	r3, #1
    3474:	d8bb      	bhi.n	33ee <xEventGenericSerialize+0x32>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    3476:	f240 63c4 	movw	r3, #1732	; 0x6c4
    347a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    347e:	681b      	ldr	r3, [r3, #0]
    3480:	2b00      	cmp	r3, #0
    3482:	d00a      	beq.n	349a <xEventGenericSerialize+0xde>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    3484:	f240 63c4 	movw	r3, #1732	; 0x6c4
    3488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    348c:	68db      	ldr	r3, [r3, #12]
    348e:	68db      	ldr	r3, [r3, #12]
    3490:	4618      	mov	r0, r3
    3492:	f7ff fa7f 	bl	2994 <xEventGetpxDestination>
    3496:	4603      	mov	r3, r0
    3498:	e001      	b.n	349e <xEventGenericSerialize+0xe2>
    }
    return -1; // no event avaliable
    349a:	f04f 33ff 	mov.w	r3, #4294967295
}
    349e:	4618      	mov	r0, r3
    34a0:	372c      	adds	r7, #44	; 0x2c
    34a2:	46bd      	mov	sp, r7
    34a4:	bd90      	pop	{r4, r7, pc}
    34a6:	bf00      	nop

000034a8 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    34a8:	b580      	push	{r7, lr}
    34aa:	b082      	sub	sp, #8
    34ac:	af00      	add	r7, sp, #0
    34ae:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    34b0:	687b      	ldr	r3, [r7, #4]
    34b2:	3320      	adds	r3, #32
    34b4:	f240 6074 	movw	r0, #1652	; 0x674
    34b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34bc:	4619      	mov	r1, r3
    34be:	f000 fe3d 	bl	413c <vListInsertEnd>
}
    34c2:	3708      	adds	r7, #8
    34c4:	46bd      	mov	sp, r7
    34c6:	bd80      	pop	{r7, pc}

000034c8 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    34c8:	b580      	push	{r7, lr}
    34ca:	b082      	sub	sp, #8
    34cc:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant

    taskENTER_CRITICAL();
    34ce:	f002 fc47 	bl	5d60 <vPortEnterCritical>
    xListItem * pxFlag = (xListItem *)xEventReadyList.xListEnd.pxNext;
    34d2:	f240 63c4 	movw	r3, #1732	; 0x6c4
    34d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34da:	68db      	ldr	r3, [r3, #12]
    34dc:	607b      	str	r3, [r7, #4]
    vListRemove(pxFlag);
    34de:	6878      	ldr	r0, [r7, #4]
    34e0:	f000 fe8c 	bl	41fc <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxFlag);  // reuse event, which will be update by servant 
    34e4:	f240 6074 	movw	r0, #1652	; 0x674
    34e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34ec:	6879      	ldr	r1, [r7, #4]
    34ee:	f000 fe25 	bl	413c <vListInsertEnd>
    taskEXIT_CRITICAL();
    34f2:	f002 fc4b 	bl	5d8c <vPortExitCritical>

    return (xEventHandle) pxFlag->pvOwner;
    34f6:	687b      	ldr	r3, [r7, #4]
    34f8:	68db      	ldr	r3, [r3, #12]
}
    34fa:	4618      	mov	r0, r3
    34fc:	3708      	adds	r7, #8
    34fe:	46bd      	mov	sp, r7
    3500:	bd80      	pop	{r7, pc}
    3502:	bf00      	nop

00003504 <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData xData)
{
    3504:	b480      	push	{r7}
    3506:	b087      	sub	sp, #28
    3508:	af00      	add	r7, sp, #0
    350a:	60f8      	str	r0, [r7, #12]
    350c:	60b9      	str	r1, [r7, #8]
    350e:	607a      	str	r2, [r7, #4]
    3510:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    3512:	68fb      	ldr	r3, [r7, #12]
    3514:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    3516:	697b      	ldr	r3, [r7, #20]
    3518:	68ba      	ldr	r2, [r7, #8]
    351a:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    351c:	697b      	ldr	r3, [r7, #20]
    351e:	687a      	ldr	r2, [r7, #4]
    3520:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    3522:	697b      	ldr	r3, [r7, #20]
    3524:	683a      	ldr	r2, [r7, #0]
    3526:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xLevel = xEventSerialNumber;
    3528:	f240 63d8 	movw	r3, #1752	; 0x6d8
    352c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3530:	681b      	ldr	r3, [r3, #0]
    3532:	461a      	mov	r2, r3
    3534:	697b      	ldr	r3, [r7, #20]
    3536:	611a      	str	r2, [r3, #16]
    pxEvent->xTag.xMicroStep = 0;
    3538:	697b      	ldr	r3, [r7, #20]
    353a:	2200      	movs	r2, #0
    353c:	615a      	str	r2, [r3, #20]
    pxEvent->xData = xData;
    353e:	697b      	ldr	r3, [r7, #20]
    3540:	3318      	adds	r3, #24
    3542:	f107 0220 	add.w	r2, r7, #32
    3546:	e892 0003 	ldmia.w	r2, {r0, r1}
    354a:	e883 0003 	stmia.w	r3, {r0, r1}
    xEventSerialNumber++;
    354e:	f240 63d8 	movw	r3, #1752	; 0x6d8
    3552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	1c5a      	adds	r2, r3, #1
    355a:	f240 63d8 	movw	r3, #1752	; 0x6d8
    355e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3562:	601a      	str	r2, [r3, #0]
}
    3564:	371c      	adds	r7, #28
    3566:	46bd      	mov	sp, r7
    3568:	f85d 7b04 	ldr.w	r7, [sp], #4
    356c:	4770      	bx	lr
    356e:	bf00      	nop

00003570 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    3570:	b580      	push	{r7, lr}
    3572:	b084      	sub	sp, #16
    3574:	af00      	add	r7, sp, #0
    3576:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    3578:	f002 fbf2 	bl	5d60 <vPortEnterCritical>

    xListItem * pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    357c:	687b      	ldr	r3, [r7, #4]
    357e:	3320      	adds	r3, #32
    3580:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    3582:	68f8      	ldr	r0, [r7, #12]
    3584:	f000 fe3a 	bl	41fc <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    3588:	f240 6060 	movw	r0, #1632	; 0x660
    358c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3590:	68f9      	ldr	r1, [r7, #12]
    3592:	f000 fdd3 	bl	413c <vListInsertEnd>

    taskEXIT_CRITICAL();
    3596:	f002 fbf9 	bl	5d8c <vPortExitCritical>
}
    359a:	3710      	adds	r7, #16
    359c:	46bd      	mov	sp, r7
    359e:	bd80      	pop	{r7, pc}

000035a0 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    35a0:	b580      	push	{r7, lr}
    35a2:	b082      	sub	sp, #8
    35a4:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    35a6:	2300      	movs	r3, #0
    35a8:	607b      	str	r3, [r7, #4]
    35aa:	e033      	b.n	3614 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    35ac:	2001      	movs	r0, #1
    35ae:	2100      	movs	r1, #0
    35b0:	2203      	movs	r2, #3
    35b2:	f000 fe99 	bl	42e8 <xQueueGenericCreate>
    35b6:	4601      	mov	r1, r0
    35b8:	f241 1324 	movw	r3, #4388	; 0x1124
    35bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c0:	687a      	ldr	r2, [r7, #4]
    35c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    35c6:	f241 1324 	movw	r3, #4388	; 0x1124
    35ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ce:	687a      	ldr	r2, [r7, #4]
    35d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35d4:	2b00      	cmp	r3, #0
    35d6:	d00c      	beq.n	35f2 <vSemaphoreInitialise+0x52>
    35d8:	f241 1324 	movw	r3, #4388	; 0x1124
    35dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35e0:	687a      	ldr	r2, [r7, #4]
    35e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35e6:	4618      	mov	r0, r3
    35e8:	2100      	movs	r1, #0
    35ea:	2200      	movs	r2, #0
    35ec:	2300      	movs	r3, #0
    35ee:	f000 ff09 	bl	4404 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    35f2:	f241 1324 	movw	r3, #4388	; 0x1124
    35f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35fa:	687a      	ldr	r2, [r7, #4]
    35fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3600:	4618      	mov	r0, r3
    3602:	2100      	movs	r1, #0
    3604:	f04f 32ff 	mov.w	r2, #4294967295
    3608:	2300      	movs	r3, #0
    360a:	f000 ffc1 	bl	4590 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    360e:	687b      	ldr	r3, [r7, #4]
    3610:	3301      	adds	r3, #1
    3612:	607b      	str	r3, [r7, #4]
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	2b03      	cmp	r3, #3
    3618:	ddc8      	ble.n	35ac <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    361a:	3708      	adds	r7, #8
    361c:	46bd      	mov	sp, r7
    361e:	bd80      	pop	{r7, pc}

00003620 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    3620:	b480      	push	{r7}
    3622:	b085      	sub	sp, #20
    3624:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3626:	2300      	movs	r3, #0
    3628:	60fb      	str	r3, [r7, #12]
    362a:	e0a1      	b.n	3770 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    362c:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3630:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3634:	68f9      	ldr	r1, [r7, #12]
    3636:	460b      	mov	r3, r1
    3638:	00db      	lsls	r3, r3, #3
    363a:	1a5b      	subs	r3, r3, r1
    363c:	00db      	lsls	r3, r3, #3
    363e:	4413      	add	r3, r2
    3640:	68fa      	ldr	r2, [r7, #12]
    3642:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    3644:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3648:	f2c2 0200 	movt	r2, #8192	; 0x2000
    364c:	68f9      	ldr	r1, [r7, #12]
    364e:	460b      	mov	r3, r1
    3650:	00db      	lsls	r3, r3, #3
    3652:	1a5b      	subs	r3, r3, r1
    3654:	00db      	lsls	r3, r3, #3
    3656:	4413      	add	r3, r2
    3658:	3304      	adds	r3, #4
    365a:	2202      	movs	r2, #2
    365c:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    365e:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3662:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3666:	68f9      	ldr	r1, [r7, #12]
    3668:	460b      	mov	r3, r1
    366a:	00db      	lsls	r3, r3, #3
    366c:	1a5b      	subs	r3, r3, r1
    366e:	00db      	lsls	r3, r3, #3
    3670:	4413      	add	r3, r2
    3672:	3308      	adds	r3, #8
    3674:	2201      	movs	r2, #1
    3676:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    3678:	f240 62dc 	movw	r2, #1756	; 0x6dc
    367c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3680:	68f9      	ldr	r1, [r7, #12]
    3682:	460b      	mov	r3, r1
    3684:	00db      	lsls	r3, r3, #3
    3686:	1a5b      	subs	r3, r3, r1
    3688:	00db      	lsls	r3, r3, #3
    368a:	4413      	add	r3, r2
    368c:	330c      	adds	r3, #12
    368e:	2200      	movs	r2, #0
    3690:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    3692:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3696:	f2c2 0200 	movt	r2, #8192	; 0x2000
    369a:	68f9      	ldr	r1, [r7, #12]
    369c:	460b      	mov	r3, r1
    369e:	00db      	lsls	r3, r3, #3
    36a0:	1a5b      	subs	r3, r3, r1
    36a2:	00db      	lsls	r3, r3, #3
    36a4:	4413      	add	r3, r2
    36a6:	3310      	adds	r3, #16
    36a8:	2200      	movs	r2, #0
    36aa:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    36ac:	f240 03c4 	movw	r3, #196	; 0xc4
    36b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36b4:	68fa      	ldr	r2, [r7, #12]
    36b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36ba:	f240 62dc 	movw	r2, #1756	; 0x6dc
    36be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36c2:	68f9      	ldr	r1, [r7, #12]
    36c4:	460b      	mov	r3, r1
    36c6:	00db      	lsls	r3, r3, #3
    36c8:	1a5b      	subs	r3, r3, r1
    36ca:	00db      	lsls	r3, r3, #3
    36cc:	4413      	add	r3, r2
    36ce:	3324      	adds	r3, #36	; 0x24
    36d0:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    36d2:	f240 4374 	movw	r3, #1140	; 0x474
    36d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36da:	68fa      	ldr	r2, [r7, #12]
    36dc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36e0:	f240 62dc 	movw	r2, #1756	; 0x6dc
    36e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36e8:	68f9      	ldr	r1, [r7, #12]
    36ea:	460b      	mov	r3, r1
    36ec:	00db      	lsls	r3, r3, #3
    36ee:	1a5b      	subs	r3, r3, r1
    36f0:	00db      	lsls	r3, r3, #3
    36f2:	4413      	add	r3, r2
    36f4:	3328      	adds	r3, #40	; 0x28
    36f6:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    36f8:	f240 1380 	movw	r3, #384	; 0x180
    36fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3700:	68fa      	ldr	r2, [r7, #12]
    3702:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3706:	f240 62dc 	movw	r2, #1756	; 0x6dc
    370a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    370e:	68f9      	ldr	r1, [r7, #12]
    3710:	460b      	mov	r3, r1
    3712:	00db      	lsls	r3, r3, #3
    3714:	1a5b      	subs	r3, r3, r1
    3716:	00db      	lsls	r3, r3, #3
    3718:	4413      	add	r3, r2
    371a:	3330      	adds	r3, #48	; 0x30
    371c:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    371e:	f240 1380 	movw	r3, #384	; 0x180
    3722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3726:	68fa      	ldr	r2, [r7, #12]
    3728:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    372c:	f240 0328 	movw	r3, #40	; 0x28
    3730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3734:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3738:	f240 62dc 	movw	r2, #1756	; 0x6dc
    373c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3740:	68f9      	ldr	r1, [r7, #12]
    3742:	460b      	mov	r3, r1
    3744:	00db      	lsls	r3, r3, #3
    3746:	1a5b      	subs	r3, r3, r1
    3748:	00db      	lsls	r3, r3, #3
    374a:	4413      	add	r3, r2
    374c:	332c      	adds	r3, #44	; 0x2c
    374e:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    3750:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3754:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3758:	68f9      	ldr	r1, [r7, #12]
    375a:	460b      	mov	r3, r1
    375c:	00db      	lsls	r3, r3, #3
    375e:	1a5b      	subs	r3, r3, r1
    3760:	00db      	lsls	r3, r3, #3
    3762:	4413      	add	r3, r2
    3764:	3334      	adds	r3, #52	; 0x34
    3766:	2200      	movs	r2, #0
    3768:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    376a:	68fb      	ldr	r3, [r7, #12]
    376c:	3301      	adds	r3, #1
    376e:	60fb      	str	r3, [r7, #12]
    3770:	68fb      	ldr	r3, [r7, #12]
    3772:	2b2e      	cmp	r3, #46	; 0x2e
    3774:	f77f af5a 	ble.w	362c <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3778:	2300      	movs	r3, #0
    377a:	60fb      	str	r3, [r7, #12]
    377c:	e028      	b.n	37d0 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    377e:	f240 035c 	movw	r3, #92	; 0x5c
    3782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3786:	68fa      	ldr	r2, [r7, #12]
    3788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    378c:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3790:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3794:	460b      	mov	r3, r1
    3796:	00db      	lsls	r3, r3, #3
    3798:	1a5b      	subs	r3, r3, r1
    379a:	00db      	lsls	r3, r3, #3
    379c:	4413      	add	r3, r2
    379e:	3304      	adds	r3, #4
    37a0:	2201      	movs	r2, #1
    37a2:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    37a4:	f240 0390 	movw	r3, #144	; 0x90
    37a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37ac:	68fa      	ldr	r2, [r7, #12]
    37ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    37b2:	f240 62dc 	movw	r2, #1756	; 0x6dc
    37b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37ba:	460b      	mov	r3, r1
    37bc:	00db      	lsls	r3, r3, #3
    37be:	1a5b      	subs	r3, r3, r1
    37c0:	00db      	lsls	r3, r3, #3
    37c2:	4413      	add	r3, r2
    37c4:	3304      	adds	r3, #4
    37c6:	2203      	movs	r2, #3
    37c8:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    37ca:	68fb      	ldr	r3, [r7, #12]
    37cc:	3301      	adds	r3, #1
    37ce:	60fb      	str	r3, [r7, #12]
    37d0:	68fb      	ldr	r3, [r7, #12]
    37d2:	2b0c      	cmp	r3, #12
    37d4:	ddd3      	ble.n	377e <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    37d6:	2300      	movs	r3, #0
    37d8:	60fb      	str	r3, [r7, #12]
    37da:	e084      	b.n	38e6 <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    37dc:	f240 223c 	movw	r2, #572	; 0x23c
    37e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37e4:	68f9      	ldr	r1, [r7, #12]
    37e6:	460b      	mov	r3, r1
    37e8:	005b      	lsls	r3, r3, #1
    37ea:	440b      	add	r3, r1
    37ec:	009b      	lsls	r3, r3, #2
    37ee:	4413      	add	r3, r2
    37f0:	3304      	adds	r3, #4
    37f2:	681b      	ldr	r3, [r3, #0]
    37f4:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    37f6:	f240 223c 	movw	r2, #572	; 0x23c
    37fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37fe:	68f9      	ldr	r1, [r7, #12]
    3800:	460b      	mov	r3, r1
    3802:	005b      	lsls	r3, r3, #1
    3804:	440b      	add	r3, r1
    3806:	009b      	lsls	r3, r3, #2
    3808:	4413      	add	r3, r2
    380a:	3308      	adds	r3, #8
    380c:	681b      	ldr	r3, [r3, #0]
    380e:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    3810:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3814:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3818:	68b9      	ldr	r1, [r7, #8]
    381a:	460b      	mov	r3, r1
    381c:	00db      	lsls	r3, r3, #3
    381e:	1a5b      	subs	r3, r3, r1
    3820:	00db      	lsls	r3, r3, #3
    3822:	4413      	add	r3, r2
    3824:	3310      	adds	r3, #16
    3826:	6818      	ldr	r0, [r3, #0]
    3828:	f240 62dc 	movw	r2, #1756	; 0x6dc
    382c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3830:	68b9      	ldr	r1, [r7, #8]
    3832:	460b      	mov	r3, r1
    3834:	00db      	lsls	r3, r3, #3
    3836:	1a5b      	subs	r3, r3, r1
    3838:	005b      	lsls	r3, r3, #1
    383a:	4403      	add	r3, r0
    383c:	3306      	adds	r3, #6
    383e:	009b      	lsls	r3, r3, #2
    3840:	4413      	add	r3, r2
    3842:	687a      	ldr	r2, [r7, #4]
    3844:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    3846:	f240 62dc 	movw	r2, #1756	; 0x6dc
    384a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    384e:	68b9      	ldr	r1, [r7, #8]
    3850:	460b      	mov	r3, r1
    3852:	00db      	lsls	r3, r3, #3
    3854:	1a5b      	subs	r3, r3, r1
    3856:	00db      	lsls	r3, r3, #3
    3858:	4413      	add	r3, r2
    385a:	3310      	adds	r3, #16
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	1c58      	adds	r0, r3, #1
    3860:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3864:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3868:	68b9      	ldr	r1, [r7, #8]
    386a:	460b      	mov	r3, r1
    386c:	00db      	lsls	r3, r3, #3
    386e:	1a5b      	subs	r3, r3, r1
    3870:	00db      	lsls	r3, r3, #3
    3872:	4413      	add	r3, r2
    3874:	3310      	adds	r3, #16
    3876:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    3878:	f240 62dc 	movw	r2, #1756	; 0x6dc
    387c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3880:	6879      	ldr	r1, [r7, #4]
    3882:	460b      	mov	r3, r1
    3884:	00db      	lsls	r3, r3, #3
    3886:	1a5b      	subs	r3, r3, r1
    3888:	00db      	lsls	r3, r3, #3
    388a:	4413      	add	r3, r2
    388c:	330c      	adds	r3, #12
    388e:	6818      	ldr	r0, [r3, #0]
    3890:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3894:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3898:	6879      	ldr	r1, [r7, #4]
    389a:	460b      	mov	r3, r1
    389c:	00db      	lsls	r3, r3, #3
    389e:	1a5b      	subs	r3, r3, r1
    38a0:	005b      	lsls	r3, r3, #1
    38a2:	4403      	add	r3, r0
    38a4:	3304      	adds	r3, #4
    38a6:	009b      	lsls	r3, r3, #2
    38a8:	4413      	add	r3, r2
    38aa:	68ba      	ldr	r2, [r7, #8]
    38ac:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    38ae:	f240 62dc 	movw	r2, #1756	; 0x6dc
    38b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38b6:	6879      	ldr	r1, [r7, #4]
    38b8:	460b      	mov	r3, r1
    38ba:	00db      	lsls	r3, r3, #3
    38bc:	1a5b      	subs	r3, r3, r1
    38be:	00db      	lsls	r3, r3, #3
    38c0:	4413      	add	r3, r2
    38c2:	330c      	adds	r3, #12
    38c4:	681b      	ldr	r3, [r3, #0]
    38c6:	1c58      	adds	r0, r3, #1
    38c8:	f240 62dc 	movw	r2, #1756	; 0x6dc
    38cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38d0:	6879      	ldr	r1, [r7, #4]
    38d2:	460b      	mov	r3, r1
    38d4:	00db      	lsls	r3, r3, #3
    38d6:	1a5b      	subs	r3, r3, r1
    38d8:	00db      	lsls	r3, r3, #3
    38da:	4413      	add	r3, r2
    38dc:	330c      	adds	r3, #12
    38de:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38e0:	68fb      	ldr	r3, [r7, #12]
    38e2:	3301      	adds	r3, #1
    38e4:	60fb      	str	r3, [r7, #12]
    38e6:	f240 233c 	movw	r3, #572	; 0x23c
    38ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38ee:	681a      	ldr	r2, [r3, #0]
    38f0:	68fb      	ldr	r3, [r7, #12]
    38f2:	429a      	cmp	r2, r3
    38f4:	f73f af72 	bgt.w	37dc <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    38f8:	3714      	adds	r7, #20
    38fa:	46bd      	mov	sp, r7
    38fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3900:	4770      	bx	lr
    3902:	bf00      	nop

00003904 <vSensor>:

void vSensor( void * pvParameter )
{
    3904:	b580      	push	{r7, lr}
    3906:	b090      	sub	sp, #64	; 0x40
    3908:	af02      	add	r7, sp, #8
    390a:	6078      	str	r0, [r7, #4]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    390c:	f241 1324 	movw	r3, #4388	; 0x1124
    3910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3914:	685b      	ldr	r3, [r3, #4]
    3916:	4618      	mov	r0, r3
    3918:	2100      	movs	r1, #0
    391a:	f04f 32ff 	mov.w	r2, #4294967295
    391e:	2300      	movs	r3, #0
    3920:	f000 fe36 	bl	4590 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3924:	e05b      	b.n	39de <vSensor+0xda>
        {
            if(boolFlag == 0)
    3926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3928:	2b00      	cmp	r3, #0
    392a:	d100      	bne.n	392e <vSensor+0x2a>
                continue;
    392c:	e057      	b.n	39de <vSensor+0xda>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    392e:	f7ff fdcb 	bl	34c8 <pxEventGenericReceive>
    3932:	6338      	str	r0, [r7, #48]	; 0x30
            xMyFlag = xEventGetpxDestination( pxEvent );
    3934:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3936:	f7ff f82d 	bl	2994 <xEventGetpxDestination>
    393a:	62f8      	str	r0, [r7, #44]	; 0x2c
            xMyData = xEventGetxData( pxEvent );
    393c:	f107 031c 	add.w	r3, r7, #28
    3940:	4618      	mov	r0, r3
    3942:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3944:	f7ff f844 	bl	29d0 <xEventGetxData>
            xMyTag = xEventGetxTag( pxEvent );
    3948:	f107 030c 	add.w	r3, r7, #12
    394c:	4618      	mov	r0, r3
    394e:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3950:	f7ff f82c 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    3954:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3958:	f2c2 0200 	movt	r2, #8192	; 0x2000
    395c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    395e:	460b      	mov	r3, r1
    3960:	00db      	lsls	r3, r3, #3
    3962:	1a5b      	subs	r3, r3, r1
    3964:	00db      	lsls	r3, r3, #3
    3966:	4413      	add	r3, r2
    3968:	332c      	adds	r3, #44	; 0x2c
    396a:	681b      	ldr	r3, [r3, #0]
    396c:	62bb      	str	r3, [r7, #40]	; 0x28
            xContexts[xMyFlag].xCount ++;
    396e:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3972:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3978:	460b      	mov	r3, r1
    397a:	00db      	lsls	r3, r3, #3
    397c:	1a5b      	subs	r3, r3, r1
    397e:	00db      	lsls	r3, r3, #3
    3980:	4413      	add	r3, r2
    3982:	3308      	adds	r3, #8
    3984:	681b      	ldr	r3, [r3, #0]
    3986:	1c58      	adds	r0, r3, #1
    3988:	f240 62dc 	movw	r2, #1756	; 0x6dc
    398c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3990:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3992:	460b      	mov	r3, r1
    3994:	00db      	lsls	r3, r3, #3
    3996:	1a5b      	subs	r3, r3, r1
    3998:	00db      	lsls	r3, r3, #3
    399a:	4413      	add	r3, r2
    399c:	3308      	adds	r3, #8
    399e:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag.xTimestamp + INPUT;   
    39a0:	693b      	ldr	r3, [r7, #16]
    39a2:	3303      	adds	r3, #3
    39a4:	627b      	str	r3, [r7, #36]	; 0x24
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    39a6:	f240 635c 	movw	r3, #1628	; 0x65c
    39aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    39b0:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    39b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    39b4:	f013 fd7c 	bl	174b0 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    39b8:	f001 fc9e 	bl	52f8 <xTaskGetTickCount>
    39bc:	4603      	mov	r3, r0
    39be:	4618      	mov	r0, r3
    39c0:	f013 fd76 	bl	174b0 <vPrintNumber>
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
    39c4:	466b      	mov	r3, sp
    39c6:	f107 021c 	add.w	r2, r7, #28
    39ca:	e892 0003 	ldmia.w	r2, {r0, r1}
    39ce:	e883 0003 	stmia.w	r3, {r0, r1}
    39d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    39d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    39d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    39d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39da:	f7ff fd93 	bl	3504 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    39de:	f7fe ff93 	bl	2908 <xIsERLNull>
    39e2:	6378      	str	r0, [r7, #52]	; 0x34
    39e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39e6:	f1b3 3fff 	cmp.w	r3, #4294967295
    39ea:	d19c      	bne.n	3926 <vSensor+0x22>
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
        }

        xSemaphoreGive( xBinarySemaphore[0] );
    39ec:	f241 1324 	movw	r3, #4388	; 0x1124
    39f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39f4:	681b      	ldr	r3, [r3, #0]
    39f6:	4618      	mov	r0, r3
    39f8:	2100      	movs	r1, #0
    39fa:	2200      	movs	r2, #0
    39fc:	2300      	movs	r3, #0
    39fe:	f000 fd01 	bl	4404 <xQueueGenericSend>
    }
    3a02:	e783      	b.n	390c <vSensor+0x8>

00003a04 <vServant>:
}

void vServant( void * pvParameter )
{
    3a04:	b580      	push	{r7, lr}
    3a06:	b090      	sub	sp, #64	; 0x40
    3a08:	af02      	add	r7, sp, #8
    3a0a:	6078      	str	r0, [r7, #4]
    struct eventData xMyData;
    struct tag xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    3a0c:	f241 1324 	movw	r3, #4388	; 0x1124
    3a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a14:	689b      	ldr	r3, [r3, #8]
    3a16:	4618      	mov	r0, r3
    3a18:	2100      	movs	r1, #0
    3a1a:	f04f 32ff 	mov.w	r2, #4294967295
    3a1e:	2300      	movs	r3, #0
    3a20:	f000 fdb6 	bl	4590 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3a24:	e092      	b.n	3b4c <vServant+0x148>
        {
            if(boolFlag == 0)
    3a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d100      	bne.n	3a2e <vServant+0x2a>
                continue;
    3a2c:	e08e      	b.n	3b4c <vServant+0x148>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3a2e:	f7ff fd4b 	bl	34c8 <pxEventGenericReceive>
    3a32:	62f8      	str	r0, [r7, #44]	; 0x2c
            xMyFlag = xEventGetpxDestination( pxEvent );
    3a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3a36:	f7fe ffad 	bl	2994 <xEventGetpxDestination>
    3a3a:	62b8      	str	r0, [r7, #40]	; 0x28
            xMyData = xEventGetxData( pxEvent );
    3a3c:	f107 0318 	add.w	r3, r7, #24
    3a40:	4618      	mov	r0, r3
    3a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3a44:	f7fe ffc4 	bl	29d0 <xEventGetxData>
            xMyTag = xEventGetxTag( pxEvent );
    3a48:	f107 0308 	add.w	r3, r7, #8
    3a4c:	4618      	mov	r0, r3
    3a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3a50:	f7fe ffac 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    3a54:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3a58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3a5e:	460b      	mov	r3, r1
    3a60:	00db      	lsls	r3, r3, #3
    3a62:	1a5b      	subs	r3, r3, r1
    3a64:	00db      	lsls	r3, r3, #3
    3a66:	4413      	add	r3, r2
    3a68:	332c      	adds	r3, #44	; 0x2c
    3a6a:	681b      	ldr	r3, [r3, #0]
    3a6c:	627b      	str	r3, [r7, #36]	; 0x24
            xContexts[xMyFlag].xCount ++;
    3a6e:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3a72:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3a78:	460b      	mov	r3, r1
    3a7a:	00db      	lsls	r3, r3, #3
    3a7c:	1a5b      	subs	r3, r3, r1
    3a7e:	00db      	lsls	r3, r3, #3
    3a80:	4413      	add	r3, r2
    3a82:	3308      	adds	r3, #8
    3a84:	681b      	ldr	r3, [r3, #0]
    3a86:	1c58      	adds	r0, r3, #1
    3a88:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3a8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3a92:	460b      	mov	r3, r1
    3a94:	00db      	lsls	r3, r3, #3
    3a96:	1a5b      	subs	r3, r3, r1
    3a98:	00db      	lsls	r3, r3, #3
    3a9a:	4413      	add	r3, r2
    3a9c:	3308      	adds	r3, #8
    3a9e:	6018      	str	r0, [r3, #0]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    3aa0:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3aa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3aaa:	460b      	mov	r3, r1
    3aac:	00db      	lsls	r3, r3, #3
    3aae:	1a5b      	subs	r3, r3, r1
    3ab0:	00db      	lsls	r3, r3, #3
    3ab2:	4413      	add	r3, r2
    3ab4:	331c      	adds	r3, #28
    3ab6:	681b      	ldr	r3, [r3, #0]
    3ab8:	623b      	str	r3, [r7, #32]
            switch(xContexts[pxDestination].xType)
    3aba:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3abe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ac2:	6a39      	ldr	r1, [r7, #32]
    3ac4:	460b      	mov	r3, r1
    3ac6:	00db      	lsls	r3, r3, #3
    3ac8:	1a5b      	subs	r3, r3, r1
    3aca:	00db      	lsls	r3, r3, #3
    3acc:	4413      	add	r3, r2
    3ace:	3304      	adds	r3, #4
    3ad0:	681b      	ldr	r3, [r3, #0]
    3ad2:	2b02      	cmp	r3, #2
    3ad4:	d002      	beq.n	3adc <vServant+0xd8>
    3ad6:	2b03      	cmp	r3, #3
    3ad8:	d010      	beq.n	3afc <vServant+0xf8>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
                    break;
                default:
                    break;
    3ada:	e021      	b.n	3b20 <vServant+0x11c>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag.xTimestamp + xContexts[xMyFlag].xLet;
    3adc:	68f8      	ldr	r0, [r7, #12]
    3ade:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3ae2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3ae8:	460b      	mov	r3, r1
    3aea:	00db      	lsls	r3, r3, #3
    3aec:	1a5b      	subs	r3, r3, r1
    3aee:	00db      	lsls	r3, r3, #3
    3af0:	4413      	add	r3, r2
    3af2:	3324      	adds	r3, #36	; 0x24
    3af4:	681b      	ldr	r3, [r3, #0]
    3af6:	4403      	add	r3, r0
    3af8:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
    3afa:	e011      	b.n	3b20 <vServant+0x11c>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
    3afc:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3b00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3b06:	460b      	mov	r3, r1
    3b08:	00db      	lsls	r3, r3, #3
    3b0a:	1a5b      	subs	r3, r3, r1
    3b0c:	00db      	lsls	r3, r3, #3
    3b0e:	4413      	add	r3, r2
    3b10:	3308      	adds	r3, #8
    3b12:	681b      	ldr	r3, [r3, #0]
    3b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b16:	fb02 f303 	mul.w	r3, r2, r3
    3b1a:	3b03      	subs	r3, #3
    3b1c:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
    3b1e:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3b22:	f013 fcc5 	bl	174b0 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3b26:	f001 fbe7 	bl	52f8 <xTaskGetTickCount>
    3b2a:	4603      	mov	r3, r0
    3b2c:	4618      	mov	r0, r3
    3b2e:	f013 fcbf 	bl	174b0 <vPrintNumber>
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
    3b32:	466b      	mov	r3, sp
    3b34:	f107 0218 	add.w	r2, r7, #24
    3b38:	e892 0003 	ldmia.w	r2, {r0, r1}
    3b3c:	e883 0003 	stmia.w	r3, {r0, r1}
    3b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b48:	f7ff fcdc 	bl	3504 <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3b4c:	f7fe fedc 	bl	2908 <xIsERLNull>
    3b50:	6338      	str	r0, [r7, #48]	; 0x30
    3b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3b54:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b58:	f47f af65 	bne.w	3a26 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3b5c:	f241 1324 	movw	r3, #4388	; 0x1124
    3b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b64:	681b      	ldr	r3, [r3, #0]
    3b66:	4618      	mov	r0, r3
    3b68:	2100      	movs	r1, #0
    3b6a:	2200      	movs	r2, #0
    3b6c:	2300      	movs	r3, #0
    3b6e:	f000 fc49 	bl	4404 <xQueueGenericSend>
    }
    3b72:	e74b      	b.n	3a0c <vServant+0x8>

00003b74 <vActuator>:
}

void vActuator( void * pvParameter )
{
    3b74:	b580      	push	{r7, lr}
    3b76:	b090      	sub	sp, #64	; 0x40
    3b78:	af02      	add	r7, sp, #8
    3b7a:	6078      	str	r0, [r7, #4]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3b7c:	f241 1324 	movw	r3, #4388	; 0x1124
    3b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b84:	68db      	ldr	r3, [r3, #12]
    3b86:	4618      	mov	r0, r3
    3b88:	2100      	movs	r1, #0
    3b8a:	f04f 32ff 	mov.w	r2, #4294967295
    3b8e:	2300      	movs	r3, #0
    3b90:	f000 fcfe 	bl	4590 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3b94:	e055      	b.n	3c42 <vActuator+0xce>
        {
            if(boolFlag == 0)
    3b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b98:	2b00      	cmp	r3, #0
    3b9a:	d100      	bne.n	3b9e <vActuator+0x2a>
                continue;
    3b9c:	e051      	b.n	3c42 <vActuator+0xce>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3b9e:	f7ff fc93 	bl	34c8 <pxEventGenericReceive>
    3ba2:	6338      	str	r0, [r7, #48]	; 0x30
            xMyFlag = xEventGetpxDestination( pxEvent );
    3ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3ba6:	f7fe fef5 	bl	2994 <xEventGetpxDestination>
    3baa:	62f8      	str	r0, [r7, #44]	; 0x2c
            xMyData = xEventGetxData( pxEvent );
    3bac:	f107 031c 	add.w	r3, r7, #28
    3bb0:	4618      	mov	r0, r3
    3bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3bb4:	f7fe ff0c 	bl	29d0 <xEventGetxData>
            xMyTag = xEventGetxTag( pxEvent );
    3bb8:	f107 030c 	add.w	r3, r7, #12
    3bbc:	4618      	mov	r0, r3
    3bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3bc0:	f7fe fef4 	bl	29ac <xEventGetxTag>
            xPeriod = xContexts[xMyFlag].xPeriod;
    3bc4:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3bc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3bce:	460b      	mov	r3, r1
    3bd0:	00db      	lsls	r3, r3, #3
    3bd2:	1a5b      	subs	r3, r3, r1
    3bd4:	00db      	lsls	r3, r3, #3
    3bd6:	4413      	add	r3, r2
    3bd8:	332c      	adds	r3, #44	; 0x2c
    3bda:	681b      	ldr	r3, [r3, #0]
    3bdc:	62bb      	str	r3, [r7, #40]	; 0x28
            xContexts[xMyFlag].xCount ++;
    3bde:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3be2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3be8:	460b      	mov	r3, r1
    3bea:	00db      	lsls	r3, r3, #3
    3bec:	1a5b      	subs	r3, r3, r1
    3bee:	00db      	lsls	r3, r3, #3
    3bf0:	4413      	add	r3, r2
    3bf2:	3308      	adds	r3, #8
    3bf4:	681b      	ldr	r3, [r3, #0]
    3bf6:	1c58      	adds	r0, r3, #1
    3bf8:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3bfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3c02:	460b      	mov	r3, r1
    3c04:	00db      	lsls	r3, r3, #3
    3c06:	1a5b      	subs	r3, r3, r1
    3c08:	00db      	lsls	r3, r3, #3
    3c0a:	4413      	add	r3, r2
    3c0c:	3308      	adds	r3, #8
    3c0e:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag.xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3c10:	693b      	ldr	r3, [r7, #16]
    3c12:	3303      	adds	r3, #3
    3c14:	627b      	str	r3, [r7, #36]	; 0x24
            vPrintNumber(xMyFlag);
    3c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3c18:	f013 fc4a 	bl	174b0 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3c1c:	f001 fb6c 	bl	52f8 <xTaskGetTickCount>
    3c20:	4603      	mov	r3, r0
    3c22:	4618      	mov	r0, r3
    3c24:	f013 fc44 	bl	174b0 <vPrintNumber>
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
    3c28:	466b      	mov	r3, sp
    3c2a:	f107 021c 	add.w	r2, r7, #28
    3c2e:	e892 0003 	ldmia.w	r2, {r0, r1}
    3c32:	e883 0003 	stmia.w	r3, {r0, r1}
    3c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3c38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c3e:	f7ff fc61 	bl	3504 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3c42:	f7fe fe61 	bl	2908 <xIsERLNull>
    3c46:	6378      	str	r0, [r7, #52]	; 0x34
    3c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c4e:	d1a2      	bne.n	3b96 <vActuator+0x22>
        
            //xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
        }

        xSemaphoreGive( xBinarySemaphore[0] );
    3c50:	f241 1324 	movw	r3, #4388	; 0x1124
    3c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c58:	681b      	ldr	r3, [r3, #0]
    3c5a:	4618      	mov	r0, r3
    3c5c:	2100      	movs	r1, #0
    3c5e:	2200      	movs	r2, #0
    3c60:	2300      	movs	r3, #0
    3c62:	f000 fbcf 	bl	4404 <xQueueGenericSend>
    }
    3c66:	e789      	b.n	3b7c <vActuator+0x8>

00003c68 <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3c68:	b580      	push	{r7, lr}
    3c6a:	b084      	sub	sp, #16
    3c6c:	af00      	add	r7, sp, #0
    3c6e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3c70:	f241 1324 	movw	r3, #4388	; 0x1124
    3c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c78:	681b      	ldr	r3, [r3, #0]
    3c7a:	4618      	mov	r0, r3
    3c7c:	2100      	movs	r1, #0
    3c7e:	f04f 32ff 	mov.w	r2, #4294967295
    3c82:	2300      	movs	r3, #0
    3c84:	f000 fc84 	bl	4590 <xQueueGenericReceive>

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventMap();
    3c88:	f7ff f970 	bl	2f6c <vEventGenericMap>

        // transit the events from nonexecutable event list to executable event list
        vEventListTransit();
    3c8c:	f7ff f91c 	bl	2ec8 <vEventListGenericTransit>
 
        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3c90:	f7ff f9e0 	bl	3054 <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3c94:	f7ff fb92 	bl	33bc <xEventGenericSerialize>
    3c98:	60f8      	str	r0, [r7, #12]

        switch(xContexts[pxDestination].xType)
    3c9a:	f240 62dc 	movw	r2, #1756	; 0x6dc
    3c9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ca2:	68f9      	ldr	r1, [r7, #12]
    3ca4:	460b      	mov	r3, r1
    3ca6:	00db      	lsls	r3, r3, #3
    3ca8:	1a5b      	subs	r3, r3, r1
    3caa:	00db      	lsls	r3, r3, #3
    3cac:	4413      	add	r3, r2
    3cae:	3304      	adds	r3, #4
    3cb0:	681b      	ldr	r3, [r3, #0]
    3cb2:	2b02      	cmp	r3, #2
    3cb4:	d010      	beq.n	3cd8 <vR_Servant+0x70>
    3cb6:	2b03      	cmp	r3, #3
    3cb8:	d01a      	beq.n	3cf0 <vR_Servant+0x88>
    3cba:	2b01      	cmp	r3, #1
    3cbc:	d000      	beq.n	3cc0 <vR_Servant+0x58>
                break;
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
                break;
            default:
                break;
    3cbe:	e023      	b.n	3d08 <vR_Servant+0xa0>
        pxDestination = xEventSerialize(); 

        switch(xContexts[pxDestination].xType)
        {
            case 1:
                xSemaphoreGive( xBinarySemaphore[1] );
    3cc0:	f241 1324 	movw	r3, #4388	; 0x1124
    3cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cc8:	685b      	ldr	r3, [r3, #4]
    3cca:	4618      	mov	r0, r3
    3ccc:	2100      	movs	r1, #0
    3cce:	2200      	movs	r2, #0
    3cd0:	2300      	movs	r3, #0
    3cd2:	f000 fb97 	bl	4404 <xQueueGenericSend>
                break;
    3cd6:	e017      	b.n	3d08 <vR_Servant+0xa0>
            case 2:
                xSemaphoreGive( xBinarySemaphore[2] );
    3cd8:	f241 1324 	movw	r3, #4388	; 0x1124
    3cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ce0:	689b      	ldr	r3, [r3, #8]
    3ce2:	4618      	mov	r0, r3
    3ce4:	2100      	movs	r1, #0
    3ce6:	2200      	movs	r2, #0
    3ce8:	2300      	movs	r3, #0
    3cea:	f000 fb8b 	bl	4404 <xQueueGenericSend>
                break;
    3cee:	e00b      	b.n	3d08 <vR_Servant+0xa0>
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
    3cf0:	f241 1324 	movw	r3, #4388	; 0x1124
    3cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf8:	68db      	ldr	r3, [r3, #12]
    3cfa:	4618      	mov	r0, r3
    3cfc:	2100      	movs	r1, #0
    3cfe:	2200      	movs	r2, #0
    3d00:	2300      	movs	r3, #0
    3d02:	f000 fb7f 	bl	4404 <xQueueGenericSend>
                break;
    3d06:	bf00      	nop
            default:
                break;
                // no event available 
        }
    }
    3d08:	e7b2      	b.n	3c70 <vR_Servant+0x8>
    3d0a:	bf00      	nop

00003d0c <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3d0c:	b480      	push	{r7}
    3d0e:	b083      	sub	sp, #12
    3d10:	af00      	add	r7, sp, #0
    3d12:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3d14:	370c      	adds	r7, #12
    3d16:	46bd      	mov	sp, r7
    3d18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d1c:	4770      	bx	lr
    3d1e:	bf00      	nop

00003d20 <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3d20:	b580      	push	{r7, lr}
    3d22:	b082      	sub	sp, #8
    3d24:	af00      	add	r7, sp, #0
    3d26:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3d28:	f012 f9e6 	bl	160f8 <last_radio_from_ppm>
}
    3d2c:	3708      	adds	r7, #8
    3d2e:	46bd      	mov	sp, r7
    3d30:	bd80      	pop	{r7, pc}
    3d32:	bf00      	nop

00003d34 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3d34:	b480      	push	{r7}
    3d36:	b083      	sub	sp, #12
    3d38:	af00      	add	r7, sp, #0
    3d3a:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3d3c:	370c      	adds	r7, #12
    3d3e:	46bd      	mov	sp, r7
    3d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d44:	4770      	bx	lr
    3d46:	bf00      	nop

00003d48 <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3d48:	b480      	push	{r7}
    3d4a:	b083      	sub	sp, #12
    3d4c:	af00      	add	r7, sp, #0
    3d4e:	6078      	str	r0, [r7, #4]
}
    3d50:	370c      	adds	r7, #12
    3d52:	46bd      	mov	sp, r7
    3d54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d58:	4770      	bx	lr
    3d5a:	bf00      	nop

00003d5c <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3d5c:	b480      	push	{r7}
    3d5e:	b083      	sub	sp, #12
    3d60:	af00      	add	r7, sp, #0
    3d62:	6078      	str	r0, [r7, #4]
}
    3d64:	370c      	adds	r7, #12
    3d66:	46bd      	mov	sp, r7
    3d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d6c:	4770      	bx	lr
    3d6e:	bf00      	nop

00003d70 <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3d70:	b580      	push	{r7, lr}
    3d72:	b082      	sub	sp, #8
    3d74:	af00      	add	r7, sp, #0
    3d76:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3d78:	f012 fd78 	bl	1686c <to_autopilot_from_last_radio>
}
    3d7c:	3708      	adds	r7, #8
    3d7e:	46bd      	mov	sp, r7
    3d80:	bd80      	pop	{r7, pc}
    3d82:	bf00      	nop

00003d84 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3d84:	b580      	push	{r7, lr}
    3d86:	b082      	sub	sp, #8
    3d88:	af00      	add	r7, sp, #0
    3d8a:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3d8c:	f012 fcac 	bl	166e8 <spi_reset>
}
    3d90:	3708      	adds	r7, #8
    3d92:	46bd      	mov	sp, r7
    3d94:	bd80      	pop	{r7, pc}
    3d96:	bf00      	nop

00003d98 <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3d98:	b480      	push	{r7}
    3d9a:	b083      	sub	sp, #12
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	6078      	str	r0, [r7, #4]
}
    3da0:	370c      	adds	r7, #12
    3da2:	46bd      	mov	sp, r7
    3da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3da8:	4770      	bx	lr
    3daa:	bf00      	nop

00003dac <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3dac:	b480      	push	{r7}
    3dae:	b083      	sub	sp, #12
    3db0:	af00      	add	r7, sp, #0
    3db2:	6078      	str	r0, [r7, #4]
}
    3db4:	370c      	adds	r7, #12
    3db6:	46bd      	mov	sp, r7
    3db8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dbc:	4770      	bx	lr
    3dbe:	bf00      	nop

00003dc0 <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3dc0:	b580      	push	{r7, lr}
    3dc2:	b082      	sub	sp, #8
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3dc8:	f012 fe98 	bl	16afc <check_mega128_values_task>
}
    3dcc:	3708      	adds	r7, #8
    3dce:	46bd      	mov	sp, r7
    3dd0:	bd80      	pop	{r7, pc}
    3dd2:	bf00      	nop

00003dd4 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3dd4:	b480      	push	{r7}
    3dd6:	b083      	sub	sp, #12
    3dd8:	af00      	add	r7, sp, #0
    3dda:	6078      	str	r0, [r7, #4]
}
    3ddc:	370c      	adds	r7, #12
    3dde:	46bd      	mov	sp, r7
    3de0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3de4:	4770      	bx	lr
    3de6:	bf00      	nop

00003de8 <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3de8:	b480      	push	{r7}
    3dea:	b083      	sub	sp, #12
    3dec:	af00      	add	r7, sp, #0
    3dee:	6078      	str	r0, [r7, #4]
}
    3df0:	370c      	adds	r7, #12
    3df2:	46bd      	mov	sp, r7
    3df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df8:	4770      	bx	lr
    3dfa:	bf00      	nop

00003dfc <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3dfc:	b580      	push	{r7, lr}
    3dfe:	b082      	sub	sp, #8
    3e00:	af00      	add	r7, sp, #0
    3e02:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3e04:	f012 ff52 	bl	16cac <servo_transmit>
}
    3e08:	3708      	adds	r7, #8
    3e0a:	46bd      	mov	sp, r7
    3e0c:	bd80      	pop	{r7, pc}
    3e0e:	bf00      	nop

00003e10 <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3e10:	b480      	push	{r7}
    3e12:	b083      	sub	sp, #12
    3e14:	af00      	add	r7, sp, #0
    3e16:	6078      	str	r0, [r7, #4]
}
    3e18:	370c      	adds	r7, #12
    3e1a:	46bd      	mov	sp, r7
    3e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e20:	4770      	bx	lr
    3e22:	bf00      	nop

00003e24 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3e24:	b480      	push	{r7}
    3e26:	b083      	sub	sp, #12
    3e28:	af00      	add	r7, sp, #0
    3e2a:	6078      	str	r0, [r7, #4]
}
    3e2c:	370c      	adds	r7, #12
    3e2e:	46bd      	mov	sp, r7
    3e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e34:	4770      	bx	lr
    3e36:	bf00      	nop

00003e38 <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3e38:	b580      	push	{r7, lr}
    3e3a:	b082      	sub	sp, #8
    3e3c:	af00      	add	r7, sp, #0
    3e3e:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3e40:	f012 fe52 	bl	16ae8 <check_failsafe_task>
}
    3e44:	3708      	adds	r7, #8
    3e46:	46bd      	mov	sp, r7
    3e48:	bd80      	pop	{r7, pc}
    3e4a:	bf00      	nop

00003e4c <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3e4c:	b480      	push	{r7}
    3e4e:	b083      	sub	sp, #12
    3e50:	af00      	add	r7, sp, #0
    3e52:	6078      	str	r0, [r7, #4]
}
    3e54:	370c      	adds	r7, #12
    3e56:	46bd      	mov	sp, r7
    3e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e5c:	4770      	bx	lr
    3e5e:	bf00      	nop

00003e60 <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3e60:	b480      	push	{r7}
    3e62:	b083      	sub	sp, #12
    3e64:	af00      	add	r7, sp, #0
    3e66:	6078      	str	r0, [r7, #4]
}
    3e68:	370c      	adds	r7, #12
    3e6a:	46bd      	mov	sp, r7
    3e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e70:	4770      	bx	lr
    3e72:	bf00      	nop

00003e74 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3e74:	b580      	push	{r7, lr}
    3e76:	b082      	sub	sp, #8
    3e78:	af00      	add	r7, sp, #0
    3e7a:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3e7c:	f009 f8ce 	bl	d01c <radio_control_task>
}
    3e80:	3708      	adds	r7, #8
    3e82:	46bd      	mov	sp, r7
    3e84:	bd80      	pop	{r7, pc}
    3e86:	bf00      	nop

00003e88 <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3e88:	b580      	push	{r7, lr}
    3e8a:	b082      	sub	sp, #8
    3e8c:	af00      	add	r7, sp, #0
    3e8e:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3e90:	f00d ff76 	bl	11d80 <ir_gain_calib>
}
    3e94:	3708      	adds	r7, #8
    3e96:	46bd      	mov	sp, r7
    3e98:	bd80      	pop	{r7, pc}
    3e9a:	bf00      	nop

00003e9c <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3e9c:	b480      	push	{r7}
    3e9e:	b083      	sub	sp, #12
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	6078      	str	r0, [r7, #4]
}
    3ea4:	370c      	adds	r7, #12
    3ea6:	46bd      	mov	sp, r7
    3ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eac:	4770      	bx	lr
    3eae:	bf00      	nop

00003eb0 <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3eb0:	b480      	push	{r7}
    3eb2:	b083      	sub	sp, #12
    3eb4:	af00      	add	r7, sp, #0
    3eb6:	6078      	str	r0, [r7, #4]
}
    3eb8:	370c      	adds	r7, #12
    3eba:	46bd      	mov	sp, r7
    3ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec0:	4770      	bx	lr
    3ec2:	bf00      	nop

00003ec4 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3ec4:	b580      	push	{r7, lr}
    3ec6:	b082      	sub	sp, #8
    3ec8:	af00      	add	r7, sp, #0
    3eca:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3ecc:	f00d ff1a 	bl	11d04 <ir_update>
}
    3ed0:	3708      	adds	r7, #8
    3ed2:	46bd      	mov	sp, r7
    3ed4:	bd80      	pop	{r7, pc}
    3ed6:	bf00      	nop

00003ed8 <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	b082      	sub	sp, #8
    3edc:	af00      	add	r7, sp, #0
    3ede:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3ee0:	f011 f998 	bl	15214 <estimator_update_state_infrared>
}
    3ee4:	3708      	adds	r7, #8
    3ee6:	46bd      	mov	sp, r7
    3ee8:	bd80      	pop	{r7, pc}
    3eea:	bf00      	nop

00003eec <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3eec:	b580      	push	{r7, lr}
    3eee:	b082      	sub	sp, #8
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3ef4:	f00d ff74 	bl	11de0 <roll_pitch_pid_run>
}
    3ef8:	3708      	adds	r7, #8
    3efa:	46bd      	mov	sp, r7
    3efc:	bd80      	pop	{r7, pc}
    3efe:	bf00      	nop

00003f00 <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3f00:	b480      	push	{r7}
    3f02:	b083      	sub	sp, #12
    3f04:	af00      	add	r7, sp, #0
    3f06:	6078      	str	r0, [r7, #4]
}
    3f08:	370c      	adds	r7, #12
    3f0a:	46bd      	mov	sp, r7
    3f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f10:	4770      	bx	lr
    3f12:	bf00      	nop

00003f14 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3f14:	b480      	push	{r7}
    3f16:	b083      	sub	sp, #12
    3f18:	af00      	add	r7, sp, #0
    3f1a:	6078      	str	r0, [r7, #4]
}
    3f1c:	370c      	adds	r7, #12
    3f1e:	46bd      	mov	sp, r7
    3f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f24:	4770      	bx	lr
    3f26:	bf00      	nop

00003f28 <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3f28:	b580      	push	{r7, lr}
    3f2a:	b082      	sub	sp, #8
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3f30:	f00d f95a 	bl	111e8 <link_fbw_send>
}
    3f34:	3708      	adds	r7, #8
    3f36:	46bd      	mov	sp, r7
    3f38:	bd80      	pop	{r7, pc}
    3f3a:	bf00      	nop

00003f3c <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3f3c:	b480      	push	{r7}
    3f3e:	b083      	sub	sp, #12
    3f40:	af00      	add	r7, sp, #0
    3f42:	6078      	str	r0, [r7, #4]
    3f44:	370c      	adds	r7, #12
    3f46:	46bd      	mov	sp, r7
    3f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f4c:	4770      	bx	lr
    3f4e:	bf00      	nop

00003f50 <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    3f50:	b480      	push	{r7}
    3f52:	b083      	sub	sp, #12
    3f54:	af00      	add	r7, sp, #0
    3f56:	6078      	str	r0, [r7, #4]
}
    3f58:	370c      	adds	r7, #12
    3f5a:	46bd      	mov	sp, r7
    3f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f60:	4770      	bx	lr
    3f62:	bf00      	nop

00003f64 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b082      	sub	sp, #8
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    3f6c:	f00d fc14 	bl	11798 <parse_gps_msg>
}
    3f70:	3708      	adds	r7, #8
    3f72:	46bd      	mov	sp, r7
    3f74:	bd80      	pop	{r7, pc}
    3f76:	bf00      	nop

00003f78 <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    3f78:	b580      	push	{r7, lr}
    3f7a:	b082      	sub	sp, #8
    3f7c:	af00      	add	r7, sp, #0
    3f7e:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3f80:	f00a fe32 	bl	ebe8 <send_gps_pos>
    send_radIR();
    3f84:	f00b fff6 	bl	ff74 <send_radIR>
    send_takeOff();
    3f88:	f00c fdee 	bl	10b68 <send_takeOff>
}
    3f8c:	3708      	adds	r7, #8
    3f8e:	46bd      	mov	sp, r7
    3f90:	bd80      	pop	{r7, pc}
    3f92:	bf00      	nop

00003f94 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    3f94:	b480      	push	{r7}
    3f96:	b083      	sub	sp, #12
    3f98:	af00      	add	r7, sp, #0
    3f9a:	6078      	str	r0, [r7, #4]
    3f9c:	370c      	adds	r7, #12
    3f9e:	46bd      	mov	sp, r7
    3fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fa4:	4770      	bx	lr
    3fa6:	bf00      	nop

00003fa8 <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    3fa8:	b480      	push	{r7}
    3faa:	b083      	sub	sp, #12
    3fac:	af00      	add	r7, sp, #0
    3fae:	6078      	str	r0, [r7, #4]
}
    3fb0:	370c      	adds	r7, #12
    3fb2:	46bd      	mov	sp, r7
    3fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fb8:	4770      	bx	lr
    3fba:	bf00      	nop

00003fbc <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    3fbc:	b580      	push	{r7, lr}
    3fbe:	b082      	sub	sp, #8
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    3fc4:	f010 fea8 	bl	14d18 <nav_home>
}
    3fc8:	3708      	adds	r7, #8
    3fca:	46bd      	mov	sp, r7
    3fcc:	bd80      	pop	{r7, pc}
    3fce:	bf00      	nop

00003fd0 <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    3fd0:	b580      	push	{r7, lr}
    3fd2:	b082      	sub	sp, #8
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    3fd8:	f010 fec4 	bl	14d64 <nav_update>
}
    3fdc:	3708      	adds	r7, #8
    3fde:	46bd      	mov	sp, r7
    3fe0:	bd80      	pop	{r7, pc}
    3fe2:	bf00      	nop

00003fe4 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    3fe4:	b580      	push	{r7, lr}
    3fe6:	b082      	sub	sp, #8
    3fe8:	af00      	add	r7, sp, #0
    3fea:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    3fec:	f00d ffe4 	bl	11fb8 <course_pid_run>
}
    3ff0:	3708      	adds	r7, #8
    3ff2:	46bd      	mov	sp, r7
    3ff4:	bd80      	pop	{r7, pc}
    3ff6:	bf00      	nop

00003ff8 <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    3ff8:	b480      	push	{r7}
    3ffa:	b083      	sub	sp, #12
    3ffc:	af00      	add	r7, sp, #0
    3ffe:	6078      	str	r0, [r7, #4]
    4000:	370c      	adds	r7, #12
    4002:	46bd      	mov	sp, r7
    4004:	f85d 7b04 	ldr.w	r7, [sp], #4
    4008:	4770      	bx	lr
    400a:	bf00      	nop

0000400c <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    400c:	b480      	push	{r7}
    400e:	b083      	sub	sp, #12
    4010:	af00      	add	r7, sp, #0
    4012:	6078      	str	r0, [r7, #4]
}
    4014:	370c      	adds	r7, #12
    4016:	46bd      	mov	sp, r7
    4018:	f85d 7b04 	ldr.w	r7, [sp], #4
    401c:	4770      	bx	lr
    401e:	bf00      	nop

00004020 <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    4020:	b580      	push	{r7, lr}
    4022:	b082      	sub	sp, #8
    4024:	af00      	add	r7, sp, #0
    4026:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    4028:	f00e fa4e 	bl	124c8 <altitude_pid_run>
}
    402c:	3708      	adds	r7, #8
    402e:	46bd      	mov	sp, r7
    4030:	bd80      	pop	{r7, pc}
    4032:	bf00      	nop

00004034 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    4034:	b480      	push	{r7}
    4036:	b083      	sub	sp, #12
    4038:	af00      	add	r7, sp, #0
    403a:	6078      	str	r0, [r7, #4]
    403c:	370c      	adds	r7, #12
    403e:	46bd      	mov	sp, r7
    4040:	f85d 7b04 	ldr.w	r7, [sp], #4
    4044:	4770      	bx	lr
    4046:	bf00      	nop

00004048 <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    4048:	b480      	push	{r7}
    404a:	b083      	sub	sp, #12
    404c:	af00      	add	r7, sp, #0
    404e:	6078      	str	r0, [r7, #4]
}
    4050:	370c      	adds	r7, #12
    4052:	46bd      	mov	sp, r7
    4054:	f85d 7b04 	ldr.w	r7, [sp], #4
    4058:	4770      	bx	lr
    405a:	bf00      	nop

0000405c <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    405c:	b580      	push	{r7, lr}
    405e:	b082      	sub	sp, #8
    4060:	af00      	add	r7, sp, #0
    4062:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    4064:	f00e f860 	bl	12128 <climb_pid_run>
}
    4068:	3708      	adds	r7, #8
    406a:	46bd      	mov	sp, r7
    406c:	bd80      	pop	{r7, pc}
    406e:	bf00      	nop

00004070 <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    4070:	b480      	push	{r7}
    4072:	b083      	sub	sp, #12
    4074:	af00      	add	r7, sp, #0
    4076:	6078      	str	r0, [r7, #4]
    4078:	370c      	adds	r7, #12
    407a:	46bd      	mov	sp, r7
    407c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4080:	4770      	bx	lr
    4082:	bf00      	nop

00004084 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    4084:	b480      	push	{r7}
    4086:	b083      	sub	sp, #12
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
}
    408c:	370c      	adds	r7, #12
    408e:	46bd      	mov	sp, r7
    4090:	f85d 7b04 	ldr.w	r7, [sp], #4
    4094:	4770      	bx	lr
    4096:	bf00      	nop

00004098 <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    4098:	b580      	push	{r7, lr}
    409a:	b082      	sub	sp, #8
    409c:	af00      	add	r7, sp, #0
    409e:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    40a0:	f003 fa84 	bl	75ac <send_boot>
    send_attitude();
    40a4:	f004 fa52 	bl	854c <send_attitude>
    send_adc();
    40a8:	f004 ff44 	bl	8f34 <send_adc>
    send_settings();
    40ac:	f005 f9ca 	bl	9444 <send_settings>
    send_desired();
    40b0:	f005 fdcc 	bl	9c4c <send_desired>
    send_bat();
    40b4:	f006 fcfa 	bl	aaac <send_bat>
    send_climb();
    40b8:	f007 f8ae 	bl	b218 <send_climb>
    send_mode();
    40bc:	f007 fe1e 	bl	bcfc <send_mode>
    send_debug();
    40c0:	f008 f8f0 	bl	c2a4 <send_debug>
    send_nav_ref();
    40c4:	f008 fbc4 	bl	c850 <send_nav_ref>
}
    40c8:	3708      	adds	r7, #8
    40ca:	46bd      	mov	sp, r7
    40cc:	bd80      	pop	{r7, pc}
    40ce:	bf00      	nop

000040d0 <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    40d0:	b480      	push	{r7}
    40d2:	b083      	sub	sp, #12
    40d4:	af00      	add	r7, sp, #0
    40d6:	6078      	str	r0, [r7, #4]
    40d8:	370c      	adds	r7, #12
    40da:	46bd      	mov	sp, r7
    40dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e0:	4770      	bx	lr
    40e2:	bf00      	nop

000040e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    40e4:	b480      	push	{r7}
    40e6:	b083      	sub	sp, #12
    40e8:	af00      	add	r7, sp, #0
    40ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	f103 0208 	add.w	r2, r3, #8
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    40f6:	687b      	ldr	r3, [r7, #4]
    40f8:	f04f 32ff 	mov.w	r2, #4294967295
    40fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    40fe:	687b      	ldr	r3, [r7, #4]
    4100:	f103 0208 	add.w	r2, r3, #8
    4104:	687b      	ldr	r3, [r7, #4]
    4106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    4108:	687b      	ldr	r3, [r7, #4]
    410a:	f103 0208 	add.w	r2, r3, #8
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	2200      	movs	r2, #0
    4116:	601a      	str	r2, [r3, #0]
}
    4118:	370c      	adds	r7, #12
    411a:	46bd      	mov	sp, r7
    411c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4120:	4770      	bx	lr
    4122:	bf00      	nop

00004124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    4124:	b480      	push	{r7}
    4126:	b083      	sub	sp, #12
    4128:	af00      	add	r7, sp, #0
    412a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	2200      	movs	r2, #0
    4130:	611a      	str	r2, [r3, #16]
}
    4132:	370c      	adds	r7, #12
    4134:	46bd      	mov	sp, r7
    4136:	f85d 7b04 	ldr.w	r7, [sp], #4
    413a:	4770      	bx	lr

0000413c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    413c:	b480      	push	{r7}
    413e:	b085      	sub	sp, #20
    4140:	af00      	add	r7, sp, #0
    4142:	6078      	str	r0, [r7, #4]
    4144:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	685b      	ldr	r3, [r3, #4]
    414a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    414c:	68fb      	ldr	r3, [r7, #12]
    414e:	685a      	ldr	r2, [r3, #4]
    4150:	683b      	ldr	r3, [r7, #0]
    4152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4154:	687b      	ldr	r3, [r7, #4]
    4156:	685a      	ldr	r2, [r3, #4]
    4158:	683b      	ldr	r3, [r7, #0]
    415a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    415c:	68fb      	ldr	r3, [r7, #12]
    415e:	685b      	ldr	r3, [r3, #4]
    4160:	683a      	ldr	r2, [r7, #0]
    4162:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4164:	68fb      	ldr	r3, [r7, #12]
    4166:	683a      	ldr	r2, [r7, #0]
    4168:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    416a:	687b      	ldr	r3, [r7, #4]
    416c:	683a      	ldr	r2, [r7, #0]
    416e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4170:	683b      	ldr	r3, [r7, #0]
    4172:	687a      	ldr	r2, [r7, #4]
    4174:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    4176:	687b      	ldr	r3, [r7, #4]
    4178:	681b      	ldr	r3, [r3, #0]
    417a:	1c5a      	adds	r2, r3, #1
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	601a      	str	r2, [r3, #0]
}
    4180:	3714      	adds	r7, #20
    4182:	46bd      	mov	sp, r7
    4184:	f85d 7b04 	ldr.w	r7, [sp], #4
    4188:	4770      	bx	lr
    418a:	bf00      	nop

0000418c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    418c:	b480      	push	{r7}
    418e:	b085      	sub	sp, #20
    4190:	af00      	add	r7, sp, #0
    4192:	6078      	str	r0, [r7, #4]
    4194:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    4196:	683b      	ldr	r3, [r7, #0]
    4198:	681b      	ldr	r3, [r3, #0]
    419a:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    419c:	68bb      	ldr	r3, [r7, #8]
    419e:	f1b3 3fff 	cmp.w	r3, #4294967295
    41a2:	d103      	bne.n	41ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	691b      	ldr	r3, [r3, #16]
    41a8:	60fb      	str	r3, [r7, #12]
    41aa:	e00c      	b.n	41c6 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	3308      	adds	r3, #8
    41b0:	60fb      	str	r3, [r7, #12]
    41b2:	e002      	b.n	41ba <vListInsert+0x2e>
    41b4:	68fb      	ldr	r3, [r7, #12]
    41b6:	685b      	ldr	r3, [r3, #4]
    41b8:	60fb      	str	r3, [r7, #12]
    41ba:	68fb      	ldr	r3, [r7, #12]
    41bc:	685b      	ldr	r3, [r3, #4]
    41be:	681a      	ldr	r2, [r3, #0]
    41c0:	68bb      	ldr	r3, [r7, #8]
    41c2:	429a      	cmp	r2, r3
    41c4:	d9f6      	bls.n	41b4 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    41c6:	68fb      	ldr	r3, [r7, #12]
    41c8:	685a      	ldr	r2, [r3, #4]
    41ca:	683b      	ldr	r3, [r7, #0]
    41cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    41ce:	683b      	ldr	r3, [r7, #0]
    41d0:	685b      	ldr	r3, [r3, #4]
    41d2:	683a      	ldr	r2, [r7, #0]
    41d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    41d6:	683b      	ldr	r3, [r7, #0]
    41d8:	68fa      	ldr	r2, [r7, #12]
    41da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    41dc:	68fb      	ldr	r3, [r7, #12]
    41de:	683a      	ldr	r2, [r7, #0]
    41e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    41e2:	683b      	ldr	r3, [r7, #0]
    41e4:	687a      	ldr	r2, [r7, #4]
    41e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	681b      	ldr	r3, [r3, #0]
    41ec:	1c5a      	adds	r2, r3, #1
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	601a      	str	r2, [r3, #0]
}
    41f2:	3714      	adds	r7, #20
    41f4:	46bd      	mov	sp, r7
    41f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    41fa:	4770      	bx	lr

000041fc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    41fc:	b480      	push	{r7}
    41fe:	b085      	sub	sp, #20
    4200:	af00      	add	r7, sp, #0
    4202:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	685b      	ldr	r3, [r3, #4]
    4208:	687a      	ldr	r2, [r7, #4]
    420a:	6892      	ldr	r2, [r2, #8]
    420c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    420e:	687b      	ldr	r3, [r7, #4]
    4210:	689b      	ldr	r3, [r3, #8]
    4212:	687a      	ldr	r2, [r7, #4]
    4214:	6852      	ldr	r2, [r2, #4]
    4216:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    4218:	687b      	ldr	r3, [r7, #4]
    421a:	691b      	ldr	r3, [r3, #16]
    421c:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    421e:	68fb      	ldr	r3, [r7, #12]
    4220:	685a      	ldr	r2, [r3, #4]
    4222:	687b      	ldr	r3, [r7, #4]
    4224:	429a      	cmp	r2, r3
    4226:	d103      	bne.n	4230 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4228:	687b      	ldr	r3, [r7, #4]
    422a:	689a      	ldr	r2, [r3, #8]
    422c:	68fb      	ldr	r3, [r7, #12]
    422e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	2200      	movs	r2, #0
    4234:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    4236:	68fb      	ldr	r3, [r7, #12]
    4238:	681b      	ldr	r3, [r3, #0]
    423a:	1e5a      	subs	r2, r3, #1
    423c:	68fb      	ldr	r3, [r7, #12]
    423e:	601a      	str	r2, [r3, #0]
}
    4240:	3714      	adds	r7, #20
    4242:	46bd      	mov	sp, r7
    4244:	f85d 7b04 	ldr.w	r7, [sp], #4
    4248:	4770      	bx	lr
    424a:	bf00      	nop

0000424c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    424c:	b580      	push	{r7, lr}
    424e:	b084      	sub	sp, #16
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
    4254:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    4256:	2301      	movs	r3, #1
    4258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    425a:	683b      	ldr	r3, [r7, #0]
    425c:	2b01      	cmp	r3, #1
    425e:	d00b      	beq.n	4278 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4260:	687b      	ldr	r3, [r7, #4]
    4262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4264:	2b00      	cmp	r3, #0
    4266:	d001      	beq.n	426c <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    4268:	2300      	movs	r3, #0
    426a:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	691b      	ldr	r3, [r3, #16]
    4270:	2b00      	cmp	r3, #0
    4272:	d001      	beq.n	4278 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4274:	2300      	movs	r3, #0
    4276:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    4278:	68fb      	ldr	r3, [r7, #12]
    427a:	2b01      	cmp	r3, #1
    427c:	d12f      	bne.n	42de <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	681a      	ldr	r2, [r3, #0]
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4286:	6879      	ldr	r1, [r7, #4]
    4288:	6c09      	ldr	r1, [r1, #64]	; 0x40
    428a:	fb01 f303 	mul.w	r3, r1, r3
    428e:	441a      	add	r2, r3
    4290:	687b      	ldr	r3, [r7, #4]
    4292:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	2200      	movs	r2, #0
    4298:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	681a      	ldr	r2, [r3, #0]
    429e:	687b      	ldr	r3, [r7, #4]
    42a0:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	681a      	ldr	r2, [r3, #0]
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42aa:	3b01      	subs	r3, #1
    42ac:	6879      	ldr	r1, [r7, #4]
    42ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
    42b0:	fb01 f303 	mul.w	r3, r1, r3
    42b4:	441a      	add	r2, r3
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    42ba:	687b      	ldr	r3, [r7, #4]
    42bc:	f04f 32ff 	mov.w	r2, #4294967295
    42c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    42c2:	687b      	ldr	r3, [r7, #4]
    42c4:	f04f 32ff 	mov.w	r2, #4294967295
    42c8:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    42ca:	687b      	ldr	r3, [r7, #4]
    42cc:	3310      	adds	r3, #16
    42ce:	4618      	mov	r0, r3
    42d0:	f7ff ff08 	bl	40e4 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    42d4:	687b      	ldr	r3, [r7, #4]
    42d6:	3324      	adds	r3, #36	; 0x24
    42d8:	4618      	mov	r0, r3
    42da:	f7ff ff03 	bl	40e4 <vListInitialise>
	}

	return xReturn;
    42de:	68fb      	ldr	r3, [r7, #12]
}
    42e0:	4618      	mov	r0, r3
    42e2:	3710      	adds	r7, #16
    42e4:	46bd      	mov	sp, r7
    42e6:	bd80      	pop	{r7, pc}

000042e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    42e8:	b580      	push	{r7, lr}
    42ea:	b088      	sub	sp, #32
    42ec:	af00      	add	r7, sp, #0
    42ee:	60f8      	str	r0, [r7, #12]
    42f0:	60b9      	str	r1, [r7, #8]
    42f2:	4613      	mov	r3, r2
    42f4:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    42f6:	2300      	movs	r3, #0
    42f8:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    42fa:	68fb      	ldr	r3, [r7, #12]
    42fc:	2b00      	cmp	r3, #0
    42fe:	d026      	beq.n	434e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4300:	204c      	movs	r0, #76	; 0x4c
    4302:	f001 fda7 	bl	5e54 <pvPortMalloc>
    4306:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    4308:	69bb      	ldr	r3, [r7, #24]
    430a:	2b00      	cmp	r3, #0
    430c:	d01f      	beq.n	434e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    430e:	68fb      	ldr	r3, [r7, #12]
    4310:	68ba      	ldr	r2, [r7, #8]
    4312:	fb02 f303 	mul.w	r3, r2, r3
    4316:	3301      	adds	r3, #1
    4318:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    431a:	6978      	ldr	r0, [r7, #20]
    431c:	f001 fd9a 	bl	5e54 <pvPortMalloc>
    4320:	4602      	mov	r2, r0
    4322:	69bb      	ldr	r3, [r7, #24]
    4324:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    4326:	69bb      	ldr	r3, [r7, #24]
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	2b00      	cmp	r3, #0
    432c:	d00c      	beq.n	4348 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    432e:	69bb      	ldr	r3, [r7, #24]
    4330:	68fa      	ldr	r2, [r7, #12]
    4332:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4334:	69bb      	ldr	r3, [r7, #24]
    4336:	68ba      	ldr	r2, [r7, #8]
    4338:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    433a:	69b8      	ldr	r0, [r7, #24]
    433c:	2101      	movs	r1, #1
    433e:	f7ff ff85 	bl	424c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4342:	69bb      	ldr	r3, [r7, #24]
    4344:	61fb      	str	r3, [r7, #28]
    4346:	e002      	b.n	434e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    4348:	69b8      	ldr	r0, [r7, #24]
    434a:	f001 fe47 	bl	5fdc <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    434e:	69fb      	ldr	r3, [r7, #28]
}
    4350:	4618      	mov	r0, r3
    4352:	3720      	adds	r7, #32
    4354:	46bd      	mov	sp, r7
    4356:	bd80      	pop	{r7, pc}

00004358 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    4358:	b580      	push	{r7, lr}
    435a:	b084      	sub	sp, #16
    435c:	af00      	add	r7, sp, #0
    435e:	4603      	mov	r3, r0
    4360:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4362:	204c      	movs	r0, #76	; 0x4c
    4364:	f001 fd76 	bl	5e54 <pvPortMalloc>
    4368:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    436a:	68fb      	ldr	r3, [r7, #12]
    436c:	2b00      	cmp	r3, #0
    436e:	d02c      	beq.n	43ca <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4370:	68fb      	ldr	r3, [r7, #12]
    4372:	2200      	movs	r2, #0
    4374:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4376:	68fb      	ldr	r3, [r7, #12]
    4378:	2200      	movs	r2, #0
    437a:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    437c:	68fb      	ldr	r3, [r7, #12]
    437e:	2200      	movs	r2, #0
    4380:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4382:	68fb      	ldr	r3, [r7, #12]
    4384:	2200      	movs	r2, #0
    4386:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4388:	68fb      	ldr	r3, [r7, #12]
    438a:	2200      	movs	r2, #0
    438c:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    438e:	68fb      	ldr	r3, [r7, #12]
    4390:	2201      	movs	r2, #1
    4392:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4394:	68fb      	ldr	r3, [r7, #12]
    4396:	2200      	movs	r2, #0
    4398:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	f04f 32ff 	mov.w	r2, #4294967295
    43a0:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    43a2:	68fb      	ldr	r3, [r7, #12]
    43a4:	f04f 32ff 	mov.w	r2, #4294967295
    43a8:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    43aa:	68fb      	ldr	r3, [r7, #12]
    43ac:	3310      	adds	r3, #16
    43ae:	4618      	mov	r0, r3
    43b0:	f7ff fe98 	bl	40e4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    43b4:	68fb      	ldr	r3, [r7, #12]
    43b6:	3324      	adds	r3, #36	; 0x24
    43b8:	4618      	mov	r0, r3
    43ba:	f7ff fe93 	bl	40e4 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    43be:	68f8      	ldr	r0, [r7, #12]
    43c0:	2100      	movs	r1, #0
    43c2:	2200      	movs	r2, #0
    43c4:	2300      	movs	r3, #0
    43c6:	f000 f81d 	bl	4404 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    43ca:	68fb      	ldr	r3, [r7, #12]
	}
    43cc:	4618      	mov	r0, r3
    43ce:	3710      	adds	r7, #16
    43d0:	46bd      	mov	sp, r7
    43d2:	bd80      	pop	{r7, pc}

000043d4 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    43d4:	b580      	push	{r7, lr}
    43d6:	b084      	sub	sp, #16
    43d8:	af00      	add	r7, sp, #0
    43da:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    43dc:	f001 fcc0 	bl	5d60 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	681b      	ldr	r3, [r3, #0]
    43e4:	2b00      	cmp	r3, #0
    43e6:	d103      	bne.n	43f0 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    43e8:	687b      	ldr	r3, [r7, #4]
    43ea:	685b      	ldr	r3, [r3, #4]
    43ec:	60fb      	str	r3, [r7, #12]
    43ee:	e001      	b.n	43f4 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    43f0:	2300      	movs	r3, #0
    43f2:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    43f4:	f001 fcca 	bl	5d8c <vPortExitCritical>
		
		return pxReturn;
    43f8:	68fb      	ldr	r3, [r7, #12]
	}
    43fa:	4618      	mov	r0, r3
    43fc:	3710      	adds	r7, #16
    43fe:	46bd      	mov	sp, r7
    4400:	bd80      	pop	{r7, pc}
    4402:	bf00      	nop

00004404 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    4404:	b580      	push	{r7, lr}
    4406:	b088      	sub	sp, #32
    4408:	af00      	add	r7, sp, #0
    440a:	60f8      	str	r0, [r7, #12]
    440c:	60b9      	str	r1, [r7, #8]
    440e:	607a      	str	r2, [r7, #4]
    4410:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4412:	2300      	movs	r3, #0
    4414:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    4416:	f001 fca3 	bl	5d60 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    441a:	68fb      	ldr	r3, [r7, #12]
    441c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    441e:	68fb      	ldr	r3, [r7, #12]
    4420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4422:	429a      	cmp	r2, r3
    4424:	d216      	bcs.n	4454 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4426:	68f8      	ldr	r0, [r7, #12]
    4428:	68b9      	ldr	r1, [r7, #8]
    442a:	683a      	ldr	r2, [r7, #0]
    442c:	f000 f9d6 	bl	47dc <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4430:	68fb      	ldr	r3, [r7, #12]
    4432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4434:	2b00      	cmp	r3, #0
    4436:	d009      	beq.n	444c <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	3324      	adds	r3, #36	; 0x24
    443c:	4618      	mov	r0, r3
    443e:	f001 f905 	bl	564c <xTaskRemoveFromEventList>
    4442:	4603      	mov	r3, r0
    4444:	2b01      	cmp	r3, #1
    4446:	d101      	bne.n	444c <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    4448:	f001 fc7c 	bl	5d44 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    444c:	f001 fc9e 	bl	5d8c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4450:	2301      	movs	r3, #1
    4452:	e059      	b.n	4508 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4454:	687b      	ldr	r3, [r7, #4]
    4456:	2b00      	cmp	r3, #0
    4458:	d103      	bne.n	4462 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    445a:	f001 fc97 	bl	5d8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    445e:	2300      	movs	r3, #0
    4460:	e052      	b.n	4508 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4462:	69fb      	ldr	r3, [r7, #28]
    4464:	2b00      	cmp	r3, #0
    4466:	d106      	bne.n	4476 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4468:	f107 0314 	add.w	r3, r7, #20
    446c:	4618      	mov	r0, r3
    446e:	f001 f945 	bl	56fc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4472:	2301      	movs	r3, #1
    4474:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4476:	f001 fc89 	bl	5d8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    447a:	f000 fe93 	bl	51a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    447e:	f001 fc6f 	bl	5d60 <vPortEnterCritical>
    4482:	68fb      	ldr	r3, [r7, #12]
    4484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4486:	f1b3 3fff 	cmp.w	r3, #4294967295
    448a:	d102      	bne.n	4492 <xQueueGenericSend+0x8e>
    448c:	68fb      	ldr	r3, [r7, #12]
    448e:	2200      	movs	r2, #0
    4490:	645a      	str	r2, [r3, #68]	; 0x44
    4492:	68fb      	ldr	r3, [r7, #12]
    4494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4496:	f1b3 3fff 	cmp.w	r3, #4294967295
    449a:	d102      	bne.n	44a2 <xQueueGenericSend+0x9e>
    449c:	68fb      	ldr	r3, [r7, #12]
    449e:	2200      	movs	r2, #0
    44a0:	649a      	str	r2, [r3, #72]	; 0x48
    44a2:	f001 fc73 	bl	5d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    44a6:	f107 0214 	add.w	r2, r7, #20
    44aa:	1d3b      	adds	r3, r7, #4
    44ac:	4610      	mov	r0, r2
    44ae:	4619      	mov	r1, r3
    44b0:	f001 f93c 	bl	572c <xTaskCheckForTimeOut>
    44b4:	4603      	mov	r3, r0
    44b6:	2b00      	cmp	r3, #0
    44b8:	d11e      	bne.n	44f8 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    44ba:	68f8      	ldr	r0, [r7, #12]
    44bc:	f000 fa86 	bl	49cc <prvIsQueueFull>
    44c0:	4603      	mov	r3, r0
    44c2:	2b00      	cmp	r3, #0
    44c4:	d012      	beq.n	44ec <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    44c6:	68fb      	ldr	r3, [r7, #12]
    44c8:	f103 0210 	add.w	r2, r3, #16
    44cc:	687b      	ldr	r3, [r7, #4]
    44ce:	4610      	mov	r0, r2
    44d0:	4619      	mov	r1, r3
    44d2:	f001 f883 	bl	55dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    44d6:	68f8      	ldr	r0, [r7, #12]
    44d8:	f000 fa02 	bl	48e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    44dc:	f000 fe74 	bl	51c8 <xTaskResumeAll>
    44e0:	4603      	mov	r3, r0
    44e2:	2b00      	cmp	r3, #0
    44e4:	d10f      	bne.n	4506 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    44e6:	f001 fc2d 	bl	5d44 <vPortYieldFromISR>
    44ea:	e00c      	b.n	4506 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    44ec:	68f8      	ldr	r0, [r7, #12]
    44ee:	f000 f9f7 	bl	48e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    44f2:	f000 fe69 	bl	51c8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    44f6:	e78e      	b.n	4416 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    44f8:	68f8      	ldr	r0, [r7, #12]
    44fa:	f000 f9f1 	bl	48e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    44fe:	f000 fe63 	bl	51c8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    4502:	2300      	movs	r3, #0
    4504:	e000      	b.n	4508 <xQueueGenericSend+0x104>
		}
	}
    4506:	e786      	b.n	4416 <xQueueGenericSend+0x12>
}
    4508:	4618      	mov	r0, r3
    450a:	3720      	adds	r7, #32
    450c:	46bd      	mov	sp, r7
    450e:	bd80      	pop	{r7, pc}

00004510 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    4510:	b580      	push	{r7, lr}
    4512:	b086      	sub	sp, #24
    4514:	af00      	add	r7, sp, #0
    4516:	60f8      	str	r0, [r7, #12]
    4518:	60b9      	str	r1, [r7, #8]
    451a:	607a      	str	r2, [r7, #4]
    451c:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    451e:	2300      	movs	r3, #0
    4520:	613b      	str	r3, [r7, #16]
    4522:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4526:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    452a:	68fb      	ldr	r3, [r7, #12]
    452c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    452e:	68fb      	ldr	r3, [r7, #12]
    4530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4532:	429a      	cmp	r2, r3
    4534:	d221      	bcs.n	457a <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4536:	68f8      	ldr	r0, [r7, #12]
    4538:	68b9      	ldr	r1, [r7, #8]
    453a:	683a      	ldr	r2, [r7, #0]
    453c:	f000 f94e 	bl	47dc <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4540:	68fb      	ldr	r3, [r7, #12]
    4542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4544:	f1b3 3fff 	cmp.w	r3, #4294967295
    4548:	d10f      	bne.n	456a <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    454a:	68fb      	ldr	r3, [r7, #12]
    454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    454e:	2b00      	cmp	r3, #0
    4550:	d010      	beq.n	4574 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4552:	68fb      	ldr	r3, [r7, #12]
    4554:	3324      	adds	r3, #36	; 0x24
    4556:	4618      	mov	r0, r3
    4558:	f001 f878 	bl	564c <xTaskRemoveFromEventList>
    455c:	4603      	mov	r3, r0
    455e:	2b00      	cmp	r3, #0
    4560:	d008      	beq.n	4574 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4562:	687b      	ldr	r3, [r7, #4]
    4564:	2201      	movs	r2, #1
    4566:	601a      	str	r2, [r3, #0]
    4568:	e004      	b.n	4574 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    456a:	68fb      	ldr	r3, [r7, #12]
    456c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    456e:	1c5a      	adds	r2, r3, #1
    4570:	68fb      	ldr	r3, [r7, #12]
    4572:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4574:	2301      	movs	r3, #1
    4576:	617b      	str	r3, [r7, #20]
    4578:	e001      	b.n	457e <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    457a:	2300      	movs	r3, #0
    457c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    457e:	f04f 0000 	mov.w	r0, #0
    4582:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4586:	697b      	ldr	r3, [r7, #20]
}
    4588:	4618      	mov	r0, r3
    458a:	3718      	adds	r7, #24
    458c:	46bd      	mov	sp, r7
    458e:	bd80      	pop	{r7, pc}

00004590 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4590:	b580      	push	{r7, lr}
    4592:	b088      	sub	sp, #32
    4594:	af00      	add	r7, sp, #0
    4596:	60f8      	str	r0, [r7, #12]
    4598:	60b9      	str	r1, [r7, #8]
    459a:	607a      	str	r2, [r7, #4]
    459c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    459e:	2300      	movs	r3, #0
    45a0:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    45a2:	f001 fbdd 	bl	5d60 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    45a6:	68fb      	ldr	r3, [r7, #12]
    45a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45aa:	2b00      	cmp	r3, #0
    45ac:	d03b      	beq.n	4626 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    45ae:	68fb      	ldr	r3, [r7, #12]
    45b0:	68db      	ldr	r3, [r3, #12]
    45b2:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    45b4:	68f8      	ldr	r0, [r7, #12]
    45b6:	68b9      	ldr	r1, [r7, #8]
    45b8:	f000 f96c 	bl	4894 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    45bc:	683b      	ldr	r3, [r7, #0]
    45be:	2b00      	cmp	r3, #0
    45c0:	d11c      	bne.n	45fc <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    45c2:	68fb      	ldr	r3, [r7, #12]
    45c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45c6:	1e5a      	subs	r2, r3, #1
    45c8:	68fb      	ldr	r3, [r7, #12]
    45ca:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    45cc:	68fb      	ldr	r3, [r7, #12]
    45ce:	681b      	ldr	r3, [r3, #0]
    45d0:	2b00      	cmp	r3, #0
    45d2:	d104      	bne.n	45de <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    45d4:	f001 fa5c 	bl	5a90 <xTaskGetCurrentTaskHandle>
    45d8:	4602      	mov	r2, r0
    45da:	68fb      	ldr	r3, [r7, #12]
    45dc:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    45de:	68fb      	ldr	r3, [r7, #12]
    45e0:	691b      	ldr	r3, [r3, #16]
    45e2:	2b00      	cmp	r3, #0
    45e4:	d01b      	beq.n	461e <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    45e6:	68fb      	ldr	r3, [r7, #12]
    45e8:	3310      	adds	r3, #16
    45ea:	4618      	mov	r0, r3
    45ec:	f001 f82e 	bl	564c <xTaskRemoveFromEventList>
    45f0:	4603      	mov	r3, r0
    45f2:	2b01      	cmp	r3, #1
    45f4:	d113      	bne.n	461e <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    45f6:	f001 fba5 	bl	5d44 <vPortYieldFromISR>
    45fa:	e010      	b.n	461e <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    45fc:	68fb      	ldr	r3, [r7, #12]
    45fe:	69ba      	ldr	r2, [r7, #24]
    4600:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4602:	68fb      	ldr	r3, [r7, #12]
    4604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4606:	2b00      	cmp	r3, #0
    4608:	d009      	beq.n	461e <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    460a:	68fb      	ldr	r3, [r7, #12]
    460c:	3324      	adds	r3, #36	; 0x24
    460e:	4618      	mov	r0, r3
    4610:	f001 f81c 	bl	564c <xTaskRemoveFromEventList>
    4614:	4603      	mov	r3, r0
    4616:	2b00      	cmp	r3, #0
    4618:	d001      	beq.n	461e <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    461a:	f001 fb93 	bl	5d44 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    461e:	f001 fbb5 	bl	5d8c <vPortExitCritical>
				return pdPASS;
    4622:	2301      	movs	r3, #1
    4624:	e066      	b.n	46f4 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4626:	687b      	ldr	r3, [r7, #4]
    4628:	2b00      	cmp	r3, #0
    462a:	d103      	bne.n	4634 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    462c:	f001 fbae 	bl	5d8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4630:	2300      	movs	r3, #0
    4632:	e05f      	b.n	46f4 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4634:	69fb      	ldr	r3, [r7, #28]
    4636:	2b00      	cmp	r3, #0
    4638:	d106      	bne.n	4648 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    463a:	f107 0310 	add.w	r3, r7, #16
    463e:	4618      	mov	r0, r3
    4640:	f001 f85c 	bl	56fc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4644:	2301      	movs	r3, #1
    4646:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4648:	f001 fba0 	bl	5d8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    464c:	f000 fdaa 	bl	51a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4650:	f001 fb86 	bl	5d60 <vPortEnterCritical>
    4654:	68fb      	ldr	r3, [r7, #12]
    4656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4658:	f1b3 3fff 	cmp.w	r3, #4294967295
    465c:	d102      	bne.n	4664 <xQueueGenericReceive+0xd4>
    465e:	68fb      	ldr	r3, [r7, #12]
    4660:	2200      	movs	r2, #0
    4662:	645a      	str	r2, [r3, #68]	; 0x44
    4664:	68fb      	ldr	r3, [r7, #12]
    4666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4668:	f1b3 3fff 	cmp.w	r3, #4294967295
    466c:	d102      	bne.n	4674 <xQueueGenericReceive+0xe4>
    466e:	68fb      	ldr	r3, [r7, #12]
    4670:	2200      	movs	r2, #0
    4672:	649a      	str	r2, [r3, #72]	; 0x48
    4674:	f001 fb8a 	bl	5d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4678:	f107 0210 	add.w	r2, r7, #16
    467c:	1d3b      	adds	r3, r7, #4
    467e:	4610      	mov	r0, r2
    4680:	4619      	mov	r1, r3
    4682:	f001 f853 	bl	572c <xTaskCheckForTimeOut>
    4686:	4603      	mov	r3, r0
    4688:	2b00      	cmp	r3, #0
    468a:	d12b      	bne.n	46e4 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    468c:	68f8      	ldr	r0, [r7, #12]
    468e:	f000 f973 	bl	4978 <prvIsQueueEmpty>
    4692:	4603      	mov	r3, r0
    4694:	2b00      	cmp	r3, #0
    4696:	d01f      	beq.n	46d8 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4698:	68fb      	ldr	r3, [r7, #12]
    469a:	681b      	ldr	r3, [r3, #0]
    469c:	2b00      	cmp	r3, #0
    469e:	d108      	bne.n	46b2 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    46a0:	f001 fb5e 	bl	5d60 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    46a4:	68fb      	ldr	r3, [r7, #12]
    46a6:	685b      	ldr	r3, [r3, #4]
    46a8:	4618      	mov	r0, r3
    46aa:	f001 fa01 	bl	5ab0 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    46ae:	f001 fb6d 	bl	5d8c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    46b2:	68fb      	ldr	r3, [r7, #12]
    46b4:	f103 0224 	add.w	r2, r3, #36	; 0x24
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	4610      	mov	r0, r2
    46bc:	4619      	mov	r1, r3
    46be:	f000 ff8d 	bl	55dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    46c2:	68f8      	ldr	r0, [r7, #12]
    46c4:	f000 f90c 	bl	48e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    46c8:	f000 fd7e 	bl	51c8 <xTaskResumeAll>
    46cc:	4603      	mov	r3, r0
    46ce:	2b00      	cmp	r3, #0
    46d0:	d10f      	bne.n	46f2 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    46d2:	f001 fb37 	bl	5d44 <vPortYieldFromISR>
    46d6:	e00c      	b.n	46f2 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    46d8:	68f8      	ldr	r0, [r7, #12]
    46da:	f000 f901 	bl	48e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    46de:	f000 fd73 	bl	51c8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    46e2:	e75e      	b.n	45a2 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    46e4:	68f8      	ldr	r0, [r7, #12]
    46e6:	f000 f8fb 	bl	48e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    46ea:	f000 fd6d 	bl	51c8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    46ee:	2300      	movs	r3, #0
    46f0:	e000      	b.n	46f4 <xQueueGenericReceive+0x164>
		}
	}
    46f2:	e756      	b.n	45a2 <xQueueGenericReceive+0x12>
}
    46f4:	4618      	mov	r0, r3
    46f6:	3720      	adds	r7, #32
    46f8:	46bd      	mov	sp, r7
    46fa:	bd80      	pop	{r7, pc}

000046fc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    46fc:	b580      	push	{r7, lr}
    46fe:	b086      	sub	sp, #24
    4700:	af00      	add	r7, sp, #0
    4702:	60f8      	str	r0, [r7, #12]
    4704:	60b9      	str	r1, [r7, #8]
    4706:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4708:	2300      	movs	r3, #0
    470a:	613b      	str	r3, [r7, #16]
    470c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4710:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4714:	68fb      	ldr	r3, [r7, #12]
    4716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4718:	2b00      	cmp	r3, #0
    471a:	d025      	beq.n	4768 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    471c:	68f8      	ldr	r0, [r7, #12]
    471e:	68b9      	ldr	r1, [r7, #8]
    4720:	f000 f8b8 	bl	4894 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4724:	68fb      	ldr	r3, [r7, #12]
    4726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4728:	1e5a      	subs	r2, r3, #1
    472a:	68fb      	ldr	r3, [r7, #12]
    472c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    472e:	68fb      	ldr	r3, [r7, #12]
    4730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4732:	f1b3 3fff 	cmp.w	r3, #4294967295
    4736:	d10f      	bne.n	4758 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4738:	68fb      	ldr	r3, [r7, #12]
    473a:	691b      	ldr	r3, [r3, #16]
    473c:	2b00      	cmp	r3, #0
    473e:	d010      	beq.n	4762 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4740:	68fb      	ldr	r3, [r7, #12]
    4742:	3310      	adds	r3, #16
    4744:	4618      	mov	r0, r3
    4746:	f000 ff81 	bl	564c <xTaskRemoveFromEventList>
    474a:	4603      	mov	r3, r0
    474c:	2b00      	cmp	r3, #0
    474e:	d008      	beq.n	4762 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4750:	687b      	ldr	r3, [r7, #4]
    4752:	2201      	movs	r2, #1
    4754:	601a      	str	r2, [r3, #0]
    4756:	e004      	b.n	4762 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4758:	68fb      	ldr	r3, [r7, #12]
    475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    475c:	1c5a      	adds	r2, r3, #1
    475e:	68fb      	ldr	r3, [r7, #12]
    4760:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4762:	2301      	movs	r3, #1
    4764:	617b      	str	r3, [r7, #20]
    4766:	e001      	b.n	476c <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4768:	2300      	movs	r3, #0
    476a:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    476c:	f04f 0000 	mov.w	r0, #0
    4770:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4774:	697b      	ldr	r3, [r7, #20]
}
    4776:	4618      	mov	r0, r3
    4778:	3718      	adds	r7, #24
    477a:	46bd      	mov	sp, r7
    477c:	bd80      	pop	{r7, pc}
    477e:	bf00      	nop

00004780 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4780:	b580      	push	{r7, lr}
    4782:	b084      	sub	sp, #16
    4784:	af00      	add	r7, sp, #0
    4786:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4788:	f001 faea 	bl	5d60 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4790:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4792:	f001 fafb 	bl	5d8c <vPortExitCritical>

	return uxReturn;
    4796:	68fb      	ldr	r3, [r7, #12]
}
    4798:	4618      	mov	r0, r3
    479a:	3710      	adds	r7, #16
    479c:	46bd      	mov	sp, r7
    479e:	bd80      	pop	{r7, pc}

000047a0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    47a0:	b480      	push	{r7}
    47a2:	b085      	sub	sp, #20
    47a4:	af00      	add	r7, sp, #0
    47a6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47ac:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    47ae:	68fb      	ldr	r3, [r7, #12]
}
    47b0:	4618      	mov	r0, r3
    47b2:	3714      	adds	r7, #20
    47b4:	46bd      	mov	sp, r7
    47b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    47ba:	4770      	bx	lr

000047bc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    47bc:	b580      	push	{r7, lr}
    47be:	b082      	sub	sp, #8
    47c0:	af00      	add	r7, sp, #0
    47c2:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    47c4:	687b      	ldr	r3, [r7, #4]
    47c6:	681b      	ldr	r3, [r3, #0]
    47c8:	4618      	mov	r0, r3
    47ca:	f001 fc07 	bl	5fdc <vPortFree>
	vPortFree( pxQueue );
    47ce:	6878      	ldr	r0, [r7, #4]
    47d0:	f001 fc04 	bl	5fdc <vPortFree>
}
    47d4:	3708      	adds	r7, #8
    47d6:	46bd      	mov	sp, r7
    47d8:	bd80      	pop	{r7, pc}
    47da:	bf00      	nop

000047dc <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    47dc:	b580      	push	{r7, lr}
    47de:	b084      	sub	sp, #16
    47e0:	af00      	add	r7, sp, #0
    47e2:	60f8      	str	r0, [r7, #12]
    47e4:	60b9      	str	r1, [r7, #8]
    47e6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    47e8:	68fb      	ldr	r3, [r7, #12]
    47ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47ec:	2b00      	cmp	r3, #0
    47ee:	d10c      	bne.n	480a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    47f0:	68fb      	ldr	r3, [r7, #12]
    47f2:	681b      	ldr	r3, [r3, #0]
    47f4:	2b00      	cmp	r3, #0
    47f6:	d145      	bne.n	4884 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    47f8:	68fb      	ldr	r3, [r7, #12]
    47fa:	685b      	ldr	r3, [r3, #4]
    47fc:	4618      	mov	r0, r3
    47fe:	f001 f9bb 	bl	5b78 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    4802:	68fb      	ldr	r3, [r7, #12]
    4804:	2200      	movs	r2, #0
    4806:	605a      	str	r2, [r3, #4]
    4808:	e03c      	b.n	4884 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	2b00      	cmp	r3, #0
    480e:	d11a      	bne.n	4846 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	689a      	ldr	r2, [r3, #8]
    4814:	68fb      	ldr	r3, [r7, #12]
    4816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4818:	4610      	mov	r0, r2
    481a:	68b9      	ldr	r1, [r7, #8]
    481c:	461a      	mov	r2, r3
    481e:	f013 ff77 	bl	18710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4822:	68fb      	ldr	r3, [r7, #12]
    4824:	689a      	ldr	r2, [r3, #8]
    4826:	68fb      	ldr	r3, [r7, #12]
    4828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    482a:	441a      	add	r2, r3
    482c:	68fb      	ldr	r3, [r7, #12]
    482e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4830:	68fb      	ldr	r3, [r7, #12]
    4832:	689a      	ldr	r2, [r3, #8]
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	685b      	ldr	r3, [r3, #4]
    4838:	429a      	cmp	r2, r3
    483a:	d323      	bcc.n	4884 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    483c:	68fb      	ldr	r3, [r7, #12]
    483e:	681a      	ldr	r2, [r3, #0]
    4840:	68fb      	ldr	r3, [r7, #12]
    4842:	609a      	str	r2, [r3, #8]
    4844:	e01e      	b.n	4884 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4846:	68fb      	ldr	r3, [r7, #12]
    4848:	68da      	ldr	r2, [r3, #12]
    484a:	68fb      	ldr	r3, [r7, #12]
    484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    484e:	4610      	mov	r0, r2
    4850:	68b9      	ldr	r1, [r7, #8]
    4852:	461a      	mov	r2, r3
    4854:	f013 ff5c 	bl	18710 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4858:	68fb      	ldr	r3, [r7, #12]
    485a:	68da      	ldr	r2, [r3, #12]
    485c:	68fb      	ldr	r3, [r7, #12]
    485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4860:	425b      	negs	r3, r3
    4862:	441a      	add	r2, r3
    4864:	68fb      	ldr	r3, [r7, #12]
    4866:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4868:	68fb      	ldr	r3, [r7, #12]
    486a:	68da      	ldr	r2, [r3, #12]
    486c:	68fb      	ldr	r3, [r7, #12]
    486e:	681b      	ldr	r3, [r3, #0]
    4870:	429a      	cmp	r2, r3
    4872:	d207      	bcs.n	4884 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4874:	68fb      	ldr	r3, [r7, #12]
    4876:	685a      	ldr	r2, [r3, #4]
    4878:	68fb      	ldr	r3, [r7, #12]
    487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    487c:	425b      	negs	r3, r3
    487e:	441a      	add	r2, r3
    4880:	68fb      	ldr	r3, [r7, #12]
    4882:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4888:	1c5a      	adds	r2, r3, #1
    488a:	68fb      	ldr	r3, [r7, #12]
    488c:	639a      	str	r2, [r3, #56]	; 0x38
}
    488e:	3710      	adds	r7, #16
    4890:	46bd      	mov	sp, r7
    4892:	bd80      	pop	{r7, pc}

00004894 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4894:	b580      	push	{r7, lr}
    4896:	b082      	sub	sp, #8
    4898:	af00      	add	r7, sp, #0
    489a:	6078      	str	r0, [r7, #4]
    489c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    489e:	687b      	ldr	r3, [r7, #4]
    48a0:	681b      	ldr	r3, [r3, #0]
    48a2:	2b00      	cmp	r3, #0
    48a4:	d019      	beq.n	48da <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    48a6:	687b      	ldr	r3, [r7, #4]
    48a8:	68da      	ldr	r2, [r3, #12]
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48ae:	441a      	add	r2, r3
    48b0:	687b      	ldr	r3, [r7, #4]
    48b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	68da      	ldr	r2, [r3, #12]
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	685b      	ldr	r3, [r3, #4]
    48bc:	429a      	cmp	r2, r3
    48be:	d303      	bcc.n	48c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    48c0:	687b      	ldr	r3, [r7, #4]
    48c2:	681a      	ldr	r2, [r3, #0]
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	68da      	ldr	r2, [r3, #12]
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48d0:	6838      	ldr	r0, [r7, #0]
    48d2:	4611      	mov	r1, r2
    48d4:	461a      	mov	r2, r3
    48d6:	f013 ff1b 	bl	18710 <memcpy>
	}
}
    48da:	3708      	adds	r7, #8
    48dc:	46bd      	mov	sp, r7
    48de:	bd80      	pop	{r7, pc}

000048e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    48e0:	b580      	push	{r7, lr}
    48e2:	b082      	sub	sp, #8
    48e4:	af00      	add	r7, sp, #0
    48e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    48e8:	f001 fa3a 	bl	5d60 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    48ec:	e014      	b.n	4918 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    48ee:	687b      	ldr	r3, [r7, #4]
    48f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48f2:	2b00      	cmp	r3, #0
    48f4:	d00f      	beq.n	4916 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    48f6:	687b      	ldr	r3, [r7, #4]
    48f8:	3324      	adds	r3, #36	; 0x24
    48fa:	4618      	mov	r0, r3
    48fc:	f000 fea6 	bl	564c <xTaskRemoveFromEventList>
    4900:	4603      	mov	r3, r0
    4902:	2b00      	cmp	r3, #0
    4904:	d001      	beq.n	490a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    4906:	f000 ff5d 	bl	57c4 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    490a:	687b      	ldr	r3, [r7, #4]
    490c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    490e:	1e5a      	subs	r2, r3, #1
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	649a      	str	r2, [r3, #72]	; 0x48
    4914:	e000      	b.n	4918 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    4916:	e003      	b.n	4920 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    491c:	2b00      	cmp	r3, #0
    491e:	dce6      	bgt.n	48ee <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4920:	687b      	ldr	r3, [r7, #4]
    4922:	f04f 32ff 	mov.w	r2, #4294967295
    4926:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    4928:	f001 fa30 	bl	5d8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    492c:	f001 fa18 	bl	5d60 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4930:	e014      	b.n	495c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4932:	687b      	ldr	r3, [r7, #4]
    4934:	691b      	ldr	r3, [r3, #16]
    4936:	2b00      	cmp	r3, #0
    4938:	d00f      	beq.n	495a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    493a:	687b      	ldr	r3, [r7, #4]
    493c:	3310      	adds	r3, #16
    493e:	4618      	mov	r0, r3
    4940:	f000 fe84 	bl	564c <xTaskRemoveFromEventList>
    4944:	4603      	mov	r3, r0
    4946:	2b00      	cmp	r3, #0
    4948:	d001      	beq.n	494e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    494a:	f000 ff3b 	bl	57c4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    494e:	687b      	ldr	r3, [r7, #4]
    4950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4952:	1e5a      	subs	r2, r3, #1
    4954:	687b      	ldr	r3, [r7, #4]
    4956:	645a      	str	r2, [r3, #68]	; 0x44
    4958:	e000      	b.n	495c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    495a:	e003      	b.n	4964 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4960:	2b00      	cmp	r3, #0
    4962:	dce6      	bgt.n	4932 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	f04f 32ff 	mov.w	r2, #4294967295
    496a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    496c:	f001 fa0e 	bl	5d8c <vPortExitCritical>
}
    4970:	3708      	adds	r7, #8
    4972:	46bd      	mov	sp, r7
    4974:	bd80      	pop	{r7, pc}
    4976:	bf00      	nop

00004978 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4978:	b580      	push	{r7, lr}
    497a:	b084      	sub	sp, #16
    497c:	af00      	add	r7, sp, #0
    497e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4980:	f001 f9ee 	bl	5d60 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4988:	2b00      	cmp	r3, #0
    498a:	bf14      	ite	ne
    498c:	2300      	movne	r3, #0
    498e:	2301      	moveq	r3, #1
    4990:	b2db      	uxtb	r3, r3
    4992:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4994:	f001 f9fa 	bl	5d8c <vPortExitCritical>

	return xReturn;
    4998:	68fb      	ldr	r3, [r7, #12]
}
    499a:	4618      	mov	r0, r3
    499c:	3710      	adds	r7, #16
    499e:	46bd      	mov	sp, r7
    49a0:	bd80      	pop	{r7, pc}
    49a2:	bf00      	nop

000049a4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    49a4:	b480      	push	{r7}
    49a6:	b085      	sub	sp, #20
    49a8:	af00      	add	r7, sp, #0
    49aa:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    49ac:	687b      	ldr	r3, [r7, #4]
    49ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    49b0:	2b00      	cmp	r3, #0
    49b2:	bf14      	ite	ne
    49b4:	2300      	movne	r3, #0
    49b6:	2301      	moveq	r3, #1
    49b8:	b2db      	uxtb	r3, r3
    49ba:	60fb      	str	r3, [r7, #12]

	return xReturn;
    49bc:	68fb      	ldr	r3, [r7, #12]
}
    49be:	4618      	mov	r0, r3
    49c0:	3714      	adds	r7, #20
    49c2:	46bd      	mov	sp, r7
    49c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49c8:	4770      	bx	lr
    49ca:	bf00      	nop

000049cc <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    49cc:	b580      	push	{r7, lr}
    49ce:	b084      	sub	sp, #16
    49d0:	af00      	add	r7, sp, #0
    49d2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    49d4:	f001 f9c4 	bl	5d60 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    49d8:	687b      	ldr	r3, [r7, #4]
    49da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    49e0:	429a      	cmp	r2, r3
    49e2:	bf14      	ite	ne
    49e4:	2300      	movne	r3, #0
    49e6:	2301      	moveq	r3, #1
    49e8:	b2db      	uxtb	r3, r3
    49ea:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    49ec:	f001 f9ce 	bl	5d8c <vPortExitCritical>

	return xReturn;
    49f0:	68fb      	ldr	r3, [r7, #12]
}
    49f2:	4618      	mov	r0, r3
    49f4:	3710      	adds	r7, #16
    49f6:	46bd      	mov	sp, r7
    49f8:	bd80      	pop	{r7, pc}
    49fa:	bf00      	nop

000049fc <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    49fc:	b480      	push	{r7}
    49fe:	b085      	sub	sp, #20
    4a00:	af00      	add	r7, sp, #0
    4a02:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4a04:	687b      	ldr	r3, [r7, #4]
    4a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a0c:	429a      	cmp	r2, r3
    4a0e:	bf14      	ite	ne
    4a10:	2300      	movne	r3, #0
    4a12:	2301      	moveq	r3, #1
    4a14:	b2db      	uxtb	r3, r3
    4a16:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a18:	68fb      	ldr	r3, [r7, #12]
}
    4a1a:	4618      	mov	r0, r3
    4a1c:	3714      	adds	r7, #20
    4a1e:	46bd      	mov	sp, r7
    4a20:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a24:	4770      	bx	lr
    4a26:	bf00      	nop

00004a28 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4a28:	b580      	push	{r7, lr}
    4a2a:	b08a      	sub	sp, #40	; 0x28
    4a2c:	af02      	add	r7, sp, #8
    4a2e:	60f8      	str	r0, [r7, #12]
    4a30:	60b9      	str	r1, [r7, #8]
    4a32:	603b      	str	r3, [r7, #0]
    4a34:	4613      	mov	r3, r2
    4a36:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4a38:	88fb      	ldrh	r3, [r7, #6]
    4a3a:	4618      	mov	r0, r3
    4a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4a3e:	f000 ffe5 	bl	5a0c <prvAllocateTCBAndStack>
    4a42:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4a44:	69bb      	ldr	r3, [r7, #24]
    4a46:	2b00      	cmp	r3, #0
    4a48:	f000 80a1 	beq.w	4b8e <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4a4c:	69bb      	ldr	r3, [r7, #24]
    4a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4a50:	88fb      	ldrh	r3, [r7, #6]
    4a52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a56:	3b01      	subs	r3, #1
    4a58:	009b      	lsls	r3, r3, #2
    4a5a:	4413      	add	r3, r2
    4a5c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4a5e:	697b      	ldr	r3, [r7, #20]
    4a60:	f023 0307 	bic.w	r3, r3, #7
    4a64:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4a66:	88fb      	ldrh	r3, [r7, #6]
    4a68:	9300      	str	r3, [sp, #0]
    4a6a:	69b8      	ldr	r0, [r7, #24]
    4a6c:	68b9      	ldr	r1, [r7, #8]
    4a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a72:	f000 febd 	bl	57f0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4a76:	6978      	ldr	r0, [r7, #20]
    4a78:	68f9      	ldr	r1, [r7, #12]
    4a7a:	683a      	ldr	r2, [r7, #0]
    4a7c:	f001 f8f2 	bl	5c64 <pxPortInitialiseStack>
    4a80:	4602      	mov	r2, r0
    4a82:	69bb      	ldr	r3, [r7, #24]
    4a84:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a88:	2b00      	cmp	r3, #0
    4a8a:	d002      	beq.n	4a92 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a8e:	69ba      	ldr	r2, [r7, #24]
    4a90:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4a92:	f001 f965 	bl	5d60 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4a96:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a9e:	681b      	ldr	r3, [r3, #0]
    4aa0:	1c5a      	adds	r2, r3, #1
    4aa2:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aaa:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4aac:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab4:	681b      	ldr	r3, [r3, #0]
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d10f      	bne.n	4ada <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4aba:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac2:	69ba      	ldr	r2, [r7, #24]
    4ac4:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4ac6:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ace:	681b      	ldr	r3, [r3, #0]
    4ad0:	2b01      	cmp	r3, #1
    4ad2:	d118      	bne.n	4b06 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4ad4:	f000 fec2 	bl	585c <prvInitialiseTaskLists>
    4ad8:	e015      	b.n	4b06 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4ada:	f241 23c8 	movw	r3, #4808	; 0x12c8
    4ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae2:	681b      	ldr	r3, [r3, #0]
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	d10e      	bne.n	4b06 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4ae8:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af0:	681b      	ldr	r3, [r3, #0]
    4af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4af6:	429a      	cmp	r2, r3
    4af8:	d805      	bhi.n	4b06 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4afa:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b02:	69ba      	ldr	r2, [r7, #24]
    4b04:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4b06:	69bb      	ldr	r3, [r7, #24]
    4b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b0a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	429a      	cmp	r2, r3
    4b16:	d906      	bls.n	4b26 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4b18:	69bb      	ldr	r3, [r7, #24]
    4b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b1c:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b24:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4b26:	f241 23dc 	movw	r3, #4828	; 0x12dc
    4b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b2e:	681b      	ldr	r3, [r3, #0]
    4b30:	1c5a      	adds	r2, r3, #1
    4b32:	f241 23dc 	movw	r3, #4828	; 0x12dc
    4b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b3a:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4b3c:	69bb      	ldr	r3, [r7, #24]
    4b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b40:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b48:	681b      	ldr	r3, [r3, #0]
    4b4a:	429a      	cmp	r2, r3
    4b4c:	d906      	bls.n	4b5c <xTaskGenericCreate+0x134>
    4b4e:	69bb      	ldr	r3, [r7, #24]
    4b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b52:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b5a:	601a      	str	r2, [r3, #0]
    4b5c:	69bb      	ldr	r3, [r7, #24]
    4b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b60:	4613      	mov	r3, r2
    4b62:	009b      	lsls	r3, r3, #2
    4b64:	4413      	add	r3, r2
    4b66:	009b      	lsls	r3, r3, #2
    4b68:	f241 12e4 	movw	r2, #4580	; 0x11e4
    4b6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b70:	441a      	add	r2, r3
    4b72:	69bb      	ldr	r3, [r7, #24]
    4b74:	3304      	adds	r3, #4
    4b76:	4610      	mov	r0, r2
    4b78:	4619      	mov	r1, r3
    4b7a:	f7ff fadf 	bl	413c <vListInsertEnd>

			xReturn = pdPASS;
    4b7e:	2301      	movs	r3, #1
    4b80:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4b82:	69b8      	ldr	r0, [r7, #24]
    4b84:	f012 fdba 	bl	176fc <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4b88:	f001 f900 	bl	5d8c <vPortExitCritical>
    4b8c:	e002      	b.n	4b94 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4b8e:	f04f 33ff 	mov.w	r3, #4294967295
    4b92:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4b94:	69fb      	ldr	r3, [r7, #28]
    4b96:	2b01      	cmp	r3, #1
    4b98:	d111      	bne.n	4bbe <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4b9a:	f241 23c8 	movw	r3, #4808	; 0x12c8
    4b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ba2:	681b      	ldr	r3, [r3, #0]
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d00a      	beq.n	4bbe <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4ba8:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb0:	681b      	ldr	r3, [r3, #0]
    4bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4bb6:	429a      	cmp	r2, r3
    4bb8:	d201      	bcs.n	4bbe <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4bba:	f001 f8c3 	bl	5d44 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4bbe:	69fb      	ldr	r3, [r7, #28]
}
    4bc0:	4618      	mov	r0, r3
    4bc2:	3720      	adds	r7, #32
    4bc4:	46bd      	mov	sp, r7
    4bc6:	bd80      	pop	{r7, pc}

00004bc8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4bc8:	b580      	push	{r7, lr}
    4bca:	b084      	sub	sp, #16
    4bcc:	af00      	add	r7, sp, #0
    4bce:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4bd0:	f001 f8c6 	bl	5d60 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4bd4:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bdc:	681b      	ldr	r3, [r3, #0]
    4bde:	687a      	ldr	r2, [r7, #4]
    4be0:	429a      	cmp	r2, r3
    4be2:	d101      	bne.n	4be8 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4be4:	2300      	movs	r3, #0
    4be6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4be8:	687b      	ldr	r3, [r7, #4]
    4bea:	2b00      	cmp	r3, #0
    4bec:	d105      	bne.n	4bfa <vTaskDelete+0x32>
    4bee:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf6:	681b      	ldr	r3, [r3, #0]
    4bf8:	e000      	b.n	4bfc <vTaskDelete+0x34>
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4bfe:	68fb      	ldr	r3, [r7, #12]
    4c00:	3304      	adds	r3, #4
    4c02:	4618      	mov	r0, r3
    4c04:	f7ff fafa 	bl	41fc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4c08:	68fb      	ldr	r3, [r7, #12]
    4c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d004      	beq.n	4c1a <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4c10:	68fb      	ldr	r3, [r7, #12]
    4c12:	3318      	adds	r3, #24
    4c14:	4618      	mov	r0, r3
    4c16:	f7ff faf1 	bl	41fc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4c1a:	68fb      	ldr	r3, [r7, #12]
    4c1c:	3304      	adds	r3, #4
    4c1e:	f241 208c 	movw	r0, #4748	; 0x128c
    4c22:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4c26:	4619      	mov	r1, r3
    4c28:	f7ff fa88 	bl	413c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4c2c:	f241 23a0 	movw	r3, #4768	; 0x12a0
    4c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c34:	681b      	ldr	r3, [r3, #0]
    4c36:	1c5a      	adds	r2, r3, #1
    4c38:	f241 23a0 	movw	r3, #4768	; 0x12a0
    4c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c40:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4c42:	f241 23dc 	movw	r3, #4828	; 0x12dc
    4c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c4a:	681b      	ldr	r3, [r3, #0]
    4c4c:	1c5a      	adds	r2, r3, #1
    4c4e:	f241 23dc 	movw	r3, #4828	; 0x12dc
    4c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c56:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4c58:	f001 f898 	bl	5d8c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4c5c:	f241 23c8 	movw	r3, #4808	; 0x12c8
    4c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c64:	681b      	ldr	r3, [r3, #0]
    4c66:	2b00      	cmp	r3, #0
    4c68:	d004      	beq.n	4c74 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d101      	bne.n	4c74 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4c70:	f001 f868 	bl	5d44 <vPortYieldFromISR>
			}
		}
	}
    4c74:	3710      	adds	r7, #16
    4c76:	46bd      	mov	sp, r7
    4c78:	bd80      	pop	{r7, pc}
    4c7a:	bf00      	nop

00004c7c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4c7c:	b580      	push	{r7, lr}
    4c7e:	b086      	sub	sp, #24
    4c80:	af00      	add	r7, sp, #0
    4c82:	6078      	str	r0, [r7, #4]
    4c84:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4c86:	2300      	movs	r3, #0
    4c88:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4c8a:	f000 fa8b 	bl	51a4 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4c8e:	687b      	ldr	r3, [r7, #4]
    4c90:	681a      	ldr	r2, [r3, #0]
    4c92:	683b      	ldr	r3, [r7, #0]
    4c94:	4413      	add	r3, r2
    4c96:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4c98:	687b      	ldr	r3, [r7, #4]
    4c9a:	681a      	ldr	r2, [r3, #0]
    4c9c:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca4:	681b      	ldr	r3, [r3, #0]
    4ca6:	429a      	cmp	r2, r3
    4ca8:	d90f      	bls.n	4cca <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4caa:	687b      	ldr	r3, [r7, #4]
    4cac:	681a      	ldr	r2, [r3, #0]
    4cae:	693b      	ldr	r3, [r7, #16]
    4cb0:	429a      	cmp	r2, r3
    4cb2:	d919      	bls.n	4ce8 <vTaskDelayUntil+0x6c>
    4cb4:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cbc:	681b      	ldr	r3, [r3, #0]
    4cbe:	693a      	ldr	r2, [r7, #16]
    4cc0:	429a      	cmp	r2, r3
    4cc2:	d911      	bls.n	4ce8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4cc4:	2301      	movs	r3, #1
    4cc6:	617b      	str	r3, [r7, #20]
    4cc8:	e00e      	b.n	4ce8 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	681a      	ldr	r2, [r3, #0]
    4cce:	693b      	ldr	r3, [r7, #16]
    4cd0:	429a      	cmp	r2, r3
    4cd2:	d807      	bhi.n	4ce4 <vTaskDelayUntil+0x68>
    4cd4:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cdc:	681b      	ldr	r3, [r3, #0]
    4cde:	693a      	ldr	r2, [r7, #16]
    4ce0:	429a      	cmp	r2, r3
    4ce2:	d901      	bls.n	4ce8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4ce4:	2301      	movs	r3, #1
    4ce6:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4ce8:	687b      	ldr	r3, [r7, #4]
    4cea:	693a      	ldr	r2, [r7, #16]
    4cec:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4cee:	697b      	ldr	r3, [r7, #20]
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d00b      	beq.n	4d0c <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4cf4:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cfc:	681b      	ldr	r3, [r3, #0]
    4cfe:	3304      	adds	r3, #4
    4d00:	4618      	mov	r0, r3
    4d02:	f7ff fa7b 	bl	41fc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d06:	6938      	ldr	r0, [r7, #16]
    4d08:	f000 fe3c 	bl	5984 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4d0c:	f000 fa5c 	bl	51c8 <xTaskResumeAll>
    4d10:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d12:	68fb      	ldr	r3, [r7, #12]
    4d14:	2b00      	cmp	r3, #0
    4d16:	d101      	bne.n	4d1c <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4d18:	f001 f814 	bl	5d44 <vPortYieldFromISR>
		}
	}
    4d1c:	3718      	adds	r7, #24
    4d1e:	46bd      	mov	sp, r7
    4d20:	bd80      	pop	{r7, pc}
    4d22:	bf00      	nop

00004d24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4d24:	b580      	push	{r7, lr}
    4d26:	b084      	sub	sp, #16
    4d28:	af00      	add	r7, sp, #0
    4d2a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4d2c:	2300      	movs	r3, #0
    4d2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4d30:	687b      	ldr	r3, [r7, #4]
    4d32:	2b00      	cmp	r3, #0
    4d34:	d018      	beq.n	4d68 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4d36:	f000 fa35 	bl	51a4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4d3a:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d42:	681a      	ldr	r2, [r3, #0]
    4d44:	687b      	ldr	r3, [r7, #4]
    4d46:	4413      	add	r3, r2
    4d48:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d4a:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d52:	681b      	ldr	r3, [r3, #0]
    4d54:	3304      	adds	r3, #4
    4d56:	4618      	mov	r0, r3
    4d58:	f7ff fa50 	bl	41fc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d5c:	68b8      	ldr	r0, [r7, #8]
    4d5e:	f000 fe11 	bl	5984 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4d62:	f000 fa31 	bl	51c8 <xTaskResumeAll>
    4d66:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d68:	68fb      	ldr	r3, [r7, #12]
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d101      	bne.n	4d72 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4d6e:	f000 ffe9 	bl	5d44 <vPortYieldFromISR>
		}
	}
    4d72:	3710      	adds	r7, #16
    4d74:	46bd      	mov	sp, r7
    4d76:	bd80      	pop	{r7, pc}

00004d78 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4d78:	b580      	push	{r7, lr}
    4d7a:	b084      	sub	sp, #16
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4d80:	f000 ffee 	bl	5d60 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4d84:	687b      	ldr	r3, [r7, #4]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d105      	bne.n	4d96 <uxTaskPriorityGet+0x1e>
    4d8a:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d92:	681b      	ldr	r3, [r3, #0]
    4d94:	e000      	b.n	4d98 <uxTaskPriorityGet+0x20>
    4d96:	687b      	ldr	r3, [r7, #4]
    4d98:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4d9a:	68fb      	ldr	r3, [r7, #12]
    4d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d9e:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4da0:	f000 fff4 	bl	5d8c <vPortExitCritical>

		return uxReturn;
    4da4:	68bb      	ldr	r3, [r7, #8]
	}
    4da6:	4618      	mov	r0, r3
    4da8:	3710      	adds	r7, #16
    4daa:	46bd      	mov	sp, r7
    4dac:	bd80      	pop	{r7, pc}
    4dae:	bf00      	nop

00004db0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4db0:	b580      	push	{r7, lr}
    4db2:	b086      	sub	sp, #24
    4db4:	af00      	add	r7, sp, #0
    4db6:	6078      	str	r0, [r7, #4]
    4db8:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4dba:	2300      	movs	r3, #0
    4dbc:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4dbe:	683b      	ldr	r3, [r7, #0]
    4dc0:	2b04      	cmp	r3, #4
    4dc2:	d901      	bls.n	4dc8 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4dc4:	2304      	movs	r3, #4
    4dc6:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4dc8:	f000 ffca 	bl	5d60 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4dcc:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd4:	681b      	ldr	r3, [r3, #0]
    4dd6:	687a      	ldr	r2, [r7, #4]
    4dd8:	429a      	cmp	r2, r3
    4dda:	d101      	bne.n	4de0 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4ddc:	2300      	movs	r3, #0
    4dde:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4de0:	687b      	ldr	r3, [r7, #4]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d105      	bne.n	4df2 <vTaskPrioritySet+0x42>
    4de6:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dee:	681b      	ldr	r3, [r3, #0]
    4df0:	e000      	b.n	4df4 <vTaskPrioritySet+0x44>
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4df6:	693b      	ldr	r3, [r7, #16]
    4df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4dfa:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4dfc:	68fa      	ldr	r2, [r7, #12]
    4dfe:	683b      	ldr	r3, [r7, #0]
    4e00:	429a      	cmp	r2, r3
    4e02:	d058      	beq.n	4eb6 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4e04:	683a      	ldr	r2, [r7, #0]
    4e06:	68fb      	ldr	r3, [r7, #12]
    4e08:	429a      	cmp	r2, r3
    4e0a:	d905      	bls.n	4e18 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4e0c:	687b      	ldr	r3, [r7, #4]
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d007      	beq.n	4e22 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4e12:	2301      	movs	r3, #1
    4e14:	617b      	str	r3, [r7, #20]
    4e16:	e004      	b.n	4e22 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4e18:	687b      	ldr	r3, [r7, #4]
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	d101      	bne.n	4e22 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4e1e:	2301      	movs	r3, #1
    4e20:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4e22:	693b      	ldr	r3, [r7, #16]
    4e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4e26:	693b      	ldr	r3, [r7, #16]
    4e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e2a:	429a      	cmp	r2, r3
    4e2c:	d102      	bne.n	4e34 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4e2e:	693b      	ldr	r3, [r7, #16]
    4e30:	683a      	ldr	r2, [r7, #0]
    4e32:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4e34:	693b      	ldr	r3, [r7, #16]
    4e36:	683a      	ldr	r2, [r7, #0]
    4e38:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4e3a:	683b      	ldr	r3, [r7, #0]
    4e3c:	f1c3 0205 	rsb	r2, r3, #5
    4e40:	693b      	ldr	r3, [r7, #16]
    4e42:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4e44:	693b      	ldr	r3, [r7, #16]
    4e46:	6959      	ldr	r1, [r3, #20]
    4e48:	68fa      	ldr	r2, [r7, #12]
    4e4a:	4613      	mov	r3, r2
    4e4c:	009b      	lsls	r3, r3, #2
    4e4e:	4413      	add	r3, r2
    4e50:	009b      	lsls	r3, r3, #2
    4e52:	f241 12e4 	movw	r2, #4580	; 0x11e4
    4e56:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e5a:	4413      	add	r3, r2
    4e5c:	4299      	cmp	r1, r3
    4e5e:	d125      	bne.n	4eac <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4e60:	693b      	ldr	r3, [r7, #16]
    4e62:	3304      	adds	r3, #4
    4e64:	4618      	mov	r0, r3
    4e66:	f7ff f9c9 	bl	41fc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4e6a:	693b      	ldr	r3, [r7, #16]
    4e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e6e:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e76:	681b      	ldr	r3, [r3, #0]
    4e78:	429a      	cmp	r2, r3
    4e7a:	d906      	bls.n	4e8a <vTaskPrioritySet+0xda>
    4e7c:	693b      	ldr	r3, [r7, #16]
    4e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e80:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e88:	601a      	str	r2, [r3, #0]
    4e8a:	693b      	ldr	r3, [r7, #16]
    4e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e8e:	4613      	mov	r3, r2
    4e90:	009b      	lsls	r3, r3, #2
    4e92:	4413      	add	r3, r2
    4e94:	009b      	lsls	r3, r3, #2
    4e96:	f241 12e4 	movw	r2, #4580	; 0x11e4
    4e9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e9e:	441a      	add	r2, r3
    4ea0:	693b      	ldr	r3, [r7, #16]
    4ea2:	3304      	adds	r3, #4
    4ea4:	4610      	mov	r0, r2
    4ea6:	4619      	mov	r1, r3
    4ea8:	f7ff f948 	bl	413c <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4eac:	697b      	ldr	r3, [r7, #20]
    4eae:	2b01      	cmp	r3, #1
    4eb0:	d101      	bne.n	4eb6 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4eb2:	f000 ff47 	bl	5d44 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4eb6:	f000 ff69 	bl	5d8c <vPortExitCritical>
	}
    4eba:	3718      	adds	r7, #24
    4ebc:	46bd      	mov	sp, r7
    4ebe:	bd80      	pop	{r7, pc}

00004ec0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4ec0:	b580      	push	{r7, lr}
    4ec2:	b084      	sub	sp, #16
    4ec4:	af00      	add	r7, sp, #0
    4ec6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4ec8:	f000 ff4a 	bl	5d60 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4ecc:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ed4:	681b      	ldr	r3, [r3, #0]
    4ed6:	687a      	ldr	r2, [r7, #4]
    4ed8:	429a      	cmp	r2, r3
    4eda:	d101      	bne.n	4ee0 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4edc:	2300      	movs	r3, #0
    4ede:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4ee0:	687b      	ldr	r3, [r7, #4]
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d105      	bne.n	4ef2 <vTaskSuspend+0x32>
    4ee6:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eee:	681b      	ldr	r3, [r3, #0]
    4ef0:	e000      	b.n	4ef4 <vTaskSuspend+0x34>
    4ef2:	687b      	ldr	r3, [r7, #4]
    4ef4:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4ef6:	68fb      	ldr	r3, [r7, #12]
    4ef8:	3304      	adds	r3, #4
    4efa:	4618      	mov	r0, r3
    4efc:	f7ff f97e 	bl	41fc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4f00:	68fb      	ldr	r3, [r7, #12]
    4f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f04:	2b00      	cmp	r3, #0
    4f06:	d004      	beq.n	4f12 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4f08:	68fb      	ldr	r3, [r7, #12]
    4f0a:	3318      	adds	r3, #24
    4f0c:	4618      	mov	r0, r3
    4f0e:	f7ff f975 	bl	41fc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4f12:	68fb      	ldr	r3, [r7, #12]
    4f14:	3304      	adds	r3, #4
    4f16:	f241 20a4 	movw	r0, #4772	; 0x12a4
    4f1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4f1e:	4619      	mov	r1, r3
    4f20:	f7ff f90c 	bl	413c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4f24:	f000 ff32 	bl	5d8c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	2b00      	cmp	r3, #0
    4f2c:	d11e      	bne.n	4f6c <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4f2e:	f241 23c8 	movw	r3, #4808	; 0x12c8
    4f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f36:	681b      	ldr	r3, [r3, #0]
    4f38:	2b00      	cmp	r3, #0
    4f3a:	d002      	beq.n	4f42 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4f3c:	f000 ff02 	bl	5d44 <vPortYieldFromISR>
    4f40:	e014      	b.n	4f6c <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4f42:	f241 23a4 	movw	r3, #4772	; 0x12a4
    4f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f4a:	681a      	ldr	r2, [r3, #0]
    4f4c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f54:	681b      	ldr	r3, [r3, #0]
    4f56:	429a      	cmp	r2, r3
    4f58:	d106      	bne.n	4f68 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4f5a:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f62:	2200      	movs	r2, #0
    4f64:	601a      	str	r2, [r3, #0]
    4f66:	e001      	b.n	4f6c <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4f68:	f000 fadc 	bl	5524 <vTaskSwitchContext>
				}
			}
		}
	}
    4f6c:	3710      	adds	r7, #16
    4f6e:	46bd      	mov	sp, r7
    4f70:	bd80      	pop	{r7, pc}
    4f72:	bf00      	nop

00004f74 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4f74:	b480      	push	{r7}
    4f76:	b085      	sub	sp, #20
    4f78:	af00      	add	r7, sp, #0
    4f7a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4f7c:	2300      	movs	r3, #0
    4f7e:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4f80:	687b      	ldr	r3, [r7, #4]
    4f82:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4f84:	68bb      	ldr	r3, [r7, #8]
    4f86:	695a      	ldr	r2, [r3, #20]
    4f88:	f241 23a4 	movw	r3, #4772	; 0x12a4
    4f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f90:	429a      	cmp	r2, r3
    4f92:	d10d      	bne.n	4fb0 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4f94:	68bb      	ldr	r3, [r7, #8]
    4f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f98:	f241 2378 	movw	r3, #4728	; 0x1278
    4f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa0:	429a      	cmp	r2, r3
    4fa2:	d005      	beq.n	4fb0 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4fa4:	68bb      	ldr	r3, [r7, #8]
    4fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4fa8:	2b00      	cmp	r3, #0
    4faa:	d101      	bne.n	4fb0 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4fac:	2301      	movs	r3, #1
    4fae:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4fb0:	68fb      	ldr	r3, [r7, #12]
	}
    4fb2:	4618      	mov	r0, r3
    4fb4:	3714      	adds	r7, #20
    4fb6:	46bd      	mov	sp, r7
    4fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fbc:	4770      	bx	lr
    4fbe:	bf00      	nop

00004fc0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4fc0:	b580      	push	{r7, lr}
    4fc2:	b084      	sub	sp, #16
    4fc4:	af00      	add	r7, sp, #0
    4fc6:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4fc8:	687b      	ldr	r3, [r7, #4]
    4fca:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4fcc:	68fb      	ldr	r3, [r7, #12]
    4fce:	2b00      	cmp	r3, #0
    4fd0:	d043      	beq.n	505a <vTaskResume+0x9a>
    4fd2:	f241 13e0 	movw	r3, #4576	; 0x11e0
    4fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fda:	681b      	ldr	r3, [r3, #0]
    4fdc:	68fa      	ldr	r2, [r7, #12]
    4fde:	429a      	cmp	r2, r3
    4fe0:	d03b      	beq.n	505a <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4fe2:	f000 febd 	bl	5d60 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4fe6:	68f8      	ldr	r0, [r7, #12]
    4fe8:	f7ff ffc4 	bl	4f74 <xTaskIsTaskSuspended>
    4fec:	4603      	mov	r3, r0
    4fee:	2b01      	cmp	r3, #1
    4ff0:	d131      	bne.n	5056 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4ff2:	68fb      	ldr	r3, [r7, #12]
    4ff4:	3304      	adds	r3, #4
    4ff6:	4618      	mov	r0, r3
    4ff8:	f7ff f900 	bl	41fc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4ffc:	68fb      	ldr	r3, [r7, #12]
    4ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5000:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5008:	681b      	ldr	r3, [r3, #0]
    500a:	429a      	cmp	r2, r3
    500c:	d906      	bls.n	501c <vTaskResume+0x5c>
    500e:	68fb      	ldr	r3, [r7, #12]
    5010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5012:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501a:	601a      	str	r2, [r3, #0]
    501c:	68fb      	ldr	r3, [r7, #12]
    501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5020:	4613      	mov	r3, r2
    5022:	009b      	lsls	r3, r3, #2
    5024:	4413      	add	r3, r2
    5026:	009b      	lsls	r3, r3, #2
    5028:	f241 12e4 	movw	r2, #4580	; 0x11e4
    502c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5030:	441a      	add	r2, r3
    5032:	68fb      	ldr	r3, [r7, #12]
    5034:	3304      	adds	r3, #4
    5036:	4610      	mov	r0, r2
    5038:	4619      	mov	r1, r3
    503a:	f7ff f87f 	bl	413c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    503e:	68fb      	ldr	r3, [r7, #12]
    5040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5042:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    504a:	681b      	ldr	r3, [r3, #0]
    504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    504e:	429a      	cmp	r2, r3
    5050:	d301      	bcc.n	5056 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    5052:	f000 fe77 	bl	5d44 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    5056:	f000 fe99 	bl	5d8c <vPortExitCritical>
		}
	}
    505a:	3710      	adds	r7, #16
    505c:	46bd      	mov	sp, r7
    505e:	bd80      	pop	{r7, pc}

00005060 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    5060:	b580      	push	{r7, lr}
    5062:	b086      	sub	sp, #24
    5064:	af00      	add	r7, sp, #0
    5066:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    5068:	2300      	movs	r3, #0
    506a:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    506c:	687b      	ldr	r3, [r7, #4]
    506e:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5070:	2300      	movs	r3, #0
    5072:	60fb      	str	r3, [r7, #12]
    5074:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5078:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    507c:	6938      	ldr	r0, [r7, #16]
    507e:	f7ff ff79 	bl	4f74 <xTaskIsTaskSuspended>
    5082:	4603      	mov	r3, r0
    5084:	2b01      	cmp	r3, #1
    5086:	d144      	bne.n	5112 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5088:	f241 23cc 	movw	r3, #4812	; 0x12cc
    508c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5090:	681b      	ldr	r3, [r3, #0]
    5092:	2b00      	cmp	r3, #0
    5094:	d134      	bne.n	5100 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    5096:	693b      	ldr	r3, [r7, #16]
    5098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    509a:	f241 13e0 	movw	r3, #4576	; 0x11e0
    509e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50a2:	681b      	ldr	r3, [r3, #0]
    50a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50a6:	429a      	cmp	r2, r3
    50a8:	bf34      	ite	cc
    50aa:	2300      	movcc	r3, #0
    50ac:	2301      	movcs	r3, #1
    50ae:	b2db      	uxtb	r3, r3
    50b0:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    50b2:	693b      	ldr	r3, [r7, #16]
    50b4:	3304      	adds	r3, #4
    50b6:	4618      	mov	r0, r3
    50b8:	f7ff f8a0 	bl	41fc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    50bc:	693b      	ldr	r3, [r7, #16]
    50be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50c0:	f241 23c4 	movw	r3, #4804	; 0x12c4
    50c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c8:	681b      	ldr	r3, [r3, #0]
    50ca:	429a      	cmp	r2, r3
    50cc:	d906      	bls.n	50dc <xTaskResumeFromISR+0x7c>
    50ce:	693b      	ldr	r3, [r7, #16]
    50d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50d2:	f241 23c4 	movw	r3, #4804	; 0x12c4
    50d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50da:	601a      	str	r2, [r3, #0]
    50dc:	693b      	ldr	r3, [r7, #16]
    50de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50e0:	4613      	mov	r3, r2
    50e2:	009b      	lsls	r3, r3, #2
    50e4:	4413      	add	r3, r2
    50e6:	009b      	lsls	r3, r3, #2
    50e8:	f241 12e4 	movw	r2, #4580	; 0x11e4
    50ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50f0:	441a      	add	r2, r3
    50f2:	693b      	ldr	r3, [r7, #16]
    50f4:	3304      	adds	r3, #4
    50f6:	4610      	mov	r0, r2
    50f8:	4619      	mov	r1, r3
    50fa:	f7ff f81f 	bl	413c <vListInsertEnd>
    50fe:	e008      	b.n	5112 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5100:	693b      	ldr	r3, [r7, #16]
    5102:	3318      	adds	r3, #24
    5104:	f241 2078 	movw	r0, #4728	; 0x1278
    5108:	f2c2 0000 	movt	r0, #8192	; 0x2000
    510c:	4619      	mov	r1, r3
    510e:	f7ff f815 	bl	413c <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    5112:	f04f 0000 	mov.w	r0, #0
    5116:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    511a:	697b      	ldr	r3, [r7, #20]
	}
    511c:	4618      	mov	r0, r3
    511e:	3718      	adds	r7, #24
    5120:	46bd      	mov	sp, r7
    5122:	bd80      	pop	{r7, pc}

00005124 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    5124:	b580      	push	{r7, lr}
    5126:	b086      	sub	sp, #24
    5128:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    512a:	2300      	movs	r3, #0
    512c:	9300      	str	r3, [sp, #0]
    512e:	2300      	movs	r3, #0
    5130:	9301      	str	r3, [sp, #4]
    5132:	2300      	movs	r3, #0
    5134:	9302      	str	r3, [sp, #8]
    5136:	2300      	movs	r3, #0
    5138:	9303      	str	r3, [sp, #12]
    513a:	f245 70dd 	movw	r0, #22493	; 0x57dd
    513e:	f2c0 0000 	movt	r0, #0
    5142:	f648 1108 	movw	r1, #35080	; 0x8908
    5146:	f2c0 0101 	movt	r1, #1
    514a:	2280      	movs	r2, #128	; 0x80
    514c:	2300      	movs	r3, #0
    514e:	f7ff fc6b 	bl	4a28 <xTaskGenericCreate>
    5152:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5154:	687b      	ldr	r3, [r7, #4]
    5156:	2b01      	cmp	r3, #1
    5158:	d111      	bne.n	517e <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    515a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    515e:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    5162:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    516a:	2201      	movs	r2, #1
    516c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    516e:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5176:	2200      	movs	r2, #0
    5178:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    517a:	f000 fdb5 	bl	5ce8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    517e:	3708      	adds	r7, #8
    5180:	46bd      	mov	sp, r7
    5182:	bd80      	pop	{r7, pc}

00005184 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5184:	b580      	push	{r7, lr}
    5186:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    5188:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    518c:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    5190:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5198:	2200      	movs	r2, #0
    519a:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    519c:	f000 fdcc 	bl	5d38 <vPortEndScheduler>
}
    51a0:	bd80      	pop	{r7, pc}
    51a2:	bf00      	nop

000051a4 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    51a4:	b480      	push	{r7}
    51a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    51a8:	f241 23cc 	movw	r3, #4812	; 0x12cc
    51ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b0:	681b      	ldr	r3, [r3, #0]
    51b2:	1c5a      	adds	r2, r3, #1
    51b4:	f241 23cc 	movw	r3, #4812	; 0x12cc
    51b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51bc:	601a      	str	r2, [r3, #0]
}
    51be:	46bd      	mov	sp, r7
    51c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    51c4:	4770      	bx	lr
    51c6:	bf00      	nop

000051c8 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    51c8:	b590      	push	{r4, r7, lr}
    51ca:	b083      	sub	sp, #12
    51cc:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    51ce:	2300      	movs	r3, #0
    51d0:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    51d2:	f000 fdc5 	bl	5d60 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    51d6:	f241 23cc 	movw	r3, #4812	; 0x12cc
    51da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51de:	681b      	ldr	r3, [r3, #0]
    51e0:	1e5a      	subs	r2, r3, #1
    51e2:	f241 23cc 	movw	r3, #4812	; 0x12cc
    51e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ea:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    51ec:	f241 23cc 	movw	r3, #4812	; 0x12cc
    51f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f4:	681b      	ldr	r3, [r3, #0]
    51f6:	2b00      	cmp	r3, #0
    51f8:	d177      	bne.n	52ea <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    51fa:	f241 23b8 	movw	r3, #4792	; 0x12b8
    51fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5202:	681b      	ldr	r3, [r3, #0]
    5204:	2b00      	cmp	r3, #0
    5206:	d070      	beq.n	52ea <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    5208:	2300      	movs	r3, #0
    520a:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    520c:	e036      	b.n	527c <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    520e:	f241 2378 	movw	r3, #4728	; 0x1278
    5212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5216:	68db      	ldr	r3, [r3, #12]
    5218:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    521a:	f104 0318 	add.w	r3, r4, #24
    521e:	4618      	mov	r0, r3
    5220:	f7fe ffec 	bl	41fc <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5224:	1d23      	adds	r3, r4, #4
    5226:	4618      	mov	r0, r3
    5228:	f7fe ffe8 	bl	41fc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    522c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    522e:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5236:	681b      	ldr	r3, [r3, #0]
    5238:	429a      	cmp	r2, r3
    523a:	d905      	bls.n	5248 <xTaskResumeAll+0x80>
    523c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    523e:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5246:	601a      	str	r2, [r3, #0]
    5248:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    524a:	4613      	mov	r3, r2
    524c:	009b      	lsls	r3, r3, #2
    524e:	4413      	add	r3, r2
    5250:	009b      	lsls	r3, r3, #2
    5252:	f241 12e4 	movw	r2, #4580	; 0x11e4
    5256:	f2c2 0200 	movt	r2, #8192	; 0x2000
    525a:	441a      	add	r2, r3
    525c:	1d23      	adds	r3, r4, #4
    525e:	4610      	mov	r0, r2
    5260:	4619      	mov	r1, r3
    5262:	f7fe ff6b 	bl	413c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5266:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5268:	f241 13e0 	movw	r3, #4576	; 0x11e0
    526c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5270:	681b      	ldr	r3, [r3, #0]
    5272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5274:	429a      	cmp	r2, r3
    5276:	d301      	bcc.n	527c <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    5278:	2301      	movs	r3, #1
    527a:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    527c:	f241 2378 	movw	r3, #4728	; 0x1278
    5280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5284:	681b      	ldr	r3, [r3, #0]
    5286:	2b00      	cmp	r3, #0
    5288:	d1c1      	bne.n	520e <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    528a:	f241 23d0 	movw	r3, #4816	; 0x12d0
    528e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5292:	681b      	ldr	r3, [r3, #0]
    5294:	2b00      	cmp	r3, #0
    5296:	d014      	beq.n	52c2 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5298:	e00c      	b.n	52b4 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    529a:	f000 f865 	bl	5368 <vTaskIncrementTick>
						--uxMissedTicks;
    529e:	f241 23d0 	movw	r3, #4816	; 0x12d0
    52a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52a6:	681b      	ldr	r3, [r3, #0]
    52a8:	1e5a      	subs	r2, r3, #1
    52aa:	f241 23d0 	movw	r3, #4816	; 0x12d0
    52ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b2:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52b4:	f241 23d0 	movw	r3, #4816	; 0x12d0
    52b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52bc:	681b      	ldr	r3, [r3, #0]
    52be:	2b00      	cmp	r3, #0
    52c0:	d1eb      	bne.n	529a <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    52c2:	683b      	ldr	r3, [r7, #0]
    52c4:	2b01      	cmp	r3, #1
    52c6:	d006      	beq.n	52d6 <xTaskResumeAll+0x10e>
    52c8:	f241 23d4 	movw	r3, #4820	; 0x12d4
    52cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d0:	681b      	ldr	r3, [r3, #0]
    52d2:	2b01      	cmp	r3, #1
    52d4:	d109      	bne.n	52ea <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    52d6:	2301      	movs	r3, #1
    52d8:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    52da:	f241 23d4 	movw	r3, #4820	; 0x12d4
    52de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e2:	2200      	movs	r2, #0
    52e4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    52e6:	f000 fd2d 	bl	5d44 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    52ea:	f000 fd4f 	bl	5d8c <vPortExitCritical>

	return xAlreadyYielded;
    52ee:	687b      	ldr	r3, [r7, #4]
}
    52f0:	4618      	mov	r0, r3
    52f2:	370c      	adds	r7, #12
    52f4:	46bd      	mov	sp, r7
    52f6:	bd90      	pop	{r4, r7, pc}

000052f8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    52f8:	b580      	push	{r7, lr}
    52fa:	b082      	sub	sp, #8
    52fc:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    52fe:	f000 fd2f 	bl	5d60 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    5302:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    530a:	681b      	ldr	r3, [r3, #0]
    530c:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    530e:	f000 fd3d 	bl	5d8c <vPortExitCritical>

	return xTicks;
    5312:	687b      	ldr	r3, [r7, #4]
}
    5314:	4618      	mov	r0, r3
    5316:	3708      	adds	r7, #8
    5318:	46bd      	mov	sp, r7
    531a:	bd80      	pop	{r7, pc}

0000531c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    531c:	b480      	push	{r7}
    531e:	b083      	sub	sp, #12
    5320:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5322:	2300      	movs	r3, #0
    5324:	607b      	str	r3, [r7, #4]
    5326:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    532a:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    532e:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5336:	681b      	ldr	r3, [r3, #0]
    5338:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    533a:	f04f 0000 	mov.w	r0, #0
    533e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5342:	683b      	ldr	r3, [r7, #0]
}
    5344:	4618      	mov	r0, r3
    5346:	370c      	adds	r7, #12
    5348:	46bd      	mov	sp, r7
    534a:	f85d 7b04 	ldr.w	r7, [sp], #4
    534e:	4770      	bx	lr

00005350 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5350:	b480      	push	{r7}
    5352:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5354:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535c:	681b      	ldr	r3, [r3, #0]
}
    535e:	4618      	mov	r0, r3
    5360:	46bd      	mov	sp, r7
    5362:	f85d 7b04 	ldr.w	r7, [sp], #4
    5366:	4770      	bx	lr

00005368 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5368:	b580      	push	{r7, lr}
    536a:	b084      	sub	sp, #16
    536c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    536e:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5376:	681b      	ldr	r3, [r3, #0]
    5378:	2b00      	cmp	r3, #0
    537a:	f040 80b9 	bne.w	54f0 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    537e:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5386:	681b      	ldr	r3, [r3, #0]
    5388:	1c5a      	adds	r2, r3, #1
    538a:	f241 23bc 	movw	r3, #4796	; 0x12bc
    538e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5392:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5394:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    539c:	681b      	ldr	r3, [r3, #0]
    539e:	2b00      	cmp	r3, #0
    53a0:	d13f      	bne.n	5422 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    53a2:	f241 2370 	movw	r3, #4720	; 0x1270
    53a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53aa:	681b      	ldr	r3, [r3, #0]
    53ac:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    53ae:	f241 2374 	movw	r3, #4724	; 0x1274
    53b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b6:	681a      	ldr	r2, [r3, #0]
    53b8:	f241 2370 	movw	r3, #4720	; 0x1270
    53bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c0:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    53c2:	f241 2374 	movw	r3, #4724	; 0x1274
    53c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ca:	68fa      	ldr	r2, [r7, #12]
    53cc:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    53ce:	f241 23d8 	movw	r3, #4824	; 0x12d8
    53d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d6:	681b      	ldr	r3, [r3, #0]
    53d8:	1c5a      	adds	r2, r3, #1
    53da:	f241 23d8 	movw	r3, #4824	; 0x12d8
    53de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e2:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    53e4:	f241 2370 	movw	r3, #4720	; 0x1270
    53e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ec:	681b      	ldr	r3, [r3, #0]
    53ee:	681b      	ldr	r3, [r3, #0]
    53f0:	2b00      	cmp	r3, #0
    53f2:	d107      	bne.n	5404 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    53f4:	f240 5330 	movw	r3, #1328	; 0x530
    53f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fc:	f04f 32ff 	mov.w	r2, #4294967295
    5400:	601a      	str	r2, [r3, #0]
    5402:	e00e      	b.n	5422 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5404:	f241 2370 	movw	r3, #4720	; 0x1270
    5408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    540c:	681b      	ldr	r3, [r3, #0]
    540e:	68db      	ldr	r3, [r3, #12]
    5410:	68db      	ldr	r3, [r3, #12]
    5412:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    5414:	68bb      	ldr	r3, [r7, #8]
    5416:	685a      	ldr	r2, [r3, #4]
    5418:	f240 5330 	movw	r3, #1328	; 0x530
    541c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5420:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    5422:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542a:	681a      	ldr	r2, [r3, #0]
    542c:	f240 5330 	movw	r3, #1328	; 0x530
    5430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5434:	681b      	ldr	r3, [r3, #0]
    5436:	429a      	cmp	r2, r3
    5438:	d359      	bcc.n	54ee <vTaskIncrementTick+0x186>
    543a:	f241 2370 	movw	r3, #4720	; 0x1270
    543e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5442:	681b      	ldr	r3, [r3, #0]
    5444:	681b      	ldr	r3, [r3, #0]
    5446:	2b00      	cmp	r3, #0
    5448:	d107      	bne.n	545a <vTaskIncrementTick+0xf2>
    544a:	f240 5330 	movw	r3, #1328	; 0x530
    544e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5452:	f04f 32ff 	mov.w	r2, #4294967295
    5456:	601a      	str	r2, [r3, #0]
    5458:	e049      	b.n	54ee <vTaskIncrementTick+0x186>
    545a:	f241 2370 	movw	r3, #4720	; 0x1270
    545e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5462:	681b      	ldr	r3, [r3, #0]
    5464:	68db      	ldr	r3, [r3, #12]
    5466:	68db      	ldr	r3, [r3, #12]
    5468:	60bb      	str	r3, [r7, #8]
    546a:	68bb      	ldr	r3, [r7, #8]
    546c:	685b      	ldr	r3, [r3, #4]
    546e:	607b      	str	r3, [r7, #4]
    5470:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5478:	681a      	ldr	r2, [r3, #0]
    547a:	687b      	ldr	r3, [r7, #4]
    547c:	429a      	cmp	r2, r3
    547e:	d206      	bcs.n	548e <vTaskIncrementTick+0x126>
    5480:	f240 5330 	movw	r3, #1328	; 0x530
    5484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5488:	687a      	ldr	r2, [r7, #4]
    548a:	601a      	str	r2, [r3, #0]
    548c:	e02f      	b.n	54ee <vTaskIncrementTick+0x186>
    548e:	68bb      	ldr	r3, [r7, #8]
    5490:	3304      	adds	r3, #4
    5492:	4618      	mov	r0, r3
    5494:	f7fe feb2 	bl	41fc <vListRemove>
    5498:	68bb      	ldr	r3, [r7, #8]
    549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    549c:	2b00      	cmp	r3, #0
    549e:	d004      	beq.n	54aa <vTaskIncrementTick+0x142>
    54a0:	68bb      	ldr	r3, [r7, #8]
    54a2:	3318      	adds	r3, #24
    54a4:	4618      	mov	r0, r3
    54a6:	f7fe fea9 	bl	41fc <vListRemove>
    54aa:	68bb      	ldr	r3, [r7, #8]
    54ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54ae:	f241 23c4 	movw	r3, #4804	; 0x12c4
    54b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54b6:	681b      	ldr	r3, [r3, #0]
    54b8:	429a      	cmp	r2, r3
    54ba:	d906      	bls.n	54ca <vTaskIncrementTick+0x162>
    54bc:	68bb      	ldr	r3, [r7, #8]
    54be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54c0:	f241 23c4 	movw	r3, #4804	; 0x12c4
    54c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c8:	601a      	str	r2, [r3, #0]
    54ca:	68bb      	ldr	r3, [r7, #8]
    54cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54ce:	4613      	mov	r3, r2
    54d0:	009b      	lsls	r3, r3, #2
    54d2:	4413      	add	r3, r2
    54d4:	009b      	lsls	r3, r3, #2
    54d6:	f241 12e4 	movw	r2, #4580	; 0x11e4
    54da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54de:	441a      	add	r2, r3
    54e0:	68bb      	ldr	r3, [r7, #8]
    54e2:	3304      	adds	r3, #4
    54e4:	4610      	mov	r0, r2
    54e6:	4619      	mov	r1, r3
    54e8:	f7fe fe28 	bl	413c <vListInsertEnd>
    54ec:	e7a5      	b.n	543a <vTaskIncrementTick+0xd2>
    54ee:	e00c      	b.n	550a <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    54f0:	f241 23d0 	movw	r3, #4816	; 0x12d0
    54f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	1c5a      	adds	r2, r3, #1
    54fc:	f241 23d0 	movw	r3, #4816	; 0x12d0
    5500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5504:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    5506:	f012 f90b 	bl	17720 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    550a:	f241 23d0 	movw	r3, #4816	; 0x12d0
    550e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5512:	681b      	ldr	r3, [r3, #0]
    5514:	2b00      	cmp	r3, #0
    5516:	d101      	bne.n	551c <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    5518:	f012 f902 	bl	17720 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    551c:	3710      	adds	r7, #16
    551e:	46bd      	mov	sp, r7
    5520:	bd80      	pop	{r7, pc}
    5522:	bf00      	nop

00005524 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5524:	b580      	push	{r7, lr}
    5526:	b082      	sub	sp, #8
    5528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    552a:	f241 23cc 	movw	r3, #4812	; 0x12cc
    552e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5532:	681b      	ldr	r3, [r3, #0]
    5534:	2b00      	cmp	r3, #0
    5536:	d006      	beq.n	5546 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5538:	f241 23d4 	movw	r3, #4820	; 0x12d4
    553c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5540:	2201      	movs	r2, #1
    5542:	601a      	str	r2, [r3, #0]
    5544:	e047      	b.n	55d6 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    5546:	f012 f8e5 	bl	17714 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    554a:	e00a      	b.n	5562 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    554c:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5554:	681b      	ldr	r3, [r3, #0]
    5556:	1e5a      	subs	r2, r3, #1
    5558:	f241 23c4 	movw	r3, #4804	; 0x12c4
    555c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5560:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5562:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    556a:	6819      	ldr	r1, [r3, #0]
    556c:	f241 12e4 	movw	r2, #4580	; 0x11e4
    5570:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5574:	460b      	mov	r3, r1
    5576:	009b      	lsls	r3, r3, #2
    5578:	440b      	add	r3, r1
    557a:	009b      	lsls	r3, r3, #2
    557c:	4413      	add	r3, r2
    557e:	681b      	ldr	r3, [r3, #0]
    5580:	2b00      	cmp	r3, #0
    5582:	d0e3      	beq.n	554c <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5584:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    558c:	681a      	ldr	r2, [r3, #0]
    558e:	4613      	mov	r3, r2
    5590:	009b      	lsls	r3, r3, #2
    5592:	4413      	add	r3, r2
    5594:	009b      	lsls	r3, r3, #2
    5596:	f241 12e4 	movw	r2, #4580	; 0x11e4
    559a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    559e:	4413      	add	r3, r2
    55a0:	607b      	str	r3, [r7, #4]
    55a2:	687b      	ldr	r3, [r7, #4]
    55a4:	685b      	ldr	r3, [r3, #4]
    55a6:	685a      	ldr	r2, [r3, #4]
    55a8:	687b      	ldr	r3, [r7, #4]
    55aa:	605a      	str	r2, [r3, #4]
    55ac:	687b      	ldr	r3, [r7, #4]
    55ae:	685a      	ldr	r2, [r3, #4]
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	3308      	adds	r3, #8
    55b4:	429a      	cmp	r2, r3
    55b6:	d104      	bne.n	55c2 <vTaskSwitchContext+0x9e>
    55b8:	687b      	ldr	r3, [r7, #4]
    55ba:	685b      	ldr	r3, [r3, #4]
    55bc:	685a      	ldr	r2, [r3, #4]
    55be:	687b      	ldr	r3, [r7, #4]
    55c0:	605a      	str	r2, [r3, #4]
    55c2:	687b      	ldr	r3, [r7, #4]
    55c4:	685b      	ldr	r3, [r3, #4]
    55c6:	68da      	ldr	r2, [r3, #12]
    55c8:	f241 13e0 	movw	r3, #4576	; 0x11e0
    55cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55d0:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    55d2:	f012 f899 	bl	17708 <myTraceSwitchedIn>
	}
}
    55d6:	3708      	adds	r7, #8
    55d8:	46bd      	mov	sp, r7
    55da:	bd80      	pop	{r7, pc}

000055dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    55dc:	b580      	push	{r7, lr}
    55de:	b084      	sub	sp, #16
    55e0:	af00      	add	r7, sp, #0
    55e2:	6078      	str	r0, [r7, #4]
    55e4:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    55e6:	f241 13e0 	movw	r3, #4576	; 0x11e0
    55ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ee:	681b      	ldr	r3, [r3, #0]
    55f0:	3318      	adds	r3, #24
    55f2:	6878      	ldr	r0, [r7, #4]
    55f4:	4619      	mov	r1, r3
    55f6:	f7fe fdc9 	bl	418c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    55fa:	f241 13e0 	movw	r3, #4576	; 0x11e0
    55fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5602:	681b      	ldr	r3, [r3, #0]
    5604:	3304      	adds	r3, #4
    5606:	4618      	mov	r0, r3
    5608:	f7fe fdf8 	bl	41fc <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    560c:	683b      	ldr	r3, [r7, #0]
    560e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5612:	d10d      	bne.n	5630 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5614:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    561c:	681b      	ldr	r3, [r3, #0]
    561e:	3304      	adds	r3, #4
    5620:	f241 20a4 	movw	r0, #4772	; 0x12a4
    5624:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5628:	4619      	mov	r1, r3
    562a:	f7fe fd87 	bl	413c <vListInsertEnd>
    562e:	e00a      	b.n	5646 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5630:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5638:	681a      	ldr	r2, [r3, #0]
    563a:	683b      	ldr	r3, [r7, #0]
    563c:	4413      	add	r3, r2
    563e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5640:	68f8      	ldr	r0, [r7, #12]
    5642:	f000 f99f 	bl	5984 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    5646:	3710      	adds	r7, #16
    5648:	46bd      	mov	sp, r7
    564a:	bd80      	pop	{r7, pc}

0000564c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    564c:	b580      	push	{r7, lr}
    564e:	b084      	sub	sp, #16
    5650:	af00      	add	r7, sp, #0
    5652:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	68db      	ldr	r3, [r3, #12]
    5658:	68db      	ldr	r3, [r3, #12]
    565a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    565c:	68bb      	ldr	r3, [r7, #8]
    565e:	3318      	adds	r3, #24
    5660:	4618      	mov	r0, r3
    5662:	f7fe fdcb 	bl	41fc <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5666:	f241 23cc 	movw	r3, #4812	; 0x12cc
    566a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    566e:	681b      	ldr	r3, [r3, #0]
    5670:	2b00      	cmp	r3, #0
    5672:	d126      	bne.n	56c2 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5674:	68bb      	ldr	r3, [r7, #8]
    5676:	3304      	adds	r3, #4
    5678:	4618      	mov	r0, r3
    567a:	f7fe fdbf 	bl	41fc <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    567e:	68bb      	ldr	r3, [r7, #8]
    5680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5682:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    568a:	681b      	ldr	r3, [r3, #0]
    568c:	429a      	cmp	r2, r3
    568e:	d906      	bls.n	569e <xTaskRemoveFromEventList+0x52>
    5690:	68bb      	ldr	r3, [r7, #8]
    5692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5694:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    569c:	601a      	str	r2, [r3, #0]
    569e:	68bb      	ldr	r3, [r7, #8]
    56a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56a2:	4613      	mov	r3, r2
    56a4:	009b      	lsls	r3, r3, #2
    56a6:	4413      	add	r3, r2
    56a8:	009b      	lsls	r3, r3, #2
    56aa:	f241 12e4 	movw	r2, #4580	; 0x11e4
    56ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    56b2:	441a      	add	r2, r3
    56b4:	68bb      	ldr	r3, [r7, #8]
    56b6:	3304      	adds	r3, #4
    56b8:	4610      	mov	r0, r2
    56ba:	4619      	mov	r1, r3
    56bc:	f7fe fd3e 	bl	413c <vListInsertEnd>
    56c0:	e008      	b.n	56d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    56c2:	68bb      	ldr	r3, [r7, #8]
    56c4:	3318      	adds	r3, #24
    56c6:	f241 2078 	movw	r0, #4728	; 0x1278
    56ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    56ce:	4619      	mov	r1, r3
    56d0:	f7fe fd34 	bl	413c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    56d4:	68bb      	ldr	r3, [r7, #8]
    56d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56d8:	f241 13e0 	movw	r3, #4576	; 0x11e0
    56dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e0:	681b      	ldr	r3, [r3, #0]
    56e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56e4:	429a      	cmp	r2, r3
    56e6:	d302      	bcc.n	56ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    56e8:	2301      	movs	r3, #1
    56ea:	60fb      	str	r3, [r7, #12]
    56ec:	e001      	b.n	56f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    56ee:	2300      	movs	r3, #0
    56f0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    56f2:	68fb      	ldr	r3, [r7, #12]
}
    56f4:	4618      	mov	r0, r3
    56f6:	3710      	adds	r7, #16
    56f8:	46bd      	mov	sp, r7
    56fa:	bd80      	pop	{r7, pc}

000056fc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    56fc:	b480      	push	{r7}
    56fe:	b083      	sub	sp, #12
    5700:	af00      	add	r7, sp, #0
    5702:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5704:	f241 23d8 	movw	r3, #4824	; 0x12d8
    5708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    570c:	681a      	ldr	r2, [r3, #0]
    570e:	687b      	ldr	r3, [r7, #4]
    5710:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5712:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    571a:	681a      	ldr	r2, [r3, #0]
    571c:	687b      	ldr	r3, [r7, #4]
    571e:	605a      	str	r2, [r3, #4]
}
    5720:	370c      	adds	r7, #12
    5722:	46bd      	mov	sp, r7
    5724:	f85d 7b04 	ldr.w	r7, [sp], #4
    5728:	4770      	bx	lr
    572a:	bf00      	nop

0000572c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    572c:	b580      	push	{r7, lr}
    572e:	b084      	sub	sp, #16
    5730:	af00      	add	r7, sp, #0
    5732:	6078      	str	r0, [r7, #4]
    5734:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5736:	f000 fb13 	bl	5d60 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    573a:	683b      	ldr	r3, [r7, #0]
    573c:	681b      	ldr	r3, [r3, #0]
    573e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5742:	d102      	bne.n	574a <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5744:	2300      	movs	r3, #0
    5746:	60fb      	str	r3, [r7, #12]
    5748:	e035      	b.n	57b6 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    574a:	687b      	ldr	r3, [r7, #4]
    574c:	681a      	ldr	r2, [r3, #0]
    574e:	f241 23d8 	movw	r3, #4824	; 0x12d8
    5752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5756:	681b      	ldr	r3, [r3, #0]
    5758:	429a      	cmp	r2, r3
    575a:	d00b      	beq.n	5774 <xTaskCheckForTimeOut+0x48>
    575c:	687b      	ldr	r3, [r7, #4]
    575e:	685a      	ldr	r2, [r3, #4]
    5760:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5768:	681b      	ldr	r3, [r3, #0]
    576a:	429a      	cmp	r2, r3
    576c:	d802      	bhi.n	5774 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    576e:	2301      	movs	r3, #1
    5770:	60fb      	str	r3, [r7, #12]
    5772:	e020      	b.n	57b6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5774:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    577c:	681a      	ldr	r2, [r3, #0]
    577e:	687b      	ldr	r3, [r7, #4]
    5780:	685b      	ldr	r3, [r3, #4]
    5782:	1ad2      	subs	r2, r2, r3
    5784:	683b      	ldr	r3, [r7, #0]
    5786:	681b      	ldr	r3, [r3, #0]
    5788:	429a      	cmp	r2, r3
    578a:	d212      	bcs.n	57b2 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    578c:	683b      	ldr	r3, [r7, #0]
    578e:	681a      	ldr	r2, [r3, #0]
    5790:	687b      	ldr	r3, [r7, #4]
    5792:	6859      	ldr	r1, [r3, #4]
    5794:	f241 23bc 	movw	r3, #4796	; 0x12bc
    5798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    579c:	681b      	ldr	r3, [r3, #0]
    579e:	1acb      	subs	r3, r1, r3
    57a0:	441a      	add	r2, r3
    57a2:	683b      	ldr	r3, [r7, #0]
    57a4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    57a6:	6878      	ldr	r0, [r7, #4]
    57a8:	f7ff ffa8 	bl	56fc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    57ac:	2300      	movs	r3, #0
    57ae:	60fb      	str	r3, [r7, #12]
    57b0:	e001      	b.n	57b6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    57b2:	2301      	movs	r3, #1
    57b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    57b6:	f000 fae9 	bl	5d8c <vPortExitCritical>

	return xReturn;
    57ba:	68fb      	ldr	r3, [r7, #12]
}
    57bc:	4618      	mov	r0, r3
    57be:	3710      	adds	r7, #16
    57c0:	46bd      	mov	sp, r7
    57c2:	bd80      	pop	{r7, pc}

000057c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    57c4:	b480      	push	{r7}
    57c6:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    57c8:	f241 23d4 	movw	r3, #4820	; 0x12d4
    57cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d0:	2201      	movs	r2, #1
    57d2:	601a      	str	r2, [r3, #0]
}
    57d4:	46bd      	mov	sp, r7
    57d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57da:	4770      	bx	lr

000057dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    57dc:	b580      	push	{r7, lr}
    57de:	b082      	sub	sp, #8
    57e0:	af00      	add	r7, sp, #0
    57e2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    57e4:	f000 f886 	bl	58f4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    57e8:	f000 faac 	bl	5d44 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    57ec:	e7fa      	b.n	57e4 <prvIdleTask+0x8>
    57ee:	bf00      	nop

000057f0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    57f0:	b580      	push	{r7, lr}
    57f2:	b084      	sub	sp, #16
    57f4:	af00      	add	r7, sp, #0
    57f6:	60f8      	str	r0, [r7, #12]
    57f8:	60b9      	str	r1, [r7, #8]
    57fa:	607a      	str	r2, [r7, #4]
    57fc:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    57fe:	68fb      	ldr	r3, [r7, #12]
    5800:	3334      	adds	r3, #52	; 0x34
    5802:	4618      	mov	r0, r3
    5804:	68b9      	ldr	r1, [r7, #8]
    5806:	2210      	movs	r2, #16
    5808:	f013 f826 	bl	18858 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    580c:	68fb      	ldr	r3, [r7, #12]
    580e:	2200      	movs	r2, #0
    5810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5814:	687b      	ldr	r3, [r7, #4]
    5816:	2b04      	cmp	r3, #4
    5818:	d901      	bls.n	581e <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    581a:	2304      	movs	r3, #4
    581c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    581e:	68fb      	ldr	r3, [r7, #12]
    5820:	687a      	ldr	r2, [r7, #4]
    5822:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5824:	68fb      	ldr	r3, [r7, #12]
    5826:	687a      	ldr	r2, [r7, #4]
    5828:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    582a:	68fb      	ldr	r3, [r7, #12]
    582c:	3304      	adds	r3, #4
    582e:	4618      	mov	r0, r3
    5830:	f7fe fc78 	bl	4124 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5834:	68fb      	ldr	r3, [r7, #12]
    5836:	3318      	adds	r3, #24
    5838:	4618      	mov	r0, r3
    583a:	f7fe fc73 	bl	4124 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    583e:	68fb      	ldr	r3, [r7, #12]
    5840:	68fa      	ldr	r2, [r7, #12]
    5842:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	f1c3 0205 	rsb	r2, r3, #5
    584a:	68fb      	ldr	r3, [r7, #12]
    584c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    584e:	68fb      	ldr	r3, [r7, #12]
    5850:	68fa      	ldr	r2, [r7, #12]
    5852:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5854:	3710      	adds	r7, #16
    5856:	46bd      	mov	sp, r7
    5858:	bd80      	pop	{r7, pc}
    585a:	bf00      	nop

0000585c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    585c:	b580      	push	{r7, lr}
    585e:	b082      	sub	sp, #8
    5860:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5862:	2300      	movs	r3, #0
    5864:	607b      	str	r3, [r7, #4]
    5866:	e00f      	b.n	5888 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5868:	687a      	ldr	r2, [r7, #4]
    586a:	4613      	mov	r3, r2
    586c:	009b      	lsls	r3, r3, #2
    586e:	4413      	add	r3, r2
    5870:	009b      	lsls	r3, r3, #2
    5872:	f241 12e4 	movw	r2, #4580	; 0x11e4
    5876:	f2c2 0200 	movt	r2, #8192	; 0x2000
    587a:	4413      	add	r3, r2
    587c:	4618      	mov	r0, r3
    587e:	f7fe fc31 	bl	40e4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5882:	687b      	ldr	r3, [r7, #4]
    5884:	3301      	adds	r3, #1
    5886:	607b      	str	r3, [r7, #4]
    5888:	687b      	ldr	r3, [r7, #4]
    588a:	2b04      	cmp	r3, #4
    588c:	d9ec      	bls.n	5868 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    588e:	f241 2048 	movw	r0, #4680	; 0x1248
    5892:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5896:	f7fe fc25 	bl	40e4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    589a:	f241 205c 	movw	r0, #4700	; 0x125c
    589e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58a2:	f7fe fc1f 	bl	40e4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    58a6:	f241 2078 	movw	r0, #4728	; 0x1278
    58aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58ae:	f7fe fc19 	bl	40e4 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    58b2:	f241 208c 	movw	r0, #4748	; 0x128c
    58b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58ba:	f7fe fc13 	bl	40e4 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    58be:	f241 20a4 	movw	r0, #4772	; 0x12a4
    58c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58c6:	f7fe fc0d 	bl	40e4 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    58ca:	f241 2370 	movw	r3, #4720	; 0x1270
    58ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d2:	f241 2248 	movw	r2, #4680	; 0x1248
    58d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    58dc:	f241 2374 	movw	r3, #4724	; 0x1274
    58e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e4:	f241 225c 	movw	r2, #4700	; 0x125c
    58e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58ec:	601a      	str	r2, [r3, #0]
}
    58ee:	3708      	adds	r7, #8
    58f0:	46bd      	mov	sp, r7
    58f2:	bd80      	pop	{r7, pc}

000058f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    58f4:	b580      	push	{r7, lr}
    58f6:	b082      	sub	sp, #8
    58f8:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    58fa:	f241 23a0 	movw	r3, #4768	; 0x12a0
    58fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5902:	681b      	ldr	r3, [r3, #0]
    5904:	2b00      	cmp	r3, #0
    5906:	d03a      	beq.n	597e <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    5908:	f7ff fc4c 	bl	51a4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    590c:	f241 238c 	movw	r3, #4748	; 0x128c
    5910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5914:	681b      	ldr	r3, [r3, #0]
    5916:	2b00      	cmp	r3, #0
    5918:	bf14      	ite	ne
    591a:	2300      	movne	r3, #0
    591c:	2301      	moveq	r3, #1
    591e:	b2db      	uxtb	r3, r3
    5920:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5922:	f7ff fc51 	bl	51c8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    5926:	687b      	ldr	r3, [r7, #4]
    5928:	2b00      	cmp	r3, #0
    592a:	d128      	bne.n	597e <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    592c:	f000 fa18 	bl	5d60 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5930:	f241 238c 	movw	r3, #4748	; 0x128c
    5934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5938:	68db      	ldr	r3, [r3, #12]
    593a:	68db      	ldr	r3, [r3, #12]
    593c:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    593e:	683b      	ldr	r3, [r7, #0]
    5940:	3304      	adds	r3, #4
    5942:	4618      	mov	r0, r3
    5944:	f7fe fc5a 	bl	41fc <vListRemove>
					--uxCurrentNumberOfTasks;
    5948:	f241 23b8 	movw	r3, #4792	; 0x12b8
    594c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5950:	681b      	ldr	r3, [r3, #0]
    5952:	1e5a      	subs	r2, r3, #1
    5954:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    595c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    595e:	f241 23a0 	movw	r3, #4768	; 0x12a0
    5962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5966:	681b      	ldr	r3, [r3, #0]
    5968:	1e5a      	subs	r2, r3, #1
    596a:	f241 23a0 	movw	r3, #4768	; 0x12a0
    596e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5972:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5974:	f000 fa0a 	bl	5d8c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5978:	6838      	ldr	r0, [r7, #0]
    597a:	f000 f879 	bl	5a70 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    597e:	3708      	adds	r7, #8
    5980:	46bd      	mov	sp, r7
    5982:	bd80      	pop	{r7, pc}

00005984 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5984:	b580      	push	{r7, lr}
    5986:	b082      	sub	sp, #8
    5988:	af00      	add	r7, sp, #0
    598a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    598c:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5994:	681b      	ldr	r3, [r3, #0]
    5996:	687a      	ldr	r2, [r7, #4]
    5998:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    599a:	f241 23bc 	movw	r3, #4796	; 0x12bc
    599e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59a2:	681b      	ldr	r3, [r3, #0]
    59a4:	687a      	ldr	r2, [r7, #4]
    59a6:	429a      	cmp	r2, r3
    59a8:	d20f      	bcs.n	59ca <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    59aa:	f241 2374 	movw	r3, #4724	; 0x1274
    59ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b2:	681a      	ldr	r2, [r3, #0]
    59b4:	f241 13e0 	movw	r3, #4576	; 0x11e0
    59b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59bc:	681b      	ldr	r3, [r3, #0]
    59be:	3304      	adds	r3, #4
    59c0:	4610      	mov	r0, r2
    59c2:	4619      	mov	r1, r3
    59c4:	f7fe fbe2 	bl	418c <vListInsert>
    59c8:	e01c      	b.n	5a04 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    59ca:	f241 2370 	movw	r3, #4720	; 0x1270
    59ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59d2:	681a      	ldr	r2, [r3, #0]
    59d4:	f241 13e0 	movw	r3, #4576	; 0x11e0
    59d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59dc:	681b      	ldr	r3, [r3, #0]
    59de:	3304      	adds	r3, #4
    59e0:	4610      	mov	r0, r2
    59e2:	4619      	mov	r1, r3
    59e4:	f7fe fbd2 	bl	418c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    59e8:	f240 5330 	movw	r3, #1328	; 0x530
    59ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59f0:	681b      	ldr	r3, [r3, #0]
    59f2:	687a      	ldr	r2, [r7, #4]
    59f4:	429a      	cmp	r2, r3
    59f6:	d205      	bcs.n	5a04 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    59f8:	f240 5330 	movw	r3, #1328	; 0x530
    59fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a00:	687a      	ldr	r2, [r7, #4]
    5a02:	601a      	str	r2, [r3, #0]
		}
	}
}
    5a04:	3708      	adds	r7, #8
    5a06:	46bd      	mov	sp, r7
    5a08:	bd80      	pop	{r7, pc}
    5a0a:	bf00      	nop

00005a0c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5a0c:	b580      	push	{r7, lr}
    5a0e:	b084      	sub	sp, #16
    5a10:	af00      	add	r7, sp, #0
    5a12:	4603      	mov	r3, r0
    5a14:	6039      	str	r1, [r7, #0]
    5a16:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5a18:	2050      	movs	r0, #80	; 0x50
    5a1a:	f000 fa1b 	bl	5e54 <pvPortMalloc>
    5a1e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5a20:	68fb      	ldr	r3, [r7, #12]
    5a22:	2b00      	cmp	r3, #0
    5a24:	d01f      	beq.n	5a66 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5a26:	683b      	ldr	r3, [r7, #0]
    5a28:	2b00      	cmp	r3, #0
    5a2a:	d106      	bne.n	5a3a <prvAllocateTCBAndStack+0x2e>
    5a2c:	88fb      	ldrh	r3, [r7, #6]
    5a2e:	009b      	lsls	r3, r3, #2
    5a30:	4618      	mov	r0, r3
    5a32:	f000 fa0f 	bl	5e54 <pvPortMalloc>
    5a36:	4603      	mov	r3, r0
    5a38:	e000      	b.n	5a3c <prvAllocateTCBAndStack+0x30>
    5a3a:	683b      	ldr	r3, [r7, #0]
    5a3c:	68fa      	ldr	r2, [r7, #12]
    5a3e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5a40:	68fb      	ldr	r3, [r7, #12]
    5a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a44:	2b00      	cmp	r3, #0
    5a46:	d105      	bne.n	5a54 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5a48:	68f8      	ldr	r0, [r7, #12]
    5a4a:	f000 fac7 	bl	5fdc <vPortFree>
			pxNewTCB = NULL;
    5a4e:	2300      	movs	r3, #0
    5a50:	60fb      	str	r3, [r7, #12]
    5a52:	e008      	b.n	5a66 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5a54:	68fb      	ldr	r3, [r7, #12]
    5a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5a58:	88fb      	ldrh	r3, [r7, #6]
    5a5a:	009b      	lsls	r3, r3, #2
    5a5c:	4610      	mov	r0, r2
    5a5e:	21a5      	movs	r1, #165	; 0xa5
    5a60:	461a      	mov	r2, r3
    5a62:	f012 fea9 	bl	187b8 <memset>
		}
	}

	return pxNewTCB;
    5a66:	68fb      	ldr	r3, [r7, #12]
}
    5a68:	4618      	mov	r0, r3
    5a6a:	3710      	adds	r7, #16
    5a6c:	46bd      	mov	sp, r7
    5a6e:	bd80      	pop	{r7, pc}

00005a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5a70:	b580      	push	{r7, lr}
    5a72:	b082      	sub	sp, #8
    5a74:	af00      	add	r7, sp, #0
    5a76:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a7c:	4618      	mov	r0, r3
    5a7e:	f000 faad 	bl	5fdc <vPortFree>
		vPortFree( pxTCB );
    5a82:	6878      	ldr	r0, [r7, #4]
    5a84:	f000 faaa 	bl	5fdc <vPortFree>
	}
    5a88:	3708      	adds	r7, #8
    5a8a:	46bd      	mov	sp, r7
    5a8c:	bd80      	pop	{r7, pc}
    5a8e:	bf00      	nop

00005a90 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5a90:	b480      	push	{r7}
    5a92:	b083      	sub	sp, #12
    5a94:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5a96:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a9e:	681b      	ldr	r3, [r3, #0]
    5aa0:	607b      	str	r3, [r7, #4]

		return xReturn;
    5aa2:	687b      	ldr	r3, [r7, #4]
	}
    5aa4:	4618      	mov	r0, r3
    5aa6:	370c      	adds	r7, #12
    5aa8:	46bd      	mov	sp, r7
    5aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aae:	4770      	bx	lr

00005ab0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5ab0:	b580      	push	{r7, lr}
    5ab2:	b084      	sub	sp, #16
    5ab4:	af00      	add	r7, sp, #0
    5ab6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5abc:	68fb      	ldr	r3, [r7, #12]
    5abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ac0:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ac8:	681b      	ldr	r3, [r3, #0]
    5aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5acc:	429a      	cmp	r2, r3
    5ace:	d24f      	bcs.n	5b70 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5ad0:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ad8:	681b      	ldr	r3, [r3, #0]
    5ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5adc:	f1c3 0205 	rsb	r2, r3, #5
    5ae0:	68fb      	ldr	r3, [r7, #12]
    5ae2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5ae4:	68fb      	ldr	r3, [r7, #12]
    5ae6:	6959      	ldr	r1, [r3, #20]
    5ae8:	68fb      	ldr	r3, [r7, #12]
    5aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5aec:	4613      	mov	r3, r2
    5aee:	009b      	lsls	r3, r3, #2
    5af0:	4413      	add	r3, r2
    5af2:	009b      	lsls	r3, r3, #2
    5af4:	f241 12e4 	movw	r2, #4580	; 0x11e4
    5af8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5afc:	4413      	add	r3, r2
    5afe:	4299      	cmp	r1, r3
    5b00:	d12e      	bne.n	5b60 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5b02:	68fb      	ldr	r3, [r7, #12]
    5b04:	3304      	adds	r3, #4
    5b06:	4618      	mov	r0, r3
    5b08:	f7fe fb78 	bl	41fc <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5b0c:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b14:	681b      	ldr	r3, [r3, #0]
    5b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b18:	68fb      	ldr	r3, [r7, #12]
    5b1a:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5b1c:	68fb      	ldr	r3, [r7, #12]
    5b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b20:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b28:	681b      	ldr	r3, [r3, #0]
    5b2a:	429a      	cmp	r2, r3
    5b2c:	d906      	bls.n	5b3c <vTaskPriorityInherit+0x8c>
    5b2e:	68fb      	ldr	r3, [r7, #12]
    5b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b32:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b3a:	601a      	str	r2, [r3, #0]
    5b3c:	68fb      	ldr	r3, [r7, #12]
    5b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b40:	4613      	mov	r3, r2
    5b42:	009b      	lsls	r3, r3, #2
    5b44:	4413      	add	r3, r2
    5b46:	009b      	lsls	r3, r3, #2
    5b48:	f241 12e4 	movw	r2, #4580	; 0x11e4
    5b4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b50:	441a      	add	r2, r3
    5b52:	68fb      	ldr	r3, [r7, #12]
    5b54:	3304      	adds	r3, #4
    5b56:	4610      	mov	r0, r2
    5b58:	4619      	mov	r1, r3
    5b5a:	f7fe faef 	bl	413c <vListInsertEnd>
    5b5e:	e007      	b.n	5b70 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5b60:	f241 13e0 	movw	r3, #4576	; 0x11e0
    5b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b68:	681b      	ldr	r3, [r3, #0]
    5b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b6c:	68fb      	ldr	r3, [r7, #12]
    5b6e:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5b70:	3710      	adds	r7, #16
    5b72:	46bd      	mov	sp, r7
    5b74:	bd80      	pop	{r7, pc}
    5b76:	bf00      	nop

00005b78 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5b78:	b580      	push	{r7, lr}
    5b7a:	b084      	sub	sp, #16
    5b7c:	af00      	add	r7, sp, #0
    5b7e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5b80:	687b      	ldr	r3, [r7, #4]
    5b82:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5b84:	687b      	ldr	r3, [r7, #4]
    5b86:	2b00      	cmp	r3, #0
    5b88:	d035      	beq.n	5bf6 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5b8a:	68fb      	ldr	r3, [r7, #12]
    5b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b8e:	68fb      	ldr	r3, [r7, #12]
    5b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5b92:	429a      	cmp	r2, r3
    5b94:	d02f      	beq.n	5bf6 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5b96:	68fb      	ldr	r3, [r7, #12]
    5b98:	3304      	adds	r3, #4
    5b9a:	4618      	mov	r0, r3
    5b9c:	f7fe fb2e 	bl	41fc <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5ba0:	68fb      	ldr	r3, [r7, #12]
    5ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5ba4:	68fb      	ldr	r3, [r7, #12]
    5ba6:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5ba8:	68fb      	ldr	r3, [r7, #12]
    5baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5bac:	f1c3 0205 	rsb	r2, r3, #5
    5bb0:	68fb      	ldr	r3, [r7, #12]
    5bb2:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5bb4:	68fb      	ldr	r3, [r7, #12]
    5bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bb8:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bc0:	681b      	ldr	r3, [r3, #0]
    5bc2:	429a      	cmp	r2, r3
    5bc4:	d906      	bls.n	5bd4 <vTaskPriorityDisinherit+0x5c>
    5bc6:	68fb      	ldr	r3, [r7, #12]
    5bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bca:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd2:	601a      	str	r2, [r3, #0]
    5bd4:	68fb      	ldr	r3, [r7, #12]
    5bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bd8:	4613      	mov	r3, r2
    5bda:	009b      	lsls	r3, r3, #2
    5bdc:	4413      	add	r3, r2
    5bde:	009b      	lsls	r3, r3, #2
    5be0:	f241 12e4 	movw	r2, #4580	; 0x11e4
    5be4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5be8:	441a      	add	r2, r3
    5bea:	68fb      	ldr	r3, [r7, #12]
    5bec:	3304      	adds	r3, #4
    5bee:	4610      	mov	r0, r2
    5bf0:	4619      	mov	r1, r3
    5bf2:	f7fe faa3 	bl	413c <vListInsertEnd>
			}
		}
	}
    5bf6:	3710      	adds	r7, #16
    5bf8:	46bd      	mov	sp, r7
    5bfa:	bd80      	pop	{r7, pc}

00005bfc <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5bfc:	b480      	push	{r7}
    5bfe:	b083      	sub	sp, #12
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5c08:	4618      	mov	r0, r3
    5c0a:	370c      	adds	r7, #12
    5c0c:	46bd      	mov	sp, r7
    5c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c12:	4770      	bx	lr

00005c14 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5c14:	b480      	push	{r7}
    5c16:	b083      	sub	sp, #12
    5c18:	af00      	add	r7, sp, #0
    5c1a:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5c1c:	687b      	ldr	r3, [r7, #4]
    5c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5c20:	4618      	mov	r0, r3
    5c22:	370c      	adds	r7, #12
    5c24:	46bd      	mov	sp, r7
    5c26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c2a:	4770      	bx	lr

00005c2c <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5c2c:	b480      	push	{r7}
    5c2e:	b083      	sub	sp, #12
    5c30:	af00      	add	r7, sp, #0
    5c32:	6078      	str	r0, [r7, #4]
    5c34:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5c36:	687b      	ldr	r3, [r7, #4]
    5c38:	683a      	ldr	r2, [r7, #0]
    5c3a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5c3c:	370c      	adds	r7, #12
    5c3e:	46bd      	mov	sp, r7
    5c40:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c44:	4770      	bx	lr
    5c46:	bf00      	nop

00005c48 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5c48:	b480      	push	{r7}
    5c4a:	b083      	sub	sp, #12
    5c4c:	af00      	add	r7, sp, #0
    5c4e:	6078      	str	r0, [r7, #4]
    5c50:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5c52:	687b      	ldr	r3, [r7, #4]
    5c54:	683a      	ldr	r2, [r7, #0]
    5c56:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5c58:	370c      	adds	r7, #12
    5c5a:	46bd      	mov	sp, r7
    5c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c60:	4770      	bx	lr
    5c62:	bf00      	nop

00005c64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5c64:	b480      	push	{r7}
    5c66:	b085      	sub	sp, #20
    5c68:	af00      	add	r7, sp, #0
    5c6a:	60f8      	str	r0, [r7, #12]
    5c6c:	60b9      	str	r1, [r7, #8]
    5c6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5c70:	68fb      	ldr	r3, [r7, #12]
    5c72:	3b04      	subs	r3, #4
    5c74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5c76:	68fb      	ldr	r3, [r7, #12]
    5c78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5c7e:	68fb      	ldr	r3, [r7, #12]
    5c80:	3b04      	subs	r3, #4
    5c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5c84:	68ba      	ldr	r2, [r7, #8]
    5c86:	68fb      	ldr	r3, [r7, #12]
    5c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5c8a:	68fb      	ldr	r3, [r7, #12]
    5c8c:	3b04      	subs	r3, #4
    5c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5c90:	68fb      	ldr	r3, [r7, #12]
    5c92:	2200      	movs	r2, #0
    5c94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5c96:	68fb      	ldr	r3, [r7, #12]
    5c98:	3b14      	subs	r3, #20
    5c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5c9c:	687a      	ldr	r2, [r7, #4]
    5c9e:	68fb      	ldr	r3, [r7, #12]
    5ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5ca2:	68fb      	ldr	r3, [r7, #12]
    5ca4:	3b20      	subs	r3, #32
    5ca6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5ca8:	68fb      	ldr	r3, [r7, #12]
}
    5caa:	4618      	mov	r0, r3
    5cac:	3714      	adds	r7, #20
    5cae:	46bd      	mov	sp, r7
    5cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cb4:	4770      	bx	lr
    5cb6:	bf00      	nop

00005cb8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5cb8:	4b06      	ldr	r3, [pc, #24]	; (5cd4 <pxCurrentTCBConst2>)
    5cba:	6819      	ldr	r1, [r3, #0]
    5cbc:	6808      	ldr	r0, [r1, #0]
    5cbe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5cc2:	f380 8809 	msr	PSP, r0
    5cc6:	f04f 0000 	mov.w	r0, #0
    5cca:	f380 8811 	msr	BASEPRI, r0
    5cce:	f04e 0e0d 	orr.w	lr, lr, #13
    5cd2:	4770      	bx	lr

00005cd4 <pxCurrentTCBConst2>:
    5cd4:	200011e0 	.word	0x200011e0

00005cd8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5cd8:	485d      	ldr	r0, [pc, #372]	; (5e50 <prvSetupTimerInterrupt+0x2c>)
    5cda:	6800      	ldr	r0, [r0, #0]
    5cdc:	6800      	ldr	r0, [r0, #0]
    5cde:	f380 8808 	msr	MSP, r0
    5ce2:	b662      	cpsie	i
    5ce4:	df00      	svc	0
    5ce6:	bf00      	nop

00005ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5ce8:	b580      	push	{r7, lr}
    5cea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5cec:	f64e 5320 	movw	r3, #60704	; 0xed20
    5cf0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5cf4:	f64e 5220 	movw	r2, #60704	; 0xed20
    5cf8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5cfc:	6812      	ldr	r2, [r2, #0]
    5cfe:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5d02:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5d04:	f64e 5320 	movw	r3, #60704	; 0xed20
    5d08:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d0c:	f64e 5220 	movw	r2, #60704	; 0xed20
    5d10:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5d14:	6812      	ldr	r2, [r2, #0]
    5d16:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5d1a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5d1c:	f000 f882 	bl	5e24 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5d20:	f240 5334 	movw	r3, #1332	; 0x534
    5d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d28:	2200      	movs	r2, #0
    5d2a:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5d2c:	f7ff ffd4 	bl	5cd8 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5d30:	2300      	movs	r3, #0
}
    5d32:	4618      	mov	r0, r3
    5d34:	bd80      	pop	{r7, pc}
    5d36:	bf00      	nop

00005d38 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5d38:	b480      	push	{r7}
    5d3a:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5d3c:	46bd      	mov	sp, r7
    5d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d42:	4770      	bx	lr

00005d44 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5d44:	b480      	push	{r7}
    5d46:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5d48:	f64e 5304 	movw	r3, #60676	; 0xed04
    5d4c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5d54:	601a      	str	r2, [r3, #0]
}
    5d56:	46bd      	mov	sp, r7
    5d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d5c:	4770      	bx	lr
    5d5e:	bf00      	nop

00005d60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5d60:	b480      	push	{r7}
    5d62:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5d64:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5d68:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5d6c:	f240 5334 	movw	r3, #1332	; 0x534
    5d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d74:	681b      	ldr	r3, [r3, #0]
    5d76:	1c5a      	adds	r2, r3, #1
    5d78:	f240 5334 	movw	r3, #1332	; 0x534
    5d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d80:	601a      	str	r2, [r3, #0]
}
    5d82:	46bd      	mov	sp, r7
    5d84:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d88:	4770      	bx	lr
    5d8a:	bf00      	nop

00005d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5d8c:	b480      	push	{r7}
    5d8e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5d90:	f240 5334 	movw	r3, #1332	; 0x534
    5d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d98:	681b      	ldr	r3, [r3, #0]
    5d9a:	1e5a      	subs	r2, r3, #1
    5d9c:	f240 5334 	movw	r3, #1332	; 0x534
    5da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da4:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5da6:	f240 5334 	movw	r3, #1332	; 0x534
    5daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dae:	681b      	ldr	r3, [r3, #0]
    5db0:	2b00      	cmp	r3, #0
    5db2:	d103      	bne.n	5dbc <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5db4:	f04f 0000 	mov.w	r0, #0
    5db8:	f380 8811 	msr	BASEPRI, r0
	}
}
    5dbc:	46bd      	mov	sp, r7
    5dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dc2:	4770      	bx	lr

00005dc4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5dc4:	f3ef 8009 	mrs	r0, PSP
    5dc8:	4b0c      	ldr	r3, [pc, #48]	; (5dfc <pxCurrentTCBConst>)
    5dca:	681a      	ldr	r2, [r3, #0]
    5dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5dd0:	6010      	str	r0, [r2, #0]
    5dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
    5dd6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5dda:	f380 8811 	msr	BASEPRI, r0
    5dde:	f7ff fba1 	bl	5524 <vTaskSwitchContext>
    5de2:	f04f 0000 	mov.w	r0, #0
    5de6:	f380 8811 	msr	BASEPRI, r0
    5dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5dee:	6819      	ldr	r1, [r3, #0]
    5df0:	6808      	ldr	r0, [r1, #0]
    5df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5df6:	f380 8809 	msr	PSP, r0
    5dfa:	4770      	bx	lr

00005dfc <pxCurrentTCBConst>:
    5dfc:	200011e0 	.word	0x200011e0

00005e00 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5e00:	b580      	push	{r7, lr}
    5e02:	b082      	sub	sp, #8
    5e04:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5e06:	2300      	movs	r3, #0
    5e08:	607b      	str	r3, [r7, #4]
    5e0a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5e0e:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5e12:	f7ff faa9 	bl	5368 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5e16:	f04f 0000 	mov.w	r0, #0
    5e1a:	f380 8811 	msr	BASEPRI, r0
}
    5e1e:	3708      	adds	r7, #8
    5e20:	46bd      	mov	sp, r7
    5e22:	bd80      	pop	{r7, pc}

00005e24 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5e24:	b480      	push	{r7}
    5e26:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5e28:	f24e 0314 	movw	r3, #57364	; 0xe014
    5e2c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e30:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5e34:	f2c0 0203 	movt	r2, #3
    5e38:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5e3a:	f24e 0310 	movw	r3, #57360	; 0xe010
    5e3e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e42:	2207      	movs	r2, #7
    5e44:	601a      	str	r2, [r3, #0]
}
    5e46:	46bd      	mov	sp, r7
    5e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e4c:	4770      	bx	lr
    5e4e:	0000      	.short	0x0000
    5e50:	e000ed08 	.word	0xe000ed08

00005e54 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5e54:	b580      	push	{r7, lr}
    5e56:	b08a      	sub	sp, #40	; 0x28
    5e58:	af00      	add	r7, sp, #0
    5e5a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5e5c:	2300      	movs	r3, #0
    5e5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5e60:	f7ff f9a0 	bl	51a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5e64:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e6c:	681b      	ldr	r3, [r3, #0]
    5e6e:	2b00      	cmp	r3, #0
    5e70:	d130      	bne.n	5ed4 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5e72:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e7a:	f241 22e0 	movw	r2, #4832	; 0x12e0
    5e7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5e82:	601a      	str	r2, [r3, #0]
    5e84:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e8c:	2200      	movs	r2, #0
    5e8e:	605a      	str	r2, [r3, #4]
    5e90:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e98:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5e9c:	605a      	str	r2, [r3, #4]
    5e9e:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ea6:	2200      	movs	r2, #0
    5ea8:	601a      	str	r2, [r3, #0]
    5eaa:	f241 23e0 	movw	r3, #4832	; 0x12e0
    5eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb2:	617b      	str	r3, [r7, #20]
    5eb4:	697b      	ldr	r3, [r7, #20]
    5eb6:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5eba:	605a      	str	r2, [r3, #4]
    5ebc:	697a      	ldr	r2, [r7, #20]
    5ebe:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ec6:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5ec8:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ed0:	2201      	movs	r2, #1
    5ed2:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5ed4:	687b      	ldr	r3, [r7, #4]
    5ed6:	2b00      	cmp	r3, #0
    5ed8:	d00d      	beq.n	5ef6 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5eda:	2310      	movs	r3, #16
    5edc:	687a      	ldr	r2, [r7, #4]
    5ede:	4413      	add	r3, r2
    5ee0:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5ee2:	687b      	ldr	r3, [r7, #4]
    5ee4:	f003 0307 	and.w	r3, r3, #7
    5ee8:	2b00      	cmp	r3, #0
    5eea:	d004      	beq.n	5ef6 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5eec:	687b      	ldr	r3, [r7, #4]
    5eee:	f023 0307 	bic.w	r3, r3, #7
    5ef2:	3308      	adds	r3, #8
    5ef4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5ef6:	687b      	ldr	r3, [r7, #4]
    5ef8:	2b00      	cmp	r3, #0
    5efa:	d068      	beq.n	5fce <pvPortMalloc+0x17a>
    5efc:	687b      	ldr	r3, [r7, #4]
    5efe:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5f02:	d264      	bcs.n	5fce <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5f04:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f0c:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5f0e:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f16:	681b      	ldr	r3, [r3, #0]
    5f18:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5f1a:	e004      	b.n	5f26 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f1e:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f22:	681b      	ldr	r3, [r3, #0]
    5f24:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f28:	685a      	ldr	r2, [r3, #4]
    5f2a:	687b      	ldr	r3, [r7, #4]
    5f2c:	429a      	cmp	r2, r3
    5f2e:	d203      	bcs.n	5f38 <pvPortMalloc+0xe4>
    5f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f32:	681b      	ldr	r3, [r3, #0]
    5f34:	2b00      	cmp	r3, #0
    5f36:	d1f1      	bne.n	5f1c <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5f3a:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f42:	429a      	cmp	r2, r3
    5f44:	d043      	beq.n	5fce <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5f46:	6a3b      	ldr	r3, [r7, #32]
    5f48:	681a      	ldr	r2, [r3, #0]
    5f4a:	2310      	movs	r3, #16
    5f4c:	4413      	add	r3, r2
    5f4e:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f52:	681a      	ldr	r2, [r3, #0]
    5f54:	6a3b      	ldr	r3, [r7, #32]
    5f56:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f5a:	685a      	ldr	r2, [r3, #4]
    5f5c:	687b      	ldr	r3, [r7, #4]
    5f5e:	1ad2      	subs	r2, r2, r3
    5f60:	2310      	movs	r3, #16
    5f62:	005b      	lsls	r3, r3, #1
    5f64:	429a      	cmp	r2, r3
    5f66:	d925      	bls.n	5fb4 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5f6a:	687b      	ldr	r3, [r7, #4]
    5f6c:	4413      	add	r3, r2
    5f6e:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f72:	685a      	ldr	r2, [r3, #4]
    5f74:	687b      	ldr	r3, [r7, #4]
    5f76:	1ad2      	subs	r2, r2, r3
    5f78:	693b      	ldr	r3, [r7, #16]
    5f7a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f7e:	687a      	ldr	r2, [r7, #4]
    5f80:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5f82:	693b      	ldr	r3, [r7, #16]
    5f84:	685b      	ldr	r3, [r3, #4]
    5f86:	60fb      	str	r3, [r7, #12]
    5f88:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f90:	61bb      	str	r3, [r7, #24]
    5f92:	e002      	b.n	5f9a <pvPortMalloc+0x146>
    5f94:	69bb      	ldr	r3, [r7, #24]
    5f96:	681b      	ldr	r3, [r3, #0]
    5f98:	61bb      	str	r3, [r7, #24]
    5f9a:	69bb      	ldr	r3, [r7, #24]
    5f9c:	681b      	ldr	r3, [r3, #0]
    5f9e:	685a      	ldr	r2, [r3, #4]
    5fa0:	68fb      	ldr	r3, [r7, #12]
    5fa2:	429a      	cmp	r2, r3
    5fa4:	d3f6      	bcc.n	5f94 <pvPortMalloc+0x140>
    5fa6:	69bb      	ldr	r3, [r7, #24]
    5fa8:	681a      	ldr	r2, [r3, #0]
    5faa:	693b      	ldr	r3, [r7, #16]
    5fac:	601a      	str	r2, [r3, #0]
    5fae:	69bb      	ldr	r3, [r7, #24]
    5fb0:	693a      	ldr	r2, [r7, #16]
    5fb2:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5fb4:	f240 5338 	movw	r3, #1336	; 0x538
    5fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fbc:	681a      	ldr	r2, [r3, #0]
    5fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fc0:	685b      	ldr	r3, [r3, #4]
    5fc2:	1ad2      	subs	r2, r2, r3
    5fc4:	f240 5338 	movw	r3, #1336	; 0x538
    5fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fcc:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5fce:	f7ff f8fb 	bl	51c8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5fd2:	69fb      	ldr	r3, [r7, #28]
}
    5fd4:	4618      	mov	r0, r3
    5fd6:	3728      	adds	r7, #40	; 0x28
    5fd8:	46bd      	mov	sp, r7
    5fda:	bd80      	pop	{r7, pc}

00005fdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5fdc:	b580      	push	{r7, lr}
    5fde:	b086      	sub	sp, #24
    5fe0:	af00      	add	r7, sp, #0
    5fe2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5fe4:	687b      	ldr	r3, [r7, #4]
    5fe6:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	2b00      	cmp	r3, #0
    5fec:	d030      	beq.n	6050 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5fee:	2310      	movs	r3, #16
    5ff0:	425b      	negs	r3, r3
    5ff2:	693a      	ldr	r2, [r7, #16]
    5ff4:	4413      	add	r3, r2
    5ff6:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5ff8:	693b      	ldr	r3, [r7, #16]
    5ffa:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5ffc:	f7ff f8d2 	bl	51a4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    6000:	68fb      	ldr	r3, [r7, #12]
    6002:	685b      	ldr	r3, [r3, #4]
    6004:	60bb      	str	r3, [r7, #8]
    6006:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    600a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    600e:	617b      	str	r3, [r7, #20]
    6010:	e002      	b.n	6018 <vPortFree+0x3c>
    6012:	697b      	ldr	r3, [r7, #20]
    6014:	681b      	ldr	r3, [r3, #0]
    6016:	617b      	str	r3, [r7, #20]
    6018:	697b      	ldr	r3, [r7, #20]
    601a:	681b      	ldr	r3, [r3, #0]
    601c:	685a      	ldr	r2, [r3, #4]
    601e:	68bb      	ldr	r3, [r7, #8]
    6020:	429a      	cmp	r2, r3
    6022:	d3f6      	bcc.n	6012 <vPortFree+0x36>
    6024:	697b      	ldr	r3, [r7, #20]
    6026:	681a      	ldr	r2, [r3, #0]
    6028:	68fb      	ldr	r3, [r7, #12]
    602a:	601a      	str	r2, [r3, #0]
    602c:	697b      	ldr	r3, [r7, #20]
    602e:	68fa      	ldr	r2, [r7, #12]
    6030:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    6032:	68fb      	ldr	r3, [r7, #12]
    6034:	685a      	ldr	r2, [r3, #4]
    6036:	f240 5338 	movw	r3, #1336	; 0x538
    603a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    603e:	681b      	ldr	r3, [r3, #0]
    6040:	441a      	add	r2, r3
    6042:	f240 5338 	movw	r3, #1336	; 0x538
    6046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    604a:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    604c:	f7ff f8bc 	bl	51c8 <xTaskResumeAll>
	}
}
    6050:	3718      	adds	r7, #24
    6052:	46bd      	mov	sp, r7
    6054:	bd80      	pop	{r7, pc}
    6056:	bf00      	nop

00006058 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    6058:	b480      	push	{r7}
    605a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    605c:	f240 5338 	movw	r3, #1336	; 0x538
    6060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6064:	681b      	ldr	r3, [r3, #0]
}
    6066:	4618      	mov	r0, r3
    6068:	46bd      	mov	sp, r7
    606a:	f85d 7b04 	ldr.w	r7, [sp], #4
    606e:	4770      	bx	lr

00006070 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    6070:	b480      	push	{r7}
    6072:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    6074:	46bd      	mov	sp, r7
    6076:	f85d 7b04 	ldr.w	r7, [sp], #4
    607a:	4770      	bx	lr
    607c:	0000      	movs	r0, r0
	...

00006080 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    6080:	b580      	push	{r7, lr}
    6082:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    6084:	f24c 3312 	movw	r3, #49938	; 0xc312
    6088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    608c:	781b      	ldrb	r3, [r3, #0]
    608e:	2b00      	cmp	r3, #0
    6090:	f040 815d 	bne.w	634e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    6094:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
    6098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    609c:	881b      	ldrh	r3, [r3, #0]
    609e:	2b09      	cmp	r3, #9
    60a0:	f201 8145 	bhi.w	732e <ground_calibrate+0x12ae>
    60a4:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    60a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ac:	781b      	ldrb	r3, [r3, #0]
    60ae:	2b01      	cmp	r3, #1
    60b0:	f041 813d 	bne.w	732e <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    60b4:	f24c 3312 	movw	r3, #49938	; 0xc312
    60b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60bc:	2201      	movs	r2, #1
    60be:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    60c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    60c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c8:	781a      	ldrb	r2, [r3, #0]
    60ca:	f24c 331a 	movw	r3, #49946	; 0xc31a
    60ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d2:	781b      	ldrb	r3, [r3, #0]
    60d4:	b2db      	uxtb	r3, r3
    60d6:	429a      	cmp	r2, r3
    60d8:	d313      	bcc.n	6102 <ground_calibrate+0x82>
    60da:	f24c 331a 	movw	r3, #49946	; 0xc31a
    60de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e2:	781b      	ldrb	r3, [r3, #0]
    60e4:	b2db      	uxtb	r3, r3
    60e6:	461a      	mov	r2, r3
    60e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    60ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f0:	781b      	ldrb	r3, [r3, #0]
    60f2:	1ad3      	subs	r3, r2, r3
    60f4:	33ff      	adds	r3, #255	; 0xff
    60f6:	2b04      	cmp	r3, #4
    60f8:	bfd4      	ite	le
    60fa:	2300      	movle	r3, #0
    60fc:	2301      	movgt	r3, #1
    60fe:	b2db      	uxtb	r3, r3
    6100:	e011      	b.n	6126 <ground_calibrate+0xa6>
    6102:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610a:	781b      	ldrb	r3, [r3, #0]
    610c:	b2db      	uxtb	r3, r3
    610e:	461a      	mov	r2, r3
    6110:	f24c 3319 	movw	r3, #49945	; 0xc319
    6114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6118:	781b      	ldrb	r3, [r3, #0]
    611a:	1ad3      	subs	r3, r2, r3
    611c:	2b04      	cmp	r3, #4
    611e:	bfd4      	ite	le
    6120:	2300      	movle	r3, #0
    6122:	2301      	movgt	r3, #1
    6124:	b2db      	uxtb	r3, r3
    6126:	2b00      	cmp	r3, #0
    6128:	f000 8103 	beq.w	6332 <ground_calibrate+0x2b2>
    612c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6134:	781b      	ldrb	r3, [r3, #0]
    6136:	461a      	mov	r2, r3
    6138:	f24c 331c 	movw	r3, #49948	; 0xc31c
    613c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6140:	2105      	movs	r1, #5
    6142:	5499      	strb	r1, [r3, r2]
    6144:	f24c 3319 	movw	r3, #49945	; 0xc319
    6148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614c:	781b      	ldrb	r3, [r3, #0]
    614e:	3301      	adds	r3, #1
    6150:	b2da      	uxtb	r2, r3
    6152:	f24c 3319 	movw	r3, #49945	; 0xc319
    6156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    615a:	701a      	strb	r2, [r3, #0]
    615c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6164:	781b      	ldrb	r3, [r3, #0]
    6166:	2bff      	cmp	r3, #255	; 0xff
    6168:	d105      	bne.n	6176 <ground_calibrate+0xf6>
    616a:	f24c 3319 	movw	r3, #49945	; 0xc319
    616e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6172:	2200      	movs	r2, #0
    6174:	701a      	strb	r2, [r3, #0]
    6176:	f24c 3319 	movw	r3, #49945	; 0xc319
    617a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    617e:	781b      	ldrb	r3, [r3, #0]
    6180:	461a      	mov	r2, r3
    6182:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    618a:	2102      	movs	r1, #2
    618c:	5499      	strb	r1, [r3, r2]
    618e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6196:	781b      	ldrb	r3, [r3, #0]
    6198:	3301      	adds	r3, #1
    619a:	b2da      	uxtb	r2, r3
    619c:	f24c 3319 	movw	r3, #49945	; 0xc319
    61a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a4:	701a      	strb	r2, [r3, #0]
    61a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    61aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ae:	781b      	ldrb	r3, [r3, #0]
    61b0:	2bff      	cmp	r3, #255	; 0xff
    61b2:	d105      	bne.n	61c0 <ground_calibrate+0x140>
    61b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    61b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61bc:	2200      	movs	r2, #0
    61be:	701a      	strb	r2, [r3, #0]
    61c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    61c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c8:	2202      	movs	r2, #2
    61ca:	701a      	strb	r2, [r3, #0]
    61cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    61d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d4:	2202      	movs	r2, #2
    61d6:	701a      	strb	r2, [r3, #0]
    61d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    61dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e0:	781b      	ldrb	r3, [r3, #0]
    61e2:	461a      	mov	r2, r3
    61e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    61e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ec:	7819      	ldrb	r1, [r3, #0]
    61ee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    61f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f6:	5499      	strb	r1, [r3, r2]
    61f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    61fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6200:	781b      	ldrb	r3, [r3, #0]
    6202:	3301      	adds	r3, #1
    6204:	b2da      	uxtb	r2, r3
    6206:	f24c 3319 	movw	r3, #49945	; 0xc319
    620a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620e:	701a      	strb	r2, [r3, #0]
    6210:	f24c 3319 	movw	r3, #49945	; 0xc319
    6214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6218:	781b      	ldrb	r3, [r3, #0]
    621a:	2bff      	cmp	r3, #255	; 0xff
    621c:	d105      	bne.n	622a <ground_calibrate+0x1aa>
    621e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6226:	2200      	movs	r2, #0
    6228:	701a      	strb	r2, [r3, #0]
    622a:	f24c 3319 	movw	r3, #49945	; 0xc319
    622e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6232:	781b      	ldrb	r3, [r3, #0]
    6234:	461a      	mov	r2, r3
    6236:	f24c 431e 	movw	r3, #50206	; 0xc41e
    623a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623e:	7819      	ldrb	r1, [r3, #0]
    6240:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6248:	5499      	strb	r1, [r3, r2]
    624a:	f24c 3319 	movw	r3, #49945	; 0xc319
    624e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6252:	781b      	ldrb	r3, [r3, #0]
    6254:	3301      	adds	r3, #1
    6256:	b2da      	uxtb	r2, r3
    6258:	f24c 3319 	movw	r3, #49945	; 0xc319
    625c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6260:	701a      	strb	r2, [r3, #0]
    6262:	f24c 3319 	movw	r3, #49945	; 0xc319
    6266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    626a:	781b      	ldrb	r3, [r3, #0]
    626c:	2bff      	cmp	r3, #255	; 0xff
    626e:	d105      	bne.n	627c <ground_calibrate+0x1fc>
    6270:	f24c 3319 	movw	r3, #49945	; 0xc319
    6274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6278:	2200      	movs	r2, #0
    627a:	701a      	strb	r2, [r3, #0]
    627c:	f242 0339 	movw	r3, #8249	; 0x2039
    6280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	b2db      	uxtb	r3, r3
    6288:	f003 0310 	and.w	r3, r3, #16
    628c:	2b00      	cmp	r3, #0
    628e:	f041 804e 	bne.w	732e <ground_calibrate+0x12ae>
    6292:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    629a:	781b      	ldrb	r3, [r3, #0]
    629c:	b2db      	uxtb	r3, r3
    629e:	461a      	mov	r2, r3
    62a0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    62a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a8:	5c9a      	ldrb	r2, [r3, r2]
    62aa:	f24c 431b 	movw	r3, #50203	; 0xc41b
    62ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b2:	701a      	strb	r2, [r3, #0]
    62b4:	f24c 431c 	movw	r3, #50204	; 0xc41c
    62b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62bc:	2200      	movs	r2, #0
    62be:	701a      	strb	r2, [r3, #0]
    62c0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    62c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c8:	781b      	ldrb	r3, [r3, #0]
    62ca:	b2db      	uxtb	r3, r3
    62cc:	3301      	adds	r3, #1
    62ce:	b2da      	uxtb	r2, r3
    62d0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    62d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62d8:	701a      	strb	r2, [r3, #0]
    62da:	f24c 331a 	movw	r3, #49946	; 0xc31a
    62de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e2:	781b      	ldrb	r3, [r3, #0]
    62e4:	b2db      	uxtb	r3, r3
    62e6:	2bff      	cmp	r3, #255	; 0xff
    62e8:	d105      	bne.n	62f6 <ground_calibrate+0x276>
    62ea:	f24c 331a 	movw	r3, #49946	; 0xc31a
    62ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f2:	2200      	movs	r2, #0
    62f4:	701a      	strb	r2, [r3, #0]
    62f6:	f242 0338 	movw	r3, #8248	; 0x2038
    62fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62fe:	f242 0238 	movw	r2, #8248	; 0x2038
    6302:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6306:	7812      	ldrb	r2, [r2, #0]
    6308:	b2d2      	uxtb	r2, r2
    630a:	f042 0201 	orr.w	r2, r2, #1
    630e:	b2d2      	uxtb	r2, r2
    6310:	701a      	strb	r2, [r3, #0]
    6312:	f242 0339 	movw	r3, #8249	; 0x2039
    6316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    631a:	f242 0239 	movw	r2, #8249	; 0x2039
    631e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6322:	7812      	ldrb	r2, [r2, #0]
    6324:	b2d2      	uxtb	r2, r2
    6326:	f042 0210 	orr.w	r2, r2, #16
    632a:	b2d2      	uxtb	r2, r2
    632c:	701a      	strb	r2, [r3, #0]
    632e:	f000 bffe 	b.w	732e <ground_calibrate+0x12ae>
    6332:	f24c 3318 	movw	r3, #49944	; 0xc318
    6336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    633a:	781b      	ldrb	r3, [r3, #0]
    633c:	3301      	adds	r3, #1
    633e:	b2da      	uxtb	r2, r3
    6340:	f24c 3318 	movw	r3, #49944	; 0xc318
    6344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6348:	701a      	strb	r2, [r3, #0]
    634a:	f000 bff0 	b.w	732e <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    634e:	f24c 3312 	movw	r3, #49938	; 0xc312
    6352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6356:	781b      	ldrb	r3, [r3, #0]
    6358:	2b01      	cmp	r3, #1
    635a:	f040 87e8 	bne.w	732e <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    635e:	f24c 4320 	movw	r3, #50208	; 0xc420
    6362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6366:	885b      	ldrh	r3, [r3, #2]
    6368:	b21b      	sxth	r3, r3
    636a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    636e:	db09      	blt.n	6384 <ground_calibrate+0x304>
    6370:	f24c 4320 	movw	r3, #50208	; 0xc420
    6374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6378:	885b      	ldrh	r3, [r3, #2]
    637a:	b21b      	sxth	r3, r3
    637c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6380:	f340 87d5 	ble.w	732e <ground_calibrate+0x12ae>
      ir_gain_calib();
    6384:	f00b fcfc 	bl	11d80 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6388:	f240 5348 	movw	r3, #1352	; 0x548
    638c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6390:	681a      	ldr	r2, [r3, #0]
    6392:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    639a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    639c:	f24c 3319 	movw	r3, #49945	; 0xc319
    63a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a4:	781a      	ldrb	r2, [r3, #0]
    63a6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    63aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ae:	781b      	ldrb	r3, [r3, #0]
    63b0:	b2db      	uxtb	r3, r3
    63b2:	429a      	cmp	r2, r3
    63b4:	d313      	bcc.n	63de <ground_calibrate+0x35e>
    63b6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    63ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63be:	781b      	ldrb	r3, [r3, #0]
    63c0:	b2db      	uxtb	r3, r3
    63c2:	461a      	mov	r2, r3
    63c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    63c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63cc:	781b      	ldrb	r3, [r3, #0]
    63ce:	1ad3      	subs	r3, r2, r3
    63d0:	33ff      	adds	r3, #255	; 0xff
    63d2:	2b14      	cmp	r3, #20
    63d4:	bfd4      	ite	le
    63d6:	2300      	movle	r3, #0
    63d8:	2301      	movgt	r3, #1
    63da:	b2db      	uxtb	r3, r3
    63dc:	e011      	b.n	6402 <ground_calibrate+0x382>
    63de:	f24c 331a 	movw	r3, #49946	; 0xc31a
    63e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e6:	781b      	ldrb	r3, [r3, #0]
    63e8:	b2db      	uxtb	r3, r3
    63ea:	461a      	mov	r2, r3
    63ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    63f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f4:	781b      	ldrb	r3, [r3, #0]
    63f6:	1ad3      	subs	r3, r2, r3
    63f8:	2b14      	cmp	r3, #20
    63fa:	bfd4      	ite	le
    63fc:	2300      	movle	r3, #0
    63fe:	2301      	movgt	r3, #1
    6400:	b2db      	uxtb	r3, r3
    6402:	2b00      	cmp	r3, #0
    6404:	f000 85a6 	beq.w	6f54 <ground_calibrate+0xed4>
    6408:	f24c 3319 	movw	r3, #49945	; 0xc319
    640c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6410:	781b      	ldrb	r3, [r3, #0]
    6412:	461a      	mov	r2, r3
    6414:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    641c:	2105      	movs	r1, #5
    641e:	5499      	strb	r1, [r3, r2]
    6420:	f24c 3319 	movw	r3, #49945	; 0xc319
    6424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6428:	781b      	ldrb	r3, [r3, #0]
    642a:	3301      	adds	r3, #1
    642c:	b2da      	uxtb	r2, r3
    642e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6436:	701a      	strb	r2, [r3, #0]
    6438:	f24c 3319 	movw	r3, #49945	; 0xc319
    643c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6440:	781b      	ldrb	r3, [r3, #0]
    6442:	2bff      	cmp	r3, #255	; 0xff
    6444:	d105      	bne.n	6452 <ground_calibrate+0x3d2>
    6446:	f24c 3319 	movw	r3, #49945	; 0xc319
    644a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    644e:	2200      	movs	r2, #0
    6450:	701a      	strb	r2, [r3, #0]
    6452:	f24c 3319 	movw	r3, #49945	; 0xc319
    6456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645a:	781b      	ldrb	r3, [r3, #0]
    645c:	461a      	mov	r2, r3
    645e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6466:	2105      	movs	r1, #5
    6468:	5499      	strb	r1, [r3, r2]
    646a:	f24c 3319 	movw	r3, #49945	; 0xc319
    646e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6472:	781b      	ldrb	r3, [r3, #0]
    6474:	3301      	adds	r3, #1
    6476:	b2da      	uxtb	r2, r3
    6478:	f24c 3319 	movw	r3, #49945	; 0xc319
    647c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6480:	701a      	strb	r2, [r3, #0]
    6482:	f24c 3319 	movw	r3, #49945	; 0xc319
    6486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648a:	781b      	ldrb	r3, [r3, #0]
    648c:	2bff      	cmp	r3, #255	; 0xff
    648e:	d105      	bne.n	649c <ground_calibrate+0x41c>
    6490:	f24c 3319 	movw	r3, #49945	; 0xc319
    6494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6498:	2200      	movs	r2, #0
    649a:	701a      	strb	r2, [r3, #0]
    649c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    64a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a4:	2205      	movs	r2, #5
    64a6:	701a      	strb	r2, [r3, #0]
    64a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    64ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b0:	2205      	movs	r2, #5
    64b2:	701a      	strb	r2, [r3, #0]
    64b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    64b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64bc:	781b      	ldrb	r3, [r3, #0]
    64be:	461a      	mov	r2, r3
    64c0:	f64c 1310 	movw	r3, #51472	; 0xc910
    64c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c8:	7819      	ldrb	r1, [r3, #0]
    64ca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    64ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d2:	5499      	strb	r1, [r3, r2]
    64d4:	f64c 1310 	movw	r3, #51472	; 0xc910
    64d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64dc:	781a      	ldrb	r2, [r3, #0]
    64de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    64e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e6:	781b      	ldrb	r3, [r3, #0]
    64e8:	4413      	add	r3, r2
    64ea:	b2da      	uxtb	r2, r3
    64ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    64f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f4:	701a      	strb	r2, [r3, #0]
    64f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    64fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64fe:	781a      	ldrb	r2, [r3, #0]
    6500:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6508:	781b      	ldrb	r3, [r3, #0]
    650a:	4413      	add	r3, r2
    650c:	b2da      	uxtb	r2, r3
    650e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6516:	701a      	strb	r2, [r3, #0]
    6518:	f24c 3319 	movw	r3, #49945	; 0xc319
    651c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6520:	781b      	ldrb	r3, [r3, #0]
    6522:	3301      	adds	r3, #1
    6524:	b2da      	uxtb	r2, r3
    6526:	f24c 3319 	movw	r3, #49945	; 0xc319
    652a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    652e:	701a      	strb	r2, [r3, #0]
    6530:	f24c 3319 	movw	r3, #49945	; 0xc319
    6534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6538:	781b      	ldrb	r3, [r3, #0]
    653a:	2bff      	cmp	r3, #255	; 0xff
    653c:	d105      	bne.n	654a <ground_calibrate+0x4ca>
    653e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6546:	2200      	movs	r2, #0
    6548:	701a      	strb	r2, [r3, #0]
    654a:	f24c 3319 	movw	r3, #49945	; 0xc319
    654e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6552:	781b      	ldrb	r3, [r3, #0]
    6554:	461a      	mov	r2, r3
    6556:	f64c 1310 	movw	r3, #51472	; 0xc910
    655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655e:	7859      	ldrb	r1, [r3, #1]
    6560:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6568:	5499      	strb	r1, [r3, r2]
    656a:	4bd2      	ldr	r3, [pc, #840]	; (68b4 <ground_calibrate+0x834>)
    656c:	781a      	ldrb	r2, [r3, #0]
    656e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6576:	781b      	ldrb	r3, [r3, #0]
    6578:	4413      	add	r3, r2
    657a:	b2da      	uxtb	r2, r3
    657c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6584:	701a      	strb	r2, [r3, #0]
    6586:	f24c 431e 	movw	r3, #50206	; 0xc41e
    658a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    658e:	781a      	ldrb	r2, [r3, #0]
    6590:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6598:	781b      	ldrb	r3, [r3, #0]
    659a:	4413      	add	r3, r2
    659c:	b2da      	uxtb	r2, r3
    659e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    65a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a6:	701a      	strb	r2, [r3, #0]
    65a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    65ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b0:	781b      	ldrb	r3, [r3, #0]
    65b2:	3301      	adds	r3, #1
    65b4:	b2da      	uxtb	r2, r3
    65b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    65ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65be:	701a      	strb	r2, [r3, #0]
    65c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    65c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c8:	781b      	ldrb	r3, [r3, #0]
    65ca:	2bff      	cmp	r3, #255	; 0xff
    65cc:	d105      	bne.n	65da <ground_calibrate+0x55a>
    65ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    65d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d6:	2200      	movs	r2, #0
    65d8:	701a      	strb	r2, [r3, #0]
    65da:	f24c 3319 	movw	r3, #49945	; 0xc319
    65de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e2:	781b      	ldrb	r3, [r3, #0]
    65e4:	461a      	mov	r2, r3
    65e6:	f64c 1310 	movw	r3, #51472	; 0xc910
    65ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ee:	7899      	ldrb	r1, [r3, #2]
    65f0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    65f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f8:	5499      	strb	r1, [r3, r2]
    65fa:	4baf      	ldr	r3, [pc, #700]	; (68b8 <ground_calibrate+0x838>)
    65fc:	781a      	ldrb	r2, [r3, #0]
    65fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6606:	781b      	ldrb	r3, [r3, #0]
    6608:	4413      	add	r3, r2
    660a:	b2da      	uxtb	r2, r3
    660c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6614:	701a      	strb	r2, [r3, #0]
    6616:	f24c 431e 	movw	r3, #50206	; 0xc41e
    661a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    661e:	781a      	ldrb	r2, [r3, #0]
    6620:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6628:	781b      	ldrb	r3, [r3, #0]
    662a:	4413      	add	r3, r2
    662c:	b2da      	uxtb	r2, r3
    662e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6636:	701a      	strb	r2, [r3, #0]
    6638:	f24c 3319 	movw	r3, #49945	; 0xc319
    663c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6640:	781b      	ldrb	r3, [r3, #0]
    6642:	3301      	adds	r3, #1
    6644:	b2da      	uxtb	r2, r3
    6646:	f24c 3319 	movw	r3, #49945	; 0xc319
    664a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664e:	701a      	strb	r2, [r3, #0]
    6650:	f24c 3319 	movw	r3, #49945	; 0xc319
    6654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6658:	781b      	ldrb	r3, [r3, #0]
    665a:	2bff      	cmp	r3, #255	; 0xff
    665c:	d105      	bne.n	666a <ground_calibrate+0x5ea>
    665e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6666:	2200      	movs	r2, #0
    6668:	701a      	strb	r2, [r3, #0]
    666a:	f24c 3319 	movw	r3, #49945	; 0xc319
    666e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6672:	781b      	ldrb	r3, [r3, #0]
    6674:	461a      	mov	r2, r3
    6676:	f64c 1310 	movw	r3, #51472	; 0xc910
    667a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667e:	78d9      	ldrb	r1, [r3, #3]
    6680:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6688:	5499      	strb	r1, [r3, r2]
    668a:	4b8c      	ldr	r3, [pc, #560]	; (68bc <ground_calibrate+0x83c>)
    668c:	781a      	ldrb	r2, [r3, #0]
    668e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6696:	781b      	ldrb	r3, [r3, #0]
    6698:	4413      	add	r3, r2
    669a:	b2da      	uxtb	r2, r3
    669c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a4:	701a      	strb	r2, [r3, #0]
    66a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    66aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ae:	781a      	ldrb	r2, [r3, #0]
    66b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b8:	781b      	ldrb	r3, [r3, #0]
    66ba:	4413      	add	r3, r2
    66bc:	b2da      	uxtb	r2, r3
    66be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    66c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c6:	701a      	strb	r2, [r3, #0]
    66c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    66cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d0:	781b      	ldrb	r3, [r3, #0]
    66d2:	3301      	adds	r3, #1
    66d4:	b2da      	uxtb	r2, r3
    66d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    66da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66de:	701a      	strb	r2, [r3, #0]
    66e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    66e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e8:	781b      	ldrb	r3, [r3, #0]
    66ea:	2bff      	cmp	r3, #255	; 0xff
    66ec:	d105      	bne.n	66fa <ground_calibrate+0x67a>
    66ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    66f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f6:	2200      	movs	r2, #0
    66f8:	701a      	strb	r2, [r3, #0]
    66fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    66fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6702:	781b      	ldrb	r3, [r3, #0]
    6704:	461a      	mov	r2, r3
    6706:	f64c 1314 	movw	r3, #51476	; 0xc914
    670a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    670e:	7819      	ldrb	r1, [r3, #0]
    6710:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6718:	5499      	strb	r1, [r3, r2]
    671a:	f64c 1314 	movw	r3, #51476	; 0xc914
    671e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6722:	781a      	ldrb	r2, [r3, #0]
    6724:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672c:	781b      	ldrb	r3, [r3, #0]
    672e:	4413      	add	r3, r2
    6730:	b2da      	uxtb	r2, r3
    6732:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    673a:	701a      	strb	r2, [r3, #0]
    673c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6744:	781a      	ldrb	r2, [r3, #0]
    6746:	f24c 431d 	movw	r3, #50205	; 0xc41d
    674a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674e:	781b      	ldrb	r3, [r3, #0]
    6750:	4413      	add	r3, r2
    6752:	b2da      	uxtb	r2, r3
    6754:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675c:	701a      	strb	r2, [r3, #0]
    675e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6766:	781b      	ldrb	r3, [r3, #0]
    6768:	3301      	adds	r3, #1
    676a:	b2da      	uxtb	r2, r3
    676c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6774:	701a      	strb	r2, [r3, #0]
    6776:	f24c 3319 	movw	r3, #49945	; 0xc319
    677a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677e:	781b      	ldrb	r3, [r3, #0]
    6780:	2bff      	cmp	r3, #255	; 0xff
    6782:	d105      	bne.n	6790 <ground_calibrate+0x710>
    6784:	f24c 3319 	movw	r3, #49945	; 0xc319
    6788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678c:	2200      	movs	r2, #0
    678e:	701a      	strb	r2, [r3, #0]
    6790:	f24c 3319 	movw	r3, #49945	; 0xc319
    6794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	461a      	mov	r2, r3
    679c:	f64c 1314 	movw	r3, #51476	; 0xc914
    67a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a4:	7859      	ldrb	r1, [r3, #1]
    67a6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    67aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ae:	5499      	strb	r1, [r3, r2]
    67b0:	4b43      	ldr	r3, [pc, #268]	; (68c0 <ground_calibrate+0x840>)
    67b2:	781a      	ldrb	r2, [r3, #0]
    67b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67bc:	781b      	ldrb	r3, [r3, #0]
    67be:	4413      	add	r3, r2
    67c0:	b2da      	uxtb	r2, r3
    67c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ca:	701a      	strb	r2, [r3, #0]
    67cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    67d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d4:	781a      	ldrb	r2, [r3, #0]
    67d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67de:	781b      	ldrb	r3, [r3, #0]
    67e0:	4413      	add	r3, r2
    67e2:	b2da      	uxtb	r2, r3
    67e4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    67e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ec:	701a      	strb	r2, [r3, #0]
    67ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    67f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f6:	781b      	ldrb	r3, [r3, #0]
    67f8:	3301      	adds	r3, #1
    67fa:	b2da      	uxtb	r2, r3
    67fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6804:	701a      	strb	r2, [r3, #0]
    6806:	f24c 3319 	movw	r3, #49945	; 0xc319
    680a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680e:	781b      	ldrb	r3, [r3, #0]
    6810:	2bff      	cmp	r3, #255	; 0xff
    6812:	d105      	bne.n	6820 <ground_calibrate+0x7a0>
    6814:	f24c 3319 	movw	r3, #49945	; 0xc319
    6818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    681c:	2200      	movs	r2, #0
    681e:	701a      	strb	r2, [r3, #0]
    6820:	f24c 3319 	movw	r3, #49945	; 0xc319
    6824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6828:	781b      	ldrb	r3, [r3, #0]
    682a:	461a      	mov	r2, r3
    682c:	f64c 1314 	movw	r3, #51476	; 0xc914
    6830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6834:	7899      	ldrb	r1, [r3, #2]
    6836:	f24c 331c 	movw	r3, #49948	; 0xc31c
    683a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683e:	5499      	strb	r1, [r3, r2]
    6840:	4b20      	ldr	r3, [pc, #128]	; (68c4 <ground_calibrate+0x844>)
    6842:	781a      	ldrb	r2, [r3, #0]
    6844:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    684c:	781b      	ldrb	r3, [r3, #0]
    684e:	4413      	add	r3, r2
    6850:	b2da      	uxtb	r2, r3
    6852:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685a:	701a      	strb	r2, [r3, #0]
    685c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6864:	781a      	ldrb	r2, [r3, #0]
    6866:	f24c 431d 	movw	r3, #50205	; 0xc41d
    686a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686e:	781b      	ldrb	r3, [r3, #0]
    6870:	4413      	add	r3, r2
    6872:	b2da      	uxtb	r2, r3
    6874:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687c:	701a      	strb	r2, [r3, #0]
    687e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6886:	781b      	ldrb	r3, [r3, #0]
    6888:	3301      	adds	r3, #1
    688a:	b2da      	uxtb	r2, r3
    688c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6894:	701a      	strb	r2, [r3, #0]
    6896:	f24c 3319 	movw	r3, #49945	; 0xc319
    689a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    689e:	781b      	ldrb	r3, [r3, #0]
    68a0:	2bff      	cmp	r3, #255	; 0xff
    68a2:	d111      	bne.n	68c8 <ground_calibrate+0x848>
    68a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    68a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ac:	2200      	movs	r2, #0
    68ae:	701a      	strb	r2, [r3, #0]
    68b0:	e00a      	b.n	68c8 <ground_calibrate+0x848>
    68b2:	bf00      	nop
    68b4:	2004c911 	.word	0x2004c911
    68b8:	2004c912 	.word	0x2004c912
    68bc:	2004c913 	.word	0x2004c913
    68c0:	2004c915 	.word	0x2004c915
    68c4:	2004c916 	.word	0x2004c916
    68c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    68cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d0:	781b      	ldrb	r3, [r3, #0]
    68d2:	461a      	mov	r2, r3
    68d4:	f64c 1314 	movw	r3, #51476	; 0xc914
    68d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68dc:	78d9      	ldrb	r1, [r3, #3]
    68de:	f24c 331c 	movw	r3, #49948	; 0xc31c
    68e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e6:	5499      	strb	r1, [r3, r2]
    68e8:	4bd3      	ldr	r3, [pc, #844]	; (6c38 <ground_calibrate+0xbb8>)
    68ea:	781a      	ldrb	r2, [r3, #0]
    68ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    68f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f4:	781b      	ldrb	r3, [r3, #0]
    68f6:	4413      	add	r3, r2
    68f8:	b2da      	uxtb	r2, r3
    68fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    68fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6902:	701a      	strb	r2, [r3, #0]
    6904:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690c:	781a      	ldrb	r2, [r3, #0]
    690e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6916:	781b      	ldrb	r3, [r3, #0]
    6918:	4413      	add	r3, r2
    691a:	b2da      	uxtb	r2, r3
    691c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6924:	701a      	strb	r2, [r3, #0]
    6926:	f24c 3319 	movw	r3, #49945	; 0xc319
    692a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    692e:	781b      	ldrb	r3, [r3, #0]
    6930:	3301      	adds	r3, #1
    6932:	b2da      	uxtb	r2, r3
    6934:	f24c 3319 	movw	r3, #49945	; 0xc319
    6938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693c:	701a      	strb	r2, [r3, #0]
    693e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6946:	781b      	ldrb	r3, [r3, #0]
    6948:	2bff      	cmp	r3, #255	; 0xff
    694a:	d105      	bne.n	6958 <ground_calibrate+0x8d8>
    694c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6954:	2200      	movs	r2, #0
    6956:	701a      	strb	r2, [r3, #0]
    6958:	f24c 3319 	movw	r3, #49945	; 0xc319
    695c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6960:	781b      	ldrb	r3, [r3, #0]
    6962:	461a      	mov	r2, r3
    6964:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    696c:	7819      	ldrb	r1, [r3, #0]
    696e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6976:	5499      	strb	r1, [r3, r2]
    6978:	f64c 130c 	movw	r3, #51468	; 0xc90c
    697c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6980:	781a      	ldrb	r2, [r3, #0]
    6982:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    698a:	781b      	ldrb	r3, [r3, #0]
    698c:	4413      	add	r3, r2
    698e:	b2da      	uxtb	r2, r3
    6990:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6998:	701a      	strb	r2, [r3, #0]
    699a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    699e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a2:	781a      	ldrb	r2, [r3, #0]
    69a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ac:	781b      	ldrb	r3, [r3, #0]
    69ae:	4413      	add	r3, r2
    69b0:	b2da      	uxtb	r2, r3
    69b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    69b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ba:	701a      	strb	r2, [r3, #0]
    69bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    69c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c4:	781b      	ldrb	r3, [r3, #0]
    69c6:	3301      	adds	r3, #1
    69c8:	b2da      	uxtb	r2, r3
    69ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    69ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d2:	701a      	strb	r2, [r3, #0]
    69d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    69d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69dc:	781b      	ldrb	r3, [r3, #0]
    69de:	2bff      	cmp	r3, #255	; 0xff
    69e0:	d105      	bne.n	69ee <ground_calibrate+0x96e>
    69e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    69e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ea:	2200      	movs	r2, #0
    69ec:	701a      	strb	r2, [r3, #0]
    69ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    69f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f6:	781b      	ldrb	r3, [r3, #0]
    69f8:	461a      	mov	r2, r3
    69fa:	f64c 130c 	movw	r3, #51468	; 0xc90c
    69fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a02:	7859      	ldrb	r1, [r3, #1]
    6a04:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0c:	5499      	strb	r1, [r3, r2]
    6a0e:	4b8b      	ldr	r3, [pc, #556]	; (6c3c <ground_calibrate+0xbbc>)
    6a10:	781a      	ldrb	r2, [r3, #0]
    6a12:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1a:	781b      	ldrb	r3, [r3, #0]
    6a1c:	4413      	add	r3, r2
    6a1e:	b2da      	uxtb	r2, r3
    6a20:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a28:	701a      	strb	r2, [r3, #0]
    6a2a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a32:	781a      	ldrb	r2, [r3, #0]
    6a34:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3c:	781b      	ldrb	r3, [r3, #0]
    6a3e:	4413      	add	r3, r2
    6a40:	b2da      	uxtb	r2, r3
    6a42:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a4a:	701a      	strb	r2, [r3, #0]
    6a4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	3301      	adds	r3, #1
    6a58:	b2da      	uxtb	r2, r3
    6a5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a62:	701a      	strb	r2, [r3, #0]
    6a64:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6c:	781b      	ldrb	r3, [r3, #0]
    6a6e:	2bff      	cmp	r3, #255	; 0xff
    6a70:	d105      	bne.n	6a7e <ground_calibrate+0x9fe>
    6a72:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a7a:	2200      	movs	r2, #0
    6a7c:	701a      	strb	r2, [r3, #0]
    6a7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a86:	781b      	ldrb	r3, [r3, #0]
    6a88:	461a      	mov	r2, r3
    6a8a:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a92:	7899      	ldrb	r1, [r3, #2]
    6a94:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9c:	5499      	strb	r1, [r3, r2]
    6a9e:	4b68      	ldr	r3, [pc, #416]	; (6c40 <ground_calibrate+0xbc0>)
    6aa0:	781a      	ldrb	r2, [r3, #0]
    6aa2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aaa:	781b      	ldrb	r3, [r3, #0]
    6aac:	4413      	add	r3, r2
    6aae:	b2da      	uxtb	r2, r3
    6ab0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab8:	701a      	strb	r2, [r3, #0]
    6aba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac2:	781a      	ldrb	r2, [r3, #0]
    6ac4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6acc:	781b      	ldrb	r3, [r3, #0]
    6ace:	4413      	add	r3, r2
    6ad0:	b2da      	uxtb	r2, r3
    6ad2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ada:	701a      	strb	r2, [r3, #0]
    6adc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae4:	781b      	ldrb	r3, [r3, #0]
    6ae6:	3301      	adds	r3, #1
    6ae8:	b2da      	uxtb	r2, r3
    6aea:	f24c 3319 	movw	r3, #49945	; 0xc319
    6aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af2:	701a      	strb	r2, [r3, #0]
    6af4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6afc:	781b      	ldrb	r3, [r3, #0]
    6afe:	2bff      	cmp	r3, #255	; 0xff
    6b00:	d105      	bne.n	6b0e <ground_calibrate+0xa8e>
    6b02:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b0a:	2200      	movs	r2, #0
    6b0c:	701a      	strb	r2, [r3, #0]
    6b0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b16:	781b      	ldrb	r3, [r3, #0]
    6b18:	461a      	mov	r2, r3
    6b1a:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b22:	78d9      	ldrb	r1, [r3, #3]
    6b24:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b2c:	5499      	strb	r1, [r3, r2]
    6b2e:	4b45      	ldr	r3, [pc, #276]	; (6c44 <ground_calibrate+0xbc4>)
    6b30:	781a      	ldrb	r2, [r3, #0]
    6b32:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b3a:	781b      	ldrb	r3, [r3, #0]
    6b3c:	4413      	add	r3, r2
    6b3e:	b2da      	uxtb	r2, r3
    6b40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b48:	701a      	strb	r2, [r3, #0]
    6b4a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b52:	781a      	ldrb	r2, [r3, #0]
    6b54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5c:	781b      	ldrb	r3, [r3, #0]
    6b5e:	4413      	add	r3, r2
    6b60:	b2da      	uxtb	r2, r3
    6b62:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b6a:	701a      	strb	r2, [r3, #0]
    6b6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b74:	781b      	ldrb	r3, [r3, #0]
    6b76:	3301      	adds	r3, #1
    6b78:	b2da      	uxtb	r2, r3
    6b7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b82:	701a      	strb	r2, [r3, #0]
    6b84:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b8c:	781b      	ldrb	r3, [r3, #0]
    6b8e:	2bff      	cmp	r3, #255	; 0xff
    6b90:	d105      	bne.n	6b9e <ground_calibrate+0xb1e>
    6b92:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b9a:	2200      	movs	r2, #0
    6b9c:	701a      	strb	r2, [r3, #0]
    6b9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba6:	781b      	ldrb	r3, [r3, #0]
    6ba8:	461a      	mov	r2, r3
    6baa:	f240 5342 	movw	r3, #1346	; 0x542
    6bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb2:	7819      	ldrb	r1, [r3, #0]
    6bb4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bbc:	5499      	strb	r1, [r3, r2]
    6bbe:	f240 5342 	movw	r3, #1346	; 0x542
    6bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bc6:	781a      	ldrb	r2, [r3, #0]
    6bc8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd0:	781b      	ldrb	r3, [r3, #0]
    6bd2:	4413      	add	r3, r2
    6bd4:	b2da      	uxtb	r2, r3
    6bd6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bde:	701a      	strb	r2, [r3, #0]
    6be0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be8:	781a      	ldrb	r2, [r3, #0]
    6bea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf2:	781b      	ldrb	r3, [r3, #0]
    6bf4:	4413      	add	r3, r2
    6bf6:	b2da      	uxtb	r2, r3
    6bf8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c00:	701a      	strb	r2, [r3, #0]
    6c02:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0a:	781b      	ldrb	r3, [r3, #0]
    6c0c:	3301      	adds	r3, #1
    6c0e:	b2da      	uxtb	r2, r3
    6c10:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c18:	701a      	strb	r2, [r3, #0]
    6c1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c22:	781b      	ldrb	r3, [r3, #0]
    6c24:	2bff      	cmp	r3, #255	; 0xff
    6c26:	d10f      	bne.n	6c48 <ground_calibrate+0xbc8>
    6c28:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c30:	2200      	movs	r2, #0
    6c32:	701a      	strb	r2, [r3, #0]
    6c34:	e008      	b.n	6c48 <ground_calibrate+0xbc8>
    6c36:	bf00      	nop
    6c38:	2004c917 	.word	0x2004c917
    6c3c:	2004c90d 	.word	0x2004c90d
    6c40:	2004c90e 	.word	0x2004c90e
    6c44:	2004c90f 	.word	0x2004c90f
    6c48:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c50:	781b      	ldrb	r3, [r3, #0]
    6c52:	461a      	mov	r2, r3
    6c54:	f240 5342 	movw	r3, #1346	; 0x542
    6c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c5c:	7859      	ldrb	r1, [r3, #1]
    6c5e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c66:	5499      	strb	r1, [r3, r2]
    6c68:	4bd4      	ldr	r3, [pc, #848]	; (6fbc <ground_calibrate+0xf3c>)
    6c6a:	781a      	ldrb	r2, [r3, #0]
    6c6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c74:	781b      	ldrb	r3, [r3, #0]
    6c76:	4413      	add	r3, r2
    6c78:	b2da      	uxtb	r2, r3
    6c7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c82:	701a      	strb	r2, [r3, #0]
    6c84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c8c:	781a      	ldrb	r2, [r3, #0]
    6c8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c96:	781b      	ldrb	r3, [r3, #0]
    6c98:	4413      	add	r3, r2
    6c9a:	b2da      	uxtb	r2, r3
    6c9c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca4:	701a      	strb	r2, [r3, #0]
    6ca6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cae:	781b      	ldrb	r3, [r3, #0]
    6cb0:	3301      	adds	r3, #1
    6cb2:	b2da      	uxtb	r2, r3
    6cb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cbc:	701a      	strb	r2, [r3, #0]
    6cbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc6:	781b      	ldrb	r3, [r3, #0]
    6cc8:	2bff      	cmp	r3, #255	; 0xff
    6cca:	d105      	bne.n	6cd8 <ground_calibrate+0xc58>
    6ccc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd4:	2200      	movs	r2, #0
    6cd6:	701a      	strb	r2, [r3, #0]
    6cd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce0:	781b      	ldrb	r3, [r3, #0]
    6ce2:	461a      	mov	r2, r3
    6ce4:	f240 5344 	movw	r3, #1348	; 0x544
    6ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cec:	7819      	ldrb	r1, [r3, #0]
    6cee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf6:	5499      	strb	r1, [r3, r2]
    6cf8:	f240 5344 	movw	r3, #1348	; 0x544
    6cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d00:	781a      	ldrb	r2, [r3, #0]
    6d02:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d0a:	781b      	ldrb	r3, [r3, #0]
    6d0c:	4413      	add	r3, r2
    6d0e:	b2da      	uxtb	r2, r3
    6d10:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d18:	701a      	strb	r2, [r3, #0]
    6d1a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d22:	781a      	ldrb	r2, [r3, #0]
    6d24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d2c:	781b      	ldrb	r3, [r3, #0]
    6d2e:	4413      	add	r3, r2
    6d30:	b2da      	uxtb	r2, r3
    6d32:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3a:	701a      	strb	r2, [r3, #0]
    6d3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d44:	781b      	ldrb	r3, [r3, #0]
    6d46:	3301      	adds	r3, #1
    6d48:	b2da      	uxtb	r2, r3
    6d4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d52:	701a      	strb	r2, [r3, #0]
    6d54:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5c:	781b      	ldrb	r3, [r3, #0]
    6d5e:	2bff      	cmp	r3, #255	; 0xff
    6d60:	d105      	bne.n	6d6e <ground_calibrate+0xcee>
    6d62:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6a:	2200      	movs	r2, #0
    6d6c:	701a      	strb	r2, [r3, #0]
    6d6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d76:	781b      	ldrb	r3, [r3, #0]
    6d78:	461a      	mov	r2, r3
    6d7a:	f240 5344 	movw	r3, #1348	; 0x544
    6d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d82:	7859      	ldrb	r1, [r3, #1]
    6d84:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d8c:	5499      	strb	r1, [r3, r2]
    6d8e:	4b8c      	ldr	r3, [pc, #560]	; (6fc0 <ground_calibrate+0xf40>)
    6d90:	781a      	ldrb	r2, [r3, #0]
    6d92:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d9a:	781b      	ldrb	r3, [r3, #0]
    6d9c:	4413      	add	r3, r2
    6d9e:	b2da      	uxtb	r2, r3
    6da0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da8:	701a      	strb	r2, [r3, #0]
    6daa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db2:	781a      	ldrb	r2, [r3, #0]
    6db4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dbc:	781b      	ldrb	r3, [r3, #0]
    6dbe:	4413      	add	r3, r2
    6dc0:	b2da      	uxtb	r2, r3
    6dc2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dca:	701a      	strb	r2, [r3, #0]
    6dcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd4:	781b      	ldrb	r3, [r3, #0]
    6dd6:	3301      	adds	r3, #1
    6dd8:	b2da      	uxtb	r2, r3
    6dda:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de2:	701a      	strb	r2, [r3, #0]
    6de4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dec:	781b      	ldrb	r3, [r3, #0]
    6dee:	2bff      	cmp	r3, #255	; 0xff
    6df0:	d105      	bne.n	6dfe <ground_calibrate+0xd7e>
    6df2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfa:	2200      	movs	r2, #0
    6dfc:	701a      	strb	r2, [r3, #0]
    6dfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e06:	781b      	ldrb	r3, [r3, #0]
    6e08:	461a      	mov	r2, r3
    6e0a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e12:	7819      	ldrb	r1, [r3, #0]
    6e14:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e1c:	5499      	strb	r1, [r3, r2]
    6e1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e26:	781b      	ldrb	r3, [r3, #0]
    6e28:	3301      	adds	r3, #1
    6e2a:	b2da      	uxtb	r2, r3
    6e2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e34:	701a      	strb	r2, [r3, #0]
    6e36:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3e:	781b      	ldrb	r3, [r3, #0]
    6e40:	2bff      	cmp	r3, #255	; 0xff
    6e42:	d105      	bne.n	6e50 <ground_calibrate+0xdd0>
    6e44:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e4c:	2200      	movs	r2, #0
    6e4e:	701a      	strb	r2, [r3, #0]
    6e50:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e58:	781b      	ldrb	r3, [r3, #0]
    6e5a:	461a      	mov	r2, r3
    6e5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e64:	7819      	ldrb	r1, [r3, #0]
    6e66:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e6e:	5499      	strb	r1, [r3, r2]
    6e70:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e78:	781b      	ldrb	r3, [r3, #0]
    6e7a:	3301      	adds	r3, #1
    6e7c:	b2da      	uxtb	r2, r3
    6e7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e86:	701a      	strb	r2, [r3, #0]
    6e88:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e90:	781b      	ldrb	r3, [r3, #0]
    6e92:	2bff      	cmp	r3, #255	; 0xff
    6e94:	d105      	bne.n	6ea2 <ground_calibrate+0xe22>
    6e96:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9e:	2200      	movs	r2, #0
    6ea0:	701a      	strb	r2, [r3, #0]
    6ea2:	f242 0339 	movw	r3, #8249	; 0x2039
    6ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eaa:	781b      	ldrb	r3, [r3, #0]
    6eac:	b2db      	uxtb	r3, r3
    6eae:	f003 0310 	and.w	r3, r3, #16
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	d15a      	bne.n	6f6c <ground_calibrate+0xeec>
    6eb6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ebe:	781b      	ldrb	r3, [r3, #0]
    6ec0:	b2db      	uxtb	r3, r3
    6ec2:	461a      	mov	r2, r3
    6ec4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ecc:	5c9a      	ldrb	r2, [r3, r2]
    6ece:	f24c 431b 	movw	r3, #50203	; 0xc41b
    6ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed6:	701a      	strb	r2, [r3, #0]
    6ed8:	f24c 431c 	movw	r3, #50204	; 0xc41c
    6edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee0:	2200      	movs	r2, #0
    6ee2:	701a      	strb	r2, [r3, #0]
    6ee4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eec:	781b      	ldrb	r3, [r3, #0]
    6eee:	b2db      	uxtb	r3, r3
    6ef0:	3301      	adds	r3, #1
    6ef2:	b2da      	uxtb	r2, r3
    6ef4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6efc:	701a      	strb	r2, [r3, #0]
    6efe:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f06:	781b      	ldrb	r3, [r3, #0]
    6f08:	b2db      	uxtb	r3, r3
    6f0a:	2bff      	cmp	r3, #255	; 0xff
    6f0c:	d105      	bne.n	6f1a <ground_calibrate+0xe9a>
    6f0e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f16:	2200      	movs	r2, #0
    6f18:	701a      	strb	r2, [r3, #0]
    6f1a:	f242 0338 	movw	r3, #8248	; 0x2038
    6f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f22:	f242 0238 	movw	r2, #8248	; 0x2038
    6f26:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f2a:	7812      	ldrb	r2, [r2, #0]
    6f2c:	b2d2      	uxtb	r2, r2
    6f2e:	f042 0201 	orr.w	r2, r2, #1
    6f32:	b2d2      	uxtb	r2, r2
    6f34:	701a      	strb	r2, [r3, #0]
    6f36:	f242 0339 	movw	r3, #8249	; 0x2039
    6f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f3e:	f242 0239 	movw	r2, #8249	; 0x2039
    6f42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f46:	7812      	ldrb	r2, [r2, #0]
    6f48:	b2d2      	uxtb	r2, r2
    6f4a:	f042 0210 	orr.w	r2, r2, #16
    6f4e:	b2d2      	uxtb	r2, r2
    6f50:	701a      	strb	r2, [r3, #0]
    6f52:	e00b      	b.n	6f6c <ground_calibrate+0xeec>
    6f54:	f24c 3318 	movw	r3, #49944	; 0xc318
    6f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f5c:	781b      	ldrb	r3, [r3, #0]
    6f5e:	3301      	adds	r3, #1
    6f60:	b2da      	uxtb	r2, r3
    6f62:	f24c 3318 	movw	r3, #49944	; 0xc318
    6f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f6a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6f6c:	f24c 3312 	movw	r3, #49938	; 0xc312
    6f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f74:	2202      	movs	r2, #2
    6f76:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6f78:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f80:	781a      	ldrb	r2, [r3, #0]
    6f82:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f8a:	781b      	ldrb	r3, [r3, #0]
    6f8c:	b2db      	uxtb	r3, r3
    6f8e:	429a      	cmp	r2, r3
    6f90:	d318      	bcc.n	6fc4 <ground_calibrate+0xf44>
    6f92:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f9a:	781b      	ldrb	r3, [r3, #0]
    6f9c:	b2db      	uxtb	r3, r3
    6f9e:	461a      	mov	r2, r3
    6fa0:	f24c 3319 	movw	r3, #49945	; 0xc319
    6fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa8:	781b      	ldrb	r3, [r3, #0]
    6faa:	1ad3      	subs	r3, r2, r3
    6fac:	33ff      	adds	r3, #255	; 0xff
    6fae:	2b06      	cmp	r3, #6
    6fb0:	bfd4      	ite	le
    6fb2:	2300      	movle	r3, #0
    6fb4:	2301      	movgt	r3, #1
    6fb6:	b2db      	uxtb	r3, r3
    6fb8:	e016      	b.n	6fe8 <ground_calibrate+0xf68>
    6fba:	bf00      	nop
    6fbc:	20000543 	.word	0x20000543
    6fc0:	20000545 	.word	0x20000545
    6fc4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fcc:	781b      	ldrb	r3, [r3, #0]
    6fce:	b2db      	uxtb	r3, r3
    6fd0:	461a      	mov	r2, r3
    6fd2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fda:	781b      	ldrb	r3, [r3, #0]
    6fdc:	1ad3      	subs	r3, r2, r3
    6fde:	2b06      	cmp	r3, #6
    6fe0:	bfd4      	ite	le
    6fe2:	2300      	movle	r3, #0
    6fe4:	2301      	movgt	r3, #1
    6fe6:	b2db      	uxtb	r3, r3
    6fe8:	2b00      	cmp	r3, #0
    6fea:	f000 8194 	beq.w	7316 <ground_calibrate+0x1296>
    6fee:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff6:	781b      	ldrb	r3, [r3, #0]
    6ff8:	461a      	mov	r2, r3
    6ffa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7002:	2105      	movs	r1, #5
    7004:	5499      	strb	r1, [r3, r2]
    7006:	f24c 3319 	movw	r3, #49945	; 0xc319
    700a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700e:	781b      	ldrb	r3, [r3, #0]
    7010:	3301      	adds	r3, #1
    7012:	b2da      	uxtb	r2, r3
    7014:	f24c 3319 	movw	r3, #49945	; 0xc319
    7018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701c:	701a      	strb	r2, [r3, #0]
    701e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7026:	781b      	ldrb	r3, [r3, #0]
    7028:	2bff      	cmp	r3, #255	; 0xff
    702a:	d105      	bne.n	7038 <ground_calibrate+0xfb8>
    702c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7034:	2200      	movs	r2, #0
    7036:	701a      	strb	r2, [r3, #0]
    7038:	f24c 3319 	movw	r3, #49945	; 0xc319
    703c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7040:	781b      	ldrb	r3, [r3, #0]
    7042:	461a      	mov	r2, r3
    7044:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    704c:	2103      	movs	r1, #3
    704e:	5499      	strb	r1, [r3, r2]
    7050:	f24c 3319 	movw	r3, #49945	; 0xc319
    7054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7058:	781b      	ldrb	r3, [r3, #0]
    705a:	3301      	adds	r3, #1
    705c:	b2da      	uxtb	r2, r3
    705e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7066:	701a      	strb	r2, [r3, #0]
    7068:	f24c 3319 	movw	r3, #49945	; 0xc319
    706c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7070:	781b      	ldrb	r3, [r3, #0]
    7072:	2bff      	cmp	r3, #255	; 0xff
    7074:	d105      	bne.n	7082 <ground_calibrate+0x1002>
    7076:	f24c 3319 	movw	r3, #49945	; 0xc319
    707a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707e:	2200      	movs	r2, #0
    7080:	701a      	strb	r2, [r3, #0]
    7082:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708a:	2203      	movs	r2, #3
    708c:	701a      	strb	r2, [r3, #0]
    708e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7096:	2203      	movs	r2, #3
    7098:	701a      	strb	r2, [r3, #0]
    709a:	f24c 3319 	movw	r3, #49945	; 0xc319
    709e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a2:	781b      	ldrb	r3, [r3, #0]
    70a4:	461a      	mov	r2, r3
    70a6:	f240 5340 	movw	r3, #1344	; 0x540
    70aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ae:	7819      	ldrb	r1, [r3, #0]
    70b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    70b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b8:	5499      	strb	r1, [r3, r2]
    70ba:	f240 5340 	movw	r3, #1344	; 0x540
    70be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70c2:	781a      	ldrb	r2, [r3, #0]
    70c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    70c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70cc:	781b      	ldrb	r3, [r3, #0]
    70ce:	4413      	add	r3, r2
    70d0:	b2da      	uxtb	r2, r3
    70d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    70d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70da:	701a      	strb	r2, [r3, #0]
    70dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    70e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e4:	781a      	ldrb	r2, [r3, #0]
    70e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    70ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ee:	781b      	ldrb	r3, [r3, #0]
    70f0:	4413      	add	r3, r2
    70f2:	b2da      	uxtb	r2, r3
    70f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    70f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70fc:	701a      	strb	r2, [r3, #0]
    70fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    7102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7106:	781b      	ldrb	r3, [r3, #0]
    7108:	3301      	adds	r3, #1
    710a:	b2da      	uxtb	r2, r3
    710c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7114:	701a      	strb	r2, [r3, #0]
    7116:	f24c 3319 	movw	r3, #49945	; 0xc319
    711a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    711e:	781b      	ldrb	r3, [r3, #0]
    7120:	2bff      	cmp	r3, #255	; 0xff
    7122:	d105      	bne.n	7130 <ground_calibrate+0x10b0>
    7124:	f24c 3319 	movw	r3, #49945	; 0xc319
    7128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    712c:	2200      	movs	r2, #0
    712e:	701a      	strb	r2, [r3, #0]
    7130:	f24c 3319 	movw	r3, #49945	; 0xc319
    7134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7138:	781b      	ldrb	r3, [r3, #0]
    713a:	461a      	mov	r2, r3
    713c:	f240 5340 	movw	r3, #1344	; 0x540
    7140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7144:	7859      	ldrb	r1, [r3, #1]
    7146:	f24c 331c 	movw	r3, #49948	; 0xc31c
    714a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    714e:	5499      	strb	r1, [r3, r2]
    7150:	4b77      	ldr	r3, [pc, #476]	; (7330 <ground_calibrate+0x12b0>)
    7152:	781a      	ldrb	r2, [r3, #0]
    7154:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    715c:	781b      	ldrb	r3, [r3, #0]
    715e:	4413      	add	r3, r2
    7160:	b2da      	uxtb	r2, r3
    7162:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716a:	701a      	strb	r2, [r3, #0]
    716c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7174:	781a      	ldrb	r2, [r3, #0]
    7176:	f24c 431d 	movw	r3, #50205	; 0xc41d
    717a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717e:	781b      	ldrb	r3, [r3, #0]
    7180:	4413      	add	r3, r2
    7182:	b2da      	uxtb	r2, r3
    7184:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    718c:	701a      	strb	r2, [r3, #0]
    718e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7196:	781b      	ldrb	r3, [r3, #0]
    7198:	3301      	adds	r3, #1
    719a:	b2da      	uxtb	r2, r3
    719c:	f24c 3319 	movw	r3, #49945	; 0xc319
    71a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a4:	701a      	strb	r2, [r3, #0]
    71a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    71aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ae:	781b      	ldrb	r3, [r3, #0]
    71b0:	2bff      	cmp	r3, #255	; 0xff
    71b2:	d105      	bne.n	71c0 <ground_calibrate+0x1140>
    71b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    71b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71bc:	2200      	movs	r2, #0
    71be:	701a      	strb	r2, [r3, #0]
    71c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    71c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c8:	781b      	ldrb	r3, [r3, #0]
    71ca:	461a      	mov	r2, r3
    71cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    71d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d4:	7819      	ldrb	r1, [r3, #0]
    71d6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    71da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71de:	5499      	strb	r1, [r3, r2]
    71e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    71e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e8:	781b      	ldrb	r3, [r3, #0]
    71ea:	3301      	adds	r3, #1
    71ec:	b2da      	uxtb	r2, r3
    71ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    71f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71f6:	701a      	strb	r2, [r3, #0]
    71f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    71fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7200:	781b      	ldrb	r3, [r3, #0]
    7202:	2bff      	cmp	r3, #255	; 0xff
    7204:	d105      	bne.n	7212 <ground_calibrate+0x1192>
    7206:	f24c 3319 	movw	r3, #49945	; 0xc319
    720a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    720e:	2200      	movs	r2, #0
    7210:	701a      	strb	r2, [r3, #0]
    7212:	f24c 3319 	movw	r3, #49945	; 0xc319
    7216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    721a:	781b      	ldrb	r3, [r3, #0]
    721c:	461a      	mov	r2, r3
    721e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7226:	7819      	ldrb	r1, [r3, #0]
    7228:	f24c 331c 	movw	r3, #49948	; 0xc31c
    722c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7230:	5499      	strb	r1, [r3, r2]
    7232:	f24c 3319 	movw	r3, #49945	; 0xc319
    7236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    723a:	781b      	ldrb	r3, [r3, #0]
    723c:	3301      	adds	r3, #1
    723e:	b2da      	uxtb	r2, r3
    7240:	f24c 3319 	movw	r3, #49945	; 0xc319
    7244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7248:	701a      	strb	r2, [r3, #0]
    724a:	f24c 3319 	movw	r3, #49945	; 0xc319
    724e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7252:	781b      	ldrb	r3, [r3, #0]
    7254:	2bff      	cmp	r3, #255	; 0xff
    7256:	d105      	bne.n	7264 <ground_calibrate+0x11e4>
    7258:	f24c 3319 	movw	r3, #49945	; 0xc319
    725c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7260:	2200      	movs	r2, #0
    7262:	701a      	strb	r2, [r3, #0]
    7264:	f242 0339 	movw	r3, #8249	; 0x2039
    7268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    726c:	781b      	ldrb	r3, [r3, #0]
    726e:	b2db      	uxtb	r3, r3
    7270:	f003 0310 	and.w	r3, r3, #16
    7274:	2b00      	cmp	r3, #0
    7276:	d15a      	bne.n	732e <ground_calibrate+0x12ae>
    7278:	f24c 331a 	movw	r3, #49946	; 0xc31a
    727c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7280:	781b      	ldrb	r3, [r3, #0]
    7282:	b2db      	uxtb	r3, r3
    7284:	461a      	mov	r2, r3
    7286:	f24c 331c 	movw	r3, #49948	; 0xc31c
    728a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    728e:	5c9a      	ldrb	r2, [r3, r2]
    7290:	f24c 431b 	movw	r3, #50203	; 0xc41b
    7294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7298:	701a      	strb	r2, [r3, #0]
    729a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    729e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a2:	2200      	movs	r2, #0
    72a4:	701a      	strb	r2, [r3, #0]
    72a6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    72aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	b2db      	uxtb	r3, r3
    72b2:	3301      	adds	r3, #1
    72b4:	b2da      	uxtb	r2, r3
    72b6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    72ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72be:	701a      	strb	r2, [r3, #0]
    72c0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    72c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72c8:	781b      	ldrb	r3, [r3, #0]
    72ca:	b2db      	uxtb	r3, r3
    72cc:	2bff      	cmp	r3, #255	; 0xff
    72ce:	d105      	bne.n	72dc <ground_calibrate+0x125c>
    72d0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    72d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d8:	2200      	movs	r2, #0
    72da:	701a      	strb	r2, [r3, #0]
    72dc:	f242 0338 	movw	r3, #8248	; 0x2038
    72e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e4:	f242 0238 	movw	r2, #8248	; 0x2038
    72e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    72ec:	7812      	ldrb	r2, [r2, #0]
    72ee:	b2d2      	uxtb	r2, r2
    72f0:	f042 0201 	orr.w	r2, r2, #1
    72f4:	b2d2      	uxtb	r2, r2
    72f6:	701a      	strb	r2, [r3, #0]
    72f8:	f242 0339 	movw	r3, #8249	; 0x2039
    72fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7300:	f242 0239 	movw	r2, #8249	; 0x2039
    7304:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7308:	7812      	ldrb	r2, [r2, #0]
    730a:	b2d2      	uxtb	r2, r2
    730c:	f042 0210 	orr.w	r2, r2, #16
    7310:	b2d2      	uxtb	r2, r2
    7312:	701a      	strb	r2, [r3, #0]
    7314:	e00b      	b.n	732e <ground_calibrate+0x12ae>
    7316:	f24c 3318 	movw	r3, #49944	; 0xc318
    731a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    731e:	781b      	ldrb	r3, [r3, #0]
    7320:	3301      	adds	r3, #1
    7322:	b2da      	uxtb	r2, r3
    7324:	f24c 3318 	movw	r3, #49944	; 0xc318
    7328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    732c:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    732e:	bd80      	pop	{r7, pc}
    7330:	20000541 	.word	0x20000541

00007334 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    7334:	b480      	push	{r7}
    7336:	b083      	sub	sp, #12
    7338:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    733a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    733e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7342:	781b      	ldrb	r3, [r3, #0]
    7344:	2b03      	cmp	r3, #3
    7346:	d10c      	bne.n	7362 <pprz_mode_update+0x2e>
    7348:	f24c 3300 	movw	r3, #49920	; 0xc300
    734c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7350:	781b      	ldrb	r3, [r3, #0]
    7352:	2b00      	cmp	r3, #0
    7354:	d032      	beq.n	73bc <pprz_mode_update+0x88>
    7356:	f24c 3300 	movw	r3, #49920	; 0xc300
    735a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    735e:	2200      	movs	r2, #0
    7360:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    7362:	f24c 4320 	movw	r3, #50208	; 0xc420
    7366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    736a:	891b      	ldrh	r3, [r3, #8]
    736c:	b21b      	sxth	r3, r3
    736e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    7372:	dc0f      	bgt.n	7394 <pprz_mode_update+0x60>
    7374:	f24c 4320 	movw	r3, #50208	; 0xc420
    7378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    737c:	891b      	ldrh	r3, [r3, #8]
    737e:	b21a      	sxth	r2, r3
    7380:	f64e 5341 	movw	r3, #60737	; 0xed41
    7384:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7388:	429a      	cmp	r2, r3
    738a:	bfb4      	ite	lt
    738c:	2300      	movlt	r3, #0
    738e:	2301      	movge	r3, #1
    7390:	b2db      	uxtb	r3, r3
    7392:	e000      	b.n	7396 <pprz_mode_update+0x62>
    7394:	2302      	movs	r3, #2
    7396:	71fb      	strb	r3, [r7, #7]
    7398:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    739c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a0:	781b      	ldrb	r3, [r3, #0]
    73a2:	79fa      	ldrb	r2, [r7, #7]
    73a4:	429a      	cmp	r2, r3
    73a6:	d007      	beq.n	73b8 <pprz_mode_update+0x84>
    73a8:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    73ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b0:	79fa      	ldrb	r2, [r7, #7]
    73b2:	701a      	strb	r2, [r3, #0]
    73b4:	2301      	movs	r3, #1
    73b6:	e002      	b.n	73be <pprz_mode_update+0x8a>
    73b8:	2300      	movs	r3, #0
    73ba:	e000      	b.n	73be <pprz_mode_update+0x8a>
  } else
    return FALSE;
    73bc:	2300      	movs	r3, #0
}
    73be:	4618      	mov	r0, r3
    73c0:	370c      	adds	r7, #12
    73c2:	46bd      	mov	sp, r7
    73c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73c8:	4770      	bx	lr
    73ca:	bf00      	nop

000073cc <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    73cc:	b480      	push	{r7}
    73ce:	b083      	sub	sp, #12
    73d0:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    73d2:	f24c 4320 	movw	r3, #50208	; 0xc420
    73d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73da:	89db      	ldrh	r3, [r3, #14]
    73dc:	b21a      	sxth	r2, r3
    73de:	f640 437f 	movw	r3, #3199	; 0xc7f
    73e2:	429a      	cmp	r2, r3
    73e4:	bfd4      	ite	le
    73e6:	2300      	movle	r3, #0
    73e8:	2301      	movgt	r3, #1
    73ea:	b2db      	uxtb	r3, r3
    73ec:	71fb      	strb	r3, [r7, #7]
    73ee:	f240 533c 	movw	r3, #1340	; 0x53c
    73f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73f6:	781b      	ldrb	r3, [r3, #0]
    73f8:	79fa      	ldrb	r2, [r7, #7]
    73fa:	429a      	cmp	r2, r3
    73fc:	d007      	beq.n	740e <ir_estim_mode_update+0x42>
    73fe:	f240 533c 	movw	r3, #1340	; 0x53c
    7402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7406:	79fa      	ldrb	r2, [r7, #7]
    7408:	701a      	strb	r2, [r3, #0]
    740a:	2301      	movs	r3, #1
    740c:	e000      	b.n	7410 <ir_estim_mode_update+0x44>
    740e:	2300      	movs	r3, #0
}
    7410:	4618      	mov	r0, r3
    7412:	370c      	adds	r7, #12
    7414:	46bd      	mov	sp, r7
    7416:	f85d 7b04 	ldr.w	r7, [sp], #4
    741a:	4770      	bx	lr

0000741c <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    741c:	b480      	push	{r7}
    741e:	b083      	sub	sp, #12
    7420:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    7422:	f24c 4320 	movw	r3, #50208	; 0xc420
    7426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    742a:	7cdb      	ldrb	r3, [r3, #19]
    742c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    742e:	f24c 3303 	movw	r3, #49923	; 0xc303
    7432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7436:	781b      	ldrb	r3, [r3, #0]
    7438:	79fa      	ldrb	r2, [r7, #7]
    743a:	429a      	cmp	r2, r3
    743c:	d017      	beq.n	746e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    743e:	f24c 3303 	movw	r3, #49923	; 0xc303
    7442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7446:	781b      	ldrb	r3, [r3, #0]
    7448:	461a      	mov	r2, r3
    744a:	79fb      	ldrb	r3, [r7, #7]
    744c:	4053      	eors	r3, r2
    744e:	f003 0303 	and.w	r3, r3, #3
    7452:	2b00      	cmp	r3, #0
    7454:	bf0c      	ite	eq
    7456:	2300      	moveq	r3, #0
    7458:	2301      	movne	r3, #1
    745a:	b2db      	uxtb	r3, r3
    745c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    745e:	f24c 3303 	movw	r3, #49923	; 0xc303
    7462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7466:	79fa      	ldrb	r2, [r7, #7]
    7468:	701a      	strb	r2, [r3, #0]
    return changed;
    746a:	79bb      	ldrb	r3, [r7, #6]
    746c:	e000      	b.n	7470 <mcu1_status_update+0x54>
  }
  return FALSE;
    746e:	2300      	movs	r3, #0
}
    7470:	4618      	mov	r0, r3
    7472:	370c      	adds	r7, #12
    7474:	46bd      	mov	sp, r7
    7476:	f85d 7b04 	ldr.w	r7, [sp], #4
    747a:	4770      	bx	lr

0000747c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    747c:	b480      	push	{r7}
    747e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7480:	f64c 132c 	movw	r3, #51500	; 0xc92c
    7484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7488:	781b      	ldrb	r3, [r3, #0]
    748a:	2b00      	cmp	r3, #0
    748c:	d12a      	bne.n	74e4 <events_update+0x68>
    748e:	f24c 4320 	movw	r3, #50208	; 0xc420
    7492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7496:	895b      	ldrh	r3, [r3, #10]
    7498:	b21b      	sxth	r3, r3
    749a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    749e:	dd21      	ble.n	74e4 <events_update+0x68>
    74a0:	f24c 3314 	movw	r3, #49940	; 0xc314
    74a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a8:	881b      	ldrh	r3, [r3, #0]
    74aa:	2b13      	cmp	r3, #19
    74ac:	d819      	bhi.n	74e2 <events_update+0x66>
    74ae:	f24c 3314 	movw	r3, #49940	; 0xc314
    74b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b6:	881b      	ldrh	r3, [r3, #0]
    74b8:	3301      	adds	r3, #1
    74ba:	b29a      	uxth	r2, r3
    74bc:	f24c 3314 	movw	r3, #49940	; 0xc314
    74c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c4:	801a      	strh	r2, [r3, #0]
    74c6:	f24c 3314 	movw	r3, #49940	; 0xc314
    74ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ce:	881b      	ldrh	r3, [r3, #0]
    74d0:	2b14      	cmp	r3, #20
    74d2:	d106      	bne.n	74e2 <events_update+0x66>
    74d4:	f24c 3300 	movw	r3, #49920	; 0xc300
    74d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74dc:	2201      	movs	r2, #1
    74de:	701a      	strb	r2, [r3, #0]
    74e0:	e00c      	b.n	74fc <events_update+0x80>
    74e2:	e00b      	b.n	74fc <events_update+0x80>
    74e4:	f24c 3314 	movw	r3, #49940	; 0xc314
    74e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ec:	2200      	movs	r2, #0
    74ee:	801a      	strh	r2, [r3, #0]
    74f0:	f24c 3300 	movw	r3, #49920	; 0xc300
    74f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f8:	2200      	movs	r2, #0
    74fa:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    74fc:	f64c 132c 	movw	r3, #51500	; 0xc92c
    7500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	2b00      	cmp	r3, #0
    7508:	d12a      	bne.n	7560 <events_update+0xe4>
    750a:	f24c 4320 	movw	r3, #50208	; 0xc420
    750e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7512:	895b      	ldrh	r3, [r3, #10]
    7514:	b21b      	sxth	r3, r3
    7516:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    751a:	da21      	bge.n	7560 <events_update+0xe4>
    751c:	f24c 3316 	movw	r3, #49942	; 0xc316
    7520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7524:	881b      	ldrh	r3, [r3, #0]
    7526:	2b13      	cmp	r3, #19
    7528:	d819      	bhi.n	755e <events_update+0xe2>
    752a:	f24c 3316 	movw	r3, #49942	; 0xc316
    752e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7532:	881b      	ldrh	r3, [r3, #0]
    7534:	3301      	adds	r3, #1
    7536:	b29a      	uxth	r2, r3
    7538:	f24c 3316 	movw	r3, #49942	; 0xc316
    753c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7540:	801a      	strh	r2, [r3, #0]
    7542:	f24c 3316 	movw	r3, #49942	; 0xc316
    7546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754a:	881b      	ldrh	r3, [r3, #0]
    754c:	2b14      	cmp	r3, #20
    754e:	d106      	bne.n	755e <events_update+0xe2>
    7550:	f24c 3301 	movw	r3, #49921	; 0xc301
    7554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7558:	2201      	movs	r2, #1
    755a:	701a      	strb	r2, [r3, #0]
    755c:	e00c      	b.n	7578 <events_update+0xfc>
    755e:	e00b      	b.n	7578 <events_update+0xfc>
    7560:	f24c 3316 	movw	r3, #49942	; 0xc316
    7564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7568:	2200      	movs	r2, #0
    756a:	801a      	strh	r2, [r3, #0]
    756c:	f24c 3301 	movw	r3, #49921	; 0xc301
    7570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7574:	2200      	movs	r2, #0
    7576:	701a      	strb	r2, [r3, #0]
}  
    7578:	46bd      	mov	sp, r7
    757a:	f85d 7b04 	ldr.w	r7, [sp], #4
    757e:	4770      	bx	lr

00007580 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7580:	b480      	push	{r7}
    7582:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    7584:	f24c 4320 	movw	r3, #50208	; 0xc420
    7588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    758c:	88da      	ldrh	r2, [r3, #6]
    758e:	f24c 4338 	movw	r3, #50232	; 0xc438
    7592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7596:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7598:	f24c 4338 	movw	r3, #50232	; 0xc438
    759c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a0:	2200      	movs	r2, #0
    75a2:	74da      	strb	r2, [r3, #19]
}
    75a4:	46bd      	mov	sp, r7
    75a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    75aa:	4770      	bx	lr

000075ac <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    75ac:	b480      	push	{r7}
    75ae:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    75b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    75b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b8:	781a      	ldrb	r2, [r3, #0]
    75ba:	f24c 331a 	movw	r3, #49946	; 0xc31a
    75be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c2:	781b      	ldrb	r3, [r3, #0]
    75c4:	b2db      	uxtb	r3, r3
    75c6:	429a      	cmp	r2, r3
    75c8:	d313      	bcc.n	75f2 <send_boot+0x46>
    75ca:	f24c 331a 	movw	r3, #49946	; 0xc31a
    75ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d2:	781b      	ldrb	r3, [r3, #0]
    75d4:	b2db      	uxtb	r3, r3
    75d6:	461a      	mov	r2, r3
    75d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    75dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e0:	781b      	ldrb	r3, [r3, #0]
    75e2:	1ad3      	subs	r3, r2, r3
    75e4:	33ff      	adds	r3, #255	; 0xff
    75e6:	2b06      	cmp	r3, #6
    75e8:	bfd4      	ite	le
    75ea:	2300      	movle	r3, #0
    75ec:	2301      	movgt	r3, #1
    75ee:	b2db      	uxtb	r3, r3
    75f0:	e011      	b.n	7616 <send_boot+0x6a>
    75f2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    75f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fa:	781b      	ldrb	r3, [r3, #0]
    75fc:	b2db      	uxtb	r3, r3
    75fe:	461a      	mov	r2, r3
    7600:	f24c 3319 	movw	r3, #49945	; 0xc319
    7604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7608:	781b      	ldrb	r3, [r3, #0]
    760a:	1ad3      	subs	r3, r2, r3
    760c:	2b06      	cmp	r3, #6
    760e:	bfd4      	ite	le
    7610:	2300      	movle	r3, #0
    7612:	2301      	movgt	r3, #1
    7614:	b2db      	uxtb	r3, r3
    7616:	2b00      	cmp	r3, #0
    7618:	f000 8194 	beq.w	7944 <send_boot+0x398>
    761c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7624:	781b      	ldrb	r3, [r3, #0]
    7626:	461a      	mov	r2, r3
    7628:	f24c 331c 	movw	r3, #49948	; 0xc31c
    762c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7630:	2105      	movs	r1, #5
    7632:	5499      	strb	r1, [r3, r2]
    7634:	f24c 3319 	movw	r3, #49945	; 0xc319
    7638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    763c:	781b      	ldrb	r3, [r3, #0]
    763e:	3301      	adds	r3, #1
    7640:	b2da      	uxtb	r2, r3
    7642:	f24c 3319 	movw	r3, #49945	; 0xc319
    7646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764a:	701a      	strb	r2, [r3, #0]
    764c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7654:	781b      	ldrb	r3, [r3, #0]
    7656:	2bff      	cmp	r3, #255	; 0xff
    7658:	d105      	bne.n	7666 <send_boot+0xba>
    765a:	f24c 3319 	movw	r3, #49945	; 0xc319
    765e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7662:	2200      	movs	r2, #0
    7664:	701a      	strb	r2, [r3, #0]
    7666:	f24c 3319 	movw	r3, #49945	; 0xc319
    766a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    766e:	781b      	ldrb	r3, [r3, #0]
    7670:	461a      	mov	r2, r3
    7672:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    767a:	2101      	movs	r1, #1
    767c:	5499      	strb	r1, [r3, r2]
    767e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7686:	781b      	ldrb	r3, [r3, #0]
    7688:	3301      	adds	r3, #1
    768a:	b2da      	uxtb	r2, r3
    768c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7694:	701a      	strb	r2, [r3, #0]
    7696:	f24c 3319 	movw	r3, #49945	; 0xc319
    769a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    769e:	781b      	ldrb	r3, [r3, #0]
    76a0:	2bff      	cmp	r3, #255	; 0xff
    76a2:	d105      	bne.n	76b0 <send_boot+0x104>
    76a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    76a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ac:	2200      	movs	r2, #0
    76ae:	701a      	strb	r2, [r3, #0]
    76b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    76b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b8:	2201      	movs	r2, #1
    76ba:	701a      	strb	r2, [r3, #0]
    76bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    76c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c4:	2201      	movs	r2, #1
    76c6:	701a      	strb	r2, [r3, #0]
    76c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    76cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d0:	781b      	ldrb	r3, [r3, #0]
    76d2:	461a      	mov	r2, r3
    76d4:	f648 1316 	movw	r3, #35094	; 0x8916
    76d8:	f2c0 0301 	movt	r3, #1
    76dc:	7819      	ldrb	r1, [r3, #0]
    76de:	f24c 331c 	movw	r3, #49948	; 0xc31c
    76e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e6:	5499      	strb	r1, [r3, r2]
    76e8:	f648 1316 	movw	r3, #35094	; 0x8916
    76ec:	f2c0 0301 	movt	r3, #1
    76f0:	781a      	ldrb	r2, [r3, #0]
    76f2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    76f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fa:	781b      	ldrb	r3, [r3, #0]
    76fc:	4413      	add	r3, r2
    76fe:	b2da      	uxtb	r2, r3
    7700:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7708:	701a      	strb	r2, [r3, #0]
    770a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    770e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7712:	781a      	ldrb	r2, [r3, #0]
    7714:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    771c:	781b      	ldrb	r3, [r3, #0]
    771e:	4413      	add	r3, r2
    7720:	b2da      	uxtb	r2, r3
    7722:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    772a:	701a      	strb	r2, [r3, #0]
    772c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7734:	781b      	ldrb	r3, [r3, #0]
    7736:	3301      	adds	r3, #1
    7738:	b2da      	uxtb	r2, r3
    773a:	f24c 3319 	movw	r3, #49945	; 0xc319
    773e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7742:	701a      	strb	r2, [r3, #0]
    7744:	f24c 3319 	movw	r3, #49945	; 0xc319
    7748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774c:	781b      	ldrb	r3, [r3, #0]
    774e:	2bff      	cmp	r3, #255	; 0xff
    7750:	d105      	bne.n	775e <send_boot+0x1b2>
    7752:	f24c 3319 	movw	r3, #49945	; 0xc319
    7756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    775a:	2200      	movs	r2, #0
    775c:	701a      	strb	r2, [r3, #0]
    775e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7766:	781b      	ldrb	r3, [r3, #0]
    7768:	461a      	mov	r2, r3
    776a:	f648 1316 	movw	r3, #35094	; 0x8916
    776e:	f2c0 0301 	movt	r3, #1
    7772:	7859      	ldrb	r1, [r3, #1]
    7774:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777c:	5499      	strb	r1, [r3, r2]
    777e:	4b88      	ldr	r3, [pc, #544]	; (79a0 <send_boot+0x3f4>)
    7780:	781a      	ldrb	r2, [r3, #0]
    7782:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    778a:	781b      	ldrb	r3, [r3, #0]
    778c:	4413      	add	r3, r2
    778e:	b2da      	uxtb	r2, r3
    7790:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7798:	701a      	strb	r2, [r3, #0]
    779a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    779e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a2:	781a      	ldrb	r2, [r3, #0]
    77a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    77a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ac:	781b      	ldrb	r3, [r3, #0]
    77ae:	4413      	add	r3, r2
    77b0:	b2da      	uxtb	r2, r3
    77b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    77b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ba:	701a      	strb	r2, [r3, #0]
    77bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    77c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c4:	781b      	ldrb	r3, [r3, #0]
    77c6:	3301      	adds	r3, #1
    77c8:	b2da      	uxtb	r2, r3
    77ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    77ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d2:	701a      	strb	r2, [r3, #0]
    77d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    77d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77dc:	781b      	ldrb	r3, [r3, #0]
    77de:	2bff      	cmp	r3, #255	; 0xff
    77e0:	d105      	bne.n	77ee <send_boot+0x242>
    77e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    77e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ea:	2200      	movs	r2, #0
    77ec:	701a      	strb	r2, [r3, #0]
    77ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    77f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f6:	781b      	ldrb	r3, [r3, #0]
    77f8:	461a      	mov	r2, r3
    77fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    77fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7802:	7819      	ldrb	r1, [r3, #0]
    7804:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    780c:	5499      	strb	r1, [r3, r2]
    780e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7816:	781b      	ldrb	r3, [r3, #0]
    7818:	3301      	adds	r3, #1
    781a:	b2da      	uxtb	r2, r3
    781c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7824:	701a      	strb	r2, [r3, #0]
    7826:	f24c 3319 	movw	r3, #49945	; 0xc319
    782a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782e:	781b      	ldrb	r3, [r3, #0]
    7830:	2bff      	cmp	r3, #255	; 0xff
    7832:	d105      	bne.n	7840 <send_boot+0x294>
    7834:	f24c 3319 	movw	r3, #49945	; 0xc319
    7838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783c:	2200      	movs	r2, #0
    783e:	701a      	strb	r2, [r3, #0]
    7840:	f24c 3319 	movw	r3, #49945	; 0xc319
    7844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7848:	781b      	ldrb	r3, [r3, #0]
    784a:	461a      	mov	r2, r3
    784c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7854:	7819      	ldrb	r1, [r3, #0]
    7856:	f24c 331c 	movw	r3, #49948	; 0xc31c
    785a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785e:	5499      	strb	r1, [r3, r2]
    7860:	f24c 3319 	movw	r3, #49945	; 0xc319
    7864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7868:	781b      	ldrb	r3, [r3, #0]
    786a:	3301      	adds	r3, #1
    786c:	b2da      	uxtb	r2, r3
    786e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7876:	701a      	strb	r2, [r3, #0]
    7878:	f24c 3319 	movw	r3, #49945	; 0xc319
    787c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7880:	781b      	ldrb	r3, [r3, #0]
    7882:	2bff      	cmp	r3, #255	; 0xff
    7884:	d105      	bne.n	7892 <send_boot+0x2e6>
    7886:	f24c 3319 	movw	r3, #49945	; 0xc319
    788a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788e:	2200      	movs	r2, #0
    7890:	701a      	strb	r2, [r3, #0]
    7892:	f242 0339 	movw	r3, #8249	; 0x2039
    7896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    789a:	781b      	ldrb	r3, [r3, #0]
    789c:	b2db      	uxtb	r3, r3
    789e:	f003 0310 	and.w	r3, r3, #16
    78a2:	2b00      	cmp	r3, #0
    78a4:	d15a      	bne.n	795c <send_boot+0x3b0>
    78a6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    78aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ae:	781b      	ldrb	r3, [r3, #0]
    78b0:	b2db      	uxtb	r3, r3
    78b2:	461a      	mov	r2, r3
    78b4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    78b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78bc:	5c9a      	ldrb	r2, [r3, r2]
    78be:	f24c 431b 	movw	r3, #50203	; 0xc41b
    78c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c6:	701a      	strb	r2, [r3, #0]
    78c8:	f24c 431c 	movw	r3, #50204	; 0xc41c
    78cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d0:	2200      	movs	r2, #0
    78d2:	701a      	strb	r2, [r3, #0]
    78d4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    78d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	b2db      	uxtb	r3, r3
    78e0:	3301      	adds	r3, #1
    78e2:	b2da      	uxtb	r2, r3
    78e4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    78e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ec:	701a      	strb	r2, [r3, #0]
    78ee:	f24c 331a 	movw	r3, #49946	; 0xc31a
    78f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f6:	781b      	ldrb	r3, [r3, #0]
    78f8:	b2db      	uxtb	r3, r3
    78fa:	2bff      	cmp	r3, #255	; 0xff
    78fc:	d105      	bne.n	790a <send_boot+0x35e>
    78fe:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7906:	2200      	movs	r2, #0
    7908:	701a      	strb	r2, [r3, #0]
    790a:	f242 0338 	movw	r3, #8248	; 0x2038
    790e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7912:	f242 0238 	movw	r2, #8248	; 0x2038
    7916:	f2c2 0200 	movt	r2, #8192	; 0x2000
    791a:	7812      	ldrb	r2, [r2, #0]
    791c:	b2d2      	uxtb	r2, r2
    791e:	f042 0201 	orr.w	r2, r2, #1
    7922:	b2d2      	uxtb	r2, r2
    7924:	701a      	strb	r2, [r3, #0]
    7926:	f242 0339 	movw	r3, #8249	; 0x2039
    792a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    792e:	f242 0239 	movw	r2, #8249	; 0x2039
    7932:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7936:	7812      	ldrb	r2, [r2, #0]
    7938:	b2d2      	uxtb	r2, r2
    793a:	f042 0210 	orr.w	r2, r2, #16
    793e:	b2d2      	uxtb	r2, r2
    7940:	701a      	strb	r2, [r3, #0]
    7942:	e00b      	b.n	795c <send_boot+0x3b0>
    7944:	f24c 3318 	movw	r3, #49944	; 0xc318
    7948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    794c:	781b      	ldrb	r3, [r3, #0]
    794e:	3301      	adds	r3, #1
    7950:	b2da      	uxtb	r2, r3
    7952:	f24c 3318 	movw	r3, #49944	; 0xc318
    7956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    795a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    795c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7964:	781a      	ldrb	r2, [r3, #0]
    7966:	f24c 331a 	movw	r3, #49946	; 0xc31a
    796a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    796e:	781b      	ldrb	r3, [r3, #0]
    7970:	b2db      	uxtb	r3, r3
    7972:	429a      	cmp	r2, r3
    7974:	d316      	bcc.n	79a4 <send_boot+0x3f8>
    7976:	f24c 331a 	movw	r3, #49946	; 0xc31a
    797a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797e:	781b      	ldrb	r3, [r3, #0]
    7980:	b2db      	uxtb	r3, r3
    7982:	461a      	mov	r2, r3
    7984:	f24c 3319 	movw	r3, #49945	; 0xc319
    7988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    798c:	781b      	ldrb	r3, [r3, #0]
    798e:	1ad3      	subs	r3, r2, r3
    7990:	33ff      	adds	r3, #255	; 0xff
    7992:	2b14      	cmp	r3, #20
    7994:	bfd4      	ite	le
    7996:	2300      	movle	r3, #0
    7998:	2301      	movgt	r3, #1
    799a:	b2db      	uxtb	r3, r3
    799c:	e014      	b.n	79c8 <send_boot+0x41c>
    799e:	bf00      	nop
    79a0:	00018917 	.word	0x00018917
    79a4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    79a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ac:	781b      	ldrb	r3, [r3, #0]
    79ae:	b2db      	uxtb	r3, r3
    79b0:	461a      	mov	r2, r3
    79b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    79b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ba:	781b      	ldrb	r3, [r3, #0]
    79bc:	1ad3      	subs	r3, r2, r3
    79be:	2b14      	cmp	r3, #20
    79c0:	bfd4      	ite	le
    79c2:	2300      	movle	r3, #0
    79c4:	2301      	movgt	r3, #1
    79c6:	b2db      	uxtb	r3, r3
    79c8:	2b00      	cmp	r3, #0
    79ca:	f000 85a5 	beq.w	8518 <send_boot+0xf6c>
    79ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    79d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d6:	781b      	ldrb	r3, [r3, #0]
    79d8:	461a      	mov	r2, r3
    79da:	f24c 331c 	movw	r3, #49948	; 0xc31c
    79de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e2:	2105      	movs	r1, #5
    79e4:	5499      	strb	r1, [r3, r2]
    79e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    79ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ee:	781b      	ldrb	r3, [r3, #0]
    79f0:	3301      	adds	r3, #1
    79f2:	b2da      	uxtb	r2, r3
    79f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    79f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79fc:	701a      	strb	r2, [r3, #0]
    79fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a06:	781b      	ldrb	r3, [r3, #0]
    7a08:	2bff      	cmp	r3, #255	; 0xff
    7a0a:	d105      	bne.n	7a18 <send_boot+0x46c>
    7a0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a14:	2200      	movs	r2, #0
    7a16:	701a      	strb	r2, [r3, #0]
    7a18:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a20:	781b      	ldrb	r3, [r3, #0]
    7a22:	461a      	mov	r2, r3
    7a24:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2c:	2105      	movs	r1, #5
    7a2e:	5499      	strb	r1, [r3, r2]
    7a30:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a38:	781b      	ldrb	r3, [r3, #0]
    7a3a:	3301      	adds	r3, #1
    7a3c:	b2da      	uxtb	r2, r3
    7a3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a46:	701a      	strb	r2, [r3, #0]
    7a48:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a50:	781b      	ldrb	r3, [r3, #0]
    7a52:	2bff      	cmp	r3, #255	; 0xff
    7a54:	d105      	bne.n	7a62 <send_boot+0x4b6>
    7a56:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5e:	2200      	movs	r2, #0
    7a60:	701a      	strb	r2, [r3, #0]
    7a62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6a:	2205      	movs	r2, #5
    7a6c:	701a      	strb	r2, [r3, #0]
    7a6e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a76:	2205      	movs	r2, #5
    7a78:	701a      	strb	r2, [r3, #0]
    7a7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a82:	781b      	ldrb	r3, [r3, #0]
    7a84:	461a      	mov	r2, r3
    7a86:	f64c 1310 	movw	r3, #51472	; 0xc910
    7a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a8e:	7819      	ldrb	r1, [r3, #0]
    7a90:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a98:	5499      	strb	r1, [r3, r2]
    7a9a:	f64c 1310 	movw	r3, #51472	; 0xc910
    7a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa2:	781a      	ldrb	r2, [r3, #0]
    7aa4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aac:	781b      	ldrb	r3, [r3, #0]
    7aae:	4413      	add	r3, r2
    7ab0:	b2da      	uxtb	r2, r3
    7ab2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aba:	701a      	strb	r2, [r3, #0]
    7abc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac4:	781a      	ldrb	r2, [r3, #0]
    7ac6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ace:	781b      	ldrb	r3, [r3, #0]
    7ad0:	4413      	add	r3, r2
    7ad2:	b2da      	uxtb	r2, r3
    7ad4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7adc:	701a      	strb	r2, [r3, #0]
    7ade:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae6:	781b      	ldrb	r3, [r3, #0]
    7ae8:	3301      	adds	r3, #1
    7aea:	b2da      	uxtb	r2, r3
    7aec:	f24c 3319 	movw	r3, #49945	; 0xc319
    7af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af4:	701a      	strb	r2, [r3, #0]
    7af6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afe:	781b      	ldrb	r3, [r3, #0]
    7b00:	2bff      	cmp	r3, #255	; 0xff
    7b02:	d105      	bne.n	7b10 <send_boot+0x564>
    7b04:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0c:	2200      	movs	r2, #0
    7b0e:	701a      	strb	r2, [r3, #0]
    7b10:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b18:	781b      	ldrb	r3, [r3, #0]
    7b1a:	461a      	mov	r2, r3
    7b1c:	f64c 1310 	movw	r3, #51472	; 0xc910
    7b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b24:	7859      	ldrb	r1, [r3, #1]
    7b26:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2e:	5499      	strb	r1, [r3, r2]
    7b30:	4bd1      	ldr	r3, [pc, #836]	; (7e78 <send_boot+0x8cc>)
    7b32:	781a      	ldrb	r2, [r3, #0]
    7b34:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3c:	781b      	ldrb	r3, [r3, #0]
    7b3e:	4413      	add	r3, r2
    7b40:	b2da      	uxtb	r2, r3
    7b42:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b4a:	701a      	strb	r2, [r3, #0]
    7b4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b54:	781a      	ldrb	r2, [r3, #0]
    7b56:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5e:	781b      	ldrb	r3, [r3, #0]
    7b60:	4413      	add	r3, r2
    7b62:	b2da      	uxtb	r2, r3
    7b64:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6c:	701a      	strb	r2, [r3, #0]
    7b6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b76:	781b      	ldrb	r3, [r3, #0]
    7b78:	3301      	adds	r3, #1
    7b7a:	b2da      	uxtb	r2, r3
    7b7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b84:	701a      	strb	r2, [r3, #0]
    7b86:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8e:	781b      	ldrb	r3, [r3, #0]
    7b90:	2bff      	cmp	r3, #255	; 0xff
    7b92:	d105      	bne.n	7ba0 <send_boot+0x5f4>
    7b94:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9c:	2200      	movs	r2, #0
    7b9e:	701a      	strb	r2, [r3, #0]
    7ba0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba8:	781b      	ldrb	r3, [r3, #0]
    7baa:	461a      	mov	r2, r3
    7bac:	f64c 1310 	movw	r3, #51472	; 0xc910
    7bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb4:	7899      	ldrb	r1, [r3, #2]
    7bb6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bbe:	5499      	strb	r1, [r3, r2]
    7bc0:	4bae      	ldr	r3, [pc, #696]	; (7e7c <send_boot+0x8d0>)
    7bc2:	781a      	ldrb	r2, [r3, #0]
    7bc4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bcc:	781b      	ldrb	r3, [r3, #0]
    7bce:	4413      	add	r3, r2
    7bd0:	b2da      	uxtb	r2, r3
    7bd2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bda:	701a      	strb	r2, [r3, #0]
    7bdc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be4:	781a      	ldrb	r2, [r3, #0]
    7be6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bee:	781b      	ldrb	r3, [r3, #0]
    7bf0:	4413      	add	r3, r2
    7bf2:	b2da      	uxtb	r2, r3
    7bf4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfc:	701a      	strb	r2, [r3, #0]
    7bfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c06:	781b      	ldrb	r3, [r3, #0]
    7c08:	3301      	adds	r3, #1
    7c0a:	b2da      	uxtb	r2, r3
    7c0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c14:	701a      	strb	r2, [r3, #0]
    7c16:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1e:	781b      	ldrb	r3, [r3, #0]
    7c20:	2bff      	cmp	r3, #255	; 0xff
    7c22:	d105      	bne.n	7c30 <send_boot+0x684>
    7c24:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2c:	2200      	movs	r2, #0
    7c2e:	701a      	strb	r2, [r3, #0]
    7c30:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c38:	781b      	ldrb	r3, [r3, #0]
    7c3a:	461a      	mov	r2, r3
    7c3c:	f64c 1310 	movw	r3, #51472	; 0xc910
    7c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c44:	78d9      	ldrb	r1, [r3, #3]
    7c46:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c4e:	5499      	strb	r1, [r3, r2]
    7c50:	4b8b      	ldr	r3, [pc, #556]	; (7e80 <send_boot+0x8d4>)
    7c52:	781a      	ldrb	r2, [r3, #0]
    7c54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5c:	781b      	ldrb	r3, [r3, #0]
    7c5e:	4413      	add	r3, r2
    7c60:	b2da      	uxtb	r2, r3
    7c62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6a:	701a      	strb	r2, [r3, #0]
    7c6c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c74:	781a      	ldrb	r2, [r3, #0]
    7c76:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7e:	781b      	ldrb	r3, [r3, #0]
    7c80:	4413      	add	r3, r2
    7c82:	b2da      	uxtb	r2, r3
    7c84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8c:	701a      	strb	r2, [r3, #0]
    7c8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c96:	781b      	ldrb	r3, [r3, #0]
    7c98:	3301      	adds	r3, #1
    7c9a:	b2da      	uxtb	r2, r3
    7c9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca4:	701a      	strb	r2, [r3, #0]
    7ca6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cae:	781b      	ldrb	r3, [r3, #0]
    7cb0:	2bff      	cmp	r3, #255	; 0xff
    7cb2:	d105      	bne.n	7cc0 <send_boot+0x714>
    7cb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cbc:	2200      	movs	r2, #0
    7cbe:	701a      	strb	r2, [r3, #0]
    7cc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc8:	781b      	ldrb	r3, [r3, #0]
    7cca:	461a      	mov	r2, r3
    7ccc:	f64c 1314 	movw	r3, #51476	; 0xc914
    7cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd4:	7819      	ldrb	r1, [r3, #0]
    7cd6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cde:	5499      	strb	r1, [r3, r2]
    7ce0:	f64c 1314 	movw	r3, #51476	; 0xc914
    7ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce8:	781a      	ldrb	r2, [r3, #0]
    7cea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf2:	781b      	ldrb	r3, [r3, #0]
    7cf4:	4413      	add	r3, r2
    7cf6:	b2da      	uxtb	r2, r3
    7cf8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d00:	701a      	strb	r2, [r3, #0]
    7d02:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0a:	781a      	ldrb	r2, [r3, #0]
    7d0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d14:	781b      	ldrb	r3, [r3, #0]
    7d16:	4413      	add	r3, r2
    7d18:	b2da      	uxtb	r2, r3
    7d1a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d22:	701a      	strb	r2, [r3, #0]
    7d24:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	3301      	adds	r3, #1
    7d30:	b2da      	uxtb	r2, r3
    7d32:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3a:	701a      	strb	r2, [r3, #0]
    7d3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d44:	781b      	ldrb	r3, [r3, #0]
    7d46:	2bff      	cmp	r3, #255	; 0xff
    7d48:	d105      	bne.n	7d56 <send_boot+0x7aa>
    7d4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d52:	2200      	movs	r2, #0
    7d54:	701a      	strb	r2, [r3, #0]
    7d56:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5e:	781b      	ldrb	r3, [r3, #0]
    7d60:	461a      	mov	r2, r3
    7d62:	f64c 1314 	movw	r3, #51476	; 0xc914
    7d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d6a:	7859      	ldrb	r1, [r3, #1]
    7d6c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d74:	5499      	strb	r1, [r3, r2]
    7d76:	4b43      	ldr	r3, [pc, #268]	; (7e84 <send_boot+0x8d8>)
    7d78:	781a      	ldrb	r2, [r3, #0]
    7d7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d82:	781b      	ldrb	r3, [r3, #0]
    7d84:	4413      	add	r3, r2
    7d86:	b2da      	uxtb	r2, r3
    7d88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d90:	701a      	strb	r2, [r3, #0]
    7d92:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d9a:	781a      	ldrb	r2, [r3, #0]
    7d9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da4:	781b      	ldrb	r3, [r3, #0]
    7da6:	4413      	add	r3, r2
    7da8:	b2da      	uxtb	r2, r3
    7daa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db2:	701a      	strb	r2, [r3, #0]
    7db4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dbc:	781b      	ldrb	r3, [r3, #0]
    7dbe:	3301      	adds	r3, #1
    7dc0:	b2da      	uxtb	r2, r3
    7dc2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dca:	701a      	strb	r2, [r3, #0]
    7dcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd4:	781b      	ldrb	r3, [r3, #0]
    7dd6:	2bff      	cmp	r3, #255	; 0xff
    7dd8:	d105      	bne.n	7de6 <send_boot+0x83a>
    7dda:	f24c 3319 	movw	r3, #49945	; 0xc319
    7dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de2:	2200      	movs	r2, #0
    7de4:	701a      	strb	r2, [r3, #0]
    7de6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dee:	781b      	ldrb	r3, [r3, #0]
    7df0:	461a      	mov	r2, r3
    7df2:	f64c 1314 	movw	r3, #51476	; 0xc914
    7df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dfa:	7899      	ldrb	r1, [r3, #2]
    7dfc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e04:	5499      	strb	r1, [r3, r2]
    7e06:	4b20      	ldr	r3, [pc, #128]	; (7e88 <send_boot+0x8dc>)
    7e08:	781a      	ldrb	r2, [r3, #0]
    7e0a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e12:	781b      	ldrb	r3, [r3, #0]
    7e14:	4413      	add	r3, r2
    7e16:	b2da      	uxtb	r2, r3
    7e18:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e20:	701a      	strb	r2, [r3, #0]
    7e22:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e2a:	781a      	ldrb	r2, [r3, #0]
    7e2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e34:	781b      	ldrb	r3, [r3, #0]
    7e36:	4413      	add	r3, r2
    7e38:	b2da      	uxtb	r2, r3
    7e3a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e42:	701a      	strb	r2, [r3, #0]
    7e44:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4c:	781b      	ldrb	r3, [r3, #0]
    7e4e:	3301      	adds	r3, #1
    7e50:	b2da      	uxtb	r2, r3
    7e52:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5a:	701a      	strb	r2, [r3, #0]
    7e5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e64:	781b      	ldrb	r3, [r3, #0]
    7e66:	2bff      	cmp	r3, #255	; 0xff
    7e68:	d110      	bne.n	7e8c <send_boot+0x8e0>
    7e6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e72:	2200      	movs	r2, #0
    7e74:	701a      	strb	r2, [r3, #0]
    7e76:	e009      	b.n	7e8c <send_boot+0x8e0>
    7e78:	2004c911 	.word	0x2004c911
    7e7c:	2004c912 	.word	0x2004c912
    7e80:	2004c913 	.word	0x2004c913
    7e84:	2004c915 	.word	0x2004c915
    7e88:	2004c916 	.word	0x2004c916
    7e8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e94:	781b      	ldrb	r3, [r3, #0]
    7e96:	461a      	mov	r2, r3
    7e98:	f64c 1314 	movw	r3, #51476	; 0xc914
    7e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea0:	78d9      	ldrb	r1, [r3, #3]
    7ea2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eaa:	5499      	strb	r1, [r3, r2]
    7eac:	4bd3      	ldr	r3, [pc, #844]	; (81fc <send_boot+0xc50>)
    7eae:	781a      	ldrb	r2, [r3, #0]
    7eb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb8:	781b      	ldrb	r3, [r3, #0]
    7eba:	4413      	add	r3, r2
    7ebc:	b2da      	uxtb	r2, r3
    7ebe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec6:	701a      	strb	r2, [r3, #0]
    7ec8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed0:	781a      	ldrb	r2, [r3, #0]
    7ed2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eda:	781b      	ldrb	r3, [r3, #0]
    7edc:	4413      	add	r3, r2
    7ede:	b2da      	uxtb	r2, r3
    7ee0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee8:	701a      	strb	r2, [r3, #0]
    7eea:	f24c 3319 	movw	r3, #49945	; 0xc319
    7eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef2:	781b      	ldrb	r3, [r3, #0]
    7ef4:	3301      	adds	r3, #1
    7ef6:	b2da      	uxtb	r2, r3
    7ef8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f00:	701a      	strb	r2, [r3, #0]
    7f02:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f0a:	781b      	ldrb	r3, [r3, #0]
    7f0c:	2bff      	cmp	r3, #255	; 0xff
    7f0e:	d105      	bne.n	7f1c <send_boot+0x970>
    7f10:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f18:	2200      	movs	r2, #0
    7f1a:	701a      	strb	r2, [r3, #0]
    7f1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f24:	781b      	ldrb	r3, [r3, #0]
    7f26:	461a      	mov	r2, r3
    7f28:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f30:	7819      	ldrb	r1, [r3, #0]
    7f32:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f3a:	5499      	strb	r1, [r3, r2]
    7f3c:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f44:	781a      	ldrb	r2, [r3, #0]
    7f46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f4e:	781b      	ldrb	r3, [r3, #0]
    7f50:	4413      	add	r3, r2
    7f52:	b2da      	uxtb	r2, r3
    7f54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f5c:	701a      	strb	r2, [r3, #0]
    7f5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f66:	781a      	ldrb	r2, [r3, #0]
    7f68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f70:	781b      	ldrb	r3, [r3, #0]
    7f72:	4413      	add	r3, r2
    7f74:	b2da      	uxtb	r2, r3
    7f76:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f7e:	701a      	strb	r2, [r3, #0]
    7f80:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f88:	781b      	ldrb	r3, [r3, #0]
    7f8a:	3301      	adds	r3, #1
    7f8c:	b2da      	uxtb	r2, r3
    7f8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f96:	701a      	strb	r2, [r3, #0]
    7f98:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa0:	781b      	ldrb	r3, [r3, #0]
    7fa2:	2bff      	cmp	r3, #255	; 0xff
    7fa4:	d105      	bne.n	7fb2 <send_boot+0xa06>
    7fa6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fae:	2200      	movs	r2, #0
    7fb0:	701a      	strb	r2, [r3, #0]
    7fb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fba:	781b      	ldrb	r3, [r3, #0]
    7fbc:	461a      	mov	r2, r3
    7fbe:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc6:	7859      	ldrb	r1, [r3, #1]
    7fc8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd0:	5499      	strb	r1, [r3, r2]
    7fd2:	4b8b      	ldr	r3, [pc, #556]	; (8200 <send_boot+0xc54>)
    7fd4:	781a      	ldrb	r2, [r3, #0]
    7fd6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fde:	781b      	ldrb	r3, [r3, #0]
    7fe0:	4413      	add	r3, r2
    7fe2:	b2da      	uxtb	r2, r3
    7fe4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fec:	701a      	strb	r2, [r3, #0]
    7fee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff6:	781a      	ldrb	r2, [r3, #0]
    7ff8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8000:	781b      	ldrb	r3, [r3, #0]
    8002:	4413      	add	r3, r2
    8004:	b2da      	uxtb	r2, r3
    8006:	f24c 431e 	movw	r3, #50206	; 0xc41e
    800a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    800e:	701a      	strb	r2, [r3, #0]
    8010:	f24c 3319 	movw	r3, #49945	; 0xc319
    8014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8018:	781b      	ldrb	r3, [r3, #0]
    801a:	3301      	adds	r3, #1
    801c:	b2da      	uxtb	r2, r3
    801e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8026:	701a      	strb	r2, [r3, #0]
    8028:	f24c 3319 	movw	r3, #49945	; 0xc319
    802c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8030:	781b      	ldrb	r3, [r3, #0]
    8032:	2bff      	cmp	r3, #255	; 0xff
    8034:	d105      	bne.n	8042 <send_boot+0xa96>
    8036:	f24c 3319 	movw	r3, #49945	; 0xc319
    803a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    803e:	2200      	movs	r2, #0
    8040:	701a      	strb	r2, [r3, #0]
    8042:	f24c 3319 	movw	r3, #49945	; 0xc319
    8046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    804a:	781b      	ldrb	r3, [r3, #0]
    804c:	461a      	mov	r2, r3
    804e:	f64c 130c 	movw	r3, #51468	; 0xc90c
    8052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8056:	7899      	ldrb	r1, [r3, #2]
    8058:	f24c 331c 	movw	r3, #49948	; 0xc31c
    805c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8060:	5499      	strb	r1, [r3, r2]
    8062:	4b68      	ldr	r3, [pc, #416]	; (8204 <send_boot+0xc58>)
    8064:	781a      	ldrb	r2, [r3, #0]
    8066:	f24c 431d 	movw	r3, #50205	; 0xc41d
    806a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    806e:	781b      	ldrb	r3, [r3, #0]
    8070:	4413      	add	r3, r2
    8072:	b2da      	uxtb	r2, r3
    8074:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    807c:	701a      	strb	r2, [r3, #0]
    807e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8086:	781a      	ldrb	r2, [r3, #0]
    8088:	f24c 431d 	movw	r3, #50205	; 0xc41d
    808c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8090:	781b      	ldrb	r3, [r3, #0]
    8092:	4413      	add	r3, r2
    8094:	b2da      	uxtb	r2, r3
    8096:	f24c 431e 	movw	r3, #50206	; 0xc41e
    809a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    809e:	701a      	strb	r2, [r3, #0]
    80a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    80a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a8:	781b      	ldrb	r3, [r3, #0]
    80aa:	3301      	adds	r3, #1
    80ac:	b2da      	uxtb	r2, r3
    80ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    80b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b6:	701a      	strb	r2, [r3, #0]
    80b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    80bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c0:	781b      	ldrb	r3, [r3, #0]
    80c2:	2bff      	cmp	r3, #255	; 0xff
    80c4:	d105      	bne.n	80d2 <send_boot+0xb26>
    80c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    80ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ce:	2200      	movs	r2, #0
    80d0:	701a      	strb	r2, [r3, #0]
    80d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    80d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80da:	781b      	ldrb	r3, [r3, #0]
    80dc:	461a      	mov	r2, r3
    80de:	f64c 130c 	movw	r3, #51468	; 0xc90c
    80e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e6:	78d9      	ldrb	r1, [r3, #3]
    80e8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    80ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f0:	5499      	strb	r1, [r3, r2]
    80f2:	4b45      	ldr	r3, [pc, #276]	; (8208 <send_boot+0xc5c>)
    80f4:	781a      	ldrb	r2, [r3, #0]
    80f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    80fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80fe:	781b      	ldrb	r3, [r3, #0]
    8100:	4413      	add	r3, r2
    8102:	b2da      	uxtb	r2, r3
    8104:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    810c:	701a      	strb	r2, [r3, #0]
    810e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8116:	781a      	ldrb	r2, [r3, #0]
    8118:	f24c 431d 	movw	r3, #50205	; 0xc41d
    811c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8120:	781b      	ldrb	r3, [r3, #0]
    8122:	4413      	add	r3, r2
    8124:	b2da      	uxtb	r2, r3
    8126:	f24c 431e 	movw	r3, #50206	; 0xc41e
    812a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812e:	701a      	strb	r2, [r3, #0]
    8130:	f24c 3319 	movw	r3, #49945	; 0xc319
    8134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8138:	781b      	ldrb	r3, [r3, #0]
    813a:	3301      	adds	r3, #1
    813c:	b2da      	uxtb	r2, r3
    813e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8146:	701a      	strb	r2, [r3, #0]
    8148:	f24c 3319 	movw	r3, #49945	; 0xc319
    814c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8150:	781b      	ldrb	r3, [r3, #0]
    8152:	2bff      	cmp	r3, #255	; 0xff
    8154:	d105      	bne.n	8162 <send_boot+0xbb6>
    8156:	f24c 3319 	movw	r3, #49945	; 0xc319
    815a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    815e:	2200      	movs	r2, #0
    8160:	701a      	strb	r2, [r3, #0]
    8162:	f24c 3319 	movw	r3, #49945	; 0xc319
    8166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	461a      	mov	r2, r3
    816e:	f240 5342 	movw	r3, #1346	; 0x542
    8172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8176:	7819      	ldrb	r1, [r3, #0]
    8178:	f24c 331c 	movw	r3, #49948	; 0xc31c
    817c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8180:	5499      	strb	r1, [r3, r2]
    8182:	f240 5342 	movw	r3, #1346	; 0x542
    8186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    818a:	781a      	ldrb	r2, [r3, #0]
    818c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8194:	781b      	ldrb	r3, [r3, #0]
    8196:	4413      	add	r3, r2
    8198:	b2da      	uxtb	r2, r3
    819a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    819e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a2:	701a      	strb	r2, [r3, #0]
    81a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    81a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ac:	781a      	ldrb	r2, [r3, #0]
    81ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b6:	781b      	ldrb	r3, [r3, #0]
    81b8:	4413      	add	r3, r2
    81ba:	b2da      	uxtb	r2, r3
    81bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    81c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c4:	701a      	strb	r2, [r3, #0]
    81c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    81ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ce:	781b      	ldrb	r3, [r3, #0]
    81d0:	3301      	adds	r3, #1
    81d2:	b2da      	uxtb	r2, r3
    81d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    81d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81dc:	701a      	strb	r2, [r3, #0]
    81de:	f24c 3319 	movw	r3, #49945	; 0xc319
    81e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e6:	781b      	ldrb	r3, [r3, #0]
    81e8:	2bff      	cmp	r3, #255	; 0xff
    81ea:	d10f      	bne.n	820c <send_boot+0xc60>
    81ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    81f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f4:	2200      	movs	r2, #0
    81f6:	701a      	strb	r2, [r3, #0]
    81f8:	e008      	b.n	820c <send_boot+0xc60>
    81fa:	bf00      	nop
    81fc:	2004c917 	.word	0x2004c917
    8200:	2004c90d 	.word	0x2004c90d
    8204:	2004c90e 	.word	0x2004c90e
    8208:	2004c90f 	.word	0x2004c90f
    820c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8214:	781b      	ldrb	r3, [r3, #0]
    8216:	461a      	mov	r2, r3
    8218:	f240 5342 	movw	r3, #1346	; 0x542
    821c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8220:	7859      	ldrb	r1, [r3, #1]
    8222:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822a:	5499      	strb	r1, [r3, r2]
    822c:	4bc5      	ldr	r3, [pc, #788]	; (8544 <send_boot+0xf98>)
    822e:	781a      	ldrb	r2, [r3, #0]
    8230:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8238:	781b      	ldrb	r3, [r3, #0]
    823a:	4413      	add	r3, r2
    823c:	b2da      	uxtb	r2, r3
    823e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8246:	701a      	strb	r2, [r3, #0]
    8248:	f24c 431e 	movw	r3, #50206	; 0xc41e
    824c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8250:	781a      	ldrb	r2, [r3, #0]
    8252:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    825a:	781b      	ldrb	r3, [r3, #0]
    825c:	4413      	add	r3, r2
    825e:	b2da      	uxtb	r2, r3
    8260:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8268:	701a      	strb	r2, [r3, #0]
    826a:	f24c 3319 	movw	r3, #49945	; 0xc319
    826e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8272:	781b      	ldrb	r3, [r3, #0]
    8274:	3301      	adds	r3, #1
    8276:	b2da      	uxtb	r2, r3
    8278:	f24c 3319 	movw	r3, #49945	; 0xc319
    827c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8280:	701a      	strb	r2, [r3, #0]
    8282:	f24c 3319 	movw	r3, #49945	; 0xc319
    8286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828a:	781b      	ldrb	r3, [r3, #0]
    828c:	2bff      	cmp	r3, #255	; 0xff
    828e:	d105      	bne.n	829c <send_boot+0xcf0>
    8290:	f24c 3319 	movw	r3, #49945	; 0xc319
    8294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8298:	2200      	movs	r2, #0
    829a:	701a      	strb	r2, [r3, #0]
    829c:	f24c 3319 	movw	r3, #49945	; 0xc319
    82a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a4:	781b      	ldrb	r3, [r3, #0]
    82a6:	461a      	mov	r2, r3
    82a8:	f240 5344 	movw	r3, #1348	; 0x544
    82ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82b0:	7819      	ldrb	r1, [r3, #0]
    82b2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    82b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ba:	5499      	strb	r1, [r3, r2]
    82bc:	f240 5344 	movw	r3, #1348	; 0x544
    82c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82c4:	781a      	ldrb	r2, [r3, #0]
    82c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    82ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ce:	781b      	ldrb	r3, [r3, #0]
    82d0:	4413      	add	r3, r2
    82d2:	b2da      	uxtb	r2, r3
    82d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    82d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82dc:	701a      	strb	r2, [r3, #0]
    82de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    82e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e6:	781a      	ldrb	r2, [r3, #0]
    82e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    82ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f0:	781b      	ldrb	r3, [r3, #0]
    82f2:	4413      	add	r3, r2
    82f4:	b2da      	uxtb	r2, r3
    82f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    82fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82fe:	701a      	strb	r2, [r3, #0]
    8300:	f24c 3319 	movw	r3, #49945	; 0xc319
    8304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8308:	781b      	ldrb	r3, [r3, #0]
    830a:	3301      	adds	r3, #1
    830c:	b2da      	uxtb	r2, r3
    830e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8316:	701a      	strb	r2, [r3, #0]
    8318:	f24c 3319 	movw	r3, #49945	; 0xc319
    831c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8320:	781b      	ldrb	r3, [r3, #0]
    8322:	2bff      	cmp	r3, #255	; 0xff
    8324:	d105      	bne.n	8332 <send_boot+0xd86>
    8326:	f24c 3319 	movw	r3, #49945	; 0xc319
    832a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    832e:	2200      	movs	r2, #0
    8330:	701a      	strb	r2, [r3, #0]
    8332:	f24c 3319 	movw	r3, #49945	; 0xc319
    8336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833a:	781b      	ldrb	r3, [r3, #0]
    833c:	461a      	mov	r2, r3
    833e:	f240 5344 	movw	r3, #1348	; 0x544
    8342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8346:	7859      	ldrb	r1, [r3, #1]
    8348:	f24c 331c 	movw	r3, #49948	; 0xc31c
    834c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8350:	5499      	strb	r1, [r3, r2]
    8352:	4b7d      	ldr	r3, [pc, #500]	; (8548 <send_boot+0xf9c>)
    8354:	781a      	ldrb	r2, [r3, #0]
    8356:	f24c 431d 	movw	r3, #50205	; 0xc41d
    835a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    835e:	781b      	ldrb	r3, [r3, #0]
    8360:	4413      	add	r3, r2
    8362:	b2da      	uxtb	r2, r3
    8364:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    836c:	701a      	strb	r2, [r3, #0]
    836e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8376:	781a      	ldrb	r2, [r3, #0]
    8378:	f24c 431d 	movw	r3, #50205	; 0xc41d
    837c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8380:	781b      	ldrb	r3, [r3, #0]
    8382:	4413      	add	r3, r2
    8384:	b2da      	uxtb	r2, r3
    8386:	f24c 431e 	movw	r3, #50206	; 0xc41e
    838a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838e:	701a      	strb	r2, [r3, #0]
    8390:	f24c 3319 	movw	r3, #49945	; 0xc319
    8394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8398:	781b      	ldrb	r3, [r3, #0]
    839a:	3301      	adds	r3, #1
    839c:	b2da      	uxtb	r2, r3
    839e:	f24c 3319 	movw	r3, #49945	; 0xc319
    83a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a6:	701a      	strb	r2, [r3, #0]
    83a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    83ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b0:	781b      	ldrb	r3, [r3, #0]
    83b2:	2bff      	cmp	r3, #255	; 0xff
    83b4:	d105      	bne.n	83c2 <send_boot+0xe16>
    83b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    83ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83be:	2200      	movs	r2, #0
    83c0:	701a      	strb	r2, [r3, #0]
    83c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    83c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ca:	781b      	ldrb	r3, [r3, #0]
    83cc:	461a      	mov	r2, r3
    83ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    83d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d6:	7819      	ldrb	r1, [r3, #0]
    83d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    83dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e0:	5499      	strb	r1, [r3, r2]
    83e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    83e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ea:	781b      	ldrb	r3, [r3, #0]
    83ec:	3301      	adds	r3, #1
    83ee:	b2da      	uxtb	r2, r3
    83f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    83f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f8:	701a      	strb	r2, [r3, #0]
    83fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    83fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8402:	781b      	ldrb	r3, [r3, #0]
    8404:	2bff      	cmp	r3, #255	; 0xff
    8406:	d105      	bne.n	8414 <send_boot+0xe68>
    8408:	f24c 3319 	movw	r3, #49945	; 0xc319
    840c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8410:	2200      	movs	r2, #0
    8412:	701a      	strb	r2, [r3, #0]
    8414:	f24c 3319 	movw	r3, #49945	; 0xc319
    8418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841c:	781b      	ldrb	r3, [r3, #0]
    841e:	461a      	mov	r2, r3
    8420:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8428:	7819      	ldrb	r1, [r3, #0]
    842a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    842e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8432:	5499      	strb	r1, [r3, r2]
    8434:	f24c 3319 	movw	r3, #49945	; 0xc319
    8438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    843c:	781b      	ldrb	r3, [r3, #0]
    843e:	3301      	adds	r3, #1
    8440:	b2da      	uxtb	r2, r3
    8442:	f24c 3319 	movw	r3, #49945	; 0xc319
    8446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    844a:	701a      	strb	r2, [r3, #0]
    844c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8454:	781b      	ldrb	r3, [r3, #0]
    8456:	2bff      	cmp	r3, #255	; 0xff
    8458:	d105      	bne.n	8466 <send_boot+0xeba>
    845a:	f24c 3319 	movw	r3, #49945	; 0xc319
    845e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8462:	2200      	movs	r2, #0
    8464:	701a      	strb	r2, [r3, #0]
    8466:	f242 0339 	movw	r3, #8249	; 0x2039
    846a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846e:	781b      	ldrb	r3, [r3, #0]
    8470:	b2db      	uxtb	r3, r3
    8472:	f003 0310 	and.w	r3, r3, #16
    8476:	2b00      	cmp	r3, #0
    8478:	d15a      	bne.n	8530 <send_boot+0xf84>
    847a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    847e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8482:	781b      	ldrb	r3, [r3, #0]
    8484:	b2db      	uxtb	r3, r3
    8486:	461a      	mov	r2, r3
    8488:	f24c 331c 	movw	r3, #49948	; 0xc31c
    848c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8490:	5c9a      	ldrb	r2, [r3, r2]
    8492:	f24c 431b 	movw	r3, #50203	; 0xc41b
    8496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    849a:	701a      	strb	r2, [r3, #0]
    849c:	f24c 431c 	movw	r3, #50204	; 0xc41c
    84a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a4:	2200      	movs	r2, #0
    84a6:	701a      	strb	r2, [r3, #0]
    84a8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    84ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b0:	781b      	ldrb	r3, [r3, #0]
    84b2:	b2db      	uxtb	r3, r3
    84b4:	3301      	adds	r3, #1
    84b6:	b2da      	uxtb	r2, r3
    84b8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    84bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c0:	701a      	strb	r2, [r3, #0]
    84c2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    84c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ca:	781b      	ldrb	r3, [r3, #0]
    84cc:	b2db      	uxtb	r3, r3
    84ce:	2bff      	cmp	r3, #255	; 0xff
    84d0:	d105      	bne.n	84de <send_boot+0xf32>
    84d2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    84d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84da:	2200      	movs	r2, #0
    84dc:	701a      	strb	r2, [r3, #0]
    84de:	f242 0338 	movw	r3, #8248	; 0x2038
    84e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e6:	f242 0238 	movw	r2, #8248	; 0x2038
    84ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    84ee:	7812      	ldrb	r2, [r2, #0]
    84f0:	b2d2      	uxtb	r2, r2
    84f2:	f042 0201 	orr.w	r2, r2, #1
    84f6:	b2d2      	uxtb	r2, r2
    84f8:	701a      	strb	r2, [r3, #0]
    84fa:	f242 0339 	movw	r3, #8249	; 0x2039
    84fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8502:	f242 0239 	movw	r2, #8249	; 0x2039
    8506:	f2c2 0200 	movt	r2, #8192	; 0x2000
    850a:	7812      	ldrb	r2, [r2, #0]
    850c:	b2d2      	uxtb	r2, r2
    850e:	f042 0210 	orr.w	r2, r2, #16
    8512:	b2d2      	uxtb	r2, r2
    8514:	701a      	strb	r2, [r3, #0]
    8516:	e00b      	b.n	8530 <send_boot+0xf84>
    8518:	f24c 3318 	movw	r3, #49944	; 0xc318
    851c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8520:	781b      	ldrb	r3, [r3, #0]
    8522:	3301      	adds	r3, #1
    8524:	b2da      	uxtb	r2, r3
    8526:	f24c 3318 	movw	r3, #49944	; 0xc318
    852a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    852e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8530:	f240 533d 	movw	r3, #1341	; 0x53d
    8534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8538:	2200      	movs	r2, #0
    853a:	701a      	strb	r2, [r3, #0]
  }
}
    853c:	46bd      	mov	sp, r7
    853e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8542:	4770      	bx	lr
    8544:	20000543 	.word	0x20000543
    8548:	20000545 	.word	0x20000545

0000854c <send_attitude>:
void send_attitude(void){ //499ms
    854c:	b480      	push	{r7}
    854e:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8550:	f24c 3311 	movw	r3, #49937	; 0xc311
    8554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8558:	781b      	ldrb	r3, [r3, #0]
    855a:	3301      	adds	r3, #1
    855c:	b2da      	uxtb	r2, r3
    855e:	f24c 3311 	movw	r3, #49937	; 0xc311
    8562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8566:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8568:	f24c 3311 	movw	r3, #49937	; 0xc311
    856c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8570:	781b      	ldrb	r3, [r3, #0]
    8572:	2bfa      	cmp	r3, #250	; 0xfa
    8574:	d105      	bne.n	8582 <send_attitude+0x36>
    8576:	f24c 3311 	movw	r3, #49937	; 0xc311
    857a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    857e:	2200      	movs	r2, #0
    8580:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    8582:	f24c 3311 	movw	r3, #49937	; 0xc311
    8586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858a:	781a      	ldrb	r2, [r3, #0]
    858c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8590:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8594:	fba3 1302 	umull	r1, r3, r3, r2
    8598:	0899      	lsrs	r1, r3, #2
    859a:	460b      	mov	r3, r1
    859c:	009b      	lsls	r3, r3, #2
    859e:	440b      	add	r3, r1
    85a0:	1ad3      	subs	r3, r2, r3
    85a2:	b2db      	uxtb	r3, r3
    85a4:	2b00      	cmp	r3, #0
    85a6:	f040 84c1 	bne.w	8f2c <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    85aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    85ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b2:	781a      	ldrb	r2, [r3, #0]
    85b4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    85b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85bc:	781b      	ldrb	r3, [r3, #0]
    85be:	b2db      	uxtb	r3, r3
    85c0:	429a      	cmp	r2, r3
    85c2:	d313      	bcc.n	85ec <send_attitude+0xa0>
    85c4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    85c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85cc:	781b      	ldrb	r3, [r3, #0]
    85ce:	b2db      	uxtb	r3, r3
    85d0:	461a      	mov	r2, r3
    85d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    85d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85da:	781b      	ldrb	r3, [r3, #0]
    85dc:	1ad3      	subs	r3, r2, r3
    85de:	33ff      	adds	r3, #255	; 0xff
    85e0:	2b10      	cmp	r3, #16
    85e2:	bfd4      	ite	le
    85e4:	2300      	movle	r3, #0
    85e6:	2301      	movgt	r3, #1
    85e8:	b2db      	uxtb	r3, r3
    85ea:	e011      	b.n	8610 <send_attitude+0xc4>
    85ec:	f24c 331a 	movw	r3, #49946	; 0xc31a
    85f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f4:	781b      	ldrb	r3, [r3, #0]
    85f6:	b2db      	uxtb	r3, r3
    85f8:	461a      	mov	r2, r3
    85fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    85fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8602:	781b      	ldrb	r3, [r3, #0]
    8604:	1ad3      	subs	r3, r2, r3
    8606:	2b10      	cmp	r3, #16
    8608:	bfd4      	ite	le
    860a:	2300      	movle	r3, #0
    860c:	2301      	movgt	r3, #1
    860e:	b2db      	uxtb	r3, r3
    8610:	2b00      	cmp	r3, #0
    8612:	f000 847f 	beq.w	8f14 <send_attitude+0x9c8>
    8616:	f24c 3319 	movw	r3, #49945	; 0xc319
    861a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    861e:	781b      	ldrb	r3, [r3, #0]
    8620:	461a      	mov	r2, r3
    8622:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862a:	2105      	movs	r1, #5
    862c:	5499      	strb	r1, [r3, r2]
    862e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8636:	781b      	ldrb	r3, [r3, #0]
    8638:	3301      	adds	r3, #1
    863a:	b2da      	uxtb	r2, r3
    863c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8644:	701a      	strb	r2, [r3, #0]
    8646:	f24c 3319 	movw	r3, #49945	; 0xc319
    864a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864e:	781b      	ldrb	r3, [r3, #0]
    8650:	2bff      	cmp	r3, #255	; 0xff
    8652:	d105      	bne.n	8660 <send_attitude+0x114>
    8654:	f24c 3319 	movw	r3, #49945	; 0xc319
    8658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    865c:	2200      	movs	r2, #0
    865e:	701a      	strb	r2, [r3, #0]
    8660:	f24c 3319 	movw	r3, #49945	; 0xc319
    8664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8668:	781b      	ldrb	r3, [r3, #0]
    866a:	461a      	mov	r2, r3
    866c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8674:	2106      	movs	r1, #6
    8676:	5499      	strb	r1, [r3, r2]
    8678:	f24c 3319 	movw	r3, #49945	; 0xc319
    867c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8680:	781b      	ldrb	r3, [r3, #0]
    8682:	3301      	adds	r3, #1
    8684:	b2da      	uxtb	r2, r3
    8686:	f24c 3319 	movw	r3, #49945	; 0xc319
    868a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868e:	701a      	strb	r2, [r3, #0]
    8690:	f24c 3319 	movw	r3, #49945	; 0xc319
    8694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8698:	781b      	ldrb	r3, [r3, #0]
    869a:	2bff      	cmp	r3, #255	; 0xff
    869c:	d105      	bne.n	86aa <send_attitude+0x15e>
    869e:	f24c 3319 	movw	r3, #49945	; 0xc319
    86a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a6:	2200      	movs	r2, #0
    86a8:	701a      	strb	r2, [r3, #0]
    86aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    86ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b2:	2206      	movs	r2, #6
    86b4:	701a      	strb	r2, [r3, #0]
    86b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    86ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86be:	2206      	movs	r2, #6
    86c0:	701a      	strb	r2, [r3, #0]
    86c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    86c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ca:	781b      	ldrb	r3, [r3, #0]
    86cc:	461a      	mov	r2, r3
    86ce:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    86d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d6:	7819      	ldrb	r1, [r3, #0]
    86d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    86dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e0:	5499      	strb	r1, [r3, r2]
    86e2:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    86e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ea:	781a      	ldrb	r2, [r3, #0]
    86ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    86f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f4:	781b      	ldrb	r3, [r3, #0]
    86f6:	4413      	add	r3, r2
    86f8:	b2da      	uxtb	r2, r3
    86fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    86fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8702:	701a      	strb	r2, [r3, #0]
    8704:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    870c:	781a      	ldrb	r2, [r3, #0]
    870e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8716:	781b      	ldrb	r3, [r3, #0]
    8718:	4413      	add	r3, r2
    871a:	b2da      	uxtb	r2, r3
    871c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8724:	701a      	strb	r2, [r3, #0]
    8726:	f24c 3319 	movw	r3, #49945	; 0xc319
    872a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872e:	781b      	ldrb	r3, [r3, #0]
    8730:	3301      	adds	r3, #1
    8732:	b2da      	uxtb	r2, r3
    8734:	f24c 3319 	movw	r3, #49945	; 0xc319
    8738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873c:	701a      	strb	r2, [r3, #0]
    873e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8746:	781b      	ldrb	r3, [r3, #0]
    8748:	2bff      	cmp	r3, #255	; 0xff
    874a:	d105      	bne.n	8758 <send_attitude+0x20c>
    874c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8754:	2200      	movs	r2, #0
    8756:	701a      	strb	r2, [r3, #0]
    8758:	f24c 3319 	movw	r3, #49945	; 0xc319
    875c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8760:	781b      	ldrb	r3, [r3, #0]
    8762:	461a      	mov	r2, r3
    8764:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876c:	7859      	ldrb	r1, [r3, #1]
    876e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8776:	5499      	strb	r1, [r3, r2]
    8778:	4bd1      	ldr	r3, [pc, #836]	; (8ac0 <send_attitude+0x574>)
    877a:	781a      	ldrb	r2, [r3, #0]
    877c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8784:	781b      	ldrb	r3, [r3, #0]
    8786:	4413      	add	r3, r2
    8788:	b2da      	uxtb	r2, r3
    878a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    878e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8792:	701a      	strb	r2, [r3, #0]
    8794:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879c:	781a      	ldrb	r2, [r3, #0]
    879e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a6:	781b      	ldrb	r3, [r3, #0]
    87a8:	4413      	add	r3, r2
    87aa:	b2da      	uxtb	r2, r3
    87ac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    87b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b4:	701a      	strb	r2, [r3, #0]
    87b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    87ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87be:	781b      	ldrb	r3, [r3, #0]
    87c0:	3301      	adds	r3, #1
    87c2:	b2da      	uxtb	r2, r3
    87c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    87c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87cc:	701a      	strb	r2, [r3, #0]
    87ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    87d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d6:	781b      	ldrb	r3, [r3, #0]
    87d8:	2bff      	cmp	r3, #255	; 0xff
    87da:	d105      	bne.n	87e8 <send_attitude+0x29c>
    87dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    87e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e4:	2200      	movs	r2, #0
    87e6:	701a      	strb	r2, [r3, #0]
    87e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    87ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f0:	781b      	ldrb	r3, [r3, #0]
    87f2:	461a      	mov	r2, r3
    87f4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    87f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fc:	7899      	ldrb	r1, [r3, #2]
    87fe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8806:	5499      	strb	r1, [r3, r2]
    8808:	4bae      	ldr	r3, [pc, #696]	; (8ac4 <send_attitude+0x578>)
    880a:	781a      	ldrb	r2, [r3, #0]
    880c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8814:	781b      	ldrb	r3, [r3, #0]
    8816:	4413      	add	r3, r2
    8818:	b2da      	uxtb	r2, r3
    881a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    881e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8822:	701a      	strb	r2, [r3, #0]
    8824:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    882c:	781a      	ldrb	r2, [r3, #0]
    882e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8836:	781b      	ldrb	r3, [r3, #0]
    8838:	4413      	add	r3, r2
    883a:	b2da      	uxtb	r2, r3
    883c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8844:	701a      	strb	r2, [r3, #0]
    8846:	f24c 3319 	movw	r3, #49945	; 0xc319
    884a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    884e:	781b      	ldrb	r3, [r3, #0]
    8850:	3301      	adds	r3, #1
    8852:	b2da      	uxtb	r2, r3
    8854:	f24c 3319 	movw	r3, #49945	; 0xc319
    8858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885c:	701a      	strb	r2, [r3, #0]
    885e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8866:	781b      	ldrb	r3, [r3, #0]
    8868:	2bff      	cmp	r3, #255	; 0xff
    886a:	d105      	bne.n	8878 <send_attitude+0x32c>
    886c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8874:	2200      	movs	r2, #0
    8876:	701a      	strb	r2, [r3, #0]
    8878:	f24c 3319 	movw	r3, #49945	; 0xc319
    887c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8880:	781b      	ldrb	r3, [r3, #0]
    8882:	461a      	mov	r2, r3
    8884:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888c:	78d9      	ldrb	r1, [r3, #3]
    888e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8896:	5499      	strb	r1, [r3, r2]
    8898:	4b8b      	ldr	r3, [pc, #556]	; (8ac8 <send_attitude+0x57c>)
    889a:	781a      	ldrb	r2, [r3, #0]
    889c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    88a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a4:	781b      	ldrb	r3, [r3, #0]
    88a6:	4413      	add	r3, r2
    88a8:	b2da      	uxtb	r2, r3
    88aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    88ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b2:	701a      	strb	r2, [r3, #0]
    88b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    88b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88bc:	781a      	ldrb	r2, [r3, #0]
    88be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    88c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c6:	781b      	ldrb	r3, [r3, #0]
    88c8:	4413      	add	r3, r2
    88ca:	b2da      	uxtb	r2, r3
    88cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    88d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d4:	701a      	strb	r2, [r3, #0]
    88d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    88da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88de:	781b      	ldrb	r3, [r3, #0]
    88e0:	3301      	adds	r3, #1
    88e2:	b2da      	uxtb	r2, r3
    88e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    88e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ec:	701a      	strb	r2, [r3, #0]
    88ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    88f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f6:	781b      	ldrb	r3, [r3, #0]
    88f8:	2bff      	cmp	r3, #255	; 0xff
    88fa:	d105      	bne.n	8908 <send_attitude+0x3bc>
    88fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    8900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8904:	2200      	movs	r2, #0
    8906:	701a      	strb	r2, [r3, #0]
    8908:	f24c 3319 	movw	r3, #49945	; 0xc319
    890c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8910:	781b      	ldrb	r3, [r3, #0]
    8912:	461a      	mov	r2, r3
    8914:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891c:	7819      	ldrb	r1, [r3, #0]
    891e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8926:	5499      	strb	r1, [r3, r2]
    8928:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    892c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8930:	781a      	ldrb	r2, [r3, #0]
    8932:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893a:	781b      	ldrb	r3, [r3, #0]
    893c:	4413      	add	r3, r2
    893e:	b2da      	uxtb	r2, r3
    8940:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8948:	701a      	strb	r2, [r3, #0]
    894a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    894e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8952:	781a      	ldrb	r2, [r3, #0]
    8954:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    895c:	781b      	ldrb	r3, [r3, #0]
    895e:	4413      	add	r3, r2
    8960:	b2da      	uxtb	r2, r3
    8962:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    896a:	701a      	strb	r2, [r3, #0]
    896c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8974:	781b      	ldrb	r3, [r3, #0]
    8976:	3301      	adds	r3, #1
    8978:	b2da      	uxtb	r2, r3
    897a:	f24c 3319 	movw	r3, #49945	; 0xc319
    897e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8982:	701a      	strb	r2, [r3, #0]
    8984:	f24c 3319 	movw	r3, #49945	; 0xc319
    8988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898c:	781b      	ldrb	r3, [r3, #0]
    898e:	2bff      	cmp	r3, #255	; 0xff
    8990:	d105      	bne.n	899e <send_attitude+0x452>
    8992:	f24c 3319 	movw	r3, #49945	; 0xc319
    8996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    899a:	2200      	movs	r2, #0
    899c:	701a      	strb	r2, [r3, #0]
    899e:	f24c 3319 	movw	r3, #49945	; 0xc319
    89a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a6:	781b      	ldrb	r3, [r3, #0]
    89a8:	461a      	mov	r2, r3
    89aa:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    89ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b2:	7859      	ldrb	r1, [r3, #1]
    89b4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    89b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89bc:	5499      	strb	r1, [r3, r2]
    89be:	4b43      	ldr	r3, [pc, #268]	; (8acc <send_attitude+0x580>)
    89c0:	781a      	ldrb	r2, [r3, #0]
    89c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    89c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ca:	781b      	ldrb	r3, [r3, #0]
    89cc:	4413      	add	r3, r2
    89ce:	b2da      	uxtb	r2, r3
    89d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    89d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d8:	701a      	strb	r2, [r3, #0]
    89da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    89de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e2:	781a      	ldrb	r2, [r3, #0]
    89e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    89e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ec:	781b      	ldrb	r3, [r3, #0]
    89ee:	4413      	add	r3, r2
    89f0:	b2da      	uxtb	r2, r3
    89f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    89f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89fa:	701a      	strb	r2, [r3, #0]
    89fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a04:	781b      	ldrb	r3, [r3, #0]
    8a06:	3301      	adds	r3, #1
    8a08:	b2da      	uxtb	r2, r3
    8a0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a12:	701a      	strb	r2, [r3, #0]
    8a14:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1c:	781b      	ldrb	r3, [r3, #0]
    8a1e:	2bff      	cmp	r3, #255	; 0xff
    8a20:	d105      	bne.n	8a2e <send_attitude+0x4e2>
    8a22:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a2a:	2200      	movs	r2, #0
    8a2c:	701a      	strb	r2, [r3, #0]
    8a2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a36:	781b      	ldrb	r3, [r3, #0]
    8a38:	461a      	mov	r2, r3
    8a3a:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a42:	7899      	ldrb	r1, [r3, #2]
    8a44:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4c:	5499      	strb	r1, [r3, r2]
    8a4e:	4b20      	ldr	r3, [pc, #128]	; (8ad0 <send_attitude+0x584>)
    8a50:	781a      	ldrb	r2, [r3, #0]
    8a52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a5a:	781b      	ldrb	r3, [r3, #0]
    8a5c:	4413      	add	r3, r2
    8a5e:	b2da      	uxtb	r2, r3
    8a60:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a68:	701a      	strb	r2, [r3, #0]
    8a6a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a72:	781a      	ldrb	r2, [r3, #0]
    8a74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a7c:	781b      	ldrb	r3, [r3, #0]
    8a7e:	4413      	add	r3, r2
    8a80:	b2da      	uxtb	r2, r3
    8a82:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a8a:	701a      	strb	r2, [r3, #0]
    8a8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a94:	781b      	ldrb	r3, [r3, #0]
    8a96:	3301      	adds	r3, #1
    8a98:	b2da      	uxtb	r2, r3
    8a9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa2:	701a      	strb	r2, [r3, #0]
    8aa4:	f24c 3319 	movw	r3, #49945	; 0xc319
    8aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aac:	781b      	ldrb	r3, [r3, #0]
    8aae:	2bff      	cmp	r3, #255	; 0xff
    8ab0:	d110      	bne.n	8ad4 <send_attitude+0x588>
    8ab2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aba:	2200      	movs	r2, #0
    8abc:	701a      	strb	r2, [r3, #0]
    8abe:	e009      	b.n	8ad4 <send_attitude+0x588>
    8ac0:	2004c8d9 	.word	0x2004c8d9
    8ac4:	2004c8da 	.word	0x2004c8da
    8ac8:	2004c8db 	.word	0x2004c8db
    8acc:	2004c8dd 	.word	0x2004c8dd
    8ad0:	2004c8de 	.word	0x2004c8de
    8ad4:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8adc:	781b      	ldrb	r3, [r3, #0]
    8ade:	461a      	mov	r2, r3
    8ae0:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae8:	78d9      	ldrb	r1, [r3, #3]
    8aea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af2:	5499      	strb	r1, [r3, r2]
    8af4:	4bc2      	ldr	r3, [pc, #776]	; (8e00 <send_attitude+0x8b4>)
    8af6:	781a      	ldrb	r2, [r3, #0]
    8af8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b00:	781b      	ldrb	r3, [r3, #0]
    8b02:	4413      	add	r3, r2
    8b04:	b2da      	uxtb	r2, r3
    8b06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b0e:	701a      	strb	r2, [r3, #0]
    8b10:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b18:	781a      	ldrb	r2, [r3, #0]
    8b1a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b22:	781b      	ldrb	r3, [r3, #0]
    8b24:	4413      	add	r3, r2
    8b26:	b2da      	uxtb	r2, r3
    8b28:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b30:	701a      	strb	r2, [r3, #0]
    8b32:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3a:	781b      	ldrb	r3, [r3, #0]
    8b3c:	3301      	adds	r3, #1
    8b3e:	b2da      	uxtb	r2, r3
    8b40:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b48:	701a      	strb	r2, [r3, #0]
    8b4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b52:	781b      	ldrb	r3, [r3, #0]
    8b54:	2bff      	cmp	r3, #255	; 0xff
    8b56:	d105      	bne.n	8b64 <send_attitude+0x618>
    8b58:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b60:	2200      	movs	r2, #0
    8b62:	701a      	strb	r2, [r3, #0]
    8b64:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6c:	781b      	ldrb	r3, [r3, #0]
    8b6e:	461a      	mov	r2, r3
    8b70:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b78:	7819      	ldrb	r1, [r3, #0]
    8b7a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b82:	5499      	strb	r1, [r3, r2]
    8b84:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8c:	781a      	ldrb	r2, [r3, #0]
    8b8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b96:	781b      	ldrb	r3, [r3, #0]
    8b98:	4413      	add	r3, r2
    8b9a:	b2da      	uxtb	r2, r3
    8b9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba4:	701a      	strb	r2, [r3, #0]
    8ba6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bae:	781a      	ldrb	r2, [r3, #0]
    8bb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb8:	781b      	ldrb	r3, [r3, #0]
    8bba:	4413      	add	r3, r2
    8bbc:	b2da      	uxtb	r2, r3
    8bbe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc6:	701a      	strb	r2, [r3, #0]
    8bc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd0:	781b      	ldrb	r3, [r3, #0]
    8bd2:	3301      	adds	r3, #1
    8bd4:	b2da      	uxtb	r2, r3
    8bd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bde:	701a      	strb	r2, [r3, #0]
    8be0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be8:	781b      	ldrb	r3, [r3, #0]
    8bea:	2bff      	cmp	r3, #255	; 0xff
    8bec:	d105      	bne.n	8bfa <send_attitude+0x6ae>
    8bee:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf6:	2200      	movs	r2, #0
    8bf8:	701a      	strb	r2, [r3, #0]
    8bfa:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c02:	781b      	ldrb	r3, [r3, #0]
    8c04:	461a      	mov	r2, r3
    8c06:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c0e:	7859      	ldrb	r1, [r3, #1]
    8c10:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c18:	5499      	strb	r1, [r3, r2]
    8c1a:	4b7a      	ldr	r3, [pc, #488]	; (8e04 <send_attitude+0x8b8>)
    8c1c:	781a      	ldrb	r2, [r3, #0]
    8c1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c26:	781b      	ldrb	r3, [r3, #0]
    8c28:	4413      	add	r3, r2
    8c2a:	b2da      	uxtb	r2, r3
    8c2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c34:	701a      	strb	r2, [r3, #0]
    8c36:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c3e:	781a      	ldrb	r2, [r3, #0]
    8c40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	4413      	add	r3, r2
    8c4c:	b2da      	uxtb	r2, r3
    8c4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c56:	701a      	strb	r2, [r3, #0]
    8c58:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c60:	781b      	ldrb	r3, [r3, #0]
    8c62:	3301      	adds	r3, #1
    8c64:	b2da      	uxtb	r2, r3
    8c66:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c6e:	701a      	strb	r2, [r3, #0]
    8c70:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c78:	781b      	ldrb	r3, [r3, #0]
    8c7a:	2bff      	cmp	r3, #255	; 0xff
    8c7c:	d105      	bne.n	8c8a <send_attitude+0x73e>
    8c7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c86:	2200      	movs	r2, #0
    8c88:	701a      	strb	r2, [r3, #0]
    8c8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c92:	781b      	ldrb	r3, [r3, #0]
    8c94:	461a      	mov	r2, r3
    8c96:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c9e:	7899      	ldrb	r1, [r3, #2]
    8ca0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca8:	5499      	strb	r1, [r3, r2]
    8caa:	4b57      	ldr	r3, [pc, #348]	; (8e08 <send_attitude+0x8bc>)
    8cac:	781a      	ldrb	r2, [r3, #0]
    8cae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb6:	781b      	ldrb	r3, [r3, #0]
    8cb8:	4413      	add	r3, r2
    8cba:	b2da      	uxtb	r2, r3
    8cbc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc4:	701a      	strb	r2, [r3, #0]
    8cc6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cce:	781a      	ldrb	r2, [r3, #0]
    8cd0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd8:	781b      	ldrb	r3, [r3, #0]
    8cda:	4413      	add	r3, r2
    8cdc:	b2da      	uxtb	r2, r3
    8cde:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce6:	701a      	strb	r2, [r3, #0]
    8ce8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf0:	781b      	ldrb	r3, [r3, #0]
    8cf2:	3301      	adds	r3, #1
    8cf4:	b2da      	uxtb	r2, r3
    8cf6:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cfe:	701a      	strb	r2, [r3, #0]
    8d00:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d08:	781b      	ldrb	r3, [r3, #0]
    8d0a:	2bff      	cmp	r3, #255	; 0xff
    8d0c:	d105      	bne.n	8d1a <send_attitude+0x7ce>
    8d0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d16:	2200      	movs	r2, #0
    8d18:	701a      	strb	r2, [r3, #0]
    8d1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	461a      	mov	r2, r3
    8d26:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d2e:	78d9      	ldrb	r1, [r3, #3]
    8d30:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d38:	5499      	strb	r1, [r3, r2]
    8d3a:	4b34      	ldr	r3, [pc, #208]	; (8e0c <send_attitude+0x8c0>)
    8d3c:	781a      	ldrb	r2, [r3, #0]
    8d3e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d46:	781b      	ldrb	r3, [r3, #0]
    8d48:	4413      	add	r3, r2
    8d4a:	b2da      	uxtb	r2, r3
    8d4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d54:	701a      	strb	r2, [r3, #0]
    8d56:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d5e:	781a      	ldrb	r2, [r3, #0]
    8d60:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d68:	781b      	ldrb	r3, [r3, #0]
    8d6a:	4413      	add	r3, r2
    8d6c:	b2da      	uxtb	r2, r3
    8d6e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d76:	701a      	strb	r2, [r3, #0]
    8d78:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d80:	781b      	ldrb	r3, [r3, #0]
    8d82:	3301      	adds	r3, #1
    8d84:	b2da      	uxtb	r2, r3
    8d86:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d8e:	701a      	strb	r2, [r3, #0]
    8d90:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d98:	781b      	ldrb	r3, [r3, #0]
    8d9a:	2bff      	cmp	r3, #255	; 0xff
    8d9c:	d105      	bne.n	8daa <send_attitude+0x85e>
    8d9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da6:	2200      	movs	r2, #0
    8da8:	701a      	strb	r2, [r3, #0]
    8daa:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db2:	781b      	ldrb	r3, [r3, #0]
    8db4:	461a      	mov	r2, r3
    8db6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dbe:	7819      	ldrb	r1, [r3, #0]
    8dc0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc8:	5499      	strb	r1, [r3, r2]
    8dca:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd2:	781b      	ldrb	r3, [r3, #0]
    8dd4:	3301      	adds	r3, #1
    8dd6:	b2da      	uxtb	r2, r3
    8dd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de0:	701a      	strb	r2, [r3, #0]
    8de2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dea:	781b      	ldrb	r3, [r3, #0]
    8dec:	2bff      	cmp	r3, #255	; 0xff
    8dee:	d10f      	bne.n	8e10 <send_attitude+0x8c4>
    8df0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df8:	2200      	movs	r2, #0
    8dfa:	701a      	strb	r2, [r3, #0]
    8dfc:	e008      	b.n	8e10 <send_attitude+0x8c4>
    8dfe:	bf00      	nop
    8e00:	2004c8df 	.word	0x2004c8df
    8e04:	2004c8e1 	.word	0x2004c8e1
    8e08:	2004c8e2 	.word	0x2004c8e2
    8e0c:	2004c8e3 	.word	0x2004c8e3
    8e10:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e18:	781b      	ldrb	r3, [r3, #0]
    8e1a:	461a      	mov	r2, r3
    8e1c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e24:	7819      	ldrb	r1, [r3, #0]
    8e26:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e2e:	5499      	strb	r1, [r3, r2]
    8e30:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e38:	781b      	ldrb	r3, [r3, #0]
    8e3a:	3301      	adds	r3, #1
    8e3c:	b2da      	uxtb	r2, r3
    8e3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e46:	701a      	strb	r2, [r3, #0]
    8e48:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e50:	781b      	ldrb	r3, [r3, #0]
    8e52:	2bff      	cmp	r3, #255	; 0xff
    8e54:	d105      	bne.n	8e62 <send_attitude+0x916>
    8e56:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e5e:	2200      	movs	r2, #0
    8e60:	701a      	strb	r2, [r3, #0]
    8e62:	f242 0339 	movw	r3, #8249	; 0x2039
    8e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e6a:	781b      	ldrb	r3, [r3, #0]
    8e6c:	b2db      	uxtb	r3, r3
    8e6e:	f003 0310 	and.w	r3, r3, #16
    8e72:	2b00      	cmp	r3, #0
    8e74:	d15a      	bne.n	8f2c <send_attitude+0x9e0>
    8e76:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e7e:	781b      	ldrb	r3, [r3, #0]
    8e80:	b2db      	uxtb	r3, r3
    8e82:	461a      	mov	r2, r3
    8e84:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e8c:	5c9a      	ldrb	r2, [r3, r2]
    8e8e:	f24c 431b 	movw	r3, #50203	; 0xc41b
    8e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e96:	701a      	strb	r2, [r3, #0]
    8e98:	f24c 431c 	movw	r3, #50204	; 0xc41c
    8e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea0:	2200      	movs	r2, #0
    8ea2:	701a      	strb	r2, [r3, #0]
    8ea4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eac:	781b      	ldrb	r3, [r3, #0]
    8eae:	b2db      	uxtb	r3, r3
    8eb0:	3301      	adds	r3, #1
    8eb2:	b2da      	uxtb	r2, r3
    8eb4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ebc:	701a      	strb	r2, [r3, #0]
    8ebe:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec6:	781b      	ldrb	r3, [r3, #0]
    8ec8:	b2db      	uxtb	r3, r3
    8eca:	2bff      	cmp	r3, #255	; 0xff
    8ecc:	d105      	bne.n	8eda <send_attitude+0x98e>
    8ece:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed6:	2200      	movs	r2, #0
    8ed8:	701a      	strb	r2, [r3, #0]
    8eda:	f242 0338 	movw	r3, #8248	; 0x2038
    8ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee2:	f242 0238 	movw	r2, #8248	; 0x2038
    8ee6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8eea:	7812      	ldrb	r2, [r2, #0]
    8eec:	b2d2      	uxtb	r2, r2
    8eee:	f042 0201 	orr.w	r2, r2, #1
    8ef2:	b2d2      	uxtb	r2, r2
    8ef4:	701a      	strb	r2, [r3, #0]
    8ef6:	f242 0339 	movw	r3, #8249	; 0x2039
    8efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8efe:	f242 0239 	movw	r2, #8249	; 0x2039
    8f02:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8f06:	7812      	ldrb	r2, [r2, #0]
    8f08:	b2d2      	uxtb	r2, r2
    8f0a:	f042 0210 	orr.w	r2, r2, #16
    8f0e:	b2d2      	uxtb	r2, r2
    8f10:	701a      	strb	r2, [r3, #0]
    8f12:	e00b      	b.n	8f2c <send_attitude+0x9e0>
    8f14:	f24c 3318 	movw	r3, #49944	; 0xc318
    8f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f1c:	781b      	ldrb	r3, [r3, #0]
    8f1e:	3301      	adds	r3, #1
    8f20:	b2da      	uxtb	r2, r3
    8f22:	f24c 3318 	movw	r3, #49944	; 0xc318
    8f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f2a:	701a      	strb	r2, [r3, #0]
  }
}
    8f2c:	46bd      	mov	sp, r7
    8f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f32:	4770      	bx	lr

00008f34 <send_adc>:
  
void send_adc(void){  //500ms
    8f34:	b480      	push	{r7}
    8f36:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8f38:	f24c 3311 	movw	r3, #49937	; 0xc311
    8f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f40:	781a      	ldrb	r2, [r3, #0]
    8f42:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8f46:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8f4a:	fba3 1302 	umull	r1, r3, r3, r2
    8f4e:	0899      	lsrs	r1, r3, #2
    8f50:	460b      	mov	r3, r1
    8f52:	009b      	lsls	r3, r3, #2
    8f54:	440b      	add	r3, r1
    8f56:	1ad3      	subs	r3, r2, r3
    8f58:	b2db      	uxtb	r3, r3
    8f5a:	2b01      	cmp	r3, #1
    8f5c:	f040 8269 	bne.w	9432 <send_adc+0x4fe>
    8f60:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f68:	781a      	ldrb	r2, [r3, #0]
    8f6a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f72:	781b      	ldrb	r3, [r3, #0]
    8f74:	b2db      	uxtb	r3, r3
    8f76:	429a      	cmp	r2, r3
    8f78:	d313      	bcc.n	8fa2 <send_adc+0x6e>
    8f7a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f82:	781b      	ldrb	r3, [r3, #0]
    8f84:	b2db      	uxtb	r3, r3
    8f86:	461a      	mov	r2, r3
    8f88:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f90:	781b      	ldrb	r3, [r3, #0]
    8f92:	1ad3      	subs	r3, r2, r3
    8f94:	33ff      	adds	r3, #255	; 0xff
    8f96:	2b08      	cmp	r3, #8
    8f98:	bfd4      	ite	le
    8f9a:	2300      	movle	r3, #0
    8f9c:	2301      	movgt	r3, #1
    8f9e:	b2db      	uxtb	r3, r3
    8fa0:	e011      	b.n	8fc6 <send_adc+0x92>
    8fa2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8faa:	781b      	ldrb	r3, [r3, #0]
    8fac:	b2db      	uxtb	r3, r3
    8fae:	461a      	mov	r2, r3
    8fb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb8:	781b      	ldrb	r3, [r3, #0]
    8fba:	1ad3      	subs	r3, r2, r3
    8fbc:	2b08      	cmp	r3, #8
    8fbe:	bfd4      	ite	le
    8fc0:	2300      	movle	r3, #0
    8fc2:	2301      	movgt	r3, #1
    8fc4:	b2db      	uxtb	r3, r3
    8fc6:	2b00      	cmp	r3, #0
    8fc8:	f000 8227 	beq.w	941a <send_adc+0x4e6>
    8fcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd4:	781b      	ldrb	r3, [r3, #0]
    8fd6:	461a      	mov	r2, r3
    8fd8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe0:	2105      	movs	r1, #5
    8fe2:	5499      	strb	r1, [r3, r2]
    8fe4:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fec:	781b      	ldrb	r3, [r3, #0]
    8fee:	3301      	adds	r3, #1
    8ff0:	b2da      	uxtb	r2, r3
    8ff2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ffa:	701a      	strb	r2, [r3, #0]
    8ffc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9004:	781b      	ldrb	r3, [r3, #0]
    9006:	2bff      	cmp	r3, #255	; 0xff
    9008:	d105      	bne.n	9016 <send_adc+0xe2>
    900a:	f24c 3319 	movw	r3, #49945	; 0xc319
    900e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9012:	2200      	movs	r2, #0
    9014:	701a      	strb	r2, [r3, #0]
    9016:	f24c 3319 	movw	r3, #49945	; 0xc319
    901a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    901e:	781b      	ldrb	r3, [r3, #0]
    9020:	461a      	mov	r2, r3
    9022:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    902a:	2107      	movs	r1, #7
    902c:	5499      	strb	r1, [r3, r2]
    902e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9036:	781b      	ldrb	r3, [r3, #0]
    9038:	3301      	adds	r3, #1
    903a:	b2da      	uxtb	r2, r3
    903c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9044:	701a      	strb	r2, [r3, #0]
    9046:	f24c 3319 	movw	r3, #49945	; 0xc319
    904a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    904e:	781b      	ldrb	r3, [r3, #0]
    9050:	2bff      	cmp	r3, #255	; 0xff
    9052:	d105      	bne.n	9060 <send_adc+0x12c>
    9054:	f24c 3319 	movw	r3, #49945	; 0xc319
    9058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    905c:	2200      	movs	r2, #0
    905e:	701a      	strb	r2, [r3, #0]
    9060:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9068:	2207      	movs	r2, #7
    906a:	701a      	strb	r2, [r3, #0]
    906c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9074:	2207      	movs	r2, #7
    9076:	701a      	strb	r2, [r3, #0]
    9078:	f24c 3319 	movw	r3, #49945	; 0xc319
    907c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9080:	781b      	ldrb	r3, [r3, #0]
    9082:	461a      	mov	r2, r3
    9084:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    9088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    908c:	7819      	ldrb	r1, [r3, #0]
    908e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9096:	5499      	strb	r1, [r3, r2]
    9098:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    909c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a0:	781a      	ldrb	r2, [r3, #0]
    90a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    90a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90aa:	781b      	ldrb	r3, [r3, #0]
    90ac:	4413      	add	r3, r2
    90ae:	b2da      	uxtb	r2, r3
    90b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    90b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b8:	701a      	strb	r2, [r3, #0]
    90ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    90be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c2:	781a      	ldrb	r2, [r3, #0]
    90c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    90c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90cc:	781b      	ldrb	r3, [r3, #0]
    90ce:	4413      	add	r3, r2
    90d0:	b2da      	uxtb	r2, r3
    90d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    90d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90da:	701a      	strb	r2, [r3, #0]
    90dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    90e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e4:	781b      	ldrb	r3, [r3, #0]
    90e6:	3301      	adds	r3, #1
    90e8:	b2da      	uxtb	r2, r3
    90ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    90ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f2:	701a      	strb	r2, [r3, #0]
    90f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    90f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fc:	781b      	ldrb	r3, [r3, #0]
    90fe:	2bff      	cmp	r3, #255	; 0xff
    9100:	d105      	bne.n	910e <send_adc+0x1da>
    9102:	f24c 3319 	movw	r3, #49945	; 0xc319
    9106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910a:	2200      	movs	r2, #0
    910c:	701a      	strb	r2, [r3, #0]
    910e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9116:	781b      	ldrb	r3, [r3, #0]
    9118:	461a      	mov	r2, r3
    911a:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    911e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9122:	7859      	ldrb	r1, [r3, #1]
    9124:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    912c:	5499      	strb	r1, [r3, r2]
    912e:	4bc3      	ldr	r3, [pc, #780]	; (943c <send_adc+0x508>)
    9130:	781a      	ldrb	r2, [r3, #0]
    9132:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913a:	781b      	ldrb	r3, [r3, #0]
    913c:	4413      	add	r3, r2
    913e:	b2da      	uxtb	r2, r3
    9140:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9148:	701a      	strb	r2, [r3, #0]
    914a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    914e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9152:	781a      	ldrb	r2, [r3, #0]
    9154:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    915c:	781b      	ldrb	r3, [r3, #0]
    915e:	4413      	add	r3, r2
    9160:	b2da      	uxtb	r2, r3
    9162:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916a:	701a      	strb	r2, [r3, #0]
    916c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9174:	781b      	ldrb	r3, [r3, #0]
    9176:	3301      	adds	r3, #1
    9178:	b2da      	uxtb	r2, r3
    917a:	f24c 3319 	movw	r3, #49945	; 0xc319
    917e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9182:	701a      	strb	r2, [r3, #0]
    9184:	f24c 3319 	movw	r3, #49945	; 0xc319
    9188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    918c:	781b      	ldrb	r3, [r3, #0]
    918e:	2bff      	cmp	r3, #255	; 0xff
    9190:	d105      	bne.n	919e <send_adc+0x26a>
    9192:	f24c 3319 	movw	r3, #49945	; 0xc319
    9196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919a:	2200      	movs	r2, #0
    919c:	701a      	strb	r2, [r3, #0]
    919e:	f24c 3319 	movw	r3, #49945	; 0xc319
    91a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a6:	781b      	ldrb	r3, [r3, #0]
    91a8:	461a      	mov	r2, r3
    91aa:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    91ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b2:	7819      	ldrb	r1, [r3, #0]
    91b4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    91b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91bc:	5499      	strb	r1, [r3, r2]
    91be:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    91c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c6:	781a      	ldrb	r2, [r3, #0]
    91c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d0:	781b      	ldrb	r3, [r3, #0]
    91d2:	4413      	add	r3, r2
    91d4:	b2da      	uxtb	r2, r3
    91d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91de:	701a      	strb	r2, [r3, #0]
    91e0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    91e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e8:	781a      	ldrb	r2, [r3, #0]
    91ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f2:	781b      	ldrb	r3, [r3, #0]
    91f4:	4413      	add	r3, r2
    91f6:	b2da      	uxtb	r2, r3
    91f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    91fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9200:	701a      	strb	r2, [r3, #0]
    9202:	f24c 3319 	movw	r3, #49945	; 0xc319
    9206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920a:	781b      	ldrb	r3, [r3, #0]
    920c:	3301      	adds	r3, #1
    920e:	b2da      	uxtb	r2, r3
    9210:	f24c 3319 	movw	r3, #49945	; 0xc319
    9214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9218:	701a      	strb	r2, [r3, #0]
    921a:	f24c 3319 	movw	r3, #49945	; 0xc319
    921e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9222:	781b      	ldrb	r3, [r3, #0]
    9224:	2bff      	cmp	r3, #255	; 0xff
    9226:	d105      	bne.n	9234 <send_adc+0x300>
    9228:	f24c 3319 	movw	r3, #49945	; 0xc319
    922c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9230:	2200      	movs	r2, #0
    9232:	701a      	strb	r2, [r3, #0]
    9234:	f24c 3319 	movw	r3, #49945	; 0xc319
    9238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    923c:	781b      	ldrb	r3, [r3, #0]
    923e:	461a      	mov	r2, r3
    9240:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    9244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9248:	7859      	ldrb	r1, [r3, #1]
    924a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    924e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9252:	5499      	strb	r1, [r3, r2]
    9254:	4b7a      	ldr	r3, [pc, #488]	; (9440 <send_adc+0x50c>)
    9256:	781a      	ldrb	r2, [r3, #0]
    9258:	f24c 431d 	movw	r3, #50205	; 0xc41d
    925c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9260:	781b      	ldrb	r3, [r3, #0]
    9262:	4413      	add	r3, r2
    9264:	b2da      	uxtb	r2, r3
    9266:	f24c 431d 	movw	r3, #50205	; 0xc41d
    926a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926e:	701a      	strb	r2, [r3, #0]
    9270:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9278:	781a      	ldrb	r2, [r3, #0]
    927a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    927e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9282:	781b      	ldrb	r3, [r3, #0]
    9284:	4413      	add	r3, r2
    9286:	b2da      	uxtb	r2, r3
    9288:	f24c 431e 	movw	r3, #50206	; 0xc41e
    928c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9290:	701a      	strb	r2, [r3, #0]
    9292:	f24c 3319 	movw	r3, #49945	; 0xc319
    9296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    929a:	781b      	ldrb	r3, [r3, #0]
    929c:	3301      	adds	r3, #1
    929e:	b2da      	uxtb	r2, r3
    92a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    92a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a8:	701a      	strb	r2, [r3, #0]
    92aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    92ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b2:	781b      	ldrb	r3, [r3, #0]
    92b4:	2bff      	cmp	r3, #255	; 0xff
    92b6:	d105      	bne.n	92c4 <send_adc+0x390>
    92b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    92bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c0:	2200      	movs	r2, #0
    92c2:	701a      	strb	r2, [r3, #0]
    92c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    92c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92cc:	781b      	ldrb	r3, [r3, #0]
    92ce:	461a      	mov	r2, r3
    92d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    92d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d8:	7819      	ldrb	r1, [r3, #0]
    92da:	f24c 331c 	movw	r3, #49948	; 0xc31c
    92de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e2:	5499      	strb	r1, [r3, r2]
    92e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    92e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ec:	781b      	ldrb	r3, [r3, #0]
    92ee:	3301      	adds	r3, #1
    92f0:	b2da      	uxtb	r2, r3
    92f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    92f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92fa:	701a      	strb	r2, [r3, #0]
    92fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9304:	781b      	ldrb	r3, [r3, #0]
    9306:	2bff      	cmp	r3, #255	; 0xff
    9308:	d105      	bne.n	9316 <send_adc+0x3e2>
    930a:	f24c 3319 	movw	r3, #49945	; 0xc319
    930e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9312:	2200      	movs	r2, #0
    9314:	701a      	strb	r2, [r3, #0]
    9316:	f24c 3319 	movw	r3, #49945	; 0xc319
    931a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    931e:	781b      	ldrb	r3, [r3, #0]
    9320:	461a      	mov	r2, r3
    9322:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    932a:	7819      	ldrb	r1, [r3, #0]
    932c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9334:	5499      	strb	r1, [r3, r2]
    9336:	f24c 3319 	movw	r3, #49945	; 0xc319
    933a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933e:	781b      	ldrb	r3, [r3, #0]
    9340:	3301      	adds	r3, #1
    9342:	b2da      	uxtb	r2, r3
    9344:	f24c 3319 	movw	r3, #49945	; 0xc319
    9348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    934c:	701a      	strb	r2, [r3, #0]
    934e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9356:	781b      	ldrb	r3, [r3, #0]
    9358:	2bff      	cmp	r3, #255	; 0xff
    935a:	d105      	bne.n	9368 <send_adc+0x434>
    935c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9364:	2200      	movs	r2, #0
    9366:	701a      	strb	r2, [r3, #0]
    9368:	f242 0339 	movw	r3, #8249	; 0x2039
    936c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9370:	781b      	ldrb	r3, [r3, #0]
    9372:	b2db      	uxtb	r3, r3
    9374:	f003 0310 	and.w	r3, r3, #16
    9378:	2b00      	cmp	r3, #0
    937a:	d15a      	bne.n	9432 <send_adc+0x4fe>
    937c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9384:	781b      	ldrb	r3, [r3, #0]
    9386:	b2db      	uxtb	r3, r3
    9388:	461a      	mov	r2, r3
    938a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    938e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9392:	5c9a      	ldrb	r2, [r3, r2]
    9394:	f24c 431b 	movw	r3, #50203	; 0xc41b
    9398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    939c:	701a      	strb	r2, [r3, #0]
    939e:	f24c 431c 	movw	r3, #50204	; 0xc41c
    93a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a6:	2200      	movs	r2, #0
    93a8:	701a      	strb	r2, [r3, #0]
    93aa:	f24c 331a 	movw	r3, #49946	; 0xc31a
    93ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b2:	781b      	ldrb	r3, [r3, #0]
    93b4:	b2db      	uxtb	r3, r3
    93b6:	3301      	adds	r3, #1
    93b8:	b2da      	uxtb	r2, r3
    93ba:	f24c 331a 	movw	r3, #49946	; 0xc31a
    93be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93c2:	701a      	strb	r2, [r3, #0]
    93c4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    93c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93cc:	781b      	ldrb	r3, [r3, #0]
    93ce:	b2db      	uxtb	r3, r3
    93d0:	2bff      	cmp	r3, #255	; 0xff
    93d2:	d105      	bne.n	93e0 <send_adc+0x4ac>
    93d4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    93d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93dc:	2200      	movs	r2, #0
    93de:	701a      	strb	r2, [r3, #0]
    93e0:	f242 0338 	movw	r3, #8248	; 0x2038
    93e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e8:	f242 0238 	movw	r2, #8248	; 0x2038
    93ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93f0:	7812      	ldrb	r2, [r2, #0]
    93f2:	b2d2      	uxtb	r2, r2
    93f4:	f042 0201 	orr.w	r2, r2, #1
    93f8:	b2d2      	uxtb	r2, r2
    93fa:	701a      	strb	r2, [r3, #0]
    93fc:	f242 0339 	movw	r3, #8249	; 0x2039
    9400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9404:	f242 0239 	movw	r2, #8249	; 0x2039
    9408:	f2c2 0200 	movt	r2, #8192	; 0x2000
    940c:	7812      	ldrb	r2, [r2, #0]
    940e:	b2d2      	uxtb	r2, r2
    9410:	f042 0210 	orr.w	r2, r2, #16
    9414:	b2d2      	uxtb	r2, r2
    9416:	701a      	strb	r2, [r3, #0]
    9418:	e00b      	b.n	9432 <send_adc+0x4fe>
    941a:	f24c 3318 	movw	r3, #49944	; 0xc318
    941e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9422:	781b      	ldrb	r3, [r3, #0]
    9424:	3301      	adds	r3, #1
    9426:	b2da      	uxtb	r2, r3
    9428:	f24c 3318 	movw	r3, #49944	; 0xc318
    942c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9430:	701a      	strb	r2, [r3, #0]
}
    9432:	46bd      	mov	sp, r7
    9434:	f85d 7b04 	ldr.w	r7, [sp], #4
    9438:	4770      	bx	lr
    943a:	bf00      	nop
    943c:	2004c5b9 	.word	0x2004c5b9
    9440:	2004c5bb 	.word	0x2004c5bb

00009444 <send_settings>:
void send_settings(void){ //500ms
    9444:	b480      	push	{r7}
    9446:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9448:	f24c 3311 	movw	r3, #49937	; 0xc311
    944c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9450:	781a      	ldrb	r2, [r3, #0]
    9452:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9456:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    945a:	fba3 1302 	umull	r1, r3, r3, r2
    945e:	0899      	lsrs	r1, r3, #2
    9460:	460b      	mov	r3, r1
    9462:	009b      	lsls	r3, r3, #2
    9464:	440b      	add	r3, r1
    9466:	1ad3      	subs	r3, r2, r3
    9468:	b2db      	uxtb	r3, r3
    946a:	2b02      	cmp	r3, #2
    946c:	f040 83e7 	bne.w	9c3e <send_settings+0x7fa>
    9470:	f64c 132c 	movw	r3, #51500	; 0xc92c
    9474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9478:	781b      	ldrb	r3, [r3, #0]
    947a:	2b00      	cmp	r3, #0
    947c:	f000 83df 	beq.w	9c3e <send_settings+0x7fa>
    9480:	f24c 3319 	movw	r3, #49945	; 0xc319
    9484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9488:	781a      	ldrb	r2, [r3, #0]
    948a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    948e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9492:	781b      	ldrb	r3, [r3, #0]
    9494:	b2db      	uxtb	r3, r3
    9496:	429a      	cmp	r2, r3
    9498:	d313      	bcc.n	94c2 <send_settings+0x7e>
    949a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    949e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a2:	781b      	ldrb	r3, [r3, #0]
    94a4:	b2db      	uxtb	r3, r3
    94a6:	461a      	mov	r2, r3
    94a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    94ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b0:	781b      	ldrb	r3, [r3, #0]
    94b2:	1ad3      	subs	r3, r2, r3
    94b4:	33ff      	adds	r3, #255	; 0xff
    94b6:	2b0d      	cmp	r3, #13
    94b8:	bfd4      	ite	le
    94ba:	2300      	movle	r3, #0
    94bc:	2301      	movgt	r3, #1
    94be:	b2db      	uxtb	r3, r3
    94c0:	e011      	b.n	94e6 <send_settings+0xa2>
    94c2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    94c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ca:	781b      	ldrb	r3, [r3, #0]
    94cc:	b2db      	uxtb	r3, r3
    94ce:	461a      	mov	r2, r3
    94d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    94d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d8:	781b      	ldrb	r3, [r3, #0]
    94da:	1ad3      	subs	r3, r2, r3
    94dc:	2b0d      	cmp	r3, #13
    94de:	bfd4      	ite	le
    94e0:	2300      	movle	r3, #0
    94e2:	2301      	movgt	r3, #1
    94e4:	b2db      	uxtb	r3, r3
    94e6:	2b00      	cmp	r3, #0
    94e8:	f000 839d 	beq.w	9c26 <send_settings+0x7e2>
    94ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    94f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f4:	781b      	ldrb	r3, [r3, #0]
    94f6:	461a      	mov	r2, r3
    94f8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    94fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9500:	2105      	movs	r1, #5
    9502:	5499      	strb	r1, [r3, r2]
    9504:	f24c 3319 	movw	r3, #49945	; 0xc319
    9508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    950c:	781b      	ldrb	r3, [r3, #0]
    950e:	3301      	adds	r3, #1
    9510:	b2da      	uxtb	r2, r3
    9512:	f24c 3319 	movw	r3, #49945	; 0xc319
    9516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    951a:	701a      	strb	r2, [r3, #0]
    951c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9524:	781b      	ldrb	r3, [r3, #0]
    9526:	2bff      	cmp	r3, #255	; 0xff
    9528:	d105      	bne.n	9536 <send_settings+0xf2>
    952a:	f24c 3319 	movw	r3, #49945	; 0xc319
    952e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9532:	2200      	movs	r2, #0
    9534:	701a      	strb	r2, [r3, #0]
    9536:	f24c 3319 	movw	r3, #49945	; 0xc319
    953a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    953e:	781b      	ldrb	r3, [r3, #0]
    9540:	461a      	mov	r2, r3
    9542:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    954a:	2111      	movs	r1, #17
    954c:	5499      	strb	r1, [r3, r2]
    954e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9556:	781b      	ldrb	r3, [r3, #0]
    9558:	3301      	adds	r3, #1
    955a:	b2da      	uxtb	r2, r3
    955c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9564:	701a      	strb	r2, [r3, #0]
    9566:	f24c 3319 	movw	r3, #49945	; 0xc319
    956a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956e:	781b      	ldrb	r3, [r3, #0]
    9570:	2bff      	cmp	r3, #255	; 0xff
    9572:	d105      	bne.n	9580 <send_settings+0x13c>
    9574:	f24c 3319 	movw	r3, #49945	; 0xc319
    9578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    957c:	2200      	movs	r2, #0
    957e:	701a      	strb	r2, [r3, #0]
    9580:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9588:	2211      	movs	r2, #17
    958a:	701a      	strb	r2, [r3, #0]
    958c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9594:	2211      	movs	r2, #17
    9596:	701a      	strb	r2, [r3, #0]
    9598:	f24c 3319 	movw	r3, #49945	; 0xc319
    959c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a0:	781b      	ldrb	r3, [r3, #0]
    95a2:	461a      	mov	r2, r3
    95a4:	f64c 132c 	movw	r3, #51500	; 0xc92c
    95a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ac:	7819      	ldrb	r1, [r3, #0]
    95ae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    95b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b6:	5499      	strb	r1, [r3, r2]
    95b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    95bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c0:	781a      	ldrb	r2, [r3, #0]
    95c2:	f64c 132c 	movw	r3, #51500	; 0xc92c
    95c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ca:	781b      	ldrb	r3, [r3, #0]
    95cc:	4413      	add	r3, r2
    95ce:	b2da      	uxtb	r2, r3
    95d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    95d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d8:	701a      	strb	r2, [r3, #0]
    95da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    95de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e2:	781a      	ldrb	r2, [r3, #0]
    95e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    95e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ec:	781b      	ldrb	r3, [r3, #0]
    95ee:	4413      	add	r3, r2
    95f0:	b2da      	uxtb	r2, r3
    95f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    95f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fa:	701a      	strb	r2, [r3, #0]
    95fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9604:	781b      	ldrb	r3, [r3, #0]
    9606:	3301      	adds	r3, #1
    9608:	b2da      	uxtb	r2, r3
    960a:	f24c 3319 	movw	r3, #49945	; 0xc319
    960e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9612:	701a      	strb	r2, [r3, #0]
    9614:	f24c 3319 	movw	r3, #49945	; 0xc319
    9618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    961c:	781b      	ldrb	r3, [r3, #0]
    961e:	2bff      	cmp	r3, #255	; 0xff
    9620:	d105      	bne.n	962e <send_settings+0x1ea>
    9622:	f24c 3319 	movw	r3, #49945	; 0xc319
    9626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962a:	2200      	movs	r2, #0
    962c:	701a      	strb	r2, [r3, #0]
    962e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9636:	781b      	ldrb	r3, [r3, #0]
    9638:	461a      	mov	r2, r3
    963a:	f24c 3308 	movw	r3, #49928	; 0xc308
    963e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9642:	7819      	ldrb	r1, [r3, #0]
    9644:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    964c:	5499      	strb	r1, [r3, r2]
    964e:	f24c 3308 	movw	r3, #49928	; 0xc308
    9652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9656:	781a      	ldrb	r2, [r3, #0]
    9658:	f24c 431d 	movw	r3, #50205	; 0xc41d
    965c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9660:	781b      	ldrb	r3, [r3, #0]
    9662:	4413      	add	r3, r2
    9664:	b2da      	uxtb	r2, r3
    9666:	f24c 431d 	movw	r3, #50205	; 0xc41d
    966a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    966e:	701a      	strb	r2, [r3, #0]
    9670:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9678:	781a      	ldrb	r2, [r3, #0]
    967a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    967e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9682:	781b      	ldrb	r3, [r3, #0]
    9684:	4413      	add	r3, r2
    9686:	b2da      	uxtb	r2, r3
    9688:	f24c 431e 	movw	r3, #50206	; 0xc41e
    968c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9690:	701a      	strb	r2, [r3, #0]
    9692:	f24c 3319 	movw	r3, #49945	; 0xc319
    9696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    969a:	781b      	ldrb	r3, [r3, #0]
    969c:	3301      	adds	r3, #1
    969e:	b2da      	uxtb	r2, r3
    96a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    96a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a8:	701a      	strb	r2, [r3, #0]
    96aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    96ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b2:	781b      	ldrb	r3, [r3, #0]
    96b4:	2bff      	cmp	r3, #255	; 0xff
    96b6:	d105      	bne.n	96c4 <send_settings+0x280>
    96b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    96bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c0:	2200      	movs	r2, #0
    96c2:	701a      	strb	r2, [r3, #0]
    96c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    96c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96cc:	781b      	ldrb	r3, [r3, #0]
    96ce:	461a      	mov	r2, r3
    96d0:	f24c 3308 	movw	r3, #49928	; 0xc308
    96d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d8:	7859      	ldrb	r1, [r3, #1]
    96da:	f24c 331c 	movw	r3, #49948	; 0xc31c
    96de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e2:	5499      	strb	r1, [r3, r2]
    96e4:	4bd1      	ldr	r3, [pc, #836]	; (9a2c <send_settings+0x5e8>)
    96e6:	781a      	ldrb	r2, [r3, #0]
    96e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f0:	781b      	ldrb	r3, [r3, #0]
    96f2:	4413      	add	r3, r2
    96f4:	b2da      	uxtb	r2, r3
    96f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fe:	701a      	strb	r2, [r3, #0]
    9700:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9708:	781a      	ldrb	r2, [r3, #0]
    970a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    970e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9712:	781b      	ldrb	r3, [r3, #0]
    9714:	4413      	add	r3, r2
    9716:	b2da      	uxtb	r2, r3
    9718:	f24c 431e 	movw	r3, #50206	; 0xc41e
    971c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9720:	701a      	strb	r2, [r3, #0]
    9722:	f24c 3319 	movw	r3, #49945	; 0xc319
    9726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    972a:	781b      	ldrb	r3, [r3, #0]
    972c:	3301      	adds	r3, #1
    972e:	b2da      	uxtb	r2, r3
    9730:	f24c 3319 	movw	r3, #49945	; 0xc319
    9734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9738:	701a      	strb	r2, [r3, #0]
    973a:	f24c 3319 	movw	r3, #49945	; 0xc319
    973e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9742:	781b      	ldrb	r3, [r3, #0]
    9744:	2bff      	cmp	r3, #255	; 0xff
    9746:	d105      	bne.n	9754 <send_settings+0x310>
    9748:	f24c 3319 	movw	r3, #49945	; 0xc319
    974c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9750:	2200      	movs	r2, #0
    9752:	701a      	strb	r2, [r3, #0]
    9754:	f24c 3319 	movw	r3, #49945	; 0xc319
    9758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975c:	781b      	ldrb	r3, [r3, #0]
    975e:	461a      	mov	r2, r3
    9760:	f24c 3308 	movw	r3, #49928	; 0xc308
    9764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9768:	7899      	ldrb	r1, [r3, #2]
    976a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    976e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9772:	5499      	strb	r1, [r3, r2]
    9774:	4bae      	ldr	r3, [pc, #696]	; (9a30 <send_settings+0x5ec>)
    9776:	781a      	ldrb	r2, [r3, #0]
    9778:	f24c 431d 	movw	r3, #50205	; 0xc41d
    977c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9780:	781b      	ldrb	r3, [r3, #0]
    9782:	4413      	add	r3, r2
    9784:	b2da      	uxtb	r2, r3
    9786:	f24c 431d 	movw	r3, #50205	; 0xc41d
    978a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978e:	701a      	strb	r2, [r3, #0]
    9790:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9798:	781a      	ldrb	r2, [r3, #0]
    979a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    979e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a2:	781b      	ldrb	r3, [r3, #0]
    97a4:	4413      	add	r3, r2
    97a6:	b2da      	uxtb	r2, r3
    97a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    97ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b0:	701a      	strb	r2, [r3, #0]
    97b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    97b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ba:	781b      	ldrb	r3, [r3, #0]
    97bc:	3301      	adds	r3, #1
    97be:	b2da      	uxtb	r2, r3
    97c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    97c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c8:	701a      	strb	r2, [r3, #0]
    97ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    97ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d2:	781b      	ldrb	r3, [r3, #0]
    97d4:	2bff      	cmp	r3, #255	; 0xff
    97d6:	d105      	bne.n	97e4 <send_settings+0x3a0>
    97d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    97dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e0:	2200      	movs	r2, #0
    97e2:	701a      	strb	r2, [r3, #0]
    97e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    97e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ec:	781b      	ldrb	r3, [r3, #0]
    97ee:	461a      	mov	r2, r3
    97f0:	f24c 3308 	movw	r3, #49928	; 0xc308
    97f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f8:	78d9      	ldrb	r1, [r3, #3]
    97fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    97fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9802:	5499      	strb	r1, [r3, r2]
    9804:	4b8b      	ldr	r3, [pc, #556]	; (9a34 <send_settings+0x5f0>)
    9806:	781a      	ldrb	r2, [r3, #0]
    9808:	f24c 431d 	movw	r3, #50205	; 0xc41d
    980c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9810:	781b      	ldrb	r3, [r3, #0]
    9812:	4413      	add	r3, r2
    9814:	b2da      	uxtb	r2, r3
    9816:	f24c 431d 	movw	r3, #50205	; 0xc41d
    981a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    981e:	701a      	strb	r2, [r3, #0]
    9820:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9828:	781a      	ldrb	r2, [r3, #0]
    982a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    982e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9832:	781b      	ldrb	r3, [r3, #0]
    9834:	4413      	add	r3, r2
    9836:	b2da      	uxtb	r2, r3
    9838:	f24c 431e 	movw	r3, #50206	; 0xc41e
    983c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9840:	701a      	strb	r2, [r3, #0]
    9842:	f24c 3319 	movw	r3, #49945	; 0xc319
    9846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    984a:	781b      	ldrb	r3, [r3, #0]
    984c:	3301      	adds	r3, #1
    984e:	b2da      	uxtb	r2, r3
    9850:	f24c 3319 	movw	r3, #49945	; 0xc319
    9854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9858:	701a      	strb	r2, [r3, #0]
    985a:	f24c 3319 	movw	r3, #49945	; 0xc319
    985e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9862:	781b      	ldrb	r3, [r3, #0]
    9864:	2bff      	cmp	r3, #255	; 0xff
    9866:	d105      	bne.n	9874 <send_settings+0x430>
    9868:	f24c 3319 	movw	r3, #49945	; 0xc319
    986c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9870:	2200      	movs	r2, #0
    9872:	701a      	strb	r2, [r3, #0]
    9874:	f24c 3319 	movw	r3, #49945	; 0xc319
    9878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    987c:	781b      	ldrb	r3, [r3, #0]
    987e:	461a      	mov	r2, r3
    9880:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9888:	7819      	ldrb	r1, [r3, #0]
    988a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    988e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9892:	5499      	strb	r1, [r3, r2]
    9894:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    989c:	781a      	ldrb	r2, [r3, #0]
    989e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    98a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a6:	781b      	ldrb	r3, [r3, #0]
    98a8:	4413      	add	r3, r2
    98aa:	b2da      	uxtb	r2, r3
    98ac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    98b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b4:	701a      	strb	r2, [r3, #0]
    98b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    98ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98be:	781a      	ldrb	r2, [r3, #0]
    98c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    98c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c8:	781b      	ldrb	r3, [r3, #0]
    98ca:	4413      	add	r3, r2
    98cc:	b2da      	uxtb	r2, r3
    98ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    98d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d6:	701a      	strb	r2, [r3, #0]
    98d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    98dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e0:	781b      	ldrb	r3, [r3, #0]
    98e2:	3301      	adds	r3, #1
    98e4:	b2da      	uxtb	r2, r3
    98e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    98ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ee:	701a      	strb	r2, [r3, #0]
    98f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    98f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f8:	781b      	ldrb	r3, [r3, #0]
    98fa:	2bff      	cmp	r3, #255	; 0xff
    98fc:	d105      	bne.n	990a <send_settings+0x4c6>
    98fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    9902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9906:	2200      	movs	r2, #0
    9908:	701a      	strb	r2, [r3, #0]
    990a:	f24c 3319 	movw	r3, #49945	; 0xc319
    990e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9912:	781b      	ldrb	r3, [r3, #0]
    9914:	461a      	mov	r2, r3
    9916:	f24c 330c 	movw	r3, #49932	; 0xc30c
    991a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    991e:	7859      	ldrb	r1, [r3, #1]
    9920:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9928:	5499      	strb	r1, [r3, r2]
    992a:	4b43      	ldr	r3, [pc, #268]	; (9a38 <send_settings+0x5f4>)
    992c:	781a      	ldrb	r2, [r3, #0]
    992e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9936:	781b      	ldrb	r3, [r3, #0]
    9938:	4413      	add	r3, r2
    993a:	b2da      	uxtb	r2, r3
    993c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9944:	701a      	strb	r2, [r3, #0]
    9946:	f24c 431e 	movw	r3, #50206	; 0xc41e
    994a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    994e:	781a      	ldrb	r2, [r3, #0]
    9950:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9958:	781b      	ldrb	r3, [r3, #0]
    995a:	4413      	add	r3, r2
    995c:	b2da      	uxtb	r2, r3
    995e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9966:	701a      	strb	r2, [r3, #0]
    9968:	f24c 3319 	movw	r3, #49945	; 0xc319
    996c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9970:	781b      	ldrb	r3, [r3, #0]
    9972:	3301      	adds	r3, #1
    9974:	b2da      	uxtb	r2, r3
    9976:	f24c 3319 	movw	r3, #49945	; 0xc319
    997a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    997e:	701a      	strb	r2, [r3, #0]
    9980:	f24c 3319 	movw	r3, #49945	; 0xc319
    9984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9988:	781b      	ldrb	r3, [r3, #0]
    998a:	2bff      	cmp	r3, #255	; 0xff
    998c:	d105      	bne.n	999a <send_settings+0x556>
    998e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9996:	2200      	movs	r2, #0
    9998:	701a      	strb	r2, [r3, #0]
    999a:	f24c 3319 	movw	r3, #49945	; 0xc319
    999e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a2:	781b      	ldrb	r3, [r3, #0]
    99a4:	461a      	mov	r2, r3
    99a6:	f24c 330c 	movw	r3, #49932	; 0xc30c
    99aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ae:	7899      	ldrb	r1, [r3, #2]
    99b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    99b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b8:	5499      	strb	r1, [r3, r2]
    99ba:	4b20      	ldr	r3, [pc, #128]	; (9a3c <send_settings+0x5f8>)
    99bc:	781a      	ldrb	r2, [r3, #0]
    99be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c6:	781b      	ldrb	r3, [r3, #0]
    99c8:	4413      	add	r3, r2
    99ca:	b2da      	uxtb	r2, r3
    99cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d4:	701a      	strb	r2, [r3, #0]
    99d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    99da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99de:	781a      	ldrb	r2, [r3, #0]
    99e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e8:	781b      	ldrb	r3, [r3, #0]
    99ea:	4413      	add	r3, r2
    99ec:	b2da      	uxtb	r2, r3
    99ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    99f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f6:	701a      	strb	r2, [r3, #0]
    99f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    99fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a00:	781b      	ldrb	r3, [r3, #0]
    9a02:	3301      	adds	r3, #1
    9a04:	b2da      	uxtb	r2, r3
    9a06:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a0e:	701a      	strb	r2, [r3, #0]
    9a10:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	2bff      	cmp	r3, #255	; 0xff
    9a1c:	d110      	bne.n	9a40 <send_settings+0x5fc>
    9a1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a26:	2200      	movs	r2, #0
    9a28:	701a      	strb	r2, [r3, #0]
    9a2a:	e009      	b.n	9a40 <send_settings+0x5fc>
    9a2c:	2004c309 	.word	0x2004c309
    9a30:	2004c30a 	.word	0x2004c30a
    9a34:	2004c30b 	.word	0x2004c30b
    9a38:	2004c30d 	.word	0x2004c30d
    9a3c:	2004c30e 	.word	0x2004c30e
    9a40:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a48:	781b      	ldrb	r3, [r3, #0]
    9a4a:	461a      	mov	r2, r3
    9a4c:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a54:	78d9      	ldrb	r1, [r3, #3]
    9a56:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a5e:	5499      	strb	r1, [r3, r2]
    9a60:	4b79      	ldr	r3, [pc, #484]	; (9c48 <send_settings+0x804>)
    9a62:	781a      	ldrb	r2, [r3, #0]
    9a64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6c:	781b      	ldrb	r3, [r3, #0]
    9a6e:	4413      	add	r3, r2
    9a70:	b2da      	uxtb	r2, r3
    9a72:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a7a:	701a      	strb	r2, [r3, #0]
    9a7c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a84:	781a      	ldrb	r2, [r3, #0]
    9a86:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a8e:	781b      	ldrb	r3, [r3, #0]
    9a90:	4413      	add	r3, r2
    9a92:	b2da      	uxtb	r2, r3
    9a94:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9c:	701a      	strb	r2, [r3, #0]
    9a9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa6:	781b      	ldrb	r3, [r3, #0]
    9aa8:	3301      	adds	r3, #1
    9aaa:	b2da      	uxtb	r2, r3
    9aac:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab4:	701a      	strb	r2, [r3, #0]
    9ab6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9abe:	781b      	ldrb	r3, [r3, #0]
    9ac0:	2bff      	cmp	r3, #255	; 0xff
    9ac2:	d105      	bne.n	9ad0 <send_settings+0x68c>
    9ac4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9acc:	2200      	movs	r2, #0
    9ace:	701a      	strb	r2, [r3, #0]
    9ad0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad8:	781b      	ldrb	r3, [r3, #0]
    9ada:	461a      	mov	r2, r3
    9adc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae4:	7819      	ldrb	r1, [r3, #0]
    9ae6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aee:	5499      	strb	r1, [r3, r2]
    9af0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af8:	781b      	ldrb	r3, [r3, #0]
    9afa:	3301      	adds	r3, #1
    9afc:	b2da      	uxtb	r2, r3
    9afe:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b06:	701a      	strb	r2, [r3, #0]
    9b08:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b10:	781b      	ldrb	r3, [r3, #0]
    9b12:	2bff      	cmp	r3, #255	; 0xff
    9b14:	d105      	bne.n	9b22 <send_settings+0x6de>
    9b16:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b1e:	2200      	movs	r2, #0
    9b20:	701a      	strb	r2, [r3, #0]
    9b22:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b2a:	781b      	ldrb	r3, [r3, #0]
    9b2c:	461a      	mov	r2, r3
    9b2e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b36:	7819      	ldrb	r1, [r3, #0]
    9b38:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b40:	5499      	strb	r1, [r3, r2]
    9b42:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b4a:	781b      	ldrb	r3, [r3, #0]
    9b4c:	3301      	adds	r3, #1
    9b4e:	b2da      	uxtb	r2, r3
    9b50:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b58:	701a      	strb	r2, [r3, #0]
    9b5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b62:	781b      	ldrb	r3, [r3, #0]
    9b64:	2bff      	cmp	r3, #255	; 0xff
    9b66:	d105      	bne.n	9b74 <send_settings+0x730>
    9b68:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b70:	2200      	movs	r2, #0
    9b72:	701a      	strb	r2, [r3, #0]
    9b74:	f242 0339 	movw	r3, #8249	; 0x2039
    9b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b7c:	781b      	ldrb	r3, [r3, #0]
    9b7e:	b2db      	uxtb	r3, r3
    9b80:	f003 0310 	and.w	r3, r3, #16
    9b84:	2b00      	cmp	r3, #0
    9b86:	d15a      	bne.n	9c3e <send_settings+0x7fa>
    9b88:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b90:	781b      	ldrb	r3, [r3, #0]
    9b92:	b2db      	uxtb	r3, r3
    9b94:	461a      	mov	r2, r3
    9b96:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b9e:	5c9a      	ldrb	r2, [r3, r2]
    9ba0:	f24c 431b 	movw	r3, #50203	; 0xc41b
    9ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba8:	701a      	strb	r2, [r3, #0]
    9baa:	f24c 431c 	movw	r3, #50204	; 0xc41c
    9bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb2:	2200      	movs	r2, #0
    9bb4:	701a      	strb	r2, [r3, #0]
    9bb6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bbe:	781b      	ldrb	r3, [r3, #0]
    9bc0:	b2db      	uxtb	r3, r3
    9bc2:	3301      	adds	r3, #1
    9bc4:	b2da      	uxtb	r2, r3
    9bc6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bce:	701a      	strb	r2, [r3, #0]
    9bd0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd8:	781b      	ldrb	r3, [r3, #0]
    9bda:	b2db      	uxtb	r3, r3
    9bdc:	2bff      	cmp	r3, #255	; 0xff
    9bde:	d105      	bne.n	9bec <send_settings+0x7a8>
    9be0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be8:	2200      	movs	r2, #0
    9bea:	701a      	strb	r2, [r3, #0]
    9bec:	f242 0338 	movw	r3, #8248	; 0x2038
    9bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bf4:	f242 0238 	movw	r2, #8248	; 0x2038
    9bf8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9bfc:	7812      	ldrb	r2, [r2, #0]
    9bfe:	b2d2      	uxtb	r2, r2
    9c00:	f042 0201 	orr.w	r2, r2, #1
    9c04:	b2d2      	uxtb	r2, r2
    9c06:	701a      	strb	r2, [r3, #0]
    9c08:	f242 0339 	movw	r3, #8249	; 0x2039
    9c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c10:	f242 0239 	movw	r2, #8249	; 0x2039
    9c14:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9c18:	7812      	ldrb	r2, [r2, #0]
    9c1a:	b2d2      	uxtb	r2, r2
    9c1c:	f042 0210 	orr.w	r2, r2, #16
    9c20:	b2d2      	uxtb	r2, r2
    9c22:	701a      	strb	r2, [r3, #0]
    9c24:	e00b      	b.n	9c3e <send_settings+0x7fa>
    9c26:	f24c 3318 	movw	r3, #49944	; 0xc318
    9c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c2e:	781b      	ldrb	r3, [r3, #0]
    9c30:	3301      	adds	r3, #1
    9c32:	b2da      	uxtb	r2, r3
    9c34:	f24c 3318 	movw	r3, #49944	; 0xc318
    9c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c3c:	701a      	strb	r2, [r3, #0]
}
    9c3e:	46bd      	mov	sp, r7
    9c40:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c44:	4770      	bx	lr
    9c46:	bf00      	nop
    9c48:	2004c30f 	.word	0x2004c30f

00009c4c <send_desired>:
void send_desired(void){  //1000ms
    9c4c:	b480      	push	{r7}
    9c4e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9c50:	f24c 3311 	movw	r3, #49937	; 0xc311
    9c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c58:	781a      	ldrb	r2, [r3, #0]
    9c5a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9c5e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9c62:	fba3 1302 	umull	r1, r3, r3, r2
    9c66:	08d9      	lsrs	r1, r3, #3
    9c68:	460b      	mov	r3, r1
    9c6a:	009b      	lsls	r3, r3, #2
    9c6c:	440b      	add	r3, r1
    9c6e:	005b      	lsls	r3, r3, #1
    9c70:	1ad3      	subs	r3, r2, r3
    9c72:	b2db      	uxtb	r3, r3
    9c74:	2b03      	cmp	r3, #3
    9c76:	f040 8712 	bne.w	aa9e <send_desired+0xe52>
    9c7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c82:	781a      	ldrb	r2, [r3, #0]
    9c84:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c8c:	781b      	ldrb	r3, [r3, #0]
    9c8e:	b2db      	uxtb	r3, r3
    9c90:	429a      	cmp	r2, r3
    9c92:	d313      	bcc.n	9cbc <send_desired+0x70>
    9c94:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c9c:	781b      	ldrb	r3, [r3, #0]
    9c9e:	b2db      	uxtb	r3, r3
    9ca0:	461a      	mov	r2, r3
    9ca2:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9caa:	781b      	ldrb	r3, [r3, #0]
    9cac:	1ad3      	subs	r3, r2, r3
    9cae:	33ff      	adds	r3, #255	; 0xff
    9cb0:	2b18      	cmp	r3, #24
    9cb2:	bfd4      	ite	le
    9cb4:	2300      	movle	r3, #0
    9cb6:	2301      	movgt	r3, #1
    9cb8:	b2db      	uxtb	r3, r3
    9cba:	e011      	b.n	9ce0 <send_desired+0x94>
    9cbc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc4:	781b      	ldrb	r3, [r3, #0]
    9cc6:	b2db      	uxtb	r3, r3
    9cc8:	461a      	mov	r2, r3
    9cca:	f24c 3319 	movw	r3, #49945	; 0xc319
    9cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd2:	781b      	ldrb	r3, [r3, #0]
    9cd4:	1ad3      	subs	r3, r2, r3
    9cd6:	2b18      	cmp	r3, #24
    9cd8:	bfd4      	ite	le
    9cda:	2300      	movle	r3, #0
    9cdc:	2301      	movgt	r3, #1
    9cde:	b2db      	uxtb	r3, r3
    9ce0:	2b00      	cmp	r3, #0
    9ce2:	f000 86d0 	beq.w	aa86 <send_desired+0xe3a>
    9ce6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cee:	781b      	ldrb	r3, [r3, #0]
    9cf0:	461a      	mov	r2, r3
    9cf2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cfa:	2105      	movs	r1, #5
    9cfc:	5499      	strb	r1, [r3, r2]
    9cfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d06:	781b      	ldrb	r3, [r3, #0]
    9d08:	3301      	adds	r3, #1
    9d0a:	b2da      	uxtb	r2, r3
    9d0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d14:	701a      	strb	r2, [r3, #0]
    9d16:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1e:	781b      	ldrb	r3, [r3, #0]
    9d20:	2bff      	cmp	r3, #255	; 0xff
    9d22:	d105      	bne.n	9d30 <send_desired+0xe4>
    9d24:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2c:	2200      	movs	r2, #0
    9d2e:	701a      	strb	r2, [r3, #0]
    9d30:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d38:	781b      	ldrb	r3, [r3, #0]
    9d3a:	461a      	mov	r2, r3
    9d3c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d44:	2112      	movs	r1, #18
    9d46:	5499      	strb	r1, [r3, r2]
    9d48:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d50:	781b      	ldrb	r3, [r3, #0]
    9d52:	3301      	adds	r3, #1
    9d54:	b2da      	uxtb	r2, r3
    9d56:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d5e:	701a      	strb	r2, [r3, #0]
    9d60:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d68:	781b      	ldrb	r3, [r3, #0]
    9d6a:	2bff      	cmp	r3, #255	; 0xff
    9d6c:	d105      	bne.n	9d7a <send_desired+0x12e>
    9d6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d76:	2200      	movs	r2, #0
    9d78:	701a      	strb	r2, [r3, #0]
    9d7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d82:	2212      	movs	r2, #18
    9d84:	701a      	strb	r2, [r3, #0]
    9d86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8e:	2212      	movs	r2, #18
    9d90:	701a      	strb	r2, [r3, #0]
    9d92:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9a:	781b      	ldrb	r3, [r3, #0]
    9d9c:	461a      	mov	r2, r3
    9d9e:	f24c 6344 	movw	r3, #50756	; 0xc644
    9da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da6:	7819      	ldrb	r1, [r3, #0]
    9da8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db0:	5499      	strb	r1, [r3, r2]
    9db2:	f24c 6344 	movw	r3, #50756	; 0xc644
    9db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dba:	781a      	ldrb	r2, [r3, #0]
    9dbc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc4:	781b      	ldrb	r3, [r3, #0]
    9dc6:	4413      	add	r3, r2
    9dc8:	b2da      	uxtb	r2, r3
    9dca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd2:	701a      	strb	r2, [r3, #0]
    9dd4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ddc:	781a      	ldrb	r2, [r3, #0]
    9dde:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de6:	781b      	ldrb	r3, [r3, #0]
    9de8:	4413      	add	r3, r2
    9dea:	b2da      	uxtb	r2, r3
    9dec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df4:	701a      	strb	r2, [r3, #0]
    9df6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfe:	781b      	ldrb	r3, [r3, #0]
    9e00:	3301      	adds	r3, #1
    9e02:	b2da      	uxtb	r2, r3
    9e04:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e0c:	701a      	strb	r2, [r3, #0]
    9e0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e16:	781b      	ldrb	r3, [r3, #0]
    9e18:	2bff      	cmp	r3, #255	; 0xff
    9e1a:	d105      	bne.n	9e28 <send_desired+0x1dc>
    9e1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e24:	2200      	movs	r2, #0
    9e26:	701a      	strb	r2, [r3, #0]
    9e28:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e30:	781b      	ldrb	r3, [r3, #0]
    9e32:	461a      	mov	r2, r3
    9e34:	f24c 6344 	movw	r3, #50756	; 0xc644
    9e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3c:	7859      	ldrb	r1, [r3, #1]
    9e3e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e46:	5499      	strb	r1, [r3, r2]
    9e48:	4bd1      	ldr	r3, [pc, #836]	; (a190 <send_desired+0x544>)
    9e4a:	781a      	ldrb	r2, [r3, #0]
    9e4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e54:	781b      	ldrb	r3, [r3, #0]
    9e56:	4413      	add	r3, r2
    9e58:	b2da      	uxtb	r2, r3
    9e5a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e62:	701a      	strb	r2, [r3, #0]
    9e64:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e6c:	781a      	ldrb	r2, [r3, #0]
    9e6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e76:	781b      	ldrb	r3, [r3, #0]
    9e78:	4413      	add	r3, r2
    9e7a:	b2da      	uxtb	r2, r3
    9e7c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e84:	701a      	strb	r2, [r3, #0]
    9e86:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8e:	781b      	ldrb	r3, [r3, #0]
    9e90:	3301      	adds	r3, #1
    9e92:	b2da      	uxtb	r2, r3
    9e94:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e9c:	701a      	strb	r2, [r3, #0]
    9e9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea6:	781b      	ldrb	r3, [r3, #0]
    9ea8:	2bff      	cmp	r3, #255	; 0xff
    9eaa:	d105      	bne.n	9eb8 <send_desired+0x26c>
    9eac:	f24c 3319 	movw	r3, #49945	; 0xc319
    9eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb4:	2200      	movs	r2, #0
    9eb6:	701a      	strb	r2, [r3, #0]
    9eb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec0:	781b      	ldrb	r3, [r3, #0]
    9ec2:	461a      	mov	r2, r3
    9ec4:	f24c 6344 	movw	r3, #50756	; 0xc644
    9ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ecc:	7899      	ldrb	r1, [r3, #2]
    9ece:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed6:	5499      	strb	r1, [r3, r2]
    9ed8:	4bae      	ldr	r3, [pc, #696]	; (a194 <send_desired+0x548>)
    9eda:	781a      	ldrb	r2, [r3, #0]
    9edc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee4:	781b      	ldrb	r3, [r3, #0]
    9ee6:	4413      	add	r3, r2
    9ee8:	b2da      	uxtb	r2, r3
    9eea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef2:	701a      	strb	r2, [r3, #0]
    9ef4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efc:	781a      	ldrb	r2, [r3, #0]
    9efe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f06:	781b      	ldrb	r3, [r3, #0]
    9f08:	4413      	add	r3, r2
    9f0a:	b2da      	uxtb	r2, r3
    9f0c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f14:	701a      	strb	r2, [r3, #0]
    9f16:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f1e:	781b      	ldrb	r3, [r3, #0]
    9f20:	3301      	adds	r3, #1
    9f22:	b2da      	uxtb	r2, r3
    9f24:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f2c:	701a      	strb	r2, [r3, #0]
    9f2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f36:	781b      	ldrb	r3, [r3, #0]
    9f38:	2bff      	cmp	r3, #255	; 0xff
    9f3a:	d105      	bne.n	9f48 <send_desired+0x2fc>
    9f3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f44:	2200      	movs	r2, #0
    9f46:	701a      	strb	r2, [r3, #0]
    9f48:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f50:	781b      	ldrb	r3, [r3, #0]
    9f52:	461a      	mov	r2, r3
    9f54:	f24c 6344 	movw	r3, #50756	; 0xc644
    9f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5c:	78d9      	ldrb	r1, [r3, #3]
    9f5e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f66:	5499      	strb	r1, [r3, r2]
    9f68:	4b8b      	ldr	r3, [pc, #556]	; (a198 <send_desired+0x54c>)
    9f6a:	781a      	ldrb	r2, [r3, #0]
    9f6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f74:	781b      	ldrb	r3, [r3, #0]
    9f76:	4413      	add	r3, r2
    9f78:	b2da      	uxtb	r2, r3
    9f7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f82:	701a      	strb	r2, [r3, #0]
    9f84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8c:	781a      	ldrb	r2, [r3, #0]
    9f8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f96:	781b      	ldrb	r3, [r3, #0]
    9f98:	4413      	add	r3, r2
    9f9a:	b2da      	uxtb	r2, r3
    9f9c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa4:	701a      	strb	r2, [r3, #0]
    9fa6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fae:	781b      	ldrb	r3, [r3, #0]
    9fb0:	3301      	adds	r3, #1
    9fb2:	b2da      	uxtb	r2, r3
    9fb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fbc:	701a      	strb	r2, [r3, #0]
    9fbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc6:	781b      	ldrb	r3, [r3, #0]
    9fc8:	2bff      	cmp	r3, #255	; 0xff
    9fca:	d105      	bne.n	9fd8 <send_desired+0x38c>
    9fcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd4:	2200      	movs	r2, #0
    9fd6:	701a      	strb	r2, [r3, #0]
    9fd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe0:	781b      	ldrb	r3, [r3, #0]
    9fe2:	461a      	mov	r2, r3
    9fe4:	f24c 6348 	movw	r3, #50760	; 0xc648
    9fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fec:	7819      	ldrb	r1, [r3, #0]
    9fee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff6:	5499      	strb	r1, [r3, r2]
    9ff8:	f24c 6348 	movw	r3, #50760	; 0xc648
    9ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a000:	781a      	ldrb	r2, [r3, #0]
    a002:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a00a:	781b      	ldrb	r3, [r3, #0]
    a00c:	4413      	add	r3, r2
    a00e:	b2da      	uxtb	r2, r3
    a010:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a018:	701a      	strb	r2, [r3, #0]
    a01a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a022:	781a      	ldrb	r2, [r3, #0]
    a024:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a02c:	781b      	ldrb	r3, [r3, #0]
    a02e:	4413      	add	r3, r2
    a030:	b2da      	uxtb	r2, r3
    a032:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a03a:	701a      	strb	r2, [r3, #0]
    a03c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a044:	781b      	ldrb	r3, [r3, #0]
    a046:	3301      	adds	r3, #1
    a048:	b2da      	uxtb	r2, r3
    a04a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a052:	701a      	strb	r2, [r3, #0]
    a054:	f24c 3319 	movw	r3, #49945	; 0xc319
    a058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05c:	781b      	ldrb	r3, [r3, #0]
    a05e:	2bff      	cmp	r3, #255	; 0xff
    a060:	d105      	bne.n	a06e <send_desired+0x422>
    a062:	f24c 3319 	movw	r3, #49945	; 0xc319
    a066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a06a:	2200      	movs	r2, #0
    a06c:	701a      	strb	r2, [r3, #0]
    a06e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a076:	781b      	ldrb	r3, [r3, #0]
    a078:	461a      	mov	r2, r3
    a07a:	f24c 6348 	movw	r3, #50760	; 0xc648
    a07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a082:	7859      	ldrb	r1, [r3, #1]
    a084:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a08c:	5499      	strb	r1, [r3, r2]
    a08e:	4b43      	ldr	r3, [pc, #268]	; (a19c <send_desired+0x550>)
    a090:	781a      	ldrb	r2, [r3, #0]
    a092:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a09a:	781b      	ldrb	r3, [r3, #0]
    a09c:	4413      	add	r3, r2
    a09e:	b2da      	uxtb	r2, r3
    a0a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a8:	701a      	strb	r2, [r3, #0]
    a0aa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b2:	781a      	ldrb	r2, [r3, #0]
    a0b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a0b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0bc:	781b      	ldrb	r3, [r3, #0]
    a0be:	4413      	add	r3, r2
    a0c0:	b2da      	uxtb	r2, r3
    a0c2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ca:	701a      	strb	r2, [r3, #0]
    a0cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d4:	781b      	ldrb	r3, [r3, #0]
    a0d6:	3301      	adds	r3, #1
    a0d8:	b2da      	uxtb	r2, r3
    a0da:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e2:	701a      	strb	r2, [r3, #0]
    a0e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ec:	781b      	ldrb	r3, [r3, #0]
    a0ee:	2bff      	cmp	r3, #255	; 0xff
    a0f0:	d105      	bne.n	a0fe <send_desired+0x4b2>
    a0f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0fa:	2200      	movs	r2, #0
    a0fc:	701a      	strb	r2, [r3, #0]
    a0fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    a102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a106:	781b      	ldrb	r3, [r3, #0]
    a108:	461a      	mov	r2, r3
    a10a:	f24c 6348 	movw	r3, #50760	; 0xc648
    a10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a112:	7899      	ldrb	r1, [r3, #2]
    a114:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a11c:	5499      	strb	r1, [r3, r2]
    a11e:	4b20      	ldr	r3, [pc, #128]	; (a1a0 <send_desired+0x554>)
    a120:	781a      	ldrb	r2, [r3, #0]
    a122:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12a:	781b      	ldrb	r3, [r3, #0]
    a12c:	4413      	add	r3, r2
    a12e:	b2da      	uxtb	r2, r3
    a130:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a138:	701a      	strb	r2, [r3, #0]
    a13a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a142:	781a      	ldrb	r2, [r3, #0]
    a144:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14c:	781b      	ldrb	r3, [r3, #0]
    a14e:	4413      	add	r3, r2
    a150:	b2da      	uxtb	r2, r3
    a152:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a15a:	701a      	strb	r2, [r3, #0]
    a15c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a164:	781b      	ldrb	r3, [r3, #0]
    a166:	3301      	adds	r3, #1
    a168:	b2da      	uxtb	r2, r3
    a16a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a172:	701a      	strb	r2, [r3, #0]
    a174:	f24c 3319 	movw	r3, #49945	; 0xc319
    a178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a17c:	781b      	ldrb	r3, [r3, #0]
    a17e:	2bff      	cmp	r3, #255	; 0xff
    a180:	d110      	bne.n	a1a4 <send_desired+0x558>
    a182:	f24c 3319 	movw	r3, #49945	; 0xc319
    a186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a18a:	2200      	movs	r2, #0
    a18c:	701a      	strb	r2, [r3, #0]
    a18e:	e009      	b.n	a1a4 <send_desired+0x558>
    a190:	2004c645 	.word	0x2004c645
    a194:	2004c646 	.word	0x2004c646
    a198:	2004c647 	.word	0x2004c647
    a19c:	2004c649 	.word	0x2004c649
    a1a0:	2004c64a 	.word	0x2004c64a
    a1a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ac:	781b      	ldrb	r3, [r3, #0]
    a1ae:	461a      	mov	r2, r3
    a1b0:	f24c 6348 	movw	r3, #50760	; 0xc648
    a1b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b8:	78d9      	ldrb	r1, [r3, #3]
    a1ba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c2:	5499      	strb	r1, [r3, r2]
    a1c4:	4bd3      	ldr	r3, [pc, #844]	; (a514 <send_desired+0x8c8>)
    a1c6:	781a      	ldrb	r2, [r3, #0]
    a1c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d0:	781b      	ldrb	r3, [r3, #0]
    a1d2:	4413      	add	r3, r2
    a1d4:	b2da      	uxtb	r2, r3
    a1d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1de:	701a      	strb	r2, [r3, #0]
    a1e0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e8:	781a      	ldrb	r2, [r3, #0]
    a1ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f2:	781b      	ldrb	r3, [r3, #0]
    a1f4:	4413      	add	r3, r2
    a1f6:	b2da      	uxtb	r2, r3
    a1f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a200:	701a      	strb	r2, [r3, #0]
    a202:	f24c 3319 	movw	r3, #49945	; 0xc319
    a206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20a:	781b      	ldrb	r3, [r3, #0]
    a20c:	3301      	adds	r3, #1
    a20e:	b2da      	uxtb	r2, r3
    a210:	f24c 3319 	movw	r3, #49945	; 0xc319
    a214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a218:	701a      	strb	r2, [r3, #0]
    a21a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a222:	781b      	ldrb	r3, [r3, #0]
    a224:	2bff      	cmp	r3, #255	; 0xff
    a226:	d105      	bne.n	a234 <send_desired+0x5e8>
    a228:	f24c 3319 	movw	r3, #49945	; 0xc319
    a22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a230:	2200      	movs	r2, #0
    a232:	701a      	strb	r2, [r3, #0]
    a234:	f24c 3319 	movw	r3, #49945	; 0xc319
    a238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23c:	781b      	ldrb	r3, [r3, #0]
    a23e:	461a      	mov	r2, r3
    a240:	f24c 6390 	movw	r3, #50832	; 0xc690
    a244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a248:	7819      	ldrb	r1, [r3, #0]
    a24a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a252:	5499      	strb	r1, [r3, r2]
    a254:	f24c 6390 	movw	r3, #50832	; 0xc690
    a258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a25c:	781a      	ldrb	r2, [r3, #0]
    a25e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a266:	781b      	ldrb	r3, [r3, #0]
    a268:	4413      	add	r3, r2
    a26a:	b2da      	uxtb	r2, r3
    a26c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a274:	701a      	strb	r2, [r3, #0]
    a276:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a27e:	781a      	ldrb	r2, [r3, #0]
    a280:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a288:	781b      	ldrb	r3, [r3, #0]
    a28a:	4413      	add	r3, r2
    a28c:	b2da      	uxtb	r2, r3
    a28e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a296:	701a      	strb	r2, [r3, #0]
    a298:	f24c 3319 	movw	r3, #49945	; 0xc319
    a29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a0:	781b      	ldrb	r3, [r3, #0]
    a2a2:	3301      	adds	r3, #1
    a2a4:	b2da      	uxtb	r2, r3
    a2a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ae:	701a      	strb	r2, [r3, #0]
    a2b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b8:	781b      	ldrb	r3, [r3, #0]
    a2ba:	2bff      	cmp	r3, #255	; 0xff
    a2bc:	d105      	bne.n	a2ca <send_desired+0x67e>
    a2be:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c6:	2200      	movs	r2, #0
    a2c8:	701a      	strb	r2, [r3, #0]
    a2ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d2:	781b      	ldrb	r3, [r3, #0]
    a2d4:	461a      	mov	r2, r3
    a2d6:	f24c 6390 	movw	r3, #50832	; 0xc690
    a2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2de:	7859      	ldrb	r1, [r3, #1]
    a2e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e8:	5499      	strb	r1, [r3, r2]
    a2ea:	4b8b      	ldr	r3, [pc, #556]	; (a518 <send_desired+0x8cc>)
    a2ec:	781a      	ldrb	r2, [r3, #0]
    a2ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f6:	781b      	ldrb	r3, [r3, #0]
    a2f8:	4413      	add	r3, r2
    a2fa:	b2da      	uxtb	r2, r3
    a2fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a304:	701a      	strb	r2, [r3, #0]
    a306:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a30e:	781a      	ldrb	r2, [r3, #0]
    a310:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a318:	781b      	ldrb	r3, [r3, #0]
    a31a:	4413      	add	r3, r2
    a31c:	b2da      	uxtb	r2, r3
    a31e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a326:	701a      	strb	r2, [r3, #0]
    a328:	f24c 3319 	movw	r3, #49945	; 0xc319
    a32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a330:	781b      	ldrb	r3, [r3, #0]
    a332:	3301      	adds	r3, #1
    a334:	b2da      	uxtb	r2, r3
    a336:	f24c 3319 	movw	r3, #49945	; 0xc319
    a33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a33e:	701a      	strb	r2, [r3, #0]
    a340:	f24c 3319 	movw	r3, #49945	; 0xc319
    a344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a348:	781b      	ldrb	r3, [r3, #0]
    a34a:	2bff      	cmp	r3, #255	; 0xff
    a34c:	d105      	bne.n	a35a <send_desired+0x70e>
    a34e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a356:	2200      	movs	r2, #0
    a358:	701a      	strb	r2, [r3, #0]
    a35a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a362:	781b      	ldrb	r3, [r3, #0]
    a364:	461a      	mov	r2, r3
    a366:	f24c 6390 	movw	r3, #50832	; 0xc690
    a36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a36e:	7899      	ldrb	r1, [r3, #2]
    a370:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a378:	5499      	strb	r1, [r3, r2]
    a37a:	4b68      	ldr	r3, [pc, #416]	; (a51c <send_desired+0x8d0>)
    a37c:	781a      	ldrb	r2, [r3, #0]
    a37e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a386:	781b      	ldrb	r3, [r3, #0]
    a388:	4413      	add	r3, r2
    a38a:	b2da      	uxtb	r2, r3
    a38c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a394:	701a      	strb	r2, [r3, #0]
    a396:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a39e:	781a      	ldrb	r2, [r3, #0]
    a3a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a8:	781b      	ldrb	r3, [r3, #0]
    a3aa:	4413      	add	r3, r2
    a3ac:	b2da      	uxtb	r2, r3
    a3ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b6:	701a      	strb	r2, [r3, #0]
    a3b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c0:	781b      	ldrb	r3, [r3, #0]
    a3c2:	3301      	adds	r3, #1
    a3c4:	b2da      	uxtb	r2, r3
    a3c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ce:	701a      	strb	r2, [r3, #0]
    a3d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d8:	781b      	ldrb	r3, [r3, #0]
    a3da:	2bff      	cmp	r3, #255	; 0xff
    a3dc:	d105      	bne.n	a3ea <send_desired+0x79e>
    a3de:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e6:	2200      	movs	r2, #0
    a3e8:	701a      	strb	r2, [r3, #0]
    a3ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f2:	781b      	ldrb	r3, [r3, #0]
    a3f4:	461a      	mov	r2, r3
    a3f6:	f24c 6390 	movw	r3, #50832	; 0xc690
    a3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3fe:	78d9      	ldrb	r1, [r3, #3]
    a400:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a408:	5499      	strb	r1, [r3, r2]
    a40a:	4b45      	ldr	r3, [pc, #276]	; (a520 <send_desired+0x8d4>)
    a40c:	781a      	ldrb	r2, [r3, #0]
    a40e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a416:	781b      	ldrb	r3, [r3, #0]
    a418:	4413      	add	r3, r2
    a41a:	b2da      	uxtb	r2, r3
    a41c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a424:	701a      	strb	r2, [r3, #0]
    a426:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a42e:	781a      	ldrb	r2, [r3, #0]
    a430:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a438:	781b      	ldrb	r3, [r3, #0]
    a43a:	4413      	add	r3, r2
    a43c:	b2da      	uxtb	r2, r3
    a43e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a446:	701a      	strb	r2, [r3, #0]
    a448:	f24c 3319 	movw	r3, #49945	; 0xc319
    a44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a450:	781b      	ldrb	r3, [r3, #0]
    a452:	3301      	adds	r3, #1
    a454:	b2da      	uxtb	r2, r3
    a456:	f24c 3319 	movw	r3, #49945	; 0xc319
    a45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a45e:	701a      	strb	r2, [r3, #0]
    a460:	f24c 3319 	movw	r3, #49945	; 0xc319
    a464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a468:	781b      	ldrb	r3, [r3, #0]
    a46a:	2bff      	cmp	r3, #255	; 0xff
    a46c:	d105      	bne.n	a47a <send_desired+0x82e>
    a46e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a476:	2200      	movs	r2, #0
    a478:	701a      	strb	r2, [r3, #0]
    a47a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a482:	781b      	ldrb	r3, [r3, #0]
    a484:	461a      	mov	r2, r3
    a486:	f24c 6394 	movw	r3, #50836	; 0xc694
    a48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a48e:	7819      	ldrb	r1, [r3, #0]
    a490:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a498:	5499      	strb	r1, [r3, r2]
    a49a:	f24c 6394 	movw	r3, #50836	; 0xc694
    a49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a2:	781a      	ldrb	r2, [r3, #0]
    a4a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ac:	781b      	ldrb	r3, [r3, #0]
    a4ae:	4413      	add	r3, r2
    a4b0:	b2da      	uxtb	r2, r3
    a4b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ba:	701a      	strb	r2, [r3, #0]
    a4bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c4:	781a      	ldrb	r2, [r3, #0]
    a4c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ce:	781b      	ldrb	r3, [r3, #0]
    a4d0:	4413      	add	r3, r2
    a4d2:	b2da      	uxtb	r2, r3
    a4d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4dc:	701a      	strb	r2, [r3, #0]
    a4de:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e6:	781b      	ldrb	r3, [r3, #0]
    a4e8:	3301      	adds	r3, #1
    a4ea:	b2da      	uxtb	r2, r3
    a4ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f4:	701a      	strb	r2, [r3, #0]
    a4f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4fe:	781b      	ldrb	r3, [r3, #0]
    a500:	2bff      	cmp	r3, #255	; 0xff
    a502:	d10f      	bne.n	a524 <send_desired+0x8d8>
    a504:	f24c 3319 	movw	r3, #49945	; 0xc319
    a508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a50c:	2200      	movs	r2, #0
    a50e:	701a      	strb	r2, [r3, #0]
    a510:	e008      	b.n	a524 <send_desired+0x8d8>
    a512:	bf00      	nop
    a514:	2004c64b 	.word	0x2004c64b
    a518:	2004c691 	.word	0x2004c691
    a51c:	2004c692 	.word	0x2004c692
    a520:	2004c693 	.word	0x2004c693
    a524:	f24c 3319 	movw	r3, #49945	; 0xc319
    a528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a52c:	781b      	ldrb	r3, [r3, #0]
    a52e:	461a      	mov	r2, r3
    a530:	f24c 6394 	movw	r3, #50836	; 0xc694
    a534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a538:	7859      	ldrb	r1, [r3, #1]
    a53a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a542:	5499      	strb	r1, [r3, r2]
    a544:	4bd1      	ldr	r3, [pc, #836]	; (a88c <send_desired+0xc40>)
    a546:	781a      	ldrb	r2, [r3, #0]
    a548:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a550:	781b      	ldrb	r3, [r3, #0]
    a552:	4413      	add	r3, r2
    a554:	b2da      	uxtb	r2, r3
    a556:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a55e:	701a      	strb	r2, [r3, #0]
    a560:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a568:	781a      	ldrb	r2, [r3, #0]
    a56a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a572:	781b      	ldrb	r3, [r3, #0]
    a574:	4413      	add	r3, r2
    a576:	b2da      	uxtb	r2, r3
    a578:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a580:	701a      	strb	r2, [r3, #0]
    a582:	f24c 3319 	movw	r3, #49945	; 0xc319
    a586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a58a:	781b      	ldrb	r3, [r3, #0]
    a58c:	3301      	adds	r3, #1
    a58e:	b2da      	uxtb	r2, r3
    a590:	f24c 3319 	movw	r3, #49945	; 0xc319
    a594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a598:	701a      	strb	r2, [r3, #0]
    a59a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a2:	781b      	ldrb	r3, [r3, #0]
    a5a4:	2bff      	cmp	r3, #255	; 0xff
    a5a6:	d105      	bne.n	a5b4 <send_desired+0x968>
    a5a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b0:	2200      	movs	r2, #0
    a5b2:	701a      	strb	r2, [r3, #0]
    a5b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5bc:	781b      	ldrb	r3, [r3, #0]
    a5be:	461a      	mov	r2, r3
    a5c0:	f24c 6394 	movw	r3, #50836	; 0xc694
    a5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c8:	7899      	ldrb	r1, [r3, #2]
    a5ca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d2:	5499      	strb	r1, [r3, r2]
    a5d4:	4bae      	ldr	r3, [pc, #696]	; (a890 <send_desired+0xc44>)
    a5d6:	781a      	ldrb	r2, [r3, #0]
    a5d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e0:	781b      	ldrb	r3, [r3, #0]
    a5e2:	4413      	add	r3, r2
    a5e4:	b2da      	uxtb	r2, r3
    a5e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ee:	701a      	strb	r2, [r3, #0]
    a5f0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f8:	781a      	ldrb	r2, [r3, #0]
    a5fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a602:	781b      	ldrb	r3, [r3, #0]
    a604:	4413      	add	r3, r2
    a606:	b2da      	uxtb	r2, r3
    a608:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a610:	701a      	strb	r2, [r3, #0]
    a612:	f24c 3319 	movw	r3, #49945	; 0xc319
    a616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a61a:	781b      	ldrb	r3, [r3, #0]
    a61c:	3301      	adds	r3, #1
    a61e:	b2da      	uxtb	r2, r3
    a620:	f24c 3319 	movw	r3, #49945	; 0xc319
    a624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a628:	701a      	strb	r2, [r3, #0]
    a62a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a632:	781b      	ldrb	r3, [r3, #0]
    a634:	2bff      	cmp	r3, #255	; 0xff
    a636:	d105      	bne.n	a644 <send_desired+0x9f8>
    a638:	f24c 3319 	movw	r3, #49945	; 0xc319
    a63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a640:	2200      	movs	r2, #0
    a642:	701a      	strb	r2, [r3, #0]
    a644:	f24c 3319 	movw	r3, #49945	; 0xc319
    a648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a64c:	781b      	ldrb	r3, [r3, #0]
    a64e:	461a      	mov	r2, r3
    a650:	f24c 6394 	movw	r3, #50836	; 0xc694
    a654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a658:	78d9      	ldrb	r1, [r3, #3]
    a65a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a662:	5499      	strb	r1, [r3, r2]
    a664:	4b8b      	ldr	r3, [pc, #556]	; (a894 <send_desired+0xc48>)
    a666:	781a      	ldrb	r2, [r3, #0]
    a668:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a670:	781b      	ldrb	r3, [r3, #0]
    a672:	4413      	add	r3, r2
    a674:	b2da      	uxtb	r2, r3
    a676:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a67e:	701a      	strb	r2, [r3, #0]
    a680:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a688:	781a      	ldrb	r2, [r3, #0]
    a68a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a692:	781b      	ldrb	r3, [r3, #0]
    a694:	4413      	add	r3, r2
    a696:	b2da      	uxtb	r2, r3
    a698:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a0:	701a      	strb	r2, [r3, #0]
    a6a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6aa:	781b      	ldrb	r3, [r3, #0]
    a6ac:	3301      	adds	r3, #1
    a6ae:	b2da      	uxtb	r2, r3
    a6b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b8:	701a      	strb	r2, [r3, #0]
    a6ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c2:	781b      	ldrb	r3, [r3, #0]
    a6c4:	2bff      	cmp	r3, #255	; 0xff
    a6c6:	d105      	bne.n	a6d4 <send_desired+0xa88>
    a6c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d0:	2200      	movs	r2, #0
    a6d2:	701a      	strb	r2, [r3, #0]
    a6d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6dc:	781b      	ldrb	r3, [r3, #0]
    a6de:	461a      	mov	r2, r3
    a6e0:	f240 5374 	movw	r3, #1396	; 0x574
    a6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6e8:	7819      	ldrb	r1, [r3, #0]
    a6ea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f2:	5499      	strb	r1, [r3, r2]
    a6f4:	f240 5374 	movw	r3, #1396	; 0x574
    a6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6fc:	781a      	ldrb	r2, [r3, #0]
    a6fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a706:	781b      	ldrb	r3, [r3, #0]
    a708:	4413      	add	r3, r2
    a70a:	b2da      	uxtb	r2, r3
    a70c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a714:	701a      	strb	r2, [r3, #0]
    a716:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a71e:	781a      	ldrb	r2, [r3, #0]
    a720:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a728:	781b      	ldrb	r3, [r3, #0]
    a72a:	4413      	add	r3, r2
    a72c:	b2da      	uxtb	r2, r3
    a72e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a736:	701a      	strb	r2, [r3, #0]
    a738:	f24c 3319 	movw	r3, #49945	; 0xc319
    a73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a740:	781b      	ldrb	r3, [r3, #0]
    a742:	3301      	adds	r3, #1
    a744:	b2da      	uxtb	r2, r3
    a746:	f24c 3319 	movw	r3, #49945	; 0xc319
    a74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a74e:	701a      	strb	r2, [r3, #0]
    a750:	f24c 3319 	movw	r3, #49945	; 0xc319
    a754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a758:	781b      	ldrb	r3, [r3, #0]
    a75a:	2bff      	cmp	r3, #255	; 0xff
    a75c:	d105      	bne.n	a76a <send_desired+0xb1e>
    a75e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a766:	2200      	movs	r2, #0
    a768:	701a      	strb	r2, [r3, #0]
    a76a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a772:	781b      	ldrb	r3, [r3, #0]
    a774:	461a      	mov	r2, r3
    a776:	f240 5374 	movw	r3, #1396	; 0x574
    a77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a77e:	7859      	ldrb	r1, [r3, #1]
    a780:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a788:	5499      	strb	r1, [r3, r2]
    a78a:	4b43      	ldr	r3, [pc, #268]	; (a898 <send_desired+0xc4c>)
    a78c:	781a      	ldrb	r2, [r3, #0]
    a78e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a796:	781b      	ldrb	r3, [r3, #0]
    a798:	4413      	add	r3, r2
    a79a:	b2da      	uxtb	r2, r3
    a79c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a4:	701a      	strb	r2, [r3, #0]
    a7a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ae:	781a      	ldrb	r2, [r3, #0]
    a7b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b8:	781b      	ldrb	r3, [r3, #0]
    a7ba:	4413      	add	r3, r2
    a7bc:	b2da      	uxtb	r2, r3
    a7be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c6:	701a      	strb	r2, [r3, #0]
    a7c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d0:	781b      	ldrb	r3, [r3, #0]
    a7d2:	3301      	adds	r3, #1
    a7d4:	b2da      	uxtb	r2, r3
    a7d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7de:	701a      	strb	r2, [r3, #0]
    a7e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e8:	781b      	ldrb	r3, [r3, #0]
    a7ea:	2bff      	cmp	r3, #255	; 0xff
    a7ec:	d105      	bne.n	a7fa <send_desired+0xbae>
    a7ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f6:	2200      	movs	r2, #0
    a7f8:	701a      	strb	r2, [r3, #0]
    a7fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a802:	781b      	ldrb	r3, [r3, #0]
    a804:	461a      	mov	r2, r3
    a806:	f240 5374 	movw	r3, #1396	; 0x574
    a80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a80e:	7899      	ldrb	r1, [r3, #2]
    a810:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a818:	5499      	strb	r1, [r3, r2]
    a81a:	4b20      	ldr	r3, [pc, #128]	; (a89c <send_desired+0xc50>)
    a81c:	781a      	ldrb	r2, [r3, #0]
    a81e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a826:	781b      	ldrb	r3, [r3, #0]
    a828:	4413      	add	r3, r2
    a82a:	b2da      	uxtb	r2, r3
    a82c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a834:	701a      	strb	r2, [r3, #0]
    a836:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a83e:	781a      	ldrb	r2, [r3, #0]
    a840:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a848:	781b      	ldrb	r3, [r3, #0]
    a84a:	4413      	add	r3, r2
    a84c:	b2da      	uxtb	r2, r3
    a84e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a856:	701a      	strb	r2, [r3, #0]
    a858:	f24c 3319 	movw	r3, #49945	; 0xc319
    a85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a860:	781b      	ldrb	r3, [r3, #0]
    a862:	3301      	adds	r3, #1
    a864:	b2da      	uxtb	r2, r3
    a866:	f24c 3319 	movw	r3, #49945	; 0xc319
    a86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a86e:	701a      	strb	r2, [r3, #0]
    a870:	f24c 3319 	movw	r3, #49945	; 0xc319
    a874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a878:	781b      	ldrb	r3, [r3, #0]
    a87a:	2bff      	cmp	r3, #255	; 0xff
    a87c:	d110      	bne.n	a8a0 <send_desired+0xc54>
    a87e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a886:	2200      	movs	r2, #0
    a888:	701a      	strb	r2, [r3, #0]
    a88a:	e009      	b.n	a8a0 <send_desired+0xc54>
    a88c:	2004c695 	.word	0x2004c695
    a890:	2004c696 	.word	0x2004c696
    a894:	2004c697 	.word	0x2004c697
    a898:	20000575 	.word	0x20000575
    a89c:	20000576 	.word	0x20000576
    a8a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a8:	781b      	ldrb	r3, [r3, #0]
    a8aa:	461a      	mov	r2, r3
    a8ac:	f240 5374 	movw	r3, #1396	; 0x574
    a8b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8b4:	78d9      	ldrb	r1, [r3, #3]
    a8b6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8be:	5499      	strb	r1, [r3, r2]
    a8c0:	4b79      	ldr	r3, [pc, #484]	; (aaa8 <send_desired+0xe5c>)
    a8c2:	781a      	ldrb	r2, [r3, #0]
    a8c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8cc:	781b      	ldrb	r3, [r3, #0]
    a8ce:	4413      	add	r3, r2
    a8d0:	b2da      	uxtb	r2, r3
    a8d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8da:	701a      	strb	r2, [r3, #0]
    a8dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e4:	781a      	ldrb	r2, [r3, #0]
    a8e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ee:	781b      	ldrb	r3, [r3, #0]
    a8f0:	4413      	add	r3, r2
    a8f2:	b2da      	uxtb	r2, r3
    a8f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8fc:	701a      	strb	r2, [r3, #0]
    a8fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    a902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a906:	781b      	ldrb	r3, [r3, #0]
    a908:	3301      	adds	r3, #1
    a90a:	b2da      	uxtb	r2, r3
    a90c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a914:	701a      	strb	r2, [r3, #0]
    a916:	f24c 3319 	movw	r3, #49945	; 0xc319
    a91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a91e:	781b      	ldrb	r3, [r3, #0]
    a920:	2bff      	cmp	r3, #255	; 0xff
    a922:	d105      	bne.n	a930 <send_desired+0xce4>
    a924:	f24c 3319 	movw	r3, #49945	; 0xc319
    a928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a92c:	2200      	movs	r2, #0
    a92e:	701a      	strb	r2, [r3, #0]
    a930:	f24c 3319 	movw	r3, #49945	; 0xc319
    a934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a938:	781b      	ldrb	r3, [r3, #0]
    a93a:	461a      	mov	r2, r3
    a93c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a944:	7819      	ldrb	r1, [r3, #0]
    a946:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a94e:	5499      	strb	r1, [r3, r2]
    a950:	f24c 3319 	movw	r3, #49945	; 0xc319
    a954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a958:	781b      	ldrb	r3, [r3, #0]
    a95a:	3301      	adds	r3, #1
    a95c:	b2da      	uxtb	r2, r3
    a95e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a966:	701a      	strb	r2, [r3, #0]
    a968:	f24c 3319 	movw	r3, #49945	; 0xc319
    a96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a970:	781b      	ldrb	r3, [r3, #0]
    a972:	2bff      	cmp	r3, #255	; 0xff
    a974:	d105      	bne.n	a982 <send_desired+0xd36>
    a976:	f24c 3319 	movw	r3, #49945	; 0xc319
    a97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a97e:	2200      	movs	r2, #0
    a980:	701a      	strb	r2, [r3, #0]
    a982:	f24c 3319 	movw	r3, #49945	; 0xc319
    a986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a98a:	781b      	ldrb	r3, [r3, #0]
    a98c:	461a      	mov	r2, r3
    a98e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a996:	7819      	ldrb	r1, [r3, #0]
    a998:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a0:	5499      	strb	r1, [r3, r2]
    a9a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9aa:	781b      	ldrb	r3, [r3, #0]
    a9ac:	3301      	adds	r3, #1
    a9ae:	b2da      	uxtb	r2, r3
    a9b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b8:	701a      	strb	r2, [r3, #0]
    a9ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c2:	781b      	ldrb	r3, [r3, #0]
    a9c4:	2bff      	cmp	r3, #255	; 0xff
    a9c6:	d105      	bne.n	a9d4 <send_desired+0xd88>
    a9c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d0:	2200      	movs	r2, #0
    a9d2:	701a      	strb	r2, [r3, #0]
    a9d4:	f242 0339 	movw	r3, #8249	; 0x2039
    a9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9dc:	781b      	ldrb	r3, [r3, #0]
    a9de:	b2db      	uxtb	r3, r3
    a9e0:	f003 0310 	and.w	r3, r3, #16
    a9e4:	2b00      	cmp	r3, #0
    a9e6:	d15a      	bne.n	aa9e <send_desired+0xe52>
    a9e8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    a9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f0:	781b      	ldrb	r3, [r3, #0]
    a9f2:	b2db      	uxtb	r3, r3
    a9f4:	461a      	mov	r2, r3
    a9f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9fe:	5c9a      	ldrb	r2, [r3, r2]
    aa00:	f24c 431b 	movw	r3, #50203	; 0xc41b
    aa04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa08:	701a      	strb	r2, [r3, #0]
    aa0a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    aa0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa12:	2200      	movs	r2, #0
    aa14:	701a      	strb	r2, [r3, #0]
    aa16:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aa1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa1e:	781b      	ldrb	r3, [r3, #0]
    aa20:	b2db      	uxtb	r3, r3
    aa22:	3301      	adds	r3, #1
    aa24:	b2da      	uxtb	r2, r3
    aa26:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aa2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa2e:	701a      	strb	r2, [r3, #0]
    aa30:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aa34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa38:	781b      	ldrb	r3, [r3, #0]
    aa3a:	b2db      	uxtb	r3, r3
    aa3c:	2bff      	cmp	r3, #255	; 0xff
    aa3e:	d105      	bne.n	aa4c <send_desired+0xe00>
    aa40:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aa44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa48:	2200      	movs	r2, #0
    aa4a:	701a      	strb	r2, [r3, #0]
    aa4c:	f242 0338 	movw	r3, #8248	; 0x2038
    aa50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa54:	f242 0238 	movw	r2, #8248	; 0x2038
    aa58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aa5c:	7812      	ldrb	r2, [r2, #0]
    aa5e:	b2d2      	uxtb	r2, r2
    aa60:	f042 0201 	orr.w	r2, r2, #1
    aa64:	b2d2      	uxtb	r2, r2
    aa66:	701a      	strb	r2, [r3, #0]
    aa68:	f242 0339 	movw	r3, #8249	; 0x2039
    aa6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa70:	f242 0239 	movw	r2, #8249	; 0x2039
    aa74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aa78:	7812      	ldrb	r2, [r2, #0]
    aa7a:	b2d2      	uxtb	r2, r2
    aa7c:	f042 0210 	orr.w	r2, r2, #16
    aa80:	b2d2      	uxtb	r2, r2
    aa82:	701a      	strb	r2, [r3, #0]
    aa84:	e00b      	b.n	aa9e <send_desired+0xe52>
    aa86:	f24c 3318 	movw	r3, #49944	; 0xc318
    aa8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa8e:	781b      	ldrb	r3, [r3, #0]
    aa90:	3301      	adds	r3, #1
    aa92:	b2da      	uxtb	r2, r3
    aa94:	f24c 3318 	movw	r3, #49944	; 0xc318
    aa98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa9c:	701a      	strb	r2, [r3, #0]
}
    aa9e:	46bd      	mov	sp, r7
    aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaa4:	4770      	bx	lr
    aaa6:	bf00      	nop
    aaa8:	20000577 	.word	0x20000577

0000aaac <send_bat>:
void send_bat(void){  //2000ms
    aaac:	b480      	push	{r7}
    aaae:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    aab0:	f24c 3311 	movw	r3, #49937	; 0xc311
    aab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab8:	781a      	ldrb	r2, [r3, #0]
    aaba:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    aabe:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    aac2:	fba3 1302 	umull	r1, r3, r3, r2
    aac6:	0919      	lsrs	r1, r3, #4
    aac8:	460b      	mov	r3, r1
    aaca:	009b      	lsls	r3, r3, #2
    aacc:	440b      	add	r3, r1
    aace:	009b      	lsls	r3, r3, #2
    aad0:	1ad3      	subs	r3, r2, r3
    aad2:	b2db      	uxtb	r3, r3
    aad4:	2b08      	cmp	r3, #8
    aad6:	f040 839a 	bne.w	b20e <send_bat+0x762>
    aada:	f24c 3319 	movw	r3, #49945	; 0xc319
    aade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae2:	781a      	ldrb	r2, [r3, #0]
    aae4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaec:	781b      	ldrb	r3, [r3, #0]
    aaee:	b2db      	uxtb	r3, r3
    aaf0:	429a      	cmp	r2, r3
    aaf2:	d313      	bcc.n	ab1c <send_bat+0x70>
    aaf4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aaf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aafc:	781b      	ldrb	r3, [r3, #0]
    aafe:	b2db      	uxtb	r3, r3
    ab00:	461a      	mov	r2, r3
    ab02:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab0a:	781b      	ldrb	r3, [r3, #0]
    ab0c:	1ad3      	subs	r3, r2, r3
    ab0e:	33ff      	adds	r3, #255	; 0xff
    ab10:	2b0c      	cmp	r3, #12
    ab12:	bfd4      	ite	le
    ab14:	2300      	movle	r3, #0
    ab16:	2301      	movgt	r3, #1
    ab18:	b2db      	uxtb	r3, r3
    ab1a:	e011      	b.n	ab40 <send_bat+0x94>
    ab1c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ab20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab24:	781b      	ldrb	r3, [r3, #0]
    ab26:	b2db      	uxtb	r3, r3
    ab28:	461a      	mov	r2, r3
    ab2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab32:	781b      	ldrb	r3, [r3, #0]
    ab34:	1ad3      	subs	r3, r2, r3
    ab36:	2b0c      	cmp	r3, #12
    ab38:	bfd4      	ite	le
    ab3a:	2300      	movle	r3, #0
    ab3c:	2301      	movgt	r3, #1
    ab3e:	b2db      	uxtb	r3, r3
    ab40:	2b00      	cmp	r3, #0
    ab42:	f000 8358 	beq.w	b1f6 <send_bat+0x74a>
    ab46:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab4e:	781b      	ldrb	r3, [r3, #0]
    ab50:	461a      	mov	r2, r3
    ab52:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ab56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab5a:	2105      	movs	r1, #5
    ab5c:	5499      	strb	r1, [r3, r2]
    ab5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab66:	781b      	ldrb	r3, [r3, #0]
    ab68:	3301      	adds	r3, #1
    ab6a:	b2da      	uxtb	r2, r3
    ab6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab74:	701a      	strb	r2, [r3, #0]
    ab76:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab7e:	781b      	ldrb	r3, [r3, #0]
    ab80:	2bff      	cmp	r3, #255	; 0xff
    ab82:	d105      	bne.n	ab90 <send_bat+0xe4>
    ab84:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab8c:	2200      	movs	r2, #0
    ab8e:	701a      	strb	r2, [r3, #0]
    ab90:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab98:	781b      	ldrb	r3, [r3, #0]
    ab9a:	461a      	mov	r2, r3
    ab9c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba4:	210c      	movs	r1, #12
    aba6:	5499      	strb	r1, [r3, r2]
    aba8:	f24c 3319 	movw	r3, #49945	; 0xc319
    abac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abb0:	781b      	ldrb	r3, [r3, #0]
    abb2:	3301      	adds	r3, #1
    abb4:	b2da      	uxtb	r2, r3
    abb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    abba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abbe:	701a      	strb	r2, [r3, #0]
    abc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    abc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc8:	781b      	ldrb	r3, [r3, #0]
    abca:	2bff      	cmp	r3, #255	; 0xff
    abcc:	d105      	bne.n	abda <send_bat+0x12e>
    abce:	f24c 3319 	movw	r3, #49945	; 0xc319
    abd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd6:	2200      	movs	r2, #0
    abd8:	701a      	strb	r2, [r3, #0]
    abda:	f24c 431d 	movw	r3, #50205	; 0xc41d
    abde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe2:	220c      	movs	r2, #12
    abe4:	701a      	strb	r2, [r3, #0]
    abe6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    abea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abee:	220c      	movs	r2, #12
    abf0:	701a      	strb	r2, [r3, #0]
    abf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    abf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfa:	781b      	ldrb	r3, [r3, #0]
    abfc:	461a      	mov	r2, r3
    abfe:	f24c 3302 	movw	r3, #49922	; 0xc302
    ac02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac06:	7819      	ldrb	r1, [r3, #0]
    ac08:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ac0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac10:	5499      	strb	r1, [r3, r2]
    ac12:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1a:	781a      	ldrb	r2, [r3, #0]
    ac1c:	f24c 3302 	movw	r3, #49922	; 0xc302
    ac20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac24:	781b      	ldrb	r3, [r3, #0]
    ac26:	4413      	add	r3, r2
    ac28:	b2da      	uxtb	r2, r3
    ac2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac32:	701a      	strb	r2, [r3, #0]
    ac34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ac38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3c:	781a      	ldrb	r2, [r3, #0]
    ac3e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac46:	781b      	ldrb	r3, [r3, #0]
    ac48:	4413      	add	r3, r2
    ac4a:	b2da      	uxtb	r2, r3
    ac4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ac50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac54:	701a      	strb	r2, [r3, #0]
    ac56:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5e:	781b      	ldrb	r3, [r3, #0]
    ac60:	3301      	adds	r3, #1
    ac62:	b2da      	uxtb	r2, r3
    ac64:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6c:	701a      	strb	r2, [r3, #0]
    ac6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac76:	781b      	ldrb	r3, [r3, #0]
    ac78:	2bff      	cmp	r3, #255	; 0xff
    ac7a:	d105      	bne.n	ac88 <send_bat+0x1dc>
    ac7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac84:	2200      	movs	r2, #0
    ac86:	701a      	strb	r2, [r3, #0]
    ac88:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac90:	781b      	ldrb	r3, [r3, #0]
    ac92:	461a      	mov	r2, r3
    ac94:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ac98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9c:	7819      	ldrb	r1, [r3, #0]
    ac9e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca6:	5499      	strb	r1, [r3, r2]
    aca8:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    acac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb0:	781a      	ldrb	r2, [r3, #0]
    acb2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    acb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acba:	781b      	ldrb	r3, [r3, #0]
    acbc:	4413      	add	r3, r2
    acbe:	b2da      	uxtb	r2, r3
    acc0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    acc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc8:	701a      	strb	r2, [r3, #0]
    acca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    acce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd2:	781a      	ldrb	r2, [r3, #0]
    acd4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    acd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acdc:	781b      	ldrb	r3, [r3, #0]
    acde:	4413      	add	r3, r2
    ace0:	b2da      	uxtb	r2, r3
    ace2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ace6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acea:	701a      	strb	r2, [r3, #0]
    acec:	f24c 3319 	movw	r3, #49945	; 0xc319
    acf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf4:	781b      	ldrb	r3, [r3, #0]
    acf6:	3301      	adds	r3, #1
    acf8:	b2da      	uxtb	r2, r3
    acfa:	f24c 3319 	movw	r3, #49945	; 0xc319
    acfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad02:	701a      	strb	r2, [r3, #0]
    ad04:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0c:	781b      	ldrb	r3, [r3, #0]
    ad0e:	2bff      	cmp	r3, #255	; 0xff
    ad10:	d105      	bne.n	ad1e <send_bat+0x272>
    ad12:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1a:	2200      	movs	r2, #0
    ad1c:	701a      	strb	r2, [r3, #0]
    ad1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad26:	781b      	ldrb	r3, [r3, #0]
    ad28:	461a      	mov	r2, r3
    ad2a:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ad2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad32:	7859      	ldrb	r1, [r3, #1]
    ad34:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ad38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3c:	5499      	strb	r1, [r3, r2]
    ad3e:	4bd5      	ldr	r3, [pc, #852]	; (b094 <send_bat+0x5e8>)
    ad40:	781a      	ldrb	r2, [r3, #0]
    ad42:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4a:	781b      	ldrb	r3, [r3, #0]
    ad4c:	4413      	add	r3, r2
    ad4e:	b2da      	uxtb	r2, r3
    ad50:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad58:	701a      	strb	r2, [r3, #0]
    ad5a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad62:	781a      	ldrb	r2, [r3, #0]
    ad64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6c:	781b      	ldrb	r3, [r3, #0]
    ad6e:	4413      	add	r3, r2
    ad70:	b2da      	uxtb	r2, r3
    ad72:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad7a:	701a      	strb	r2, [r3, #0]
    ad7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad84:	781b      	ldrb	r3, [r3, #0]
    ad86:	3301      	adds	r3, #1
    ad88:	b2da      	uxtb	r2, r3
    ad8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad92:	701a      	strb	r2, [r3, #0]
    ad94:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad9c:	781b      	ldrb	r3, [r3, #0]
    ad9e:	2bff      	cmp	r3, #255	; 0xff
    ada0:	d105      	bne.n	adae <send_bat+0x302>
    ada2:	f24c 3319 	movw	r3, #49945	; 0xc319
    ada6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adaa:	2200      	movs	r2, #0
    adac:	701a      	strb	r2, [r3, #0]
    adae:	f24c 3319 	movw	r3, #49945	; 0xc319
    adb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb6:	781b      	ldrb	r3, [r3, #0]
    adb8:	461a      	mov	r2, r3
    adba:	f24c 3305 	movw	r3, #49925	; 0xc305
    adbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc2:	7819      	ldrb	r1, [r3, #0]
    adc4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    adc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adcc:	5499      	strb	r1, [r3, r2]
    adce:	f24c 3305 	movw	r3, #49925	; 0xc305
    add2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add6:	781a      	ldrb	r2, [r3, #0]
    add8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    addc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade0:	781b      	ldrb	r3, [r3, #0]
    ade2:	4413      	add	r3, r2
    ade4:	b2da      	uxtb	r2, r3
    ade6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    adea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adee:	701a      	strb	r2, [r3, #0]
    adf0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    adf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf8:	781a      	ldrb	r2, [r3, #0]
    adfa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    adfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae02:	781b      	ldrb	r3, [r3, #0]
    ae04:	4413      	add	r3, r2
    ae06:	b2da      	uxtb	r2, r3
    ae08:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae10:	701a      	strb	r2, [r3, #0]
    ae12:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1a:	781b      	ldrb	r3, [r3, #0]
    ae1c:	3301      	adds	r3, #1
    ae1e:	b2da      	uxtb	r2, r3
    ae20:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae28:	701a      	strb	r2, [r3, #0]
    ae2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae32:	781b      	ldrb	r3, [r3, #0]
    ae34:	2bff      	cmp	r3, #255	; 0xff
    ae36:	d105      	bne.n	ae44 <send_bat+0x398>
    ae38:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae40:	2200      	movs	r2, #0
    ae42:	701a      	strb	r2, [r3, #0]
    ae44:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4c:	781b      	ldrb	r3, [r3, #0]
    ae4e:	461a      	mov	r2, r3
    ae50:	f24c 6386 	movw	r3, #50822	; 0xc686
    ae54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae58:	7819      	ldrb	r1, [r3, #0]
    ae5a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ae5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae62:	5499      	strb	r1, [r3, r2]
    ae64:	f24c 6386 	movw	r3, #50822	; 0xc686
    ae68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae6c:	781a      	ldrb	r2, [r3, #0]
    ae6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae76:	781b      	ldrb	r3, [r3, #0]
    ae78:	4413      	add	r3, r2
    ae7a:	b2da      	uxtb	r2, r3
    ae7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae84:	701a      	strb	r2, [r3, #0]
    ae86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae8e:	781a      	ldrb	r2, [r3, #0]
    ae90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae98:	781b      	ldrb	r3, [r3, #0]
    ae9a:	4413      	add	r3, r2
    ae9c:	b2da      	uxtb	r2, r3
    ae9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea6:	701a      	strb	r2, [r3, #0]
    aea8:	f24c 3319 	movw	r3, #49945	; 0xc319
    aeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb0:	781b      	ldrb	r3, [r3, #0]
    aeb2:	3301      	adds	r3, #1
    aeb4:	b2da      	uxtb	r2, r3
    aeb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    aeba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aebe:	701a      	strb	r2, [r3, #0]
    aec0:	f24c 3319 	movw	r3, #49945	; 0xc319
    aec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec8:	781b      	ldrb	r3, [r3, #0]
    aeca:	2bff      	cmp	r3, #255	; 0xff
    aecc:	d105      	bne.n	aeda <send_bat+0x42e>
    aece:	f24c 3319 	movw	r3, #49945	; 0xc319
    aed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed6:	2200      	movs	r2, #0
    aed8:	701a      	strb	r2, [r3, #0]
    aeda:	f24c 3319 	movw	r3, #49945	; 0xc319
    aede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee2:	781b      	ldrb	r3, [r3, #0]
    aee4:	461a      	mov	r2, r3
    aee6:	f24c 6386 	movw	r3, #50822	; 0xc686
    aeea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeee:	7859      	ldrb	r1, [r3, #1]
    aef0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef8:	5499      	strb	r1, [r3, r2]
    aefa:	4b67      	ldr	r3, [pc, #412]	; (b098 <send_bat+0x5ec>)
    aefc:	781a      	ldrb	r2, [r3, #0]
    aefe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af06:	781b      	ldrb	r3, [r3, #0]
    af08:	4413      	add	r3, r2
    af0a:	b2da      	uxtb	r2, r3
    af0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af14:	701a      	strb	r2, [r3, #0]
    af16:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1e:	781a      	ldrb	r2, [r3, #0]
    af20:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af28:	781b      	ldrb	r3, [r3, #0]
    af2a:	4413      	add	r3, r2
    af2c:	b2da      	uxtb	r2, r3
    af2e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af36:	701a      	strb	r2, [r3, #0]
    af38:	f24c 3319 	movw	r3, #49945	; 0xc319
    af3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af40:	781b      	ldrb	r3, [r3, #0]
    af42:	3301      	adds	r3, #1
    af44:	b2da      	uxtb	r2, r3
    af46:	f24c 3319 	movw	r3, #49945	; 0xc319
    af4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4e:	701a      	strb	r2, [r3, #0]
    af50:	f24c 3319 	movw	r3, #49945	; 0xc319
    af54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af58:	781b      	ldrb	r3, [r3, #0]
    af5a:	2bff      	cmp	r3, #255	; 0xff
    af5c:	d105      	bne.n	af6a <send_bat+0x4be>
    af5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    af62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af66:	2200      	movs	r2, #0
    af68:	701a      	strb	r2, [r3, #0]
    af6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    af6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af72:	781b      	ldrb	r3, [r3, #0]
    af74:	461a      	mov	r2, r3
    af76:	f24c 6384 	movw	r3, #50820	; 0xc684
    af7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af7e:	7819      	ldrb	r1, [r3, #0]
    af80:	f24c 331c 	movw	r3, #49948	; 0xc31c
    af84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af88:	5499      	strb	r1, [r3, r2]
    af8a:	f24c 6384 	movw	r3, #50820	; 0xc684
    af8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af92:	781a      	ldrb	r2, [r3, #0]
    af94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af9c:	781b      	ldrb	r3, [r3, #0]
    af9e:	4413      	add	r3, r2
    afa0:	b2da      	uxtb	r2, r3
    afa2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    afa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afaa:	701a      	strb	r2, [r3, #0]
    afac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    afb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb4:	781a      	ldrb	r2, [r3, #0]
    afb6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    afba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbe:	781b      	ldrb	r3, [r3, #0]
    afc0:	4413      	add	r3, r2
    afc2:	b2da      	uxtb	r2, r3
    afc4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    afc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afcc:	701a      	strb	r2, [r3, #0]
    afce:	f24c 3319 	movw	r3, #49945	; 0xc319
    afd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd6:	781b      	ldrb	r3, [r3, #0]
    afd8:	3301      	adds	r3, #1
    afda:	b2da      	uxtb	r2, r3
    afdc:	f24c 3319 	movw	r3, #49945	; 0xc319
    afe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe4:	701a      	strb	r2, [r3, #0]
    afe6:	f24c 3319 	movw	r3, #49945	; 0xc319
    afea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afee:	781b      	ldrb	r3, [r3, #0]
    aff0:	2bff      	cmp	r3, #255	; 0xff
    aff2:	d105      	bne.n	b000 <send_bat+0x554>
    aff4:	f24c 3319 	movw	r3, #49945	; 0xc319
    aff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    affc:	2200      	movs	r2, #0
    affe:	701a      	strb	r2, [r3, #0]
    b000:	f24c 3319 	movw	r3, #49945	; 0xc319
    b004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b008:	781b      	ldrb	r3, [r3, #0]
    b00a:	461a      	mov	r2, r3
    b00c:	f24c 6384 	movw	r3, #50820	; 0xc684
    b010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b014:	7859      	ldrb	r1, [r3, #1]
    b016:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01e:	5499      	strb	r1, [r3, r2]
    b020:	4b1e      	ldr	r3, [pc, #120]	; (b09c <send_bat+0x5f0>)
    b022:	781a      	ldrb	r2, [r3, #0]
    b024:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b02c:	781b      	ldrb	r3, [r3, #0]
    b02e:	4413      	add	r3, r2
    b030:	b2da      	uxtb	r2, r3
    b032:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b03a:	701a      	strb	r2, [r3, #0]
    b03c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b044:	781a      	ldrb	r2, [r3, #0]
    b046:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04e:	781b      	ldrb	r3, [r3, #0]
    b050:	4413      	add	r3, r2
    b052:	b2da      	uxtb	r2, r3
    b054:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05c:	701a      	strb	r2, [r3, #0]
    b05e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b066:	781b      	ldrb	r3, [r3, #0]
    b068:	3301      	adds	r3, #1
    b06a:	b2da      	uxtb	r2, r3
    b06c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b074:	701a      	strb	r2, [r3, #0]
    b076:	f24c 3319 	movw	r3, #49945	; 0xc319
    b07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b07e:	781b      	ldrb	r3, [r3, #0]
    b080:	2bff      	cmp	r3, #255	; 0xff
    b082:	d10d      	bne.n	b0a0 <send_bat+0x5f4>
    b084:	f24c 3319 	movw	r3, #49945	; 0xc319
    b088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b08c:	2200      	movs	r2, #0
    b08e:	701a      	strb	r2, [r3, #0]
    b090:	e006      	b.n	b0a0 <send_bat+0x5f4>
    b092:	bf00      	nop
    b094:	2004c8fd 	.word	0x2004c8fd
    b098:	2004c687 	.word	0x2004c687
    b09c:	2004c685 	.word	0x2004c685
    b0a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a8:	781b      	ldrb	r3, [r3, #0]
    b0aa:	461a      	mov	r2, r3
    b0ac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b4:	7819      	ldrb	r1, [r3, #0]
    b0b6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0be:	5499      	strb	r1, [r3, r2]
    b0c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c8:	781b      	ldrb	r3, [r3, #0]
    b0ca:	3301      	adds	r3, #1
    b0cc:	b2da      	uxtb	r2, r3
    b0ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d6:	701a      	strb	r2, [r3, #0]
    b0d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e0:	781b      	ldrb	r3, [r3, #0]
    b0e2:	2bff      	cmp	r3, #255	; 0xff
    b0e4:	d105      	bne.n	b0f2 <send_bat+0x646>
    b0e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ee:	2200      	movs	r2, #0
    b0f0:	701a      	strb	r2, [r3, #0]
    b0f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0fa:	781b      	ldrb	r3, [r3, #0]
    b0fc:	461a      	mov	r2, r3
    b0fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b106:	7819      	ldrb	r1, [r3, #0]
    b108:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b110:	5499      	strb	r1, [r3, r2]
    b112:	f24c 3319 	movw	r3, #49945	; 0xc319
    b116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11a:	781b      	ldrb	r3, [r3, #0]
    b11c:	3301      	adds	r3, #1
    b11e:	b2da      	uxtb	r2, r3
    b120:	f24c 3319 	movw	r3, #49945	; 0xc319
    b124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b128:	701a      	strb	r2, [r3, #0]
    b12a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b132:	781b      	ldrb	r3, [r3, #0]
    b134:	2bff      	cmp	r3, #255	; 0xff
    b136:	d105      	bne.n	b144 <send_bat+0x698>
    b138:	f24c 3319 	movw	r3, #49945	; 0xc319
    b13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b140:	2200      	movs	r2, #0
    b142:	701a      	strb	r2, [r3, #0]
    b144:	f242 0339 	movw	r3, #8249	; 0x2039
    b148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b14c:	781b      	ldrb	r3, [r3, #0]
    b14e:	b2db      	uxtb	r3, r3
    b150:	f003 0310 	and.w	r3, r3, #16
    b154:	2b00      	cmp	r3, #0
    b156:	d15a      	bne.n	b20e <send_bat+0x762>
    b158:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b160:	781b      	ldrb	r3, [r3, #0]
    b162:	b2db      	uxtb	r3, r3
    b164:	461a      	mov	r2, r3
    b166:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b16e:	5c9a      	ldrb	r2, [r3, r2]
    b170:	f24c 431b 	movw	r3, #50203	; 0xc41b
    b174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b178:	701a      	strb	r2, [r3, #0]
    b17a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    b17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b182:	2200      	movs	r2, #0
    b184:	701a      	strb	r2, [r3, #0]
    b186:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b18e:	781b      	ldrb	r3, [r3, #0]
    b190:	b2db      	uxtb	r3, r3
    b192:	3301      	adds	r3, #1
    b194:	b2da      	uxtb	r2, r3
    b196:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b19e:	701a      	strb	r2, [r3, #0]
    b1a0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a8:	781b      	ldrb	r3, [r3, #0]
    b1aa:	b2db      	uxtb	r3, r3
    b1ac:	2bff      	cmp	r3, #255	; 0xff
    b1ae:	d105      	bne.n	b1bc <send_bat+0x710>
    b1b0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b1b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b8:	2200      	movs	r2, #0
    b1ba:	701a      	strb	r2, [r3, #0]
    b1bc:	f242 0338 	movw	r3, #8248	; 0x2038
    b1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c4:	f242 0238 	movw	r2, #8248	; 0x2038
    b1c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b1cc:	7812      	ldrb	r2, [r2, #0]
    b1ce:	b2d2      	uxtb	r2, r2
    b1d0:	f042 0201 	orr.w	r2, r2, #1
    b1d4:	b2d2      	uxtb	r2, r2
    b1d6:	701a      	strb	r2, [r3, #0]
    b1d8:	f242 0339 	movw	r3, #8249	; 0x2039
    b1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e0:	f242 0239 	movw	r2, #8249	; 0x2039
    b1e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b1e8:	7812      	ldrb	r2, [r2, #0]
    b1ea:	b2d2      	uxtb	r2, r2
    b1ec:	f042 0210 	orr.w	r2, r2, #16
    b1f0:	b2d2      	uxtb	r2, r2
    b1f2:	701a      	strb	r2, [r3, #0]
    b1f4:	e00b      	b.n	b20e <send_bat+0x762>
    b1f6:	f24c 3318 	movw	r3, #49944	; 0xc318
    b1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1fe:	781b      	ldrb	r3, [r3, #0]
    b200:	3301      	adds	r3, #1
    b202:	b2da      	uxtb	r2, r3
    b204:	f24c 3318 	movw	r3, #49944	; 0xc318
    b208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b20c:	701a      	strb	r2, [r3, #0]
}
    b20e:	46bd      	mov	sp, r7
    b210:	f85d 7b04 	ldr.w	r7, [sp], #4
    b214:	4770      	bx	lr
    b216:	bf00      	nop

0000b218 <send_climb>:
void send_climb(void){  //2000ms
    b218:	b480      	push	{r7}
    b21a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b21c:	f24c 3311 	movw	r3, #49937	; 0xc311
    b220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b224:	781a      	ldrb	r2, [r3, #0]
    b226:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b22a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b22e:	fba3 1302 	umull	r1, r3, r3, r2
    b232:	0919      	lsrs	r1, r3, #4
    b234:	460b      	mov	r3, r1
    b236:	009b      	lsls	r3, r3, #2
    b238:	440b      	add	r3, r1
    b23a:	009b      	lsls	r3, r3, #2
    b23c:	1ad3      	subs	r3, r2, r3
    b23e:	b2db      	uxtb	r3, r3
    b240:	2b12      	cmp	r3, #18
    b242:	f040 8554 	bne.w	bcee <send_climb+0xad6>
    b246:	f24c 3319 	movw	r3, #49945	; 0xc319
    b24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b24e:	781a      	ldrb	r2, [r3, #0]
    b250:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b258:	781b      	ldrb	r3, [r3, #0]
    b25a:	b2db      	uxtb	r3, r3
    b25c:	429a      	cmp	r2, r3
    b25e:	d313      	bcc.n	b288 <send_climb+0x70>
    b260:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b268:	781b      	ldrb	r3, [r3, #0]
    b26a:	b2db      	uxtb	r3, r3
    b26c:	461a      	mov	r2, r3
    b26e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b276:	781b      	ldrb	r3, [r3, #0]
    b278:	1ad3      	subs	r3, r2, r3
    b27a:	33ff      	adds	r3, #255	; 0xff
    b27c:	2b12      	cmp	r3, #18
    b27e:	bfd4      	ite	le
    b280:	2300      	movle	r3, #0
    b282:	2301      	movgt	r3, #1
    b284:	b2db      	uxtb	r3, r3
    b286:	e011      	b.n	b2ac <send_climb+0x94>
    b288:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b290:	781b      	ldrb	r3, [r3, #0]
    b292:	b2db      	uxtb	r3, r3
    b294:	461a      	mov	r2, r3
    b296:	f24c 3319 	movw	r3, #49945	; 0xc319
    b29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29e:	781b      	ldrb	r3, [r3, #0]
    b2a0:	1ad3      	subs	r3, r2, r3
    b2a2:	2b12      	cmp	r3, #18
    b2a4:	bfd4      	ite	le
    b2a6:	2300      	movle	r3, #0
    b2a8:	2301      	movgt	r3, #1
    b2aa:	b2db      	uxtb	r3, r3
    b2ac:	2b00      	cmp	r3, #0
    b2ae:	f000 8512 	beq.w	bcd6 <send_climb+0xabe>
    b2b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ba:	781b      	ldrb	r3, [r3, #0]
    b2bc:	461a      	mov	r2, r3
    b2be:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c6:	2105      	movs	r1, #5
    b2c8:	5499      	strb	r1, [r3, r2]
    b2ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d2:	781b      	ldrb	r3, [r3, #0]
    b2d4:	3301      	adds	r3, #1
    b2d6:	b2da      	uxtb	r2, r3
    b2d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e0:	701a      	strb	r2, [r3, #0]
    b2e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ea:	781b      	ldrb	r3, [r3, #0]
    b2ec:	2bff      	cmp	r3, #255	; 0xff
    b2ee:	d105      	bne.n	b2fc <send_climb+0xe4>
    b2f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f8:	2200      	movs	r2, #0
    b2fa:	701a      	strb	r2, [r3, #0]
    b2fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    b300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b304:	781b      	ldrb	r3, [r3, #0]
    b306:	461a      	mov	r2, r3
    b308:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b310:	210e      	movs	r1, #14
    b312:	5499      	strb	r1, [r3, r2]
    b314:	f24c 3319 	movw	r3, #49945	; 0xc319
    b318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b31c:	781b      	ldrb	r3, [r3, #0]
    b31e:	3301      	adds	r3, #1
    b320:	b2da      	uxtb	r2, r3
    b322:	f24c 3319 	movw	r3, #49945	; 0xc319
    b326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b32a:	701a      	strb	r2, [r3, #0]
    b32c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b334:	781b      	ldrb	r3, [r3, #0]
    b336:	2bff      	cmp	r3, #255	; 0xff
    b338:	d105      	bne.n	b346 <send_climb+0x12e>
    b33a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b342:	2200      	movs	r2, #0
    b344:	701a      	strb	r2, [r3, #0]
    b346:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b34e:	220e      	movs	r2, #14
    b350:	701a      	strb	r2, [r3, #0]
    b352:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35a:	220e      	movs	r2, #14
    b35c:	701a      	strb	r2, [r3, #0]
    b35e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b366:	781b      	ldrb	r3, [r3, #0]
    b368:	461a      	mov	r2, r3
    b36a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b372:	7819      	ldrb	r1, [r3, #0]
    b374:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b37c:	5499      	strb	r1, [r3, r2]
    b37e:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b386:	781a      	ldrb	r2, [r3, #0]
    b388:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b390:	781b      	ldrb	r3, [r3, #0]
    b392:	4413      	add	r3, r2
    b394:	b2da      	uxtb	r2, r3
    b396:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39e:	701a      	strb	r2, [r3, #0]
    b3a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a8:	781a      	ldrb	r2, [r3, #0]
    b3aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b2:	781b      	ldrb	r3, [r3, #0]
    b3b4:	4413      	add	r3, r2
    b3b6:	b2da      	uxtb	r2, r3
    b3b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c0:	701a      	strb	r2, [r3, #0]
    b3c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ca:	781b      	ldrb	r3, [r3, #0]
    b3cc:	3301      	adds	r3, #1
    b3ce:	b2da      	uxtb	r2, r3
    b3d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d8:	701a      	strb	r2, [r3, #0]
    b3da:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e2:	781b      	ldrb	r3, [r3, #0]
    b3e4:	2bff      	cmp	r3, #255	; 0xff
    b3e6:	d105      	bne.n	b3f4 <send_climb+0x1dc>
    b3e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f0:	2200      	movs	r2, #0
    b3f2:	701a      	strb	r2, [r3, #0]
    b3f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3fc:	781b      	ldrb	r3, [r3, #0]
    b3fe:	461a      	mov	r2, r3
    b400:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b408:	7859      	ldrb	r1, [r3, #1]
    b40a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b412:	5499      	strb	r1, [r3, r2]
    b414:	4bd3      	ldr	r3, [pc, #844]	; (b764 <send_climb+0x54c>)
    b416:	781a      	ldrb	r2, [r3, #0]
    b418:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b420:	781b      	ldrb	r3, [r3, #0]
    b422:	4413      	add	r3, r2
    b424:	b2da      	uxtb	r2, r3
    b426:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b42e:	701a      	strb	r2, [r3, #0]
    b430:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b438:	781a      	ldrb	r2, [r3, #0]
    b43a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b442:	781b      	ldrb	r3, [r3, #0]
    b444:	4413      	add	r3, r2
    b446:	b2da      	uxtb	r2, r3
    b448:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b450:	701a      	strb	r2, [r3, #0]
    b452:	f24c 3319 	movw	r3, #49945	; 0xc319
    b456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b45a:	781b      	ldrb	r3, [r3, #0]
    b45c:	3301      	adds	r3, #1
    b45e:	b2da      	uxtb	r2, r3
    b460:	f24c 3319 	movw	r3, #49945	; 0xc319
    b464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b468:	701a      	strb	r2, [r3, #0]
    b46a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b472:	781b      	ldrb	r3, [r3, #0]
    b474:	2bff      	cmp	r3, #255	; 0xff
    b476:	d105      	bne.n	b484 <send_climb+0x26c>
    b478:	f24c 3319 	movw	r3, #49945	; 0xc319
    b47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b480:	2200      	movs	r2, #0
    b482:	701a      	strb	r2, [r3, #0]
    b484:	f24c 3319 	movw	r3, #49945	; 0xc319
    b488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b48c:	781b      	ldrb	r3, [r3, #0]
    b48e:	461a      	mov	r2, r3
    b490:	f24c 6360 	movw	r3, #50784	; 0xc660
    b494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b498:	7819      	ldrb	r1, [r3, #0]
    b49a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a2:	5499      	strb	r1, [r3, r2]
    b4a4:	f24c 6360 	movw	r3, #50784	; 0xc660
    b4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ac:	781a      	ldrb	r2, [r3, #0]
    b4ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b6:	781b      	ldrb	r3, [r3, #0]
    b4b8:	4413      	add	r3, r2
    b4ba:	b2da      	uxtb	r2, r3
    b4bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c4:	701a      	strb	r2, [r3, #0]
    b4c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ce:	781a      	ldrb	r2, [r3, #0]
    b4d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d8:	781b      	ldrb	r3, [r3, #0]
    b4da:	4413      	add	r3, r2
    b4dc:	b2da      	uxtb	r2, r3
    b4de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e6:	701a      	strb	r2, [r3, #0]
    b4e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f0:	781b      	ldrb	r3, [r3, #0]
    b4f2:	3301      	adds	r3, #1
    b4f4:	b2da      	uxtb	r2, r3
    b4f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fe:	701a      	strb	r2, [r3, #0]
    b500:	f24c 3319 	movw	r3, #49945	; 0xc319
    b504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b508:	781b      	ldrb	r3, [r3, #0]
    b50a:	2bff      	cmp	r3, #255	; 0xff
    b50c:	d105      	bne.n	b51a <send_climb+0x302>
    b50e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b516:	2200      	movs	r2, #0
    b518:	701a      	strb	r2, [r3, #0]
    b51a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b522:	781b      	ldrb	r3, [r3, #0]
    b524:	461a      	mov	r2, r3
    b526:	f24c 6360 	movw	r3, #50784	; 0xc660
    b52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52e:	7859      	ldrb	r1, [r3, #1]
    b530:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b538:	5499      	strb	r1, [r3, r2]
    b53a:	4b8b      	ldr	r3, [pc, #556]	; (b768 <send_climb+0x550>)
    b53c:	781a      	ldrb	r2, [r3, #0]
    b53e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b546:	781b      	ldrb	r3, [r3, #0]
    b548:	4413      	add	r3, r2
    b54a:	b2da      	uxtb	r2, r3
    b54c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b554:	701a      	strb	r2, [r3, #0]
    b556:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55e:	781a      	ldrb	r2, [r3, #0]
    b560:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b568:	781b      	ldrb	r3, [r3, #0]
    b56a:	4413      	add	r3, r2
    b56c:	b2da      	uxtb	r2, r3
    b56e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b576:	701a      	strb	r2, [r3, #0]
    b578:	f24c 3319 	movw	r3, #49945	; 0xc319
    b57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b580:	781b      	ldrb	r3, [r3, #0]
    b582:	3301      	adds	r3, #1
    b584:	b2da      	uxtb	r2, r3
    b586:	f24c 3319 	movw	r3, #49945	; 0xc319
    b58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b58e:	701a      	strb	r2, [r3, #0]
    b590:	f24c 3319 	movw	r3, #49945	; 0xc319
    b594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b598:	781b      	ldrb	r3, [r3, #0]
    b59a:	2bff      	cmp	r3, #255	; 0xff
    b59c:	d105      	bne.n	b5aa <send_climb+0x392>
    b59e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a6:	2200      	movs	r2, #0
    b5a8:	701a      	strb	r2, [r3, #0]
    b5aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b2:	781b      	ldrb	r3, [r3, #0]
    b5b4:	461a      	mov	r2, r3
    b5b6:	f24c 6360 	movw	r3, #50784	; 0xc660
    b5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5be:	7899      	ldrb	r1, [r3, #2]
    b5c0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c8:	5499      	strb	r1, [r3, r2]
    b5ca:	4b68      	ldr	r3, [pc, #416]	; (b76c <send_climb+0x554>)
    b5cc:	781a      	ldrb	r2, [r3, #0]
    b5ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d6:	781b      	ldrb	r3, [r3, #0]
    b5d8:	4413      	add	r3, r2
    b5da:	b2da      	uxtb	r2, r3
    b5dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e4:	701a      	strb	r2, [r3, #0]
    b5e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	781a      	ldrb	r2, [r3, #0]
    b5f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f8:	781b      	ldrb	r3, [r3, #0]
    b5fa:	4413      	add	r3, r2
    b5fc:	b2da      	uxtb	r2, r3
    b5fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b606:	701a      	strb	r2, [r3, #0]
    b608:	f24c 3319 	movw	r3, #49945	; 0xc319
    b60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b610:	781b      	ldrb	r3, [r3, #0]
    b612:	3301      	adds	r3, #1
    b614:	b2da      	uxtb	r2, r3
    b616:	f24c 3319 	movw	r3, #49945	; 0xc319
    b61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b61e:	701a      	strb	r2, [r3, #0]
    b620:	f24c 3319 	movw	r3, #49945	; 0xc319
    b624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b628:	781b      	ldrb	r3, [r3, #0]
    b62a:	2bff      	cmp	r3, #255	; 0xff
    b62c:	d105      	bne.n	b63a <send_climb+0x422>
    b62e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b636:	2200      	movs	r2, #0
    b638:	701a      	strb	r2, [r3, #0]
    b63a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b642:	781b      	ldrb	r3, [r3, #0]
    b644:	461a      	mov	r2, r3
    b646:	f24c 6360 	movw	r3, #50784	; 0xc660
    b64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64e:	78d9      	ldrb	r1, [r3, #3]
    b650:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b658:	5499      	strb	r1, [r3, r2]
    b65a:	4b45      	ldr	r3, [pc, #276]	; (b770 <send_climb+0x558>)
    b65c:	781a      	ldrb	r2, [r3, #0]
    b65e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b666:	781b      	ldrb	r3, [r3, #0]
    b668:	4413      	add	r3, r2
    b66a:	b2da      	uxtb	r2, r3
    b66c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b674:	701a      	strb	r2, [r3, #0]
    b676:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b67e:	781a      	ldrb	r2, [r3, #0]
    b680:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b688:	781b      	ldrb	r3, [r3, #0]
    b68a:	4413      	add	r3, r2
    b68c:	b2da      	uxtb	r2, r3
    b68e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b696:	701a      	strb	r2, [r3, #0]
    b698:	f24c 3319 	movw	r3, #49945	; 0xc319
    b69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a0:	781b      	ldrb	r3, [r3, #0]
    b6a2:	3301      	adds	r3, #1
    b6a4:	b2da      	uxtb	r2, r3
    b6a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ae:	701a      	strb	r2, [r3, #0]
    b6b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b8:	781b      	ldrb	r3, [r3, #0]
    b6ba:	2bff      	cmp	r3, #255	; 0xff
    b6bc:	d105      	bne.n	b6ca <send_climb+0x4b2>
    b6be:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c6:	2200      	movs	r2, #0
    b6c8:	701a      	strb	r2, [r3, #0]
    b6ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d2:	781b      	ldrb	r3, [r3, #0]
    b6d4:	461a      	mov	r2, r3
    b6d6:	f24c 6368 	movw	r3, #50792	; 0xc668
    b6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6de:	7819      	ldrb	r1, [r3, #0]
    b6e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e8:	5499      	strb	r1, [r3, r2]
    b6ea:	f24c 6368 	movw	r3, #50792	; 0xc668
    b6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f2:	781a      	ldrb	r2, [r3, #0]
    b6f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6fc:	781b      	ldrb	r3, [r3, #0]
    b6fe:	4413      	add	r3, r2
    b700:	b2da      	uxtb	r2, r3
    b702:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b70a:	701a      	strb	r2, [r3, #0]
    b70c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b714:	781a      	ldrb	r2, [r3, #0]
    b716:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b71e:	781b      	ldrb	r3, [r3, #0]
    b720:	4413      	add	r3, r2
    b722:	b2da      	uxtb	r2, r3
    b724:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b72c:	701a      	strb	r2, [r3, #0]
    b72e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b736:	781b      	ldrb	r3, [r3, #0]
    b738:	3301      	adds	r3, #1
    b73a:	b2da      	uxtb	r2, r3
    b73c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b744:	701a      	strb	r2, [r3, #0]
    b746:	f24c 3319 	movw	r3, #49945	; 0xc319
    b74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b74e:	781b      	ldrb	r3, [r3, #0]
    b750:	2bff      	cmp	r3, #255	; 0xff
    b752:	d10f      	bne.n	b774 <send_climb+0x55c>
    b754:	f24c 3319 	movw	r3, #49945	; 0xc319
    b758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b75c:	2200      	movs	r2, #0
    b75e:	701a      	strb	r2, [r3, #0]
    b760:	e008      	b.n	b774 <send_climb+0x55c>
    b762:	bf00      	nop
    b764:	2004c64d 	.word	0x2004c64d
    b768:	2004c661 	.word	0x2004c661
    b76c:	2004c662 	.word	0x2004c662
    b770:	2004c663 	.word	0x2004c663
    b774:	f24c 3319 	movw	r3, #49945	; 0xc319
    b778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b77c:	781b      	ldrb	r3, [r3, #0]
    b77e:	461a      	mov	r2, r3
    b780:	f24c 6368 	movw	r3, #50792	; 0xc668
    b784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b788:	7859      	ldrb	r1, [r3, #1]
    b78a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b792:	5499      	strb	r1, [r3, r2]
    b794:	4bd1      	ldr	r3, [pc, #836]	; (badc <send_climb+0x8c4>)
    b796:	781a      	ldrb	r2, [r3, #0]
    b798:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a0:	781b      	ldrb	r3, [r3, #0]
    b7a2:	4413      	add	r3, r2
    b7a4:	b2da      	uxtb	r2, r3
    b7a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ae:	701a      	strb	r2, [r3, #0]
    b7b0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b8:	781a      	ldrb	r2, [r3, #0]
    b7ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c2:	781b      	ldrb	r3, [r3, #0]
    b7c4:	4413      	add	r3, r2
    b7c6:	b2da      	uxtb	r2, r3
    b7c8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d0:	701a      	strb	r2, [r3, #0]
    b7d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7da:	781b      	ldrb	r3, [r3, #0]
    b7dc:	3301      	adds	r3, #1
    b7de:	b2da      	uxtb	r2, r3
    b7e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e8:	701a      	strb	r2, [r3, #0]
    b7ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f2:	781b      	ldrb	r3, [r3, #0]
    b7f4:	2bff      	cmp	r3, #255	; 0xff
    b7f6:	d105      	bne.n	b804 <send_climb+0x5ec>
    b7f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b800:	2200      	movs	r2, #0
    b802:	701a      	strb	r2, [r3, #0]
    b804:	f24c 3319 	movw	r3, #49945	; 0xc319
    b808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80c:	781b      	ldrb	r3, [r3, #0]
    b80e:	461a      	mov	r2, r3
    b810:	f24c 6368 	movw	r3, #50792	; 0xc668
    b814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b818:	7899      	ldrb	r1, [r3, #2]
    b81a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b822:	5499      	strb	r1, [r3, r2]
    b824:	4bae      	ldr	r3, [pc, #696]	; (bae0 <send_climb+0x8c8>)
    b826:	781a      	ldrb	r2, [r3, #0]
    b828:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b830:	781b      	ldrb	r3, [r3, #0]
    b832:	4413      	add	r3, r2
    b834:	b2da      	uxtb	r2, r3
    b836:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83e:	701a      	strb	r2, [r3, #0]
    b840:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b848:	781a      	ldrb	r2, [r3, #0]
    b84a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b852:	781b      	ldrb	r3, [r3, #0]
    b854:	4413      	add	r3, r2
    b856:	b2da      	uxtb	r2, r3
    b858:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b860:	701a      	strb	r2, [r3, #0]
    b862:	f24c 3319 	movw	r3, #49945	; 0xc319
    b866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86a:	781b      	ldrb	r3, [r3, #0]
    b86c:	3301      	adds	r3, #1
    b86e:	b2da      	uxtb	r2, r3
    b870:	f24c 3319 	movw	r3, #49945	; 0xc319
    b874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b878:	701a      	strb	r2, [r3, #0]
    b87a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b882:	781b      	ldrb	r3, [r3, #0]
    b884:	2bff      	cmp	r3, #255	; 0xff
    b886:	d105      	bne.n	b894 <send_climb+0x67c>
    b888:	f24c 3319 	movw	r3, #49945	; 0xc319
    b88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b890:	2200      	movs	r2, #0
    b892:	701a      	strb	r2, [r3, #0]
    b894:	f24c 3319 	movw	r3, #49945	; 0xc319
    b898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b89c:	781b      	ldrb	r3, [r3, #0]
    b89e:	461a      	mov	r2, r3
    b8a0:	f24c 6368 	movw	r3, #50792	; 0xc668
    b8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a8:	78d9      	ldrb	r1, [r3, #3]
    b8aa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b2:	5499      	strb	r1, [r3, r2]
    b8b4:	4b8b      	ldr	r3, [pc, #556]	; (bae4 <send_climb+0x8cc>)
    b8b6:	781a      	ldrb	r2, [r3, #0]
    b8b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c0:	781b      	ldrb	r3, [r3, #0]
    b8c2:	4413      	add	r3, r2
    b8c4:	b2da      	uxtb	r2, r3
    b8c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ce:	701a      	strb	r2, [r3, #0]
    b8d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d8:	781a      	ldrb	r2, [r3, #0]
    b8da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e2:	781b      	ldrb	r3, [r3, #0]
    b8e4:	4413      	add	r3, r2
    b8e6:	b2da      	uxtb	r2, r3
    b8e8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f0:	701a      	strb	r2, [r3, #0]
    b8f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8fa:	781b      	ldrb	r3, [r3, #0]
    b8fc:	3301      	adds	r3, #1
    b8fe:	b2da      	uxtb	r2, r3
    b900:	f24c 3319 	movw	r3, #49945	; 0xc319
    b904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b908:	701a      	strb	r2, [r3, #0]
    b90a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b912:	781b      	ldrb	r3, [r3, #0]
    b914:	2bff      	cmp	r3, #255	; 0xff
    b916:	d105      	bne.n	b924 <send_climb+0x70c>
    b918:	f24c 3319 	movw	r3, #49945	; 0xc319
    b91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b920:	2200      	movs	r2, #0
    b922:	701a      	strb	r2, [r3, #0]
    b924:	f24c 3319 	movw	r3, #49945	; 0xc319
    b928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b92c:	781b      	ldrb	r3, [r3, #0]
    b92e:	461a      	mov	r2, r3
    b930:	f648 1320 	movw	r3, #35104	; 0x8920
    b934:	f2c0 0301 	movt	r3, #1
    b938:	7819      	ldrb	r1, [r3, #0]
    b93a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b942:	5499      	strb	r1, [r3, r2]
    b944:	f648 1320 	movw	r3, #35104	; 0x8920
    b948:	f2c0 0301 	movt	r3, #1
    b94c:	781a      	ldrb	r2, [r3, #0]
    b94e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b956:	781b      	ldrb	r3, [r3, #0]
    b958:	4413      	add	r3, r2
    b95a:	b2da      	uxtb	r2, r3
    b95c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b964:	701a      	strb	r2, [r3, #0]
    b966:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b96e:	781a      	ldrb	r2, [r3, #0]
    b970:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b978:	781b      	ldrb	r3, [r3, #0]
    b97a:	4413      	add	r3, r2
    b97c:	b2da      	uxtb	r2, r3
    b97e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b986:	701a      	strb	r2, [r3, #0]
    b988:	f24c 3319 	movw	r3, #49945	; 0xc319
    b98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b990:	781b      	ldrb	r3, [r3, #0]
    b992:	3301      	adds	r3, #1
    b994:	b2da      	uxtb	r2, r3
    b996:	f24c 3319 	movw	r3, #49945	; 0xc319
    b99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b99e:	701a      	strb	r2, [r3, #0]
    b9a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a8:	781b      	ldrb	r3, [r3, #0]
    b9aa:	2bff      	cmp	r3, #255	; 0xff
    b9ac:	d105      	bne.n	b9ba <send_climb+0x7a2>
    b9ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b6:	2200      	movs	r2, #0
    b9b8:	701a      	strb	r2, [r3, #0]
    b9ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c2:	781b      	ldrb	r3, [r3, #0]
    b9c4:	461a      	mov	r2, r3
    b9c6:	f648 1320 	movw	r3, #35104	; 0x8920
    b9ca:	f2c0 0301 	movt	r3, #1
    b9ce:	7859      	ldrb	r1, [r3, #1]
    b9d0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d8:	5499      	strb	r1, [r3, r2]
    b9da:	4b43      	ldr	r3, [pc, #268]	; (bae8 <send_climb+0x8d0>)
    b9dc:	781a      	ldrb	r2, [r3, #0]
    b9de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e6:	781b      	ldrb	r3, [r3, #0]
    b9e8:	4413      	add	r3, r2
    b9ea:	b2da      	uxtb	r2, r3
    b9ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f4:	701a      	strb	r2, [r3, #0]
    b9f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9fe:	781a      	ldrb	r2, [r3, #0]
    ba00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba08:	781b      	ldrb	r3, [r3, #0]
    ba0a:	4413      	add	r3, r2
    ba0c:	b2da      	uxtb	r2, r3
    ba0e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba16:	701a      	strb	r2, [r3, #0]
    ba18:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba20:	781b      	ldrb	r3, [r3, #0]
    ba22:	3301      	adds	r3, #1
    ba24:	b2da      	uxtb	r2, r3
    ba26:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba2e:	701a      	strb	r2, [r3, #0]
    ba30:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba38:	781b      	ldrb	r3, [r3, #0]
    ba3a:	2bff      	cmp	r3, #255	; 0xff
    ba3c:	d105      	bne.n	ba4a <send_climb+0x832>
    ba3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba46:	2200      	movs	r2, #0
    ba48:	701a      	strb	r2, [r3, #0]
    ba4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba52:	781b      	ldrb	r3, [r3, #0]
    ba54:	461a      	mov	r2, r3
    ba56:	f648 1320 	movw	r3, #35104	; 0x8920
    ba5a:	f2c0 0301 	movt	r3, #1
    ba5e:	7899      	ldrb	r1, [r3, #2]
    ba60:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ba64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba68:	5499      	strb	r1, [r3, r2]
    ba6a:	4b20      	ldr	r3, [pc, #128]	; (baec <send_climb+0x8d4>)
    ba6c:	781a      	ldrb	r2, [r3, #0]
    ba6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba76:	781b      	ldrb	r3, [r3, #0]
    ba78:	4413      	add	r3, r2
    ba7a:	b2da      	uxtb	r2, r3
    ba7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba84:	701a      	strb	r2, [r3, #0]
    ba86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba8e:	781a      	ldrb	r2, [r3, #0]
    ba90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba98:	781b      	ldrb	r3, [r3, #0]
    ba9a:	4413      	add	r3, r2
    ba9c:	b2da      	uxtb	r2, r3
    ba9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    baa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa6:	701a      	strb	r2, [r3, #0]
    baa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    baac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab0:	781b      	ldrb	r3, [r3, #0]
    bab2:	3301      	adds	r3, #1
    bab4:	b2da      	uxtb	r2, r3
    bab6:	f24c 3319 	movw	r3, #49945	; 0xc319
    baba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    babe:	701a      	strb	r2, [r3, #0]
    bac0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac8:	781b      	ldrb	r3, [r3, #0]
    baca:	2bff      	cmp	r3, #255	; 0xff
    bacc:	d110      	bne.n	baf0 <send_climb+0x8d8>
    bace:	f24c 3319 	movw	r3, #49945	; 0xc319
    bad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad6:	2200      	movs	r2, #0
    bad8:	701a      	strb	r2, [r3, #0]
    bada:	e009      	b.n	baf0 <send_climb+0x8d8>
    badc:	2004c669 	.word	0x2004c669
    bae0:	2004c66a 	.word	0x2004c66a
    bae4:	2004c66b 	.word	0x2004c66b
    bae8:	00018921 	.word	0x00018921
    baec:	00018922 	.word	0x00018922
    baf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    baf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf8:	781b      	ldrb	r3, [r3, #0]
    bafa:	461a      	mov	r2, r3
    bafc:	f648 1320 	movw	r3, #35104	; 0x8920
    bb00:	f2c0 0301 	movt	r3, #1
    bb04:	78d9      	ldrb	r1, [r3, #3]
    bb06:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb0e:	5499      	strb	r1, [r3, r2]
    bb10:	4b79      	ldr	r3, [pc, #484]	; (bcf8 <send_climb+0xae0>)
    bb12:	781a      	ldrb	r2, [r3, #0]
    bb14:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb1c:	781b      	ldrb	r3, [r3, #0]
    bb1e:	4413      	add	r3, r2
    bb20:	b2da      	uxtb	r2, r3
    bb22:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb2a:	701a      	strb	r2, [r3, #0]
    bb2c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb34:	781a      	ldrb	r2, [r3, #0]
    bb36:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb3e:	781b      	ldrb	r3, [r3, #0]
    bb40:	4413      	add	r3, r2
    bb42:	b2da      	uxtb	r2, r3
    bb44:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb4c:	701a      	strb	r2, [r3, #0]
    bb4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb56:	781b      	ldrb	r3, [r3, #0]
    bb58:	3301      	adds	r3, #1
    bb5a:	b2da      	uxtb	r2, r3
    bb5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb64:	701a      	strb	r2, [r3, #0]
    bb66:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb6e:	781b      	ldrb	r3, [r3, #0]
    bb70:	2bff      	cmp	r3, #255	; 0xff
    bb72:	d105      	bne.n	bb80 <send_climb+0x968>
    bb74:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb7c:	2200      	movs	r2, #0
    bb7e:	701a      	strb	r2, [r3, #0]
    bb80:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb88:	781b      	ldrb	r3, [r3, #0]
    bb8a:	461a      	mov	r2, r3
    bb8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb94:	7819      	ldrb	r1, [r3, #0]
    bb96:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb9e:	5499      	strb	r1, [r3, r2]
    bba0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba8:	781b      	ldrb	r3, [r3, #0]
    bbaa:	3301      	adds	r3, #1
    bbac:	b2da      	uxtb	r2, r3
    bbae:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb6:	701a      	strb	r2, [r3, #0]
    bbb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc0:	781b      	ldrb	r3, [r3, #0]
    bbc2:	2bff      	cmp	r3, #255	; 0xff
    bbc4:	d105      	bne.n	bbd2 <send_climb+0x9ba>
    bbc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbce:	2200      	movs	r2, #0
    bbd0:	701a      	strb	r2, [r3, #0]
    bbd2:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbda:	781b      	ldrb	r3, [r3, #0]
    bbdc:	461a      	mov	r2, r3
    bbde:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe6:	7819      	ldrb	r1, [r3, #0]
    bbe8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf0:	5499      	strb	r1, [r3, r2]
    bbf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbfa:	781b      	ldrb	r3, [r3, #0]
    bbfc:	3301      	adds	r3, #1
    bbfe:	b2da      	uxtb	r2, r3
    bc00:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc08:	701a      	strb	r2, [r3, #0]
    bc0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc12:	781b      	ldrb	r3, [r3, #0]
    bc14:	2bff      	cmp	r3, #255	; 0xff
    bc16:	d105      	bne.n	bc24 <send_climb+0xa0c>
    bc18:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc20:	2200      	movs	r2, #0
    bc22:	701a      	strb	r2, [r3, #0]
    bc24:	f242 0339 	movw	r3, #8249	; 0x2039
    bc28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc2c:	781b      	ldrb	r3, [r3, #0]
    bc2e:	b2db      	uxtb	r3, r3
    bc30:	f003 0310 	and.w	r3, r3, #16
    bc34:	2b00      	cmp	r3, #0
    bc36:	d15a      	bne.n	bcee <send_climb+0xad6>
    bc38:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc40:	781b      	ldrb	r3, [r3, #0]
    bc42:	b2db      	uxtb	r3, r3
    bc44:	461a      	mov	r2, r3
    bc46:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc4e:	5c9a      	ldrb	r2, [r3, r2]
    bc50:	f24c 431b 	movw	r3, #50203	; 0xc41b
    bc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc58:	701a      	strb	r2, [r3, #0]
    bc5a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    bc5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc62:	2200      	movs	r2, #0
    bc64:	701a      	strb	r2, [r3, #0]
    bc66:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc6e:	781b      	ldrb	r3, [r3, #0]
    bc70:	b2db      	uxtb	r3, r3
    bc72:	3301      	adds	r3, #1
    bc74:	b2da      	uxtb	r2, r3
    bc76:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc7e:	701a      	strb	r2, [r3, #0]
    bc80:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc88:	781b      	ldrb	r3, [r3, #0]
    bc8a:	b2db      	uxtb	r3, r3
    bc8c:	2bff      	cmp	r3, #255	; 0xff
    bc8e:	d105      	bne.n	bc9c <send_climb+0xa84>
    bc90:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc98:	2200      	movs	r2, #0
    bc9a:	701a      	strb	r2, [r3, #0]
    bc9c:	f242 0338 	movw	r3, #8248	; 0x2038
    bca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca4:	f242 0238 	movw	r2, #8248	; 0x2038
    bca8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bcac:	7812      	ldrb	r2, [r2, #0]
    bcae:	b2d2      	uxtb	r2, r2
    bcb0:	f042 0201 	orr.w	r2, r2, #1
    bcb4:	b2d2      	uxtb	r2, r2
    bcb6:	701a      	strb	r2, [r3, #0]
    bcb8:	f242 0339 	movw	r3, #8249	; 0x2039
    bcbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcc0:	f242 0239 	movw	r2, #8249	; 0x2039
    bcc4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bcc8:	7812      	ldrb	r2, [r2, #0]
    bcca:	b2d2      	uxtb	r2, r2
    bccc:	f042 0210 	orr.w	r2, r2, #16
    bcd0:	b2d2      	uxtb	r2, r2
    bcd2:	701a      	strb	r2, [r3, #0]
    bcd4:	e00b      	b.n	bcee <send_climb+0xad6>
    bcd6:	f24c 3318 	movw	r3, #49944	; 0xc318
    bcda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcde:	781b      	ldrb	r3, [r3, #0]
    bce0:	3301      	adds	r3, #1
    bce2:	b2da      	uxtb	r2, r3
    bce4:	f24c 3318 	movw	r3, #49944	; 0xc318
    bce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcec:	701a      	strb	r2, [r3, #0]
}
    bcee:	46bd      	mov	sp, r7
    bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcf4:	4770      	bx	lr
    bcf6:	bf00      	nop
    bcf8:	00018923 	.word	0x00018923

0000bcfc <send_mode>:
void send_mode(void){  //5000ms
    bcfc:	b480      	push	{r7}
    bcfe:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bd00:	f24c 3311 	movw	r3, #49937	; 0xc311
    bd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd08:	781a      	ldrb	r2, [r3, #0]
    bd0a:	f248 531f 	movw	r3, #34079	; 0x851f
    bd0e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bd12:	fba3 1302 	umull	r1, r3, r3, r2
    bd16:	091b      	lsrs	r3, r3, #4
    bd18:	2132      	movs	r1, #50	; 0x32
    bd1a:	fb01 f303 	mul.w	r3, r1, r3
    bd1e:	1ad3      	subs	r3, r2, r3
    bd20:	b2db      	uxtb	r3, r3
    bd22:	2b09      	cmp	r3, #9
    bd24:	f040 82ba 	bne.w	c29c <send_mode+0x5a0>
    bd28:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd30:	781a      	ldrb	r2, [r3, #0]
    bd32:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd3a:	781b      	ldrb	r3, [r3, #0]
    bd3c:	b2db      	uxtb	r3, r3
    bd3e:	429a      	cmp	r2, r3
    bd40:	d313      	bcc.n	bd6a <send_mode+0x6e>
    bd42:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd4a:	781b      	ldrb	r3, [r3, #0]
    bd4c:	b2db      	uxtb	r3, r3
    bd4e:	461a      	mov	r2, r3
    bd50:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd58:	781b      	ldrb	r3, [r3, #0]
    bd5a:	1ad3      	subs	r3, r2, r3
    bd5c:	33ff      	adds	r3, #255	; 0xff
    bd5e:	2b09      	cmp	r3, #9
    bd60:	bfd4      	ite	le
    bd62:	2300      	movle	r3, #0
    bd64:	2301      	movgt	r3, #1
    bd66:	b2db      	uxtb	r3, r3
    bd68:	e011      	b.n	bd8e <send_mode+0x92>
    bd6a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd72:	781b      	ldrb	r3, [r3, #0]
    bd74:	b2db      	uxtb	r3, r3
    bd76:	461a      	mov	r2, r3
    bd78:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd80:	781b      	ldrb	r3, [r3, #0]
    bd82:	1ad3      	subs	r3, r2, r3
    bd84:	2b09      	cmp	r3, #9
    bd86:	bfd4      	ite	le
    bd88:	2300      	movle	r3, #0
    bd8a:	2301      	movgt	r3, #1
    bd8c:	b2db      	uxtb	r3, r3
    bd8e:	2b00      	cmp	r3, #0
    bd90:	f000 8278 	beq.w	c284 <send_mode+0x588>
    bd94:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd9c:	781b      	ldrb	r3, [r3, #0]
    bd9e:	461a      	mov	r2, r3
    bda0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bda4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda8:	2105      	movs	r1, #5
    bdaa:	5499      	strb	r1, [r3, r2]
    bdac:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb4:	781b      	ldrb	r3, [r3, #0]
    bdb6:	3301      	adds	r3, #1
    bdb8:	b2da      	uxtb	r2, r3
    bdba:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdc2:	701a      	strb	r2, [r3, #0]
    bdc4:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdcc:	781b      	ldrb	r3, [r3, #0]
    bdce:	2bff      	cmp	r3, #255	; 0xff
    bdd0:	d105      	bne.n	bdde <send_mode+0xe2>
    bdd2:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdda:	2200      	movs	r2, #0
    bddc:	701a      	strb	r2, [r3, #0]
    bdde:	f24c 3319 	movw	r3, #49945	; 0xc319
    bde2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde6:	781b      	ldrb	r3, [r3, #0]
    bde8:	461a      	mov	r2, r3
    bdea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bdee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf2:	210b      	movs	r1, #11
    bdf4:	5499      	strb	r1, [r3, r2]
    bdf6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdfe:	781b      	ldrb	r3, [r3, #0]
    be00:	3301      	adds	r3, #1
    be02:	b2da      	uxtb	r2, r3
    be04:	f24c 3319 	movw	r3, #49945	; 0xc319
    be08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be0c:	701a      	strb	r2, [r3, #0]
    be0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    be12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be16:	781b      	ldrb	r3, [r3, #0]
    be18:	2bff      	cmp	r3, #255	; 0xff
    be1a:	d105      	bne.n	be28 <send_mode+0x12c>
    be1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    be20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be24:	2200      	movs	r2, #0
    be26:	701a      	strb	r2, [r3, #0]
    be28:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be30:	220b      	movs	r2, #11
    be32:	701a      	strb	r2, [r3, #0]
    be34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    be38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be3c:	220b      	movs	r2, #11
    be3e:	701a      	strb	r2, [r3, #0]
    be40:	f24c 3319 	movw	r3, #49945	; 0xc319
    be44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be48:	781b      	ldrb	r3, [r3, #0]
    be4a:	461a      	mov	r2, r3
    be4c:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    be50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be54:	7819      	ldrb	r1, [r3, #0]
    be56:	f24c 331c 	movw	r3, #49948	; 0xc31c
    be5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be5e:	5499      	strb	r1, [r3, r2]
    be60:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be68:	781a      	ldrb	r2, [r3, #0]
    be6a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    be6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be72:	781b      	ldrb	r3, [r3, #0]
    be74:	4413      	add	r3, r2
    be76:	b2da      	uxtb	r2, r3
    be78:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be80:	701a      	strb	r2, [r3, #0]
    be82:	f24c 431e 	movw	r3, #50206	; 0xc41e
    be86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be8a:	781a      	ldrb	r2, [r3, #0]
    be8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be94:	781b      	ldrb	r3, [r3, #0]
    be96:	4413      	add	r3, r2
    be98:	b2da      	uxtb	r2, r3
    be9a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    be9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea2:	701a      	strb	r2, [r3, #0]
    bea4:	f24c 3319 	movw	r3, #49945	; 0xc319
    bea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beac:	781b      	ldrb	r3, [r3, #0]
    beae:	3301      	adds	r3, #1
    beb0:	b2da      	uxtb	r2, r3
    beb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    beb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beba:	701a      	strb	r2, [r3, #0]
    bebc:	f24c 3319 	movw	r3, #49945	; 0xc319
    bec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec4:	781b      	ldrb	r3, [r3, #0]
    bec6:	2bff      	cmp	r3, #255	; 0xff
    bec8:	d105      	bne.n	bed6 <send_mode+0x1da>
    beca:	f24c 3319 	movw	r3, #49945	; 0xc319
    bece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed2:	2200      	movs	r2, #0
    bed4:	701a      	strb	r2, [r3, #0]
    bed6:	f24c 3319 	movw	r3, #49945	; 0xc319
    beda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bede:	781b      	ldrb	r3, [r3, #0]
    bee0:	461a      	mov	r2, r3
    bee2:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    bee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beea:	7819      	ldrb	r1, [r3, #0]
    beec:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef4:	5499      	strb	r1, [r3, r2]
    bef6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    befa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    befe:	781a      	ldrb	r2, [r3, #0]
    bf00:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    bf04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf08:	781b      	ldrb	r3, [r3, #0]
    bf0a:	4413      	add	r3, r2
    bf0c:	b2da      	uxtb	r2, r3
    bf0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf16:	701a      	strb	r2, [r3, #0]
    bf18:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bf1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf20:	781a      	ldrb	r2, [r3, #0]
    bf22:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf2a:	781b      	ldrb	r3, [r3, #0]
    bf2c:	4413      	add	r3, r2
    bf2e:	b2da      	uxtb	r2, r3
    bf30:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bf34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf38:	701a      	strb	r2, [r3, #0]
    bf3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf42:	781b      	ldrb	r3, [r3, #0]
    bf44:	3301      	adds	r3, #1
    bf46:	b2da      	uxtb	r2, r3
    bf48:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf50:	701a      	strb	r2, [r3, #0]
    bf52:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf5a:	781b      	ldrb	r3, [r3, #0]
    bf5c:	2bff      	cmp	r3, #255	; 0xff
    bf5e:	d105      	bne.n	bf6c <send_mode+0x270>
    bf60:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf68:	2200      	movs	r2, #0
    bf6a:	701a      	strb	r2, [r3, #0]
    bf6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf74:	781b      	ldrb	r3, [r3, #0]
    bf76:	461a      	mov	r2, r3
    bf78:	f64c 132c 	movw	r3, #51500	; 0xc92c
    bf7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf80:	7819      	ldrb	r1, [r3, #0]
    bf82:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bf86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf8a:	5499      	strb	r1, [r3, r2]
    bf8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf94:	781a      	ldrb	r2, [r3, #0]
    bf96:	f64c 132c 	movw	r3, #51500	; 0xc92c
    bf9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf9e:	781b      	ldrb	r3, [r3, #0]
    bfa0:	4413      	add	r3, r2
    bfa2:	b2da      	uxtb	r2, r3
    bfa4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfac:	701a      	strb	r2, [r3, #0]
    bfae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bfb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb6:	781a      	ldrb	r2, [r3, #0]
    bfb8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc0:	781b      	ldrb	r3, [r3, #0]
    bfc2:	4413      	add	r3, r2
    bfc4:	b2da      	uxtb	r2, r3
    bfc6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bfca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfce:	701a      	strb	r2, [r3, #0]
    bfd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd8:	781b      	ldrb	r3, [r3, #0]
    bfda:	3301      	adds	r3, #1
    bfdc:	b2da      	uxtb	r2, r3
    bfde:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe6:	701a      	strb	r2, [r3, #0]
    bfe8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff0:	781b      	ldrb	r3, [r3, #0]
    bff2:	2bff      	cmp	r3, #255	; 0xff
    bff4:	d105      	bne.n	c002 <send_mode+0x306>
    bff6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bffe:	2200      	movs	r2, #0
    c000:	701a      	strb	r2, [r3, #0]
    c002:	f24c 3319 	movw	r3, #49945	; 0xc319
    c006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c00a:	781b      	ldrb	r3, [r3, #0]
    c00c:	461a      	mov	r2, r3
    c00e:	f24c 3303 	movw	r3, #49923	; 0xc303
    c012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c016:	7819      	ldrb	r1, [r3, #0]
    c018:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c020:	5499      	strb	r1, [r3, r2]
    c022:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c02a:	781a      	ldrb	r2, [r3, #0]
    c02c:	f24c 3303 	movw	r3, #49923	; 0xc303
    c030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c034:	781b      	ldrb	r3, [r3, #0]
    c036:	4413      	add	r3, r2
    c038:	b2da      	uxtb	r2, r3
    c03a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c042:	701a      	strb	r2, [r3, #0]
    c044:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c04c:	781a      	ldrb	r2, [r3, #0]
    c04e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c056:	781b      	ldrb	r3, [r3, #0]
    c058:	4413      	add	r3, r2
    c05a:	b2da      	uxtb	r2, r3
    c05c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c064:	701a      	strb	r2, [r3, #0]
    c066:	f24c 3319 	movw	r3, #49945	; 0xc319
    c06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06e:	781b      	ldrb	r3, [r3, #0]
    c070:	3301      	adds	r3, #1
    c072:	b2da      	uxtb	r2, r3
    c074:	f24c 3319 	movw	r3, #49945	; 0xc319
    c078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c07c:	701a      	strb	r2, [r3, #0]
    c07e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c086:	781b      	ldrb	r3, [r3, #0]
    c088:	2bff      	cmp	r3, #255	; 0xff
    c08a:	d105      	bne.n	c098 <send_mode+0x39c>
    c08c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c094:	2200      	movs	r2, #0
    c096:	701a      	strb	r2, [r3, #0]
    c098:	f24c 3319 	movw	r3, #49945	; 0xc319
    c09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a0:	781b      	ldrb	r3, [r3, #0]
    c0a2:	461a      	mov	r2, r3
    c0a4:	f240 533c 	movw	r3, #1340	; 0x53c
    c0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ac:	7819      	ldrb	r1, [r3, #0]
    c0ae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b6:	5499      	strb	r1, [r3, r2]
    c0b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c0:	781a      	ldrb	r2, [r3, #0]
    c0c2:	f240 533c 	movw	r3, #1340	; 0x53c
    c0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ca:	781b      	ldrb	r3, [r3, #0]
    c0cc:	4413      	add	r3, r2
    c0ce:	b2da      	uxtb	r2, r3
    c0d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d8:	701a      	strb	r2, [r3, #0]
    c0da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e2:	781a      	ldrb	r2, [r3, #0]
    c0e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ec:	781b      	ldrb	r3, [r3, #0]
    c0ee:	4413      	add	r3, r2
    c0f0:	b2da      	uxtb	r2, r3
    c0f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0fa:	701a      	strb	r2, [r3, #0]
    c0fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c104:	781b      	ldrb	r3, [r3, #0]
    c106:	3301      	adds	r3, #1
    c108:	b2da      	uxtb	r2, r3
    c10a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c112:	701a      	strb	r2, [r3, #0]
    c114:	f24c 3319 	movw	r3, #49945	; 0xc319
    c118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c11c:	781b      	ldrb	r3, [r3, #0]
    c11e:	2bff      	cmp	r3, #255	; 0xff
    c120:	d105      	bne.n	c12e <send_mode+0x432>
    c122:	f24c 3319 	movw	r3, #49945	; 0xc319
    c126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c12a:	2200      	movs	r2, #0
    c12c:	701a      	strb	r2, [r3, #0]
    c12e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c136:	781b      	ldrb	r3, [r3, #0]
    c138:	461a      	mov	r2, r3
    c13a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c142:	7819      	ldrb	r1, [r3, #0]
    c144:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c14c:	5499      	strb	r1, [r3, r2]
    c14e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c156:	781b      	ldrb	r3, [r3, #0]
    c158:	3301      	adds	r3, #1
    c15a:	b2da      	uxtb	r2, r3
    c15c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c164:	701a      	strb	r2, [r3, #0]
    c166:	f24c 3319 	movw	r3, #49945	; 0xc319
    c16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c16e:	781b      	ldrb	r3, [r3, #0]
    c170:	2bff      	cmp	r3, #255	; 0xff
    c172:	d105      	bne.n	c180 <send_mode+0x484>
    c174:	f24c 3319 	movw	r3, #49945	; 0xc319
    c178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c17c:	2200      	movs	r2, #0
    c17e:	701a      	strb	r2, [r3, #0]
    c180:	f24c 3319 	movw	r3, #49945	; 0xc319
    c184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c188:	781b      	ldrb	r3, [r3, #0]
    c18a:	461a      	mov	r2, r3
    c18c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c194:	7819      	ldrb	r1, [r3, #0]
    c196:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19e:	5499      	strb	r1, [r3, r2]
    c1a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a8:	781b      	ldrb	r3, [r3, #0]
    c1aa:	3301      	adds	r3, #1
    c1ac:	b2da      	uxtb	r2, r3
    c1ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b6:	701a      	strb	r2, [r3, #0]
    c1b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c0:	781b      	ldrb	r3, [r3, #0]
    c1c2:	2bff      	cmp	r3, #255	; 0xff
    c1c4:	d105      	bne.n	c1d2 <send_mode+0x4d6>
    c1c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ce:	2200      	movs	r2, #0
    c1d0:	701a      	strb	r2, [r3, #0]
    c1d2:	f242 0339 	movw	r3, #8249	; 0x2039
    c1d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1da:	781b      	ldrb	r3, [r3, #0]
    c1dc:	b2db      	uxtb	r3, r3
    c1de:	f003 0310 	and.w	r3, r3, #16
    c1e2:	2b00      	cmp	r3, #0
    c1e4:	d15a      	bne.n	c29c <send_mode+0x5a0>
    c1e6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ee:	781b      	ldrb	r3, [r3, #0]
    c1f0:	b2db      	uxtb	r3, r3
    c1f2:	461a      	mov	r2, r3
    c1f4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1fc:	5c9a      	ldrb	r2, [r3, r2]
    c1fe:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c206:	701a      	strb	r2, [r3, #0]
    c208:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c210:	2200      	movs	r2, #0
    c212:	701a      	strb	r2, [r3, #0]
    c214:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c21c:	781b      	ldrb	r3, [r3, #0]
    c21e:	b2db      	uxtb	r3, r3
    c220:	3301      	adds	r3, #1
    c222:	b2da      	uxtb	r2, r3
    c224:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c22c:	701a      	strb	r2, [r3, #0]
    c22e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c236:	781b      	ldrb	r3, [r3, #0]
    c238:	b2db      	uxtb	r3, r3
    c23a:	2bff      	cmp	r3, #255	; 0xff
    c23c:	d105      	bne.n	c24a <send_mode+0x54e>
    c23e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c246:	2200      	movs	r2, #0
    c248:	701a      	strb	r2, [r3, #0]
    c24a:	f242 0338 	movw	r3, #8248	; 0x2038
    c24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c252:	f242 0238 	movw	r2, #8248	; 0x2038
    c256:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c25a:	7812      	ldrb	r2, [r2, #0]
    c25c:	b2d2      	uxtb	r2, r2
    c25e:	f042 0201 	orr.w	r2, r2, #1
    c262:	b2d2      	uxtb	r2, r2
    c264:	701a      	strb	r2, [r3, #0]
    c266:	f242 0339 	movw	r3, #8249	; 0x2039
    c26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c26e:	f242 0239 	movw	r2, #8249	; 0x2039
    c272:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c276:	7812      	ldrb	r2, [r2, #0]
    c278:	b2d2      	uxtb	r2, r2
    c27a:	f042 0210 	orr.w	r2, r2, #16
    c27e:	b2d2      	uxtb	r2, r2
    c280:	701a      	strb	r2, [r3, #0]
    c282:	e00b      	b.n	c29c <send_mode+0x5a0>
    c284:	f24c 3318 	movw	r3, #49944	; 0xc318
    c288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c28c:	781b      	ldrb	r3, [r3, #0]
    c28e:	3301      	adds	r3, #1
    c290:	b2da      	uxtb	r2, r3
    c292:	f24c 3318 	movw	r3, #49944	; 0xc318
    c296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c29a:	701a      	strb	r2, [r3, #0]
}
    c29c:	46bd      	mov	sp, r7
    c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2a2:	4770      	bx	lr

0000c2a4 <send_debug>:
void send_debug(void){  //5000ms
    c2a4:	b480      	push	{r7}
    c2a6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c2a8:	f24c 3311 	movw	r3, #49937	; 0xc311
    c2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b0:	781a      	ldrb	r2, [r3, #0]
    c2b2:	f248 531f 	movw	r3, #34079	; 0x851f
    c2b6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c2ba:	fba3 1302 	umull	r1, r3, r3, r2
    c2be:	091b      	lsrs	r3, r3, #4
    c2c0:	2132      	movs	r1, #50	; 0x32
    c2c2:	fb01 f303 	mul.w	r3, r1, r3
    c2c6:	1ad3      	subs	r3, r2, r3
    c2c8:	b2db      	uxtb	r3, r3
    c2ca:	2b1d      	cmp	r3, #29
    c2cc:	f040 82bb 	bne.w	c846 <send_debug+0x5a2>
    c2d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d8:	781a      	ldrb	r2, [r3, #0]
    c2da:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e2:	781b      	ldrb	r3, [r3, #0]
    c2e4:	b2db      	uxtb	r3, r3
    c2e6:	429a      	cmp	r2, r3
    c2e8:	d313      	bcc.n	c312 <send_debug+0x6e>
    c2ea:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f2:	781b      	ldrb	r3, [r3, #0]
    c2f4:	b2db      	uxtb	r3, r3
    c2f6:	461a      	mov	r2, r3
    c2f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c300:	781b      	ldrb	r3, [r3, #0]
    c302:	1ad3      	subs	r3, r2, r3
    c304:	33ff      	adds	r3, #255	; 0xff
    c306:	2b09      	cmp	r3, #9
    c308:	bfd4      	ite	le
    c30a:	2300      	movle	r3, #0
    c30c:	2301      	movgt	r3, #1
    c30e:	b2db      	uxtb	r3, r3
    c310:	e011      	b.n	c336 <send_debug+0x92>
    c312:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c31a:	781b      	ldrb	r3, [r3, #0]
    c31c:	b2db      	uxtb	r3, r3
    c31e:	461a      	mov	r2, r3
    c320:	f24c 3319 	movw	r3, #49945	; 0xc319
    c324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c328:	781b      	ldrb	r3, [r3, #0]
    c32a:	1ad3      	subs	r3, r2, r3
    c32c:	2b09      	cmp	r3, #9
    c32e:	bfd4      	ite	le
    c330:	2300      	movle	r3, #0
    c332:	2301      	movgt	r3, #1
    c334:	b2db      	uxtb	r3, r3
    c336:	2b00      	cmp	r3, #0
    c338:	f000 8279 	beq.w	c82e <send_debug+0x58a>
    c33c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c344:	781b      	ldrb	r3, [r3, #0]
    c346:	461a      	mov	r2, r3
    c348:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c350:	2105      	movs	r1, #5
    c352:	5499      	strb	r1, [r3, r2]
    c354:	f24c 3319 	movw	r3, #49945	; 0xc319
    c358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35c:	781b      	ldrb	r3, [r3, #0]
    c35e:	3301      	adds	r3, #1
    c360:	b2da      	uxtb	r2, r3
    c362:	f24c 3319 	movw	r3, #49945	; 0xc319
    c366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c36a:	701a      	strb	r2, [r3, #0]
    c36c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c374:	781b      	ldrb	r3, [r3, #0]
    c376:	2bff      	cmp	r3, #255	; 0xff
    c378:	d105      	bne.n	c386 <send_debug+0xe2>
    c37a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c382:	2200      	movs	r2, #0
    c384:	701a      	strb	r2, [r3, #0]
    c386:	f24c 3319 	movw	r3, #49945	; 0xc319
    c38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c38e:	781b      	ldrb	r3, [r3, #0]
    c390:	461a      	mov	r2, r3
    c392:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c39a:	210d      	movs	r1, #13
    c39c:	5499      	strb	r1, [r3, r2]
    c39e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a6:	781b      	ldrb	r3, [r3, #0]
    c3a8:	3301      	adds	r3, #1
    c3aa:	b2da      	uxtb	r2, r3
    c3ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b4:	701a      	strb	r2, [r3, #0]
    c3b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3be:	781b      	ldrb	r3, [r3, #0]
    c3c0:	2bff      	cmp	r3, #255	; 0xff
    c3c2:	d105      	bne.n	c3d0 <send_debug+0x12c>
    c3c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3cc:	2200      	movs	r2, #0
    c3ce:	701a      	strb	r2, [r3, #0]
    c3d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d8:	220d      	movs	r2, #13
    c3da:	701a      	strb	r2, [r3, #0]
    c3dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e4:	220d      	movs	r2, #13
    c3e6:	701a      	strb	r2, [r3, #0]
    c3e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f0:	781b      	ldrb	r3, [r3, #0]
    c3f2:	461a      	mov	r2, r3
    c3f4:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3fc:	781b      	ldrb	r3, [r3, #0]
    c3fe:	b2d9      	uxtb	r1, r3
    c400:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c408:	5499      	strb	r1, [r3, r2]
    c40a:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c412:	781a      	ldrb	r2, [r3, #0]
    c414:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c41c:	781b      	ldrb	r3, [r3, #0]
    c41e:	4413      	add	r3, r2
    c420:	b2da      	uxtb	r2, r3
    c422:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c42a:	701a      	strb	r2, [r3, #0]
    c42c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c434:	781a      	ldrb	r2, [r3, #0]
    c436:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c43e:	781b      	ldrb	r3, [r3, #0]
    c440:	4413      	add	r3, r2
    c442:	b2da      	uxtb	r2, r3
    c444:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c44c:	701a      	strb	r2, [r3, #0]
    c44e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c456:	781b      	ldrb	r3, [r3, #0]
    c458:	3301      	adds	r3, #1
    c45a:	b2da      	uxtb	r2, r3
    c45c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c464:	701a      	strb	r2, [r3, #0]
    c466:	f24c 3319 	movw	r3, #49945	; 0xc319
    c46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c46e:	781b      	ldrb	r3, [r3, #0]
    c470:	2bff      	cmp	r3, #255	; 0xff
    c472:	d105      	bne.n	c480 <send_debug+0x1dc>
    c474:	f24c 3319 	movw	r3, #49945	; 0xc319
    c478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c47c:	2200      	movs	r2, #0
    c47e:	701a      	strb	r2, [r3, #0]
    c480:	f24c 3319 	movw	r3, #49945	; 0xc319
    c484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c488:	781b      	ldrb	r3, [r3, #0]
    c48a:	461a      	mov	r2, r3
    c48c:	f24c 4350 	movw	r3, #50256	; 0xc450
    c490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c494:	7819      	ldrb	r1, [r3, #0]
    c496:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c49e:	5499      	strb	r1, [r3, r2]
    c4a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a8:	781a      	ldrb	r2, [r3, #0]
    c4aa:	f24c 4350 	movw	r3, #50256	; 0xc450
    c4ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b2:	781b      	ldrb	r3, [r3, #0]
    c4b4:	4413      	add	r3, r2
    c4b6:	b2da      	uxtb	r2, r3
    c4b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c0:	701a      	strb	r2, [r3, #0]
    c4c2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ca:	781a      	ldrb	r2, [r3, #0]
    c4cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d4:	781b      	ldrb	r3, [r3, #0]
    c4d6:	4413      	add	r3, r2
    c4d8:	b2da      	uxtb	r2, r3
    c4da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e2:	701a      	strb	r2, [r3, #0]
    c4e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ec:	781b      	ldrb	r3, [r3, #0]
    c4ee:	3301      	adds	r3, #1
    c4f0:	b2da      	uxtb	r2, r3
    c4f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4fa:	701a      	strb	r2, [r3, #0]
    c4fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c504:	781b      	ldrb	r3, [r3, #0]
    c506:	2bff      	cmp	r3, #255	; 0xff
    c508:	d105      	bne.n	c516 <send_debug+0x272>
    c50a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c512:	2200      	movs	r2, #0
    c514:	701a      	strb	r2, [r3, #0]
    c516:	f24c 3319 	movw	r3, #49945	; 0xc319
    c51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c51e:	781b      	ldrb	r3, [r3, #0]
    c520:	461a      	mov	r2, r3
    c522:	f24c 3318 	movw	r3, #49944	; 0xc318
    c526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c52a:	7819      	ldrb	r1, [r3, #0]
    c52c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c534:	5499      	strb	r1, [r3, r2]
    c536:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c53e:	781a      	ldrb	r2, [r3, #0]
    c540:	f24c 3318 	movw	r3, #49944	; 0xc318
    c544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c548:	781b      	ldrb	r3, [r3, #0]
    c54a:	4413      	add	r3, r2
    c54c:	b2da      	uxtb	r2, r3
    c54e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c556:	701a      	strb	r2, [r3, #0]
    c558:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c560:	781a      	ldrb	r2, [r3, #0]
    c562:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c56a:	781b      	ldrb	r3, [r3, #0]
    c56c:	4413      	add	r3, r2
    c56e:	b2da      	uxtb	r2, r3
    c570:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c578:	701a      	strb	r2, [r3, #0]
    c57a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c582:	781b      	ldrb	r3, [r3, #0]
    c584:	3301      	adds	r3, #1
    c586:	b2da      	uxtb	r2, r3
    c588:	f24c 3319 	movw	r3, #49945	; 0xc319
    c58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c590:	701a      	strb	r2, [r3, #0]
    c592:	f24c 3319 	movw	r3, #49945	; 0xc319
    c596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c59a:	781b      	ldrb	r3, [r3, #0]
    c59c:	2bff      	cmp	r3, #255	; 0xff
    c59e:	d105      	bne.n	c5ac <send_debug+0x308>
    c5a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a8:	2200      	movs	r2, #0
    c5aa:	701a      	strb	r2, [r3, #0]
    c5ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b4:	781b      	ldrb	r3, [r3, #0]
    c5b6:	461a      	mov	r2, r3
    c5b8:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c0:	7819      	ldrb	r1, [r3, #0]
    c5c2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ca:	5499      	strb	r1, [r3, r2]
    c5cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d4:	781a      	ldrb	r2, [r3, #0]
    c5d6:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5de:	781b      	ldrb	r3, [r3, #0]
    c5e0:	4413      	add	r3, r2
    c5e2:	b2da      	uxtb	r2, r3
    c5e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ec:	701a      	strb	r2, [r3, #0]
    c5ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f6:	781a      	ldrb	r2, [r3, #0]
    c5f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c600:	781b      	ldrb	r3, [r3, #0]
    c602:	4413      	add	r3, r2
    c604:	b2da      	uxtb	r2, r3
    c606:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c60e:	701a      	strb	r2, [r3, #0]
    c610:	f24c 3319 	movw	r3, #49945	; 0xc319
    c614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c618:	781b      	ldrb	r3, [r3, #0]
    c61a:	3301      	adds	r3, #1
    c61c:	b2da      	uxtb	r2, r3
    c61e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c626:	701a      	strb	r2, [r3, #0]
    c628:	f24c 3319 	movw	r3, #49945	; 0xc319
    c62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c630:	781b      	ldrb	r3, [r3, #0]
    c632:	2bff      	cmp	r3, #255	; 0xff
    c634:	d105      	bne.n	c642 <send_debug+0x39e>
    c636:	f24c 3319 	movw	r3, #49945	; 0xc319
    c63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c63e:	2200      	movs	r2, #0
    c640:	701a      	strb	r2, [r3, #0]
    c642:	f24c 3319 	movw	r3, #49945	; 0xc319
    c646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c64a:	781b      	ldrb	r3, [r3, #0]
    c64c:	461a      	mov	r2, r3
    c64e:	f24c 3304 	movw	r3, #49924	; 0xc304
    c652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c656:	7819      	ldrb	r1, [r3, #0]
    c658:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c660:	5499      	strb	r1, [r3, r2]
    c662:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c66a:	781a      	ldrb	r2, [r3, #0]
    c66c:	f24c 3304 	movw	r3, #49924	; 0xc304
    c670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c674:	781b      	ldrb	r3, [r3, #0]
    c676:	4413      	add	r3, r2
    c678:	b2da      	uxtb	r2, r3
    c67a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c682:	701a      	strb	r2, [r3, #0]
    c684:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c68c:	781a      	ldrb	r2, [r3, #0]
    c68e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c696:	781b      	ldrb	r3, [r3, #0]
    c698:	4413      	add	r3, r2
    c69a:	b2da      	uxtb	r2, r3
    c69c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a4:	701a      	strb	r2, [r3, #0]
    c6a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ae:	781b      	ldrb	r3, [r3, #0]
    c6b0:	3301      	adds	r3, #1
    c6b2:	b2da      	uxtb	r2, r3
    c6b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6bc:	701a      	strb	r2, [r3, #0]
    c6be:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c6:	781b      	ldrb	r3, [r3, #0]
    c6c8:	2bff      	cmp	r3, #255	; 0xff
    c6ca:	d105      	bne.n	c6d8 <send_debug+0x434>
    c6cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d4:	2200      	movs	r2, #0
    c6d6:	701a      	strb	r2, [r3, #0]
    c6d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e0:	781b      	ldrb	r3, [r3, #0]
    c6e2:	461a      	mov	r2, r3
    c6e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ec:	7819      	ldrb	r1, [r3, #0]
    c6ee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f6:	5499      	strb	r1, [r3, r2]
    c6f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c700:	781b      	ldrb	r3, [r3, #0]
    c702:	3301      	adds	r3, #1
    c704:	b2da      	uxtb	r2, r3
    c706:	f24c 3319 	movw	r3, #49945	; 0xc319
    c70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c70e:	701a      	strb	r2, [r3, #0]
    c710:	f24c 3319 	movw	r3, #49945	; 0xc319
    c714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c718:	781b      	ldrb	r3, [r3, #0]
    c71a:	2bff      	cmp	r3, #255	; 0xff
    c71c:	d105      	bne.n	c72a <send_debug+0x486>
    c71e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c726:	2200      	movs	r2, #0
    c728:	701a      	strb	r2, [r3, #0]
    c72a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c732:	781b      	ldrb	r3, [r3, #0]
    c734:	461a      	mov	r2, r3
    c736:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73e:	7819      	ldrb	r1, [r3, #0]
    c740:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c748:	5499      	strb	r1, [r3, r2]
    c74a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c752:	781b      	ldrb	r3, [r3, #0]
    c754:	3301      	adds	r3, #1
    c756:	b2da      	uxtb	r2, r3
    c758:	f24c 3319 	movw	r3, #49945	; 0xc319
    c75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c760:	701a      	strb	r2, [r3, #0]
    c762:	f24c 3319 	movw	r3, #49945	; 0xc319
    c766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c76a:	781b      	ldrb	r3, [r3, #0]
    c76c:	2bff      	cmp	r3, #255	; 0xff
    c76e:	d105      	bne.n	c77c <send_debug+0x4d8>
    c770:	f24c 3319 	movw	r3, #49945	; 0xc319
    c774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c778:	2200      	movs	r2, #0
    c77a:	701a      	strb	r2, [r3, #0]
    c77c:	f242 0339 	movw	r3, #8249	; 0x2039
    c780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c784:	781b      	ldrb	r3, [r3, #0]
    c786:	b2db      	uxtb	r3, r3
    c788:	f003 0310 	and.w	r3, r3, #16
    c78c:	2b00      	cmp	r3, #0
    c78e:	d15a      	bne.n	c846 <send_debug+0x5a2>
    c790:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c798:	781b      	ldrb	r3, [r3, #0]
    c79a:	b2db      	uxtb	r3, r3
    c79c:	461a      	mov	r2, r3
    c79e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a6:	5c9a      	ldrb	r2, [r3, r2]
    c7a8:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b0:	701a      	strb	r2, [r3, #0]
    c7b2:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ba:	2200      	movs	r2, #0
    c7bc:	701a      	strb	r2, [r3, #0]
    c7be:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c6:	781b      	ldrb	r3, [r3, #0]
    c7c8:	b2db      	uxtb	r3, r3
    c7ca:	3301      	adds	r3, #1
    c7cc:	b2da      	uxtb	r2, r3
    c7ce:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d6:	701a      	strb	r2, [r3, #0]
    c7d8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e0:	781b      	ldrb	r3, [r3, #0]
    c7e2:	b2db      	uxtb	r3, r3
    c7e4:	2bff      	cmp	r3, #255	; 0xff
    c7e6:	d105      	bne.n	c7f4 <send_debug+0x550>
    c7e8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f0:	2200      	movs	r2, #0
    c7f2:	701a      	strb	r2, [r3, #0]
    c7f4:	f242 0338 	movw	r3, #8248	; 0x2038
    c7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7fc:	f242 0238 	movw	r2, #8248	; 0x2038
    c800:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c804:	7812      	ldrb	r2, [r2, #0]
    c806:	b2d2      	uxtb	r2, r2
    c808:	f042 0201 	orr.w	r2, r2, #1
    c80c:	b2d2      	uxtb	r2, r2
    c80e:	701a      	strb	r2, [r3, #0]
    c810:	f242 0339 	movw	r3, #8249	; 0x2039
    c814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c818:	f242 0239 	movw	r2, #8249	; 0x2039
    c81c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c820:	7812      	ldrb	r2, [r2, #0]
    c822:	b2d2      	uxtb	r2, r2
    c824:	f042 0210 	orr.w	r2, r2, #16
    c828:	b2d2      	uxtb	r2, r2
    c82a:	701a      	strb	r2, [r3, #0]
    c82c:	e00b      	b.n	c846 <send_debug+0x5a2>
    c82e:	f24c 3318 	movw	r3, #49944	; 0xc318
    c832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c836:	781b      	ldrb	r3, [r3, #0]
    c838:	3301      	adds	r3, #1
    c83a:	b2da      	uxtb	r2, r3
    c83c:	f24c 3318 	movw	r3, #49944	; 0xc318
    c840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c844:	701a      	strb	r2, [r3, #0]
}
    c846:	46bd      	mov	sp, r7
    c848:	f85d 7b04 	ldr.w	r7, [sp], #4
    c84c:	4770      	bx	lr
    c84e:	bf00      	nop

0000c850 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c850:	b480      	push	{r7}
    c852:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c854:	f24c 3311 	movw	r3, #49937	; 0xc311
    c858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c85c:	781a      	ldrb	r2, [r3, #0]
    c85e:	f248 531f 	movw	r3, #34079	; 0x851f
    c862:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c866:	fba3 1302 	umull	r1, r3, r3, r2
    c86a:	095b      	lsrs	r3, r3, #5
    c86c:	2164      	movs	r1, #100	; 0x64
    c86e:	fb01 f303 	mul.w	r3, r1, r3
    c872:	1ad3      	subs	r3, r2, r3
    c874:	b2db      	uxtb	r3, r3
    c876:	2b31      	cmp	r3, #49	; 0x31
    c878:	f040 8395 	bne.w	cfa6 <send_nav_ref+0x756>
    c87c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c884:	781a      	ldrb	r2, [r3, #0]
    c886:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c88e:	781b      	ldrb	r3, [r3, #0]
    c890:	b2db      	uxtb	r3, r3
    c892:	429a      	cmp	r2, r3
    c894:	d313      	bcc.n	c8be <send_nav_ref+0x6e>
    c896:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c89e:	781b      	ldrb	r3, [r3, #0]
    c8a0:	b2db      	uxtb	r3, r3
    c8a2:	461a      	mov	r2, r3
    c8a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ac:	781b      	ldrb	r3, [r3, #0]
    c8ae:	1ad3      	subs	r3, r2, r3
    c8b0:	33ff      	adds	r3, #255	; 0xff
    c8b2:	2b0c      	cmp	r3, #12
    c8b4:	bfd4      	ite	le
    c8b6:	2300      	movle	r3, #0
    c8b8:	2301      	movgt	r3, #1
    c8ba:	b2db      	uxtb	r3, r3
    c8bc:	e011      	b.n	c8e2 <send_nav_ref+0x92>
    c8be:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c6:	781b      	ldrb	r3, [r3, #0]
    c8c8:	b2db      	uxtb	r3, r3
    c8ca:	461a      	mov	r2, r3
    c8cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d4:	781b      	ldrb	r3, [r3, #0]
    c8d6:	1ad3      	subs	r3, r2, r3
    c8d8:	2b0c      	cmp	r3, #12
    c8da:	bfd4      	ite	le
    c8dc:	2300      	movle	r3, #0
    c8de:	2301      	movgt	r3, #1
    c8e0:	b2db      	uxtb	r3, r3
    c8e2:	2b00      	cmp	r3, #0
    c8e4:	f000 8353 	beq.w	cf8e <send_nav_ref+0x73e>
    c8e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8f0:	781b      	ldrb	r3, [r3, #0]
    c8f2:	461a      	mov	r2, r3
    c8f4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8fc:	2105      	movs	r1, #5
    c8fe:	5499      	strb	r1, [r3, r2]
    c900:	f24c 3319 	movw	r3, #49945	; 0xc319
    c904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c908:	781b      	ldrb	r3, [r3, #0]
    c90a:	3301      	adds	r3, #1
    c90c:	b2da      	uxtb	r2, r3
    c90e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c916:	701a      	strb	r2, [r3, #0]
    c918:	f24c 3319 	movw	r3, #49945	; 0xc319
    c91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c920:	781b      	ldrb	r3, [r3, #0]
    c922:	2bff      	cmp	r3, #255	; 0xff
    c924:	d105      	bne.n	c932 <send_nav_ref+0xe2>
    c926:	f24c 3319 	movw	r3, #49945	; 0xc319
    c92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c92e:	2200      	movs	r2, #0
    c930:	701a      	strb	r2, [r3, #0]
    c932:	f24c 3319 	movw	r3, #49945	; 0xc319
    c936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93a:	781b      	ldrb	r3, [r3, #0]
    c93c:	461a      	mov	r2, r3
    c93e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c946:	2109      	movs	r1, #9
    c948:	5499      	strb	r1, [r3, r2]
    c94a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c952:	781b      	ldrb	r3, [r3, #0]
    c954:	3301      	adds	r3, #1
    c956:	b2da      	uxtb	r2, r3
    c958:	f24c 3319 	movw	r3, #49945	; 0xc319
    c95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c960:	701a      	strb	r2, [r3, #0]
    c962:	f24c 3319 	movw	r3, #49945	; 0xc319
    c966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c96a:	781b      	ldrb	r3, [r3, #0]
    c96c:	2bff      	cmp	r3, #255	; 0xff
    c96e:	d105      	bne.n	c97c <send_nav_ref+0x12c>
    c970:	f24c 3319 	movw	r3, #49945	; 0xc319
    c974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c978:	2200      	movs	r2, #0
    c97a:	701a      	strb	r2, [r3, #0]
    c97c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c984:	2209      	movs	r2, #9
    c986:	701a      	strb	r2, [r3, #0]
    c988:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c990:	2209      	movs	r2, #9
    c992:	701a      	strb	r2, [r3, #0]
    c994:	f24c 3319 	movw	r3, #49945	; 0xc319
    c998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c99c:	781b      	ldrb	r3, [r3, #0]
    c99e:	461a      	mov	r2, r3
    c9a0:	f648 1318 	movw	r3, #35096	; 0x8918
    c9a4:	f2c0 0301 	movt	r3, #1
    c9a8:	7819      	ldrb	r1, [r3, #0]
    c9aa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b2:	5499      	strb	r1, [r3, r2]
    c9b4:	f648 1318 	movw	r3, #35096	; 0x8918
    c9b8:	f2c0 0301 	movt	r3, #1
    c9bc:	781a      	ldrb	r2, [r3, #0]
    c9be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9c6:	781b      	ldrb	r3, [r3, #0]
    c9c8:	4413      	add	r3, r2
    c9ca:	b2da      	uxtb	r2, r3
    c9cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d4:	701a      	strb	r2, [r3, #0]
    c9d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9de:	781a      	ldrb	r2, [r3, #0]
    c9e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e8:	781b      	ldrb	r3, [r3, #0]
    c9ea:	4413      	add	r3, r2
    c9ec:	b2da      	uxtb	r2, r3
    c9ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f6:	701a      	strb	r2, [r3, #0]
    c9f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca00:	781b      	ldrb	r3, [r3, #0]
    ca02:	3301      	adds	r3, #1
    ca04:	b2da      	uxtb	r2, r3
    ca06:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0e:	701a      	strb	r2, [r3, #0]
    ca10:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca18:	781b      	ldrb	r3, [r3, #0]
    ca1a:	2bff      	cmp	r3, #255	; 0xff
    ca1c:	d105      	bne.n	ca2a <send_nav_ref+0x1da>
    ca1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca26:	2200      	movs	r2, #0
    ca28:	701a      	strb	r2, [r3, #0]
    ca2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca32:	781b      	ldrb	r3, [r3, #0]
    ca34:	461a      	mov	r2, r3
    ca36:	f648 1318 	movw	r3, #35096	; 0x8918
    ca3a:	f2c0 0301 	movt	r3, #1
    ca3e:	7859      	ldrb	r1, [r3, #1]
    ca40:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ca44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca48:	5499      	strb	r1, [r3, r2]
    ca4a:	4bd2      	ldr	r3, [pc, #840]	; (cd94 <send_nav_ref+0x544>)
    ca4c:	781a      	ldrb	r2, [r3, #0]
    ca4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca56:	781b      	ldrb	r3, [r3, #0]
    ca58:	4413      	add	r3, r2
    ca5a:	b2da      	uxtb	r2, r3
    ca5c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca64:	701a      	strb	r2, [r3, #0]
    ca66:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ca6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca6e:	781a      	ldrb	r2, [r3, #0]
    ca70:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca78:	781b      	ldrb	r3, [r3, #0]
    ca7a:	4413      	add	r3, r2
    ca7c:	b2da      	uxtb	r2, r3
    ca7e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ca82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca86:	701a      	strb	r2, [r3, #0]
    ca88:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca90:	781b      	ldrb	r3, [r3, #0]
    ca92:	3301      	adds	r3, #1
    ca94:	b2da      	uxtb	r2, r3
    ca96:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca9e:	701a      	strb	r2, [r3, #0]
    caa0:	f24c 3319 	movw	r3, #49945	; 0xc319
    caa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa8:	781b      	ldrb	r3, [r3, #0]
    caaa:	2bff      	cmp	r3, #255	; 0xff
    caac:	d105      	bne.n	caba <send_nav_ref+0x26a>
    caae:	f24c 3319 	movw	r3, #49945	; 0xc319
    cab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab6:	2200      	movs	r2, #0
    cab8:	701a      	strb	r2, [r3, #0]
    caba:	f24c 3319 	movw	r3, #49945	; 0xc319
    cabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac2:	781b      	ldrb	r3, [r3, #0]
    cac4:	461a      	mov	r2, r3
    cac6:	f648 1318 	movw	r3, #35096	; 0x8918
    caca:	f2c0 0301 	movt	r3, #1
    cace:	7899      	ldrb	r1, [r3, #2]
    cad0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad8:	5499      	strb	r1, [r3, r2]
    cada:	4baf      	ldr	r3, [pc, #700]	; (cd98 <send_nav_ref+0x548>)
    cadc:	781a      	ldrb	r2, [r3, #0]
    cade:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae6:	781b      	ldrb	r3, [r3, #0]
    cae8:	4413      	add	r3, r2
    caea:	b2da      	uxtb	r2, r3
    caec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    caf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf4:	701a      	strb	r2, [r3, #0]
    caf6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cafe:	781a      	ldrb	r2, [r3, #0]
    cb00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb08:	781b      	ldrb	r3, [r3, #0]
    cb0a:	4413      	add	r3, r2
    cb0c:	b2da      	uxtb	r2, r3
    cb0e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb16:	701a      	strb	r2, [r3, #0]
    cb18:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb20:	781b      	ldrb	r3, [r3, #0]
    cb22:	3301      	adds	r3, #1
    cb24:	b2da      	uxtb	r2, r3
    cb26:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2e:	701a      	strb	r2, [r3, #0]
    cb30:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb38:	781b      	ldrb	r3, [r3, #0]
    cb3a:	2bff      	cmp	r3, #255	; 0xff
    cb3c:	d105      	bne.n	cb4a <send_nav_ref+0x2fa>
    cb3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb46:	2200      	movs	r2, #0
    cb48:	701a      	strb	r2, [r3, #0]
    cb4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb52:	781b      	ldrb	r3, [r3, #0]
    cb54:	461a      	mov	r2, r3
    cb56:	f648 1318 	movw	r3, #35096	; 0x8918
    cb5a:	f2c0 0301 	movt	r3, #1
    cb5e:	78d9      	ldrb	r1, [r3, #3]
    cb60:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb68:	5499      	strb	r1, [r3, r2]
    cb6a:	4b8c      	ldr	r3, [pc, #560]	; (cd9c <send_nav_ref+0x54c>)
    cb6c:	781a      	ldrb	r2, [r3, #0]
    cb6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb76:	781b      	ldrb	r3, [r3, #0]
    cb78:	4413      	add	r3, r2
    cb7a:	b2da      	uxtb	r2, r3
    cb7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb84:	701a      	strb	r2, [r3, #0]
    cb86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb8e:	781a      	ldrb	r2, [r3, #0]
    cb90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb98:	781b      	ldrb	r3, [r3, #0]
    cb9a:	4413      	add	r3, r2
    cb9c:	b2da      	uxtb	r2, r3
    cb9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba6:	701a      	strb	r2, [r3, #0]
    cba8:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb0:	781b      	ldrb	r3, [r3, #0]
    cbb2:	3301      	adds	r3, #1
    cbb4:	b2da      	uxtb	r2, r3
    cbb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbbe:	701a      	strb	r2, [r3, #0]
    cbc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc8:	781b      	ldrb	r3, [r3, #0]
    cbca:	2bff      	cmp	r3, #255	; 0xff
    cbcc:	d105      	bne.n	cbda <send_nav_ref+0x38a>
    cbce:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd6:	2200      	movs	r2, #0
    cbd8:	701a      	strb	r2, [r3, #0]
    cbda:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe2:	781b      	ldrb	r3, [r3, #0]
    cbe4:	461a      	mov	r2, r3
    cbe6:	f648 131c 	movw	r3, #35100	; 0x891c
    cbea:	f2c0 0301 	movt	r3, #1
    cbee:	7819      	ldrb	r1, [r3, #0]
    cbf0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf8:	5499      	strb	r1, [r3, r2]
    cbfa:	f648 131c 	movw	r3, #35100	; 0x891c
    cbfe:	f2c0 0301 	movt	r3, #1
    cc02:	781a      	ldrb	r2, [r3, #0]
    cc04:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc0c:	781b      	ldrb	r3, [r3, #0]
    cc0e:	4413      	add	r3, r2
    cc10:	b2da      	uxtb	r2, r3
    cc12:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc1a:	701a      	strb	r2, [r3, #0]
    cc1c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc24:	781a      	ldrb	r2, [r3, #0]
    cc26:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc2e:	781b      	ldrb	r3, [r3, #0]
    cc30:	4413      	add	r3, r2
    cc32:	b2da      	uxtb	r2, r3
    cc34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc3c:	701a      	strb	r2, [r3, #0]
    cc3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc46:	781b      	ldrb	r3, [r3, #0]
    cc48:	3301      	adds	r3, #1
    cc4a:	b2da      	uxtb	r2, r3
    cc4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc54:	701a      	strb	r2, [r3, #0]
    cc56:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc5e:	781b      	ldrb	r3, [r3, #0]
    cc60:	2bff      	cmp	r3, #255	; 0xff
    cc62:	d105      	bne.n	cc70 <send_nav_ref+0x420>
    cc64:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc6c:	2200      	movs	r2, #0
    cc6e:	701a      	strb	r2, [r3, #0]
    cc70:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc78:	781b      	ldrb	r3, [r3, #0]
    cc7a:	461a      	mov	r2, r3
    cc7c:	f648 131c 	movw	r3, #35100	; 0x891c
    cc80:	f2c0 0301 	movt	r3, #1
    cc84:	7859      	ldrb	r1, [r3, #1]
    cc86:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc8e:	5499      	strb	r1, [r3, r2]
    cc90:	4b43      	ldr	r3, [pc, #268]	; (cda0 <send_nav_ref+0x550>)
    cc92:	781a      	ldrb	r2, [r3, #0]
    cc94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc9c:	781b      	ldrb	r3, [r3, #0]
    cc9e:	4413      	add	r3, r2
    cca0:	b2da      	uxtb	r2, r3
    cca2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccaa:	701a      	strb	r2, [r3, #0]
    ccac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ccb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb4:	781a      	ldrb	r2, [r3, #0]
    ccb6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ccba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccbe:	781b      	ldrb	r3, [r3, #0]
    ccc0:	4413      	add	r3, r2
    ccc2:	b2da      	uxtb	r2, r3
    ccc4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ccc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cccc:	701a      	strb	r2, [r3, #0]
    ccce:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd6:	781b      	ldrb	r3, [r3, #0]
    ccd8:	3301      	adds	r3, #1
    ccda:	b2da      	uxtb	r2, r3
    ccdc:	f24c 3319 	movw	r3, #49945	; 0xc319
    cce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce4:	701a      	strb	r2, [r3, #0]
    cce6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccee:	781b      	ldrb	r3, [r3, #0]
    ccf0:	2bff      	cmp	r3, #255	; 0xff
    ccf2:	d105      	bne.n	cd00 <send_nav_ref+0x4b0>
    ccf4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccfc:	2200      	movs	r2, #0
    ccfe:	701a      	strb	r2, [r3, #0]
    cd00:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd08:	781b      	ldrb	r3, [r3, #0]
    cd0a:	461a      	mov	r2, r3
    cd0c:	f648 131c 	movw	r3, #35100	; 0x891c
    cd10:	f2c0 0301 	movt	r3, #1
    cd14:	7899      	ldrb	r1, [r3, #2]
    cd16:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd1e:	5499      	strb	r1, [r3, r2]
    cd20:	4b20      	ldr	r3, [pc, #128]	; (cda4 <send_nav_ref+0x554>)
    cd22:	781a      	ldrb	r2, [r3, #0]
    cd24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd2c:	781b      	ldrb	r3, [r3, #0]
    cd2e:	4413      	add	r3, r2
    cd30:	b2da      	uxtb	r2, r3
    cd32:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd3a:	701a      	strb	r2, [r3, #0]
    cd3c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd44:	781a      	ldrb	r2, [r3, #0]
    cd46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd4e:	781b      	ldrb	r3, [r3, #0]
    cd50:	4413      	add	r3, r2
    cd52:	b2da      	uxtb	r2, r3
    cd54:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5c:	701a      	strb	r2, [r3, #0]
    cd5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd66:	781b      	ldrb	r3, [r3, #0]
    cd68:	3301      	adds	r3, #1
    cd6a:	b2da      	uxtb	r2, r3
    cd6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd74:	701a      	strb	r2, [r3, #0]
    cd76:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	2bff      	cmp	r3, #255	; 0xff
    cd82:	d111      	bne.n	cda8 <send_nav_ref+0x558>
    cd84:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8c:	2200      	movs	r2, #0
    cd8e:	701a      	strb	r2, [r3, #0]
    cd90:	e00a      	b.n	cda8 <send_nav_ref+0x558>
    cd92:	bf00      	nop
    cd94:	00018919 	.word	0x00018919
    cd98:	0001891a 	.word	0x0001891a
    cd9c:	0001891b 	.word	0x0001891b
    cda0:	0001891d 	.word	0x0001891d
    cda4:	0001891e 	.word	0x0001891e
    cda8:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdb0:	781b      	ldrb	r3, [r3, #0]
    cdb2:	461a      	mov	r2, r3
    cdb4:	f648 131c 	movw	r3, #35100	; 0x891c
    cdb8:	f2c0 0301 	movt	r3, #1
    cdbc:	78d9      	ldrb	r1, [r3, #3]
    cdbe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cdc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc6:	5499      	strb	r1, [r3, r2]
    cdc8:	4b79      	ldr	r3, [pc, #484]	; (cfb0 <send_nav_ref+0x760>)
    cdca:	781a      	ldrb	r2, [r3, #0]
    cdcc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cdd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd4:	781b      	ldrb	r3, [r3, #0]
    cdd6:	4413      	add	r3, r2
    cdd8:	b2da      	uxtb	r2, r3
    cdda:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cdde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cde2:	701a      	strb	r2, [r3, #0]
    cde4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdec:	781a      	ldrb	r2, [r3, #0]
    cdee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cdf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdf6:	781b      	ldrb	r3, [r3, #0]
    cdf8:	4413      	add	r3, r2
    cdfa:	b2da      	uxtb	r2, r3
    cdfc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce04:	701a      	strb	r2, [r3, #0]
    ce06:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce0e:	781b      	ldrb	r3, [r3, #0]
    ce10:	3301      	adds	r3, #1
    ce12:	b2da      	uxtb	r2, r3
    ce14:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce1c:	701a      	strb	r2, [r3, #0]
    ce1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce26:	781b      	ldrb	r3, [r3, #0]
    ce28:	2bff      	cmp	r3, #255	; 0xff
    ce2a:	d105      	bne.n	ce38 <send_nav_ref+0x5e8>
    ce2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce34:	2200      	movs	r2, #0
    ce36:	701a      	strb	r2, [r3, #0]
    ce38:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce40:	781b      	ldrb	r3, [r3, #0]
    ce42:	461a      	mov	r2, r3
    ce44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce4c:	7819      	ldrb	r1, [r3, #0]
    ce4e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ce52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce56:	5499      	strb	r1, [r3, r2]
    ce58:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce60:	781b      	ldrb	r3, [r3, #0]
    ce62:	3301      	adds	r3, #1
    ce64:	b2da      	uxtb	r2, r3
    ce66:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce6e:	701a      	strb	r2, [r3, #0]
    ce70:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce78:	781b      	ldrb	r3, [r3, #0]
    ce7a:	2bff      	cmp	r3, #255	; 0xff
    ce7c:	d105      	bne.n	ce8a <send_nav_ref+0x63a>
    ce7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce86:	2200      	movs	r2, #0
    ce88:	701a      	strb	r2, [r3, #0]
    ce8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce92:	781b      	ldrb	r3, [r3, #0]
    ce94:	461a      	mov	r2, r3
    ce96:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce9e:	7819      	ldrb	r1, [r3, #0]
    cea0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea8:	5499      	strb	r1, [r3, r2]
    ceaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    ceae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceb2:	781b      	ldrb	r3, [r3, #0]
    ceb4:	3301      	adds	r3, #1
    ceb6:	b2da      	uxtb	r2, r3
    ceb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    cebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec0:	701a      	strb	r2, [r3, #0]
    cec2:	f24c 3319 	movw	r3, #49945	; 0xc319
    cec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceca:	781b      	ldrb	r3, [r3, #0]
    cecc:	2bff      	cmp	r3, #255	; 0xff
    cece:	d105      	bne.n	cedc <send_nav_ref+0x68c>
    ced0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ced4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced8:	2200      	movs	r2, #0
    ceda:	701a      	strb	r2, [r3, #0]
    cedc:	f242 0339 	movw	r3, #8249	; 0x2039
    cee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee4:	781b      	ldrb	r3, [r3, #0]
    cee6:	b2db      	uxtb	r3, r3
    cee8:	f003 0310 	and.w	r3, r3, #16
    ceec:	2b00      	cmp	r3, #0
    ceee:	d15a      	bne.n	cfa6 <send_nav_ref+0x756>
    cef0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef8:	781b      	ldrb	r3, [r3, #0]
    cefa:	b2db      	uxtb	r3, r3
    cefc:	461a      	mov	r2, r3
    cefe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cf02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf06:	5c9a      	ldrb	r2, [r3, r2]
    cf08:	f24c 431b 	movw	r3, #50203	; 0xc41b
    cf0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf10:	701a      	strb	r2, [r3, #0]
    cf12:	f24c 431c 	movw	r3, #50204	; 0xc41c
    cf16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf1a:	2200      	movs	r2, #0
    cf1c:	701a      	strb	r2, [r3, #0]
    cf1e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf26:	781b      	ldrb	r3, [r3, #0]
    cf28:	b2db      	uxtb	r3, r3
    cf2a:	3301      	adds	r3, #1
    cf2c:	b2da      	uxtb	r2, r3
    cf2e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf36:	701a      	strb	r2, [r3, #0]
    cf38:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf40:	781b      	ldrb	r3, [r3, #0]
    cf42:	b2db      	uxtb	r3, r3
    cf44:	2bff      	cmp	r3, #255	; 0xff
    cf46:	d105      	bne.n	cf54 <send_nav_ref+0x704>
    cf48:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf50:	2200      	movs	r2, #0
    cf52:	701a      	strb	r2, [r3, #0]
    cf54:	f242 0338 	movw	r3, #8248	; 0x2038
    cf58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf5c:	f242 0238 	movw	r2, #8248	; 0x2038
    cf60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf64:	7812      	ldrb	r2, [r2, #0]
    cf66:	b2d2      	uxtb	r2, r2
    cf68:	f042 0201 	orr.w	r2, r2, #1
    cf6c:	b2d2      	uxtb	r2, r2
    cf6e:	701a      	strb	r2, [r3, #0]
    cf70:	f242 0339 	movw	r3, #8249	; 0x2039
    cf74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf78:	f242 0239 	movw	r2, #8249	; 0x2039
    cf7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf80:	7812      	ldrb	r2, [r2, #0]
    cf82:	b2d2      	uxtb	r2, r2
    cf84:	f042 0210 	orr.w	r2, r2, #16
    cf88:	b2d2      	uxtb	r2, r2
    cf8a:	701a      	strb	r2, [r3, #0]
    cf8c:	e00b      	b.n	cfa6 <send_nav_ref+0x756>
    cf8e:	f24c 3318 	movw	r3, #49944	; 0xc318
    cf92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf96:	781b      	ldrb	r3, [r3, #0]
    cf98:	3301      	adds	r3, #1
    cf9a:	b2da      	uxtb	r2, r3
    cf9c:	f24c 3318 	movw	r3, #49944	; 0xc318
    cfa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfa4:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cfa6:	46bd      	mov	sp, r7
    cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfac:	4770      	bx	lr
    cfae:	bf00      	nop
    cfb0:	0001891f 	.word	0x0001891f

0000cfb4 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cfb4:	b480      	push	{r7}
    cfb6:	b083      	sub	sp, #12
    cfb8:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cfba:	f24c 4320 	movw	r3, #50208	; 0xc420
    cfbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfc2:	8a1b      	ldrh	r3, [r3, #16]
    cfc4:	b21b      	sxth	r3, r3
    cfc6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cfca:	db0d      	blt.n	cfe8 <inflight_calib_mode_update+0x34>
    cfcc:	f24c 4320 	movw	r3, #50208	; 0xc420
    cfd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd4:	8a1b      	ldrh	r3, [r3, #16]
    cfd6:	b21a      	sxth	r2, r3
    cfd8:	f640 437f 	movw	r3, #3199	; 0xc7f
    cfdc:	429a      	cmp	r2, r3
    cfde:	bfd4      	ite	le
    cfe0:	2300      	movle	r3, #0
    cfe2:	2301      	movgt	r3, #1
    cfe4:	b2db      	uxtb	r3, r3
    cfe6:	e000      	b.n	cfea <inflight_calib_mode_update+0x36>
    cfe8:	2302      	movs	r3, #2
    cfea:	71fb      	strb	r3, [r7, #7]
    cfec:	f64c 132c 	movw	r3, #51500	; 0xc92c
    cff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff4:	781b      	ldrb	r3, [r3, #0]
    cff6:	79fa      	ldrb	r2, [r7, #7]
    cff8:	429a      	cmp	r2, r3
    cffa:	d007      	beq.n	d00c <inflight_calib_mode_update+0x58>
    cffc:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d004:	79fa      	ldrb	r2, [r7, #7]
    d006:	701a      	strb	r2, [r3, #0]
    d008:	2301      	movs	r3, #1
    d00a:	e000      	b.n	d00e <inflight_calib_mode_update+0x5a>
    d00c:	2300      	movs	r3, #0
}
    d00e:	4618      	mov	r0, r3
    d010:	370c      	adds	r7, #12
    d012:	46bd      	mov	sp, r7
    d014:	f85d 7b04 	ldr.w	r7, [sp], #4
    d018:	4770      	bx	lr
    d01a:	bf00      	nop

0000d01c <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    d01c:	b580      	push	{r7, lr}
    d01e:	b082      	sub	sp, #8
    d020:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    d022:	f24c 434e 	movw	r3, #50254	; 0xc44e
    d026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d02a:	2201      	movs	r2, #1
    d02c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d02e:	f24c 434e 	movw	r3, #50254	; 0xc44e
    d032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d036:	781b      	ldrb	r3, [r3, #0]
    d038:	b2db      	uxtb	r3, r3
    d03a:	2b00      	cmp	r3, #0
    d03c:	f000 83b8 	beq.w	d7b0 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    d040:	2300      	movs	r3, #0
    d042:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d044:	f7fa fa9c 	bl	7580 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d048:	4b3a      	ldr	r3, [pc, #232]	; (d134 <radio_control_task+0x118>)
    d04a:	781b      	ldrb	r3, [r3, #0]
    d04c:	b2db      	uxtb	r3, r3
    d04e:	f003 0302 	and.w	r3, r3, #2
    d052:	2b00      	cmp	r3, #0
    d054:	d00d      	beq.n	d072 <radio_control_task+0x56>
    d056:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d05e:	781b      	ldrb	r3, [r3, #0]
    d060:	2b01      	cmp	r3, #1
    d062:	d00d      	beq.n	d080 <radio_control_task+0x64>
    d064:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d06c:	781b      	ldrb	r3, [r3, #0]
    d06e:	2b00      	cmp	r3, #0
    d070:	d006      	beq.n	d080 <radio_control_task+0x64>
    d072:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
    d076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d07a:	781b      	ldrb	r3, [r3, #0]
    d07c:	2b00      	cmp	r3, #0
    d07e:	d007      	beq.n	d090 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d080:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d088:	2203      	movs	r2, #3
    d08a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d08c:	2301      	movs	r3, #1
    d08e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d090:	f7fa f950 	bl	7334 <pprz_mode_update>
    d094:	4603      	mov	r3, r0
    d096:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d098:	79fa      	ldrb	r2, [r7, #7]
    d09a:	79bb      	ldrb	r3, [r7, #6]
    d09c:	4313      	orrs	r3, r2
    d09e:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d0a0:	f7fa f994 	bl	73cc <ir_estim_mode_update>
    d0a4:	4603      	mov	r3, r0
    d0a6:	461a      	mov	r2, r3
    d0a8:	79fb      	ldrb	r3, [r7, #7]
    d0aa:	4313      	orrs	r3, r2
    d0ac:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d0ae:	f7ff ff81 	bl	cfb4 <inflight_calib_mode_update>
    d0b2:	4603      	mov	r3, r0
    d0b4:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d0b6:	797b      	ldrb	r3, [r7, #5]
    d0b8:	2b00      	cmp	r3, #0
    d0ba:	d102      	bne.n	d0c2 <radio_control_task+0xa6>
    d0bc:	79bb      	ldrb	r3, [r7, #6]
    d0be:	2b00      	cmp	r3, #0
    d0c0:	d001      	beq.n	d0c6 <radio_control_task+0xaa>
    d0c2:	2301      	movs	r3, #1
    d0c4:	e000      	b.n	d0c8 <radio_control_task+0xac>
    d0c6:	2300      	movs	r3, #0
    d0c8:	b2db      	uxtb	r3, r3
    d0ca:	4618      	mov	r0, r3
    d0cc:	f008 fba0 	bl	15810 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d0d0:	79fa      	ldrb	r2, [r7, #7]
    d0d2:	797b      	ldrb	r3, [r7, #5]
    d0d4:	4313      	orrs	r3, r2
    d0d6:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d0d8:	f7fa f9a0 	bl	741c <mcu1_status_update>
    d0dc:	4603      	mov	r3, r0
    d0de:	461a      	mov	r2, r3
    d0e0:	79fb      	ldrb	r3, [r7, #7]
    d0e2:	4313      	orrs	r3, r2
    d0e4:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d0e6:	2301      	movs	r3, #1
    d0e8:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d0ea:	79fb      	ldrb	r3, [r7, #7]
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	f000 82bc 	beq.w	d66a <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d0f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0fa:	781a      	ldrb	r2, [r3, #0]
    d0fc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d104:	781b      	ldrb	r3, [r3, #0]
    d106:	b2db      	uxtb	r3, r3
    d108:	429a      	cmp	r2, r3
    d10a:	d315      	bcc.n	d138 <radio_control_task+0x11c>
    d10c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d114:	781b      	ldrb	r3, [r3, #0]
    d116:	b2db      	uxtb	r3, r3
    d118:	461a      	mov	r2, r3
    d11a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d122:	781b      	ldrb	r3, [r3, #0]
    d124:	1ad3      	subs	r3, r2, r3
    d126:	33ff      	adds	r3, #255	; 0xff
    d128:	2b09      	cmp	r3, #9
    d12a:	bfd4      	ite	le
    d12c:	2300      	movle	r3, #0
    d12e:	2301      	movgt	r3, #1
    d130:	b2db      	uxtb	r3, r3
    d132:	e013      	b.n	d15c <radio_control_task+0x140>
    d134:	2004c433 	.word	0x2004c433
    d138:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d140:	781b      	ldrb	r3, [r3, #0]
    d142:	b2db      	uxtb	r3, r3
    d144:	461a      	mov	r2, r3
    d146:	f24c 3319 	movw	r3, #49945	; 0xc319
    d14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d14e:	781b      	ldrb	r3, [r3, #0]
    d150:	1ad3      	subs	r3, r2, r3
    d152:	2b09      	cmp	r3, #9
    d154:	bfd4      	ite	le
    d156:	2300      	movle	r3, #0
    d158:	2301      	movgt	r3, #1
    d15a:	b2db      	uxtb	r3, r3
    d15c:	2b00      	cmp	r3, #0
    d15e:	f000 8278 	beq.w	d652 <radio_control_task+0x636>
    d162:	f24c 3319 	movw	r3, #49945	; 0xc319
    d166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d16a:	781b      	ldrb	r3, [r3, #0]
    d16c:	461a      	mov	r2, r3
    d16e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d176:	2105      	movs	r1, #5
    d178:	5499      	strb	r1, [r3, r2]
    d17a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d182:	781b      	ldrb	r3, [r3, #0]
    d184:	3301      	adds	r3, #1
    d186:	b2da      	uxtb	r2, r3
    d188:	f24c 3319 	movw	r3, #49945	; 0xc319
    d18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d190:	701a      	strb	r2, [r3, #0]
    d192:	f24c 3319 	movw	r3, #49945	; 0xc319
    d196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d19a:	781b      	ldrb	r3, [r3, #0]
    d19c:	2bff      	cmp	r3, #255	; 0xff
    d19e:	d105      	bne.n	d1ac <radio_control_task+0x190>
    d1a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a8:	2200      	movs	r2, #0
    d1aa:	701a      	strb	r2, [r3, #0]
    d1ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1b4:	781b      	ldrb	r3, [r3, #0]
    d1b6:	461a      	mov	r2, r3
    d1b8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c0:	210b      	movs	r1, #11
    d1c2:	5499      	strb	r1, [r3, r2]
    d1c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1cc:	781b      	ldrb	r3, [r3, #0]
    d1ce:	3301      	adds	r3, #1
    d1d0:	b2da      	uxtb	r2, r3
    d1d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1da:	701a      	strb	r2, [r3, #0]
    d1dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e4:	781b      	ldrb	r3, [r3, #0]
    d1e6:	2bff      	cmp	r3, #255	; 0xff
    d1e8:	d105      	bne.n	d1f6 <radio_control_task+0x1da>
    d1ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f2:	2200      	movs	r2, #0
    d1f4:	701a      	strb	r2, [r3, #0]
    d1f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1fe:	220b      	movs	r2, #11
    d200:	701a      	strb	r2, [r3, #0]
    d202:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d20a:	220b      	movs	r2, #11
    d20c:	701a      	strb	r2, [r3, #0]
    d20e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d216:	781b      	ldrb	r3, [r3, #0]
    d218:	461a      	mov	r2, r3
    d21a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d222:	7819      	ldrb	r1, [r3, #0]
    d224:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d22c:	5499      	strb	r1, [r3, r2]
    d22e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d236:	781a      	ldrb	r2, [r3, #0]
    d238:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d240:	781b      	ldrb	r3, [r3, #0]
    d242:	4413      	add	r3, r2
    d244:	b2da      	uxtb	r2, r3
    d246:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d24e:	701a      	strb	r2, [r3, #0]
    d250:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d258:	781a      	ldrb	r2, [r3, #0]
    d25a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d262:	781b      	ldrb	r3, [r3, #0]
    d264:	4413      	add	r3, r2
    d266:	b2da      	uxtb	r2, r3
    d268:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d270:	701a      	strb	r2, [r3, #0]
    d272:	f24c 3319 	movw	r3, #49945	; 0xc319
    d276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d27a:	781b      	ldrb	r3, [r3, #0]
    d27c:	3301      	adds	r3, #1
    d27e:	b2da      	uxtb	r2, r3
    d280:	f24c 3319 	movw	r3, #49945	; 0xc319
    d284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d288:	701a      	strb	r2, [r3, #0]
    d28a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d292:	781b      	ldrb	r3, [r3, #0]
    d294:	2bff      	cmp	r3, #255	; 0xff
    d296:	d105      	bne.n	d2a4 <radio_control_task+0x288>
    d298:	f24c 3319 	movw	r3, #49945	; 0xc319
    d29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a0:	2200      	movs	r2, #0
    d2a2:	701a      	strb	r2, [r3, #0]
    d2a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ac:	781b      	ldrb	r3, [r3, #0]
    d2ae:	461a      	mov	r2, r3
    d2b0:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b8:	7819      	ldrb	r1, [r3, #0]
    d2ba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c2:	5499      	strb	r1, [r3, r2]
    d2c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2cc:	781a      	ldrb	r2, [r3, #0]
    d2ce:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d6:	781b      	ldrb	r3, [r3, #0]
    d2d8:	4413      	add	r3, r2
    d2da:	b2da      	uxtb	r2, r3
    d2dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e4:	701a      	strb	r2, [r3, #0]
    d2e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d2ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ee:	781a      	ldrb	r2, [r3, #0]
    d2f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f8:	781b      	ldrb	r3, [r3, #0]
    d2fa:	4413      	add	r3, r2
    d2fc:	b2da      	uxtb	r2, r3
    d2fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d306:	701a      	strb	r2, [r3, #0]
    d308:	f24c 3319 	movw	r3, #49945	; 0xc319
    d30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d310:	781b      	ldrb	r3, [r3, #0]
    d312:	3301      	adds	r3, #1
    d314:	b2da      	uxtb	r2, r3
    d316:	f24c 3319 	movw	r3, #49945	; 0xc319
    d31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d31e:	701a      	strb	r2, [r3, #0]
    d320:	f24c 3319 	movw	r3, #49945	; 0xc319
    d324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d328:	781b      	ldrb	r3, [r3, #0]
    d32a:	2bff      	cmp	r3, #255	; 0xff
    d32c:	d105      	bne.n	d33a <radio_control_task+0x31e>
    d32e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d336:	2200      	movs	r2, #0
    d338:	701a      	strb	r2, [r3, #0]
    d33a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d342:	781b      	ldrb	r3, [r3, #0]
    d344:	461a      	mov	r2, r3
    d346:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d34e:	7819      	ldrb	r1, [r3, #0]
    d350:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d358:	5499      	strb	r1, [r3, r2]
    d35a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d362:	781a      	ldrb	r2, [r3, #0]
    d364:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d36c:	781b      	ldrb	r3, [r3, #0]
    d36e:	4413      	add	r3, r2
    d370:	b2da      	uxtb	r2, r3
    d372:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d37a:	701a      	strb	r2, [r3, #0]
    d37c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d384:	781a      	ldrb	r2, [r3, #0]
    d386:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d38e:	781b      	ldrb	r3, [r3, #0]
    d390:	4413      	add	r3, r2
    d392:	b2da      	uxtb	r2, r3
    d394:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d39c:	701a      	strb	r2, [r3, #0]
    d39e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a6:	781b      	ldrb	r3, [r3, #0]
    d3a8:	3301      	adds	r3, #1
    d3aa:	b2da      	uxtb	r2, r3
    d3ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b4:	701a      	strb	r2, [r3, #0]
    d3b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3be:	781b      	ldrb	r3, [r3, #0]
    d3c0:	2bff      	cmp	r3, #255	; 0xff
    d3c2:	d105      	bne.n	d3d0 <radio_control_task+0x3b4>
    d3c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3cc:	2200      	movs	r2, #0
    d3ce:	701a      	strb	r2, [r3, #0]
    d3d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d8:	781b      	ldrb	r3, [r3, #0]
    d3da:	461a      	mov	r2, r3
    d3dc:	f24c 3303 	movw	r3, #49923	; 0xc303
    d3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e4:	7819      	ldrb	r1, [r3, #0]
    d3e6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ee:	5499      	strb	r1, [r3, r2]
    d3f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f8:	781a      	ldrb	r2, [r3, #0]
    d3fa:	f24c 3303 	movw	r3, #49923	; 0xc303
    d3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d402:	781b      	ldrb	r3, [r3, #0]
    d404:	4413      	add	r3, r2
    d406:	b2da      	uxtb	r2, r3
    d408:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d410:	701a      	strb	r2, [r3, #0]
    d412:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41a:	781a      	ldrb	r2, [r3, #0]
    d41c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d424:	781b      	ldrb	r3, [r3, #0]
    d426:	4413      	add	r3, r2
    d428:	b2da      	uxtb	r2, r3
    d42a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d432:	701a      	strb	r2, [r3, #0]
    d434:	f24c 3319 	movw	r3, #49945	; 0xc319
    d438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43c:	781b      	ldrb	r3, [r3, #0]
    d43e:	3301      	adds	r3, #1
    d440:	b2da      	uxtb	r2, r3
    d442:	f24c 3319 	movw	r3, #49945	; 0xc319
    d446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d44a:	701a      	strb	r2, [r3, #0]
    d44c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d454:	781b      	ldrb	r3, [r3, #0]
    d456:	2bff      	cmp	r3, #255	; 0xff
    d458:	d105      	bne.n	d466 <radio_control_task+0x44a>
    d45a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d462:	2200      	movs	r2, #0
    d464:	701a      	strb	r2, [r3, #0]
    d466:	f24c 3319 	movw	r3, #49945	; 0xc319
    d46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46e:	781b      	ldrb	r3, [r3, #0]
    d470:	461a      	mov	r2, r3
    d472:	f240 533c 	movw	r3, #1340	; 0x53c
    d476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d47a:	7819      	ldrb	r1, [r3, #0]
    d47c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d484:	5499      	strb	r1, [r3, r2]
    d486:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d48e:	781a      	ldrb	r2, [r3, #0]
    d490:	f240 533c 	movw	r3, #1340	; 0x53c
    d494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d498:	781b      	ldrb	r3, [r3, #0]
    d49a:	4413      	add	r3, r2
    d49c:	b2da      	uxtb	r2, r3
    d49e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a6:	701a      	strb	r2, [r3, #0]
    d4a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b0:	781a      	ldrb	r2, [r3, #0]
    d4b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ba:	781b      	ldrb	r3, [r3, #0]
    d4bc:	4413      	add	r3, r2
    d4be:	b2da      	uxtb	r2, r3
    d4c0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c8:	701a      	strb	r2, [r3, #0]
    d4ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d2:	781b      	ldrb	r3, [r3, #0]
    d4d4:	3301      	adds	r3, #1
    d4d6:	b2da      	uxtb	r2, r3
    d4d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e0:	701a      	strb	r2, [r3, #0]
    d4e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ea:	781b      	ldrb	r3, [r3, #0]
    d4ec:	2bff      	cmp	r3, #255	; 0xff
    d4ee:	d105      	bne.n	d4fc <radio_control_task+0x4e0>
    d4f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f8:	2200      	movs	r2, #0
    d4fa:	701a      	strb	r2, [r3, #0]
    d4fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d504:	781b      	ldrb	r3, [r3, #0]
    d506:	461a      	mov	r2, r3
    d508:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d510:	7819      	ldrb	r1, [r3, #0]
    d512:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d51a:	5499      	strb	r1, [r3, r2]
    d51c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d524:	781b      	ldrb	r3, [r3, #0]
    d526:	3301      	adds	r3, #1
    d528:	b2da      	uxtb	r2, r3
    d52a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d532:	701a      	strb	r2, [r3, #0]
    d534:	f24c 3319 	movw	r3, #49945	; 0xc319
    d538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	2bff      	cmp	r3, #255	; 0xff
    d540:	d105      	bne.n	d54e <radio_control_task+0x532>
    d542:	f24c 3319 	movw	r3, #49945	; 0xc319
    d546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d54a:	2200      	movs	r2, #0
    d54c:	701a      	strb	r2, [r3, #0]
    d54e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d556:	781b      	ldrb	r3, [r3, #0]
    d558:	461a      	mov	r2, r3
    d55a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d562:	7819      	ldrb	r1, [r3, #0]
    d564:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d56c:	5499      	strb	r1, [r3, r2]
    d56e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d576:	781b      	ldrb	r3, [r3, #0]
    d578:	3301      	adds	r3, #1
    d57a:	b2da      	uxtb	r2, r3
    d57c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d584:	701a      	strb	r2, [r3, #0]
    d586:	f24c 3319 	movw	r3, #49945	; 0xc319
    d58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d58e:	781b      	ldrb	r3, [r3, #0]
    d590:	2bff      	cmp	r3, #255	; 0xff
    d592:	d105      	bne.n	d5a0 <radio_control_task+0x584>
    d594:	f24c 3319 	movw	r3, #49945	; 0xc319
    d598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d59c:	2200      	movs	r2, #0
    d59e:	701a      	strb	r2, [r3, #0]
    d5a0:	f242 0339 	movw	r3, #8249	; 0x2039
    d5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5a8:	781b      	ldrb	r3, [r3, #0]
    d5aa:	b2db      	uxtb	r3, r3
    d5ac:	f003 0310 	and.w	r3, r3, #16
    d5b0:	2b00      	cmp	r3, #0
    d5b2:	d15a      	bne.n	d66a <radio_control_task+0x64e>
    d5b4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5bc:	781b      	ldrb	r3, [r3, #0]
    d5be:	b2db      	uxtb	r3, r3
    d5c0:	461a      	mov	r2, r3
    d5c2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ca:	5c9a      	ldrb	r2, [r3, r2]
    d5cc:	f24c 431b 	movw	r3, #50203	; 0xc41b
    d5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d4:	701a      	strb	r2, [r3, #0]
    d5d6:	f24c 431c 	movw	r3, #50204	; 0xc41c
    d5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5de:	2200      	movs	r2, #0
    d5e0:	701a      	strb	r2, [r3, #0]
    d5e2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ea:	781b      	ldrb	r3, [r3, #0]
    d5ec:	b2db      	uxtb	r3, r3
    d5ee:	3301      	adds	r3, #1
    d5f0:	b2da      	uxtb	r2, r3
    d5f2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5fa:	701a      	strb	r2, [r3, #0]
    d5fc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d604:	781b      	ldrb	r3, [r3, #0]
    d606:	b2db      	uxtb	r3, r3
    d608:	2bff      	cmp	r3, #255	; 0xff
    d60a:	d105      	bne.n	d618 <radio_control_task+0x5fc>
    d60c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d614:	2200      	movs	r2, #0
    d616:	701a      	strb	r2, [r3, #0]
    d618:	f242 0338 	movw	r3, #8248	; 0x2038
    d61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d620:	f242 0238 	movw	r2, #8248	; 0x2038
    d624:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d628:	7812      	ldrb	r2, [r2, #0]
    d62a:	b2d2      	uxtb	r2, r2
    d62c:	f042 0201 	orr.w	r2, r2, #1
    d630:	b2d2      	uxtb	r2, r2
    d632:	701a      	strb	r2, [r3, #0]
    d634:	f242 0339 	movw	r3, #8249	; 0x2039
    d638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d63c:	f242 0239 	movw	r2, #8249	; 0x2039
    d640:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d644:	7812      	ldrb	r2, [r2, #0]
    d646:	b2d2      	uxtb	r2, r2
    d648:	f042 0210 	orr.w	r2, r2, #16
    d64c:	b2d2      	uxtb	r2, r2
    d64e:	701a      	strb	r2, [r3, #0]
    d650:	e00b      	b.n	d66a <radio_control_task+0x64e>
    d652:	f24c 3318 	movw	r3, #49944	; 0xc318
    d656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d65a:	781b      	ldrb	r3, [r3, #0]
    d65c:	3301      	adds	r3, #1
    d65e:	b2da      	uxtb	r2, r3
    d660:	f24c 3318 	movw	r3, #49944	; 0xc318
    d664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d668:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d66a:	f24c 4320 	movw	r3, #50208	; 0xc420
    d66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d672:	885b      	ldrh	r3, [r3, #2]
    d674:	b21b      	sxth	r3, r3
    d676:	4618      	mov	r0, r3
    d678:	f00a fe0a 	bl	18290 <__aeabi_i2f>
    d67c:	4603      	mov	r3, r0
    d67e:	4618      	mov	r0, r3
    d680:	f04f 0100 	mov.w	r1, #0
    d684:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d688:	f00a ff0a 	bl	184a0 <__aeabi_fdiv>
    d68c:	4603      	mov	r3, r0
    d68e:	4618      	mov	r0, r3
    d690:	f00a f9be 	bl	17a10 <__aeabi_f2d>
    d694:	4602      	mov	r2, r0
    d696:	460b      	mov	r3, r1
    d698:	4610      	mov	r0, r2
    d69a:	4619      	mov	r1, r3
    d69c:	a346      	add	r3, pc, #280	; (adr r3, d7b8 <radio_control_task+0x79c>)
    d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d6a2:	f00a fa09 	bl	17ab8 <__aeabi_dmul>
    d6a6:	4602      	mov	r2, r0
    d6a8:	460b      	mov	r3, r1
    d6aa:	4610      	mov	r0, r2
    d6ac:	4619      	mov	r1, r3
    d6ae:	f04f 0200 	mov.w	r2, #0
    d6b2:	f04f 0300 	mov.w	r3, #0
    d6b6:	f00a f84d 	bl	17754 <__adddf3>
    d6ba:	4602      	mov	r2, r0
    d6bc:	460b      	mov	r3, r1
    d6be:	4610      	mov	r0, r2
    d6c0:	4619      	mov	r1, r3
    d6c2:	f00a fcdb 	bl	1807c <__aeabi_d2f>
    d6c6:	4602      	mov	r2, r0
    d6c8:	f24c 6344 	movw	r3, #50756	; 0xc644
    d6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d0:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d6d2:	f24c 4320 	movw	r3, #50208	; 0xc420
    d6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6da:	889b      	ldrh	r3, [r3, #4]
    d6dc:	b21b      	sxth	r3, r3
    d6de:	4618      	mov	r0, r3
    d6e0:	f00a fdd6 	bl	18290 <__aeabi_i2f>
    d6e4:	4603      	mov	r3, r0
    d6e6:	4618      	mov	r0, r3
    d6e8:	f04f 0100 	mov.w	r1, #0
    d6ec:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d6f0:	f00a fed6 	bl	184a0 <__aeabi_fdiv>
    d6f4:	4603      	mov	r3, r0
    d6f6:	4618      	mov	r0, r3
    d6f8:	f00a f98a 	bl	17a10 <__aeabi_f2d>
    d6fc:	4602      	mov	r2, r0
    d6fe:	460b      	mov	r3, r1
    d700:	4610      	mov	r0, r2
    d702:	4619      	mov	r1, r3
    d704:	f04f 0200 	mov.w	r2, #0
    d708:	f04f 0300 	mov.w	r3, #0
    d70c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d710:	f00a f9d2 	bl	17ab8 <__aeabi_dmul>
    d714:	4602      	mov	r2, r0
    d716:	460b      	mov	r3, r1
    d718:	4610      	mov	r0, r2
    d71a:	4619      	mov	r1, r3
    d71c:	f04f 0200 	mov.w	r2, #0
    d720:	f04f 0300 	mov.w	r3, #0
    d724:	f00a f816 	bl	17754 <__adddf3>
    d728:	4602      	mov	r2, r0
    d72a:	460b      	mov	r3, r1
    d72c:	4610      	mov	r0, r2
    d72e:	4619      	mov	r1, r3
    d730:	f00a fca4 	bl	1807c <__aeabi_d2f>
    d734:	4602      	mov	r2, r0
    d736:	f24c 6348 	movw	r3, #50760	; 0xc648
    d73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d73e:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d740:	f24c 4320 	movw	r3, #50208	; 0xc420
    d744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d748:	881a      	ldrh	r2, [r3, #0]
    d74a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d752:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d754:	f24c 4320 	movw	r3, #50208	; 0xc420
    d758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d75c:	7c9a      	ldrb	r2, [r3, #18]
    d75e:	f24c 3304 	movw	r3, #49924	; 0xc304
    d762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d766:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d768:	f24c 4320 	movw	r3, #50208	; 0xc420
    d76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d770:	7d5a      	ldrb	r2, [r3, #21]
    d772:	f24c 3302 	movw	r3, #49922	; 0xc302
    d776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d77a:	701a      	strb	r2, [r3, #0]

    events_update();
    d77c:	f7f9 fe7e 	bl	747c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d780:	f7f8 fc7e 	bl	6080 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d784:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d78c:	781b      	ldrb	r3, [r3, #0]
    d78e:	2b02      	cmp	r3, #2
    d790:	d10e      	bne.n	d7b0 <radio_control_task+0x794>
    d792:	f24c 4320 	movw	r3, #50208	; 0xc420
    d796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d79a:	881b      	ldrh	r3, [r3, #0]
    d79c:	b21b      	sxth	r3, r3
    d79e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d7a2:	dd05      	ble.n	d7b0 <radio_control_task+0x794>
	launch = TRUE;
    d7a4:	f24c 3310 	movw	r3, #49936	; 0xc310
    d7a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ac:	2201      	movs	r2, #1
    d7ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d7b0:	3708      	adds	r7, #8
    d7b2:	46bd      	mov	sp, r7
    d7b4:	bd80      	pop	{r7, pc}
    d7b6:	bf00      	nop
    d7b8:	33333333 	.word	0x33333333
    d7bc:	bfe33333 	.word	0xbfe33333

0000d7c0 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d7c0:	b580      	push	{r7, lr}
    d7c2:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d7c4:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    d7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7cc:	2203      	movs	r2, #3
    d7ce:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d7d0:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d8:	781b      	ldrb	r3, [r3, #0]
    d7da:	2b03      	cmp	r3, #3
    d7dc:	d102      	bne.n	d7e4 <navigation_update+0x24>
    nav_home();
    d7de:	f007 fa9b 	bl	14d18 <nav_home>
    d7e2:	e001      	b.n	d7e8 <navigation_update+0x28>
  else
    nav_update();
    d7e4:	f007 fabe 	bl	14d64 <nav_update>
}
    d7e8:	bd80      	pop	{r7, pc}
    d7ea:	bf00      	nop

0000d7ec <send_nav_values>:

void send_nav_values(void){
    d7ec:	b480      	push	{r7}
    d7ee:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d7f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f8:	781a      	ldrb	r2, [r3, #0]
    d7fa:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d802:	781b      	ldrb	r3, [r3, #0]
    d804:	b2db      	uxtb	r3, r3
    d806:	429a      	cmp	r2, r3
    d808:	d313      	bcc.n	d832 <send_nav_values+0x46>
    d80a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d812:	781b      	ldrb	r3, [r3, #0]
    d814:	b2db      	uxtb	r3, r3
    d816:	461a      	mov	r2, r3
    d818:	f24c 3319 	movw	r3, #49945	; 0xc319
    d81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d820:	781b      	ldrb	r3, [r3, #0]
    d822:	1ad3      	subs	r3, r2, r3
    d824:	33ff      	adds	r3, #255	; 0xff
    d826:	2b1e      	cmp	r3, #30
    d828:	bfd4      	ite	le
    d82a:	2300      	movle	r3, #0
    d82c:	2301      	movgt	r3, #1
    d82e:	b2db      	uxtb	r3, r3
    d830:	e011      	b.n	d856 <send_nav_values+0x6a>
    d832:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83a:	781b      	ldrb	r3, [r3, #0]
    d83c:	b2db      	uxtb	r3, r3
    d83e:	461a      	mov	r2, r3
    d840:	f24c 3319 	movw	r3, #49945	; 0xc319
    d844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d848:	781b      	ldrb	r3, [r3, #0]
    d84a:	1ad3      	subs	r3, r2, r3
    d84c:	2b1e      	cmp	r3, #30
    d84e:	bfd4      	ite	le
    d850:	2300      	movle	r3, #0
    d852:	2301      	movgt	r3, #1
    d854:	b2db      	uxtb	r3, r3
    d856:	2b00      	cmp	r3, #0
    d858:	f001 8094 	beq.w	e984 <send_nav_values+0x1198>
    d85c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d864:	781b      	ldrb	r3, [r3, #0]
    d866:	461a      	mov	r2, r3
    d868:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d870:	2105      	movs	r1, #5
    d872:	5499      	strb	r1, [r3, r2]
    d874:	f24c 3319 	movw	r3, #49945	; 0xc319
    d878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d87c:	781b      	ldrb	r3, [r3, #0]
    d87e:	3301      	adds	r3, #1
    d880:	b2da      	uxtb	r2, r3
    d882:	f24c 3319 	movw	r3, #49945	; 0xc319
    d886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d88a:	701a      	strb	r2, [r3, #0]
    d88c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d894:	781b      	ldrb	r3, [r3, #0]
    d896:	2bff      	cmp	r3, #255	; 0xff
    d898:	d105      	bne.n	d8a6 <send_nav_values+0xba>
    d89a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a2:	2200      	movs	r2, #0
    d8a4:	701a      	strb	r2, [r3, #0]
    d8a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ae:	781b      	ldrb	r3, [r3, #0]
    d8b0:	461a      	mov	r2, r3
    d8b2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d8b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ba:	210a      	movs	r1, #10
    d8bc:	5499      	strb	r1, [r3, r2]
    d8be:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c6:	781b      	ldrb	r3, [r3, #0]
    d8c8:	3301      	adds	r3, #1
    d8ca:	b2da      	uxtb	r2, r3
    d8cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d4:	701a      	strb	r2, [r3, #0]
    d8d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8de:	781b      	ldrb	r3, [r3, #0]
    d8e0:	2bff      	cmp	r3, #255	; 0xff
    d8e2:	d105      	bne.n	d8f0 <send_nav_values+0x104>
    d8e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ec:	2200      	movs	r2, #0
    d8ee:	701a      	strb	r2, [r3, #0]
    d8f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f8:	220a      	movs	r2, #10
    d8fa:	701a      	strb	r2, [r3, #0]
    d8fc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d904:	220a      	movs	r2, #10
    d906:	701a      	strb	r2, [r3, #0]
    d908:	f24c 3319 	movw	r3, #49945	; 0xc319
    d90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d910:	781b      	ldrb	r3, [r3, #0]
    d912:	461a      	mov	r2, r3
    d914:	f24c 6371 	movw	r3, #50801	; 0xc671
    d918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d91c:	7819      	ldrb	r1, [r3, #0]
    d91e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d926:	5499      	strb	r1, [r3, r2]
    d928:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d930:	781a      	ldrb	r2, [r3, #0]
    d932:	f24c 6371 	movw	r3, #50801	; 0xc671
    d936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d93a:	781b      	ldrb	r3, [r3, #0]
    d93c:	4413      	add	r3, r2
    d93e:	b2da      	uxtb	r2, r3
    d940:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d948:	701a      	strb	r2, [r3, #0]
    d94a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d952:	781a      	ldrb	r2, [r3, #0]
    d954:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d95c:	781b      	ldrb	r3, [r3, #0]
    d95e:	4413      	add	r3, r2
    d960:	b2da      	uxtb	r2, r3
    d962:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d96a:	701a      	strb	r2, [r3, #0]
    d96c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d974:	781b      	ldrb	r3, [r3, #0]
    d976:	3301      	adds	r3, #1
    d978:	b2da      	uxtb	r2, r3
    d97a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d97e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d982:	701a      	strb	r2, [r3, #0]
    d984:	f24c 3319 	movw	r3, #49945	; 0xc319
    d988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98c:	781b      	ldrb	r3, [r3, #0]
    d98e:	2bff      	cmp	r3, #255	; 0xff
    d990:	d105      	bne.n	d99e <send_nav_values+0x1b2>
    d992:	f24c 3319 	movw	r3, #49945	; 0xc319
    d996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d99a:	2200      	movs	r2, #0
    d99c:	701a      	strb	r2, [r3, #0]
    d99e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a6:	781b      	ldrb	r3, [r3, #0]
    d9a8:	461a      	mov	r2, r3
    d9aa:	f24c 6370 	movw	r3, #50800	; 0xc670
    d9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b2:	7819      	ldrb	r1, [r3, #0]
    d9b4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9bc:	5499      	strb	r1, [r3, r2]
    d9be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c6:	781a      	ldrb	r2, [r3, #0]
    d9c8:	f24c 6370 	movw	r3, #50800	; 0xc670
    d9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d0:	781b      	ldrb	r3, [r3, #0]
    d9d2:	4413      	add	r3, r2
    d9d4:	b2da      	uxtb	r2, r3
    d9d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9de:	701a      	strb	r2, [r3, #0]
    d9e0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e8:	781a      	ldrb	r2, [r3, #0]
    d9ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f2:	781b      	ldrb	r3, [r3, #0]
    d9f4:	4413      	add	r3, r2
    d9f6:	b2da      	uxtb	r2, r3
    d9f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da00:	701a      	strb	r2, [r3, #0]
    da02:	f24c 3319 	movw	r3, #49945	; 0xc319
    da06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0a:	781b      	ldrb	r3, [r3, #0]
    da0c:	3301      	adds	r3, #1
    da0e:	b2da      	uxtb	r2, r3
    da10:	f24c 3319 	movw	r3, #49945	; 0xc319
    da14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da18:	701a      	strb	r2, [r3, #0]
    da1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    da1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da22:	781b      	ldrb	r3, [r3, #0]
    da24:	2bff      	cmp	r3, #255	; 0xff
    da26:	d105      	bne.n	da34 <send_nav_values+0x248>
    da28:	f24c 3319 	movw	r3, #49945	; 0xc319
    da2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da30:	2200      	movs	r2, #0
    da32:	701a      	strb	r2, [r3, #0]
    da34:	f24c 3319 	movw	r3, #49945	; 0xc319
    da38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da3c:	781b      	ldrb	r3, [r3, #0]
    da3e:	461a      	mov	r2, r3
    da40:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    da44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da48:	7819      	ldrb	r1, [r3, #0]
    da4a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    da4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da52:	5499      	strb	r1, [r3, r2]
    da54:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    da58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da5c:	781a      	ldrb	r2, [r3, #0]
    da5e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da66:	781b      	ldrb	r3, [r3, #0]
    da68:	4413      	add	r3, r2
    da6a:	b2da      	uxtb	r2, r3
    da6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da74:	701a      	strb	r2, [r3, #0]
    da76:	f24c 431e 	movw	r3, #50206	; 0xc41e
    da7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da7e:	781a      	ldrb	r2, [r3, #0]
    da80:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da88:	781b      	ldrb	r3, [r3, #0]
    da8a:	4413      	add	r3, r2
    da8c:	b2da      	uxtb	r2, r3
    da8e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    da92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da96:	701a      	strb	r2, [r3, #0]
    da98:	f24c 3319 	movw	r3, #49945	; 0xc319
    da9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa0:	781b      	ldrb	r3, [r3, #0]
    daa2:	3301      	adds	r3, #1
    daa4:	b2da      	uxtb	r2, r3
    daa6:	f24c 3319 	movw	r3, #49945	; 0xc319
    daaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daae:	701a      	strb	r2, [r3, #0]
    dab0:	f24c 3319 	movw	r3, #49945	; 0xc319
    dab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab8:	781b      	ldrb	r3, [r3, #0]
    daba:	2bff      	cmp	r3, #255	; 0xff
    dabc:	d105      	bne.n	daca <send_nav_values+0x2de>
    dabe:	f24c 3319 	movw	r3, #49945	; 0xc319
    dac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac6:	2200      	movs	r2, #0
    dac8:	701a      	strb	r2, [r3, #0]
    daca:	f24c 3319 	movw	r3, #49945	; 0xc319
    dace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad2:	781b      	ldrb	r3, [r3, #0]
    dad4:	461a      	mov	r2, r3
    dad6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dade:	7859      	ldrb	r1, [r3, #1]
    dae0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae8:	5499      	strb	r1, [r3, r2]
    daea:	4bd2      	ldr	r3, [pc, #840]	; (de34 <send_nav_values+0x648>)
    daec:	781a      	ldrb	r2, [r3, #0]
    daee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    daf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf6:	781b      	ldrb	r3, [r3, #0]
    daf8:	4413      	add	r3, r2
    dafa:	b2da      	uxtb	r2, r3
    dafc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db04:	701a      	strb	r2, [r3, #0]
    db06:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db0e:	781a      	ldrb	r2, [r3, #0]
    db10:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db18:	781b      	ldrb	r3, [r3, #0]
    db1a:	4413      	add	r3, r2
    db1c:	b2da      	uxtb	r2, r3
    db1e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db26:	701a      	strb	r2, [r3, #0]
    db28:	f24c 3319 	movw	r3, #49945	; 0xc319
    db2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db30:	781b      	ldrb	r3, [r3, #0]
    db32:	3301      	adds	r3, #1
    db34:	b2da      	uxtb	r2, r3
    db36:	f24c 3319 	movw	r3, #49945	; 0xc319
    db3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db3e:	701a      	strb	r2, [r3, #0]
    db40:	f24c 3319 	movw	r3, #49945	; 0xc319
    db44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db48:	781b      	ldrb	r3, [r3, #0]
    db4a:	2bff      	cmp	r3, #255	; 0xff
    db4c:	d105      	bne.n	db5a <send_nav_values+0x36e>
    db4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    db52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db56:	2200      	movs	r2, #0
    db58:	701a      	strb	r2, [r3, #0]
    db5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    db5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db62:	781b      	ldrb	r3, [r3, #0]
    db64:	461a      	mov	r2, r3
    db66:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    db6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db6e:	7899      	ldrb	r1, [r3, #2]
    db70:	f24c 331c 	movw	r3, #49948	; 0xc31c
    db74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db78:	5499      	strb	r1, [r3, r2]
    db7a:	4baf      	ldr	r3, [pc, #700]	; (de38 <send_nav_values+0x64c>)
    db7c:	781a      	ldrb	r2, [r3, #0]
    db7e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db86:	781b      	ldrb	r3, [r3, #0]
    db88:	4413      	add	r3, r2
    db8a:	b2da      	uxtb	r2, r3
    db8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db94:	701a      	strb	r2, [r3, #0]
    db96:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db9e:	781a      	ldrb	r2, [r3, #0]
    dba0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba8:	781b      	ldrb	r3, [r3, #0]
    dbaa:	4413      	add	r3, r2
    dbac:	b2da      	uxtb	r2, r3
    dbae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb6:	701a      	strb	r2, [r3, #0]
    dbb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc0:	781b      	ldrb	r3, [r3, #0]
    dbc2:	3301      	adds	r3, #1
    dbc4:	b2da      	uxtb	r2, r3
    dbc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbce:	701a      	strb	r2, [r3, #0]
    dbd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd8:	781b      	ldrb	r3, [r3, #0]
    dbda:	2bff      	cmp	r3, #255	; 0xff
    dbdc:	d105      	bne.n	dbea <send_nav_values+0x3fe>
    dbde:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe6:	2200      	movs	r2, #0
    dbe8:	701a      	strb	r2, [r3, #0]
    dbea:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf2:	781b      	ldrb	r3, [r3, #0]
    dbf4:	461a      	mov	r2, r3
    dbf6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbfe:	78d9      	ldrb	r1, [r3, #3]
    dc00:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc08:	5499      	strb	r1, [r3, r2]
    dc0a:	4b8c      	ldr	r3, [pc, #560]	; (de3c <send_nav_values+0x650>)
    dc0c:	781a      	ldrb	r2, [r3, #0]
    dc0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc16:	781b      	ldrb	r3, [r3, #0]
    dc18:	4413      	add	r3, r2
    dc1a:	b2da      	uxtb	r2, r3
    dc1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc24:	701a      	strb	r2, [r3, #0]
    dc26:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc2e:	781a      	ldrb	r2, [r3, #0]
    dc30:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc38:	781b      	ldrb	r3, [r3, #0]
    dc3a:	4413      	add	r3, r2
    dc3c:	b2da      	uxtb	r2, r3
    dc3e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc46:	701a      	strb	r2, [r3, #0]
    dc48:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc50:	781b      	ldrb	r3, [r3, #0]
    dc52:	3301      	adds	r3, #1
    dc54:	b2da      	uxtb	r2, r3
    dc56:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc5e:	701a      	strb	r2, [r3, #0]
    dc60:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc68:	781b      	ldrb	r3, [r3, #0]
    dc6a:	2bff      	cmp	r3, #255	; 0xff
    dc6c:	d105      	bne.n	dc7a <send_nav_values+0x48e>
    dc6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc76:	2200      	movs	r2, #0
    dc78:	701a      	strb	r2, [r3, #0]
    dc7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc82:	781b      	ldrb	r3, [r3, #0]
    dc84:	461a      	mov	r2, r3
    dc86:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc8e:	7819      	ldrb	r1, [r3, #0]
    dc90:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dc94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc98:	5499      	strb	r1, [r3, r2]
    dc9a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dc9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca2:	781a      	ldrb	r2, [r3, #0]
    dca4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcac:	781b      	ldrb	r3, [r3, #0]
    dcae:	4413      	add	r3, r2
    dcb0:	b2da      	uxtb	r2, r3
    dcb2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dcb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcba:	701a      	strb	r2, [r3, #0]
    dcbc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dcc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc4:	781a      	ldrb	r2, [r3, #0]
    dcc6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dcca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcce:	781b      	ldrb	r3, [r3, #0]
    dcd0:	4413      	add	r3, r2
    dcd2:	b2da      	uxtb	r2, r3
    dcd4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dcd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcdc:	701a      	strb	r2, [r3, #0]
    dcde:	f24c 3319 	movw	r3, #49945	; 0xc319
    dce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce6:	781b      	ldrb	r3, [r3, #0]
    dce8:	3301      	adds	r3, #1
    dcea:	b2da      	uxtb	r2, r3
    dcec:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf4:	701a      	strb	r2, [r3, #0]
    dcf6:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcfe:	781b      	ldrb	r3, [r3, #0]
    dd00:	2bff      	cmp	r3, #255	; 0xff
    dd02:	d105      	bne.n	dd10 <send_nav_values+0x524>
    dd04:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd0c:	2200      	movs	r2, #0
    dd0e:	701a      	strb	r2, [r3, #0]
    dd10:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd18:	781b      	ldrb	r3, [r3, #0]
    dd1a:	461a      	mov	r2, r3
    dd1c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dd20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd24:	7859      	ldrb	r1, [r3, #1]
    dd26:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd2e:	5499      	strb	r1, [r3, r2]
    dd30:	4b43      	ldr	r3, [pc, #268]	; (de40 <send_nav_values+0x654>)
    dd32:	781a      	ldrb	r2, [r3, #0]
    dd34:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3c:	781b      	ldrb	r3, [r3, #0]
    dd3e:	4413      	add	r3, r2
    dd40:	b2da      	uxtb	r2, r3
    dd42:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd4a:	701a      	strb	r2, [r3, #0]
    dd4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd54:	781a      	ldrb	r2, [r3, #0]
    dd56:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5e:	781b      	ldrb	r3, [r3, #0]
    dd60:	4413      	add	r3, r2
    dd62:	b2da      	uxtb	r2, r3
    dd64:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd6c:	701a      	strb	r2, [r3, #0]
    dd6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd76:	781b      	ldrb	r3, [r3, #0]
    dd78:	3301      	adds	r3, #1
    dd7a:	b2da      	uxtb	r2, r3
    dd7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd84:	701a      	strb	r2, [r3, #0]
    dd86:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8e:	781b      	ldrb	r3, [r3, #0]
    dd90:	2bff      	cmp	r3, #255	; 0xff
    dd92:	d105      	bne.n	dda0 <send_nav_values+0x5b4>
    dd94:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd9c:	2200      	movs	r2, #0
    dd9e:	701a      	strb	r2, [r3, #0]
    dda0:	f24c 3319 	movw	r3, #49945	; 0xc319
    dda4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda8:	781b      	ldrb	r3, [r3, #0]
    ddaa:	461a      	mov	r2, r3
    ddac:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    ddb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb4:	7899      	ldrb	r1, [r3, #2]
    ddb6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ddba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddbe:	5499      	strb	r1, [r3, r2]
    ddc0:	4b20      	ldr	r3, [pc, #128]	; (de44 <send_nav_values+0x658>)
    ddc2:	781a      	ldrb	r2, [r3, #0]
    ddc4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ddc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddcc:	781b      	ldrb	r3, [r3, #0]
    ddce:	4413      	add	r3, r2
    ddd0:	b2da      	uxtb	r2, r3
    ddd2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ddd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddda:	701a      	strb	r2, [r3, #0]
    dddc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde4:	781a      	ldrb	r2, [r3, #0]
    dde6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ddea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddee:	781b      	ldrb	r3, [r3, #0]
    ddf0:	4413      	add	r3, r2
    ddf2:	b2da      	uxtb	r2, r3
    ddf4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ddf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfc:	701a      	strb	r2, [r3, #0]
    ddfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    de02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de06:	781b      	ldrb	r3, [r3, #0]
    de08:	3301      	adds	r3, #1
    de0a:	b2da      	uxtb	r2, r3
    de0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    de10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de14:	701a      	strb	r2, [r3, #0]
    de16:	f24c 3319 	movw	r3, #49945	; 0xc319
    de1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de1e:	781b      	ldrb	r3, [r3, #0]
    de20:	2bff      	cmp	r3, #255	; 0xff
    de22:	d111      	bne.n	de48 <send_nav_values+0x65c>
    de24:	f24c 3319 	movw	r3, #49945	; 0xc319
    de28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2c:	2200      	movs	r2, #0
    de2e:	701a      	strb	r2, [r3, #0]
    de30:	e00a      	b.n	de48 <send_nav_values+0x65c>
    de32:	bf00      	nop
    de34:	2004c8cd 	.word	0x2004c8cd
    de38:	2004c8ce 	.word	0x2004c8ce
    de3c:	2004c8cf 	.word	0x2004c8cf
    de40:	2004c8d1 	.word	0x2004c8d1
    de44:	2004c8d2 	.word	0x2004c8d2
    de48:	f24c 3319 	movw	r3, #49945	; 0xc319
    de4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de50:	781b      	ldrb	r3, [r3, #0]
    de52:	461a      	mov	r2, r3
    de54:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    de58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5c:	78d9      	ldrb	r1, [r3, #3]
    de5e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    de62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de66:	5499      	strb	r1, [r3, r2]
    de68:	4bd3      	ldr	r3, [pc, #844]	; (e1b8 <send_nav_values+0x9cc>)
    de6a:	781a      	ldrb	r2, [r3, #0]
    de6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de74:	781b      	ldrb	r3, [r3, #0]
    de76:	4413      	add	r3, r2
    de78:	b2da      	uxtb	r2, r3
    de7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de82:	701a      	strb	r2, [r3, #0]
    de84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8c:	781a      	ldrb	r2, [r3, #0]
    de8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de96:	781b      	ldrb	r3, [r3, #0]
    de98:	4413      	add	r3, r2
    de9a:	b2da      	uxtb	r2, r3
    de9c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea4:	701a      	strb	r2, [r3, #0]
    dea6:	f24c 3319 	movw	r3, #49945	; 0xc319
    deaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deae:	781b      	ldrb	r3, [r3, #0]
    deb0:	3301      	adds	r3, #1
    deb2:	b2da      	uxtb	r2, r3
    deb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    deb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    debc:	701a      	strb	r2, [r3, #0]
    debe:	f24c 3319 	movw	r3, #49945	; 0xc319
    dec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec6:	781b      	ldrb	r3, [r3, #0]
    dec8:	2bff      	cmp	r3, #255	; 0xff
    deca:	d105      	bne.n	ded8 <send_nav_values+0x6ec>
    decc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ded0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded4:	2200      	movs	r2, #0
    ded6:	701a      	strb	r2, [r3, #0]
    ded8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee0:	781b      	ldrb	r3, [r3, #0]
    dee2:	461a      	mov	r2, r3
    dee4:	f24c 635c 	movw	r3, #50780	; 0xc65c
    dee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deec:	7819      	ldrb	r1, [r3, #0]
    deee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    def2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def6:	5499      	strb	r1, [r3, r2]
    def8:	f24c 635c 	movw	r3, #50780	; 0xc65c
    defc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df00:	781a      	ldrb	r2, [r3, #0]
    df02:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0a:	781b      	ldrb	r3, [r3, #0]
    df0c:	4413      	add	r3, r2
    df0e:	b2da      	uxtb	r2, r3
    df10:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df18:	701a      	strb	r2, [r3, #0]
    df1a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df22:	781a      	ldrb	r2, [r3, #0]
    df24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2c:	781b      	ldrb	r3, [r3, #0]
    df2e:	4413      	add	r3, r2
    df30:	b2da      	uxtb	r2, r3
    df32:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df3a:	701a      	strb	r2, [r3, #0]
    df3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    df40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df44:	781b      	ldrb	r3, [r3, #0]
    df46:	3301      	adds	r3, #1
    df48:	b2da      	uxtb	r2, r3
    df4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    df4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df52:	701a      	strb	r2, [r3, #0]
    df54:	f24c 3319 	movw	r3, #49945	; 0xc319
    df58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5c:	781b      	ldrb	r3, [r3, #0]
    df5e:	2bff      	cmp	r3, #255	; 0xff
    df60:	d105      	bne.n	df6e <send_nav_values+0x782>
    df62:	f24c 3319 	movw	r3, #49945	; 0xc319
    df66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df6a:	2200      	movs	r2, #0
    df6c:	701a      	strb	r2, [r3, #0]
    df6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    df72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df76:	781b      	ldrb	r3, [r3, #0]
    df78:	461a      	mov	r2, r3
    df7a:	f24c 635c 	movw	r3, #50780	; 0xc65c
    df7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df82:	7859      	ldrb	r1, [r3, #1]
    df84:	f24c 331c 	movw	r3, #49948	; 0xc31c
    df88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8c:	5499      	strb	r1, [r3, r2]
    df8e:	4b8b      	ldr	r3, [pc, #556]	; (e1bc <send_nav_values+0x9d0>)
    df90:	781a      	ldrb	r2, [r3, #0]
    df92:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df9a:	781b      	ldrb	r3, [r3, #0]
    df9c:	4413      	add	r3, r2
    df9e:	b2da      	uxtb	r2, r3
    dfa0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dfa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa8:	701a      	strb	r2, [r3, #0]
    dfaa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dfae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb2:	781a      	ldrb	r2, [r3, #0]
    dfb4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dfb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfbc:	781b      	ldrb	r3, [r3, #0]
    dfbe:	4413      	add	r3, r2
    dfc0:	b2da      	uxtb	r2, r3
    dfc2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dfc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfca:	701a      	strb	r2, [r3, #0]
    dfcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd4:	781b      	ldrb	r3, [r3, #0]
    dfd6:	3301      	adds	r3, #1
    dfd8:	b2da      	uxtb	r2, r3
    dfda:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe2:	701a      	strb	r2, [r3, #0]
    dfe4:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfec:	781b      	ldrb	r3, [r3, #0]
    dfee:	2bff      	cmp	r3, #255	; 0xff
    dff0:	d105      	bne.n	dffe <send_nav_values+0x812>
    dff2:	f24c 3319 	movw	r3, #49945	; 0xc319
    dff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dffa:	2200      	movs	r2, #0
    dffc:	701a      	strb	r2, [r3, #0]
    dffe:	f24c 3319 	movw	r3, #49945	; 0xc319
    e002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e006:	781b      	ldrb	r3, [r3, #0]
    e008:	461a      	mov	r2, r3
    e00a:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e012:	7899      	ldrb	r1, [r3, #2]
    e014:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e01c:	5499      	strb	r1, [r3, r2]
    e01e:	4b68      	ldr	r3, [pc, #416]	; (e1c0 <send_nav_values+0x9d4>)
    e020:	781a      	ldrb	r2, [r3, #0]
    e022:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02a:	781b      	ldrb	r3, [r3, #0]
    e02c:	4413      	add	r3, r2
    e02e:	b2da      	uxtb	r2, r3
    e030:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e038:	701a      	strb	r2, [r3, #0]
    e03a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e042:	781a      	ldrb	r2, [r3, #0]
    e044:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e04c:	781b      	ldrb	r3, [r3, #0]
    e04e:	4413      	add	r3, r2
    e050:	b2da      	uxtb	r2, r3
    e052:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e05a:	701a      	strb	r2, [r3, #0]
    e05c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e064:	781b      	ldrb	r3, [r3, #0]
    e066:	3301      	adds	r3, #1
    e068:	b2da      	uxtb	r2, r3
    e06a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e072:	701a      	strb	r2, [r3, #0]
    e074:	f24c 3319 	movw	r3, #49945	; 0xc319
    e078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e07c:	781b      	ldrb	r3, [r3, #0]
    e07e:	2bff      	cmp	r3, #255	; 0xff
    e080:	d105      	bne.n	e08e <send_nav_values+0x8a2>
    e082:	f24c 3319 	movw	r3, #49945	; 0xc319
    e086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08a:	2200      	movs	r2, #0
    e08c:	701a      	strb	r2, [r3, #0]
    e08e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e096:	781b      	ldrb	r3, [r3, #0]
    e098:	461a      	mov	r2, r3
    e09a:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a2:	78d9      	ldrb	r1, [r3, #3]
    e0a4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ac:	5499      	strb	r1, [r3, r2]
    e0ae:	4b45      	ldr	r3, [pc, #276]	; (e1c4 <send_nav_values+0x9d8>)
    e0b0:	781a      	ldrb	r2, [r3, #0]
    e0b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ba:	781b      	ldrb	r3, [r3, #0]
    e0bc:	4413      	add	r3, r2
    e0be:	b2da      	uxtb	r2, r3
    e0c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c8:	701a      	strb	r2, [r3, #0]
    e0ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d2:	781a      	ldrb	r2, [r3, #0]
    e0d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0dc:	781b      	ldrb	r3, [r3, #0]
    e0de:	4413      	add	r3, r2
    e0e0:	b2da      	uxtb	r2, r3
    e0e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ea:	701a      	strb	r2, [r3, #0]
    e0ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f4:	781b      	ldrb	r3, [r3, #0]
    e0f6:	3301      	adds	r3, #1
    e0f8:	b2da      	uxtb	r2, r3
    e0fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e102:	701a      	strb	r2, [r3, #0]
    e104:	f24c 3319 	movw	r3, #49945	; 0xc319
    e108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10c:	781b      	ldrb	r3, [r3, #0]
    e10e:	2bff      	cmp	r3, #255	; 0xff
    e110:	d105      	bne.n	e11e <send_nav_values+0x932>
    e112:	f24c 3319 	movw	r3, #49945	; 0xc319
    e116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e11a:	2200      	movs	r2, #0
    e11c:	701a      	strb	r2, [r3, #0]
    e11e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e126:	781b      	ldrb	r3, [r3, #0]
    e128:	461a      	mov	r2, r3
    e12a:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e132:	7819      	ldrb	r1, [r3, #0]
    e134:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13c:	5499      	strb	r1, [r3, r2]
    e13e:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e146:	781a      	ldrb	r2, [r3, #0]
    e148:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e150:	781b      	ldrb	r3, [r3, #0]
    e152:	4413      	add	r3, r2
    e154:	b2da      	uxtb	r2, r3
    e156:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15e:	701a      	strb	r2, [r3, #0]
    e160:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e168:	781a      	ldrb	r2, [r3, #0]
    e16a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e172:	781b      	ldrb	r3, [r3, #0]
    e174:	4413      	add	r3, r2
    e176:	b2da      	uxtb	r2, r3
    e178:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e180:	701a      	strb	r2, [r3, #0]
    e182:	f24c 3319 	movw	r3, #49945	; 0xc319
    e186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18a:	781b      	ldrb	r3, [r3, #0]
    e18c:	3301      	adds	r3, #1
    e18e:	b2da      	uxtb	r2, r3
    e190:	f24c 3319 	movw	r3, #49945	; 0xc319
    e194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e198:	701a      	strb	r2, [r3, #0]
    e19a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a2:	781b      	ldrb	r3, [r3, #0]
    e1a4:	2bff      	cmp	r3, #255	; 0xff
    e1a6:	d10f      	bne.n	e1c8 <send_nav_values+0x9dc>
    e1a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b0:	2200      	movs	r2, #0
    e1b2:	701a      	strb	r2, [r3, #0]
    e1b4:	e008      	b.n	e1c8 <send_nav_values+0x9dc>
    e1b6:	bf00      	nop
    e1b8:	2004c8d3 	.word	0x2004c8d3
    e1bc:	2004c65d 	.word	0x2004c65d
    e1c0:	2004c65e 	.word	0x2004c65e
    e1c4:	2004c65f 	.word	0x2004c65f
    e1c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d0:	781b      	ldrb	r3, [r3, #0]
    e1d2:	461a      	mov	r2, r3
    e1d4:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1dc:	7859      	ldrb	r1, [r3, #1]
    e1de:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e6:	5499      	strb	r1, [r3, r2]
    e1e8:	4bd1      	ldr	r3, [pc, #836]	; (e530 <send_nav_values+0xd44>)
    e1ea:	781a      	ldrb	r2, [r3, #0]
    e1ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f4:	781b      	ldrb	r3, [r3, #0]
    e1f6:	4413      	add	r3, r2
    e1f8:	b2da      	uxtb	r2, r3
    e1fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e202:	701a      	strb	r2, [r3, #0]
    e204:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e20c:	781a      	ldrb	r2, [r3, #0]
    e20e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e216:	781b      	ldrb	r3, [r3, #0]
    e218:	4413      	add	r3, r2
    e21a:	b2da      	uxtb	r2, r3
    e21c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e224:	701a      	strb	r2, [r3, #0]
    e226:	f24c 3319 	movw	r3, #49945	; 0xc319
    e22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22e:	781b      	ldrb	r3, [r3, #0]
    e230:	3301      	adds	r3, #1
    e232:	b2da      	uxtb	r2, r3
    e234:	f24c 3319 	movw	r3, #49945	; 0xc319
    e238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e23c:	701a      	strb	r2, [r3, #0]
    e23e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e246:	781b      	ldrb	r3, [r3, #0]
    e248:	2bff      	cmp	r3, #255	; 0xff
    e24a:	d105      	bne.n	e258 <send_nav_values+0xa6c>
    e24c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e254:	2200      	movs	r2, #0
    e256:	701a      	strb	r2, [r3, #0]
    e258:	f24c 3319 	movw	r3, #49945	; 0xc319
    e25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e260:	781b      	ldrb	r3, [r3, #0]
    e262:	461a      	mov	r2, r3
    e264:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e26c:	7899      	ldrb	r1, [r3, #2]
    e26e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e276:	5499      	strb	r1, [r3, r2]
    e278:	4bae      	ldr	r3, [pc, #696]	; (e534 <send_nav_values+0xd48>)
    e27a:	781a      	ldrb	r2, [r3, #0]
    e27c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e284:	781b      	ldrb	r3, [r3, #0]
    e286:	4413      	add	r3, r2
    e288:	b2da      	uxtb	r2, r3
    e28a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e292:	701a      	strb	r2, [r3, #0]
    e294:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e29c:	781a      	ldrb	r2, [r3, #0]
    e29e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a6:	781b      	ldrb	r3, [r3, #0]
    e2a8:	4413      	add	r3, r2
    e2aa:	b2da      	uxtb	r2, r3
    e2ac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2b4:	701a      	strb	r2, [r3, #0]
    e2b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2be:	781b      	ldrb	r3, [r3, #0]
    e2c0:	3301      	adds	r3, #1
    e2c2:	b2da      	uxtb	r2, r3
    e2c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2cc:	701a      	strb	r2, [r3, #0]
    e2ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d6:	781b      	ldrb	r3, [r3, #0]
    e2d8:	2bff      	cmp	r3, #255	; 0xff
    e2da:	d105      	bne.n	e2e8 <send_nav_values+0xafc>
    e2dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e4:	2200      	movs	r2, #0
    e2e6:	701a      	strb	r2, [r3, #0]
    e2e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f0:	781b      	ldrb	r3, [r3, #0]
    e2f2:	461a      	mov	r2, r3
    e2f4:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fc:	78d9      	ldrb	r1, [r3, #3]
    e2fe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e306:	5499      	strb	r1, [r3, r2]
    e308:	4b8b      	ldr	r3, [pc, #556]	; (e538 <send_nav_values+0xd4c>)
    e30a:	781a      	ldrb	r2, [r3, #0]
    e30c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e314:	781b      	ldrb	r3, [r3, #0]
    e316:	4413      	add	r3, r2
    e318:	b2da      	uxtb	r2, r3
    e31a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e322:	701a      	strb	r2, [r3, #0]
    e324:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e32c:	781a      	ldrb	r2, [r3, #0]
    e32e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e336:	781b      	ldrb	r3, [r3, #0]
    e338:	4413      	add	r3, r2
    e33a:	b2da      	uxtb	r2, r3
    e33c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e344:	701a      	strb	r2, [r3, #0]
    e346:	f24c 3319 	movw	r3, #49945	; 0xc319
    e34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e34e:	781b      	ldrb	r3, [r3, #0]
    e350:	3301      	adds	r3, #1
    e352:	b2da      	uxtb	r2, r3
    e354:	f24c 3319 	movw	r3, #49945	; 0xc319
    e358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e35c:	701a      	strb	r2, [r3, #0]
    e35e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e366:	781b      	ldrb	r3, [r3, #0]
    e368:	2bff      	cmp	r3, #255	; 0xff
    e36a:	d105      	bne.n	e378 <send_nav_values+0xb8c>
    e36c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e374:	2200      	movs	r2, #0
    e376:	701a      	strb	r2, [r3, #0]
    e378:	f24c 3319 	movw	r3, #49945	; 0xc319
    e37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e380:	781b      	ldrb	r3, [r3, #0]
    e382:	461a      	mov	r2, r3
    e384:	f240 5358 	movw	r3, #1368	; 0x558
    e388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e38c:	7819      	ldrb	r1, [r3, #0]
    e38e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e396:	5499      	strb	r1, [r3, r2]
    e398:	f240 5358 	movw	r3, #1368	; 0x558
    e39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3a0:	781a      	ldrb	r2, [r3, #0]
    e3a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3aa:	781b      	ldrb	r3, [r3, #0]
    e3ac:	4413      	add	r3, r2
    e3ae:	b2da      	uxtb	r2, r3
    e3b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b8:	701a      	strb	r2, [r3, #0]
    e3ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c2:	781a      	ldrb	r2, [r3, #0]
    e3c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3cc:	781b      	ldrb	r3, [r3, #0]
    e3ce:	4413      	add	r3, r2
    e3d0:	b2da      	uxtb	r2, r3
    e3d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3da:	701a      	strb	r2, [r3, #0]
    e3dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e4:	781b      	ldrb	r3, [r3, #0]
    e3e6:	3301      	adds	r3, #1
    e3e8:	b2da      	uxtb	r2, r3
    e3ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f2:	701a      	strb	r2, [r3, #0]
    e3f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fc:	781b      	ldrb	r3, [r3, #0]
    e3fe:	2bff      	cmp	r3, #255	; 0xff
    e400:	d105      	bne.n	e40e <send_nav_values+0xc22>
    e402:	f24c 3319 	movw	r3, #49945	; 0xc319
    e406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e40a:	2200      	movs	r2, #0
    e40c:	701a      	strb	r2, [r3, #0]
    e40e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e416:	781b      	ldrb	r3, [r3, #0]
    e418:	461a      	mov	r2, r3
    e41a:	f240 5358 	movw	r3, #1368	; 0x558
    e41e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e422:	7859      	ldrb	r1, [r3, #1]
    e424:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e42c:	5499      	strb	r1, [r3, r2]
    e42e:	4b43      	ldr	r3, [pc, #268]	; (e53c <send_nav_values+0xd50>)
    e430:	781a      	ldrb	r2, [r3, #0]
    e432:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e43a:	781b      	ldrb	r3, [r3, #0]
    e43c:	4413      	add	r3, r2
    e43e:	b2da      	uxtb	r2, r3
    e440:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e448:	701a      	strb	r2, [r3, #0]
    e44a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e452:	781a      	ldrb	r2, [r3, #0]
    e454:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e45c:	781b      	ldrb	r3, [r3, #0]
    e45e:	4413      	add	r3, r2
    e460:	b2da      	uxtb	r2, r3
    e462:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e46a:	701a      	strb	r2, [r3, #0]
    e46c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e474:	781b      	ldrb	r3, [r3, #0]
    e476:	3301      	adds	r3, #1
    e478:	b2da      	uxtb	r2, r3
    e47a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e482:	701a      	strb	r2, [r3, #0]
    e484:	f24c 3319 	movw	r3, #49945	; 0xc319
    e488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e48c:	781b      	ldrb	r3, [r3, #0]
    e48e:	2bff      	cmp	r3, #255	; 0xff
    e490:	d105      	bne.n	e49e <send_nav_values+0xcb2>
    e492:	f24c 3319 	movw	r3, #49945	; 0xc319
    e496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e49a:	2200      	movs	r2, #0
    e49c:	701a      	strb	r2, [r3, #0]
    e49e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4a6:	781b      	ldrb	r3, [r3, #0]
    e4a8:	461a      	mov	r2, r3
    e4aa:	f240 5358 	movw	r3, #1368	; 0x558
    e4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4b2:	7899      	ldrb	r1, [r3, #2]
    e4b4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4bc:	5499      	strb	r1, [r3, r2]
    e4be:	4b20      	ldr	r3, [pc, #128]	; (e540 <send_nav_values+0xd54>)
    e4c0:	781a      	ldrb	r2, [r3, #0]
    e4c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ca:	781b      	ldrb	r3, [r3, #0]
    e4cc:	4413      	add	r3, r2
    e4ce:	b2da      	uxtb	r2, r3
    e4d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d8:	701a      	strb	r2, [r3, #0]
    e4da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4e2:	781a      	ldrb	r2, [r3, #0]
    e4e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ec:	781b      	ldrb	r3, [r3, #0]
    e4ee:	4413      	add	r3, r2
    e4f0:	b2da      	uxtb	r2, r3
    e4f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4fa:	701a      	strb	r2, [r3, #0]
    e4fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e504:	781b      	ldrb	r3, [r3, #0]
    e506:	3301      	adds	r3, #1
    e508:	b2da      	uxtb	r2, r3
    e50a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e512:	701a      	strb	r2, [r3, #0]
    e514:	f24c 3319 	movw	r3, #49945	; 0xc319
    e518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e51c:	781b      	ldrb	r3, [r3, #0]
    e51e:	2bff      	cmp	r3, #255	; 0xff
    e520:	d110      	bne.n	e544 <send_nav_values+0xd58>
    e522:	f24c 3319 	movw	r3, #49945	; 0xc319
    e526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e52a:	2200      	movs	r2, #0
    e52c:	701a      	strb	r2, [r3, #0]
    e52e:	e009      	b.n	e544 <send_nav_values+0xd58>
    e530:	2004c6a5 	.word	0x2004c6a5
    e534:	2004c6a6 	.word	0x2004c6a6
    e538:	2004c6a7 	.word	0x2004c6a7
    e53c:	20000559 	.word	0x20000559
    e540:	2000055a 	.word	0x2000055a
    e544:	f24c 3319 	movw	r3, #49945	; 0xc319
    e548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e54c:	781b      	ldrb	r3, [r3, #0]
    e54e:	461a      	mov	r2, r3
    e550:	f240 5358 	movw	r3, #1368	; 0x558
    e554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e558:	78d9      	ldrb	r1, [r3, #3]
    e55a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e562:	5499      	strb	r1, [r3, r2]
    e564:	4bc2      	ldr	r3, [pc, #776]	; (e870 <send_nav_values+0x1084>)
    e566:	781a      	ldrb	r2, [r3, #0]
    e568:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e570:	781b      	ldrb	r3, [r3, #0]
    e572:	4413      	add	r3, r2
    e574:	b2da      	uxtb	r2, r3
    e576:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e57e:	701a      	strb	r2, [r3, #0]
    e580:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e588:	781a      	ldrb	r2, [r3, #0]
    e58a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e592:	781b      	ldrb	r3, [r3, #0]
    e594:	4413      	add	r3, r2
    e596:	b2da      	uxtb	r2, r3
    e598:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5a0:	701a      	strb	r2, [r3, #0]
    e5a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5aa:	781b      	ldrb	r3, [r3, #0]
    e5ac:	3301      	adds	r3, #1
    e5ae:	b2da      	uxtb	r2, r3
    e5b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b8:	701a      	strb	r2, [r3, #0]
    e5ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c2:	781b      	ldrb	r3, [r3, #0]
    e5c4:	2bff      	cmp	r3, #255	; 0xff
    e5c6:	d105      	bne.n	e5d4 <send_nav_values+0xde8>
    e5c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d0:	2200      	movs	r2, #0
    e5d2:	701a      	strb	r2, [r3, #0]
    e5d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5dc:	781b      	ldrb	r3, [r3, #0]
    e5de:	461a      	mov	r2, r3
    e5e0:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5e8:	7819      	ldrb	r1, [r3, #0]
    e5ea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f2:	5499      	strb	r1, [r3, r2]
    e5f4:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5fc:	781a      	ldrb	r2, [r3, #0]
    e5fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e606:	781b      	ldrb	r3, [r3, #0]
    e608:	4413      	add	r3, r2
    e60a:	b2da      	uxtb	r2, r3
    e60c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e614:	701a      	strb	r2, [r3, #0]
    e616:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e61e:	781a      	ldrb	r2, [r3, #0]
    e620:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e628:	781b      	ldrb	r3, [r3, #0]
    e62a:	4413      	add	r3, r2
    e62c:	b2da      	uxtb	r2, r3
    e62e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e636:	701a      	strb	r2, [r3, #0]
    e638:	f24c 3319 	movw	r3, #49945	; 0xc319
    e63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e640:	781b      	ldrb	r3, [r3, #0]
    e642:	3301      	adds	r3, #1
    e644:	b2da      	uxtb	r2, r3
    e646:	f24c 3319 	movw	r3, #49945	; 0xc319
    e64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e64e:	701a      	strb	r2, [r3, #0]
    e650:	f24c 3319 	movw	r3, #49945	; 0xc319
    e654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e658:	781b      	ldrb	r3, [r3, #0]
    e65a:	2bff      	cmp	r3, #255	; 0xff
    e65c:	d105      	bne.n	e66a <send_nav_values+0xe7e>
    e65e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e666:	2200      	movs	r2, #0
    e668:	701a      	strb	r2, [r3, #0]
    e66a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e672:	781b      	ldrb	r3, [r3, #0]
    e674:	461a      	mov	r2, r3
    e676:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e67e:	7859      	ldrb	r1, [r3, #1]
    e680:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e688:	5499      	strb	r1, [r3, r2]
    e68a:	4b7a      	ldr	r3, [pc, #488]	; (e874 <send_nav_values+0x1088>)
    e68c:	781a      	ldrb	r2, [r3, #0]
    e68e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e696:	781b      	ldrb	r3, [r3, #0]
    e698:	4413      	add	r3, r2
    e69a:	b2da      	uxtb	r2, r3
    e69c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a4:	701a      	strb	r2, [r3, #0]
    e6a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ae:	781a      	ldrb	r2, [r3, #0]
    e6b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b8:	781b      	ldrb	r3, [r3, #0]
    e6ba:	4413      	add	r3, r2
    e6bc:	b2da      	uxtb	r2, r3
    e6be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c6:	701a      	strb	r2, [r3, #0]
    e6c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d0:	781b      	ldrb	r3, [r3, #0]
    e6d2:	3301      	adds	r3, #1
    e6d4:	b2da      	uxtb	r2, r3
    e6d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6de:	701a      	strb	r2, [r3, #0]
    e6e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e8:	781b      	ldrb	r3, [r3, #0]
    e6ea:	2bff      	cmp	r3, #255	; 0xff
    e6ec:	d105      	bne.n	e6fa <send_nav_values+0xf0e>
    e6ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f6:	2200      	movs	r2, #0
    e6f8:	701a      	strb	r2, [r3, #0]
    e6fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e702:	781b      	ldrb	r3, [r3, #0]
    e704:	461a      	mov	r2, r3
    e706:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e70e:	7899      	ldrb	r1, [r3, #2]
    e710:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e718:	5499      	strb	r1, [r3, r2]
    e71a:	4b57      	ldr	r3, [pc, #348]	; (e878 <send_nav_values+0x108c>)
    e71c:	781a      	ldrb	r2, [r3, #0]
    e71e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e726:	781b      	ldrb	r3, [r3, #0]
    e728:	4413      	add	r3, r2
    e72a:	b2da      	uxtb	r2, r3
    e72c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e734:	701a      	strb	r2, [r3, #0]
    e736:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e73e:	781a      	ldrb	r2, [r3, #0]
    e740:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e748:	781b      	ldrb	r3, [r3, #0]
    e74a:	4413      	add	r3, r2
    e74c:	b2da      	uxtb	r2, r3
    e74e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e756:	701a      	strb	r2, [r3, #0]
    e758:	f24c 3319 	movw	r3, #49945	; 0xc319
    e75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e760:	781b      	ldrb	r3, [r3, #0]
    e762:	3301      	adds	r3, #1
    e764:	b2da      	uxtb	r2, r3
    e766:	f24c 3319 	movw	r3, #49945	; 0xc319
    e76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e76e:	701a      	strb	r2, [r3, #0]
    e770:	f24c 3319 	movw	r3, #49945	; 0xc319
    e774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e778:	781b      	ldrb	r3, [r3, #0]
    e77a:	2bff      	cmp	r3, #255	; 0xff
    e77c:	d105      	bne.n	e78a <send_nav_values+0xf9e>
    e77e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e786:	2200      	movs	r2, #0
    e788:	701a      	strb	r2, [r3, #0]
    e78a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e792:	781b      	ldrb	r3, [r3, #0]
    e794:	461a      	mov	r2, r3
    e796:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e79e:	78d9      	ldrb	r1, [r3, #3]
    e7a0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a8:	5499      	strb	r1, [r3, r2]
    e7aa:	4b34      	ldr	r3, [pc, #208]	; (e87c <send_nav_values+0x1090>)
    e7ac:	781a      	ldrb	r2, [r3, #0]
    e7ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b6:	781b      	ldrb	r3, [r3, #0]
    e7b8:	4413      	add	r3, r2
    e7ba:	b2da      	uxtb	r2, r3
    e7bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c4:	701a      	strb	r2, [r3, #0]
    e7c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ce:	781a      	ldrb	r2, [r3, #0]
    e7d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d8:	781b      	ldrb	r3, [r3, #0]
    e7da:	4413      	add	r3, r2
    e7dc:	b2da      	uxtb	r2, r3
    e7de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e6:	701a      	strb	r2, [r3, #0]
    e7e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f0:	781b      	ldrb	r3, [r3, #0]
    e7f2:	3301      	adds	r3, #1
    e7f4:	b2da      	uxtb	r2, r3
    e7f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7fe:	701a      	strb	r2, [r3, #0]
    e800:	f24c 3319 	movw	r3, #49945	; 0xc319
    e804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e808:	781b      	ldrb	r3, [r3, #0]
    e80a:	2bff      	cmp	r3, #255	; 0xff
    e80c:	d105      	bne.n	e81a <send_nav_values+0x102e>
    e80e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e816:	2200      	movs	r2, #0
    e818:	701a      	strb	r2, [r3, #0]
    e81a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e822:	781b      	ldrb	r3, [r3, #0]
    e824:	461a      	mov	r2, r3
    e826:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e82e:	7819      	ldrb	r1, [r3, #0]
    e830:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e838:	5499      	strb	r1, [r3, r2]
    e83a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e842:	781b      	ldrb	r3, [r3, #0]
    e844:	3301      	adds	r3, #1
    e846:	b2da      	uxtb	r2, r3
    e848:	f24c 3319 	movw	r3, #49945	; 0xc319
    e84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e850:	701a      	strb	r2, [r3, #0]
    e852:	f24c 3319 	movw	r3, #49945	; 0xc319
    e856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e85a:	781b      	ldrb	r3, [r3, #0]
    e85c:	2bff      	cmp	r3, #255	; 0xff
    e85e:	d10f      	bne.n	e880 <send_nav_values+0x1094>
    e860:	f24c 3319 	movw	r3, #49945	; 0xc319
    e864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e868:	2200      	movs	r2, #0
    e86a:	701a      	strb	r2, [r3, #0]
    e86c:	e008      	b.n	e880 <send_nav_values+0x1094>
    e86e:	bf00      	nop
    e870:	2000055b 	.word	0x2000055b
    e874:	2004c6a9 	.word	0x2004c6a9
    e878:	2004c6aa 	.word	0x2004c6aa
    e87c:	2004c6ab 	.word	0x2004c6ab
    e880:	f24c 3319 	movw	r3, #49945	; 0xc319
    e884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e888:	781b      	ldrb	r3, [r3, #0]
    e88a:	461a      	mov	r2, r3
    e88c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e894:	7819      	ldrb	r1, [r3, #0]
    e896:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e89e:	5499      	strb	r1, [r3, r2]
    e8a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a8:	781b      	ldrb	r3, [r3, #0]
    e8aa:	3301      	adds	r3, #1
    e8ac:	b2da      	uxtb	r2, r3
    e8ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b6:	701a      	strb	r2, [r3, #0]
    e8b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c0:	781b      	ldrb	r3, [r3, #0]
    e8c2:	2bff      	cmp	r3, #255	; 0xff
    e8c4:	d105      	bne.n	e8d2 <send_nav_values+0x10e6>
    e8c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ce:	2200      	movs	r2, #0
    e8d0:	701a      	strb	r2, [r3, #0]
    e8d2:	f242 0339 	movw	r3, #8249	; 0x2039
    e8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8da:	781b      	ldrb	r3, [r3, #0]
    e8dc:	b2db      	uxtb	r3, r3
    e8de:	f003 0310 	and.w	r3, r3, #16
    e8e2:	2b00      	cmp	r3, #0
    e8e4:	d15a      	bne.n	e99c <send_nav_values+0x11b0>
    e8e6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ee:	781b      	ldrb	r3, [r3, #0]
    e8f0:	b2db      	uxtb	r3, r3
    e8f2:	461a      	mov	r2, r3
    e8f4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8fc:	5c9a      	ldrb	r2, [r3, r2]
    e8fe:	f24c 431b 	movw	r3, #50203	; 0xc41b
    e902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e906:	701a      	strb	r2, [r3, #0]
    e908:	f24c 431c 	movw	r3, #50204	; 0xc41c
    e90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e910:	2200      	movs	r2, #0
    e912:	701a      	strb	r2, [r3, #0]
    e914:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e91c:	781b      	ldrb	r3, [r3, #0]
    e91e:	b2db      	uxtb	r3, r3
    e920:	3301      	adds	r3, #1
    e922:	b2da      	uxtb	r2, r3
    e924:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e92c:	701a      	strb	r2, [r3, #0]
    e92e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e936:	781b      	ldrb	r3, [r3, #0]
    e938:	b2db      	uxtb	r3, r3
    e93a:	2bff      	cmp	r3, #255	; 0xff
    e93c:	d105      	bne.n	e94a <send_nav_values+0x115e>
    e93e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e946:	2200      	movs	r2, #0
    e948:	701a      	strb	r2, [r3, #0]
    e94a:	f242 0338 	movw	r3, #8248	; 0x2038
    e94e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e952:	f242 0238 	movw	r2, #8248	; 0x2038
    e956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e95a:	7812      	ldrb	r2, [r2, #0]
    e95c:	b2d2      	uxtb	r2, r2
    e95e:	f042 0201 	orr.w	r2, r2, #1
    e962:	b2d2      	uxtb	r2, r2
    e964:	701a      	strb	r2, [r3, #0]
    e966:	f242 0339 	movw	r3, #8249	; 0x2039
    e96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e96e:	f242 0239 	movw	r2, #8249	; 0x2039
    e972:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e976:	7812      	ldrb	r2, [r2, #0]
    e978:	b2d2      	uxtb	r2, r2
    e97a:	f042 0210 	orr.w	r2, r2, #16
    e97e:	b2d2      	uxtb	r2, r2
    e980:	701a      	strb	r2, [r3, #0]
    e982:	e00b      	b.n	e99c <send_nav_values+0x11b0>
    e984:	f24c 3318 	movw	r3, #49944	; 0xc318
    e988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e98c:	781b      	ldrb	r3, [r3, #0]
    e98e:	3301      	adds	r3, #1
    e990:	b2da      	uxtb	r2, r3
    e992:	f24c 3318 	movw	r3, #49944	; 0xc318
    e996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e99a:	701a      	strb	r2, [r3, #0]
}
    e99c:	46bd      	mov	sp, r7
    e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e9a2:	4770      	bx	lr

0000e9a4 <course_run>:

void course_run(void){
    e9a4:	b580      	push	{r7, lr}
    e9a6:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e9a8:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    e9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b0:	781b      	ldrb	r3, [r3, #0]
    e9b2:	2b02      	cmp	r3, #2
    e9b4:	d006      	beq.n	e9c4 <course_run+0x20>
    e9b6:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    e9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9be:	781b      	ldrb	r3, [r3, #0]
    e9c0:	2b03      	cmp	r3, #3
    e9c2:	d112      	bne.n	e9ea <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e9c4:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    e9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9cc:	781b      	ldrb	r3, [r3, #0]
    e9ce:	2b02      	cmp	r3, #2
    e9d0:	d901      	bls.n	e9d6 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e9d2:	f003 faf1 	bl	11fb8 <course_pid_run>
    desired_roll = nav_desired_roll;
    e9d6:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
    e9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9de:	681a      	ldr	r2, [r3, #0]
    e9e0:	f24c 6344 	movw	r3, #50756	; 0xc644
    e9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e8:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e9ea:	bd80      	pop	{r7, pc}

0000e9ec <altitude_control_task>:

void altitude_control_task(void)
{
    e9ec:	b580      	push	{r7, lr}
    e9ee:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e9f0:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    e9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f8:	781b      	ldrb	r3, [r3, #0]
    e9fa:	2b02      	cmp	r3, #2
    e9fc:	d006      	beq.n	ea0c <altitude_control_task+0x20>
    e9fe:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ea02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea06:	781b      	ldrb	r3, [r3, #0]
    ea08:	2b03      	cmp	r3, #3
    ea0a:	d108      	bne.n	ea1e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    ea0c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    ea10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea14:	781b      	ldrb	r3, [r3, #0]
    ea16:	2b03      	cmp	r3, #3
    ea18:	d101      	bne.n	ea1e <altitude_control_task+0x32>
      			altitude_pid_run();
    ea1a:	f003 fd55 	bl	124c8 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    ea1e:	bd80      	pop	{r7, pc}

0000ea20 <climb_control_task>:
void climb_control_task(void)
{
    ea20:	b580      	push	{r7, lr}
    ea22:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    ea24:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ea28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea2c:	781b      	ldrb	r3, [r3, #0]
    ea2e:	2b02      	cmp	r3, #2
    ea30:	d006      	beq.n	ea40 <climb_control_task+0x20>
    ea32:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ea36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea3a:	781b      	ldrb	r3, [r3, #0]
    ea3c:	2b03      	cmp	r3, #3
    ea3e:	d135      	bne.n	eaac <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    ea40:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    ea44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea48:	781b      	ldrb	r3, [r3, #0]
    ea4a:	2b01      	cmp	r3, #1
    ea4c:	d901      	bls.n	ea52 <climb_control_task+0x32>
        	climb_pid_run();
    ea4e:	f003 fb6b 	bl	12128 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    ea52:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    ea56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea5a:	781b      	ldrb	r3, [r3, #0]
    ea5c:	2b01      	cmp	r3, #1
    ea5e:	d10a      	bne.n	ea76 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    ea60:	f24c 6398 	movw	r3, #50840	; 0xc698
    ea64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea68:	881b      	ldrh	r3, [r3, #0]
    ea6a:	b29a      	uxth	r2, r3
    ea6c:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ea70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea74:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    ea76:	f24c 3305 	movw	r3, #49925	; 0xc305
    ea7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea7e:	781b      	ldrb	r3, [r3, #0]
    ea80:	2b00      	cmp	r3, #0
    ea82:	d10d      	bne.n	eaa0 <climb_control_task+0x80>
    ea84:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ea88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8c:	881b      	ldrh	r3, [r3, #0]
    ea8e:	2b00      	cmp	r3, #0
    ea90:	d10c      	bne.n	eaac <climb_control_task+0x8c>
    ea92:	f24c 3310 	movw	r3, #49936	; 0xc310
    ea96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea9a:	781b      	ldrb	r3, [r3, #0]
    ea9c:	2b00      	cmp	r3, #0
    ea9e:	d105      	bne.n	eaac <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    eaa0:	f24c 634c 	movw	r3, #50764	; 0xc64c
    eaa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaa8:	2200      	movs	r2, #0
    eaaa:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    eaac:	bd80      	pop	{r7, pc}
    eaae:	bf00      	nop

0000eab0 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    eab0:	b580      	push	{r7, lr}
    eab2:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    eab4:	f003 f926 	bl	11d04 <ir_update>
    estimator_update_state_infrared();
    eab8:	f006 fbac 	bl	15214 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    eabc:	f003 f990 	bl	11de0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    eac0:	f24c 634c 	movw	r3, #50764	; 0xc64c
    eac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eac8:	881a      	ldrh	r2, [r3, #0]
    eaca:	f24c 4338 	movw	r3, #50232	; 0xc438
    eace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ead2:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    ead4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ead8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eadc:	881a      	ldrh	r2, [r3, #0]
    eade:	f24c 4338 	movw	r3, #50232	; 0xc438
    eae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eae6:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    eae8:	f24c 6350 	movw	r3, #50768	; 0xc650
    eaec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaf0:	881a      	ldrh	r2, [r3, #0]
    eaf2:	f24c 4338 	movw	r3, #50232	; 0xc438
    eaf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eafa:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    eafc:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    eb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb04:	681b      	ldr	r3, [r3, #0]
    eb06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb0a:	4618      	mov	r0, r3
    eb0c:	f008 ff80 	bl	17a10 <__aeabi_f2d>
    eb10:	4602      	mov	r2, r0
    eb12:	460b      	mov	r3, r1
    eb14:	4610      	mov	r0, r2
    eb16:	4619      	mov	r1, r3
    eb18:	f04f 0200 	mov.w	r2, #0
    eb1c:	f04f 0300 	mov.w	r3, #0
    eb20:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb24:	f008 ffc8 	bl	17ab8 <__aeabi_dmul>
    eb28:	4602      	mov	r2, r0
    eb2a:	460b      	mov	r3, r1
    eb2c:	4610      	mov	r0, r2
    eb2e:	4619      	mov	r1, r3
    eb30:	f04f 0200 	mov.w	r2, #0
    eb34:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    eb38:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    eb3c:	f009 fa2e 	bl	17f9c <__aeabi_dcmplt>
    eb40:	4603      	mov	r3, r0
    eb42:	2b00      	cmp	r3, #0
    eb44:	d002      	beq.n	eb4c <stabilisation_task+0x9c>
    eb46:	f64d 2280 	movw	r2, #55936	; 0xda80
    eb4a:	e046      	b.n	ebda <stabilisation_task+0x12a>
    eb4c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    eb50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb54:	681b      	ldr	r3, [r3, #0]
    eb56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb5a:	4618      	mov	r0, r3
    eb5c:	f008 ff58 	bl	17a10 <__aeabi_f2d>
    eb60:	4602      	mov	r2, r0
    eb62:	460b      	mov	r3, r1
    eb64:	4610      	mov	r0, r2
    eb66:	4619      	mov	r1, r3
    eb68:	f04f 0200 	mov.w	r2, #0
    eb6c:	f04f 0300 	mov.w	r3, #0
    eb70:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb74:	f008 ffa0 	bl	17ab8 <__aeabi_dmul>
    eb78:	4602      	mov	r2, r0
    eb7a:	460b      	mov	r3, r1
    eb7c:	4610      	mov	r0, r2
    eb7e:	4619      	mov	r1, r3
    eb80:	f04f 0200 	mov.w	r2, #0
    eb84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    eb88:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    eb8c:	f009 fa24 	bl	17fd8 <__aeabi_dcmpgt>
    eb90:	4603      	mov	r3, r0
    eb92:	2b00      	cmp	r3, #0
    eb94:	d002      	beq.n	eb9c <stabilisation_task+0xec>
    eb96:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    eb9a:	e01d      	b.n	ebd8 <stabilisation_task+0x128>
    eb9c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    eba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba4:	681b      	ldr	r3, [r3, #0]
    eba6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ebaa:	4618      	mov	r0, r3
    ebac:	f008 ff30 	bl	17a10 <__aeabi_f2d>
    ebb0:	4602      	mov	r2, r0
    ebb2:	460b      	mov	r3, r1
    ebb4:	4610      	mov	r0, r2
    ebb6:	4619      	mov	r1, r3
    ebb8:	f04f 0200 	mov.w	r2, #0
    ebbc:	f04f 0300 	mov.w	r3, #0
    ebc0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ebc4:	f008 ff78 	bl	17ab8 <__aeabi_dmul>
    ebc8:	4602      	mov	r2, r0
    ebca:	460b      	mov	r3, r1
    ebcc:	4610      	mov	r0, r2
    ebce:	4619      	mov	r1, r3
    ebd0:	f009 fa0c 	bl	17fec <__aeabi_d2iz>
    ebd4:	4603      	mov	r3, r0
    ebd6:	b29b      	uxth	r3, r3
    ebd8:	b29a      	uxth	r2, r3
    ebda:	f24c 4338 	movw	r3, #50232	; 0xc438
    ebde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebe2:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ebe4:	bd80      	pop	{r7, pc}
    ebe6:	bf00      	nop

0000ebe8 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ebe8:	b580      	push	{r7, lr}
    ebea:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ebec:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
    ebf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebf4:	2200      	movs	r2, #0
    ebf6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    ebf8:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
    ebfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec00:	781b      	ldrb	r3, [r3, #0]
    ec02:	2b00      	cmp	r3, #0
    ec04:	f001 81af 	beq.w	ff66 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ec08:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec10:	781a      	ldrb	r2, [r3, #0]
    ec12:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ec16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec1a:	781b      	ldrb	r3, [r3, #0]
    ec1c:	b2db      	uxtb	r3, r3
    ec1e:	429a      	cmp	r2, r3
    ec20:	d313      	bcc.n	ec4a <send_gps_pos+0x62>
    ec22:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ec26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec2a:	781b      	ldrb	r3, [r3, #0]
    ec2c:	b2db      	uxtb	r3, r3
    ec2e:	461a      	mov	r2, r3
    ec30:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec38:	781b      	ldrb	r3, [r3, #0]
    ec3a:	1ad3      	subs	r3, r2, r3
    ec3c:	33ff      	adds	r3, #255	; 0xff
    ec3e:	2b21      	cmp	r3, #33	; 0x21
    ec40:	bfd4      	ite	le
    ec42:	2300      	movle	r3, #0
    ec44:	2301      	movgt	r3, #1
    ec46:	b2db      	uxtb	r3, r3
    ec48:	e011      	b.n	ec6e <send_gps_pos+0x86>
    ec4a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ec4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec52:	781b      	ldrb	r3, [r3, #0]
    ec54:	b2db      	uxtb	r3, r3
    ec56:	461a      	mov	r2, r3
    ec58:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec60:	781b      	ldrb	r3, [r3, #0]
    ec62:	1ad3      	subs	r3, r2, r3
    ec64:	2b21      	cmp	r3, #33	; 0x21
    ec66:	bfd4      	ite	le
    ec68:	2300      	movle	r3, #0
    ec6a:	2301      	movgt	r3, #1
    ec6c:	b2db      	uxtb	r3, r3
    ec6e:	2b00      	cmp	r3, #0
    ec70:	f001 816b 	beq.w	ff4a <send_gps_pos+0x1362>
    ec74:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec7c:	781b      	ldrb	r3, [r3, #0]
    ec7e:	461a      	mov	r2, r3
    ec80:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ec84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec88:	2105      	movs	r1, #5
    ec8a:	5499      	strb	r1, [r3, r2]
    ec8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec94:	781b      	ldrb	r3, [r3, #0]
    ec96:	3301      	adds	r3, #1
    ec98:	b2da      	uxtb	r2, r3
    ec9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca2:	701a      	strb	r2, [r3, #0]
    eca4:	f24c 3319 	movw	r3, #49945	; 0xc319
    eca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecac:	781b      	ldrb	r3, [r3, #0]
    ecae:	2bff      	cmp	r3, #255	; 0xff
    ecb0:	d105      	bne.n	ecbe <send_gps_pos+0xd6>
    ecb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecba:	2200      	movs	r2, #0
    ecbc:	701a      	strb	r2, [r3, #0]
    ecbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc6:	781b      	ldrb	r3, [r3, #0]
    ecc8:	461a      	mov	r2, r3
    ecca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ecce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecd2:	2108      	movs	r1, #8
    ecd4:	5499      	strb	r1, [r3, r2]
    ecd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecde:	781b      	ldrb	r3, [r3, #0]
    ece0:	3301      	adds	r3, #1
    ece2:	b2da      	uxtb	r2, r3
    ece4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ece8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecec:	701a      	strb	r2, [r3, #0]
    ecee:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf6:	781b      	ldrb	r3, [r3, #0]
    ecf8:	2bff      	cmp	r3, #255	; 0xff
    ecfa:	d105      	bne.n	ed08 <send_gps_pos+0x120>
    ecfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed04:	2200      	movs	r2, #0
    ed06:	701a      	strb	r2, [r3, #0]
    ed08:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ed0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed10:	2208      	movs	r2, #8
    ed12:	701a      	strb	r2, [r3, #0]
    ed14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ed18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed1c:	2208      	movs	r2, #8
    ed1e:	701a      	strb	r2, [r3, #0]
    ed20:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed28:	781b      	ldrb	r3, [r3, #0]
    ed2a:	461a      	mov	r2, r3
    ed2c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    ed30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed34:	7819      	ldrb	r1, [r3, #0]
    ed36:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ed3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed3e:	5499      	strb	r1, [r3, r2]
    ed40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ed44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed48:	781a      	ldrb	r2, [r3, #0]
    ed4a:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    ed4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed52:	781b      	ldrb	r3, [r3, #0]
    ed54:	4413      	add	r3, r2
    ed56:	b2da      	uxtb	r2, r3
    ed58:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ed5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed60:	701a      	strb	r2, [r3, #0]
    ed62:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ed66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed6a:	781a      	ldrb	r2, [r3, #0]
    ed6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ed70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed74:	781b      	ldrb	r3, [r3, #0]
    ed76:	4413      	add	r3, r2
    ed78:	b2da      	uxtb	r2, r3
    ed7a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ed7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed82:	701a      	strb	r2, [r3, #0]
    ed84:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8c:	781b      	ldrb	r3, [r3, #0]
    ed8e:	3301      	adds	r3, #1
    ed90:	b2da      	uxtb	r2, r3
    ed92:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed9a:	701a      	strb	r2, [r3, #0]
    ed9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    eda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda4:	781b      	ldrb	r3, [r3, #0]
    eda6:	2bff      	cmp	r3, #255	; 0xff
    eda8:	d105      	bne.n	edb6 <send_gps_pos+0x1ce>
    edaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    edae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb2:	2200      	movs	r2, #0
    edb4:	701a      	strb	r2, [r3, #0]
    edb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    edba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edbe:	781b      	ldrb	r3, [r3, #0]
    edc0:	461a      	mov	r2, r3
    edc2:	f24c 439c 	movw	r3, #50332	; 0xc49c
    edc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edca:	7819      	ldrb	r1, [r3, #0]
    edcc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    edd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd4:	5499      	strb	r1, [r3, r2]
    edd6:	f24c 439c 	movw	r3, #50332	; 0xc49c
    edda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edde:	781a      	ldrb	r2, [r3, #0]
    ede0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ede4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede8:	781b      	ldrb	r3, [r3, #0]
    edea:	4413      	add	r3, r2
    edec:	b2da      	uxtb	r2, r3
    edee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    edf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf6:	701a      	strb	r2, [r3, #0]
    edf8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    edfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee00:	781a      	ldrb	r2, [r3, #0]
    ee02:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee0a:	781b      	ldrb	r3, [r3, #0]
    ee0c:	4413      	add	r3, r2
    ee0e:	b2da      	uxtb	r2, r3
    ee10:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ee14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee18:	701a      	strb	r2, [r3, #0]
    ee1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee22:	781b      	ldrb	r3, [r3, #0]
    ee24:	3301      	adds	r3, #1
    ee26:	b2da      	uxtb	r2, r3
    ee28:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee30:	701a      	strb	r2, [r3, #0]
    ee32:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee3a:	781b      	ldrb	r3, [r3, #0]
    ee3c:	2bff      	cmp	r3, #255	; 0xff
    ee3e:	d105      	bne.n	ee4c <send_gps_pos+0x264>
    ee40:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee48:	2200      	movs	r2, #0
    ee4a:	701a      	strb	r2, [r3, #0]
    ee4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee54:	781b      	ldrb	r3, [r3, #0]
    ee56:	461a      	mov	r2, r3
    ee58:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ee5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee60:	7859      	ldrb	r1, [r3, #1]
    ee62:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ee66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee6a:	5499      	strb	r1, [r3, r2]
    ee6c:	4bd1      	ldr	r3, [pc, #836]	; (f1b4 <send_gps_pos+0x5cc>)
    ee6e:	781a      	ldrb	r2, [r3, #0]
    ee70:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee78:	781b      	ldrb	r3, [r3, #0]
    ee7a:	4413      	add	r3, r2
    ee7c:	b2da      	uxtb	r2, r3
    ee7e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee86:	701a      	strb	r2, [r3, #0]
    ee88:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ee8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee90:	781a      	ldrb	r2, [r3, #0]
    ee92:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee9a:	781b      	ldrb	r3, [r3, #0]
    ee9c:	4413      	add	r3, r2
    ee9e:	b2da      	uxtb	r2, r3
    eea0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    eea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea8:	701a      	strb	r2, [r3, #0]
    eeaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    eeae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb2:	781b      	ldrb	r3, [r3, #0]
    eeb4:	3301      	adds	r3, #1
    eeb6:	b2da      	uxtb	r2, r3
    eeb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    eebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec0:	701a      	strb	r2, [r3, #0]
    eec2:	f24c 3319 	movw	r3, #49945	; 0xc319
    eec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeca:	781b      	ldrb	r3, [r3, #0]
    eecc:	2bff      	cmp	r3, #255	; 0xff
    eece:	d105      	bne.n	eedc <send_gps_pos+0x2f4>
    eed0:	f24c 3319 	movw	r3, #49945	; 0xc319
    eed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed8:	2200      	movs	r2, #0
    eeda:	701a      	strb	r2, [r3, #0]
    eedc:	f24c 3319 	movw	r3, #49945	; 0xc319
    eee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee4:	781b      	ldrb	r3, [r3, #0]
    eee6:	461a      	mov	r2, r3
    eee8:	f24c 439c 	movw	r3, #50332	; 0xc49c
    eeec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef0:	7899      	ldrb	r1, [r3, #2]
    eef2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    eef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eefa:	5499      	strb	r1, [r3, r2]
    eefc:	4bae      	ldr	r3, [pc, #696]	; (f1b8 <send_gps_pos+0x5d0>)
    eefe:	781a      	ldrb	r2, [r3, #0]
    ef00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef08:	781b      	ldrb	r3, [r3, #0]
    ef0a:	4413      	add	r3, r2
    ef0c:	b2da      	uxtb	r2, r3
    ef0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef16:	701a      	strb	r2, [r3, #0]
    ef18:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef20:	781a      	ldrb	r2, [r3, #0]
    ef22:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef2a:	781b      	ldrb	r3, [r3, #0]
    ef2c:	4413      	add	r3, r2
    ef2e:	b2da      	uxtb	r2, r3
    ef30:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef38:	701a      	strb	r2, [r3, #0]
    ef3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef42:	781b      	ldrb	r3, [r3, #0]
    ef44:	3301      	adds	r3, #1
    ef46:	b2da      	uxtb	r2, r3
    ef48:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef50:	701a      	strb	r2, [r3, #0]
    ef52:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef5a:	781b      	ldrb	r3, [r3, #0]
    ef5c:	2bff      	cmp	r3, #255	; 0xff
    ef5e:	d105      	bne.n	ef6c <send_gps_pos+0x384>
    ef60:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef68:	2200      	movs	r2, #0
    ef6a:	701a      	strb	r2, [r3, #0]
    ef6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef74:	781b      	ldrb	r3, [r3, #0]
    ef76:	461a      	mov	r2, r3
    ef78:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ef7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef80:	78d9      	ldrb	r1, [r3, #3]
    ef82:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ef86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef8a:	5499      	strb	r1, [r3, r2]
    ef8c:	4b8b      	ldr	r3, [pc, #556]	; (f1bc <send_gps_pos+0x5d4>)
    ef8e:	781a      	ldrb	r2, [r3, #0]
    ef90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef98:	781b      	ldrb	r3, [r3, #0]
    ef9a:	4413      	add	r3, r2
    ef9c:	b2da      	uxtb	r2, r3
    ef9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    efa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa6:	701a      	strb	r2, [r3, #0]
    efa8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    efac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb0:	781a      	ldrb	r2, [r3, #0]
    efb2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    efb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efba:	781b      	ldrb	r3, [r3, #0]
    efbc:	4413      	add	r3, r2
    efbe:	b2da      	uxtb	r2, r3
    efc0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    efc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc8:	701a      	strb	r2, [r3, #0]
    efca:	f24c 3319 	movw	r3, #49945	; 0xc319
    efce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd2:	781b      	ldrb	r3, [r3, #0]
    efd4:	3301      	adds	r3, #1
    efd6:	b2da      	uxtb	r2, r3
    efd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    efdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe0:	701a      	strb	r2, [r3, #0]
    efe2:	f24c 3319 	movw	r3, #49945	; 0xc319
    efe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efea:	781b      	ldrb	r3, [r3, #0]
    efec:	2bff      	cmp	r3, #255	; 0xff
    efee:	d105      	bne.n	effc <send_gps_pos+0x414>
    eff0:	f24c 3319 	movw	r3, #49945	; 0xc319
    eff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff8:	2200      	movs	r2, #0
    effa:	701a      	strb	r2, [r3, #0]
    effc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f004:	781b      	ldrb	r3, [r3, #0]
    f006:	461a      	mov	r2, r3
    f008:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f010:	7819      	ldrb	r1, [r3, #0]
    f012:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f01a:	5499      	strb	r1, [r3, r2]
    f01c:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f024:	781a      	ldrb	r2, [r3, #0]
    f026:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f02e:	781b      	ldrb	r3, [r3, #0]
    f030:	4413      	add	r3, r2
    f032:	b2da      	uxtb	r2, r3
    f034:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f03c:	701a      	strb	r2, [r3, #0]
    f03e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f046:	781a      	ldrb	r2, [r3, #0]
    f048:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f050:	781b      	ldrb	r3, [r3, #0]
    f052:	4413      	add	r3, r2
    f054:	b2da      	uxtb	r2, r3
    f056:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f05e:	701a      	strb	r2, [r3, #0]
    f060:	f24c 3319 	movw	r3, #49945	; 0xc319
    f064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f068:	781b      	ldrb	r3, [r3, #0]
    f06a:	3301      	adds	r3, #1
    f06c:	b2da      	uxtb	r2, r3
    f06e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f076:	701a      	strb	r2, [r3, #0]
    f078:	f24c 3319 	movw	r3, #49945	; 0xc319
    f07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f080:	781b      	ldrb	r3, [r3, #0]
    f082:	2bff      	cmp	r3, #255	; 0xff
    f084:	d105      	bne.n	f092 <send_gps_pos+0x4aa>
    f086:	f24c 3319 	movw	r3, #49945	; 0xc319
    f08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f08e:	2200      	movs	r2, #0
    f090:	701a      	strb	r2, [r3, #0]
    f092:	f24c 3319 	movw	r3, #49945	; 0xc319
    f096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f09a:	781b      	ldrb	r3, [r3, #0]
    f09c:	461a      	mov	r2, r3
    f09e:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f0a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a6:	7859      	ldrb	r1, [r3, #1]
    f0a8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b0:	5499      	strb	r1, [r3, r2]
    f0b2:	4b43      	ldr	r3, [pc, #268]	; (f1c0 <send_gps_pos+0x5d8>)
    f0b4:	781a      	ldrb	r2, [r3, #0]
    f0b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0be:	781b      	ldrb	r3, [r3, #0]
    f0c0:	4413      	add	r3, r2
    f0c2:	b2da      	uxtb	r2, r3
    f0c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0cc:	701a      	strb	r2, [r3, #0]
    f0ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d6:	781a      	ldrb	r2, [r3, #0]
    f0d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e0:	781b      	ldrb	r3, [r3, #0]
    f0e2:	4413      	add	r3, r2
    f0e4:	b2da      	uxtb	r2, r3
    f0e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ee:	701a      	strb	r2, [r3, #0]
    f0f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f8:	781b      	ldrb	r3, [r3, #0]
    f0fa:	3301      	adds	r3, #1
    f0fc:	b2da      	uxtb	r2, r3
    f0fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    f102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f106:	701a      	strb	r2, [r3, #0]
    f108:	f24c 3319 	movw	r3, #49945	; 0xc319
    f10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f110:	781b      	ldrb	r3, [r3, #0]
    f112:	2bff      	cmp	r3, #255	; 0xff
    f114:	d105      	bne.n	f122 <send_gps_pos+0x53a>
    f116:	f24c 3319 	movw	r3, #49945	; 0xc319
    f11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f11e:	2200      	movs	r2, #0
    f120:	701a      	strb	r2, [r3, #0]
    f122:	f24c 3319 	movw	r3, #49945	; 0xc319
    f126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f12a:	781b      	ldrb	r3, [r3, #0]
    f12c:	461a      	mov	r2, r3
    f12e:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f136:	7899      	ldrb	r1, [r3, #2]
    f138:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f140:	5499      	strb	r1, [r3, r2]
    f142:	4b20      	ldr	r3, [pc, #128]	; (f1c4 <send_gps_pos+0x5dc>)
    f144:	781a      	ldrb	r2, [r3, #0]
    f146:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f14e:	781b      	ldrb	r3, [r3, #0]
    f150:	4413      	add	r3, r2
    f152:	b2da      	uxtb	r2, r3
    f154:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f15c:	701a      	strb	r2, [r3, #0]
    f15e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f166:	781a      	ldrb	r2, [r3, #0]
    f168:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f170:	781b      	ldrb	r3, [r3, #0]
    f172:	4413      	add	r3, r2
    f174:	b2da      	uxtb	r2, r3
    f176:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f17e:	701a      	strb	r2, [r3, #0]
    f180:	f24c 3319 	movw	r3, #49945	; 0xc319
    f184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f188:	781b      	ldrb	r3, [r3, #0]
    f18a:	3301      	adds	r3, #1
    f18c:	b2da      	uxtb	r2, r3
    f18e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f196:	701a      	strb	r2, [r3, #0]
    f198:	f24c 3319 	movw	r3, #49945	; 0xc319
    f19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a0:	781b      	ldrb	r3, [r3, #0]
    f1a2:	2bff      	cmp	r3, #255	; 0xff
    f1a4:	d110      	bne.n	f1c8 <send_gps_pos+0x5e0>
    f1a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ae:	2200      	movs	r2, #0
    f1b0:	701a      	strb	r2, [r3, #0]
    f1b2:	e009      	b.n	f1c8 <send_gps_pos+0x5e0>
    f1b4:	2004c49d 	.word	0x2004c49d
    f1b8:	2004c49e 	.word	0x2004c49e
    f1bc:	2004c49f 	.word	0x2004c49f
    f1c0:	2004c4a1 	.word	0x2004c4a1
    f1c4:	2004c4a2 	.word	0x2004c4a2
    f1c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d0:	781b      	ldrb	r3, [r3, #0]
    f1d2:	461a      	mov	r2, r3
    f1d4:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1dc:	78d9      	ldrb	r1, [r3, #3]
    f1de:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e6:	5499      	strb	r1, [r3, r2]
    f1e8:	4bd3      	ldr	r3, [pc, #844]	; (f538 <send_gps_pos+0x950>)
    f1ea:	781a      	ldrb	r2, [r3, #0]
    f1ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f4:	781b      	ldrb	r3, [r3, #0]
    f1f6:	4413      	add	r3, r2
    f1f8:	b2da      	uxtb	r2, r3
    f1fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f202:	701a      	strb	r2, [r3, #0]
    f204:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20c:	781a      	ldrb	r2, [r3, #0]
    f20e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f216:	781b      	ldrb	r3, [r3, #0]
    f218:	4413      	add	r3, r2
    f21a:	b2da      	uxtb	r2, r3
    f21c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f224:	701a      	strb	r2, [r3, #0]
    f226:	f24c 3319 	movw	r3, #49945	; 0xc319
    f22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f22e:	781b      	ldrb	r3, [r3, #0]
    f230:	3301      	adds	r3, #1
    f232:	b2da      	uxtb	r2, r3
    f234:	f24c 3319 	movw	r3, #49945	; 0xc319
    f238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f23c:	701a      	strb	r2, [r3, #0]
    f23e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f246:	781b      	ldrb	r3, [r3, #0]
    f248:	2bff      	cmp	r3, #255	; 0xff
    f24a:	d105      	bne.n	f258 <send_gps_pos+0x670>
    f24c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f254:	2200      	movs	r2, #0
    f256:	701a      	strb	r2, [r3, #0]
    f258:	f24c 3319 	movw	r3, #49945	; 0xc319
    f25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f260:	781b      	ldrb	r3, [r3, #0]
    f262:	461a      	mov	r2, r3
    f264:	f24c 4398 	movw	r3, #50328	; 0xc498
    f268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f26c:	7819      	ldrb	r1, [r3, #0]
    f26e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f276:	5499      	strb	r1, [r3, r2]
    f278:	f24c 4398 	movw	r3, #50328	; 0xc498
    f27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f280:	781a      	ldrb	r2, [r3, #0]
    f282:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f28a:	781b      	ldrb	r3, [r3, #0]
    f28c:	4413      	add	r3, r2
    f28e:	b2da      	uxtb	r2, r3
    f290:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f298:	701a      	strb	r2, [r3, #0]
    f29a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2a2:	781a      	ldrb	r2, [r3, #0]
    f2a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ac:	781b      	ldrb	r3, [r3, #0]
    f2ae:	4413      	add	r3, r2
    f2b0:	b2da      	uxtb	r2, r3
    f2b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ba:	701a      	strb	r2, [r3, #0]
    f2bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c4:	781b      	ldrb	r3, [r3, #0]
    f2c6:	3301      	adds	r3, #1
    f2c8:	b2da      	uxtb	r2, r3
    f2ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d2:	701a      	strb	r2, [r3, #0]
    f2d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2dc:	781b      	ldrb	r3, [r3, #0]
    f2de:	2bff      	cmp	r3, #255	; 0xff
    f2e0:	d105      	bne.n	f2ee <send_gps_pos+0x706>
    f2e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ea:	2200      	movs	r2, #0
    f2ec:	701a      	strb	r2, [r3, #0]
    f2ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f6:	781b      	ldrb	r3, [r3, #0]
    f2f8:	461a      	mov	r2, r3
    f2fa:	f24c 4398 	movw	r3, #50328	; 0xc498
    f2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f302:	7859      	ldrb	r1, [r3, #1]
    f304:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f30c:	5499      	strb	r1, [r3, r2]
    f30e:	4b8b      	ldr	r3, [pc, #556]	; (f53c <send_gps_pos+0x954>)
    f310:	781a      	ldrb	r2, [r3, #0]
    f312:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f31a:	781b      	ldrb	r3, [r3, #0]
    f31c:	4413      	add	r3, r2
    f31e:	b2da      	uxtb	r2, r3
    f320:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f328:	701a      	strb	r2, [r3, #0]
    f32a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f32e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f332:	781a      	ldrb	r2, [r3, #0]
    f334:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f33c:	781b      	ldrb	r3, [r3, #0]
    f33e:	4413      	add	r3, r2
    f340:	b2da      	uxtb	r2, r3
    f342:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f34a:	701a      	strb	r2, [r3, #0]
    f34c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f354:	781b      	ldrb	r3, [r3, #0]
    f356:	3301      	adds	r3, #1
    f358:	b2da      	uxtb	r2, r3
    f35a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f362:	701a      	strb	r2, [r3, #0]
    f364:	f24c 3319 	movw	r3, #49945	; 0xc319
    f368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36c:	781b      	ldrb	r3, [r3, #0]
    f36e:	2bff      	cmp	r3, #255	; 0xff
    f370:	d105      	bne.n	f37e <send_gps_pos+0x796>
    f372:	f24c 3319 	movw	r3, #49945	; 0xc319
    f376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f37a:	2200      	movs	r2, #0
    f37c:	701a      	strb	r2, [r3, #0]
    f37e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f386:	781b      	ldrb	r3, [r3, #0]
    f388:	461a      	mov	r2, r3
    f38a:	f24c 4398 	movw	r3, #50328	; 0xc498
    f38e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f392:	7899      	ldrb	r1, [r3, #2]
    f394:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f39c:	5499      	strb	r1, [r3, r2]
    f39e:	4b68      	ldr	r3, [pc, #416]	; (f540 <send_gps_pos+0x958>)
    f3a0:	781a      	ldrb	r2, [r3, #0]
    f3a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3aa:	781b      	ldrb	r3, [r3, #0]
    f3ac:	4413      	add	r3, r2
    f3ae:	b2da      	uxtb	r2, r3
    f3b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b8:	701a      	strb	r2, [r3, #0]
    f3ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c2:	781a      	ldrb	r2, [r3, #0]
    f3c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3cc:	781b      	ldrb	r3, [r3, #0]
    f3ce:	4413      	add	r3, r2
    f3d0:	b2da      	uxtb	r2, r3
    f3d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3da:	701a      	strb	r2, [r3, #0]
    f3dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e4:	781b      	ldrb	r3, [r3, #0]
    f3e6:	3301      	adds	r3, #1
    f3e8:	b2da      	uxtb	r2, r3
    f3ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3f2:	701a      	strb	r2, [r3, #0]
    f3f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3fc:	781b      	ldrb	r3, [r3, #0]
    f3fe:	2bff      	cmp	r3, #255	; 0xff
    f400:	d105      	bne.n	f40e <send_gps_pos+0x826>
    f402:	f24c 3319 	movw	r3, #49945	; 0xc319
    f406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f40a:	2200      	movs	r2, #0
    f40c:	701a      	strb	r2, [r3, #0]
    f40e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f416:	781b      	ldrb	r3, [r3, #0]
    f418:	461a      	mov	r2, r3
    f41a:	f24c 4398 	movw	r3, #50328	; 0xc498
    f41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f422:	78d9      	ldrb	r1, [r3, #3]
    f424:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42c:	5499      	strb	r1, [r3, r2]
    f42e:	4b45      	ldr	r3, [pc, #276]	; (f544 <send_gps_pos+0x95c>)
    f430:	781a      	ldrb	r2, [r3, #0]
    f432:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f43a:	781b      	ldrb	r3, [r3, #0]
    f43c:	4413      	add	r3, r2
    f43e:	b2da      	uxtb	r2, r3
    f440:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f448:	701a      	strb	r2, [r3, #0]
    f44a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f452:	781a      	ldrb	r2, [r3, #0]
    f454:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45c:	781b      	ldrb	r3, [r3, #0]
    f45e:	4413      	add	r3, r2
    f460:	b2da      	uxtb	r2, r3
    f462:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f46a:	701a      	strb	r2, [r3, #0]
    f46c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f474:	781b      	ldrb	r3, [r3, #0]
    f476:	3301      	adds	r3, #1
    f478:	b2da      	uxtb	r2, r3
    f47a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f482:	701a      	strb	r2, [r3, #0]
    f484:	f24c 3319 	movw	r3, #49945	; 0xc319
    f488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48c:	781b      	ldrb	r3, [r3, #0]
    f48e:	2bff      	cmp	r3, #255	; 0xff
    f490:	d105      	bne.n	f49e <send_gps_pos+0x8b6>
    f492:	f24c 3319 	movw	r3, #49945	; 0xc319
    f496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f49a:	2200      	movs	r2, #0
    f49c:	701a      	strb	r2, [r3, #0]
    f49e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a6:	781b      	ldrb	r3, [r3, #0]
    f4a8:	461a      	mov	r2, r3
    f4aa:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f4ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b2:	7819      	ldrb	r1, [r3, #0]
    f4b4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4bc:	5499      	strb	r1, [r3, r2]
    f4be:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c6:	781a      	ldrb	r2, [r3, #0]
    f4c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d0:	781b      	ldrb	r3, [r3, #0]
    f4d2:	4413      	add	r3, r2
    f4d4:	b2da      	uxtb	r2, r3
    f4d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4de:	701a      	strb	r2, [r3, #0]
    f4e0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e8:	781a      	ldrb	r2, [r3, #0]
    f4ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f2:	781b      	ldrb	r3, [r3, #0]
    f4f4:	4413      	add	r3, r2
    f4f6:	b2da      	uxtb	r2, r3
    f4f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f500:	701a      	strb	r2, [r3, #0]
    f502:	f24c 3319 	movw	r3, #49945	; 0xc319
    f506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50a:	781b      	ldrb	r3, [r3, #0]
    f50c:	3301      	adds	r3, #1
    f50e:	b2da      	uxtb	r2, r3
    f510:	f24c 3319 	movw	r3, #49945	; 0xc319
    f514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f518:	701a      	strb	r2, [r3, #0]
    f51a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f522:	781b      	ldrb	r3, [r3, #0]
    f524:	2bff      	cmp	r3, #255	; 0xff
    f526:	d10f      	bne.n	f548 <send_gps_pos+0x960>
    f528:	f24c 3319 	movw	r3, #49945	; 0xc319
    f52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f530:	2200      	movs	r2, #0
    f532:	701a      	strb	r2, [r3, #0]
    f534:	e008      	b.n	f548 <send_gps_pos+0x960>
    f536:	bf00      	nop
    f538:	2004c4a3 	.word	0x2004c4a3
    f53c:	2004c499 	.word	0x2004c499
    f540:	2004c49a 	.word	0x2004c49a
    f544:	2004c49b 	.word	0x2004c49b
    f548:	f24c 3319 	movw	r3, #49945	; 0xc319
    f54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f550:	781b      	ldrb	r3, [r3, #0]
    f552:	461a      	mov	r2, r3
    f554:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f55c:	7859      	ldrb	r1, [r3, #1]
    f55e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f566:	5499      	strb	r1, [r3, r2]
    f568:	4bd1      	ldr	r3, [pc, #836]	; (f8b0 <send_gps_pos+0xcc8>)
    f56a:	781a      	ldrb	r2, [r3, #0]
    f56c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f574:	781b      	ldrb	r3, [r3, #0]
    f576:	4413      	add	r3, r2
    f578:	b2da      	uxtb	r2, r3
    f57a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f582:	701a      	strb	r2, [r3, #0]
    f584:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f58c:	781a      	ldrb	r2, [r3, #0]
    f58e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f596:	781b      	ldrb	r3, [r3, #0]
    f598:	4413      	add	r3, r2
    f59a:	b2da      	uxtb	r2, r3
    f59c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a4:	701a      	strb	r2, [r3, #0]
    f5a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ae:	781b      	ldrb	r3, [r3, #0]
    f5b0:	3301      	adds	r3, #1
    f5b2:	b2da      	uxtb	r2, r3
    f5b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5bc:	701a      	strb	r2, [r3, #0]
    f5be:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c6:	781b      	ldrb	r3, [r3, #0]
    f5c8:	2bff      	cmp	r3, #255	; 0xff
    f5ca:	d105      	bne.n	f5d8 <send_gps_pos+0x9f0>
    f5cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d4:	2200      	movs	r2, #0
    f5d6:	701a      	strb	r2, [r3, #0]
    f5d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e0:	781b      	ldrb	r3, [r3, #0]
    f5e2:	461a      	mov	r2, r3
    f5e4:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ec:	7899      	ldrb	r1, [r3, #2]
    f5ee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f6:	5499      	strb	r1, [r3, r2]
    f5f8:	4bae      	ldr	r3, [pc, #696]	; (f8b4 <send_gps_pos+0xccc>)
    f5fa:	781a      	ldrb	r2, [r3, #0]
    f5fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f604:	781b      	ldrb	r3, [r3, #0]
    f606:	4413      	add	r3, r2
    f608:	b2da      	uxtb	r2, r3
    f60a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f612:	701a      	strb	r2, [r3, #0]
    f614:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f61c:	781a      	ldrb	r2, [r3, #0]
    f61e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f626:	781b      	ldrb	r3, [r3, #0]
    f628:	4413      	add	r3, r2
    f62a:	b2da      	uxtb	r2, r3
    f62c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f634:	701a      	strb	r2, [r3, #0]
    f636:	f24c 3319 	movw	r3, #49945	; 0xc319
    f63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f63e:	781b      	ldrb	r3, [r3, #0]
    f640:	3301      	adds	r3, #1
    f642:	b2da      	uxtb	r2, r3
    f644:	f24c 3319 	movw	r3, #49945	; 0xc319
    f648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f64c:	701a      	strb	r2, [r3, #0]
    f64e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f656:	781b      	ldrb	r3, [r3, #0]
    f658:	2bff      	cmp	r3, #255	; 0xff
    f65a:	d105      	bne.n	f668 <send_gps_pos+0xa80>
    f65c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f664:	2200      	movs	r2, #0
    f666:	701a      	strb	r2, [r3, #0]
    f668:	f24c 3319 	movw	r3, #49945	; 0xc319
    f66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f670:	781b      	ldrb	r3, [r3, #0]
    f672:	461a      	mov	r2, r3
    f674:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67c:	78d9      	ldrb	r1, [r3, #3]
    f67e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f686:	5499      	strb	r1, [r3, r2]
    f688:	4b8b      	ldr	r3, [pc, #556]	; (f8b8 <send_gps_pos+0xcd0>)
    f68a:	781a      	ldrb	r2, [r3, #0]
    f68c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f694:	781b      	ldrb	r3, [r3, #0]
    f696:	4413      	add	r3, r2
    f698:	b2da      	uxtb	r2, r3
    f69a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a2:	701a      	strb	r2, [r3, #0]
    f6a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ac:	781a      	ldrb	r2, [r3, #0]
    f6ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b6:	781b      	ldrb	r3, [r3, #0]
    f6b8:	4413      	add	r3, r2
    f6ba:	b2da      	uxtb	r2, r3
    f6bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c4:	701a      	strb	r2, [r3, #0]
    f6c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ce:	781b      	ldrb	r3, [r3, #0]
    f6d0:	3301      	adds	r3, #1
    f6d2:	b2da      	uxtb	r2, r3
    f6d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6dc:	701a      	strb	r2, [r3, #0]
    f6de:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e6:	781b      	ldrb	r3, [r3, #0]
    f6e8:	2bff      	cmp	r3, #255	; 0xff
    f6ea:	d105      	bne.n	f6f8 <send_gps_pos+0xb10>
    f6ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f4:	2200      	movs	r2, #0
    f6f6:	701a      	strb	r2, [r3, #0]
    f6f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f700:	781b      	ldrb	r3, [r3, #0]
    f702:	461a      	mov	r2, r3
    f704:	f24c 4390 	movw	r3, #50320	; 0xc490
    f708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f70c:	7819      	ldrb	r1, [r3, #0]
    f70e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f716:	5499      	strb	r1, [r3, r2]
    f718:	f24c 4390 	movw	r3, #50320	; 0xc490
    f71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f720:	781a      	ldrb	r2, [r3, #0]
    f722:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f72a:	781b      	ldrb	r3, [r3, #0]
    f72c:	4413      	add	r3, r2
    f72e:	b2da      	uxtb	r2, r3
    f730:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f738:	701a      	strb	r2, [r3, #0]
    f73a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f742:	781a      	ldrb	r2, [r3, #0]
    f744:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74c:	781b      	ldrb	r3, [r3, #0]
    f74e:	4413      	add	r3, r2
    f750:	b2da      	uxtb	r2, r3
    f752:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f75a:	701a      	strb	r2, [r3, #0]
    f75c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f764:	781b      	ldrb	r3, [r3, #0]
    f766:	3301      	adds	r3, #1
    f768:	b2da      	uxtb	r2, r3
    f76a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f772:	701a      	strb	r2, [r3, #0]
    f774:	f24c 3319 	movw	r3, #49945	; 0xc319
    f778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77c:	781b      	ldrb	r3, [r3, #0]
    f77e:	2bff      	cmp	r3, #255	; 0xff
    f780:	d105      	bne.n	f78e <send_gps_pos+0xba6>
    f782:	f24c 3319 	movw	r3, #49945	; 0xc319
    f786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f78a:	2200      	movs	r2, #0
    f78c:	701a      	strb	r2, [r3, #0]
    f78e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f796:	781b      	ldrb	r3, [r3, #0]
    f798:	461a      	mov	r2, r3
    f79a:	f24c 4390 	movw	r3, #50320	; 0xc490
    f79e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a2:	7859      	ldrb	r1, [r3, #1]
    f7a4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f7a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ac:	5499      	strb	r1, [r3, r2]
    f7ae:	4b43      	ldr	r3, [pc, #268]	; (f8bc <send_gps_pos+0xcd4>)
    f7b0:	781a      	ldrb	r2, [r3, #0]
    f7b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ba:	781b      	ldrb	r3, [r3, #0]
    f7bc:	4413      	add	r3, r2
    f7be:	b2da      	uxtb	r2, r3
    f7c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c8:	701a      	strb	r2, [r3, #0]
    f7ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d2:	781a      	ldrb	r2, [r3, #0]
    f7d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7dc:	781b      	ldrb	r3, [r3, #0]
    f7de:	4413      	add	r3, r2
    f7e0:	b2da      	uxtb	r2, r3
    f7e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f7e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ea:	701a      	strb	r2, [r3, #0]
    f7ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f4:	781b      	ldrb	r3, [r3, #0]
    f7f6:	3301      	adds	r3, #1
    f7f8:	b2da      	uxtb	r2, r3
    f7fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f802:	701a      	strb	r2, [r3, #0]
    f804:	f24c 3319 	movw	r3, #49945	; 0xc319
    f808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f80c:	781b      	ldrb	r3, [r3, #0]
    f80e:	2bff      	cmp	r3, #255	; 0xff
    f810:	d105      	bne.n	f81e <send_gps_pos+0xc36>
    f812:	f24c 3319 	movw	r3, #49945	; 0xc319
    f816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f81a:	2200      	movs	r2, #0
    f81c:	701a      	strb	r2, [r3, #0]
    f81e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f826:	781b      	ldrb	r3, [r3, #0]
    f828:	461a      	mov	r2, r3
    f82a:	f24c 4390 	movw	r3, #50320	; 0xc490
    f82e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f832:	7899      	ldrb	r1, [r3, #2]
    f834:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83c:	5499      	strb	r1, [r3, r2]
    f83e:	4b20      	ldr	r3, [pc, #128]	; (f8c0 <send_gps_pos+0xcd8>)
    f840:	781a      	ldrb	r2, [r3, #0]
    f842:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f84a:	781b      	ldrb	r3, [r3, #0]
    f84c:	4413      	add	r3, r2
    f84e:	b2da      	uxtb	r2, r3
    f850:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f858:	701a      	strb	r2, [r3, #0]
    f85a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f862:	781a      	ldrb	r2, [r3, #0]
    f864:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86c:	781b      	ldrb	r3, [r3, #0]
    f86e:	4413      	add	r3, r2
    f870:	b2da      	uxtb	r2, r3
    f872:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f87a:	701a      	strb	r2, [r3, #0]
    f87c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f884:	781b      	ldrb	r3, [r3, #0]
    f886:	3301      	adds	r3, #1
    f888:	b2da      	uxtb	r2, r3
    f88a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f892:	701a      	strb	r2, [r3, #0]
    f894:	f24c 3319 	movw	r3, #49945	; 0xc319
    f898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f89c:	781b      	ldrb	r3, [r3, #0]
    f89e:	2bff      	cmp	r3, #255	; 0xff
    f8a0:	d110      	bne.n	f8c4 <send_gps_pos+0xcdc>
    f8a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8aa:	2200      	movs	r2, #0
    f8ac:	701a      	strb	r2, [r3, #0]
    f8ae:	e009      	b.n	f8c4 <send_gps_pos+0xcdc>
    f8b0:	2004c48d 	.word	0x2004c48d
    f8b4:	2004c48e 	.word	0x2004c48e
    f8b8:	2004c48f 	.word	0x2004c48f
    f8bc:	2004c491 	.word	0x2004c491
    f8c0:	2004c492 	.word	0x2004c492
    f8c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8cc:	781b      	ldrb	r3, [r3, #0]
    f8ce:	461a      	mov	r2, r3
    f8d0:	f24c 4390 	movw	r3, #50320	; 0xc490
    f8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d8:	78d9      	ldrb	r1, [r3, #3]
    f8da:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e2:	5499      	strb	r1, [r3, r2]
    f8e4:	4bd3      	ldr	r3, [pc, #844]	; (fc34 <send_gps_pos+0x104c>)
    f8e6:	781a      	ldrb	r2, [r3, #0]
    f8e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f0:	781b      	ldrb	r3, [r3, #0]
    f8f2:	4413      	add	r3, r2
    f8f4:	b2da      	uxtb	r2, r3
    f8f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8fe:	701a      	strb	r2, [r3, #0]
    f900:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f908:	781a      	ldrb	r2, [r3, #0]
    f90a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f912:	781b      	ldrb	r3, [r3, #0]
    f914:	4413      	add	r3, r2
    f916:	b2da      	uxtb	r2, r3
    f918:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f920:	701a      	strb	r2, [r3, #0]
    f922:	f24c 3319 	movw	r3, #49945	; 0xc319
    f926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f92a:	781b      	ldrb	r3, [r3, #0]
    f92c:	3301      	adds	r3, #1
    f92e:	b2da      	uxtb	r2, r3
    f930:	f24c 3319 	movw	r3, #49945	; 0xc319
    f934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f938:	701a      	strb	r2, [r3, #0]
    f93a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f942:	781b      	ldrb	r3, [r3, #0]
    f944:	2bff      	cmp	r3, #255	; 0xff
    f946:	d105      	bne.n	f954 <send_gps_pos+0xd6c>
    f948:	f24c 3319 	movw	r3, #49945	; 0xc319
    f94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f950:	2200      	movs	r2, #0
    f952:	701a      	strb	r2, [r3, #0]
    f954:	f24c 3319 	movw	r3, #49945	; 0xc319
    f958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f95c:	781b      	ldrb	r3, [r3, #0]
    f95e:	461a      	mov	r2, r3
    f960:	f24c 4394 	movw	r3, #50324	; 0xc494
    f964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f968:	7819      	ldrb	r1, [r3, #0]
    f96a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f972:	5499      	strb	r1, [r3, r2]
    f974:	f24c 4394 	movw	r3, #50324	; 0xc494
    f978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f97c:	781a      	ldrb	r2, [r3, #0]
    f97e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f986:	781b      	ldrb	r3, [r3, #0]
    f988:	4413      	add	r3, r2
    f98a:	b2da      	uxtb	r2, r3
    f98c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f994:	701a      	strb	r2, [r3, #0]
    f996:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f99e:	781a      	ldrb	r2, [r3, #0]
    f9a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a8:	781b      	ldrb	r3, [r3, #0]
    f9aa:	4413      	add	r3, r2
    f9ac:	b2da      	uxtb	r2, r3
    f9ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b6:	701a      	strb	r2, [r3, #0]
    f9b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c0:	781b      	ldrb	r3, [r3, #0]
    f9c2:	3301      	adds	r3, #1
    f9c4:	b2da      	uxtb	r2, r3
    f9c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ce:	701a      	strb	r2, [r3, #0]
    f9d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d8:	781b      	ldrb	r3, [r3, #0]
    f9da:	2bff      	cmp	r3, #255	; 0xff
    f9dc:	d105      	bne.n	f9ea <send_gps_pos+0xe02>
    f9de:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e6:	2200      	movs	r2, #0
    f9e8:	701a      	strb	r2, [r3, #0]
    f9ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f2:	781b      	ldrb	r3, [r3, #0]
    f9f4:	461a      	mov	r2, r3
    f9f6:	f24c 4394 	movw	r3, #50324	; 0xc494
    f9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9fe:	7859      	ldrb	r1, [r3, #1]
    fa00:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fa04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa08:	5499      	strb	r1, [r3, r2]
    fa0a:	4b8b      	ldr	r3, [pc, #556]	; (fc38 <send_gps_pos+0x1050>)
    fa0c:	781a      	ldrb	r2, [r3, #0]
    fa0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa16:	781b      	ldrb	r3, [r3, #0]
    fa18:	4413      	add	r3, r2
    fa1a:	b2da      	uxtb	r2, r3
    fa1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa24:	701a      	strb	r2, [r3, #0]
    fa26:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa2e:	781a      	ldrb	r2, [r3, #0]
    fa30:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa38:	781b      	ldrb	r3, [r3, #0]
    fa3a:	4413      	add	r3, r2
    fa3c:	b2da      	uxtb	r2, r3
    fa3e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa46:	701a      	strb	r2, [r3, #0]
    fa48:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa50:	781b      	ldrb	r3, [r3, #0]
    fa52:	3301      	adds	r3, #1
    fa54:	b2da      	uxtb	r2, r3
    fa56:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa5e:	701a      	strb	r2, [r3, #0]
    fa60:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa68:	781b      	ldrb	r3, [r3, #0]
    fa6a:	2bff      	cmp	r3, #255	; 0xff
    fa6c:	d105      	bne.n	fa7a <send_gps_pos+0xe92>
    fa6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa76:	2200      	movs	r2, #0
    fa78:	701a      	strb	r2, [r3, #0]
    fa7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa82:	781b      	ldrb	r3, [r3, #0]
    fa84:	461a      	mov	r2, r3
    fa86:	f24c 4394 	movw	r3, #50324	; 0xc494
    fa8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa8e:	7899      	ldrb	r1, [r3, #2]
    fa90:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fa94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa98:	5499      	strb	r1, [r3, r2]
    fa9a:	4b68      	ldr	r3, [pc, #416]	; (fc3c <send_gps_pos+0x1054>)
    fa9c:	781a      	ldrb	r2, [r3, #0]
    fa9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    faa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa6:	781b      	ldrb	r3, [r3, #0]
    faa8:	4413      	add	r3, r2
    faaa:	b2da      	uxtb	r2, r3
    faac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab4:	701a      	strb	r2, [r3, #0]
    fab6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    faba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fabe:	781a      	ldrb	r2, [r3, #0]
    fac0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac8:	781b      	ldrb	r3, [r3, #0]
    faca:	4413      	add	r3, r2
    facc:	b2da      	uxtb	r2, r3
    face:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad6:	701a      	strb	r2, [r3, #0]
    fad8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae0:	781b      	ldrb	r3, [r3, #0]
    fae2:	3301      	adds	r3, #1
    fae4:	b2da      	uxtb	r2, r3
    fae6:	f24c 3319 	movw	r3, #49945	; 0xc319
    faea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faee:	701a      	strb	r2, [r3, #0]
    faf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    faf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf8:	781b      	ldrb	r3, [r3, #0]
    fafa:	2bff      	cmp	r3, #255	; 0xff
    fafc:	d105      	bne.n	fb0a <send_gps_pos+0xf22>
    fafe:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb06:	2200      	movs	r2, #0
    fb08:	701a      	strb	r2, [r3, #0]
    fb0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb12:	781b      	ldrb	r3, [r3, #0]
    fb14:	461a      	mov	r2, r3
    fb16:	f24c 4394 	movw	r3, #50324	; 0xc494
    fb1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb1e:	78d9      	ldrb	r1, [r3, #3]
    fb20:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fb24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb28:	5499      	strb	r1, [r3, r2]
    fb2a:	4b45      	ldr	r3, [pc, #276]	; (fc40 <send_gps_pos+0x1058>)
    fb2c:	781a      	ldrb	r2, [r3, #0]
    fb2e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb36:	781b      	ldrb	r3, [r3, #0]
    fb38:	4413      	add	r3, r2
    fb3a:	b2da      	uxtb	r2, r3
    fb3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb44:	701a      	strb	r2, [r3, #0]
    fb46:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb4e:	781a      	ldrb	r2, [r3, #0]
    fb50:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb58:	781b      	ldrb	r3, [r3, #0]
    fb5a:	4413      	add	r3, r2
    fb5c:	b2da      	uxtb	r2, r3
    fb5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb66:	701a      	strb	r2, [r3, #0]
    fb68:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb70:	781b      	ldrb	r3, [r3, #0]
    fb72:	3301      	adds	r3, #1
    fb74:	b2da      	uxtb	r2, r3
    fb76:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb7e:	701a      	strb	r2, [r3, #0]
    fb80:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb88:	781b      	ldrb	r3, [r3, #0]
    fb8a:	2bff      	cmp	r3, #255	; 0xff
    fb8c:	d105      	bne.n	fb9a <send_gps_pos+0xfb2>
    fb8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb96:	2200      	movs	r2, #0
    fb98:	701a      	strb	r2, [r3, #0]
    fb9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba2:	781b      	ldrb	r3, [r3, #0]
    fba4:	461a      	mov	r2, r3
    fba6:	f24c 4388 	movw	r3, #50312	; 0xc488
    fbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbae:	7819      	ldrb	r1, [r3, #0]
    fbb0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb8:	5499      	strb	r1, [r3, r2]
    fbba:	f24c 4388 	movw	r3, #50312	; 0xc488
    fbbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc2:	781a      	ldrb	r2, [r3, #0]
    fbc4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fbc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbcc:	781b      	ldrb	r3, [r3, #0]
    fbce:	4413      	add	r3, r2
    fbd0:	b2da      	uxtb	r2, r3
    fbd2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fbd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbda:	701a      	strb	r2, [r3, #0]
    fbdc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fbe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe4:	781a      	ldrb	r2, [r3, #0]
    fbe6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbee:	781b      	ldrb	r3, [r3, #0]
    fbf0:	4413      	add	r3, r2
    fbf2:	b2da      	uxtb	r2, r3
    fbf4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbfc:	701a      	strb	r2, [r3, #0]
    fbfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc06:	781b      	ldrb	r3, [r3, #0]
    fc08:	3301      	adds	r3, #1
    fc0a:	b2da      	uxtb	r2, r3
    fc0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc14:	701a      	strb	r2, [r3, #0]
    fc16:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc1e:	781b      	ldrb	r3, [r3, #0]
    fc20:	2bff      	cmp	r3, #255	; 0xff
    fc22:	d10f      	bne.n	fc44 <send_gps_pos+0x105c>
    fc24:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc2c:	2200      	movs	r2, #0
    fc2e:	701a      	strb	r2, [r3, #0]
    fc30:	e008      	b.n	fc44 <send_gps_pos+0x105c>
    fc32:	bf00      	nop
    fc34:	2004c493 	.word	0x2004c493
    fc38:	2004c495 	.word	0x2004c495
    fc3c:	2004c496 	.word	0x2004c496
    fc40:	2004c497 	.word	0x2004c497
    fc44:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc4c:	781b      	ldrb	r3, [r3, #0]
    fc4e:	461a      	mov	r2, r3
    fc50:	f24c 4388 	movw	r3, #50312	; 0xc488
    fc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc58:	7859      	ldrb	r1, [r3, #1]
    fc5a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fc5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc62:	5499      	strb	r1, [r3, r2]
    fc64:	4bc0      	ldr	r3, [pc, #768]	; (ff68 <send_gps_pos+0x1380>)
    fc66:	781a      	ldrb	r2, [r3, #0]
    fc68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc70:	781b      	ldrb	r3, [r3, #0]
    fc72:	4413      	add	r3, r2
    fc74:	b2da      	uxtb	r2, r3
    fc76:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc7e:	701a      	strb	r2, [r3, #0]
    fc80:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc88:	781a      	ldrb	r2, [r3, #0]
    fc8a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc92:	781b      	ldrb	r3, [r3, #0]
    fc94:	4413      	add	r3, r2
    fc96:	b2da      	uxtb	r2, r3
    fc98:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca0:	701a      	strb	r2, [r3, #0]
    fca2:	f24c 3319 	movw	r3, #49945	; 0xc319
    fca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcaa:	781b      	ldrb	r3, [r3, #0]
    fcac:	3301      	adds	r3, #1
    fcae:	b2da      	uxtb	r2, r3
    fcb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb8:	701a      	strb	r2, [r3, #0]
    fcba:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc2:	781b      	ldrb	r3, [r3, #0]
    fcc4:	2bff      	cmp	r3, #255	; 0xff
    fcc6:	d105      	bne.n	fcd4 <send_gps_pos+0x10ec>
    fcc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd0:	2200      	movs	r2, #0
    fcd2:	701a      	strb	r2, [r3, #0]
    fcd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcdc:	781b      	ldrb	r3, [r3, #0]
    fcde:	461a      	mov	r2, r3
    fce0:	f24c 4388 	movw	r3, #50312	; 0xc488
    fce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce8:	7899      	ldrb	r1, [r3, #2]
    fcea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fcee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf2:	5499      	strb	r1, [r3, r2]
    fcf4:	4b9d      	ldr	r3, [pc, #628]	; (ff6c <send_gps_pos+0x1384>)
    fcf6:	781a      	ldrb	r2, [r3, #0]
    fcf8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fcfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd00:	781b      	ldrb	r3, [r3, #0]
    fd02:	4413      	add	r3, r2
    fd04:	b2da      	uxtb	r2, r3
    fd06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd0e:	701a      	strb	r2, [r3, #0]
    fd10:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd18:	781a      	ldrb	r2, [r3, #0]
    fd1a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd22:	781b      	ldrb	r3, [r3, #0]
    fd24:	4413      	add	r3, r2
    fd26:	b2da      	uxtb	r2, r3
    fd28:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd30:	701a      	strb	r2, [r3, #0]
    fd32:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd3a:	781b      	ldrb	r3, [r3, #0]
    fd3c:	3301      	adds	r3, #1
    fd3e:	b2da      	uxtb	r2, r3
    fd40:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd48:	701a      	strb	r2, [r3, #0]
    fd4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd52:	781b      	ldrb	r3, [r3, #0]
    fd54:	2bff      	cmp	r3, #255	; 0xff
    fd56:	d105      	bne.n	fd64 <send_gps_pos+0x117c>
    fd58:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd60:	2200      	movs	r2, #0
    fd62:	701a      	strb	r2, [r3, #0]
    fd64:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd6c:	781b      	ldrb	r3, [r3, #0]
    fd6e:	461a      	mov	r2, r3
    fd70:	f24c 4388 	movw	r3, #50312	; 0xc488
    fd74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd78:	78d9      	ldrb	r1, [r3, #3]
    fd7a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fd7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd82:	5499      	strb	r1, [r3, r2]
    fd84:	4b7a      	ldr	r3, [pc, #488]	; (ff70 <send_gps_pos+0x1388>)
    fd86:	781a      	ldrb	r2, [r3, #0]
    fd88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd90:	781b      	ldrb	r3, [r3, #0]
    fd92:	4413      	add	r3, r2
    fd94:	b2da      	uxtb	r2, r3
    fd96:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd9e:	701a      	strb	r2, [r3, #0]
    fda0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fda4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda8:	781a      	ldrb	r2, [r3, #0]
    fdaa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fdae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb2:	781b      	ldrb	r3, [r3, #0]
    fdb4:	4413      	add	r3, r2
    fdb6:	b2da      	uxtb	r2, r3
    fdb8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fdbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc0:	701a      	strb	r2, [r3, #0]
    fdc2:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdca:	781b      	ldrb	r3, [r3, #0]
    fdcc:	3301      	adds	r3, #1
    fdce:	b2da      	uxtb	r2, r3
    fdd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd8:	701a      	strb	r2, [r3, #0]
    fdda:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde2:	781b      	ldrb	r3, [r3, #0]
    fde4:	2bff      	cmp	r3, #255	; 0xff
    fde6:	d105      	bne.n	fdf4 <send_gps_pos+0x120c>
    fde8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf0:	2200      	movs	r2, #0
    fdf2:	701a      	strb	r2, [r3, #0]
    fdf4:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdfc:	781b      	ldrb	r3, [r3, #0]
    fdfe:	461a      	mov	r2, r3
    fe00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe08:	7819      	ldrb	r1, [r3, #0]
    fe0a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fe0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe12:	5499      	strb	r1, [r3, r2]
    fe14:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe1c:	781b      	ldrb	r3, [r3, #0]
    fe1e:	3301      	adds	r3, #1
    fe20:	b2da      	uxtb	r2, r3
    fe22:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe2a:	701a      	strb	r2, [r3, #0]
    fe2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe34:	781b      	ldrb	r3, [r3, #0]
    fe36:	2bff      	cmp	r3, #255	; 0xff
    fe38:	d105      	bne.n	fe46 <send_gps_pos+0x125e>
    fe3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe42:	2200      	movs	r2, #0
    fe44:	701a      	strb	r2, [r3, #0]
    fe46:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe4e:	781b      	ldrb	r3, [r3, #0]
    fe50:	461a      	mov	r2, r3
    fe52:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fe56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe5a:	7819      	ldrb	r1, [r3, #0]
    fe5c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fe60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe64:	5499      	strb	r1, [r3, r2]
    fe66:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6e:	781b      	ldrb	r3, [r3, #0]
    fe70:	3301      	adds	r3, #1
    fe72:	b2da      	uxtb	r2, r3
    fe74:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe7c:	701a      	strb	r2, [r3, #0]
    fe7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe86:	781b      	ldrb	r3, [r3, #0]
    fe88:	2bff      	cmp	r3, #255	; 0xff
    fe8a:	d105      	bne.n	fe98 <send_gps_pos+0x12b0>
    fe8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe94:	2200      	movs	r2, #0
    fe96:	701a      	strb	r2, [r3, #0]
    fe98:	f242 0339 	movw	r3, #8249	; 0x2039
    fe9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea0:	781b      	ldrb	r3, [r3, #0]
    fea2:	b2db      	uxtb	r3, r3
    fea4:	f003 0310 	and.w	r3, r3, #16
    fea8:	2b00      	cmp	r3, #0
    feaa:	d15a      	bne.n	ff62 <send_gps_pos+0x137a>
    feac:	f24c 331a 	movw	r3, #49946	; 0xc31a
    feb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb4:	781b      	ldrb	r3, [r3, #0]
    feb6:	b2db      	uxtb	r3, r3
    feb8:	461a      	mov	r2, r3
    feba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    febe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fec2:	5c9a      	ldrb	r2, [r3, r2]
    fec4:	f24c 431b 	movw	r3, #50203	; 0xc41b
    fec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fecc:	701a      	strb	r2, [r3, #0]
    fece:	f24c 431c 	movw	r3, #50204	; 0xc41c
    fed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed6:	2200      	movs	r2, #0
    fed8:	701a      	strb	r2, [r3, #0]
    feda:	f24c 331a 	movw	r3, #49946	; 0xc31a
    fede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee2:	781b      	ldrb	r3, [r3, #0]
    fee4:	b2db      	uxtb	r3, r3
    fee6:	3301      	adds	r3, #1
    fee8:	b2da      	uxtb	r2, r3
    feea:	f24c 331a 	movw	r3, #49946	; 0xc31a
    feee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef2:	701a      	strb	r2, [r3, #0]
    fef4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    fef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fefc:	781b      	ldrb	r3, [r3, #0]
    fefe:	b2db      	uxtb	r3, r3
    ff00:	2bff      	cmp	r3, #255	; 0xff
    ff02:	d105      	bne.n	ff10 <send_gps_pos+0x1328>
    ff04:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ff08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff0c:	2200      	movs	r2, #0
    ff0e:	701a      	strb	r2, [r3, #0]
    ff10:	f242 0338 	movw	r3, #8248	; 0x2038
    ff14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff18:	f242 0238 	movw	r2, #8248	; 0x2038
    ff1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff20:	7812      	ldrb	r2, [r2, #0]
    ff22:	b2d2      	uxtb	r2, r2
    ff24:	f042 0201 	orr.w	r2, r2, #1
    ff28:	b2d2      	uxtb	r2, r2
    ff2a:	701a      	strb	r2, [r3, #0]
    ff2c:	f242 0339 	movw	r3, #8249	; 0x2039
    ff30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff34:	f242 0239 	movw	r2, #8249	; 0x2039
    ff38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff3c:	7812      	ldrb	r2, [r2, #0]
    ff3e:	b2d2      	uxtb	r2, r2
    ff40:	f042 0210 	orr.w	r2, r2, #16
    ff44:	b2d2      	uxtb	r2, r2
    ff46:	701a      	strb	r2, [r3, #0]
    ff48:	e00b      	b.n	ff62 <send_gps_pos+0x137a>
    ff4a:	f24c 3318 	movw	r3, #49944	; 0xc318
    ff4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff52:	781b      	ldrb	r3, [r3, #0]
    ff54:	3301      	adds	r3, #1
    ff56:	b2da      	uxtb	r2, r3
    ff58:	f24c 3318 	movw	r3, #49944	; 0xc318
    ff5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff60:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    ff62:	f005 fbfd 	bl	15760 <estimator_update_state_gps>
  }
}
    ff66:	bd80      	pop	{r7, pc}
    ff68:	2004c489 	.word	0x2004c489
    ff6c:	2004c48a 	.word	0x2004c48a
    ff70:	2004c48b 	.word	0x2004c48b

0000ff74 <send_radIR>:

void send_radIR(void){
    ff74:	b480      	push	{r7}
    ff76:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    ff78:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
    ff7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff80:	781b      	ldrb	r3, [r3, #0]
    ff82:	2b00      	cmp	r3, #0
    ff84:	f000 85e8 	beq.w	10b58 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    ff88:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff90:	781a      	ldrb	r2, [r3, #0]
    ff92:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ff96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff9a:	781b      	ldrb	r3, [r3, #0]
    ff9c:	b2db      	uxtb	r3, r3
    ff9e:	429a      	cmp	r2, r3
    ffa0:	d313      	bcc.n	ffca <send_radIR+0x56>
    ffa2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ffa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffaa:	781b      	ldrb	r3, [r3, #0]
    ffac:	b2db      	uxtb	r3, r3
    ffae:	461a      	mov	r2, r3
    ffb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffb8:	781b      	ldrb	r3, [r3, #0]
    ffba:	1ad3      	subs	r3, r2, r3
    ffbc:	33ff      	adds	r3, #255	; 0xff
    ffbe:	2b14      	cmp	r3, #20
    ffc0:	bfd4      	ite	le
    ffc2:	2300      	movle	r3, #0
    ffc4:	2301      	movgt	r3, #1
    ffc6:	b2db      	uxtb	r3, r3
    ffc8:	e011      	b.n	ffee <send_radIR+0x7a>
    ffca:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ffce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd2:	781b      	ldrb	r3, [r3, #0]
    ffd4:	b2db      	uxtb	r3, r3
    ffd6:	461a      	mov	r2, r3
    ffd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe0:	781b      	ldrb	r3, [r3, #0]
    ffe2:	1ad3      	subs	r3, r2, r3
    ffe4:	2b14      	cmp	r3, #20
    ffe6:	bfd4      	ite	le
    ffe8:	2300      	movle	r3, #0
    ffea:	2301      	movgt	r3, #1
    ffec:	b2db      	uxtb	r3, r3
    ffee:	2b00      	cmp	r3, #0
    fff0:	f000 85a6 	beq.w	10b40 <send_radIR+0xbcc>
    fff4:	f24c 3319 	movw	r3, #49945	; 0xc319
    fff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fffc:	781b      	ldrb	r3, [r3, #0]
    fffe:	461a      	mov	r2, r3
   10000:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10008:	2105      	movs	r1, #5
   1000a:	5499      	strb	r1, [r3, r2]
   1000c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10014:	781b      	ldrb	r3, [r3, #0]
   10016:	3301      	adds	r3, #1
   10018:	b2da      	uxtb	r2, r3
   1001a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1001e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10022:	701a      	strb	r2, [r3, #0]
   10024:	f24c 3319 	movw	r3, #49945	; 0xc319
   10028:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1002c:	781b      	ldrb	r3, [r3, #0]
   1002e:	2bff      	cmp	r3, #255	; 0xff
   10030:	d105      	bne.n	1003e <send_radIR+0xca>
   10032:	f24c 3319 	movw	r3, #49945	; 0xc319
   10036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1003a:	2200      	movs	r2, #0
   1003c:	701a      	strb	r2, [r3, #0]
   1003e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10046:	781b      	ldrb	r3, [r3, #0]
   10048:	461a      	mov	r2, r3
   1004a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1004e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10052:	2105      	movs	r1, #5
   10054:	5499      	strb	r1, [r3, r2]
   10056:	f24c 3319 	movw	r3, #49945	; 0xc319
   1005a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1005e:	781b      	ldrb	r3, [r3, #0]
   10060:	3301      	adds	r3, #1
   10062:	b2da      	uxtb	r2, r3
   10064:	f24c 3319 	movw	r3, #49945	; 0xc319
   10068:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1006c:	701a      	strb	r2, [r3, #0]
   1006e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10076:	781b      	ldrb	r3, [r3, #0]
   10078:	2bff      	cmp	r3, #255	; 0xff
   1007a:	d105      	bne.n	10088 <send_radIR+0x114>
   1007c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10084:	2200      	movs	r2, #0
   10086:	701a      	strb	r2, [r3, #0]
   10088:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1008c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10090:	2205      	movs	r2, #5
   10092:	701a      	strb	r2, [r3, #0]
   10094:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10098:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1009c:	2205      	movs	r2, #5
   1009e:	701a      	strb	r2, [r3, #0]
   100a0:	f24c 3319 	movw	r3, #49945	; 0xc319
   100a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100a8:	781b      	ldrb	r3, [r3, #0]
   100aa:	461a      	mov	r2, r3
   100ac:	f64c 1310 	movw	r3, #51472	; 0xc910
   100b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b4:	7819      	ldrb	r1, [r3, #0]
   100b6:	f24c 331c 	movw	r3, #49948	; 0xc31c
   100ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100be:	5499      	strb	r1, [r3, r2]
   100c0:	f64c 1310 	movw	r3, #51472	; 0xc910
   100c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c8:	781a      	ldrb	r2, [r3, #0]
   100ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
   100ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d2:	781b      	ldrb	r3, [r3, #0]
   100d4:	4413      	add	r3, r2
   100d6:	b2da      	uxtb	r2, r3
   100d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   100dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e0:	701a      	strb	r2, [r3, #0]
   100e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
   100e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ea:	781a      	ldrb	r2, [r3, #0]
   100ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
   100f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f4:	781b      	ldrb	r3, [r3, #0]
   100f6:	4413      	add	r3, r2
   100f8:	b2da      	uxtb	r2, r3
   100fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
   100fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10102:	701a      	strb	r2, [r3, #0]
   10104:	f24c 3319 	movw	r3, #49945	; 0xc319
   10108:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1010c:	781b      	ldrb	r3, [r3, #0]
   1010e:	3301      	adds	r3, #1
   10110:	b2da      	uxtb	r2, r3
   10112:	f24c 3319 	movw	r3, #49945	; 0xc319
   10116:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1011a:	701a      	strb	r2, [r3, #0]
   1011c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10120:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10124:	781b      	ldrb	r3, [r3, #0]
   10126:	2bff      	cmp	r3, #255	; 0xff
   10128:	d105      	bne.n	10136 <send_radIR+0x1c2>
   1012a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1012e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10132:	2200      	movs	r2, #0
   10134:	701a      	strb	r2, [r3, #0]
   10136:	f24c 3319 	movw	r3, #49945	; 0xc319
   1013a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1013e:	781b      	ldrb	r3, [r3, #0]
   10140:	461a      	mov	r2, r3
   10142:	f64c 1310 	movw	r3, #51472	; 0xc910
   10146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1014a:	7859      	ldrb	r1, [r3, #1]
   1014c:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10150:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10154:	5499      	strb	r1, [r3, r2]
   10156:	4bd2      	ldr	r3, [pc, #840]	; (104a0 <send_radIR+0x52c>)
   10158:	781a      	ldrb	r2, [r3, #0]
   1015a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1015e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10162:	781b      	ldrb	r3, [r3, #0]
   10164:	4413      	add	r3, r2
   10166:	b2da      	uxtb	r2, r3
   10168:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1016c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10170:	701a      	strb	r2, [r3, #0]
   10172:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1017a:	781a      	ldrb	r2, [r3, #0]
   1017c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10184:	781b      	ldrb	r3, [r3, #0]
   10186:	4413      	add	r3, r2
   10188:	b2da      	uxtb	r2, r3
   1018a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1018e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10192:	701a      	strb	r2, [r3, #0]
   10194:	f24c 3319 	movw	r3, #49945	; 0xc319
   10198:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019c:	781b      	ldrb	r3, [r3, #0]
   1019e:	3301      	adds	r3, #1
   101a0:	b2da      	uxtb	r2, r3
   101a2:	f24c 3319 	movw	r3, #49945	; 0xc319
   101a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101aa:	701a      	strb	r2, [r3, #0]
   101ac:	f24c 3319 	movw	r3, #49945	; 0xc319
   101b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b4:	781b      	ldrb	r3, [r3, #0]
   101b6:	2bff      	cmp	r3, #255	; 0xff
   101b8:	d105      	bne.n	101c6 <send_radIR+0x252>
   101ba:	f24c 3319 	movw	r3, #49945	; 0xc319
   101be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101c2:	2200      	movs	r2, #0
   101c4:	701a      	strb	r2, [r3, #0]
   101c6:	f24c 3319 	movw	r3, #49945	; 0xc319
   101ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ce:	781b      	ldrb	r3, [r3, #0]
   101d0:	461a      	mov	r2, r3
   101d2:	f64c 1310 	movw	r3, #51472	; 0xc910
   101d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101da:	7899      	ldrb	r1, [r3, #2]
   101dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
   101e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e4:	5499      	strb	r1, [r3, r2]
   101e6:	4baf      	ldr	r3, [pc, #700]	; (104a4 <send_radIR+0x530>)
   101e8:	781a      	ldrb	r2, [r3, #0]
   101ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
   101ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f2:	781b      	ldrb	r3, [r3, #0]
   101f4:	4413      	add	r3, r2
   101f6:	b2da      	uxtb	r2, r3
   101f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   101fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10200:	701a      	strb	r2, [r3, #0]
   10202:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1020a:	781a      	ldrb	r2, [r3, #0]
   1020c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10214:	781b      	ldrb	r3, [r3, #0]
   10216:	4413      	add	r3, r2
   10218:	b2da      	uxtb	r2, r3
   1021a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1021e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10222:	701a      	strb	r2, [r3, #0]
   10224:	f24c 3319 	movw	r3, #49945	; 0xc319
   10228:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1022c:	781b      	ldrb	r3, [r3, #0]
   1022e:	3301      	adds	r3, #1
   10230:	b2da      	uxtb	r2, r3
   10232:	f24c 3319 	movw	r3, #49945	; 0xc319
   10236:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1023a:	701a      	strb	r2, [r3, #0]
   1023c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10240:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10244:	781b      	ldrb	r3, [r3, #0]
   10246:	2bff      	cmp	r3, #255	; 0xff
   10248:	d105      	bne.n	10256 <send_radIR+0x2e2>
   1024a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1024e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10252:	2200      	movs	r2, #0
   10254:	701a      	strb	r2, [r3, #0]
   10256:	f24c 3319 	movw	r3, #49945	; 0xc319
   1025a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1025e:	781b      	ldrb	r3, [r3, #0]
   10260:	461a      	mov	r2, r3
   10262:	f64c 1310 	movw	r3, #51472	; 0xc910
   10266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1026a:	78d9      	ldrb	r1, [r3, #3]
   1026c:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10274:	5499      	strb	r1, [r3, r2]
   10276:	4b8c      	ldr	r3, [pc, #560]	; (104a8 <send_radIR+0x534>)
   10278:	781a      	ldrb	r2, [r3, #0]
   1027a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1027e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10282:	781b      	ldrb	r3, [r3, #0]
   10284:	4413      	add	r3, r2
   10286:	b2da      	uxtb	r2, r3
   10288:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1028c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10290:	701a      	strb	r2, [r3, #0]
   10292:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10296:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1029a:	781a      	ldrb	r2, [r3, #0]
   1029c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a4:	781b      	ldrb	r3, [r3, #0]
   102a6:	4413      	add	r3, r2
   102a8:	b2da      	uxtb	r2, r3
   102aa:	f24c 431e 	movw	r3, #50206	; 0xc41e
   102ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b2:	701a      	strb	r2, [r3, #0]
   102b4:	f24c 3319 	movw	r3, #49945	; 0xc319
   102b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102bc:	781b      	ldrb	r3, [r3, #0]
   102be:	3301      	adds	r3, #1
   102c0:	b2da      	uxtb	r2, r3
   102c2:	f24c 3319 	movw	r3, #49945	; 0xc319
   102c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ca:	701a      	strb	r2, [r3, #0]
   102cc:	f24c 3319 	movw	r3, #49945	; 0xc319
   102d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d4:	781b      	ldrb	r3, [r3, #0]
   102d6:	2bff      	cmp	r3, #255	; 0xff
   102d8:	d105      	bne.n	102e6 <send_radIR+0x372>
   102da:	f24c 3319 	movw	r3, #49945	; 0xc319
   102de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e2:	2200      	movs	r2, #0
   102e4:	701a      	strb	r2, [r3, #0]
   102e6:	f24c 3319 	movw	r3, #49945	; 0xc319
   102ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ee:	781b      	ldrb	r3, [r3, #0]
   102f0:	461a      	mov	r2, r3
   102f2:	f64c 1314 	movw	r3, #51476	; 0xc914
   102f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102fa:	7819      	ldrb	r1, [r3, #0]
   102fc:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10304:	5499      	strb	r1, [r3, r2]
   10306:	f64c 1314 	movw	r3, #51476	; 0xc914
   1030a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1030e:	781a      	ldrb	r2, [r3, #0]
   10310:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10318:	781b      	ldrb	r3, [r3, #0]
   1031a:	4413      	add	r3, r2
   1031c:	b2da      	uxtb	r2, r3
   1031e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10322:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10326:	701a      	strb	r2, [r3, #0]
   10328:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1032c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10330:	781a      	ldrb	r2, [r3, #0]
   10332:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10336:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1033a:	781b      	ldrb	r3, [r3, #0]
   1033c:	4413      	add	r3, r2
   1033e:	b2da      	uxtb	r2, r3
   10340:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10344:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10348:	701a      	strb	r2, [r3, #0]
   1034a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1034e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10352:	781b      	ldrb	r3, [r3, #0]
   10354:	3301      	adds	r3, #1
   10356:	b2da      	uxtb	r2, r3
   10358:	f24c 3319 	movw	r3, #49945	; 0xc319
   1035c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10360:	701a      	strb	r2, [r3, #0]
   10362:	f24c 3319 	movw	r3, #49945	; 0xc319
   10366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1036a:	781b      	ldrb	r3, [r3, #0]
   1036c:	2bff      	cmp	r3, #255	; 0xff
   1036e:	d105      	bne.n	1037c <send_radIR+0x408>
   10370:	f24c 3319 	movw	r3, #49945	; 0xc319
   10374:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10378:	2200      	movs	r2, #0
   1037a:	701a      	strb	r2, [r3, #0]
   1037c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10384:	781b      	ldrb	r3, [r3, #0]
   10386:	461a      	mov	r2, r3
   10388:	f64c 1314 	movw	r3, #51476	; 0xc914
   1038c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10390:	7859      	ldrb	r1, [r3, #1]
   10392:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10396:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1039a:	5499      	strb	r1, [r3, r2]
   1039c:	4b43      	ldr	r3, [pc, #268]	; (104ac <send_radIR+0x538>)
   1039e:	781a      	ldrb	r2, [r3, #0]
   103a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   103a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a8:	781b      	ldrb	r3, [r3, #0]
   103aa:	4413      	add	r3, r2
   103ac:	b2da      	uxtb	r2, r3
   103ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
   103b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b6:	701a      	strb	r2, [r3, #0]
   103b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   103bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c0:	781a      	ldrb	r2, [r3, #0]
   103c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
   103c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ca:	781b      	ldrb	r3, [r3, #0]
   103cc:	4413      	add	r3, r2
   103ce:	b2da      	uxtb	r2, r3
   103d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   103d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d8:	701a      	strb	r2, [r3, #0]
   103da:	f24c 3319 	movw	r3, #49945	; 0xc319
   103de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e2:	781b      	ldrb	r3, [r3, #0]
   103e4:	3301      	adds	r3, #1
   103e6:	b2da      	uxtb	r2, r3
   103e8:	f24c 3319 	movw	r3, #49945	; 0xc319
   103ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f0:	701a      	strb	r2, [r3, #0]
   103f2:	f24c 3319 	movw	r3, #49945	; 0xc319
   103f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103fa:	781b      	ldrb	r3, [r3, #0]
   103fc:	2bff      	cmp	r3, #255	; 0xff
   103fe:	d105      	bne.n	1040c <send_radIR+0x498>
   10400:	f24c 3319 	movw	r3, #49945	; 0xc319
   10404:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10408:	2200      	movs	r2, #0
   1040a:	701a      	strb	r2, [r3, #0]
   1040c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10410:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10414:	781b      	ldrb	r3, [r3, #0]
   10416:	461a      	mov	r2, r3
   10418:	f64c 1314 	movw	r3, #51476	; 0xc914
   1041c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10420:	7899      	ldrb	r1, [r3, #2]
   10422:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10426:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1042a:	5499      	strb	r1, [r3, r2]
   1042c:	4b20      	ldr	r3, [pc, #128]	; (104b0 <send_radIR+0x53c>)
   1042e:	781a      	ldrb	r2, [r3, #0]
   10430:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10438:	781b      	ldrb	r3, [r3, #0]
   1043a:	4413      	add	r3, r2
   1043c:	b2da      	uxtb	r2, r3
   1043e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10446:	701a      	strb	r2, [r3, #0]
   10448:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1044c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10450:	781a      	ldrb	r2, [r3, #0]
   10452:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10456:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1045a:	781b      	ldrb	r3, [r3, #0]
   1045c:	4413      	add	r3, r2
   1045e:	b2da      	uxtb	r2, r3
   10460:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10464:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10468:	701a      	strb	r2, [r3, #0]
   1046a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1046e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10472:	781b      	ldrb	r3, [r3, #0]
   10474:	3301      	adds	r3, #1
   10476:	b2da      	uxtb	r2, r3
   10478:	f24c 3319 	movw	r3, #49945	; 0xc319
   1047c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10480:	701a      	strb	r2, [r3, #0]
   10482:	f24c 3319 	movw	r3, #49945	; 0xc319
   10486:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1048a:	781b      	ldrb	r3, [r3, #0]
   1048c:	2bff      	cmp	r3, #255	; 0xff
   1048e:	d111      	bne.n	104b4 <send_radIR+0x540>
   10490:	f24c 3319 	movw	r3, #49945	; 0xc319
   10494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10498:	2200      	movs	r2, #0
   1049a:	701a      	strb	r2, [r3, #0]
   1049c:	e00a      	b.n	104b4 <send_radIR+0x540>
   1049e:	bf00      	nop
   104a0:	2004c911 	.word	0x2004c911
   104a4:	2004c912 	.word	0x2004c912
   104a8:	2004c913 	.word	0x2004c913
   104ac:	2004c915 	.word	0x2004c915
   104b0:	2004c916 	.word	0x2004c916
   104b4:	f24c 3319 	movw	r3, #49945	; 0xc319
   104b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104bc:	781b      	ldrb	r3, [r3, #0]
   104be:	461a      	mov	r2, r3
   104c0:	f64c 1314 	movw	r3, #51476	; 0xc914
   104c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c8:	78d9      	ldrb	r1, [r3, #3]
   104ca:	f24c 331c 	movw	r3, #49948	; 0xc31c
   104ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d2:	5499      	strb	r1, [r3, r2]
   104d4:	4bd3      	ldr	r3, [pc, #844]	; (10824 <send_radIR+0x8b0>)
   104d6:	781a      	ldrb	r2, [r3, #0]
   104d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   104dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e0:	781b      	ldrb	r3, [r3, #0]
   104e2:	4413      	add	r3, r2
   104e4:	b2da      	uxtb	r2, r3
   104e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   104ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ee:	701a      	strb	r2, [r3, #0]
   104f0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   104f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f8:	781a      	ldrb	r2, [r3, #0]
   104fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
   104fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10502:	781b      	ldrb	r3, [r3, #0]
   10504:	4413      	add	r3, r2
   10506:	b2da      	uxtb	r2, r3
   10508:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1050c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10510:	701a      	strb	r2, [r3, #0]
   10512:	f24c 3319 	movw	r3, #49945	; 0xc319
   10516:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1051a:	781b      	ldrb	r3, [r3, #0]
   1051c:	3301      	adds	r3, #1
   1051e:	b2da      	uxtb	r2, r3
   10520:	f24c 3319 	movw	r3, #49945	; 0xc319
   10524:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10528:	701a      	strb	r2, [r3, #0]
   1052a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1052e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10532:	781b      	ldrb	r3, [r3, #0]
   10534:	2bff      	cmp	r3, #255	; 0xff
   10536:	d105      	bne.n	10544 <send_radIR+0x5d0>
   10538:	f24c 3319 	movw	r3, #49945	; 0xc319
   1053c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10540:	2200      	movs	r2, #0
   10542:	701a      	strb	r2, [r3, #0]
   10544:	f24c 3319 	movw	r3, #49945	; 0xc319
   10548:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1054c:	781b      	ldrb	r3, [r3, #0]
   1054e:	461a      	mov	r2, r3
   10550:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10558:	7819      	ldrb	r1, [r3, #0]
   1055a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1055e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10562:	5499      	strb	r1, [r3, r2]
   10564:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10568:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1056c:	781a      	ldrb	r2, [r3, #0]
   1056e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10572:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10576:	781b      	ldrb	r3, [r3, #0]
   10578:	4413      	add	r3, r2
   1057a:	b2da      	uxtb	r2, r3
   1057c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10584:	701a      	strb	r2, [r3, #0]
   10586:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1058a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1058e:	781a      	ldrb	r2, [r3, #0]
   10590:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10598:	781b      	ldrb	r3, [r3, #0]
   1059a:	4413      	add	r3, r2
   1059c:	b2da      	uxtb	r2, r3
   1059e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   105a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a6:	701a      	strb	r2, [r3, #0]
   105a8:	f24c 3319 	movw	r3, #49945	; 0xc319
   105ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b0:	781b      	ldrb	r3, [r3, #0]
   105b2:	3301      	adds	r3, #1
   105b4:	b2da      	uxtb	r2, r3
   105b6:	f24c 3319 	movw	r3, #49945	; 0xc319
   105ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105be:	701a      	strb	r2, [r3, #0]
   105c0:	f24c 3319 	movw	r3, #49945	; 0xc319
   105c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c8:	781b      	ldrb	r3, [r3, #0]
   105ca:	2bff      	cmp	r3, #255	; 0xff
   105cc:	d105      	bne.n	105da <send_radIR+0x666>
   105ce:	f24c 3319 	movw	r3, #49945	; 0xc319
   105d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d6:	2200      	movs	r2, #0
   105d8:	701a      	strb	r2, [r3, #0]
   105da:	f24c 3319 	movw	r3, #49945	; 0xc319
   105de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e2:	781b      	ldrb	r3, [r3, #0]
   105e4:	461a      	mov	r2, r3
   105e6:	f64c 130c 	movw	r3, #51468	; 0xc90c
   105ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ee:	7859      	ldrb	r1, [r3, #1]
   105f0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   105f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f8:	5499      	strb	r1, [r3, r2]
   105fa:	4b8b      	ldr	r3, [pc, #556]	; (10828 <send_radIR+0x8b4>)
   105fc:	781a      	ldrb	r2, [r3, #0]
   105fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10602:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10606:	781b      	ldrb	r3, [r3, #0]
   10608:	4413      	add	r3, r2
   1060a:	b2da      	uxtb	r2, r3
   1060c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10610:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10614:	701a      	strb	r2, [r3, #0]
   10616:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1061a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1061e:	781a      	ldrb	r2, [r3, #0]
   10620:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10624:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10628:	781b      	ldrb	r3, [r3, #0]
   1062a:	4413      	add	r3, r2
   1062c:	b2da      	uxtb	r2, r3
   1062e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10636:	701a      	strb	r2, [r3, #0]
   10638:	f24c 3319 	movw	r3, #49945	; 0xc319
   1063c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10640:	781b      	ldrb	r3, [r3, #0]
   10642:	3301      	adds	r3, #1
   10644:	b2da      	uxtb	r2, r3
   10646:	f24c 3319 	movw	r3, #49945	; 0xc319
   1064a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1064e:	701a      	strb	r2, [r3, #0]
   10650:	f24c 3319 	movw	r3, #49945	; 0xc319
   10654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10658:	781b      	ldrb	r3, [r3, #0]
   1065a:	2bff      	cmp	r3, #255	; 0xff
   1065c:	d105      	bne.n	1066a <send_radIR+0x6f6>
   1065e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10666:	2200      	movs	r2, #0
   10668:	701a      	strb	r2, [r3, #0]
   1066a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1066e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10672:	781b      	ldrb	r3, [r3, #0]
   10674:	461a      	mov	r2, r3
   10676:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1067a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1067e:	7899      	ldrb	r1, [r3, #2]
   10680:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10684:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10688:	5499      	strb	r1, [r3, r2]
   1068a:	4b68      	ldr	r3, [pc, #416]	; (1082c <send_radIR+0x8b8>)
   1068c:	781a      	ldrb	r2, [r3, #0]
   1068e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10696:	781b      	ldrb	r3, [r3, #0]
   10698:	4413      	add	r3, r2
   1069a:	b2da      	uxtb	r2, r3
   1069c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a4:	701a      	strb	r2, [r3, #0]
   106a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   106aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ae:	781a      	ldrb	r2, [r3, #0]
   106b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b8:	781b      	ldrb	r3, [r3, #0]
   106ba:	4413      	add	r3, r2
   106bc:	b2da      	uxtb	r2, r3
   106be:	f24c 431e 	movw	r3, #50206	; 0xc41e
   106c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c6:	701a      	strb	r2, [r3, #0]
   106c8:	f24c 3319 	movw	r3, #49945	; 0xc319
   106cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d0:	781b      	ldrb	r3, [r3, #0]
   106d2:	3301      	adds	r3, #1
   106d4:	b2da      	uxtb	r2, r3
   106d6:	f24c 3319 	movw	r3, #49945	; 0xc319
   106da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106de:	701a      	strb	r2, [r3, #0]
   106e0:	f24c 3319 	movw	r3, #49945	; 0xc319
   106e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e8:	781b      	ldrb	r3, [r3, #0]
   106ea:	2bff      	cmp	r3, #255	; 0xff
   106ec:	d105      	bne.n	106fa <send_radIR+0x786>
   106ee:	f24c 3319 	movw	r3, #49945	; 0xc319
   106f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f6:	2200      	movs	r2, #0
   106f8:	701a      	strb	r2, [r3, #0]
   106fa:	f24c 3319 	movw	r3, #49945	; 0xc319
   106fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10702:	781b      	ldrb	r3, [r3, #0]
   10704:	461a      	mov	r2, r3
   10706:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1070a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1070e:	78d9      	ldrb	r1, [r3, #3]
   10710:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10718:	5499      	strb	r1, [r3, r2]
   1071a:	4b45      	ldr	r3, [pc, #276]	; (10830 <send_radIR+0x8bc>)
   1071c:	781a      	ldrb	r2, [r3, #0]
   1071e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10722:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10726:	781b      	ldrb	r3, [r3, #0]
   10728:	4413      	add	r3, r2
   1072a:	b2da      	uxtb	r2, r3
   1072c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10730:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10734:	701a      	strb	r2, [r3, #0]
   10736:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1073a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1073e:	781a      	ldrb	r2, [r3, #0]
   10740:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10748:	781b      	ldrb	r3, [r3, #0]
   1074a:	4413      	add	r3, r2
   1074c:	b2da      	uxtb	r2, r3
   1074e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10756:	701a      	strb	r2, [r3, #0]
   10758:	f24c 3319 	movw	r3, #49945	; 0xc319
   1075c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10760:	781b      	ldrb	r3, [r3, #0]
   10762:	3301      	adds	r3, #1
   10764:	b2da      	uxtb	r2, r3
   10766:	f24c 3319 	movw	r3, #49945	; 0xc319
   1076a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1076e:	701a      	strb	r2, [r3, #0]
   10770:	f24c 3319 	movw	r3, #49945	; 0xc319
   10774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10778:	781b      	ldrb	r3, [r3, #0]
   1077a:	2bff      	cmp	r3, #255	; 0xff
   1077c:	d105      	bne.n	1078a <send_radIR+0x816>
   1077e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10782:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10786:	2200      	movs	r2, #0
   10788:	701a      	strb	r2, [r3, #0]
   1078a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1078e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10792:	781b      	ldrb	r3, [r3, #0]
   10794:	461a      	mov	r2, r3
   10796:	f240 5342 	movw	r3, #1346	; 0x542
   1079a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1079e:	7819      	ldrb	r1, [r3, #0]
   107a0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   107a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a8:	5499      	strb	r1, [r3, r2]
   107aa:	f240 5342 	movw	r3, #1346	; 0x542
   107ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b2:	781a      	ldrb	r2, [r3, #0]
   107b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   107b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107bc:	781b      	ldrb	r3, [r3, #0]
   107be:	4413      	add	r3, r2
   107c0:	b2da      	uxtb	r2, r3
   107c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
   107c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ca:	701a      	strb	r2, [r3, #0]
   107cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
   107d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d4:	781a      	ldrb	r2, [r3, #0]
   107d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   107da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107de:	781b      	ldrb	r3, [r3, #0]
   107e0:	4413      	add	r3, r2
   107e2:	b2da      	uxtb	r2, r3
   107e4:	f24c 431e 	movw	r3, #50206	; 0xc41e
   107e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ec:	701a      	strb	r2, [r3, #0]
   107ee:	f24c 3319 	movw	r3, #49945	; 0xc319
   107f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f6:	781b      	ldrb	r3, [r3, #0]
   107f8:	3301      	adds	r3, #1
   107fa:	b2da      	uxtb	r2, r3
   107fc:	f24c 3319 	movw	r3, #49945	; 0xc319
   10800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10804:	701a      	strb	r2, [r3, #0]
   10806:	f24c 3319 	movw	r3, #49945	; 0xc319
   1080a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1080e:	781b      	ldrb	r3, [r3, #0]
   10810:	2bff      	cmp	r3, #255	; 0xff
   10812:	d10f      	bne.n	10834 <send_radIR+0x8c0>
   10814:	f24c 3319 	movw	r3, #49945	; 0xc319
   10818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1081c:	2200      	movs	r2, #0
   1081e:	701a      	strb	r2, [r3, #0]
   10820:	e008      	b.n	10834 <send_radIR+0x8c0>
   10822:	bf00      	nop
   10824:	2004c917 	.word	0x2004c917
   10828:	2004c90d 	.word	0x2004c90d
   1082c:	2004c90e 	.word	0x2004c90e
   10830:	2004c90f 	.word	0x2004c90f
   10834:	f24c 3319 	movw	r3, #49945	; 0xc319
   10838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1083c:	781b      	ldrb	r3, [r3, #0]
   1083e:	461a      	mov	r2, r3
   10840:	f240 5342 	movw	r3, #1346	; 0x542
   10844:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10848:	7859      	ldrb	r1, [r3, #1]
   1084a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1084e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10852:	5499      	strb	r1, [r3, r2]
   10854:	4bc2      	ldr	r3, [pc, #776]	; (10b60 <send_radIR+0xbec>)
   10856:	781a      	ldrb	r2, [r3, #0]
   10858:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1085c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10860:	781b      	ldrb	r3, [r3, #0]
   10862:	4413      	add	r3, r2
   10864:	b2da      	uxtb	r2, r3
   10866:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1086a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1086e:	701a      	strb	r2, [r3, #0]
   10870:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10878:	781a      	ldrb	r2, [r3, #0]
   1087a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1087e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10882:	781b      	ldrb	r3, [r3, #0]
   10884:	4413      	add	r3, r2
   10886:	b2da      	uxtb	r2, r3
   10888:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1088c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10890:	701a      	strb	r2, [r3, #0]
   10892:	f24c 3319 	movw	r3, #49945	; 0xc319
   10896:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1089a:	781b      	ldrb	r3, [r3, #0]
   1089c:	3301      	adds	r3, #1
   1089e:	b2da      	uxtb	r2, r3
   108a0:	f24c 3319 	movw	r3, #49945	; 0xc319
   108a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a8:	701a      	strb	r2, [r3, #0]
   108aa:	f24c 3319 	movw	r3, #49945	; 0xc319
   108ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b2:	781b      	ldrb	r3, [r3, #0]
   108b4:	2bff      	cmp	r3, #255	; 0xff
   108b6:	d105      	bne.n	108c4 <send_radIR+0x950>
   108b8:	f24c 3319 	movw	r3, #49945	; 0xc319
   108bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c0:	2200      	movs	r2, #0
   108c2:	701a      	strb	r2, [r3, #0]
   108c4:	f24c 3319 	movw	r3, #49945	; 0xc319
   108c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108cc:	781b      	ldrb	r3, [r3, #0]
   108ce:	461a      	mov	r2, r3
   108d0:	f240 5344 	movw	r3, #1348	; 0x544
   108d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108d8:	7819      	ldrb	r1, [r3, #0]
   108da:	f24c 331c 	movw	r3, #49948	; 0xc31c
   108de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e2:	5499      	strb	r1, [r3, r2]
   108e4:	f240 5344 	movw	r3, #1348	; 0x544
   108e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ec:	781a      	ldrb	r2, [r3, #0]
   108ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
   108f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f6:	781b      	ldrb	r3, [r3, #0]
   108f8:	4413      	add	r3, r2
   108fa:	b2da      	uxtb	r2, r3
   108fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10904:	701a      	strb	r2, [r3, #0]
   10906:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1090a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1090e:	781a      	ldrb	r2, [r3, #0]
   10910:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10914:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10918:	781b      	ldrb	r3, [r3, #0]
   1091a:	4413      	add	r3, r2
   1091c:	b2da      	uxtb	r2, r3
   1091e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10926:	701a      	strb	r2, [r3, #0]
   10928:	f24c 3319 	movw	r3, #49945	; 0xc319
   1092c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10930:	781b      	ldrb	r3, [r3, #0]
   10932:	3301      	adds	r3, #1
   10934:	b2da      	uxtb	r2, r3
   10936:	f24c 3319 	movw	r3, #49945	; 0xc319
   1093a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1093e:	701a      	strb	r2, [r3, #0]
   10940:	f24c 3319 	movw	r3, #49945	; 0xc319
   10944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10948:	781b      	ldrb	r3, [r3, #0]
   1094a:	2bff      	cmp	r3, #255	; 0xff
   1094c:	d105      	bne.n	1095a <send_radIR+0x9e6>
   1094e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10956:	2200      	movs	r2, #0
   10958:	701a      	strb	r2, [r3, #0]
   1095a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1095e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10962:	781b      	ldrb	r3, [r3, #0]
   10964:	461a      	mov	r2, r3
   10966:	f240 5344 	movw	r3, #1348	; 0x544
   1096a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1096e:	7859      	ldrb	r1, [r3, #1]
   10970:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10974:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10978:	5499      	strb	r1, [r3, r2]
   1097a:	4b7a      	ldr	r3, [pc, #488]	; (10b64 <send_radIR+0xbf0>)
   1097c:	781a      	ldrb	r2, [r3, #0]
   1097e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10982:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10986:	781b      	ldrb	r3, [r3, #0]
   10988:	4413      	add	r3, r2
   1098a:	b2da      	uxtb	r2, r3
   1098c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10990:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10994:	701a      	strb	r2, [r3, #0]
   10996:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1099a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1099e:	781a      	ldrb	r2, [r3, #0]
   109a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a8:	781b      	ldrb	r3, [r3, #0]
   109aa:	4413      	add	r3, r2
   109ac:	b2da      	uxtb	r2, r3
   109ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
   109b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b6:	701a      	strb	r2, [r3, #0]
   109b8:	f24c 3319 	movw	r3, #49945	; 0xc319
   109bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c0:	781b      	ldrb	r3, [r3, #0]
   109c2:	3301      	adds	r3, #1
   109c4:	b2da      	uxtb	r2, r3
   109c6:	f24c 3319 	movw	r3, #49945	; 0xc319
   109ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ce:	701a      	strb	r2, [r3, #0]
   109d0:	f24c 3319 	movw	r3, #49945	; 0xc319
   109d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d8:	781b      	ldrb	r3, [r3, #0]
   109da:	2bff      	cmp	r3, #255	; 0xff
   109dc:	d105      	bne.n	109ea <send_radIR+0xa76>
   109de:	f24c 3319 	movw	r3, #49945	; 0xc319
   109e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e6:	2200      	movs	r2, #0
   109e8:	701a      	strb	r2, [r3, #0]
   109ea:	f24c 3319 	movw	r3, #49945	; 0xc319
   109ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f2:	781b      	ldrb	r3, [r3, #0]
   109f4:	461a      	mov	r2, r3
   109f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109fe:	7819      	ldrb	r1, [r3, #0]
   10a00:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a08:	5499      	strb	r1, [r3, r2]
   10a0a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a12:	781b      	ldrb	r3, [r3, #0]
   10a14:	3301      	adds	r3, #1
   10a16:	b2da      	uxtb	r2, r3
   10a18:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a20:	701a      	strb	r2, [r3, #0]
   10a22:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a2a:	781b      	ldrb	r3, [r3, #0]
   10a2c:	2bff      	cmp	r3, #255	; 0xff
   10a2e:	d105      	bne.n	10a3c <send_radIR+0xac8>
   10a30:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a38:	2200      	movs	r2, #0
   10a3a:	701a      	strb	r2, [r3, #0]
   10a3c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a44:	781b      	ldrb	r3, [r3, #0]
   10a46:	461a      	mov	r2, r3
   10a48:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a50:	7819      	ldrb	r1, [r3, #0]
   10a52:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a5a:	5499      	strb	r1, [r3, r2]
   10a5c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a64:	781b      	ldrb	r3, [r3, #0]
   10a66:	3301      	adds	r3, #1
   10a68:	b2da      	uxtb	r2, r3
   10a6a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a72:	701a      	strb	r2, [r3, #0]
   10a74:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a7c:	781b      	ldrb	r3, [r3, #0]
   10a7e:	2bff      	cmp	r3, #255	; 0xff
   10a80:	d105      	bne.n	10a8e <send_radIR+0xb1a>
   10a82:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a8a:	2200      	movs	r2, #0
   10a8c:	701a      	strb	r2, [r3, #0]
   10a8e:	f242 0339 	movw	r3, #8249	; 0x2039
   10a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a96:	781b      	ldrb	r3, [r3, #0]
   10a98:	b2db      	uxtb	r3, r3
   10a9a:	f003 0310 	and.w	r3, r3, #16
   10a9e:	2b00      	cmp	r3, #0
   10aa0:	d15a      	bne.n	10b58 <send_radIR+0xbe4>
   10aa2:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aaa:	781b      	ldrb	r3, [r3, #0]
   10aac:	b2db      	uxtb	r3, r3
   10aae:	461a      	mov	r2, r3
   10ab0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab8:	5c9a      	ldrb	r2, [r3, r2]
   10aba:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac2:	701a      	strb	r2, [r3, #0]
   10ac4:	f24c 431c 	movw	r3, #50204	; 0xc41c
   10ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10acc:	2200      	movs	r2, #0
   10ace:	701a      	strb	r2, [r3, #0]
   10ad0:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad8:	781b      	ldrb	r3, [r3, #0]
   10ada:	b2db      	uxtb	r3, r3
   10adc:	3301      	adds	r3, #1
   10ade:	b2da      	uxtb	r2, r3
   10ae0:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae8:	701a      	strb	r2, [r3, #0]
   10aea:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af2:	781b      	ldrb	r3, [r3, #0]
   10af4:	b2db      	uxtb	r3, r3
   10af6:	2bff      	cmp	r3, #255	; 0xff
   10af8:	d105      	bne.n	10b06 <send_radIR+0xb92>
   10afa:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b02:	2200      	movs	r2, #0
   10b04:	701a      	strb	r2, [r3, #0]
   10b06:	f242 0338 	movw	r3, #8248	; 0x2038
   10b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b0e:	f242 0238 	movw	r2, #8248	; 0x2038
   10b12:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b16:	7812      	ldrb	r2, [r2, #0]
   10b18:	b2d2      	uxtb	r2, r2
   10b1a:	f042 0201 	orr.w	r2, r2, #1
   10b1e:	b2d2      	uxtb	r2, r2
   10b20:	701a      	strb	r2, [r3, #0]
   10b22:	f242 0339 	movw	r3, #8249	; 0x2039
   10b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b2a:	f242 0239 	movw	r2, #8249	; 0x2039
   10b2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b32:	7812      	ldrb	r2, [r2, #0]
   10b34:	b2d2      	uxtb	r2, r2
   10b36:	f042 0210 	orr.w	r2, r2, #16
   10b3a:	b2d2      	uxtb	r2, r2
   10b3c:	701a      	strb	r2, [r3, #0]
   10b3e:	e00b      	b.n	10b58 <send_radIR+0xbe4>
   10b40:	f24c 3318 	movw	r3, #49944	; 0xc318
   10b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b48:	781b      	ldrb	r3, [r3, #0]
   10b4a:	3301      	adds	r3, #1
   10b4c:	b2da      	uxtb	r2, r3
   10b4e:	f24c 3318 	movw	r3, #49944	; 0xc318
   10b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b56:	701a      	strb	r2, [r3, #0]
}
   10b58:	46bd      	mov	sp, r7
   10b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10b5e:	4770      	bx	lr
   10b60:	20000543 	.word	0x20000543
   10b64:	20000545 	.word	0x20000545

00010b68 <send_takeOff>:

void send_takeOff(void){
   10b68:	b580      	push	{r7, lr}
   10b6a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10b6c:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   10b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b74:	781b      	ldrb	r3, [r3, #0]
   10b76:	2b00      	cmp	r3, #0
   10b78:	f000 8200 	beq.w	10f7c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10b7c:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b84:	881b      	ldrh	r3, [r3, #0]
   10b86:	2b00      	cmp	r3, #0
   10b88:	f040 81f2 	bne.w	10f70 <send_takeOff+0x408>
   10b8c:	f64c 1304 	movw	r3, #51460	; 0xc904
   10b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b94:	681b      	ldr	r3, [r3, #0]
   10b96:	4618      	mov	r0, r3
   10b98:	f04f 0100 	mov.w	r1, #0
   10b9c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10ba0:	f007 fd86 	bl	186b0 <__aeabi_fcmpgt>
   10ba4:	4603      	mov	r3, r0
   10ba6:	2b00      	cmp	r3, #0
   10ba8:	f000 81e2 	beq.w	10f70 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10bac:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb4:	2201      	movs	r2, #1
   10bb6:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10bb8:	f24c 3310 	movw	r3, #49936	; 0xc310
   10bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bc0:	2201      	movs	r2, #1
   10bc2:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10bc4:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bcc:	781a      	ldrb	r2, [r3, #0]
   10bce:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bd6:	781b      	ldrb	r3, [r3, #0]
   10bd8:	b2db      	uxtb	r3, r3
   10bda:	429a      	cmp	r2, r3
   10bdc:	d313      	bcc.n	10c06 <send_takeOff+0x9e>
   10bde:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10be6:	781b      	ldrb	r3, [r3, #0]
   10be8:	b2db      	uxtb	r3, r3
   10bea:	461a      	mov	r2, r3
   10bec:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf4:	781b      	ldrb	r3, [r3, #0]
   10bf6:	1ad3      	subs	r3, r2, r3
   10bf8:	33ff      	adds	r3, #255	; 0xff
   10bfa:	2b06      	cmp	r3, #6
   10bfc:	bfd4      	ite	le
   10bfe:	2300      	movle	r3, #0
   10c00:	2301      	movgt	r3, #1
   10c02:	b2db      	uxtb	r3, r3
   10c04:	e011      	b.n	10c2a <send_takeOff+0xc2>
   10c06:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c0e:	781b      	ldrb	r3, [r3, #0]
   10c10:	b2db      	uxtb	r3, r3
   10c12:	461a      	mov	r2, r3
   10c14:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c1c:	781b      	ldrb	r3, [r3, #0]
   10c1e:	1ad3      	subs	r3, r2, r3
   10c20:	2b06      	cmp	r3, #6
   10c22:	bfd4      	ite	le
   10c24:	2300      	movle	r3, #0
   10c26:	2301      	movgt	r3, #1
   10c28:	b2db      	uxtb	r3, r3
   10c2a:	2b00      	cmp	r3, #0
   10c2c:	f000 8194 	beq.w	10f58 <send_takeOff+0x3f0>
   10c30:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c38:	781b      	ldrb	r3, [r3, #0]
   10c3a:	461a      	mov	r2, r3
   10c3c:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c44:	2105      	movs	r1, #5
   10c46:	5499      	strb	r1, [r3, r2]
   10c48:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c50:	781b      	ldrb	r3, [r3, #0]
   10c52:	3301      	adds	r3, #1
   10c54:	b2da      	uxtb	r2, r3
   10c56:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c5e:	701a      	strb	r2, [r3, #0]
   10c60:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c68:	781b      	ldrb	r3, [r3, #0]
   10c6a:	2bff      	cmp	r3, #255	; 0xff
   10c6c:	d105      	bne.n	10c7a <send_takeOff+0x112>
   10c6e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c76:	2200      	movs	r2, #0
   10c78:	701a      	strb	r2, [r3, #0]
   10c7a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c82:	781b      	ldrb	r3, [r3, #0]
   10c84:	461a      	mov	r2, r3
   10c86:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c8e:	2104      	movs	r1, #4
   10c90:	5499      	strb	r1, [r3, r2]
   10c92:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c9a:	781b      	ldrb	r3, [r3, #0]
   10c9c:	3301      	adds	r3, #1
   10c9e:	b2da      	uxtb	r2, r3
   10ca0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca8:	701a      	strb	r2, [r3, #0]
   10caa:	f24c 3319 	movw	r3, #49945	; 0xc319
   10cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb2:	781b      	ldrb	r3, [r3, #0]
   10cb4:	2bff      	cmp	r3, #255	; 0xff
   10cb6:	d105      	bne.n	10cc4 <send_takeOff+0x15c>
   10cb8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc0:	2200      	movs	r2, #0
   10cc2:	701a      	strb	r2, [r3, #0]
   10cc4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ccc:	2204      	movs	r2, #4
   10cce:	701a      	strb	r2, [r3, #0]
   10cd0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd8:	2204      	movs	r2, #4
   10cda:	701a      	strb	r2, [r3, #0]
   10cdc:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce4:	781b      	ldrb	r3, [r3, #0]
   10ce6:	461a      	mov	r2, r3
   10ce8:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf0:	7819      	ldrb	r1, [r3, #0]
   10cf2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cfa:	5499      	strb	r1, [r3, r2]
   10cfc:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d04:	781a      	ldrb	r2, [r3, #0]
   10d06:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d0e:	781b      	ldrb	r3, [r3, #0]
   10d10:	4413      	add	r3, r2
   10d12:	b2da      	uxtb	r2, r3
   10d14:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d1c:	701a      	strb	r2, [r3, #0]
   10d1e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d26:	781a      	ldrb	r2, [r3, #0]
   10d28:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d30:	781b      	ldrb	r3, [r3, #0]
   10d32:	4413      	add	r3, r2
   10d34:	b2da      	uxtb	r2, r3
   10d36:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d3e:	701a      	strb	r2, [r3, #0]
   10d40:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d48:	781b      	ldrb	r3, [r3, #0]
   10d4a:	3301      	adds	r3, #1
   10d4c:	b2da      	uxtb	r2, r3
   10d4e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d56:	701a      	strb	r2, [r3, #0]
   10d58:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d60:	781b      	ldrb	r3, [r3, #0]
   10d62:	2bff      	cmp	r3, #255	; 0xff
   10d64:	d105      	bne.n	10d72 <send_takeOff+0x20a>
   10d66:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d6e:	2200      	movs	r2, #0
   10d70:	701a      	strb	r2, [r3, #0]
   10d72:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d7a:	781b      	ldrb	r3, [r3, #0]
   10d7c:	461a      	mov	r2, r3
   10d7e:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d86:	7859      	ldrb	r1, [r3, #1]
   10d88:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d90:	5499      	strb	r1, [r3, r2]
   10d92:	4b7b      	ldr	r3, [pc, #492]	; (10f80 <send_takeOff+0x418>)
   10d94:	781a      	ldrb	r2, [r3, #0]
   10d96:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d9e:	781b      	ldrb	r3, [r3, #0]
   10da0:	4413      	add	r3, r2
   10da2:	b2da      	uxtb	r2, r3
   10da4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dac:	701a      	strb	r2, [r3, #0]
   10dae:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db6:	781a      	ldrb	r2, [r3, #0]
   10db8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc0:	781b      	ldrb	r3, [r3, #0]
   10dc2:	4413      	add	r3, r2
   10dc4:	b2da      	uxtb	r2, r3
   10dc6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dce:	701a      	strb	r2, [r3, #0]
   10dd0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd8:	781b      	ldrb	r3, [r3, #0]
   10dda:	3301      	adds	r3, #1
   10ddc:	b2da      	uxtb	r2, r3
   10dde:	f24c 3319 	movw	r3, #49945	; 0xc319
   10de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de6:	701a      	strb	r2, [r3, #0]
   10de8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df0:	781b      	ldrb	r3, [r3, #0]
   10df2:	2bff      	cmp	r3, #255	; 0xff
   10df4:	d105      	bne.n	10e02 <send_takeOff+0x29a>
   10df6:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dfe:	2200      	movs	r2, #0
   10e00:	701a      	strb	r2, [r3, #0]
   10e02:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e0a:	781b      	ldrb	r3, [r3, #0]
   10e0c:	461a      	mov	r2, r3
   10e0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e16:	7819      	ldrb	r1, [r3, #0]
   10e18:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e20:	5499      	strb	r1, [r3, r2]
   10e22:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e2a:	781b      	ldrb	r3, [r3, #0]
   10e2c:	3301      	adds	r3, #1
   10e2e:	b2da      	uxtb	r2, r3
   10e30:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e38:	701a      	strb	r2, [r3, #0]
   10e3a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e42:	781b      	ldrb	r3, [r3, #0]
   10e44:	2bff      	cmp	r3, #255	; 0xff
   10e46:	d105      	bne.n	10e54 <send_takeOff+0x2ec>
   10e48:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e50:	2200      	movs	r2, #0
   10e52:	701a      	strb	r2, [r3, #0]
   10e54:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e5c:	781b      	ldrb	r3, [r3, #0]
   10e5e:	461a      	mov	r2, r3
   10e60:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e68:	7819      	ldrb	r1, [r3, #0]
   10e6a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e72:	5499      	strb	r1, [r3, r2]
   10e74:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e7c:	781b      	ldrb	r3, [r3, #0]
   10e7e:	3301      	adds	r3, #1
   10e80:	b2da      	uxtb	r2, r3
   10e82:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e8a:	701a      	strb	r2, [r3, #0]
   10e8c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e94:	781b      	ldrb	r3, [r3, #0]
   10e96:	2bff      	cmp	r3, #255	; 0xff
   10e98:	d105      	bne.n	10ea6 <send_takeOff+0x33e>
   10e9a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea2:	2200      	movs	r2, #0
   10ea4:	701a      	strb	r2, [r3, #0]
   10ea6:	f242 0339 	movw	r3, #8249	; 0x2039
   10eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eae:	781b      	ldrb	r3, [r3, #0]
   10eb0:	b2db      	uxtb	r3, r3
   10eb2:	f003 0310 	and.w	r3, r3, #16
   10eb6:	2b00      	cmp	r3, #0
   10eb8:	d15a      	bne.n	10f70 <send_takeOff+0x408>
   10eba:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec2:	781b      	ldrb	r3, [r3, #0]
   10ec4:	b2db      	uxtb	r3, r3
   10ec6:	461a      	mov	r2, r3
   10ec8:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ed0:	5c9a      	ldrb	r2, [r3, r2]
   10ed2:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eda:	701a      	strb	r2, [r3, #0]
   10edc:	f24c 431c 	movw	r3, #50204	; 0xc41c
   10ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee4:	2200      	movs	r2, #0
   10ee6:	701a      	strb	r2, [r3, #0]
   10ee8:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef0:	781b      	ldrb	r3, [r3, #0]
   10ef2:	b2db      	uxtb	r3, r3
   10ef4:	3301      	adds	r3, #1
   10ef6:	b2da      	uxtb	r2, r3
   10ef8:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f00:	701a      	strb	r2, [r3, #0]
   10f02:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f0a:	781b      	ldrb	r3, [r3, #0]
   10f0c:	b2db      	uxtb	r3, r3
   10f0e:	2bff      	cmp	r3, #255	; 0xff
   10f10:	d105      	bne.n	10f1e <send_takeOff+0x3b6>
   10f12:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f1a:	2200      	movs	r2, #0
   10f1c:	701a      	strb	r2, [r3, #0]
   10f1e:	f242 0338 	movw	r3, #8248	; 0x2038
   10f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f26:	f242 0238 	movw	r2, #8248	; 0x2038
   10f2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f2e:	7812      	ldrb	r2, [r2, #0]
   10f30:	b2d2      	uxtb	r2, r2
   10f32:	f042 0201 	orr.w	r2, r2, #1
   10f36:	b2d2      	uxtb	r2, r2
   10f38:	701a      	strb	r2, [r3, #0]
   10f3a:	f242 0339 	movw	r3, #8249	; 0x2039
   10f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f42:	f242 0239 	movw	r2, #8249	; 0x2039
   10f46:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f4a:	7812      	ldrb	r2, [r2, #0]
   10f4c:	b2d2      	uxtb	r2, r2
   10f4e:	f042 0210 	orr.w	r2, r2, #16
   10f52:	b2d2      	uxtb	r2, r2
   10f54:	701a      	strb	r2, [r3, #0]
   10f56:	e00b      	b.n	10f70 <send_takeOff+0x408>
   10f58:	f24c 3318 	movw	r3, #49944	; 0xc318
   10f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f60:	781b      	ldrb	r3, [r3, #0]
   10f62:	3301      	adds	r3, #1
   10f64:	b2da      	uxtb	r2, r3
   10f66:	f24c 3318 	movw	r3, #49944	; 0xc318
   10f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f6e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10f70:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   10f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f78:	2200      	movs	r2, #0
   10f7a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10f7c:	bd80      	pop	{r7, pc}
   10f7e:	bf00      	nop
   10f80:	2004c2fb 	.word	0x2004c2fb
   10f84:	f3af 8000 	nop.w

00010f88 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10f88:	b480      	push	{r7}
   10f8a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10f8c:	f242 0317 	movw	r3, #8215	; 0x2017
   10f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f94:	f242 0217 	movw	r2, #8215	; 0x2017
   10f98:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f9c:	7812      	ldrb	r2, [r2, #0]
   10f9e:	b2d2      	uxtb	r2, r2
   10fa0:	f042 0210 	orr.w	r2, r2, #16
   10fa4:	b2d2      	uxtb	r2, r2
   10fa6:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10fa8:	f242 0331 	movw	r3, #8241	; 0x2031
   10fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb0:	2201      	movs	r2, #1
   10fb2:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10fb4:	f242 0333 	movw	r3, #8243	; 0x2033
   10fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fbc:	2219      	movs	r2, #25
   10fbe:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10fc0:	f242 0311 	movw	r3, #8209	; 0x2011
   10fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fc8:	f242 0211 	movw	r2, #8209	; 0x2011
   10fcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fd0:	7812      	ldrb	r2, [r2, #0]
   10fd2:	b2d2      	uxtb	r2, r2
   10fd4:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10fd8:	b2d2      	uxtb	r2, r2
   10fda:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10fdc:	f242 0312 	movw	r3, #8210	; 0x2012
   10fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe4:	f242 0212 	movw	r2, #8210	; 0x2012
   10fe8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fec:	7812      	ldrb	r2, [r2, #0]
   10fee:	b2d2      	uxtb	r2, r2
   10ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10ff4:	b2d2      	uxtb	r2, r2
   10ff6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10ff8:	f242 0312 	movw	r3, #8210	; 0x2012
   10ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11000:	f242 0212 	movw	r2, #8210	; 0x2012
   11004:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11008:	7812      	ldrb	r2, [r2, #0]
   1100a:	b2d2      	uxtb	r2, r2
   1100c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11010:	b2d2      	uxtb	r2, r2
   11012:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   11014:	f242 033a 	movw	r3, #8250	; 0x203a
   11018:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1101c:	f242 023a 	movw	r2, #8250	; 0x203a
   11020:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11024:	7812      	ldrb	r2, [r2, #0]
   11026:	b2d2      	uxtb	r2, r2
   11028:	f042 0202 	orr.w	r2, r2, #2
   1102c:	b2d2      	uxtb	r2, r2
   1102e:	701a      	strb	r2, [r3, #0]
}
   11030:	46bd      	mov	sp, r7
   11032:	f85d 7b04 	ldr.w	r7, [sp], #4
   11036:	4770      	bx	lr

00011038 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   11038:	b480      	push	{r7}
   1103a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   1103c:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11040:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11044:	781b      	ldrb	r3, [r3, #0]
   11046:	2b00      	cmp	r3, #0
   11048:	d10e      	bne.n	11068 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1104a:	f242 0312 	movw	r3, #8210	; 0x2012
   1104e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11052:	f242 0212 	movw	r2, #8210	; 0x2012
   11056:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1105a:	7812      	ldrb	r2, [r2, #0]
   1105c:	b2d2      	uxtb	r2, r2
   1105e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11062:	b2d2      	uxtb	r2, r2
   11064:	701a      	strb	r2, [r3, #0]
   11066:	e047      	b.n	110f8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   11068:	f24c 431c 	movw	r3, #50204	; 0xc41c
   1106c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11070:	781b      	ldrb	r3, [r3, #0]
   11072:	2b08      	cmp	r3, #8
   11074:	d832      	bhi.n	110dc <__vector_5+0xa4>
    if (tx_byte & 0x01)
   11076:	f24c 431b 	movw	r3, #50203	; 0xc41b
   1107a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1107e:	781b      	ldrb	r3, [r3, #0]
   11080:	f003 0301 	and.w	r3, r3, #1
   11084:	2b00      	cmp	r3, #0
   11086:	d00e      	beq.n	110a6 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11088:	f242 0312 	movw	r3, #8210	; 0x2012
   1108c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11090:	f242 0212 	movw	r2, #8210	; 0x2012
   11094:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11098:	7812      	ldrb	r2, [r2, #0]
   1109a:	b2d2      	uxtb	r2, r2
   1109c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110a0:	b2d2      	uxtb	r2, r2
   110a2:	701a      	strb	r2, [r3, #0]
   110a4:	e00d      	b.n	110c2 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   110a6:	f242 0312 	movw	r3, #8210	; 0x2012
   110aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110ae:	f242 0212 	movw	r2, #8210	; 0x2012
   110b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110b6:	7812      	ldrb	r2, [r2, #0]
   110b8:	b2d2      	uxtb	r2, r2
   110ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   110be:	b2d2      	uxtb	r2, r2
   110c0:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   110c2:	f24c 431b 	movw	r3, #50203	; 0xc41b
   110c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110ca:	781b      	ldrb	r3, [r3, #0]
   110cc:	085b      	lsrs	r3, r3, #1
   110ce:	b2da      	uxtb	r2, r3
   110d0:	f24c 431b 	movw	r3, #50203	; 0xc41b
   110d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110d8:	701a      	strb	r2, [r3, #0]
   110da:	e00d      	b.n	110f8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   110dc:	f242 0312 	movw	r3, #8210	; 0x2012
   110e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e4:	f242 0212 	movw	r2, #8210	; 0x2012
   110e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110ec:	7812      	ldrb	r2, [r2, #0]
   110ee:	b2d2      	uxtb	r2, r2
   110f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110f4:	b2d2      	uxtb	r2, r2
   110f6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   110f8:	f24c 431c 	movw	r3, #50204	; 0xc41c
   110fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11100:	781b      	ldrb	r3, [r3, #0]
   11102:	3301      	adds	r3, #1
   11104:	b2da      	uxtb	r2, r3
   11106:	f24c 431c 	movw	r3, #50204	; 0xc41c
   1110a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1110e:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   11110:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11118:	781b      	ldrb	r3, [r3, #0]
   1111a:	2b09      	cmp	r3, #9
   1111c:	d94d      	bls.n	111ba <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   1111e:	f24c 3319 	movw	r3, #49945	; 0xc319
   11122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11126:	781a      	ldrb	r2, [r3, #0]
   11128:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1112c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11130:	781b      	ldrb	r3, [r3, #0]
   11132:	b2db      	uxtb	r3, r3
   11134:	429a      	cmp	r2, r3
   11136:	d10e      	bne.n	11156 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   11138:	f242 0339 	movw	r3, #8249	; 0x2039
   1113c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11140:	f242 0239 	movw	r2, #8249	; 0x2039
   11144:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11148:	7812      	ldrb	r2, [r2, #0]
   1114a:	b2d2      	uxtb	r2, r2
   1114c:	f022 0210 	bic.w	r2, r2, #16
   11150:	b2d2      	uxtb	r2, r2
   11152:	701a      	strb	r2, [r3, #0]
   11154:	e031      	b.n	111ba <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   11156:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1115a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1115e:	781b      	ldrb	r3, [r3, #0]
   11160:	b2db      	uxtb	r3, r3
   11162:	461a      	mov	r2, r3
   11164:	f24c 331c 	movw	r3, #49948	; 0xc31c
   11168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1116c:	5c9a      	ldrb	r2, [r3, r2]
   1116e:	f24c 431b 	movw	r3, #50203	; 0xc41b
   11172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11176:	701a      	strb	r2, [r3, #0]
   11178:	f24c 431c 	movw	r3, #50204	; 0xc41c
   1117c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11180:	2200      	movs	r2, #0
   11182:	701a      	strb	r2, [r3, #0]
   11184:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1118c:	781b      	ldrb	r3, [r3, #0]
   1118e:	b2db      	uxtb	r3, r3
   11190:	3301      	adds	r3, #1
   11192:	b2da      	uxtb	r2, r3
   11194:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11198:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1119c:	701a      	strb	r2, [r3, #0]
   1119e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   111a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a6:	781b      	ldrb	r3, [r3, #0]
   111a8:	b2db      	uxtb	r3, r3
   111aa:	2bff      	cmp	r3, #255	; 0xff
   111ac:	d105      	bne.n	111ba <__vector_5+0x182>
   111ae:	f24c 331a 	movw	r3, #49946	; 0xc31a
   111b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111b6:	2200      	movs	r2, #0
   111b8:	701a      	strb	r2, [r3, #0]
    }
  }
}
   111ba:	46bd      	mov	sp, r7
   111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   111c0:	4770      	bx	lr
   111c2:	bf00      	nop

000111c4 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   111c4:	b480      	push	{r7}
   111c6:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   111c8:	f24c 434f 	movw	r3, #50255	; 0xc44f
   111cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111d0:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   111d2:	f240 533e 	movw	r3, #1342	; 0x53e
   111d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111da:	2200      	movs	r2, #0
   111dc:	701a      	strb	r2, [r3, #0]
}
   111de:	46bd      	mov	sp, r7
   111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   111e4:	4770      	bx	lr
   111e6:	bf00      	nop

000111e8 <link_fbw_send>:

void link_fbw_send(void) {
   111e8:	b480      	push	{r7}
   111ea:	b083      	sub	sp, #12
   111ec:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   111ee:	f24c 4354 	movw	r3, #50260	; 0xc454
   111f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111f6:	781b      	ldrb	r3, [r3, #0]
   111f8:	b2db      	uxtb	r3, r3
   111fa:	2b00      	cmp	r3, #0
   111fc:	d00c      	beq.n	11218 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   111fe:	f24c 4355 	movw	r3, #50261	; 0xc455
   11202:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11206:	781b      	ldrb	r3, [r3, #0]
   11208:	3301      	adds	r3, #1
   1120a:	b2da      	uxtb	r2, r3
   1120c:	f24c 4355 	movw	r3, #50261	; 0xc455
   11210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11214:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   11216:	e064      	b.n	112e2 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   11218:	f242 030d 	movw	r3, #8205	; 0x200d
   1121c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11220:	2251      	movs	r2, #81	; 0x51
   11222:	701a      	strb	r2, [r3, #0]
   11224:	f242 030e 	movw	r3, #8206	; 0x200e
   11228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1122c:	781b      	ldrb	r3, [r3, #0]
   1122e:	b2db      	uxtb	r3, r3
   11230:	b2db      	uxtb	r3, r3
   11232:	b25b      	sxtb	r3, r3
   11234:	2b00      	cmp	r3, #0
   11236:	da05      	bge.n	11244 <link_fbw_send+0x5c>
   11238:	f242 030f 	movw	r3, #8207	; 0x200f
   1123c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11240:	781b      	ldrb	r3, [r3, #0]
   11242:	71fb      	strb	r3, [r7, #7]
   11244:	f242 030d 	movw	r3, #8205	; 0x200d
   11248:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1124c:	f242 020d 	movw	r2, #8205	; 0x200d
   11250:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11254:	7812      	ldrb	r2, [r2, #0]
   11256:	b2d2      	uxtb	r2, r2
   11258:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1125c:	b2d2      	uxtb	r2, r2
   1125e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11260:	f24c 4354 	movw	r3, #50260	; 0xc454
   11264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11268:	2201      	movs	r2, #1
   1126a:	701a      	strb	r2, [r3, #0]
   1126c:	f242 0318 	movw	r3, #8216	; 0x2018
   11270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11274:	f242 0218 	movw	r2, #8216	; 0x2018
   11278:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1127c:	7812      	ldrb	r2, [r2, #0]
   1127e:	b2d2      	uxtb	r2, r2
   11280:	f022 0201 	bic.w	r2, r2, #1
   11284:	b2d2      	uxtb	r2, r2
   11286:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11288:	f24c 4351 	movw	r3, #50257	; 0xc451
   1128c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11290:	2200      	movs	r2, #0
   11292:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   11294:	f24c 4352 	movw	r3, #50258	; 0xc452
   11298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1129c:	2200      	movs	r2, #0
   1129e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   112a0:	f24c 4351 	movw	r3, #50257	; 0xc451
   112a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112a8:	781b      	ldrb	r3, [r3, #0]
   112aa:	461a      	mov	r2, r3
   112ac:	f24c 4338 	movw	r3, #50232	; 0xc438
   112b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112b4:	4413      	add	r3, r2
   112b6:	781a      	ldrb	r2, [r3, #0]
   112b8:	f24c 4353 	movw	r3, #50259	; 0xc453
   112bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112c0:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   112c2:	f242 030f 	movw	r3, #8207	; 0x200f
   112c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ca:	f24c 4253 	movw	r2, #50259	; 0xc453
   112ce:	f2c2 0204 	movt	r2, #8196	; 0x2004
   112d2:	7812      	ldrb	r2, [r2, #0]
   112d4:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   112d6:	f24c 434e 	movw	r3, #50254	; 0xc44e
   112da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112de:	2200      	movs	r2, #0
   112e0:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   112e2:	370c      	adds	r7, #12
   112e4:	46bd      	mov	sp, r7
   112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   112ea:	4770      	bx	lr

000112ec <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   112ec:	b480      	push	{r7}
   112ee:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   112f0:	f242 032a 	movw	r3, #8234	; 0x202a
   112f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f8:	f242 022c 	movw	r2, #8236	; 0x202c
   112fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11300:	8812      	ldrh	r2, [r2, #0]
   11302:	b292      	uxth	r2, r2
   11304:	32c8      	adds	r2, #200	; 0xc8
   11306:	b292      	uxth	r2, r2
   11308:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   1130a:	f242 0336 	movw	r3, #8246	; 0x2036
   1130e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11312:	f242 0236 	movw	r2, #8246	; 0x2036
   11316:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1131a:	7812      	ldrb	r2, [r2, #0]
   1131c:	b2d2      	uxtb	r2, r2
   1131e:	f042 0210 	orr.w	r2, r2, #16
   11322:	b2d2      	uxtb	r2, r2
   11324:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   11326:	f242 0337 	movw	r3, #8247	; 0x2037
   1132a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1132e:	f242 0237 	movw	r2, #8247	; 0x2037
   11332:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11336:	7812      	ldrb	r2, [r2, #0]
   11338:	b2d2      	uxtb	r2, r2
   1133a:	f042 0210 	orr.w	r2, r2, #16
   1133e:	b2d2      	uxtb	r2, r2
   11340:	701a      	strb	r2, [r3, #0]
}
   11342:	46bd      	mov	sp, r7
   11344:	f85d 7b04 	ldr.w	r7, [sp], #4
   11348:	4770      	bx	lr
   1134a:	bf00      	nop

0001134c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   1134c:	b480      	push	{r7}
   1134e:	b083      	sub	sp, #12
   11350:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   11352:	f242 0337 	movw	r3, #8247	; 0x2037
   11356:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1135a:	f242 0237 	movw	r2, #8247	; 0x2037
   1135e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11362:	7812      	ldrb	r2, [r2, #0]
   11364:	b2d2      	uxtb	r2, r2
   11366:	f022 0210 	bic.w	r2, r2, #16
   1136a:	b2d2      	uxtb	r2, r2
   1136c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   1136e:	f24c 4351 	movw	r3, #50257	; 0xc451
   11372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11376:	781b      	ldrb	r3, [r3, #0]
   11378:	3301      	adds	r3, #1
   1137a:	b2da      	uxtb	r2, r3
   1137c:	f24c 4351 	movw	r3, #50257	; 0xc451
   11380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11384:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   11386:	f24c 4351 	movw	r3, #50257	; 0xc451
   1138a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1138e:	781b      	ldrb	r3, [r3, #0]
   11390:	2b17      	cmp	r3, #23
   11392:	d162      	bne.n	1145a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   11394:	f242 030f 	movw	r3, #8207	; 0x200f
   11398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1139c:	781b      	ldrb	r3, [r3, #0]
   1139e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   113a0:	f24c 4352 	movw	r3, #50258	; 0xc452
   113a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113a8:	781b      	ldrb	r3, [r3, #0]
   113aa:	79fa      	ldrb	r2, [r7, #7]
   113ac:	429a      	cmp	r2, r3
   113ae:	d110      	bne.n	113d2 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   113b0:	f24c 434e 	movw	r3, #50254	; 0xc44e
   113b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b8:	2201      	movs	r2, #1
   113ba:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   113bc:	f24c 4320 	movw	r3, #50208	; 0xc420
   113c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113c4:	7d1a      	ldrb	r2, [r3, #20]
   113c6:	f24c 4350 	movw	r3, #50256	; 0xc450
   113ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ce:	701a      	strb	r2, [r3, #0]
   113d0:	e00c      	b.n	113ec <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   113d2:	f24c 434f 	movw	r3, #50255	; 0xc44f
   113d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113da:	781b      	ldrb	r3, [r3, #0]
   113dc:	b2db      	uxtb	r3, r3
   113de:	3301      	adds	r3, #1
   113e0:	b2da      	uxtb	r2, r3
   113e2:	f24c 434f 	movw	r3, #50255	; 0xc44f
   113e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ea:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   113ec:	f240 533e 	movw	r3, #1342	; 0x53e
   113f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113f4:	2201      	movs	r2, #1
   113f6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   113f8:	f24c 4354 	movw	r3, #50260	; 0xc454
   113fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11400:	2200      	movs	r2, #0
   11402:	701a      	strb	r2, [r3, #0]
   11404:	f242 0318 	movw	r3, #8216	; 0x2018
   11408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1140c:	f242 0218 	movw	r2, #8216	; 0x2018
   11410:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11414:	7812      	ldrb	r2, [r2, #0]
   11416:	b2d2      	uxtb	r2, r2
   11418:	f042 0201 	orr.w	r2, r2, #1
   1141c:	b2d2      	uxtb	r2, r2
   1141e:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   11420:	f242 030d 	movw	r3, #8205	; 0x200d
   11424:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11428:	f242 020d 	movw	r2, #8205	; 0x200d
   1142c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11430:	7812      	ldrb	r2, [r2, #0]
   11432:	b2d2      	uxtb	r2, r2
   11434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11438:	b2d2      	uxtb	r2, r2
   1143a:	701a      	strb	r2, [r3, #0]
   1143c:	f242 030d 	movw	r3, #8205	; 0x200d
   11440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11444:	f242 020d 	movw	r2, #8205	; 0x200d
   11448:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1144c:	7812      	ldrb	r2, [r2, #0]
   1144e:	b2d2      	uxtb	r2, r2
   11450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11454:	b2d2      	uxtb	r2, r2
   11456:	701a      	strb	r2, [r3, #0]
    return;
   11458:	e051      	b.n	114fe <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   1145a:	f24c 4351 	movw	r3, #50257	; 0xc451
   1145e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11462:	781b      	ldrb	r3, [r3, #0]
   11464:	2b15      	cmp	r3, #21
   11466:	d820      	bhi.n	114aa <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11468:	f24c 4351 	movw	r3, #50257	; 0xc451
   1146c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11470:	781b      	ldrb	r3, [r3, #0]
   11472:	461a      	mov	r2, r3
   11474:	f24c 4338 	movw	r3, #50232	; 0xc438
   11478:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1147c:	4413      	add	r3, r2
   1147e:	781b      	ldrb	r3, [r3, #0]
   11480:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   11482:	f242 030f 	movw	r3, #8207	; 0x200f
   11486:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1148a:	79fa      	ldrb	r2, [r7, #7]
   1148c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   1148e:	f24c 4353 	movw	r3, #50259	; 0xc453
   11492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11496:	781a      	ldrb	r2, [r3, #0]
   11498:	79fb      	ldrb	r3, [r7, #7]
   1149a:	4053      	eors	r3, r2
   1149c:	b2da      	uxtb	r2, r3
   1149e:	f24c 4353 	movw	r3, #50259	; 0xc453
   114a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114a6:	701a      	strb	r2, [r3, #0]
   114a8:	e009      	b.n	114be <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   114aa:	f242 030f 	movw	r3, #8207	; 0x200f
   114ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b2:	f24c 4253 	movw	r2, #50259	; 0xc453
   114b6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   114ba:	7812      	ldrb	r2, [r2, #0]
   114bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   114be:	f242 030f 	movw	r3, #8207	; 0x200f
   114c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114c6:	781b      	ldrb	r3, [r3, #0]
   114c8:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   114ca:	f24c 4351 	movw	r3, #50257	; 0xc451
   114ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114d2:	781b      	ldrb	r3, [r3, #0]
   114d4:	1e5a      	subs	r2, r3, #1
   114d6:	f24c 4320 	movw	r3, #50208	; 0xc420
   114da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114de:	4413      	add	r3, r2
   114e0:	79fa      	ldrb	r2, [r7, #7]
   114e2:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   114e4:	f24c 4352 	movw	r3, #50258	; 0xc452
   114e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ec:	781a      	ldrb	r2, [r3, #0]
   114ee:	79fb      	ldrb	r3, [r7, #7]
   114f0:	4053      	eors	r3, r2
   114f2:	b2da      	uxtb	r2, r3
   114f4:	f24c 4352 	movw	r3, #50258	; 0xc452
   114f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114fc:	701a      	strb	r2, [r3, #0]
}
   114fe:	370c      	adds	r7, #12
   11500:	46bd      	mov	sp, r7
   11502:	f85d 7b04 	ldr.w	r7, [sp], #4
   11506:	4770      	bx	lr

00011508 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   11508:	b480      	push	{r7}
   1150a:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   1150c:	f242 0317 	movw	r3, #8215	; 0x2017
   11510:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11514:	f242 0217 	movw	r2, #8215	; 0x2017
   11518:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1151c:	7812      	ldrb	r2, [r2, #0]
   1151e:	b2d2      	uxtb	r2, r2
   11520:	f042 0206 	orr.w	r2, r2, #6
   11524:	b2d2      	uxtb	r2, r2
   11526:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11528:	f242 0317 	movw	r3, #8215	; 0x2017
   1152c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11530:	f242 0217 	movw	r2, #8215	; 0x2017
   11534:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11538:	7812      	ldrb	r2, [r2, #0]
   1153a:	b2d2      	uxtb	r2, r2
   1153c:	f042 0201 	orr.w	r2, r2, #1
   11540:	b2d2      	uxtb	r2, r2
   11542:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   11544:	f24c 4354 	movw	r3, #50260	; 0xc454
   11548:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1154c:	2200      	movs	r2, #0
   1154e:	701a      	strb	r2, [r3, #0]
   11550:	f242 0318 	movw	r3, #8216	; 0x2018
   11554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11558:	f242 0218 	movw	r2, #8216	; 0x2018
   1155c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11560:	7812      	ldrb	r2, [r2, #0]
   11562:	b2d2      	uxtb	r2, r2
   11564:	f042 0201 	orr.w	r2, r2, #1
   11568:	b2d2      	uxtb	r2, r2
   1156a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   1156c:	f242 0302 	movw	r3, #8194	; 0x2002
   11570:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11574:	f242 0202 	movw	r2, #8194	; 0x2002
   11578:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1157c:	7812      	ldrb	r2, [r2, #0]
   1157e:	b2d2      	uxtb	r2, r2
   11580:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11584:	b2d2      	uxtb	r2, r2
   11586:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11588:	f24c 4354 	movw	r3, #50260	; 0xc454
   1158c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11590:	2200      	movs	r2, #0
   11592:	701a      	strb	r2, [r3, #0]
   11594:	f242 0303 	movw	r3, #8195	; 0x2003
   11598:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1159c:	f242 0203 	movw	r2, #8195	; 0x2003
   115a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115a4:	7812      	ldrb	r2, [r2, #0]
   115a6:	b2d2      	uxtb	r2, r2
   115a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   115ac:	b2d2      	uxtb	r2, r2
   115ae:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   115b0:	f24c 4354 	movw	r3, #50260	; 0xc454
   115b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115b8:	2200      	movs	r2, #0
   115ba:	701a      	strb	r2, [r3, #0]
}
   115bc:	46bd      	mov	sp, r7
   115be:	f85d 7b04 	ldr.w	r7, [sp], #4
   115c2:	4770      	bx	lr

000115c4 <__vector_17>:


SIGNAL(SIG_SPI) {
   115c4:	b580      	push	{r7, lr}
   115c6:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   115c8:	f24c 4354 	movw	r3, #50260	; 0xc454
   115cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115d0:	781b      	ldrb	r3, [r3, #0]
   115d2:	b2db      	uxtb	r3, r3
   115d4:	2b01      	cmp	r3, #1
   115d6:	d102      	bne.n	115de <__vector_17+0x1a>
    link_fbw_on_spi_it();
   115d8:	f7ff fe88 	bl	112ec <link_fbw_on_spi_it>
   115dc:	e00b      	b.n	115f6 <__vector_17+0x32>
  else
    fatal_error_nb++;
   115de:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   115e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115e6:	781b      	ldrb	r3, [r3, #0]
   115e8:	3301      	adds	r3, #1
   115ea:	b2da      	uxtb	r2, r3
   115ec:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   115f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115f4:	701a      	strb	r2, [r3, #0]
}
   115f6:	bd80      	pop	{r7, pc}

000115f8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   115f8:	b480      	push	{r7}
   115fa:	b083      	sub	sp, #12
   115fc:	af00      	add	r7, sp, #0
   115fe:	4603      	mov	r3, r0
   11600:	6039      	str	r1, [r7, #0]
   11602:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   11604:	79fa      	ldrb	r2, [r7, #7]
   11606:	f24c 4368 	movw	r3, #50280	; 0xc468
   1160a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1160e:	6839      	ldr	r1, [r7, #0]
   11610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   11614:	370c      	adds	r7, #12
   11616:	46bd      	mov	sp, r7
   11618:	f85d 7b04 	ldr.w	r7, [sp], #4
   1161c:	4770      	bx	lr
   1161e:	bf00      	nop

00011620 <adc_init>:

void 
adc_init( void )
{
   11620:	b480      	push	{r7}
   11622:	b083      	sub	sp, #12
   11624:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   11626:	f242 0362 	movw	r3, #8290	; 0x2062
   1162a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1162e:	2200      	movs	r2, #0
   11630:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   11632:	f242 0361 	movw	r3, #8289	; 0x2061
   11636:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1163a:	2200      	movs	r2, #0
   1163c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   1163e:	f242 0307 	movw	r3, #8199	; 0x2007
   11642:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11646:	2240      	movs	r2, #64	; 0x40
   11648:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   1164a:	f242 0308 	movw	r3, #8200	; 0x2008
   1164e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11652:	f242 0208 	movw	r2, #8200	; 0x2008
   11656:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1165a:	7812      	ldrb	r2, [r2, #0]
   1165c:	b2d2      	uxtb	r2, r2
   1165e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11662:	b2d2      	uxtb	r2, r2
   11664:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   11666:	f242 0306 	movw	r3, #8198	; 0x2006
   1166a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1166e:	22cf      	movs	r2, #207	; 0xcf
   11670:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11672:	2300      	movs	r3, #0
   11674:	71fb      	strb	r3, [r7, #7]
   11676:	e00a      	b.n	1168e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11678:	79fa      	ldrb	r2, [r7, #7]
   1167a:	f24c 4368 	movw	r3, #50280	; 0xc468
   1167e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11682:	2100      	movs	r1, #0
   11684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11688:	79fb      	ldrb	r3, [r7, #7]
   1168a:	3301      	adds	r3, #1
   1168c:	71fb      	strb	r3, [r7, #7]
   1168e:	79fb      	ldrb	r3, [r7, #7]
   11690:	2b07      	cmp	r3, #7
   11692:	d9f1      	bls.n	11678 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   11694:	370c      	adds	r7, #12
   11696:	46bd      	mov	sp, r7
   11698:	f85d 7b04 	ldr.w	r7, [sp], #4
   1169c:	4770      	bx	lr
   1169e:	bf00      	nop

000116a0 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   116a0:	b480      	push	{r7}
   116a2:	b085      	sub	sp, #20
   116a4:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   116a6:	f242 0307 	movw	r3, #8199	; 0x2007
   116aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116ae:	781b      	ldrb	r3, [r3, #0]
   116b0:	b2db      	uxtb	r3, r3
   116b2:	f003 0307 	and.w	r3, r3, #7
   116b6:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   116b8:	7bfa      	ldrb	r2, [r7, #15]
   116ba:	f24c 4368 	movw	r3, #50280	; 0xc468
   116be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   116c6:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   116c8:	f242 0304 	movw	r3, #8196	; 0x2004
   116cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116d0:	881b      	ldrh	r3, [r3, #0]
   116d2:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   116d4:	7bfa      	ldrb	r2, [r7, #15]
   116d6:	f24c 4358 	movw	r3, #50264	; 0xc458
   116da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116de:	88f9      	ldrh	r1, [r7, #6]
   116e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   116e4:	68bb      	ldr	r3, [r7, #8]
   116e6:	2b00      	cmp	r3, #0
   116e8:	d025      	beq.n	11736 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   116ea:	68bb      	ldr	r3, [r7, #8]
   116ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   116f0:	3301      	adds	r3, #1
   116f2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   116f4:	7bbb      	ldrb	r3, [r7, #14]
   116f6:	2b1f      	cmp	r3, #31
   116f8:	d901      	bls.n	116fe <__vector_21+0x5e>
   116fa:	2300      	movs	r3, #0
   116fc:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   116fe:	68bb      	ldr	r3, [r7, #8]
   11700:	881a      	ldrh	r2, [r3, #0]
   11702:	7bbb      	ldrb	r3, [r7, #14]
   11704:	68b9      	ldr	r1, [r7, #8]
   11706:	005b      	lsls	r3, r3, #1
   11708:	440b      	add	r3, r1
   1170a:	885b      	ldrh	r3, [r3, #2]
   1170c:	1ad3      	subs	r3, r2, r3
   1170e:	b29a      	uxth	r2, r3
   11710:	68bb      	ldr	r3, [r7, #8]
   11712:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   11714:	7bbb      	ldrb	r3, [r7, #14]
   11716:	68ba      	ldr	r2, [r7, #8]
   11718:	005b      	lsls	r3, r3, #1
   1171a:	4413      	add	r3, r2
   1171c:	88fa      	ldrh	r2, [r7, #6]
   1171e:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11720:	68bb      	ldr	r3, [r7, #8]
   11722:	881a      	ldrh	r2, [r3, #0]
   11724:	88fb      	ldrh	r3, [r7, #6]
   11726:	4413      	add	r3, r2
   11728:	b29a      	uxth	r2, r3
   1172a:	68bb      	ldr	r3, [r7, #8]
   1172c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   1172e:	68bb      	ldr	r3, [r7, #8]
   11730:	7bba      	ldrb	r2, [r7, #14]
   11732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   11736:	7bfb      	ldrb	r3, [r7, #15]
   11738:	3301      	adds	r3, #1
   1173a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   1173c:	7bfb      	ldrb	r3, [r7, #15]
   1173e:	2b07      	cmp	r3, #7
   11740:	d901      	bls.n	11746 <__vector_21+0xa6>
    adc_input = 0;
   11742:	2300      	movs	r3, #0
   11744:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   11746:	f242 0307 	movw	r3, #8199	; 0x2007
   1174a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1174e:	7bfa      	ldrb	r2, [r7, #15]
   11750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11754:	b2d2      	uxtb	r2, r2
   11756:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11758:	f242 0306 	movw	r3, #8198	; 0x2006
   1175c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11760:	f242 0206 	movw	r2, #8198	; 0x2006
   11764:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11768:	7812      	ldrb	r2, [r2, #0]
   1176a:	b2d2      	uxtb	r2, r2
   1176c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11770:	b2d2      	uxtb	r2, r2
   11772:	701a      	strb	r2, [r3, #0]
  
}
   11774:	3714      	adds	r7, #20
   11776:	46bd      	mov	sp, r7
   11778:	f85d 7b04 	ldr.w	r7, [sp], #4
   1177c:	4770      	bx	lr
   1177e:	bf00      	nop

00011780 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11780:	b580      	push	{r7, lr}
   11782:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   11784:	f003 fca8 	bl	150d8 <uart1_init>
#endif
  ubx_status = UNINIT;
   11788:	f24c 53af 	movw	r3, #50607	; 0xc5af
   1178c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11790:	2200      	movs	r2, #0
   11792:	701a      	strb	r2, [r3, #0]
}
   11794:	bd80      	pop	{r7, pc}
   11796:	bf00      	nop

00011798 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11798:	b580      	push	{r7, lr}
   1179a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1179c:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   117a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117a4:	781b      	ldrb	r3, [r3, #0]
   117a6:	2b01      	cmp	r3, #1
   117a8:	f040 80f9 	bne.w	1199e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   117ac:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   117b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117b4:	781b      	ldrb	r3, [r3, #0]
   117b6:	2b08      	cmp	r3, #8
   117b8:	d128      	bne.n	1180c <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   117ba:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   117be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117c2:	685a      	ldr	r2, [r3, #4]
   117c4:	f24c 439c 	movw	r3, #50332	; 0xc49c
   117c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117cc:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   117ce:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   117d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117d6:	689a      	ldr	r2, [r3, #8]
   117d8:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   117dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117e0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   117e2:	4b73      	ldr	r3, [pc, #460]	; (119b0 <parse_gps_msg+0x218>)
   117e4:	681b      	ldr	r3, [r3, #0]
   117e6:	4618      	mov	r0, r3
   117e8:	f006 fd52 	bl	18290 <__aeabi_i2f>
   117ec:	4603      	mov	r3, r0
   117ee:	4618      	mov	r0, r3
   117f0:	f04f 0100 	mov.w	r1, #0
   117f4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   117f8:	f006 fe52 	bl	184a0 <__aeabi_fdiv>
   117fc:	4603      	mov	r3, r0
   117fe:	461a      	mov	r2, r3
   11800:	f24c 438c 	movw	r3, #50316	; 0xc48c
   11804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11808:	601a      	str	r2, [r3, #0]
   1180a:	e0c8      	b.n	1199e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   1180c:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11814:	781b      	ldrb	r3, [r3, #0]
   11816:	2b03      	cmp	r3, #3
   11818:	d10a      	bne.n	11830 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   1181a:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   1181e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11822:	791a      	ldrb	r2, [r3, #4]
   11824:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   11828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1182c:	701a      	strb	r2, [r3, #0]
   1182e:	e0b6      	b.n	1199e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11830:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11838:	781b      	ldrb	r3, [r3, #0]
   1183a:	2b12      	cmp	r3, #18
   1183c:	f040 80af 	bne.w	1199e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11840:	4b5c      	ldr	r3, [pc, #368]	; (119b4 <parse_gps_msg+0x21c>)
   11842:	681b      	ldr	r3, [r3, #0]
   11844:	4618      	mov	r0, r3
   11846:	f006 fd1f 	bl	18288 <__aeabi_ui2f>
   1184a:	4603      	mov	r3, r0
   1184c:	4618      	mov	r0, r3
   1184e:	f04f 0100 	mov.w	r1, #0
   11852:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11856:	f006 fe23 	bl	184a0 <__aeabi_fdiv>
   1185a:	4603      	mov	r3, r0
   1185c:	461a      	mov	r2, r3
   1185e:	f24c 4390 	movw	r3, #50320	; 0xc490
   11862:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11866:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11868:	4b51      	ldr	r3, [pc, #324]	; (119b0 <parse_gps_msg+0x218>)
   1186a:	681b      	ldr	r3, [r3, #0]
   1186c:	4618      	mov	r0, r3
   1186e:	f006 fd0f 	bl	18290 <__aeabi_i2f>
   11872:	4603      	mov	r3, r0
   11874:	4618      	mov	r0, r3
   11876:	f04f 0100 	mov.w	r1, #0
   1187a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1187e:	f006 fe0f 	bl	184a0 <__aeabi_fdiv>
   11882:	4603      	mov	r3, r0
   11884:	461a      	mov	r2, r3
   11886:	f24c 4394 	movw	r3, #50324	; 0xc494
   1188a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1188e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11890:	4b49      	ldr	r3, [pc, #292]	; (119b8 <parse_gps_msg+0x220>)
   11892:	681b      	ldr	r3, [r3, #0]
   11894:	4618      	mov	r0, r3
   11896:	f006 fcfb 	bl	18290 <__aeabi_i2f>
   1189a:	4603      	mov	r3, r0
   1189c:	4618      	mov	r0, r3
   1189e:	f006 f8b7 	bl	17a10 <__aeabi_f2d>
   118a2:	4602      	mov	r2, r0
   118a4:	460b      	mov	r3, r1
   118a6:	4610      	mov	r0, r2
   118a8:	4619      	mov	r1, r3
   118aa:	a33d      	add	r3, pc, #244	; (adr r3, 119a0 <parse_gps_msg+0x208>)
   118ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   118b0:	f006 fa2c 	bl	17d0c <__aeabi_ddiv>
   118b4:	4602      	mov	r2, r0
   118b6:	460b      	mov	r3, r1
   118b8:	4610      	mov	r0, r2
   118ba:	4619      	mov	r1, r3
   118bc:	f04f 0200 	mov.w	r2, #0
   118c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   118c4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   118c8:	f006 fa20 	bl	17d0c <__aeabi_ddiv>
   118cc:	4602      	mov	r2, r0
   118ce:	460b      	mov	r3, r1
   118d0:	4610      	mov	r0, r2
   118d2:	4619      	mov	r1, r3
   118d4:	a334      	add	r3, pc, #208	; (adr r3, 119a8 <parse_gps_msg+0x210>)
   118d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   118da:	f006 f8ed 	bl	17ab8 <__aeabi_dmul>
   118de:	4602      	mov	r2, r0
   118e0:	460b      	mov	r3, r1
   118e2:	4610      	mov	r0, r2
   118e4:	4619      	mov	r1, r3
   118e6:	f006 fbc9 	bl	1807c <__aeabi_d2f>
   118ea:	4602      	mov	r2, r0
   118ec:	f24c 4398 	movw	r3, #50328	; 0xc498
   118f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118f4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   118f6:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   118fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118fe:	681b      	ldr	r3, [r3, #0]
   11900:	4618      	mov	r0, r3
   11902:	f006 fcc1 	bl	18288 <__aeabi_ui2f>
   11906:	4603      	mov	r3, r0
   11908:	4618      	mov	r0, r3
   1190a:	f04f 0100 	mov.w	r1, #0
   1190e:	f2c4 417a 	movt	r1, #17530	; 0x447a
   11912:	f006 fdc5 	bl	184a0 <__aeabi_fdiv>
   11916:	4603      	mov	r3, r0
   11918:	461a      	mov	r2, r3
   1191a:	f24c 4388 	movw	r3, #50312	; 0xc488
   1191e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11922:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   11924:	f24c 439c 	movw	r3, #50332	; 0xc49c
   11928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1192c:	681a      	ldr	r2, [r3, #0]
   1192e:	f248 531f 	movw	r3, #34079	; 0x851f
   11932:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11936:	fb83 1302 	smull	r1, r3, r3, r2
   1193a:	1159      	asrs	r1, r3, #5
   1193c:	17d3      	asrs	r3, r2, #31
   1193e:	1acb      	subs	r3, r1, r3
   11940:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   11944:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11948:	4618      	mov	r0, r3
   1194a:	f006 fca1 	bl	18290 <__aeabi_i2f>
   1194e:	4602      	mov	r2, r0
   11950:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   11954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11958:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   1195a:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   1195e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11962:	681a      	ldr	r2, [r3, #0]
   11964:	f248 531f 	movw	r3, #34079	; 0x851f
   11968:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1196c:	fb83 1302 	smull	r1, r3, r3, r2
   11970:	1159      	asrs	r1, r3, #5
   11972:	17d3      	asrs	r3, r2, #31
   11974:	1aca      	subs	r2, r1, r3
   11976:	f648 231a 	movw	r3, #35354	; 0x8a1a
   1197a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   1197e:	4413      	add	r3, r2
   11980:	4618      	mov	r0, r3
   11982:	f006 fc85 	bl	18290 <__aeabi_i2f>
   11986:	4602      	mov	r2, r0
   11988:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   1198c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11990:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11992:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   11996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1199a:	2201      	movs	r2, #1
   1199c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   1199e:	bd80      	pop	{r7, pc}
   119a0:	00000000 	.word	0x00000000
   119a4:	40f86a00 	.word	0x40f86a00
   119a8:	5a7ed197 	.word	0x5a7ed197
   119ac:	400921fb 	.word	0x400921fb
   119b0:	2004c4bc 	.word	0x2004c4bc
   119b4:	2004c4c4 	.word	0x2004c4c4
   119b8:	2004c4c8 	.word	0x2004c4c8

000119bc <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   119bc:	b480      	push	{r7}
   119be:	b083      	sub	sp, #12
   119c0:	af00      	add	r7, sp, #0
   119c2:	4603      	mov	r3, r0
   119c4:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   119c6:	f24c 53af 	movw	r3, #50607	; 0xc5af
   119ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ce:	781b      	ldrb	r3, [r3, #0]
   119d0:	2b06      	cmp	r3, #6
   119d2:	d81d      	bhi.n	11a10 <parse_ubx+0x54>
    ck_a += c;
   119d4:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   119d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119dc:	781a      	ldrb	r2, [r3, #0]
   119de:	79fb      	ldrb	r3, [r7, #7]
   119e0:	4413      	add	r3, r2
   119e2:	b2da      	uxtb	r2, r3
   119e4:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   119e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ec:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   119ee:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   119f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f6:	781a      	ldrb	r2, [r3, #0]
   119f8:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   119fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a00:	781b      	ldrb	r3, [r3, #0]
   11a02:	4413      	add	r3, r2
   11a04:	b2da      	uxtb	r2, r3
   11a06:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a0e:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11a10:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a18:	781b      	ldrb	r3, [r3, #0]
   11a1a:	2b00      	cmp	r3, #0
   11a1c:	d110      	bne.n	11a40 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11a1e:	79fb      	ldrb	r3, [r7, #7]
   11a20:	2bb5      	cmp	r3, #181	; 0xb5
   11a22:	f040 8135 	bne.w	11c90 <parse_ubx+0x2d4>
      ubx_status++;
   11a26:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a2e:	781b      	ldrb	r3, [r3, #0]
   11a30:	3301      	adds	r3, #1
   11a32:	b2da      	uxtb	r2, r3
   11a34:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a3c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11a3e:	e12f      	b.n	11ca0 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11a40:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a48:	781b      	ldrb	r3, [r3, #0]
   11a4a:	2b01      	cmp	r3, #1
   11a4c:	d11c      	bne.n	11a88 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11a4e:	79fb      	ldrb	r3, [r7, #7]
   11a50:	2b62      	cmp	r3, #98	; 0x62
   11a52:	d000      	beq.n	11a56 <parse_ubx+0x9a>
      goto error;
   11a54:	e11d      	b.n	11c92 <parse_ubx+0x2d6>
    ck_a = 0;
   11a56:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a5e:	2200      	movs	r2, #0
   11a60:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11a62:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a6a:	2200      	movs	r2, #0
   11a6c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11a6e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a76:	781b      	ldrb	r3, [r3, #0]
   11a78:	3301      	adds	r3, #1
   11a7a:	b2da      	uxtb	r2, r3
   11a7c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a84:	701a      	strb	r2, [r3, #0]
   11a86:	e103      	b.n	11c90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11a88:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a90:	781b      	ldrb	r3, [r3, #0]
   11a92:	2b02      	cmp	r3, #2
   11a94:	d127      	bne.n	11ae6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11a96:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a9e:	781b      	ldrb	r3, [r3, #0]
   11aa0:	b2db      	uxtb	r3, r3
   11aa2:	2b00      	cmp	r3, #0
   11aa4:	d00c      	beq.n	11ac0 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11aa6:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aae:	781b      	ldrb	r3, [r3, #0]
   11ab0:	3301      	adds	r3, #1
   11ab2:	b2da      	uxtb	r2, r3
   11ab4:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11abc:	701a      	strb	r2, [r3, #0]
      goto error;
   11abe:	e0e8      	b.n	11c92 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11ac0:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   11ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac8:	79fa      	ldrb	r2, [r7, #7]
   11aca:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11acc:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ad4:	781b      	ldrb	r3, [r3, #0]
   11ad6:	3301      	adds	r3, #1
   11ad8:	b2da      	uxtb	r2, r3
   11ada:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae2:	701a      	strb	r2, [r3, #0]
   11ae4:	e0d4      	b.n	11c90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11ae6:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aee:	781b      	ldrb	r3, [r3, #0]
   11af0:	2b03      	cmp	r3, #3
   11af2:	d112      	bne.n	11b1a <parse_ubx+0x15e>
  {
    ubx_id = c;
   11af4:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11afc:	79fa      	ldrb	r2, [r7, #7]
   11afe:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b00:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b08:	781b      	ldrb	r3, [r3, #0]
   11b0a:	3301      	adds	r3, #1
   11b0c:	b2da      	uxtb	r2, r3
   11b0e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b16:	701a      	strb	r2, [r3, #0]
   11b18:	e0ba      	b.n	11c90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11b1a:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b22:	781b      	ldrb	r3, [r3, #0]
   11b24:	2b04      	cmp	r3, #4
   11b26:	d113      	bne.n	11b50 <parse_ubx+0x194>
  {
    ubx_len = c;
   11b28:	79fb      	ldrb	r3, [r7, #7]
   11b2a:	b29a      	uxth	r2, r3
   11b2c:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b34:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11b36:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b3e:	781b      	ldrb	r3, [r3, #0]
   11b40:	3301      	adds	r3, #1
   11b42:	b2da      	uxtb	r2, r3
   11b44:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b4c:	701a      	strb	r2, [r3, #0]
   11b4e:	e09f      	b.n	11c90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11b50:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b58:	781b      	ldrb	r3, [r3, #0]
   11b5a:	2b05      	cmp	r3, #5
   11b5c:	d12b      	bne.n	11bb6 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11b5e:	79fb      	ldrb	r3, [r7, #7]
   11b60:	021b      	lsls	r3, r3, #8
   11b62:	b29a      	uxth	r2, r3
   11b64:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6c:	881b      	ldrh	r3, [r3, #0]
   11b6e:	b29b      	uxth	r3, r3
   11b70:	4313      	orrs	r3, r2
   11b72:	b29b      	uxth	r3, r3
   11b74:	b29a      	uxth	r2, r3
   11b76:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b7e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11b80:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b88:	881b      	ldrh	r3, [r3, #0]
   11b8a:	2bff      	cmp	r3, #255	; 0xff
   11b8c:	d900      	bls.n	11b90 <parse_ubx+0x1d4>
      goto error;
   11b8e:	e080      	b.n	11c92 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11b90:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b98:	2200      	movs	r2, #0
   11b9a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b9c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ba4:	781b      	ldrb	r3, [r3, #0]
   11ba6:	3301      	adds	r3, #1
   11ba8:	b2da      	uxtb	r2, r3
   11baa:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bb2:	701a      	strb	r2, [r3, #0]
   11bb4:	e06c      	b.n	11c90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11bb6:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bbe:	781b      	ldrb	r3, [r3, #0]
   11bc0:	2b06      	cmp	r3, #6
   11bc2:	d131      	bne.n	11c28 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11bc4:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bcc:	781b      	ldrb	r3, [r3, #0]
   11bce:	461a      	mov	r2, r3
   11bd0:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd8:	79f9      	ldrb	r1, [r7, #7]
   11bda:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11bdc:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be4:	781b      	ldrb	r3, [r3, #0]
   11be6:	3301      	adds	r3, #1
   11be8:	b2da      	uxtb	r2, r3
   11bea:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bf2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11bf4:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bfc:	781b      	ldrb	r3, [r3, #0]
   11bfe:	461a      	mov	r2, r3
   11c00:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c08:	881b      	ldrh	r3, [r3, #0]
   11c0a:	429a      	cmp	r2, r3
   11c0c:	d340      	bcc.n	11c90 <parse_ubx+0x2d4>
      ubx_status++;
   11c0e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c16:	781b      	ldrb	r3, [r3, #0]
   11c18:	3301      	adds	r3, #1
   11c1a:	b2da      	uxtb	r2, r3
   11c1c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c24:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11c26:	e03b      	b.n	11ca0 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11c28:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c30:	781b      	ldrb	r3, [r3, #0]
   11c32:	2b07      	cmp	r3, #7
   11c34:	d115      	bne.n	11c62 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11c36:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c3e:	781b      	ldrb	r3, [r3, #0]
   11c40:	79fa      	ldrb	r2, [r7, #7]
   11c42:	429a      	cmp	r2, r3
   11c44:	d000      	beq.n	11c48 <parse_ubx+0x28c>
      goto error;
   11c46:	e024      	b.n	11c92 <parse_ubx+0x2d6>
    ubx_status++;
   11c48:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c50:	781b      	ldrb	r3, [r3, #0]
   11c52:	3301      	adds	r3, #1
   11c54:	b2da      	uxtb	r2, r3
   11c56:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c5e:	701a      	strb	r2, [r3, #0]
   11c60:	e016      	b.n	11c90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11c62:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c6a:	781b      	ldrb	r3, [r3, #0]
   11c6c:	2b08      	cmp	r3, #8
   11c6e:	d10f      	bne.n	11c90 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11c70:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c78:	781b      	ldrb	r3, [r3, #0]
   11c7a:	79fa      	ldrb	r2, [r7, #7]
   11c7c:	429a      	cmp	r2, r3
   11c7e:	d000      	beq.n	11c82 <parse_ubx+0x2c6>
      goto error;
   11c80:	e007      	b.n	11c92 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11c82:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c8a:	2201      	movs	r2, #1
   11c8c:	701a      	strb	r2, [r3, #0]
    goto restart;
   11c8e:	e000      	b.n	11c92 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11c90:	e006      	b.n	11ca0 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11c92:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c9a:	2200      	movs	r2, #0
   11c9c:	701a      	strb	r2, [r3, #0]
  return;
   11c9e:	bf00      	nop
}
   11ca0:	370c      	adds	r7, #12
   11ca2:	46bd      	mov	sp, r7
   11ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
   11ca8:	4770      	bx	lr
   11caa:	bf00      	nop

00011cac <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11cac:	b580      	push	{r7, lr}
   11cae:	b082      	sub	sp, #8
   11cb0:	af00      	add	r7, sp, #0
   11cb2:	f242 039c 	movw	r3, #8348	; 0x209c
   11cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cba:	781b      	ldrb	r3, [r3, #0]
   11cbc:	71fb      	strb	r3, [r7, #7]
   11cbe:	79fb      	ldrb	r3, [r7, #7]
   11cc0:	4618      	mov	r0, r3
   11cc2:	f7ff fe7b 	bl	119bc <parse_ubx>
   11cc6:	3708      	adds	r7, #8
   11cc8:	46bd      	mov	sp, r7
   11cca:	bd80      	pop	{r7, pc}
   11ccc:	f3af 8000 	nop.w

00011cd0 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11cd0:	b580      	push	{r7, lr}
   11cd2:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11cd4:	f240 5348 	movw	r3, #1352	; 0x548
   11cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cdc:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11ce0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11ce4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11ce6:	2001      	movs	r0, #1
   11ce8:	f24c 51bc 	movw	r1, #50620	; 0xc5bc
   11cec:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11cf0:	f7ff fc82 	bl	115f8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11cf4:	2002      	movs	r0, #2
   11cf6:	f24c 6100 	movw	r1, #50688	; 0xc600
   11cfa:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11cfe:	f7ff fc7b 	bl	115f8 <adc_buf_channel>
}
   11d02:	bd80      	pop	{r7, pc}

00011d04 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11d04:	b480      	push	{r7}
   11d06:	b083      	sub	sp, #12
   11d08:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11d0a:	f24c 53bc 	movw	r3, #50620	; 0xc5bc
   11d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d12:	881b      	ldrh	r3, [r3, #0]
   11d14:	095b      	lsrs	r3, r3, #5
   11d16:	b29b      	uxth	r3, r3
   11d18:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11d1a:	f24c 6300 	movw	r3, #50688	; 0xc600
   11d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d22:	881b      	ldrh	r3, [r3, #0]
   11d24:	095b      	lsrs	r3, r3, #5
   11d26:	b29b      	uxth	r3, r3
   11d28:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11d2a:	88fb      	ldrh	r3, [r7, #6]
   11d2c:	425b      	negs	r3, r3
   11d2e:	b29a      	uxth	r2, r3
   11d30:	88bb      	ldrh	r3, [r7, #4]
   11d32:	1ad3      	subs	r3, r2, r3
   11d34:	b29a      	uxth	r2, r3
   11d36:	f240 5342 	movw	r3, #1346	; 0x542
   11d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d3e:	881b      	ldrh	r3, [r3, #0]
   11d40:	b29b      	uxth	r3, r3
   11d42:	1ad3      	subs	r3, r2, r3
   11d44:	b29b      	uxth	r3, r3
   11d46:	b29a      	uxth	r2, r3
   11d48:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   11d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d50:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11d52:	88ba      	ldrh	r2, [r7, #4]
   11d54:	88fb      	ldrh	r3, [r7, #6]
   11d56:	1ad3      	subs	r3, r2, r3
   11d58:	b29a      	uxth	r2, r3
   11d5a:	f240 5344 	movw	r3, #1348	; 0x544
   11d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d62:	881b      	ldrh	r3, [r3, #0]
   11d64:	b29b      	uxth	r3, r3
   11d66:	1ad3      	subs	r3, r2, r3
   11d68:	b29b      	uxth	r3, r3
   11d6a:	b29a      	uxth	r2, r3
   11d6c:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d74:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11d76:	370c      	adds	r7, #12
   11d78:	46bd      	mov	sp, r7
   11d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d7e:	4770      	bx	lr

00011d80 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11d80:	b580      	push	{r7, lr}
   11d82:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11d84:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d8c:	881b      	ldrh	r3, [r3, #0]
   11d8e:	b29b      	uxth	r3, r3
   11d90:	425b      	negs	r3, r3
   11d92:	b29b      	uxth	r3, r3
   11d94:	b29a      	uxth	r2, r3
   11d96:	f240 5340 	movw	r3, #1344	; 0x540
   11d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d9e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11da0:	f240 5340 	movw	r3, #1344	; 0x540
   11da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11da8:	881b      	ldrh	r3, [r3, #0]
   11daa:	b21b      	sxth	r3, r3
   11dac:	4618      	mov	r0, r3
   11dae:	f005 fe1d 	bl	179ec <__aeabi_i2d>
   11db2:	4602      	mov	r2, r0
   11db4:	460b      	mov	r3, r1
   11db6:	f04f 0000 	mov.w	r0, #0
   11dba:	f04f 0100 	mov.w	r1, #0
   11dbe:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11dc2:	f005 ffa3 	bl	17d0c <__aeabi_ddiv>
   11dc6:	4602      	mov	r2, r0
   11dc8:	460b      	mov	r3, r1
   11dca:	4610      	mov	r0, r2
   11dcc:	4619      	mov	r1, r3
   11dce:	f006 f955 	bl	1807c <__aeabi_d2f>
   11dd2:	4602      	mov	r2, r0
   11dd4:	f240 5348 	movw	r3, #1352	; 0x548
   11dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ddc:	601a      	str	r2, [r3, #0]
}
   11dde:	bd80      	pop	{r7, pc}

00011de0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11de0:	b590      	push	{r4, r7, lr}
   11de2:	b083      	sub	sp, #12
   11de4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11de6:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dee:	681a      	ldr	r2, [r3, #0]
   11df0:	f24c 6344 	movw	r3, #50756	; 0xc644
   11df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11df8:	681b      	ldr	r3, [r3, #0]
   11dfa:	4610      	mov	r0, r2
   11dfc:	4619      	mov	r1, r3
   11dfe:	f006 f991 	bl	18124 <__aeabi_fsub>
   11e02:	4603      	mov	r3, r0
   11e04:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11e06:	f240 534c 	movw	r3, #1356	; 0x54c
   11e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e0e:	681b      	ldr	r3, [r3, #0]
   11e10:	4618      	mov	r0, r3
   11e12:	6879      	ldr	r1, [r7, #4]
   11e14:	f006 fa90 	bl	18338 <__aeabi_fmul>
   11e18:	4603      	mov	r3, r0
   11e1a:	4618      	mov	r0, r3
   11e1c:	f04f 0100 	mov.w	r1, #0
   11e20:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11e24:	f006 fc26 	bl	18674 <__aeabi_fcmplt>
   11e28:	4603      	mov	r3, r0
   11e2a:	2b00      	cmp	r3, #0
   11e2c:	d002      	beq.n	11e34 <roll_pitch_pid_run+0x54>
   11e2e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11e32:	e026      	b.n	11e82 <roll_pitch_pid_run+0xa2>
   11e34:	f240 534c 	movw	r3, #1356	; 0x54c
   11e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e3c:	681b      	ldr	r3, [r3, #0]
   11e3e:	4618      	mov	r0, r3
   11e40:	6879      	ldr	r1, [r7, #4]
   11e42:	f006 fa79 	bl	18338 <__aeabi_fmul>
   11e46:	4603      	mov	r3, r0
   11e48:	4618      	mov	r0, r3
   11e4a:	f04f 0100 	mov.w	r1, #0
   11e4e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e52:	f006 fc2d 	bl	186b0 <__aeabi_fcmpgt>
   11e56:	4603      	mov	r3, r0
   11e58:	2b00      	cmp	r3, #0
   11e5a:	d002      	beq.n	11e62 <roll_pitch_pid_run+0x82>
   11e5c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11e60:	e00e      	b.n	11e80 <roll_pitch_pid_run+0xa0>
   11e62:	f240 534c 	movw	r3, #1356	; 0x54c
   11e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e6a:	681b      	ldr	r3, [r3, #0]
   11e6c:	4618      	mov	r0, r3
   11e6e:	6879      	ldr	r1, [r7, #4]
   11e70:	f006 fa62 	bl	18338 <__aeabi_fmul>
   11e74:	4603      	mov	r3, r0
   11e76:	4618      	mov	r0, r3
   11e78:	f006 fc24 	bl	186c4 <__aeabi_f2iz>
   11e7c:	4603      	mov	r3, r0
   11e7e:	b29b      	uxth	r3, r3
   11e80:	b29a      	uxth	r2, r3
   11e82:	f24c 634e 	movw	r3, #50766	; 0xc64e
   11e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e8a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11e8c:	f24c 6354 	movw	r3, #50772	; 0xc654
   11e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e94:	681b      	ldr	r3, [r3, #0]
   11e96:	4618      	mov	r0, r3
   11e98:	f04f 0100 	mov.w	r1, #0
   11e9c:	f006 fbea 	bl	18674 <__aeabi_fcmplt>
   11ea0:	4603      	mov	r3, r0
   11ea2:	2b00      	cmp	r3, #0
   11ea4:	d006      	beq.n	11eb4 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11ea6:	f24c 6354 	movw	r3, #50772	; 0xc654
   11eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eae:	f04f 0200 	mov.w	r2, #0
   11eb2:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11eb4:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   11eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ebc:	681a      	ldr	r2, [r3, #0]
   11ebe:	f24c 6348 	movw	r3, #50760	; 0xc648
   11ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ec6:	681b      	ldr	r3, [r3, #0]
   11ec8:	4610      	mov	r0, r2
   11eca:	4619      	mov	r1, r3
   11ecc:	f006 f92a 	bl	18124 <__aeabi_fsub>
   11ed0:	4603      	mov	r3, r0
   11ed2:	461c      	mov	r4, r3
   11ed4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11edc:	681b      	ldr	r3, [r3, #0]
   11ede:	4618      	mov	r0, r3
   11ee0:	f04f 0100 	mov.w	r1, #0
   11ee4:	f006 fbc6 	bl	18674 <__aeabi_fcmplt>
   11ee8:	4603      	mov	r3, r0
   11eea:	2b00      	cmp	r3, #0
   11eec:	d007      	beq.n	11efe <roll_pitch_pid_run+0x11e>
   11eee:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ef6:	681b      	ldr	r3, [r3, #0]
   11ef8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11efc:	e004      	b.n	11f08 <roll_pitch_pid_run+0x128>
   11efe:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f06:	681a      	ldr	r2, [r3, #0]
   11f08:	f24c 6354 	movw	r3, #50772	; 0xc654
   11f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f10:	681b      	ldr	r3, [r3, #0]
   11f12:	4610      	mov	r0, r2
   11f14:	4619      	mov	r1, r3
   11f16:	f006 fa0f 	bl	18338 <__aeabi_fmul>
   11f1a:	4603      	mov	r3, r0
   11f1c:	4620      	mov	r0, r4
   11f1e:	4619      	mov	r1, r3
   11f20:	f006 f900 	bl	18124 <__aeabi_fsub>
   11f24:	4603      	mov	r3, r0
   11f26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11f2a:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11f2c:	f240 5350 	movw	r3, #1360	; 0x550
   11f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f34:	681b      	ldr	r3, [r3, #0]
   11f36:	4618      	mov	r0, r3
   11f38:	6879      	ldr	r1, [r7, #4]
   11f3a:	f006 f9fd 	bl	18338 <__aeabi_fmul>
   11f3e:	4603      	mov	r3, r0
   11f40:	4618      	mov	r0, r3
   11f42:	f04f 0100 	mov.w	r1, #0
   11f46:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11f4a:	f006 fb93 	bl	18674 <__aeabi_fcmplt>
   11f4e:	4603      	mov	r3, r0
   11f50:	2b00      	cmp	r3, #0
   11f52:	d002      	beq.n	11f5a <roll_pitch_pid_run+0x17a>
   11f54:	f64d 2280 	movw	r2, #55936	; 0xda80
   11f58:	e026      	b.n	11fa8 <roll_pitch_pid_run+0x1c8>
   11f5a:	f240 5350 	movw	r3, #1360	; 0x550
   11f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f62:	681b      	ldr	r3, [r3, #0]
   11f64:	4618      	mov	r0, r3
   11f66:	6879      	ldr	r1, [r7, #4]
   11f68:	f006 f9e6 	bl	18338 <__aeabi_fmul>
   11f6c:	4603      	mov	r3, r0
   11f6e:	4618      	mov	r0, r3
   11f70:	f04f 0100 	mov.w	r1, #0
   11f74:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f78:	f006 fb9a 	bl	186b0 <__aeabi_fcmpgt>
   11f7c:	4603      	mov	r3, r0
   11f7e:	2b00      	cmp	r3, #0
   11f80:	d002      	beq.n	11f88 <roll_pitch_pid_run+0x1a8>
   11f82:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11f86:	e00e      	b.n	11fa6 <roll_pitch_pid_run+0x1c6>
   11f88:	f240 5350 	movw	r3, #1360	; 0x550
   11f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f90:	681b      	ldr	r3, [r3, #0]
   11f92:	4618      	mov	r0, r3
   11f94:	6879      	ldr	r1, [r7, #4]
   11f96:	f006 f9cf 	bl	18338 <__aeabi_fmul>
   11f9a:	4603      	mov	r3, r0
   11f9c:	4618      	mov	r0, r3
   11f9e:	f006 fb91 	bl	186c4 <__aeabi_f2iz>
   11fa2:	4603      	mov	r3, r0
   11fa4:	b29b      	uxth	r3, r3
   11fa6:	b29a      	uxth	r2, r3
   11fa8:	f24c 6350 	movw	r3, #50768	; 0xc650
   11fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fb0:	801a      	strh	r2, [r3, #0]
}
   11fb2:	370c      	adds	r7, #12
   11fb4:	46bd      	mov	sp, r7
   11fb6:	bd90      	pop	{r4, r7, pc}

00011fb8 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11fb8:	b580      	push	{r7, lr}
   11fba:	b082      	sub	sp, #8
   11fbc:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11fbe:	f64c 1308 	movw	r3, #51464	; 0xc908
   11fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fc6:	681a      	ldr	r2, [r3, #0]
   11fc8:	f24c 635c 	movw	r3, #50780	; 0xc65c
   11fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fd0:	681b      	ldr	r3, [r3, #0]
   11fd2:	4610      	mov	r0, r2
   11fd4:	4619      	mov	r1, r3
   11fd6:	f006 f8a5 	bl	18124 <__aeabi_fsub>
   11fda:	4603      	mov	r3, r0
   11fdc:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11fde:	e013      	b.n	12008 <course_pid_run+0x50>
   11fe0:	6878      	ldr	r0, [r7, #4]
   11fe2:	f005 fd15 	bl	17a10 <__aeabi_f2d>
   11fe6:	4602      	mov	r2, r0
   11fe8:	460b      	mov	r3, r1
   11fea:	4610      	mov	r0, r2
   11fec:	4619      	mov	r1, r3
   11fee:	a348      	add	r3, pc, #288	; (adr r3, 12110 <course_pid_run+0x158>)
   11ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ff4:	f005 fbac 	bl	17750 <__aeabi_dsub>
   11ff8:	4602      	mov	r2, r0
   11ffa:	460b      	mov	r3, r1
   11ffc:	4610      	mov	r0, r2
   11ffe:	4619      	mov	r1, r3
   12000:	f006 f83c 	bl	1807c <__aeabi_d2f>
   12004:	4603      	mov	r3, r0
   12006:	607b      	str	r3, [r7, #4]
   12008:	6878      	ldr	r0, [r7, #4]
   1200a:	f005 fd01 	bl	17a10 <__aeabi_f2d>
   1200e:	4602      	mov	r2, r0
   12010:	460b      	mov	r3, r1
   12012:	4610      	mov	r0, r2
   12014:	4619      	mov	r1, r3
   12016:	a340      	add	r3, pc, #256	; (adr r3, 12118 <course_pid_run+0x160>)
   12018:	e9d3 2300 	ldrd	r2, r3, [r3]
   1201c:	f005 ffdc 	bl	17fd8 <__aeabi_dcmpgt>
   12020:	4603      	mov	r3, r0
   12022:	2b00      	cmp	r3, #0
   12024:	d1dc      	bne.n	11fe0 <course_pid_run+0x28>
   12026:	e013      	b.n	12050 <course_pid_run+0x98>
   12028:	6878      	ldr	r0, [r7, #4]
   1202a:	f005 fcf1 	bl	17a10 <__aeabi_f2d>
   1202e:	4602      	mov	r2, r0
   12030:	460b      	mov	r3, r1
   12032:	4610      	mov	r0, r2
   12034:	4619      	mov	r1, r3
   12036:	a336      	add	r3, pc, #216	; (adr r3, 12110 <course_pid_run+0x158>)
   12038:	e9d3 2300 	ldrd	r2, r3, [r3]
   1203c:	f005 fb8a 	bl	17754 <__adddf3>
   12040:	4602      	mov	r2, r0
   12042:	460b      	mov	r3, r1
   12044:	4610      	mov	r0, r2
   12046:	4619      	mov	r1, r3
   12048:	f006 f818 	bl	1807c <__aeabi_d2f>
   1204c:	4603      	mov	r3, r0
   1204e:	607b      	str	r3, [r7, #4]
   12050:	6878      	ldr	r0, [r7, #4]
   12052:	f005 fcdd 	bl	17a10 <__aeabi_f2d>
   12056:	4602      	mov	r2, r0
   12058:	460b      	mov	r3, r1
   1205a:	4610      	mov	r0, r2
   1205c:	4619      	mov	r1, r3
   1205e:	a330      	add	r3, pc, #192	; (adr r3, 12120 <course_pid_run+0x168>)
   12060:	e9d3 2300 	ldrd	r2, r3, [r3]
   12064:	f005 ff9a 	bl	17f9c <__aeabi_dcmplt>
   12068:	4603      	mov	r3, r0
   1206a:	2b00      	cmp	r3, #0
   1206c:	d1dc      	bne.n	12028 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   1206e:	f240 5358 	movw	r3, #1368	; 0x558
   12072:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12076:	681b      	ldr	r3, [r3, #0]
   12078:	4618      	mov	r0, r3
   1207a:	6879      	ldr	r1, [r7, #4]
   1207c:	f006 f95c 	bl	18338 <__aeabi_fmul>
   12080:	4603      	mov	r3, r0
   12082:	461a      	mov	r2, r3
   12084:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1208c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   1208e:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12092:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12096:	681a      	ldr	r2, [r3, #0]
   12098:	f240 535c 	movw	r3, #1372	; 0x55c
   1209c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a0:	681b      	ldr	r3, [r3, #0]
   120a2:	4610      	mov	r0, r2
   120a4:	4619      	mov	r1, r3
   120a6:	f006 fb03 	bl	186b0 <__aeabi_fcmpgt>
   120aa:	4603      	mov	r3, r0
   120ac:	2b00      	cmp	r3, #0
   120ae:	d00a      	beq.n	120c6 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   120b0:	f240 535c 	movw	r3, #1372	; 0x55c
   120b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120b8:	681a      	ldr	r2, [r3, #0]
   120ba:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   120be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120c2:	601a      	str	r2, [r3, #0]
   120c4:	e01e      	b.n	12104 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   120c6:	f240 535c 	movw	r3, #1372	; 0x55c
   120ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120ce:	681b      	ldr	r3, [r3, #0]
   120d0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   120d4:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   120d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120dc:	681b      	ldr	r3, [r3, #0]
   120de:	4610      	mov	r0, r2
   120e0:	4619      	mov	r1, r3
   120e2:	f006 fae5 	bl	186b0 <__aeabi_fcmpgt>
   120e6:	4603      	mov	r3, r0
   120e8:	2b00      	cmp	r3, #0
   120ea:	d00b      	beq.n	12104 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   120ec:	f240 535c 	movw	r3, #1372	; 0x55c
   120f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120f4:	681b      	ldr	r3, [r3, #0]
   120f6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   120fa:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   120fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12102:	601a      	str	r2, [r3, #0]
}
   12104:	3708      	adds	r7, #8
   12106:	46bd      	mov	sp, r7
   12108:	bd80      	pop	{r7, pc}
   1210a:	bf00      	nop
   1210c:	f3af 8000 	nop.w
   12110:	54442d18 	.word	0x54442d18
   12114:	401921fb 	.word	0x401921fb
   12118:	54442d18 	.word	0x54442d18
   1211c:	400921fb 	.word	0x400921fb
   12120:	54442d18 	.word	0x54442d18
   12124:	c00921fb 	.word	0xc00921fb

00012128 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   12128:	b5b0      	push	{r4, r5, r7, lr}
   1212a:	b082      	sub	sp, #8
   1212c:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   1212e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   12132:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12136:	681a      	ldr	r2, [r3, #0]
   12138:	f24c 6360 	movw	r3, #50784	; 0xc660
   1213c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12140:	681b      	ldr	r3, [r3, #0]
   12142:	4610      	mov	r0, r2
   12144:	4619      	mov	r1, r3
   12146:	f005 ffed 	bl	18124 <__aeabi_fsub>
   1214a:	4603      	mov	r3, r0
   1214c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   1214e:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12156:	781b      	ldrb	r3, [r3, #0]
   12158:	2b00      	cmp	r3, #0
   1215a:	f000 80a8 	beq.w	122ae <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   1215e:	f24c 6398 	movw	r3, #50840	; 0xc698
   12162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12166:	881b      	ldrh	r3, [r3, #0]
   12168:	b29a      	uxth	r2, r3
   1216a:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1216e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12172:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   12174:	f240 5364 	movw	r3, #1380	; 0x564
   12178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1217c:	681a      	ldr	r2, [r3, #0]
   1217e:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12182:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12186:	681b      	ldr	r3, [r3, #0]
   12188:	4610      	mov	r0, r2
   1218a:	4619      	mov	r1, r3
   1218c:	f006 f8d4 	bl	18338 <__aeabi_fmul>
   12190:	4603      	mov	r3, r0
   12192:	4618      	mov	r0, r3
   12194:	6879      	ldr	r1, [r7, #4]
   12196:	f005 ffc7 	bl	18128 <__addsf3>
   1219a:	4603      	mov	r3, r0
   1219c:	461a      	mov	r2, r3
   1219e:	f240 5360 	movw	r3, #1376	; 0x560
   121a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a6:	681b      	ldr	r3, [r3, #0]
   121a8:	4610      	mov	r0, r2
   121aa:	4619      	mov	r1, r3
   121ac:	f006 f8c4 	bl	18338 <__aeabi_fmul>
   121b0:	4603      	mov	r3, r0
   121b2:	461a      	mov	r2, r3
   121b4:	f24c 6348 	movw	r3, #50760	; 0xc648
   121b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121bc:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   121be:	f24c 6348 	movw	r3, #50760	; 0xc648
   121c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121c6:	681a      	ldr	r2, [r3, #0]
   121c8:	f240 5368 	movw	r3, #1384	; 0x568
   121cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121d0:	681b      	ldr	r3, [r3, #0]
   121d2:	4610      	mov	r0, r2
   121d4:	4619      	mov	r1, r3
   121d6:	f006 fa6b 	bl	186b0 <__aeabi_fcmpgt>
   121da:	4603      	mov	r3, r0
   121dc:	2b00      	cmp	r3, #0
   121de:	d009      	beq.n	121f4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   121e0:	f240 5368 	movw	r3, #1384	; 0x568
   121e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121e8:	681a      	ldr	r2, [r3, #0]
   121ea:	f24c 6348 	movw	r3, #50760	; 0xc648
   121ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121f2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   121f4:	f24c 6348 	movw	r3, #50760	; 0xc648
   121f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121fc:	681a      	ldr	r2, [r3, #0]
   121fe:	f240 536c 	movw	r3, #1388	; 0x56c
   12202:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12206:	681b      	ldr	r3, [r3, #0]
   12208:	4610      	mov	r0, r2
   1220a:	4619      	mov	r1, r3
   1220c:	f006 fa32 	bl	18674 <__aeabi_fcmplt>
   12210:	4603      	mov	r3, r0
   12212:	2b00      	cmp	r3, #0
   12214:	d009      	beq.n	1222a <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   12216:	f240 536c 	movw	r3, #1388	; 0x56c
   1221a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1221e:	681a      	ldr	r2, [r3, #0]
   12220:	f24c 6348 	movw	r3, #50760	; 0xc648
   12224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12228:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   1222a:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1222e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12232:	681b      	ldr	r3, [r3, #0]
   12234:	4618      	mov	r0, r3
   12236:	6879      	ldr	r1, [r7, #4]
   12238:	f005 ff76 	bl	18128 <__addsf3>
   1223c:	4603      	mov	r3, r0
   1223e:	461a      	mov	r2, r3
   12240:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12244:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12248:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   1224a:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1224e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12252:	681b      	ldr	r3, [r3, #0]
   12254:	4618      	mov	r0, r3
   12256:	f04f 0100 	mov.w	r1, #0
   1225a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1225e:	f006 fa27 	bl	186b0 <__aeabi_fcmpgt>
   12262:	4603      	mov	r3, r0
   12264:	2b00      	cmp	r3, #0
   12266:	d008      	beq.n	1227a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12268:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1226c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12270:	f04f 0200 	mov.w	r2, #0
   12274:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12278:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   1227a:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1227e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12282:	681b      	ldr	r3, [r3, #0]
   12284:	4618      	mov	r0, r3
   12286:	f04f 0100 	mov.w	r1, #0
   1228a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1228e:	f006 f9f1 	bl	18674 <__aeabi_fcmplt>
   12292:	4603      	mov	r3, r0
   12294:	2b00      	cmp	r3, #0
   12296:	d100      	bne.n	1229a <climb_pid_run+0x172>
   12298:	e109      	b.n	124ae <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   1229a:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1229e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122a2:	f04f 0200 	mov.w	r2, #0
   122a6:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   122aa:	601a      	str	r2, [r3, #0]
   122ac:	e0ff      	b.n	124ae <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   122ae:	f24c 6360 	movw	r3, #50784	; 0xc660
   122b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122b6:	681b      	ldr	r3, [r3, #0]
   122b8:	4618      	mov	r0, r3
   122ba:	f04f 0100 	mov.w	r1, #0
   122be:	f006 f9f7 	bl	186b0 <__aeabi_fcmpgt>
   122c2:	4603      	mov	r3, r0
   122c4:	2b00      	cmp	r3, #0
   122c6:	d010      	beq.n	122ea <climb_pid_run+0x1c2>
   122c8:	f24c 6360 	movw	r3, #50784	; 0xc660
   122cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122d0:	681a      	ldr	r2, [r3, #0]
   122d2:	f240 5354 	movw	r3, #1364	; 0x554
   122d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122da:	681b      	ldr	r3, [r3, #0]
   122dc:	4610      	mov	r0, r2
   122de:	4619      	mov	r1, r3
   122e0:	f006 f82a 	bl	18338 <__aeabi_fmul>
   122e4:	4603      	mov	r3, r0
   122e6:	461a      	mov	r2, r3
   122e8:	e001      	b.n	122ee <climb_pid_run+0x1c6>
   122ea:	f04f 0200 	mov.w	r2, #0
   122ee:	f24c 6358 	movw	r3, #50776	; 0xc658
   122f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122f6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   122f8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   122fc:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   12300:	f24c 6368 	movw	r3, #50792	; 0xc668
   12304:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12308:	681b      	ldr	r3, [r3, #0]
   1230a:	4610      	mov	r0, r2
   1230c:	4619      	mov	r1, r3
   1230e:	f006 f813 	bl	18338 <__aeabi_fmul>
   12312:	4603      	mov	r3, r0
   12314:	4618      	mov	r0, r3
   12316:	6879      	ldr	r1, [r7, #4]
   12318:	f005 ff06 	bl	18128 <__addsf3>
   1231c:	4603      	mov	r3, r0
   1231e:	461a      	mov	r2, r3
   12320:	f24c 238f 	movw	r3, #49807	; 0xc28f
   12324:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12328:	4610      	mov	r0, r2
   1232a:	4619      	mov	r1, r3
   1232c:	f006 f804 	bl	18338 <__aeabi_fmul>
   12330:	4603      	mov	r3, r0
   12332:	4618      	mov	r0, r3
   12334:	f005 fb6c 	bl	17a10 <__aeabi_f2d>
   12338:	4602      	mov	r2, r0
   1233a:	460b      	mov	r3, r1
   1233c:	4610      	mov	r0, r2
   1233e:	4619      	mov	r1, r3
   12340:	a35d      	add	r3, pc, #372	; (adr r3, 124b8 <climb_pid_run+0x390>)
   12342:	e9d3 2300 	ldrd	r2, r3, [r3]
   12346:	f005 fa05 	bl	17754 <__adddf3>
   1234a:	4602      	mov	r2, r0
   1234c:	460b      	mov	r3, r1
   1234e:	4614      	mov	r4, r2
   12350:	461d      	mov	r5, r3
   12352:	f24c 6360 	movw	r3, #50784	; 0xc660
   12356:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1235a:	681b      	ldr	r3, [r3, #0]
   1235c:	4618      	mov	r0, r3
   1235e:	f005 fb57 	bl	17a10 <__aeabi_f2d>
   12362:	4602      	mov	r2, r0
   12364:	460b      	mov	r3, r1
   12366:	4610      	mov	r0, r2
   12368:	4619      	mov	r1, r3
   1236a:	a355      	add	r3, pc, #340	; (adr r3, 124c0 <climb_pid_run+0x398>)
   1236c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12370:	f005 fba2 	bl	17ab8 <__aeabi_dmul>
   12374:	4602      	mov	r2, r0
   12376:	460b      	mov	r3, r1
   12378:	4620      	mov	r0, r4
   1237a:	4629      	mov	r1, r5
   1237c:	f005 f9ea 	bl	17754 <__adddf3>
   12380:	4602      	mov	r2, r0
   12382:	460b      	mov	r3, r1
   12384:	4610      	mov	r0, r2
   12386:	4619      	mov	r1, r3
   12388:	f005 fe78 	bl	1807c <__aeabi_d2f>
   1238c:	4603      	mov	r3, r0
   1238e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12390:	f24c 6368 	movw	r3, #50792	; 0xc668
   12394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12398:	681b      	ldr	r3, [r3, #0]
   1239a:	4618      	mov	r0, r3
   1239c:	6879      	ldr	r1, [r7, #4]
   1239e:	f005 fec3 	bl	18128 <__addsf3>
   123a2:	4603      	mov	r3, r0
   123a4:	461a      	mov	r2, r3
   123a6:	f24c 6368 	movw	r3, #50792	; 0xc668
   123aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123ae:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   123b0:	f24c 6368 	movw	r3, #50792	; 0xc668
   123b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123b8:	681b      	ldr	r3, [r3, #0]
   123ba:	4618      	mov	r0, r3
   123bc:	f04f 0100 	mov.w	r1, #0
   123c0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   123c4:	f006 f974 	bl	186b0 <__aeabi_fcmpgt>
   123c8:	4603      	mov	r3, r0
   123ca:	2b00      	cmp	r3, #0
   123cc:	d008      	beq.n	123e0 <climb_pid_run+0x2b8>
   123ce:	f24c 6368 	movw	r3, #50792	; 0xc668
   123d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123d6:	f04f 0200 	mov.w	r2, #0
   123da:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   123de:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   123e0:	f24c 6368 	movw	r3, #50792	; 0xc668
   123e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123e8:	681b      	ldr	r3, [r3, #0]
   123ea:	4618      	mov	r0, r3
   123ec:	f04f 0100 	mov.w	r1, #0
   123f0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   123f4:	f006 f93e 	bl	18674 <__aeabi_fcmplt>
   123f8:	4603      	mov	r3, r0
   123fa:	2b00      	cmp	r3, #0
   123fc:	d008      	beq.n	12410 <climb_pid_run+0x2e8>
   123fe:	f24c 6368 	movw	r3, #50792	; 0xc668
   12402:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12406:	f04f 0200 	mov.w	r2, #0
   1240a:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1240e:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   12410:	6838      	ldr	r0, [r7, #0]
   12412:	f04f 0100 	mov.w	r1, #0
   12416:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1241a:	f005 ff8d 	bl	18338 <__aeabi_fmul>
   1241e:	4603      	mov	r3, r0
   12420:	4618      	mov	r0, r3
   12422:	f04f 0100 	mov.w	r1, #0
   12426:	f006 f925 	bl	18674 <__aeabi_fcmplt>
   1242a:	4603      	mov	r3, r0
   1242c:	2b00      	cmp	r3, #0
   1242e:	d001      	beq.n	12434 <climb_pid_run+0x30c>
   12430:	2200      	movs	r2, #0
   12432:	e022      	b.n	1247a <climb_pid_run+0x352>
   12434:	6838      	ldr	r0, [r7, #0]
   12436:	f04f 0100 	mov.w	r1, #0
   1243a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1243e:	f005 ff7b 	bl	18338 <__aeabi_fmul>
   12442:	4603      	mov	r3, r0
   12444:	4618      	mov	r0, r3
   12446:	f04f 0100 	mov.w	r1, #0
   1244a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1244e:	f006 f92f 	bl	186b0 <__aeabi_fcmpgt>
   12452:	4603      	mov	r3, r0
   12454:	2b00      	cmp	r3, #0
   12456:	d002      	beq.n	1245e <climb_pid_run+0x336>
   12458:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1245c:	e00c      	b.n	12478 <climb_pid_run+0x350>
   1245e:	6838      	ldr	r0, [r7, #0]
   12460:	f04f 0100 	mov.w	r1, #0
   12464:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12468:	f005 ff66 	bl	18338 <__aeabi_fmul>
   1246c:	4603      	mov	r3, r0
   1246e:	4618      	mov	r0, r3
   12470:	f006 f928 	bl	186c4 <__aeabi_f2iz>
   12474:	4603      	mov	r3, r0
   12476:	b29b      	uxth	r3, r3
   12478:	b29a      	uxth	r2, r3
   1247a:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1247e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12482:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   12484:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12488:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1248c:	681a      	ldr	r2, [r3, #0]
   1248e:	f24c 6358 	movw	r3, #50776	; 0xc658
   12492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12496:	681b      	ldr	r3, [r3, #0]
   12498:	4610      	mov	r0, r2
   1249a:	4619      	mov	r1, r3
   1249c:	f005 fe44 	bl	18128 <__addsf3>
   124a0:	4603      	mov	r3, r0
   124a2:	461a      	mov	r2, r3
   124a4:	f24c 6348 	movw	r3, #50760	; 0xc648
   124a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ac:	601a      	str	r2, [r3, #0]
  }
}
   124ae:	3708      	adds	r7, #8
   124b0:	46bd      	mov	sp, r7
   124b2:	bdb0      	pop	{r4, r5, r7, pc}
   124b4:	f3af 8000 	nop.w
   124b8:	3d70a3d7 	.word	0x3d70a3d7
   124bc:	3fd3d70a 	.word	0x3fd3d70a
   124c0:	9999999a 	.word	0x9999999a
   124c4:	3fc99999 	.word	0x3fc99999

000124c8 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   124c8:	b580      	push	{r7, lr}
   124ca:	b082      	sub	sp, #8
   124cc:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   124ce:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   124d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124d6:	681a      	ldr	r2, [r3, #0]
   124d8:	f240 5374 	movw	r3, #1396	; 0x574
   124dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124e0:	681b      	ldr	r3, [r3, #0]
   124e2:	4610      	mov	r0, r2
   124e4:	4619      	mov	r1, r3
   124e6:	f005 fe1d 	bl	18124 <__aeabi_fsub>
   124ea:	4603      	mov	r3, r0
   124ec:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   124ee:	f240 5370 	movw	r3, #1392	; 0x570
   124f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124f6:	681b      	ldr	r3, [r3, #0]
   124f8:	4618      	mov	r0, r3
   124fa:	6879      	ldr	r1, [r7, #4]
   124fc:	f005 ff1c 	bl	18338 <__aeabi_fmul>
   12500:	4603      	mov	r3, r0
   12502:	461a      	mov	r2, r3
   12504:	f24c 6364 	movw	r3, #50788	; 0xc664
   12508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1250c:	681b      	ldr	r3, [r3, #0]
   1250e:	4610      	mov	r0, r2
   12510:	4619      	mov	r1, r3
   12512:	f005 fe09 	bl	18128 <__addsf3>
   12516:	4603      	mov	r3, r0
   12518:	461a      	mov	r2, r3
   1251a:	f24c 6360 	movw	r3, #50784	; 0xc660
   1251e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12522:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   12524:	f24c 6360 	movw	r3, #50784	; 0xc660
   12528:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1252c:	681b      	ldr	r3, [r3, #0]
   1252e:	4618      	mov	r0, r3
   12530:	f04f 0100 	mov.w	r1, #0
   12534:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12538:	f006 f89c 	bl	18674 <__aeabi_fcmplt>
   1253c:	4603      	mov	r3, r0
   1253e:	2b00      	cmp	r3, #0
   12540:	d008      	beq.n	12554 <altitude_pid_run+0x8c>
   12542:	f24c 6360 	movw	r3, #50784	; 0xc660
   12546:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1254a:	f04f 0200 	mov.w	r2, #0
   1254e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   12552:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   12554:	f24c 6360 	movw	r3, #50784	; 0xc660
   12558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1255c:	681b      	ldr	r3, [r3, #0]
   1255e:	4618      	mov	r0, r3
   12560:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12564:	f006 f8a4 	bl	186b0 <__aeabi_fcmpgt>
   12568:	4603      	mov	r3, r0
   1256a:	2b00      	cmp	r3, #0
   1256c:	d006      	beq.n	1257c <altitude_pid_run+0xb4>
   1256e:	f24c 6360 	movw	r3, #50784	; 0xc660
   12572:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12576:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1257a:	601a      	str	r2, [r3, #0]
}
   1257c:	3708      	adds	r7, #8
   1257e:	46bd      	mov	sp, r7
   12580:	bd80      	pop	{r7, pc}
   12582:	bf00      	nop
   12584:	f3af 8000 	nop.w

00012588 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12588:	b5f0      	push	{r4, r5, r6, r7, lr}
   1258a:	b08b      	sub	sp, #44	; 0x2c
   1258c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   1258e:	f24c 6371 	movw	r3, #50801	; 0xc671
   12592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12596:	781b      	ldrb	r3, [r3, #0]
   12598:	2b00      	cmp	r3, #0
   1259a:	f040 8169 	bne.w	12870 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   1259e:	f24c 6370 	movw	r3, #50800	; 0xc670
   125a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125a6:	781b      	ldrb	r3, [r3, #0]
   125a8:	2b00      	cmp	r3, #0
   125aa:	d13c      	bne.n	12626 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   125ac:	f24c 6370 	movw	r3, #50800	; 0xc670
   125b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125b4:	2200      	movs	r2, #0
   125b6:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   125b8:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   125bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125c0:	881b      	ldrh	r3, [r3, #0]
   125c2:	2b00      	cmp	r3, #0
   125c4:	d000      	beq.n	125c8 <auto_nav+0x40>
   125c6:	e03d      	b.n	12644 <auto_nav+0xbc>
	else NextStage(); 
   125c8:	f24c 6370 	movw	r3, #50800	; 0xc670
   125cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125d0:	781b      	ldrb	r3, [r3, #0]
   125d2:	3301      	adds	r3, #1
   125d4:	b2da      	uxtb	r2, r3
   125d6:	f24c 6370 	movw	r3, #50800	; 0xc670
   125da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125de:	701a      	strb	r2, [r3, #0]
   125e0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   125e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125e8:	681a      	ldr	r2, [r3, #0]
   125ea:	f24c 6374 	movw	r3, #50804	; 0xc674
   125ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125f2:	601a      	str	r2, [r3, #0]
   125f4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   125f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125fc:	681a      	ldr	r2, [r3, #0]
   125fe:	f24c 6378 	movw	r3, #50808	; 0xc678
   12602:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12606:	601a      	str	r2, [r3, #0]
   12608:	f24c 6384 	movw	r3, #50820	; 0xc684
   1260c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12610:	2200      	movs	r2, #0
   12612:	801a      	strh	r2, [r3, #0]
   12614:	f24c 6388 	movw	r3, #50824	; 0xc688
   12618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1261c:	f04f 0200 	mov.w	r2, #0
   12620:	601a      	str	r2, [r3, #0]
   12622:	f002 b883 	b.w	1472c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12626:	f24c 6370 	movw	r3, #50800	; 0xc670
   1262a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1262e:	781b      	ldrb	r3, [r3, #0]
   12630:	2b01      	cmp	r3, #1
   12632:	d100      	bne.n	12636 <auto_nav+0xae>
    {   Goto(while_1)}
   12634:	e7ba      	b.n	125ac <auto_nav+0x24>
    else if (nav_stage == 2)
   12636:	f24c 6370 	movw	r3, #50800	; 0xc670
   1263a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1263e:	781b      	ldrb	r3, [r3, #0]
   12640:	2b02      	cmp	r3, #2
   12642:	d162      	bne.n	1270a <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   12644:	f24c 6370 	movw	r3, #50800	; 0xc670
   12648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1264c:	2202      	movs	r2, #2
   1264e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12650:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   12654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12658:	881b      	ldrh	r3, [r3, #0]
   1265a:	2b08      	cmp	r3, #8
   1265c:	d92e      	bls.n	126bc <auto_nav+0x134>
   1265e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12666:	781b      	ldrb	r3, [r3, #0]
   12668:	3301      	adds	r3, #1
   1266a:	b2da      	uxtb	r2, r3
   1266c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12674:	701a      	strb	r2, [r3, #0]
   12676:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1267a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1267e:	681a      	ldr	r2, [r3, #0]
   12680:	f24c 6374 	movw	r3, #50804	; 0xc674
   12684:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12688:	601a      	str	r2, [r3, #0]
   1268a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1268e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12692:	681a      	ldr	r2, [r3, #0]
   12694:	f24c 6378 	movw	r3, #50808	; 0xc678
   12698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1269c:	601a      	str	r2, [r3, #0]
   1269e:	f24c 6384 	movw	r3, #50820	; 0xc684
   126a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a6:	2200      	movs	r2, #0
   126a8:	801a      	strh	r2, [r3, #0]
   126aa:	f24c 6388 	movw	r3, #50824	; 0xc688
   126ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b2:	f04f 0200 	mov.w	r2, #0
   126b6:	601a      	str	r2, [r3, #0]
   126b8:	f002 b838 	b.w	1472c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   126bc:	f24c 635c 	movw	r3, #50780	; 0xc65c
   126c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c4:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   126c8:	f2c4 0296 	movt	r2, #16534	; 0x4096
   126cc:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   126ce:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   126d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d6:	2200      	movs	r2, #0
   126d8:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   126da:	f24c 639c 	movw	r3, #50844	; 0xc69c
   126de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126e2:	f649 129a 	movw	r2, #39322	; 0x999a
   126e6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   126ea:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   126ec:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   126f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126f4:	2201      	movs	r2, #1
   126f6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   126f8:	f24c 6398 	movw	r3, #50840	; 0xc698
   126fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12700:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   12704:	801a      	strh	r2, [r3, #0]
        }
        return;
   12706:	f002 b811 	b.w	1472c <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   1270a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1270e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12712:	781b      	ldrb	r3, [r3, #0]
   12714:	2b03      	cmp	r3, #3
   12716:	d168      	bne.n	127ea <auto_nav+0x262>
     {
	nav_stage = 3;	
   12718:	f24c 6370 	movw	r3, #50800	; 0xc670
   1271c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12720:	2203      	movs	r2, #3
   12722:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   12724:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   12728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1272c:	681b      	ldr	r3, [r3, #0]
   1272e:	4618      	mov	r0, r3
   12730:	f04f 0100 	mov.w	r1, #0
   12734:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12738:	f005 ffba 	bl	186b0 <__aeabi_fcmpgt>
   1273c:	4603      	mov	r3, r0
   1273e:	2b00      	cmp	r3, #0
   12740:	d02e      	beq.n	127a0 <auto_nav+0x218>
   12742:	f24c 6370 	movw	r3, #50800	; 0xc670
   12746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1274a:	781b      	ldrb	r3, [r3, #0]
   1274c:	3301      	adds	r3, #1
   1274e:	b2da      	uxtb	r2, r3
   12750:	f24c 6370 	movw	r3, #50800	; 0xc670
   12754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12758:	701a      	strb	r2, [r3, #0]
   1275a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1275e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12762:	681a      	ldr	r2, [r3, #0]
   12764:	f24c 6374 	movw	r3, #50804	; 0xc674
   12768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1276c:	601a      	str	r2, [r3, #0]
   1276e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12776:	681a      	ldr	r2, [r3, #0]
   12778:	f24c 6378 	movw	r3, #50808	; 0xc678
   1277c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12780:	601a      	str	r2, [r3, #0]
   12782:	f24c 6384 	movw	r3, #50820	; 0xc684
   12786:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1278a:	2200      	movs	r2, #0
   1278c:	801a      	strh	r2, [r3, #0]
   1278e:	f24c 6388 	movw	r3, #50824	; 0xc688
   12792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12796:	f04f 0200 	mov.w	r2, #0
   1279a:	601a      	str	r2, [r3, #0]
   1279c:	f001 bfc6 	b.w	1472c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   127a0:	f24c 635c 	movw	r3, #50780	; 0xc65c
   127a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a8:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   127ac:	f2c4 0296 	movt	r2, #16534	; 0x4096
   127b0:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   127b2:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   127b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ba:	2200      	movs	r2, #0
   127bc:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   127be:	f24c 639c 	movw	r3, #50844	; 0xc69c
   127c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c6:	f04f 0200 	mov.w	r2, #0
   127ca:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   127cc:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   127d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d4:	2202      	movs	r2, #2
   127d6:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   127d8:	f24c 6360 	movw	r3, #50784	; 0xc660
   127dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   127e4:	601a      	str	r2, [r3, #0]
        }
        return;
   127e6:	f001 bfa1 	b.w	1472c <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   127ea:	f24c 6370 	movw	r3, #50800	; 0xc670
   127ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f2:	781b      	ldrb	r3, [r3, #0]
   127f4:	2b04      	cmp	r3, #4
   127f6:	f041 8799 	bne.w	1472c <auto_nav+0x21a4>
        NextBlock()
   127fa:	f24c 6371 	movw	r3, #50801	; 0xc671
   127fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12802:	781b      	ldrb	r3, [r3, #0]
   12804:	3301      	adds	r3, #1
   12806:	b2da      	uxtb	r2, r3
   12808:	f24c 6371 	movw	r3, #50801	; 0xc671
   1280c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12810:	701a      	strb	r2, [r3, #0]
   12812:	f24c 6370 	movw	r3, #50800	; 0xc670
   12816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1281a:	2200      	movs	r2, #0
   1281c:	701a      	strb	r2, [r3, #0]
   1281e:	f24c 6386 	movw	r3, #50822	; 0xc686
   12822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12826:	2200      	movs	r2, #0
   12828:	801a      	strh	r2, [r3, #0]
   1282a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1282e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12832:	681a      	ldr	r2, [r3, #0]
   12834:	f24c 6374 	movw	r3, #50804	; 0xc674
   12838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1283c:	601a      	str	r2, [r3, #0]
   1283e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12846:	681a      	ldr	r2, [r3, #0]
   12848:	f24c 6378 	movw	r3, #50808	; 0xc678
   1284c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12850:	601a      	str	r2, [r3, #0]
   12852:	f24c 6384 	movw	r3, #50820	; 0xc684
   12856:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1285a:	2200      	movs	r2, #0
   1285c:	801a      	strh	r2, [r3, #0]
   1285e:	f24c 6388 	movw	r3, #50824	; 0xc688
   12862:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12866:	f04f 0200 	mov.w	r2, #0
   1286a:	601a      	str	r2, [r3, #0]
   1286c:	f001 bf5e 	b.w	1472c <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12870:	f24c 6371 	movw	r3, #50801	; 0xc671
   12874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12878:	781b      	ldrb	r3, [r3, #0]
   1287a:	2b01      	cmp	r3, #1
   1287c:	f040 81bc 	bne.w	12bf8 <auto_nav+0x670>
{
    nav_block = 1;
   12880:	f24c 6371 	movw	r3, #50801	; 0xc671
   12884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12888:	2201      	movs	r2, #1
   1288a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1288c:	f24c 3300 	movw	r3, #49920	; 0xc300
   12890:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12894:	781b      	ldrb	r3, [r3, #0]
   12896:	2b00      	cmp	r3, #0
   12898:	d007      	beq.n	128aa <auto_nav+0x322>
   1289a:	f24c 3300 	movw	r3, #49920	; 0xc300
   1289e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a2:	2200      	movs	r2, #0
   128a4:	701a      	strb	r2, [r3, #0]
   128a6:	2301      	movs	r3, #1
   128a8:	e000      	b.n	128ac <auto_nav+0x324>
   128aa:	2300      	movs	r3, #0
   128ac:	2b00      	cmp	r3, #0
   128ae:	d034      	beq.n	1291a <auto_nav+0x392>
	{ GotoBlock(2) }
   128b0:	f24c 6371 	movw	r3, #50801	; 0xc671
   128b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b8:	2202      	movs	r2, #2
   128ba:	701a      	strb	r2, [r3, #0]
   128bc:	f24c 6370 	movw	r3, #50800	; 0xc670
   128c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c4:	2200      	movs	r2, #0
   128c6:	701a      	strb	r2, [r3, #0]
   128c8:	f24c 6386 	movw	r3, #50822	; 0xc686
   128cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d0:	2200      	movs	r2, #0
   128d2:	801a      	strh	r2, [r3, #0]
   128d4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   128d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128dc:	681a      	ldr	r2, [r3, #0]
   128de:	f24c 6374 	movw	r3, #50804	; 0xc674
   128e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e6:	601a      	str	r2, [r3, #0]
   128e8:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   128ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f0:	681a      	ldr	r2, [r3, #0]
   128f2:	f24c 6378 	movw	r3, #50808	; 0xc678
   128f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128fa:	601a      	str	r2, [r3, #0]
   128fc:	f24c 6384 	movw	r3, #50820	; 0xc684
   12900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12904:	2200      	movs	r2, #0
   12906:	801a      	strh	r2, [r3, #0]
   12908:	f24c 6388 	movw	r3, #50824	; 0xc688
   1290c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12910:	f04f 0200 	mov.w	r2, #0
   12914:	601a      	str	r2, [r3, #0]
   12916:	f001 bf09 	b.w	1472c <auto_nav+0x21a4>
    if(nav_stage == 0)
   1291a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1291e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12922:	781b      	ldrb	r3, [r3, #0]
   12924:	2b00      	cmp	r3, #0
   12926:	d12e      	bne.n	12986 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12928:	f24c 6370 	movw	r3, #50800	; 0xc670
   1292c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12930:	781b      	ldrb	r3, [r3, #0]
   12932:	3301      	adds	r3, #1
   12934:	b2da      	uxtb	r2, r3
   12936:	f24c 6370 	movw	r3, #50800	; 0xc670
   1293a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1293e:	701a      	strb	r2, [r3, #0]
   12940:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12948:	681a      	ldr	r2, [r3, #0]
   1294a:	f24c 6374 	movw	r3, #50804	; 0xc674
   1294e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12952:	601a      	str	r2, [r3, #0]
   12954:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1295c:	681a      	ldr	r2, [r3, #0]
   1295e:	f24c 6378 	movw	r3, #50808	; 0xc678
   12962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12966:	601a      	str	r2, [r3, #0]
   12968:	f24c 6384 	movw	r3, #50820	; 0xc684
   1296c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12970:	2200      	movs	r2, #0
   12972:	801a      	strh	r2, [r3, #0]
   12974:	f24c 6388 	movw	r3, #50824	; 0xc688
   12978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1297c:	f04f 0200 	mov.w	r2, #0
   12980:	601a      	str	r2, [r3, #0]
   12982:	f001 bed3 	b.w	1472c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12986:	f24c 6370 	movw	r3, #50800	; 0xc670
   1298a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298e:	781b      	ldrb	r3, [r3, #0]
   12990:	2b01      	cmp	r3, #1
   12992:	d169      	bne.n	12a68 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12994:	f24c 6370 	movw	r3, #50800	; 0xc670
   12998:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1299c:	2201      	movs	r2, #1
   1299e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   129a0:	2001      	movs	r0, #1
   129a2:	f001 fed1 	bl	14748 <approaching>
   129a6:	4603      	mov	r3, r0
   129a8:	2b00      	cmp	r3, #0
   129aa:	d034      	beq.n	12a16 <auto_nav+0x48e>
   129ac:	f24c 637c 	movw	r3, #50812	; 0xc67c
   129b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b4:	2201      	movs	r2, #1
   129b6:	701a      	strb	r2, [r3, #0]
   129b8:	f24c 6370 	movw	r3, #50800	; 0xc670
   129bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c0:	781b      	ldrb	r3, [r3, #0]
   129c2:	3301      	adds	r3, #1
   129c4:	b2da      	uxtb	r2, r3
   129c6:	f24c 6370 	movw	r3, #50800	; 0xc670
   129ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ce:	701a      	strb	r2, [r3, #0]
   129d0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   129d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d8:	681a      	ldr	r2, [r3, #0]
   129da:	f24c 6374 	movw	r3, #50804	; 0xc674
   129de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e2:	601a      	str	r2, [r3, #0]
   129e4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   129e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ec:	681a      	ldr	r2, [r3, #0]
   129ee:	f24c 6378 	movw	r3, #50808	; 0xc678
   129f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f6:	601a      	str	r2, [r3, #0]
   129f8:	f24c 6384 	movw	r3, #50820	; 0xc684
   129fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a00:	2200      	movs	r2, #0
   12a02:	801a      	strh	r2, [r3, #0]
   12a04:	f24c 6388 	movw	r3, #50824	; 0xc688
   12a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a0c:	f04f 0200 	mov.w	r2, #0
   12a10:	601a      	str	r2, [r3, #0]
   12a12:	f001 be8b 	b.w	1472c <auto_nav+0x21a4>
            fly_to(1);
   12a16:	2001      	movs	r0, #1
   12a18:	f001 ffca 	bl	149b0 <fly_to>
            auto_pitch = FALSE;
   12a1c:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a24:	2200      	movs	r2, #0
   12a26:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12a28:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a30:	f04f 0200 	mov.w	r2, #0
   12a34:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12a36:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a3e:	2203      	movs	r2, #3
   12a40:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12a42:	f240 5378 	movw	r3, #1400	; 0x578
   12a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a4a:	695a      	ldr	r2, [r3, #20]
   12a4c:	f240 5374 	movw	r3, #1396	; 0x574
   12a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a54:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a56:	f24c 6364 	movw	r3, #50788	; 0xc664
   12a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a5e:	f04f 0200 	mov.w	r2, #0
   12a62:	601a      	str	r2, [r3, #0]
          }
          return;
   12a64:	f001 be62 	b.w	1472c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12a68:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a70:	781b      	ldrb	r3, [r3, #0]
   12a72:	2b02      	cmp	r3, #2
   12a74:	d169      	bne.n	12b4a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12a76:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a7e:	2202      	movs	r2, #2
   12a80:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12a82:	2004      	movs	r0, #4
   12a84:	f001 fe60 	bl	14748 <approaching>
   12a88:	4603      	mov	r3, r0
   12a8a:	2b00      	cmp	r3, #0
   12a8c:	d034      	beq.n	12af8 <auto_nav+0x570>
   12a8e:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a96:	2204      	movs	r2, #4
   12a98:	701a      	strb	r2, [r3, #0]
   12a9a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa2:	781b      	ldrb	r3, [r3, #0]
   12aa4:	3301      	adds	r3, #1
   12aa6:	b2da      	uxtb	r2, r3
   12aa8:	f24c 6370 	movw	r3, #50800	; 0xc670
   12aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab0:	701a      	strb	r2, [r3, #0]
   12ab2:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aba:	681a      	ldr	r2, [r3, #0]
   12abc:	f24c 6374 	movw	r3, #50804	; 0xc674
   12ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ac4:	601a      	str	r2, [r3, #0]
   12ac6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ace:	681a      	ldr	r2, [r3, #0]
   12ad0:	f24c 6378 	movw	r3, #50808	; 0xc678
   12ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad8:	601a      	str	r2, [r3, #0]
   12ada:	f24c 6384 	movw	r3, #50820	; 0xc684
   12ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae2:	2200      	movs	r2, #0
   12ae4:	801a      	strh	r2, [r3, #0]
   12ae6:	f24c 6388 	movw	r3, #50824	; 0xc688
   12aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aee:	f04f 0200 	mov.w	r2, #0
   12af2:	601a      	str	r2, [r3, #0]
   12af4:	f001 be1a 	b.w	1472c <auto_nav+0x21a4>
            fly_to(4);
   12af8:	2004      	movs	r0, #4
   12afa:	f001 ff59 	bl	149b0 <fly_to>
            auto_pitch = FALSE;
   12afe:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b06:	2200      	movs	r2, #0
   12b08:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b0a:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b12:	f04f 0200 	mov.w	r2, #0
   12b16:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b18:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b20:	2203      	movs	r2, #3
   12b22:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12b24:	f240 5378 	movw	r3, #1400	; 0x578
   12b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12b2e:	f240 5374 	movw	r3, #1396	; 0x574
   12b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b36:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b38:	f24c 6364 	movw	r3, #50788	; 0xc664
   12b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b40:	f04f 0200 	mov.w	r2, #0
   12b44:	601a      	str	r2, [r3, #0]
          }
          return;
   12b46:	f001 bdf1 	b.w	1472c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12b4a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b52:	781b      	ldrb	r3, [r3, #0]
   12b54:	2b03      	cmp	r3, #3
   12b56:	d106      	bne.n	12b66 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12b58:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b60:	2203      	movs	r2, #3
   12b62:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12b64:	e6e0      	b.n	12928 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12b66:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b6e:	781b      	ldrb	r3, [r3, #0]
   12b70:	2b04      	cmp	r3, #4
   12b72:	f041 85db 	bne.w	1472c <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12b76:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7e:	2204      	movs	r2, #4
   12b80:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12b82:	f24c 6371 	movw	r3, #50801	; 0xc671
   12b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b8a:	781b      	ldrb	r3, [r3, #0]
   12b8c:	3301      	adds	r3, #1
   12b8e:	b2da      	uxtb	r2, r3
   12b90:	f24c 6371 	movw	r3, #50801	; 0xc671
   12b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b98:	701a      	strb	r2, [r3, #0]
   12b9a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ba2:	2200      	movs	r2, #0
   12ba4:	701a      	strb	r2, [r3, #0]
   12ba6:	f24c 6386 	movw	r3, #50822	; 0xc686
   12baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bae:	2200      	movs	r2, #0
   12bb0:	801a      	strh	r2, [r3, #0]
   12bb2:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bba:	681a      	ldr	r2, [r3, #0]
   12bbc:	f24c 6374 	movw	r3, #50804	; 0xc674
   12bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc4:	601a      	str	r2, [r3, #0]
   12bc6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bce:	681a      	ldr	r2, [r3, #0]
   12bd0:	f24c 6378 	movw	r3, #50808	; 0xc678
   12bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd8:	601a      	str	r2, [r3, #0]
   12bda:	f24c 6384 	movw	r3, #50820	; 0xc684
   12bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12be2:	2200      	movs	r2, #0
   12be4:	801a      	strh	r2, [r3, #0]
   12be6:	f24c 6388 	movw	r3, #50824	; 0xc688
   12bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bee:	f04f 0200 	mov.w	r2, #0
   12bf2:	601a      	str	r2, [r3, #0]
   12bf4:	f001 bd9a 	b.w	1472c <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12bf8:	f24c 6371 	movw	r3, #50801	; 0xc671
   12bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c00:	781b      	ldrb	r3, [r3, #0]
   12c02:	2b02      	cmp	r3, #2
   12c04:	f040 8392 	bne.w	1332c <auto_nav+0xda4>
{
	nav_block = 2;
   12c08:	f24c 6371 	movw	r3, #50801	; 0xc671
   12c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c10:	2202      	movs	r2, #2
   12c12:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12c14:	f24c 3300 	movw	r3, #49920	; 0xc300
   12c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c1c:	781b      	ldrb	r3, [r3, #0]
   12c1e:	2b00      	cmp	r3, #0
   12c20:	d007      	beq.n	12c32 <auto_nav+0x6aa>
   12c22:	f24c 3300 	movw	r3, #49920	; 0xc300
   12c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c2a:	2200      	movs	r2, #0
   12c2c:	701a      	strb	r2, [r3, #0]
   12c2e:	2301      	movs	r3, #1
   12c30:	e000      	b.n	12c34 <auto_nav+0x6ac>
   12c32:	2300      	movs	r3, #0
   12c34:	2b00      	cmp	r3, #0
   12c36:	d034      	beq.n	12ca2 <auto_nav+0x71a>
   12c38:	f24c 6371 	movw	r3, #50801	; 0xc671
   12c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c40:	2203      	movs	r2, #3
   12c42:	701a      	strb	r2, [r3, #0]
   12c44:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c4c:	2200      	movs	r2, #0
   12c4e:	701a      	strb	r2, [r3, #0]
   12c50:	f24c 6386 	movw	r3, #50822	; 0xc686
   12c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c58:	2200      	movs	r2, #0
   12c5a:	801a      	strh	r2, [r3, #0]
   12c5c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c64:	681a      	ldr	r2, [r3, #0]
   12c66:	f24c 6374 	movw	r3, #50804	; 0xc674
   12c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c6e:	601a      	str	r2, [r3, #0]
   12c70:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c78:	681a      	ldr	r2, [r3, #0]
   12c7a:	f24c 6378 	movw	r3, #50808	; 0xc678
   12c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c82:	601a      	str	r2, [r3, #0]
   12c84:	f24c 6384 	movw	r3, #50820	; 0xc684
   12c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c8c:	2200      	movs	r2, #0
   12c8e:	801a      	strh	r2, [r3, #0]
   12c90:	f24c 6388 	movw	r3, #50824	; 0xc688
   12c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c98:	f04f 0200 	mov.w	r2, #0
   12c9c:	601a      	str	r2, [r3, #0]
   12c9e:	f001 bd45 	b.w	1472c <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12ca2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12caa:	781b      	ldrb	r3, [r3, #0]
   12cac:	2b00      	cmp	r3, #0
   12cae:	d134      	bne.n	12d1a <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12cb0:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cb8:	2200      	movs	r2, #0
   12cba:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12cbc:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc4:	781b      	ldrb	r3, [r3, #0]
   12cc6:	3301      	adds	r3, #1
   12cc8:	b2da      	uxtb	r2, r3
   12cca:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cd2:	701a      	strb	r2, [r3, #0]
   12cd4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cdc:	681a      	ldr	r2, [r3, #0]
   12cde:	f24c 6374 	movw	r3, #50804	; 0xc674
   12ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce6:	601a      	str	r2, [r3, #0]
   12ce8:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cf0:	681a      	ldr	r2, [r3, #0]
   12cf2:	f24c 6378 	movw	r3, #50808	; 0xc678
   12cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cfa:	601a      	str	r2, [r3, #0]
   12cfc:	f24c 6384 	movw	r3, #50820	; 0xc684
   12d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d04:	2200      	movs	r2, #0
   12d06:	801a      	strh	r2, [r3, #0]
   12d08:	f24c 6388 	movw	r3, #50824	; 0xc688
   12d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d10:	f04f 0200 	mov.w	r2, #0
   12d14:	601a      	str	r2, [r3, #0]
   12d16:	f001 bd09 	b.w	1472c <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12d1a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d22:	781b      	ldrb	r3, [r3, #0]
   12d24:	2b01      	cmp	r3, #1
   12d26:	d169      	bne.n	12dfc <auto_nav+0x874>
    {
         nav_stage =1;
   12d28:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d30:	2201      	movs	r2, #1
   12d32:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12d34:	2006      	movs	r0, #6
   12d36:	f001 fd07 	bl	14748 <approaching>
   12d3a:	4603      	mov	r3, r0
   12d3c:	2b00      	cmp	r3, #0
   12d3e:	d034      	beq.n	12daa <auto_nav+0x822>
   12d40:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d48:	2206      	movs	r2, #6
   12d4a:	701a      	strb	r2, [r3, #0]
   12d4c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d54:	781b      	ldrb	r3, [r3, #0]
   12d56:	3301      	adds	r3, #1
   12d58:	b2da      	uxtb	r2, r3
   12d5a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d62:	701a      	strb	r2, [r3, #0]
   12d64:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d6c:	681a      	ldr	r2, [r3, #0]
   12d6e:	f24c 6374 	movw	r3, #50804	; 0xc674
   12d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d76:	601a      	str	r2, [r3, #0]
   12d78:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d80:	681a      	ldr	r2, [r3, #0]
   12d82:	f24c 6378 	movw	r3, #50808	; 0xc678
   12d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d8a:	601a      	str	r2, [r3, #0]
   12d8c:	f24c 6384 	movw	r3, #50820	; 0xc684
   12d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d94:	2200      	movs	r2, #0
   12d96:	801a      	strh	r2, [r3, #0]
   12d98:	f24c 6388 	movw	r3, #50824	; 0xc688
   12d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12da0:	f04f 0200 	mov.w	r2, #0
   12da4:	601a      	str	r2, [r3, #0]
   12da6:	f001 bcc1 	b.w	1472c <auto_nav+0x21a4>
            fly_to(6);
   12daa:	2006      	movs	r0, #6
   12dac:	f001 fe00 	bl	149b0 <fly_to>
            auto_pitch = FALSE;
   12db0:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db8:	2200      	movs	r2, #0
   12dba:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12dbc:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc4:	f04f 0200 	mov.w	r2, #0
   12dc8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12dca:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dd2:	2203      	movs	r2, #3
   12dd4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12dd6:	f240 5378 	movw	r3, #1400	; 0x578
   12dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12de0:	f240 5374 	movw	r3, #1396	; 0x574
   12de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12de8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12dea:	f24c 6364 	movw	r3, #50788	; 0xc664
   12dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df2:	f04f 0200 	mov.w	r2, #0
   12df6:	601a      	str	r2, [r3, #0]
          }
          return;
   12df8:	f001 bc98 	b.w	1472c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12dfc:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e04:	781b      	ldrb	r3, [r3, #0]
   12e06:	2b02      	cmp	r3, #2
   12e08:	d169      	bne.n	12ede <auto_nav+0x956>
     {
         nav_stage =2; 
   12e0a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e12:	2202      	movs	r2, #2
   12e14:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12e16:	2001      	movs	r0, #1
   12e18:	f001 fc96 	bl	14748 <approaching>
   12e1c:	4603      	mov	r3, r0
   12e1e:	2b00      	cmp	r3, #0
   12e20:	d034      	beq.n	12e8c <auto_nav+0x904>
   12e22:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e2a:	2201      	movs	r2, #1
   12e2c:	701a      	strb	r2, [r3, #0]
   12e2e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	3301      	adds	r3, #1
   12e3a:	b2da      	uxtb	r2, r3
   12e3c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e44:	701a      	strb	r2, [r3, #0]
   12e46:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e4e:	681a      	ldr	r2, [r3, #0]
   12e50:	f24c 6374 	movw	r3, #50804	; 0xc674
   12e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e58:	601a      	str	r2, [r3, #0]
   12e5a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e62:	681a      	ldr	r2, [r3, #0]
   12e64:	f24c 6378 	movw	r3, #50808	; 0xc678
   12e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e6c:	601a      	str	r2, [r3, #0]
   12e6e:	f24c 6384 	movw	r3, #50820	; 0xc684
   12e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e76:	2200      	movs	r2, #0
   12e78:	801a      	strh	r2, [r3, #0]
   12e7a:	f24c 6388 	movw	r3, #50824	; 0xc688
   12e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e82:	f04f 0200 	mov.w	r2, #0
   12e86:	601a      	str	r2, [r3, #0]
   12e88:	f001 bc50 	b.w	1472c <auto_nav+0x21a4>
            fly_to(1);
   12e8c:	2001      	movs	r0, #1
   12e8e:	f001 fd8f 	bl	149b0 <fly_to>
            auto_pitch = FALSE;
   12e92:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e9a:	2200      	movs	r2, #0
   12e9c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e9e:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ea6:	f04f 0200 	mov.w	r2, #0
   12eaa:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12eac:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eb4:	2203      	movs	r2, #3
   12eb6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12eb8:	f240 5378 	movw	r3, #1400	; 0x578
   12ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ec0:	695a      	ldr	r2, [r3, #20]
   12ec2:	f240 5374 	movw	r3, #1396	; 0x574
   12ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eca:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ecc:	f24c 6364 	movw	r3, #50788	; 0xc664
   12ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed4:	f04f 0200 	mov.w	r2, #0
   12ed8:	601a      	str	r2, [r3, #0]
          }
          return;
   12eda:	f001 bc27 	b.w	1472c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12ede:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee6:	781b      	ldrb	r3, [r3, #0]
   12ee8:	2b03      	cmp	r3, #3
   12eea:	d16f      	bne.n	12fcc <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12eec:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef4:	2203      	movs	r2, #3
   12ef6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12ef8:	2002      	movs	r0, #2
   12efa:	f001 fc25 	bl	14748 <approaching>
   12efe:	4603      	mov	r3, r0
   12f00:	2b00      	cmp	r3, #0
   12f02:	d034      	beq.n	12f6e <auto_nav+0x9e6>
   12f04:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f0c:	2202      	movs	r2, #2
   12f0e:	701a      	strb	r2, [r3, #0]
   12f10:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f18:	781b      	ldrb	r3, [r3, #0]
   12f1a:	3301      	adds	r3, #1
   12f1c:	b2da      	uxtb	r2, r3
   12f1e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f26:	701a      	strb	r2, [r3, #0]
   12f28:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f30:	681a      	ldr	r2, [r3, #0]
   12f32:	f24c 6374 	movw	r3, #50804	; 0xc674
   12f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f3a:	601a      	str	r2, [r3, #0]
   12f3c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f44:	681a      	ldr	r2, [r3, #0]
   12f46:	f24c 6378 	movw	r3, #50808	; 0xc678
   12f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f4e:	601a      	str	r2, [r3, #0]
   12f50:	f24c 6384 	movw	r3, #50820	; 0xc684
   12f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f58:	2200      	movs	r2, #0
   12f5a:	801a      	strh	r2, [r3, #0]
   12f5c:	f24c 6388 	movw	r3, #50824	; 0xc688
   12f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f64:	f04f 0200 	mov.w	r2, #0
   12f68:	601a      	str	r2, [r3, #0]
   12f6a:	f001 bbdf 	b.w	1472c <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12f6e:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f76:	781b      	ldrb	r3, [r3, #0]
   12f78:	4618      	mov	r0, r3
   12f7a:	2102      	movs	r1, #2
   12f7c:	f001 fd3a 	bl	149f4 <route_to>
            auto_pitch = FALSE;
   12f80:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f88:	2200      	movs	r2, #0
   12f8a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f8c:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f94:	f04f 0200 	mov.w	r2, #0
   12f98:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f9a:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fa2:	2203      	movs	r2, #3
   12fa4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12fa6:	f240 5378 	movw	r3, #1400	; 0x578
   12faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fae:	6a1a      	ldr	r2, [r3, #32]
   12fb0:	f240 5374 	movw	r3, #1396	; 0x574
   12fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fb8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12fba:	f24c 6364 	movw	r3, #50788	; 0xc664
   12fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc2:	f04f 0200 	mov.w	r2, #0
   12fc6:	601a      	str	r2, [r3, #0]
          }
          return;
   12fc8:	f001 bbb0 	b.w	1472c <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12fcc:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd4:	781b      	ldrb	r3, [r3, #0]
   12fd6:	2b04      	cmp	r3, #4
   12fd8:	d169      	bne.n	130ae <auto_nav+0xb26>
       {
          nav_stage = 4;
   12fda:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe2:	2204      	movs	r2, #4
   12fe4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12fe6:	2003      	movs	r0, #3
   12fe8:	f001 fbae 	bl	14748 <approaching>
   12fec:	4603      	mov	r3, r0
   12fee:	2b00      	cmp	r3, #0
   12ff0:	d034      	beq.n	1305c <auto_nav+0xad4>
   12ff2:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ffa:	2203      	movs	r2, #3
   12ffc:	701a      	strb	r2, [r3, #0]
   12ffe:	f24c 6370 	movw	r3, #50800	; 0xc670
   13002:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13006:	781b      	ldrb	r3, [r3, #0]
   13008:	3301      	adds	r3, #1
   1300a:	b2da      	uxtb	r2, r3
   1300c:	f24c 6370 	movw	r3, #50800	; 0xc670
   13010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13014:	701a      	strb	r2, [r3, #0]
   13016:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1301a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1301e:	681a      	ldr	r2, [r3, #0]
   13020:	f24c 6374 	movw	r3, #50804	; 0xc674
   13024:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13028:	601a      	str	r2, [r3, #0]
   1302a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1302e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13032:	681a      	ldr	r2, [r3, #0]
   13034:	f24c 6378 	movw	r3, #50808	; 0xc678
   13038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1303c:	601a      	str	r2, [r3, #0]
   1303e:	f24c 6384 	movw	r3, #50820	; 0xc684
   13042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13046:	2200      	movs	r2, #0
   13048:	801a      	strh	r2, [r3, #0]
   1304a:	f24c 6388 	movw	r3, #50824	; 0xc688
   1304e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13052:	f04f 0200 	mov.w	r2, #0
   13056:	601a      	str	r2, [r3, #0]
   13058:	f001 bb68 	b.w	1472c <auto_nav+0x21a4>
            fly_to(3);
   1305c:	2003      	movs	r0, #3
   1305e:	f001 fca7 	bl	149b0 <fly_to>
            auto_pitch = FALSE;
   13062:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1306a:	2200      	movs	r2, #0
   1306c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1306e:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13076:	f04f 0200 	mov.w	r2, #0
   1307a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1307c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13084:	2203      	movs	r2, #3
   13086:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   13088:	f240 5378 	movw	r3, #1400	; 0x578
   1308c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13092:	f240 5374 	movw	r3, #1396	; 0x574
   13096:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1309a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1309c:	f24c 6364 	movw	r3, #50788	; 0xc664
   130a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a4:	f04f 0200 	mov.w	r2, #0
   130a8:	601a      	str	r2, [r3, #0]
          }
          return;
   130aa:	f001 bb3f 	b.w	1472c <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   130ae:	f24c 6370 	movw	r3, #50800	; 0xc670
   130b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b6:	781b      	ldrb	r3, [r3, #0]
   130b8:	2b05      	cmp	r3, #5
   130ba:	d169      	bne.n	13190 <auto_nav+0xc08>
       {
          nav_stage =5;
   130bc:	f24c 6370 	movw	r3, #50800	; 0xc670
   130c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c4:	2205      	movs	r2, #5
   130c6:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   130c8:	2004      	movs	r0, #4
   130ca:	f001 fb3d 	bl	14748 <approaching>
   130ce:	4603      	mov	r3, r0
   130d0:	2b00      	cmp	r3, #0
   130d2:	d034      	beq.n	1313e <auto_nav+0xbb6>
   130d4:	f24c 637c 	movw	r3, #50812	; 0xc67c
   130d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130dc:	2204      	movs	r2, #4
   130de:	701a      	strb	r2, [r3, #0]
   130e0:	f24c 6370 	movw	r3, #50800	; 0xc670
   130e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e8:	781b      	ldrb	r3, [r3, #0]
   130ea:	3301      	adds	r3, #1
   130ec:	b2da      	uxtb	r2, r3
   130ee:	f24c 6370 	movw	r3, #50800	; 0xc670
   130f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f6:	701a      	strb	r2, [r3, #0]
   130f8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   130fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13100:	681a      	ldr	r2, [r3, #0]
   13102:	f24c 6374 	movw	r3, #50804	; 0xc674
   13106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1310a:	601a      	str	r2, [r3, #0]
   1310c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13110:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13114:	681a      	ldr	r2, [r3, #0]
   13116:	f24c 6378 	movw	r3, #50808	; 0xc678
   1311a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1311e:	601a      	str	r2, [r3, #0]
   13120:	f24c 6384 	movw	r3, #50820	; 0xc684
   13124:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13128:	2200      	movs	r2, #0
   1312a:	801a      	strh	r2, [r3, #0]
   1312c:	f24c 6388 	movw	r3, #50824	; 0xc688
   13130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13134:	f04f 0200 	mov.w	r2, #0
   13138:	601a      	str	r2, [r3, #0]
   1313a:	f001 baf7 	b.w	1472c <auto_nav+0x21a4>
            fly_to(4);
   1313e:	2004      	movs	r0, #4
   13140:	f001 fc36 	bl	149b0 <fly_to>
            auto_pitch = FALSE;
   13144:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1314c:	2200      	movs	r2, #0
   1314e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13150:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13154:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13158:	f04f 0200 	mov.w	r2, #0
   1315c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1315e:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13166:	2203      	movs	r2, #3
   13168:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1316a:	f240 5378 	movw	r3, #1400	; 0x578
   1316e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13174:	f240 5374 	movw	r3, #1396	; 0x574
   13178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1317c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1317e:	f24c 6364 	movw	r3, #50788	; 0xc664
   13182:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13186:	f04f 0200 	mov.w	r2, #0
   1318a:	601a      	str	r2, [r3, #0]
          }
          return;
   1318c:	f001 bace 	b.w	1472c <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13190:	f24c 6370 	movw	r3, #50800	; 0xc670
   13194:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13198:	781b      	ldrb	r3, [r3, #0]
   1319a:	2b06      	cmp	r3, #6
   1319c:	d16f      	bne.n	1327e <auto_nav+0xcf6>
       {
          nav_stage =6;
   1319e:	f24c 6370 	movw	r3, #50800	; 0xc670
   131a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a6:	2206      	movs	r2, #6
   131a8:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   131aa:	2005      	movs	r0, #5
   131ac:	f001 facc 	bl	14748 <approaching>
   131b0:	4603      	mov	r3, r0
   131b2:	2b00      	cmp	r3, #0
   131b4:	d034      	beq.n	13220 <auto_nav+0xc98>
   131b6:	f24c 637c 	movw	r3, #50812	; 0xc67c
   131ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131be:	2205      	movs	r2, #5
   131c0:	701a      	strb	r2, [r3, #0]
   131c2:	f24c 6370 	movw	r3, #50800	; 0xc670
   131c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ca:	781b      	ldrb	r3, [r3, #0]
   131cc:	3301      	adds	r3, #1
   131ce:	b2da      	uxtb	r2, r3
   131d0:	f24c 6370 	movw	r3, #50800	; 0xc670
   131d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d8:	701a      	strb	r2, [r3, #0]
   131da:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   131de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e2:	681a      	ldr	r2, [r3, #0]
   131e4:	f24c 6374 	movw	r3, #50804	; 0xc674
   131e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ec:	601a      	str	r2, [r3, #0]
   131ee:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   131f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131f6:	681a      	ldr	r2, [r3, #0]
   131f8:	f24c 6378 	movw	r3, #50808	; 0xc678
   131fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13200:	601a      	str	r2, [r3, #0]
   13202:	f24c 6384 	movw	r3, #50820	; 0xc684
   13206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1320a:	2200      	movs	r2, #0
   1320c:	801a      	strh	r2, [r3, #0]
   1320e:	f24c 6388 	movw	r3, #50824	; 0xc688
   13212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13216:	f04f 0200 	mov.w	r2, #0
   1321a:	601a      	str	r2, [r3, #0]
   1321c:	f001 ba86 	b.w	1472c <auto_nav+0x21a4>
            route_to(last_wp, 5);
   13220:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13228:	781b      	ldrb	r3, [r3, #0]
   1322a:	4618      	mov	r0, r3
   1322c:	2105      	movs	r1, #5
   1322e:	f001 fbe1 	bl	149f4 <route_to>
            auto_pitch = FALSE;
   13232:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13236:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1323a:	2200      	movs	r2, #0
   1323c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1323e:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13246:	f04f 0200 	mov.w	r2, #0
   1324a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1324c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13250:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13254:	2203      	movs	r2, #3
   13256:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13258:	f240 5378 	movw	r3, #1400	; 0x578
   1325c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13262:	f240 5374 	movw	r3, #1396	; 0x574
   13266:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1326a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1326c:	f24c 6364 	movw	r3, #50788	; 0xc664
   13270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13274:	f04f 0200 	mov.w	r2, #0
   13278:	601a      	str	r2, [r3, #0]
          }
          return;
   1327a:	f001 ba57 	b.w	1472c <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   1327e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13286:	781b      	ldrb	r3, [r3, #0]
   13288:	2b07      	cmp	r3, #7
   1328a:	d106      	bne.n	1329a <auto_nav+0xd12>
       {
	   nav_stage =7;
   1328c:	f24c 6370 	movw	r3, #50800	; 0xc670
   13290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13294:	2207      	movs	r2, #7
   13296:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13298:	e50a      	b.n	12cb0 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   1329a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1329e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132a2:	781b      	ldrb	r3, [r3, #0]
   132a4:	2b08      	cmp	r3, #8
   132a6:	f041 8241 	bne.w	1472c <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   132aa:	f24c 6370 	movw	r3, #50800	; 0xc670
   132ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132b2:	2208      	movs	r2, #8
   132b4:	701a      	strb	r2, [r3, #0]
          NextBlock();
   132b6:	f24c 6371 	movw	r3, #50801	; 0xc671
   132ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132be:	781b      	ldrb	r3, [r3, #0]
   132c0:	3301      	adds	r3, #1
   132c2:	b2da      	uxtb	r2, r3
   132c4:	f24c 6371 	movw	r3, #50801	; 0xc671
   132c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132cc:	701a      	strb	r2, [r3, #0]
   132ce:	f24c 6370 	movw	r3, #50800	; 0xc670
   132d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132d6:	2200      	movs	r2, #0
   132d8:	701a      	strb	r2, [r3, #0]
   132da:	f24c 6386 	movw	r3, #50822	; 0xc686
   132de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132e2:	2200      	movs	r2, #0
   132e4:	801a      	strh	r2, [r3, #0]
   132e6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   132ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ee:	681a      	ldr	r2, [r3, #0]
   132f0:	f24c 6374 	movw	r3, #50804	; 0xc674
   132f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f8:	601a      	str	r2, [r3, #0]
   132fa:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   132fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13302:	681a      	ldr	r2, [r3, #0]
   13304:	f24c 6378 	movw	r3, #50808	; 0xc678
   13308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1330c:	601a      	str	r2, [r3, #0]
   1330e:	f24c 6384 	movw	r3, #50820	; 0xc684
   13312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13316:	2200      	movs	r2, #0
   13318:	801a      	strh	r2, [r3, #0]
   1331a:	f24c 6388 	movw	r3, #50824	; 0xc688
   1331e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13322:	f04f 0200 	mov.w	r2, #0
   13326:	601a      	str	r2, [r3, #0]
   13328:	f001 ba00 	b.w	1472c <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   1332c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13334:	781b      	ldrb	r3, [r3, #0]
   13336:	2b03      	cmp	r3, #3
   13338:	f040 8388 	bne.w	13a4c <auto_nav+0x14c4>
{
    nav_block = 3;
   1333c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13344:	2203      	movs	r2, #3
   13346:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13348:	f24c 3300 	movw	r3, #49920	; 0xc300
   1334c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13350:	781b      	ldrb	r3, [r3, #0]
   13352:	2b00      	cmp	r3, #0
   13354:	d007      	beq.n	13366 <auto_nav+0xdde>
   13356:	f24c 3300 	movw	r3, #49920	; 0xc300
   1335a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1335e:	2200      	movs	r2, #0
   13360:	701a      	strb	r2, [r3, #0]
   13362:	2301      	movs	r3, #1
   13364:	e000      	b.n	13368 <auto_nav+0xde0>
   13366:	2300      	movs	r3, #0
   13368:	2b00      	cmp	r3, #0
   1336a:	d034      	beq.n	133d6 <auto_nav+0xe4e>
   1336c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13374:	2204      	movs	r2, #4
   13376:	701a      	strb	r2, [r3, #0]
   13378:	f24c 6370 	movw	r3, #50800	; 0xc670
   1337c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13380:	2200      	movs	r2, #0
   13382:	701a      	strb	r2, [r3, #0]
   13384:	f24c 6386 	movw	r3, #50822	; 0xc686
   13388:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1338c:	2200      	movs	r2, #0
   1338e:	801a      	strh	r2, [r3, #0]
   13390:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13398:	681a      	ldr	r2, [r3, #0]
   1339a:	f24c 6374 	movw	r3, #50804	; 0xc674
   1339e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133a2:	601a      	str	r2, [r3, #0]
   133a4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   133a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ac:	681a      	ldr	r2, [r3, #0]
   133ae:	f24c 6378 	movw	r3, #50808	; 0xc678
   133b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b6:	601a      	str	r2, [r3, #0]
   133b8:	f24c 6384 	movw	r3, #50820	; 0xc684
   133bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133c0:	2200      	movs	r2, #0
   133c2:	801a      	strh	r2, [r3, #0]
   133c4:	f24c 6388 	movw	r3, #50824	; 0xc688
   133c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133cc:	f04f 0200 	mov.w	r2, #0
   133d0:	601a      	str	r2, [r3, #0]
   133d2:	f001 b9ab 	b.w	1472c <auto_nav+0x21a4>
    if(nav_stage == 0)
   133d6:	f24c 6370 	movw	r3, #50800	; 0xc670
   133da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	f040 82ea 	bne.w	139ba <auto_nav+0x1432>
    {
        nav_stage = 0;
   133e6:	f24c 6370 	movw	r3, #50800	; 0xc670
   133ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ee:	2200      	movs	r2, #0
   133f0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   133f2:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   133f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133fa:	781b      	ldrb	r3, [r3, #0]
   133fc:	2b02      	cmp	r3, #2
   133fe:	f040 81a5 	bne.w	1374c <auto_nav+0x11c4>
   13402:	f24c 4320 	movw	r3, #50208	; 0xc420
   13406:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1340a:	88db      	ldrh	r3, [r3, #6]
   1340c:	84fb      	strh	r3, [r7, #38]	; 0x26
   1340e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13412:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13416:	dc04      	bgt.n	13422 <auto_nav+0xe9a>
   13418:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1341c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13420:	da7e      	bge.n	13520 <auto_nav+0xf98>
   13422:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13426:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1342a:	681b      	ldr	r3, [r3, #0]
   1342c:	4618      	mov	r0, r3
   1342e:	f004 faef 	bl	17a10 <__aeabi_f2d>
   13432:	4604      	mov	r4, r0
   13434:	460d      	mov	r5, r1
   13436:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1343a:	4618      	mov	r0, r3
   1343c:	f004 ff28 	bl	18290 <__aeabi_i2f>
   13440:	4603      	mov	r3, r0
   13442:	4618      	mov	r0, r3
   13444:	f04f 0100 	mov.w	r1, #0
   13448:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1344c:	f005 f828 	bl	184a0 <__aeabi_fdiv>
   13450:	4603      	mov	r3, r0
   13452:	4618      	mov	r0, r3
   13454:	f004 fadc 	bl	17a10 <__aeabi_f2d>
   13458:	4602      	mov	r2, r0
   1345a:	460b      	mov	r3, r1
   1345c:	4610      	mov	r0, r2
   1345e:	4619      	mov	r1, r3
   13460:	f04f 0200 	mov.w	r2, #0
   13464:	f04f 0300 	mov.w	r3, #0
   13468:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1346c:	f004 fb24 	bl	17ab8 <__aeabi_dmul>
   13470:	4602      	mov	r2, r0
   13472:	460b      	mov	r3, r1
   13474:	4610      	mov	r0, r2
   13476:	4619      	mov	r1, r3
   13478:	f04f 0200 	mov.w	r2, #0
   1347c:	f04f 0300 	mov.w	r3, #0
   13480:	f004 f968 	bl	17754 <__adddf3>
   13484:	4602      	mov	r2, r0
   13486:	460b      	mov	r3, r1
   13488:	4620      	mov	r0, r4
   1348a:	4629      	mov	r1, r5
   1348c:	f004 f962 	bl	17754 <__adddf3>
   13490:	4602      	mov	r2, r0
   13492:	460b      	mov	r3, r1
   13494:	4610      	mov	r0, r2
   13496:	4619      	mov	r1, r3
   13498:	f004 fdf0 	bl	1807c <__aeabi_d2f>
   1349c:	4602      	mov	r2, r0
   1349e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134a6:	601a      	str	r2, [r3, #0]
   134a8:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134b0:	681b      	ldr	r3, [r3, #0]
   134b2:	4618      	mov	r0, r3
   134b4:	f04f 0100 	mov.w	r1, #0
   134b8:	f2c4 317a 	movt	r1, #17274	; 0x437a
   134bc:	f005 f8e4 	bl	18688 <__aeabi_fcmple>
   134c0:	4603      	mov	r3, r0
   134c2:	2b00      	cmp	r3, #0
   134c4:	d005      	beq.n	134d2 <auto_nav+0xf4a>
   134c6:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ce:	681a      	ldr	r2, [r3, #0]
   134d0:	e003      	b.n	134da <auto_nav+0xf52>
   134d2:	f04f 0200 	mov.w	r2, #0
   134d6:	f2c4 327a 	movt	r2, #17274	; 0x437a
   134da:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134e2:	601a      	str	r2, [r3, #0]
   134e4:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ec:	681b      	ldr	r3, [r3, #0]
   134ee:	4618      	mov	r0, r3
   134f0:	f04f 0100 	mov.w	r1, #0
   134f4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   134f8:	f005 f8d0 	bl	1869c <__aeabi_fcmpge>
   134fc:	4603      	mov	r3, r0
   134fe:	2b00      	cmp	r3, #0
   13500:	d005      	beq.n	1350e <auto_nav+0xf86>
   13502:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1350a:	681a      	ldr	r2, [r3, #0]
   1350c:	e003      	b.n	13516 <auto_nav+0xf8e>
   1350e:	f04f 0200 	mov.w	r2, #0
   13512:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13516:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1351a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1351e:	601a      	str	r2, [r3, #0]
   13520:	f24c 4320 	movw	r3, #50208	; 0xc420
   13524:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13528:	889b      	ldrh	r3, [r3, #4]
   1352a:	84bb      	strh	r3, [r7, #36]	; 0x24
   1352c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13530:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13534:	dc04      	bgt.n	13540 <auto_nav+0xfb8>
   13536:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   1353a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   1353e:	da7e      	bge.n	1363e <auto_nav+0x10b6>
   13540:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13548:	681b      	ldr	r3, [r3, #0]
   1354a:	4618      	mov	r0, r3
   1354c:	f004 fa60 	bl	17a10 <__aeabi_f2d>
   13550:	4604      	mov	r4, r0
   13552:	460d      	mov	r5, r1
   13554:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13558:	4618      	mov	r0, r3
   1355a:	f004 fe99 	bl	18290 <__aeabi_i2f>
   1355e:	4603      	mov	r3, r0
   13560:	4618      	mov	r0, r3
   13562:	f04f 0100 	mov.w	r1, #0
   13566:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1356a:	f004 ff99 	bl	184a0 <__aeabi_fdiv>
   1356e:	4603      	mov	r3, r0
   13570:	4618      	mov	r0, r3
   13572:	f004 fa4d 	bl	17a10 <__aeabi_f2d>
   13576:	4602      	mov	r2, r0
   13578:	460b      	mov	r3, r1
   1357a:	4610      	mov	r0, r2
   1357c:	4619      	mov	r1, r3
   1357e:	f04f 0200 	mov.w	r2, #0
   13582:	f04f 0300 	mov.w	r3, #0
   13586:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1358a:	f004 fa95 	bl	17ab8 <__aeabi_dmul>
   1358e:	4602      	mov	r2, r0
   13590:	460b      	mov	r3, r1
   13592:	4610      	mov	r0, r2
   13594:	4619      	mov	r1, r3
   13596:	f04f 0200 	mov.w	r2, #0
   1359a:	f04f 0300 	mov.w	r3, #0
   1359e:	f004 f8d9 	bl	17754 <__adddf3>
   135a2:	4602      	mov	r2, r0
   135a4:	460b      	mov	r3, r1
   135a6:	4620      	mov	r0, r4
   135a8:	4629      	mov	r1, r5
   135aa:	f004 f8d3 	bl	17754 <__adddf3>
   135ae:	4602      	mov	r2, r0
   135b0:	460b      	mov	r3, r1
   135b2:	4610      	mov	r0, r2
   135b4:	4619      	mov	r1, r3
   135b6:	f004 fd61 	bl	1807c <__aeabi_d2f>
   135ba:	4602      	mov	r2, r0
   135bc:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135c4:	601a      	str	r2, [r3, #0]
   135c6:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ce:	681b      	ldr	r3, [r3, #0]
   135d0:	4618      	mov	r0, r3
   135d2:	f04f 0100 	mov.w	r1, #0
   135d6:	f2c4 317a 	movt	r1, #17274	; 0x437a
   135da:	f005 f855 	bl	18688 <__aeabi_fcmple>
   135de:	4603      	mov	r3, r0
   135e0:	2b00      	cmp	r3, #0
   135e2:	d005      	beq.n	135f0 <auto_nav+0x1068>
   135e4:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ec:	681a      	ldr	r2, [r3, #0]
   135ee:	e003      	b.n	135f8 <auto_nav+0x1070>
   135f0:	f04f 0200 	mov.w	r2, #0
   135f4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   135f8:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13600:	601a      	str	r2, [r3, #0]
   13602:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1360a:	681b      	ldr	r3, [r3, #0]
   1360c:	4618      	mov	r0, r3
   1360e:	f04f 0100 	mov.w	r1, #0
   13612:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13616:	f005 f841 	bl	1869c <__aeabi_fcmpge>
   1361a:	4603      	mov	r3, r0
   1361c:	2b00      	cmp	r3, #0
   1361e:	d005      	beq.n	1362c <auto_nav+0x10a4>
   13620:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13624:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13628:	681a      	ldr	r2, [r3, #0]
   1362a:	e003      	b.n	13634 <auto_nav+0x10ac>
   1362c:	f04f 0200 	mov.w	r2, #0
   13630:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13634:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1363c:	601a      	str	r2, [r3, #0]
   1363e:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13646:	2203      	movs	r2, #3
   13648:	701a      	strb	r2, [r3, #0]
   1364a:	f24c 4320 	movw	r3, #50208	; 0xc420
   1364e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13652:	885b      	ldrh	r3, [r3, #2]
   13654:	847b      	strh	r3, [r7, #34]	; 0x22
   13656:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1365a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1365e:	dc04      	bgt.n	1366a <auto_nav+0x10e2>
   13660:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13664:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13668:	da70      	bge.n	1374c <auto_nav+0x11c4>
   1366a:	f240 5374 	movw	r3, #1396	; 0x574
   1366e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13672:	681b      	ldr	r3, [r3, #0]
   13674:	4618      	mov	r0, r3
   13676:	f004 f9cb 	bl	17a10 <__aeabi_f2d>
   1367a:	4604      	mov	r4, r0
   1367c:	460d      	mov	r5, r1
   1367e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13682:	4618      	mov	r0, r3
   13684:	f004 fe04 	bl	18290 <__aeabi_i2f>
   13688:	4603      	mov	r3, r0
   1368a:	4618      	mov	r0, r3
   1368c:	f04f 0100 	mov.w	r1, #0
   13690:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13694:	f004 ff04 	bl	184a0 <__aeabi_fdiv>
   13698:	4603      	mov	r3, r0
   1369a:	4618      	mov	r0, r3
   1369c:	f004 f9b8 	bl	17a10 <__aeabi_f2d>
   136a0:	4602      	mov	r2, r0
   136a2:	460b      	mov	r3, r1
   136a4:	f04f 0000 	mov.w	r0, #0
   136a8:	f04f 0100 	mov.w	r1, #0
   136ac:	f004 f850 	bl	17750 <__aeabi_dsub>
   136b0:	4602      	mov	r2, r0
   136b2:	460b      	mov	r3, r1
   136b4:	4620      	mov	r0, r4
   136b6:	4629      	mov	r1, r5
   136b8:	f004 f84c 	bl	17754 <__adddf3>
   136bc:	4602      	mov	r2, r0
   136be:	460b      	mov	r3, r1
   136c0:	4610      	mov	r0, r2
   136c2:	4619      	mov	r1, r3
   136c4:	f004 fcda 	bl	1807c <__aeabi_d2f>
   136c8:	4602      	mov	r2, r0
   136ca:	f240 5374 	movw	r3, #1396	; 0x574
   136ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136d2:	601a      	str	r2, [r3, #0]
   136d4:	f240 5374 	movw	r3, #1396	; 0x574
   136d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136dc:	681b      	ldr	r3, [r3, #0]
   136de:	4618      	mov	r0, r3
   136e0:	f04f 0100 	mov.w	r1, #0
   136e4:	f2c4 312f 	movt	r1, #17199	; 0x432f
   136e8:	f004 ffd8 	bl	1869c <__aeabi_fcmpge>
   136ec:	4603      	mov	r3, r0
   136ee:	2b00      	cmp	r3, #0
   136f0:	d005      	beq.n	136fe <auto_nav+0x1176>
   136f2:	f240 5374 	movw	r3, #1396	; 0x574
   136f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136fa:	681a      	ldr	r2, [r3, #0]
   136fc:	e003      	b.n	13706 <auto_nav+0x117e>
   136fe:	f04f 0200 	mov.w	r2, #0
   13702:	f2c4 322f 	movt	r2, #17199	; 0x432f
   13706:	f240 5374 	movw	r3, #1396	; 0x574
   1370a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1370e:	601a      	str	r2, [r3, #0]
   13710:	f240 5374 	movw	r3, #1396	; 0x574
   13714:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13718:	681b      	ldr	r3, [r3, #0]
   1371a:	4618      	mov	r0, r3
   1371c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13720:	f2c4 3189 	movt	r1, #17289	; 0x4389
   13724:	f004 ffb0 	bl	18688 <__aeabi_fcmple>
   13728:	4603      	mov	r3, r0
   1372a:	2b00      	cmp	r3, #0
   1372c:	d005      	beq.n	1373a <auto_nav+0x11b2>
   1372e:	f240 5374 	movw	r3, #1396	; 0x574
   13732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13736:	681a      	ldr	r2, [r3, #0]
   13738:	e003      	b.n	13742 <auto_nav+0x11ba>
   1373a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1373e:	f2c4 3289 	movt	r2, #17289	; 0x4389
   13742:	f240 5374 	movw	r3, #1396	; 0x574
   13746:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1374a:	601a      	str	r2, [r3, #0]
   1374c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13754:	681a      	ldr	r2, [r3, #0]
   13756:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1375a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1375e:	681b      	ldr	r3, [r3, #0]
   13760:	4610      	mov	r0, r2
   13762:	4619      	mov	r1, r3
   13764:	f004 fcde 	bl	18124 <__aeabi_fsub>
   13768:	4603      	mov	r3, r0
   1376a:	4618      	mov	r0, r3
   1376c:	f004 f950 	bl	17a10 <__aeabi_f2d>
   13770:	4604      	mov	r4, r0
   13772:	460d      	mov	r5, r1
   13774:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13778:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1377c:	681a      	ldr	r2, [r3, #0]
   1377e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13782:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13786:	681b      	ldr	r3, [r3, #0]
   13788:	4610      	mov	r0, r2
   1378a:	4619      	mov	r1, r3
   1378c:	f004 fcca 	bl	18124 <__aeabi_fsub>
   13790:	4603      	mov	r3, r0
   13792:	4618      	mov	r0, r3
   13794:	f004 f93c 	bl	17a10 <__aeabi_f2d>
   13798:	4602      	mov	r2, r0
   1379a:	460b      	mov	r3, r1
   1379c:	4620      	mov	r0, r4
   1379e:	4629      	mov	r1, r5
   137a0:	f002 fa12 	bl	15bc8 <pp_atan2>
   137a4:	4602      	mov	r2, r0
   137a6:	460b      	mov	r3, r1
   137a8:	4610      	mov	r0, r2
   137aa:	4619      	mov	r1, r3
   137ac:	f004 fc66 	bl	1807c <__aeabi_d2f>
   137b0:	4603      	mov	r3, r0
   137b2:	61fb      	str	r3, [r7, #28]
   137b4:	69f8      	ldr	r0, [r7, #28]
   137b6:	f004 f92b 	bl	17a10 <__aeabi_f2d>
   137ba:	4604      	mov	r4, r0
   137bc:	460d      	mov	r5, r1
   137be:	f64c 1304 	movw	r3, #51460	; 0xc904
   137c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137c6:	681b      	ldr	r3, [r3, #0]
   137c8:	4618      	mov	r0, r3
   137ca:	f04f 0100 	mov.w	r1, #0
   137ce:	f2cc 2148 	movt	r1, #49736	; 0xc248
   137d2:	f004 fdb1 	bl	18338 <__aeabi_fmul>
   137d6:	4603      	mov	r3, r0
   137d8:	4618      	mov	r0, r3
   137da:	f004 f919 	bl	17a10 <__aeabi_f2d>
   137de:	4602      	mov	r2, r0
   137e0:	460b      	mov	r3, r1
   137e2:	f04f 0000 	mov.w	r0, #0
   137e6:	f04f 0100 	mov.w	r1, #0
   137ea:	f2c4 0114 	movt	r1, #16404	; 0x4014
   137ee:	f004 fa8d 	bl	17d0c <__aeabi_ddiv>
   137f2:	4602      	mov	r2, r0
   137f4:	460b      	mov	r3, r1
   137f6:	4620      	mov	r0, r4
   137f8:	4629      	mov	r1, r5
   137fa:	f003 ffab 	bl	17754 <__adddf3>
   137fe:	4602      	mov	r2, r0
   13800:	460b      	mov	r3, r1
   13802:	4610      	mov	r0, r2
   13804:	4619      	mov	r1, r3
   13806:	f004 fc39 	bl	1807c <__aeabi_d2f>
   1380a:	4603      	mov	r3, r0
   1380c:	61bb      	str	r3, [r7, #24]
   1380e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13812:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13816:	681b      	ldr	r3, [r3, #0]
   13818:	4618      	mov	r0, r3
   1381a:	f004 f8f9 	bl	17a10 <__aeabi_f2d>
   1381e:	4604      	mov	r4, r0
   13820:	460d      	mov	r5, r1
   13822:	69b8      	ldr	r0, [r7, #24]
   13824:	f004 f8f4 	bl	17a10 <__aeabi_f2d>
   13828:	4602      	mov	r2, r0
   1382a:	460b      	mov	r3, r1
   1382c:	4610      	mov	r0, r2
   1382e:	4619      	mov	r1, r3
   13830:	a3b1      	add	r3, pc, #708	; (adr r3, 13af8 <auto_nav+0x1570>)
   13832:	e9d3 2300 	ldrd	r2, r3, [r3]
   13836:	f003 ff8d 	bl	17754 <__adddf3>
   1383a:	4602      	mov	r2, r0
   1383c:	460b      	mov	r3, r1
   1383e:	4610      	mov	r0, r2
   13840:	4619      	mov	r1, r3
   13842:	f002 fa81 	bl	15d48 <pp_sin>
   13846:	4602      	mov	r2, r0
   13848:	460b      	mov	r3, r1
   1384a:	4610      	mov	r0, r2
   1384c:	4619      	mov	r1, r3
   1384e:	f04f 0200 	mov.w	r2, #0
   13852:	f04f 0300 	mov.w	r3, #0
   13856:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1385a:	f004 f92d 	bl	17ab8 <__aeabi_dmul>
   1385e:	4602      	mov	r2, r0
   13860:	460b      	mov	r3, r1
   13862:	4620      	mov	r0, r4
   13864:	4629      	mov	r1, r5
   13866:	f003 ff75 	bl	17754 <__adddf3>
   1386a:	4602      	mov	r2, r0
   1386c:	460b      	mov	r3, r1
   1386e:	4610      	mov	r0, r2
   13870:	4619      	mov	r1, r3
   13872:	f004 fc03 	bl	1807c <__aeabi_d2f>
   13876:	4606      	mov	r6, r0
   13878:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1387c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13880:	681b      	ldr	r3, [r3, #0]
   13882:	4618      	mov	r0, r3
   13884:	f004 f8c4 	bl	17a10 <__aeabi_f2d>
   13888:	4604      	mov	r4, r0
   1388a:	460d      	mov	r5, r1
   1388c:	69b8      	ldr	r0, [r7, #24]
   1388e:	f004 f8bf 	bl	17a10 <__aeabi_f2d>
   13892:	4602      	mov	r2, r0
   13894:	460b      	mov	r3, r1
   13896:	4610      	mov	r0, r2
   13898:	4619      	mov	r1, r3
   1389a:	f002 fa55 	bl	15d48 <pp_sin>
   1389e:	4602      	mov	r2, r0
   138a0:	460b      	mov	r3, r1
   138a2:	4610      	mov	r0, r2
   138a4:	4619      	mov	r1, r3
   138a6:	f04f 0200 	mov.w	r2, #0
   138aa:	f04f 0300 	mov.w	r3, #0
   138ae:	f2c4 0349 	movt	r3, #16457	; 0x4049
   138b2:	f004 f901 	bl	17ab8 <__aeabi_dmul>
   138b6:	4602      	mov	r2, r0
   138b8:	460b      	mov	r3, r1
   138ba:	4620      	mov	r0, r4
   138bc:	4629      	mov	r1, r5
   138be:	f003 ff49 	bl	17754 <__adddf3>
   138c2:	4602      	mov	r2, r0
   138c4:	460b      	mov	r3, r1
   138c6:	4610      	mov	r0, r2
   138c8:	4619      	mov	r1, r3
   138ca:	f004 fbd7 	bl	1807c <__aeabi_d2f>
   138ce:	4603      	mov	r3, r0
   138d0:	4630      	mov	r0, r6
   138d2:	4619      	mov	r1, r3
   138d4:	f001 f81c 	bl	14910 <fly_to_xy>
   138d8:	69b8      	ldr	r0, [r7, #24]
   138da:	f004 f899 	bl	17a10 <__aeabi_f2d>
   138de:	4602      	mov	r2, r0
   138e0:	460b      	mov	r3, r1
   138e2:	a185      	add	r1, pc, #532	; (adr r1, 13af8 <auto_nav+0x1570>)
   138e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   138e8:	f003 ff32 	bl	17750 <__aeabi_dsub>
   138ec:	4602      	mov	r2, r0
   138ee:	460b      	mov	r3, r1
   138f0:	4610      	mov	r0, r2
   138f2:	4619      	mov	r1, r3
   138f4:	a382      	add	r3, pc, #520	; (adr r3, 13b00 <auto_nav+0x1578>)
   138f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   138fa:	f004 fa07 	bl	17d0c <__aeabi_ddiv>
   138fe:	4602      	mov	r2, r0
   13900:	460b      	mov	r3, r1
   13902:	4610      	mov	r0, r2
   13904:	4619      	mov	r1, r3
   13906:	f04f 0200 	mov.w	r2, #0
   1390a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1390e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13912:	f004 f8d1 	bl	17ab8 <__aeabi_dmul>
   13916:	4602      	mov	r2, r0
   13918:	460b      	mov	r3, r1
   1391a:	4610      	mov	r0, r2
   1391c:	4619      	mov	r1, r3
   1391e:	f004 fbad 	bl	1807c <__aeabi_d2f>
   13922:	4602      	mov	r2, r0
   13924:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1392c:	601a      	str	r2, [r3, #0]
   1392e:	e012      	b.n	13956 <auto_nav+0x13ce>
   13930:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13934:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13938:	681b      	ldr	r3, [r3, #0]
   1393a:	4618      	mov	r0, r3
   1393c:	f04f 0100 	mov.w	r1, #0
   13940:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13944:	f004 fbf0 	bl	18128 <__addsf3>
   13948:	4603      	mov	r3, r0
   1394a:	461a      	mov	r2, r3
   1394c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13950:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13954:	601a      	str	r2, [r3, #0]
   13956:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1395a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1395e:	681b      	ldr	r3, [r3, #0]
   13960:	4618      	mov	r0, r3
   13962:	f04f 0100 	mov.w	r1, #0
   13966:	f004 fe85 	bl	18674 <__aeabi_fcmplt>
   1396a:	4603      	mov	r3, r0
   1396c:	2b00      	cmp	r3, #0
   1396e:	d1df      	bne.n	13930 <auto_nav+0x13a8>
   13970:	e012      	b.n	13998 <auto_nav+0x1410>
   13972:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13976:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1397a:	681b      	ldr	r3, [r3, #0]
   1397c:	4618      	mov	r0, r3
   1397e:	f04f 0100 	mov.w	r1, #0
   13982:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13986:	f004 fbcd 	bl	18124 <__aeabi_fsub>
   1398a:	4603      	mov	r3, r0
   1398c:	461a      	mov	r2, r3
   1398e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13992:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13996:	601a      	str	r2, [r3, #0]
   13998:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1399c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139a0:	681b      	ldr	r3, [r3, #0]
   139a2:	4618      	mov	r0, r3
   139a4:	f04f 0100 	mov.w	r1, #0
   139a8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   139ac:	f004 fe76 	bl	1869c <__aeabi_fcmpge>
   139b0:	4603      	mov	r3, r0
   139b2:	2b00      	cmp	r3, #0
   139b4:	d1dd      	bne.n	13972 <auto_nav+0x13ea>
        return;
   139b6:	f000 beb9 	b.w	1472c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   139ba:	f24c 6370 	movw	r3, #50800	; 0xc670
   139be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139c2:	781b      	ldrb	r3, [r3, #0]
   139c4:	2b01      	cmp	r3, #1
   139c6:	f040 86b1 	bne.w	1472c <auto_nav+0x21a4>
    {
        nav_stage = 1;
   139ca:	f24c 6370 	movw	r3, #50800	; 0xc670
   139ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139d2:	2201      	movs	r2, #1
   139d4:	701a      	strb	r2, [r3, #0]
        NextBlock()
   139d6:	f24c 6371 	movw	r3, #50801	; 0xc671
   139da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139de:	781b      	ldrb	r3, [r3, #0]
   139e0:	3301      	adds	r3, #1
   139e2:	b2da      	uxtb	r2, r3
   139e4:	f24c 6371 	movw	r3, #50801	; 0xc671
   139e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139ec:	701a      	strb	r2, [r3, #0]
   139ee:	f24c 6370 	movw	r3, #50800	; 0xc670
   139f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139f6:	2200      	movs	r2, #0
   139f8:	701a      	strb	r2, [r3, #0]
   139fa:	f24c 6386 	movw	r3, #50822	; 0xc686
   139fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a02:	2200      	movs	r2, #0
   13a04:	801a      	strh	r2, [r3, #0]
   13a06:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a0e:	681a      	ldr	r2, [r3, #0]
   13a10:	f24c 6374 	movw	r3, #50804	; 0xc674
   13a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a18:	601a      	str	r2, [r3, #0]
   13a1a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a22:	681a      	ldr	r2, [r3, #0]
   13a24:	f24c 6378 	movw	r3, #50808	; 0xc678
   13a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a2c:	601a      	str	r2, [r3, #0]
   13a2e:	f24c 6384 	movw	r3, #50820	; 0xc684
   13a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a36:	2200      	movs	r2, #0
   13a38:	801a      	strh	r2, [r3, #0]
   13a3a:	f24c 6388 	movw	r3, #50824	; 0xc688
   13a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a42:	f04f 0200 	mov.w	r2, #0
   13a46:	601a      	str	r2, [r3, #0]
   13a48:	f000 be70 	b.w	1472c <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13a4c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a54:	781b      	ldrb	r3, [r3, #0]
   13a56:	2b04      	cmp	r3, #4
   13a58:	f040 8202 	bne.w	13e60 <auto_nav+0x18d8>
{
    nav_block = 4;
   13a5c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a64:	2204      	movs	r2, #4
   13a66:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13a68:	f24c 3300 	movw	r3, #49920	; 0xc300
   13a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a70:	781b      	ldrb	r3, [r3, #0]
   13a72:	2b00      	cmp	r3, #0
   13a74:	d007      	beq.n	13a86 <auto_nav+0x14fe>
   13a76:	f24c 3300 	movw	r3, #49920	; 0xc300
   13a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a7e:	2200      	movs	r2, #0
   13a80:	701a      	strb	r2, [r3, #0]
   13a82:	2301      	movs	r3, #1
   13a84:	e000      	b.n	13a88 <auto_nav+0x1500>
   13a86:	2300      	movs	r3, #0
   13a88:	2b00      	cmp	r3, #0
   13a8a:	d03d      	beq.n	13b08 <auto_nav+0x1580>
   13a8c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a94:	2205      	movs	r2, #5
   13a96:	701a      	strb	r2, [r3, #0]
   13a98:	f24c 6370 	movw	r3, #50800	; 0xc670
   13a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aa0:	2200      	movs	r2, #0
   13aa2:	701a      	strb	r2, [r3, #0]
   13aa4:	f24c 6386 	movw	r3, #50822	; 0xc686
   13aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aac:	2200      	movs	r2, #0
   13aae:	801a      	strh	r2, [r3, #0]
   13ab0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab8:	681a      	ldr	r2, [r3, #0]
   13aba:	f24c 6374 	movw	r3, #50804	; 0xc674
   13abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ac2:	601a      	str	r2, [r3, #0]
   13ac4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13acc:	681a      	ldr	r2, [r3, #0]
   13ace:	f24c 6378 	movw	r3, #50808	; 0xc678
   13ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ad6:	601a      	str	r2, [r3, #0]
   13ad8:	f24c 6384 	movw	r3, #50820	; 0xc684
   13adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ae0:	2200      	movs	r2, #0
   13ae2:	801a      	strh	r2, [r3, #0]
   13ae4:	f24c 6388 	movw	r3, #50824	; 0xc688
   13ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aec:	f04f 0200 	mov.w	r2, #0
   13af0:	601a      	str	r2, [r3, #0]
   13af2:	f000 be1b 	b.w	1472c <auto_nav+0x21a4>
   13af6:	bf00      	nop
   13af8:	54442d18 	.word	0x54442d18
   13afc:	3ff921fb 	.word	0x3ff921fb
   13b00:	54442d18 	.word	0x54442d18
   13b04:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13b08:	f24c 6370 	movw	r3, #50800	; 0xc670
   13b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b10:	781b      	ldrb	r3, [r3, #0]
   13b12:	2b00      	cmp	r3, #0
   13b14:	f040 815b 	bne.w	13dce <auto_nav+0x1846>
    {
        nav_stage = 0;
   13b18:	f24c 6370 	movw	r3, #50800	; 0xc670
   13b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b20:	2200      	movs	r2, #0
   13b22:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13b24:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b2c:	2200      	movs	r2, #0
   13b2e:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13b30:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b38:	f04f 0200 	mov.w	r2, #0
   13b3c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13b3e:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b46:	2203      	movs	r2, #3
   13b48:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13b4a:	f240 5378 	movw	r3, #1400	; 0x578
   13b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b52:	689a      	ldr	r2, [r3, #8]
   13b54:	f240 5374 	movw	r3, #1396	; 0x574
   13b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b5c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13b5e:	f24c 6364 	movw	r3, #50788	; 0xc664
   13b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b66:	f04f 0200 	mov.w	r2, #0
   13b6a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13b6c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b74:	681a      	ldr	r2, [r3, #0]
   13b76:	f240 5378 	movw	r3, #1400	; 0x578
   13b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b7e:	685b      	ldr	r3, [r3, #4]
   13b80:	4610      	mov	r0, r2
   13b82:	4619      	mov	r1, r3
   13b84:	f004 face 	bl	18124 <__aeabi_fsub>
   13b88:	4603      	mov	r3, r0
   13b8a:	4618      	mov	r0, r3
   13b8c:	f003 ff40 	bl	17a10 <__aeabi_f2d>
   13b90:	4604      	mov	r4, r0
   13b92:	460d      	mov	r5, r1
   13b94:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b9c:	681a      	ldr	r2, [r3, #0]
   13b9e:	f240 5378 	movw	r3, #1400	; 0x578
   13ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ba6:	681b      	ldr	r3, [r3, #0]
   13ba8:	4610      	mov	r0, r2
   13baa:	4619      	mov	r1, r3
   13bac:	f004 faba 	bl	18124 <__aeabi_fsub>
   13bb0:	4603      	mov	r3, r0
   13bb2:	4618      	mov	r0, r3
   13bb4:	f003 ff2c 	bl	17a10 <__aeabi_f2d>
   13bb8:	4602      	mov	r2, r0
   13bba:	460b      	mov	r3, r1
   13bbc:	4620      	mov	r0, r4
   13bbe:	4629      	mov	r1, r5
   13bc0:	f002 f802 	bl	15bc8 <pp_atan2>
   13bc4:	4602      	mov	r2, r0
   13bc6:	460b      	mov	r3, r1
   13bc8:	4610      	mov	r0, r2
   13bca:	4619      	mov	r1, r3
   13bcc:	f004 fa56 	bl	1807c <__aeabi_d2f>
   13bd0:	4603      	mov	r3, r0
   13bd2:	617b      	str	r3, [r7, #20]
   13bd4:	6978      	ldr	r0, [r7, #20]
   13bd6:	f003 ff1b 	bl	17a10 <__aeabi_f2d>
   13bda:	4604      	mov	r4, r0
   13bdc:	460d      	mov	r5, r1
   13bde:	f64c 1304 	movw	r3, #51460	; 0xc904
   13be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13be6:	681b      	ldr	r3, [r3, #0]
   13be8:	4618      	mov	r0, r3
   13bea:	f04f 0100 	mov.w	r1, #0
   13bee:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13bf2:	f004 fba1 	bl	18338 <__aeabi_fmul>
   13bf6:	4603      	mov	r3, r0
   13bf8:	4618      	mov	r0, r3
   13bfa:	f003 ff09 	bl	17a10 <__aeabi_f2d>
   13bfe:	4602      	mov	r2, r0
   13c00:	460b      	mov	r3, r1
   13c02:	f04f 0000 	mov.w	r0, #0
   13c06:	f04f 0100 	mov.w	r1, #0
   13c0a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13c0e:	f004 f87d 	bl	17d0c <__aeabi_ddiv>
   13c12:	4602      	mov	r2, r0
   13c14:	460b      	mov	r3, r1
   13c16:	4620      	mov	r0, r4
   13c18:	4629      	mov	r1, r5
   13c1a:	f003 fd9b 	bl	17754 <__adddf3>
   13c1e:	4602      	mov	r2, r0
   13c20:	460b      	mov	r3, r1
   13c22:	4610      	mov	r0, r2
   13c24:	4619      	mov	r1, r3
   13c26:	f004 fa29 	bl	1807c <__aeabi_d2f>
   13c2a:	4603      	mov	r3, r0
   13c2c:	613b      	str	r3, [r7, #16]
   13c2e:	f240 5378 	movw	r3, #1400	; 0x578
   13c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c36:	681b      	ldr	r3, [r3, #0]
   13c38:	4618      	mov	r0, r3
   13c3a:	f003 fee9 	bl	17a10 <__aeabi_f2d>
   13c3e:	4604      	mov	r4, r0
   13c40:	460d      	mov	r5, r1
   13c42:	6938      	ldr	r0, [r7, #16]
   13c44:	f003 fee4 	bl	17a10 <__aeabi_f2d>
   13c48:	4602      	mov	r2, r0
   13c4a:	460b      	mov	r3, r1
   13c4c:	4610      	mov	r0, r2
   13c4e:	4619      	mov	r1, r3
   13c50:	a3af      	add	r3, pc, #700	; (adr r3, 13f10 <auto_nav+0x1988>)
   13c52:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c56:	f003 fd7d 	bl	17754 <__adddf3>
   13c5a:	4602      	mov	r2, r0
   13c5c:	460b      	mov	r3, r1
   13c5e:	4610      	mov	r0, r2
   13c60:	4619      	mov	r1, r3
   13c62:	f002 f871 	bl	15d48 <pp_sin>
   13c66:	4602      	mov	r2, r0
   13c68:	460b      	mov	r3, r1
   13c6a:	4610      	mov	r0, r2
   13c6c:	4619      	mov	r1, r3
   13c6e:	a3aa      	add	r3, pc, #680	; (adr r3, 13f18 <auto_nav+0x1990>)
   13c70:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c74:	f003 ff20 	bl	17ab8 <__aeabi_dmul>
   13c78:	4602      	mov	r2, r0
   13c7a:	460b      	mov	r3, r1
   13c7c:	4620      	mov	r0, r4
   13c7e:	4629      	mov	r1, r5
   13c80:	f003 fd68 	bl	17754 <__adddf3>
   13c84:	4602      	mov	r2, r0
   13c86:	460b      	mov	r3, r1
   13c88:	4610      	mov	r0, r2
   13c8a:	4619      	mov	r1, r3
   13c8c:	f004 f9f6 	bl	1807c <__aeabi_d2f>
   13c90:	4606      	mov	r6, r0
   13c92:	f240 5378 	movw	r3, #1400	; 0x578
   13c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c9a:	685b      	ldr	r3, [r3, #4]
   13c9c:	4618      	mov	r0, r3
   13c9e:	f003 feb7 	bl	17a10 <__aeabi_f2d>
   13ca2:	4604      	mov	r4, r0
   13ca4:	460d      	mov	r5, r1
   13ca6:	6938      	ldr	r0, [r7, #16]
   13ca8:	f003 feb2 	bl	17a10 <__aeabi_f2d>
   13cac:	4602      	mov	r2, r0
   13cae:	460b      	mov	r3, r1
   13cb0:	4610      	mov	r0, r2
   13cb2:	4619      	mov	r1, r3
   13cb4:	f002 f848 	bl	15d48 <pp_sin>
   13cb8:	4602      	mov	r2, r0
   13cba:	460b      	mov	r3, r1
   13cbc:	4610      	mov	r0, r2
   13cbe:	4619      	mov	r1, r3
   13cc0:	a395      	add	r3, pc, #596	; (adr r3, 13f18 <auto_nav+0x1990>)
   13cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cc6:	f003 fef7 	bl	17ab8 <__aeabi_dmul>
   13cca:	4602      	mov	r2, r0
   13ccc:	460b      	mov	r3, r1
   13cce:	4620      	mov	r0, r4
   13cd0:	4629      	mov	r1, r5
   13cd2:	f003 fd3f 	bl	17754 <__adddf3>
   13cd6:	4602      	mov	r2, r0
   13cd8:	460b      	mov	r3, r1
   13cda:	4610      	mov	r0, r2
   13cdc:	4619      	mov	r1, r3
   13cde:	f004 f9cd 	bl	1807c <__aeabi_d2f>
   13ce2:	4603      	mov	r3, r0
   13ce4:	4630      	mov	r0, r6
   13ce6:	4619      	mov	r1, r3
   13ce8:	f000 fe12 	bl	14910 <fly_to_xy>
   13cec:	6938      	ldr	r0, [r7, #16]
   13cee:	f003 fe8f 	bl	17a10 <__aeabi_f2d>
   13cf2:	4602      	mov	r2, r0
   13cf4:	460b      	mov	r3, r1
   13cf6:	a186      	add	r1, pc, #536	; (adr r1, 13f10 <auto_nav+0x1988>)
   13cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
   13cfc:	f003 fd28 	bl	17750 <__aeabi_dsub>
   13d00:	4602      	mov	r2, r0
   13d02:	460b      	mov	r3, r1
   13d04:	4610      	mov	r0, r2
   13d06:	4619      	mov	r1, r3
   13d08:	a385      	add	r3, pc, #532	; (adr r3, 13f20 <auto_nav+0x1998>)
   13d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d0e:	f003 fffd 	bl	17d0c <__aeabi_ddiv>
   13d12:	4602      	mov	r2, r0
   13d14:	460b      	mov	r3, r1
   13d16:	4610      	mov	r0, r2
   13d18:	4619      	mov	r1, r3
   13d1a:	f04f 0200 	mov.w	r2, #0
   13d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13d22:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13d26:	f003 fec7 	bl	17ab8 <__aeabi_dmul>
   13d2a:	4602      	mov	r2, r0
   13d2c:	460b      	mov	r3, r1
   13d2e:	4610      	mov	r0, r2
   13d30:	4619      	mov	r1, r3
   13d32:	f004 f9a3 	bl	1807c <__aeabi_d2f>
   13d36:	4602      	mov	r2, r0
   13d38:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d40:	601a      	str	r2, [r3, #0]
   13d42:	e012      	b.n	13d6a <auto_nav+0x17e2>
   13d44:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d4c:	681b      	ldr	r3, [r3, #0]
   13d4e:	4618      	mov	r0, r3
   13d50:	f04f 0100 	mov.w	r1, #0
   13d54:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d58:	f004 f9e6 	bl	18128 <__addsf3>
   13d5c:	4603      	mov	r3, r0
   13d5e:	461a      	mov	r2, r3
   13d60:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d68:	601a      	str	r2, [r3, #0]
   13d6a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d72:	681b      	ldr	r3, [r3, #0]
   13d74:	4618      	mov	r0, r3
   13d76:	f04f 0100 	mov.w	r1, #0
   13d7a:	f004 fc7b 	bl	18674 <__aeabi_fcmplt>
   13d7e:	4603      	mov	r3, r0
   13d80:	2b00      	cmp	r3, #0
   13d82:	d1df      	bne.n	13d44 <auto_nav+0x17bc>
   13d84:	e012      	b.n	13dac <auto_nav+0x1824>
   13d86:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d8e:	681b      	ldr	r3, [r3, #0]
   13d90:	4618      	mov	r0, r3
   13d92:	f04f 0100 	mov.w	r1, #0
   13d96:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d9a:	f004 f9c3 	bl	18124 <__aeabi_fsub>
   13d9e:	4603      	mov	r3, r0
   13da0:	461a      	mov	r2, r3
   13da2:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13daa:	601a      	str	r2, [r3, #0]
   13dac:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13db4:	681b      	ldr	r3, [r3, #0]
   13db6:	4618      	mov	r0, r3
   13db8:	f04f 0100 	mov.w	r1, #0
   13dbc:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13dc0:	f004 fc6c 	bl	1869c <__aeabi_fcmpge>
   13dc4:	4603      	mov	r3, r0
   13dc6:	2b00      	cmp	r3, #0
   13dc8:	d1dd      	bne.n	13d86 <auto_nav+0x17fe>
        return;
   13dca:	f000 bcaf 	b.w	1472c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13dce:	f24c 6370 	movw	r3, #50800	; 0xc670
   13dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dd6:	781b      	ldrb	r3, [r3, #0]
   13dd8:	2b01      	cmp	r3, #1
   13dda:	f040 84a7 	bne.w	1472c <auto_nav+0x21a4>
    {
        nav_stage =1;
   13dde:	f24c 6370 	movw	r3, #50800	; 0xc670
   13de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13de6:	2201      	movs	r2, #1
   13de8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13dea:	f24c 6371 	movw	r3, #50801	; 0xc671
   13dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13df2:	781b      	ldrb	r3, [r3, #0]
   13df4:	3301      	adds	r3, #1
   13df6:	b2da      	uxtb	r2, r3
   13df8:	f24c 6371 	movw	r3, #50801	; 0xc671
   13dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e00:	701a      	strb	r2, [r3, #0]
   13e02:	f24c 6370 	movw	r3, #50800	; 0xc670
   13e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e0a:	2200      	movs	r2, #0
   13e0c:	701a      	strb	r2, [r3, #0]
   13e0e:	f24c 6386 	movw	r3, #50822	; 0xc686
   13e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e16:	2200      	movs	r2, #0
   13e18:	801a      	strh	r2, [r3, #0]
   13e1a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e22:	681a      	ldr	r2, [r3, #0]
   13e24:	f24c 6374 	movw	r3, #50804	; 0xc674
   13e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e2c:	601a      	str	r2, [r3, #0]
   13e2e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e36:	681a      	ldr	r2, [r3, #0]
   13e38:	f24c 6378 	movw	r3, #50808	; 0xc678
   13e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e40:	601a      	str	r2, [r3, #0]
   13e42:	f24c 6384 	movw	r3, #50820	; 0xc684
   13e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e4a:	2200      	movs	r2, #0
   13e4c:	801a      	strh	r2, [r3, #0]
   13e4e:	f24c 6388 	movw	r3, #50824	; 0xc688
   13e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e56:	f04f 0200 	mov.w	r2, #0
   13e5a:	601a      	str	r2, [r3, #0]
   13e5c:	f000 bc66 	b.w	1472c <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13e60:	f24c 6371 	movw	r3, #50801	; 0xc671
   13e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e68:	781b      	ldrb	r3, [r3, #0]
   13e6a:	2b05      	cmp	r3, #5
   13e6c:	f040 845e 	bne.w	1472c <auto_nav+0x21a4>
{
    nav_block = 5;
   13e70:	f24c 6371 	movw	r3, #50801	; 0xc671
   13e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e78:	2205      	movs	r2, #5
   13e7a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13e7c:	f24c 3300 	movw	r3, #49920	; 0xc300
   13e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e84:	781b      	ldrb	r3, [r3, #0]
   13e86:	2b00      	cmp	r3, #0
   13e88:	d007      	beq.n	13e9a <auto_nav+0x1912>
   13e8a:	f24c 3300 	movw	r3, #49920	; 0xc300
   13e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e92:	2200      	movs	r2, #0
   13e94:	701a      	strb	r2, [r3, #0]
   13e96:	2301      	movs	r3, #1
   13e98:	e000      	b.n	13e9c <auto_nav+0x1914>
   13e9a:	2300      	movs	r3, #0
   13e9c:	2b00      	cmp	r3, #0
   13e9e:	d043      	beq.n	13f28 <auto_nav+0x19a0>
   13ea0:	f24c 6371 	movw	r3, #50801	; 0xc671
   13ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ea8:	2201      	movs	r2, #1
   13eaa:	701a      	strb	r2, [r3, #0]
   13eac:	f24c 6370 	movw	r3, #50800	; 0xc670
   13eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eb4:	2200      	movs	r2, #0
   13eb6:	701a      	strb	r2, [r3, #0]
   13eb8:	f24c 6386 	movw	r3, #50822	; 0xc686
   13ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ec0:	2200      	movs	r2, #0
   13ec2:	801a      	strh	r2, [r3, #0]
   13ec4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ecc:	681a      	ldr	r2, [r3, #0]
   13ece:	f24c 6374 	movw	r3, #50804	; 0xc674
   13ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed6:	601a      	str	r2, [r3, #0]
   13ed8:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ee0:	681a      	ldr	r2, [r3, #0]
   13ee2:	f24c 6378 	movw	r3, #50808	; 0xc678
   13ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eea:	601a      	str	r2, [r3, #0]
   13eec:	f24c 6384 	movw	r3, #50820	; 0xc684
   13ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ef4:	2200      	movs	r2, #0
   13ef6:	801a      	strh	r2, [r3, #0]
   13ef8:	f24c 6388 	movw	r3, #50824	; 0xc688
   13efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f00:	f04f 0200 	mov.w	r2, #0
   13f04:	601a      	str	r2, [r3, #0]
   13f06:	f000 bc11 	b.w	1472c <auto_nav+0x21a4>
   13f0a:	bf00      	nop
   13f0c:	f3af 8000 	nop.w
   13f10:	54442d18 	.word	0x54442d18
   13f14:	3ff921fb 	.word	0x3ff921fb
   13f18:	00000000 	.word	0x00000000
   13f1c:	4062c000 	.word	0x4062c000
   13f20:	54442d18 	.word	0x54442d18
   13f24:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13f28:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f30:	781b      	ldrb	r3, [r3, #0]
   13f32:	2b00      	cmp	r3, #0
   13f34:	d133      	bne.n	13f9e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13f36:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f3e:	2200      	movs	r2, #0
   13f40:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13f42:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f4a:	781b      	ldrb	r3, [r3, #0]
   13f4c:	3301      	adds	r3, #1
   13f4e:	b2da      	uxtb	r2, r3
   13f50:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f58:	701a      	strb	r2, [r3, #0]
   13f5a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f62:	681a      	ldr	r2, [r3, #0]
   13f64:	f24c 6374 	movw	r3, #50804	; 0xc674
   13f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f6c:	601a      	str	r2, [r3, #0]
   13f6e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f76:	681a      	ldr	r2, [r3, #0]
   13f78:	f24c 6378 	movw	r3, #50808	; 0xc678
   13f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f80:	601a      	str	r2, [r3, #0]
   13f82:	f24c 6384 	movw	r3, #50820	; 0xc684
   13f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f8a:	2200      	movs	r2, #0
   13f8c:	801a      	strh	r2, [r3, #0]
   13f8e:	f24c 6388 	movw	r3, #50824	; 0xc688
   13f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f96:	f04f 0200 	mov.w	r2, #0
   13f9a:	601a      	str	r2, [r3, #0]
   13f9c:	e3c6      	b.n	1472c <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13f9e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fa6:	781b      	ldrb	r3, [r3, #0]
   13fa8:	2b01      	cmp	r3, #1
   13faa:	f040 81b5 	bne.w	14318 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13fae:	f24c 6370 	movw	r3, #50800	; 0xc670
   13fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb6:	2201      	movs	r2, #1
   13fb8:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13fba:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fc2:	2200      	movs	r2, #0
   13fc4:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13fc6:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fce:	f04f 0200 	mov.w	r2, #0
   13fd2:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13fd4:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fdc:	2203      	movs	r2, #3
   13fde:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13fe0:	f240 5378 	movw	r3, #1400	; 0x578
   13fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fe8:	695a      	ldr	r2, [r3, #20]
   13fea:	f240 5374 	movw	r3, #1396	; 0x574
   13fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ff2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13ff4:	f24c 6364 	movw	r3, #50788	; 0xc664
   13ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ffc:	f04f 0200 	mov.w	r2, #0
   14000:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   14002:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1400a:	681a      	ldr	r2, [r3, #0]
   1400c:	f240 5378 	movw	r3, #1400	; 0x578
   14010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14014:	691b      	ldr	r3, [r3, #16]
   14016:	4610      	mov	r0, r2
   14018:	4619      	mov	r1, r3
   1401a:	f004 f883 	bl	18124 <__aeabi_fsub>
   1401e:	4603      	mov	r3, r0
   14020:	4618      	mov	r0, r3
   14022:	f003 fcf5 	bl	17a10 <__aeabi_f2d>
   14026:	4604      	mov	r4, r0
   14028:	460d      	mov	r5, r1
   1402a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1402e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14032:	681a      	ldr	r2, [r3, #0]
   14034:	f240 5378 	movw	r3, #1400	; 0x578
   14038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1403c:	68db      	ldr	r3, [r3, #12]
   1403e:	4610      	mov	r0, r2
   14040:	4619      	mov	r1, r3
   14042:	f004 f86f 	bl	18124 <__aeabi_fsub>
   14046:	4603      	mov	r3, r0
   14048:	4618      	mov	r0, r3
   1404a:	f003 fce1 	bl	17a10 <__aeabi_f2d>
   1404e:	4602      	mov	r2, r0
   14050:	460b      	mov	r3, r1
   14052:	4620      	mov	r0, r4
   14054:	4629      	mov	r1, r5
   14056:	f001 fdb7 	bl	15bc8 <pp_atan2>
   1405a:	4602      	mov	r2, r0
   1405c:	460b      	mov	r3, r1
   1405e:	4610      	mov	r0, r2
   14060:	4619      	mov	r1, r3
   14062:	f004 f80b 	bl	1807c <__aeabi_d2f>
   14066:	4603      	mov	r3, r0
   14068:	60fb      	str	r3, [r7, #12]
   1406a:	68f8      	ldr	r0, [r7, #12]
   1406c:	f003 fcd0 	bl	17a10 <__aeabi_f2d>
   14070:	4604      	mov	r4, r0
   14072:	460d      	mov	r5, r1
   14074:	f64c 1304 	movw	r3, #51460	; 0xc904
   14078:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1407c:	681b      	ldr	r3, [r3, #0]
   1407e:	4618      	mov	r0, r3
   14080:	f04f 0100 	mov.w	r1, #0
   14084:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14088:	f004 f956 	bl	18338 <__aeabi_fmul>
   1408c:	4603      	mov	r3, r0
   1408e:	4618      	mov	r0, r3
   14090:	f003 fcbe 	bl	17a10 <__aeabi_f2d>
   14094:	4602      	mov	r2, r0
   14096:	460b      	mov	r3, r1
   14098:	f04f 0000 	mov.w	r0, #0
   1409c:	f04f 0100 	mov.w	r1, #0
   140a0:	f2c4 0114 	movt	r1, #16404	; 0x4014
   140a4:	f003 fe32 	bl	17d0c <__aeabi_ddiv>
   140a8:	4602      	mov	r2, r0
   140aa:	460b      	mov	r3, r1
   140ac:	4620      	mov	r0, r4
   140ae:	4629      	mov	r1, r5
   140b0:	f003 fb50 	bl	17754 <__adddf3>
   140b4:	4602      	mov	r2, r0
   140b6:	460b      	mov	r3, r1
   140b8:	4610      	mov	r0, r2
   140ba:	4619      	mov	r1, r3
   140bc:	f003 ffde 	bl	1807c <__aeabi_d2f>
   140c0:	4603      	mov	r3, r0
   140c2:	60bb      	str	r3, [r7, #8]
   140c4:	f240 5378 	movw	r3, #1400	; 0x578
   140c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140cc:	68db      	ldr	r3, [r3, #12]
   140ce:	4618      	mov	r0, r3
   140d0:	f003 fc9e 	bl	17a10 <__aeabi_f2d>
   140d4:	4604      	mov	r4, r0
   140d6:	460d      	mov	r5, r1
   140d8:	68b8      	ldr	r0, [r7, #8]
   140da:	f003 fc99 	bl	17a10 <__aeabi_f2d>
   140de:	4602      	mov	r2, r0
   140e0:	460b      	mov	r3, r1
   140e2:	4610      	mov	r0, r2
   140e4:	4619      	mov	r1, r3
   140e6:	a388      	add	r3, pc, #544	; (adr r3, 14308 <auto_nav+0x1d80>)
   140e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   140ec:	f003 fb32 	bl	17754 <__adddf3>
   140f0:	4602      	mov	r2, r0
   140f2:	460b      	mov	r3, r1
   140f4:	4610      	mov	r0, r2
   140f6:	4619      	mov	r1, r3
   140f8:	f001 fe26 	bl	15d48 <pp_sin>
   140fc:	4602      	mov	r2, r0
   140fe:	460b      	mov	r3, r1
   14100:	4610      	mov	r0, r2
   14102:	4619      	mov	r1, r3
   14104:	f04f 0200 	mov.w	r2, #0
   14108:	f04f 0300 	mov.w	r3, #0
   1410c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14110:	f003 fcd2 	bl	17ab8 <__aeabi_dmul>
   14114:	4602      	mov	r2, r0
   14116:	460b      	mov	r3, r1
   14118:	4620      	mov	r0, r4
   1411a:	4629      	mov	r1, r5
   1411c:	f003 fb1a 	bl	17754 <__adddf3>
   14120:	4602      	mov	r2, r0
   14122:	460b      	mov	r3, r1
   14124:	4610      	mov	r0, r2
   14126:	4619      	mov	r1, r3
   14128:	f003 ffa8 	bl	1807c <__aeabi_d2f>
   1412c:	4606      	mov	r6, r0
   1412e:	f240 5378 	movw	r3, #1400	; 0x578
   14132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14136:	691b      	ldr	r3, [r3, #16]
   14138:	4618      	mov	r0, r3
   1413a:	f003 fc69 	bl	17a10 <__aeabi_f2d>
   1413e:	4604      	mov	r4, r0
   14140:	460d      	mov	r5, r1
   14142:	68b8      	ldr	r0, [r7, #8]
   14144:	f003 fc64 	bl	17a10 <__aeabi_f2d>
   14148:	4602      	mov	r2, r0
   1414a:	460b      	mov	r3, r1
   1414c:	4610      	mov	r0, r2
   1414e:	4619      	mov	r1, r3
   14150:	f001 fdfa 	bl	15d48 <pp_sin>
   14154:	4602      	mov	r2, r0
   14156:	460b      	mov	r3, r1
   14158:	4610      	mov	r0, r2
   1415a:	4619      	mov	r1, r3
   1415c:	f04f 0200 	mov.w	r2, #0
   14160:	f04f 0300 	mov.w	r3, #0
   14164:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14168:	f003 fca6 	bl	17ab8 <__aeabi_dmul>
   1416c:	4602      	mov	r2, r0
   1416e:	460b      	mov	r3, r1
   14170:	4620      	mov	r0, r4
   14172:	4629      	mov	r1, r5
   14174:	f003 faee 	bl	17754 <__adddf3>
   14178:	4602      	mov	r2, r0
   1417a:	460b      	mov	r3, r1
   1417c:	4610      	mov	r0, r2
   1417e:	4619      	mov	r1, r3
   14180:	f003 ff7c 	bl	1807c <__aeabi_d2f>
   14184:	4603      	mov	r3, r0
   14186:	4630      	mov	r0, r6
   14188:	4619      	mov	r1, r3
   1418a:	f000 fbc1 	bl	14910 <fly_to_xy>
   1418e:	68b8      	ldr	r0, [r7, #8]
   14190:	f003 fc3e 	bl	17a10 <__aeabi_f2d>
   14194:	4602      	mov	r2, r0
   14196:	460b      	mov	r3, r1
   14198:	a15b      	add	r1, pc, #364	; (adr r1, 14308 <auto_nav+0x1d80>)
   1419a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1419e:	f003 fad7 	bl	17750 <__aeabi_dsub>
   141a2:	4602      	mov	r2, r0
   141a4:	460b      	mov	r3, r1
   141a6:	4610      	mov	r0, r2
   141a8:	4619      	mov	r1, r3
   141aa:	a359      	add	r3, pc, #356	; (adr r3, 14310 <auto_nav+0x1d88>)
   141ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   141b0:	f003 fdac 	bl	17d0c <__aeabi_ddiv>
   141b4:	4602      	mov	r2, r0
   141b6:	460b      	mov	r3, r1
   141b8:	4610      	mov	r0, r2
   141ba:	4619      	mov	r1, r3
   141bc:	f04f 0200 	mov.w	r2, #0
   141c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   141c4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   141c8:	f003 fc76 	bl	17ab8 <__aeabi_dmul>
   141cc:	4602      	mov	r2, r0
   141ce:	460b      	mov	r3, r1
   141d0:	4610      	mov	r0, r2
   141d2:	4619      	mov	r1, r3
   141d4:	f003 ff52 	bl	1807c <__aeabi_d2f>
   141d8:	4602      	mov	r2, r0
   141da:	f24c 638c 	movw	r3, #50828	; 0xc68c
   141de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141e2:	601a      	str	r2, [r3, #0]
   141e4:	e012      	b.n	1420c <auto_nav+0x1c84>
   141e6:	f24c 638c 	movw	r3, #50828	; 0xc68c
   141ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141ee:	681b      	ldr	r3, [r3, #0]
   141f0:	4618      	mov	r0, r3
   141f2:	f04f 0100 	mov.w	r1, #0
   141f6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   141fa:	f003 ff95 	bl	18128 <__addsf3>
   141fe:	4603      	mov	r3, r0
   14200:	461a      	mov	r2, r3
   14202:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1420a:	601a      	str	r2, [r3, #0]
   1420c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14214:	681b      	ldr	r3, [r3, #0]
   14216:	4618      	mov	r0, r3
   14218:	f04f 0100 	mov.w	r1, #0
   1421c:	f004 fa2a 	bl	18674 <__aeabi_fcmplt>
   14220:	4603      	mov	r3, r0
   14222:	2b00      	cmp	r3, #0
   14224:	d1df      	bne.n	141e6 <auto_nav+0x1c5e>
   14226:	e012      	b.n	1424e <auto_nav+0x1cc6>
   14228:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1422c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14230:	681b      	ldr	r3, [r3, #0]
   14232:	4618      	mov	r0, r3
   14234:	f04f 0100 	mov.w	r1, #0
   14238:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1423c:	f003 ff72 	bl	18124 <__aeabi_fsub>
   14240:	4603      	mov	r3, r0
   14242:	461a      	mov	r2, r3
   14244:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1424c:	601a      	str	r2, [r3, #0]
   1424e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14256:	681b      	ldr	r3, [r3, #0]
   14258:	4618      	mov	r0, r3
   1425a:	f04f 0100 	mov.w	r1, #0
   1425e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14262:	f004 fa1b 	bl	1869c <__aeabi_fcmpge>
   14266:	4603      	mov	r3, r0
   14268:	2b00      	cmp	r3, #0
   1426a:	d1dd      	bne.n	14228 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   1426c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14274:	681b      	ldr	r3, [r3, #0]
   14276:	4618      	mov	r0, r3
   14278:	f04f 0100 	mov.w	r1, #0
   1427c:	f004 fa18 	bl	186b0 <__aeabi_fcmpgt>
   14280:	4603      	mov	r3, r0
   14282:	2b00      	cmp	r3, #0
   14284:	d100      	bne.n	14288 <auto_nav+0x1d00>
        return;
   14286:	e251      	b.n	1472c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14288:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1428c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14290:	681b      	ldr	r3, [r3, #0]
   14292:	4618      	mov	r0, r3
   14294:	f04f 0100 	mov.w	r1, #0
   14298:	f2c4 1120 	movt	r1, #16672	; 0x4120
   1429c:	f004 f9ea 	bl	18674 <__aeabi_fcmplt>
   142a0:	4603      	mov	r3, r0
   142a2:	2b00      	cmp	r3, #0
   142a4:	d100      	bne.n	142a8 <auto_nav+0x1d20>
        return;
   142a6:	e241      	b.n	1472c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   142a8:	f24c 6370 	movw	r3, #50800	; 0xc670
   142ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142b0:	781b      	ldrb	r3, [r3, #0]
   142b2:	3301      	adds	r3, #1
   142b4:	b2da      	uxtb	r2, r3
   142b6:	f24c 6370 	movw	r3, #50800	; 0xc670
   142ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142be:	701a      	strb	r2, [r3, #0]
   142c0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   142c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142c8:	681a      	ldr	r2, [r3, #0]
   142ca:	f24c 6374 	movw	r3, #50804	; 0xc674
   142ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142d2:	601a      	str	r2, [r3, #0]
   142d4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   142d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142dc:	681a      	ldr	r2, [r3, #0]
   142de:	f24c 6378 	movw	r3, #50808	; 0xc678
   142e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142e6:	601a      	str	r2, [r3, #0]
   142e8:	f24c 6384 	movw	r3, #50820	; 0xc684
   142ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142f0:	2200      	movs	r2, #0
   142f2:	801a      	strh	r2, [r3, #0]
   142f4:	f24c 6388 	movw	r3, #50824	; 0xc688
   142f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142fc:	f04f 0200 	mov.w	r2, #0
   14300:	601a      	str	r2, [r3, #0]
   14302:	e213      	b.n	1472c <auto_nav+0x21a4>
   14304:	f3af 8000 	nop.w
   14308:	54442d18 	.word	0x54442d18
   1430c:	3ff921fb 	.word	0x3ff921fb
   14310:	54442d18 	.word	0x54442d18
   14314:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   14318:	f24c 6370 	movw	r3, #50800	; 0xc670
   1431c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14320:	781b      	ldrb	r3, [r3, #0]
   14322:	2b02      	cmp	r3, #2
   14324:	f040 81ad 	bne.w	14682 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14328:	f24c 6370 	movw	r3, #50800	; 0xc670
   1432c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14330:	2202      	movs	r2, #2
   14332:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   14334:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   14338:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1433c:	2200      	movs	r2, #0
   1433e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14340:	f24c 639c 	movw	r3, #50844	; 0xc69c
   14344:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14348:	f04f 0200 	mov.w	r2, #0
   1434c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1434e:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14352:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14356:	2203      	movs	r2, #3
   14358:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   1435a:	f240 5378 	movw	r3, #1400	; 0x578
   1435e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14364:	f240 5374 	movw	r3, #1396	; 0x574
   14368:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1436c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   1436e:	f24c 6364 	movw	r3, #50788	; 0xc664
   14372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14376:	f04f 0200 	mov.w	r2, #0
   1437a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   1437c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14384:	681a      	ldr	r2, [r3, #0]
   14386:	f240 5378 	movw	r3, #1400	; 0x578
   1438a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1438e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14390:	4610      	mov	r0, r2
   14392:	4619      	mov	r1, r3
   14394:	f003 fec6 	bl	18124 <__aeabi_fsub>
   14398:	4603      	mov	r3, r0
   1439a:	4618      	mov	r0, r3
   1439c:	f003 fb38 	bl	17a10 <__aeabi_f2d>
   143a0:	4604      	mov	r4, r0
   143a2:	460d      	mov	r5, r1
   143a4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   143a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ac:	681a      	ldr	r2, [r3, #0]
   143ae:	f240 5378 	movw	r3, #1400	; 0x578
   143b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   143b8:	4610      	mov	r0, r2
   143ba:	4619      	mov	r1, r3
   143bc:	f003 feb2 	bl	18124 <__aeabi_fsub>
   143c0:	4603      	mov	r3, r0
   143c2:	4618      	mov	r0, r3
   143c4:	f003 fb24 	bl	17a10 <__aeabi_f2d>
   143c8:	4602      	mov	r2, r0
   143ca:	460b      	mov	r3, r1
   143cc:	4620      	mov	r0, r4
   143ce:	4629      	mov	r1, r5
   143d0:	f001 fbfa 	bl	15bc8 <pp_atan2>
   143d4:	4602      	mov	r2, r0
   143d6:	460b      	mov	r3, r1
   143d8:	4610      	mov	r0, r2
   143da:	4619      	mov	r1, r3
   143dc:	f003 fe4e 	bl	1807c <__aeabi_d2f>
   143e0:	4603      	mov	r3, r0
   143e2:	607b      	str	r3, [r7, #4]
   143e4:	6878      	ldr	r0, [r7, #4]
   143e6:	f003 fb13 	bl	17a10 <__aeabi_f2d>
   143ea:	4604      	mov	r4, r0
   143ec:	460d      	mov	r5, r1
   143ee:	f64c 1304 	movw	r3, #51460	; 0xc904
   143f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143f6:	681b      	ldr	r3, [r3, #0]
   143f8:	4618      	mov	r0, r3
   143fa:	f04f 0100 	mov.w	r1, #0
   143fe:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14402:	f003 ff99 	bl	18338 <__aeabi_fmul>
   14406:	4603      	mov	r3, r0
   14408:	4618      	mov	r0, r3
   1440a:	f003 fb01 	bl	17a10 <__aeabi_f2d>
   1440e:	4602      	mov	r2, r0
   14410:	460b      	mov	r3, r1
   14412:	f04f 0000 	mov.w	r0, #0
   14416:	f04f 0100 	mov.w	r1, #0
   1441a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1441e:	f003 fc75 	bl	17d0c <__aeabi_ddiv>
   14422:	4602      	mov	r2, r0
   14424:	460b      	mov	r3, r1
   14426:	4620      	mov	r0, r4
   14428:	4629      	mov	r1, r5
   1442a:	f003 f993 	bl	17754 <__adddf3>
   1442e:	4602      	mov	r2, r0
   14430:	460b      	mov	r3, r1
   14432:	4610      	mov	r0, r2
   14434:	4619      	mov	r1, r3
   14436:	f003 fe21 	bl	1807c <__aeabi_d2f>
   1443a:	4603      	mov	r3, r0
   1443c:	603b      	str	r3, [r7, #0]
   1443e:	f240 5378 	movw	r3, #1400	; 0x578
   14442:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14448:	4618      	mov	r0, r3
   1444a:	f003 fae1 	bl	17a10 <__aeabi_f2d>
   1444e:	4604      	mov	r4, r0
   14450:	460d      	mov	r5, r1
   14452:	6838      	ldr	r0, [r7, #0]
   14454:	f003 fadc 	bl	17a10 <__aeabi_f2d>
   14458:	4602      	mov	r2, r0
   1445a:	460b      	mov	r3, r1
   1445c:	4610      	mov	r0, r2
   1445e:	4619      	mov	r1, r3
   14460:	a3b5      	add	r3, pc, #724	; (adr r3, 14738 <auto_nav+0x21b0>)
   14462:	e9d3 2300 	ldrd	r2, r3, [r3]
   14466:	f003 f975 	bl	17754 <__adddf3>
   1446a:	4602      	mov	r2, r0
   1446c:	460b      	mov	r3, r1
   1446e:	4610      	mov	r0, r2
   14470:	4619      	mov	r1, r3
   14472:	f001 fc69 	bl	15d48 <pp_sin>
   14476:	4602      	mov	r2, r0
   14478:	460b      	mov	r3, r1
   1447a:	4610      	mov	r0, r2
   1447c:	4619      	mov	r1, r3
   1447e:	f04f 0200 	mov.w	r2, #0
   14482:	f04f 0300 	mov.w	r3, #0
   14486:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1448a:	f003 fb15 	bl	17ab8 <__aeabi_dmul>
   1448e:	4602      	mov	r2, r0
   14490:	460b      	mov	r3, r1
   14492:	4620      	mov	r0, r4
   14494:	4629      	mov	r1, r5
   14496:	f003 f95d 	bl	17754 <__adddf3>
   1449a:	4602      	mov	r2, r0
   1449c:	460b      	mov	r3, r1
   1449e:	4610      	mov	r0, r2
   144a0:	4619      	mov	r1, r3
   144a2:	f003 fdeb 	bl	1807c <__aeabi_d2f>
   144a6:	4606      	mov	r6, r0
   144a8:	f240 5378 	movw	r3, #1400	; 0x578
   144ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   144b2:	4618      	mov	r0, r3
   144b4:	f003 faac 	bl	17a10 <__aeabi_f2d>
   144b8:	4604      	mov	r4, r0
   144ba:	460d      	mov	r5, r1
   144bc:	6838      	ldr	r0, [r7, #0]
   144be:	f003 faa7 	bl	17a10 <__aeabi_f2d>
   144c2:	4602      	mov	r2, r0
   144c4:	460b      	mov	r3, r1
   144c6:	4610      	mov	r0, r2
   144c8:	4619      	mov	r1, r3
   144ca:	f001 fc3d 	bl	15d48 <pp_sin>
   144ce:	4602      	mov	r2, r0
   144d0:	460b      	mov	r3, r1
   144d2:	4610      	mov	r0, r2
   144d4:	4619      	mov	r1, r3
   144d6:	f04f 0200 	mov.w	r2, #0
   144da:	f04f 0300 	mov.w	r3, #0
   144de:	f2c4 0359 	movt	r3, #16473	; 0x4059
   144e2:	f003 fae9 	bl	17ab8 <__aeabi_dmul>
   144e6:	4602      	mov	r2, r0
   144e8:	460b      	mov	r3, r1
   144ea:	4620      	mov	r0, r4
   144ec:	4629      	mov	r1, r5
   144ee:	f003 f931 	bl	17754 <__adddf3>
   144f2:	4602      	mov	r2, r0
   144f4:	460b      	mov	r3, r1
   144f6:	4610      	mov	r0, r2
   144f8:	4619      	mov	r1, r3
   144fa:	f003 fdbf 	bl	1807c <__aeabi_d2f>
   144fe:	4603      	mov	r3, r0
   14500:	4630      	mov	r0, r6
   14502:	4619      	mov	r1, r3
   14504:	f000 fa04 	bl	14910 <fly_to_xy>
   14508:	6838      	ldr	r0, [r7, #0]
   1450a:	f003 fa81 	bl	17a10 <__aeabi_f2d>
   1450e:	4602      	mov	r2, r0
   14510:	460b      	mov	r3, r1
   14512:	a189      	add	r1, pc, #548	; (adr r1, 14738 <auto_nav+0x21b0>)
   14514:	e9d1 0100 	ldrd	r0, r1, [r1]
   14518:	f003 f91a 	bl	17750 <__aeabi_dsub>
   1451c:	4602      	mov	r2, r0
   1451e:	460b      	mov	r3, r1
   14520:	4610      	mov	r0, r2
   14522:	4619      	mov	r1, r3
   14524:	a386      	add	r3, pc, #536	; (adr r3, 14740 <auto_nav+0x21b8>)
   14526:	e9d3 2300 	ldrd	r2, r3, [r3]
   1452a:	f003 fbef 	bl	17d0c <__aeabi_ddiv>
   1452e:	4602      	mov	r2, r0
   14530:	460b      	mov	r3, r1
   14532:	4610      	mov	r0, r2
   14534:	4619      	mov	r1, r3
   14536:	f04f 0200 	mov.w	r2, #0
   1453a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1453e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14542:	f003 fab9 	bl	17ab8 <__aeabi_dmul>
   14546:	4602      	mov	r2, r0
   14548:	460b      	mov	r3, r1
   1454a:	4610      	mov	r0, r2
   1454c:	4619      	mov	r1, r3
   1454e:	f003 fd95 	bl	1807c <__aeabi_d2f>
   14552:	4602      	mov	r2, r0
   14554:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1455c:	601a      	str	r2, [r3, #0]
   1455e:	e012      	b.n	14586 <auto_nav+0x1ffe>
   14560:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14568:	681b      	ldr	r3, [r3, #0]
   1456a:	4618      	mov	r0, r3
   1456c:	f04f 0100 	mov.w	r1, #0
   14570:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14574:	f003 fdd8 	bl	18128 <__addsf3>
   14578:	4603      	mov	r3, r0
   1457a:	461a      	mov	r2, r3
   1457c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14584:	601a      	str	r2, [r3, #0]
   14586:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1458a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1458e:	681b      	ldr	r3, [r3, #0]
   14590:	4618      	mov	r0, r3
   14592:	f04f 0100 	mov.w	r1, #0
   14596:	f004 f86d 	bl	18674 <__aeabi_fcmplt>
   1459a:	4603      	mov	r3, r0
   1459c:	2b00      	cmp	r3, #0
   1459e:	d1df      	bne.n	14560 <auto_nav+0x1fd8>
   145a0:	e012      	b.n	145c8 <auto_nav+0x2040>
   145a2:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145aa:	681b      	ldr	r3, [r3, #0]
   145ac:	4618      	mov	r0, r3
   145ae:	f04f 0100 	mov.w	r1, #0
   145b2:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   145b6:	f003 fdb5 	bl	18124 <__aeabi_fsub>
   145ba:	4603      	mov	r3, r0
   145bc:	461a      	mov	r2, r3
   145be:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145c6:	601a      	str	r2, [r3, #0]
   145c8:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145d0:	681b      	ldr	r3, [r3, #0]
   145d2:	4618      	mov	r0, r3
   145d4:	f04f 0100 	mov.w	r1, #0
   145d8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   145dc:	f004 f85e 	bl	1869c <__aeabi_fcmpge>
   145e0:	4603      	mov	r3, r0
   145e2:	2b00      	cmp	r3, #0
   145e4:	d1dd      	bne.n	145a2 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   145e6:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145ee:	681b      	ldr	r3, [r3, #0]
   145f0:	4618      	mov	r0, r3
   145f2:	f04f 0100 	mov.w	r1, #0
   145f6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   145fa:	f004 f859 	bl	186b0 <__aeabi_fcmpgt>
   145fe:	4603      	mov	r3, r0
   14600:	2b00      	cmp	r3, #0
   14602:	d100      	bne.n	14606 <auto_nav+0x207e>
          return;
   14604:	e092      	b.n	1472c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14606:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1460a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1460e:	681b      	ldr	r3, [r3, #0]
   14610:	4618      	mov	r0, r3
   14612:	f04f 0100 	mov.w	r1, #0
   14616:	f2c4 313e 	movt	r1, #17214	; 0x433e
   1461a:	f004 f82b 	bl	18674 <__aeabi_fcmplt>
   1461e:	4603      	mov	r3, r0
   14620:	2b00      	cmp	r3, #0
   14622:	d100      	bne.n	14626 <auto_nav+0x209e>
          return;
   14624:	e082      	b.n	1472c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14626:	f24c 6370 	movw	r3, #50800	; 0xc670
   1462a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1462e:	781b      	ldrb	r3, [r3, #0]
   14630:	3301      	adds	r3, #1
   14632:	b2da      	uxtb	r2, r3
   14634:	f24c 6370 	movw	r3, #50800	; 0xc670
   14638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1463c:	701a      	strb	r2, [r3, #0]
   1463e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14646:	681a      	ldr	r2, [r3, #0]
   14648:	f24c 6374 	movw	r3, #50804	; 0xc674
   1464c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14650:	601a      	str	r2, [r3, #0]
   14652:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14656:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1465a:	681a      	ldr	r2, [r3, #0]
   1465c:	f24c 6378 	movw	r3, #50808	; 0xc678
   14660:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14664:	601a      	str	r2, [r3, #0]
   14666:	f24c 6384 	movw	r3, #50820	; 0xc684
   1466a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1466e:	2200      	movs	r2, #0
   14670:	801a      	strh	r2, [r3, #0]
   14672:	f24c 6388 	movw	r3, #50824	; 0xc688
   14676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1467a:	f04f 0200 	mov.w	r2, #0
   1467e:	601a      	str	r2, [r3, #0]
   14680:	e054      	b.n	1472c <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   14682:	f24c 6370 	movw	r3, #50800	; 0xc670
   14686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1468a:	781b      	ldrb	r3, [r3, #0]
   1468c:	2b03      	cmp	r3, #3
   1468e:	d106      	bne.n	1469e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14690:	f24c 6370 	movw	r3, #50800	; 0xc670
   14694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14698:	2203      	movs	r2, #3
   1469a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   1469c:	e44b      	b.n	13f36 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   1469e:	f24c 6370 	movw	r3, #50800	; 0xc670
   146a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146a6:	781b      	ldrb	r3, [r3, #0]
   146a8:	2b04      	cmp	r3, #4
   146aa:	d13f      	bne.n	1472c <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   146ac:	f24c 6370 	movw	r3, #50800	; 0xc670
   146b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b4:	2204      	movs	r2, #4
   146b6:	701a      	strb	r2, [r3, #0]
        NextBlock()
   146b8:	f24c 6371 	movw	r3, #50801	; 0xc671
   146bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146c0:	781b      	ldrb	r3, [r3, #0]
   146c2:	3301      	adds	r3, #1
   146c4:	b2da      	uxtb	r2, r3
   146c6:	f24c 6371 	movw	r3, #50801	; 0xc671
   146ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146ce:	701a      	strb	r2, [r3, #0]
   146d0:	f24c 6370 	movw	r3, #50800	; 0xc670
   146d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146d8:	2200      	movs	r2, #0
   146da:	701a      	strb	r2, [r3, #0]
   146dc:	f24c 6386 	movw	r3, #50822	; 0xc686
   146e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146e4:	2200      	movs	r2, #0
   146e6:	801a      	strh	r2, [r3, #0]
   146e8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   146ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146f0:	681a      	ldr	r2, [r3, #0]
   146f2:	f24c 6374 	movw	r3, #50804	; 0xc674
   146f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146fa:	601a      	str	r2, [r3, #0]
   146fc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14700:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14704:	681a      	ldr	r2, [r3, #0]
   14706:	f24c 6378 	movw	r3, #50808	; 0xc678
   1470a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1470e:	601a      	str	r2, [r3, #0]
   14710:	f24c 6384 	movw	r3, #50820	; 0xc684
   14714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14718:	2200      	movs	r2, #0
   1471a:	801a      	strh	r2, [r3, #0]
   1471c:	f24c 6388 	movw	r3, #50824	; 0xc688
   14720:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14724:	f04f 0200 	mov.w	r2, #0
   14728:	601a      	str	r2, [r3, #0]
   1472a:	bf00      	nop
    else { }
}
else { }

//#endif
}
   1472c:	372c      	adds	r7, #44	; 0x2c
   1472e:	46bd      	mov	sp, r7
   14730:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14732:	bf00      	nop
   14734:	f3af 8000 	nop.w
   14738:	54442d18 	.word	0x54442d18
   1473c:	3ff921fb 	.word	0x3ff921fb
   14740:	54442d18 	.word	0x54442d18
   14744:	400921fb 	.word	0x400921fb

00014748 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14748:	b590      	push	{r4, r7, lr}
   1474a:	b087      	sub	sp, #28
   1474c:	af00      	add	r7, sp, #0
   1474e:	4603      	mov	r3, r0
   14750:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   14752:	79f9      	ldrb	r1, [r7, #7]
   14754:	f240 5278 	movw	r2, #1400	; 0x578
   14758:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1475c:	460b      	mov	r3, r1
   1475e:	005b      	lsls	r3, r3, #1
   14760:	440b      	add	r3, r1
   14762:	009b      	lsls	r3, r3, #2
   14764:	4413      	add	r3, r2
   14766:	681a      	ldr	r2, [r3, #0]
   14768:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1476c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14770:	681b      	ldr	r3, [r3, #0]
   14772:	4610      	mov	r0, r2
   14774:	4619      	mov	r1, r3
   14776:	f003 fcd5 	bl	18124 <__aeabi_fsub>
   1477a:	4603      	mov	r3, r0
   1477c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1477e:	79f9      	ldrb	r1, [r7, #7]
   14780:	f240 5278 	movw	r2, #1400	; 0x578
   14784:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14788:	460b      	mov	r3, r1
   1478a:	005b      	lsls	r3, r3, #1
   1478c:	440b      	add	r3, r1
   1478e:	009b      	lsls	r3, r3, #2
   14790:	4413      	add	r3, r2
   14792:	3304      	adds	r3, #4
   14794:	681a      	ldr	r2, [r3, #0]
   14796:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1479a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	4610      	mov	r0, r2
   147a2:	4619      	mov	r1, r3
   147a4:	f003 fcbe 	bl	18124 <__aeabi_fsub>
   147a8:	4603      	mov	r3, r0
   147aa:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   147ac:	6978      	ldr	r0, [r7, #20]
   147ae:	6979      	ldr	r1, [r7, #20]
   147b0:	f003 fdc2 	bl	18338 <__aeabi_fmul>
   147b4:	4603      	mov	r3, r0
   147b6:	461c      	mov	r4, r3
   147b8:	6938      	ldr	r0, [r7, #16]
   147ba:	6939      	ldr	r1, [r7, #16]
   147bc:	f003 fdbc 	bl	18338 <__aeabi_fmul>
   147c0:	4603      	mov	r3, r0
   147c2:	4620      	mov	r0, r4
   147c4:	4619      	mov	r1, r3
   147c6:	f003 fcaf 	bl	18128 <__addsf3>
   147ca:	4603      	mov	r3, r0
   147cc:	461a      	mov	r2, r3
   147ce:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   147d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147d6:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   147d8:	f64c 1304 	movw	r3, #51460	; 0xc904
   147dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147e0:	681b      	ldr	r3, [r3, #0]
   147e2:	4618      	mov	r0, r3
   147e4:	f04f 0100 	mov.w	r1, #0
   147e8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   147ec:	f003 fda4 	bl	18338 <__aeabi_fmul>
   147f0:	4603      	mov	r3, r0
   147f2:	461a      	mov	r2, r3
   147f4:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   147f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147fc:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   147fe:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14806:	681b      	ldr	r3, [r3, #0]
   14808:	4618      	mov	r0, r3
   1480a:	f04f 0100 	mov.w	r1, #0
   1480e:	f2c4 2120 	movt	r1, #16928	; 0x4220
   14812:	f003 ff2f 	bl	18674 <__aeabi_fcmplt>
   14816:	4603      	mov	r3, r0
   14818:	2b00      	cmp	r3, #0
   1481a:	d004      	beq.n	14826 <approaching+0xde>
   1481c:	f04f 0200 	mov.w	r2, #0
   14820:	f2c4 2220 	movt	r2, #16928	; 0x4220
   14824:	e004      	b.n	14830 <approaching+0xe8>
   14826:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   1482a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1482e:	681a      	ldr	r2, [r3, #0]
   14830:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14838:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   1483a:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   1483e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14842:	681a      	ldr	r2, [r3, #0]
   14844:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1484c:	681b      	ldr	r3, [r3, #0]
   1484e:	4610      	mov	r0, r2
   14850:	4619      	mov	r1, r3
   14852:	f003 fd71 	bl	18338 <__aeabi_fmul>
   14856:	4603      	mov	r3, r0
   14858:	461a      	mov	r2, r3
   1485a:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   1485e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14862:	681b      	ldr	r3, [r3, #0]
   14864:	4610      	mov	r0, r2
   14866:	4619      	mov	r1, r3
   14868:	f003 ff22 	bl	186b0 <__aeabi_fcmpgt>
   1486c:	4603      	mov	r3, r0
   1486e:	2b00      	cmp	r3, #0
   14870:	d001      	beq.n	14876 <approaching+0x12e>
    return TRUE;
   14872:	2301      	movs	r3, #1
   14874:	e048      	b.n	14908 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14876:	79f9      	ldrb	r1, [r7, #7]
   14878:	f240 5278 	movw	r2, #1400	; 0x578
   1487c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14880:	460b      	mov	r3, r1
   14882:	005b      	lsls	r3, r3, #1
   14884:	440b      	add	r3, r1
   14886:	009b      	lsls	r3, r3, #2
   14888:	4413      	add	r3, r2
   1488a:	681a      	ldr	r2, [r3, #0]
   1488c:	f24c 6374 	movw	r3, #50804	; 0xc674
   14890:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14894:	681b      	ldr	r3, [r3, #0]
   14896:	4610      	mov	r0, r2
   14898:	4619      	mov	r1, r3
   1489a:	f003 fc43 	bl	18124 <__aeabi_fsub>
   1489e:	4603      	mov	r3, r0
   148a0:	4618      	mov	r0, r3
   148a2:	6979      	ldr	r1, [r7, #20]
   148a4:	f003 fd48 	bl	18338 <__aeabi_fmul>
   148a8:	4603      	mov	r3, r0
   148aa:	461c      	mov	r4, r3
   148ac:	79f9      	ldrb	r1, [r7, #7]
   148ae:	f240 5278 	movw	r2, #1400	; 0x578
   148b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148b6:	460b      	mov	r3, r1
   148b8:	005b      	lsls	r3, r3, #1
   148ba:	440b      	add	r3, r1
   148bc:	009b      	lsls	r3, r3, #2
   148be:	4413      	add	r3, r2
   148c0:	3304      	adds	r3, #4
   148c2:	681a      	ldr	r2, [r3, #0]
   148c4:	f24c 6378 	movw	r3, #50808	; 0xc678
   148c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148cc:	681b      	ldr	r3, [r3, #0]
   148ce:	4610      	mov	r0, r2
   148d0:	4619      	mov	r1, r3
   148d2:	f003 fc27 	bl	18124 <__aeabi_fsub>
   148d6:	4603      	mov	r3, r0
   148d8:	4618      	mov	r0, r3
   148da:	6939      	ldr	r1, [r7, #16]
   148dc:	f003 fd2c 	bl	18338 <__aeabi_fmul>
   148e0:	4603      	mov	r3, r0
   148e2:	4620      	mov	r0, r4
   148e4:	4619      	mov	r1, r3
   148e6:	f003 fc1f 	bl	18128 <__addsf3>
   148ea:	4603      	mov	r3, r0
   148ec:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   148ee:	2301      	movs	r3, #1
   148f0:	461c      	mov	r4, r3
   148f2:	68f8      	ldr	r0, [r7, #12]
   148f4:	f04f 0100 	mov.w	r1, #0
   148f8:	f003 febc 	bl	18674 <__aeabi_fcmplt>
   148fc:	4603      	mov	r3, r0
   148fe:	2b00      	cmp	r3, #0
   14900:	d101      	bne.n	14906 <approaching+0x1be>
   14902:	2300      	movs	r3, #0
   14904:	461c      	mov	r4, r3
   14906:	b2e3      	uxtb	r3, r4
}
   14908:	4618      	mov	r0, r3
   1490a:	371c      	adds	r7, #28
   1490c:	46bd      	mov	sp, r7
   1490e:	bd90      	pop	{r4, r7, pc}

00014910 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14910:	b5b0      	push	{r4, r5, r7, lr}
   14912:	b082      	sub	sp, #8
   14914:	af00      	add	r7, sp, #0
   14916:	6078      	str	r0, [r7, #4]
   14918:	6039      	str	r1, [r7, #0]
  desired_x = x;
   1491a:	f24c 6390 	movw	r3, #50832	; 0xc690
   1491e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14922:	687a      	ldr	r2, [r7, #4]
   14924:	601a      	str	r2, [r3, #0]
  desired_y = y;
   14926:	f24c 6394 	movw	r3, #50836	; 0xc694
   1492a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1492e:	683a      	ldr	r2, [r7, #0]
   14930:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   14932:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14936:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1493a:	681b      	ldr	r3, [r3, #0]
   1493c:	6838      	ldr	r0, [r7, #0]
   1493e:	4619      	mov	r1, r3
   14940:	f003 fbf0 	bl	18124 <__aeabi_fsub>
   14944:	4603      	mov	r3, r0
   14946:	4618      	mov	r0, r3
   14948:	f003 f862 	bl	17a10 <__aeabi_f2d>
   1494c:	4604      	mov	r4, r0
   1494e:	460d      	mov	r5, r1
   14950:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14958:	681b      	ldr	r3, [r3, #0]
   1495a:	6878      	ldr	r0, [r7, #4]
   1495c:	4619      	mov	r1, r3
   1495e:	f003 fbe1 	bl	18124 <__aeabi_fsub>
   14962:	4603      	mov	r3, r0
   14964:	4618      	mov	r0, r3
   14966:	f003 f853 	bl	17a10 <__aeabi_f2d>
   1496a:	4602      	mov	r2, r0
   1496c:	460b      	mov	r3, r1
   1496e:	4620      	mov	r0, r4
   14970:	4629      	mov	r1, r5
   14972:	f001 f929 	bl	15bc8 <pp_atan2>
   14976:	4602      	mov	r2, r0
   14978:	460b      	mov	r3, r1
   1497a:	a10b      	add	r1, pc, #44	; (adr r1, 149a8 <fly_to_xy+0x98>)
   1497c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14980:	f002 fee6 	bl	17750 <__aeabi_dsub>
   14984:	4602      	mov	r2, r0
   14986:	460b      	mov	r3, r1
   14988:	4610      	mov	r0, r2
   1498a:	4619      	mov	r1, r3
   1498c:	f003 fb76 	bl	1807c <__aeabi_d2f>
   14990:	4602      	mov	r2, r0
   14992:	f24c 635c 	movw	r3, #50780	; 0xc65c
   14996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1499a:	601a      	str	r2, [r3, #0]
}
   1499c:	3708      	adds	r7, #8
   1499e:	46bd      	mov	sp, r7
   149a0:	bdb0      	pop	{r4, r5, r7, pc}
   149a2:	bf00      	nop
   149a4:	f3af 8000 	nop.w
   149a8:	54442d18 	.word	0x54442d18
   149ac:	3ff921fb 	.word	0x3ff921fb

000149b0 <fly_to>:

static void fly_to(uint8_t wp) { 
   149b0:	b580      	push	{r7, lr}
   149b2:	b082      	sub	sp, #8
   149b4:	af00      	add	r7, sp, #0
   149b6:	4603      	mov	r3, r0
   149b8:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   149ba:	79f9      	ldrb	r1, [r7, #7]
   149bc:	f240 5278 	movw	r2, #1400	; 0x578
   149c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149c4:	460b      	mov	r3, r1
   149c6:	005b      	lsls	r3, r3, #1
   149c8:	440b      	add	r3, r1
   149ca:	009b      	lsls	r3, r3, #2
   149cc:	4413      	add	r3, r2
   149ce:	6818      	ldr	r0, [r3, #0]
   149d0:	79f9      	ldrb	r1, [r7, #7]
   149d2:	f240 5278 	movw	r2, #1400	; 0x578
   149d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149da:	460b      	mov	r3, r1
   149dc:	005b      	lsls	r3, r3, #1
   149de:	440b      	add	r3, r1
   149e0:	009b      	lsls	r3, r3, #2
   149e2:	4413      	add	r3, r2
   149e4:	3304      	adds	r3, #4
   149e6:	681b      	ldr	r3, [r3, #0]
   149e8:	4619      	mov	r1, r3
   149ea:	f7ff ff91 	bl	14910 <fly_to_xy>
}
   149ee:	3708      	adds	r7, #8
   149f0:	46bd      	mov	sp, r7
   149f2:	bd80      	pop	{r7, pc}

000149f4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   149f4:	b5b0      	push	{r4, r5, r7, lr}
   149f6:	b088      	sub	sp, #32
   149f8:	af00      	add	r7, sp, #0
   149fa:	4602      	mov	r2, r0
   149fc:	460b      	mov	r3, r1
   149fe:	71fa      	strb	r2, [r7, #7]
   14a00:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14a02:	79f9      	ldrb	r1, [r7, #7]
   14a04:	f240 5278 	movw	r2, #1400	; 0x578
   14a08:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a0c:	460b      	mov	r3, r1
   14a0e:	005b      	lsls	r3, r3, #1
   14a10:	440b      	add	r3, r1
   14a12:	009b      	lsls	r3, r3, #2
   14a14:	4413      	add	r3, r2
   14a16:	681b      	ldr	r3, [r3, #0]
   14a18:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14a1a:	79f9      	ldrb	r1, [r7, #7]
   14a1c:	f240 5278 	movw	r2, #1400	; 0x578
   14a20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a24:	460b      	mov	r3, r1
   14a26:	005b      	lsls	r3, r3, #1
   14a28:	440b      	add	r3, r1
   14a2a:	009b      	lsls	r3, r3, #2
   14a2c:	4413      	add	r3, r2
   14a2e:	3304      	adds	r3, #4
   14a30:	681b      	ldr	r3, [r3, #0]
   14a32:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14a34:	79b9      	ldrb	r1, [r7, #6]
   14a36:	f240 5278 	movw	r2, #1400	; 0x578
   14a3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a3e:	460b      	mov	r3, r1
   14a40:	005b      	lsls	r3, r3, #1
   14a42:	440b      	add	r3, r1
   14a44:	009b      	lsls	r3, r3, #2
   14a46:	4413      	add	r3, r2
   14a48:	681b      	ldr	r3, [r3, #0]
   14a4a:	4618      	mov	r0, r3
   14a4c:	69f9      	ldr	r1, [r7, #28]
   14a4e:	f003 fb69 	bl	18124 <__aeabi_fsub>
   14a52:	4603      	mov	r3, r0
   14a54:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14a56:	79b9      	ldrb	r1, [r7, #6]
   14a58:	f240 5278 	movw	r2, #1400	; 0x578
   14a5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a60:	460b      	mov	r3, r1
   14a62:	005b      	lsls	r3, r3, #1
   14a64:	440b      	add	r3, r1
   14a66:	009b      	lsls	r3, r3, #2
   14a68:	4413      	add	r3, r2
   14a6a:	3304      	adds	r3, #4
   14a6c:	681b      	ldr	r3, [r3, #0]
   14a6e:	4618      	mov	r0, r3
   14a70:	69b9      	ldr	r1, [r7, #24]
   14a72:	f003 fb57 	bl	18124 <__aeabi_fsub>
   14a76:	4603      	mov	r3, r0
   14a78:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14a7a:	6978      	ldr	r0, [r7, #20]
   14a7c:	6979      	ldr	r1, [r7, #20]
   14a7e:	f003 fc5b 	bl	18338 <__aeabi_fmul>
   14a82:	4603      	mov	r3, r0
   14a84:	461c      	mov	r4, r3
   14a86:	6938      	ldr	r0, [r7, #16]
   14a88:	6939      	ldr	r1, [r7, #16]
   14a8a:	f003 fc55 	bl	18338 <__aeabi_fmul>
   14a8e:	4603      	mov	r3, r0
   14a90:	4620      	mov	r0, r4
   14a92:	4619      	mov	r1, r3
   14a94:	f003 fb48 	bl	18128 <__addsf3>
   14a98:	4603      	mov	r3, r0
   14a9a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14a9c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14aa4:	681b      	ldr	r3, [r3, #0]
   14aa6:	4618      	mov	r0, r3
   14aa8:	69f9      	ldr	r1, [r7, #28]
   14aaa:	f003 fb3b 	bl	18124 <__aeabi_fsub>
   14aae:	4603      	mov	r3, r0
   14ab0:	4618      	mov	r0, r3
   14ab2:	6979      	ldr	r1, [r7, #20]
   14ab4:	f003 fc40 	bl	18338 <__aeabi_fmul>
   14ab8:	4603      	mov	r3, r0
   14aba:	461c      	mov	r4, r3
   14abc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ac4:	681b      	ldr	r3, [r3, #0]
   14ac6:	4618      	mov	r0, r3
   14ac8:	69b9      	ldr	r1, [r7, #24]
   14aca:	f003 fb2b 	bl	18124 <__aeabi_fsub>
   14ace:	4603      	mov	r3, r0
   14ad0:	4618      	mov	r0, r3
   14ad2:	6939      	ldr	r1, [r7, #16]
   14ad4:	f003 fc30 	bl	18338 <__aeabi_fmul>
   14ad8:	4603      	mov	r3, r0
   14ada:	4620      	mov	r0, r4
   14adc:	4619      	mov	r1, r3
   14ade:	f003 fb23 	bl	18128 <__addsf3>
   14ae2:	4603      	mov	r3, r0
   14ae4:	4618      	mov	r0, r3
   14ae6:	68f9      	ldr	r1, [r7, #12]
   14ae8:	f003 fcda 	bl	184a0 <__aeabi_fdiv>
   14aec:	4603      	mov	r3, r0
   14aee:	461a      	mov	r2, r3
   14af0:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14af8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14afa:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b02:	681b      	ldr	r3, [r3, #0]
   14b04:	4618      	mov	r0, r3
   14b06:	f04f 0100 	mov.w	r1, #0
   14b0a:	f003 fdc7 	bl	1869c <__aeabi_fcmpge>
   14b0e:	4603      	mov	r3, r0
   14b10:	2b00      	cmp	r3, #0
   14b12:	d005      	beq.n	14b20 <route_to+0x12c>
   14b14:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b1c:	681a      	ldr	r2, [r3, #0]
   14b1e:	e001      	b.n	14b24 <route_to+0x130>
   14b20:	f04f 0200 	mov.w	r2, #0
   14b24:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b2c:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14b2e:	68f8      	ldr	r0, [r7, #12]
   14b30:	f002 ff6e 	bl	17a10 <__aeabi_f2d>
   14b34:	4602      	mov	r2, r0
   14b36:	460b      	mov	r3, r1
   14b38:	4610      	mov	r0, r2
   14b3a:	4619      	mov	r1, r3
   14b3c:	f001 f9f4 	bl	15f28 <pp_sqrt>
   14b40:	4602      	mov	r2, r0
   14b42:	460b      	mov	r3, r1
   14b44:	4610      	mov	r0, r2
   14b46:	4619      	mov	r1, r3
   14b48:	f003 fa98 	bl	1807c <__aeabi_d2f>
   14b4c:	4602      	mov	r2, r0
   14b4e:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b56:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14b58:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b60:	681b      	ldr	r3, [r3, #0]
   14b62:	4618      	mov	r0, r3
   14b64:	f002 ff54 	bl	17a10 <__aeabi_f2d>
   14b68:	4604      	mov	r4, r0
   14b6a:	460d      	mov	r5, r1
   14b6c:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b74:	681a      	ldr	r2, [r3, #0]
   14b76:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b7e:	681b      	ldr	r3, [r3, #0]
   14b80:	4610      	mov	r0, r2
   14b82:	4619      	mov	r1, r3
   14b84:	f003 fc8c 	bl	184a0 <__aeabi_fdiv>
   14b88:	4603      	mov	r3, r0
   14b8a:	4618      	mov	r0, r3
   14b8c:	f04f 0100 	mov.w	r1, #0
   14b90:	f003 fd84 	bl	1869c <__aeabi_fcmpge>
   14b94:	4603      	mov	r3, r0
   14b96:	2b00      	cmp	r3, #0
   14b98:	d014      	beq.n	14bc4 <route_to+0x1d0>
   14b9a:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ba2:	681a      	ldr	r2, [r3, #0]
   14ba4:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bac:	681b      	ldr	r3, [r3, #0]
   14bae:	4610      	mov	r0, r2
   14bb0:	4619      	mov	r1, r3
   14bb2:	f003 fc75 	bl	184a0 <__aeabi_fdiv>
   14bb6:	4603      	mov	r3, r0
   14bb8:	4618      	mov	r0, r3
   14bba:	f002 ff29 	bl	17a10 <__aeabi_f2d>
   14bbe:	4602      	mov	r2, r0
   14bc0:	460b      	mov	r3, r1
   14bc2:	e003      	b.n	14bcc <route_to+0x1d8>
   14bc4:	f04f 0200 	mov.w	r2, #0
   14bc8:	f04f 0300 	mov.w	r3, #0
   14bcc:	4620      	mov	r0, r4
   14bce:	4629      	mov	r1, r5
   14bd0:	f002 fdc0 	bl	17754 <__adddf3>
   14bd4:	4602      	mov	r2, r0
   14bd6:	460b      	mov	r3, r1
   14bd8:	4610      	mov	r0, r2
   14bda:	4619      	mov	r1, r3
   14bdc:	f003 fa4e 	bl	1807c <__aeabi_d2f>
   14be0:	4602      	mov	r2, r0
   14be2:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bea:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14bec:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bf4:	681b      	ldr	r3, [r3, #0]
   14bf6:	4618      	mov	r0, r3
   14bf8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14bfc:	f003 fd4e 	bl	1869c <__aeabi_fcmpge>
   14c00:	4603      	mov	r3, r0
   14c02:	2b00      	cmp	r3, #0
   14c04:	d002      	beq.n	14c0c <route_to+0x218>
   14c06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14c0a:	e004      	b.n	14c16 <route_to+0x222>
   14c0c:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c14:	681a      	ldr	r2, [r3, #0]
   14c16:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c1e:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14c20:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c28:	681b      	ldr	r3, [r3, #0]
   14c2a:	4618      	mov	r0, r3
   14c2c:	6979      	ldr	r1, [r7, #20]
   14c2e:	f003 fb83 	bl	18338 <__aeabi_fmul>
   14c32:	4603      	mov	r3, r0
   14c34:	4618      	mov	r0, r3
   14c36:	69f9      	ldr	r1, [r7, #28]
   14c38:	f003 fa76 	bl	18128 <__addsf3>
   14c3c:	4603      	mov	r3, r0
   14c3e:	461c      	mov	r4, r3
   14c40:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c48:	681b      	ldr	r3, [r3, #0]
   14c4a:	4618      	mov	r0, r3
   14c4c:	6939      	ldr	r1, [r7, #16]
   14c4e:	f003 fb73 	bl	18338 <__aeabi_fmul>
   14c52:	4603      	mov	r3, r0
   14c54:	4618      	mov	r0, r3
   14c56:	69b9      	ldr	r1, [r7, #24]
   14c58:	f003 fa66 	bl	18128 <__addsf3>
   14c5c:	4603      	mov	r3, r0
   14c5e:	4620      	mov	r0, r4
   14c60:	4619      	mov	r1, r3
   14c62:	f7ff fe55 	bl	14910 <fly_to_xy>
}
   14c66:	3720      	adds	r7, #32
   14c68:	46bd      	mov	sp, r7
   14c6a:	bdb0      	pop	{r4, r5, r7, pc}

00014c6c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14c6c:	b590      	push	{r4, r7, lr}
   14c6e:	b083      	sub	sp, #12
   14c70:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14c72:	f240 5378 	movw	r3, #1400	; 0x578
   14c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c7a:	681a      	ldr	r2, [r3, #0]
   14c7c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c84:	681b      	ldr	r3, [r3, #0]
   14c86:	4610      	mov	r0, r2
   14c88:	4619      	mov	r1, r3
   14c8a:	f003 fa4b 	bl	18124 <__aeabi_fsub>
   14c8e:	4603      	mov	r3, r0
   14c90:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14c92:	f240 5378 	movw	r3, #1400	; 0x578
   14c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c9a:	685a      	ldr	r2, [r3, #4]
   14c9c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ca4:	681b      	ldr	r3, [r3, #0]
   14ca6:	4610      	mov	r0, r2
   14ca8:	4619      	mov	r1, r3
   14caa:	f003 fa3b 	bl	18124 <__aeabi_fsub>
   14cae:	4603      	mov	r3, r0
   14cb0:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14cb2:	6878      	ldr	r0, [r7, #4]
   14cb4:	6879      	ldr	r1, [r7, #4]
   14cb6:	f003 fb3f 	bl	18338 <__aeabi_fmul>
   14cba:	4603      	mov	r3, r0
   14cbc:	461c      	mov	r4, r3
   14cbe:	6838      	ldr	r0, [r7, #0]
   14cc0:	6839      	ldr	r1, [r7, #0]
   14cc2:	f003 fb39 	bl	18338 <__aeabi_fmul>
   14cc6:	4603      	mov	r3, r0
   14cc8:	4620      	mov	r0, r4
   14cca:	4619      	mov	r1, r3
   14ccc:	f003 fa2c 	bl	18128 <__addsf3>
   14cd0:	4603      	mov	r3, r0
   14cd2:	461a      	mov	r2, r3
   14cd4:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cdc:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14cde:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ce6:	681b      	ldr	r3, [r3, #0]
   14ce8:	2201      	movs	r2, #1
   14cea:	4614      	mov	r4, r2
   14cec:	4618      	mov	r0, r3
   14cee:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14cf2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14cf6:	f003 fcdb 	bl	186b0 <__aeabi_fcmpgt>
   14cfa:	4603      	mov	r3, r0
   14cfc:	2b00      	cmp	r3, #0
   14cfe:	d101      	bne.n	14d04 <compute_dist2_to_home+0x98>
   14d00:	2300      	movs	r3, #0
   14d02:	461c      	mov	r4, r3
   14d04:	b2e3      	uxtb	r3, r4
   14d06:	461a      	mov	r2, r3
   14d08:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
   14d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d10:	701a      	strb	r2, [r3, #0]
}
   14d12:	370c      	adds	r7, #12
   14d14:	46bd      	mov	sp, r7
   14d16:	bd90      	pop	{r4, r7, pc}

00014d18 <nav_home>:

void nav_home(void) {
   14d18:	b580      	push	{r7, lr}
   14d1a:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14d1c:	f24c 639c 	movw	r3, #50844	; 0xc69c
   14d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d24:	f04f 0200 	mov.w	r2, #0
   14d28:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14d2a:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d32:	2203      	movs	r2, #3
   14d34:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14d36:	f240 5374 	movw	r3, #1396	; 0x574
   14d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d3e:	f04f 0200 	mov.w	r2, #0
   14d42:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14d46:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14d48:	f7ff ff90 	bl	14c6c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14d4c:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d54:	681a      	ldr	r2, [r3, #0]
   14d56:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   14d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d5e:	601a      	str	r2, [r3, #0]
}
   14d60:	bd80      	pop	{r7, pc}
   14d62:	bf00      	nop

00014d64 <nav_update>:

void nav_update(void) {
   14d64:	b580      	push	{r7, lr}
   14d66:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14d68:	f7ff ff80 	bl	14c6c <compute_dist2_to_home>

  auto_nav();
   14d6c:	f7fd fc0c 	bl	12588 <auto_nav>
}
   14d70:	bd80      	pop	{r7, pc}
   14d72:	bf00      	nop

00014d74 <nav_init>:


void nav_init(void) {
   14d74:	b480      	push	{r7}
   14d76:	af00      	add	r7, sp, #0
  nav_block = 0;
   14d78:	f24c 6371 	movw	r3, #50801	; 0xc671
   14d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d80:	2200      	movs	r2, #0
   14d82:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14d84:	f24c 6370 	movw	r3, #50800	; 0xc670
   14d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d8c:	2200      	movs	r2, #0
   14d8e:	701a      	strb	r2, [r3, #0]
}
   14d90:	46bd      	mov	sp, r7
   14d92:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d96:	4770      	bx	lr

00014d98 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14d98:	b480      	push	{r7}
   14d9a:	b083      	sub	sp, #12
   14d9c:	af00      	add	r7, sp, #0
   14d9e:	4603      	mov	r3, r0
   14da0:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14da2:	f242 030a 	movw	r3, #8202	; 0x200a
   14da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14daa:	781b      	ldrb	r3, [r3, #0]
   14dac:	b2db      	uxtb	r3, r3
   14dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14db2:	2b00      	cmp	r3, #0
   14db4:	d028      	beq.n	14e08 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14db6:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dbe:	781b      	ldrb	r3, [r3, #0]
   14dc0:	b2db      	uxtb	r3, r3
   14dc2:	461a      	mov	r2, r3
   14dc4:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dcc:	781b      	ldrb	r3, [r3, #0]
   14dce:	3301      	adds	r3, #1
   14dd0:	429a      	cmp	r2, r3
   14dd2:	d100      	bne.n	14dd6 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14dd4:	e02c      	b.n	14e30 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14dd6:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dde:	781b      	ldrb	r3, [r3, #0]
   14de0:	461a      	mov	r2, r3
   14de2:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   14de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dea:	79f9      	ldrb	r1, [r7, #7]
   14dec:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14dee:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14df6:	781b      	ldrb	r3, [r3, #0]
   14df8:	3301      	adds	r3, #1
   14dfa:	b2da      	uxtb	r2, r3
   14dfc:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e04:	701a      	strb	r2, [r3, #0]
   14e06:	e013      	b.n	14e30 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14e08:	f242 030c 	movw	r3, #8204	; 0x200c
   14e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e10:	79fa      	ldrb	r2, [r7, #7]
   14e12:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14e14:	f242 030a 	movw	r3, #8202	; 0x200a
   14e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e1c:	f242 020a 	movw	r2, #8202	; 0x200a
   14e20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e24:	7812      	ldrb	r2, [r2, #0]
   14e26:	b2d2      	uxtb	r2, r2
   14e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14e2c:	b2d2      	uxtb	r2, r2
   14e2e:	701a      	strb	r2, [r3, #0]
  }
}
   14e30:	370c      	adds	r7, #12
   14e32:	46bd      	mov	sp, r7
   14e34:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e38:	4770      	bx	lr
   14e3a:	bf00      	nop

00014e3c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14e3c:	b480      	push	{r7}
   14e3e:	b083      	sub	sp, #12
   14e40:	af00      	add	r7, sp, #0
   14e42:	4603      	mov	r3, r0
   14e44:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14e46:	f242 039a 	movw	r3, #8346	; 0x209a
   14e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e4e:	781b      	ldrb	r3, [r3, #0]
   14e50:	b2db      	uxtb	r3, r3
   14e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14e56:	2b00      	cmp	r3, #0
   14e58:	d028      	beq.n	14eac <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14e5a:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   14e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e62:	781b      	ldrb	r3, [r3, #0]
   14e64:	b2db      	uxtb	r3, r3
   14e66:	461a      	mov	r2, r3
   14e68:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e70:	781b      	ldrb	r3, [r3, #0]
   14e72:	3301      	adds	r3, #1
   14e74:	429a      	cmp	r2, r3
   14e76:	d100      	bne.n	14e7a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14e78:	e02c      	b.n	14ed4 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14e7a:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e82:	781b      	ldrb	r3, [r3, #0]
   14e84:	461a      	mov	r2, r3
   14e86:	f24c 73cc 	movw	r3, #51148	; 0xc7cc
   14e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e8e:	79f9      	ldrb	r1, [r7, #7]
   14e90:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14e92:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e9a:	781b      	ldrb	r3, [r3, #0]
   14e9c:	3301      	adds	r3, #1
   14e9e:	b2da      	uxtb	r2, r3
   14ea0:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ea8:	701a      	strb	r2, [r3, #0]
   14eaa:	e013      	b.n	14ed4 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14eac:	f242 039c 	movw	r3, #8348	; 0x209c
   14eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eb4:	79fa      	ldrb	r2, [r7, #7]
   14eb6:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14eb8:	f242 039a 	movw	r3, #8346	; 0x209a
   14ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ec0:	f242 029a 	movw	r2, #8346	; 0x209a
   14ec4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ec8:	7812      	ldrb	r2, [r2, #0]
   14eca:	b2d2      	uxtb	r2, r2
   14ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14ed0:	b2d2      	uxtb	r2, r2
   14ed2:	701a      	strb	r2, [r3, #0]
  }
}
   14ed4:	370c      	adds	r7, #12
   14ed6:	46bd      	mov	sp, r7
   14ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
   14edc:	4770      	bx	lr
   14ede:	bf00      	nop

00014ee0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14ee0:	b580      	push	{r7, lr}
   14ee2:	b084      	sub	sp, #16
   14ee4:	af00      	add	r7, sp, #0
   14ee6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14ee8:	2300      	movs	r3, #0
   14eea:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14eec:	e009      	b.n	14f02 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14eee:	7bfb      	ldrb	r3, [r7, #15]
   14ef0:	687a      	ldr	r2, [r7, #4]
   14ef2:	4413      	add	r3, r2
   14ef4:	781b      	ldrb	r3, [r3, #0]
   14ef6:	4618      	mov	r0, r3
   14ef8:	f7ff ff4e 	bl	14d98 <uart0_transmit>
    i++;
   14efc:	7bfb      	ldrb	r3, [r7, #15]
   14efe:	3301      	adds	r3, #1
   14f00:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14f02:	7bfb      	ldrb	r3, [r7, #15]
   14f04:	687a      	ldr	r2, [r7, #4]
   14f06:	4413      	add	r3, r2
   14f08:	781b      	ldrb	r3, [r3, #0]
   14f0a:	2b00      	cmp	r3, #0
   14f0c:	d1ef      	bne.n	14eee <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14f0e:	3710      	adds	r7, #16
   14f10:	46bd      	mov	sp, r7
   14f12:	bd80      	pop	{r7, pc}

00014f14 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14f14:	b590      	push	{r4, r7, lr}
   14f16:	b089      	sub	sp, #36	; 0x24
   14f18:	af00      	add	r7, sp, #0
   14f1a:	4603      	mov	r3, r0
   14f1c:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14f1e:	f648 1338 	movw	r3, #35128	; 0x8938
   14f22:	f2c0 0301 	movt	r3, #1
   14f26:	f107 040c 	add.w	r4, r7, #12
   14f2a:	6818      	ldr	r0, [r3, #0]
   14f2c:	6859      	ldr	r1, [r3, #4]
   14f2e:	689a      	ldr	r2, [r3, #8]
   14f30:	68db      	ldr	r3, [r3, #12]
   14f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14f34:	79fb      	ldrb	r3, [r7, #7]
   14f36:	091b      	lsrs	r3, r3, #4
   14f38:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14f3a:	79fb      	ldrb	r3, [r7, #7]
   14f3c:	f003 030f 	and.w	r3, r3, #15
   14f40:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14f42:	230f      	movs	r3, #15
   14f44:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14f46:	230f      	movs	r3, #15
   14f48:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14f4a:	7ffb      	ldrb	r3, [r7, #31]
   14f4c:	f107 0220 	add.w	r2, r7, #32
   14f50:	4413      	add	r3, r2
   14f52:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f56:	4618      	mov	r0, r3
   14f58:	f7ff ff1e 	bl	14d98 <uart0_transmit>
  uart0_transmit(hex[low]);
   14f5c:	7fbb      	ldrb	r3, [r7, #30]
   14f5e:	f107 0220 	add.w	r2, r7, #32
   14f62:	4413      	add	r3, r2
   14f64:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f68:	4618      	mov	r0, r3
   14f6a:	f7ff ff15 	bl	14d98 <uart0_transmit>
}
   14f6e:	3724      	adds	r7, #36	; 0x24
   14f70:	46bd      	mov	sp, r7
   14f72:	bd90      	pop	{r4, r7, pc}

00014f74 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14f74:	b480      	push	{r7}
   14f76:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14f78:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f80:	781a      	ldrb	r2, [r3, #0]
   14f82:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f8a:	781b      	ldrb	r3, [r3, #0]
   14f8c:	b2db      	uxtb	r3, r3
   14f8e:	429a      	cmp	r2, r3
   14f90:	d10e      	bne.n	14fb0 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14f92:	f242 030a 	movw	r3, #8202	; 0x200a
   14f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f9a:	f242 020a 	movw	r2, #8202	; 0x200a
   14f9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14fa2:	7812      	ldrb	r2, [r2, #0]
   14fa4:	b2d2      	uxtb	r2, r2
   14fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14faa:	b2d2      	uxtb	r2, r2
   14fac:	701a      	strb	r2, [r3, #0]
   14fae:	e01d      	b.n	14fec <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14fb0:	f242 030c 	movw	r3, #8204	; 0x200c
   14fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fb8:	f24c 62c5 	movw	r2, #50885	; 0xc6c5
   14fbc:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14fc0:	7812      	ldrb	r2, [r2, #0]
   14fc2:	b2d2      	uxtb	r2, r2
   14fc4:	4611      	mov	r1, r2
   14fc6:	f24c 62c8 	movw	r2, #50888	; 0xc6c8
   14fca:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14fce:	5c52      	ldrb	r2, [r2, r1]
   14fd0:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14fd2:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fda:	781b      	ldrb	r3, [r3, #0]
   14fdc:	b2db      	uxtb	r3, r3
   14fde:	3301      	adds	r3, #1
   14fe0:	b2da      	uxtb	r2, r3
   14fe2:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fea:	701a      	strb	r2, [r3, #0]
  }
}
   14fec:	46bd      	mov	sp, r7
   14fee:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ff2:	4770      	bx	lr

00014ff4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14ff4:	b480      	push	{r7}
   14ff6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14ff8:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15000:	781a      	ldrb	r2, [r3, #0]
   15002:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   15006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1500a:	781b      	ldrb	r3, [r3, #0]
   1500c:	b2db      	uxtb	r3, r3
   1500e:	429a      	cmp	r2, r3
   15010:	d10e      	bne.n	15030 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   15012:	f242 039a 	movw	r3, #8346	; 0x209a
   15016:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1501a:	f242 029a 	movw	r2, #8346	; 0x209a
   1501e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15022:	7812      	ldrb	r2, [r2, #0]
   15024:	b2d2      	uxtb	r2, r2
   15026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1502a:	b2d2      	uxtb	r2, r2
   1502c:	701a      	strb	r2, [r3, #0]
   1502e:	e01d      	b.n	1506c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   15030:	f242 039c 	movw	r3, #8348	; 0x209c
   15034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15038:	f24c 72c9 	movw	r2, #51145	; 0xc7c9
   1503c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15040:	7812      	ldrb	r2, [r2, #0]
   15042:	b2d2      	uxtb	r2, r2
   15044:	4611      	mov	r1, r2
   15046:	f24c 72cc 	movw	r2, #51148	; 0xc7cc
   1504a:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1504e:	5c52      	ldrb	r2, [r2, r1]
   15050:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   15052:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   15056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1505a:	781b      	ldrb	r3, [r3, #0]
   1505c:	b2db      	uxtb	r3, r3
   1505e:	3301      	adds	r3, #1
   15060:	b2da      	uxtb	r2, r3
   15062:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   15066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1506a:	701a      	strb	r2, [r3, #0]
  }
}
   1506c:	46bd      	mov	sp, r7
   1506e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15072:	4770      	bx	lr

00015074 <uart0_init>:

void uart0_init( void ) {
   15074:	b480      	push	{r7}
   15076:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   15078:	f242 0390 	movw	r3, #8336	; 0x2090
   1507c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15080:	2200      	movs	r2, #0
   15082:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   15084:	f242 0309 	movw	r3, #8201	; 0x2009
   15088:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1508c:	2219      	movs	r2, #25
   1508e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   15090:	f242 030b 	movw	r3, #8203	; 0x200b
   15094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15098:	2200      	movs	r2, #0
   1509a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   1509c:	f242 030a 	movw	r3, #8202	; 0x200a
   150a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a4:	2218      	movs	r2, #24
   150a6:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   150a8:	f242 0395 	movw	r3, #8341	; 0x2095
   150ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150b0:	2206      	movs	r2, #6
   150b2:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   150b4:	f242 030a 	movw	r3, #8202	; 0x200a
   150b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150bc:	f242 020a 	movw	r2, #8202	; 0x200a
   150c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150c4:	7812      	ldrb	r2, [r2, #0]
   150c6:	b2d2      	uxtb	r2, r2
   150c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   150cc:	b2d2      	uxtb	r2, r2
   150ce:	701a      	strb	r2, [r3, #0]
}
   150d0:	46bd      	mov	sp, r7
   150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   150d6:	4770      	bx	lr

000150d8 <uart1_init>:

void uart1_init( void ) {
   150d8:	b480      	push	{r7}
   150da:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   150dc:	f242 0398 	movw	r3, #8344	; 0x2098
   150e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e4:	2200      	movs	r2, #0
   150e6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   150e8:	f242 0399 	movw	r3, #8345	; 0x2099
   150ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150f0:	2219      	movs	r2, #25
   150f2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   150f4:	f242 039b 	movw	r3, #8347	; 0x209b
   150f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150fc:	2200      	movs	r2, #0
   150fe:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   15100:	f242 039a 	movw	r3, #8346	; 0x209a
   15104:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15108:	2218      	movs	r2, #24
   1510a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   1510c:	f242 039d 	movw	r3, #8349	; 0x209d
   15110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15114:	2206      	movs	r2, #6
   15116:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   15118:	f242 039a 	movw	r3, #8346	; 0x209a
   1511c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15120:	f242 029a 	movw	r2, #8346	; 0x209a
   15124:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15128:	7812      	ldrb	r2, [r2, #0]
   1512a:	b2d2      	uxtb	r2, r2
   1512c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15130:	b2d2      	uxtb	r2, r2
   15132:	701a      	strb	r2, [r3, #0]
}
   15134:	46bd      	mov	sp, r7
   15136:	f85d 7b04 	ldr.w	r7, [sp], #4
   1513a:	4770      	bx	lr
   1513c:	0000      	movs	r0, r0
	...

00015140 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   15140:	b480      	push	{r7}
   15142:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   15144:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   15148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1514c:	f04f 0200 	mov.w	r2, #0
   15150:	601a      	str	r2, [r3, #0]
   15152:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   15156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1515a:	f04f 0200 	mov.w	r2, #0
   1515e:	601a      	str	r2, [r3, #0]
   15160:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   15164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15168:	f04f 0200 	mov.w	r2, #0
   1516c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   1516e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   15172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15176:	f04f 0200 	mov.w	r2, #0
   1517a:	601a      	str	r2, [r3, #0]
   1517c:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   15180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15184:	f04f 0200 	mov.w	r2, #0
   15188:	601a      	str	r2, [r3, #0]
   1518a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1518e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15192:	f04f 0200 	mov.w	r2, #0
   15196:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15198:	f64c 1304 	movw	r3, #51460	; 0xc904
   1519c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151a0:	f04f 0200 	mov.w	r2, #0
   151a4:	601a      	str	r2, [r3, #0]
   151a6:	f64c 1308 	movw	r3, #51464	; 0xc908
   151aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ae:	f04f 0200 	mov.w	r2, #0
   151b2:	601a      	str	r2, [r3, #0]
   151b4:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   151b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151bc:	f04f 0200 	mov.w	r2, #0
   151c0:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   151c2:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   151c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ca:	f04f 0200 	mov.w	r2, #0
   151ce:	601a      	str	r2, [r3, #0]
   151d0:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   151d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151d8:	f04f 0200 	mov.w	r2, #0
   151dc:	601a      	str	r2, [r3, #0]
   151de:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   151e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151e6:	f04f 0200 	mov.w	r2, #0
   151ea:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   151ec:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   151f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151f4:	2200      	movs	r2, #0
   151f6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   151f8:	f240 5348 	movw	r3, #1352	; 0x548
   151fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15200:	681a      	ldr	r2, [r3, #0]
   15202:	f64c 130c 	movw	r3, #51468	; 0xc90c
   15206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1520a:	601a      	str	r2, [r3, #0]
}
   1520c:	46bd      	mov	sp, r7
   1520e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15212:	4770      	bx	lr

00015214 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   15214:	b580      	push	{r7, lr}
   15216:	b082      	sub	sp, #8
   15218:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1521a:	f240 533c 	movw	r3, #1340	; 0x53c
   1521e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15222:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   15224:	2b01      	cmp	r3, #1
   15226:	d105      	bne.n	15234 <estimator_update_state_infrared+0x20>
   15228:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1522c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15230:	681b      	ldr	r3, [r3, #0]
   15232:	e004      	b.n	1523e <estimator_update_state_infrared+0x2a>
   15234:	f240 5348 	movw	r3, #1352	; 0x548
   15238:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1523c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1523e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   15240:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   15244:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15248:	881b      	ldrh	r3, [r3, #0]
   1524a:	b21b      	sxth	r3, r3
   1524c:	4618      	mov	r0, r3
   1524e:	f003 f81f 	bl	18290 <__aeabi_i2f>
   15252:	4603      	mov	r3, r0
   15254:	4618      	mov	r0, r3
   15256:	6879      	ldr	r1, [r7, #4]
   15258:	f003 f86e 	bl	18338 <__aeabi_fmul>
   1525c:	4603      	mov	r3, r0
   1525e:	461a      	mov	r2, r3
   15260:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   15264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15268:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1526a:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   1526e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15272:	881b      	ldrh	r3, [r3, #0]
   15274:	b21b      	sxth	r3, r3
   15276:	4618      	mov	r0, r3
   15278:	f003 f80a 	bl	18290 <__aeabi_i2f>
   1527c:	4603      	mov	r3, r0
   1527e:	4618      	mov	r0, r3
   15280:	6879      	ldr	r1, [r7, #4]
   15282:	f003 f859 	bl	18338 <__aeabi_fmul>
   15286:	4603      	mov	r3, r0
   15288:	461a      	mov	r2, r3
   1528a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1528e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15292:	601a      	str	r2, [r3, #0]
}
   15294:	3708      	adds	r7, #8
   15296:	46bd      	mov	sp, r7
   15298:	bd80      	pop	{r7, pc}
   1529a:	bf00      	nop

0001529c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1529c:	b5b0      	push	{r4, r5, r7, lr}
   1529e:	b084      	sub	sp, #16
   152a0:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   152a2:	f64c 1318 	movw	r3, #51480	; 0xc918
   152a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152aa:	781b      	ldrb	r3, [r3, #0]
   152ac:	2b00      	cmp	r3, #0
   152ae:	f000 81e8 	beq.w	15682 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   152b2:	f24c 4388 	movw	r3, #50312	; 0xc488
   152b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ba:	681a      	ldr	r2, [r3, #0]
   152bc:	f64c 131c 	movw	r3, #51484	; 0xc91c
   152c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152c4:	681b      	ldr	r3, [r3, #0]
   152c6:	4610      	mov	r0, r2
   152c8:	4619      	mov	r1, r3
   152ca:	f002 ff2b 	bl	18124 <__aeabi_fsub>
   152ce:	4603      	mov	r3, r0
   152d0:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   152d2:	68b8      	ldr	r0, [r7, #8]
   152d4:	f002 fb9c 	bl	17a10 <__aeabi_f2d>
   152d8:	4602      	mov	r2, r0
   152da:	460b      	mov	r3, r1
   152dc:	4610      	mov	r0, r2
   152de:	4619      	mov	r1, r3
   152e0:	a385      	add	r3, pc, #532	; (adr r3, 154f8 <estimator_update_ir_estim+0x25c>)
   152e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   152e6:	f002 fe77 	bl	17fd8 <__aeabi_dcmpgt>
   152ea:	4603      	mov	r3, r0
   152ec:	2b00      	cmp	r3, #0
   152ee:	d100      	bne.n	152f2 <estimator_update_ir_estim+0x56>
   152f0:	e219      	b.n	15726 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   152f2:	f64c 1308 	movw	r3, #51464	; 0xc908
   152f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152fa:	681a      	ldr	r2, [r3, #0]
   152fc:	f64c 1320 	movw	r3, #51488	; 0xc920
   15300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15304:	681b      	ldr	r3, [r3, #0]
   15306:	4610      	mov	r0, r2
   15308:	4619      	mov	r1, r3
   1530a:	f002 ff0b 	bl	18124 <__aeabi_fsub>
   1530e:	4603      	mov	r3, r0
   15310:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   15312:	e013      	b.n	1533c <estimator_update_ir_estim+0xa0>
   15314:	68f8      	ldr	r0, [r7, #12]
   15316:	f002 fb7b 	bl	17a10 <__aeabi_f2d>
   1531a:	4602      	mov	r2, r0
   1531c:	460b      	mov	r3, r1
   1531e:	4610      	mov	r0, r2
   15320:	4619      	mov	r1, r3
   15322:	a377      	add	r3, pc, #476	; (adr r3, 15500 <estimator_update_ir_estim+0x264>)
   15324:	e9d3 2300 	ldrd	r2, r3, [r3]
   15328:	f002 fa12 	bl	17750 <__aeabi_dsub>
   1532c:	4602      	mov	r2, r0
   1532e:	460b      	mov	r3, r1
   15330:	4610      	mov	r0, r2
   15332:	4619      	mov	r1, r3
   15334:	f002 fea2 	bl	1807c <__aeabi_d2f>
   15338:	4603      	mov	r3, r0
   1533a:	60fb      	str	r3, [r7, #12]
   1533c:	68f8      	ldr	r0, [r7, #12]
   1533e:	f002 fb67 	bl	17a10 <__aeabi_f2d>
   15342:	4602      	mov	r2, r0
   15344:	460b      	mov	r3, r1
   15346:	4610      	mov	r0, r2
   15348:	4619      	mov	r1, r3
   1534a:	a36f      	add	r3, pc, #444	; (adr r3, 15508 <estimator_update_ir_estim+0x26c>)
   1534c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15350:	f002 fe42 	bl	17fd8 <__aeabi_dcmpgt>
   15354:	4603      	mov	r3, r0
   15356:	2b00      	cmp	r3, #0
   15358:	d1dc      	bne.n	15314 <estimator_update_ir_estim+0x78>
   1535a:	e013      	b.n	15384 <estimator_update_ir_estim+0xe8>
   1535c:	68f8      	ldr	r0, [r7, #12]
   1535e:	f002 fb57 	bl	17a10 <__aeabi_f2d>
   15362:	4602      	mov	r2, r0
   15364:	460b      	mov	r3, r1
   15366:	4610      	mov	r0, r2
   15368:	4619      	mov	r1, r3
   1536a:	a365      	add	r3, pc, #404	; (adr r3, 15500 <estimator_update_ir_estim+0x264>)
   1536c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15370:	f002 f9f0 	bl	17754 <__adddf3>
   15374:	4602      	mov	r2, r0
   15376:	460b      	mov	r3, r1
   15378:	4610      	mov	r0, r2
   1537a:	4619      	mov	r1, r3
   1537c:	f002 fe7e 	bl	1807c <__aeabi_d2f>
   15380:	4603      	mov	r3, r0
   15382:	60fb      	str	r3, [r7, #12]
   15384:	68f8      	ldr	r0, [r7, #12]
   15386:	f002 fb43 	bl	17a10 <__aeabi_f2d>
   1538a:	4602      	mov	r2, r0
   1538c:	460b      	mov	r3, r1
   1538e:	4610      	mov	r0, r2
   15390:	4619      	mov	r1, r3
   15392:	a35f      	add	r3, pc, #380	; (adr r3, 15510 <estimator_update_ir_estim+0x274>)
   15394:	e9d3 2300 	ldrd	r2, r3, [r3]
   15398:	f002 fe00 	bl	17f9c <__aeabi_dcmplt>
   1539c:	4603      	mov	r3, r0
   1539e:	2b00      	cmp	r3, #0
   153a0:	d1dc      	bne.n	1535c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   153a2:	68f8      	ldr	r0, [r7, #12]
   153a4:	68b9      	ldr	r1, [r7, #8]
   153a6:	f003 f87b 	bl	184a0 <__aeabi_fdiv>
   153aa:	4603      	mov	r3, r0
   153ac:	4618      	mov	r0, r3
   153ae:	f002 fb2f 	bl	17a10 <__aeabi_f2d>
   153b2:	4602      	mov	r2, r0
   153b4:	460b      	mov	r3, r1
   153b6:	4610      	mov	r0, r2
   153b8:	4619      	mov	r1, r3
   153ba:	f04f 0200 	mov.w	r2, #0
   153be:	f04f 0300 	mov.w	r3, #0
   153c2:	f2c4 0324 	movt	r3, #16420	; 0x4024
   153c6:	f002 fb77 	bl	17ab8 <__aeabi_dmul>
   153ca:	4602      	mov	r2, r0
   153cc:	460b      	mov	r3, r1
   153ce:	4610      	mov	r0, r2
   153d0:	4619      	mov	r1, r3
   153d2:	a351      	add	r3, pc, #324	; (adr r3, 15518 <estimator_update_ir_estim+0x27c>)
   153d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   153d8:	f002 fc98 	bl	17d0c <__aeabi_ddiv>
   153dc:	4602      	mov	r2, r0
   153de:	460b      	mov	r3, r1
   153e0:	4610      	mov	r0, r2
   153e2:	4619      	mov	r1, r3
   153e4:	f002 fe4a 	bl	1807c <__aeabi_d2f>
   153e8:	4603      	mov	r3, r0
   153ea:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   153ec:	e013      	b.n	15416 <estimator_update_ir_estim+0x17a>
   153ee:	68f8      	ldr	r0, [r7, #12]
   153f0:	f002 fb0e 	bl	17a10 <__aeabi_f2d>
   153f4:	4602      	mov	r2, r0
   153f6:	460b      	mov	r3, r1
   153f8:	4610      	mov	r0, r2
   153fa:	4619      	mov	r1, r3
   153fc:	a340      	add	r3, pc, #256	; (adr r3, 15500 <estimator_update_ir_estim+0x264>)
   153fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   15402:	f002 f9a5 	bl	17750 <__aeabi_dsub>
   15406:	4602      	mov	r2, r0
   15408:	460b      	mov	r3, r1
   1540a:	4610      	mov	r0, r2
   1540c:	4619      	mov	r1, r3
   1540e:	f002 fe35 	bl	1807c <__aeabi_d2f>
   15412:	4603      	mov	r3, r0
   15414:	60fb      	str	r3, [r7, #12]
   15416:	68f8      	ldr	r0, [r7, #12]
   15418:	f002 fafa 	bl	17a10 <__aeabi_f2d>
   1541c:	4602      	mov	r2, r0
   1541e:	460b      	mov	r3, r1
   15420:	4610      	mov	r0, r2
   15422:	4619      	mov	r1, r3
   15424:	a338      	add	r3, pc, #224	; (adr r3, 15508 <estimator_update_ir_estim+0x26c>)
   15426:	e9d3 2300 	ldrd	r2, r3, [r3]
   1542a:	f002 fdd5 	bl	17fd8 <__aeabi_dcmpgt>
   1542e:	4603      	mov	r3, r0
   15430:	2b00      	cmp	r3, #0
   15432:	d1dc      	bne.n	153ee <estimator_update_ir_estim+0x152>
   15434:	e013      	b.n	1545e <estimator_update_ir_estim+0x1c2>
   15436:	68f8      	ldr	r0, [r7, #12]
   15438:	f002 faea 	bl	17a10 <__aeabi_f2d>
   1543c:	4602      	mov	r2, r0
   1543e:	460b      	mov	r3, r1
   15440:	4610      	mov	r0, r2
   15442:	4619      	mov	r1, r3
   15444:	a32e      	add	r3, pc, #184	; (adr r3, 15500 <estimator_update_ir_estim+0x264>)
   15446:	e9d3 2300 	ldrd	r2, r3, [r3]
   1544a:	f002 f983 	bl	17754 <__adddf3>
   1544e:	4602      	mov	r2, r0
   15450:	460b      	mov	r3, r1
   15452:	4610      	mov	r0, r2
   15454:	4619      	mov	r1, r3
   15456:	f002 fe11 	bl	1807c <__aeabi_d2f>
   1545a:	4603      	mov	r3, r0
   1545c:	60fb      	str	r3, [r7, #12]
   1545e:	68f8      	ldr	r0, [r7, #12]
   15460:	f002 fad6 	bl	17a10 <__aeabi_f2d>
   15464:	4602      	mov	r2, r0
   15466:	460b      	mov	r3, r1
   15468:	4610      	mov	r0, r2
   1546a:	4619      	mov	r1, r3
   1546c:	a328      	add	r3, pc, #160	; (adr r3, 15510 <estimator_update_ir_estim+0x274>)
   1546e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15472:	f002 fd93 	bl	17f9c <__aeabi_dcmplt>
   15476:	4603      	mov	r3, r0
   15478:	2b00      	cmp	r3, #0
   1547a:	d1dc      	bne.n	15436 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1547c:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   15480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15484:	881b      	ldrh	r3, [r3, #0]
   15486:	b21b      	sxth	r3, r3
   15488:	4618      	mov	r0, r3
   1548a:	f002 ff01 	bl	18290 <__aeabi_i2f>
   1548e:	4602      	mov	r2, r0
   15490:	f64c 1310 	movw	r3, #51472	; 0xc910
   15494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15498:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1549a:	f64c 1314 	movw	r3, #51476	; 0xc914
   1549e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154a2:	68fa      	ldr	r2, [r7, #12]
   154a4:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   154a6:	68f8      	ldr	r0, [r7, #12]
   154a8:	f04f 0100 	mov.w	r1, #0
   154ac:	f003 f8e2 	bl	18674 <__aeabi_fcmplt>
   154b0:	4603      	mov	r3, r0
   154b2:	2b00      	cmp	r3, #0
   154b4:	d003      	beq.n	154be <estimator_update_ir_estim+0x222>
   154b6:	68fb      	ldr	r3, [r7, #12]
   154b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   154bc:	e000      	b.n	154c0 <estimator_update_ir_estim+0x224>
   154be:	68fb      	ldr	r3, [r7, #12]
   154c0:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   154c2:	6878      	ldr	r0, [r7, #4]
   154c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   154c8:	f003 f8d4 	bl	18674 <__aeabi_fcmplt>
   154cc:	4603      	mov	r3, r0
   154ce:	2b00      	cmp	r3, #0
   154d0:	d100      	bne.n	154d4 <estimator_update_ir_estim+0x238>
   154d2:	e128      	b.n	15726 <estimator_update_ir_estim+0x48a>
   154d4:	6878      	ldr	r0, [r7, #4]
   154d6:	f002 fa9b 	bl	17a10 <__aeabi_f2d>
   154da:	4602      	mov	r2, r0
   154dc:	460b      	mov	r3, r1
   154de:	4610      	mov	r0, r2
   154e0:	4619      	mov	r1, r3
   154e2:	a30f      	add	r3, pc, #60	; (adr r3, 15520 <estimator_update_ir_estim+0x284>)
   154e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   154e8:	f002 fd76 	bl	17fd8 <__aeabi_dcmpgt>
   154ec:	4603      	mov	r3, r0
   154ee:	2b00      	cmp	r3, #0
   154f0:	d11a      	bne.n	15528 <estimator_update_ir_estim+0x28c>
   154f2:	e118      	b.n	15726 <estimator_update_ir_estim+0x48a>
   154f4:	f3af 8000 	nop.w
   154f8:	9999999a 	.word	0x9999999a
   154fc:	3fb99999 	.word	0x3fb99999
   15500:	54442d18 	.word	0x54442d18
   15504:	401921fb 	.word	0x401921fb
   15508:	54442d18 	.word	0x54442d18
   1550c:	400921fb 	.word	0x400921fb
   15510:	54442d18 	.word	0x54442d18
   15514:	c00921fb 	.word	0xc00921fb
   15518:	51eb851f 	.word	0x51eb851f
   1551c:	40239eb8 	.word	0x40239eb8
   15520:	9999999a 	.word	0x9999999a
   15524:	3fa99999 	.word	0x3fa99999
   15528:	f240 5340 	movw	r3, #1344	; 0x540
   1552c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15530:	881b      	ldrh	r3, [r3, #0]
   15532:	b21b      	sxth	r3, r3
   15534:	425b      	negs	r3, r3
   15536:	0fda      	lsrs	r2, r3, #31
   15538:	4413      	add	r3, r2
   1553a:	105b      	asrs	r3, r3, #1
   1553c:	461a      	mov	r2, r3
   1553e:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   15542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15546:	881b      	ldrh	r3, [r3, #0]
   15548:	b21b      	sxth	r3, r3
   1554a:	429a      	cmp	r2, r3
   1554c:	f280 8098 	bge.w	15680 <estimator_update_ir_estim+0x3e4>
   15550:	f240 5340 	movw	r3, #1344	; 0x540
   15554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15558:	881b      	ldrh	r3, [r3, #0]
   1555a:	b21b      	sxth	r3, r3
   1555c:	0fda      	lsrs	r2, r3, #31
   1555e:	4413      	add	r3, r2
   15560:	105b      	asrs	r3, r3, #1
   15562:	b29a      	uxth	r2, r3
   15564:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   15568:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1556c:	881b      	ldrh	r3, [r3, #0]
   1556e:	b212      	sxth	r2, r2
   15570:	b21b      	sxth	r3, r3
   15572:	429a      	cmp	r2, r3
   15574:	f340 8084 	ble.w	15680 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15578:	f64c 1314 	movw	r3, #51476	; 0xc914
   1557c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15580:	681a      	ldr	r2, [r3, #0]
   15582:	f64c 1310 	movw	r3, #51472	; 0xc910
   15586:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1558a:	681b      	ldr	r3, [r3, #0]
   1558c:	4610      	mov	r0, r2
   1558e:	4619      	mov	r1, r3
   15590:	f002 fed2 	bl	18338 <__aeabi_fmul>
   15594:	4603      	mov	r3, r0
   15596:	4618      	mov	r0, r3
   15598:	f002 fa3a 	bl	17a10 <__aeabi_f2d>
   1559c:	4604      	mov	r4, r0
   1559e:	460d      	mov	r5, r1
   155a0:	f64c 1324 	movw	r3, #51492	; 0xc924
   155a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155a8:	681b      	ldr	r3, [r3, #0]
   155aa:	4618      	mov	r0, r3
   155ac:	f002 fa30 	bl	17a10 <__aeabi_f2d>
   155b0:	4602      	mov	r2, r0
   155b2:	460b      	mov	r3, r1
   155b4:	4610      	mov	r0, r2
   155b6:	4619      	mov	r1, r3
   155b8:	a367      	add	r3, pc, #412	; (adr r3, 15758 <estimator_update_ir_estim+0x4bc>)
   155ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   155be:	f002 fa7b 	bl	17ab8 <__aeabi_dmul>
   155c2:	4602      	mov	r2, r0
   155c4:	460b      	mov	r3, r1
   155c6:	4620      	mov	r0, r4
   155c8:	4629      	mov	r1, r5
   155ca:	f002 f8c3 	bl	17754 <__adddf3>
   155ce:	4602      	mov	r2, r0
   155d0:	460b      	mov	r3, r1
   155d2:	4610      	mov	r0, r2
   155d4:	4619      	mov	r1, r3
   155d6:	f002 fd51 	bl	1807c <__aeabi_d2f>
   155da:	4602      	mov	r2, r0
   155dc:	f64c 1324 	movw	r3, #51492	; 0xc924
   155e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155e4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   155e6:	f64c 1310 	movw	r3, #51472	; 0xc910
   155ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155ee:	681a      	ldr	r2, [r3, #0]
   155f0:	f64c 1310 	movw	r3, #51472	; 0xc910
   155f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155f8:	681b      	ldr	r3, [r3, #0]
   155fa:	4610      	mov	r0, r2
   155fc:	4619      	mov	r1, r3
   155fe:	f002 fe9b 	bl	18338 <__aeabi_fmul>
   15602:	4603      	mov	r3, r0
   15604:	4618      	mov	r0, r3
   15606:	f002 fa03 	bl	17a10 <__aeabi_f2d>
   1560a:	4604      	mov	r4, r0
   1560c:	460d      	mov	r5, r1
   1560e:	f64c 1328 	movw	r3, #51496	; 0xc928
   15612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15616:	681b      	ldr	r3, [r3, #0]
   15618:	4618      	mov	r0, r3
   1561a:	f002 f9f9 	bl	17a10 <__aeabi_f2d>
   1561e:	4602      	mov	r2, r0
   15620:	460b      	mov	r3, r1
   15622:	4610      	mov	r0, r2
   15624:	4619      	mov	r1, r3
   15626:	a34c      	add	r3, pc, #304	; (adr r3, 15758 <estimator_update_ir_estim+0x4bc>)
   15628:	e9d3 2300 	ldrd	r2, r3, [r3]
   1562c:	f002 fa44 	bl	17ab8 <__aeabi_dmul>
   15630:	4602      	mov	r2, r0
   15632:	460b      	mov	r3, r1
   15634:	4620      	mov	r0, r4
   15636:	4629      	mov	r1, r5
   15638:	f002 f88c 	bl	17754 <__adddf3>
   1563c:	4602      	mov	r2, r0
   1563e:	460b      	mov	r3, r1
   15640:	4610      	mov	r0, r2
   15642:	4619      	mov	r1, r3
   15644:	f002 fd1a 	bl	1807c <__aeabi_d2f>
   15648:	4602      	mov	r2, r0
   1564a:	f64c 1328 	movw	r3, #51496	; 0xc928
   1564e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15652:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   15654:	f64c 1324 	movw	r3, #51492	; 0xc924
   15658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1565c:	681a      	ldr	r2, [r3, #0]
   1565e:	f64c 1328 	movw	r3, #51496	; 0xc928
   15662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15666:	681b      	ldr	r3, [r3, #0]
   15668:	4610      	mov	r0, r2
   1566a:	4619      	mov	r1, r3
   1566c:	f002 ff18 	bl	184a0 <__aeabi_fdiv>
   15670:	4603      	mov	r3, r0
   15672:	461a      	mov	r2, r3
   15674:	f64c 130c 	movw	r3, #51468	; 0xc90c
   15678:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1567c:	601a      	str	r2, [r3, #0]
   1567e:	e052      	b.n	15726 <estimator_update_ir_estim+0x48a>
   15680:	e051      	b.n	15726 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   15682:	f64c 1318 	movw	r3, #51480	; 0xc918
   15686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1568a:	2201      	movs	r2, #1
   1568c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1568e:	f240 5340 	movw	r3, #1344	; 0x540
   15692:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15696:	881b      	ldrh	r3, [r3, #0]
   15698:	b21b      	sxth	r3, r3
   1569a:	4618      	mov	r0, r3
   1569c:	f002 fdf8 	bl	18290 <__aeabi_i2f>
   156a0:	4603      	mov	r3, r0
   156a2:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   156a4:	6838      	ldr	r0, [r7, #0]
   156a6:	6839      	ldr	r1, [r7, #0]
   156a8:	f002 fe46 	bl	18338 <__aeabi_fmul>
   156ac:	4603      	mov	r3, r0
   156ae:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   156b0:	f64c 130c 	movw	r3, #51468	; 0xc90c
   156b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156b8:	681b      	ldr	r3, [r3, #0]
   156ba:	4618      	mov	r0, r3
   156bc:	f002 f9a8 	bl	17a10 <__aeabi_f2d>
   156c0:	4602      	mov	r2, r0
   156c2:	460b      	mov	r3, r1
   156c4:	4610      	mov	r0, r2
   156c6:	4619      	mov	r1, r3
   156c8:	f04f 0200 	mov.w	r2, #0
   156cc:	f04f 0300 	mov.w	r3, #0
   156d0:	f2c4 0359 	movt	r3, #16473	; 0x4059
   156d4:	f002 f9f0 	bl	17ab8 <__aeabi_dmul>
   156d8:	4602      	mov	r2, r0
   156da:	460b      	mov	r3, r1
   156dc:	4614      	mov	r4, r2
   156de:	461d      	mov	r5, r3
   156e0:	6838      	ldr	r0, [r7, #0]
   156e2:	f002 f995 	bl	17a10 <__aeabi_f2d>
   156e6:	4602      	mov	r2, r0
   156e8:	460b      	mov	r3, r1
   156ea:	4620      	mov	r0, r4
   156ec:	4629      	mov	r1, r5
   156ee:	f002 f9e3 	bl	17ab8 <__aeabi_dmul>
   156f2:	4602      	mov	r2, r0
   156f4:	460b      	mov	r3, r1
   156f6:	4610      	mov	r0, r2
   156f8:	4619      	mov	r1, r3
   156fa:	f002 fcbf 	bl	1807c <__aeabi_d2f>
   156fe:	4602      	mov	r2, r0
   15700:	f64c 1324 	movw	r3, #51492	; 0xc924
   15704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15708:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   1570a:	6838      	ldr	r0, [r7, #0]
   1570c:	f04f 0100 	mov.w	r1, #0
   15710:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   15714:	f002 fe10 	bl	18338 <__aeabi_fmul>
   15718:	4603      	mov	r3, r0
   1571a:	461a      	mov	r2, r3
   1571c:	f64c 1328 	movw	r3, #51496	; 0xc928
   15720:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15724:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   15726:	f64c 1308 	movw	r3, #51464	; 0xc908
   1572a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1572e:	681a      	ldr	r2, [r3, #0]
   15730:	f64c 1320 	movw	r3, #51488	; 0xc920
   15734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15738:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1573a:	f24c 4388 	movw	r3, #50312	; 0xc488
   1573e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15742:	681a      	ldr	r2, [r3, #0]
   15744:	f64c 131c 	movw	r3, #51484	; 0xc91c
   15748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1574c:	601a      	str	r2, [r3, #0]
}
   1574e:	3710      	adds	r7, #16
   15750:	46bd      	mov	sp, r7
   15752:	bdb0      	pop	{r4, r5, r7, pc}
   15754:	f3af 8000 	nop.w
   15758:	d916872b 	.word	0xd916872b
   1575c:	3feff7ce 	.word	0x3feff7ce

00015760 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15760:	b580      	push	{r7, lr}
   15762:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   15764:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   15768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1576c:	781b      	ldrb	r3, [r3, #0]
   1576e:	f003 0320 	and.w	r3, r3, #32
   15772:	2b00      	cmp	r3, #0
   15774:	d044      	beq.n	15800 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   15776:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   1577a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1577e:	681a      	ldr	r2, [r3, #0]
   15780:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   15784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15788:	601a      	str	r2, [r3, #0]
   1578a:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   1578e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15792:	681a      	ldr	r2, [r3, #0]
   15794:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   15798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1579c:	601a      	str	r2, [r3, #0]
   1579e:	f24c 438c 	movw	r3, #50316	; 0xc48c
   157a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157a6:	681a      	ldr	r2, [r3, #0]
   157a8:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   157ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157b0:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   157b2:	f24c 4390 	movw	r3, #50320	; 0xc490
   157b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ba:	681a      	ldr	r2, [r3, #0]
   157bc:	f64c 1304 	movw	r3, #51460	; 0xc904
   157c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157c4:	601a      	str	r2, [r3, #0]
   157c6:	f24c 4398 	movw	r3, #50328	; 0xc498
   157ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ce:	681a      	ldr	r2, [r3, #0]
   157d0:	f64c 1308 	movw	r3, #51464	; 0xc908
   157d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157d8:	601a      	str	r2, [r3, #0]
   157da:	f24c 4394 	movw	r3, #50324	; 0xc494
   157de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157e2:	681a      	ldr	r2, [r3, #0]
   157e4:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   157e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ec:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   157ee:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   157f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157f6:	881b      	ldrh	r3, [r3, #0]
   157f8:	2b00      	cmp	r3, #0
   157fa:	d001      	beq.n	15800 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   157fc:	f7ff fd4e 	bl	1529c <estimator_update_ir_estim>
  }
}
   15800:	bd80      	pop	{r7, pc}
   15802:	bf00      	nop

00015804 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   15804:	b480      	push	{r7}
   15806:	af00      	add	r7, sp, #0
  
}
   15808:	46bd      	mov	sp, r7
   1580a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1580e:	4770      	bx	lr

00015810 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15810:	b5b0      	push	{r4, r5, r7, lr}
   15812:	b082      	sub	sp, #8
   15814:	af00      	add	r7, sp, #0
   15816:	4603      	mov	r3, r0
   15818:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   1581a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   1581e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15822:	781b      	ldrb	r3, [r3, #0]
   15824:	2b01      	cmp	r3, #1
   15826:	f040 80e0 	bne.w	159ea <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1582a:	f64c 132c 	movw	r3, #51500	; 0xc92c
   1582e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15832:	781b      	ldrb	r3, [r3, #0]
   15834:	2b02      	cmp	r3, #2
   15836:	d168      	bne.n	1590a <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15838:	79fb      	ldrb	r3, [r7, #7]
   1583a:	2b00      	cmp	r3, #0
   1583c:	d013      	beq.n	15866 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1583e:	f240 5344 	movw	r3, #1348	; 0x544
   15842:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15846:	881a      	ldrh	r2, [r3, #0]
   15848:	f64c 1332 	movw	r3, #51506	; 0xc932
   1584c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15850:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15852:	f24c 4320 	movw	r3, #50208	; 0xc420
   15856:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1585a:	895a      	ldrh	r2, [r3, #10]
   1585c:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15864:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15866:	f24c 4320 	movw	r3, #50208	; 0xc420
   1586a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1586e:	895b      	ldrh	r3, [r3, #10]
   15870:	b21a      	sxth	r2, r3
   15872:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15876:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1587a:	881b      	ldrh	r3, [r3, #0]
   1587c:	b21b      	sxth	r3, r3
   1587e:	1ad3      	subs	r3, r2, r3
   15880:	4618      	mov	r0, r3
   15882:	f002 fd05 	bl	18290 <__aeabi_i2f>
   15886:	4603      	mov	r3, r0
   15888:	4618      	mov	r0, r3
   1588a:	f002 f8c1 	bl	17a10 <__aeabi_f2d>
   1588e:	4602      	mov	r2, r0
   15890:	460b      	mov	r3, r1
   15892:	4610      	mov	r0, r2
   15894:	4619      	mov	r1, r3
   15896:	f04f 0200 	mov.w	r2, #0
   1589a:	f04f 0300 	mov.w	r3, #0
   1589e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   158a2:	f002 f909 	bl	17ab8 <__aeabi_dmul>
   158a6:	4602      	mov	r2, r0
   158a8:	460b      	mov	r3, r1
   158aa:	4610      	mov	r0, r2
   158ac:	4619      	mov	r1, r3
   158ae:	f04f 0200 	mov.w	r2, #0
   158b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   158b6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   158ba:	f002 fa27 	bl	17d0c <__aeabi_ddiv>
   158be:	4602      	mov	r2, r0
   158c0:	460b      	mov	r3, r1
   158c2:	4610      	mov	r0, r2
   158c4:	4619      	mov	r1, r3
   158c6:	f002 fb91 	bl	17fec <__aeabi_d2iz>
   158ca:	4603      	mov	r3, r0
   158cc:	b29b      	uxth	r3, r3
   158ce:	b29a      	uxth	r2, r3
   158d0:	f64c 1332 	movw	r3, #51506	; 0xc932
   158d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158d8:	881b      	ldrh	r3, [r3, #0]
   158da:	b29b      	uxth	r3, r3
   158dc:	4413      	add	r3, r2
   158de:	b29b      	uxth	r3, r3
   158e0:	b29a      	uxth	r2, r3
   158e2:	f240 5344 	movw	r3, #1348	; 0x544
   158e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158ea:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   158ec:	f240 5344 	movw	r3, #1348	; 0x544
   158f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158f4:	881b      	ldrh	r3, [r3, #0]
   158f6:	b21b      	sxth	r3, r3
   158f8:	4618      	mov	r0, r3
   158fa:	f002 fcc9 	bl	18290 <__aeabi_i2f>
   158fe:	4602      	mov	r2, r0
   15900:	f24c 3308 	movw	r3, #49928	; 0xc308
   15904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15908:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1590a:	f64c 132c 	movw	r3, #51500	; 0xc92c
   1590e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15912:	781b      	ldrb	r3, [r3, #0]
   15914:	2b02      	cmp	r3, #2
   15916:	d168      	bne.n	159ea <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15918:	79fb      	ldrb	r3, [r7, #7]
   1591a:	2b00      	cmp	r3, #0
   1591c:	d013      	beq.n	15946 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   1591e:	f240 5342 	movw	r3, #1346	; 0x542
   15922:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15926:	881a      	ldrh	r2, [r3, #0]
   15928:	f64c 1334 	movw	r3, #51508	; 0xc934
   1592c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15930:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15932:	f24c 4320 	movw	r3, #50208	; 0xc420
   15936:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1593a:	899a      	ldrh	r2, [r3, #12]
   1593c:	f64c 1330 	movw	r3, #51504	; 0xc930
   15940:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15944:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15946:	f24c 4320 	movw	r3, #50208	; 0xc420
   1594a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1594e:	899b      	ldrh	r3, [r3, #12]
   15950:	b21a      	sxth	r2, r3
   15952:	f64c 1330 	movw	r3, #51504	; 0xc930
   15956:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1595a:	881b      	ldrh	r3, [r3, #0]
   1595c:	b21b      	sxth	r3, r3
   1595e:	1ad3      	subs	r3, r2, r3
   15960:	4618      	mov	r0, r3
   15962:	f002 fc95 	bl	18290 <__aeabi_i2f>
   15966:	4603      	mov	r3, r0
   15968:	4618      	mov	r0, r3
   1596a:	f002 f851 	bl	17a10 <__aeabi_f2d>
   1596e:	4602      	mov	r2, r0
   15970:	460b      	mov	r3, r1
   15972:	4610      	mov	r0, r2
   15974:	4619      	mov	r1, r3
   15976:	f04f 0200 	mov.w	r2, #0
   1597a:	f04f 0300 	mov.w	r3, #0
   1597e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15982:	f002 f899 	bl	17ab8 <__aeabi_dmul>
   15986:	4602      	mov	r2, r0
   15988:	460b      	mov	r3, r1
   1598a:	4610      	mov	r0, r2
   1598c:	4619      	mov	r1, r3
   1598e:	f04f 0200 	mov.w	r2, #0
   15992:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15996:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1599a:	f002 f9b7 	bl	17d0c <__aeabi_ddiv>
   1599e:	4602      	mov	r2, r0
   159a0:	460b      	mov	r3, r1
   159a2:	4610      	mov	r0, r2
   159a4:	4619      	mov	r1, r3
   159a6:	f002 fb21 	bl	17fec <__aeabi_d2iz>
   159aa:	4603      	mov	r3, r0
   159ac:	b29b      	uxth	r3, r3
   159ae:	b29a      	uxth	r2, r3
   159b0:	f64c 1334 	movw	r3, #51508	; 0xc934
   159b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159b8:	881b      	ldrh	r3, [r3, #0]
   159ba:	b29b      	uxth	r3, r3
   159bc:	4413      	add	r3, r2
   159be:	b29b      	uxth	r3, r3
   159c0:	b29a      	uxth	r2, r3
   159c2:	f240 5342 	movw	r3, #1346	; 0x542
   159c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ca:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   159cc:	f240 5342 	movw	r3, #1346	; 0x542
   159d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159d4:	881b      	ldrh	r3, [r3, #0]
   159d6:	b21b      	sxth	r3, r3
   159d8:	4618      	mov	r0, r3
   159da:	f002 fc59 	bl	18290 <__aeabi_i2f>
   159de:	4602      	mov	r2, r0
   159e0:	f24c 330c 	movw	r3, #49932	; 0xc30c
   159e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159e8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   159ea:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   159ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159f2:	781b      	ldrb	r3, [r3, #0]
   159f4:	2b02      	cmp	r3, #2
   159f6:	f040 80da 	bne.w	15bae <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   159fa:	f64c 132c 	movw	r3, #51500	; 0xc92c
   159fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a02:	781b      	ldrb	r3, [r3, #0]
   15a04:	2b02      	cmp	r3, #2
   15a06:	d165      	bne.n	15ad4 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15a08:	79fb      	ldrb	r3, [r7, #7]
   15a0a:	2b00      	cmp	r3, #0
   15a0c:	d013      	beq.n	15a36 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15a0e:	f240 5358 	movw	r3, #1368	; 0x558
   15a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a16:	681a      	ldr	r2, [r3, #0]
   15a18:	f64c 1338 	movw	r3, #51512	; 0xc938
   15a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a20:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15a22:	f24c 4320 	movw	r3, #50208	; 0xc420
   15a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a2a:	895a      	ldrh	r2, [r3, #10]
   15a2c:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a34:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15a36:	f64c 1338 	movw	r3, #51512	; 0xc938
   15a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a3e:	681b      	ldr	r3, [r3, #0]
   15a40:	4618      	mov	r0, r3
   15a42:	f001 ffe5 	bl	17a10 <__aeabi_f2d>
   15a46:	4604      	mov	r4, r0
   15a48:	460d      	mov	r5, r1
   15a4a:	f24c 4320 	movw	r3, #50208	; 0xc420
   15a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a52:	895b      	ldrh	r3, [r3, #10]
   15a54:	b21a      	sxth	r2, r3
   15a56:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a5e:	881b      	ldrh	r3, [r3, #0]
   15a60:	b21b      	sxth	r3, r3
   15a62:	1ad3      	subs	r3, r2, r3
   15a64:	4618      	mov	r0, r3
   15a66:	f002 fc13 	bl	18290 <__aeabi_i2f>
   15a6a:	4603      	mov	r3, r0
   15a6c:	4618      	mov	r0, r3
   15a6e:	f001 ffcf 	bl	17a10 <__aeabi_f2d>
   15a72:	4602      	mov	r2, r0
   15a74:	460b      	mov	r3, r1
   15a76:	4610      	mov	r0, r2
   15a78:	4619      	mov	r1, r3
   15a7a:	a34f      	add	r3, pc, #316	; (adr r3, 15bb8 <inflight_calib+0x3a8>)
   15a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a80:	f002 f81a 	bl	17ab8 <__aeabi_dmul>
   15a84:	4602      	mov	r2, r0
   15a86:	460b      	mov	r3, r1
   15a88:	4610      	mov	r0, r2
   15a8a:	4619      	mov	r1, r3
   15a8c:	f04f 0200 	mov.w	r2, #0
   15a90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a94:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a98:	f002 f938 	bl	17d0c <__aeabi_ddiv>
   15a9c:	4602      	mov	r2, r0
   15a9e:	460b      	mov	r3, r1
   15aa0:	4620      	mov	r0, r4
   15aa2:	4629      	mov	r1, r5
   15aa4:	f001 fe56 	bl	17754 <__adddf3>
   15aa8:	4602      	mov	r2, r0
   15aaa:	460b      	mov	r3, r1
   15aac:	4610      	mov	r0, r2
   15aae:	4619      	mov	r1, r3
   15ab0:	f002 fae4 	bl	1807c <__aeabi_d2f>
   15ab4:	4602      	mov	r2, r0
   15ab6:	f240 5358 	movw	r3, #1368	; 0x558
   15aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15abe:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15ac0:	f240 5358 	movw	r3, #1368	; 0x558
   15ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ac8:	681a      	ldr	r2, [r3, #0]
   15aca:	f24c 3308 	movw	r3, #49928	; 0xc308
   15ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ad2:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15ad4:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15adc:	781b      	ldrb	r3, [r3, #0]
   15ade:	2b02      	cmp	r3, #2
   15ae0:	d165      	bne.n	15bae <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15ae2:	79fb      	ldrb	r3, [r7, #7]
   15ae4:	2b00      	cmp	r3, #0
   15ae6:	d013      	beq.n	15b10 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15ae8:	f240 535c 	movw	r3, #1372	; 0x55c
   15aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15af0:	681a      	ldr	r2, [r3, #0]
   15af2:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15afa:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15afc:	f24c 4320 	movw	r3, #50208	; 0xc420
   15b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b04:	899a      	ldrh	r2, [r3, #12]
   15b06:	f64c 1330 	movw	r3, #51504	; 0xc930
   15b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b0e:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15b10:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b18:	681b      	ldr	r3, [r3, #0]
   15b1a:	4618      	mov	r0, r3
   15b1c:	f001 ff78 	bl	17a10 <__aeabi_f2d>
   15b20:	4604      	mov	r4, r0
   15b22:	460d      	mov	r5, r1
   15b24:	f24c 4320 	movw	r3, #50208	; 0xc420
   15b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b2c:	899b      	ldrh	r3, [r3, #12]
   15b2e:	b21a      	sxth	r2, r3
   15b30:	f64c 1330 	movw	r3, #51504	; 0xc930
   15b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b38:	881b      	ldrh	r3, [r3, #0]
   15b3a:	b21b      	sxth	r3, r3
   15b3c:	1ad3      	subs	r3, r2, r3
   15b3e:	4618      	mov	r0, r3
   15b40:	f002 fba6 	bl	18290 <__aeabi_i2f>
   15b44:	4603      	mov	r3, r0
   15b46:	4618      	mov	r0, r3
   15b48:	f001 ff62 	bl	17a10 <__aeabi_f2d>
   15b4c:	4602      	mov	r2, r0
   15b4e:	460b      	mov	r3, r1
   15b50:	4610      	mov	r0, r2
   15b52:	4619      	mov	r1, r3
   15b54:	a31a      	add	r3, pc, #104	; (adr r3, 15bc0 <inflight_calib+0x3b0>)
   15b56:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b5a:	f001 ffad 	bl	17ab8 <__aeabi_dmul>
   15b5e:	4602      	mov	r2, r0
   15b60:	460b      	mov	r3, r1
   15b62:	4610      	mov	r0, r2
   15b64:	4619      	mov	r1, r3
   15b66:	f04f 0200 	mov.w	r2, #0
   15b6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b6e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b72:	f002 f8cb 	bl	17d0c <__aeabi_ddiv>
   15b76:	4602      	mov	r2, r0
   15b78:	460b      	mov	r3, r1
   15b7a:	4620      	mov	r0, r4
   15b7c:	4629      	mov	r1, r5
   15b7e:	f001 fde9 	bl	17754 <__adddf3>
   15b82:	4602      	mov	r2, r0
   15b84:	460b      	mov	r3, r1
   15b86:	4610      	mov	r0, r2
   15b88:	4619      	mov	r1, r3
   15b8a:	f002 fa77 	bl	1807c <__aeabi_d2f>
   15b8e:	4602      	mov	r2, r0
   15b90:	f240 535c 	movw	r3, #1372	; 0x55c
   15b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b98:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15b9a:	f240 535c 	movw	r3, #1372	; 0x55c
   15b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ba2:	681a      	ldr	r2, [r3, #0]
   15ba4:	f24c 330c 	movw	r3, #49932	; 0xc30c
   15ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bac:	601a      	str	r2, [r3, #0]
    }
  }
}
   15bae:	3708      	adds	r7, #8
   15bb0:	46bd      	mov	sp, r7
   15bb2:	bdb0      	pop	{r4, r5, r7, pc}
   15bb4:	f3af 8000 	nop.w
   15bb8:	9999999a 	.word	0x9999999a
   15bbc:	3fb99999 	.word	0x3fb99999
   15bc0:	9999999a 	.word	0x9999999a
   15bc4:	bfc99999 	.word	0xbfc99999

00015bc8 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15bc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15bcc:	b08e      	sub	sp, #56	; 0x38
   15bce:	af00      	add	r7, sp, #0
   15bd0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15bd4:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15bd8:	a357      	add	r3, pc, #348	; (adr r3, 15d38 <pp_atan2+0x170>)
   15bda:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bde:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15be2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15be6:	f04f 0200 	mov.w	r2, #0
   15bea:	f04f 0300 	mov.w	r3, #0
   15bee:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15bf2:	f001 ff61 	bl	17ab8 <__aeabi_dmul>
   15bf6:	4602      	mov	r2, r0
   15bf8:	460b      	mov	r3, r1
   15bfa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
   15c02:	f04f 0200 	mov.w	r2, #0
   15c06:	f04f 0300 	mov.w	r3, #0
   15c0a:	f002 f9c7 	bl	17f9c <__aeabi_dcmplt>
   15c0e:	4603      	mov	r3, r0
   15c10:	2b00      	cmp	r3, #0
   15c12:	d009      	beq.n	15c28 <pp_atan2+0x60>
   15c14:	a14a      	add	r1, pc, #296	; (adr r1, 15d40 <pp_atan2+0x178>)
   15c16:	e9d1 0100 	ldrd	r0, r1, [r1]
   15c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15c1e:	f001 fd97 	bl	17750 <__aeabi_dsub>
   15c22:	4602      	mov	r2, r0
   15c24:	460b      	mov	r3, r1
   15c26:	e008      	b.n	15c3a <pp_atan2+0x72>
   15c28:	e9d7 0100 	ldrd	r0, r1, [r7]
   15c2c:	a344      	add	r3, pc, #272	; (adr r3, 15d40 <pp_atan2+0x178>)
   15c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c32:	f001 fd8f 	bl	17754 <__adddf3>
   15c36:	4602      	mov	r2, r0
   15c38:	460b      	mov	r3, r1
   15c3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15c3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c42:	f04f 0200 	mov.w	r2, #0
   15c46:	f04f 0300 	mov.w	r3, #0
   15c4a:	f002 f9c5 	bl	17fd8 <__aeabi_dcmpgt>
   15c4e:	4603      	mov	r3, r0
   15c50:	2b00      	cmp	r3, #0
   15c52:	d02a      	beq.n	15caa <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15c54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c5c:	f001 fd78 	bl	17750 <__aeabi_dsub>
   15c60:	4602      	mov	r2, r0
   15c62:	460b      	mov	r3, r1
   15c64:	4690      	mov	r8, r2
   15c66:	4699      	mov	r9, r3
   15c68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c70:	f001 fd70 	bl	17754 <__adddf3>
   15c74:	4602      	mov	r2, r0
   15c76:	460b      	mov	r3, r1
   15c78:	4640      	mov	r0, r8
   15c7a:	4649      	mov	r1, r9
   15c7c:	f002 f846 	bl	17d0c <__aeabi_ddiv>
   15c80:	4602      	mov	r2, r0
   15c82:	460b      	mov	r3, r1
   15c84:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15c88:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c90:	f001 ff12 	bl	17ab8 <__aeabi_dmul>
   15c94:	4602      	mov	r2, r0
   15c96:	460b      	mov	r3, r1
   15c98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c9c:	f001 fd58 	bl	17750 <__aeabi_dsub>
   15ca0:	4602      	mov	r2, r0
   15ca2:	460b      	mov	r3, r1
   15ca4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15ca8:	e029      	b.n	15cfe <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15caa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15cae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15cb2:	f001 fd4f 	bl	17754 <__adddf3>
   15cb6:	4602      	mov	r2, r0
   15cb8:	460b      	mov	r3, r1
   15cba:	4690      	mov	r8, r2
   15cbc:	4699      	mov	r9, r3
   15cbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15cc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15cc6:	f001 fd43 	bl	17750 <__aeabi_dsub>
   15cca:	4602      	mov	r2, r0
   15ccc:	460b      	mov	r3, r1
   15cce:	4640      	mov	r0, r8
   15cd0:	4649      	mov	r1, r9
   15cd2:	f002 f81b 	bl	17d0c <__aeabi_ddiv>
   15cd6:	4602      	mov	r2, r0
   15cd8:	460b      	mov	r3, r1
   15cda:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15cde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ce2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15ce6:	f001 fee7 	bl	17ab8 <__aeabi_dmul>
   15cea:	4602      	mov	r2, r0
   15cec:	460b      	mov	r3, r1
   15cee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15cf2:	f001 fd2d 	bl	17750 <__aeabi_dsub>
   15cf6:	4602      	mov	r2, r0
   15cf8:	460b      	mov	r3, r1
   15cfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
   15d02:	f04f 0200 	mov.w	r2, #0
   15d06:	f04f 0300 	mov.w	r3, #0
   15d0a:	f002 f947 	bl	17f9c <__aeabi_dcmplt>
   15d0e:	4603      	mov	r3, r0
   15d10:	2b00      	cmp	r3, #0
   15d12:	d004      	beq.n	15d1e <pp_atan2+0x156>
		return (-angle);
   15d14:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15d18:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15d1c:	e001      	b.n	15d22 <pp_atan2+0x15a>
	else
		return angle;
   15d1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15d22:	4622      	mov	r2, r4
   15d24:	462b      	mov	r3, r5
}
   15d26:	4610      	mov	r0, r2
   15d28:	4619      	mov	r1, r3
   15d2a:	3738      	adds	r7, #56	; 0x38
   15d2c:	46bd      	mov	sp, r7
   15d2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15d32:	bf00      	nop
   15d34:	f3af 8000 	nop.w
   15d38:	54442d18 	.word	0x54442d18
   15d3c:	3fe921fb 	.word	0x3fe921fb
   15d40:	d9d7bdbb 	.word	0xd9d7bdbb
   15d44:	3ddb7cdf 	.word	0x3ddb7cdf

00015d48 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15d48:	b5b0      	push	{r4, r5, r7, lr}
   15d4a:	b08c      	sub	sp, #48	; 0x30
   15d4c:	af00      	add	r7, sp, #0
   15d4e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15d52:	e9d7 2300 	ldrd	r2, r3, [r7]
   15d56:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d5a:	2301      	movs	r3, #1
   15d5c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15d5e:	e00a      	b.n	15d76 <pp_sin+0x2e>
   15d60:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d64:	a35a      	add	r3, pc, #360	; (adr r3, 15ed0 <pp_sin+0x188>)
   15d66:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d6a:	f001 fcf3 	bl	17754 <__adddf3>
   15d6e:	4602      	mov	r2, r0
   15d70:	460b      	mov	r3, r1
   15d72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d7a:	a357      	add	r3, pc, #348	; (adr r3, 15ed8 <pp_sin+0x190>)
   15d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d80:	f002 f90c 	bl	17f9c <__aeabi_dcmplt>
   15d84:	4603      	mov	r3, r0
   15d86:	2b00      	cmp	r3, #0
   15d88:	d1ea      	bne.n	15d60 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15d8a:	e00a      	b.n	15da2 <pp_sin+0x5a>
   15d8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d90:	a34f      	add	r3, pc, #316	; (adr r3, 15ed0 <pp_sin+0x188>)
   15d92:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d96:	f001 fcdb 	bl	17750 <__aeabi_dsub>
   15d9a:	4602      	mov	r2, r0
   15d9c:	460b      	mov	r3, r1
   15d9e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15da2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15da6:	a34e      	add	r3, pc, #312	; (adr r3, 15ee0 <pp_sin+0x198>)
   15da8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dac:	f002 f914 	bl	17fd8 <__aeabi_dcmpgt>
   15db0:	4603      	mov	r3, r0
   15db2:	2b00      	cmp	r3, #0
   15db4:	d1ea      	bne.n	15d8c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15db6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dba:	a34b      	add	r3, pc, #300	; (adr r3, 15ee8 <pp_sin+0x1a0>)
   15dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dc0:	f002 f90a 	bl	17fd8 <__aeabi_dcmpgt>
   15dc4:	4603      	mov	r3, r0
   15dc6:	2b00      	cmp	r3, #0
   15dc8:	d00d      	beq.n	15de6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15dca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dce:	a348      	add	r3, pc, #288	; (adr r3, 15ef0 <pp_sin+0x1a8>)
   15dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dd4:	f001 fcbc 	bl	17750 <__aeabi_dsub>
   15dd8:	4602      	mov	r2, r0
   15dda:	460b      	mov	r3, r1
   15ddc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15de0:	f04f 33ff 	mov.w	r3, #4294967295
   15de4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15de6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dea:	a343      	add	r3, pc, #268	; (adr r3, 15ef8 <pp_sin+0x1b0>)
   15dec:	e9d3 2300 	ldrd	r2, r3, [r3]
   15df0:	f001 ff8c 	bl	17d0c <__aeabi_ddiv>
   15df4:	4602      	mov	r2, r0
   15df6:	460b      	mov	r3, r1
   15df8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15dfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15e04:	f001 fe58 	bl	17ab8 <__aeabi_dmul>
   15e08:	4602      	mov	r2, r0
   15e0a:	460b      	mov	r3, r1
   15e0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15e10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15e14:	a33a      	add	r3, pc, #232	; (adr r3, 15f00 <pp_sin+0x1b8>)
   15e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e1a:	f001 fe4d 	bl	17ab8 <__aeabi_dmul>
   15e1e:	4602      	mov	r2, r0
   15e20:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15e22:	4610      	mov	r0, r2
   15e24:	4619      	mov	r1, r3
   15e26:	a338      	add	r3, pc, #224	; (adr r3, 15f08 <pp_sin+0x1c0>)
   15e28:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e2c:	f001 fc90 	bl	17750 <__aeabi_dsub>
   15e30:	4602      	mov	r2, r0
   15e32:	460b      	mov	r3, r1
   15e34:	4610      	mov	r0, r2
   15e36:	4619      	mov	r1, r3
   15e38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e3c:	f001 fe3c 	bl	17ab8 <__aeabi_dmul>
   15e40:	4602      	mov	r2, r0
   15e42:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15e44:	4610      	mov	r0, r2
   15e46:	4619      	mov	r1, r3
   15e48:	a331      	add	r3, pc, #196	; (adr r3, 15f10 <pp_sin+0x1c8>)
   15e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e4e:	f001 fc81 	bl	17754 <__adddf3>
   15e52:	4602      	mov	r2, r0
   15e54:	460b      	mov	r3, r1
   15e56:	4610      	mov	r0, r2
   15e58:	4619      	mov	r1, r3
   15e5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e5e:	f001 fe2b 	bl	17ab8 <__aeabi_dmul>
   15e62:	4602      	mov	r2, r0
   15e64:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15e66:	4610      	mov	r0, r2
   15e68:	4619      	mov	r1, r3
   15e6a:	a32b      	add	r3, pc, #172	; (adr r3, 15f18 <pp_sin+0x1d0>)
   15e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e70:	f001 fc6e 	bl	17750 <__aeabi_dsub>
   15e74:	4602      	mov	r2, r0
   15e76:	460b      	mov	r3, r1
   15e78:	4610      	mov	r0, r2
   15e7a:	4619      	mov	r1, r3
   15e7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e80:	f001 fe1a 	bl	17ab8 <__aeabi_dmul>
   15e84:	4602      	mov	r2, r0
   15e86:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15e88:	4610      	mov	r0, r2
   15e8a:	4619      	mov	r1, r3
   15e8c:	a324      	add	r3, pc, #144	; (adr r3, 15f20 <pp_sin+0x1d8>)
   15e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e92:	f001 fc5f 	bl	17754 <__adddf3>
   15e96:	4602      	mov	r2, r0
   15e98:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15e9a:	4610      	mov	r0, r2
   15e9c:	4619      	mov	r1, r3
   15e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15ea2:	f001 fe09 	bl	17ab8 <__aeabi_dmul>
   15ea6:	4602      	mov	r2, r0
   15ea8:	460b      	mov	r3, r1
   15eaa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15eb0:	2b00      	cmp	r3, #0
   15eb2:	da04      	bge.n	15ebe <pp_sin+0x176>
   15eb4:	68bc      	ldr	r4, [r7, #8]
   15eb6:	68fb      	ldr	r3, [r7, #12]
   15eb8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15ebc:	e001      	b.n	15ec2 <pp_sin+0x17a>
   15ebe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15ec2:	4622      	mov	r2, r4
   15ec4:	462b      	mov	r3, r5
}
   15ec6:	4610      	mov	r0, r2
   15ec8:	4619      	mov	r1, r3
   15eca:	3730      	adds	r7, #48	; 0x30
   15ecc:	46bd      	mov	sp, r7
   15ece:	bdb0      	pop	{r4, r5, r7, pc}
   15ed0:	54442d18 	.word	0x54442d18
   15ed4:	401921fb 	.word	0x401921fb
   15ed8:	54442d18 	.word	0x54442d18
   15edc:	bff921fb 	.word	0xbff921fb
   15ee0:	7f3321d2 	.word	0x7f3321d2
   15ee4:	4012d97c 	.word	0x4012d97c
   15ee8:	54442d18 	.word	0x54442d18
   15eec:	3ff921fb 	.word	0x3ff921fb
   15ef0:	54442d18 	.word	0x54442d18
   15ef4:	400921fb 	.word	0x400921fb
   15ef8:	5443d6f4 	.word	0x5443d6f4
   15efc:	3ff921fb 	.word	0x3ff921fb
   15f00:	48a890af 	.word	0x48a890af
   15f04:	3f23daf7 	.word	0x3f23daf7
   15f08:	645b6d0e 	.word	0x645b6d0e
   15f0c:	3f7324cc 	.word	0x3f7324cc
   15f10:	f65619a5 	.word	0xf65619a5
   15f14:	3fb4668a 	.word	0x3fb4668a
   15f18:	16acf9cd 	.word	0x16acf9cd
   15f1c:	3fe4abbc 	.word	0x3fe4abbc
   15f20:	520817f7 	.word	0x520817f7
   15f24:	3ff921fb 	.word	0x3ff921fb

00015f28 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15f28:	b480      	push	{r7}
   15f2a:	b083      	sub	sp, #12
   15f2c:	af00      	add	r7, sp, #0
   15f2e:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15f32:	4610      	mov	r0, r2
   15f34:	4619      	mov	r1, r3
   15f36:	370c      	adds	r7, #12
   15f38:	46bd      	mov	sp, r7
   15f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f3e:	4770      	bx	lr

00015f40 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15f40:	b480      	push	{r7}
   15f42:	b083      	sub	sp, #12
   15f44:	af00      	add	r7, sp, #0
   15f46:	4603      	mov	r3, r0
   15f48:	6039      	str	r1, [r7, #0]
   15f4a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15f4c:	79fa      	ldrb	r2, [r7, #7]
   15f4e:	f64c 1350 	movw	r3, #51536	; 0xc950
   15f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f56:	6839      	ldr	r1, [r7, #0]
   15f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15f5c:	370c      	adds	r7, #12
   15f5e:	46bd      	mov	sp, r7
   15f60:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f64:	4770      	bx	lr
   15f66:	bf00      	nop

00015f68 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15f68:	b480      	push	{r7}
   15f6a:	b083      	sub	sp, #12
   15f6c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15f6e:	f242 0315 	movw	r3, #8213	; 0x2015
   15f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f76:	2200      	movs	r2, #0
   15f78:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15f7a:	f242 0314 	movw	r3, #8212	; 0x2014
   15f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f82:	2200      	movs	r2, #0
   15f84:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15f86:	f242 0307 	movw	r3, #8199	; 0x2007
   15f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f8e:	22c0      	movs	r2, #192	; 0xc0
   15f90:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15f92:	f242 0306 	movw	r3, #8198	; 0x2006
   15f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f9a:	22cf      	movs	r2, #207	; 0xcf
   15f9c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15f9e:	2300      	movs	r3, #0
   15fa0:	71fb      	strb	r3, [r7, #7]
   15fa2:	e00a      	b.n	15fba <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15fa4:	79fa      	ldrb	r2, [r7, #7]
   15fa6:	f64c 1350 	movw	r3, #51536	; 0xc950
   15faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fae:	2100      	movs	r1, #0
   15fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15fb4:	79fb      	ldrb	r3, [r7, #7]
   15fb6:	3301      	adds	r3, #1
   15fb8:	71fb      	strb	r3, [r7, #7]
   15fba:	79fb      	ldrb	r3, [r7, #7]
   15fbc:	2b07      	cmp	r3, #7
   15fbe:	d9f1      	bls.n	15fa4 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15fc0:	370c      	adds	r7, #12
   15fc2:	46bd      	mov	sp, r7
   15fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fc8:	4770      	bx	lr
   15fca:	bf00      	nop

00015fcc <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15fcc:	b480      	push	{r7}
   15fce:	b083      	sub	sp, #12
   15fd0:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15fd2:	f242 0326 	movw	r3, #8230	; 0x2026
   15fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fda:	881b      	ldrh	r3, [r3, #0]
   15fdc:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15fde:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   15fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fe6:	881b      	ldrh	r3, [r3, #0]
   15fe8:	88fa      	ldrh	r2, [r7, #6]
   15fea:	1ad3      	subs	r3, r2, r3
   15fec:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15fee:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   15ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ff6:	88fa      	ldrh	r2, [r7, #6]
   15ff8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15ffa:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   15ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16002:	781b      	ldrb	r3, [r3, #0]
   16004:	2b00      	cmp	r3, #0
   16006:	d11e      	bne.n	16046 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   16008:	f242 0324 	movw	r3, #8228	; 0x2024
   1600c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16010:	781b      	ldrb	r3, [r3, #0]
   16012:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   16014:	f64c 13af 	movw	r3, #51631	; 0xc9af
   16018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1601c:	781b      	ldrb	r3, [r3, #0]
   1601e:	78fa      	ldrb	r2, [r7, #3]
   16020:	1ad3      	subs	r3, r2, r3
   16022:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   16024:	f64c 13af 	movw	r3, #51631	; 0xc9af
   16028:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1602c:	78fa      	ldrb	r2, [r7, #3]
   1602e:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   16030:	78bb      	ldrb	r3, [r7, #2]
   16032:	2b6d      	cmp	r3, #109	; 0x6d
   16034:	d906      	bls.n	16044 <__vector_34+0x78>
      state = 1;
   16036:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   1603a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1603e:	2201      	movs	r2, #1
   16040:	701a      	strb	r2, [r3, #0]
   16042:	e053      	b.n	160ec <__vector_34+0x120>
   16044:	e052      	b.n	160ec <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   16046:	88bb      	ldrh	r3, [r7, #4]
   16048:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   1604c:	d304      	bcc.n	16058 <__vector_34+0x8c>
   1604e:	88ba      	ldrh	r2, [r7, #4]
   16050:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   16054:	429a      	cmp	r2, r3
   16056:	d911      	bls.n	1607c <__vector_34+0xb0>
      RestartPpmCycle();
   16058:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   1605c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16060:	2200      	movs	r2, #0
   16062:	701a      	strb	r2, [r3, #0]
   16064:	f242 0324 	movw	r3, #8228	; 0x2024
   16068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1606c:	781b      	ldrb	r3, [r3, #0]
   1606e:	b2da      	uxtb	r2, r3
   16070:	f64c 13af 	movw	r3, #51631	; 0xc9af
   16074:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16078:	701a      	strb	r2, [r3, #0]
   1607a:	e038      	b.n	160ee <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   1607c:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16084:	781b      	ldrb	r3, [r3, #0]
   16086:	1e5a      	subs	r2, r3, #1
   16088:	f64c 1370 	movw	r3, #51568	; 0xc970
   1608c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16090:	88b9      	ldrh	r1, [r7, #4]
   16092:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   16096:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   1609a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1609e:	781b      	ldrb	r3, [r3, #0]
   160a0:	2b08      	cmp	r3, #8
   160a2:	d917      	bls.n	160d4 <__vector_34+0x108>
      ppm_valid	= 1;
   160a4:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   160a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160ac:	2201      	movs	r2, #1
   160ae:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   160b0:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   160b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160b8:	2200      	movs	r2, #0
   160ba:	701a      	strb	r2, [r3, #0]
   160bc:	f242 0324 	movw	r3, #8228	; 0x2024
   160c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160c4:	781b      	ldrb	r3, [r3, #0]
   160c6:	b2da      	uxtb	r2, r3
   160c8:	f64c 13af 	movw	r3, #51631	; 0xc9af
   160cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160d0:	701a      	strb	r2, [r3, #0]
   160d2:	e00c      	b.n	160ee <__vector_34+0x122>
    } else 
      state++;
   160d4:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   160d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160dc:	781b      	ldrb	r3, [r3, #0]
   160de:	3301      	adds	r3, #1
   160e0:	b2da      	uxtb	r2, r3
   160e2:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   160e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160ea:	701a      	strb	r2, [r3, #0]
  }
  return;
   160ec:	bf00      	nop
}
   160ee:	370c      	adds	r7, #12
   160f0:	46bd      	mov	sp, r7
   160f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   160f6:	4770      	bx	lr

000160f8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   160f8:	b590      	push	{r4, r7, lr}
   160fa:	b083      	sub	sp, #12
   160fc:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   160fe:	f64c 1370 	movw	r3, #51568	; 0xc970
   16102:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16106:	881b      	ldrh	r3, [r3, #0]
   16108:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   1610c:	b29b      	uxth	r3, r3
   1610e:	80fb      	strh	r3, [r7, #6]
   16110:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16114:	4618      	mov	r0, r3
   16116:	f002 f8bb 	bl	18290 <__aeabi_i2f>
   1611a:	4603      	mov	r3, r0
   1611c:	4618      	mov	r0, r3
   1611e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   16122:	f002 f909 	bl	18338 <__aeabi_fmul>
   16126:	4603      	mov	r3, r0
   16128:	4618      	mov	r0, r3
   1612a:	f002 facb 	bl	186c4 <__aeabi_f2iz>
   1612e:	4603      	mov	r3, r0
   16130:	b29a      	uxth	r2, r3
   16132:	f64c 1384 	movw	r3, #51588	; 0xc984
   16136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1613a:	801a      	strh	r2, [r3, #0]
   1613c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16140:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16144:	881b      	ldrh	r3, [r3, #0]
   16146:	b21b      	sxth	r3, r3
   16148:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1614c:	dd07      	ble.n	1615e <last_radio_from_ppm+0x66>
   1614e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16156:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1615a:	801a      	strh	r2, [r3, #0]
   1615c:	e00d      	b.n	1617a <last_radio_from_ppm+0x82>
   1615e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16166:	881b      	ldrh	r3, [r3, #0]
   16168:	b21b      	sxth	r3, r3
   1616a:	2b00      	cmp	r3, #0
   1616c:	da05      	bge.n	1617a <last_radio_from_ppm+0x82>
   1616e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16176:	2200      	movs	r2, #0
   16178:	801a      	strh	r2, [r3, #0]
   1617a:	f64c 1370 	movw	r3, #51568	; 0xc970
   1617e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16182:	885b      	ldrh	r3, [r3, #2]
   16184:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16188:	b29b      	uxth	r3, r3
   1618a:	80fb      	strh	r3, [r7, #6]
   1618c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16190:	4618      	mov	r0, r3
   16192:	f002 f87d 	bl	18290 <__aeabi_i2f>
   16196:	4603      	mov	r3, r0
   16198:	4618      	mov	r0, r3
   1619a:	f002 fa93 	bl	186c4 <__aeabi_f2iz>
   1619e:	4603      	mov	r3, r0
   161a0:	b29a      	uxth	r2, r3
   161a2:	f64c 1384 	movw	r3, #51588	; 0xc984
   161a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161aa:	805a      	strh	r2, [r3, #2]
   161ac:	f64c 1384 	movw	r3, #51588	; 0xc984
   161b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161b4:	885b      	ldrh	r3, [r3, #2]
   161b6:	b21b      	sxth	r3, r3
   161b8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161bc:	dd07      	ble.n	161ce <last_radio_from_ppm+0xd6>
   161be:	f64c 1384 	movw	r3, #51588	; 0xc984
   161c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   161ca:	805a      	strh	r2, [r3, #2]
   161cc:	e00f      	b.n	161ee <last_radio_from_ppm+0xf6>
   161ce:	f64c 1384 	movw	r3, #51588	; 0xc984
   161d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161d6:	885b      	ldrh	r3, [r3, #2]
   161d8:	b21b      	sxth	r3, r3
   161da:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   161de:	da06      	bge.n	161ee <last_radio_from_ppm+0xf6>
   161e0:	f64c 1384 	movw	r3, #51588	; 0xc984
   161e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161e8:	f64d 2280 	movw	r2, #55936	; 0xda80
   161ec:	805a      	strh	r2, [r3, #2]
   161ee:	f64c 1370 	movw	r3, #51568	; 0xc970
   161f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161f6:	889b      	ldrh	r3, [r3, #4]
   161f8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161fc:	b29b      	uxth	r3, r3
   161fe:	80fb      	strh	r3, [r7, #6]
   16200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16204:	4618      	mov	r0, r3
   16206:	f002 f843 	bl	18290 <__aeabi_i2f>
   1620a:	4603      	mov	r3, r0
   1620c:	4618      	mov	r0, r3
   1620e:	f002 fa59 	bl	186c4 <__aeabi_f2iz>
   16212:	4603      	mov	r3, r0
   16214:	b29a      	uxth	r2, r3
   16216:	f64c 1384 	movw	r3, #51588	; 0xc984
   1621a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1621e:	809a      	strh	r2, [r3, #4]
   16220:	f64c 1384 	movw	r3, #51588	; 0xc984
   16224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16228:	889b      	ldrh	r3, [r3, #4]
   1622a:	b21b      	sxth	r3, r3
   1622c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16230:	dd07      	ble.n	16242 <last_radio_from_ppm+0x14a>
   16232:	f64c 1384 	movw	r3, #51588	; 0xc984
   16236:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1623a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1623e:	809a      	strh	r2, [r3, #4]
   16240:	e00f      	b.n	16262 <last_radio_from_ppm+0x16a>
   16242:	f64c 1384 	movw	r3, #51588	; 0xc984
   16246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1624a:	889b      	ldrh	r3, [r3, #4]
   1624c:	b21b      	sxth	r3, r3
   1624e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16252:	da06      	bge.n	16262 <last_radio_from_ppm+0x16a>
   16254:	f64c 1384 	movw	r3, #51588	; 0xc984
   16258:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1625c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16260:	809a      	strh	r2, [r3, #4]
   16262:	f64c 1370 	movw	r3, #51568	; 0xc970
   16266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1626a:	88db      	ldrh	r3, [r3, #6]
   1626c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16270:	b29b      	uxth	r3, r3
   16272:	80fb      	strh	r3, [r7, #6]
   16274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16278:	4618      	mov	r0, r3
   1627a:	f002 f809 	bl	18290 <__aeabi_i2f>
   1627e:	4603      	mov	r3, r0
   16280:	4618      	mov	r0, r3
   16282:	f002 fa1f 	bl	186c4 <__aeabi_f2iz>
   16286:	4603      	mov	r3, r0
   16288:	b29a      	uxth	r2, r3
   1628a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1628e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16292:	80da      	strh	r2, [r3, #6]
   16294:	f64c 1384 	movw	r3, #51588	; 0xc984
   16298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1629c:	88db      	ldrh	r3, [r3, #6]
   1629e:	b21b      	sxth	r3, r3
   162a0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162a4:	dd07      	ble.n	162b6 <last_radio_from_ppm+0x1be>
   162a6:	f64c 1384 	movw	r3, #51588	; 0xc984
   162aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ae:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162b2:	80da      	strh	r2, [r3, #6]
   162b4:	e00f      	b.n	162d6 <last_radio_from_ppm+0x1de>
   162b6:	f64c 1384 	movw	r3, #51588	; 0xc984
   162ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162be:	88db      	ldrh	r3, [r3, #6]
   162c0:	b21b      	sxth	r3, r3
   162c2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   162c6:	da06      	bge.n	162d6 <last_radio_from_ppm+0x1de>
   162c8:	f64c 1384 	movw	r3, #51588	; 0xc984
   162cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162d0:	f64d 2280 	movw	r2, #55936	; 0xda80
   162d4:	80da      	strh	r2, [r3, #6]
   162d6:	f64c 1370 	movw	r3, #51568	; 0xc970
   162da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162de:	891b      	ldrh	r3, [r3, #8]
   162e0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162e4:	b29b      	uxth	r3, r3
   162e6:	80fb      	strh	r3, [r7, #6]
   162e8:	f64c 1398 	movw	r3, #51608	; 0xc998
   162ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162f0:	891b      	ldrh	r3, [r3, #8]
   162f2:	b21b      	sxth	r3, r3
   162f4:	4618      	mov	r0, r3
   162f6:	f001 ffcb 	bl	18290 <__aeabi_i2f>
   162fa:	4604      	mov	r4, r0
   162fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16300:	4618      	mov	r0, r3
   16302:	f001 ffc5 	bl	18290 <__aeabi_i2f>
   16306:	4603      	mov	r3, r0
   16308:	4618      	mov	r0, r3
   1630a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1630e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16312:	f002 f811 	bl	18338 <__aeabi_fmul>
   16316:	4603      	mov	r3, r0
   16318:	4620      	mov	r0, r4
   1631a:	4619      	mov	r1, r3
   1631c:	f001 ff04 	bl	18128 <__addsf3>
   16320:	4603      	mov	r3, r0
   16322:	4618      	mov	r0, r3
   16324:	f002 f9ce 	bl	186c4 <__aeabi_f2iz>
   16328:	4603      	mov	r3, r0
   1632a:	b29a      	uxth	r2, r3
   1632c:	f64c 1398 	movw	r3, #51608	; 0xc998
   16330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16334:	811a      	strh	r2, [r3, #8]
   16336:	f64c 1370 	movw	r3, #51568	; 0xc970
   1633a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1633e:	895b      	ldrh	r3, [r3, #10]
   16340:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16344:	b29b      	uxth	r3, r3
   16346:	80fb      	strh	r3, [r7, #6]
   16348:	f64c 1398 	movw	r3, #51608	; 0xc998
   1634c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16350:	895b      	ldrh	r3, [r3, #10]
   16352:	b21b      	sxth	r3, r3
   16354:	4618      	mov	r0, r3
   16356:	f001 ff9b 	bl	18290 <__aeabi_i2f>
   1635a:	4604      	mov	r4, r0
   1635c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16360:	4618      	mov	r0, r3
   16362:	f001 ff95 	bl	18290 <__aeabi_i2f>
   16366:	4603      	mov	r3, r0
   16368:	4618      	mov	r0, r3
   1636a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1636e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16372:	f001 ffe1 	bl	18338 <__aeabi_fmul>
   16376:	4603      	mov	r3, r0
   16378:	4620      	mov	r0, r4
   1637a:	4619      	mov	r1, r3
   1637c:	f001 fed4 	bl	18128 <__addsf3>
   16380:	4603      	mov	r3, r0
   16382:	4618      	mov	r0, r3
   16384:	f002 f99e 	bl	186c4 <__aeabi_f2iz>
   16388:	4603      	mov	r3, r0
   1638a:	b29a      	uxth	r2, r3
   1638c:	f64c 1398 	movw	r3, #51608	; 0xc998
   16390:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16394:	815a      	strh	r2, [r3, #10]
   16396:	f64c 1370 	movw	r3, #51568	; 0xc970
   1639a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1639e:	899b      	ldrh	r3, [r3, #12]
   163a0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163a4:	b29b      	uxth	r3, r3
   163a6:	80fb      	strh	r3, [r7, #6]
   163a8:	f64c 1398 	movw	r3, #51608	; 0xc998
   163ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163b0:	899b      	ldrh	r3, [r3, #12]
   163b2:	b21b      	sxth	r3, r3
   163b4:	4618      	mov	r0, r3
   163b6:	f001 ff6b 	bl	18290 <__aeabi_i2f>
   163ba:	4604      	mov	r4, r0
   163bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163c0:	4618      	mov	r0, r3
   163c2:	f001 ff65 	bl	18290 <__aeabi_i2f>
   163c6:	4603      	mov	r3, r0
   163c8:	4618      	mov	r0, r3
   163ca:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   163ce:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   163d2:	f001 ffb1 	bl	18338 <__aeabi_fmul>
   163d6:	4603      	mov	r3, r0
   163d8:	4620      	mov	r0, r4
   163da:	4619      	mov	r1, r3
   163dc:	f001 fea4 	bl	18128 <__addsf3>
   163e0:	4603      	mov	r3, r0
   163e2:	4618      	mov	r0, r3
   163e4:	f002 f96e 	bl	186c4 <__aeabi_f2iz>
   163e8:	4603      	mov	r3, r0
   163ea:	b29a      	uxth	r2, r3
   163ec:	f64c 1398 	movw	r3, #51608	; 0xc998
   163f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163f4:	819a      	strh	r2, [r3, #12]
   163f6:	f64c 1370 	movw	r3, #51568	; 0xc970
   163fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163fe:	89db      	ldrh	r3, [r3, #14]
   16400:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16404:	b29b      	uxth	r3, r3
   16406:	80fb      	strh	r3, [r7, #6]
   16408:	f64c 1398 	movw	r3, #51608	; 0xc998
   1640c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16410:	89db      	ldrh	r3, [r3, #14]
   16412:	b21b      	sxth	r3, r3
   16414:	4618      	mov	r0, r3
   16416:	f001 ff3b 	bl	18290 <__aeabi_i2f>
   1641a:	4604      	mov	r4, r0
   1641c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16420:	4618      	mov	r0, r3
   16422:	f001 ff35 	bl	18290 <__aeabi_i2f>
   16426:	4603      	mov	r3, r0
   16428:	4618      	mov	r0, r3
   1642a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1642e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16432:	f001 ff81 	bl	18338 <__aeabi_fmul>
   16436:	4603      	mov	r3, r0
   16438:	4620      	mov	r0, r4
   1643a:	4619      	mov	r1, r3
   1643c:	f001 fe74 	bl	18128 <__addsf3>
   16440:	4603      	mov	r3, r0
   16442:	4618      	mov	r0, r3
   16444:	f002 f93e 	bl	186c4 <__aeabi_f2iz>
   16448:	4603      	mov	r3, r0
   1644a:	b29a      	uxth	r2, r3
   1644c:	f64c 1398 	movw	r3, #51608	; 0xc998
   16450:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16454:	81da      	strh	r2, [r3, #14]
   16456:	f64c 1370 	movw	r3, #51568	; 0xc970
   1645a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1645e:	8a1b      	ldrh	r3, [r3, #16]
   16460:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16464:	b29b      	uxth	r3, r3
   16466:	80fb      	strh	r3, [r7, #6]
   16468:	f64c 1398 	movw	r3, #51608	; 0xc998
   1646c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16470:	8a1b      	ldrh	r3, [r3, #16]
   16472:	b21b      	sxth	r3, r3
   16474:	4618      	mov	r0, r3
   16476:	f001 ff0b 	bl	18290 <__aeabi_i2f>
   1647a:	4604      	mov	r4, r0
   1647c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16480:	4618      	mov	r0, r3
   16482:	f001 ff05 	bl	18290 <__aeabi_i2f>
   16486:	4603      	mov	r3, r0
   16488:	4618      	mov	r0, r3
   1648a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1648e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16492:	f001 ff51 	bl	18338 <__aeabi_fmul>
   16496:	4603      	mov	r3, r0
   16498:	4620      	mov	r0, r4
   1649a:	4619      	mov	r1, r3
   1649c:	f001 fe44 	bl	18128 <__addsf3>
   164a0:	4603      	mov	r3, r0
   164a2:	4618      	mov	r0, r3
   164a4:	f002 f90e 	bl	186c4 <__aeabi_f2iz>
   164a8:	4603      	mov	r3, r0
   164aa:	b29a      	uxth	r2, r3
   164ac:	f64c 1398 	movw	r3, #51608	; 0xc998
   164b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164b4:	821a      	strh	r2, [r3, #16]
   164b6:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   164ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164be:	781b      	ldrb	r3, [r3, #0]
   164c0:	3301      	adds	r3, #1
   164c2:	b2da      	uxtb	r2, r3
   164c4:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   164c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164cc:	701a      	strb	r2, [r3, #0]
   164ce:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   164d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164d6:	781b      	ldrb	r3, [r3, #0]
   164d8:	2b0a      	cmp	r3, #10
   164da:	f040 8101 	bne.w	166e0 <last_radio_from_ppm+0x5e8>
   164de:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   164e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164e6:	2200      	movs	r2, #0
   164e8:	701a      	strb	r2, [r3, #0]
   164ea:	f64c 1398 	movw	r3, #51608	; 0xc998
   164ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f2:	891a      	ldrh	r2, [r3, #8]
   164f4:	f64c 1384 	movw	r3, #51588	; 0xc984
   164f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164fc:	811a      	strh	r2, [r3, #8]
   164fe:	f64c 1398 	movw	r3, #51608	; 0xc998
   16502:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16506:	2200      	movs	r2, #0
   16508:	811a      	strh	r2, [r3, #8]
   1650a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1650e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16512:	891b      	ldrh	r3, [r3, #8]
   16514:	b21b      	sxth	r3, r3
   16516:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1651a:	dd07      	ble.n	1652c <last_radio_from_ppm+0x434>
   1651c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16524:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16528:	811a      	strh	r2, [r3, #8]
   1652a:	e00f      	b.n	1654c <last_radio_from_ppm+0x454>
   1652c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16534:	891b      	ldrh	r3, [r3, #8]
   16536:	b21b      	sxth	r3, r3
   16538:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1653c:	da06      	bge.n	1654c <last_radio_from_ppm+0x454>
   1653e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16546:	f64d 2280 	movw	r2, #55936	; 0xda80
   1654a:	811a      	strh	r2, [r3, #8]
   1654c:	f64c 1398 	movw	r3, #51608	; 0xc998
   16550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16554:	895a      	ldrh	r2, [r3, #10]
   16556:	f64c 1384 	movw	r3, #51588	; 0xc984
   1655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1655e:	815a      	strh	r2, [r3, #10]
   16560:	f64c 1398 	movw	r3, #51608	; 0xc998
   16564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16568:	2200      	movs	r2, #0
   1656a:	815a      	strh	r2, [r3, #10]
   1656c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16574:	895b      	ldrh	r3, [r3, #10]
   16576:	b21b      	sxth	r3, r3
   16578:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1657c:	dd07      	ble.n	1658e <last_radio_from_ppm+0x496>
   1657e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16586:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1658a:	815a      	strh	r2, [r3, #10]
   1658c:	e00f      	b.n	165ae <last_radio_from_ppm+0x4b6>
   1658e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16596:	895b      	ldrh	r3, [r3, #10]
   16598:	b21b      	sxth	r3, r3
   1659a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1659e:	da06      	bge.n	165ae <last_radio_from_ppm+0x4b6>
   165a0:	f64c 1384 	movw	r3, #51588	; 0xc984
   165a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165a8:	f64d 2280 	movw	r2, #55936	; 0xda80
   165ac:	815a      	strh	r2, [r3, #10]
   165ae:	f64c 1398 	movw	r3, #51608	; 0xc998
   165b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165b6:	899a      	ldrh	r2, [r3, #12]
   165b8:	f64c 1384 	movw	r3, #51588	; 0xc984
   165bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165c0:	819a      	strh	r2, [r3, #12]
   165c2:	f64c 1398 	movw	r3, #51608	; 0xc998
   165c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ca:	2200      	movs	r2, #0
   165cc:	819a      	strh	r2, [r3, #12]
   165ce:	f64c 1384 	movw	r3, #51588	; 0xc984
   165d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d6:	899b      	ldrh	r3, [r3, #12]
   165d8:	b21b      	sxth	r3, r3
   165da:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   165de:	dd07      	ble.n	165f0 <last_radio_from_ppm+0x4f8>
   165e0:	f64c 1384 	movw	r3, #51588	; 0xc984
   165e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   165ec:	819a      	strh	r2, [r3, #12]
   165ee:	e00f      	b.n	16610 <last_radio_from_ppm+0x518>
   165f0:	f64c 1384 	movw	r3, #51588	; 0xc984
   165f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f8:	899b      	ldrh	r3, [r3, #12]
   165fa:	b21b      	sxth	r3, r3
   165fc:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16600:	da06      	bge.n	16610 <last_radio_from_ppm+0x518>
   16602:	f64c 1384 	movw	r3, #51588	; 0xc984
   16606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1660a:	f64d 2280 	movw	r2, #55936	; 0xda80
   1660e:	819a      	strh	r2, [r3, #12]
   16610:	f64c 1398 	movw	r3, #51608	; 0xc998
   16614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16618:	89da      	ldrh	r2, [r3, #14]
   1661a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1661e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16622:	81da      	strh	r2, [r3, #14]
   16624:	f64c 1398 	movw	r3, #51608	; 0xc998
   16628:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1662c:	2200      	movs	r2, #0
   1662e:	81da      	strh	r2, [r3, #14]
   16630:	f64c 1384 	movw	r3, #51588	; 0xc984
   16634:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16638:	89db      	ldrh	r3, [r3, #14]
   1663a:	b21b      	sxth	r3, r3
   1663c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16640:	dd07      	ble.n	16652 <last_radio_from_ppm+0x55a>
   16642:	f64c 1384 	movw	r3, #51588	; 0xc984
   16646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1664a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1664e:	81da      	strh	r2, [r3, #14]
   16650:	e00f      	b.n	16672 <last_radio_from_ppm+0x57a>
   16652:	f64c 1384 	movw	r3, #51588	; 0xc984
   16656:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1665a:	89db      	ldrh	r3, [r3, #14]
   1665c:	b21b      	sxth	r3, r3
   1665e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16662:	da06      	bge.n	16672 <last_radio_from_ppm+0x57a>
   16664:	f64c 1384 	movw	r3, #51588	; 0xc984
   16668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1666c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16670:	81da      	strh	r2, [r3, #14]
   16672:	f64c 1398 	movw	r3, #51608	; 0xc998
   16676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1667a:	8a1a      	ldrh	r2, [r3, #16]
   1667c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16684:	821a      	strh	r2, [r3, #16]
   16686:	f64c 1398 	movw	r3, #51608	; 0xc998
   1668a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1668e:	2200      	movs	r2, #0
   16690:	821a      	strh	r2, [r3, #16]
   16692:	f64c 1384 	movw	r3, #51588	; 0xc984
   16696:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1669a:	8a1b      	ldrh	r3, [r3, #16]
   1669c:	b21b      	sxth	r3, r3
   1669e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   166a2:	dd07      	ble.n	166b4 <last_radio_from_ppm+0x5bc>
   166a4:	f64c 1384 	movw	r3, #51588	; 0xc984
   166a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   166b0:	821a      	strh	r2, [r3, #16]
   166b2:	e00f      	b.n	166d4 <last_radio_from_ppm+0x5dc>
   166b4:	f64c 1384 	movw	r3, #51588	; 0xc984
   166b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166bc:	8a1b      	ldrh	r3, [r3, #16]
   166be:	b21b      	sxth	r3, r3
   166c0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   166c4:	da06      	bge.n	166d4 <last_radio_from_ppm+0x5dc>
   166c6:	f64c 1384 	movw	r3, #51588	; 0xc984
   166ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ce:	f64d 2280 	movw	r2, #55936	; 0xda80
   166d2:	821a      	strh	r2, [r3, #16]
   166d4:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   166d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166dc:	2201      	movs	r2, #1
   166de:	701a      	strb	r2, [r3, #0]
}
   166e0:	370c      	adds	r7, #12
   166e2:	46bd      	mov	sp, r7
   166e4:	bd90      	pop	{r4, r7, pc}
   166e6:	bf00      	nop

000166e8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   166e8:	b480      	push	{r7}
   166ea:	af00      	add	r7, sp, #0
  idx_buf = 0;
   166ec:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   166f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166f4:	2200      	movs	r2, #0
   166f6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   166f8:	f64c 13e5 	movw	r3, #51685	; 0xc9e5
   166fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16700:	2200      	movs	r2, #0
   16702:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   16704:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   16708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1670c:	781b      	ldrb	r3, [r3, #0]
   1670e:	b2db      	uxtb	r3, r3
   16710:	461a      	mov	r2, r3
   16712:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16716:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1671a:	4413      	add	r3, r2
   1671c:	781a      	ldrb	r2, [r3, #0]
   1671e:	f64c 13e6 	movw	r3, #51686	; 0xc9e6
   16722:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16726:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16728:	f242 030f 	movw	r3, #8207	; 0x200f
   1672c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16730:	f64c 12e6 	movw	r2, #51686	; 0xc9e6
   16734:	f2c2 0204 	movt	r2, #8196	; 0x2004
   16738:	7812      	ldrb	r2, [r2, #0]
   1673a:	b2d2      	uxtb	r2, r2
   1673c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1673e:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   16742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16746:	2200      	movs	r2, #0
   16748:	701a      	strb	r2, [r3, #0]
}
   1674a:	46bd      	mov	sp, r7
   1674c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16750:	4770      	bx	lr
   16752:	bf00      	nop

00016754 <fbw_spi_init>:

void fbw_spi_init(void) {
   16754:	b480      	push	{r7}
   16756:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16758:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1675c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16760:	2200      	movs	r2, #0
   16762:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   16764:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1676c:	2200      	movs	r2, #0
   1676e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16770:	f242 0317 	movw	r3, #8215	; 0x2017
   16774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16778:	f242 0217 	movw	r2, #8215	; 0x2017
   1677c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16780:	7812      	ldrb	r2, [r2, #0]
   16782:	b2d2      	uxtb	r2, r2
   16784:	f042 0210 	orr.w	r2, r2, #16
   16788:	b2d2      	uxtb	r2, r2
   1678a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1678c:	f242 030d 	movw	r3, #8205	; 0x200d
   16790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16794:	2240      	movs	r2, #64	; 0x40
   16796:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16798:	f242 030d 	movw	r3, #8205	; 0x200d
   1679c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167a0:	f242 020d 	movw	r2, #8205	; 0x200d
   167a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167a8:	7812      	ldrb	r2, [r2, #0]
   167aa:	b2d2      	uxtb	r2, r2
   167ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
   167b0:	b2d2      	uxtb	r2, r2
   167b2:	701a      	strb	r2, [r3, #0]
}
   167b4:	46bd      	mov	sp, r7
   167b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   167ba:	4770      	bx	lr
   167bc:	0000      	movs	r0, r0
	...

000167c0 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   167c0:	b480      	push	{r7}
   167c2:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   167c4:	f242 032f 	movw	r3, #8239	; 0x202f
   167c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167cc:	2200      	movs	r2, #0
   167ce:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   167d0:	f242 032e 	movw	r3, #8238	; 0x202e
   167d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167d8:	2201      	movs	r2, #1
   167da:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   167dc:	f242 0325 	movw	r3, #8229	; 0x2025
   167e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167e4:	2207      	movs	r2, #7
   167e6:	701a      	strb	r2, [r3, #0]
}
   167e8:	46bd      	mov	sp, r7
   167ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   167ee:	4770      	bx	lr

000167f0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   167f0:	b480      	push	{r7}
   167f2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   167f4:	f242 032e 	movw	r3, #8238	; 0x202e
   167f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167fc:	f242 022e 	movw	r2, #8238	; 0x202e
   16800:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16804:	7812      	ldrb	r2, [r2, #0]
   16806:	b2d2      	uxtb	r2, r2
   16808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1680c:	b2d2      	uxtb	r2, r2
   1680e:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16810:	f242 032e 	movw	r3, #8238	; 0x202e
   16814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16818:	f242 022e 	movw	r2, #8238	; 0x202e
   1681c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16820:	7812      	ldrb	r2, [r2, #0]
   16822:	b2d2      	uxtb	r2, r2
   16824:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16828:	b2d2      	uxtb	r2, r2
   1682a:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   1682c:	f242 0317 	movw	r3, #8215	; 0x2017
   16830:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16834:	f242 0217 	movw	r2, #8215	; 0x2017
   16838:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1683c:	7812      	ldrb	r2, [r2, #0]
   1683e:	b2d2      	uxtb	r2, r2
   16840:	f022 0201 	bic.w	r2, r2, #1
   16844:	b2d2      	uxtb	r2, r2
   16846:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16848:	f242 0337 	movw	r3, #8247	; 0x2037
   1684c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16850:	f242 0237 	movw	r2, #8247	; 0x2037
   16854:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16858:	7812      	ldrb	r2, [r2, #0]
   1685a:	b2d2      	uxtb	r2, r2
   1685c:	f042 0220 	orr.w	r2, r2, #32
   16860:	b2d2      	uxtb	r2, r2
   16862:	701a      	strb	r2, [r3, #0]
}
   16864:	46bd      	mov	sp, r7
   16866:	f85d 7b04 	ldr.w	r7, [sp], #4
   1686a:	4770      	bx	lr

0001686c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1686c:	b580      	push	{r7, lr}
   1686e:	b082      	sub	sp, #8
   16870:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16872:	2300      	movs	r3, #0
   16874:	71fb      	strb	r3, [r7, #7]
   16876:	e010      	b.n	1689a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16878:	79fa      	ldrb	r2, [r7, #7]
   1687a:	79f9      	ldrb	r1, [r7, #7]
   1687c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16884:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16888:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1688c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16890:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16894:	79fb      	ldrb	r3, [r7, #7]
   16896:	3301      	adds	r3, #1
   16898:	71fb      	strb	r3, [r7, #7]
   1689a:	79fb      	ldrb	r3, [r7, #7]
   1689c:	2b08      	cmp	r3, #8
   1689e:	d9eb      	bls.n	16878 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   168a0:	f64c 2374 	movw	r3, #51828	; 0xca74
   168a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168a8:	781b      	ldrb	r3, [r3, #0]
   168aa:	2b00      	cmp	r3, #0
   168ac:	bf0c      	ite	eq
   168ae:	2300      	moveq	r3, #0
   168b0:	2301      	movne	r3, #1
   168b2:	b2db      	uxtb	r3, r3
   168b4:	461a      	mov	r2, r3
   168b6:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168be:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   168c0:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168c8:	7cdb      	ldrb	r3, [r3, #19]
   168ca:	b2da      	uxtb	r2, r3
   168cc:	f64c 2376 	movw	r3, #51830	; 0xca76
   168d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168d4:	781b      	ldrb	r3, [r3, #0]
   168d6:	2b00      	cmp	r3, #0
   168d8:	d001      	beq.n	168de <to_autopilot_from_last_radio+0x72>
   168da:	2302      	movs	r3, #2
   168dc:	e000      	b.n	168e0 <to_autopilot_from_last_radio+0x74>
   168de:	2300      	movs	r3, #0
   168e0:	4313      	orrs	r3, r2
   168e2:	b2db      	uxtb	r3, r3
   168e4:	b2da      	uxtb	r2, r3
   168e6:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168ee:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   168f0:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   168f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168f8:	781b      	ldrb	r3, [r3, #0]
   168fa:	2b00      	cmp	r3, #0
   168fc:	d012      	beq.n	16924 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   168fe:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16902:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16906:	7cdb      	ldrb	r3, [r3, #19]
   16908:	f043 0304 	orr.w	r3, r3, #4
   1690c:	b2da      	uxtb	r2, r3
   1690e:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16916:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16918:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   1691c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16920:	2200      	movs	r2, #0
   16922:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   16924:	f64c 2378 	movw	r3, #51832	; 0xca78
   16928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1692c:	781a      	ldrb	r2, [r3, #0]
   1692e:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16932:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16936:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16938:	f64c 13e8 	movw	r3, #51688	; 0xc9e8
   1693c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16940:	881b      	ldrh	r3, [r3, #0]
   16942:	4618      	mov	r0, r3
   16944:	f001 f852 	bl	179ec <__aeabi_i2d>
   16948:	4602      	mov	r2, r0
   1694a:	460b      	mov	r3, r1
   1694c:	4610      	mov	r0, r2
   1694e:	4619      	mov	r1, r3
   16950:	a31b      	add	r3, pc, #108	; (adr r3, 169c0 <to_autopilot_from_last_radio+0x154>)
   16952:	e9d3 2300 	ldrd	r2, r3, [r3]
   16956:	f001 f8af 	bl	17ab8 <__aeabi_dmul>
   1695a:	4602      	mov	r2, r0
   1695c:	460b      	mov	r3, r1
   1695e:	4610      	mov	r0, r2
   16960:	4619      	mov	r1, r3
   16962:	f04f 0200 	mov.w	r2, #0
   16966:	f04f 0300 	mov.w	r3, #0
   1696a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1696e:	f001 f9cd 	bl	17d0c <__aeabi_ddiv>
   16972:	4602      	mov	r2, r0
   16974:	460b      	mov	r3, r1
   16976:	4610      	mov	r0, r2
   16978:	4619      	mov	r1, r3
   1697a:	a313      	add	r3, pc, #76	; (adr r3, 169c8 <to_autopilot_from_last_radio+0x15c>)
   1697c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16980:	f000 fee8 	bl	17754 <__adddf3>
   16984:	4602      	mov	r2, r0
   16986:	460b      	mov	r3, r1
   16988:	4610      	mov	r0, r2
   1698a:	4619      	mov	r1, r3
   1698c:	f04f 0200 	mov.w	r2, #0
   16990:	f04f 0300 	mov.w	r3, #0
   16994:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16998:	f001 f88e 	bl	17ab8 <__aeabi_dmul>
   1699c:	4602      	mov	r2, r0
   1699e:	460b      	mov	r3, r1
   169a0:	4610      	mov	r0, r2
   169a2:	4619      	mov	r1, r3
   169a4:	f001 fb4a 	bl	1803c <__aeabi_d2uiz>
   169a8:	4603      	mov	r3, r0
   169aa:	b2da      	uxtb	r2, r3
   169ac:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   169b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169b4:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   169b6:	3708      	adds	r7, #8
   169b8:	46bd      	mov	sp, r7
   169ba:	bd80      	pop	{r7, pc}
   169bc:	f3af 8000 	nop.w
   169c0:	1eb851ec 	.word	0x1eb851ec
   169c4:	3f91eb85 	.word	0x3f91eb85
   169c8:	020c49ba 	.word	0x020c49ba
   169cc:	3fb6872b 	.word	0x3fb6872b

000169d0 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   169d0:	b580      	push	{r7, lr}
   169d2:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   169d4:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   169d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169dc:	2200      	movs	r2, #0
   169de:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   169e0:	f7ff ff44 	bl	1686c <to_autopilot_from_last_radio>
      spi_reset();
   169e4:	f7ff fe80 	bl	166e8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   169e8:	bd80      	pop	{r7, pc}
   169ea:	bf00      	nop

000169ec <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   169ec:	b580      	push	{r7, lr}
   169ee:	af00      	add	r7, sp, #0
  uart_init_tx();
   169f0:	f000 fb02 	bl	16ff8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   169f4:	f648 105c 	movw	r0, #35164	; 0x895c
   169f8:	f2c0 0001 	movt	r0, #1
   169fc:	f000 fbda 	bl	171b4 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16a00:	f7ff fab2 	bl	15f68 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16a04:	2003      	movs	r0, #3
   16a06:	f64c 11e8 	movw	r1, #51688	; 0xc9e8
   16a0a:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16a0e:	f7ff fa97 	bl	15f40 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16a12:	2006      	movs	r0, #6
   16a14:	f64c 212c 	movw	r1, #51756	; 0xca2c
   16a18:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16a1c:	f7ff fa90 	bl	15f40 <fbw_adc_buf_channel>
#endif
  timer_init();
   16a20:	f7ff fece 	bl	167c0 <timer_init>
  servo_init();
   16a24:	f000 f894 	bl	16b50 <servo_init>
  ppm_init();
   16a28:	f7ff fee2 	bl	167f0 <ppm_init>
  fbw_spi_init();
   16a2c:	f7ff fe92 	bl	16754 <fbw_spi_init>
  //sei(); //FN
}
   16a30:	bd80      	pop	{r7, pc}
   16a32:	bf00      	nop

00016a34 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16a34:	b580      	push	{r7, lr}
   16a36:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16a38:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a40:	2200      	movs	r2, #0
   16a42:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16a44:	f64c 2377 	movw	r3, #51831	; 0xca77
   16a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a4c:	781b      	ldrb	r3, [r3, #0]
   16a4e:	3301      	adds	r3, #1
   16a50:	b2da      	uxtb	r2, r3
   16a52:	f64c 2377 	movw	r3, #51831	; 0xca77
   16a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a5a:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16a5c:	f64c 2374 	movw	r3, #51828	; 0xca74
   16a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a64:	2201      	movs	r2, #1
   16a66:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16a68:	f64c 2376 	movw	r3, #51830	; 0xca76
   16a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a70:	2200      	movs	r2, #0
   16a72:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16a74:	f64c 2372 	movw	r3, #51826	; 0xca72
   16a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a7c:	2200      	movs	r2, #0
   16a7e:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16a80:	f7ff fb3a 	bl	160f8 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16a84:	f64c 1384 	movw	r3, #51588	; 0xc984
   16a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a8c:	891b      	ldrh	r3, [r3, #8]
   16a8e:	b21b      	sxth	r3, r3
   16a90:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16a94:	bfb4      	ite	lt
   16a96:	2300      	movlt	r3, #0
   16a98:	2301      	movge	r3, #1
   16a9a:	b2db      	uxtb	r3, r3
   16a9c:	461a      	mov	r2, r3
   16a9e:	f64c 2370 	movw	r3, #51824	; 0xca70
   16aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aa6:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16aa8:	f64c 2370 	movw	r3, #51824	; 0xca70
   16aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ab0:	781b      	ldrb	r3, [r3, #0]
   16ab2:	2b00      	cmp	r3, #0
   16ab4:	d105      	bne.n	16ac2 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   16ab6:	f64c 1084 	movw	r0, #51588	; 0xc984
   16aba:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16abe:	f000 f925 	bl	16d0c <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   16ac2:	f64c 2370 	movw	r3, #51824	; 0xca70
   16ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aca:	2201      	movs	r2, #1
   16acc:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   16ace:	f64c 2374 	movw	r3, #51828	; 0xca74
   16ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ad6:	2200      	movs	r2, #0
   16ad8:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   16ada:	f64c 2376 	movw	r3, #51830	; 0xca76
   16ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ae2:	2201      	movs	r2, #1
   16ae4:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16ae6:	bd80      	pop	{r7, pc}

00016ae8 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16ae8:	b580      	push	{r7, lr}
   16aea:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   16aec:	f648 1048 	movw	r0, #35144	; 0x8948
   16af0:	f2c0 0001 	movt	r0, #1
   16af4:	f000 f90a 	bl	16d0c <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16af8:	bd80      	pop	{r7, pc}
   16afa:	bf00      	nop

00016afc <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16afc:	b580      	push	{r7, lr}
   16afe:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   16b00:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   16b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b08:	781b      	ldrb	r3, [r3, #0]
   16b0a:	b2db      	uxtb	r3, r3
   16b0c:	2b00      	cmp	r3, #0
   16b0e:	d018      	beq.n	16b42 <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   16b10:	f64c 2371 	movw	r3, #51825	; 0xca71
   16b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b18:	2200      	movs	r2, #0
   16b1a:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16b1c:	f64c 2375 	movw	r3, #51829	; 0xca75
   16b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b24:	2201      	movs	r2, #1
   16b26:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16b28:	f64c 2370 	movw	r3, #51824	; 0xca70
   16b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b30:	781b      	ldrb	r3, [r3, #0]
   16b32:	2b01      	cmp	r3, #1
   16b34:	d105      	bne.n	16b42 <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   16b36:	f64c 10b4 	movw	r0, #51636	; 0xc9b4
   16b3a:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16b3e:	f000 f8e5 	bl	16d0c <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   16b42:	f64c 2375 	movw	r3, #51829	; 0xca75
   16b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b4a:	2200      	movs	r2, #0
   16b4c:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16b4e:	bd80      	pop	{r7, pc}

00016b50 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16b50:	b480      	push	{r7}
   16b52:	b083      	sub	sp, #12
   16b54:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16b56:	f242 0311 	movw	r3, #8209	; 0x2011
   16b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b5e:	f242 0211 	movw	r2, #8209	; 0x2011
   16b62:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b66:	7812      	ldrb	r2, [r2, #0]
   16b68:	b2d2      	uxtb	r2, r2
   16b6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16b6e:	b2d2      	uxtb	r2, r2
   16b70:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16b72:	f242 0317 	movw	r3, #8215	; 0x2017
   16b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b7a:	f242 0217 	movw	r2, #8215	; 0x2017
   16b7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b82:	7812      	ldrb	r2, [r2, #0]
   16b84:	b2d2      	uxtb	r2, r2
   16b86:	f042 0202 	orr.w	r2, r2, #2
   16b8a:	b2d2      	uxtb	r2, r2
   16b8c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16b8e:	f242 0312 	movw	r3, #8210	; 0x2012
   16b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b96:	f242 0212 	movw	r2, #8210	; 0x2012
   16b9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b9e:	7812      	ldrb	r2, [r2, #0]
   16ba0:	b2d2      	uxtb	r2, r2
   16ba2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16ba6:	b2d2      	uxtb	r2, r2
   16ba8:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16baa:	f242 0318 	movw	r3, #8216	; 0x2018
   16bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bb2:	f242 0218 	movw	r2, #8216	; 0x2018
   16bb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16bba:	7812      	ldrb	r2, [r2, #0]
   16bbc:	b2d2      	uxtb	r2, r2
   16bbe:	f022 0202 	bic.w	r2, r2, #2
   16bc2:	b2d2      	uxtb	r2, r2
   16bc4:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16bc6:	2300      	movs	r3, #0
   16bc8:	71fb      	strb	r3, [r7, #7]
   16bca:	e00b      	b.n	16be4 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16bcc:	79fa      	ldrb	r2, [r7, #7]
   16bce:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bd6:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16bda:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16bde:	79fb      	ldrb	r3, [r7, #7]
   16be0:	3301      	adds	r3, #1
   16be2:	71fb      	strb	r3, [r7, #7]
   16be4:	79fb      	ldrb	r3, [r7, #7]
   16be6:	2b09      	cmp	r3, #9
   16be8:	d9f0      	bls.n	16bcc <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16bea:	f242 032a 	movw	r3, #8234	; 0x202a
   16bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bf2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16bf6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16bf8:	f242 032f 	movw	r3, #8239	; 0x202f
   16bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c00:	f242 022f 	movw	r2, #8239	; 0x202f
   16c04:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c08:	7812      	ldrb	r2, [r2, #0]
   16c0a:	b2d2      	uxtb	r2, r2
   16c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16c10:	b2d2      	uxtb	r2, r2
   16c12:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16c14:	f242 0336 	movw	r3, #8246	; 0x2036
   16c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c1c:	2210      	movs	r2, #16
   16c1e:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16c20:	f242 0312 	movw	r3, #8210	; 0x2012
   16c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c28:	f242 0212 	movw	r2, #8210	; 0x2012
   16c2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c30:	7812      	ldrb	r2, [r2, #0]
   16c32:	b2d2      	uxtb	r2, r2
   16c34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16c38:	b2d2      	uxtb	r2, r2
   16c3a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16c3c:	f242 0337 	movw	r3, #8247	; 0x2037
   16c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c44:	f242 0237 	movw	r2, #8247	; 0x2037
   16c48:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c4c:	7812      	ldrb	r2, [r2, #0]
   16c4e:	b2d2      	uxtb	r2, r2
   16c50:	f042 0210 	orr.w	r2, r2, #16
   16c54:	b2d2      	uxtb	r2, r2
   16c56:	701a      	strb	r2, [r3, #0]
}
   16c58:	370c      	adds	r7, #12
   16c5a:	46bd      	mov	sp, r7
   16c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16c60:	4770      	bx	lr
   16c62:	bf00      	nop

00016c64 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16c64:	b480      	push	{r7}
   16c66:	b083      	sub	sp, #12
   16c68:	af00      	add	r7, sp, #0
   16c6a:	4602      	mov	r2, r0
   16c6c:	460b      	mov	r3, r1
   16c6e:	71fa      	strb	r2, [r7, #7]
   16c70:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16c72:	79f9      	ldrb	r1, [r7, #7]
   16c74:	88bb      	ldrh	r3, [r7, #4]
   16c76:	011b      	lsls	r3, r3, #4
   16c78:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16c7c:	d308      	bcc.n	16c90 <servo_set_one+0x2c>
   16c7e:	88bb      	ldrh	r3, [r7, #4]
   16c80:	011b      	lsls	r3, r3, #4
   16c82:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c86:	bf28      	it	cs
   16c88:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c8c:	b29a      	uxth	r2, r3
   16c8e:	e001      	b.n	16c94 <servo_set_one+0x30>
   16c90:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c94:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c9c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16ca0:	370c      	adds	r7, #12
   16ca2:	46bd      	mov	sp, r7
   16ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
   16ca8:	4770      	bx	lr
   16caa:	bf00      	nop

00016cac <servo_transmit>:

void 
servo_transmit(void) {
   16cac:	b580      	push	{r7, lr}
   16cae:	b082      	sub	sp, #8
   16cb0:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16cb2:	2000      	movs	r0, #0
   16cb4:	f000 f9e6 	bl	17084 <uart_transmit>
   16cb8:	2000      	movs	r0, #0
   16cba:	f000 f9e3 	bl	17084 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16cbe:	2300      	movs	r3, #0
   16cc0:	71fb      	strb	r3, [r7, #7]
   16cc2:	e01a      	b.n	16cfa <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16cc4:	79fa      	ldrb	r2, [r7, #7]
   16cc6:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16cd2:	0a1b      	lsrs	r3, r3, #8
   16cd4:	b29b      	uxth	r3, r3
   16cd6:	b2db      	uxtb	r3, r3
   16cd8:	4618      	mov	r0, r3
   16cda:	f000 f9d3 	bl	17084 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16cde:	79fa      	ldrb	r2, [r7, #7]
   16ce0:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ce8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16cec:	b2db      	uxtb	r3, r3
   16cee:	4618      	mov	r0, r3
   16cf0:	f000 f9c8 	bl	17084 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16cf4:	79fb      	ldrb	r3, [r7, #7]
   16cf6:	3301      	adds	r3, #1
   16cf8:	71fb      	strb	r3, [r7, #7]
   16cfa:	79fb      	ldrb	r3, [r7, #7]
   16cfc:	2b09      	cmp	r3, #9
   16cfe:	d9e1      	bls.n	16cc4 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16d00:	200a      	movs	r0, #10
   16d02:	f000 f9bf 	bl	17084 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16d06:	3708      	adds	r7, #8
   16d08:	46bd      	mov	sp, r7
   16d0a:	bd80      	pop	{r7, pc}

00016d0c <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16d0c:	b5b0      	push	{r4, r5, r7, lr}
   16d0e:	b084      	sub	sp, #16
   16d10:	af00      	add	r7, sp, #0
   16d12:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16d14:	687b      	ldr	r3, [r7, #4]
   16d16:	330a      	adds	r3, #10
   16d18:	881b      	ldrh	r3, [r3, #0]
   16d1a:	b21b      	sxth	r3, r3
   16d1c:	005b      	lsls	r3, r3, #1
   16d1e:	4618      	mov	r0, r3
   16d20:	f000 fe64 	bl	179ec <__aeabi_i2d>
   16d24:	4602      	mov	r2, r0
   16d26:	460b      	mov	r3, r1
   16d28:	4610      	mov	r0, r2
   16d2a:	4619      	mov	r1, r3
   16d2c:	a3a6      	add	r3, pc, #664	; (adr r3, 16fc8 <servo_set+0x2bc>)
   16d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d32:	f000 fec1 	bl	17ab8 <__aeabi_dmul>
   16d36:	4602      	mov	r2, r0
   16d38:	460b      	mov	r3, r1
   16d3a:	4610      	mov	r0, r2
   16d3c:	4619      	mov	r1, r3
   16d3e:	f001 f955 	bl	17fec <__aeabi_d2iz>
   16d42:	4603      	mov	r3, r0
   16d44:	b29b      	uxth	r3, r3
   16d46:	b29b      	uxth	r3, r3
   16d48:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16d4c:	81fb      	strh	r3, [r7, #14]
   16d4e:	89fb      	ldrh	r3, [r7, #14]
   16d50:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d54:	d307      	bcc.n	16d66 <servo_set+0x5a>
   16d56:	89fb      	ldrh	r3, [r7, #14]
   16d58:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d5c:	bf28      	it	cs
   16d5e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d62:	b29a      	uxth	r2, r3
   16d64:	e001      	b.n	16d6a <servo_set+0x5e>
   16d66:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d6a:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d72:	80da      	strh	r2, [r3, #6]
   16d74:	687b      	ldr	r3, [r7, #4]
   16d76:	881b      	ldrh	r3, [r3, #0]
   16d78:	b21b      	sxth	r3, r3
   16d7a:	005b      	lsls	r3, r3, #1
   16d7c:	4618      	mov	r0, r3
   16d7e:	f000 fe35 	bl	179ec <__aeabi_i2d>
   16d82:	4602      	mov	r2, r0
   16d84:	460b      	mov	r3, r1
   16d86:	4610      	mov	r0, r2
   16d88:	4619      	mov	r1, r3
   16d8a:	a38f      	add	r3, pc, #572	; (adr r3, 16fc8 <servo_set+0x2bc>)
   16d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d90:	f000 fe92 	bl	17ab8 <__aeabi_dmul>
   16d94:	4602      	mov	r2, r0
   16d96:	460b      	mov	r3, r1
   16d98:	4610      	mov	r0, r2
   16d9a:	4619      	mov	r1, r3
   16d9c:	f001 f926 	bl	17fec <__aeabi_d2iz>
   16da0:	4603      	mov	r3, r0
   16da2:	b29b      	uxth	r3, r3
   16da4:	b29b      	uxth	r3, r3
   16da6:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16daa:	81fb      	strh	r3, [r7, #14]
   16dac:	89fb      	ldrh	r3, [r7, #14]
   16dae:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16db2:	d307      	bcc.n	16dc4 <servo_set+0xb8>
   16db4:	89fb      	ldrh	r3, [r7, #14]
   16db6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16dba:	bf28      	it	cs
   16dbc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16dc0:	b29a      	uxth	r2, r3
   16dc2:	e001      	b.n	16dc8 <servo_set+0xbc>
   16dc4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16dc8:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16dd0:	825a      	strh	r2, [r3, #18]
   16dd2:	687b      	ldr	r3, [r7, #4]
   16dd4:	3304      	adds	r3, #4
   16dd6:	881b      	ldrh	r3, [r3, #0]
   16dd8:	b21b      	sxth	r3, r3
   16dda:	4618      	mov	r0, r3
   16ddc:	f000 fe06 	bl	179ec <__aeabi_i2d>
   16de0:	4602      	mov	r2, r0
   16de2:	460b      	mov	r3, r1
   16de4:	4610      	mov	r0, r2
   16de6:	4619      	mov	r1, r3
   16de8:	a379      	add	r3, pc, #484	; (adr r3, 16fd0 <servo_set+0x2c4>)
   16dea:	e9d3 2300 	ldrd	r2, r3, [r3]
   16dee:	f000 fe63 	bl	17ab8 <__aeabi_dmul>
   16df2:	4602      	mov	r2, r0
   16df4:	460b      	mov	r3, r1
   16df6:	4610      	mov	r0, r2
   16df8:	4619      	mov	r1, r3
   16dfa:	f001 f8f7 	bl	17fec <__aeabi_d2iz>
   16dfe:	4603      	mov	r3, r0
   16e00:	b29b      	uxth	r3, r3
   16e02:	b29b      	uxth	r3, r3
   16e04:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16e08:	3320      	adds	r3, #32
   16e0a:	81fb      	strh	r3, [r7, #14]
   16e0c:	89fb      	ldrh	r3, [r7, #14]
   16e0e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e12:	d307      	bcc.n	16e24 <servo_set+0x118>
   16e14:	89fb      	ldrh	r3, [r7, #14]
   16e16:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e1a:	bf28      	it	cs
   16e1c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e20:	b29a      	uxth	r2, r3
   16e22:	e001      	b.n	16e28 <servo_set+0x11c>
   16e24:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e28:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e30:	819a      	strh	r2, [r3, #12]
   16e32:	687b      	ldr	r3, [r7, #4]
   16e34:	885b      	ldrh	r3, [r3, #2]
   16e36:	81bb      	strh	r3, [r7, #12]
   16e38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16e3c:	2b00      	cmp	r3, #0
   16e3e:	dd06      	ble.n	16e4e <servo_set+0x142>
   16e40:	f04f 0400 	mov.w	r4, #0
   16e44:	f04f 0500 	mov.w	r5, #0
   16e48:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16e4c:	e002      	b.n	16e54 <servo_set+0x148>
   16e4e:	a562      	add	r5, pc, #392	; (adr r5, 16fd8 <servo_set+0x2cc>)
   16e50:	e9d5 4500 	ldrd	r4, r5, [r5]
   16e54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16e58:	4618      	mov	r0, r3
   16e5a:	f000 fdc7 	bl	179ec <__aeabi_i2d>
   16e5e:	4602      	mov	r2, r0
   16e60:	460b      	mov	r3, r1
   16e62:	4620      	mov	r0, r4
   16e64:	4629      	mov	r1, r5
   16e66:	f000 fe27 	bl	17ab8 <__aeabi_dmul>
   16e6a:	4602      	mov	r2, r0
   16e6c:	460b      	mov	r3, r1
   16e6e:	4610      	mov	r0, r2
   16e70:	4619      	mov	r1, r3
   16e72:	a35b      	add	r3, pc, #364	; (adr r3, 16fe0 <servo_set+0x2d4>)
   16e74:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e78:	f000 fe1e 	bl	17ab8 <__aeabi_dmul>
   16e7c:	4602      	mov	r2, r0
   16e7e:	460b      	mov	r3, r1
   16e80:	4610      	mov	r0, r2
   16e82:	4619      	mov	r1, r3
   16e84:	f001 f8b2 	bl	17fec <__aeabi_d2iz>
   16e88:	4603      	mov	r3, r0
   16e8a:	b29b      	uxth	r3, r3
   16e8c:	b29b      	uxth	r3, r3
   16e8e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16e92:	81fb      	strh	r3, [r7, #14]
   16e94:	89fb      	ldrh	r3, [r7, #14]
   16e96:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e9a:	d307      	bcc.n	16eac <servo_set+0x1a0>
   16e9c:	89fb      	ldrh	r3, [r7, #14]
   16e9e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16ea2:	bf28      	it	cs
   16ea4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16ea8:	b29a      	uxth	r2, r3
   16eaa:	e001      	b.n	16eb0 <servo_set+0x1a4>
   16eac:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16eb0:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16eb8:	801a      	strh	r2, [r3, #0]
   16eba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16ebe:	2b00      	cmp	r3, #0
   16ec0:	dd03      	ble.n	16eca <servo_set+0x1be>
   16ec2:	a545      	add	r5, pc, #276	; (adr r5, 16fd8 <servo_set+0x2cc>)
   16ec4:	e9d5 4500 	ldrd	r4, r5, [r5]
   16ec8:	e005      	b.n	16ed6 <servo_set+0x1ca>
   16eca:	f04f 0400 	mov.w	r4, #0
   16ece:	f04f 0500 	mov.w	r5, #0
   16ed2:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16ed6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16eda:	4618      	mov	r0, r3
   16edc:	f000 fd86 	bl	179ec <__aeabi_i2d>
   16ee0:	4602      	mov	r2, r0
   16ee2:	460b      	mov	r3, r1
   16ee4:	4620      	mov	r0, r4
   16ee6:	4629      	mov	r1, r5
   16ee8:	f000 fde6 	bl	17ab8 <__aeabi_dmul>
   16eec:	4602      	mov	r2, r0
   16eee:	460b      	mov	r3, r1
   16ef0:	4610      	mov	r0, r2
   16ef2:	4619      	mov	r1, r3
   16ef4:	a33c      	add	r3, pc, #240	; (adr r3, 16fe8 <servo_set+0x2dc>)
   16ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
   16efa:	f000 fddd 	bl	17ab8 <__aeabi_dmul>
   16efe:	4602      	mov	r2, r0
   16f00:	460b      	mov	r3, r1
   16f02:	4610      	mov	r0, r2
   16f04:	4619      	mov	r1, r3
   16f06:	f001 f871 	bl	17fec <__aeabi_d2iz>
   16f0a:	4603      	mov	r3, r0
   16f0c:	b29b      	uxth	r3, r3
   16f0e:	b29b      	uxth	r3, r3
   16f10:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16f14:	3320      	adds	r3, #32
   16f16:	81fb      	strh	r3, [r7, #14]
   16f18:	89fb      	ldrh	r3, [r7, #14]
   16f1a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f1e:	d307      	bcc.n	16f30 <servo_set+0x224>
   16f20:	89fb      	ldrh	r3, [r7, #14]
   16f22:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f26:	bf28      	it	cs
   16f28:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f2c:	b29a      	uxth	r2, r3
   16f2e:	e001      	b.n	16f34 <servo_set+0x228>
   16f30:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f34:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f3c:	809a      	strh	r2, [r3, #4]
   16f3e:	687b      	ldr	r3, [r7, #4]
   16f40:	3306      	adds	r3, #6
   16f42:	881b      	ldrh	r3, [r3, #0]
   16f44:	b21b      	sxth	r3, r3
   16f46:	4618      	mov	r0, r3
   16f48:	f000 fd50 	bl	179ec <__aeabi_i2d>
   16f4c:	4604      	mov	r4, r0
   16f4e:	460d      	mov	r5, r1
   16f50:	687b      	ldr	r3, [r7, #4]
   16f52:	3302      	adds	r3, #2
   16f54:	881b      	ldrh	r3, [r3, #0]
   16f56:	b21b      	sxth	r3, r3
   16f58:	4618      	mov	r0, r3
   16f5a:	f000 fd47 	bl	179ec <__aeabi_i2d>
   16f5e:	4602      	mov	r2, r0
   16f60:	460b      	mov	r3, r1
   16f62:	4620      	mov	r0, r4
   16f64:	4629      	mov	r1, r5
   16f66:	f000 fbf5 	bl	17754 <__adddf3>
   16f6a:	4602      	mov	r2, r0
   16f6c:	460b      	mov	r3, r1
   16f6e:	4610      	mov	r0, r2
   16f70:	4619      	mov	r1, r3
   16f72:	a31f      	add	r3, pc, #124	; (adr r3, 16ff0 <servo_set+0x2e4>)
   16f74:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f78:	f000 fd9e 	bl	17ab8 <__aeabi_dmul>
   16f7c:	4602      	mov	r2, r0
   16f7e:	460b      	mov	r3, r1
   16f80:	4610      	mov	r0, r2
   16f82:	4619      	mov	r1, r3
   16f84:	f001 f832 	bl	17fec <__aeabi_d2iz>
   16f88:	4603      	mov	r3, r0
   16f8a:	b29b      	uxth	r3, r3
   16f8c:	b29b      	uxth	r3, r3
   16f8e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16f92:	3320      	adds	r3, #32
   16f94:	81fb      	strh	r3, [r7, #14]
   16f96:	89fb      	ldrh	r3, [r7, #14]
   16f98:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f9c:	d307      	bcc.n	16fae <servo_set+0x2a2>
   16f9e:	89fb      	ldrh	r3, [r7, #14]
   16fa0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16fa4:	bf28      	it	cs
   16fa6:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16faa:	b29a      	uxth	r2, r3
   16fac:	e001      	b.n	16fb2 <servo_set+0x2a6>
   16fae:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fb2:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fba:	81da      	strh	r2, [r3, #14]
}
   16fbc:	3710      	adds	r7, #16
   16fbe:	46bd      	mov	sp, r7
   16fc0:	bdb0      	pop	{r4, r5, r7, pc}
   16fc2:	bf00      	nop
   16fc4:	f3af 8000 	nop.w
   16fc8:	aaaa9ef0 	.word	0xaaaa9ef0
   16fcc:	3feaaaaa 	.word	0x3feaaaaa
   16fd0:	fc96473e 	.word	0xfc96473e
   16fd4:	3fdfc962 	.word	0x3fdfc962
   16fd8:	51eb851f 	.word	0x51eb851f
   16fdc:	3fe51eb8 	.word	0x3fe51eb8
   16fe0:	9999999a 	.word	0x9999999a
   16fe4:	bfe19999 	.word	0xbfe19999
   16fe8:	aaaa9ef0 	.word	0xaaaa9ef0
   16fec:	bfe0aaaa 	.word	0xbfe0aaaa
   16ff0:	eeeed77a 	.word	0xeeeed77a
   16ff4:	bfdeeeee 	.word	0xbfdeeeee

00016ff8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16ff8:	b480      	push	{r7}
   16ffa:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16ffc:	f242 0320 	movw	r3, #8224	; 0x2020
   17000:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17004:	2200      	movs	r2, #0
   17006:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   17008:	f242 0309 	movw	r3, #8201	; 0x2009
   1700c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17010:	2219      	movs	r2, #25
   17012:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   17014:	f242 030b 	movw	r3, #8203	; 0x200b
   17018:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1701c:	2200      	movs	r2, #0
   1701e:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   17020:	f242 030a 	movw	r3, #8202	; 0x200a
   17024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17028:	2208      	movs	r2, #8
   1702a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   1702c:	f242 0320 	movw	r3, #8224	; 0x2020
   17030:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17034:	2286      	movs	r2, #134	; 0x86
   17036:	701a      	strb	r2, [r3, #0]
}
   17038:	46bd      	mov	sp, r7
   1703a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1703e:	4770      	bx	lr

00017040 <uart_init_rx>:

void uart_init_rx() {
   17040:	b480      	push	{r7}
   17042:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   17044:	f242 030a 	movw	r3, #8202	; 0x200a
   17048:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1704c:	f242 020a 	movw	r2, #8202	; 0x200a
   17050:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17054:	7812      	ldrb	r2, [r2, #0]
   17056:	b2d2      	uxtb	r2, r2
   17058:	f042 0210 	orr.w	r2, r2, #16
   1705c:	b2d2      	uxtb	r2, r2
   1705e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   17060:	f242 030a 	movw	r3, #8202	; 0x200a
   17064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17068:	f242 020a 	movw	r2, #8202	; 0x200a
   1706c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17070:	7812      	ldrb	r2, [r2, #0]
   17072:	b2d2      	uxtb	r2, r2
   17074:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17078:	b2d2      	uxtb	r2, r2
   1707a:	701a      	strb	r2, [r3, #0]
}
   1707c:	46bd      	mov	sp, r7
   1707e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17082:	4770      	bx	lr

00017084 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   17084:	b480      	push	{r7}
   17086:	b083      	sub	sp, #12
   17088:	af00      	add	r7, sp, #0
   1708a:	4603      	mov	r3, r0
   1708c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   1708e:	f242 030a 	movw	r3, #8202	; 0x200a
   17092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17096:	781b      	ldrb	r3, [r3, #0]
   17098:	b2db      	uxtb	r3, r3
   1709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1709e:	2b00      	cmp	r3, #0
   170a0:	d028      	beq.n	170f4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   170a2:	f64c 2391 	movw	r3, #51857	; 0xca91
   170a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170aa:	781b      	ldrb	r3, [r3, #0]
   170ac:	b2db      	uxtb	r3, r3
   170ae:	461a      	mov	r2, r3
   170b0:	f64c 2390 	movw	r3, #51856	; 0xca90
   170b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170b8:	781b      	ldrb	r3, [r3, #0]
   170ba:	3301      	adds	r3, #1
   170bc:	429a      	cmp	r2, r3
   170be:	d100      	bne.n	170c2 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   170c0:	e02c      	b.n	1711c <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   170c2:	f64c 2390 	movw	r3, #51856	; 0xca90
   170c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170ca:	781b      	ldrb	r3, [r3, #0]
   170cc:	461a      	mov	r2, r3
   170ce:	f64c 2394 	movw	r3, #51860	; 0xca94
   170d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170d6:	79f9      	ldrb	r1, [r7, #7]
   170d8:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   170da:	f64c 2390 	movw	r3, #51856	; 0xca90
   170de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170e2:	781b      	ldrb	r3, [r3, #0]
   170e4:	3301      	adds	r3, #1
   170e6:	b2da      	uxtb	r2, r3
   170e8:	f64c 2390 	movw	r3, #51856	; 0xca90
   170ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170f0:	701a      	strb	r2, [r3, #0]
   170f2:	e013      	b.n	1711c <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   170f4:	f242 030c 	movw	r3, #8204	; 0x200c
   170f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170fc:	79fa      	ldrb	r2, [r7, #7]
   170fe:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   17100:	f242 030a 	movw	r3, #8202	; 0x200a
   17104:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17108:	f242 020a 	movw	r2, #8202	; 0x200a
   1710c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17110:	7812      	ldrb	r2, [r2, #0]
   17112:	b2d2      	uxtb	r2, r2
   17114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17118:	b2d2      	uxtb	r2, r2
   1711a:	701a      	strb	r2, [r3, #0]
  }
}
   1711c:	370c      	adds	r7, #12
   1711e:	46bd      	mov	sp, r7
   17120:	f85d 7b04 	ldr.w	r7, [sp], #4
   17124:	4770      	bx	lr
   17126:	bf00      	nop

00017128 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   17128:	b590      	push	{r4, r7, lr}
   1712a:	b089      	sub	sp, #36	; 0x24
   1712c:	af00      	add	r7, sp, #0
   1712e:	4603      	mov	r3, r0
   17130:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   17132:	f648 139c 	movw	r3, #35228	; 0x899c
   17136:	f2c0 0301 	movt	r3, #1
   1713a:	f107 040c 	add.w	r4, r7, #12
   1713e:	6818      	ldr	r0, [r3, #0]
   17140:	6859      	ldr	r1, [r3, #4]
   17142:	689a      	ldr	r2, [r3, #8]
   17144:	68db      	ldr	r3, [r3, #12]
   17146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   17148:	79fb      	ldrb	r3, [r7, #7]
   1714a:	091b      	lsrs	r3, r3, #4
   1714c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1714e:	79fb      	ldrb	r3, [r7, #7]
   17150:	f003 030f 	and.w	r3, r3, #15
   17154:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   17156:	230f      	movs	r3, #15
   17158:	77fb      	strb	r3, [r7, #31]
        low = 15;
   1715a:	230f      	movs	r3, #15
   1715c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   1715e:	7ffb      	ldrb	r3, [r7, #31]
   17160:	f107 0220 	add.w	r2, r7, #32
   17164:	4413      	add	r3, r2
   17166:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1716a:	4618      	mov	r0, r3
   1716c:	f7ff ff8a 	bl	17084 <uart_transmit>
  uart_transmit(hex[low]);
   17170:	7fbb      	ldrb	r3, [r7, #30]
   17172:	f107 0220 	add.w	r2, r7, #32
   17176:	4413      	add	r3, r2
   17178:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1717c:	4618      	mov	r0, r3
   1717e:	f7ff ff81 	bl	17084 <uart_transmit>
} 
   17182:	3724      	adds	r7, #36	; 0x24
   17184:	46bd      	mov	sp, r7
   17186:	bd90      	pop	{r4, r7, pc}

00017188 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17188:	b580      	push	{r7, lr}
   1718a:	b084      	sub	sp, #16
   1718c:	af00      	add	r7, sp, #0
   1718e:	4603      	mov	r3, r0
   17190:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   17192:	88fb      	ldrh	r3, [r7, #6]
   17194:	0a1b      	lsrs	r3, r3, #8
   17196:	b29b      	uxth	r3, r3
   17198:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   1719a:	88fb      	ldrh	r3, [r7, #6]
   1719c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   1719e:	7bfb      	ldrb	r3, [r7, #15]
   171a0:	4618      	mov	r0, r3
   171a2:	f7ff ffc1 	bl	17128 <uart_print_hex>
  uart_print_hex(low);
   171a6:	7bbb      	ldrb	r3, [r7, #14]
   171a8:	4618      	mov	r0, r3
   171aa:	f7ff ffbd 	bl	17128 <uart_print_hex>
}
   171ae:	3710      	adds	r7, #16
   171b0:	46bd      	mov	sp, r7
   171b2:	bd80      	pop	{r7, pc}

000171b4 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   171b4:	b580      	push	{r7, lr}
   171b6:	b084      	sub	sp, #16
   171b8:	af00      	add	r7, sp, #0
   171ba:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   171bc:	2300      	movs	r3, #0
   171be:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   171c0:	e009      	b.n	171d6 <uart_print_string+0x22>
    uart_transmit(s[i]);
   171c2:	7bfb      	ldrb	r3, [r7, #15]
   171c4:	687a      	ldr	r2, [r7, #4]
   171c6:	4413      	add	r3, r2
   171c8:	781b      	ldrb	r3, [r3, #0]
   171ca:	4618      	mov	r0, r3
   171cc:	f7ff ff5a 	bl	17084 <uart_transmit>
    i++;
   171d0:	7bfb      	ldrb	r3, [r7, #15]
   171d2:	3301      	adds	r3, #1
   171d4:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   171d6:	7bfb      	ldrb	r3, [r7, #15]
   171d8:	687a      	ldr	r2, [r7, #4]
   171da:	4413      	add	r3, r2
   171dc:	781b      	ldrb	r3, [r3, #0]
   171de:	2b00      	cmp	r3, #0
   171e0:	d1ef      	bne.n	171c2 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   171e2:	3710      	adds	r7, #16
   171e4:	46bd      	mov	sp, r7
   171e6:	bd80      	pop	{r7, pc}

000171e8 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   171e8:	b480      	push	{r7}
   171ea:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   171ec:	f64c 2390 	movw	r3, #51856	; 0xca90
   171f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171f4:	781a      	ldrb	r2, [r3, #0]
   171f6:	f64c 2391 	movw	r3, #51857	; 0xca91
   171fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171fe:	781b      	ldrb	r3, [r3, #0]
   17200:	b2db      	uxtb	r3, r3
   17202:	429a      	cmp	r2, r3
   17204:	d10e      	bne.n	17224 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   17206:	f242 030a 	movw	r3, #8202	; 0x200a
   1720a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1720e:	f242 020a 	movw	r2, #8202	; 0x200a
   17212:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17216:	7812      	ldrb	r2, [r2, #0]
   17218:	b2d2      	uxtb	r2, r2
   1721a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1721e:	b2d2      	uxtb	r2, r2
   17220:	701a      	strb	r2, [r3, #0]
   17222:	e01d      	b.n	17260 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   17224:	f242 030c 	movw	r3, #8204	; 0x200c
   17228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1722c:	f64c 2291 	movw	r2, #51857	; 0xca91
   17230:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17234:	7812      	ldrb	r2, [r2, #0]
   17236:	b2d2      	uxtb	r2, r2
   17238:	4611      	mov	r1, r2
   1723a:	f64c 2294 	movw	r2, #51860	; 0xca94
   1723e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17242:	5c52      	ldrb	r2, [r2, r1]
   17244:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   17246:	f64c 2391 	movw	r3, #51857	; 0xca91
   1724a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1724e:	781b      	ldrb	r3, [r3, #0]
   17250:	b2db      	uxtb	r3, r3
   17252:	3301      	adds	r3, #1
   17254:	b2da      	uxtb	r2, r3
   17256:	f64c 2391 	movw	r3, #51857	; 0xca91
   1725a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1725e:	701a      	strb	r2, [r3, #0]
  }
}
   17260:	46bd      	mov	sp, r7
   17262:	f85d 7b04 	ldr.w	r7, [sp], #4
   17266:	4770      	bx	lr

00017268 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17268:	b580      	push	{r7, lr}
   1726a:	b082      	sub	sp, #8
   1726c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   1726e:	2010      	movs	r0, #16
   17270:	2101      	movs	r1, #1
   17272:	f7e9 fda5 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   17276:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1727a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1727e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17282:	2201      	movs	r2, #1
   17284:	f7ea f8ac 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1728c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1728e:	2310      	movs	r3, #16
   17290:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17292:	2303      	movs	r3, #3
   17294:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17296:	1d3b      	adds	r3, r7, #4
   17298:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1729c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   172a0:	4619      	mov	r1, r3
   172a2:	f7e9 ff61 	bl	1168 <GPIO_Init>
}
   172a6:	3708      	adds	r7, #8
   172a8:	46bd      	mov	sp, r7
   172aa:	bd80      	pop	{r7, pc}

000172ac <init_button>:

void init_button(void)
{
   172ac:	b580      	push	{r7, lr}
   172ae:	b082      	sub	sp, #8
   172b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   172b2:	2004      	movs	r0, #4
   172b4:	2101      	movs	r1, #1
   172b6:	f7e9 fd83 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   172ba:	2301      	movs	r3, #1
   172bc:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   172be:	2304      	movs	r3, #4
   172c0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   172c2:	2303      	movs	r3, #3
   172c4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   172c6:	1d3b      	adds	r3, r7, #4
   172c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   172cc:	f2c4 0001 	movt	r0, #16385	; 0x4001
   172d0:	4619      	mov	r1, r3
   172d2:	f7e9 ff49 	bl	1168 <GPIO_Init>
}
   172d6:	3708      	adds	r7, #8
   172d8:	46bd      	mov	sp, r7
   172da:	bd80      	pop	{r7, pc}

000172dc <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   172dc:	b580      	push	{r7, lr}
   172de:	b084      	sub	sp, #16
   172e0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   172e2:	2001      	movs	r0, #1
   172e4:	2101      	movs	r1, #1
   172e6:	f7e9 fd6b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   172ea:	2000      	movs	r0, #0
   172ec:	2100      	movs	r1, #0
   172ee:	f7ea f96f 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   172f2:	2301      	movs	r3, #1
   172f4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   172f6:	2300      	movs	r3, #0
   172f8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   172fa:	2308      	movs	r3, #8
   172fc:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   172fe:	2301      	movs	r3, #1
   17300:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   17302:	f107 0308 	add.w	r3, r7, #8
   17306:	4618      	mov	r0, r3
   17308:	f7ea fe68 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   1730c:	2306      	movs	r3, #6
   1730e:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   17310:	230f      	movs	r3, #15
   17312:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   17314:	230f      	movs	r3, #15
   17316:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17318:	2301      	movs	r3, #1
   1731a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   1731c:	1d3b      	adds	r3, r7, #4
   1731e:	4618      	mov	r0, r3
   17320:	f7ea ff96 	bl	2250 <NVIC_Init>
}
   17324:	3710      	adds	r7, #16
   17326:	46bd      	mov	sp, r7
   17328:	bd80      	pop	{r7, pc}
   1732a:	bf00      	nop

0001732c <init_rs232>:

void init_rs232(void)
{
   1732c:	b580      	push	{r7, lr}
   1732e:	b086      	sub	sp, #24
   17330:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   17332:	2005      	movs	r0, #5
   17334:	2101      	movs	r1, #1
   17336:	f7e9 fd43 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   1733a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1733e:	2101      	movs	r1, #1
   17340:	f7e9 fd66 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   17344:	2308      	movs	r3, #8
   17346:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17348:	2304      	movs	r3, #4
   1734a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   1734c:	1d3b      	adds	r3, r7, #4
   1734e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17352:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17356:	4619      	mov	r1, r3
   17358:	f7e9 ff06 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   1735c:	2304      	movs	r3, #4
   1735e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17360:	2303      	movs	r3, #3
   17362:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   17364:	2318      	movs	r3, #24
   17366:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17368:	1d3b      	adds	r3, r7, #4
   1736a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1736e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17372:	4619      	mov	r1, r3
   17374:	f7e9 fef8 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17378:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1737c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1737e:	2300      	movs	r3, #0
   17380:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   17382:	2300      	movs	r3, #0
   17384:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   17386:	2300      	movs	r3, #0
   17388:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1738a:	2300      	movs	r3, #0
   1738c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1738e:	230c      	movs	r3, #12
   17390:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   17392:	f107 0308 	add.w	r3, r7, #8
   17396:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1739a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1739e:	4619      	mov	r1, r3
   173a0:	f7ea f9ca 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   173a4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   173a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   173ac:	2101      	movs	r1, #1
   173ae:	f7ea fae1 	bl	1974 <USART_Cmd>
}
   173b2:	3718      	adds	r7, #24
   173b4:	46bd      	mov	sp, r7
   173b6:	bd80      	pop	{r7, pc}

000173b8 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   173b8:	b580      	push	{r7, lr}
   173ba:	b082      	sub	sp, #8
   173bc:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   173be:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   173c2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   173c6:	f240 7127 	movw	r1, #1831	; 0x727
   173ca:	2200      	movs	r2, #0
   173cc:	f7ea faf2 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   173d0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   173d4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   173d8:	f240 5125 	movw	r1, #1317	; 0x525
   173dc:	2201      	movs	r2, #1
   173de:	f7ea fae9 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   173e2:	2326      	movs	r3, #38	; 0x26
   173e4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   173e6:	2300      	movs	r3, #0
   173e8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   173ea:	2301      	movs	r3, #1
   173ec:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   173ee:	1d3b      	adds	r3, r7, #4
   173f0:	4618      	mov	r0, r3
   173f2:	f7ea ff2d 	bl	2250 <NVIC_Init>
}
   173f6:	3708      	adds	r7, #8
   173f8:	46bd      	mov	sp, r7
   173fa:	bd80      	pop	{r7, pc}

000173fc <enable_rs232>:

void enable_rs232(void)
{
   173fc:	b580      	push	{r7, lr}
   173fe:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   17400:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17404:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17408:	2101      	movs	r1, #1
   1740a:	f7ea fab3 	bl	1974 <USART_Cmd>
}
   1740e:	bd80      	pop	{r7, pc}

00017410 <send_byte>:

void send_byte(uint8_t b)
{
   17410:	b580      	push	{r7, lr}
   17412:	b082      	sub	sp, #8
   17414:	af00      	add	r7, sp, #0
   17416:	4603      	mov	r3, r0
   17418:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   1741a:	bf00      	nop
   1741c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17420:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17424:	2180      	movs	r1, #128	; 0x80
   17426:	f7ea fd11 	bl	1e4c <USART_GetFlagStatus>
   1742a:	4603      	mov	r3, r0
   1742c:	2b00      	cmp	r3, #0
   1742e:	d0f5      	beq.n	1741c <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17434:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17438:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1743c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17440:	68d2      	ldr	r2, [r2, #12]
   17442:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   17446:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17448:	79fb      	ldrb	r3, [r7, #7]
   1744a:	b29b      	uxth	r3, r3
   1744c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17450:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17454:	4619      	mov	r1, r3
   17456:	f7ea fbad 	bl	1bb4 <USART_SendData>
}
   1745a:	3708      	adds	r7, #8
   1745c:	46bd      	mov	sp, r7
   1745e:	bd80      	pop	{r7, pc}

00017460 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17460:	b580      	push	{r7, lr}
   17462:	b082      	sub	sp, #8
   17464:	af00      	add	r7, sp, #0
   17466:	4603      	mov	r3, r0
   17468:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   1746a:	79fb      	ldrb	r3, [r7, #7]
   1746c:	3330      	adds	r3, #48	; 0x30
   1746e:	b2db      	uxtb	r3, r3
   17470:	4618      	mov	r0, r3
   17472:	f7ff ffcd 	bl	17410 <send_byte>
}
   17476:	3708      	adds	r7, #8
   17478:	46bd      	mov	sp, r7
   1747a:	bd80      	pop	{r7, pc}

0001747c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   1747c:	b580      	push	{r7, lr}
   1747e:	b084      	sub	sp, #16
   17480:	af00      	add	r7, sp, #0
   17482:	6078      	str	r0, [r7, #4]
    int i = 0;
   17484:	2300      	movs	r3, #0
   17486:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17488:	e009      	b.n	1749e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1748a:	68fb      	ldr	r3, [r7, #12]
   1748c:	687a      	ldr	r2, [r7, #4]
   1748e:	4413      	add	r3, r2
   17490:	781b      	ldrb	r3, [r3, #0]
   17492:	4618      	mov	r0, r3
   17494:	f7ff ffbc 	bl	17410 <send_byte>
        i++;
   17498:	68fb      	ldr	r3, [r7, #12]
   1749a:	3301      	adds	r3, #1
   1749c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   1749e:	68fb      	ldr	r3, [r7, #12]
   174a0:	687a      	ldr	r2, [r7, #4]
   174a2:	4413      	add	r3, r2
   174a4:	781b      	ldrb	r3, [r3, #0]
   174a6:	2b00      	cmp	r3, #0
   174a8:	d1ef      	bne.n	1748a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   174aa:	3710      	adds	r7, #16
   174ac:	46bd      	mov	sp, r7
   174ae:	bd80      	pop	{r7, pc}

000174b0 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   174b0:	b580      	push	{r7, lr}
   174b2:	b08a      	sub	sp, #40	; 0x28
   174b4:	af00      	add	r7, sp, #0
   174b6:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   174b8:	2300      	movs	r3, #0
   174ba:	623b      	str	r3, [r7, #32]
    long num = c_num;
   174bc:	687b      	ldr	r3, [r7, #4]
   174be:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   174c0:	69fb      	ldr	r3, [r7, #28]
   174c2:	2b00      	cmp	r3, #0
   174c4:	d106      	bne.n	174d4 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   174c6:	f648 10ac 	movw	r0, #35244	; 0x89ac
   174ca:	f2c0 0001 	movt	r0, #1
   174ce:	f7ff ffd5 	bl	1747c <vPrintString>
   174d2:	e062      	b.n	1759a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   174d4:	e024      	b.n	17520 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   174d6:	69f9      	ldr	r1, [r7, #28]
   174d8:	f246 6367 	movw	r3, #26215	; 0x6667
   174dc:	f2c6 6366 	movt	r3, #26214	; 0x6666
   174e0:	fb83 2301 	smull	r2, r3, r3, r1
   174e4:	109a      	asrs	r2, r3, #2
   174e6:	17cb      	asrs	r3, r1, #31
   174e8:	1ad2      	subs	r2, r2, r3
   174ea:	4613      	mov	r3, r2
   174ec:	009b      	lsls	r3, r3, #2
   174ee:	4413      	add	r3, r2
   174f0:	005b      	lsls	r3, r3, #1
   174f2:	1aca      	subs	r2, r1, r3
   174f4:	b2d3      	uxtb	r3, r2
   174f6:	3330      	adds	r3, #48	; 0x30
   174f8:	b2da      	uxtb	r2, r3
   174fa:	f107 010c 	add.w	r1, r7, #12
   174fe:	6a3b      	ldr	r3, [r7, #32]
   17500:	440b      	add	r3, r1
   17502:	701a      	strb	r2, [r3, #0]
            count ++;
   17504:	6a3b      	ldr	r3, [r7, #32]
   17506:	3301      	adds	r3, #1
   17508:	623b      	str	r3, [r7, #32]
            num /= 10;
   1750a:	69fa      	ldr	r2, [r7, #28]
   1750c:	f246 6367 	movw	r3, #26215	; 0x6667
   17510:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17514:	fb83 1302 	smull	r1, r3, r3, r2
   17518:	1099      	asrs	r1, r3, #2
   1751a:	17d3      	asrs	r3, r2, #31
   1751c:	1acb      	subs	r3, r1, r3
   1751e:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17520:	69fb      	ldr	r3, [r7, #28]
   17522:	2b00      	cmp	r3, #0
   17524:	d1d7      	bne.n	174d6 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   17526:	f107 020c 	add.w	r2, r7, #12
   1752a:	6a3b      	ldr	r3, [r7, #32]
   1752c:	4413      	add	r3, r2
   1752e:	2200      	movs	r2, #0
   17530:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   17532:	2300      	movs	r3, #0
   17534:	627b      	str	r3, [r7, #36]	; 0x24
   17536:	e020      	b.n	1757a <vPrintNumber+0xca>
        {
            tmp = time[i];
   17538:	f107 020c 	add.w	r2, r7, #12
   1753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1753e:	4413      	add	r3, r2
   17540:	781b      	ldrb	r3, [r3, #0]
   17542:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   17544:	6a3a      	ldr	r2, [r7, #32]
   17546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17548:	1ad3      	subs	r3, r2, r3
   1754a:	3b01      	subs	r3, #1
   1754c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17550:	4413      	add	r3, r2
   17552:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   17556:	f107 010c 	add.w	r1, r7, #12
   1755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1755c:	440b      	add	r3, r1
   1755e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17560:	6a3a      	ldr	r2, [r7, #32]
   17562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17564:	1ad3      	subs	r3, r2, r3
   17566:	3b01      	subs	r3, #1
   17568:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1756c:	440b      	add	r3, r1
   1756e:	7efa      	ldrb	r2, [r7, #27]
   17570:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   17574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17576:	3301      	adds	r3, #1
   17578:	627b      	str	r3, [r7, #36]	; 0x24
   1757a:	6a3b      	ldr	r3, [r7, #32]
   1757c:	085a      	lsrs	r2, r3, #1
   1757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17580:	429a      	cmp	r2, r3
   17582:	d8d9      	bhi.n	17538 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   17584:	f107 030c 	add.w	r3, r7, #12
   17588:	4618      	mov	r0, r3
   1758a:	f7ff ff77 	bl	1747c <vPrintString>
        vPrintString("\n\r");
   1758e:	f648 10b0 	movw	r0, #35248	; 0x89b0
   17592:	f2c0 0001 	movt	r0, #1
   17596:	f7ff ff71 	bl	1747c <vPrintString>
    }
}
   1759a:	3728      	adds	r7, #40	; 0x28
   1759c:	46bd      	mov	sp, r7
   1759e:	bd80      	pop	{r7, pc}

000175a0 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   175a0:	b580      	push	{r7, lr}
   175a2:	b086      	sub	sp, #24
   175a4:	af02      	add	r7, sp, #8
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   175a6:	2300      	movs	r3, #0
   175a8:	60fb      	str	r3, [r7, #12]
   175aa:	e020      	b.n	175ee <vStartTask+0x4e>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], null_data);
   175ac:	f240 0390 	movw	r3, #144	; 0x90
   175b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175b4:	68fa      	ldr	r2, [r7, #12]
   175b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   175ba:	f240 0328 	movw	r3, #40	; 0x28
   175be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175c2:	68fa      	ldr	r2, [r7, #12]
   175c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   175c8:	f240 0328 	movw	r3, #40	; 0x28
   175cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175d0:	68fa      	ldr	r2, [r7, #12]
   175d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   175d6:	687b      	ldr	r3, [r7, #4]
   175d8:	9300      	str	r3, [sp, #0]
   175da:	683b      	ldr	r3, [r7, #0]
   175dc:	f7eb fc3c 	bl	2e58 <pxEventGenericCreate>
   175e0:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   175e2:	68b8      	ldr	r0, [r7, #8]
   175e4:	f7eb ff60 	bl	34a8 <vEventGenericSend>
void vStartTask()
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   175e8:	68fb      	ldr	r3, [r7, #12]
   175ea:	3301      	adds	r3, #1
   175ec:	60fb      	str	r3, [r7, #12]
   175ee:	68fb      	ldr	r3, [r7, #12]
   175f0:	2b0c      	cmp	r3, #12
   175f2:	dddb      	ble.n	175ac <vStartTask+0xc>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], null_data);
        vEventSend( pxEvent );   
    }
}
   175f4:	3710      	adds	r7, #16
   175f6:	46bd      	mov	sp, r7
   175f8:	bd80      	pop	{r7, pc}
   175fa:	bf00      	nop

000175fc <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   175fc:	b580      	push	{r7, lr}
   175fe:	b086      	sub	sp, #24
   17600:	af04      	add	r7, sp, #16
    init_led();
   17602:	f7ff fe31 	bl	17268 <init_led>
    init_rs232();
   17606:	f7ff fe91 	bl	1732c <init_rs232>
    enable_rs232_interrupts();
   1760a:	f7ff fed5 	bl	173b8 <enable_rs232_interrupts>
    enable_rs232();
   1760e:	f7ff fef5 	bl	173fc <enable_rs232>

    vSemaphoreInitialise();
   17612:	f7eb ffc5 	bl	35a0 <vSemaphoreInitialise>
    vContextInit();
   17616:	f7ec f803 	bl	3620 <vContextInit>
    vInitialiseEventLists();  
   1761a:	f7eb fa31 	bl	2a80 <vInitialiseEventLists>
    vStartTask();
   1761e:	f7ff ffbf 	bl	175a0 <vStartTask>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   17622:	2300      	movs	r3, #0
   17624:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   17626:	2301      	movs	r3, #1
   17628:	9300      	str	r3, [sp, #0]
   1762a:	f64c 3394 	movw	r3, #52116	; 0xcb94
   1762e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17632:	9301      	str	r3, [sp, #4]
   17634:	2300      	movs	r3, #0
   17636:	9302      	str	r3, [sp, #8]
   17638:	2300      	movs	r3, #0
   1763a:	9303      	str	r3, [sp, #12]
   1763c:	f643 4069 	movw	r0, #15465	; 0x3c69
   17640:	f2c0 0000 	movt	r0, #0
   17644:	f648 11b4 	movw	r1, #35252	; 0x89b4
   17648:	f2c0 0101 	movt	r1, #1
   1764c:	2280      	movs	r2, #128	; 0x80
   1764e:	2300      	movs	r3, #0
   17650:	f7ed f9ea 	bl	4a28 <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 4, &xTaskOfHandle[1]);
   17654:	2304      	movs	r3, #4
   17656:	9300      	str	r3, [sp, #0]
   17658:	4b25      	ldr	r3, [pc, #148]	; (176f0 <main+0xf4>)
   1765a:	9301      	str	r3, [sp, #4]
   1765c:	2300      	movs	r3, #0
   1765e:	9302      	str	r3, [sp, #8]
   17660:	2300      	movs	r3, #0
   17662:	9303      	str	r3, [sp, #12]
   17664:	f643 1005 	movw	r0, #14597	; 0x3905
   17668:	f2c0 0000 	movt	r0, #0
   1766c:	f648 11c0 	movw	r1, #35264	; 0x89c0
   17670:	f2c0 0101 	movt	r1, #1
   17674:	2280      	movs	r2, #128	; 0x80
   17676:	2300      	movs	r3, #0
   17678:	f7ed f9d6 	bl	4a28 <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   1767c:	2302      	movs	r3, #2
   1767e:	9300      	str	r3, [sp, #0]
   17680:	4b1c      	ldr	r3, [pc, #112]	; (176f4 <main+0xf8>)
   17682:	9301      	str	r3, [sp, #4]
   17684:	2300      	movs	r3, #0
   17686:	9302      	str	r3, [sp, #8]
   17688:	2300      	movs	r3, #0
   1768a:	9303      	str	r3, [sp, #12]
   1768c:	f643 2005 	movw	r0, #14853	; 0x3a05
   17690:	f2c0 0000 	movt	r0, #0
   17694:	f648 11cc 	movw	r1, #35276	; 0x89cc
   17698:	f2c0 0101 	movt	r1, #1
   1769c:	2280      	movs	r2, #128	; 0x80
   1769e:	2300      	movs	r3, #0
   176a0:	f7ed f9c2 	bl	4a28 <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 3, &xTaskOfHandle[3]);
   176a4:	2303      	movs	r3, #3
   176a6:	9300      	str	r3, [sp, #0]
   176a8:	4b13      	ldr	r3, [pc, #76]	; (176f8 <main+0xfc>)
   176aa:	9301      	str	r3, [sp, #4]
   176ac:	2300      	movs	r3, #0
   176ae:	9302      	str	r3, [sp, #8]
   176b0:	2300      	movs	r3, #0
   176b2:	9303      	str	r3, [sp, #12]
   176b4:	f643 3075 	movw	r0, #15221	; 0x3b75
   176b8:	f2c0 0000 	movt	r0, #0
   176bc:	f648 11d8 	movw	r1, #35288	; 0x89d8
   176c0:	f2c0 0101 	movt	r1, #1
   176c4:	2280      	movs	r2, #128	; 0x80
   176c6:	2300      	movs	r3, #0
   176c8:	f7ed f9ae 	bl	4a28 <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   176cc:	f241 1324 	movw	r3, #4388	; 0x1124
   176d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176d4:	681b      	ldr	r3, [r3, #0]
   176d6:	4618      	mov	r0, r3
   176d8:	2100      	movs	r1, #0
   176da:	2200      	movs	r2, #0
   176dc:	2300      	movs	r3, #0
   176de:	f7ec fe91 	bl	4404 <xQueueGenericSend>
    vTaskStartScheduler();
   176e2:	f7ed fd1f 	bl	5124 <vTaskStartScheduler>

    return 0;
   176e6:	2300      	movs	r3, #0
}
   176e8:	4618      	mov	r0, r3
   176ea:	3708      	adds	r7, #8
   176ec:	46bd      	mov	sp, r7
   176ee:	bd80      	pop	{r7, pc}
   176f0:	2004cb98 	.word	0x2004cb98
   176f4:	2004cb9c 	.word	0x2004cb9c
   176f8:	2004cba0 	.word	0x2004cba0

000176fc <myTraceCreate>:

void myTraceCreate      (){
   176fc:	b480      	push	{r7}
   176fe:	af00      	add	r7, sp, #0
}
   17700:	46bd      	mov	sp, r7
   17702:	f85d 7b04 	ldr.w	r7, [sp], #4
   17706:	4770      	bx	lr

00017708 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   17708:	b480      	push	{r7}
   1770a:	af00      	add	r7, sp, #0
}
   1770c:	46bd      	mov	sp, r7
   1770e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17712:	4770      	bx	lr

00017714 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   17714:	b480      	push	{r7}
   17716:	af00      	add	r7, sp, #0
}
   17718:	46bd      	mov	sp, r7
   1771a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1771e:	4770      	bx	lr

00017720 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17720:	b580      	push	{r7, lr}
   17722:	af00      	add	r7, sp, #0
    if(xIsExecutableEventArrive())
   17724:	f7eb fa60 	bl	2be8 <xIsExecutableEventArrive>
   17728:	4603      	mov	r3, r0
   1772a:	2b00      	cmp	r3, #0
   1772c:	d00a      	beq.n	17744 <vApplicationTickHook+0x24>
       xSemaphoreGive( xBinarySemaphore[0] ); 
   1772e:	f241 1324 	movw	r3, #4388	; 0x1124
   17732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17736:	681b      	ldr	r3, [r3, #0]
   17738:	4618      	mov	r0, r3
   1773a:	2100      	movs	r1, #0
   1773c:	2200      	movs	r2, #0
   1773e:	2300      	movs	r3, #0
   17740:	f7ec fe60 	bl	4404 <xQueueGenericSend>
}
   17744:	bd80      	pop	{r7, pc}
   17746:	bf00      	nop

00017748 <__aeabi_drsub>:
   17748:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1774c:	e002      	b.n	17754 <__adddf3>
   1774e:	bf00      	nop

00017750 <__aeabi_dsub>:
   17750:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017754 <__adddf3>:
   17754:	b530      	push	{r4, r5, lr}
   17756:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1775a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1775e:	ea94 0f05 	teq	r4, r5
   17762:	bf08      	it	eq
   17764:	ea90 0f02 	teqeq	r0, r2
   17768:	bf1f      	itttt	ne
   1776a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1776e:	ea55 0c02 	orrsne.w	ip, r5, r2
   17772:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   17776:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1777a:	f000 80e2 	beq.w	17942 <__adddf3+0x1ee>
   1777e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17782:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17786:	bfb8      	it	lt
   17788:	426d      	neglt	r5, r5
   1778a:	dd0c      	ble.n	177a6 <__adddf3+0x52>
   1778c:	442c      	add	r4, r5
   1778e:	ea80 0202 	eor.w	r2, r0, r2
   17792:	ea81 0303 	eor.w	r3, r1, r3
   17796:	ea82 0000 	eor.w	r0, r2, r0
   1779a:	ea83 0101 	eor.w	r1, r3, r1
   1779e:	ea80 0202 	eor.w	r2, r0, r2
   177a2:	ea81 0303 	eor.w	r3, r1, r3
   177a6:	2d36      	cmp	r5, #54	; 0x36
   177a8:	bf88      	it	hi
   177aa:	bd30      	pophi	{r4, r5, pc}
   177ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   177b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   177b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   177b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   177bc:	d002      	beq.n	177c4 <__adddf3+0x70>
   177be:	4240      	negs	r0, r0
   177c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   177c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   177c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   177cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   177d0:	d002      	beq.n	177d8 <__adddf3+0x84>
   177d2:	4252      	negs	r2, r2
   177d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   177d8:	ea94 0f05 	teq	r4, r5
   177dc:	f000 80a7 	beq.w	1792e <__adddf3+0x1da>
   177e0:	f1a4 0401 	sub.w	r4, r4, #1
   177e4:	f1d5 0e20 	rsbs	lr, r5, #32
   177e8:	db0d      	blt.n	17806 <__adddf3+0xb2>
   177ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   177ee:	fa22 f205 	lsr.w	r2, r2, r5
   177f2:	1880      	adds	r0, r0, r2
   177f4:	f141 0100 	adc.w	r1, r1, #0
   177f8:	fa03 f20e 	lsl.w	r2, r3, lr
   177fc:	1880      	adds	r0, r0, r2
   177fe:	fa43 f305 	asr.w	r3, r3, r5
   17802:	4159      	adcs	r1, r3
   17804:	e00e      	b.n	17824 <__adddf3+0xd0>
   17806:	f1a5 0520 	sub.w	r5, r5, #32
   1780a:	f10e 0e20 	add.w	lr, lr, #32
   1780e:	2a01      	cmp	r2, #1
   17810:	fa03 fc0e 	lsl.w	ip, r3, lr
   17814:	bf28      	it	cs
   17816:	f04c 0c02 	orrcs.w	ip, ip, #2
   1781a:	fa43 f305 	asr.w	r3, r3, r5
   1781e:	18c0      	adds	r0, r0, r3
   17820:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17828:	d507      	bpl.n	1783a <__adddf3+0xe6>
   1782a:	f04f 0e00 	mov.w	lr, #0
   1782e:	f1dc 0c00 	rsbs	ip, ip, #0
   17832:	eb7e 0000 	sbcs.w	r0, lr, r0
   17836:	eb6e 0101 	sbc.w	r1, lr, r1
   1783a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1783e:	d31b      	bcc.n	17878 <__adddf3+0x124>
   17840:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17844:	d30c      	bcc.n	17860 <__adddf3+0x10c>
   17846:	0849      	lsrs	r1, r1, #1
   17848:	ea5f 0030 	movs.w	r0, r0, rrx
   1784c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17850:	f104 0401 	add.w	r4, r4, #1
   17854:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17858:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1785c:	f080 809a 	bcs.w	17994 <__adddf3+0x240>
   17860:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17864:	bf08      	it	eq
   17866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1786a:	f150 0000 	adcs.w	r0, r0, #0
   1786e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17872:	ea41 0105 	orr.w	r1, r1, r5
   17876:	bd30      	pop	{r4, r5, pc}
   17878:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1787c:	4140      	adcs	r0, r0
   1787e:	eb41 0101 	adc.w	r1, r1, r1
   17882:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17886:	f1a4 0401 	sub.w	r4, r4, #1
   1788a:	d1e9      	bne.n	17860 <__adddf3+0x10c>
   1788c:	f091 0f00 	teq	r1, #0
   17890:	bf04      	itt	eq
   17892:	4601      	moveq	r1, r0
   17894:	2000      	moveq	r0, #0
   17896:	fab1 f381 	clz	r3, r1
   1789a:	bf08      	it	eq
   1789c:	3320      	addeq	r3, #32
   1789e:	f1a3 030b 	sub.w	r3, r3, #11
   178a2:	f1b3 0220 	subs.w	r2, r3, #32
   178a6:	da0c      	bge.n	178c2 <__adddf3+0x16e>
   178a8:	320c      	adds	r2, #12
   178aa:	dd08      	ble.n	178be <__adddf3+0x16a>
   178ac:	f102 0c14 	add.w	ip, r2, #20
   178b0:	f1c2 020c 	rsb	r2, r2, #12
   178b4:	fa01 f00c 	lsl.w	r0, r1, ip
   178b8:	fa21 f102 	lsr.w	r1, r1, r2
   178bc:	e00c      	b.n	178d8 <__adddf3+0x184>
   178be:	f102 0214 	add.w	r2, r2, #20
   178c2:	bfd8      	it	le
   178c4:	f1c2 0c20 	rsble	ip, r2, #32
   178c8:	fa01 f102 	lsl.w	r1, r1, r2
   178cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   178d0:	bfdc      	itt	le
   178d2:	ea41 010c 	orrle.w	r1, r1, ip
   178d6:	4090      	lslle	r0, r2
   178d8:	1ae4      	subs	r4, r4, r3
   178da:	bfa2      	ittt	ge
   178dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   178e0:	4329      	orrge	r1, r5
   178e2:	bd30      	popge	{r4, r5, pc}
   178e4:	ea6f 0404 	mvn.w	r4, r4
   178e8:	3c1f      	subs	r4, #31
   178ea:	da1c      	bge.n	17926 <__adddf3+0x1d2>
   178ec:	340c      	adds	r4, #12
   178ee:	dc0e      	bgt.n	1790e <__adddf3+0x1ba>
   178f0:	f104 0414 	add.w	r4, r4, #20
   178f4:	f1c4 0220 	rsb	r2, r4, #32
   178f8:	fa20 f004 	lsr.w	r0, r0, r4
   178fc:	fa01 f302 	lsl.w	r3, r1, r2
   17900:	ea40 0003 	orr.w	r0, r0, r3
   17904:	fa21 f304 	lsr.w	r3, r1, r4
   17908:	ea45 0103 	orr.w	r1, r5, r3
   1790c:	bd30      	pop	{r4, r5, pc}
   1790e:	f1c4 040c 	rsb	r4, r4, #12
   17912:	f1c4 0220 	rsb	r2, r4, #32
   17916:	fa20 f002 	lsr.w	r0, r0, r2
   1791a:	fa01 f304 	lsl.w	r3, r1, r4
   1791e:	ea40 0003 	orr.w	r0, r0, r3
   17922:	4629      	mov	r1, r5
   17924:	bd30      	pop	{r4, r5, pc}
   17926:	fa21 f004 	lsr.w	r0, r1, r4
   1792a:	4629      	mov	r1, r5
   1792c:	bd30      	pop	{r4, r5, pc}
   1792e:	f094 0f00 	teq	r4, #0
   17932:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17936:	bf06      	itte	eq
   17938:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1793c:	3401      	addeq	r4, #1
   1793e:	3d01      	subne	r5, #1
   17940:	e74e      	b.n	177e0 <__adddf3+0x8c>
   17942:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17946:	bf18      	it	ne
   17948:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1794c:	d029      	beq.n	179a2 <__adddf3+0x24e>
   1794e:	ea94 0f05 	teq	r4, r5
   17952:	bf08      	it	eq
   17954:	ea90 0f02 	teqeq	r0, r2
   17958:	d005      	beq.n	17966 <__adddf3+0x212>
   1795a:	ea54 0c00 	orrs.w	ip, r4, r0
   1795e:	bf04      	itt	eq
   17960:	4619      	moveq	r1, r3
   17962:	4610      	moveq	r0, r2
   17964:	bd30      	pop	{r4, r5, pc}
   17966:	ea91 0f03 	teq	r1, r3
   1796a:	bf1e      	ittt	ne
   1796c:	2100      	movne	r1, #0
   1796e:	2000      	movne	r0, #0
   17970:	bd30      	popne	{r4, r5, pc}
   17972:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17976:	d105      	bne.n	17984 <__adddf3+0x230>
   17978:	0040      	lsls	r0, r0, #1
   1797a:	4149      	adcs	r1, r1
   1797c:	bf28      	it	cs
   1797e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17982:	bd30      	pop	{r4, r5, pc}
   17984:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17988:	bf3c      	itt	cc
   1798a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1798e:	bd30      	popcc	{r4, r5, pc}
   17990:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17994:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17998:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1799c:	f04f 0000 	mov.w	r0, #0
   179a0:	bd30      	pop	{r4, r5, pc}
   179a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   179a6:	bf1a      	itte	ne
   179a8:	4619      	movne	r1, r3
   179aa:	4610      	movne	r0, r2
   179ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   179b0:	bf1c      	itt	ne
   179b2:	460b      	movne	r3, r1
   179b4:	4602      	movne	r2, r0
   179b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   179ba:	bf06      	itte	eq
   179bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   179c0:	ea91 0f03 	teqeq	r1, r3
   179c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   179c8:	bd30      	pop	{r4, r5, pc}
   179ca:	bf00      	nop

000179cc <__aeabi_ui2d>:
   179cc:	f090 0f00 	teq	r0, #0
   179d0:	bf04      	itt	eq
   179d2:	2100      	moveq	r1, #0
   179d4:	4770      	bxeq	lr
   179d6:	b530      	push	{r4, r5, lr}
   179d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   179dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   179e0:	f04f 0500 	mov.w	r5, #0
   179e4:	f04f 0100 	mov.w	r1, #0
   179e8:	e750      	b.n	1788c <__adddf3+0x138>
   179ea:	bf00      	nop

000179ec <__aeabi_i2d>:
   179ec:	f090 0f00 	teq	r0, #0
   179f0:	bf04      	itt	eq
   179f2:	2100      	moveq	r1, #0
   179f4:	4770      	bxeq	lr
   179f6:	b530      	push	{r4, r5, lr}
   179f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   179fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17a00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17a04:	bf48      	it	mi
   17a06:	4240      	negmi	r0, r0
   17a08:	f04f 0100 	mov.w	r1, #0
   17a0c:	e73e      	b.n	1788c <__adddf3+0x138>
   17a0e:	bf00      	nop

00017a10 <__aeabi_f2d>:
   17a10:	0042      	lsls	r2, r0, #1
   17a12:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17a16:	ea4f 0131 	mov.w	r1, r1, rrx
   17a1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17a1e:	bf1f      	itttt	ne
   17a20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17a24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17a28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17a2c:	4770      	bxne	lr
   17a2e:	f092 0f00 	teq	r2, #0
   17a32:	bf14      	ite	ne
   17a34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17a38:	4770      	bxeq	lr
   17a3a:	b530      	push	{r4, r5, lr}
   17a3c:	f44f 7460 	mov.w	r4, #896	; 0x380
   17a40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17a44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17a48:	e720      	b.n	1788c <__adddf3+0x138>
   17a4a:	bf00      	nop

00017a4c <__aeabi_ul2d>:
   17a4c:	ea50 0201 	orrs.w	r2, r0, r1
   17a50:	bf08      	it	eq
   17a52:	4770      	bxeq	lr
   17a54:	b530      	push	{r4, r5, lr}
   17a56:	f04f 0500 	mov.w	r5, #0
   17a5a:	e00a      	b.n	17a72 <__aeabi_l2d+0x16>

00017a5c <__aeabi_l2d>:
   17a5c:	ea50 0201 	orrs.w	r2, r0, r1
   17a60:	bf08      	it	eq
   17a62:	4770      	bxeq	lr
   17a64:	b530      	push	{r4, r5, lr}
   17a66:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17a6a:	d502      	bpl.n	17a72 <__aeabi_l2d+0x16>
   17a6c:	4240      	negs	r0, r0
   17a6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17a72:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17a76:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17a7a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17a7e:	f43f aedc 	beq.w	1783a <__adddf3+0xe6>
   17a82:	f04f 0203 	mov.w	r2, #3
   17a86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a8a:	bf18      	it	ne
   17a8c:	3203      	addne	r2, #3
   17a8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a92:	bf18      	it	ne
   17a94:	3203      	addne	r2, #3
   17a96:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17a9a:	f1c2 0320 	rsb	r3, r2, #32
   17a9e:	fa00 fc03 	lsl.w	ip, r0, r3
   17aa2:	fa20 f002 	lsr.w	r0, r0, r2
   17aa6:	fa01 fe03 	lsl.w	lr, r1, r3
   17aaa:	ea40 000e 	orr.w	r0, r0, lr
   17aae:	fa21 f102 	lsr.w	r1, r1, r2
   17ab2:	4414      	add	r4, r2
   17ab4:	e6c1      	b.n	1783a <__adddf3+0xe6>
   17ab6:	bf00      	nop

00017ab8 <__aeabi_dmul>:
   17ab8:	b570      	push	{r4, r5, r6, lr}
   17aba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17abe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17ac2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17ac6:	bf1d      	ittte	ne
   17ac8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17acc:	ea94 0f0c 	teqne	r4, ip
   17ad0:	ea95 0f0c 	teqne	r5, ip
   17ad4:	f000 f8de 	bleq	17c94 <__aeabi_dmul+0x1dc>
   17ad8:	442c      	add	r4, r5
   17ada:	ea81 0603 	eor.w	r6, r1, r3
   17ade:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17ae2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17ae6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17aea:	bf18      	it	ne
   17aec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17af0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17af8:	d038      	beq.n	17b6c <__aeabi_dmul+0xb4>
   17afa:	fba0 ce02 	umull	ip, lr, r0, r2
   17afe:	f04f 0500 	mov.w	r5, #0
   17b02:	fbe1 e502 	umlal	lr, r5, r1, r2
   17b06:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17b0a:	fbe0 e503 	umlal	lr, r5, r0, r3
   17b0e:	f04f 0600 	mov.w	r6, #0
   17b12:	fbe1 5603 	umlal	r5, r6, r1, r3
   17b16:	f09c 0f00 	teq	ip, #0
   17b1a:	bf18      	it	ne
   17b1c:	f04e 0e01 	orrne.w	lr, lr, #1
   17b20:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17b24:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17b28:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17b2c:	d204      	bcs.n	17b38 <__aeabi_dmul+0x80>
   17b2e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17b32:	416d      	adcs	r5, r5
   17b34:	eb46 0606 	adc.w	r6, r6, r6
   17b38:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17b3c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17b40:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17b44:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17b48:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17b4c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17b50:	bf88      	it	hi
   17b52:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17b56:	d81e      	bhi.n	17b96 <__aeabi_dmul+0xde>
   17b58:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17b5c:	bf08      	it	eq
   17b5e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17b62:	f150 0000 	adcs.w	r0, r0, #0
   17b66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17b6a:	bd70      	pop	{r4, r5, r6, pc}
   17b6c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17b70:	ea46 0101 	orr.w	r1, r6, r1
   17b74:	ea40 0002 	orr.w	r0, r0, r2
   17b78:	ea81 0103 	eor.w	r1, r1, r3
   17b7c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17b80:	bfc2      	ittt	gt
   17b82:	ebd4 050c 	rsbsgt	r5, r4, ip
   17b86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17b8a:	bd70      	popgt	{r4, r5, r6, pc}
   17b8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17b90:	f04f 0e00 	mov.w	lr, #0
   17b94:	3c01      	subs	r4, #1
   17b96:	f300 80ab 	bgt.w	17cf0 <__aeabi_dmul+0x238>
   17b9a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17b9e:	bfde      	ittt	le
   17ba0:	2000      	movle	r0, #0
   17ba2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17ba6:	bd70      	pople	{r4, r5, r6, pc}
   17ba8:	f1c4 0400 	rsb	r4, r4, #0
   17bac:	3c20      	subs	r4, #32
   17bae:	da35      	bge.n	17c1c <__aeabi_dmul+0x164>
   17bb0:	340c      	adds	r4, #12
   17bb2:	dc1b      	bgt.n	17bec <__aeabi_dmul+0x134>
   17bb4:	f104 0414 	add.w	r4, r4, #20
   17bb8:	f1c4 0520 	rsb	r5, r4, #32
   17bbc:	fa00 f305 	lsl.w	r3, r0, r5
   17bc0:	fa20 f004 	lsr.w	r0, r0, r4
   17bc4:	fa01 f205 	lsl.w	r2, r1, r5
   17bc8:	ea40 0002 	orr.w	r0, r0, r2
   17bcc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17bd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17bd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17bd8:	fa21 f604 	lsr.w	r6, r1, r4
   17bdc:	eb42 0106 	adc.w	r1, r2, r6
   17be0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17be4:	bf08      	it	eq
   17be6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17bea:	bd70      	pop	{r4, r5, r6, pc}
   17bec:	f1c4 040c 	rsb	r4, r4, #12
   17bf0:	f1c4 0520 	rsb	r5, r4, #32
   17bf4:	fa00 f304 	lsl.w	r3, r0, r4
   17bf8:	fa20 f005 	lsr.w	r0, r0, r5
   17bfc:	fa01 f204 	lsl.w	r2, r1, r4
   17c00:	ea40 0002 	orr.w	r0, r0, r2
   17c04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17c08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17c0c:	f141 0100 	adc.w	r1, r1, #0
   17c10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17c14:	bf08      	it	eq
   17c16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17c1a:	bd70      	pop	{r4, r5, r6, pc}
   17c1c:	f1c4 0520 	rsb	r5, r4, #32
   17c20:	fa00 f205 	lsl.w	r2, r0, r5
   17c24:	ea4e 0e02 	orr.w	lr, lr, r2
   17c28:	fa20 f304 	lsr.w	r3, r0, r4
   17c2c:	fa01 f205 	lsl.w	r2, r1, r5
   17c30:	ea43 0302 	orr.w	r3, r3, r2
   17c34:	fa21 f004 	lsr.w	r0, r1, r4
   17c38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17c3c:	fa21 f204 	lsr.w	r2, r1, r4
   17c40:	ea20 0002 	bic.w	r0, r0, r2
   17c44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17c48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17c4c:	bf08      	it	eq
   17c4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17c52:	bd70      	pop	{r4, r5, r6, pc}
   17c54:	f094 0f00 	teq	r4, #0
   17c58:	d10f      	bne.n	17c7a <__aeabi_dmul+0x1c2>
   17c5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17c5e:	0040      	lsls	r0, r0, #1
   17c60:	eb41 0101 	adc.w	r1, r1, r1
   17c64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17c68:	bf08      	it	eq
   17c6a:	3c01      	subeq	r4, #1
   17c6c:	d0f7      	beq.n	17c5e <__aeabi_dmul+0x1a6>
   17c6e:	ea41 0106 	orr.w	r1, r1, r6
   17c72:	f095 0f00 	teq	r5, #0
   17c76:	bf18      	it	ne
   17c78:	4770      	bxne	lr
   17c7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17c7e:	0052      	lsls	r2, r2, #1
   17c80:	eb43 0303 	adc.w	r3, r3, r3
   17c84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17c88:	bf08      	it	eq
   17c8a:	3d01      	subeq	r5, #1
   17c8c:	d0f7      	beq.n	17c7e <__aeabi_dmul+0x1c6>
   17c8e:	ea43 0306 	orr.w	r3, r3, r6
   17c92:	4770      	bx	lr
   17c94:	ea94 0f0c 	teq	r4, ip
   17c98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17c9c:	bf18      	it	ne
   17c9e:	ea95 0f0c 	teqne	r5, ip
   17ca2:	d00c      	beq.n	17cbe <__aeabi_dmul+0x206>
   17ca4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17ca8:	bf18      	it	ne
   17caa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17cae:	d1d1      	bne.n	17c54 <__aeabi_dmul+0x19c>
   17cb0:	ea81 0103 	eor.w	r1, r1, r3
   17cb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17cb8:	f04f 0000 	mov.w	r0, #0
   17cbc:	bd70      	pop	{r4, r5, r6, pc}
   17cbe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17cc2:	bf06      	itte	eq
   17cc4:	4610      	moveq	r0, r2
   17cc6:	4619      	moveq	r1, r3
   17cc8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17ccc:	d019      	beq.n	17d02 <__aeabi_dmul+0x24a>
   17cce:	ea94 0f0c 	teq	r4, ip
   17cd2:	d102      	bne.n	17cda <__aeabi_dmul+0x222>
   17cd4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17cd8:	d113      	bne.n	17d02 <__aeabi_dmul+0x24a>
   17cda:	ea95 0f0c 	teq	r5, ip
   17cde:	d105      	bne.n	17cec <__aeabi_dmul+0x234>
   17ce0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17ce4:	bf1c      	itt	ne
   17ce6:	4610      	movne	r0, r2
   17ce8:	4619      	movne	r1, r3
   17cea:	d10a      	bne.n	17d02 <__aeabi_dmul+0x24a>
   17cec:	ea81 0103 	eor.w	r1, r1, r3
   17cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17cf4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17cf8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17cfc:	f04f 0000 	mov.w	r0, #0
   17d00:	bd70      	pop	{r4, r5, r6, pc}
   17d02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17d06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17d0a:	bd70      	pop	{r4, r5, r6, pc}

00017d0c <__aeabi_ddiv>:
   17d0c:	b570      	push	{r4, r5, r6, lr}
   17d0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17d12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17d16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17d1a:	bf1d      	ittte	ne
   17d1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17d20:	ea94 0f0c 	teqne	r4, ip
   17d24:	ea95 0f0c 	teqne	r5, ip
   17d28:	f000 f8a7 	bleq	17e7a <__aeabi_ddiv+0x16e>
   17d2c:	eba4 0405 	sub.w	r4, r4, r5
   17d30:	ea81 0e03 	eor.w	lr, r1, r3
   17d34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17d38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17d3c:	f000 8088 	beq.w	17e50 <__aeabi_ddiv+0x144>
   17d40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17d44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17d48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17d4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17d50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17d54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17d58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17d5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17d60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17d64:	429d      	cmp	r5, r3
   17d66:	bf08      	it	eq
   17d68:	4296      	cmpeq	r6, r2
   17d6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17d6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17d72:	d202      	bcs.n	17d7a <__aeabi_ddiv+0x6e>
   17d74:	085b      	lsrs	r3, r3, #1
   17d76:	ea4f 0232 	mov.w	r2, r2, rrx
   17d7a:	1ab6      	subs	r6, r6, r2
   17d7c:	eb65 0503 	sbc.w	r5, r5, r3
   17d80:	085b      	lsrs	r3, r3, #1
   17d82:	ea4f 0232 	mov.w	r2, r2, rrx
   17d86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17d8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17d8e:	ebb6 0e02 	subs.w	lr, r6, r2
   17d92:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d96:	bf22      	ittt	cs
   17d98:	1ab6      	subcs	r6, r6, r2
   17d9a:	4675      	movcs	r5, lr
   17d9c:	ea40 000c 	orrcs.w	r0, r0, ip
   17da0:	085b      	lsrs	r3, r3, #1
   17da2:	ea4f 0232 	mov.w	r2, r2, rrx
   17da6:	ebb6 0e02 	subs.w	lr, r6, r2
   17daa:	eb75 0e03 	sbcs.w	lr, r5, r3
   17dae:	bf22      	ittt	cs
   17db0:	1ab6      	subcs	r6, r6, r2
   17db2:	4675      	movcs	r5, lr
   17db4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17db8:	085b      	lsrs	r3, r3, #1
   17dba:	ea4f 0232 	mov.w	r2, r2, rrx
   17dbe:	ebb6 0e02 	subs.w	lr, r6, r2
   17dc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   17dc6:	bf22      	ittt	cs
   17dc8:	1ab6      	subcs	r6, r6, r2
   17dca:	4675      	movcs	r5, lr
   17dcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17dd0:	085b      	lsrs	r3, r3, #1
   17dd2:	ea4f 0232 	mov.w	r2, r2, rrx
   17dd6:	ebb6 0e02 	subs.w	lr, r6, r2
   17dda:	eb75 0e03 	sbcs.w	lr, r5, r3
   17dde:	bf22      	ittt	cs
   17de0:	1ab6      	subcs	r6, r6, r2
   17de2:	4675      	movcs	r5, lr
   17de4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17de8:	ea55 0e06 	orrs.w	lr, r5, r6
   17dec:	d018      	beq.n	17e20 <__aeabi_ddiv+0x114>
   17dee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17df2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17df6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17dfa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17dfe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17e02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17e06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17e0a:	d1c0      	bne.n	17d8e <__aeabi_ddiv+0x82>
   17e0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17e10:	d10b      	bne.n	17e2a <__aeabi_ddiv+0x11e>
   17e12:	ea41 0100 	orr.w	r1, r1, r0
   17e16:	f04f 0000 	mov.w	r0, #0
   17e1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17e1e:	e7b6      	b.n	17d8e <__aeabi_ddiv+0x82>
   17e20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17e24:	bf04      	itt	eq
   17e26:	4301      	orreq	r1, r0
   17e28:	2000      	moveq	r0, #0
   17e2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17e2e:	bf88      	it	hi
   17e30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17e34:	f63f aeaf 	bhi.w	17b96 <__aeabi_dmul+0xde>
   17e38:	ebb5 0c03 	subs.w	ip, r5, r3
   17e3c:	bf04      	itt	eq
   17e3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   17e42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17e46:	f150 0000 	adcs.w	r0, r0, #0
   17e4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17e4e:	bd70      	pop	{r4, r5, r6, pc}
   17e50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17e54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17e58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17e5c:	bfc2      	ittt	gt
   17e5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   17e62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17e66:	bd70      	popgt	{r4, r5, r6, pc}
   17e68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17e6c:	f04f 0e00 	mov.w	lr, #0
   17e70:	3c01      	subs	r4, #1
   17e72:	e690      	b.n	17b96 <__aeabi_dmul+0xde>
   17e74:	ea45 0e06 	orr.w	lr, r5, r6
   17e78:	e68d      	b.n	17b96 <__aeabi_dmul+0xde>
   17e7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17e7e:	ea94 0f0c 	teq	r4, ip
   17e82:	bf08      	it	eq
   17e84:	ea95 0f0c 	teqeq	r5, ip
   17e88:	f43f af3b 	beq.w	17d02 <__aeabi_dmul+0x24a>
   17e8c:	ea94 0f0c 	teq	r4, ip
   17e90:	d10a      	bne.n	17ea8 <__aeabi_ddiv+0x19c>
   17e92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17e96:	f47f af34 	bne.w	17d02 <__aeabi_dmul+0x24a>
   17e9a:	ea95 0f0c 	teq	r5, ip
   17e9e:	f47f af25 	bne.w	17cec <__aeabi_dmul+0x234>
   17ea2:	4610      	mov	r0, r2
   17ea4:	4619      	mov	r1, r3
   17ea6:	e72c      	b.n	17d02 <__aeabi_dmul+0x24a>
   17ea8:	ea95 0f0c 	teq	r5, ip
   17eac:	d106      	bne.n	17ebc <__aeabi_ddiv+0x1b0>
   17eae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17eb2:	f43f aefd 	beq.w	17cb0 <__aeabi_dmul+0x1f8>
   17eb6:	4610      	mov	r0, r2
   17eb8:	4619      	mov	r1, r3
   17eba:	e722      	b.n	17d02 <__aeabi_dmul+0x24a>
   17ebc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17ec0:	bf18      	it	ne
   17ec2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17ec6:	f47f aec5 	bne.w	17c54 <__aeabi_dmul+0x19c>
   17eca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17ece:	f47f af0d 	bne.w	17cec <__aeabi_dmul+0x234>
   17ed2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17ed6:	f47f aeeb 	bne.w	17cb0 <__aeabi_dmul+0x1f8>
   17eda:	e712      	b.n	17d02 <__aeabi_dmul+0x24a>

00017edc <__gedf2>:
   17edc:	f04f 3cff 	mov.w	ip, #4294967295
   17ee0:	e006      	b.n	17ef0 <__cmpdf2+0x4>
   17ee2:	bf00      	nop

00017ee4 <__ledf2>:
   17ee4:	f04f 0c01 	mov.w	ip, #1
   17ee8:	e002      	b.n	17ef0 <__cmpdf2+0x4>
   17eea:	bf00      	nop

00017eec <__cmpdf2>:
   17eec:	f04f 0c01 	mov.w	ip, #1
   17ef0:	f84d cd04 	str.w	ip, [sp, #-4]!
   17ef4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17ef8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17efc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17f00:	bf18      	it	ne
   17f02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17f06:	d01b      	beq.n	17f40 <__cmpdf2+0x54>
   17f08:	b001      	add	sp, #4
   17f0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17f0e:	bf0c      	ite	eq
   17f10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17f14:	ea91 0f03 	teqne	r1, r3
   17f18:	bf02      	ittt	eq
   17f1a:	ea90 0f02 	teqeq	r0, r2
   17f1e:	2000      	moveq	r0, #0
   17f20:	4770      	bxeq	lr
   17f22:	f110 0f00 	cmn.w	r0, #0
   17f26:	ea91 0f03 	teq	r1, r3
   17f2a:	bf58      	it	pl
   17f2c:	4299      	cmppl	r1, r3
   17f2e:	bf08      	it	eq
   17f30:	4290      	cmpeq	r0, r2
   17f32:	bf2c      	ite	cs
   17f34:	17d8      	asrcs	r0, r3, #31
   17f36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17f3a:	f040 0001 	orr.w	r0, r0, #1
   17f3e:	4770      	bx	lr
   17f40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17f48:	d102      	bne.n	17f50 <__cmpdf2+0x64>
   17f4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17f4e:	d107      	bne.n	17f60 <__cmpdf2+0x74>
   17f50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17f54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17f58:	d1d6      	bne.n	17f08 <__cmpdf2+0x1c>
   17f5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17f5e:	d0d3      	beq.n	17f08 <__cmpdf2+0x1c>
   17f60:	f85d 0b04 	ldr.w	r0, [sp], #4
   17f64:	4770      	bx	lr
   17f66:	bf00      	nop

00017f68 <__aeabi_cdrcmple>:
   17f68:	4684      	mov	ip, r0
   17f6a:	4610      	mov	r0, r2
   17f6c:	4662      	mov	r2, ip
   17f6e:	468c      	mov	ip, r1
   17f70:	4619      	mov	r1, r3
   17f72:	4663      	mov	r3, ip
   17f74:	e000      	b.n	17f78 <__aeabi_cdcmpeq>
   17f76:	bf00      	nop

00017f78 <__aeabi_cdcmpeq>:
   17f78:	b501      	push	{r0, lr}
   17f7a:	f7ff ffb7 	bl	17eec <__cmpdf2>
   17f7e:	2800      	cmp	r0, #0
   17f80:	bf48      	it	mi
   17f82:	f110 0f00 	cmnmi.w	r0, #0
   17f86:	bd01      	pop	{r0, pc}

00017f88 <__aeabi_dcmpeq>:
   17f88:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f8c:	f7ff fff4 	bl	17f78 <__aeabi_cdcmpeq>
   17f90:	bf0c      	ite	eq
   17f92:	2001      	moveq	r0, #1
   17f94:	2000      	movne	r0, #0
   17f96:	f85d fb08 	ldr.w	pc, [sp], #8
   17f9a:	bf00      	nop

00017f9c <__aeabi_dcmplt>:
   17f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17fa0:	f7ff ffea 	bl	17f78 <__aeabi_cdcmpeq>
   17fa4:	bf34      	ite	cc
   17fa6:	2001      	movcc	r0, #1
   17fa8:	2000      	movcs	r0, #0
   17faa:	f85d fb08 	ldr.w	pc, [sp], #8
   17fae:	bf00      	nop

00017fb0 <__aeabi_dcmple>:
   17fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   17fb4:	f7ff ffe0 	bl	17f78 <__aeabi_cdcmpeq>
   17fb8:	bf94      	ite	ls
   17fba:	2001      	movls	r0, #1
   17fbc:	2000      	movhi	r0, #0
   17fbe:	f85d fb08 	ldr.w	pc, [sp], #8
   17fc2:	bf00      	nop

00017fc4 <__aeabi_dcmpge>:
   17fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   17fc8:	f7ff ffce 	bl	17f68 <__aeabi_cdrcmple>
   17fcc:	bf94      	ite	ls
   17fce:	2001      	movls	r0, #1
   17fd0:	2000      	movhi	r0, #0
   17fd2:	f85d fb08 	ldr.w	pc, [sp], #8
   17fd6:	bf00      	nop

00017fd8 <__aeabi_dcmpgt>:
   17fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   17fdc:	f7ff ffc4 	bl	17f68 <__aeabi_cdrcmple>
   17fe0:	bf34      	ite	cc
   17fe2:	2001      	movcc	r0, #1
   17fe4:	2000      	movcs	r0, #0
   17fe6:	f85d fb08 	ldr.w	pc, [sp], #8
   17fea:	bf00      	nop

00017fec <__aeabi_d2iz>:
   17fec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17ff0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17ff4:	d215      	bcs.n	18022 <__aeabi_d2iz+0x36>
   17ff6:	d511      	bpl.n	1801c <__aeabi_d2iz+0x30>
   17ff8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17ffc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18000:	d912      	bls.n	18028 <__aeabi_d2iz+0x3c>
   18002:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1800a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1800e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18012:	fa23 f002 	lsr.w	r0, r3, r2
   18016:	bf18      	it	ne
   18018:	4240      	negne	r0, r0
   1801a:	4770      	bx	lr
   1801c:	f04f 0000 	mov.w	r0, #0
   18020:	4770      	bx	lr
   18022:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18026:	d105      	bne.n	18034 <__aeabi_d2iz+0x48>
   18028:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1802c:	bf08      	it	eq
   1802e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18032:	4770      	bx	lr
   18034:	f04f 0000 	mov.w	r0, #0
   18038:	4770      	bx	lr
   1803a:	bf00      	nop

0001803c <__aeabi_d2uiz>:
   1803c:	004a      	lsls	r2, r1, #1
   1803e:	d211      	bcs.n	18064 <__aeabi_d2uiz+0x28>
   18040:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18044:	d211      	bcs.n	1806a <__aeabi_d2uiz+0x2e>
   18046:	d50d      	bpl.n	18064 <__aeabi_d2uiz+0x28>
   18048:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1804c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18050:	d40e      	bmi.n	18070 <__aeabi_d2uiz+0x34>
   18052:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18056:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1805a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1805e:	fa23 f002 	lsr.w	r0, r3, r2
   18062:	4770      	bx	lr
   18064:	f04f 0000 	mov.w	r0, #0
   18068:	4770      	bx	lr
   1806a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1806e:	d102      	bne.n	18076 <__aeabi_d2uiz+0x3a>
   18070:	f04f 30ff 	mov.w	r0, #4294967295
   18074:	4770      	bx	lr
   18076:	f04f 0000 	mov.w	r0, #0
   1807a:	4770      	bx	lr

0001807c <__aeabi_d2f>:
   1807c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18080:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18084:	bf24      	itt	cs
   18086:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1808a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1808e:	d90d      	bls.n	180ac <__aeabi_d2f+0x30>
   18090:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18094:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18098:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1809c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   180a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   180a4:	bf08      	it	eq
   180a6:	f020 0001 	biceq.w	r0, r0, #1
   180aa:	4770      	bx	lr
   180ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   180b0:	d121      	bne.n	180f6 <__aeabi_d2f+0x7a>
   180b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   180b6:	bfbc      	itt	lt
   180b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   180bc:	4770      	bxlt	lr
   180be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   180c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   180c6:	f1c2 0218 	rsb	r2, r2, #24
   180ca:	f1c2 0c20 	rsb	ip, r2, #32
   180ce:	fa10 f30c 	lsls.w	r3, r0, ip
   180d2:	fa20 f002 	lsr.w	r0, r0, r2
   180d6:	bf18      	it	ne
   180d8:	f040 0001 	orrne.w	r0, r0, #1
   180dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   180e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   180e4:	fa03 fc0c 	lsl.w	ip, r3, ip
   180e8:	ea40 000c 	orr.w	r0, r0, ip
   180ec:	fa23 f302 	lsr.w	r3, r3, r2
   180f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   180f4:	e7cc      	b.n	18090 <__aeabi_d2f+0x14>
   180f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   180fa:	d107      	bne.n	1810c <__aeabi_d2f+0x90>
   180fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18100:	bf1e      	ittt	ne
   18102:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18106:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1810a:	4770      	bxne	lr
   1810c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18110:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18114:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18118:	4770      	bx	lr
   1811a:	bf00      	nop

0001811c <__aeabi_frsub>:
   1811c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18120:	e002      	b.n	18128 <__addsf3>
   18122:	bf00      	nop

00018124 <__aeabi_fsub>:
   18124:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018128 <__addsf3>:
   18128:	0042      	lsls	r2, r0, #1
   1812a:	bf1f      	itttt	ne
   1812c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18130:	ea92 0f03 	teqne	r2, r3
   18134:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18138:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1813c:	d06a      	beq.n	18214 <__addsf3+0xec>
   1813e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18142:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18146:	bfc1      	itttt	gt
   18148:	18d2      	addgt	r2, r2, r3
   1814a:	4041      	eorgt	r1, r0
   1814c:	4048      	eorgt	r0, r1
   1814e:	4041      	eorgt	r1, r0
   18150:	bfb8      	it	lt
   18152:	425b      	neglt	r3, r3
   18154:	2b19      	cmp	r3, #25
   18156:	bf88      	it	hi
   18158:	4770      	bxhi	lr
   1815a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1815e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18162:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18166:	bf18      	it	ne
   18168:	4240      	negne	r0, r0
   1816a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1816e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18172:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18176:	bf18      	it	ne
   18178:	4249      	negne	r1, r1
   1817a:	ea92 0f03 	teq	r2, r3
   1817e:	d03f      	beq.n	18200 <__addsf3+0xd8>
   18180:	f1a2 0201 	sub.w	r2, r2, #1
   18184:	fa41 fc03 	asr.w	ip, r1, r3
   18188:	eb10 000c 	adds.w	r0, r0, ip
   1818c:	f1c3 0320 	rsb	r3, r3, #32
   18190:	fa01 f103 	lsl.w	r1, r1, r3
   18194:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18198:	d502      	bpl.n	181a0 <__addsf3+0x78>
   1819a:	4249      	negs	r1, r1
   1819c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   181a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   181a4:	d313      	bcc.n	181ce <__addsf3+0xa6>
   181a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   181aa:	d306      	bcc.n	181ba <__addsf3+0x92>
   181ac:	0840      	lsrs	r0, r0, #1
   181ae:	ea4f 0131 	mov.w	r1, r1, rrx
   181b2:	f102 0201 	add.w	r2, r2, #1
   181b6:	2afe      	cmp	r2, #254	; 0xfe
   181b8:	d251      	bcs.n	1825e <__addsf3+0x136>
   181ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   181be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   181c2:	bf08      	it	eq
   181c4:	f020 0001 	biceq.w	r0, r0, #1
   181c8:	ea40 0003 	orr.w	r0, r0, r3
   181cc:	4770      	bx	lr
   181ce:	0049      	lsls	r1, r1, #1
   181d0:	eb40 0000 	adc.w	r0, r0, r0
   181d4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   181d8:	f1a2 0201 	sub.w	r2, r2, #1
   181dc:	d1ed      	bne.n	181ba <__addsf3+0x92>
   181de:	fab0 fc80 	clz	ip, r0
   181e2:	f1ac 0c08 	sub.w	ip, ip, #8
   181e6:	ebb2 020c 	subs.w	r2, r2, ip
   181ea:	fa00 f00c 	lsl.w	r0, r0, ip
   181ee:	bfaa      	itet	ge
   181f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   181f4:	4252      	neglt	r2, r2
   181f6:	4318      	orrge	r0, r3
   181f8:	bfbc      	itt	lt
   181fa:	40d0      	lsrlt	r0, r2
   181fc:	4318      	orrlt	r0, r3
   181fe:	4770      	bx	lr
   18200:	f092 0f00 	teq	r2, #0
   18204:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18208:	bf06      	itte	eq
   1820a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1820e:	3201      	addeq	r2, #1
   18210:	3b01      	subne	r3, #1
   18212:	e7b5      	b.n	18180 <__addsf3+0x58>
   18214:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18218:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1821c:	bf18      	it	ne
   1821e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18222:	d021      	beq.n	18268 <__addsf3+0x140>
   18224:	ea92 0f03 	teq	r2, r3
   18228:	d004      	beq.n	18234 <__addsf3+0x10c>
   1822a:	f092 0f00 	teq	r2, #0
   1822e:	bf08      	it	eq
   18230:	4608      	moveq	r0, r1
   18232:	4770      	bx	lr
   18234:	ea90 0f01 	teq	r0, r1
   18238:	bf1c      	itt	ne
   1823a:	2000      	movne	r0, #0
   1823c:	4770      	bxne	lr
   1823e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18242:	d104      	bne.n	1824e <__addsf3+0x126>
   18244:	0040      	lsls	r0, r0, #1
   18246:	bf28      	it	cs
   18248:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1824c:	4770      	bx	lr
   1824e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18252:	bf3c      	itt	cc
   18254:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18258:	4770      	bxcc	lr
   1825a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1825e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18262:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18266:	4770      	bx	lr
   18268:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1826c:	bf16      	itet	ne
   1826e:	4608      	movne	r0, r1
   18270:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18274:	4601      	movne	r1, r0
   18276:	0242      	lsls	r2, r0, #9
   18278:	bf06      	itte	eq
   1827a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1827e:	ea90 0f01 	teqeq	r0, r1
   18282:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18286:	4770      	bx	lr

00018288 <__aeabi_ui2f>:
   18288:	f04f 0300 	mov.w	r3, #0
   1828c:	e004      	b.n	18298 <__aeabi_i2f+0x8>
   1828e:	bf00      	nop

00018290 <__aeabi_i2f>:
   18290:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18294:	bf48      	it	mi
   18296:	4240      	negmi	r0, r0
   18298:	ea5f 0c00 	movs.w	ip, r0
   1829c:	bf08      	it	eq
   1829e:	4770      	bxeq	lr
   182a0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   182a4:	4601      	mov	r1, r0
   182a6:	f04f 0000 	mov.w	r0, #0
   182aa:	e01c      	b.n	182e6 <__aeabi_l2f+0x2a>

000182ac <__aeabi_ul2f>:
   182ac:	ea50 0201 	orrs.w	r2, r0, r1
   182b0:	bf08      	it	eq
   182b2:	4770      	bxeq	lr
   182b4:	f04f 0300 	mov.w	r3, #0
   182b8:	e00a      	b.n	182d0 <__aeabi_l2f+0x14>
   182ba:	bf00      	nop

000182bc <__aeabi_l2f>:
   182bc:	ea50 0201 	orrs.w	r2, r0, r1
   182c0:	bf08      	it	eq
   182c2:	4770      	bxeq	lr
   182c4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   182c8:	d502      	bpl.n	182d0 <__aeabi_l2f+0x14>
   182ca:	4240      	negs	r0, r0
   182cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   182d0:	ea5f 0c01 	movs.w	ip, r1
   182d4:	bf02      	ittt	eq
   182d6:	4684      	moveq	ip, r0
   182d8:	4601      	moveq	r1, r0
   182da:	2000      	moveq	r0, #0
   182dc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   182e0:	bf08      	it	eq
   182e2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   182e6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   182ea:	fabc f28c 	clz	r2, ip
   182ee:	3a08      	subs	r2, #8
   182f0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   182f4:	db10      	blt.n	18318 <__aeabi_l2f+0x5c>
   182f6:	fa01 fc02 	lsl.w	ip, r1, r2
   182fa:	4463      	add	r3, ip
   182fc:	fa00 fc02 	lsl.w	ip, r0, r2
   18300:	f1c2 0220 	rsb	r2, r2, #32
   18304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18308:	fa20 f202 	lsr.w	r2, r0, r2
   1830c:	eb43 0002 	adc.w	r0, r3, r2
   18310:	bf08      	it	eq
   18312:	f020 0001 	biceq.w	r0, r0, #1
   18316:	4770      	bx	lr
   18318:	f102 0220 	add.w	r2, r2, #32
   1831c:	fa01 fc02 	lsl.w	ip, r1, r2
   18320:	f1c2 0220 	rsb	r2, r2, #32
   18324:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18328:	fa21 f202 	lsr.w	r2, r1, r2
   1832c:	eb43 0002 	adc.w	r0, r3, r2
   18330:	bf08      	it	eq
   18332:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18336:	4770      	bx	lr

00018338 <__aeabi_fmul>:
   18338:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1833c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18340:	bf1e      	ittt	ne
   18342:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18346:	ea92 0f0c 	teqne	r2, ip
   1834a:	ea93 0f0c 	teqne	r3, ip
   1834e:	d06f      	beq.n	18430 <__aeabi_fmul+0xf8>
   18350:	441a      	add	r2, r3
   18352:	ea80 0c01 	eor.w	ip, r0, r1
   18356:	0240      	lsls	r0, r0, #9
   18358:	bf18      	it	ne
   1835a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1835e:	d01e      	beq.n	1839e <__aeabi_fmul+0x66>
   18360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18364:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18368:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1836c:	fba0 3101 	umull	r3, r1, r0, r1
   18370:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18374:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18378:	bf3e      	ittt	cc
   1837a:	0049      	lslcc	r1, r1, #1
   1837c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18380:	005b      	lslcc	r3, r3, #1
   18382:	ea40 0001 	orr.w	r0, r0, r1
   18386:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1838a:	2afd      	cmp	r2, #253	; 0xfd
   1838c:	d81d      	bhi.n	183ca <__aeabi_fmul+0x92>
   1838e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18392:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18396:	bf08      	it	eq
   18398:	f020 0001 	biceq.w	r0, r0, #1
   1839c:	4770      	bx	lr
   1839e:	f090 0f00 	teq	r0, #0
   183a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   183a6:	bf08      	it	eq
   183a8:	0249      	lsleq	r1, r1, #9
   183aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   183ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   183b2:	3a7f      	subs	r2, #127	; 0x7f
   183b4:	bfc2      	ittt	gt
   183b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   183ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   183be:	4770      	bxgt	lr
   183c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   183c4:	f04f 0300 	mov.w	r3, #0
   183c8:	3a01      	subs	r2, #1
   183ca:	dc5d      	bgt.n	18488 <__aeabi_fmul+0x150>
   183cc:	f112 0f19 	cmn.w	r2, #25
   183d0:	bfdc      	itt	le
   183d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   183d6:	4770      	bxle	lr
   183d8:	f1c2 0200 	rsb	r2, r2, #0
   183dc:	0041      	lsls	r1, r0, #1
   183de:	fa21 f102 	lsr.w	r1, r1, r2
   183e2:	f1c2 0220 	rsb	r2, r2, #32
   183e6:	fa00 fc02 	lsl.w	ip, r0, r2
   183ea:	ea5f 0031 	movs.w	r0, r1, rrx
   183ee:	f140 0000 	adc.w	r0, r0, #0
   183f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   183f6:	bf08      	it	eq
   183f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   183fc:	4770      	bx	lr
   183fe:	f092 0f00 	teq	r2, #0
   18402:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18406:	bf02      	ittt	eq
   18408:	0040      	lsleq	r0, r0, #1
   1840a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1840e:	3a01      	subeq	r2, #1
   18410:	d0f9      	beq.n	18406 <__aeabi_fmul+0xce>
   18412:	ea40 000c 	orr.w	r0, r0, ip
   18416:	f093 0f00 	teq	r3, #0
   1841a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1841e:	bf02      	ittt	eq
   18420:	0049      	lsleq	r1, r1, #1
   18422:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18426:	3b01      	subeq	r3, #1
   18428:	d0f9      	beq.n	1841e <__aeabi_fmul+0xe6>
   1842a:	ea41 010c 	orr.w	r1, r1, ip
   1842e:	e78f      	b.n	18350 <__aeabi_fmul+0x18>
   18430:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18434:	ea92 0f0c 	teq	r2, ip
   18438:	bf18      	it	ne
   1843a:	ea93 0f0c 	teqne	r3, ip
   1843e:	d00a      	beq.n	18456 <__aeabi_fmul+0x11e>
   18440:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18444:	bf18      	it	ne
   18446:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1844a:	d1d8      	bne.n	183fe <__aeabi_fmul+0xc6>
   1844c:	ea80 0001 	eor.w	r0, r0, r1
   18450:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18454:	4770      	bx	lr
   18456:	f090 0f00 	teq	r0, #0
   1845a:	bf17      	itett	ne
   1845c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18460:	4608      	moveq	r0, r1
   18462:	f091 0f00 	teqne	r1, #0
   18466:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1846a:	d014      	beq.n	18496 <__aeabi_fmul+0x15e>
   1846c:	ea92 0f0c 	teq	r2, ip
   18470:	d101      	bne.n	18476 <__aeabi_fmul+0x13e>
   18472:	0242      	lsls	r2, r0, #9
   18474:	d10f      	bne.n	18496 <__aeabi_fmul+0x15e>
   18476:	ea93 0f0c 	teq	r3, ip
   1847a:	d103      	bne.n	18484 <__aeabi_fmul+0x14c>
   1847c:	024b      	lsls	r3, r1, #9
   1847e:	bf18      	it	ne
   18480:	4608      	movne	r0, r1
   18482:	d108      	bne.n	18496 <__aeabi_fmul+0x15e>
   18484:	ea80 0001 	eor.w	r0, r0, r1
   18488:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1848c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18494:	4770      	bx	lr
   18496:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1849a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1849e:	4770      	bx	lr

000184a0 <__aeabi_fdiv>:
   184a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   184a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   184a8:	bf1e      	ittt	ne
   184aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   184ae:	ea92 0f0c 	teqne	r2, ip
   184b2:	ea93 0f0c 	teqne	r3, ip
   184b6:	d069      	beq.n	1858c <__aeabi_fdiv+0xec>
   184b8:	eba2 0203 	sub.w	r2, r2, r3
   184bc:	ea80 0c01 	eor.w	ip, r0, r1
   184c0:	0249      	lsls	r1, r1, #9
   184c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   184c6:	d037      	beq.n	18538 <__aeabi_fdiv+0x98>
   184c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   184cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   184d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   184d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   184d8:	428b      	cmp	r3, r1
   184da:	bf38      	it	cc
   184dc:	005b      	lslcc	r3, r3, #1
   184de:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   184e2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   184e6:	428b      	cmp	r3, r1
   184e8:	bf24      	itt	cs
   184ea:	1a5b      	subcs	r3, r3, r1
   184ec:	ea40 000c 	orrcs.w	r0, r0, ip
   184f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   184f4:	bf24      	itt	cs
   184f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   184fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   184fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   18502:	bf24      	itt	cs
   18504:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18508:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1850c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18510:	bf24      	itt	cs
   18512:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   18516:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1851a:	011b      	lsls	r3, r3, #4
   1851c:	bf18      	it	ne
   1851e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   18522:	d1e0      	bne.n	184e6 <__aeabi_fdiv+0x46>
   18524:	2afd      	cmp	r2, #253	; 0xfd
   18526:	f63f af50 	bhi.w	183ca <__aeabi_fmul+0x92>
   1852a:	428b      	cmp	r3, r1
   1852c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18530:	bf08      	it	eq
   18532:	f020 0001 	biceq.w	r0, r0, #1
   18536:	4770      	bx	lr
   18538:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1853c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18540:	327f      	adds	r2, #127	; 0x7f
   18542:	bfc2      	ittt	gt
   18544:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18548:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1854c:	4770      	bxgt	lr
   1854e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18552:	f04f 0300 	mov.w	r3, #0
   18556:	3a01      	subs	r2, #1
   18558:	e737      	b.n	183ca <__aeabi_fmul+0x92>
   1855a:	f092 0f00 	teq	r2, #0
   1855e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18562:	bf02      	ittt	eq
   18564:	0040      	lsleq	r0, r0, #1
   18566:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1856a:	3a01      	subeq	r2, #1
   1856c:	d0f9      	beq.n	18562 <__aeabi_fdiv+0xc2>
   1856e:	ea40 000c 	orr.w	r0, r0, ip
   18572:	f093 0f00 	teq	r3, #0
   18576:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1857a:	bf02      	ittt	eq
   1857c:	0049      	lsleq	r1, r1, #1
   1857e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18582:	3b01      	subeq	r3, #1
   18584:	d0f9      	beq.n	1857a <__aeabi_fdiv+0xda>
   18586:	ea41 010c 	orr.w	r1, r1, ip
   1858a:	e795      	b.n	184b8 <__aeabi_fdiv+0x18>
   1858c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18590:	ea92 0f0c 	teq	r2, ip
   18594:	d108      	bne.n	185a8 <__aeabi_fdiv+0x108>
   18596:	0242      	lsls	r2, r0, #9
   18598:	f47f af7d 	bne.w	18496 <__aeabi_fmul+0x15e>
   1859c:	ea93 0f0c 	teq	r3, ip
   185a0:	f47f af70 	bne.w	18484 <__aeabi_fmul+0x14c>
   185a4:	4608      	mov	r0, r1
   185a6:	e776      	b.n	18496 <__aeabi_fmul+0x15e>
   185a8:	ea93 0f0c 	teq	r3, ip
   185ac:	d104      	bne.n	185b8 <__aeabi_fdiv+0x118>
   185ae:	024b      	lsls	r3, r1, #9
   185b0:	f43f af4c 	beq.w	1844c <__aeabi_fmul+0x114>
   185b4:	4608      	mov	r0, r1
   185b6:	e76e      	b.n	18496 <__aeabi_fmul+0x15e>
   185b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   185bc:	bf18      	it	ne
   185be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   185c2:	d1ca      	bne.n	1855a <__aeabi_fdiv+0xba>
   185c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   185c8:	f47f af5c 	bne.w	18484 <__aeabi_fmul+0x14c>
   185cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   185d0:	f47f af3c 	bne.w	1844c <__aeabi_fmul+0x114>
   185d4:	e75f      	b.n	18496 <__aeabi_fmul+0x15e>
   185d6:	bf00      	nop

000185d8 <__gesf2>:
   185d8:	f04f 3cff 	mov.w	ip, #4294967295
   185dc:	e006      	b.n	185ec <__cmpsf2+0x4>
   185de:	bf00      	nop

000185e0 <__lesf2>:
   185e0:	f04f 0c01 	mov.w	ip, #1
   185e4:	e002      	b.n	185ec <__cmpsf2+0x4>
   185e6:	bf00      	nop

000185e8 <__cmpsf2>:
   185e8:	f04f 0c01 	mov.w	ip, #1
   185ec:	f84d cd04 	str.w	ip, [sp, #-4]!
   185f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   185f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   185f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   185fc:	bf18      	it	ne
   185fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18602:	d011      	beq.n	18628 <__cmpsf2+0x40>
   18604:	b001      	add	sp, #4
   18606:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1860a:	bf18      	it	ne
   1860c:	ea90 0f01 	teqne	r0, r1
   18610:	bf58      	it	pl
   18612:	ebb2 0003 	subspl.w	r0, r2, r3
   18616:	bf88      	it	hi
   18618:	17c8      	asrhi	r0, r1, #31
   1861a:	bf38      	it	cc
   1861c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18620:	bf18      	it	ne
   18622:	f040 0001 	orrne.w	r0, r0, #1
   18626:	4770      	bx	lr
   18628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1862c:	d102      	bne.n	18634 <__cmpsf2+0x4c>
   1862e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   18632:	d105      	bne.n	18640 <__cmpsf2+0x58>
   18634:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18638:	d1e4      	bne.n	18604 <__cmpsf2+0x1c>
   1863a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1863e:	d0e1      	beq.n	18604 <__cmpsf2+0x1c>
   18640:	f85d 0b04 	ldr.w	r0, [sp], #4
   18644:	4770      	bx	lr
   18646:	bf00      	nop

00018648 <__aeabi_cfrcmple>:
   18648:	4684      	mov	ip, r0
   1864a:	4608      	mov	r0, r1
   1864c:	4661      	mov	r1, ip
   1864e:	e7ff      	b.n	18650 <__aeabi_cfcmpeq>

00018650 <__aeabi_cfcmpeq>:
   18650:	b50f      	push	{r0, r1, r2, r3, lr}
   18652:	f7ff ffc9 	bl	185e8 <__cmpsf2>
   18656:	2800      	cmp	r0, #0
   18658:	bf48      	it	mi
   1865a:	f110 0f00 	cmnmi.w	r0, #0
   1865e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018660 <__aeabi_fcmpeq>:
   18660:	f84d ed08 	str.w	lr, [sp, #-8]!
   18664:	f7ff fff4 	bl	18650 <__aeabi_cfcmpeq>
   18668:	bf0c      	ite	eq
   1866a:	2001      	moveq	r0, #1
   1866c:	2000      	movne	r0, #0
   1866e:	f85d fb08 	ldr.w	pc, [sp], #8
   18672:	bf00      	nop

00018674 <__aeabi_fcmplt>:
   18674:	f84d ed08 	str.w	lr, [sp, #-8]!
   18678:	f7ff ffea 	bl	18650 <__aeabi_cfcmpeq>
   1867c:	bf34      	ite	cc
   1867e:	2001      	movcc	r0, #1
   18680:	2000      	movcs	r0, #0
   18682:	f85d fb08 	ldr.w	pc, [sp], #8
   18686:	bf00      	nop

00018688 <__aeabi_fcmple>:
   18688:	f84d ed08 	str.w	lr, [sp, #-8]!
   1868c:	f7ff ffe0 	bl	18650 <__aeabi_cfcmpeq>
   18690:	bf94      	ite	ls
   18692:	2001      	movls	r0, #1
   18694:	2000      	movhi	r0, #0
   18696:	f85d fb08 	ldr.w	pc, [sp], #8
   1869a:	bf00      	nop

0001869c <__aeabi_fcmpge>:
   1869c:	f84d ed08 	str.w	lr, [sp, #-8]!
   186a0:	f7ff ffd2 	bl	18648 <__aeabi_cfrcmple>
   186a4:	bf94      	ite	ls
   186a6:	2001      	movls	r0, #1
   186a8:	2000      	movhi	r0, #0
   186aa:	f85d fb08 	ldr.w	pc, [sp], #8
   186ae:	bf00      	nop

000186b0 <__aeabi_fcmpgt>:
   186b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   186b4:	f7ff ffc8 	bl	18648 <__aeabi_cfrcmple>
   186b8:	bf34      	ite	cc
   186ba:	2001      	movcc	r0, #1
   186bc:	2000      	movcs	r0, #0
   186be:	f85d fb08 	ldr.w	pc, [sp], #8
   186c2:	bf00      	nop

000186c4 <__aeabi_f2iz>:
   186c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   186c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   186cc:	d30f      	bcc.n	186ee <__aeabi_f2iz+0x2a>
   186ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
   186d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   186d6:	d90d      	bls.n	186f4 <__aeabi_f2iz+0x30>
   186d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   186dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   186e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   186e4:	fa23 f002 	lsr.w	r0, r3, r2
   186e8:	bf18      	it	ne
   186ea:	4240      	negne	r0, r0
   186ec:	4770      	bx	lr
   186ee:	f04f 0000 	mov.w	r0, #0
   186f2:	4770      	bx	lr
   186f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   186f8:	d101      	bne.n	186fe <__aeabi_f2iz+0x3a>
   186fa:	0242      	lsls	r2, r0, #9
   186fc:	d105      	bne.n	1870a <__aeabi_f2iz+0x46>
   186fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   18702:	bf08      	it	eq
   18704:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18708:	4770      	bx	lr
   1870a:	f04f 0000 	mov.w	r0, #0
   1870e:	4770      	bx	lr

00018710 <memcpy>:
   18710:	2a0f      	cmp	r2, #15
   18712:	b4f0      	push	{r4, r5, r6, r7}
   18714:	d945      	bls.n	187a2 <memcpy+0x92>
   18716:	ea40 0301 	orr.w	r3, r0, r1
   1871a:	079b      	lsls	r3, r3, #30
   1871c:	d145      	bne.n	187aa <memcpy+0x9a>
   1871e:	f1a2 0710 	sub.w	r7, r2, #16
   18722:	460c      	mov	r4, r1
   18724:	4603      	mov	r3, r0
   18726:	093f      	lsrs	r7, r7, #4
   18728:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   1872c:	3610      	adds	r6, #16
   1872e:	6825      	ldr	r5, [r4, #0]
   18730:	3310      	adds	r3, #16
   18732:	3410      	adds	r4, #16
   18734:	f843 5c10 	str.w	r5, [r3, #-16]
   18738:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   1873c:	f843 5c0c 	str.w	r5, [r3, #-12]
   18740:	f854 5c08 	ldr.w	r5, [r4, #-8]
   18744:	f843 5c08 	str.w	r5, [r3, #-8]
   18748:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1874c:	f843 5c04 	str.w	r5, [r3, #-4]
   18750:	42b3      	cmp	r3, r6
   18752:	d1ec      	bne.n	1872e <memcpy+0x1e>
   18754:	1c7b      	adds	r3, r7, #1
   18756:	f002 0c0f 	and.w	ip, r2, #15
   1875a:	f1bc 0f03 	cmp.w	ip, #3
   1875e:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18762:	4419      	add	r1, r3
   18764:	4403      	add	r3, r0
   18766:	d922      	bls.n	187ae <memcpy+0x9e>
   18768:	460e      	mov	r6, r1
   1876a:	461d      	mov	r5, r3
   1876c:	4664      	mov	r4, ip
   1876e:	f856 7b04 	ldr.w	r7, [r6], #4
   18772:	3c04      	subs	r4, #4
   18774:	2c03      	cmp	r4, #3
   18776:	f845 7b04 	str.w	r7, [r5], #4
   1877a:	d8f8      	bhi.n	1876e <memcpy+0x5e>
   1877c:	f1ac 0404 	sub.w	r4, ip, #4
   18780:	f002 0203 	and.w	r2, r2, #3
   18784:	f024 0403 	bic.w	r4, r4, #3
   18788:	3404      	adds	r4, #4
   1878a:	4423      	add	r3, r4
   1878c:	4421      	add	r1, r4
   1878e:	b132      	cbz	r2, 1879e <memcpy+0x8e>
   18790:	440a      	add	r2, r1
   18792:	f811 4b01 	ldrb.w	r4, [r1], #1
   18796:	4291      	cmp	r1, r2
   18798:	f803 4b01 	strb.w	r4, [r3], #1
   1879c:	d1f9      	bne.n	18792 <memcpy+0x82>
   1879e:	bcf0      	pop	{r4, r5, r6, r7}
   187a0:	4770      	bx	lr
   187a2:	4603      	mov	r3, r0
   187a4:	2a00      	cmp	r2, #0
   187a6:	d1f3      	bne.n	18790 <memcpy+0x80>
   187a8:	e7f9      	b.n	1879e <memcpy+0x8e>
   187aa:	4603      	mov	r3, r0
   187ac:	e7f0      	b.n	18790 <memcpy+0x80>
   187ae:	4662      	mov	r2, ip
   187b0:	2a00      	cmp	r2, #0
   187b2:	d1ed      	bne.n	18790 <memcpy+0x80>
   187b4:	e7f3      	b.n	1879e <memcpy+0x8e>
   187b6:	bf00      	nop

000187b8 <memset>:
   187b8:	0783      	lsls	r3, r0, #30
   187ba:	b4f0      	push	{r4, r5, r6, r7}
   187bc:	d048      	beq.n	18850 <memset+0x98>
   187be:	1e54      	subs	r4, r2, #1
   187c0:	2a00      	cmp	r2, #0
   187c2:	d043      	beq.n	1884c <memset+0x94>
   187c4:	b2cd      	uxtb	r5, r1
   187c6:	4603      	mov	r3, r0
   187c8:	e002      	b.n	187d0 <memset+0x18>
   187ca:	2c00      	cmp	r4, #0
   187cc:	d03e      	beq.n	1884c <memset+0x94>
   187ce:	4614      	mov	r4, r2
   187d0:	f803 5b01 	strb.w	r5, [r3], #1
   187d4:	f013 0f03 	tst.w	r3, #3
   187d8:	f104 32ff 	add.w	r2, r4, #4294967295
   187dc:	d1f5      	bne.n	187ca <memset+0x12>
   187de:	2c03      	cmp	r4, #3
   187e0:	d92d      	bls.n	1883e <memset+0x86>
   187e2:	b2cd      	uxtb	r5, r1
   187e4:	2c0f      	cmp	r4, #15
   187e6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   187ea:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   187ee:	d918      	bls.n	18822 <memset+0x6a>
   187f0:	f1a4 0710 	sub.w	r7, r4, #16
   187f4:	f103 0610 	add.w	r6, r3, #16
   187f8:	461a      	mov	r2, r3
   187fa:	093f      	lsrs	r7, r7, #4
   187fc:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   18800:	6015      	str	r5, [r2, #0]
   18802:	3210      	adds	r2, #16
   18804:	f842 5c0c 	str.w	r5, [r2, #-12]
   18808:	f842 5c08 	str.w	r5, [r2, #-8]
   1880c:	f842 5c04 	str.w	r5, [r2, #-4]
   18810:	42b2      	cmp	r2, r6
   18812:	d1f5      	bne.n	18800 <memset+0x48>
   18814:	f004 040f 	and.w	r4, r4, #15
   18818:	3701      	adds	r7, #1
   1881a:	2c03      	cmp	r4, #3
   1881c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18820:	d90d      	bls.n	1883e <memset+0x86>
   18822:	461e      	mov	r6, r3
   18824:	4622      	mov	r2, r4
   18826:	3a04      	subs	r2, #4
   18828:	f846 5b04 	str.w	r5, [r6], #4
   1882c:	2a03      	cmp	r2, #3
   1882e:	d8fa      	bhi.n	18826 <memset+0x6e>
   18830:	1f22      	subs	r2, r4, #4
   18832:	f004 0403 	and.w	r4, r4, #3
   18836:	f022 0203 	bic.w	r2, r2, #3
   1883a:	3204      	adds	r2, #4
   1883c:	4413      	add	r3, r2
   1883e:	b12c      	cbz	r4, 1884c <memset+0x94>
   18840:	b2c9      	uxtb	r1, r1
   18842:	441c      	add	r4, r3
   18844:	f803 1b01 	strb.w	r1, [r3], #1
   18848:	42a3      	cmp	r3, r4
   1884a:	d1fb      	bne.n	18844 <memset+0x8c>
   1884c:	bcf0      	pop	{r4, r5, r6, r7}
   1884e:	4770      	bx	lr
   18850:	4614      	mov	r4, r2
   18852:	4603      	mov	r3, r0
   18854:	e7c3      	b.n	187de <memset+0x26>
   18856:	bf00      	nop

00018858 <strncpy>:
   18858:	ea40 0301 	orr.w	r3, r0, r1
   1885c:	079b      	lsls	r3, r3, #30
   1885e:	b470      	push	{r4, r5, r6}
   18860:	d12b      	bne.n	188ba <strncpy+0x62>
   18862:	2a03      	cmp	r2, #3
   18864:	bf84      	itt	hi
   18866:	460b      	movhi	r3, r1
   18868:	4605      	movhi	r5, r0
   1886a:	d926      	bls.n	188ba <strncpy+0x62>
   1886c:	4619      	mov	r1, r3
   1886e:	f853 4b04 	ldr.w	r4, [r3], #4
   18872:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18876:	ea26 0604 	bic.w	r6, r6, r4
   1887a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   1887e:	d105      	bne.n	1888c <strncpy+0x34>
   18880:	3a04      	subs	r2, #4
   18882:	f845 4b04 	str.w	r4, [r5], #4
   18886:	2a03      	cmp	r2, #3
   18888:	4619      	mov	r1, r3
   1888a:	d8ef      	bhi.n	1886c <strncpy+0x14>
   1888c:	b19a      	cbz	r2, 188b6 <strncpy+0x5e>
   1888e:	780c      	ldrb	r4, [r1, #0]
   18890:	3a01      	subs	r2, #1
   18892:	1c6b      	adds	r3, r5, #1
   18894:	702c      	strb	r4, [r5, #0]
   18896:	b13c      	cbz	r4, 188a8 <strncpy+0x50>
   18898:	b16a      	cbz	r2, 188b6 <strncpy+0x5e>
   1889a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1889e:	3a01      	subs	r2, #1
   188a0:	f803 4b01 	strb.w	r4, [r3], #1
   188a4:	2c00      	cmp	r4, #0
   188a6:	d1f7      	bne.n	18898 <strncpy+0x40>
   188a8:	b12a      	cbz	r2, 188b6 <strncpy+0x5e>
   188aa:	441a      	add	r2, r3
   188ac:	2100      	movs	r1, #0
   188ae:	f803 1b01 	strb.w	r1, [r3], #1
   188b2:	4293      	cmp	r3, r2
   188b4:	d1fb      	bne.n	188ae <strncpy+0x56>
   188b6:	bc70      	pop	{r4, r5, r6}
   188b8:	4770      	bx	lr
   188ba:	4605      	mov	r5, r0
   188bc:	e7e6      	b.n	1888c <strncpy+0x34>
   188be:	bf00      	nop

000188c0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   188c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   188c2:	e003      	b.n	188cc <LoopCopyDataInit>

000188c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   188c4:	4b0a      	ldr	r3, [pc, #40]	; (188f0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   188c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   188c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   188ca:	3104      	adds	r1, #4

000188cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   188cc:	4809      	ldr	r0, [pc, #36]	; (188f4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   188ce:	4b0a      	ldr	r3, [pc, #40]	; (188f8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   188d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   188d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   188d4:	d3f6      	bcc.n	188c4 <CopyDataInit>
	ldr	r2, =_sbss
   188d6:	4a09      	ldr	r2, [pc, #36]	; (188fc <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   188d8:	e002      	b.n	188e0 <LoopFillZerobss>

000188da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   188da:	2300      	movs	r3, #0
	str	r3, [r2], #4
   188dc:	f842 3b04 	str.w	r3, [r2], #4

000188e0 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   188e0:	4b07      	ldr	r3, [pc, #28]	; (18900 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   188e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
   188e4:	d3f9      	bcc.n	188da <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   188e6:	f7e7 fd29 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   188ea:	f7fe fe87 	bl	175fc <main>
	bx	lr    
   188ee:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   188f0:	000189e4 	.word	0x000189e4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   188f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   188f8:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   188fc:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18900:	2004cba4 	.word	0x2004cba4

00018904 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18904:	e7fe      	b.n	18904 <ADC1_2_IRQHandler>
   18906:	0000      	movs	r0, r0
   18908:	454c4449 	.word	0x454c4449
   1890c:	00000000 	.word	0x00000000

00018910 <ulKernelPriority>:
   18910:	0000007f                                ....

00018914 <heapSTRUCT_SIZE>:
   18914:	00010010                                         ..

00018916 <version>:
   18916:	3d5a0001                                         ..

00018918 <utm_east0>:
   18918:	00093d5a                                Z=..

0001891c <utm_north0>:
   1891c:	005875e6                                .uX.

00018920 <climb_pgain>:
   18920:	bcf5c28f                                ....

00018924 <climb_igain>:
   18924:	3dcccccd                                ...=

00018928 <level_gaz>:
   18928:	3e9eb852                                R..>

0001892c <nav_east0>:
   1892c:	00093d5a                                Z=..

00018930 <nav_north0>:
   18930:	005875e6                                .uX.

00018934 <nb_waypoint>:
   18934:	00000007 33323130 37363534 42413938     ....0123456789AB
   18944:	46454443                                CDEF

00018948 <failsafe>:
	...
   1895c:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   1896c:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   1897c:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   1898c:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   1899c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   189ac:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   189bc:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   189cc:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   189dc:	6e617672 00000074                       rvant...
