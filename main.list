
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 80 01 20 91 85 01 00 d5 85 01 00 d5 85 01 00     ... ............
      10:	d5 85 01 00 d5 85 01 00 d5 85 01 00 00 00 00 00     ................
	...
      2c:	75 58 00 00 d5 85 01 00 00 00 00 00 81 59 00 00     uX...........Y..
      3c:	bd 59 00 00 d5 85 01 00 d5 85 01 00 d5 85 01 00     .Y..............
      4c:	d5 85 01 00 d5 85 01 00 d5 85 01 00 d5 85 01 00     ................
      5c:	d5 85 01 00 d5 85 01 00 d5 85 01 00 d5 85 01 00     ................
      6c:	d5 85 01 00 d5 85 01 00 d5 85 01 00 d5 85 01 00     ................
      7c:	d5 85 01 00 d5 85 01 00 d5 85 01 00 d5 85 01 00     ................
      8c:	d5 85 01 00 d5 85 01 00 d5 85 01 00 d5 85 01 00     ................
      9c:	d5 85 01 00 d5 85 01 00 d5 85 01 00 d5 85 01 00     ................
      ac:	d5 85 01 00 d5 85 01 00 d5 85 01 00 d5 85 01 00     ................
      bc:	d5 85 01 00 d5 85 01 00 d5 85 01 00 d5 85 01 00     ................
      cc:	d5 85 01 00 d5 85 01 00 d5 85 01 00 d5 85 01 00     ................
      dc:	d5 85 01 00 d5 85 01 00 d5 85 01 00 d5 85 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018730 	.word	0x00018730
     6d0:	20000000 	.word	0x20000000
     6d4:	20000488 	.word	0x20000488
     6d8:	20000488 	.word	0x20000488
     6dc:	2000b768 	.word	0x2000b768

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fb09 	bl	5a10 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 43f4 	movw	r3, #1268	; 0x4f4
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fc48 	bl	3ce0 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fc43 	bl	3ce0 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 43f8 	movw	r3, #1272	; 0x4f8
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 4288 	movw	r2, #1160	; 0x488
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fc23 	bl	3cf8 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fc62 	bl	3db8 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fc0c 	bl	3d48 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fbfc 	bl	3d48 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 43f4 	movw	r3, #1268	; 0x4f4
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fbef 	bl	3d48 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 43e0 	movw	r3, #1248	; 0x4e0
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fc10 	bl	3db8 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fc07 	bl	3db8 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 4288 	movw	r2, #1160	; 0x488
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fb86 	bl	3cf8 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 43e0 	movw	r3, #1248	; 0x4e0
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fc55 	bl	4eb4 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 5300 	movw	r3, #1280	; 0x500
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 5304 	movw	r3, #1284	; 0x504
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 5304 	movw	r3, #1284	; 0x504
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 5304 	movw	r3, #1284	; 0x504
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 43dc 	movw	r3, #1244	; 0x4dc
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fb7a 	bl	3db8 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fb71 	bl	3db8 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 4288 	movw	r2, #1160	; 0x488
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 faec 	bl	3cf8 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 5304 	movw	r3, #1284	; 0x504
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 5300 	movw	r3, #1280	; 0x500
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 43f8 	movw	r3, #1272	; 0x4f8
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 4288 	movw	r2, #1160	; 0x488
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 4288 	movw	r2, #1160	; 0x488
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 43f4 	movw	r3, #1268	; 0x4f4
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 43f4 	movw	r3, #1268	; 0x4f4
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 4288 	movw	r2, #1160	; 0x488
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fa23 	bl	3ca0 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 40b0 	movw	r0, #1200	; 0x4b0
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fa17 	bl	3ca0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 40c4 	movw	r0, #1220	; 0x4c4
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fa11 	bl	3ca0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 40e0 	movw	r0, #1248	; 0x4e0
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fa0b 	bl	3ca0 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 43d8 	movw	r3, #1240	; 0x4d8
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 42b0 	movw	r2, #1200	; 0x4b0
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 43dc 	movw	r3, #1244	; 0x4dc
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 42c4 	movw	r2, #1220	; 0x4c4
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fa75 	bl	3db8 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 40e0 	movw	r0, #1248	; 0x4e0
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fa0c 	bl	3cf8 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );
    290e:	f240 5008 	movw	r0, #1288	; 0x508
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f001 f9c3 	bl	3ca0 <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    291a:	2300      	movs	r3, #0
    291c:	607b      	str	r3, [r7, #4]
    291e:	e00f      	b.n	2940 <prvInitialiseEventLists+0x38>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    2920:	687a      	ldr	r2, [r7, #4]
    2922:	4613      	mov	r3, r2
    2924:	009b      	lsls	r3, r3, #2
    2926:	4413      	add	r3, r2
    2928:	009b      	lsls	r3, r3, #2
    292a:	f240 521c 	movw	r2, #1308	; 0x51c
    292e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2932:	4413      	add	r3, r2
    2934:	4618      	mov	r0, r3
    2936:	f001 f9b3 	bl	3ca0 <vListInitialise>
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	3301      	adds	r3, #1
    293e:	607b      	str	r3, [r7, #4]
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	2b00      	cmp	r3, #0
    2944:	ddec      	ble.n	2920 <prvInitialiseEventLists+0x18>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }
}
    2946:	3708      	adds	r7, #8
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}

0000294c <xCompareFunction>:


static portBASE_TYPE xCompareFunction( const struct timeStamp t1, const struct timeStamp t2 )
{
    294c:	b490      	push	{r4, r7}
    294e:	b084      	sub	sp, #16
    2950:	af00      	add	r7, sp, #0
    2952:	463c      	mov	r4, r7
    2954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xSlackTime < t2.xSlackTime )
    2958:	683a      	ldr	r2, [r7, #0]
    295a:	69bb      	ldr	r3, [r7, #24]
    295c:	429a      	cmp	r2, r3
    295e:	d201      	bcs.n	2964 <xCompareFunction+0x18>
    {
        return pdTRUE;
    2960:	2301      	movs	r3, #1
    2962:	e014      	b.n	298e <xCompareFunction+0x42>
    }
    else if( t1.xSlackTime == t2.xSlackTime )
    2964:	683a      	ldr	r2, [r7, #0]
    2966:	69bb      	ldr	r3, [r7, #24]
    2968:	429a      	cmp	r2, r3
    296a:	d10f      	bne.n	298c <xCompareFunction+0x40>
    {
        if( t1.xTime < t2.xTime )
    296c:	687a      	ldr	r2, [r7, #4]
    296e:	69fb      	ldr	r3, [r7, #28]
    2970:	429a      	cmp	r2, r3
    2972:	d201      	bcs.n	2978 <xCompareFunction+0x2c>
        {
            return pdTRUE;
    2974:	2301      	movs	r3, #1
    2976:	e00a      	b.n	298e <xCompareFunction+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2978:	687a      	ldr	r2, [r7, #4]
    297a:	69fb      	ldr	r3, [r7, #28]
    297c:	429a      	cmp	r2, r3
    297e:	d105      	bne.n	298c <xCompareFunction+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2980:	68fa      	ldr	r2, [r7, #12]
    2982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2984:	429a      	cmp	r2, r3
    2986:	da01      	bge.n	298c <xCompareFunction+0x40>
            {
                return pdTRUE;
    2988:	2301      	movs	r3, #1
    298a:	e000      	b.n	298e <xCompareFunction+0x42>
            }
        }
    }

    return pdFALSE;
    298c:	2300      	movs	r3, #0
}
    298e:	4618      	mov	r0, r3
    2990:	3710      	adds	r7, #16
    2992:	46bd      	mov	sp, r7
    2994:	bc90      	pop	{r4, r7}
    2996:	4770      	bx	lr

00002998 <xEventGetpxSource>:
    return pdTRUE;
}
*/

xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2998:	b480      	push	{r7}
    299a:	b083      	sub	sp, #12
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	681b      	ldr	r3, [r3, #0]
}
    29a4:	4618      	mov	r0, r3
    29a6:	370c      	adds	r7, #12
    29a8:	46bd      	mov	sp, r7
    29aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ae:	4770      	bx	lr

000029b0 <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    29b0:	b480      	push	{r7}
    29b2:	b083      	sub	sp, #12
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	685b      	ldr	r3, [r3, #4]
}
    29bc:	4618      	mov	r0, r3
    29be:	370c      	adds	r7, #12
    29c0:	46bd      	mov	sp, r7
    29c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c6:	4770      	bx	lr

000029c8 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    29c8:	b490      	push	{r4, r7}
    29ca:	b082      	sub	sp, #8
    29cc:	af00      	add	r7, sp, #0
    29ce:	6078      	str	r0, [r7, #4]
    29d0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    29d2:	687a      	ldr	r2, [r7, #4]
    29d4:	683b      	ldr	r3, [r7, #0]
    29d6:	4614      	mov	r4, r2
    29d8:	3308      	adds	r3, #8
    29da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29e0:	6878      	ldr	r0, [r7, #4]
    29e2:	3708      	adds	r7, #8
    29e4:	46bd      	mov	sp, r7
    29e6:	bc90      	pop	{r4, r7}
    29e8:	4770      	bx	lr
    29ea:	bf00      	nop

000029ec <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29ec:	b490      	push	{r4, r7}
    29ee:	b082      	sub	sp, #8
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
    29f4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29f6:	687a      	ldr	r2, [r7, #4]
    29f8:	683b      	ldr	r3, [r7, #0]
    29fa:	4614      	mov	r4, r2
    29fc:	332c      	adds	r3, #44	; 0x2c
    29fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2a04:	6878      	ldr	r0, [r7, #4]
    2a06:	3708      	adds	r7, #8
    2a08:	46bd      	mov	sp, r7
    2a0a:	bc90      	pop	{r4, r7}
    2a0c:	4770      	bx	lr
    2a0e:	bf00      	nop

00002a10 <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b086      	sub	sp, #24
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	617b      	str	r3, [r7, #20]
    portTickType xDestxLet = xTaskGetxLet(pxEvent->pxDestination);
    2a1c:	697b      	ldr	r3, [r7, #20]
    2a1e:	685b      	ldr	r3, [r3, #4]
    2a20:	4618      	mov	r0, r3
    2a22:	f002 fed5 	bl	57d0 <xTaskGetxLet>
    2a26:	6138      	str	r0, [r7, #16]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2a28:	697b      	ldr	r3, [r7, #20]
    2a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a2c:	60fb      	str	r3, [r7, #12]

    /* set the xSlackTime of this event */
    portTickType xCurrentTime = xTaskGetTickCount();
    2a2e:	f002 fa41 	bl	4eb4 <xTaskGetTickCount>
    2a32:	60b8      	str	r0, [r7, #8]
    /* LST is too complicated to be implemented in embedded system where computing resources are precious */
    //pxEvent->xTimeStamp.xSlackTime = xDeadline - ( xCurrentTime + xDestxLet );
    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xSlackTime = xDeadline ;
    2a34:	697b      	ldr	r3, [r7, #20]
    2a36:	68fa      	ldr	r2, [r7, #12]
    2a38:	609a      	str	r2, [r3, #8]


    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2a3a:	697b      	ldr	r3, [r7, #20]
    2a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a3e:	2b01      	cmp	r3, #1
    2a40:	d103      	bne.n	2a4a <vEventSetxTimeStamp+0x3a>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2a42:	697b      	ldr	r3, [r7, #20]
    2a44:	68fa      	ldr	r2, [r7, #12]
    2a46:	60da      	str	r2, [r3, #12]
    2a48:	e003      	b.n	2a52 <vEventSetxTimeStamp+0x42>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2a4a:	697b      	ldr	r3, [r7, #20]
    2a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2a4e:	697b      	ldr	r3, [r7, #20]
    2a50:	60da      	str	r2, [r3, #12]
    }


    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2a52:	697b      	ldr	r3, [r7, #20]
    2a54:	2200      	movs	r2, #0
    2a56:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2a58:	f240 5330 	movw	r3, #1328	; 0x530
    2a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a60:	681b      	ldr	r3, [r3, #0]
    2a62:	461a      	mov	r2, r3
    2a64:	697b      	ldr	r3, [r7, #20]
    2a66:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2a68:	f240 5330 	movw	r3, #1328	; 0x530
    2a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a70:	681b      	ldr	r3, [r3, #0]
    2a72:	1c5a      	adds	r2, r3, #1
    2a74:	f240 5330 	movw	r3, #1328	; 0x530
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	601a      	str	r2, [r3, #0]
}
    2a7e:	3718      	adds	r7, #24
    2a80:	46bd      	mov	sp, r7
    2a82:	bd80      	pop	{r7, pc}

00002a84 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2a84:	b084      	sub	sp, #16
    2a86:	b490      	push	{r4, r7}
    2a88:	b082      	sub	sp, #8
    2a8a:	af00      	add	r7, sp, #0
    2a8c:	6078      	str	r0, [r7, #4]
    2a8e:	f107 0014 	add.w	r0, r7, #20
    2a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2a96:	687b      	ldr	r3, [r7, #4]
    2a98:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2a9c:	f107 0314 	add.w	r3, r7, #20
    2aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2aa6:	3708      	adds	r7, #8
    2aa8:	46bd      	mov	sp, r7
    2aaa:	bc90      	pop	{r4, r7}
    2aac:	b004      	add	sp, #16
    2aae:	4770      	bx	lr

00002ab0 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2ab0:	b480      	push	{r7}
    2ab2:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2ab4:	f240 531c 	movw	r3, #1308	; 0x51c
    2ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2abc:	4618      	mov	r0, r3
    2abe:	46bd      	mov	sp, r7
    2ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac4:	4770      	bx	lr
    2ac6:	bf00      	nop

00002ac8 <prvEventListGenericInsert>:
}

*/

static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2ac8:	b590      	push	{r4, r7, lr}
    2aca:	b091      	sub	sp, #68	; 0x44
    2acc:	af04      	add	r7, sp, #16
    2ace:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2ad0:	f240 5308 	movw	r3, #1288	; 0x508
    2ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ad8:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	68db      	ldr	r3, [r3, #12]
    2ade:	f107 0208 	add.w	r2, r7, #8
    2ae2:	4610      	mov	r0, r2
    2ae4:	4619      	mov	r1, r3
    2ae6:	f7ff ff6f 	bl	29c8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2aea:	68fb      	ldr	r3, [r7, #12]
    2aec:	f1b3 3fff 	cmp.w	r3, #4294967295
    2af0:	d103      	bne.n	2afa <prvEventListGenericInsert+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2af4:	691b      	ldr	r3, [r3, #16]
    2af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2af8:	e021      	b.n	2b3e <prvEventListGenericInsert+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2afa:	f002 ff0f 	bl	591c <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b00:	3308      	adds	r3, #8
    2b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b04:	e002      	b.n	2b0c <prvEventListGenericInsert+0x44>
    2b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b08:	685b      	ldr	r3, [r3, #4]
    2b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b0e:	685b      	ldr	r3, [r3, #4]
    2b10:	68db      	ldr	r3, [r3, #12]
    2b12:	f107 0218 	add.w	r2, r7, #24
    2b16:	4610      	mov	r0, r2
    2b18:	4619      	mov	r1, r3
    2b1a:	f7ff ff55 	bl	29c8 <xEventGetxTimeStamp>
    2b1e:	466c      	mov	r4, sp
    2b20:	f107 0308 	add.w	r3, r7, #8
    2b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2b2a:	f107 0318 	add.w	r3, r7, #24
    2b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b30:	f7ff ff0c 	bl	294c <xCompareFunction>
    2b34:	4603      	mov	r3, r0
    2b36:	2b00      	cmp	r3, #0
    2b38:	d1e5      	bne.n	2b06 <prvEventListGenericInsert+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2b3a:	f002 ff05 	bl	5948 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b40:	685a      	ldr	r2, [r3, #4]
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	685b      	ldr	r3, [r3, #4]
    2b4a:	687a      	ldr	r2, [r7, #4]
    2b4c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2b52:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b56:	687a      	ldr	r2, [r7, #4]
    2b58:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2b5e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	1c5a      	adds	r2, r3, #1
    2b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b68:	601a      	str	r2, [r3, #0]
}
    2b6a:	3734      	adds	r7, #52	; 0x34
    2b6c:	46bd      	mov	sp, r7
    2b6e:	bd90      	pop	{r4, r7, pc}

00002b70 <vListIntialiseEventItem>:



static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2b70:	b480      	push	{r7}
    2b72:	b083      	sub	sp, #12
    2b74:	af00      	add	r7, sp, #0
    2b76:	6078      	str	r0, [r7, #4]
    2b78:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2b7a:	683b      	ldr	r3, [r7, #0]
    2b7c:	687a      	ldr	r2, [r7, #4]
    2b7e:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2b80:	370c      	adds	r7, #12
    2b82:	46bd      	mov	sp, r7
    2b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b88:	4770      	bx	lr
    2b8a:	bf00      	nop

00002b8c <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2b8c:	b084      	sub	sp, #16
    2b8e:	b580      	push	{r7, lr}
    2b90:	b088      	sub	sp, #32
    2b92:	af02      	add	r7, sp, #8
    2b94:	6078      	str	r0, [r7, #4]
    2b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
    2b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2b9e:	2300      	movs	r3, #0
    2ba0:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2ba2:	f002 febb 	bl	591c <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2ba6:	f240 0328 	movw	r3, #40	; 0x28
    2baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bae:	681b      	ldr	r3, [r3, #0]
    2bb0:	2b01      	cmp	r3, #1
    2bb2:	d12d      	bne.n	2c10 <vEventGenericCreate+0x84>
    {
        IS_FIRST_EVENT = 0;
    2bb4:	f240 0328 	movw	r3, #40	; 0x28
    2bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bbc:	2200      	movs	r2, #0
    2bbe:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2bc0:	f7ff fea2 	bl	2908 <prvInitialiseEventLists>

        // Creating an End FLag Event and insert into the end of xEventList.
        eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2bc4:	203c      	movs	r0, #60	; 0x3c
    2bc6:	f002 ff23 	bl	5a10 <pvPortMalloc>
    2bca:	6138      	str	r0, [r7, #16]
        if( pxEndFlagEvent != NULL )
    2bcc:	693b      	ldr	r3, [r7, #16]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d01e      	beq.n	2c10 <vEventGenericCreate+0x84>
        {
           // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
            // there may be some problem here because of this assignment way
            pxEndFlagEvent->xTimeStamp.xSlackTime = portMAX_DELAY;
    2bd2:	693b      	ldr	r3, [r7, #16]
    2bd4:	f04f 32ff 	mov.w	r2, #4294967295
    2bd8:	609a      	str	r2, [r3, #8]
            pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2bda:	693b      	ldr	r3, [r7, #16]
    2bdc:	f04f 32ff 	mov.w	r2, #4294967295
    2be0:	60da      	str	r2, [r3, #12]
            pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2be2:	693b      	ldr	r3, [r7, #16]
    2be4:	f04f 32ff 	mov.w	r2, #4294967295
    2be8:	611a      	str	r2, [r3, #16]
            pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2bea:	693b      	ldr	r3, [r7, #16]
    2bec:	f04f 32ff 	mov.w	r2, #4294967295
    2bf0:	615a      	str	r2, [r3, #20]
            vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bf2:	693b      	ldr	r3, [r7, #16]
    2bf4:	3318      	adds	r3, #24
    2bf6:	6938      	ldr	r0, [r7, #16]
    2bf8:	4619      	mov	r1, r3
    2bfa:	f7ff ffb9 	bl	2b70 <vListIntialiseEventItem>
            vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2bfe:	693b      	ldr	r3, [r7, #16]
    2c00:	3318      	adds	r3, #24
    2c02:	f240 5008 	movw	r0, #1288	; 0x508
    2c06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2c0a:	4619      	mov	r1, r3
    2c0c:	f001 f874 	bl	3cf8 <vListInsertEnd>
        }
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2c10:	f002 fd1c 	bl	564c <xTaskGetCurrentTaskHandle>
    2c14:	60f8      	str	r0, [r7, #12]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2c16:	203c      	movs	r0, #60	; 0x3c
    2c18:	f002 fefa 	bl	5a10 <pvPortMalloc>
    2c1c:	6178      	str	r0, [r7, #20]
    if( pxNewEvent == NULL )
    2c1e:	697b      	ldr	r3, [r7, #20]
    2c20:	2b00      	cmp	r3, #0
    2c22:	d105      	bne.n	2c30 <vEventGenericCreate+0xa4>
    {
        vPrintString("malloc for event stack failed\n\r");
    2c24:	f248 50d8 	movw	r0, #34264	; 0x85d8
    2c28:	f2c0 0001 	movt	r0, #1
    2c2c:	f014 fa02 	bl	17034 <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2c30:	697b      	ldr	r3, [r7, #20]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d01b      	beq.n	2c6e <vEventGenericCreate+0xe2>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2c36:	697b      	ldr	r3, [r7, #20]
    2c38:	68fa      	ldr	r2, [r7, #12]
    2c3a:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2c3c:	697b      	ldr	r3, [r7, #20]
    2c3e:	687a      	ldr	r2, [r7, #4]
    2c40:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c44:	9300      	str	r3, [sp, #0]
    2c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
    2c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
    2c4c:	6978      	ldr	r0, [r7, #20]
    2c4e:	f7ff ff19 	bl	2a84 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2c52:	6978      	ldr	r0, [r7, #20]
    2c54:	f7ff fedc 	bl	2a10 <vEventSetxTimeStamp>

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2c58:	697b      	ldr	r3, [r7, #20]
    2c5a:	3318      	adds	r3, #24
    2c5c:	6978      	ldr	r0, [r7, #20]
    2c5e:	4619      	mov	r1, r3
    2c60:	f7ff ff86 	bl	2b70 <vListIntialiseEventItem>

        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert( (xListItem *) &(pxNewEvent->xEventListItem));
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	3318      	adds	r3, #24
    2c68:	4618      	mov	r0, r3
    2c6a:	f7ff ff2d 	bl	2ac8 <prvEventListGenericInsert>
    
    }
    taskEXIT_CRITICAL();
    2c6e:	f002 fe6b 	bl	5948 <vPortExitCritical>

}
    2c72:	3718      	adds	r7, #24
    2c74:	46bd      	mov	sp, r7
    2c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2c7a:	b004      	add	sp, #16
    2c7c:	4770      	bx	lr
    2c7e:	bf00      	nop

00002c80 <xEventListGenericTransit>:


/* An API to transfer the Event Item from xEventList to one of the xEventReadyList*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b088      	sub	sp, #32
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
    2c88:	6039      	str	r1, [r7, #0]
    //if( listLIST_IS_EMPTY(&xEventList) )
    // if there is only End Flag Event in xEventList, then return NULL.

    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2c8a:	f240 5308 	movw	r3, #1288	; 0x508
    2c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	2b01      	cmp	r3, #1
    2c96:	d108      	bne.n	2caa <xEventListGenericTransit+0x2a>
    {
        *pxEventListItem  = NULL;
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	2200      	movs	r2, #0
    2c9c:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2c9e:	683b      	ldr	r3, [r7, #0]
    2ca0:	2200      	movs	r2, #0
    2ca2:	601a      	str	r2, [r3, #0]
        return -1;
    2ca4:	f04f 33ff 	mov.w	r3, #4294967295
    2ca8:	e035      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
        
    // get the first event item in the xEventList.  
    *pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2caa:	f240 5308 	movw	r3, #1288	; 0x508
    2cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cb2:	68da      	ldr	r2, [r3, #12]
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	601a      	str	r2, [r3, #0]
    // every cpu has a event ready list. the transit function is called only when cpu turn into idle state.
    *pxCurrentReadyList = pxGetReadyList();
    2cb8:	f7ff fefa 	bl	2ab0 <pxGetReadyList>
    2cbc:	4602      	mov	r2, r0
    2cbe:	683b      	ldr	r3, [r7, #0]
    2cc0:	601a      	str	r2, [r3, #0]

    struct timeStamp xTimeStamp = xEventGetxTimeStamp((xEventHandle) (*pxEventListItem)->pvOwner);
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	68db      	ldr	r3, [r3, #12]
    2cc8:	f107 020c 	add.w	r2, r7, #12
    2ccc:	4610      	mov	r0, r2
    2cce:	4619      	mov	r1, r3
    2cd0:	f7ff fe7a 	bl	29c8 <xEventGetxTimeStamp>
    portTickType xCurrentTime;
    xCurrentTime = xTaskGetTickCount();
    2cd4:	f002 f8ee 	bl	4eb4 <xTaskGetTickCount>
    2cd8:	61f8      	str	r0, [r7, #28]


    if( xTimeStamp.xTime > xCurrentTime)
    2cda:	693a      	ldr	r2, [r7, #16]
    2cdc:	69fb      	ldr	r3, [r7, #28]
    2cde:	429a      	cmp	r2, r3
    2ce0:	d907      	bls.n	2cf2 <xEventListGenericTransit+0x72>
    {
        // not time yet
        *pxEventListItem  = NULL;
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	2200      	movs	r2, #0
    2ce6:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2ce8:	683b      	ldr	r3, [r7, #0]
    2cea:	2200      	movs	r2, #0
    2cec:	601a      	str	r2, [r3, #0]
        return 0;
    2cee:	2300      	movs	r3, #0
    2cf0:	e011      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
    else
    {
        taskENTER_CRITICAL();
    2cf2:	f002 fe13 	bl	591c <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	681b      	ldr	r3, [r3, #0]
    2cfa:	4618      	mov	r0, r3
    2cfc:	f001 f85c 	bl	3db8 <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2d00:	683b      	ldr	r3, [r7, #0]
    2d02:	681a      	ldr	r2, [r3, #0]
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	681b      	ldr	r3, [r3, #0]
    2d08:	4610      	mov	r0, r2
    2d0a:	4619      	mov	r1, r3
    2d0c:	f000 fff4 	bl	3cf8 <vListInsertEnd>
        taskEXIT_CRITICAL();
    2d10:	f002 fe1a 	bl	5948 <vPortExitCritical>
        return 1;
    2d14:	2301      	movs	r3, #1
    }
}
    2d16:	4618      	mov	r0, r3
    2d18:	3720      	adds	r7, #32
    2d1a:	46bd      	mov	sp, r7
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	bf00      	nop

00002d20 <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2d20:	b580      	push	{r7, lr}
    2d22:	b088      	sub	sp, #32
    2d24:	af00      	add	r7, sp, #0
    2d26:	60f8      	str	r0, [r7, #12]
    2d28:	60b9      	str	r1, [r7, #8]
    2d2a:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d103      	bne.n	2d40 <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	2200      	movs	r2, #0
    2d3c:	601a      	str	r2, [r3, #0]
        return;
    2d3e:	e04d      	b.n	2ddc <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2d40:	69bb      	ldr	r3, [r7, #24]
    2d42:	68db      	ldr	r3, [r3, #12]
    2d44:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2d46:	f002 fde9 	bl	591c <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d4a:	f002 fc7f 	bl	564c <xTaskGetCurrentTaskHandle>
    2d4e:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d50:	e01e      	b.n	2d90 <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d52:	69fb      	ldr	r3, [r7, #28]
    2d54:	68db      	ldr	r3, [r3, #12]
    2d56:	4618      	mov	r0, r3
    2d58:	f7ff fe1e 	bl	2998 <xEventGetpxSource>
    2d5c:	4602      	mov	r2, r0
    2d5e:	68bb      	ldr	r3, [r7, #8]
    2d60:	429a      	cmp	r2, r3
    2d62:	d112      	bne.n	2d8a <vEventGenericReceive+0x6a>
    2d64:	69fb      	ldr	r3, [r7, #28]
    2d66:	68db      	ldr	r3, [r3, #12]
    2d68:	4618      	mov	r0, r3
    2d6a:	f7ff fe21 	bl	29b0 <xEventGetpxDestination>
    2d6e:	4602      	mov	r2, r0
    2d70:	697b      	ldr	r3, [r7, #20]
    2d72:	429a      	cmp	r2, r3
    2d74:	d109      	bne.n	2d8a <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2d76:	69fb      	ldr	r3, [r7, #28]
    2d78:	68da      	ldr	r2, [r3, #12]
    2d7a:	68fb      	ldr	r3, [r7, #12]
    2d7c:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2d7e:	69f8      	ldr	r0, [r7, #28]
    2d80:	f001 f81a 	bl	3db8 <vListRemove>
            taskEXIT_CRITICAL();
    2d84:	f002 fde0 	bl	5948 <vPortExitCritical>
            return;
    2d88:	e028      	b.n	2ddc <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d8a:	69fb      	ldr	r3, [r7, #28]
    2d8c:	685b      	ldr	r3, [r3, #4]
    2d8e:	61fb      	str	r3, [r7, #28]
    2d90:	69bb      	ldr	r3, [r7, #24]
    2d92:	691a      	ldr	r2, [r3, #16]
    2d94:	69fb      	ldr	r3, [r7, #28]
    2d96:	429a      	cmp	r2, r3
    2d98:	d1db      	bne.n	2d52 <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d9a:	69fb      	ldr	r3, [r7, #28]
    2d9c:	68db      	ldr	r3, [r3, #12]
    2d9e:	4618      	mov	r0, r3
    2da0:	f7ff fdfa 	bl	2998 <xEventGetpxSource>
    2da4:	4602      	mov	r2, r0
    2da6:	68bb      	ldr	r3, [r7, #8]
    2da8:	429a      	cmp	r2, r3
    2daa:	d112      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    2dac:	69fb      	ldr	r3, [r7, #28]
    2dae:	68db      	ldr	r3, [r3, #12]
    2db0:	4618      	mov	r0, r3
    2db2:	f7ff fdfd 	bl	29b0 <xEventGetpxDestination>
    2db6:	4602      	mov	r2, r0
    2db8:	697b      	ldr	r3, [r7, #20]
    2dba:	429a      	cmp	r2, r3
    2dbc:	d109      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2dbe:	69fb      	ldr	r3, [r7, #28]
    2dc0:	68da      	ldr	r2, [r3, #12]
    2dc2:	68fb      	ldr	r3, [r7, #12]
    2dc4:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2dc6:	69f8      	ldr	r0, [r7, #28]
    2dc8:	f000 fff6 	bl	3db8 <vListRemove>
        taskEXIT_CRITICAL();
    2dcc:	f002 fdbc 	bl	5948 <vPortExitCritical>
        return;
    2dd0:	e004      	b.n	2ddc <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	2200      	movs	r2, #0
    2dd6:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2dd8:	f002 fdb6 	bl	5948 <vPortExitCritical>
}
    2ddc:	3720      	adds	r7, #32
    2dde:	46bd      	mov	sp, r7
    2de0:	bd80      	pop	{r7, pc}
    2de2:	bf00      	nop

00002de4 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b082      	sub	sp, #8
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2dec:	f002 fd96 	bl	591c <vPortEnterCritical>

    vPortFree( xEvent );
    2df0:	6878      	ldr	r0, [r7, #4]
    2df2:	f002 fed1 	bl	5b98 <vPortFree>

    taskEXIT_CRITICAL();
    2df6:	f002 fda7 	bl	5948 <vPortExitCritical>
}
    2dfa:	3708      	adds	r7, #8
    2dfc:	46bd      	mov	sp, r7
    2dfe:	bd80      	pop	{r7, pc}

00002e00 <vSemaphoreInitialise>:
}
*/

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2e00:	b580      	push	{r7, lr}
    2e02:	b082      	sub	sp, #8
    2e04:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e06:	2300      	movs	r3, #0
    2e08:	607b      	str	r3, [r7, #4]
    2e0a:	e033      	b.n	2e74 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2e0c:	2001      	movs	r0, #1
    2e0e:	2100      	movs	r1, #0
    2e10:	2203      	movs	r2, #3
    2e12:	f001 f847 	bl	3ea4 <xQueueGenericCreate>
    2e16:	4601      	mov	r1, r0
    2e18:	f640 333c 	movw	r3, #2876	; 0xb3c
    2e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e20:	687a      	ldr	r2, [r7, #4]
    2e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2e26:	f640 333c 	movw	r3, #2876	; 0xb3c
    2e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e2e:	687a      	ldr	r2, [r7, #4]
    2e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e34:	2b00      	cmp	r3, #0
    2e36:	d00c      	beq.n	2e52 <vSemaphoreInitialise+0x52>
    2e38:	f640 333c 	movw	r3, #2876	; 0xb3c
    2e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e40:	687a      	ldr	r2, [r7, #4]
    2e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e46:	4618      	mov	r0, r3
    2e48:	2100      	movs	r1, #0
    2e4a:	2200      	movs	r2, #0
    2e4c:	2300      	movs	r3, #0
    2e4e:	f001 f8b7 	bl	3fc0 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    2e52:	f640 333c 	movw	r3, #2876	; 0xb3c
    2e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e5a:	687a      	ldr	r2, [r7, #4]
    2e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e60:	4618      	mov	r0, r3
    2e62:	2100      	movs	r1, #0
    2e64:	f04f 32ff 	mov.w	r2, #4294967295
    2e68:	2300      	movs	r3, #0
    2e6a:	f001 f96f 	bl	414c <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	3301      	adds	r3, #1
    2e72:	607b      	str	r3, [r7, #4]
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	2b22      	cmp	r3, #34	; 0x22
    2e78:	ddc8      	ble.n	2e0c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    2e7a:	3708      	adds	r7, #8
    2e7c:	46bd      	mov	sp, r7
    2e7e:	bd80      	pop	{r7, pc}

00002e80 <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    2e80:	b480      	push	{r7}
    2e82:	b085      	sub	sp, #20
    2e84:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e86:	2300      	movs	r3, #0
    2e88:	60fb      	str	r3, [r7, #12]
    2e8a:	e073      	b.n	2f74 <vParameterInitialise+0xf4>
    {
        pvParameters[i].xMyFlag = i;
    2e8c:	f240 5338 	movw	r3, #1336	; 0x538
    2e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e94:	68fa      	ldr	r2, [r7, #12]
    2e96:	212c      	movs	r1, #44	; 0x2c
    2e98:	fb01 f202 	mul.w	r2, r1, r2
    2e9c:	4413      	add	r3, r2
    2e9e:	68fa      	ldr	r2, [r7, #12]
    2ea0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    2ea2:	f240 5338 	movw	r3, #1336	; 0x538
    2ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eaa:	68fa      	ldr	r2, [r7, #12]
    2eac:	212c      	movs	r1, #44	; 0x2c
    2eae:	fb01 f202 	mul.w	r2, r1, r2
    2eb2:	4413      	add	r3, r2
    2eb4:	3304      	adds	r3, #4
    2eb6:	2200      	movs	r2, #0
    2eb8:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    2eba:	f240 5338 	movw	r3, #1336	; 0x538
    2ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ec2:	68fa      	ldr	r2, [r7, #12]
    2ec4:	212c      	movs	r1, #44	; 0x2c
    2ec6:	fb01 f202 	mul.w	r2, r1, r2
    2eca:	4413      	add	r3, r2
    2ecc:	3308      	adds	r3, #8
    2ece:	2200      	movs	r2, #0
    2ed0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    2ed2:	f240 0394 	movw	r3, #148	; 0x94
    2ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eda:	68fa      	ldr	r2, [r7, #12]
    2edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2ee0:	f240 5338 	movw	r3, #1336	; 0x538
    2ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ee8:	68f9      	ldr	r1, [r7, #12]
    2eea:	202c      	movs	r0, #44	; 0x2c
    2eec:	fb00 f101 	mul.w	r1, r0, r1
    2ef0:	440b      	add	r3, r1
    2ef2:	331c      	adds	r3, #28
    2ef4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xFp = xServantTable[i];
    2ef6:	f240 3354 	movw	r3, #852	; 0x354
    2efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2efe:	68fa      	ldr	r2, [r7, #12]
    2f00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f04:	f240 5338 	movw	r3, #1336	; 0x538
    2f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f0c:	68f9      	ldr	r1, [r7, #12]
    2f0e:	202c      	movs	r0, #44	; 0x2c
    2f10:	fb00 f101 	mul.w	r1, r0, r1
    2f14:	440b      	add	r3, r1
    2f16:	3320      	adds	r3, #32
    2f18:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    2f1a:	f240 1320 	movw	r3, #288	; 0x120
    2f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f22:	68fa      	ldr	r2, [r7, #12]
    2f24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f28:	f240 5338 	movw	r3, #1336	; 0x538
    2f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f30:	68f9      	ldr	r1, [r7, #12]
    2f32:	202c      	movs	r0, #44	; 0x2c
    2f34:	fb00 f101 	mul.w	r1, r0, r1
    2f38:	440b      	add	r3, r1
    2f3a:	3328      	adds	r3, #40	; 0x28
    2f3c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    2f3e:	f240 1320 	movw	r3, #288	; 0x120
    2f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f46:	68fa      	ldr	r2, [r7, #12]
    2f48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f4c:	f240 032c 	movw	r3, #44	; 0x2c
    2f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f58:	f240 5338 	movw	r3, #1336	; 0x538
    2f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f60:	68f9      	ldr	r1, [r7, #12]
    2f62:	202c      	movs	r0, #44	; 0x2c
    2f64:	fb00 f101 	mul.w	r1, r0, r1
    2f68:	440b      	add	r3, r1
    2f6a:	3324      	adds	r3, #36	; 0x24
    2f6c:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2f6e:	68fb      	ldr	r3, [r7, #12]
    2f70:	3301      	adds	r3, #1
    2f72:	60fb      	str	r3, [r7, #12]
    2f74:	68fb      	ldr	r3, [r7, #12]
    2f76:	2b22      	cmp	r3, #34	; 0x22
    2f78:	dd88      	ble.n	2e8c <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    2f7a:	2300      	movs	r3, #0
    2f7c:	60fb      	str	r3, [r7, #12]
    2f7e:	e080      	b.n	3082 <vParameterInitialise+0x202>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    2f80:	f240 12ac 	movw	r2, #428	; 0x1ac
    2f84:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f88:	68f9      	ldr	r1, [r7, #12]
    2f8a:	460b      	mov	r3, r1
    2f8c:	005b      	lsls	r3, r3, #1
    2f8e:	440b      	add	r3, r1
    2f90:	009b      	lsls	r3, r3, #2
    2f92:	4413      	add	r3, r2
    2f94:	3304      	adds	r3, #4
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    2f9a:	f240 12ac 	movw	r2, #428	; 0x1ac
    2f9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fa2:	68f9      	ldr	r1, [r7, #12]
    2fa4:	460b      	mov	r3, r1
    2fa6:	005b      	lsls	r3, r3, #1
    2fa8:	440b      	add	r3, r1
    2faa:	009b      	lsls	r3, r3, #2
    2fac:	4413      	add	r3, r2
    2fae:	3308      	adds	r3, #8
    2fb0:	681b      	ldr	r3, [r3, #0]
    2fb2:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    2fb4:	f240 5338 	movw	r3, #1336	; 0x538
    2fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fbc:	68ba      	ldr	r2, [r7, #8]
    2fbe:	212c      	movs	r1, #44	; 0x2c
    2fc0:	fb01 f202 	mul.w	r2, r1, r2
    2fc4:	4413      	add	r3, r2
    2fc6:	3308      	adds	r3, #8
    2fc8:	6818      	ldr	r0, [r3, #0]
    2fca:	f240 5238 	movw	r2, #1336	; 0x538
    2fce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fd2:	68b9      	ldr	r1, [r7, #8]
    2fd4:	460b      	mov	r3, r1
    2fd6:	009b      	lsls	r3, r3, #2
    2fd8:	440b      	add	r3, r1
    2fda:	005b      	lsls	r3, r3, #1
    2fdc:	440b      	add	r3, r1
    2fde:	4403      	add	r3, r0
    2fe0:	3304      	adds	r3, #4
    2fe2:	009b      	lsls	r3, r3, #2
    2fe4:	4413      	add	r3, r2
    2fe6:	687a      	ldr	r2, [r7, #4]
    2fe8:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    2fea:	f240 5338 	movw	r3, #1336	; 0x538
    2fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ff2:	68ba      	ldr	r2, [r7, #8]
    2ff4:	212c      	movs	r1, #44	; 0x2c
    2ff6:	fb01 f202 	mul.w	r2, r1, r2
    2ffa:	4413      	add	r3, r2
    2ffc:	3308      	adds	r3, #8
    2ffe:	681b      	ldr	r3, [r3, #0]
    3000:	1c5a      	adds	r2, r3, #1
    3002:	f240 5338 	movw	r3, #1336	; 0x538
    3006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    300a:	68b9      	ldr	r1, [r7, #8]
    300c:	202c      	movs	r0, #44	; 0x2c
    300e:	fb00 f101 	mul.w	r1, r0, r1
    3012:	440b      	add	r3, r1
    3014:	3308      	adds	r3, #8
    3016:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    3018:	f240 5338 	movw	r3, #1336	; 0x538
    301c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3020:	687a      	ldr	r2, [r7, #4]
    3022:	212c      	movs	r1, #44	; 0x2c
    3024:	fb01 f202 	mul.w	r2, r1, r2
    3028:	4413      	add	r3, r2
    302a:	3304      	adds	r3, #4
    302c:	6818      	ldr	r0, [r3, #0]
    302e:	f240 5238 	movw	r2, #1336	; 0x538
    3032:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3036:	6879      	ldr	r1, [r7, #4]
    3038:	460b      	mov	r3, r1
    303a:	009b      	lsls	r3, r3, #2
    303c:	440b      	add	r3, r1
    303e:	005b      	lsls	r3, r3, #1
    3040:	440b      	add	r3, r1
    3042:	4403      	add	r3, r0
    3044:	3302      	adds	r3, #2
    3046:	009b      	lsls	r3, r3, #2
    3048:	4413      	add	r3, r2
    304a:	68ba      	ldr	r2, [r7, #8]
    304c:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    304e:	f240 5338 	movw	r3, #1336	; 0x538
    3052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3056:	687a      	ldr	r2, [r7, #4]
    3058:	212c      	movs	r1, #44	; 0x2c
    305a:	fb01 f202 	mul.w	r2, r1, r2
    305e:	4413      	add	r3, r2
    3060:	3304      	adds	r3, #4
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	1c5a      	adds	r2, r3, #1
    3066:	f240 5338 	movw	r3, #1336	; 0x538
    306a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    306e:	6879      	ldr	r1, [r7, #4]
    3070:	202c      	movs	r0, #44	; 0x2c
    3072:	fb00 f101 	mul.w	r1, r0, r1
    3076:	440b      	add	r3, r1
    3078:	3304      	adds	r3, #4
    307a:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    307c:	68fb      	ldr	r3, [r7, #12]
    307e:	3301      	adds	r3, #1
    3080:	60fb      	str	r3, [r7, #12]
    3082:	f240 13ac 	movw	r3, #428	; 0x1ac
    3086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    308a:	681a      	ldr	r2, [r3, #0]
    308c:	68fb      	ldr	r3, [r7, #12]
    308e:	429a      	cmp	r2, r3
    3090:	f73f af76 	bgt.w	2f80 <vParameterInitialise+0x100>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3094:	3714      	adds	r7, #20
    3096:	46bd      	mov	sp, r7
    3098:	f85d 7b04 	ldr.w	r7, [sp], #4
    309c:	4770      	bx	lr
    309e:	bf00      	nop

000030a0 <vTaskDelayLET>:

void vTaskDelayLET()
{
    30a0:	b580      	push	{r7, lr}
    30a2:	b084      	sub	sp, #16
    30a4:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    30a6:	f002 fad1 	bl	564c <xTaskGetCurrentTaskHandle>
    30aa:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    30ac:	68b8      	ldr	r0, [r7, #8]
    30ae:	f002 fb83 	bl	57b8 <xTaskGetxStartTime>
    30b2:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    30b4:	68b8      	ldr	r0, [r7, #8]
    30b6:	f002 fb8b 	bl	57d0 <xTaskGetxLet>
    30ba:	4602      	mov	r2, r0
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	4413      	add	r3, r2
    30c0:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    30c2:	f001 fef7 	bl	4eb4 <xTaskGetTickCount>
    30c6:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    30c8:	e002      	b.n	30d0 <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    30ca:	f001 fef3 	bl	4eb4 <xTaskGetTickCount>
    30ce:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    30d0:	68fa      	ldr	r2, [r7, #12]
    30d2:	683b      	ldr	r3, [r7, #0]
    30d4:	429a      	cmp	r2, r3
    30d6:	d3f8      	bcc.n	30ca <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    30d8:	3710      	adds	r7, #16
    30da:	46bd      	mov	sp, r7
    30dc:	bd80      	pop	{r7, pc}
    30de:	bf00      	nop

000030e0 <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    30e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30e4:	b088      	sub	sp, #32
    30e6:	af00      	add	r7, sp, #0
    30e8:	6078      	str	r0, [r7, #4]
    30ea:	6039      	str	r1, [r7, #0]
    30ec:	4669      	mov	r1, sp
    30ee:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    30f0:	6879      	ldr	r1, [r7, #4]
    30f2:	6849      	ldr	r1, [r1, #4]
    30f4:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    30f6:	69be      	ldr	r6, [r7, #24]
    30f8:	1e71      	subs	r1, r6, #1
    30fa:	6179      	str	r1, [r7, #20]
    30fc:	4631      	mov	r1, r6
    30fe:	4608      	mov	r0, r1
    3100:	f04f 0100 	mov.w	r1, #0
    3104:	014d      	lsls	r5, r1, #5
    3106:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    310a:	0144      	lsls	r4, r0, #5
    310c:	4631      	mov	r1, r6
    310e:	4608      	mov	r0, r1
    3110:	f04f 0100 	mov.w	r1, #0
    3114:	014b      	lsls	r3, r1, #5
    3116:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    311a:	0142      	lsls	r2, r0, #5
    311c:	4633      	mov	r3, r6
    311e:	009b      	lsls	r3, r3, #2
    3120:	3303      	adds	r3, #3
    3122:	3307      	adds	r3, #7
    3124:	08db      	lsrs	r3, r3, #3
    3126:	00db      	lsls	r3, r3, #3
    3128:	ebad 0d03 	sub.w	sp, sp, r3
    312c:	466b      	mov	r3, sp
    312e:	3303      	adds	r3, #3
    3130:	089b      	lsrs	r3, r3, #2
    3132:	009b      	lsls	r3, r3, #2
    3134:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	681b      	ldr	r3, [r3, #0]
    313a:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    313c:	f640 333c 	movw	r3, #2876	; 0xb3c
    3140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3144:	68fa      	ldr	r2, [r7, #12]
    3146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    314a:	4618      	mov	r0, r3
    314c:	2100      	movs	r1, #0
    314e:	f04f 32ff 	mov.w	r2, #4294967295
    3152:	2300      	movs	r3, #0
    3154:	f000 fffa 	bl	414c <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    3158:	f001 feac 	bl	4eb4 <xTaskGetTickCount>
    315c:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    315e:	f640 33c8 	movw	r3, #3016	; 0xbc8
    3162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3166:	68fa      	ldr	r2, [r7, #12]
    3168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    316c:	4618      	mov	r0, r3
    316e:	68b9      	ldr	r1, [r7, #8]
    3170:	f002 fb3a 	bl	57e8 <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    3174:	2300      	movs	r3, #0
    3176:	61fb      	str	r3, [r7, #28]
    3178:	e024      	b.n	31c4 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    317a:	687a      	ldr	r2, [r7, #4]
    317c:	69fb      	ldr	r3, [r7, #28]
    317e:	3302      	adds	r3, #2
    3180:	009b      	lsls	r3, r3, #2
    3182:	4413      	add	r3, r2
    3184:	6859      	ldr	r1, [r3, #4]
    3186:	693b      	ldr	r3, [r7, #16]
    3188:	69fa      	ldr	r2, [r7, #28]
    318a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    318e:	69fb      	ldr	r3, [r7, #28]
    3190:	009b      	lsls	r3, r3, #2
    3192:	683a      	ldr	r2, [r7, #0]
    3194:	18d1      	adds	r1, r2, r3
    3196:	693b      	ldr	r3, [r7, #16]
    3198:	69fa      	ldr	r2, [r7, #28]
    319a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    319e:	f640 33c8 	movw	r3, #3016	; 0xbc8
    31a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    31aa:	f240 5334 	movw	r3, #1332	; 0x534
    31ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31b2:	681b      	ldr	r3, [r3, #0]
    31b4:	4608      	mov	r0, r1
    31b6:	4611      	mov	r1, r2
    31b8:	461a      	mov	r2, r3
    31ba:	f7ff fdb1 	bl	2d20 <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    31be:	69fb      	ldr	r3, [r7, #28]
    31c0:	3301      	adds	r3, #1
    31c2:	61fb      	str	r3, [r7, #28]
    31c4:	69fa      	ldr	r2, [r7, #28]
    31c6:	69bb      	ldr	r3, [r7, #24]
    31c8:	429a      	cmp	r2, r3
    31ca:	dbd6      	blt.n	317a <vEventReceiveAll+0x9a>
    31cc:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    31ce:	3720      	adds	r7, #32
    31d0:	46bd      	mov	sp, r7
    31d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31d6:	bf00      	nop

000031d8 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    31d8:	b580      	push	{r7, lr}
    31da:	b084      	sub	sp, #16
    31dc:	af00      	add	r7, sp, #0
    31de:	6078      	str	r0, [r7, #4]
    31e0:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	685b      	ldr	r3, [r3, #4]
    31e6:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    31e8:	2300      	movs	r3, #0
    31ea:	60fb      	str	r3, [r7, #12]
    31ec:	e00a      	b.n	3204 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    31ee:	68fb      	ldr	r3, [r7, #12]
    31f0:	009b      	lsls	r3, r3, #2
    31f2:	683a      	ldr	r2, [r7, #0]
    31f4:	4413      	add	r3, r2
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	4618      	mov	r0, r3
    31fa:	f7ff fdf3 	bl	2de4 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    31fe:	68fb      	ldr	r3, [r7, #12]
    3200:	3301      	adds	r3, #1
    3202:	60fb      	str	r3, [r7, #12]
    3204:	68fa      	ldr	r2, [r7, #12]
    3206:	68bb      	ldr	r3, [r7, #8]
    3208:	429a      	cmp	r2, r3
    320a:	dbf0      	blt.n	31ee <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    320c:	3710      	adds	r7, #16
    320e:	46bd      	mov	sp, r7
    3210:	bd80      	pop	{r7, pc}
    3212:	bf00      	nop

00003214 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    3214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3218:	b08a      	sub	sp, #40	; 0x28
    321a:	af02      	add	r7, sp, #8
    321c:	6078      	str	r0, [r7, #4]
    321e:	6039      	str	r1, [r7, #0]
    3220:	4669      	mov	r1, sp
    3222:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    3224:	6879      	ldr	r1, [r7, #4]
    3226:	6889      	ldr	r1, [r1, #8]
    3228:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    322a:	6879      	ldr	r1, [r7, #4]
    322c:	6809      	ldr	r1, [r1, #0]
    322e:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    3230:	6879      	ldr	r1, [r7, #4]
    3232:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3234:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    3236:	69be      	ldr	r6, [r7, #24]
    3238:	1e71      	subs	r1, r6, #1
    323a:	60f9      	str	r1, [r7, #12]
    323c:	4631      	mov	r1, r6
    323e:	4608      	mov	r0, r1
    3240:	f04f 0100 	mov.w	r1, #0
    3244:	014d      	lsls	r5, r1, #5
    3246:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    324a:	0144      	lsls	r4, r0, #5
    324c:	4631      	mov	r1, r6
    324e:	4608      	mov	r0, r1
    3250:	f04f 0100 	mov.w	r1, #0
    3254:	014b      	lsls	r3, r1, #5
    3256:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    325a:	0142      	lsls	r2, r0, #5
    325c:	4633      	mov	r3, r6
    325e:	009b      	lsls	r3, r3, #2
    3260:	3303      	adds	r3, #3
    3262:	3307      	adds	r3, #7
    3264:	08db      	lsrs	r3, r3, #3
    3266:	00db      	lsls	r3, r3, #3
    3268:	ebad 0d03 	sub.w	sp, sp, r3
    326c:	ab02      	add	r3, sp, #8
    326e:	3303      	adds	r3, #3
    3270:	089b      	lsrs	r3, r3, #2
    3272:	009b      	lsls	r3, r3, #2
    3274:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    3276:	2300      	movs	r3, #0
    3278:	61fb      	str	r3, [r7, #28]
    327a:	e033      	b.n	32e4 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    327c:	687a      	ldr	r2, [r7, #4]
    327e:	69fb      	ldr	r3, [r7, #28]
    3280:	3304      	adds	r3, #4
    3282:	009b      	lsls	r3, r3, #2
    3284:	4413      	add	r3, r2
    3286:	6859      	ldr	r1, [r3, #4]
    3288:	68bb      	ldr	r3, [r7, #8]
    328a:	69fa      	ldr	r2, [r7, #28]
    328c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    3290:	68bb      	ldr	r3, [r7, #8]
    3292:	69fa      	ldr	r2, [r7, #28]
    3294:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3298:	697b      	ldr	r3, [r7, #20]
    329a:	429a      	cmp	r2, r3
    329c:	dc06      	bgt.n	32ac <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    329e:	69fb      	ldr	r3, [r7, #28]
    32a0:	011b      	lsls	r3, r3, #4
    32a2:	683a      	ldr	r2, [r7, #0]
    32a4:	4413      	add	r3, r2
    32a6:	2201      	movs	r2, #1
    32a8:	609a      	str	r2, [r3, #8]
    32aa:	e005      	b.n	32b8 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    32ac:	69fb      	ldr	r3, [r7, #28]
    32ae:	011b      	lsls	r3, r3, #4
    32b0:	683a      	ldr	r2, [r7, #0]
    32b2:	4413      	add	r3, r2
    32b4:	2200      	movs	r2, #0
    32b6:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    32b8:	68bb      	ldr	r3, [r7, #8]
    32ba:	69fa      	ldr	r2, [r7, #28]
    32bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    32c0:	f640 33c8 	movw	r3, #3016	; 0xbc8
    32c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    32cc:	69fb      	ldr	r3, [r7, #28]
    32ce:	011b      	lsls	r3, r3, #4
    32d0:	683a      	ldr	r2, [r7, #0]
    32d2:	4413      	add	r3, r2
    32d4:	68da      	ldr	r2, [r3, #12]
    32d6:	9200      	str	r2, [sp, #0]
    32d8:	cb0e      	ldmia	r3, {r1, r2, r3}
    32da:	f7ff fc57 	bl	2b8c <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    32de:	69fb      	ldr	r3, [r7, #28]
    32e0:	3301      	adds	r3, #1
    32e2:	61fb      	str	r3, [r7, #28]
    32e4:	69fa      	ldr	r2, [r7, #28]
    32e6:	69bb      	ldr	r3, [r7, #24]
    32e8:	429a      	cmp	r2, r3
    32ea:	dbc7      	blt.n	327c <vEventCreateAll+0x68>
    32ec:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    32ee:	3720      	adds	r7, #32
    32f0:	46bd      	mov	sp, r7
    32f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32f6:	bf00      	nop

000032f8 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    32f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32fc:	b095      	sub	sp, #84	; 0x54
    32fe:	af00      	add	r7, sp, #0
    3300:	60f8      	str	r0, [r7, #12]
    3302:	466b      	mov	r3, sp
    3304:	461e      	mov	r6, r3
    portTickType xCurrentTime;
    portTickType deadline;
    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    3306:	2301      	movs	r3, #1
    3308:	647b      	str	r3, [r7, #68]	; 0x44
    portBASE_TYPE xCount = 1;
    330a:	2301      	movs	r3, #1
    330c:	643b      	str	r3, [r7, #64]	; 0x40

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    330e:	68fb      	ldr	r3, [r7, #12]
    3310:	63fb      	str	r3, [r7, #60]	; 0x3c

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3314:	689b      	ldr	r3, [r3, #8]
    3316:	63bb      	str	r3, [r7, #56]	; 0x38
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    331a:	681b      	ldr	r3, [r3, #0]
    331c:	637b      	str	r3, [r7, #52]	; 0x34
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3320:	69db      	ldr	r3, [r3, #28]
    3322:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    3324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3328:	62fb      	str	r3, [r7, #44]	; 0x2c
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    332c:	6a1b      	ldr	r3, [r3, #32]
    332e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3330:	f640 33c8 	movw	r3, #3016	; 0xbc8
    3334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    333a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    333e:	4618      	mov	r0, r3
    3340:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3342:	f002 fa5f 	bl	5804 <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    3346:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3348:	1e4b      	subs	r3, r1, #1
    334a:	627b      	str	r3, [r7, #36]	; 0x24
    334c:	460b      	mov	r3, r1
    334e:	461a      	mov	r2, r3
    3350:	f04f 0300 	mov.w	r3, #0
    3354:	0158      	lsls	r0, r3, #5
    3356:	6078      	str	r0, [r7, #4]
    3358:	6878      	ldr	r0, [r7, #4]
    335a:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    335e:	6078      	str	r0, [r7, #4]
    3360:	0150      	lsls	r0, r2, #5
    3362:	460b      	mov	r3, r1
    3364:	461a      	mov	r2, r3
    3366:	f04f 0300 	mov.w	r3, #0
    336a:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    336e:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    3372:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    3376:	460b      	mov	r3, r1
    3378:	009b      	lsls	r3, r3, #2
    337a:	3303      	adds	r3, #3
    337c:	3307      	adds	r3, #7
    337e:	08db      	lsrs	r3, r3, #3
    3380:	00db      	lsls	r3, r3, #3
    3382:	ebad 0d03 	sub.w	sp, sp, r3
    3386:	466b      	mov	r3, sp
    3388:	3303      	adds	r3, #3
    338a:	089b      	lsrs	r3, r3, #2
    338c:	009b      	lsls	r3, r3, #2
    338e:	623b      	str	r3, [r7, #32]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    3390:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3392:	1e4b      	subs	r3, r1, #1
    3394:	61fb      	str	r3, [r7, #28]
    3396:	460b      	mov	r3, r1
    3398:	461a      	mov	r2, r3
    339a:	f04f 0300 	mov.w	r3, #0
    339e:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    33a2:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    33a6:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    33aa:	460b      	mov	r3, r1
    33ac:	461a      	mov	r2, r3
    33ae:	f04f 0300 	mov.w	r3, #0
    33b2:	01dd      	lsls	r5, r3, #7
    33b4:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    33b8:	01d4      	lsls	r4, r2, #7
    33ba:	460b      	mov	r3, r1
    33bc:	011b      	lsls	r3, r3, #4
    33be:	3303      	adds	r3, #3
    33c0:	3307      	adds	r3, #7
    33c2:	08db      	lsrs	r3, r3, #3
    33c4:	00db      	lsls	r3, r3, #3
    33c6:	ebad 0d03 	sub.w	sp, sp, r3
    33ca:	466b      	mov	r3, sp
    33cc:	3303      	adds	r3, #3
    33ce:	089b      	lsrs	r3, r3, #2
    33d0:	009b      	lsls	r3, r3, #2
    33d2:	61bb      	str	r3, [r7, #24]


    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    33d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    33d6:	2b01      	cmp	r3, #1
    33d8:	d124      	bne.n	3424 <vSensor+0x12c>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    33da:	f640 333c 	movw	r3, #2876	; 0xb3c
    33de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    33e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    33e8:	4618      	mov	r0, r3
    33ea:	2100      	movs	r1, #0
    33ec:	f04f 32ff 	mov.w	r2, #4294967295
    33f0:	2300      	movs	r3, #0
    33f2:	f000 feab 	bl	414c <xQueueGenericReceive>
#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    33f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
    33f8:	f013 fe36 	bl	17068 <vPrintNumber>
#endif 

            xCurrentTime = xTaskGetTickCount();
    33fc:	f001 fd5a 	bl	4eb4 <xTaskGetTickCount>
    3400:	64f8      	str	r0, [r7, #76]	; 0x4c
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3402:	f640 33c8 	movw	r3, #3016	; 0xbc8
    3406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    340a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3410:	4618      	mov	r0, r3
    3412:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    3414:	f002 f9e8 	bl	57e8 <vTaskSetxStartTime>

#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime );
    3418:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    341a:	f013 fe25 	bl	17068 <vPrintNumber>
#endif

            IS_FIRST_TIME_TO_EXE = 0;
    341e:	2300      	movs	r3, #0
    3420:	647b      	str	r3, [r7, #68]	; 0x44
    3422:	e01d      	b.n	3460 <vSensor+0x168>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    3424:	6a3b      	ldr	r3, [r7, #32]
    3426:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3428:	4619      	mov	r1, r3
    342a:	f7ff fe59 	bl	30e0 <vEventReceiveAll>

#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    342e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3430:	f013 fe1a 	bl	17068 <vPrintNumber>
#endif 

            xCurrentTime = xTaskGetTickCount();
    3434:	f001 fd3e 	bl	4eb4 <xTaskGetTickCount>
    3438:	64f8      	str	r0, [r7, #76]	; 0x4c
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    343a:	f640 33c8 	movw	r3, #3016	; 0xbc8
    343e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3448:	4618      	mov	r0, r3
    344a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    344c:	f002 f9cc 	bl	57e8 <vTaskSetxStartTime>

#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime );
    3450:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    3452:	f013 fe09 	bl	17068 <vPrintNumber>

            // deal with the output things and seeing whether current task misses deadline
#ifdef SENSOR_FUN
            xMyFun( NULL, 0, xDatas, NUM);
#endif
            vEventDeleteAll(pvMyParameter, pxEvent);
    3456:	6a3b      	ldr	r3, [r7, #32]
    3458:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    345a:	4619      	mov	r1, r3
    345c:	f7ff febc 	bl	31d8 <vEventDeleteAll>
        }

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
    3460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3462:	3301      	adds	r3, #1
    3464:	643b      	str	r3, [r7, #64]	; 0x40
        deadline = xCount * xPeriod; 
    3466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    346a:	fb02 f303 	mul.w	r3, r2, r3
    346e:	617b      	str	r3, [r7, #20]

        for( i = 0; i < NUM; i ++ )
    3470:	2300      	movs	r3, #0
    3472:	64bb      	str	r3, [r7, #72]	; 0x48
    3474:	e011      	b.n	349a <vSensor+0x1a2>
        {
            xDatas[i].xNextPeriod = deadline;
    3476:	69ba      	ldr	r2, [r7, #24]
    3478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    347a:	011b      	lsls	r3, r3, #4
    347c:	4413      	add	r3, r2
    347e:	697a      	ldr	r2, [r7, #20]
    3480:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    3482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3486:	441a      	add	r2, r3
    3488:	69b9      	ldr	r1, [r7, #24]
    348a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    348c:	011b      	lsls	r3, r3, #4
    348e:	440b      	add	r3, r1
    3490:	3304      	adds	r3, #4
    3492:	601a      	str	r2, [r3, #0]

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    3494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3496:	3301      	adds	r3, #1
    3498:	64bb      	str	r3, [r7, #72]	; 0x48
    349a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    349e:	429a      	cmp	r2, r3
    34a0:	dbe9      	blt.n	3476 <vSensor+0x17e>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    34a2:	69bb      	ldr	r3, [r7, #24]
    34a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    34a6:	4619      	mov	r1, r3
    34a8:	f7ff feb4 	bl	3214 <vEventCreateAll>

#ifdef SENSOR_LET
        vTaskDelayLET();
    34ac:	f7ff fdf8 	bl	30a0 <vTaskDelayLET>
#endif
        
        if( xCurrentTime > xDatas[0].xNextPeriod )
    34b0:	69bb      	ldr	r3, [r7, #24]
    34b2:	681a      	ldr	r2, [r3, #0]
    34b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34b6:	429a      	cmp	r2, r3
    34b8:	d20a      	bcs.n	34d0 <vSensor+0x1d8>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    34ba:	69bb      	ldr	r3, [r7, #24]
    34bc:	681b      	ldr	r3, [r3, #0]
    34be:	4618      	mov	r0, r3
    34c0:	f013 fdd2 	bl	17068 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    34c4:	f248 50f8 	movw	r0, #34296	; 0x85f8
    34c8:	f2c0 0001 	movt	r0, #1
    34cc:	f013 fdb2 	bl	17034 <vPrintString>
        }

#ifdef SENSOR_PRINT
        xCurrentTime = xTaskGetTickCount();
    34d0:	f001 fcf0 	bl	4eb4 <xTaskGetTickCount>
    34d4:	64f8      	str	r0, [r7, #76]	; 0x4c
        vPrintNumber( xCurrentTime );
    34d6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    34d8:	f013 fdc6 	bl	17068 <vPrintNumber>
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
    34dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34de:	f103 020a 	add.w	r2, r3, #10
    34e2:	4613      	mov	r3, r2
    34e4:	005b      	lsls	r3, r3, #1
    34e6:	4413      	add	r3, r2
    34e8:	4618      	mov	r0, r3
    34ea:	f013 fdbd 	bl	17068 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    34ee:	f001 fce1 	bl	4eb4 <xTaskGetTickCount>
    34f2:	64f8      	str	r0, [r7, #76]	; 0x4c
        if( xCurrentTime > 1000000 )
    34f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    34f6:	f244 2340 	movw	r3, #16960	; 0x4240
    34fa:	f2c0 030f 	movt	r3, #15
    34fe:	429a      	cmp	r2, r3
    3500:	d900      	bls.n	3504 <vSensor+0x20c>
        {
            break;
    3502:	e00c      	b.n	351e <vSensor+0x226>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    3504:	f640 333c 	movw	r3, #2876	; 0xb3c
    3508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3510:	4618      	mov	r0, r3
    3512:	2100      	movs	r1, #0
    3514:	2200      	movs	r2, #0
    3516:	2300      	movs	r3, #0
    3518:	f000 fd52 	bl	3fc0 <xQueueGenericSend>
    }
    351c:	e75a      	b.n	33d4 <vSensor+0xdc>
    351e:	46b5      	mov	sp, r6
}
    3520:	3754      	adds	r7, #84	; 0x54
    3522:	46bd      	mov	sp, r7
    3524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003528 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    3528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    352c:	b097      	sub	sp, #92	; 0x5c
    352e:	af00      	add	r7, sp, #0
    3530:	61f8      	str	r0, [r7, #28]
    3532:	4669      	mov	r1, sp
    3534:	6079      	str	r1, [r7, #4]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    3536:	69f9      	ldr	r1, [r7, #28]
    3538:	6539      	str	r1, [r7, #80]	; 0x50
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    353a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    353c:	6849      	ldr	r1, [r1, #4]
    353e:	64f9      	str	r1, [r7, #76]	; 0x4c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3540:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3542:	6889      	ldr	r1, [r1, #8]
    3544:	64b9      	str	r1, [r7, #72]	; 0x48
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3546:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3548:	6809      	ldr	r1, [r1, #0]
    354a:	6479      	str	r1, [r7, #68]	; 0x44
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    354c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    354e:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3550:	6439      	str	r1, [r7, #64]	; 0x40
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    3552:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3554:	6a09      	ldr	r1, [r1, #32]
    3556:	63f9      	str	r1, [r7, #60]	; 0x3c

    xEventHandle pxEvent[xNumOfIn];
    3558:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
    355a:	1e71      	subs	r1, r6, #1
    355c:	63b9      	str	r1, [r7, #56]	; 0x38
    355e:	4631      	mov	r1, r6
    3560:	4608      	mov	r0, r1
    3562:	f04f 0100 	mov.w	r1, #0
    3566:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    356a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    356e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    3572:	4631      	mov	r1, r6
    3574:	4608      	mov	r0, r1
    3576:	f04f 0100 	mov.w	r1, #0
    357a:	ea4f 1941 	mov.w	r9, r1, lsl #5
    357e:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    3582:	ea4f 1840 	mov.w	r8, r0, lsl #5
    3586:	4631      	mov	r1, r6
    3588:	0089      	lsls	r1, r1, #2
    358a:	3103      	adds	r1, #3
    358c:	3107      	adds	r1, #7
    358e:	08c9      	lsrs	r1, r1, #3
    3590:	00c9      	lsls	r1, r1, #3
    3592:	ebad 0d01 	sub.w	sp, sp, r1
    3596:	4669      	mov	r1, sp
    3598:	3103      	adds	r1, #3
    359a:	0889      	lsrs	r1, r1, #2
    359c:	0089      	lsls	r1, r1, #2
    359e:	6379      	str	r1, [r7, #52]	; 0x34
    struct eventData xDatas[xNumOfOut];
    35a0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    35a2:	1e71      	subs	r1, r6, #1
    35a4:	6339      	str	r1, [r7, #48]	; 0x30
    35a6:	4631      	mov	r1, r6
    35a8:	4608      	mov	r0, r1
    35aa:	f04f 0100 	mov.w	r1, #0
    35ae:	01cd      	lsls	r5, r1, #7
    35b0:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    35b4:	01c4      	lsls	r4, r0, #7
    35b6:	4631      	mov	r1, r6
    35b8:	4608      	mov	r0, r1
    35ba:	f04f 0100 	mov.w	r1, #0
    35be:	01cb      	lsls	r3, r1, #7
    35c0:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    35c4:	01c2      	lsls	r2, r0, #7
    35c6:	4633      	mov	r3, r6
    35c8:	011b      	lsls	r3, r3, #4
    35ca:	3303      	adds	r3, #3
    35cc:	3307      	adds	r3, #7
    35ce:	08db      	lsrs	r3, r3, #3
    35d0:	00db      	lsls	r3, r3, #3
    35d2:	ebad 0d03 	sub.w	sp, sp, r3
    35d6:	466b      	mov	r3, sp
    35d8:	3303      	adds	r3, #3
    35da:	089b      	lsrs	r3, r3, #2
    35dc:	009b      	lsls	r3, r3, #2
    35de:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    35e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    35e2:	69db      	ldr	r3, [r3, #28]
    35e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    35e6:	f640 33c8 	movw	r3, #3016	; 0xbc8
    35ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    35f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35f4:	4618      	mov	r0, r3
    35f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    35f8:	f002 f904 	bl	5804 <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    35fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    35fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3600:	4619      	mov	r1, r3
    3602:	f7ff fd6d 	bl	30e0 <vEventReceiveAll>

#ifdef SERVANT_PRINT
        vPrintNumber(xMyFlag);
    3606:	6c78      	ldr	r0, [r7, #68]	; 0x44
    3608:	f013 fd2e 	bl	17068 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCountFromISR();
    360c:	f001 fc64 	bl	4ed8 <xTaskGetTickCountFromISR>
    3610:	6278      	str	r0, [r7, #36]	; 0x24
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3612:	f640 33c8 	movw	r3, #3016	; 0xbc8
    3616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    361a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    361c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3620:	4618      	mov	r0, r3
    3622:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3624:	f002 f8e0 	bl	57e8 <vTaskSetxStartTime>

#ifdef SERVANT_PRINT
        vPrintNumber( xCurrentTime );
    3628:	6a78      	ldr	r0, [r7, #36]	; 0x24
    362a:	f013 fd1d 	bl	17068 <vPrintNumber>
#endif
        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    362e:	2300      	movs	r3, #0
    3630:	657b      	str	r3, [r7, #84]	; 0x54
    3632:	e01e      	b.n	3672 <vServant+0x14a>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    3634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3636:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    363c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    363e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3640:	0112      	lsls	r2, r2, #4
    3642:	188c      	adds	r4, r1, r2
    3644:	f107 0208 	add.w	r2, r7, #8
    3648:	4610      	mov	r0, r2
    364a:	4619      	mov	r1, r3
    364c:	f7ff f9ce 	bl	29ec <xEventGetxData>
    3650:	f107 0308 	add.w	r3, r7, #8
    3654:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3656:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    365a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    365e:	441a      	add	r2, r3
    3660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3664:	011b      	lsls	r3, r3, #4
    3666:	440b      	add	r3, r1
    3668:	3304      	adds	r3, #4
    366a:	601a      	str	r2, [r3, #0]

#ifdef SERVANT_PRINT
        vPrintNumber( xCurrentTime );
#endif
        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    366c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    366e:	3301      	adds	r3, #1
    3670:	657b      	str	r3, [r7, #84]	; 0x54
    3672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3676:	429a      	cmp	r2, r3
    3678:	dbdc      	blt.n	3634 <vServant+0x10c>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }
#endif

        vEventDeleteAll( pvMyParameter, pxEvent );        
    367a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    367c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    367e:	4619      	mov	r1, r3
    3680:	f7ff fdaa 	bl	31d8 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    3684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3686:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3688:	4619      	mov	r1, r3
    368a:	f7ff fdc3 	bl	3214 <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3690:	681a      	ldr	r2, [r3, #0]
    3692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3694:	429a      	cmp	r2, r3
    3696:	d20a      	bcs.n	36ae <vServant+0x186>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    3698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	4618      	mov	r0, r3
    369e:	f013 fce3 	bl	17068 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    36a2:	f248 601c 	movw	r0, #34332	; 0x861c
    36a6:	f2c0 0001 	movt	r0, #1
    36aa:	f013 fcc3 	bl	17034 <vPrintString>
        }
#ifdef SERVANT_LET
        vTaskDelayLET();
    36ae:	f7ff fcf7 	bl	30a0 <vTaskDelayLET>

        //vPrintNumber( xCurrentTime );
        //vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // output the ready time of task
        //vPrintNumber( xDatas[0].xNextPeriod );  // output the deadline of task
#ifdef SERVANT_PRINT
        xCurrentTime = xTaskGetTickCount();
    36b2:	f001 fbff 	bl	4eb4 <xTaskGetTickCount>
    36b6:	6278      	str	r0, [r7, #36]	; 0x24
        vPrintNumber( xCurrentTime );
    36b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    36ba:	f013 fcd5 	bl	17068 <vPrintNumber>
        vPrintNumber( (xMyFlag + 10) * 3 );
    36be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    36c0:	f103 020a 	add.w	r2, r3, #10
    36c4:	4613      	mov	r3, r2
    36c6:	005b      	lsls	r3, r3, #1
    36c8:	4413      	add	r3, r2
    36ca:	4618      	mov	r0, r3
    36cc:	f013 fccc 	bl	17068 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    36d0:	f001 fbf0 	bl	4eb4 <xTaskGetTickCount>
    36d4:	6278      	str	r0, [r7, #36]	; 0x24
        if( xCurrentTime > 1000000 )
    36d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    36d8:	f244 2340 	movw	r3, #16960	; 0x4240
    36dc:	f2c0 030f 	movt	r3, #15
    36e0:	429a      	cmp	r2, r3
    36e2:	d900      	bls.n	36e6 <vServant+0x1be>
        {
            break;
    36e4:	e00c      	b.n	3700 <vServant+0x1d8>
        }

        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    36e6:	f640 333c 	movw	r3, #2876	; 0xb3c
    36ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    36f2:	4618      	mov	r0, r3
    36f4:	2100      	movs	r1, #0
    36f6:	2200      	movs	r2, #0
    36f8:	2300      	movs	r3, #0
    36fa:	f000 fc61 	bl	3fc0 <xQueueGenericSend>
    }
    36fe:	e77d      	b.n	35fc <vServant+0xd4>
    3700:	687b      	ldr	r3, [r7, #4]
    3702:	469d      	mov	sp, r3
}
    3704:	375c      	adds	r7, #92	; 0x5c
    3706:	46bd      	mov	sp, r7
    3708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000370c <vR_Servant>:

void vR_Servant( void * pvParameter)
{
    370c:	b580      	push	{r7, lr}
    370e:	b090      	sub	sp, #64	; 0x40
    3710:	af00      	add	r7, sp, #0
    3712:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3718:	6abb      	ldr	r3, [r7, #40]	; 0x28
    371a:	681b      	ldr	r3, [r3, #0]
    371c:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3720:	69db      	ldr	r3, [r3, #28]
    3722:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3724:	f640 33c8 	movw	r3, #3016	; 0xbc8
    3728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    372e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3732:	4618      	mov	r0, r3
    3734:	6a39      	ldr	r1, [r7, #32]
    3736:	f002 f865 	bl	5804 <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    373a:	f640 333c 	movw	r3, #2876	; 0xb3c
    373e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3748:	4618      	mov	r0, r3
    374a:	2100      	movs	r1, #0
    374c:	f04f 32ff 	mov.w	r2, #4294967295
    3750:	2300      	movs	r3, #0
    3752:	f000 fcfb 	bl	414c <xQueueGenericReceive>
#ifdef RSERVANT_PRINT
        vPrintNumber( xMyFlag );
#endif
        
        xCurrentTime = xTaskGetTickCount();
    3756:	f001 fbad 	bl	4eb4 <xTaskGetTickCount>
    375a:	61f8      	str	r0, [r7, #28]
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    375c:	f640 33c8 	movw	r3, #3016	; 0xbc8
    3760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    376a:	4618      	mov	r0, r3
    376c:	69f9      	ldr	r1, [r7, #28]
    376e:	f002 f83b 	bl	57e8 <vTaskSetxStartTime>
#ifdef RSERVANT_PRINT
        vPrintNumber( xCurrentTime );
#endif

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    3772:	2300      	movs	r3, #0
    3774:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3776:	e094      	b.n	38a2 <vR_Servant+0x196>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    3778:	f107 030c 	add.w	r3, r7, #12
    377c:	4618      	mov	r0, r3
    377e:	f240 5134 	movw	r1, #1332	; 0x534
    3782:	f2c2 0100 	movt	r1, #8192	; 0x2000
    3786:	f7ff fa7b 	bl	2c80 <xEventListGenericTransit>
    378a:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    378e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3792:	d100      	bne.n	3796 <vR_Servant+0x8a>
            {
                // no event
                break;
    3794:	e089      	b.n	38aa <vR_Servant+0x19e>
            }
            else if( xResult == 0 )
    3796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3798:	2b00      	cmp	r3, #0
    379a:	d100      	bne.n	379e <vR_Servant+0x92>
            {
                // not time yet
                //break;
                continue;
    379c:	e081      	b.n	38a2 <vR_Servant+0x196>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    379e:	68fb      	ldr	r3, [r7, #12]
    37a0:	68db      	ldr	r3, [r3, #12]
    37a2:	4618      	mov	r0, r3
    37a4:	f7ff f904 	bl	29b0 <xEventGetpxDestination>
    37a8:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    37aa:	68fb      	ldr	r3, [r7, #12]
    37ac:	68db      	ldr	r3, [r3, #12]
    37ae:	4618      	mov	r0, r3
    37b0:	f7ff f8f2 	bl	2998 <xEventGetpxSource>
    37b4:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    37b6:	2301      	movs	r3, #1
    37b8:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    37ba:	2300      	movs	r3, #0
    37bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    37be:	e068      	b.n	3892 <vR_Servant+0x186>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    37c0:	f240 12ac 	movw	r2, #428	; 0x1ac
    37c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37ca:	460b      	mov	r3, r1
    37cc:	005b      	lsls	r3, r3, #1
    37ce:	440b      	add	r3, r1
    37d0:	009b      	lsls	r3, r3, #2
    37d2:	4413      	add	r3, r2
    37d4:	3304      	adds	r3, #4
    37d6:	681b      	ldr	r3, [r3, #0]
    37d8:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    37da:	f240 12ac 	movw	r2, #428	; 0x1ac
    37de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37e4:	460b      	mov	r3, r1
    37e6:	005b      	lsls	r3, r3, #1
    37e8:	440b      	add	r3, r1
    37ea:	009b      	lsls	r3, r3, #2
    37ec:	4413      	add	r3, r2
    37ee:	3308      	adds	r3, #8
    37f0:	681b      	ldr	r3, [r3, #0]
    37f2:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    37f4:	f640 33c8 	movw	r3, #3016	; 0xbc8
    37f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37fc:	693a      	ldr	r2, [r7, #16]
    37fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3804:	429a      	cmp	r2, r3
    3806:	d141      	bne.n	388c <vR_Servant+0x180>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    3808:	f640 33c8 	movw	r3, #3016	; 0xbc8
    380c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3810:	697a      	ldr	r2, [r7, #20]
    3812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3816:	69bb      	ldr	r3, [r7, #24]
    3818:	429a      	cmp	r2, r3
    381a:	d127      	bne.n	386c <vR_Servant+0x160>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    381c:	f240 12ac 	movw	r2, #428	; 0x1ac
    3820:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3824:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3826:	460b      	mov	r3, r1
    3828:	005b      	lsls	r3, r3, #1
    382a:	440b      	add	r3, r1
    382c:	009b      	lsls	r3, r3, #2
    382e:	4413      	add	r3, r2
    3830:	330c      	adds	r3, #12
    3832:	681b      	ldr	r3, [r3, #0]
    3834:	2b02      	cmp	r3, #2
    3836:	d10b      	bne.n	3850 <vR_Servant+0x144>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    3838:	f248 6044 	movw	r0, #34372	; 0x8644
    383c:	f2c0 0001 	movt	r0, #1
    3840:	f013 fbf8 	bl	17034 <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    3844:	68fb      	ldr	r3, [r7, #12]
    3846:	68db      	ldr	r3, [r3, #12]
    3848:	4618      	mov	r0, r3
    384a:	f7ff facb 	bl	2de4 <vEventGenericDelete>
    384e:	e01d      	b.n	388c <vR_Servant+0x180>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    3850:	f240 12ac 	movw	r2, #428	; 0x1ac
    3854:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3858:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    385a:	460b      	mov	r3, r1
    385c:	005b      	lsls	r3, r3, #1
    385e:	440b      	add	r3, r1
    3860:	009b      	lsls	r3, r3, #2
    3862:	4413      	add	r3, r2
    3864:	330c      	adds	r3, #12
    3866:	2202      	movs	r2, #2
    3868:	601a      	str	r2, [r3, #0]
    386a:	e00f      	b.n	388c <vR_Servant+0x180>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    386c:	f240 12ac 	movw	r2, #428	; 0x1ac
    3870:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3874:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3876:	460b      	mov	r3, r1
    3878:	005b      	lsls	r3, r3, #1
    387a:	440b      	add	r3, r1
    387c:	009b      	lsls	r3, r3, #2
    387e:	4413      	add	r3, r2
    3880:	330c      	adds	r3, #12
    3882:	681b      	ldr	r3, [r3, #0]
    3884:	2b01      	cmp	r3, #1
    3886:	d101      	bne.n	388c <vR_Servant+0x180>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    3888:	2300      	movs	r3, #0
    388a:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    388c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    388e:	3301      	adds	r3, #1
    3890:	63fb      	str	r3, [r7, #60]	; 0x3c
    3892:	f240 13ac 	movw	r3, #428	; 0x1ac
    3896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    389a:	681a      	ldr	r2, [r3, #0]
    389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    389e:	429a      	cmp	r2, r3
    38a0:	dc8e      	bgt.n	37c0 <vR_Servant+0xb4>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    38a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38a4:	2b00      	cmp	r3, #0
    38a6:	f43f af67 	beq.w	3778 <vR_Servant+0x6c>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    38aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    38b0:	d100      	bne.n	38b4 <vR_Servant+0x1a8>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue; 
    38b2:	e045      	b.n	3940 <vR_Servant+0x234>
        }
        else if ( xResult == 0 )
    38b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38b6:	2b00      	cmp	r3, #0
    38b8:	d100      	bne.n	38bc <vR_Servant+0x1b0>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue;
    38ba:	e041      	b.n	3940 <vR_Servant+0x234>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38bc:	2300      	movs	r3, #0
    38be:	63fb      	str	r3, [r7, #60]	; 0x3c
    38c0:	e028      	b.n	3914 <vR_Servant+0x208>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    38c2:	f240 12ac 	movw	r2, #428	; 0x1ac
    38c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    38cc:	460b      	mov	r3, r1
    38ce:	005b      	lsls	r3, r3, #1
    38d0:	440b      	add	r3, r1
    38d2:	009b      	lsls	r3, r3, #2
    38d4:	4413      	add	r3, r2
    38d6:	3308      	adds	r3, #8
    38d8:	681b      	ldr	r3, [r3, #0]
    38da:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    38dc:	f640 33c8 	movw	r3, #3016	; 0xbc8
    38e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e4:	693a      	ldr	r2, [r7, #16]
    38e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    38ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38ec:	429a      	cmp	r2, r3
    38ee:	d10e      	bne.n	390e <vR_Servant+0x202>
                {
                    xRelations.xRelation[i].xFlag = 1;
    38f0:	f240 12ac 	movw	r2, #428	; 0x1ac
    38f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    38fa:	460b      	mov	r3, r1
    38fc:	005b      	lsls	r3, r3, #1
    38fe:	440b      	add	r3, r1
    3900:	009b      	lsls	r3, r3, #2
    3902:	4413      	add	r3, r2
    3904:	330c      	adds	r3, #12
    3906:	2201      	movs	r2, #1
    3908:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    390a:	693b      	ldr	r3, [r7, #16]
    390c:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    390e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3910:	3301      	adds	r3, #1
    3912:	63fb      	str	r3, [r7, #60]	; 0x3c
    3914:	f240 13ac 	movw	r3, #428	; 0x1ac
    3918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    391c:	681a      	ldr	r2, [r3, #0]
    391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3920:	429a      	cmp	r2, r3
    3922:	dcce      	bgt.n	38c2 <vR_Servant+0x1b6>
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    3924:	f640 333c 	movw	r3, #2876	; 0xb3c
    3928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    392c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    392e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3932:	4618      	mov	r0, r3
    3934:	2100      	movs	r1, #0
    3936:	2200      	movs	r2, #0
    3938:	2300      	movs	r3, #0
    393a:	f000 fb41 	bl	3fc0 <xQueueGenericSend>
        }
    }
    393e:	e6fc      	b.n	373a <vR_Servant+0x2e>
    3940:	e6fb      	b.n	373a <vR_Servant+0x2e>
    3942:	bf00      	nop

00003944 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0, servant 0, 1, 2*/
void s_0(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3944:	b480      	push	{r7}
    3946:	b085      	sub	sp, #20
    3948:	af00      	add	r7, sp, #0
    394a:	60f8      	str	r0, [r7, #12]
    394c:	60b9      	str	r1, [r7, #8]
    394e:	607a      	str	r2, [r7, #4]
    3950:	603b      	str	r3, [r7, #0]
    // do actuator
    // do sensor
}
    3952:	3714      	adds	r7, #20
    3954:	46bd      	mov	sp, r7
    3956:	f85d 7b04 	ldr.w	r7, [sp], #4
    395a:	4770      	bx	lr

0000395c <s_1>:
void s_1(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    395c:	b580      	push	{r7, lr}
    395e:	b084      	sub	sp, #16
    3960:	af00      	add	r7, sp, #0
    3962:	60f8      	str	r0, [r7, #12]
    3964:	60b9      	str	r1, [r7, #8]
    3966:	607a      	str	r2, [r7, #4]
    3968:	603b      	str	r3, [r7, #0]
    last_radio_from_ppm(); // ppm.h
    396a:	f012 f9a1 	bl	15cb0 <last_radio_from_ppm>
}
    396e:	3710      	adds	r7, #16
    3970:	46bd      	mov	sp, r7
    3972:	bd80      	pop	{r7, pc}

00003974 <s_2>:
void s_2(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3974:	b480      	push	{r7}
    3976:	b085      	sub	sp, #20
    3978:	af00      	add	r7, sp, #0
    397a:	60f8      	str	r0, [r7, #12]
    397c:	60b9      	str	r1, [r7, #8]
    397e:	607a      	str	r2, [r7, #4]
    3980:	603b      	str	r3, [r7, #0]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3982:	3714      	adds	r7, #20
    3984:	46bd      	mov	sp, r7
    3986:	f85d 7b04 	ldr.w	r7, [sp], #4
    398a:	4770      	bx	lr

0000398c <s_3>:

/*task1, servant 3, 4, 5*/

void s_3(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    398c:	b480      	push	{r7}
    398e:	b085      	sub	sp, #20
    3990:	af00      	add	r7, sp, #0
    3992:	60f8      	str	r0, [r7, #12]
    3994:	60b9      	str	r1, [r7, #8]
    3996:	607a      	str	r2, [r7, #4]
    3998:	603b      	str	r3, [r7, #0]
}
    399a:	3714      	adds	r7, #20
    399c:	46bd      	mov	sp, r7
    399e:	f85d 7b04 	ldr.w	r7, [sp], #4
    39a2:	4770      	bx	lr

000039a4 <s_4>:
void s_4(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39a4:	b580      	push	{r7, lr}
    39a6:	b084      	sub	sp, #16
    39a8:	af00      	add	r7, sp, #0
    39aa:	60f8      	str	r0, [r7, #12]
    39ac:	60b9      	str	r1, [r7, #8]
    39ae:	607a      	str	r2, [r7, #4]
    39b0:	603b      	str	r3, [r7, #0]
    to_autopilot_from_last_radio(); // main.c
    39b2:	f012 fd37 	bl	16424 <to_autopilot_from_last_radio>
}
    39b6:	3710      	adds	r7, #16
    39b8:	46bd      	mov	sp, r7
    39ba:	bd80      	pop	{r7, pc}

000039bc <s_5>:
void s_5(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39bc:	b580      	push	{r7, lr}
    39be:	b084      	sub	sp, #16
    39c0:	af00      	add	r7, sp, #0
    39c2:	60f8      	str	r0, [r7, #12]
    39c4:	60b9      	str	r1, [r7, #8]
    39c6:	607a      	str	r2, [r7, #4]
    39c8:	603b      	str	r3, [r7, #0]
    spi_reset(); // spi_fbw.h
    39ca:	f012 fc69 	bl	162a0 <spi_reset>
}
    39ce:	3710      	adds	r7, #16
    39d0:	46bd      	mov	sp, r7
    39d2:	bd80      	pop	{r7, pc}

000039d4 <s_6>:

/*task 2, servant 6, 7*/
void s_6(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39d4:	b480      	push	{r7}
    39d6:	b085      	sub	sp, #20
    39d8:	af00      	add	r7, sp, #0
    39da:	60f8      	str	r0, [r7, #12]
    39dc:	60b9      	str	r1, [r7, #8]
    39de:	607a      	str	r2, [r7, #4]
    39e0:	603b      	str	r3, [r7, #0]
}
    39e2:	3714      	adds	r7, #20
    39e4:	46bd      	mov	sp, r7
    39e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ea:	4770      	bx	lr

000039ec <s_7>:
void s_7(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39ec:	b580      	push	{r7, lr}
    39ee:	b084      	sub	sp, #16
    39f0:	af00      	add	r7, sp, #0
    39f2:	60f8      	str	r0, [r7, #12]
    39f4:	60b9      	str	r1, [r7, #8]
    39f6:	607a      	str	r2, [r7, #4]
    39f8:	603b      	str	r3, [r7, #0]
    check_mega128_values_task(); // main.c
    39fa:	f012 fe5b 	bl	166b4 <check_mega128_values_task>
}
    39fe:	3710      	adds	r7, #16
    3a00:	46bd      	mov	sp, r7
    3a02:	bd80      	pop	{r7, pc}

00003a04 <s_8>:

/*task 3, servant 8, 9*/ 
void s_8(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a04:	b480      	push	{r7}
    3a06:	b085      	sub	sp, #20
    3a08:	af00      	add	r7, sp, #0
    3a0a:	60f8      	str	r0, [r7, #12]
    3a0c:	60b9      	str	r1, [r7, #8]
    3a0e:	607a      	str	r2, [r7, #4]
    3a10:	603b      	str	r3, [r7, #0]
}
    3a12:	3714      	adds	r7, #20
    3a14:	46bd      	mov	sp, r7
    3a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a1a:	4770      	bx	lr

00003a1c <s_9>:
void s_9(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a1c:	b580      	push	{r7, lr}
    3a1e:	b084      	sub	sp, #16
    3a20:	af00      	add	r7, sp, #0
    3a22:	60f8      	str	r0, [r7, #12]
    3a24:	60b9      	str	r1, [r7, #8]
    3a26:	607a      	str	r2, [r7, #4]
    3a28:	603b      	str	r3, [r7, #0]
    servo_transmit(); //servo.h
    3a2a:	f012 ff1b 	bl	16864 <servo_transmit>
}
    3a2e:	3710      	adds	r7, #16
    3a30:	46bd      	mov	sp, r7
    3a32:	bd80      	pop	{r7, pc}

00003a34 <s_10>:

/*task 4, servant 10, 11*/
void s_10(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a34:	b480      	push	{r7}
    3a36:	b085      	sub	sp, #20
    3a38:	af00      	add	r7, sp, #0
    3a3a:	60f8      	str	r0, [r7, #12]
    3a3c:	60b9      	str	r1, [r7, #8]
    3a3e:	607a      	str	r2, [r7, #4]
    3a40:	603b      	str	r3, [r7, #0]
}
    3a42:	3714      	adds	r7, #20
    3a44:	46bd      	mov	sp, r7
    3a46:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a4a:	4770      	bx	lr

00003a4c <s_11>:
void s_11(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a4c:	b580      	push	{r7, lr}
    3a4e:	b084      	sub	sp, #16
    3a50:	af00      	add	r7, sp, #0
    3a52:	60f8      	str	r0, [r7, #12]
    3a54:	60b9      	str	r1, [r7, #8]
    3a56:	607a      	str	r2, [r7, #4]
    3a58:	603b      	str	r3, [r7, #0]
    check_failsafe_task(); // main.c
    3a5a:	f012 fe21 	bl	166a0 <check_failsafe_task>
}
    3a5e:	3710      	adds	r7, #16
    3a60:	46bd      	mov	sp, r7
    3a62:	bd80      	pop	{r7, pc}

00003a64 <s_12>:

/*task 5, servant 12, 13, 14*/
void s_12(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a64:	b480      	push	{r7}
    3a66:	b085      	sub	sp, #20
    3a68:	af00      	add	r7, sp, #0
    3a6a:	60f8      	str	r0, [r7, #12]
    3a6c:	60b9      	str	r1, [r7, #8]
    3a6e:	607a      	str	r2, [r7, #4]
    3a70:	603b      	str	r3, [r7, #0]
}
    3a72:	3714      	adds	r7, #20
    3a74:	46bd      	mov	sp, r7
    3a76:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a7a:	4770      	bx	lr

00003a7c <s_13>:
void s_13(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a7c:	b580      	push	{r7, lr}
    3a7e:	b084      	sub	sp, #16
    3a80:	af00      	add	r7, sp, #0
    3a82:	60f8      	str	r0, [r7, #12]
    3a84:	60b9      	str	r1, [r7, #8]
    3a86:	607a      	str	r2, [r7, #4]
    3a88:	603b      	str	r3, [r7, #0]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3a8a:	f009 f8a3 	bl	cbd4 <radio_control_task>
}
    3a8e:	3710      	adds	r7, #16
    3a90:	46bd      	mov	sp, r7
    3a92:	bd80      	pop	{r7, pc}

00003a94 <s_14>:
void s_14(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a94:	b580      	push	{r7, lr}
    3a96:	b084      	sub	sp, #16
    3a98:	af00      	add	r7, sp, #0
    3a9a:	60f8      	str	r0, [r7, #12]
    3a9c:	60b9      	str	r1, [r7, #8]
    3a9e:	607a      	str	r2, [r7, #4]
    3aa0:	603b      	str	r3, [r7, #0]
    ir_gain_calib(); //infrared.h
    3aa2:	f00d ff49 	bl	11938 <ir_gain_calib>
}
    3aa6:	3710      	adds	r7, #16
    3aa8:	46bd      	mov	sp, r7
    3aaa:	bd80      	pop	{r7, pc}

00003aac <s_15>:

/*task 6, servant 15,16,17,18*/ 
void s_15(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3aac:	b480      	push	{r7}
    3aae:	b085      	sub	sp, #20
    3ab0:	af00      	add	r7, sp, #0
    3ab2:	60f8      	str	r0, [r7, #12]
    3ab4:	60b9      	str	r1, [r7, #8]
    3ab6:	607a      	str	r2, [r7, #4]
    3ab8:	603b      	str	r3, [r7, #0]
}
    3aba:	3714      	adds	r7, #20
    3abc:	46bd      	mov	sp, r7
    3abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ac2:	4770      	bx	lr

00003ac4 <s_16>:
void s_16(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3ac4:	b580      	push	{r7, lr}
    3ac6:	b084      	sub	sp, #16
    3ac8:	af00      	add	r7, sp, #0
    3aca:	60f8      	str	r0, [r7, #12]
    3acc:	60b9      	str	r1, [r7, #8]
    3ace:	607a      	str	r2, [r7, #4]
    3ad0:	603b      	str	r3, [r7, #0]
    ir_update(); // infrared.h
    3ad2:	f00d fef3 	bl	118bc <ir_update>
}
    3ad6:	3710      	adds	r7, #16
    3ad8:	46bd      	mov	sp, r7
    3ada:	bd80      	pop	{r7, pc}

00003adc <s_17>:
void s_17(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3adc:	b580      	push	{r7, lr}
    3ade:	b084      	sub	sp, #16
    3ae0:	af00      	add	r7, sp, #0
    3ae2:	60f8      	str	r0, [r7, #12]
    3ae4:	60b9      	str	r1, [r7, #8]
    3ae6:	607a      	str	r2, [r7, #4]
    3ae8:	603b      	str	r3, [r7, #0]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3aea:	f011 f96f 	bl	14dcc <estimator_update_state_infrared>
}
    3aee:	3710      	adds	r7, #16
    3af0:	46bd      	mov	sp, r7
    3af2:	bd80      	pop	{r7, pc}

00003af4 <s_18>:
void s_18(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3af4:	b580      	push	{r7, lr}
    3af6:	b084      	sub	sp, #16
    3af8:	af00      	add	r7, sp, #0
    3afa:	60f8      	str	r0, [r7, #12]
    3afc:	60b9      	str	r1, [r7, #8]
    3afe:	607a      	str	r2, [r7, #4]
    3b00:	603b      	str	r3, [r7, #0]
    roll_pitch_pid_run(); // pid.h
    3b02:	f00d ff49 	bl	11998 <roll_pitch_pid_run>
}
    3b06:	3710      	adds	r7, #16
    3b08:	46bd      	mov	sp, r7
    3b0a:	bd80      	pop	{r7, pc}

00003b0c <s_19>:

/*task 7, servant 19, 20*/
void s_19(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b0c:	b480      	push	{r7}
    3b0e:	b085      	sub	sp, #20
    3b10:	af00      	add	r7, sp, #0
    3b12:	60f8      	str	r0, [r7, #12]
    3b14:	60b9      	str	r1, [r7, #8]
    3b16:	607a      	str	r2, [r7, #4]
    3b18:	603b      	str	r3, [r7, #0]
}
    3b1a:	3714      	adds	r7, #20
    3b1c:	46bd      	mov	sp, r7
    3b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b22:	4770      	bx	lr

00003b24 <s_20>:
void s_20(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b24:	b580      	push	{r7, lr}
    3b26:	b084      	sub	sp, #16
    3b28:	af00      	add	r7, sp, #0
    3b2a:	60f8      	str	r0, [r7, #12]
    3b2c:	60b9      	str	r1, [r7, #8]
    3b2e:	607a      	str	r2, [r7, #4]
    3b30:	603b      	str	r3, [r7, #0]
    link_fbw_send(); //link_fbw.h
    3b32:	f00d f935 	bl	10da0 <link_fbw_send>
}
    3b36:	3710      	adds	r7, #16
    3b38:	46bd      	mov	sp, r7
    3b3a:	bd80      	pop	{r7, pc}

00003b3c <s_21>:

/*task 8, sevrvant 21,22,23*/
void s_21(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b3c:	b480      	push	{r7}
    3b3e:	b085      	sub	sp, #20
    3b40:	af00      	add	r7, sp, #0
    3b42:	60f8      	str	r0, [r7, #12]
    3b44:	60b9      	str	r1, [r7, #8]
    3b46:	607a      	str	r2, [r7, #4]
    3b48:	603b      	str	r3, [r7, #0]
}
    3b4a:	3714      	adds	r7, #20
    3b4c:	46bd      	mov	sp, r7
    3b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b52:	4770      	bx	lr

00003b54 <s_22>:
void s_22(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b54:	b580      	push	{r7, lr}
    3b56:	b084      	sub	sp, #16
    3b58:	af00      	add	r7, sp, #0
    3b5a:	60f8      	str	r0, [r7, #12]
    3b5c:	60b9      	str	r1, [r7, #8]
    3b5e:	607a      	str	r2, [r7, #4]
    3b60:	603b      	str	r3, [r7, #0]
    parse_gps_msg(); //gps.h
    3b62:	f00d fbf5 	bl	11350 <parse_gps_msg>
}
    3b66:	3710      	adds	r7, #16
    3b68:	46bd      	mov	sp, r7
    3b6a:	bd80      	pop	{r7, pc}

00003b6c <s_23>:
void s_23(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b6c:	b580      	push	{r7, lr}
    3b6e:	b084      	sub	sp, #16
    3b70:	af00      	add	r7, sp, #0
    3b72:	60f8      	str	r0, [r7, #12]
    3b74:	60b9      	str	r1, [r7, #8]
    3b76:	607a      	str	r2, [r7, #4]
    3b78:	603b      	str	r3, [r7, #0]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3b7a:	f00a fe11 	bl	e7a0 <send_gps_pos>
    send_radIR();
    3b7e:	f00b ffd5 	bl	fb2c <send_radIR>
    send_takeOff();
    3b82:	f00c fdcd 	bl	10720 <send_takeOff>
}
    3b86:	3710      	adds	r7, #16
    3b88:	46bd      	mov	sp, r7
    3b8a:	bd80      	pop	{r7, pc}

00003b8c <s_24>:

/*task 9, servant 24, 25, 26, 27*/
void s_24(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b8c:	b480      	push	{r7}
    3b8e:	b085      	sub	sp, #20
    3b90:	af00      	add	r7, sp, #0
    3b92:	60f8      	str	r0, [r7, #12]
    3b94:	60b9      	str	r1, [r7, #8]
    3b96:	607a      	str	r2, [r7, #4]
    3b98:	603b      	str	r3, [r7, #0]
}
    3b9a:	3714      	adds	r7, #20
    3b9c:	46bd      	mov	sp, r7
    3b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ba2:	4770      	bx	lr

00003ba4 <s_25>:
void s_25(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ba4:	b580      	push	{r7, lr}
    3ba6:	b084      	sub	sp, #16
    3ba8:	af00      	add	r7, sp, #0
    3baa:	60f8      	str	r0, [r7, #12]
    3bac:	60b9      	str	r1, [r7, #8]
    3bae:	607a      	str	r2, [r7, #4]
    3bb0:	603b      	str	r3, [r7, #0]
    nav_home(); // nav.h
    3bb2:	f010 fe8d 	bl	148d0 <nav_home>
}
    3bb6:	3710      	adds	r7, #16
    3bb8:	46bd      	mov	sp, r7
    3bba:	bd80      	pop	{r7, pc}

00003bbc <s_26>:
void s_26(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bbc:	b580      	push	{r7, lr}
    3bbe:	b084      	sub	sp, #16
    3bc0:	af00      	add	r7, sp, #0
    3bc2:	60f8      	str	r0, [r7, #12]
    3bc4:	60b9      	str	r1, [r7, #8]
    3bc6:	607a      	str	r2, [r7, #4]
    3bc8:	603b      	str	r3, [r7, #0]
    nav_update(); // nav.h
    3bca:	f010 fea7 	bl	1491c <nav_update>
}
    3bce:	3710      	adds	r7, #16
    3bd0:	46bd      	mov	sp, r7
    3bd2:	bd80      	pop	{r7, pc}

00003bd4 <s_27>:
void s_27(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bd4:	b580      	push	{r7, lr}
    3bd6:	b084      	sub	sp, #16
    3bd8:	af00      	add	r7, sp, #0
    3bda:	60f8      	str	r0, [r7, #12]
    3bdc:	60b9      	str	r1, [r7, #8]
    3bde:	607a      	str	r2, [r7, #4]
    3be0:	603b      	str	r3, [r7, #0]
    course_pid_run(); // pid.h
    3be2:	f00d ffc5 	bl	11b70 <course_pid_run>
}
    3be6:	3710      	adds	r7, #16
    3be8:	46bd      	mov	sp, r7
    3bea:	bd80      	pop	{r7, pc}

00003bec <s_28>:

/*task 10, servant 28, 29*/
void s_28(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bec:	b480      	push	{r7}
    3bee:	b085      	sub	sp, #20
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	60f8      	str	r0, [r7, #12]
    3bf4:	60b9      	str	r1, [r7, #8]
    3bf6:	607a      	str	r2, [r7, #4]
    3bf8:	603b      	str	r3, [r7, #0]
}
    3bfa:	3714      	adds	r7, #20
    3bfc:	46bd      	mov	sp, r7
    3bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c02:	4770      	bx	lr

00003c04 <s_29>:
void s_29(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c04:	b580      	push	{r7, lr}
    3c06:	b084      	sub	sp, #16
    3c08:	af00      	add	r7, sp, #0
    3c0a:	60f8      	str	r0, [r7, #12]
    3c0c:	60b9      	str	r1, [r7, #8]
    3c0e:	607a      	str	r2, [r7, #4]
    3c10:	603b      	str	r3, [r7, #0]
    altitude_pid_run(); // pid.h
    3c12:	f00e fa35 	bl	12080 <altitude_pid_run>
}
    3c16:	3710      	adds	r7, #16
    3c18:	46bd      	mov	sp, r7
    3c1a:	bd80      	pop	{r7, pc}

00003c1c <s_30>:

/*task 11, servant 30, 31*/
void s_30(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3c1c:	b480      	push	{r7}
    3c1e:	b085      	sub	sp, #20
    3c20:	af00      	add	r7, sp, #0
    3c22:	60f8      	str	r0, [r7, #12]
    3c24:	60b9      	str	r1, [r7, #8]
    3c26:	607a      	str	r2, [r7, #4]
    3c28:	603b      	str	r3, [r7, #0]
}
    3c2a:	3714      	adds	r7, #20
    3c2c:	46bd      	mov	sp, r7
    3c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c32:	4770      	bx	lr

00003c34 <s_31>:
void s_31(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3c34:	b580      	push	{r7, lr}
    3c36:	b084      	sub	sp, #16
    3c38:	af00      	add	r7, sp, #0
    3c3a:	60f8      	str	r0, [r7, #12]
    3c3c:	60b9      	str	r1, [r7, #8]
    3c3e:	607a      	str	r2, [r7, #4]
    3c40:	603b      	str	r3, [r7, #0]
    climb_pid_run(); // pid.h
    3c42:	f00e f84d 	bl	11ce0 <climb_pid_run>
}
    3c46:	3710      	adds	r7, #16
    3c48:	46bd      	mov	sp, r7
    3c4a:	bd80      	pop	{r7, pc}

00003c4c <s_32>:

/*task 12, servant 32, 33*/
void s_32(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c4c:	b480      	push	{r7}
    3c4e:	b085      	sub	sp, #20
    3c50:	af00      	add	r7, sp, #0
    3c52:	60f8      	str	r0, [r7, #12]
    3c54:	60b9      	str	r1, [r7, #8]
    3c56:	607a      	str	r2, [r7, #4]
    3c58:	603b      	str	r3, [r7, #0]
}
    3c5a:	3714      	adds	r7, #20
    3c5c:	46bd      	mov	sp, r7
    3c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c62:	4770      	bx	lr

00003c64 <s_33>:
void s_33(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c64:	b580      	push	{r7, lr}
    3c66:	b084      	sub	sp, #16
    3c68:	af00      	add	r7, sp, #0
    3c6a:	60f8      	str	r0, [r7, #12]
    3c6c:	60b9      	str	r1, [r7, #8]
    3c6e:	607a      	str	r2, [r7, #4]
    3c70:	603b      	str	r3, [r7, #0]
    // main.c
    send_boot();
    3c72:	f003 fa77 	bl	7164 <send_boot>
    send_attitude();
    3c76:	f004 fa45 	bl	8104 <send_attitude>
    send_adc();
    3c7a:	f004 ff37 	bl	8aec <send_adc>
    send_settings();
    3c7e:	f005 f9bd 	bl	8ffc <send_settings>
    send_desired();
    3c82:	f005 fdbf 	bl	9804 <send_desired>
    send_bat();
    3c86:	f006 fced 	bl	a664 <send_bat>
    send_climb();
    3c8a:	f007 f8a1 	bl	add0 <send_climb>
    send_mode();
    3c8e:	f007 fe11 	bl	b8b4 <send_mode>
    send_debug();
    3c92:	f008 f8e3 	bl	be5c <send_debug>
    send_nav_ref();
    3c96:	f008 fbb7 	bl	c408 <send_nav_ref>
}
    3c9a:	3710      	adds	r7, #16
    3c9c:	46bd      	mov	sp, r7
    3c9e:	bd80      	pop	{r7, pc}

00003ca0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3ca0:	b480      	push	{r7}
    3ca2:	b083      	sub	sp, #12
    3ca4:	af00      	add	r7, sp, #0
    3ca6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	f103 0208 	add.w	r2, r3, #8
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3cb2:	687b      	ldr	r3, [r7, #4]
    3cb4:	f04f 32ff 	mov.w	r2, #4294967295
    3cb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3cba:	687b      	ldr	r3, [r7, #4]
    3cbc:	f103 0208 	add.w	r2, r3, #8
    3cc0:	687b      	ldr	r3, [r7, #4]
    3cc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	f103 0208 	add.w	r2, r3, #8
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3cce:	687b      	ldr	r3, [r7, #4]
    3cd0:	2200      	movs	r2, #0
    3cd2:	601a      	str	r2, [r3, #0]
}
    3cd4:	370c      	adds	r7, #12
    3cd6:	46bd      	mov	sp, r7
    3cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cdc:	4770      	bx	lr
    3cde:	bf00      	nop

00003ce0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3ce0:	b480      	push	{r7}
    3ce2:	b083      	sub	sp, #12
    3ce4:	af00      	add	r7, sp, #0
    3ce6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3ce8:	687b      	ldr	r3, [r7, #4]
    3cea:	2200      	movs	r2, #0
    3cec:	611a      	str	r2, [r3, #16]
}
    3cee:	370c      	adds	r7, #12
    3cf0:	46bd      	mov	sp, r7
    3cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf6:	4770      	bx	lr

00003cf8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3cf8:	b480      	push	{r7}
    3cfa:	b085      	sub	sp, #20
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	6078      	str	r0, [r7, #4]
    3d00:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	685b      	ldr	r3, [r3, #4]
    3d06:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3d08:	68fb      	ldr	r3, [r7, #12]
    3d0a:	685a      	ldr	r2, [r3, #4]
    3d0c:	683b      	ldr	r3, [r7, #0]
    3d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3d10:	687b      	ldr	r3, [r7, #4]
    3d12:	685a      	ldr	r2, [r3, #4]
    3d14:	683b      	ldr	r3, [r7, #0]
    3d16:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3d18:	68fb      	ldr	r3, [r7, #12]
    3d1a:	685b      	ldr	r3, [r3, #4]
    3d1c:	683a      	ldr	r2, [r7, #0]
    3d1e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3d20:	68fb      	ldr	r3, [r7, #12]
    3d22:	683a      	ldr	r2, [r7, #0]
    3d24:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3d26:	687b      	ldr	r3, [r7, #4]
    3d28:	683a      	ldr	r2, [r7, #0]
    3d2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3d2c:	683b      	ldr	r3, [r7, #0]
    3d2e:	687a      	ldr	r2, [r7, #4]
    3d30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3d32:	687b      	ldr	r3, [r7, #4]
    3d34:	681b      	ldr	r3, [r3, #0]
    3d36:	1c5a      	adds	r2, r3, #1
    3d38:	687b      	ldr	r3, [r7, #4]
    3d3a:	601a      	str	r2, [r3, #0]
}
    3d3c:	3714      	adds	r7, #20
    3d3e:	46bd      	mov	sp, r7
    3d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d44:	4770      	bx	lr
    3d46:	bf00      	nop

00003d48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3d48:	b480      	push	{r7}
    3d4a:	b085      	sub	sp, #20
    3d4c:	af00      	add	r7, sp, #0
    3d4e:	6078      	str	r0, [r7, #4]
    3d50:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3d52:	683b      	ldr	r3, [r7, #0]
    3d54:	681b      	ldr	r3, [r3, #0]
    3d56:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3d58:	68bb      	ldr	r3, [r7, #8]
    3d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d5e:	d103      	bne.n	3d68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3d60:	687b      	ldr	r3, [r7, #4]
    3d62:	691b      	ldr	r3, [r3, #16]
    3d64:	60fb      	str	r3, [r7, #12]
    3d66:	e00c      	b.n	3d82 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	3308      	adds	r3, #8
    3d6c:	60fb      	str	r3, [r7, #12]
    3d6e:	e002      	b.n	3d76 <vListInsert+0x2e>
    3d70:	68fb      	ldr	r3, [r7, #12]
    3d72:	685b      	ldr	r3, [r3, #4]
    3d74:	60fb      	str	r3, [r7, #12]
    3d76:	68fb      	ldr	r3, [r7, #12]
    3d78:	685b      	ldr	r3, [r3, #4]
    3d7a:	681a      	ldr	r2, [r3, #0]
    3d7c:	68bb      	ldr	r3, [r7, #8]
    3d7e:	429a      	cmp	r2, r3
    3d80:	d9f6      	bls.n	3d70 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3d82:	68fb      	ldr	r3, [r7, #12]
    3d84:	685a      	ldr	r2, [r3, #4]
    3d86:	683b      	ldr	r3, [r7, #0]
    3d88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3d8a:	683b      	ldr	r3, [r7, #0]
    3d8c:	685b      	ldr	r3, [r3, #4]
    3d8e:	683a      	ldr	r2, [r7, #0]
    3d90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3d92:	683b      	ldr	r3, [r7, #0]
    3d94:	68fa      	ldr	r2, [r7, #12]
    3d96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3d98:	68fb      	ldr	r3, [r7, #12]
    3d9a:	683a      	ldr	r2, [r7, #0]
    3d9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3d9e:	683b      	ldr	r3, [r7, #0]
    3da0:	687a      	ldr	r2, [r7, #4]
    3da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3da4:	687b      	ldr	r3, [r7, #4]
    3da6:	681b      	ldr	r3, [r3, #0]
    3da8:	1c5a      	adds	r2, r3, #1
    3daa:	687b      	ldr	r3, [r7, #4]
    3dac:	601a      	str	r2, [r3, #0]
}
    3dae:	3714      	adds	r7, #20
    3db0:	46bd      	mov	sp, r7
    3db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3db6:	4770      	bx	lr

00003db8 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3db8:	b480      	push	{r7}
    3dba:	b085      	sub	sp, #20
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3dc0:	687b      	ldr	r3, [r7, #4]
    3dc2:	685b      	ldr	r3, [r3, #4]
    3dc4:	687a      	ldr	r2, [r7, #4]
    3dc6:	6892      	ldr	r2, [r2, #8]
    3dc8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	689b      	ldr	r3, [r3, #8]
    3dce:	687a      	ldr	r2, [r7, #4]
    3dd0:	6852      	ldr	r2, [r2, #4]
    3dd2:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	691b      	ldr	r3, [r3, #16]
    3dd8:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3dda:	68fb      	ldr	r3, [r7, #12]
    3ddc:	685a      	ldr	r2, [r3, #4]
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	429a      	cmp	r2, r3
    3de2:	d103      	bne.n	3dec <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3de4:	687b      	ldr	r3, [r7, #4]
    3de6:	689a      	ldr	r2, [r3, #8]
    3de8:	68fb      	ldr	r3, [r7, #12]
    3dea:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    3dec:	687b      	ldr	r3, [r7, #4]
    3dee:	2200      	movs	r2, #0
    3df0:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    3df2:	68fb      	ldr	r3, [r7, #12]
    3df4:	681b      	ldr	r3, [r3, #0]
    3df6:	1e5a      	subs	r2, r3, #1
    3df8:	68fb      	ldr	r3, [r7, #12]
    3dfa:	601a      	str	r2, [r3, #0]
}
    3dfc:	3714      	adds	r7, #20
    3dfe:	46bd      	mov	sp, r7
    3e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e04:	4770      	bx	lr
    3e06:	bf00      	nop

00003e08 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    3e08:	b580      	push	{r7, lr}
    3e0a:	b084      	sub	sp, #16
    3e0c:	af00      	add	r7, sp, #0
    3e0e:	6078      	str	r0, [r7, #4]
    3e10:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    3e12:	2301      	movs	r3, #1
    3e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    3e16:	683b      	ldr	r3, [r7, #0]
    3e18:	2b01      	cmp	r3, #1
    3e1a:	d00b      	beq.n	3e34 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3e1c:	687b      	ldr	r3, [r7, #4]
    3e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e20:	2b00      	cmp	r3, #0
    3e22:	d001      	beq.n	3e28 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    3e24:	2300      	movs	r3, #0
    3e26:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3e28:	687b      	ldr	r3, [r7, #4]
    3e2a:	691b      	ldr	r3, [r3, #16]
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	d001      	beq.n	3e34 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    3e30:	2300      	movs	r3, #0
    3e32:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    3e34:	68fb      	ldr	r3, [r7, #12]
    3e36:	2b01      	cmp	r3, #1
    3e38:	d12f      	bne.n	3e9a <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	681a      	ldr	r2, [r3, #0]
    3e3e:	687b      	ldr	r3, [r7, #4]
    3e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3e42:	6879      	ldr	r1, [r7, #4]
    3e44:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3e46:	fb01 f303 	mul.w	r3, r1, r3
    3e4a:	441a      	add	r2, r3
    3e4c:	687b      	ldr	r3, [r7, #4]
    3e4e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3e50:	687b      	ldr	r3, [r7, #4]
    3e52:	2200      	movs	r2, #0
    3e54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3e56:	687b      	ldr	r3, [r7, #4]
    3e58:	681a      	ldr	r2, [r3, #0]
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	681a      	ldr	r2, [r3, #0]
    3e62:	687b      	ldr	r3, [r7, #4]
    3e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3e66:	3b01      	subs	r3, #1
    3e68:	6879      	ldr	r1, [r7, #4]
    3e6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3e6c:	fb01 f303 	mul.w	r3, r1, r3
    3e70:	441a      	add	r2, r3
    3e72:	687b      	ldr	r3, [r7, #4]
    3e74:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3e76:	687b      	ldr	r3, [r7, #4]
    3e78:	f04f 32ff 	mov.w	r2, #4294967295
    3e7c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    3e7e:	687b      	ldr	r3, [r7, #4]
    3e80:	f04f 32ff 	mov.w	r2, #4294967295
    3e84:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3e86:	687b      	ldr	r3, [r7, #4]
    3e88:	3310      	adds	r3, #16
    3e8a:	4618      	mov	r0, r3
    3e8c:	f7ff ff08 	bl	3ca0 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3e90:	687b      	ldr	r3, [r7, #4]
    3e92:	3324      	adds	r3, #36	; 0x24
    3e94:	4618      	mov	r0, r3
    3e96:	f7ff ff03 	bl	3ca0 <vListInitialise>
	}

	return xReturn;
    3e9a:	68fb      	ldr	r3, [r7, #12]
}
    3e9c:	4618      	mov	r0, r3
    3e9e:	3710      	adds	r7, #16
    3ea0:	46bd      	mov	sp, r7
    3ea2:	bd80      	pop	{r7, pc}

00003ea4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    3ea4:	b580      	push	{r7, lr}
    3ea6:	b088      	sub	sp, #32
    3ea8:	af00      	add	r7, sp, #0
    3eaa:	60f8      	str	r0, [r7, #12]
    3eac:	60b9      	str	r1, [r7, #8]
    3eae:	4613      	mov	r3, r2
    3eb0:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3eb2:	2300      	movs	r3, #0
    3eb4:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    3eb6:	68fb      	ldr	r3, [r7, #12]
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d026      	beq.n	3f0a <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3ebc:	204c      	movs	r0, #76	; 0x4c
    3ebe:	f001 fda7 	bl	5a10 <pvPortMalloc>
    3ec2:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    3ec4:	69bb      	ldr	r3, [r7, #24]
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d01f      	beq.n	3f0a <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    3eca:	68fb      	ldr	r3, [r7, #12]
    3ecc:	68ba      	ldr	r2, [r7, #8]
    3ece:	fb02 f303 	mul.w	r3, r2, r3
    3ed2:	3301      	adds	r3, #1
    3ed4:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3ed6:	6978      	ldr	r0, [r7, #20]
    3ed8:	f001 fd9a 	bl	5a10 <pvPortMalloc>
    3edc:	4602      	mov	r2, r0
    3ede:	69bb      	ldr	r3, [r7, #24]
    3ee0:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    3ee2:	69bb      	ldr	r3, [r7, #24]
    3ee4:	681b      	ldr	r3, [r3, #0]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d00c      	beq.n	3f04 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    3eea:	69bb      	ldr	r3, [r7, #24]
    3eec:	68fa      	ldr	r2, [r7, #12]
    3eee:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    3ef0:	69bb      	ldr	r3, [r7, #24]
    3ef2:	68ba      	ldr	r2, [r7, #8]
    3ef4:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    3ef6:	69b8      	ldr	r0, [r7, #24]
    3ef8:	2101      	movs	r1, #1
    3efa:	f7ff ff85 	bl	3e08 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    3efe:	69bb      	ldr	r3, [r7, #24]
    3f00:	61fb      	str	r3, [r7, #28]
    3f02:	e002      	b.n	3f0a <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    3f04:	69b8      	ldr	r0, [r7, #24]
    3f06:	f001 fe47 	bl	5b98 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    3f0a:	69fb      	ldr	r3, [r7, #28]
}
    3f0c:	4618      	mov	r0, r3
    3f0e:	3720      	adds	r7, #32
    3f10:	46bd      	mov	sp, r7
    3f12:	bd80      	pop	{r7, pc}

00003f14 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    3f14:	b580      	push	{r7, lr}
    3f16:	b084      	sub	sp, #16
    3f18:	af00      	add	r7, sp, #0
    3f1a:	4603      	mov	r3, r0
    3f1c:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3f1e:	204c      	movs	r0, #76	; 0x4c
    3f20:	f001 fd76 	bl	5a10 <pvPortMalloc>
    3f24:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    3f26:	68fb      	ldr	r3, [r7, #12]
    3f28:	2b00      	cmp	r3, #0
    3f2a:	d02c      	beq.n	3f86 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    3f2c:	68fb      	ldr	r3, [r7, #12]
    3f2e:	2200      	movs	r2, #0
    3f30:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    3f32:	68fb      	ldr	r3, [r7, #12]
    3f34:	2200      	movs	r2, #0
    3f36:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    3f38:	68fb      	ldr	r3, [r7, #12]
    3f3a:	2200      	movs	r2, #0
    3f3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    3f3e:	68fb      	ldr	r3, [r7, #12]
    3f40:	2200      	movs	r2, #0
    3f42:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3f44:	68fb      	ldr	r3, [r7, #12]
    3f46:	2200      	movs	r2, #0
    3f48:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    3f4a:	68fb      	ldr	r3, [r7, #12]
    3f4c:	2201      	movs	r2, #1
    3f4e:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    3f50:	68fb      	ldr	r3, [r7, #12]
    3f52:	2200      	movs	r2, #0
    3f54:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    3f56:	68fb      	ldr	r3, [r7, #12]
    3f58:	f04f 32ff 	mov.w	r2, #4294967295
    3f5c:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    3f5e:	68fb      	ldr	r3, [r7, #12]
    3f60:	f04f 32ff 	mov.w	r2, #4294967295
    3f64:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3f66:	68fb      	ldr	r3, [r7, #12]
    3f68:	3310      	adds	r3, #16
    3f6a:	4618      	mov	r0, r3
    3f6c:	f7ff fe98 	bl	3ca0 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    3f70:	68fb      	ldr	r3, [r7, #12]
    3f72:	3324      	adds	r3, #36	; 0x24
    3f74:	4618      	mov	r0, r3
    3f76:	f7ff fe93 	bl	3ca0 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    3f7a:	68f8      	ldr	r0, [r7, #12]
    3f7c:	2100      	movs	r1, #0
    3f7e:	2200      	movs	r2, #0
    3f80:	2300      	movs	r3, #0
    3f82:	f000 f81d 	bl	3fc0 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    3f86:	68fb      	ldr	r3, [r7, #12]
	}
    3f88:	4618      	mov	r0, r3
    3f8a:	3710      	adds	r7, #16
    3f8c:	46bd      	mov	sp, r7
    3f8e:	bd80      	pop	{r7, pc}

00003f90 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    3f90:	b580      	push	{r7, lr}
    3f92:	b084      	sub	sp, #16
    3f94:	af00      	add	r7, sp, #0
    3f96:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    3f98:	f001 fcc0 	bl	591c <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	681b      	ldr	r3, [r3, #0]
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d103      	bne.n	3fac <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    3fa4:	687b      	ldr	r3, [r7, #4]
    3fa6:	685b      	ldr	r3, [r3, #4]
    3fa8:	60fb      	str	r3, [r7, #12]
    3faa:	e001      	b.n	3fb0 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    3fac:	2300      	movs	r3, #0
    3fae:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    3fb0:	f001 fcca 	bl	5948 <vPortExitCritical>
		
		return pxReturn;
    3fb4:	68fb      	ldr	r3, [r7, #12]
	}
    3fb6:	4618      	mov	r0, r3
    3fb8:	3710      	adds	r7, #16
    3fba:	46bd      	mov	sp, r7
    3fbc:	bd80      	pop	{r7, pc}
    3fbe:	bf00      	nop

00003fc0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3fc0:	b580      	push	{r7, lr}
    3fc2:	b088      	sub	sp, #32
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	60f8      	str	r0, [r7, #12]
    3fc8:	60b9      	str	r1, [r7, #8]
    3fca:	607a      	str	r2, [r7, #4]
    3fcc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3fce:	2300      	movs	r3, #0
    3fd0:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3fd2:	f001 fca3 	bl	591c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3fd6:	68fb      	ldr	r3, [r7, #12]
    3fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3fda:	68fb      	ldr	r3, [r7, #12]
    3fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3fde:	429a      	cmp	r2, r3
    3fe0:	d216      	bcs.n	4010 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3fe2:	68f8      	ldr	r0, [r7, #12]
    3fe4:	68b9      	ldr	r1, [r7, #8]
    3fe6:	683a      	ldr	r2, [r7, #0]
    3fe8:	f000 f9d6 	bl	4398 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3fec:	68fb      	ldr	r3, [r7, #12]
    3fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3ff0:	2b00      	cmp	r3, #0
    3ff2:	d009      	beq.n	4008 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3ff4:	68fb      	ldr	r3, [r7, #12]
    3ff6:	3324      	adds	r3, #36	; 0x24
    3ff8:	4618      	mov	r0, r3
    3ffa:	f001 f905 	bl	5208 <xTaskRemoveFromEventList>
    3ffe:	4603      	mov	r3, r0
    4000:	2b01      	cmp	r3, #1
    4002:	d101      	bne.n	4008 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    4004:	f001 fc7c 	bl	5900 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4008:	f001 fc9e 	bl	5948 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    400c:	2301      	movs	r3, #1
    400e:	e059      	b.n	40c4 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	2b00      	cmp	r3, #0
    4014:	d103      	bne.n	401e <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4016:	f001 fc97 	bl	5948 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    401a:	2300      	movs	r3, #0
    401c:	e052      	b.n	40c4 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    401e:	69fb      	ldr	r3, [r7, #28]
    4020:	2b00      	cmp	r3, #0
    4022:	d106      	bne.n	4032 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4024:	f107 0314 	add.w	r3, r7, #20
    4028:	4618      	mov	r0, r3
    402a:	f001 f945 	bl	52b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    402e:	2301      	movs	r3, #1
    4030:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4032:	f001 fc89 	bl	5948 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4036:	f000 fe93 	bl	4d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    403a:	f001 fc6f 	bl	591c <vPortEnterCritical>
    403e:	68fb      	ldr	r3, [r7, #12]
    4040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4042:	f1b3 3fff 	cmp.w	r3, #4294967295
    4046:	d102      	bne.n	404e <xQueueGenericSend+0x8e>
    4048:	68fb      	ldr	r3, [r7, #12]
    404a:	2200      	movs	r2, #0
    404c:	645a      	str	r2, [r3, #68]	; 0x44
    404e:	68fb      	ldr	r3, [r7, #12]
    4050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4052:	f1b3 3fff 	cmp.w	r3, #4294967295
    4056:	d102      	bne.n	405e <xQueueGenericSend+0x9e>
    4058:	68fb      	ldr	r3, [r7, #12]
    405a:	2200      	movs	r2, #0
    405c:	649a      	str	r2, [r3, #72]	; 0x48
    405e:	f001 fc73 	bl	5948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4062:	f107 0214 	add.w	r2, r7, #20
    4066:	1d3b      	adds	r3, r7, #4
    4068:	4610      	mov	r0, r2
    406a:	4619      	mov	r1, r3
    406c:	f001 f93c 	bl	52e8 <xTaskCheckForTimeOut>
    4070:	4603      	mov	r3, r0
    4072:	2b00      	cmp	r3, #0
    4074:	d11e      	bne.n	40b4 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4076:	68f8      	ldr	r0, [r7, #12]
    4078:	f000 fa86 	bl	4588 <prvIsQueueFull>
    407c:	4603      	mov	r3, r0
    407e:	2b00      	cmp	r3, #0
    4080:	d012      	beq.n	40a8 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    4082:	68fb      	ldr	r3, [r7, #12]
    4084:	f103 0210 	add.w	r2, r3, #16
    4088:	687b      	ldr	r3, [r7, #4]
    408a:	4610      	mov	r0, r2
    408c:	4619      	mov	r1, r3
    408e:	f001 f883 	bl	5198 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    4092:	68f8      	ldr	r0, [r7, #12]
    4094:	f000 fa02 	bl	449c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4098:	f000 fe74 	bl	4d84 <xTaskResumeAll>
    409c:	4603      	mov	r3, r0
    409e:	2b00      	cmp	r3, #0
    40a0:	d10f      	bne.n	40c2 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    40a2:	f001 fc2d 	bl	5900 <vPortYieldFromISR>
    40a6:	e00c      	b.n	40c2 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    40a8:	68f8      	ldr	r0, [r7, #12]
    40aa:	f000 f9f7 	bl	449c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    40ae:	f000 fe69 	bl	4d84 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    40b2:	e78e      	b.n	3fd2 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    40b4:	68f8      	ldr	r0, [r7, #12]
    40b6:	f000 f9f1 	bl	449c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    40ba:	f000 fe63 	bl	4d84 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    40be:	2300      	movs	r3, #0
    40c0:	e000      	b.n	40c4 <xQueueGenericSend+0x104>
		}
	}
    40c2:	e786      	b.n	3fd2 <xQueueGenericSend+0x12>
}
    40c4:	4618      	mov	r0, r3
    40c6:	3720      	adds	r7, #32
    40c8:	46bd      	mov	sp, r7
    40ca:	bd80      	pop	{r7, pc}

000040cc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b086      	sub	sp, #24
    40d0:	af00      	add	r7, sp, #0
    40d2:	60f8      	str	r0, [r7, #12]
    40d4:	60b9      	str	r1, [r7, #8]
    40d6:	607a      	str	r2, [r7, #4]
    40d8:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    40da:	2300      	movs	r3, #0
    40dc:	613b      	str	r3, [r7, #16]
    40de:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    40e2:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    40e6:	68fb      	ldr	r3, [r7, #12]
    40e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    40ea:	68fb      	ldr	r3, [r7, #12]
    40ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    40ee:	429a      	cmp	r2, r3
    40f0:	d221      	bcs.n	4136 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    40f2:	68f8      	ldr	r0, [r7, #12]
    40f4:	68b9      	ldr	r1, [r7, #8]
    40f6:	683a      	ldr	r2, [r7, #0]
    40f8:	f000 f94e 	bl	4398 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    40fc:	68fb      	ldr	r3, [r7, #12]
    40fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4100:	f1b3 3fff 	cmp.w	r3, #4294967295
    4104:	d10f      	bne.n	4126 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4106:	68fb      	ldr	r3, [r7, #12]
    4108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    410a:	2b00      	cmp	r3, #0
    410c:	d010      	beq.n	4130 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    410e:	68fb      	ldr	r3, [r7, #12]
    4110:	3324      	adds	r3, #36	; 0x24
    4112:	4618      	mov	r0, r3
    4114:	f001 f878 	bl	5208 <xTaskRemoveFromEventList>
    4118:	4603      	mov	r3, r0
    411a:	2b00      	cmp	r3, #0
    411c:	d008      	beq.n	4130 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	2201      	movs	r2, #1
    4122:	601a      	str	r2, [r3, #0]
    4124:	e004      	b.n	4130 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    4126:	68fb      	ldr	r3, [r7, #12]
    4128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    412a:	1c5a      	adds	r2, r3, #1
    412c:	68fb      	ldr	r3, [r7, #12]
    412e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4130:	2301      	movs	r3, #1
    4132:	617b      	str	r3, [r7, #20]
    4134:	e001      	b.n	413a <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    4136:	2300      	movs	r3, #0
    4138:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    413a:	f04f 0000 	mov.w	r0, #0
    413e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4142:	697b      	ldr	r3, [r7, #20]
}
    4144:	4618      	mov	r0, r3
    4146:	3718      	adds	r7, #24
    4148:	46bd      	mov	sp, r7
    414a:	bd80      	pop	{r7, pc}

0000414c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    414c:	b580      	push	{r7, lr}
    414e:	b088      	sub	sp, #32
    4150:	af00      	add	r7, sp, #0
    4152:	60f8      	str	r0, [r7, #12]
    4154:	60b9      	str	r1, [r7, #8]
    4156:	607a      	str	r2, [r7, #4]
    4158:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    415a:	2300      	movs	r3, #0
    415c:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    415e:	f001 fbdd 	bl	591c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4162:	68fb      	ldr	r3, [r7, #12]
    4164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4166:	2b00      	cmp	r3, #0
    4168:	d03b      	beq.n	41e2 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    416a:	68fb      	ldr	r3, [r7, #12]
    416c:	68db      	ldr	r3, [r3, #12]
    416e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4170:	68f8      	ldr	r0, [r7, #12]
    4172:	68b9      	ldr	r1, [r7, #8]
    4174:	f000 f96c 	bl	4450 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4178:	683b      	ldr	r3, [r7, #0]
    417a:	2b00      	cmp	r3, #0
    417c:	d11c      	bne.n	41b8 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    417e:	68fb      	ldr	r3, [r7, #12]
    4180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4182:	1e5a      	subs	r2, r3, #1
    4184:	68fb      	ldr	r3, [r7, #12]
    4186:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4188:	68fb      	ldr	r3, [r7, #12]
    418a:	681b      	ldr	r3, [r3, #0]
    418c:	2b00      	cmp	r3, #0
    418e:	d104      	bne.n	419a <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    4190:	f001 fa5c 	bl	564c <xTaskGetCurrentTaskHandle>
    4194:	4602      	mov	r2, r0
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    419a:	68fb      	ldr	r3, [r7, #12]
    419c:	691b      	ldr	r3, [r3, #16]
    419e:	2b00      	cmp	r3, #0
    41a0:	d01b      	beq.n	41da <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    41a2:	68fb      	ldr	r3, [r7, #12]
    41a4:	3310      	adds	r3, #16
    41a6:	4618      	mov	r0, r3
    41a8:	f001 f82e 	bl	5208 <xTaskRemoveFromEventList>
    41ac:	4603      	mov	r3, r0
    41ae:	2b01      	cmp	r3, #1
    41b0:	d113      	bne.n	41da <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    41b2:	f001 fba5 	bl	5900 <vPortYieldFromISR>
    41b6:	e010      	b.n	41da <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    41b8:	68fb      	ldr	r3, [r7, #12]
    41ba:	69ba      	ldr	r2, [r7, #24]
    41bc:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    41be:	68fb      	ldr	r3, [r7, #12]
    41c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41c2:	2b00      	cmp	r3, #0
    41c4:	d009      	beq.n	41da <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    41c6:	68fb      	ldr	r3, [r7, #12]
    41c8:	3324      	adds	r3, #36	; 0x24
    41ca:	4618      	mov	r0, r3
    41cc:	f001 f81c 	bl	5208 <xTaskRemoveFromEventList>
    41d0:	4603      	mov	r3, r0
    41d2:	2b00      	cmp	r3, #0
    41d4:	d001      	beq.n	41da <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    41d6:	f001 fb93 	bl	5900 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    41da:	f001 fbb5 	bl	5948 <vPortExitCritical>
				return pdPASS;
    41de:	2301      	movs	r3, #1
    41e0:	e066      	b.n	42b0 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    41e2:	687b      	ldr	r3, [r7, #4]
    41e4:	2b00      	cmp	r3, #0
    41e6:	d103      	bne.n	41f0 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    41e8:	f001 fbae 	bl	5948 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    41ec:	2300      	movs	r3, #0
    41ee:	e05f      	b.n	42b0 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    41f0:	69fb      	ldr	r3, [r7, #28]
    41f2:	2b00      	cmp	r3, #0
    41f4:	d106      	bne.n	4204 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    41f6:	f107 0310 	add.w	r3, r7, #16
    41fa:	4618      	mov	r0, r3
    41fc:	f001 f85c 	bl	52b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4200:	2301      	movs	r3, #1
    4202:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4204:	f001 fba0 	bl	5948 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4208:	f000 fdaa 	bl	4d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    420c:	f001 fb86 	bl	591c <vPortEnterCritical>
    4210:	68fb      	ldr	r3, [r7, #12]
    4212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4214:	f1b3 3fff 	cmp.w	r3, #4294967295
    4218:	d102      	bne.n	4220 <xQueueGenericReceive+0xd4>
    421a:	68fb      	ldr	r3, [r7, #12]
    421c:	2200      	movs	r2, #0
    421e:	645a      	str	r2, [r3, #68]	; 0x44
    4220:	68fb      	ldr	r3, [r7, #12]
    4222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4224:	f1b3 3fff 	cmp.w	r3, #4294967295
    4228:	d102      	bne.n	4230 <xQueueGenericReceive+0xe4>
    422a:	68fb      	ldr	r3, [r7, #12]
    422c:	2200      	movs	r2, #0
    422e:	649a      	str	r2, [r3, #72]	; 0x48
    4230:	f001 fb8a 	bl	5948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4234:	f107 0210 	add.w	r2, r7, #16
    4238:	1d3b      	adds	r3, r7, #4
    423a:	4610      	mov	r0, r2
    423c:	4619      	mov	r1, r3
    423e:	f001 f853 	bl	52e8 <xTaskCheckForTimeOut>
    4242:	4603      	mov	r3, r0
    4244:	2b00      	cmp	r3, #0
    4246:	d12b      	bne.n	42a0 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4248:	68f8      	ldr	r0, [r7, #12]
    424a:	f000 f973 	bl	4534 <prvIsQueueEmpty>
    424e:	4603      	mov	r3, r0
    4250:	2b00      	cmp	r3, #0
    4252:	d01f      	beq.n	4294 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4254:	68fb      	ldr	r3, [r7, #12]
    4256:	681b      	ldr	r3, [r3, #0]
    4258:	2b00      	cmp	r3, #0
    425a:	d108      	bne.n	426e <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    425c:	f001 fb5e 	bl	591c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4260:	68fb      	ldr	r3, [r7, #12]
    4262:	685b      	ldr	r3, [r3, #4]
    4264:	4618      	mov	r0, r3
    4266:	f001 fa01 	bl	566c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    426a:	f001 fb6d 	bl	5948 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    426e:	68fb      	ldr	r3, [r7, #12]
    4270:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	4610      	mov	r0, r2
    4278:	4619      	mov	r1, r3
    427a:	f000 ff8d 	bl	5198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    427e:	68f8      	ldr	r0, [r7, #12]
    4280:	f000 f90c 	bl	449c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    4284:	f000 fd7e 	bl	4d84 <xTaskResumeAll>
    4288:	4603      	mov	r3, r0
    428a:	2b00      	cmp	r3, #0
    428c:	d10f      	bne.n	42ae <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    428e:	f001 fb37 	bl	5900 <vPortYieldFromISR>
    4292:	e00c      	b.n	42ae <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4294:	68f8      	ldr	r0, [r7, #12]
    4296:	f000 f901 	bl	449c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    429a:	f000 fd73 	bl	4d84 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    429e:	e75e      	b.n	415e <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    42a0:	68f8      	ldr	r0, [r7, #12]
    42a2:	f000 f8fb 	bl	449c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    42a6:	f000 fd6d 	bl	4d84 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    42aa:	2300      	movs	r3, #0
    42ac:	e000      	b.n	42b0 <xQueueGenericReceive+0x164>
		}
	}
    42ae:	e756      	b.n	415e <xQueueGenericReceive+0x12>
}
    42b0:	4618      	mov	r0, r3
    42b2:	3720      	adds	r7, #32
    42b4:	46bd      	mov	sp, r7
    42b6:	bd80      	pop	{r7, pc}

000042b8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    42b8:	b580      	push	{r7, lr}
    42ba:	b086      	sub	sp, #24
    42bc:	af00      	add	r7, sp, #0
    42be:	60f8      	str	r0, [r7, #12]
    42c0:	60b9      	str	r1, [r7, #8]
    42c2:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    42c4:	2300      	movs	r3, #0
    42c6:	613b      	str	r3, [r7, #16]
    42c8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    42cc:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    42d0:	68fb      	ldr	r3, [r7, #12]
    42d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    42d4:	2b00      	cmp	r3, #0
    42d6:	d025      	beq.n	4324 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    42d8:	68f8      	ldr	r0, [r7, #12]
    42da:	68b9      	ldr	r1, [r7, #8]
    42dc:	f000 f8b8 	bl	4450 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    42e0:	68fb      	ldr	r3, [r7, #12]
    42e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    42e4:	1e5a      	subs	r2, r3, #1
    42e6:	68fb      	ldr	r3, [r7, #12]
    42e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    42ee:	f1b3 3fff 	cmp.w	r3, #4294967295
    42f2:	d10f      	bne.n	4314 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    42f4:	68fb      	ldr	r3, [r7, #12]
    42f6:	691b      	ldr	r3, [r3, #16]
    42f8:	2b00      	cmp	r3, #0
    42fa:	d010      	beq.n	431e <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    42fc:	68fb      	ldr	r3, [r7, #12]
    42fe:	3310      	adds	r3, #16
    4300:	4618      	mov	r0, r3
    4302:	f000 ff81 	bl	5208 <xTaskRemoveFromEventList>
    4306:	4603      	mov	r3, r0
    4308:	2b00      	cmp	r3, #0
    430a:	d008      	beq.n	431e <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	2201      	movs	r2, #1
    4310:	601a      	str	r2, [r3, #0]
    4312:	e004      	b.n	431e <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4314:	68fb      	ldr	r3, [r7, #12]
    4316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4318:	1c5a      	adds	r2, r3, #1
    431a:	68fb      	ldr	r3, [r7, #12]
    431c:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    431e:	2301      	movs	r3, #1
    4320:	617b      	str	r3, [r7, #20]
    4322:	e001      	b.n	4328 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4324:	2300      	movs	r3, #0
    4326:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4328:	f04f 0000 	mov.w	r0, #0
    432c:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4330:	697b      	ldr	r3, [r7, #20]
}
    4332:	4618      	mov	r0, r3
    4334:	3718      	adds	r7, #24
    4336:	46bd      	mov	sp, r7
    4338:	bd80      	pop	{r7, pc}
    433a:	bf00      	nop

0000433c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    433c:	b580      	push	{r7, lr}
    433e:	b084      	sub	sp, #16
    4340:	af00      	add	r7, sp, #0
    4342:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4344:	f001 faea 	bl	591c <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4348:	687b      	ldr	r3, [r7, #4]
    434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    434c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    434e:	f001 fafb 	bl	5948 <vPortExitCritical>

	return uxReturn;
    4352:	68fb      	ldr	r3, [r7, #12]
}
    4354:	4618      	mov	r0, r3
    4356:	3710      	adds	r7, #16
    4358:	46bd      	mov	sp, r7
    435a:	bd80      	pop	{r7, pc}

0000435c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    435c:	b480      	push	{r7}
    435e:	b085      	sub	sp, #20
    4360:	af00      	add	r7, sp, #0
    4362:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4364:	687b      	ldr	r3, [r7, #4]
    4366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4368:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    436a:	68fb      	ldr	r3, [r7, #12]
}
    436c:	4618      	mov	r0, r3
    436e:	3714      	adds	r7, #20
    4370:	46bd      	mov	sp, r7
    4372:	f85d 7b04 	ldr.w	r7, [sp], #4
    4376:	4770      	bx	lr

00004378 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4378:	b580      	push	{r7, lr}
    437a:	b082      	sub	sp, #8
    437c:	af00      	add	r7, sp, #0
    437e:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4380:	687b      	ldr	r3, [r7, #4]
    4382:	681b      	ldr	r3, [r3, #0]
    4384:	4618      	mov	r0, r3
    4386:	f001 fc07 	bl	5b98 <vPortFree>
	vPortFree( pxQueue );
    438a:	6878      	ldr	r0, [r7, #4]
    438c:	f001 fc04 	bl	5b98 <vPortFree>
}
    4390:	3708      	adds	r7, #8
    4392:	46bd      	mov	sp, r7
    4394:	bd80      	pop	{r7, pc}
    4396:	bf00      	nop

00004398 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4398:	b580      	push	{r7, lr}
    439a:	b084      	sub	sp, #16
    439c:	af00      	add	r7, sp, #0
    439e:	60f8      	str	r0, [r7, #12]
    43a0:	60b9      	str	r1, [r7, #8]
    43a2:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    43a4:	68fb      	ldr	r3, [r7, #12]
    43a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    43a8:	2b00      	cmp	r3, #0
    43aa:	d10c      	bne.n	43c6 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    43ac:	68fb      	ldr	r3, [r7, #12]
    43ae:	681b      	ldr	r3, [r3, #0]
    43b0:	2b00      	cmp	r3, #0
    43b2:	d145      	bne.n	4440 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    43b4:	68fb      	ldr	r3, [r7, #12]
    43b6:	685b      	ldr	r3, [r3, #4]
    43b8:	4618      	mov	r0, r3
    43ba:	f001 f9bb 	bl	5734 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    43be:	68fb      	ldr	r3, [r7, #12]
    43c0:	2200      	movs	r2, #0
    43c2:	605a      	str	r2, [r3, #4]
    43c4:	e03c      	b.n	4440 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    43c6:	687b      	ldr	r3, [r7, #4]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d11a      	bne.n	4402 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    43cc:	68fb      	ldr	r3, [r7, #12]
    43ce:	689a      	ldr	r2, [r3, #8]
    43d0:	68fb      	ldr	r3, [r7, #12]
    43d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    43d4:	4610      	mov	r0, r2
    43d6:	68b9      	ldr	r1, [r7, #8]
    43d8:	461a      	mov	r2, r3
    43da:	f014 f801 	bl	183e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    43de:	68fb      	ldr	r3, [r7, #12]
    43e0:	689a      	ldr	r2, [r3, #8]
    43e2:	68fb      	ldr	r3, [r7, #12]
    43e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    43e6:	441a      	add	r2, r3
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    43ec:	68fb      	ldr	r3, [r7, #12]
    43ee:	689a      	ldr	r2, [r3, #8]
    43f0:	68fb      	ldr	r3, [r7, #12]
    43f2:	685b      	ldr	r3, [r3, #4]
    43f4:	429a      	cmp	r2, r3
    43f6:	d323      	bcc.n	4440 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    43f8:	68fb      	ldr	r3, [r7, #12]
    43fa:	681a      	ldr	r2, [r3, #0]
    43fc:	68fb      	ldr	r3, [r7, #12]
    43fe:	609a      	str	r2, [r3, #8]
    4400:	e01e      	b.n	4440 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4402:	68fb      	ldr	r3, [r7, #12]
    4404:	68da      	ldr	r2, [r3, #12]
    4406:	68fb      	ldr	r3, [r7, #12]
    4408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    440a:	4610      	mov	r0, r2
    440c:	68b9      	ldr	r1, [r7, #8]
    440e:	461a      	mov	r2, r3
    4410:	f013 ffe6 	bl	183e0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4414:	68fb      	ldr	r3, [r7, #12]
    4416:	68da      	ldr	r2, [r3, #12]
    4418:	68fb      	ldr	r3, [r7, #12]
    441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    441c:	425b      	negs	r3, r3
    441e:	441a      	add	r2, r3
    4420:	68fb      	ldr	r3, [r7, #12]
    4422:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4424:	68fb      	ldr	r3, [r7, #12]
    4426:	68da      	ldr	r2, [r3, #12]
    4428:	68fb      	ldr	r3, [r7, #12]
    442a:	681b      	ldr	r3, [r3, #0]
    442c:	429a      	cmp	r2, r3
    442e:	d207      	bcs.n	4440 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4430:	68fb      	ldr	r3, [r7, #12]
    4432:	685a      	ldr	r2, [r3, #4]
    4434:	68fb      	ldr	r3, [r7, #12]
    4436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4438:	425b      	negs	r3, r3
    443a:	441a      	add	r2, r3
    443c:	68fb      	ldr	r3, [r7, #12]
    443e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4440:	68fb      	ldr	r3, [r7, #12]
    4442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4444:	1c5a      	adds	r2, r3, #1
    4446:	68fb      	ldr	r3, [r7, #12]
    4448:	639a      	str	r2, [r3, #56]	; 0x38
}
    444a:	3710      	adds	r7, #16
    444c:	46bd      	mov	sp, r7
    444e:	bd80      	pop	{r7, pc}

00004450 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4450:	b580      	push	{r7, lr}
    4452:	b082      	sub	sp, #8
    4454:	af00      	add	r7, sp, #0
    4456:	6078      	str	r0, [r7, #4]
    4458:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    445a:	687b      	ldr	r3, [r7, #4]
    445c:	681b      	ldr	r3, [r3, #0]
    445e:	2b00      	cmp	r3, #0
    4460:	d019      	beq.n	4496 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	68da      	ldr	r2, [r3, #12]
    4466:	687b      	ldr	r3, [r7, #4]
    4468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    446a:	441a      	add	r2, r3
    446c:	687b      	ldr	r3, [r7, #4]
    446e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4470:	687b      	ldr	r3, [r7, #4]
    4472:	68da      	ldr	r2, [r3, #12]
    4474:	687b      	ldr	r3, [r7, #4]
    4476:	685b      	ldr	r3, [r3, #4]
    4478:	429a      	cmp	r2, r3
    447a:	d303      	bcc.n	4484 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	681a      	ldr	r2, [r3, #0]
    4480:	687b      	ldr	r3, [r7, #4]
    4482:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    4484:	687b      	ldr	r3, [r7, #4]
    4486:	68da      	ldr	r2, [r3, #12]
    4488:	687b      	ldr	r3, [r7, #4]
    448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    448c:	6838      	ldr	r0, [r7, #0]
    448e:	4611      	mov	r1, r2
    4490:	461a      	mov	r2, r3
    4492:	f013 ffa5 	bl	183e0 <memcpy>
	}
}
    4496:	3708      	adds	r7, #8
    4498:	46bd      	mov	sp, r7
    449a:	bd80      	pop	{r7, pc}

0000449c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    449c:	b580      	push	{r7, lr}
    449e:	b082      	sub	sp, #8
    44a0:	af00      	add	r7, sp, #0
    44a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    44a4:	f001 fa3a 	bl	591c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    44a8:	e014      	b.n	44d4 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    44aa:	687b      	ldr	r3, [r7, #4]
    44ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44ae:	2b00      	cmp	r3, #0
    44b0:	d00f      	beq.n	44d2 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    44b2:	687b      	ldr	r3, [r7, #4]
    44b4:	3324      	adds	r3, #36	; 0x24
    44b6:	4618      	mov	r0, r3
    44b8:	f000 fea6 	bl	5208 <xTaskRemoveFromEventList>
    44bc:	4603      	mov	r3, r0
    44be:	2b00      	cmp	r3, #0
    44c0:	d001      	beq.n	44c6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    44c2:	f000 ff5d 	bl	5380 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    44c6:	687b      	ldr	r3, [r7, #4]
    44c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    44ca:	1e5a      	subs	r2, r3, #1
    44cc:	687b      	ldr	r3, [r7, #4]
    44ce:	649a      	str	r2, [r3, #72]	; 0x48
    44d0:	e000      	b.n	44d4 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    44d2:	e003      	b.n	44dc <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    44d4:	687b      	ldr	r3, [r7, #4]
    44d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    44d8:	2b00      	cmp	r3, #0
    44da:	dce6      	bgt.n	44aa <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	f04f 32ff 	mov.w	r2, #4294967295
    44e2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    44e4:	f001 fa30 	bl	5948 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    44e8:	f001 fa18 	bl	591c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    44ec:	e014      	b.n	4518 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    44ee:	687b      	ldr	r3, [r7, #4]
    44f0:	691b      	ldr	r3, [r3, #16]
    44f2:	2b00      	cmp	r3, #0
    44f4:	d00f      	beq.n	4516 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    44f6:	687b      	ldr	r3, [r7, #4]
    44f8:	3310      	adds	r3, #16
    44fa:	4618      	mov	r0, r3
    44fc:	f000 fe84 	bl	5208 <xTaskRemoveFromEventList>
    4500:	4603      	mov	r3, r0
    4502:	2b00      	cmp	r3, #0
    4504:	d001      	beq.n	450a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    4506:	f000 ff3b 	bl	5380 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    450a:	687b      	ldr	r3, [r7, #4]
    450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    450e:	1e5a      	subs	r2, r3, #1
    4510:	687b      	ldr	r3, [r7, #4]
    4512:	645a      	str	r2, [r3, #68]	; 0x44
    4514:	e000      	b.n	4518 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    4516:	e003      	b.n	4520 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4518:	687b      	ldr	r3, [r7, #4]
    451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    451c:	2b00      	cmp	r3, #0
    451e:	dce6      	bgt.n	44ee <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4520:	687b      	ldr	r3, [r7, #4]
    4522:	f04f 32ff 	mov.w	r2, #4294967295
    4526:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4528:	f001 fa0e 	bl	5948 <vPortExitCritical>
}
    452c:	3708      	adds	r7, #8
    452e:	46bd      	mov	sp, r7
    4530:	bd80      	pop	{r7, pc}
    4532:	bf00      	nop

00004534 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4534:	b580      	push	{r7, lr}
    4536:	b084      	sub	sp, #16
    4538:	af00      	add	r7, sp, #0
    453a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    453c:	f001 f9ee 	bl	591c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4544:	2b00      	cmp	r3, #0
    4546:	bf14      	ite	ne
    4548:	2300      	movne	r3, #0
    454a:	2301      	moveq	r3, #1
    454c:	b2db      	uxtb	r3, r3
    454e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4550:	f001 f9fa 	bl	5948 <vPortExitCritical>

	return xReturn;
    4554:	68fb      	ldr	r3, [r7, #12]
}
    4556:	4618      	mov	r0, r3
    4558:	3710      	adds	r7, #16
    455a:	46bd      	mov	sp, r7
    455c:	bd80      	pop	{r7, pc}
    455e:	bf00      	nop

00004560 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4560:	b480      	push	{r7}
    4562:	b085      	sub	sp, #20
    4564:	af00      	add	r7, sp, #0
    4566:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    456c:	2b00      	cmp	r3, #0
    456e:	bf14      	ite	ne
    4570:	2300      	movne	r3, #0
    4572:	2301      	moveq	r3, #1
    4574:	b2db      	uxtb	r3, r3
    4576:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4578:	68fb      	ldr	r3, [r7, #12]
}
    457a:	4618      	mov	r0, r3
    457c:	3714      	adds	r7, #20
    457e:	46bd      	mov	sp, r7
    4580:	f85d 7b04 	ldr.w	r7, [sp], #4
    4584:	4770      	bx	lr
    4586:	bf00      	nop

00004588 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4588:	b580      	push	{r7, lr}
    458a:	b084      	sub	sp, #16
    458c:	af00      	add	r7, sp, #0
    458e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4590:	f001 f9c4 	bl	591c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4594:	687b      	ldr	r3, [r7, #4]
    4596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4598:	687b      	ldr	r3, [r7, #4]
    459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    459c:	429a      	cmp	r2, r3
    459e:	bf14      	ite	ne
    45a0:	2300      	movne	r3, #0
    45a2:	2301      	moveq	r3, #1
    45a4:	b2db      	uxtb	r3, r3
    45a6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    45a8:	f001 f9ce 	bl	5948 <vPortExitCritical>

	return xReturn;
    45ac:	68fb      	ldr	r3, [r7, #12]
}
    45ae:	4618      	mov	r0, r3
    45b0:	3710      	adds	r7, #16
    45b2:	46bd      	mov	sp, r7
    45b4:	bd80      	pop	{r7, pc}
    45b6:	bf00      	nop

000045b8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    45b8:	b480      	push	{r7}
    45ba:	b085      	sub	sp, #20
    45bc:	af00      	add	r7, sp, #0
    45be:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    45c0:	687b      	ldr	r3, [r7, #4]
    45c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    45c4:	687b      	ldr	r3, [r7, #4]
    45c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    45c8:	429a      	cmp	r2, r3
    45ca:	bf14      	ite	ne
    45cc:	2300      	movne	r3, #0
    45ce:	2301      	moveq	r3, #1
    45d0:	b2db      	uxtb	r3, r3
    45d2:	60fb      	str	r3, [r7, #12]

	return xReturn;
    45d4:	68fb      	ldr	r3, [r7, #12]
}
    45d6:	4618      	mov	r0, r3
    45d8:	3714      	adds	r7, #20
    45da:	46bd      	mov	sp, r7
    45dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    45e0:	4770      	bx	lr
    45e2:	bf00      	nop

000045e4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    45e4:	b580      	push	{r7, lr}
    45e6:	b08a      	sub	sp, #40	; 0x28
    45e8:	af02      	add	r7, sp, #8
    45ea:	60f8      	str	r0, [r7, #12]
    45ec:	60b9      	str	r1, [r7, #8]
    45ee:	603b      	str	r3, [r7, #0]
    45f0:	4613      	mov	r3, r2
    45f2:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    45f4:	88fb      	ldrh	r3, [r7, #6]
    45f6:	4618      	mov	r0, r3
    45f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
    45fa:	f000 ffe5 	bl	55c8 <prvAllocateTCBAndStack>
    45fe:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4600:	69bb      	ldr	r3, [r7, #24]
    4602:	2b00      	cmp	r3, #0
    4604:	f000 80a1 	beq.w	474a <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4608:	69bb      	ldr	r3, [r7, #24]
    460a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    460c:	88fb      	ldrh	r3, [r7, #6]
    460e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4612:	3b01      	subs	r3, #1
    4614:	009b      	lsls	r3, r3, #2
    4616:	4413      	add	r3, r2
    4618:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    461a:	697b      	ldr	r3, [r7, #20]
    461c:	f023 0307 	bic.w	r3, r3, #7
    4620:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4622:	88fb      	ldrh	r3, [r7, #6]
    4624:	9300      	str	r3, [sp, #0]
    4626:	69b8      	ldr	r0, [r7, #24]
    4628:	68b9      	ldr	r1, [r7, #8]
    462a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    462e:	f000 febd 	bl	53ac <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4632:	6978      	ldr	r0, [r7, #20]
    4634:	68f9      	ldr	r1, [r7, #12]
    4636:	683a      	ldr	r2, [r7, #0]
    4638:	f001 f8f2 	bl	5820 <pxPortInitialiseStack>
    463c:	4602      	mov	r2, r0
    463e:	69bb      	ldr	r3, [r7, #24]
    4640:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4644:	2b00      	cmp	r3, #0
    4646:	d002      	beq.n	464e <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    464a:	69ba      	ldr	r2, [r7, #24]
    464c:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    464e:	f001 f965 	bl	591c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4652:	f640 6358 	movw	r3, #3672	; 0xe58
    4656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    465a:	681b      	ldr	r3, [r3, #0]
    465c:	1c5a      	adds	r2, r3, #1
    465e:	f640 6358 	movw	r3, #3672	; 0xe58
    4662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4666:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4668:	f640 4354 	movw	r3, #3156	; 0xc54
    466c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4670:	681b      	ldr	r3, [r3, #0]
    4672:	2b00      	cmp	r3, #0
    4674:	d10f      	bne.n	4696 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4676:	f640 4354 	movw	r3, #3156	; 0xc54
    467a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    467e:	69ba      	ldr	r2, [r7, #24]
    4680:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4682:	f640 6358 	movw	r3, #3672	; 0xe58
    4686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    468a:	681b      	ldr	r3, [r3, #0]
    468c:	2b01      	cmp	r3, #1
    468e:	d118      	bne.n	46c2 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4690:	f000 fec2 	bl	5418 <prvInitialiseTaskLists>
    4694:	e015      	b.n	46c2 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4696:	f640 6368 	movw	r3, #3688	; 0xe68
    469a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    469e:	681b      	ldr	r3, [r3, #0]
    46a0:	2b00      	cmp	r3, #0
    46a2:	d10e      	bne.n	46c2 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    46a4:	f640 4354 	movw	r3, #3156	; 0xc54
    46a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46ac:	681b      	ldr	r3, [r3, #0]
    46ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    46b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    46b2:	429a      	cmp	r2, r3
    46b4:	d805      	bhi.n	46c2 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    46b6:	f640 4354 	movw	r3, #3156	; 0xc54
    46ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46be:	69ba      	ldr	r2, [r7, #24]
    46c0:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    46c2:	69bb      	ldr	r3, [r7, #24]
    46c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    46c6:	f640 6360 	movw	r3, #3680	; 0xe60
    46ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46ce:	681b      	ldr	r3, [r3, #0]
    46d0:	429a      	cmp	r2, r3
    46d2:	d906      	bls.n	46e2 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    46d4:	69bb      	ldr	r3, [r7, #24]
    46d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    46d8:	f640 6360 	movw	r3, #3680	; 0xe60
    46dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46e0:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    46e2:	f640 637c 	movw	r3, #3708	; 0xe7c
    46e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46ea:	681b      	ldr	r3, [r3, #0]
    46ec:	1c5a      	adds	r2, r3, #1
    46ee:	f640 637c 	movw	r3, #3708	; 0xe7c
    46f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46f6:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    46f8:	69bb      	ldr	r3, [r7, #24]
    46fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    46fc:	f640 6364 	movw	r3, #3684	; 0xe64
    4700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4704:	681b      	ldr	r3, [r3, #0]
    4706:	429a      	cmp	r2, r3
    4708:	d906      	bls.n	4718 <xTaskGenericCreate+0x134>
    470a:	69bb      	ldr	r3, [r7, #24]
    470c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    470e:	f640 6364 	movw	r3, #3684	; 0xe64
    4712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4716:	601a      	str	r2, [r3, #0]
    4718:	69bb      	ldr	r3, [r7, #24]
    471a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    471c:	4613      	mov	r3, r2
    471e:	009b      	lsls	r3, r3, #2
    4720:	4413      	add	r3, r2
    4722:	009b      	lsls	r3, r3, #2
    4724:	f640 4258 	movw	r2, #3160	; 0xc58
    4728:	f2c2 0200 	movt	r2, #8192	; 0x2000
    472c:	441a      	add	r2, r3
    472e:	69bb      	ldr	r3, [r7, #24]
    4730:	3304      	adds	r3, #4
    4732:	4610      	mov	r0, r2
    4734:	4619      	mov	r1, r3
    4736:	f7ff fadf 	bl	3cf8 <vListInsertEnd>

			xReturn = pdPASS;
    473a:	2301      	movs	r3, #1
    473c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    473e:	69b8      	ldr	r0, [r7, #24]
    4740:	f012 fdc2 	bl	172c8 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4744:	f001 f900 	bl	5948 <vPortExitCritical>
    4748:	e002      	b.n	4750 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    474a:	f04f 33ff 	mov.w	r3, #4294967295
    474e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4750:	69fb      	ldr	r3, [r7, #28]
    4752:	2b01      	cmp	r3, #1
    4754:	d111      	bne.n	477a <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4756:	f640 6368 	movw	r3, #3688	; 0xe68
    475a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    475e:	681b      	ldr	r3, [r3, #0]
    4760:	2b00      	cmp	r3, #0
    4762:	d00a      	beq.n	477a <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4764:	f640 4354 	movw	r3, #3156	; 0xc54
    4768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    476c:	681b      	ldr	r3, [r3, #0]
    476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4770:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4772:	429a      	cmp	r2, r3
    4774:	d201      	bcs.n	477a <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4776:	f001 f8c3 	bl	5900 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    477a:	69fb      	ldr	r3, [r7, #28]
}
    477c:	4618      	mov	r0, r3
    477e:	3720      	adds	r7, #32
    4780:	46bd      	mov	sp, r7
    4782:	bd80      	pop	{r7, pc}

00004784 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4784:	b580      	push	{r7, lr}
    4786:	b084      	sub	sp, #16
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    478c:	f001 f8c6 	bl	591c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4790:	f640 4354 	movw	r3, #3156	; 0xc54
    4794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4798:	681b      	ldr	r3, [r3, #0]
    479a:	687a      	ldr	r2, [r7, #4]
    479c:	429a      	cmp	r2, r3
    479e:	d101      	bne.n	47a4 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    47a0:	2300      	movs	r3, #0
    47a2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	2b00      	cmp	r3, #0
    47a8:	d105      	bne.n	47b6 <vTaskDelete+0x32>
    47aa:	f640 4354 	movw	r3, #3156	; 0xc54
    47ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47b2:	681b      	ldr	r3, [r3, #0]
    47b4:	e000      	b.n	47b8 <vTaskDelete+0x34>
    47b6:	687b      	ldr	r3, [r7, #4]
    47b8:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    47ba:	68fb      	ldr	r3, [r7, #12]
    47bc:	3304      	adds	r3, #4
    47be:	4618      	mov	r0, r3
    47c0:	f7ff fafa 	bl	3db8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    47c4:	68fb      	ldr	r3, [r7, #12]
    47c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47c8:	2b00      	cmp	r3, #0
    47ca:	d004      	beq.n	47d6 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    47cc:	68fb      	ldr	r3, [r7, #12]
    47ce:	3318      	adds	r3, #24
    47d0:	4618      	mov	r0, r3
    47d2:	f7ff faf1 	bl	3db8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    47d6:	68fb      	ldr	r3, [r7, #12]
    47d8:	3304      	adds	r3, #4
    47da:	f640 602c 	movw	r0, #3628	; 0xe2c
    47de:	f2c2 0000 	movt	r0, #8192	; 0x2000
    47e2:	4619      	mov	r1, r3
    47e4:	f7ff fa88 	bl	3cf8 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    47e8:	f640 6340 	movw	r3, #3648	; 0xe40
    47ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47f0:	681b      	ldr	r3, [r3, #0]
    47f2:	1c5a      	adds	r2, r3, #1
    47f4:	f640 6340 	movw	r3, #3648	; 0xe40
    47f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47fc:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    47fe:	f640 637c 	movw	r3, #3708	; 0xe7c
    4802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4806:	681b      	ldr	r3, [r3, #0]
    4808:	1c5a      	adds	r2, r3, #1
    480a:	f640 637c 	movw	r3, #3708	; 0xe7c
    480e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4812:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4814:	f001 f898 	bl	5948 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4818:	f640 6368 	movw	r3, #3688	; 0xe68
    481c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	2b00      	cmp	r3, #0
    4824:	d004      	beq.n	4830 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4826:	687b      	ldr	r3, [r7, #4]
    4828:	2b00      	cmp	r3, #0
    482a:	d101      	bne.n	4830 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    482c:	f001 f868 	bl	5900 <vPortYieldFromISR>
			}
		}
	}
    4830:	3710      	adds	r7, #16
    4832:	46bd      	mov	sp, r7
    4834:	bd80      	pop	{r7, pc}
    4836:	bf00      	nop

00004838 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4838:	b580      	push	{r7, lr}
    483a:	b086      	sub	sp, #24
    483c:	af00      	add	r7, sp, #0
    483e:	6078      	str	r0, [r7, #4]
    4840:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4842:	2300      	movs	r3, #0
    4844:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4846:	f000 fa8b 	bl	4d60 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    484a:	687b      	ldr	r3, [r7, #4]
    484c:	681a      	ldr	r2, [r3, #0]
    484e:	683b      	ldr	r3, [r7, #0]
    4850:	4413      	add	r3, r2
    4852:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4854:	687b      	ldr	r3, [r7, #4]
    4856:	681a      	ldr	r2, [r3, #0]
    4858:	f640 635c 	movw	r3, #3676	; 0xe5c
    485c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4860:	681b      	ldr	r3, [r3, #0]
    4862:	429a      	cmp	r2, r3
    4864:	d90f      	bls.n	4886 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4866:	687b      	ldr	r3, [r7, #4]
    4868:	681a      	ldr	r2, [r3, #0]
    486a:	693b      	ldr	r3, [r7, #16]
    486c:	429a      	cmp	r2, r3
    486e:	d919      	bls.n	48a4 <vTaskDelayUntil+0x6c>
    4870:	f640 635c 	movw	r3, #3676	; 0xe5c
    4874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4878:	681b      	ldr	r3, [r3, #0]
    487a:	693a      	ldr	r2, [r7, #16]
    487c:	429a      	cmp	r2, r3
    487e:	d911      	bls.n	48a4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4880:	2301      	movs	r3, #1
    4882:	617b      	str	r3, [r7, #20]
    4884:	e00e      	b.n	48a4 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4886:	687b      	ldr	r3, [r7, #4]
    4888:	681a      	ldr	r2, [r3, #0]
    488a:	693b      	ldr	r3, [r7, #16]
    488c:	429a      	cmp	r2, r3
    488e:	d807      	bhi.n	48a0 <vTaskDelayUntil+0x68>
    4890:	f640 635c 	movw	r3, #3676	; 0xe5c
    4894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4898:	681b      	ldr	r3, [r3, #0]
    489a:	693a      	ldr	r2, [r7, #16]
    489c:	429a      	cmp	r2, r3
    489e:	d901      	bls.n	48a4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    48a0:	2301      	movs	r3, #1
    48a2:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    48a4:	687b      	ldr	r3, [r7, #4]
    48a6:	693a      	ldr	r2, [r7, #16]
    48a8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    48aa:	697b      	ldr	r3, [r7, #20]
    48ac:	2b00      	cmp	r3, #0
    48ae:	d00b      	beq.n	48c8 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    48b0:	f640 4354 	movw	r3, #3156	; 0xc54
    48b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48b8:	681b      	ldr	r3, [r3, #0]
    48ba:	3304      	adds	r3, #4
    48bc:	4618      	mov	r0, r3
    48be:	f7ff fa7b 	bl	3db8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    48c2:	6938      	ldr	r0, [r7, #16]
    48c4:	f000 fe3c 	bl	5540 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    48c8:	f000 fa5c 	bl	4d84 <xTaskResumeAll>
    48cc:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    48ce:	68fb      	ldr	r3, [r7, #12]
    48d0:	2b00      	cmp	r3, #0
    48d2:	d101      	bne.n	48d8 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    48d4:	f001 f814 	bl	5900 <vPortYieldFromISR>
		}
	}
    48d8:	3718      	adds	r7, #24
    48da:	46bd      	mov	sp, r7
    48dc:	bd80      	pop	{r7, pc}
    48de:	bf00      	nop

000048e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    48e0:	b580      	push	{r7, lr}
    48e2:	b084      	sub	sp, #16
    48e4:	af00      	add	r7, sp, #0
    48e6:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    48e8:	2300      	movs	r3, #0
    48ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    48ec:	687b      	ldr	r3, [r7, #4]
    48ee:	2b00      	cmp	r3, #0
    48f0:	d018      	beq.n	4924 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    48f2:	f000 fa35 	bl	4d60 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    48f6:	f640 635c 	movw	r3, #3676	; 0xe5c
    48fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48fe:	681a      	ldr	r2, [r3, #0]
    4900:	687b      	ldr	r3, [r7, #4]
    4902:	4413      	add	r3, r2
    4904:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4906:	f640 4354 	movw	r3, #3156	; 0xc54
    490a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    490e:	681b      	ldr	r3, [r3, #0]
    4910:	3304      	adds	r3, #4
    4912:	4618      	mov	r0, r3
    4914:	f7ff fa50 	bl	3db8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4918:	68b8      	ldr	r0, [r7, #8]
    491a:	f000 fe11 	bl	5540 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    491e:	f000 fa31 	bl	4d84 <xTaskResumeAll>
    4922:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4924:	68fb      	ldr	r3, [r7, #12]
    4926:	2b00      	cmp	r3, #0
    4928:	d101      	bne.n	492e <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    492a:	f000 ffe9 	bl	5900 <vPortYieldFromISR>
		}
	}
    492e:	3710      	adds	r7, #16
    4930:	46bd      	mov	sp, r7
    4932:	bd80      	pop	{r7, pc}

00004934 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4934:	b580      	push	{r7, lr}
    4936:	b084      	sub	sp, #16
    4938:	af00      	add	r7, sp, #0
    493a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    493c:	f000 ffee 	bl	591c <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4940:	687b      	ldr	r3, [r7, #4]
    4942:	2b00      	cmp	r3, #0
    4944:	d105      	bne.n	4952 <uxTaskPriorityGet+0x1e>
    4946:	f640 4354 	movw	r3, #3156	; 0xc54
    494a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    494e:	681b      	ldr	r3, [r3, #0]
    4950:	e000      	b.n	4954 <uxTaskPriorityGet+0x20>
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4956:	68fb      	ldr	r3, [r7, #12]
    4958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    495a:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    495c:	f000 fff4 	bl	5948 <vPortExitCritical>

		return uxReturn;
    4960:	68bb      	ldr	r3, [r7, #8]
	}
    4962:	4618      	mov	r0, r3
    4964:	3710      	adds	r7, #16
    4966:	46bd      	mov	sp, r7
    4968:	bd80      	pop	{r7, pc}
    496a:	bf00      	nop

0000496c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    496c:	b580      	push	{r7, lr}
    496e:	b086      	sub	sp, #24
    4970:	af00      	add	r7, sp, #0
    4972:	6078      	str	r0, [r7, #4]
    4974:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4976:	2300      	movs	r3, #0
    4978:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    497a:	683b      	ldr	r3, [r7, #0]
    497c:	2b13      	cmp	r3, #19
    497e:	d901      	bls.n	4984 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4980:	2313      	movs	r3, #19
    4982:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4984:	f000 ffca 	bl	591c <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4988:	f640 4354 	movw	r3, #3156	; 0xc54
    498c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4990:	681b      	ldr	r3, [r3, #0]
    4992:	687a      	ldr	r2, [r7, #4]
    4994:	429a      	cmp	r2, r3
    4996:	d101      	bne.n	499c <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4998:	2300      	movs	r3, #0
    499a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	2b00      	cmp	r3, #0
    49a0:	d105      	bne.n	49ae <vTaskPrioritySet+0x42>
    49a2:	f640 4354 	movw	r3, #3156	; 0xc54
    49a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49aa:	681b      	ldr	r3, [r3, #0]
    49ac:	e000      	b.n	49b0 <vTaskPrioritySet+0x44>
    49ae:	687b      	ldr	r3, [r7, #4]
    49b0:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    49b2:	693b      	ldr	r3, [r7, #16]
    49b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    49b6:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    49b8:	68fa      	ldr	r2, [r7, #12]
    49ba:	683b      	ldr	r3, [r7, #0]
    49bc:	429a      	cmp	r2, r3
    49be:	d058      	beq.n	4a72 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    49c0:	683a      	ldr	r2, [r7, #0]
    49c2:	68fb      	ldr	r3, [r7, #12]
    49c4:	429a      	cmp	r2, r3
    49c6:	d905      	bls.n	49d4 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	2b00      	cmp	r3, #0
    49cc:	d007      	beq.n	49de <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    49ce:	2301      	movs	r3, #1
    49d0:	617b      	str	r3, [r7, #20]
    49d2:	e004      	b.n	49de <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	2b00      	cmp	r3, #0
    49d8:	d101      	bne.n	49de <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    49da:	2301      	movs	r3, #1
    49dc:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    49de:	693b      	ldr	r3, [r7, #16]
    49e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    49e2:	693b      	ldr	r3, [r7, #16]
    49e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    49e6:	429a      	cmp	r2, r3
    49e8:	d102      	bne.n	49f0 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    49ea:	693b      	ldr	r3, [r7, #16]
    49ec:	683a      	ldr	r2, [r7, #0]
    49ee:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    49f0:	693b      	ldr	r3, [r7, #16]
    49f2:	683a      	ldr	r2, [r7, #0]
    49f4:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    49f6:	683b      	ldr	r3, [r7, #0]
    49f8:	f1c3 0214 	rsb	r2, r3, #20
    49fc:	693b      	ldr	r3, [r7, #16]
    49fe:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4a00:	693b      	ldr	r3, [r7, #16]
    4a02:	6959      	ldr	r1, [r3, #20]
    4a04:	68fa      	ldr	r2, [r7, #12]
    4a06:	4613      	mov	r3, r2
    4a08:	009b      	lsls	r3, r3, #2
    4a0a:	4413      	add	r3, r2
    4a0c:	009b      	lsls	r3, r3, #2
    4a0e:	f640 4258 	movw	r2, #3160	; 0xc58
    4a12:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a16:	4413      	add	r3, r2
    4a18:	4299      	cmp	r1, r3
    4a1a:	d125      	bne.n	4a68 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4a1c:	693b      	ldr	r3, [r7, #16]
    4a1e:	3304      	adds	r3, #4
    4a20:	4618      	mov	r0, r3
    4a22:	f7ff f9c9 	bl	3db8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4a26:	693b      	ldr	r3, [r7, #16]
    4a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a2a:	f640 6364 	movw	r3, #3684	; 0xe64
    4a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a32:	681b      	ldr	r3, [r3, #0]
    4a34:	429a      	cmp	r2, r3
    4a36:	d906      	bls.n	4a46 <vTaskPrioritySet+0xda>
    4a38:	693b      	ldr	r3, [r7, #16]
    4a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a3c:	f640 6364 	movw	r3, #3684	; 0xe64
    4a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a44:	601a      	str	r2, [r3, #0]
    4a46:	693b      	ldr	r3, [r7, #16]
    4a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a4a:	4613      	mov	r3, r2
    4a4c:	009b      	lsls	r3, r3, #2
    4a4e:	4413      	add	r3, r2
    4a50:	009b      	lsls	r3, r3, #2
    4a52:	f640 4258 	movw	r2, #3160	; 0xc58
    4a56:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a5a:	441a      	add	r2, r3
    4a5c:	693b      	ldr	r3, [r7, #16]
    4a5e:	3304      	adds	r3, #4
    4a60:	4610      	mov	r0, r2
    4a62:	4619      	mov	r1, r3
    4a64:	f7ff f948 	bl	3cf8 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4a68:	697b      	ldr	r3, [r7, #20]
    4a6a:	2b01      	cmp	r3, #1
    4a6c:	d101      	bne.n	4a72 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4a6e:	f000 ff47 	bl	5900 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4a72:	f000 ff69 	bl	5948 <vPortExitCritical>
	}
    4a76:	3718      	adds	r7, #24
    4a78:	46bd      	mov	sp, r7
    4a7a:	bd80      	pop	{r7, pc}

00004a7c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b084      	sub	sp, #16
    4a80:	af00      	add	r7, sp, #0
    4a82:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4a84:	f000 ff4a 	bl	591c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4a88:	f640 4354 	movw	r3, #3156	; 0xc54
    4a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	687a      	ldr	r2, [r7, #4]
    4a94:	429a      	cmp	r2, r3
    4a96:	d101      	bne.n	4a9c <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4a98:	2300      	movs	r3, #0
    4a9a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d105      	bne.n	4aae <vTaskSuspend+0x32>
    4aa2:	f640 4354 	movw	r3, #3156	; 0xc54
    4aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aaa:	681b      	ldr	r3, [r3, #0]
    4aac:	e000      	b.n	4ab0 <vTaskSuspend+0x34>
    4aae:	687b      	ldr	r3, [r7, #4]
    4ab0:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4ab2:	68fb      	ldr	r3, [r7, #12]
    4ab4:	3304      	adds	r3, #4
    4ab6:	4618      	mov	r0, r3
    4ab8:	f7ff f97e 	bl	3db8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4abc:	68fb      	ldr	r3, [r7, #12]
    4abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	d004      	beq.n	4ace <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4ac4:	68fb      	ldr	r3, [r7, #12]
    4ac6:	3318      	adds	r3, #24
    4ac8:	4618      	mov	r0, r3
    4aca:	f7ff f975 	bl	3db8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4ace:	68fb      	ldr	r3, [r7, #12]
    4ad0:	3304      	adds	r3, #4
    4ad2:	f640 6044 	movw	r0, #3652	; 0xe44
    4ad6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4ada:	4619      	mov	r1, r3
    4adc:	f7ff f90c 	bl	3cf8 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4ae0:	f000 ff32 	bl	5948 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4ae4:	687b      	ldr	r3, [r7, #4]
    4ae6:	2b00      	cmp	r3, #0
    4ae8:	d11e      	bne.n	4b28 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4aea:	f640 6368 	movw	r3, #3688	; 0xe68
    4aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af2:	681b      	ldr	r3, [r3, #0]
    4af4:	2b00      	cmp	r3, #0
    4af6:	d002      	beq.n	4afe <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4af8:	f000 ff02 	bl	5900 <vPortYieldFromISR>
    4afc:	e014      	b.n	4b28 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4afe:	f640 6344 	movw	r3, #3652	; 0xe44
    4b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b06:	681a      	ldr	r2, [r3, #0]
    4b08:	f640 6358 	movw	r3, #3672	; 0xe58
    4b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	429a      	cmp	r2, r3
    4b14:	d106      	bne.n	4b24 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4b16:	f640 4354 	movw	r3, #3156	; 0xc54
    4b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b1e:	2200      	movs	r2, #0
    4b20:	601a      	str	r2, [r3, #0]
    4b22:	e001      	b.n	4b28 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4b24:	f000 fadc 	bl	50e0 <vTaskSwitchContext>
				}
			}
		}
	}
    4b28:	3710      	adds	r7, #16
    4b2a:	46bd      	mov	sp, r7
    4b2c:	bd80      	pop	{r7, pc}
    4b2e:	bf00      	nop

00004b30 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4b30:	b480      	push	{r7}
    4b32:	b085      	sub	sp, #20
    4b34:	af00      	add	r7, sp, #0
    4b36:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4b38:	2300      	movs	r3, #0
    4b3a:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4b40:	68bb      	ldr	r3, [r7, #8]
    4b42:	695a      	ldr	r2, [r3, #20]
    4b44:	f640 6344 	movw	r3, #3652	; 0xe44
    4b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b4c:	429a      	cmp	r2, r3
    4b4e:	d10d      	bne.n	4b6c <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4b50:	68bb      	ldr	r3, [r7, #8]
    4b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b54:	f640 6318 	movw	r3, #3608	; 0xe18
    4b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b5c:	429a      	cmp	r2, r3
    4b5e:	d005      	beq.n	4b6c <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4b60:	68bb      	ldr	r3, [r7, #8]
    4b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b64:	2b00      	cmp	r3, #0
    4b66:	d101      	bne.n	4b6c <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4b68:	2301      	movs	r3, #1
    4b6a:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4b6c:	68fb      	ldr	r3, [r7, #12]
	}
    4b6e:	4618      	mov	r0, r3
    4b70:	3714      	adds	r7, #20
    4b72:	46bd      	mov	sp, r7
    4b74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b78:	4770      	bx	lr
    4b7a:	bf00      	nop

00004b7c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4b7c:	b580      	push	{r7, lr}
    4b7e:	b084      	sub	sp, #16
    4b80:	af00      	add	r7, sp, #0
    4b82:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4b84:	687b      	ldr	r3, [r7, #4]
    4b86:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4b88:	68fb      	ldr	r3, [r7, #12]
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	d043      	beq.n	4c16 <vTaskResume+0x9a>
    4b8e:	f640 4354 	movw	r3, #3156	; 0xc54
    4b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b96:	681b      	ldr	r3, [r3, #0]
    4b98:	68fa      	ldr	r2, [r7, #12]
    4b9a:	429a      	cmp	r2, r3
    4b9c:	d03b      	beq.n	4c16 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4b9e:	f000 febd 	bl	591c <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4ba2:	68f8      	ldr	r0, [r7, #12]
    4ba4:	f7ff ffc4 	bl	4b30 <xTaskIsTaskSuspended>
    4ba8:	4603      	mov	r3, r0
    4baa:	2b01      	cmp	r3, #1
    4bac:	d131      	bne.n	4c12 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4bae:	68fb      	ldr	r3, [r7, #12]
    4bb0:	3304      	adds	r3, #4
    4bb2:	4618      	mov	r0, r3
    4bb4:	f7ff f900 	bl	3db8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4bb8:	68fb      	ldr	r3, [r7, #12]
    4bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bbc:	f640 6364 	movw	r3, #3684	; 0xe64
    4bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc4:	681b      	ldr	r3, [r3, #0]
    4bc6:	429a      	cmp	r2, r3
    4bc8:	d906      	bls.n	4bd8 <vTaskResume+0x5c>
    4bca:	68fb      	ldr	r3, [r7, #12]
    4bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bce:	f640 6364 	movw	r3, #3684	; 0xe64
    4bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd6:	601a      	str	r2, [r3, #0]
    4bd8:	68fb      	ldr	r3, [r7, #12]
    4bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bdc:	4613      	mov	r3, r2
    4bde:	009b      	lsls	r3, r3, #2
    4be0:	4413      	add	r3, r2
    4be2:	009b      	lsls	r3, r3, #2
    4be4:	f640 4258 	movw	r2, #3160	; 0xc58
    4be8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4bec:	441a      	add	r2, r3
    4bee:	68fb      	ldr	r3, [r7, #12]
    4bf0:	3304      	adds	r3, #4
    4bf2:	4610      	mov	r0, r2
    4bf4:	4619      	mov	r1, r3
    4bf6:	f7ff f87f 	bl	3cf8 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4bfa:	68fb      	ldr	r3, [r7, #12]
    4bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bfe:	f640 4354 	movw	r3, #3156	; 0xc54
    4c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c06:	681b      	ldr	r3, [r3, #0]
    4c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c0a:	429a      	cmp	r2, r3
    4c0c:	d301      	bcc.n	4c12 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4c0e:	f000 fe77 	bl	5900 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4c12:	f000 fe99 	bl	5948 <vPortExitCritical>
		}
	}
    4c16:	3710      	adds	r7, #16
    4c18:	46bd      	mov	sp, r7
    4c1a:	bd80      	pop	{r7, pc}

00004c1c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4c1c:	b580      	push	{r7, lr}
    4c1e:	b086      	sub	sp, #24
    4c20:	af00      	add	r7, sp, #0
    4c22:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4c24:	2300      	movs	r3, #0
    4c26:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4c28:	687b      	ldr	r3, [r7, #4]
    4c2a:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4c2c:	2300      	movs	r3, #0
    4c2e:	60fb      	str	r3, [r7, #12]
    4c30:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4c34:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4c38:	6938      	ldr	r0, [r7, #16]
    4c3a:	f7ff ff79 	bl	4b30 <xTaskIsTaskSuspended>
    4c3e:	4603      	mov	r3, r0
    4c40:	2b01      	cmp	r3, #1
    4c42:	d144      	bne.n	4cce <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4c44:	f640 636c 	movw	r3, #3692	; 0xe6c
    4c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c4c:	681b      	ldr	r3, [r3, #0]
    4c4e:	2b00      	cmp	r3, #0
    4c50:	d134      	bne.n	4cbc <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4c52:	693b      	ldr	r3, [r7, #16]
    4c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c56:	f640 4354 	movw	r3, #3156	; 0xc54
    4c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c5e:	681b      	ldr	r3, [r3, #0]
    4c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c62:	429a      	cmp	r2, r3
    4c64:	bf34      	ite	cc
    4c66:	2300      	movcc	r3, #0
    4c68:	2301      	movcs	r3, #1
    4c6a:	b2db      	uxtb	r3, r3
    4c6c:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4c6e:	693b      	ldr	r3, [r7, #16]
    4c70:	3304      	adds	r3, #4
    4c72:	4618      	mov	r0, r3
    4c74:	f7ff f8a0 	bl	3db8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4c78:	693b      	ldr	r3, [r7, #16]
    4c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c7c:	f640 6364 	movw	r3, #3684	; 0xe64
    4c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c84:	681b      	ldr	r3, [r3, #0]
    4c86:	429a      	cmp	r2, r3
    4c88:	d906      	bls.n	4c98 <xTaskResumeFromISR+0x7c>
    4c8a:	693b      	ldr	r3, [r7, #16]
    4c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c8e:	f640 6364 	movw	r3, #3684	; 0xe64
    4c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c96:	601a      	str	r2, [r3, #0]
    4c98:	693b      	ldr	r3, [r7, #16]
    4c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c9c:	4613      	mov	r3, r2
    4c9e:	009b      	lsls	r3, r3, #2
    4ca0:	4413      	add	r3, r2
    4ca2:	009b      	lsls	r3, r3, #2
    4ca4:	f640 4258 	movw	r2, #3160	; 0xc58
    4ca8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4cac:	441a      	add	r2, r3
    4cae:	693b      	ldr	r3, [r7, #16]
    4cb0:	3304      	adds	r3, #4
    4cb2:	4610      	mov	r0, r2
    4cb4:	4619      	mov	r1, r3
    4cb6:	f7ff f81f 	bl	3cf8 <vListInsertEnd>
    4cba:	e008      	b.n	4cce <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4cbc:	693b      	ldr	r3, [r7, #16]
    4cbe:	3318      	adds	r3, #24
    4cc0:	f640 6018 	movw	r0, #3608	; 0xe18
    4cc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4cc8:	4619      	mov	r1, r3
    4cca:	f7ff f815 	bl	3cf8 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4cce:	f04f 0000 	mov.w	r0, #0
    4cd2:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4cd6:	697b      	ldr	r3, [r7, #20]
	}
    4cd8:	4618      	mov	r0, r3
    4cda:	3718      	adds	r7, #24
    4cdc:	46bd      	mov	sp, r7
    4cde:	bd80      	pop	{r7, pc}

00004ce0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4ce0:	b580      	push	{r7, lr}
    4ce2:	b086      	sub	sp, #24
    4ce4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4ce6:	2300      	movs	r3, #0
    4ce8:	9300      	str	r3, [sp, #0]
    4cea:	2300      	movs	r3, #0
    4cec:	9301      	str	r3, [sp, #4]
    4cee:	2300      	movs	r3, #0
    4cf0:	9302      	str	r3, [sp, #8]
    4cf2:	2300      	movs	r3, #0
    4cf4:	9303      	str	r3, [sp, #12]
    4cf6:	f245 3099 	movw	r0, #21401	; 0x5399
    4cfa:	f2c0 0000 	movt	r0, #0
    4cfe:	f248 6168 	movw	r1, #34408	; 0x8668
    4d02:	f2c0 0101 	movt	r1, #1
    4d06:	2280      	movs	r2, #128	; 0x80
    4d08:	2300      	movs	r3, #0
    4d0a:	f7ff fc6b 	bl	45e4 <xTaskGenericCreate>
    4d0e:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	2b01      	cmp	r3, #1
    4d14:	d111      	bne.n	4d3a <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4d16:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4d1a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4d1e:	f640 6368 	movw	r3, #3688	; 0xe68
    4d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d26:	2201      	movs	r2, #1
    4d28:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4d2a:	f640 635c 	movw	r3, #3676	; 0xe5c
    4d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d32:	2200      	movs	r2, #0
    4d34:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4d36:	f000 fdb5 	bl	58a4 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4d3a:	3708      	adds	r7, #8
    4d3c:	46bd      	mov	sp, r7
    4d3e:	bd80      	pop	{r7, pc}

00004d40 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4d40:	b580      	push	{r7, lr}
    4d42:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4d44:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4d48:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4d4c:	f640 6368 	movw	r3, #3688	; 0xe68
    4d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d54:	2200      	movs	r2, #0
    4d56:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4d58:	f000 fdcc 	bl	58f4 <vPortEndScheduler>
}
    4d5c:	bd80      	pop	{r7, pc}
    4d5e:	bf00      	nop

00004d60 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4d60:	b480      	push	{r7}
    4d62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4d64:	f640 636c 	movw	r3, #3692	; 0xe6c
    4d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d6c:	681b      	ldr	r3, [r3, #0]
    4d6e:	1c5a      	adds	r2, r3, #1
    4d70:	f640 636c 	movw	r3, #3692	; 0xe6c
    4d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d78:	601a      	str	r2, [r3, #0]
}
    4d7a:	46bd      	mov	sp, r7
    4d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d80:	4770      	bx	lr
    4d82:	bf00      	nop

00004d84 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4d84:	b590      	push	{r4, r7, lr}
    4d86:	b083      	sub	sp, #12
    4d88:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4d8a:	2300      	movs	r3, #0
    4d8c:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4d8e:	f000 fdc5 	bl	591c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4d92:	f640 636c 	movw	r3, #3692	; 0xe6c
    4d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d9a:	681b      	ldr	r3, [r3, #0]
    4d9c:	1e5a      	subs	r2, r3, #1
    4d9e:	f640 636c 	movw	r3, #3692	; 0xe6c
    4da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4da8:	f640 636c 	movw	r3, #3692	; 0xe6c
    4dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4db0:	681b      	ldr	r3, [r3, #0]
    4db2:	2b00      	cmp	r3, #0
    4db4:	d177      	bne.n	4ea6 <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4db6:	f640 6358 	movw	r3, #3672	; 0xe58
    4dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dbe:	681b      	ldr	r3, [r3, #0]
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	d070      	beq.n	4ea6 <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4dc4:	2300      	movs	r3, #0
    4dc6:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4dc8:	e036      	b.n	4e38 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4dca:	f640 6318 	movw	r3, #3608	; 0xe18
    4dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd2:	68db      	ldr	r3, [r3, #12]
    4dd4:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4dd6:	f104 0318 	add.w	r3, r4, #24
    4dda:	4618      	mov	r0, r3
    4ddc:	f7fe ffec 	bl	3db8 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4de0:	1d23      	adds	r3, r4, #4
    4de2:	4618      	mov	r0, r3
    4de4:	f7fe ffe8 	bl	3db8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4de8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4dea:	f640 6364 	movw	r3, #3684	; 0xe64
    4dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df2:	681b      	ldr	r3, [r3, #0]
    4df4:	429a      	cmp	r2, r3
    4df6:	d905      	bls.n	4e04 <xTaskResumeAll+0x80>
    4df8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4dfa:	f640 6364 	movw	r3, #3684	; 0xe64
    4dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e02:	601a      	str	r2, [r3, #0]
    4e04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4e06:	4613      	mov	r3, r2
    4e08:	009b      	lsls	r3, r3, #2
    4e0a:	4413      	add	r3, r2
    4e0c:	009b      	lsls	r3, r3, #2
    4e0e:	f640 4258 	movw	r2, #3160	; 0xc58
    4e12:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e16:	441a      	add	r2, r3
    4e18:	1d23      	adds	r3, r4, #4
    4e1a:	4610      	mov	r0, r2
    4e1c:	4619      	mov	r1, r3
    4e1e:	f7fe ff6b 	bl	3cf8 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4e22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4e24:	f640 4354 	movw	r3, #3156	; 0xc54
    4e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e2c:	681b      	ldr	r3, [r3, #0]
    4e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e30:	429a      	cmp	r2, r3
    4e32:	d301      	bcc.n	4e38 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    4e34:	2301      	movs	r3, #1
    4e36:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4e38:	f640 6318 	movw	r3, #3608	; 0xe18
    4e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e40:	681b      	ldr	r3, [r3, #0]
    4e42:	2b00      	cmp	r3, #0
    4e44:	d1c1      	bne.n	4dca <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4e46:	f640 6370 	movw	r3, #3696	; 0xe70
    4e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e4e:	681b      	ldr	r3, [r3, #0]
    4e50:	2b00      	cmp	r3, #0
    4e52:	d014      	beq.n	4e7e <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4e54:	e00c      	b.n	4e70 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    4e56:	f000 f865 	bl	4f24 <vTaskIncrementTick>
						--uxMissedTicks;
    4e5a:	f640 6370 	movw	r3, #3696	; 0xe70
    4e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e62:	681b      	ldr	r3, [r3, #0]
    4e64:	1e5a      	subs	r2, r3, #1
    4e66:	f640 6370 	movw	r3, #3696	; 0xe70
    4e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e6e:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4e70:	f640 6370 	movw	r3, #3696	; 0xe70
    4e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e78:	681b      	ldr	r3, [r3, #0]
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d1eb      	bne.n	4e56 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4e7e:	683b      	ldr	r3, [r7, #0]
    4e80:	2b01      	cmp	r3, #1
    4e82:	d006      	beq.n	4e92 <xTaskResumeAll+0x10e>
    4e84:	f640 6374 	movw	r3, #3700	; 0xe74
    4e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e8c:	681b      	ldr	r3, [r3, #0]
    4e8e:	2b01      	cmp	r3, #1
    4e90:	d109      	bne.n	4ea6 <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    4e92:	2301      	movs	r3, #1
    4e94:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    4e96:	f640 6374 	movw	r3, #3700	; 0xe74
    4e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e9e:	2200      	movs	r2, #0
    4ea0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    4ea2:	f000 fd2d 	bl	5900 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    4ea6:	f000 fd4f 	bl	5948 <vPortExitCritical>

	return xAlreadyYielded;
    4eaa:	687b      	ldr	r3, [r7, #4]
}
    4eac:	4618      	mov	r0, r3
    4eae:	370c      	adds	r7, #12
    4eb0:	46bd      	mov	sp, r7
    4eb2:	bd90      	pop	{r4, r7, pc}

00004eb4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4eb4:	b580      	push	{r7, lr}
    4eb6:	b082      	sub	sp, #8
    4eb8:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4eba:	f000 fd2f 	bl	591c <vPortEnterCritical>
	{
		xTicks = xTickCount;
    4ebe:	f640 635c 	movw	r3, #3676	; 0xe5c
    4ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ec6:	681b      	ldr	r3, [r3, #0]
    4ec8:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    4eca:	f000 fd3d 	bl	5948 <vPortExitCritical>

	return xTicks;
    4ece:	687b      	ldr	r3, [r7, #4]
}
    4ed0:	4618      	mov	r0, r3
    4ed2:	3708      	adds	r7, #8
    4ed4:	46bd      	mov	sp, r7
    4ed6:	bd80      	pop	{r7, pc}

00004ed8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4ed8:	b480      	push	{r7}
    4eda:	b083      	sub	sp, #12
    4edc:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4ede:	2300      	movs	r3, #0
    4ee0:	607b      	str	r3, [r7, #4]
    4ee2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4ee6:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    4eea:	f640 635c 	movw	r3, #3676	; 0xe5c
    4eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ef2:	681b      	ldr	r3, [r3, #0]
    4ef4:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4ef6:	f04f 0000 	mov.w	r0, #0
    4efa:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4efe:	683b      	ldr	r3, [r7, #0]
}
    4f00:	4618      	mov	r0, r3
    4f02:	370c      	adds	r7, #12
    4f04:	46bd      	mov	sp, r7
    4f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f0a:	4770      	bx	lr

00004f0c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    4f0c:	b480      	push	{r7}
    4f0e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4f10:	f640 6358 	movw	r3, #3672	; 0xe58
    4f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f18:	681b      	ldr	r3, [r3, #0]
}
    4f1a:	4618      	mov	r0, r3
    4f1c:	46bd      	mov	sp, r7
    4f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f22:	4770      	bx	lr

00004f24 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    4f24:	b580      	push	{r7, lr}
    4f26:	b084      	sub	sp, #16
    4f28:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4f2a:	f640 636c 	movw	r3, #3692	; 0xe6c
    4f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f32:	681b      	ldr	r3, [r3, #0]
    4f34:	2b00      	cmp	r3, #0
    4f36:	f040 80b9 	bne.w	50ac <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    4f3a:	f640 635c 	movw	r3, #3676	; 0xe5c
    4f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f42:	681b      	ldr	r3, [r3, #0]
    4f44:	1c5a      	adds	r2, r3, #1
    4f46:	f640 635c 	movw	r3, #3676	; 0xe5c
    4f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f4e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    4f50:	f640 635c 	movw	r3, #3676	; 0xe5c
    4f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f58:	681b      	ldr	r3, [r3, #0]
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	d13f      	bne.n	4fde <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    4f5e:	f640 6310 	movw	r3, #3600	; 0xe10
    4f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f66:	681b      	ldr	r3, [r3, #0]
    4f68:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    4f6a:	f640 6314 	movw	r3, #3604	; 0xe14
    4f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f72:	681a      	ldr	r2, [r3, #0]
    4f74:	f640 6310 	movw	r3, #3600	; 0xe10
    4f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f7c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    4f7e:	f640 6314 	movw	r3, #3604	; 0xe14
    4f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f86:	68fa      	ldr	r2, [r7, #12]
    4f88:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    4f8a:	f640 6378 	movw	r3, #3704	; 0xe78
    4f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f92:	681b      	ldr	r3, [r3, #0]
    4f94:	1c5a      	adds	r2, r3, #1
    4f96:	f640 6378 	movw	r3, #3704	; 0xe78
    4f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9e:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4fa0:	f640 6310 	movw	r3, #3600	; 0xe10
    4fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa8:	681b      	ldr	r3, [r3, #0]
    4faa:	681b      	ldr	r3, [r3, #0]
    4fac:	2b00      	cmp	r3, #0
    4fae:	d107      	bne.n	4fc0 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4fb0:	f240 33e0 	movw	r3, #992	; 0x3e0
    4fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb8:	f04f 32ff 	mov.w	r2, #4294967295
    4fbc:	601a      	str	r2, [r3, #0]
    4fbe:	e00e      	b.n	4fde <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4fc0:	f640 6310 	movw	r3, #3600	; 0xe10
    4fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc8:	681b      	ldr	r3, [r3, #0]
    4fca:	68db      	ldr	r3, [r3, #12]
    4fcc:	68db      	ldr	r3, [r3, #12]
    4fce:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4fd0:	68bb      	ldr	r3, [r7, #8]
    4fd2:	685a      	ldr	r2, [r3, #4]
    4fd4:	f240 33e0 	movw	r3, #992	; 0x3e0
    4fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fdc:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    4fde:	f640 635c 	movw	r3, #3676	; 0xe5c
    4fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe6:	681a      	ldr	r2, [r3, #0]
    4fe8:	f240 33e0 	movw	r3, #992	; 0x3e0
    4fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff0:	681b      	ldr	r3, [r3, #0]
    4ff2:	429a      	cmp	r2, r3
    4ff4:	d359      	bcc.n	50aa <vTaskIncrementTick+0x186>
    4ff6:	f640 6310 	movw	r3, #3600	; 0xe10
    4ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ffe:	681b      	ldr	r3, [r3, #0]
    5000:	681b      	ldr	r3, [r3, #0]
    5002:	2b00      	cmp	r3, #0
    5004:	d107      	bne.n	5016 <vTaskIncrementTick+0xf2>
    5006:	f240 33e0 	movw	r3, #992	; 0x3e0
    500a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    500e:	f04f 32ff 	mov.w	r2, #4294967295
    5012:	601a      	str	r2, [r3, #0]
    5014:	e049      	b.n	50aa <vTaskIncrementTick+0x186>
    5016:	f640 6310 	movw	r3, #3600	; 0xe10
    501a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501e:	681b      	ldr	r3, [r3, #0]
    5020:	68db      	ldr	r3, [r3, #12]
    5022:	68db      	ldr	r3, [r3, #12]
    5024:	60bb      	str	r3, [r7, #8]
    5026:	68bb      	ldr	r3, [r7, #8]
    5028:	685b      	ldr	r3, [r3, #4]
    502a:	607b      	str	r3, [r7, #4]
    502c:	f640 635c 	movw	r3, #3676	; 0xe5c
    5030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5034:	681a      	ldr	r2, [r3, #0]
    5036:	687b      	ldr	r3, [r7, #4]
    5038:	429a      	cmp	r2, r3
    503a:	d206      	bcs.n	504a <vTaskIncrementTick+0x126>
    503c:	f240 33e0 	movw	r3, #992	; 0x3e0
    5040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5044:	687a      	ldr	r2, [r7, #4]
    5046:	601a      	str	r2, [r3, #0]
    5048:	e02f      	b.n	50aa <vTaskIncrementTick+0x186>
    504a:	68bb      	ldr	r3, [r7, #8]
    504c:	3304      	adds	r3, #4
    504e:	4618      	mov	r0, r3
    5050:	f7fe feb2 	bl	3db8 <vListRemove>
    5054:	68bb      	ldr	r3, [r7, #8]
    5056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5058:	2b00      	cmp	r3, #0
    505a:	d004      	beq.n	5066 <vTaskIncrementTick+0x142>
    505c:	68bb      	ldr	r3, [r7, #8]
    505e:	3318      	adds	r3, #24
    5060:	4618      	mov	r0, r3
    5062:	f7fe fea9 	bl	3db8 <vListRemove>
    5066:	68bb      	ldr	r3, [r7, #8]
    5068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    506a:	f640 6364 	movw	r3, #3684	; 0xe64
    506e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5072:	681b      	ldr	r3, [r3, #0]
    5074:	429a      	cmp	r2, r3
    5076:	d906      	bls.n	5086 <vTaskIncrementTick+0x162>
    5078:	68bb      	ldr	r3, [r7, #8]
    507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    507c:	f640 6364 	movw	r3, #3684	; 0xe64
    5080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5084:	601a      	str	r2, [r3, #0]
    5086:	68bb      	ldr	r3, [r7, #8]
    5088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    508a:	4613      	mov	r3, r2
    508c:	009b      	lsls	r3, r3, #2
    508e:	4413      	add	r3, r2
    5090:	009b      	lsls	r3, r3, #2
    5092:	f640 4258 	movw	r2, #3160	; 0xc58
    5096:	f2c2 0200 	movt	r2, #8192	; 0x2000
    509a:	441a      	add	r2, r3
    509c:	68bb      	ldr	r3, [r7, #8]
    509e:	3304      	adds	r3, #4
    50a0:	4610      	mov	r0, r2
    50a2:	4619      	mov	r1, r3
    50a4:	f7fe fe28 	bl	3cf8 <vListInsertEnd>
    50a8:	e7a5      	b.n	4ff6 <vTaskIncrementTick+0xd2>
    50aa:	e00c      	b.n	50c6 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    50ac:	f640 6370 	movw	r3, #3696	; 0xe70
    50b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b4:	681b      	ldr	r3, [r3, #0]
    50b6:	1c5a      	adds	r2, r3, #1
    50b8:	f640 6370 	movw	r3, #3696	; 0xe70
    50bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c0:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    50c2:	f012 f913 	bl	172ec <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    50c6:	f640 6370 	movw	r3, #3696	; 0xe70
    50ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ce:	681b      	ldr	r3, [r3, #0]
    50d0:	2b00      	cmp	r3, #0
    50d2:	d101      	bne.n	50d8 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    50d4:	f012 f90a 	bl	172ec <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    50d8:	3710      	adds	r7, #16
    50da:	46bd      	mov	sp, r7
    50dc:	bd80      	pop	{r7, pc}
    50de:	bf00      	nop

000050e0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    50e0:	b580      	push	{r7, lr}
    50e2:	b082      	sub	sp, #8
    50e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    50e6:	f640 636c 	movw	r3, #3692	; 0xe6c
    50ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ee:	681b      	ldr	r3, [r3, #0]
    50f0:	2b00      	cmp	r3, #0
    50f2:	d006      	beq.n	5102 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    50f4:	f640 6374 	movw	r3, #3700	; 0xe74
    50f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50fc:	2201      	movs	r2, #1
    50fe:	601a      	str	r2, [r3, #0]
    5100:	e047      	b.n	5192 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    5102:	f012 f8ed 	bl	172e0 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5106:	e00a      	b.n	511e <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5108:	f640 6364 	movw	r3, #3684	; 0xe64
    510c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5110:	681b      	ldr	r3, [r3, #0]
    5112:	1e5a      	subs	r2, r3, #1
    5114:	f640 6364 	movw	r3, #3684	; 0xe64
    5118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511c:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    511e:	f640 6364 	movw	r3, #3684	; 0xe64
    5122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5126:	6819      	ldr	r1, [r3, #0]
    5128:	f640 4258 	movw	r2, #3160	; 0xc58
    512c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5130:	460b      	mov	r3, r1
    5132:	009b      	lsls	r3, r3, #2
    5134:	440b      	add	r3, r1
    5136:	009b      	lsls	r3, r3, #2
    5138:	4413      	add	r3, r2
    513a:	681b      	ldr	r3, [r3, #0]
    513c:	2b00      	cmp	r3, #0
    513e:	d0e3      	beq.n	5108 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5140:	f640 6364 	movw	r3, #3684	; 0xe64
    5144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5148:	681a      	ldr	r2, [r3, #0]
    514a:	4613      	mov	r3, r2
    514c:	009b      	lsls	r3, r3, #2
    514e:	4413      	add	r3, r2
    5150:	009b      	lsls	r3, r3, #2
    5152:	f640 4258 	movw	r2, #3160	; 0xc58
    5156:	f2c2 0200 	movt	r2, #8192	; 0x2000
    515a:	4413      	add	r3, r2
    515c:	607b      	str	r3, [r7, #4]
    515e:	687b      	ldr	r3, [r7, #4]
    5160:	685b      	ldr	r3, [r3, #4]
    5162:	685a      	ldr	r2, [r3, #4]
    5164:	687b      	ldr	r3, [r7, #4]
    5166:	605a      	str	r2, [r3, #4]
    5168:	687b      	ldr	r3, [r7, #4]
    516a:	685a      	ldr	r2, [r3, #4]
    516c:	687b      	ldr	r3, [r7, #4]
    516e:	3308      	adds	r3, #8
    5170:	429a      	cmp	r2, r3
    5172:	d104      	bne.n	517e <vTaskSwitchContext+0x9e>
    5174:	687b      	ldr	r3, [r7, #4]
    5176:	685b      	ldr	r3, [r3, #4]
    5178:	685a      	ldr	r2, [r3, #4]
    517a:	687b      	ldr	r3, [r7, #4]
    517c:	605a      	str	r2, [r3, #4]
    517e:	687b      	ldr	r3, [r7, #4]
    5180:	685b      	ldr	r3, [r3, #4]
    5182:	68da      	ldr	r2, [r3, #12]
    5184:	f640 4354 	movw	r3, #3156	; 0xc54
    5188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518c:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    518e:	f012 f8a1 	bl	172d4 <myTraceSwitchedIn>
	}
}
    5192:	3708      	adds	r7, #8
    5194:	46bd      	mov	sp, r7
    5196:	bd80      	pop	{r7, pc}

00005198 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    5198:	b580      	push	{r7, lr}
    519a:	b084      	sub	sp, #16
    519c:	af00      	add	r7, sp, #0
    519e:	6078      	str	r0, [r7, #4]
    51a0:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    51a2:	f640 4354 	movw	r3, #3156	; 0xc54
    51a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51aa:	681b      	ldr	r3, [r3, #0]
    51ac:	3318      	adds	r3, #24
    51ae:	6878      	ldr	r0, [r7, #4]
    51b0:	4619      	mov	r1, r3
    51b2:	f7fe fdc9 	bl	3d48 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    51b6:	f640 4354 	movw	r3, #3156	; 0xc54
    51ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51be:	681b      	ldr	r3, [r3, #0]
    51c0:	3304      	adds	r3, #4
    51c2:	4618      	mov	r0, r3
    51c4:	f7fe fdf8 	bl	3db8 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    51c8:	683b      	ldr	r3, [r7, #0]
    51ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    51ce:	d10d      	bne.n	51ec <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    51d0:	f640 4354 	movw	r3, #3156	; 0xc54
    51d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d8:	681b      	ldr	r3, [r3, #0]
    51da:	3304      	adds	r3, #4
    51dc:	f640 6044 	movw	r0, #3652	; 0xe44
    51e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    51e4:	4619      	mov	r1, r3
    51e6:	f7fe fd87 	bl	3cf8 <vListInsertEnd>
    51ea:	e00a      	b.n	5202 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    51ec:	f640 635c 	movw	r3, #3676	; 0xe5c
    51f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f4:	681a      	ldr	r2, [r3, #0]
    51f6:	683b      	ldr	r3, [r7, #0]
    51f8:	4413      	add	r3, r2
    51fa:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    51fc:	68f8      	ldr	r0, [r7, #12]
    51fe:	f000 f99f 	bl	5540 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    5202:	3710      	adds	r7, #16
    5204:	46bd      	mov	sp, r7
    5206:	bd80      	pop	{r7, pc}

00005208 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5208:	b580      	push	{r7, lr}
    520a:	b084      	sub	sp, #16
    520c:	af00      	add	r7, sp, #0
    520e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5210:	687b      	ldr	r3, [r7, #4]
    5212:	68db      	ldr	r3, [r3, #12]
    5214:	68db      	ldr	r3, [r3, #12]
    5216:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5218:	68bb      	ldr	r3, [r7, #8]
    521a:	3318      	adds	r3, #24
    521c:	4618      	mov	r0, r3
    521e:	f7fe fdcb 	bl	3db8 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5222:	f640 636c 	movw	r3, #3692	; 0xe6c
    5226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    522a:	681b      	ldr	r3, [r3, #0]
    522c:	2b00      	cmp	r3, #0
    522e:	d126      	bne.n	527e <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5230:	68bb      	ldr	r3, [r7, #8]
    5232:	3304      	adds	r3, #4
    5234:	4618      	mov	r0, r3
    5236:	f7fe fdbf 	bl	3db8 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    523a:	68bb      	ldr	r3, [r7, #8]
    523c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    523e:	f640 6364 	movw	r3, #3684	; 0xe64
    5242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5246:	681b      	ldr	r3, [r3, #0]
    5248:	429a      	cmp	r2, r3
    524a:	d906      	bls.n	525a <xTaskRemoveFromEventList+0x52>
    524c:	68bb      	ldr	r3, [r7, #8]
    524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5250:	f640 6364 	movw	r3, #3684	; 0xe64
    5254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5258:	601a      	str	r2, [r3, #0]
    525a:	68bb      	ldr	r3, [r7, #8]
    525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    525e:	4613      	mov	r3, r2
    5260:	009b      	lsls	r3, r3, #2
    5262:	4413      	add	r3, r2
    5264:	009b      	lsls	r3, r3, #2
    5266:	f640 4258 	movw	r2, #3160	; 0xc58
    526a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    526e:	441a      	add	r2, r3
    5270:	68bb      	ldr	r3, [r7, #8]
    5272:	3304      	adds	r3, #4
    5274:	4610      	mov	r0, r2
    5276:	4619      	mov	r1, r3
    5278:	f7fe fd3e 	bl	3cf8 <vListInsertEnd>
    527c:	e008      	b.n	5290 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    527e:	68bb      	ldr	r3, [r7, #8]
    5280:	3318      	adds	r3, #24
    5282:	f640 6018 	movw	r0, #3608	; 0xe18
    5286:	f2c2 0000 	movt	r0, #8192	; 0x2000
    528a:	4619      	mov	r1, r3
    528c:	f7fe fd34 	bl	3cf8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5290:	68bb      	ldr	r3, [r7, #8]
    5292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5294:	f640 4354 	movw	r3, #3156	; 0xc54
    5298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    529c:	681b      	ldr	r3, [r3, #0]
    529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52a0:	429a      	cmp	r2, r3
    52a2:	d302      	bcc.n	52aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    52a4:	2301      	movs	r3, #1
    52a6:	60fb      	str	r3, [r7, #12]
    52a8:	e001      	b.n	52ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    52aa:	2300      	movs	r3, #0
    52ac:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    52ae:	68fb      	ldr	r3, [r7, #12]
}
    52b0:	4618      	mov	r0, r3
    52b2:	3710      	adds	r7, #16
    52b4:	46bd      	mov	sp, r7
    52b6:	bd80      	pop	{r7, pc}

000052b8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    52b8:	b480      	push	{r7}
    52ba:	b083      	sub	sp, #12
    52bc:	af00      	add	r7, sp, #0
    52be:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    52c0:	f640 6378 	movw	r3, #3704	; 0xe78
    52c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c8:	681a      	ldr	r2, [r3, #0]
    52ca:	687b      	ldr	r3, [r7, #4]
    52cc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    52ce:	f640 635c 	movw	r3, #3676	; 0xe5c
    52d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d6:	681a      	ldr	r2, [r3, #0]
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	605a      	str	r2, [r3, #4]
}
    52dc:	370c      	adds	r7, #12
    52de:	46bd      	mov	sp, r7
    52e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    52e4:	4770      	bx	lr
    52e6:	bf00      	nop

000052e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    52e8:	b580      	push	{r7, lr}
    52ea:	b084      	sub	sp, #16
    52ec:	af00      	add	r7, sp, #0
    52ee:	6078      	str	r0, [r7, #4]
    52f0:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    52f2:	f000 fb13 	bl	591c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    52f6:	683b      	ldr	r3, [r7, #0]
    52f8:	681b      	ldr	r3, [r3, #0]
    52fa:	f1b3 3fff 	cmp.w	r3, #4294967295
    52fe:	d102      	bne.n	5306 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5300:	2300      	movs	r3, #0
    5302:	60fb      	str	r3, [r7, #12]
    5304:	e035      	b.n	5372 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    5306:	687b      	ldr	r3, [r7, #4]
    5308:	681a      	ldr	r2, [r3, #0]
    530a:	f640 6378 	movw	r3, #3704	; 0xe78
    530e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5312:	681b      	ldr	r3, [r3, #0]
    5314:	429a      	cmp	r2, r3
    5316:	d00b      	beq.n	5330 <xTaskCheckForTimeOut+0x48>
    5318:	687b      	ldr	r3, [r7, #4]
    531a:	685a      	ldr	r2, [r3, #4]
    531c:	f640 635c 	movw	r3, #3676	; 0xe5c
    5320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5324:	681b      	ldr	r3, [r3, #0]
    5326:	429a      	cmp	r2, r3
    5328:	d802      	bhi.n	5330 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    532a:	2301      	movs	r3, #1
    532c:	60fb      	str	r3, [r7, #12]
    532e:	e020      	b.n	5372 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5330:	f640 635c 	movw	r3, #3676	; 0xe5c
    5334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5338:	681a      	ldr	r2, [r3, #0]
    533a:	687b      	ldr	r3, [r7, #4]
    533c:	685b      	ldr	r3, [r3, #4]
    533e:	1ad2      	subs	r2, r2, r3
    5340:	683b      	ldr	r3, [r7, #0]
    5342:	681b      	ldr	r3, [r3, #0]
    5344:	429a      	cmp	r2, r3
    5346:	d212      	bcs.n	536e <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5348:	683b      	ldr	r3, [r7, #0]
    534a:	681a      	ldr	r2, [r3, #0]
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	6859      	ldr	r1, [r3, #4]
    5350:	f640 635c 	movw	r3, #3676	; 0xe5c
    5354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5358:	681b      	ldr	r3, [r3, #0]
    535a:	1acb      	subs	r3, r1, r3
    535c:	441a      	add	r2, r3
    535e:	683b      	ldr	r3, [r7, #0]
    5360:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    5362:	6878      	ldr	r0, [r7, #4]
    5364:	f7ff ffa8 	bl	52b8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5368:	2300      	movs	r3, #0
    536a:	60fb      	str	r3, [r7, #12]
    536c:	e001      	b.n	5372 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    536e:	2301      	movs	r3, #1
    5370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5372:	f000 fae9 	bl	5948 <vPortExitCritical>

	return xReturn;
    5376:	68fb      	ldr	r3, [r7, #12]
}
    5378:	4618      	mov	r0, r3
    537a:	3710      	adds	r7, #16
    537c:	46bd      	mov	sp, r7
    537e:	bd80      	pop	{r7, pc}

00005380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5380:	b480      	push	{r7}
    5382:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    5384:	f640 6374 	movw	r3, #3700	; 0xe74
    5388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    538c:	2201      	movs	r2, #1
    538e:	601a      	str	r2, [r3, #0]
}
    5390:	46bd      	mov	sp, r7
    5392:	f85d 7b04 	ldr.w	r7, [sp], #4
    5396:	4770      	bx	lr

00005398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5398:	b580      	push	{r7, lr}
    539a:	b082      	sub	sp, #8
    539c:	af00      	add	r7, sp, #0
    539e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    53a0:	f000 f886 	bl	54b0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    53a4:	f000 faac 	bl	5900 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    53a8:	e7fa      	b.n	53a0 <prvIdleTask+0x8>
    53aa:	bf00      	nop

000053ac <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    53ac:	b580      	push	{r7, lr}
    53ae:	b084      	sub	sp, #16
    53b0:	af00      	add	r7, sp, #0
    53b2:	60f8      	str	r0, [r7, #12]
    53b4:	60b9      	str	r1, [r7, #8]
    53b6:	607a      	str	r2, [r7, #4]
    53b8:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    53ba:	68fb      	ldr	r3, [r7, #12]
    53bc:	3334      	adds	r3, #52	; 0x34
    53be:	4618      	mov	r0, r3
    53c0:	68b9      	ldr	r1, [r7, #8]
    53c2:	2210      	movs	r2, #16
    53c4:	f013 f8b0 	bl	18528 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    53c8:	68fb      	ldr	r3, [r7, #12]
    53ca:	2200      	movs	r2, #0
    53cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    53d0:	687b      	ldr	r3, [r7, #4]
    53d2:	2b13      	cmp	r3, #19
    53d4:	d901      	bls.n	53da <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    53d6:	2313      	movs	r3, #19
    53d8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    53da:	68fb      	ldr	r3, [r7, #12]
    53dc:	687a      	ldr	r2, [r7, #4]
    53de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    53e0:	68fb      	ldr	r3, [r7, #12]
    53e2:	687a      	ldr	r2, [r7, #4]
    53e4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    53e6:	68fb      	ldr	r3, [r7, #12]
    53e8:	3304      	adds	r3, #4
    53ea:	4618      	mov	r0, r3
    53ec:	f7fe fc78 	bl	3ce0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    53f0:	68fb      	ldr	r3, [r7, #12]
    53f2:	3318      	adds	r3, #24
    53f4:	4618      	mov	r0, r3
    53f6:	f7fe fc73 	bl	3ce0 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    53fa:	68fb      	ldr	r3, [r7, #12]
    53fc:	68fa      	ldr	r2, [r7, #12]
    53fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	f1c3 0214 	rsb	r2, r3, #20
    5406:	68fb      	ldr	r3, [r7, #12]
    5408:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    540a:	68fb      	ldr	r3, [r7, #12]
    540c:	68fa      	ldr	r2, [r7, #12]
    540e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5410:	3710      	adds	r7, #16
    5412:	46bd      	mov	sp, r7
    5414:	bd80      	pop	{r7, pc}
    5416:	bf00      	nop

00005418 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5418:	b580      	push	{r7, lr}
    541a:	b082      	sub	sp, #8
    541c:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    541e:	2300      	movs	r3, #0
    5420:	607b      	str	r3, [r7, #4]
    5422:	e00f      	b.n	5444 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5424:	687a      	ldr	r2, [r7, #4]
    5426:	4613      	mov	r3, r2
    5428:	009b      	lsls	r3, r3, #2
    542a:	4413      	add	r3, r2
    542c:	009b      	lsls	r3, r3, #2
    542e:	f640 4258 	movw	r2, #3160	; 0xc58
    5432:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5436:	4413      	add	r3, r2
    5438:	4618      	mov	r0, r3
    543a:	f7fe fc31 	bl	3ca0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    543e:	687b      	ldr	r3, [r7, #4]
    5440:	3301      	adds	r3, #1
    5442:	607b      	str	r3, [r7, #4]
    5444:	687b      	ldr	r3, [r7, #4]
    5446:	2b13      	cmp	r3, #19
    5448:	d9ec      	bls.n	5424 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    544a:	f640 50e8 	movw	r0, #3560	; 0xde8
    544e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5452:	f7fe fc25 	bl	3ca0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    5456:	f640 50fc 	movw	r0, #3580	; 0xdfc
    545a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    545e:	f7fe fc1f 	bl	3ca0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5462:	f640 6018 	movw	r0, #3608	; 0xe18
    5466:	f2c2 0000 	movt	r0, #8192	; 0x2000
    546a:	f7fe fc19 	bl	3ca0 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    546e:	f640 602c 	movw	r0, #3628	; 0xe2c
    5472:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5476:	f7fe fc13 	bl	3ca0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    547a:	f640 6044 	movw	r0, #3652	; 0xe44
    547e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5482:	f7fe fc0d 	bl	3ca0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5486:	f640 6310 	movw	r3, #3600	; 0xe10
    548a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    548e:	f640 52e8 	movw	r2, #3560	; 0xde8
    5492:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5496:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5498:	f640 6314 	movw	r3, #3604	; 0xe14
    549c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a0:	f640 52fc 	movw	r2, #3580	; 0xdfc
    54a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54a8:	601a      	str	r2, [r3, #0]
}
    54aa:	3708      	adds	r7, #8
    54ac:	46bd      	mov	sp, r7
    54ae:	bd80      	pop	{r7, pc}

000054b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    54b0:	b580      	push	{r7, lr}
    54b2:	b082      	sub	sp, #8
    54b4:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    54b6:	f640 6340 	movw	r3, #3648	; 0xe40
    54ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54be:	681b      	ldr	r3, [r3, #0]
    54c0:	2b00      	cmp	r3, #0
    54c2:	d03a      	beq.n	553a <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    54c4:	f7ff fc4c 	bl	4d60 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    54c8:	f640 632c 	movw	r3, #3628	; 0xe2c
    54cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d0:	681b      	ldr	r3, [r3, #0]
    54d2:	2b00      	cmp	r3, #0
    54d4:	bf14      	ite	ne
    54d6:	2300      	movne	r3, #0
    54d8:	2301      	moveq	r3, #1
    54da:	b2db      	uxtb	r3, r3
    54dc:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    54de:	f7ff fc51 	bl	4d84 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    54e2:	687b      	ldr	r3, [r7, #4]
    54e4:	2b00      	cmp	r3, #0
    54e6:	d128      	bne.n	553a <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    54e8:	f000 fa18 	bl	591c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    54ec:	f640 632c 	movw	r3, #3628	; 0xe2c
    54f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f4:	68db      	ldr	r3, [r3, #12]
    54f6:	68db      	ldr	r3, [r3, #12]
    54f8:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    54fa:	683b      	ldr	r3, [r7, #0]
    54fc:	3304      	adds	r3, #4
    54fe:	4618      	mov	r0, r3
    5500:	f7fe fc5a 	bl	3db8 <vListRemove>
					--uxCurrentNumberOfTasks;
    5504:	f640 6358 	movw	r3, #3672	; 0xe58
    5508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    550c:	681b      	ldr	r3, [r3, #0]
    550e:	1e5a      	subs	r2, r3, #1
    5510:	f640 6358 	movw	r3, #3672	; 0xe58
    5514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5518:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    551a:	f640 6340 	movw	r3, #3648	; 0xe40
    551e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5522:	681b      	ldr	r3, [r3, #0]
    5524:	1e5a      	subs	r2, r3, #1
    5526:	f640 6340 	movw	r3, #3648	; 0xe40
    552a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    552e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5530:	f000 fa0a 	bl	5948 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5534:	6838      	ldr	r0, [r7, #0]
    5536:	f000 f879 	bl	562c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    553a:	3708      	adds	r7, #8
    553c:	46bd      	mov	sp, r7
    553e:	bd80      	pop	{r7, pc}

00005540 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5540:	b580      	push	{r7, lr}
    5542:	b082      	sub	sp, #8
    5544:	af00      	add	r7, sp, #0
    5546:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5548:	f640 4354 	movw	r3, #3156	; 0xc54
    554c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5550:	681b      	ldr	r3, [r3, #0]
    5552:	687a      	ldr	r2, [r7, #4]
    5554:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    5556:	f640 635c 	movw	r3, #3676	; 0xe5c
    555a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    555e:	681b      	ldr	r3, [r3, #0]
    5560:	687a      	ldr	r2, [r7, #4]
    5562:	429a      	cmp	r2, r3
    5564:	d20f      	bcs.n	5586 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5566:	f640 6314 	movw	r3, #3604	; 0xe14
    556a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    556e:	681a      	ldr	r2, [r3, #0]
    5570:	f640 4354 	movw	r3, #3156	; 0xc54
    5574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5578:	681b      	ldr	r3, [r3, #0]
    557a:	3304      	adds	r3, #4
    557c:	4610      	mov	r0, r2
    557e:	4619      	mov	r1, r3
    5580:	f7fe fbe2 	bl	3d48 <vListInsert>
    5584:	e01c      	b.n	55c0 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5586:	f640 6310 	movw	r3, #3600	; 0xe10
    558a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    558e:	681a      	ldr	r2, [r3, #0]
    5590:	f640 4354 	movw	r3, #3156	; 0xc54
    5594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5598:	681b      	ldr	r3, [r3, #0]
    559a:	3304      	adds	r3, #4
    559c:	4610      	mov	r0, r2
    559e:	4619      	mov	r1, r3
    55a0:	f7fe fbd2 	bl	3d48 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    55a4:	f240 33e0 	movw	r3, #992	; 0x3e0
    55a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ac:	681b      	ldr	r3, [r3, #0]
    55ae:	687a      	ldr	r2, [r7, #4]
    55b0:	429a      	cmp	r2, r3
    55b2:	d205      	bcs.n	55c0 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    55b4:	f240 33e0 	movw	r3, #992	; 0x3e0
    55b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55bc:	687a      	ldr	r2, [r7, #4]
    55be:	601a      	str	r2, [r3, #0]
		}
	}
}
    55c0:	3708      	adds	r7, #8
    55c2:	46bd      	mov	sp, r7
    55c4:	bd80      	pop	{r7, pc}
    55c6:	bf00      	nop

000055c8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    55c8:	b580      	push	{r7, lr}
    55ca:	b084      	sub	sp, #16
    55cc:	af00      	add	r7, sp, #0
    55ce:	4603      	mov	r3, r0
    55d0:	6039      	str	r1, [r7, #0]
    55d2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    55d4:	2050      	movs	r0, #80	; 0x50
    55d6:	f000 fa1b 	bl	5a10 <pvPortMalloc>
    55da:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    55dc:	68fb      	ldr	r3, [r7, #12]
    55de:	2b00      	cmp	r3, #0
    55e0:	d01f      	beq.n	5622 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    55e2:	683b      	ldr	r3, [r7, #0]
    55e4:	2b00      	cmp	r3, #0
    55e6:	d106      	bne.n	55f6 <prvAllocateTCBAndStack+0x2e>
    55e8:	88fb      	ldrh	r3, [r7, #6]
    55ea:	009b      	lsls	r3, r3, #2
    55ec:	4618      	mov	r0, r3
    55ee:	f000 fa0f 	bl	5a10 <pvPortMalloc>
    55f2:	4603      	mov	r3, r0
    55f4:	e000      	b.n	55f8 <prvAllocateTCBAndStack+0x30>
    55f6:	683b      	ldr	r3, [r7, #0]
    55f8:	68fa      	ldr	r2, [r7, #12]
    55fa:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5600:	2b00      	cmp	r3, #0
    5602:	d105      	bne.n	5610 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5604:	68f8      	ldr	r0, [r7, #12]
    5606:	f000 fac7 	bl	5b98 <vPortFree>
			pxNewTCB = NULL;
    560a:	2300      	movs	r3, #0
    560c:	60fb      	str	r3, [r7, #12]
    560e:	e008      	b.n	5622 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5610:	68fb      	ldr	r3, [r7, #12]
    5612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5614:	88fb      	ldrh	r3, [r7, #6]
    5616:	009b      	lsls	r3, r3, #2
    5618:	4610      	mov	r0, r2
    561a:	21a5      	movs	r1, #165	; 0xa5
    561c:	461a      	mov	r2, r3
    561e:	f012 ff33 	bl	18488 <memset>
		}
	}

	return pxNewTCB;
    5622:	68fb      	ldr	r3, [r7, #12]
}
    5624:	4618      	mov	r0, r3
    5626:	3710      	adds	r7, #16
    5628:	46bd      	mov	sp, r7
    562a:	bd80      	pop	{r7, pc}

0000562c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    562c:	b580      	push	{r7, lr}
    562e:	b082      	sub	sp, #8
    5630:	af00      	add	r7, sp, #0
    5632:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5634:	687b      	ldr	r3, [r7, #4]
    5636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5638:	4618      	mov	r0, r3
    563a:	f000 faad 	bl	5b98 <vPortFree>
		vPortFree( pxTCB );
    563e:	6878      	ldr	r0, [r7, #4]
    5640:	f000 faaa 	bl	5b98 <vPortFree>
	}
    5644:	3708      	adds	r7, #8
    5646:	46bd      	mov	sp, r7
    5648:	bd80      	pop	{r7, pc}
    564a:	bf00      	nop

0000564c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    564c:	b480      	push	{r7}
    564e:	b083      	sub	sp, #12
    5650:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5652:	f640 4354 	movw	r3, #3156	; 0xc54
    5656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	607b      	str	r3, [r7, #4]

		return xReturn;
    565e:	687b      	ldr	r3, [r7, #4]
	}
    5660:	4618      	mov	r0, r3
    5662:	370c      	adds	r7, #12
    5664:	46bd      	mov	sp, r7
    5666:	f85d 7b04 	ldr.w	r7, [sp], #4
    566a:	4770      	bx	lr

0000566c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    566c:	b580      	push	{r7, lr}
    566e:	b084      	sub	sp, #16
    5670:	af00      	add	r7, sp, #0
    5672:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5674:	687b      	ldr	r3, [r7, #4]
    5676:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5678:	68fb      	ldr	r3, [r7, #12]
    567a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    567c:	f640 4354 	movw	r3, #3156	; 0xc54
    5680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5688:	429a      	cmp	r2, r3
    568a:	d24f      	bcs.n	572c <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    568c:	f640 4354 	movw	r3, #3156	; 0xc54
    5690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5694:	681b      	ldr	r3, [r3, #0]
    5696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5698:	f1c3 0214 	rsb	r2, r3, #20
    569c:	68fb      	ldr	r3, [r7, #12]
    569e:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    56a0:	68fb      	ldr	r3, [r7, #12]
    56a2:	6959      	ldr	r1, [r3, #20]
    56a4:	68fb      	ldr	r3, [r7, #12]
    56a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56a8:	4613      	mov	r3, r2
    56aa:	009b      	lsls	r3, r3, #2
    56ac:	4413      	add	r3, r2
    56ae:	009b      	lsls	r3, r3, #2
    56b0:	f640 4258 	movw	r2, #3160	; 0xc58
    56b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    56b8:	4413      	add	r3, r2
    56ba:	4299      	cmp	r1, r3
    56bc:	d12e      	bne.n	571c <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    56be:	68fb      	ldr	r3, [r7, #12]
    56c0:	3304      	adds	r3, #4
    56c2:	4618      	mov	r0, r3
    56c4:	f7fe fb78 	bl	3db8 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    56c8:	f640 4354 	movw	r3, #3156	; 0xc54
    56cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56d4:	68fb      	ldr	r3, [r7, #12]
    56d6:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    56d8:	68fb      	ldr	r3, [r7, #12]
    56da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56dc:	f640 6364 	movw	r3, #3684	; 0xe64
    56e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e4:	681b      	ldr	r3, [r3, #0]
    56e6:	429a      	cmp	r2, r3
    56e8:	d906      	bls.n	56f8 <vTaskPriorityInherit+0x8c>
    56ea:	68fb      	ldr	r3, [r7, #12]
    56ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56ee:	f640 6364 	movw	r3, #3684	; 0xe64
    56f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f6:	601a      	str	r2, [r3, #0]
    56f8:	68fb      	ldr	r3, [r7, #12]
    56fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56fc:	4613      	mov	r3, r2
    56fe:	009b      	lsls	r3, r3, #2
    5700:	4413      	add	r3, r2
    5702:	009b      	lsls	r3, r3, #2
    5704:	f640 4258 	movw	r2, #3160	; 0xc58
    5708:	f2c2 0200 	movt	r2, #8192	; 0x2000
    570c:	441a      	add	r2, r3
    570e:	68fb      	ldr	r3, [r7, #12]
    5710:	3304      	adds	r3, #4
    5712:	4610      	mov	r0, r2
    5714:	4619      	mov	r1, r3
    5716:	f7fe faef 	bl	3cf8 <vListInsertEnd>
    571a:	e007      	b.n	572c <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    571c:	f640 4354 	movw	r3, #3156	; 0xc54
    5720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5724:	681b      	ldr	r3, [r3, #0]
    5726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5728:	68fb      	ldr	r3, [r7, #12]
    572a:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    572c:	3710      	adds	r7, #16
    572e:	46bd      	mov	sp, r7
    5730:	bd80      	pop	{r7, pc}
    5732:	bf00      	nop

00005734 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5734:	b580      	push	{r7, lr}
    5736:	b084      	sub	sp, #16
    5738:	af00      	add	r7, sp, #0
    573a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    573c:	687b      	ldr	r3, [r7, #4]
    573e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5740:	687b      	ldr	r3, [r7, #4]
    5742:	2b00      	cmp	r3, #0
    5744:	d035      	beq.n	57b2 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5746:	68fb      	ldr	r3, [r7, #12]
    5748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    574a:	68fb      	ldr	r3, [r7, #12]
    574c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    574e:	429a      	cmp	r2, r3
    5750:	d02f      	beq.n	57b2 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5752:	68fb      	ldr	r3, [r7, #12]
    5754:	3304      	adds	r3, #4
    5756:	4618      	mov	r0, r3
    5758:	f7fe fb2e 	bl	3db8 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    575c:	68fb      	ldr	r3, [r7, #12]
    575e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5760:	68fb      	ldr	r3, [r7, #12]
    5762:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5764:	68fb      	ldr	r3, [r7, #12]
    5766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5768:	f1c3 0214 	rsb	r2, r3, #20
    576c:	68fb      	ldr	r3, [r7, #12]
    576e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5770:	68fb      	ldr	r3, [r7, #12]
    5772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5774:	f640 6364 	movw	r3, #3684	; 0xe64
    5778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    577c:	681b      	ldr	r3, [r3, #0]
    577e:	429a      	cmp	r2, r3
    5780:	d906      	bls.n	5790 <vTaskPriorityDisinherit+0x5c>
    5782:	68fb      	ldr	r3, [r7, #12]
    5784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5786:	f640 6364 	movw	r3, #3684	; 0xe64
    578a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    578e:	601a      	str	r2, [r3, #0]
    5790:	68fb      	ldr	r3, [r7, #12]
    5792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5794:	4613      	mov	r3, r2
    5796:	009b      	lsls	r3, r3, #2
    5798:	4413      	add	r3, r2
    579a:	009b      	lsls	r3, r3, #2
    579c:	f640 4258 	movw	r2, #3160	; 0xc58
    57a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57a4:	441a      	add	r2, r3
    57a6:	68fb      	ldr	r3, [r7, #12]
    57a8:	3304      	adds	r3, #4
    57aa:	4610      	mov	r0, r2
    57ac:	4619      	mov	r1, r3
    57ae:	f7fe faa3 	bl	3cf8 <vListInsertEnd>
			}
		}
	}
    57b2:	3710      	adds	r7, #16
    57b4:	46bd      	mov	sp, r7
    57b6:	bd80      	pop	{r7, pc}

000057b8 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    57b8:	b480      	push	{r7}
    57ba:	b083      	sub	sp, #12
    57bc:	af00      	add	r7, sp, #0
    57be:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    57c4:	4618      	mov	r0, r3
    57c6:	370c      	adds	r7, #12
    57c8:	46bd      	mov	sp, r7
    57ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ce:	4770      	bx	lr

000057d0 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    57d0:	b480      	push	{r7}
    57d2:	b083      	sub	sp, #12
    57d4:	af00      	add	r7, sp, #0
    57d6:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    57d8:	687b      	ldr	r3, [r7, #4]
    57da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    57dc:	4618      	mov	r0, r3
    57de:	370c      	adds	r7, #12
    57e0:	46bd      	mov	sp, r7
    57e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57e6:	4770      	bx	lr

000057e8 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    57e8:	b480      	push	{r7}
    57ea:	b083      	sub	sp, #12
    57ec:	af00      	add	r7, sp, #0
    57ee:	6078      	str	r0, [r7, #4]
    57f0:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    57f2:	687b      	ldr	r3, [r7, #4]
    57f4:	683a      	ldr	r2, [r7, #0]
    57f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    57f8:	370c      	adds	r7, #12
    57fa:	46bd      	mov	sp, r7
    57fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5800:	4770      	bx	lr
    5802:	bf00      	nop

00005804 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5804:	b480      	push	{r7}
    5806:	b083      	sub	sp, #12
    5808:	af00      	add	r7, sp, #0
    580a:	6078      	str	r0, [r7, #4]
    580c:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    580e:	687b      	ldr	r3, [r7, #4]
    5810:	683a      	ldr	r2, [r7, #0]
    5812:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5814:	370c      	adds	r7, #12
    5816:	46bd      	mov	sp, r7
    5818:	f85d 7b04 	ldr.w	r7, [sp], #4
    581c:	4770      	bx	lr
    581e:	bf00      	nop

00005820 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5820:	b480      	push	{r7}
    5822:	b085      	sub	sp, #20
    5824:	af00      	add	r7, sp, #0
    5826:	60f8      	str	r0, [r7, #12]
    5828:	60b9      	str	r1, [r7, #8]
    582a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    582c:	68fb      	ldr	r3, [r7, #12]
    582e:	3b04      	subs	r3, #4
    5830:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5832:	68fb      	ldr	r3, [r7, #12]
    5834:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    583a:	68fb      	ldr	r3, [r7, #12]
    583c:	3b04      	subs	r3, #4
    583e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5840:	68ba      	ldr	r2, [r7, #8]
    5842:	68fb      	ldr	r3, [r7, #12]
    5844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5846:	68fb      	ldr	r3, [r7, #12]
    5848:	3b04      	subs	r3, #4
    584a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    584c:	68fb      	ldr	r3, [r7, #12]
    584e:	2200      	movs	r2, #0
    5850:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5852:	68fb      	ldr	r3, [r7, #12]
    5854:	3b14      	subs	r3, #20
    5856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5858:	687a      	ldr	r2, [r7, #4]
    585a:	68fb      	ldr	r3, [r7, #12]
    585c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    585e:	68fb      	ldr	r3, [r7, #12]
    5860:	3b20      	subs	r3, #32
    5862:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5864:	68fb      	ldr	r3, [r7, #12]
}
    5866:	4618      	mov	r0, r3
    5868:	3714      	adds	r7, #20
    586a:	46bd      	mov	sp, r7
    586c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5870:	4770      	bx	lr
    5872:	bf00      	nop

00005874 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5874:	4b06      	ldr	r3, [pc, #24]	; (5890 <pxCurrentTCBConst2>)
    5876:	6819      	ldr	r1, [r3, #0]
    5878:	6808      	ldr	r0, [r1, #0]
    587a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    587e:	f380 8809 	msr	PSP, r0
    5882:	f04f 0000 	mov.w	r0, #0
    5886:	f380 8811 	msr	BASEPRI, r0
    588a:	f04e 0e0d 	orr.w	lr, lr, #13
    588e:	4770      	bx	lr

00005890 <pxCurrentTCBConst2>:
    5890:	20000c54 	.word	0x20000c54

00005894 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5894:	485d      	ldr	r0, [pc, #372]	; (5a0c <prvSetupTimerInterrupt+0x2c>)
    5896:	6800      	ldr	r0, [r0, #0]
    5898:	6800      	ldr	r0, [r0, #0]
    589a:	f380 8808 	msr	MSP, r0
    589e:	b662      	cpsie	i
    58a0:	df00      	svc	0
    58a2:	bf00      	nop

000058a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    58a4:	b580      	push	{r7, lr}
    58a6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    58a8:	f64e 5320 	movw	r3, #60704	; 0xed20
    58ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
    58b0:	f64e 5220 	movw	r2, #60704	; 0xed20
    58b4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    58b8:	6812      	ldr	r2, [r2, #0]
    58ba:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    58be:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    58c0:	f64e 5320 	movw	r3, #60704	; 0xed20
    58c4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    58c8:	f64e 5220 	movw	r2, #60704	; 0xed20
    58cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    58d0:	6812      	ldr	r2, [r2, #0]
    58d2:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    58d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    58d8:	f000 f882 	bl	59e0 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    58dc:	f240 33e4 	movw	r3, #996	; 0x3e4
    58e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e4:	2200      	movs	r2, #0
    58e6:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    58e8:	f7ff ffd4 	bl	5894 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    58ec:	2300      	movs	r3, #0
}
    58ee:	4618      	mov	r0, r3
    58f0:	bd80      	pop	{r7, pc}
    58f2:	bf00      	nop

000058f4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    58f4:	b480      	push	{r7}
    58f6:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    58f8:	46bd      	mov	sp, r7
    58fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    58fe:	4770      	bx	lr

00005900 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5900:	b480      	push	{r7}
    5902:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5904:	f64e 5304 	movw	r3, #60676	; 0xed04
    5908:	f2ce 0300 	movt	r3, #57344	; 0xe000
    590c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5910:	601a      	str	r2, [r3, #0]
}
    5912:	46bd      	mov	sp, r7
    5914:	f85d 7b04 	ldr.w	r7, [sp], #4
    5918:	4770      	bx	lr
    591a:	bf00      	nop

0000591c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    591c:	b480      	push	{r7}
    591e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5920:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5924:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5928:	f240 33e4 	movw	r3, #996	; 0x3e4
    592c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5930:	681b      	ldr	r3, [r3, #0]
    5932:	1c5a      	adds	r2, r3, #1
    5934:	f240 33e4 	movw	r3, #996	; 0x3e4
    5938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    593c:	601a      	str	r2, [r3, #0]
}
    593e:	46bd      	mov	sp, r7
    5940:	f85d 7b04 	ldr.w	r7, [sp], #4
    5944:	4770      	bx	lr
    5946:	bf00      	nop

00005948 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5948:	b480      	push	{r7}
    594a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    594c:	f240 33e4 	movw	r3, #996	; 0x3e4
    5950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	1e5a      	subs	r2, r3, #1
    5958:	f240 33e4 	movw	r3, #996	; 0x3e4
    595c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5960:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5962:	f240 33e4 	movw	r3, #996	; 0x3e4
    5966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    596a:	681b      	ldr	r3, [r3, #0]
    596c:	2b00      	cmp	r3, #0
    596e:	d103      	bne.n	5978 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5970:	f04f 0000 	mov.w	r0, #0
    5974:	f380 8811 	msr	BASEPRI, r0
	}
}
    5978:	46bd      	mov	sp, r7
    597a:	f85d 7b04 	ldr.w	r7, [sp], #4
    597e:	4770      	bx	lr

00005980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5980:	f3ef 8009 	mrs	r0, PSP
    5984:	4b0c      	ldr	r3, [pc, #48]	; (59b8 <pxCurrentTCBConst>)
    5986:	681a      	ldr	r2, [r3, #0]
    5988:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    598c:	6010      	str	r0, [r2, #0]
    598e:	e92d 4008 	stmdb	sp!, {r3, lr}
    5992:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5996:	f380 8811 	msr	BASEPRI, r0
    599a:	f7ff fba1 	bl	50e0 <vTaskSwitchContext>
    599e:	f04f 0000 	mov.w	r0, #0
    59a2:	f380 8811 	msr	BASEPRI, r0
    59a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    59aa:	6819      	ldr	r1, [r3, #0]
    59ac:	6808      	ldr	r0, [r1, #0]
    59ae:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    59b2:	f380 8809 	msr	PSP, r0
    59b6:	4770      	bx	lr

000059b8 <pxCurrentTCBConst>:
    59b8:	20000c54 	.word	0x20000c54

000059bc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    59bc:	b580      	push	{r7, lr}
    59be:	b082      	sub	sp, #8
    59c0:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    59c2:	2300      	movs	r3, #0
    59c4:	607b      	str	r3, [r7, #4]
    59c6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    59ca:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    59ce:	f7ff faa9 	bl	4f24 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    59d2:	f04f 0000 	mov.w	r0, #0
    59d6:	f380 8811 	msr	BASEPRI, r0
}
    59da:	3708      	adds	r7, #8
    59dc:	46bd      	mov	sp, r7
    59de:	bd80      	pop	{r7, pc}

000059e0 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    59e0:	b480      	push	{r7}
    59e2:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    59e4:	f24e 0314 	movw	r3, #57364	; 0xe014
    59e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    59ec:	f641 123f 	movw	r2, #6463	; 0x193f
    59f0:	f2c0 0201 	movt	r2, #1
    59f4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    59f6:	f24e 0310 	movw	r3, #57360	; 0xe010
    59fa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    59fe:	2207      	movs	r2, #7
    5a00:	601a      	str	r2, [r3, #0]
}
    5a02:	46bd      	mov	sp, r7
    5a04:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a08:	4770      	bx	lr
    5a0a:	0000      	.short	0x0000
    5a0c:	e000ed08 	.word	0xe000ed08

00005a10 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5a10:	b580      	push	{r7, lr}
    5a12:	b08a      	sub	sp, #40	; 0x28
    5a14:	af00      	add	r7, sp, #0
    5a16:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5a18:	2300      	movs	r3, #0
    5a1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5a1c:	f7ff f9a0 	bl	4d60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5a20:	f64a 6390 	movw	r3, #44688	; 0xae90
    5a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a28:	681b      	ldr	r3, [r3, #0]
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	d130      	bne.n	5a90 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5a2e:	f64a 6380 	movw	r3, #44672	; 0xae80
    5a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a36:	f640 6280 	movw	r2, #3712	; 0xe80
    5a3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a3e:	601a      	str	r2, [r3, #0]
    5a40:	f64a 6380 	movw	r3, #44672	; 0xae80
    5a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a48:	2200      	movs	r2, #0
    5a4a:	605a      	str	r2, [r3, #4]
    5a4c:	f64a 6388 	movw	r3, #44680	; 0xae88
    5a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a54:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5a58:	605a      	str	r2, [r3, #4]
    5a5a:	f64a 6388 	movw	r3, #44680	; 0xae88
    5a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a62:	2200      	movs	r2, #0
    5a64:	601a      	str	r2, [r3, #0]
    5a66:	f640 6380 	movw	r3, #3712	; 0xe80
    5a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a6e:	617b      	str	r3, [r7, #20]
    5a70:	697b      	ldr	r3, [r7, #20]
    5a72:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5a76:	605a      	str	r2, [r3, #4]
    5a78:	697a      	ldr	r2, [r7, #20]
    5a7a:	f64a 6388 	movw	r3, #44680	; 0xae88
    5a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a82:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5a84:	f64a 6390 	movw	r3, #44688	; 0xae90
    5a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a8c:	2201      	movs	r2, #1
    5a8e:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5a90:	687b      	ldr	r3, [r7, #4]
    5a92:	2b00      	cmp	r3, #0
    5a94:	d00d      	beq.n	5ab2 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5a96:	2310      	movs	r3, #16
    5a98:	687a      	ldr	r2, [r7, #4]
    5a9a:	4413      	add	r3, r2
    5a9c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5a9e:	687b      	ldr	r3, [r7, #4]
    5aa0:	f003 0307 	and.w	r3, r3, #7
    5aa4:	2b00      	cmp	r3, #0
    5aa6:	d004      	beq.n	5ab2 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	f023 0307 	bic.w	r3, r3, #7
    5aae:	3308      	adds	r3, #8
    5ab0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5ab2:	687b      	ldr	r3, [r7, #4]
    5ab4:	2b00      	cmp	r3, #0
    5ab6:	d068      	beq.n	5b8a <pvPortMalloc+0x17a>
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    5abe:	d264      	bcs.n	5b8a <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5ac0:	f64a 6380 	movw	r3, #44672	; 0xae80
    5ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ac8:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5aca:	f64a 6380 	movw	r3, #44672	; 0xae80
    5ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ad2:	681b      	ldr	r3, [r3, #0]
    5ad4:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5ad6:	e004      	b.n	5ae2 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ada:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ade:	681b      	ldr	r3, [r3, #0]
    5ae0:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ae4:	685a      	ldr	r2, [r3, #4]
    5ae6:	687b      	ldr	r3, [r7, #4]
    5ae8:	429a      	cmp	r2, r3
    5aea:	d203      	bcs.n	5af4 <pvPortMalloc+0xe4>
    5aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5aee:	681b      	ldr	r3, [r3, #0]
    5af0:	2b00      	cmp	r3, #0
    5af2:	d1f1      	bne.n	5ad8 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5af6:	f64a 6388 	movw	r3, #44680	; 0xae88
    5afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5afe:	429a      	cmp	r2, r3
    5b00:	d043      	beq.n	5b8a <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5b02:	6a3b      	ldr	r3, [r7, #32]
    5b04:	681a      	ldr	r2, [r3, #0]
    5b06:	2310      	movs	r3, #16
    5b08:	4413      	add	r3, r2
    5b0a:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b0e:	681a      	ldr	r2, [r3, #0]
    5b10:	6a3b      	ldr	r3, [r7, #32]
    5b12:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b16:	685a      	ldr	r2, [r3, #4]
    5b18:	687b      	ldr	r3, [r7, #4]
    5b1a:	1ad2      	subs	r2, r2, r3
    5b1c:	2310      	movs	r3, #16
    5b1e:	005b      	lsls	r3, r3, #1
    5b20:	429a      	cmp	r2, r3
    5b22:	d925      	bls.n	5b70 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	4413      	add	r3, r2
    5b2a:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b2e:	685a      	ldr	r2, [r3, #4]
    5b30:	687b      	ldr	r3, [r7, #4]
    5b32:	1ad2      	subs	r2, r2, r3
    5b34:	693b      	ldr	r3, [r7, #16]
    5b36:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b3a:	687a      	ldr	r2, [r7, #4]
    5b3c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5b3e:	693b      	ldr	r3, [r7, #16]
    5b40:	685b      	ldr	r3, [r3, #4]
    5b42:	60fb      	str	r3, [r7, #12]
    5b44:	f64a 6380 	movw	r3, #44672	; 0xae80
    5b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b4c:	61bb      	str	r3, [r7, #24]
    5b4e:	e002      	b.n	5b56 <pvPortMalloc+0x146>
    5b50:	69bb      	ldr	r3, [r7, #24]
    5b52:	681b      	ldr	r3, [r3, #0]
    5b54:	61bb      	str	r3, [r7, #24]
    5b56:	69bb      	ldr	r3, [r7, #24]
    5b58:	681b      	ldr	r3, [r3, #0]
    5b5a:	685a      	ldr	r2, [r3, #4]
    5b5c:	68fb      	ldr	r3, [r7, #12]
    5b5e:	429a      	cmp	r2, r3
    5b60:	d3f6      	bcc.n	5b50 <pvPortMalloc+0x140>
    5b62:	69bb      	ldr	r3, [r7, #24]
    5b64:	681a      	ldr	r2, [r3, #0]
    5b66:	693b      	ldr	r3, [r7, #16]
    5b68:	601a      	str	r2, [r3, #0]
    5b6a:	69bb      	ldr	r3, [r7, #24]
    5b6c:	693a      	ldr	r2, [r7, #16]
    5b6e:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5b70:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b78:	681a      	ldr	r2, [r3, #0]
    5b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b7c:	685b      	ldr	r3, [r3, #4]
    5b7e:	1ad2      	subs	r2, r2, r3
    5b80:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b88:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5b8a:	f7ff f8fb 	bl	4d84 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5b8e:	69fb      	ldr	r3, [r7, #28]
}
    5b90:	4618      	mov	r0, r3
    5b92:	3728      	adds	r7, #40	; 0x28
    5b94:	46bd      	mov	sp, r7
    5b96:	bd80      	pop	{r7, pc}

00005b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5b98:	b580      	push	{r7, lr}
    5b9a:	b086      	sub	sp, #24
    5b9c:	af00      	add	r7, sp, #0
    5b9e:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5ba4:	687b      	ldr	r3, [r7, #4]
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d030      	beq.n	5c0c <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5baa:	2310      	movs	r3, #16
    5bac:	425b      	negs	r3, r3
    5bae:	693a      	ldr	r2, [r7, #16]
    5bb0:	4413      	add	r3, r2
    5bb2:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5bb4:	693b      	ldr	r3, [r7, #16]
    5bb6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5bb8:	f7ff f8d2 	bl	4d60 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5bbc:	68fb      	ldr	r3, [r7, #12]
    5bbe:	685b      	ldr	r3, [r3, #4]
    5bc0:	60bb      	str	r3, [r7, #8]
    5bc2:	f64a 6380 	movw	r3, #44672	; 0xae80
    5bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bca:	617b      	str	r3, [r7, #20]
    5bcc:	e002      	b.n	5bd4 <vPortFree+0x3c>
    5bce:	697b      	ldr	r3, [r7, #20]
    5bd0:	681b      	ldr	r3, [r3, #0]
    5bd2:	617b      	str	r3, [r7, #20]
    5bd4:	697b      	ldr	r3, [r7, #20]
    5bd6:	681b      	ldr	r3, [r3, #0]
    5bd8:	685a      	ldr	r2, [r3, #4]
    5bda:	68bb      	ldr	r3, [r7, #8]
    5bdc:	429a      	cmp	r2, r3
    5bde:	d3f6      	bcc.n	5bce <vPortFree+0x36>
    5be0:	697b      	ldr	r3, [r7, #20]
    5be2:	681a      	ldr	r2, [r3, #0]
    5be4:	68fb      	ldr	r3, [r7, #12]
    5be6:	601a      	str	r2, [r3, #0]
    5be8:	697b      	ldr	r3, [r7, #20]
    5bea:	68fa      	ldr	r2, [r7, #12]
    5bec:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5bee:	68fb      	ldr	r3, [r7, #12]
    5bf0:	685a      	ldr	r2, [r3, #4]
    5bf2:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bfa:	681b      	ldr	r3, [r3, #0]
    5bfc:	441a      	add	r2, r3
    5bfe:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c06:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5c08:	f7ff f8bc 	bl	4d84 <xTaskResumeAll>
	}
}
    5c0c:	3718      	adds	r7, #24
    5c0e:	46bd      	mov	sp, r7
    5c10:	bd80      	pop	{r7, pc}
    5c12:	bf00      	nop

00005c14 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5c14:	b480      	push	{r7}
    5c16:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5c18:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c20:	681b      	ldr	r3, [r3, #0]
}
    5c22:	4618      	mov	r0, r3
    5c24:	46bd      	mov	sp, r7
    5c26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c2a:	4770      	bx	lr

00005c2c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5c2c:	b480      	push	{r7}
    5c2e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5c30:	46bd      	mov	sp, r7
    5c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c36:	4770      	bx	lr

00005c38 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5c38:	b580      	push	{r7, lr}
    5c3a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5c3c:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
    5c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c44:	781b      	ldrb	r3, [r3, #0]
    5c46:	2b00      	cmp	r3, #0
    5c48:	f040 815d 	bne.w	5f06 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5c4c:	f64a 639a 	movw	r3, #44698	; 0xae9a
    5c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c54:	881b      	ldrh	r3, [r3, #0]
    5c56:	2b09      	cmp	r3, #9
    5c58:	f201 8145 	bhi.w	6ee6 <ground_calibrate+0x12ae>
    5c5c:	f64a 639c 	movw	r3, #44700	; 0xae9c
    5c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c64:	781b      	ldrb	r3, [r3, #0]
    5c66:	2b01      	cmp	r3, #1
    5c68:	f041 813d 	bne.w	6ee6 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5c6c:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
    5c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c74:	2201      	movs	r2, #1
    5c76:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5c78:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c80:	781a      	ldrb	r2, [r3, #0]
    5c82:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    5c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c8a:	781b      	ldrb	r3, [r3, #0]
    5c8c:	b2db      	uxtb	r3, r3
    5c8e:	429a      	cmp	r2, r3
    5c90:	d313      	bcc.n	5cba <ground_calibrate+0x82>
    5c92:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    5c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c9a:	781b      	ldrb	r3, [r3, #0]
    5c9c:	b2db      	uxtb	r3, r3
    5c9e:	461a      	mov	r2, r3
    5ca0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca8:	781b      	ldrb	r3, [r3, #0]
    5caa:	1ad3      	subs	r3, r2, r3
    5cac:	33ff      	adds	r3, #255	; 0xff
    5cae:	2b04      	cmp	r3, #4
    5cb0:	bfd4      	ite	le
    5cb2:	2300      	movle	r3, #0
    5cb4:	2301      	movgt	r3, #1
    5cb6:	b2db      	uxtb	r3, r3
    5cb8:	e011      	b.n	5cde <ground_calibrate+0xa6>
    5cba:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    5cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	b2db      	uxtb	r3, r3
    5cc6:	461a      	mov	r2, r3
    5cc8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cd0:	781b      	ldrb	r3, [r3, #0]
    5cd2:	1ad3      	subs	r3, r2, r3
    5cd4:	2b04      	cmp	r3, #4
    5cd6:	bfd4      	ite	le
    5cd8:	2300      	movle	r3, #0
    5cda:	2301      	movgt	r3, #1
    5cdc:	b2db      	uxtb	r3, r3
    5cde:	2b00      	cmp	r3, #0
    5ce0:	f000 8103 	beq.w	5eea <ground_calibrate+0x2b2>
    5ce4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cec:	781b      	ldrb	r3, [r3, #0]
    5cee:	461a      	mov	r2, r3
    5cf0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    5cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cf8:	2105      	movs	r1, #5
    5cfa:	5499      	strb	r1, [r3, r2]
    5cfc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d04:	781b      	ldrb	r3, [r3, #0]
    5d06:	3301      	adds	r3, #1
    5d08:	b2da      	uxtb	r2, r3
    5d0a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d12:	701a      	strb	r2, [r3, #0]
    5d14:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d1c:	781b      	ldrb	r3, [r3, #0]
    5d1e:	2bff      	cmp	r3, #255	; 0xff
    5d20:	d105      	bne.n	5d2e <ground_calibrate+0xf6>
    5d22:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d2a:	2200      	movs	r2, #0
    5d2c:	701a      	strb	r2, [r3, #0]
    5d2e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d36:	781b      	ldrb	r3, [r3, #0]
    5d38:	461a      	mov	r2, r3
    5d3a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    5d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d42:	2102      	movs	r1, #2
    5d44:	5499      	strb	r1, [r3, r2]
    5d46:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d4e:	781b      	ldrb	r3, [r3, #0]
    5d50:	3301      	adds	r3, #1
    5d52:	b2da      	uxtb	r2, r3
    5d54:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d5c:	701a      	strb	r2, [r3, #0]
    5d5e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d66:	781b      	ldrb	r3, [r3, #0]
    5d68:	2bff      	cmp	r3, #255	; 0xff
    5d6a:	d105      	bne.n	5d78 <ground_calibrate+0x140>
    5d6c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d74:	2200      	movs	r2, #0
    5d76:	701a      	strb	r2, [r3, #0]
    5d78:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    5d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d80:	2202      	movs	r2, #2
    5d82:	701a      	strb	r2, [r3, #0]
    5d84:	f64a 73be 	movw	r3, #44990	; 0xafbe
    5d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d8c:	2202      	movs	r2, #2
    5d8e:	701a      	strb	r2, [r3, #0]
    5d90:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d98:	781b      	ldrb	r3, [r3, #0]
    5d9a:	461a      	mov	r2, r3
    5d9c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    5da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da4:	7819      	ldrb	r1, [r3, #0]
    5da6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    5daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dae:	5499      	strb	r1, [r3, r2]
    5db0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db8:	781b      	ldrb	r3, [r3, #0]
    5dba:	3301      	adds	r3, #1
    5dbc:	b2da      	uxtb	r2, r3
    5dbe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dc6:	701a      	strb	r2, [r3, #0]
    5dc8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dd0:	781b      	ldrb	r3, [r3, #0]
    5dd2:	2bff      	cmp	r3, #255	; 0xff
    5dd4:	d105      	bne.n	5de2 <ground_calibrate+0x1aa>
    5dd6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dde:	2200      	movs	r2, #0
    5de0:	701a      	strb	r2, [r3, #0]
    5de2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dea:	781b      	ldrb	r3, [r3, #0]
    5dec:	461a      	mov	r2, r3
    5dee:	f64a 73be 	movw	r3, #44990	; 0xafbe
    5df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df6:	7819      	ldrb	r1, [r3, #0]
    5df8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    5dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e00:	5499      	strb	r1, [r3, r2]
    5e02:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e0a:	781b      	ldrb	r3, [r3, #0]
    5e0c:	3301      	adds	r3, #1
    5e0e:	b2da      	uxtb	r2, r3
    5e10:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e18:	701a      	strb	r2, [r3, #0]
    5e1a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e22:	781b      	ldrb	r3, [r3, #0]
    5e24:	2bff      	cmp	r3, #255	; 0xff
    5e26:	d105      	bne.n	5e34 <ground_calibrate+0x1fc>
    5e28:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e30:	2200      	movs	r2, #0
    5e32:	701a      	strb	r2, [r3, #0]
    5e34:	f242 0339 	movw	r3, #8249	; 0x2039
    5e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e3c:	781b      	ldrb	r3, [r3, #0]
    5e3e:	b2db      	uxtb	r3, r3
    5e40:	f003 0310 	and.w	r3, r3, #16
    5e44:	2b00      	cmp	r3, #0
    5e46:	f041 804e 	bne.w	6ee6 <ground_calibrate+0x12ae>
    5e4a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    5e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e52:	781b      	ldrb	r3, [r3, #0]
    5e54:	b2db      	uxtb	r3, r3
    5e56:	461a      	mov	r2, r3
    5e58:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    5e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e60:	5c9a      	ldrb	r2, [r3, r2]
    5e62:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    5e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e6a:	701a      	strb	r2, [r3, #0]
    5e6c:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    5e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e74:	2200      	movs	r2, #0
    5e76:	701a      	strb	r2, [r3, #0]
    5e78:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    5e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e80:	781b      	ldrb	r3, [r3, #0]
    5e82:	b2db      	uxtb	r3, r3
    5e84:	3301      	adds	r3, #1
    5e86:	b2da      	uxtb	r2, r3
    5e88:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    5e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e90:	701a      	strb	r2, [r3, #0]
    5e92:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    5e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e9a:	781b      	ldrb	r3, [r3, #0]
    5e9c:	b2db      	uxtb	r3, r3
    5e9e:	2bff      	cmp	r3, #255	; 0xff
    5ea0:	d105      	bne.n	5eae <ground_calibrate+0x276>
    5ea2:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    5ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eaa:	2200      	movs	r2, #0
    5eac:	701a      	strb	r2, [r3, #0]
    5eae:	f242 0338 	movw	r3, #8248	; 0x2038
    5eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb6:	f242 0238 	movw	r2, #8248	; 0x2038
    5eba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ebe:	7812      	ldrb	r2, [r2, #0]
    5ec0:	b2d2      	uxtb	r2, r2
    5ec2:	f042 0201 	orr.w	r2, r2, #1
    5ec6:	b2d2      	uxtb	r2, r2
    5ec8:	701a      	strb	r2, [r3, #0]
    5eca:	f242 0339 	movw	r3, #8249	; 0x2039
    5ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed2:	f242 0239 	movw	r2, #8249	; 0x2039
    5ed6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5eda:	7812      	ldrb	r2, [r2, #0]
    5edc:	b2d2      	uxtb	r2, r2
    5ede:	f042 0210 	orr.w	r2, r2, #16
    5ee2:	b2d2      	uxtb	r2, r2
    5ee4:	701a      	strb	r2, [r3, #0]
    5ee6:	f000 bffe 	b.w	6ee6 <ground_calibrate+0x12ae>
    5eea:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    5eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ef2:	781b      	ldrb	r3, [r3, #0]
    5ef4:	3301      	adds	r3, #1
    5ef6:	b2da      	uxtb	r2, r3
    5ef8:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    5efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f00:	701a      	strb	r2, [r3, #0]
    5f02:	f000 bff0 	b.w	6ee6 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    5f06:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
    5f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f0e:	781b      	ldrb	r3, [r3, #0]
    5f10:	2b01      	cmp	r3, #1
    5f12:	f040 87e8 	bne.w	6ee6 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    5f16:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    5f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f1e:	885b      	ldrh	r3, [r3, #2]
    5f20:	b21b      	sxth	r3, r3
    5f22:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    5f26:	db09      	blt.n	5f3c <ground_calibrate+0x304>
    5f28:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    5f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f30:	885b      	ldrh	r3, [r3, #2]
    5f32:	b21b      	sxth	r3, r3
    5f34:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5f38:	f340 87d5 	ble.w	6ee6 <ground_calibrate+0x12ae>
      ir_gain_calib();
    5f3c:	f00b fcfc 	bl	11938 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    5f40:	f240 33f8 	movw	r3, #1016	; 0x3f8
    5f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f48:	681a      	ldr	r2, [r3, #0]
    5f4a:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    5f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f52:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    5f54:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f5c:	781a      	ldrb	r2, [r3, #0]
    5f5e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    5f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f66:	781b      	ldrb	r3, [r3, #0]
    5f68:	b2db      	uxtb	r3, r3
    5f6a:	429a      	cmp	r2, r3
    5f6c:	d313      	bcc.n	5f96 <ground_calibrate+0x35e>
    5f6e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    5f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f76:	781b      	ldrb	r3, [r3, #0]
    5f78:	b2db      	uxtb	r3, r3
    5f7a:	461a      	mov	r2, r3
    5f7c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f84:	781b      	ldrb	r3, [r3, #0]
    5f86:	1ad3      	subs	r3, r2, r3
    5f88:	33ff      	adds	r3, #255	; 0xff
    5f8a:	2b14      	cmp	r3, #20
    5f8c:	bfd4      	ite	le
    5f8e:	2300      	movle	r3, #0
    5f90:	2301      	movgt	r3, #1
    5f92:	b2db      	uxtb	r3, r3
    5f94:	e011      	b.n	5fba <ground_calibrate+0x382>
    5f96:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    5f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f9e:	781b      	ldrb	r3, [r3, #0]
    5fa0:	b2db      	uxtb	r3, r3
    5fa2:	461a      	mov	r2, r3
    5fa4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fac:	781b      	ldrb	r3, [r3, #0]
    5fae:	1ad3      	subs	r3, r2, r3
    5fb0:	2b14      	cmp	r3, #20
    5fb2:	bfd4      	ite	le
    5fb4:	2300      	movle	r3, #0
    5fb6:	2301      	movgt	r3, #1
    5fb8:	b2db      	uxtb	r3, r3
    5fba:	2b00      	cmp	r3, #0
    5fbc:	f000 85a6 	beq.w	6b0c <ground_calibrate+0xed4>
    5fc0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc8:	781b      	ldrb	r3, [r3, #0]
    5fca:	461a      	mov	r2, r3
    5fcc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    5fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fd4:	2105      	movs	r1, #5
    5fd6:	5499      	strb	r1, [r3, r2]
    5fd8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fe0:	781b      	ldrb	r3, [r3, #0]
    5fe2:	3301      	adds	r3, #1
    5fe4:	b2da      	uxtb	r2, r3
    5fe6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fee:	701a      	strb	r2, [r3, #0]
    5ff0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    5ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff8:	781b      	ldrb	r3, [r3, #0]
    5ffa:	2bff      	cmp	r3, #255	; 0xff
    5ffc:	d105      	bne.n	600a <ground_calibrate+0x3d2>
    5ffe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6006:	2200      	movs	r2, #0
    6008:	701a      	strb	r2, [r3, #0]
    600a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    600e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6012:	781b      	ldrb	r3, [r3, #0]
    6014:	461a      	mov	r2, r3
    6016:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    601a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    601e:	2105      	movs	r1, #5
    6020:	5499      	strb	r1, [r3, r2]
    6022:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    602a:	781b      	ldrb	r3, [r3, #0]
    602c:	3301      	adds	r3, #1
    602e:	b2da      	uxtb	r2, r3
    6030:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6038:	701a      	strb	r2, [r3, #0]
    603a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    603e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6042:	781b      	ldrb	r3, [r3, #0]
    6044:	2bff      	cmp	r3, #255	; 0xff
    6046:	d105      	bne.n	6054 <ground_calibrate+0x41c>
    6048:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    604c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6050:	2200      	movs	r2, #0
    6052:	701a      	strb	r2, [r3, #0]
    6054:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    605c:	2205      	movs	r2, #5
    605e:	701a      	strb	r2, [r3, #0]
    6060:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6068:	2205      	movs	r2, #5
    606a:	701a      	strb	r2, [r3, #0]
    606c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6074:	781b      	ldrb	r3, [r3, #0]
    6076:	461a      	mov	r2, r3
    6078:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    607c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6080:	7819      	ldrb	r1, [r3, #0]
    6082:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    608a:	5499      	strb	r1, [r3, r2]
    608c:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    6090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6094:	781a      	ldrb	r2, [r3, #0]
    6096:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    609a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    609e:	781b      	ldrb	r3, [r3, #0]
    60a0:	4413      	add	r3, r2
    60a2:	b2da      	uxtb	r2, r3
    60a4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    60a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ac:	701a      	strb	r2, [r3, #0]
    60ae:	f64a 73be 	movw	r3, #44990	; 0xafbe
    60b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60b6:	781a      	ldrb	r2, [r3, #0]
    60b8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    60bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60c0:	781b      	ldrb	r3, [r3, #0]
    60c2:	4413      	add	r3, r2
    60c4:	b2da      	uxtb	r2, r3
    60c6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    60ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ce:	701a      	strb	r2, [r3, #0]
    60d0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    60d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60d8:	781b      	ldrb	r3, [r3, #0]
    60da:	3301      	adds	r3, #1
    60dc:	b2da      	uxtb	r2, r3
    60de:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    60e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60e6:	701a      	strb	r2, [r3, #0]
    60e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    60ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60f0:	781b      	ldrb	r3, [r3, #0]
    60f2:	2bff      	cmp	r3, #255	; 0xff
    60f4:	d105      	bne.n	6102 <ground_calibrate+0x4ca>
    60f6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    60fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60fe:	2200      	movs	r2, #0
    6100:	701a      	strb	r2, [r3, #0]
    6102:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    610a:	781b      	ldrb	r3, [r3, #0]
    610c:	461a      	mov	r2, r3
    610e:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    6112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6116:	7859      	ldrb	r1, [r3, #1]
    6118:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    611c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6120:	5499      	strb	r1, [r3, r2]
    6122:	4bd2      	ldr	r3, [pc, #840]	; (646c <ground_calibrate+0x834>)
    6124:	781a      	ldrb	r2, [r3, #0]
    6126:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    612a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    612e:	781b      	ldrb	r3, [r3, #0]
    6130:	4413      	add	r3, r2
    6132:	b2da      	uxtb	r2, r3
    6134:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    613c:	701a      	strb	r2, [r3, #0]
    613e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6146:	781a      	ldrb	r2, [r3, #0]
    6148:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    614c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6150:	781b      	ldrb	r3, [r3, #0]
    6152:	4413      	add	r3, r2
    6154:	b2da      	uxtb	r2, r3
    6156:	f64a 73be 	movw	r3, #44990	; 0xafbe
    615a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    615e:	701a      	strb	r2, [r3, #0]
    6160:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6168:	781b      	ldrb	r3, [r3, #0]
    616a:	3301      	adds	r3, #1
    616c:	b2da      	uxtb	r2, r3
    616e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6176:	701a      	strb	r2, [r3, #0]
    6178:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    617c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6180:	781b      	ldrb	r3, [r3, #0]
    6182:	2bff      	cmp	r3, #255	; 0xff
    6184:	d105      	bne.n	6192 <ground_calibrate+0x55a>
    6186:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    618a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    618e:	2200      	movs	r2, #0
    6190:	701a      	strb	r2, [r3, #0]
    6192:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    619a:	781b      	ldrb	r3, [r3, #0]
    619c:	461a      	mov	r2, r3
    619e:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    61a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61a6:	7899      	ldrb	r1, [r3, #2]
    61a8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    61ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61b0:	5499      	strb	r1, [r3, r2]
    61b2:	4baf      	ldr	r3, [pc, #700]	; (6470 <ground_calibrate+0x838>)
    61b4:	781a      	ldrb	r2, [r3, #0]
    61b6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    61ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61be:	781b      	ldrb	r3, [r3, #0]
    61c0:	4413      	add	r3, r2
    61c2:	b2da      	uxtb	r2, r3
    61c4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    61c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61cc:	701a      	strb	r2, [r3, #0]
    61ce:	f64a 73be 	movw	r3, #44990	; 0xafbe
    61d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61d6:	781a      	ldrb	r2, [r3, #0]
    61d8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    61dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61e0:	781b      	ldrb	r3, [r3, #0]
    61e2:	4413      	add	r3, r2
    61e4:	b2da      	uxtb	r2, r3
    61e6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    61ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ee:	701a      	strb	r2, [r3, #0]
    61f0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    61f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61f8:	781b      	ldrb	r3, [r3, #0]
    61fa:	3301      	adds	r3, #1
    61fc:	b2da      	uxtb	r2, r3
    61fe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6206:	701a      	strb	r2, [r3, #0]
    6208:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    620c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6210:	781b      	ldrb	r3, [r3, #0]
    6212:	2bff      	cmp	r3, #255	; 0xff
    6214:	d105      	bne.n	6222 <ground_calibrate+0x5ea>
    6216:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    621a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    621e:	2200      	movs	r2, #0
    6220:	701a      	strb	r2, [r3, #0]
    6222:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    622a:	781b      	ldrb	r3, [r3, #0]
    622c:	461a      	mov	r2, r3
    622e:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    6232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6236:	78d9      	ldrb	r1, [r3, #3]
    6238:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    623c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6240:	5499      	strb	r1, [r3, r2]
    6242:	4b8c      	ldr	r3, [pc, #560]	; (6474 <ground_calibrate+0x83c>)
    6244:	781a      	ldrb	r2, [r3, #0]
    6246:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    624a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    624e:	781b      	ldrb	r3, [r3, #0]
    6250:	4413      	add	r3, r2
    6252:	b2da      	uxtb	r2, r3
    6254:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625c:	701a      	strb	r2, [r3, #0]
    625e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6266:	781a      	ldrb	r2, [r3, #0]
    6268:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    626c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6270:	781b      	ldrb	r3, [r3, #0]
    6272:	4413      	add	r3, r2
    6274:	b2da      	uxtb	r2, r3
    6276:	f64a 73be 	movw	r3, #44990	; 0xafbe
    627a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    627e:	701a      	strb	r2, [r3, #0]
    6280:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6288:	781b      	ldrb	r3, [r3, #0]
    628a:	3301      	adds	r3, #1
    628c:	b2da      	uxtb	r2, r3
    628e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6296:	701a      	strb	r2, [r3, #0]
    6298:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    629c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a0:	781b      	ldrb	r3, [r3, #0]
    62a2:	2bff      	cmp	r3, #255	; 0xff
    62a4:	d105      	bne.n	62b2 <ground_calibrate+0x67a>
    62a6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    62aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ae:	2200      	movs	r2, #0
    62b0:	701a      	strb	r2, [r3, #0]
    62b2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    62b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ba:	781b      	ldrb	r3, [r3, #0]
    62bc:	461a      	mov	r2, r3
    62be:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    62c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62c6:	7819      	ldrb	r1, [r3, #0]
    62c8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    62cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d0:	5499      	strb	r1, [r3, r2]
    62d2:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    62d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62da:	781a      	ldrb	r2, [r3, #0]
    62dc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    62e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62e4:	781b      	ldrb	r3, [r3, #0]
    62e6:	4413      	add	r3, r2
    62e8:	b2da      	uxtb	r2, r3
    62ea:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    62ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f2:	701a      	strb	r2, [r3, #0]
    62f4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    62f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62fc:	781a      	ldrb	r2, [r3, #0]
    62fe:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6306:	781b      	ldrb	r3, [r3, #0]
    6308:	4413      	add	r3, r2
    630a:	b2da      	uxtb	r2, r3
    630c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6314:	701a      	strb	r2, [r3, #0]
    6316:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    631a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    631e:	781b      	ldrb	r3, [r3, #0]
    6320:	3301      	adds	r3, #1
    6322:	b2da      	uxtb	r2, r3
    6324:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    632c:	701a      	strb	r2, [r3, #0]
    632e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6336:	781b      	ldrb	r3, [r3, #0]
    6338:	2bff      	cmp	r3, #255	; 0xff
    633a:	d105      	bne.n	6348 <ground_calibrate+0x710>
    633c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6344:	2200      	movs	r2, #0
    6346:	701a      	strb	r2, [r3, #0]
    6348:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    634c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6350:	781b      	ldrb	r3, [r3, #0]
    6352:	461a      	mov	r2, r3
    6354:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    6358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    635c:	7859      	ldrb	r1, [r3, #1]
    635e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6366:	5499      	strb	r1, [r3, r2]
    6368:	4b43      	ldr	r3, [pc, #268]	; (6478 <ground_calibrate+0x840>)
    636a:	781a      	ldrb	r2, [r3, #0]
    636c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6374:	781b      	ldrb	r3, [r3, #0]
    6376:	4413      	add	r3, r2
    6378:	b2da      	uxtb	r2, r3
    637a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    637e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6382:	701a      	strb	r2, [r3, #0]
    6384:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    638c:	781a      	ldrb	r2, [r3, #0]
    638e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6396:	781b      	ldrb	r3, [r3, #0]
    6398:	4413      	add	r3, r2
    639a:	b2da      	uxtb	r2, r3
    639c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    63a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63a4:	701a      	strb	r2, [r3, #0]
    63a6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    63aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ae:	781b      	ldrb	r3, [r3, #0]
    63b0:	3301      	adds	r3, #1
    63b2:	b2da      	uxtb	r2, r3
    63b4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    63b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63bc:	701a      	strb	r2, [r3, #0]
    63be:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    63c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63c6:	781b      	ldrb	r3, [r3, #0]
    63c8:	2bff      	cmp	r3, #255	; 0xff
    63ca:	d105      	bne.n	63d8 <ground_calibrate+0x7a0>
    63cc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    63d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d4:	2200      	movs	r2, #0
    63d6:	701a      	strb	r2, [r3, #0]
    63d8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    63dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e0:	781b      	ldrb	r3, [r3, #0]
    63e2:	461a      	mov	r2, r3
    63e4:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    63e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ec:	7899      	ldrb	r1, [r3, #2]
    63ee:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    63f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f6:	5499      	strb	r1, [r3, r2]
    63f8:	4b20      	ldr	r3, [pc, #128]	; (647c <ground_calibrate+0x844>)
    63fa:	781a      	ldrb	r2, [r3, #0]
    63fc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6404:	781b      	ldrb	r3, [r3, #0]
    6406:	4413      	add	r3, r2
    6408:	b2da      	uxtb	r2, r3
    640a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    640e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6412:	701a      	strb	r2, [r3, #0]
    6414:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    641c:	781a      	ldrb	r2, [r3, #0]
    641e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6426:	781b      	ldrb	r3, [r3, #0]
    6428:	4413      	add	r3, r2
    642a:	b2da      	uxtb	r2, r3
    642c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6434:	701a      	strb	r2, [r3, #0]
    6436:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    643a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    643e:	781b      	ldrb	r3, [r3, #0]
    6440:	3301      	adds	r3, #1
    6442:	b2da      	uxtb	r2, r3
    6444:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    644c:	701a      	strb	r2, [r3, #0]
    644e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6456:	781b      	ldrb	r3, [r3, #0]
    6458:	2bff      	cmp	r3, #255	; 0xff
    645a:	d111      	bne.n	6480 <ground_calibrate+0x848>
    645c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6464:	2200      	movs	r2, #0
    6466:	701a      	strb	r2, [r3, #0]
    6468:	e00a      	b.n	6480 <ground_calibrate+0x848>
    646a:	bf00      	nop
    646c:	2000b4b1 	.word	0x2000b4b1
    6470:	2000b4b2 	.word	0x2000b4b2
    6474:	2000b4b3 	.word	0x2000b4b3
    6478:	2000b4b5 	.word	0x2000b4b5
    647c:	2000b4b6 	.word	0x2000b4b6
    6480:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6488:	781b      	ldrb	r3, [r3, #0]
    648a:	461a      	mov	r2, r3
    648c:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    6490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6494:	78d9      	ldrb	r1, [r3, #3]
    6496:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    649a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    649e:	5499      	strb	r1, [r3, r2]
    64a0:	4bd3      	ldr	r3, [pc, #844]	; (67f0 <ground_calibrate+0xbb8>)
    64a2:	781a      	ldrb	r2, [r3, #0]
    64a4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    64a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ac:	781b      	ldrb	r3, [r3, #0]
    64ae:	4413      	add	r3, r2
    64b0:	b2da      	uxtb	r2, r3
    64b2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    64b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ba:	701a      	strb	r2, [r3, #0]
    64bc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    64c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64c4:	781a      	ldrb	r2, [r3, #0]
    64c6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    64ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ce:	781b      	ldrb	r3, [r3, #0]
    64d0:	4413      	add	r3, r2
    64d2:	b2da      	uxtb	r2, r3
    64d4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    64d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64dc:	701a      	strb	r2, [r3, #0]
    64de:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    64e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64e6:	781b      	ldrb	r3, [r3, #0]
    64e8:	3301      	adds	r3, #1
    64ea:	b2da      	uxtb	r2, r3
    64ec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    64f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64f4:	701a      	strb	r2, [r3, #0]
    64f6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    64fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64fe:	781b      	ldrb	r3, [r3, #0]
    6500:	2bff      	cmp	r3, #255	; 0xff
    6502:	d105      	bne.n	6510 <ground_calibrate+0x8d8>
    6504:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    650c:	2200      	movs	r2, #0
    650e:	701a      	strb	r2, [r3, #0]
    6510:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6518:	781b      	ldrb	r3, [r3, #0]
    651a:	461a      	mov	r2, r3
    651c:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    6520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6524:	7819      	ldrb	r1, [r3, #0]
    6526:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    652a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    652e:	5499      	strb	r1, [r3, r2]
    6530:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    6534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6538:	781a      	ldrb	r2, [r3, #0]
    653a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    653e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6542:	781b      	ldrb	r3, [r3, #0]
    6544:	4413      	add	r3, r2
    6546:	b2da      	uxtb	r2, r3
    6548:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    654c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6550:	701a      	strb	r2, [r3, #0]
    6552:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    655a:	781a      	ldrb	r2, [r3, #0]
    655c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6564:	781b      	ldrb	r3, [r3, #0]
    6566:	4413      	add	r3, r2
    6568:	b2da      	uxtb	r2, r3
    656a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    656e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6572:	701a      	strb	r2, [r3, #0]
    6574:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    657c:	781b      	ldrb	r3, [r3, #0]
    657e:	3301      	adds	r3, #1
    6580:	b2da      	uxtb	r2, r3
    6582:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    658a:	701a      	strb	r2, [r3, #0]
    658c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6594:	781b      	ldrb	r3, [r3, #0]
    6596:	2bff      	cmp	r3, #255	; 0xff
    6598:	d105      	bne.n	65a6 <ground_calibrate+0x96e>
    659a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    659e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65a2:	2200      	movs	r2, #0
    65a4:	701a      	strb	r2, [r3, #0]
    65a6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    65aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ae:	781b      	ldrb	r3, [r3, #0]
    65b0:	461a      	mov	r2, r3
    65b2:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    65b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ba:	7859      	ldrb	r1, [r3, #1]
    65bc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    65c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c4:	5499      	strb	r1, [r3, r2]
    65c6:	4b8b      	ldr	r3, [pc, #556]	; (67f4 <ground_calibrate+0xbbc>)
    65c8:	781a      	ldrb	r2, [r3, #0]
    65ca:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    65ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65d2:	781b      	ldrb	r3, [r3, #0]
    65d4:	4413      	add	r3, r2
    65d6:	b2da      	uxtb	r2, r3
    65d8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    65dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65e0:	701a      	strb	r2, [r3, #0]
    65e2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    65e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ea:	781a      	ldrb	r2, [r3, #0]
    65ec:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    65f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65f4:	781b      	ldrb	r3, [r3, #0]
    65f6:	4413      	add	r3, r2
    65f8:	b2da      	uxtb	r2, r3
    65fa:	f64a 73be 	movw	r3, #44990	; 0xafbe
    65fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6602:	701a      	strb	r2, [r3, #0]
    6604:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    660c:	781b      	ldrb	r3, [r3, #0]
    660e:	3301      	adds	r3, #1
    6610:	b2da      	uxtb	r2, r3
    6612:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    661a:	701a      	strb	r2, [r3, #0]
    661c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6624:	781b      	ldrb	r3, [r3, #0]
    6626:	2bff      	cmp	r3, #255	; 0xff
    6628:	d105      	bne.n	6636 <ground_calibrate+0x9fe>
    662a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    662e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6632:	2200      	movs	r2, #0
    6634:	701a      	strb	r2, [r3, #0]
    6636:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    663a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    663e:	781b      	ldrb	r3, [r3, #0]
    6640:	461a      	mov	r2, r3
    6642:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    6646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    664a:	7899      	ldrb	r1, [r3, #2]
    664c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6654:	5499      	strb	r1, [r3, r2]
    6656:	4b68      	ldr	r3, [pc, #416]	; (67f8 <ground_calibrate+0xbc0>)
    6658:	781a      	ldrb	r2, [r3, #0]
    665a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    665e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6662:	781b      	ldrb	r3, [r3, #0]
    6664:	4413      	add	r3, r2
    6666:	b2da      	uxtb	r2, r3
    6668:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    666c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6670:	701a      	strb	r2, [r3, #0]
    6672:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    667a:	781a      	ldrb	r2, [r3, #0]
    667c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6684:	781b      	ldrb	r3, [r3, #0]
    6686:	4413      	add	r3, r2
    6688:	b2da      	uxtb	r2, r3
    668a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    668e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6692:	701a      	strb	r2, [r3, #0]
    6694:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    669c:	781b      	ldrb	r3, [r3, #0]
    669e:	3301      	adds	r3, #1
    66a0:	b2da      	uxtb	r2, r3
    66a2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    66a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66aa:	701a      	strb	r2, [r3, #0]
    66ac:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    66b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66b4:	781b      	ldrb	r3, [r3, #0]
    66b6:	2bff      	cmp	r3, #255	; 0xff
    66b8:	d105      	bne.n	66c6 <ground_calibrate+0xa8e>
    66ba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    66be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66c2:	2200      	movs	r2, #0
    66c4:	701a      	strb	r2, [r3, #0]
    66c6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    66ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ce:	781b      	ldrb	r3, [r3, #0]
    66d0:	461a      	mov	r2, r3
    66d2:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    66d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66da:	78d9      	ldrb	r1, [r3, #3]
    66dc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    66e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66e4:	5499      	strb	r1, [r3, r2]
    66e6:	4b45      	ldr	r3, [pc, #276]	; (67fc <ground_calibrate+0xbc4>)
    66e8:	781a      	ldrb	r2, [r3, #0]
    66ea:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    66ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66f2:	781b      	ldrb	r3, [r3, #0]
    66f4:	4413      	add	r3, r2
    66f6:	b2da      	uxtb	r2, r3
    66f8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    66fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6700:	701a      	strb	r2, [r3, #0]
    6702:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    670a:	781a      	ldrb	r2, [r3, #0]
    670c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6714:	781b      	ldrb	r3, [r3, #0]
    6716:	4413      	add	r3, r2
    6718:	b2da      	uxtb	r2, r3
    671a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    671e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6722:	701a      	strb	r2, [r3, #0]
    6724:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    672c:	781b      	ldrb	r3, [r3, #0]
    672e:	3301      	adds	r3, #1
    6730:	b2da      	uxtb	r2, r3
    6732:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    673a:	701a      	strb	r2, [r3, #0]
    673c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6744:	781b      	ldrb	r3, [r3, #0]
    6746:	2bff      	cmp	r3, #255	; 0xff
    6748:	d105      	bne.n	6756 <ground_calibrate+0xb1e>
    674a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    674e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6752:	2200      	movs	r2, #0
    6754:	701a      	strb	r2, [r3, #0]
    6756:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    675a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    675e:	781b      	ldrb	r3, [r3, #0]
    6760:	461a      	mov	r2, r3
    6762:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    676a:	7819      	ldrb	r1, [r3, #0]
    676c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6774:	5499      	strb	r1, [r3, r2]
    6776:	f240 33f2 	movw	r3, #1010	; 0x3f2
    677a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    677e:	781a      	ldrb	r2, [r3, #0]
    6780:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6788:	781b      	ldrb	r3, [r3, #0]
    678a:	4413      	add	r3, r2
    678c:	b2da      	uxtb	r2, r3
    678e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6796:	701a      	strb	r2, [r3, #0]
    6798:	f64a 73be 	movw	r3, #44990	; 0xafbe
    679c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67a0:	781a      	ldrb	r2, [r3, #0]
    67a2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    67a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67aa:	781b      	ldrb	r3, [r3, #0]
    67ac:	4413      	add	r3, r2
    67ae:	b2da      	uxtb	r2, r3
    67b0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    67b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67b8:	701a      	strb	r2, [r3, #0]
    67ba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    67be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67c2:	781b      	ldrb	r3, [r3, #0]
    67c4:	3301      	adds	r3, #1
    67c6:	b2da      	uxtb	r2, r3
    67c8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    67cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67d0:	701a      	strb	r2, [r3, #0]
    67d2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    67d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67da:	781b      	ldrb	r3, [r3, #0]
    67dc:	2bff      	cmp	r3, #255	; 0xff
    67de:	d10f      	bne.n	6800 <ground_calibrate+0xbc8>
    67e0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    67e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67e8:	2200      	movs	r2, #0
    67ea:	701a      	strb	r2, [r3, #0]
    67ec:	e008      	b.n	6800 <ground_calibrate+0xbc8>
    67ee:	bf00      	nop
    67f0:	2000b4b7 	.word	0x2000b4b7
    67f4:	2000b4ad 	.word	0x2000b4ad
    67f8:	2000b4ae 	.word	0x2000b4ae
    67fc:	2000b4af 	.word	0x2000b4af
    6800:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6808:	781b      	ldrb	r3, [r3, #0]
    680a:	461a      	mov	r2, r3
    680c:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6814:	7859      	ldrb	r1, [r3, #1]
    6816:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    681a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    681e:	5499      	strb	r1, [r3, r2]
    6820:	4bd4      	ldr	r3, [pc, #848]	; (6b74 <ground_calibrate+0xf3c>)
    6822:	781a      	ldrb	r2, [r3, #0]
    6824:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    682c:	781b      	ldrb	r3, [r3, #0]
    682e:	4413      	add	r3, r2
    6830:	b2da      	uxtb	r2, r3
    6832:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    683a:	701a      	strb	r2, [r3, #0]
    683c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6844:	781a      	ldrb	r2, [r3, #0]
    6846:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    684a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    684e:	781b      	ldrb	r3, [r3, #0]
    6850:	4413      	add	r3, r2
    6852:	b2da      	uxtb	r2, r3
    6854:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    685c:	701a      	strb	r2, [r3, #0]
    685e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6866:	781b      	ldrb	r3, [r3, #0]
    6868:	3301      	adds	r3, #1
    686a:	b2da      	uxtb	r2, r3
    686c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6874:	701a      	strb	r2, [r3, #0]
    6876:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    687a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    687e:	781b      	ldrb	r3, [r3, #0]
    6880:	2bff      	cmp	r3, #255	; 0xff
    6882:	d105      	bne.n	6890 <ground_calibrate+0xc58>
    6884:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    688c:	2200      	movs	r2, #0
    688e:	701a      	strb	r2, [r3, #0]
    6890:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6898:	781b      	ldrb	r3, [r3, #0]
    689a:	461a      	mov	r2, r3
    689c:	f240 33f4 	movw	r3, #1012	; 0x3f4
    68a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68a4:	7819      	ldrb	r1, [r3, #0]
    68a6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    68aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ae:	5499      	strb	r1, [r3, r2]
    68b0:	f240 33f4 	movw	r3, #1012	; 0x3f4
    68b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b8:	781a      	ldrb	r2, [r3, #0]
    68ba:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    68be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68c2:	781b      	ldrb	r3, [r3, #0]
    68c4:	4413      	add	r3, r2
    68c6:	b2da      	uxtb	r2, r3
    68c8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    68cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68d0:	701a      	strb	r2, [r3, #0]
    68d2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    68d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68da:	781a      	ldrb	r2, [r3, #0]
    68dc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    68e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68e4:	781b      	ldrb	r3, [r3, #0]
    68e6:	4413      	add	r3, r2
    68e8:	b2da      	uxtb	r2, r3
    68ea:	f64a 73be 	movw	r3, #44990	; 0xafbe
    68ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68f2:	701a      	strb	r2, [r3, #0]
    68f4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    68f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68fc:	781b      	ldrb	r3, [r3, #0]
    68fe:	3301      	adds	r3, #1
    6900:	b2da      	uxtb	r2, r3
    6902:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    690a:	701a      	strb	r2, [r3, #0]
    690c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6914:	781b      	ldrb	r3, [r3, #0]
    6916:	2bff      	cmp	r3, #255	; 0xff
    6918:	d105      	bne.n	6926 <ground_calibrate+0xcee>
    691a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    691e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6922:	2200      	movs	r2, #0
    6924:	701a      	strb	r2, [r3, #0]
    6926:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    692a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    692e:	781b      	ldrb	r3, [r3, #0]
    6930:	461a      	mov	r2, r3
    6932:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    693a:	7859      	ldrb	r1, [r3, #1]
    693c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6944:	5499      	strb	r1, [r3, r2]
    6946:	4b8c      	ldr	r3, [pc, #560]	; (6b78 <ground_calibrate+0xf40>)
    6948:	781a      	ldrb	r2, [r3, #0]
    694a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    694e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6952:	781b      	ldrb	r3, [r3, #0]
    6954:	4413      	add	r3, r2
    6956:	b2da      	uxtb	r2, r3
    6958:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    695c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6960:	701a      	strb	r2, [r3, #0]
    6962:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    696a:	781a      	ldrb	r2, [r3, #0]
    696c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6974:	781b      	ldrb	r3, [r3, #0]
    6976:	4413      	add	r3, r2
    6978:	b2da      	uxtb	r2, r3
    697a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    697e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6982:	701a      	strb	r2, [r3, #0]
    6984:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    698c:	781b      	ldrb	r3, [r3, #0]
    698e:	3301      	adds	r3, #1
    6990:	b2da      	uxtb	r2, r3
    6992:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    699a:	701a      	strb	r2, [r3, #0]
    699c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    69a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69a4:	781b      	ldrb	r3, [r3, #0]
    69a6:	2bff      	cmp	r3, #255	; 0xff
    69a8:	d105      	bne.n	69b6 <ground_calibrate+0xd7e>
    69aa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    69ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69b2:	2200      	movs	r2, #0
    69b4:	701a      	strb	r2, [r3, #0]
    69b6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    69ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	461a      	mov	r2, r3
    69c2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    69c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ca:	7819      	ldrb	r1, [r3, #0]
    69cc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    69d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69d4:	5499      	strb	r1, [r3, r2]
    69d6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    69da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69de:	781b      	ldrb	r3, [r3, #0]
    69e0:	3301      	adds	r3, #1
    69e2:	b2da      	uxtb	r2, r3
    69e4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    69e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ec:	701a      	strb	r2, [r3, #0]
    69ee:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    69f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69f6:	781b      	ldrb	r3, [r3, #0]
    69f8:	2bff      	cmp	r3, #255	; 0xff
    69fa:	d105      	bne.n	6a08 <ground_calibrate+0xdd0>
    69fc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a04:	2200      	movs	r2, #0
    6a06:	701a      	strb	r2, [r3, #0]
    6a08:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a10:	781b      	ldrb	r3, [r3, #0]
    6a12:	461a      	mov	r2, r3
    6a14:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a1c:	7819      	ldrb	r1, [r3, #0]
    6a1e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a26:	5499      	strb	r1, [r3, r2]
    6a28:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a30:	781b      	ldrb	r3, [r3, #0]
    6a32:	3301      	adds	r3, #1
    6a34:	b2da      	uxtb	r2, r3
    6a36:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a3e:	701a      	strb	r2, [r3, #0]
    6a40:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a48:	781b      	ldrb	r3, [r3, #0]
    6a4a:	2bff      	cmp	r3, #255	; 0xff
    6a4c:	d105      	bne.n	6a5a <ground_calibrate+0xe22>
    6a4e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a56:	2200      	movs	r2, #0
    6a58:	701a      	strb	r2, [r3, #0]
    6a5a:	f242 0339 	movw	r3, #8249	; 0x2039
    6a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a62:	781b      	ldrb	r3, [r3, #0]
    6a64:	b2db      	uxtb	r3, r3
    6a66:	f003 0310 	and.w	r3, r3, #16
    6a6a:	2b00      	cmp	r3, #0
    6a6c:	d15a      	bne.n	6b24 <ground_calibrate+0xeec>
    6a6e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	b2db      	uxtb	r3, r3
    6a7a:	461a      	mov	r2, r3
    6a7c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a84:	5c9a      	ldrb	r2, [r3, r2]
    6a86:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    6a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a8e:	701a      	strb	r2, [r3, #0]
    6a90:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    6a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a98:	2200      	movs	r2, #0
    6a9a:	701a      	strb	r2, [r3, #0]
    6a9c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aa4:	781b      	ldrb	r3, [r3, #0]
    6aa6:	b2db      	uxtb	r3, r3
    6aa8:	3301      	adds	r3, #1
    6aaa:	b2da      	uxtb	r2, r3
    6aac:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab4:	701a      	strb	r2, [r3, #0]
    6ab6:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6abe:	781b      	ldrb	r3, [r3, #0]
    6ac0:	b2db      	uxtb	r3, r3
    6ac2:	2bff      	cmp	r3, #255	; 0xff
    6ac4:	d105      	bne.n	6ad2 <ground_calibrate+0xe9a>
    6ac6:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ace:	2200      	movs	r2, #0
    6ad0:	701a      	strb	r2, [r3, #0]
    6ad2:	f242 0338 	movw	r3, #8248	; 0x2038
    6ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ada:	f242 0238 	movw	r2, #8248	; 0x2038
    6ade:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ae2:	7812      	ldrb	r2, [r2, #0]
    6ae4:	b2d2      	uxtb	r2, r2
    6ae6:	f042 0201 	orr.w	r2, r2, #1
    6aea:	b2d2      	uxtb	r2, r2
    6aec:	701a      	strb	r2, [r3, #0]
    6aee:	f242 0339 	movw	r3, #8249	; 0x2039
    6af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af6:	f242 0239 	movw	r2, #8249	; 0x2039
    6afa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6afe:	7812      	ldrb	r2, [r2, #0]
    6b00:	b2d2      	uxtb	r2, r2
    6b02:	f042 0210 	orr.w	r2, r2, #16
    6b06:	b2d2      	uxtb	r2, r2
    6b08:	701a      	strb	r2, [r3, #0]
    6b0a:	e00b      	b.n	6b24 <ground_calibrate+0xeec>
    6b0c:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    6b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b14:	781b      	ldrb	r3, [r3, #0]
    6b16:	3301      	adds	r3, #1
    6b18:	b2da      	uxtb	r2, r3
    6b1a:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    6b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b22:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6b24:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
    6b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b2c:	2202      	movs	r2, #2
    6b2e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6b30:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b38:	781a      	ldrb	r2, [r3, #0]
    6b3a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b42:	781b      	ldrb	r3, [r3, #0]
    6b44:	b2db      	uxtb	r3, r3
    6b46:	429a      	cmp	r2, r3
    6b48:	d318      	bcc.n	6b7c <ground_calibrate+0xf44>
    6b4a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b52:	781b      	ldrb	r3, [r3, #0]
    6b54:	b2db      	uxtb	r3, r3
    6b56:	461a      	mov	r2, r3
    6b58:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b60:	781b      	ldrb	r3, [r3, #0]
    6b62:	1ad3      	subs	r3, r2, r3
    6b64:	33ff      	adds	r3, #255	; 0xff
    6b66:	2b06      	cmp	r3, #6
    6b68:	bfd4      	ite	le
    6b6a:	2300      	movle	r3, #0
    6b6c:	2301      	movgt	r3, #1
    6b6e:	b2db      	uxtb	r3, r3
    6b70:	e016      	b.n	6ba0 <ground_calibrate+0xf68>
    6b72:	bf00      	nop
    6b74:	200003f3 	.word	0x200003f3
    6b78:	200003f5 	.word	0x200003f5
    6b7c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b84:	781b      	ldrb	r3, [r3, #0]
    6b86:	b2db      	uxtb	r3, r3
    6b88:	461a      	mov	r2, r3
    6b8a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b92:	781b      	ldrb	r3, [r3, #0]
    6b94:	1ad3      	subs	r3, r2, r3
    6b96:	2b06      	cmp	r3, #6
    6b98:	bfd4      	ite	le
    6b9a:	2300      	movle	r3, #0
    6b9c:	2301      	movgt	r3, #1
    6b9e:	b2db      	uxtb	r3, r3
    6ba0:	2b00      	cmp	r3, #0
    6ba2:	f000 8194 	beq.w	6ece <ground_calibrate+0x1296>
    6ba6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bae:	781b      	ldrb	r3, [r3, #0]
    6bb0:	461a      	mov	r2, r3
    6bb2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bba:	2105      	movs	r1, #5
    6bbc:	5499      	strb	r1, [r3, r2]
    6bbe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bc6:	781b      	ldrb	r3, [r3, #0]
    6bc8:	3301      	adds	r3, #1
    6bca:	b2da      	uxtb	r2, r3
    6bcc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bd4:	701a      	strb	r2, [r3, #0]
    6bd6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bde:	781b      	ldrb	r3, [r3, #0]
    6be0:	2bff      	cmp	r3, #255	; 0xff
    6be2:	d105      	bne.n	6bf0 <ground_calibrate+0xfb8>
    6be4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bec:	2200      	movs	r2, #0
    6bee:	701a      	strb	r2, [r3, #0]
    6bf0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bf8:	781b      	ldrb	r3, [r3, #0]
    6bfa:	461a      	mov	r2, r3
    6bfc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c04:	2103      	movs	r1, #3
    6c06:	5499      	strb	r1, [r3, r2]
    6c08:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c10:	781b      	ldrb	r3, [r3, #0]
    6c12:	3301      	adds	r3, #1
    6c14:	b2da      	uxtb	r2, r3
    6c16:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c1e:	701a      	strb	r2, [r3, #0]
    6c20:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c28:	781b      	ldrb	r3, [r3, #0]
    6c2a:	2bff      	cmp	r3, #255	; 0xff
    6c2c:	d105      	bne.n	6c3a <ground_calibrate+0x1002>
    6c2e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c36:	2200      	movs	r2, #0
    6c38:	701a      	strb	r2, [r3, #0]
    6c3a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c42:	2203      	movs	r2, #3
    6c44:	701a      	strb	r2, [r3, #0]
    6c46:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c4e:	2203      	movs	r2, #3
    6c50:	701a      	strb	r2, [r3, #0]
    6c52:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c5a:	781b      	ldrb	r3, [r3, #0]
    6c5c:	461a      	mov	r2, r3
    6c5e:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c66:	7819      	ldrb	r1, [r3, #0]
    6c68:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c70:	5499      	strb	r1, [r3, r2]
    6c72:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c7a:	781a      	ldrb	r2, [r3, #0]
    6c7c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c84:	781b      	ldrb	r3, [r3, #0]
    6c86:	4413      	add	r3, r2
    6c88:	b2da      	uxtb	r2, r3
    6c8a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c92:	701a      	strb	r2, [r3, #0]
    6c94:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c9c:	781a      	ldrb	r2, [r3, #0]
    6c9e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ca6:	781b      	ldrb	r3, [r3, #0]
    6ca8:	4413      	add	r3, r2
    6caa:	b2da      	uxtb	r2, r3
    6cac:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cb4:	701a      	strb	r2, [r3, #0]
    6cb6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cbe:	781b      	ldrb	r3, [r3, #0]
    6cc0:	3301      	adds	r3, #1
    6cc2:	b2da      	uxtb	r2, r3
    6cc4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ccc:	701a      	strb	r2, [r3, #0]
    6cce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cd6:	781b      	ldrb	r3, [r3, #0]
    6cd8:	2bff      	cmp	r3, #255	; 0xff
    6cda:	d105      	bne.n	6ce8 <ground_calibrate+0x10b0>
    6cdc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ce4:	2200      	movs	r2, #0
    6ce6:	701a      	strb	r2, [r3, #0]
    6ce8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cf0:	781b      	ldrb	r3, [r3, #0]
    6cf2:	461a      	mov	r2, r3
    6cf4:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cfc:	7859      	ldrb	r1, [r3, #1]
    6cfe:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d06:	5499      	strb	r1, [r3, r2]
    6d08:	4b77      	ldr	r3, [pc, #476]	; (6ee8 <ground_calibrate+0x12b0>)
    6d0a:	781a      	ldrb	r2, [r3, #0]
    6d0c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d14:	781b      	ldrb	r3, [r3, #0]
    6d16:	4413      	add	r3, r2
    6d18:	b2da      	uxtb	r2, r3
    6d1a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d22:	701a      	strb	r2, [r3, #0]
    6d24:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d2c:	781a      	ldrb	r2, [r3, #0]
    6d2e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d36:	781b      	ldrb	r3, [r3, #0]
    6d38:	4413      	add	r3, r2
    6d3a:	b2da      	uxtb	r2, r3
    6d3c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d44:	701a      	strb	r2, [r3, #0]
    6d46:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d4e:	781b      	ldrb	r3, [r3, #0]
    6d50:	3301      	adds	r3, #1
    6d52:	b2da      	uxtb	r2, r3
    6d54:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d5c:	701a      	strb	r2, [r3, #0]
    6d5e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d66:	781b      	ldrb	r3, [r3, #0]
    6d68:	2bff      	cmp	r3, #255	; 0xff
    6d6a:	d105      	bne.n	6d78 <ground_calibrate+0x1140>
    6d6c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d74:	2200      	movs	r2, #0
    6d76:	701a      	strb	r2, [r3, #0]
    6d78:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d80:	781b      	ldrb	r3, [r3, #0]
    6d82:	461a      	mov	r2, r3
    6d84:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    6d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d8c:	7819      	ldrb	r1, [r3, #0]
    6d8e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d96:	5499      	strb	r1, [r3, r2]
    6d98:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6da0:	781b      	ldrb	r3, [r3, #0]
    6da2:	3301      	adds	r3, #1
    6da4:	b2da      	uxtb	r2, r3
    6da6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dae:	701a      	strb	r2, [r3, #0]
    6db0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6db8:	781b      	ldrb	r3, [r3, #0]
    6dba:	2bff      	cmp	r3, #255	; 0xff
    6dbc:	d105      	bne.n	6dca <ground_calibrate+0x1192>
    6dbe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dc6:	2200      	movs	r2, #0
    6dc8:	701a      	strb	r2, [r3, #0]
    6dca:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd2:	781b      	ldrb	r3, [r3, #0]
    6dd4:	461a      	mov	r2, r3
    6dd6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    6dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dde:	7819      	ldrb	r1, [r3, #0]
    6de0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6de8:	5499      	strb	r1, [r3, r2]
    6dea:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6df2:	781b      	ldrb	r3, [r3, #0]
    6df4:	3301      	adds	r3, #1
    6df6:	b2da      	uxtb	r2, r3
    6df8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e00:	701a      	strb	r2, [r3, #0]
    6e02:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e0a:	781b      	ldrb	r3, [r3, #0]
    6e0c:	2bff      	cmp	r3, #255	; 0xff
    6e0e:	d105      	bne.n	6e1c <ground_calibrate+0x11e4>
    6e10:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    6e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e18:	2200      	movs	r2, #0
    6e1a:	701a      	strb	r2, [r3, #0]
    6e1c:	f242 0339 	movw	r3, #8249	; 0x2039
    6e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e24:	781b      	ldrb	r3, [r3, #0]
    6e26:	b2db      	uxtb	r3, r3
    6e28:	f003 0310 	and.w	r3, r3, #16
    6e2c:	2b00      	cmp	r3, #0
    6e2e:	d15a      	bne.n	6ee6 <ground_calibrate+0x12ae>
    6e30:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e38:	781b      	ldrb	r3, [r3, #0]
    6e3a:	b2db      	uxtb	r3, r3
    6e3c:	461a      	mov	r2, r3
    6e3e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    6e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e46:	5c9a      	ldrb	r2, [r3, r2]
    6e48:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    6e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e50:	701a      	strb	r2, [r3, #0]
    6e52:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    6e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e5a:	2200      	movs	r2, #0
    6e5c:	701a      	strb	r2, [r3, #0]
    6e5e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e66:	781b      	ldrb	r3, [r3, #0]
    6e68:	b2db      	uxtb	r3, r3
    6e6a:	3301      	adds	r3, #1
    6e6c:	b2da      	uxtb	r2, r3
    6e6e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e76:	701a      	strb	r2, [r3, #0]
    6e78:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e80:	781b      	ldrb	r3, [r3, #0]
    6e82:	b2db      	uxtb	r3, r3
    6e84:	2bff      	cmp	r3, #255	; 0xff
    6e86:	d105      	bne.n	6e94 <ground_calibrate+0x125c>
    6e88:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    6e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e90:	2200      	movs	r2, #0
    6e92:	701a      	strb	r2, [r3, #0]
    6e94:	f242 0338 	movw	r3, #8248	; 0x2038
    6e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e9c:	f242 0238 	movw	r2, #8248	; 0x2038
    6ea0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ea4:	7812      	ldrb	r2, [r2, #0]
    6ea6:	b2d2      	uxtb	r2, r2
    6ea8:	f042 0201 	orr.w	r2, r2, #1
    6eac:	b2d2      	uxtb	r2, r2
    6eae:	701a      	strb	r2, [r3, #0]
    6eb0:	f242 0339 	movw	r3, #8249	; 0x2039
    6eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eb8:	f242 0239 	movw	r2, #8249	; 0x2039
    6ebc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ec0:	7812      	ldrb	r2, [r2, #0]
    6ec2:	b2d2      	uxtb	r2, r2
    6ec4:	f042 0210 	orr.w	r2, r2, #16
    6ec8:	b2d2      	uxtb	r2, r2
    6eca:	701a      	strb	r2, [r3, #0]
    6ecc:	e00b      	b.n	6ee6 <ground_calibrate+0x12ae>
    6ece:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    6ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ed6:	781b      	ldrb	r3, [r3, #0]
    6ed8:	3301      	adds	r3, #1
    6eda:	b2da      	uxtb	r2, r3
    6edc:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    6ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ee4:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    6ee6:	bd80      	pop	{r7, pc}
    6ee8:	200003f1 	.word	0x200003f1

00006eec <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    6eec:	b480      	push	{r7}
    6eee:	b083      	sub	sp, #12
    6ef0:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    6ef2:	f64a 639c 	movw	r3, #44700	; 0xae9c
    6ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6efa:	781b      	ldrb	r3, [r3, #0]
    6efc:	2b03      	cmp	r3, #3
    6efe:	d10c      	bne.n	6f1a <pprz_mode_update+0x2e>
    6f00:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    6f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f08:	781b      	ldrb	r3, [r3, #0]
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d032      	beq.n	6f74 <pprz_mode_update+0x88>
    6f0e:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    6f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f16:	2200      	movs	r2, #0
    6f18:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    6f1a:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    6f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f22:	891b      	ldrh	r3, [r3, #8]
    6f24:	b21b      	sxth	r3, r3
    6f26:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6f2a:	dc0f      	bgt.n	6f4c <pprz_mode_update+0x60>
    6f2c:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    6f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f34:	891b      	ldrh	r3, [r3, #8]
    6f36:	b21a      	sxth	r2, r3
    6f38:	f64e 5341 	movw	r3, #60737	; 0xed41
    6f3c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    6f40:	429a      	cmp	r2, r3
    6f42:	bfb4      	ite	lt
    6f44:	2300      	movlt	r3, #0
    6f46:	2301      	movge	r3, #1
    6f48:	b2db      	uxtb	r3, r3
    6f4a:	e000      	b.n	6f4e <pprz_mode_update+0x62>
    6f4c:	2302      	movs	r3, #2
    6f4e:	71fb      	strb	r3, [r7, #7]
    6f50:	f64a 639c 	movw	r3, #44700	; 0xae9c
    6f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f58:	781b      	ldrb	r3, [r3, #0]
    6f5a:	79fa      	ldrb	r2, [r7, #7]
    6f5c:	429a      	cmp	r2, r3
    6f5e:	d007      	beq.n	6f70 <pprz_mode_update+0x84>
    6f60:	f64a 639c 	movw	r3, #44700	; 0xae9c
    6f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f68:	79fa      	ldrb	r2, [r7, #7]
    6f6a:	701a      	strb	r2, [r3, #0]
    6f6c:	2301      	movs	r3, #1
    6f6e:	e002      	b.n	6f76 <pprz_mode_update+0x8a>
    6f70:	2300      	movs	r3, #0
    6f72:	e000      	b.n	6f76 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    6f74:	2300      	movs	r3, #0
}
    6f76:	4618      	mov	r0, r3
    6f78:	370c      	adds	r7, #12
    6f7a:	46bd      	mov	sp, r7
    6f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f80:	4770      	bx	lr
    6f82:	bf00      	nop

00006f84 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    6f84:	b480      	push	{r7}
    6f86:	b083      	sub	sp, #12
    6f88:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    6f8a:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    6f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f92:	89db      	ldrh	r3, [r3, #14]
    6f94:	b21a      	sxth	r2, r3
    6f96:	f640 437f 	movw	r3, #3199	; 0xc7f
    6f9a:	429a      	cmp	r2, r3
    6f9c:	bfd4      	ite	le
    6f9e:	2300      	movle	r3, #0
    6fa0:	2301      	movgt	r3, #1
    6fa2:	b2db      	uxtb	r3, r3
    6fa4:	71fb      	strb	r3, [r7, #7]
    6fa6:	f240 33ec 	movw	r3, #1004	; 0x3ec
    6faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fae:	781b      	ldrb	r3, [r3, #0]
    6fb0:	79fa      	ldrb	r2, [r7, #7]
    6fb2:	429a      	cmp	r2, r3
    6fb4:	d007      	beq.n	6fc6 <ir_estim_mode_update+0x42>
    6fb6:	f240 33ec 	movw	r3, #1004	; 0x3ec
    6fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fbe:	79fa      	ldrb	r2, [r7, #7]
    6fc0:	701a      	strb	r2, [r3, #0]
    6fc2:	2301      	movs	r3, #1
    6fc4:	e000      	b.n	6fc8 <ir_estim_mode_update+0x44>
    6fc6:	2300      	movs	r3, #0
}
    6fc8:	4618      	mov	r0, r3
    6fca:	370c      	adds	r7, #12
    6fcc:	46bd      	mov	sp, r7
    6fce:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fd2:	4770      	bx	lr

00006fd4 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    6fd4:	b480      	push	{r7}
    6fd6:	b083      	sub	sp, #12
    6fd8:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    6fda:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    6fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fe2:	7cdb      	ldrb	r3, [r3, #19]
    6fe4:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    6fe6:	f64a 63a3 	movw	r3, #44707	; 0xaea3
    6fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fee:	781b      	ldrb	r3, [r3, #0]
    6ff0:	79fa      	ldrb	r2, [r7, #7]
    6ff2:	429a      	cmp	r2, r3
    6ff4:	d017      	beq.n	7026 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    6ff6:	f64a 63a3 	movw	r3, #44707	; 0xaea3
    6ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ffe:	781b      	ldrb	r3, [r3, #0]
    7000:	461a      	mov	r2, r3
    7002:	79fb      	ldrb	r3, [r7, #7]
    7004:	4053      	eors	r3, r2
    7006:	f003 0303 	and.w	r3, r3, #3
    700a:	2b00      	cmp	r3, #0
    700c:	bf0c      	ite	eq
    700e:	2300      	moveq	r3, #0
    7010:	2301      	movne	r3, #1
    7012:	b2db      	uxtb	r3, r3
    7014:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    7016:	f64a 63a3 	movw	r3, #44707	; 0xaea3
    701a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    701e:	79fa      	ldrb	r2, [r7, #7]
    7020:	701a      	strb	r2, [r3, #0]
    return changed;
    7022:	79bb      	ldrb	r3, [r7, #6]
    7024:	e000      	b.n	7028 <mcu1_status_update+0x54>
  }
  return FALSE;
    7026:	2300      	movs	r3, #0
}
    7028:	4618      	mov	r0, r3
    702a:	370c      	adds	r7, #12
    702c:	46bd      	mov	sp, r7
    702e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7032:	4770      	bx	lr

00007034 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    7034:	b480      	push	{r7}
    7036:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7038:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    703c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7040:	781b      	ldrb	r3, [r3, #0]
    7042:	2b00      	cmp	r3, #0
    7044:	d12a      	bne.n	709c <events_update+0x68>
    7046:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    704a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    704e:	895b      	ldrh	r3, [r3, #10]
    7050:	b21b      	sxth	r3, r3
    7052:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    7056:	dd21      	ble.n	709c <events_update+0x68>
    7058:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    705c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7060:	881b      	ldrh	r3, [r3, #0]
    7062:	2b13      	cmp	r3, #19
    7064:	d819      	bhi.n	709a <events_update+0x66>
    7066:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    706a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    706e:	881b      	ldrh	r3, [r3, #0]
    7070:	3301      	adds	r3, #1
    7072:	b29a      	uxth	r2, r3
    7074:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    7078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    707c:	801a      	strh	r2, [r3, #0]
    707e:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    7082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7086:	881b      	ldrh	r3, [r3, #0]
    7088:	2b14      	cmp	r3, #20
    708a:	d106      	bne.n	709a <events_update+0x66>
    708c:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    7090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7094:	2201      	movs	r2, #1
    7096:	701a      	strb	r2, [r3, #0]
    7098:	e00c      	b.n	70b4 <events_update+0x80>
    709a:	e00b      	b.n	70b4 <events_update+0x80>
    709c:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    70a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70a4:	2200      	movs	r2, #0
    70a6:	801a      	strh	r2, [r3, #0]
    70a8:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    70ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70b0:	2200      	movs	r2, #0
    70b2:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    70b4:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    70b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70bc:	781b      	ldrb	r3, [r3, #0]
    70be:	2b00      	cmp	r3, #0
    70c0:	d12a      	bne.n	7118 <events_update+0xe4>
    70c2:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    70c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ca:	895b      	ldrh	r3, [r3, #10]
    70cc:	b21b      	sxth	r3, r3
    70ce:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    70d2:	da21      	bge.n	7118 <events_update+0xe4>
    70d4:	f64a 63b6 	movw	r3, #44726	; 0xaeb6
    70d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70dc:	881b      	ldrh	r3, [r3, #0]
    70de:	2b13      	cmp	r3, #19
    70e0:	d819      	bhi.n	7116 <events_update+0xe2>
    70e2:	f64a 63b6 	movw	r3, #44726	; 0xaeb6
    70e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ea:	881b      	ldrh	r3, [r3, #0]
    70ec:	3301      	adds	r3, #1
    70ee:	b29a      	uxth	r2, r3
    70f0:	f64a 63b6 	movw	r3, #44726	; 0xaeb6
    70f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70f8:	801a      	strh	r2, [r3, #0]
    70fa:	f64a 63b6 	movw	r3, #44726	; 0xaeb6
    70fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7102:	881b      	ldrh	r3, [r3, #0]
    7104:	2b14      	cmp	r3, #20
    7106:	d106      	bne.n	7116 <events_update+0xe2>
    7108:	f64a 63a1 	movw	r3, #44705	; 0xaea1
    710c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7110:	2201      	movs	r2, #1
    7112:	701a      	strb	r2, [r3, #0]
    7114:	e00c      	b.n	7130 <events_update+0xfc>
    7116:	e00b      	b.n	7130 <events_update+0xfc>
    7118:	f64a 63b6 	movw	r3, #44726	; 0xaeb6
    711c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7120:	2200      	movs	r2, #0
    7122:	801a      	strh	r2, [r3, #0]
    7124:	f64a 63a1 	movw	r3, #44705	; 0xaea1
    7128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    712c:	2200      	movs	r2, #0
    712e:	701a      	strb	r2, [r3, #0]
}  
    7130:	46bd      	mov	sp, r7
    7132:	f85d 7b04 	ldr.w	r7, [sp], #4
    7136:	4770      	bx	lr

00007138 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7138:	b480      	push	{r7}
    713a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    713c:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    7140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7144:	88da      	ldrh	r2, [r3, #6]
    7146:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    714a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    714e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7150:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    7154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7158:	2200      	movs	r2, #0
    715a:	74da      	strb	r2, [r3, #19]
}
    715c:	46bd      	mov	sp, r7
    715e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7162:	4770      	bx	lr

00007164 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7164:	b480      	push	{r7}
    7166:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    7168:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    716c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7170:	781a      	ldrb	r2, [r3, #0]
    7172:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    7176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    717a:	781b      	ldrb	r3, [r3, #0]
    717c:	b2db      	uxtb	r3, r3
    717e:	429a      	cmp	r2, r3
    7180:	d313      	bcc.n	71aa <send_boot+0x46>
    7182:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    7186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    718a:	781b      	ldrb	r3, [r3, #0]
    718c:	b2db      	uxtb	r3, r3
    718e:	461a      	mov	r2, r3
    7190:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7198:	781b      	ldrb	r3, [r3, #0]
    719a:	1ad3      	subs	r3, r2, r3
    719c:	33ff      	adds	r3, #255	; 0xff
    719e:	2b06      	cmp	r3, #6
    71a0:	bfd4      	ite	le
    71a2:	2300      	movle	r3, #0
    71a4:	2301      	movgt	r3, #1
    71a6:	b2db      	uxtb	r3, r3
    71a8:	e011      	b.n	71ce <send_boot+0x6a>
    71aa:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    71ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71b2:	781b      	ldrb	r3, [r3, #0]
    71b4:	b2db      	uxtb	r3, r3
    71b6:	461a      	mov	r2, r3
    71b8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    71bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71c0:	781b      	ldrb	r3, [r3, #0]
    71c2:	1ad3      	subs	r3, r2, r3
    71c4:	2b06      	cmp	r3, #6
    71c6:	bfd4      	ite	le
    71c8:	2300      	movle	r3, #0
    71ca:	2301      	movgt	r3, #1
    71cc:	b2db      	uxtb	r3, r3
    71ce:	2b00      	cmp	r3, #0
    71d0:	f000 8194 	beq.w	74fc <send_boot+0x398>
    71d4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    71d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71dc:	781b      	ldrb	r3, [r3, #0]
    71de:	461a      	mov	r2, r3
    71e0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    71e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e8:	2105      	movs	r1, #5
    71ea:	5499      	strb	r1, [r3, r2]
    71ec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    71f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71f4:	781b      	ldrb	r3, [r3, #0]
    71f6:	3301      	adds	r3, #1
    71f8:	b2da      	uxtb	r2, r3
    71fa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    71fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7202:	701a      	strb	r2, [r3, #0]
    7204:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    720c:	781b      	ldrb	r3, [r3, #0]
    720e:	2bff      	cmp	r3, #255	; 0xff
    7210:	d105      	bne.n	721e <send_boot+0xba>
    7212:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    721a:	2200      	movs	r2, #0
    721c:	701a      	strb	r2, [r3, #0]
    721e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7226:	781b      	ldrb	r3, [r3, #0]
    7228:	461a      	mov	r2, r3
    722a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    722e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7232:	2101      	movs	r1, #1
    7234:	5499      	strb	r1, [r3, r2]
    7236:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    723a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    723e:	781b      	ldrb	r3, [r3, #0]
    7240:	3301      	adds	r3, #1
    7242:	b2da      	uxtb	r2, r3
    7244:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    724c:	701a      	strb	r2, [r3, #0]
    724e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7256:	781b      	ldrb	r3, [r3, #0]
    7258:	2bff      	cmp	r3, #255	; 0xff
    725a:	d105      	bne.n	7268 <send_boot+0x104>
    725c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7264:	2200      	movs	r2, #0
    7266:	701a      	strb	r2, [r3, #0]
    7268:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    726c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7270:	2201      	movs	r2, #1
    7272:	701a      	strb	r2, [r3, #0]
    7274:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    727c:	2201      	movs	r2, #1
    727e:	701a      	strb	r2, [r3, #0]
    7280:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7288:	781b      	ldrb	r3, [r3, #0]
    728a:	461a      	mov	r2, r3
    728c:	f248 6376 	movw	r3, #34422	; 0x8676
    7290:	f2c0 0301 	movt	r3, #1
    7294:	7819      	ldrb	r1, [r3, #0]
    7296:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    729a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    729e:	5499      	strb	r1, [r3, r2]
    72a0:	f248 6376 	movw	r3, #34422	; 0x8676
    72a4:	f2c0 0301 	movt	r3, #1
    72a8:	781a      	ldrb	r2, [r3, #0]
    72aa:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    72ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72b2:	781b      	ldrb	r3, [r3, #0]
    72b4:	4413      	add	r3, r2
    72b6:	b2da      	uxtb	r2, r3
    72b8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    72bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72c0:	701a      	strb	r2, [r3, #0]
    72c2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    72c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ca:	781a      	ldrb	r2, [r3, #0]
    72cc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    72d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d4:	781b      	ldrb	r3, [r3, #0]
    72d6:	4413      	add	r3, r2
    72d8:	b2da      	uxtb	r2, r3
    72da:	f64a 73be 	movw	r3, #44990	; 0xafbe
    72de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e2:	701a      	strb	r2, [r3, #0]
    72e4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    72e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ec:	781b      	ldrb	r3, [r3, #0]
    72ee:	3301      	adds	r3, #1
    72f0:	b2da      	uxtb	r2, r3
    72f2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    72f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72fa:	701a      	strb	r2, [r3, #0]
    72fc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7304:	781b      	ldrb	r3, [r3, #0]
    7306:	2bff      	cmp	r3, #255	; 0xff
    7308:	d105      	bne.n	7316 <send_boot+0x1b2>
    730a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    730e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7312:	2200      	movs	r2, #0
    7314:	701a      	strb	r2, [r3, #0]
    7316:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    731a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    731e:	781b      	ldrb	r3, [r3, #0]
    7320:	461a      	mov	r2, r3
    7322:	f248 6376 	movw	r3, #34422	; 0x8676
    7326:	f2c0 0301 	movt	r3, #1
    732a:	7859      	ldrb	r1, [r3, #1]
    732c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7334:	5499      	strb	r1, [r3, r2]
    7336:	4b88      	ldr	r3, [pc, #544]	; (7558 <send_boot+0x3f4>)
    7338:	781a      	ldrb	r2, [r3, #0]
    733a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    733e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7342:	781b      	ldrb	r3, [r3, #0]
    7344:	4413      	add	r3, r2
    7346:	b2da      	uxtb	r2, r3
    7348:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    734c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7350:	701a      	strb	r2, [r3, #0]
    7352:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    735a:	781a      	ldrb	r2, [r3, #0]
    735c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	4413      	add	r3, r2
    7368:	b2da      	uxtb	r2, r3
    736a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    736e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7372:	701a      	strb	r2, [r3, #0]
    7374:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    737c:	781b      	ldrb	r3, [r3, #0]
    737e:	3301      	adds	r3, #1
    7380:	b2da      	uxtb	r2, r3
    7382:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    738a:	701a      	strb	r2, [r3, #0]
    738c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7394:	781b      	ldrb	r3, [r3, #0]
    7396:	2bff      	cmp	r3, #255	; 0xff
    7398:	d105      	bne.n	73a6 <send_boot+0x242>
    739a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    739e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73a2:	2200      	movs	r2, #0
    73a4:	701a      	strb	r2, [r3, #0]
    73a6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    73aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ae:	781b      	ldrb	r3, [r3, #0]
    73b0:	461a      	mov	r2, r3
    73b2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    73b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ba:	7819      	ldrb	r1, [r3, #0]
    73bc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    73c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73c4:	5499      	strb	r1, [r3, r2]
    73c6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    73ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ce:	781b      	ldrb	r3, [r3, #0]
    73d0:	3301      	adds	r3, #1
    73d2:	b2da      	uxtb	r2, r3
    73d4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    73d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73dc:	701a      	strb	r2, [r3, #0]
    73de:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    73e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73e6:	781b      	ldrb	r3, [r3, #0]
    73e8:	2bff      	cmp	r3, #255	; 0xff
    73ea:	d105      	bne.n	73f8 <send_boot+0x294>
    73ec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    73f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73f4:	2200      	movs	r2, #0
    73f6:	701a      	strb	r2, [r3, #0]
    73f8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    73fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7400:	781b      	ldrb	r3, [r3, #0]
    7402:	461a      	mov	r2, r3
    7404:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    740c:	7819      	ldrb	r1, [r3, #0]
    740e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7416:	5499      	strb	r1, [r3, r2]
    7418:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    741c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7420:	781b      	ldrb	r3, [r3, #0]
    7422:	3301      	adds	r3, #1
    7424:	b2da      	uxtb	r2, r3
    7426:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    742a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    742e:	701a      	strb	r2, [r3, #0]
    7430:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7438:	781b      	ldrb	r3, [r3, #0]
    743a:	2bff      	cmp	r3, #255	; 0xff
    743c:	d105      	bne.n	744a <send_boot+0x2e6>
    743e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7446:	2200      	movs	r2, #0
    7448:	701a      	strb	r2, [r3, #0]
    744a:	f242 0339 	movw	r3, #8249	; 0x2039
    744e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7452:	781b      	ldrb	r3, [r3, #0]
    7454:	b2db      	uxtb	r3, r3
    7456:	f003 0310 	and.w	r3, r3, #16
    745a:	2b00      	cmp	r3, #0
    745c:	d15a      	bne.n	7514 <send_boot+0x3b0>
    745e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    7462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7466:	781b      	ldrb	r3, [r3, #0]
    7468:	b2db      	uxtb	r3, r3
    746a:	461a      	mov	r2, r3
    746c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7474:	5c9a      	ldrb	r2, [r3, r2]
    7476:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    747a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    747e:	701a      	strb	r2, [r3, #0]
    7480:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    7484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7488:	2200      	movs	r2, #0
    748a:	701a      	strb	r2, [r3, #0]
    748c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    7490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7494:	781b      	ldrb	r3, [r3, #0]
    7496:	b2db      	uxtb	r3, r3
    7498:	3301      	adds	r3, #1
    749a:	b2da      	uxtb	r2, r3
    749c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    74a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a4:	701a      	strb	r2, [r3, #0]
    74a6:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    74aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ae:	781b      	ldrb	r3, [r3, #0]
    74b0:	b2db      	uxtb	r3, r3
    74b2:	2bff      	cmp	r3, #255	; 0xff
    74b4:	d105      	bne.n	74c2 <send_boot+0x35e>
    74b6:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    74ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74be:	2200      	movs	r2, #0
    74c0:	701a      	strb	r2, [r3, #0]
    74c2:	f242 0338 	movw	r3, #8248	; 0x2038
    74c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ca:	f242 0238 	movw	r2, #8248	; 0x2038
    74ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    74d2:	7812      	ldrb	r2, [r2, #0]
    74d4:	b2d2      	uxtb	r2, r2
    74d6:	f042 0201 	orr.w	r2, r2, #1
    74da:	b2d2      	uxtb	r2, r2
    74dc:	701a      	strb	r2, [r3, #0]
    74de:	f242 0339 	movw	r3, #8249	; 0x2039
    74e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e6:	f242 0239 	movw	r2, #8249	; 0x2039
    74ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    74ee:	7812      	ldrb	r2, [r2, #0]
    74f0:	b2d2      	uxtb	r2, r2
    74f2:	f042 0210 	orr.w	r2, r2, #16
    74f6:	b2d2      	uxtb	r2, r2
    74f8:	701a      	strb	r2, [r3, #0]
    74fa:	e00b      	b.n	7514 <send_boot+0x3b0>
    74fc:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    7500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	3301      	adds	r3, #1
    7508:	b2da      	uxtb	r2, r3
    750a:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    750e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7512:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7514:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    751c:	781a      	ldrb	r2, [r3, #0]
    751e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    7522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7526:	781b      	ldrb	r3, [r3, #0]
    7528:	b2db      	uxtb	r3, r3
    752a:	429a      	cmp	r2, r3
    752c:	d316      	bcc.n	755c <send_boot+0x3f8>
    752e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    7532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7536:	781b      	ldrb	r3, [r3, #0]
    7538:	b2db      	uxtb	r3, r3
    753a:	461a      	mov	r2, r3
    753c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7544:	781b      	ldrb	r3, [r3, #0]
    7546:	1ad3      	subs	r3, r2, r3
    7548:	33ff      	adds	r3, #255	; 0xff
    754a:	2b14      	cmp	r3, #20
    754c:	bfd4      	ite	le
    754e:	2300      	movle	r3, #0
    7550:	2301      	movgt	r3, #1
    7552:	b2db      	uxtb	r3, r3
    7554:	e014      	b.n	7580 <send_boot+0x41c>
    7556:	bf00      	nop
    7558:	00018677 	.word	0x00018677
    755c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    7560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7564:	781b      	ldrb	r3, [r3, #0]
    7566:	b2db      	uxtb	r3, r3
    7568:	461a      	mov	r2, r3
    756a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    756e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7572:	781b      	ldrb	r3, [r3, #0]
    7574:	1ad3      	subs	r3, r2, r3
    7576:	2b14      	cmp	r3, #20
    7578:	bfd4      	ite	le
    757a:	2300      	movle	r3, #0
    757c:	2301      	movgt	r3, #1
    757e:	b2db      	uxtb	r3, r3
    7580:	2b00      	cmp	r3, #0
    7582:	f000 85a5 	beq.w	80d0 <send_boot+0xf6c>
    7586:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    758a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    758e:	781b      	ldrb	r3, [r3, #0]
    7590:	461a      	mov	r2, r3
    7592:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    759a:	2105      	movs	r1, #5
    759c:	5499      	strb	r1, [r3, r2]
    759e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    75a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a6:	781b      	ldrb	r3, [r3, #0]
    75a8:	3301      	adds	r3, #1
    75aa:	b2da      	uxtb	r2, r3
    75ac:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    75b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75b4:	701a      	strb	r2, [r3, #0]
    75b6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    75ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75be:	781b      	ldrb	r3, [r3, #0]
    75c0:	2bff      	cmp	r3, #255	; 0xff
    75c2:	d105      	bne.n	75d0 <send_boot+0x46c>
    75c4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    75c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75cc:	2200      	movs	r2, #0
    75ce:	701a      	strb	r2, [r3, #0]
    75d0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    75d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75d8:	781b      	ldrb	r3, [r3, #0]
    75da:	461a      	mov	r2, r3
    75dc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    75e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75e4:	2105      	movs	r1, #5
    75e6:	5499      	strb	r1, [r3, r2]
    75e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    75ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f0:	781b      	ldrb	r3, [r3, #0]
    75f2:	3301      	adds	r3, #1
    75f4:	b2da      	uxtb	r2, r3
    75f6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    75fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75fe:	701a      	strb	r2, [r3, #0]
    7600:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7608:	781b      	ldrb	r3, [r3, #0]
    760a:	2bff      	cmp	r3, #255	; 0xff
    760c:	d105      	bne.n	761a <send_boot+0x4b6>
    760e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7616:	2200      	movs	r2, #0
    7618:	701a      	strb	r2, [r3, #0]
    761a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    761e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7622:	2205      	movs	r2, #5
    7624:	701a      	strb	r2, [r3, #0]
    7626:	f64a 73be 	movw	r3, #44990	; 0xafbe
    762a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    762e:	2205      	movs	r2, #5
    7630:	701a      	strb	r2, [r3, #0]
    7632:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    763a:	781b      	ldrb	r3, [r3, #0]
    763c:	461a      	mov	r2, r3
    763e:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    7642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7646:	7819      	ldrb	r1, [r3, #0]
    7648:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    764c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7650:	5499      	strb	r1, [r3, r2]
    7652:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    7656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    765a:	781a      	ldrb	r2, [r3, #0]
    765c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7664:	781b      	ldrb	r3, [r3, #0]
    7666:	4413      	add	r3, r2
    7668:	b2da      	uxtb	r2, r3
    766a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    766e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7672:	701a      	strb	r2, [r3, #0]
    7674:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    767c:	781a      	ldrb	r2, [r3, #0]
    767e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7686:	781b      	ldrb	r3, [r3, #0]
    7688:	4413      	add	r3, r2
    768a:	b2da      	uxtb	r2, r3
    768c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7694:	701a      	strb	r2, [r3, #0]
    7696:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    769a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    769e:	781b      	ldrb	r3, [r3, #0]
    76a0:	3301      	adds	r3, #1
    76a2:	b2da      	uxtb	r2, r3
    76a4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    76a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ac:	701a      	strb	r2, [r3, #0]
    76ae:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    76b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76b6:	781b      	ldrb	r3, [r3, #0]
    76b8:	2bff      	cmp	r3, #255	; 0xff
    76ba:	d105      	bne.n	76c8 <send_boot+0x564>
    76bc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    76c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76c4:	2200      	movs	r2, #0
    76c6:	701a      	strb	r2, [r3, #0]
    76c8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    76cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76d0:	781b      	ldrb	r3, [r3, #0]
    76d2:	461a      	mov	r2, r3
    76d4:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    76d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76dc:	7859      	ldrb	r1, [r3, #1]
    76de:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    76e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76e6:	5499      	strb	r1, [r3, r2]
    76e8:	4bd1      	ldr	r3, [pc, #836]	; (7a30 <send_boot+0x8cc>)
    76ea:	781a      	ldrb	r2, [r3, #0]
    76ec:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    76f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76f4:	781b      	ldrb	r3, [r3, #0]
    76f6:	4413      	add	r3, r2
    76f8:	b2da      	uxtb	r2, r3
    76fa:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    76fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7702:	701a      	strb	r2, [r3, #0]
    7704:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    770c:	781a      	ldrb	r2, [r3, #0]
    770e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7716:	781b      	ldrb	r3, [r3, #0]
    7718:	4413      	add	r3, r2
    771a:	b2da      	uxtb	r2, r3
    771c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7724:	701a      	strb	r2, [r3, #0]
    7726:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    772a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    772e:	781b      	ldrb	r3, [r3, #0]
    7730:	3301      	adds	r3, #1
    7732:	b2da      	uxtb	r2, r3
    7734:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    773c:	701a      	strb	r2, [r3, #0]
    773e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7746:	781b      	ldrb	r3, [r3, #0]
    7748:	2bff      	cmp	r3, #255	; 0xff
    774a:	d105      	bne.n	7758 <send_boot+0x5f4>
    774c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7754:	2200      	movs	r2, #0
    7756:	701a      	strb	r2, [r3, #0]
    7758:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    775c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7760:	781b      	ldrb	r3, [r3, #0]
    7762:	461a      	mov	r2, r3
    7764:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    7768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    776c:	7899      	ldrb	r1, [r3, #2]
    776e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7776:	5499      	strb	r1, [r3, r2]
    7778:	4bae      	ldr	r3, [pc, #696]	; (7a34 <send_boot+0x8d0>)
    777a:	781a      	ldrb	r2, [r3, #0]
    777c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7784:	781b      	ldrb	r3, [r3, #0]
    7786:	4413      	add	r3, r2
    7788:	b2da      	uxtb	r2, r3
    778a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    778e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7792:	701a      	strb	r2, [r3, #0]
    7794:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    779c:	781a      	ldrb	r2, [r3, #0]
    779e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    77a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77a6:	781b      	ldrb	r3, [r3, #0]
    77a8:	4413      	add	r3, r2
    77aa:	b2da      	uxtb	r2, r3
    77ac:	f64a 73be 	movw	r3, #44990	; 0xafbe
    77b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77b4:	701a      	strb	r2, [r3, #0]
    77b6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    77ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77be:	781b      	ldrb	r3, [r3, #0]
    77c0:	3301      	adds	r3, #1
    77c2:	b2da      	uxtb	r2, r3
    77c4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    77c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77cc:	701a      	strb	r2, [r3, #0]
    77ce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    77d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77d6:	781b      	ldrb	r3, [r3, #0]
    77d8:	2bff      	cmp	r3, #255	; 0xff
    77da:	d105      	bne.n	77e8 <send_boot+0x684>
    77dc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    77e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77e4:	2200      	movs	r2, #0
    77e6:	701a      	strb	r2, [r3, #0]
    77e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    77ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77f0:	781b      	ldrb	r3, [r3, #0]
    77f2:	461a      	mov	r2, r3
    77f4:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    77f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77fc:	78d9      	ldrb	r1, [r3, #3]
    77fe:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7806:	5499      	strb	r1, [r3, r2]
    7808:	4b8b      	ldr	r3, [pc, #556]	; (7a38 <send_boot+0x8d4>)
    780a:	781a      	ldrb	r2, [r3, #0]
    780c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	4413      	add	r3, r2
    7818:	b2da      	uxtb	r2, r3
    781a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    781e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7822:	701a      	strb	r2, [r3, #0]
    7824:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    782c:	781a      	ldrb	r2, [r3, #0]
    782e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7836:	781b      	ldrb	r3, [r3, #0]
    7838:	4413      	add	r3, r2
    783a:	b2da      	uxtb	r2, r3
    783c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7844:	701a      	strb	r2, [r3, #0]
    7846:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    784a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    784e:	781b      	ldrb	r3, [r3, #0]
    7850:	3301      	adds	r3, #1
    7852:	b2da      	uxtb	r2, r3
    7854:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    785c:	701a      	strb	r2, [r3, #0]
    785e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7866:	781b      	ldrb	r3, [r3, #0]
    7868:	2bff      	cmp	r3, #255	; 0xff
    786a:	d105      	bne.n	7878 <send_boot+0x714>
    786c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7874:	2200      	movs	r2, #0
    7876:	701a      	strb	r2, [r3, #0]
    7878:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    787c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7880:	781b      	ldrb	r3, [r3, #0]
    7882:	461a      	mov	r2, r3
    7884:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    7888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    788c:	7819      	ldrb	r1, [r3, #0]
    788e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7896:	5499      	strb	r1, [r3, r2]
    7898:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    789c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78a0:	781a      	ldrb	r2, [r3, #0]
    78a2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    78a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78aa:	781b      	ldrb	r3, [r3, #0]
    78ac:	4413      	add	r3, r2
    78ae:	b2da      	uxtb	r2, r3
    78b0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    78b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78b8:	701a      	strb	r2, [r3, #0]
    78ba:	f64a 73be 	movw	r3, #44990	; 0xafbe
    78be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78c2:	781a      	ldrb	r2, [r3, #0]
    78c4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    78c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78cc:	781b      	ldrb	r3, [r3, #0]
    78ce:	4413      	add	r3, r2
    78d0:	b2da      	uxtb	r2, r3
    78d2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    78d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78da:	701a      	strb	r2, [r3, #0]
    78dc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    78e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78e4:	781b      	ldrb	r3, [r3, #0]
    78e6:	3301      	adds	r3, #1
    78e8:	b2da      	uxtb	r2, r3
    78ea:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    78ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78f2:	701a      	strb	r2, [r3, #0]
    78f4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    78f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78fc:	781b      	ldrb	r3, [r3, #0]
    78fe:	2bff      	cmp	r3, #255	; 0xff
    7900:	d105      	bne.n	790e <send_boot+0x7aa>
    7902:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    790a:	2200      	movs	r2, #0
    790c:	701a      	strb	r2, [r3, #0]
    790e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7916:	781b      	ldrb	r3, [r3, #0]
    7918:	461a      	mov	r2, r3
    791a:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    791e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7922:	7859      	ldrb	r1, [r3, #1]
    7924:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    792c:	5499      	strb	r1, [r3, r2]
    792e:	4b43      	ldr	r3, [pc, #268]	; (7a3c <send_boot+0x8d8>)
    7930:	781a      	ldrb	r2, [r3, #0]
    7932:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    793a:	781b      	ldrb	r3, [r3, #0]
    793c:	4413      	add	r3, r2
    793e:	b2da      	uxtb	r2, r3
    7940:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7948:	701a      	strb	r2, [r3, #0]
    794a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    794e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7952:	781a      	ldrb	r2, [r3, #0]
    7954:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    795c:	781b      	ldrb	r3, [r3, #0]
    795e:	4413      	add	r3, r2
    7960:	b2da      	uxtb	r2, r3
    7962:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    796a:	701a      	strb	r2, [r3, #0]
    796c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7974:	781b      	ldrb	r3, [r3, #0]
    7976:	3301      	adds	r3, #1
    7978:	b2da      	uxtb	r2, r3
    797a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    797e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7982:	701a      	strb	r2, [r3, #0]
    7984:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    798c:	781b      	ldrb	r3, [r3, #0]
    798e:	2bff      	cmp	r3, #255	; 0xff
    7990:	d105      	bne.n	799e <send_boot+0x83a>
    7992:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    799a:	2200      	movs	r2, #0
    799c:	701a      	strb	r2, [r3, #0]
    799e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    79a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79a6:	781b      	ldrb	r3, [r3, #0]
    79a8:	461a      	mov	r2, r3
    79aa:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    79ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79b2:	7899      	ldrb	r1, [r3, #2]
    79b4:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    79b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79bc:	5499      	strb	r1, [r3, r2]
    79be:	4b20      	ldr	r3, [pc, #128]	; (7a40 <send_boot+0x8dc>)
    79c0:	781a      	ldrb	r2, [r3, #0]
    79c2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    79c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ca:	781b      	ldrb	r3, [r3, #0]
    79cc:	4413      	add	r3, r2
    79ce:	b2da      	uxtb	r2, r3
    79d0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    79d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d8:	701a      	strb	r2, [r3, #0]
    79da:	f64a 73be 	movw	r3, #44990	; 0xafbe
    79de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e2:	781a      	ldrb	r2, [r3, #0]
    79e4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    79e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ec:	781b      	ldrb	r3, [r3, #0]
    79ee:	4413      	add	r3, r2
    79f0:	b2da      	uxtb	r2, r3
    79f2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    79f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79fa:	701a      	strb	r2, [r3, #0]
    79fc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a04:	781b      	ldrb	r3, [r3, #0]
    7a06:	3301      	adds	r3, #1
    7a08:	b2da      	uxtb	r2, r3
    7a0a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a12:	701a      	strb	r2, [r3, #0]
    7a14:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a1c:	781b      	ldrb	r3, [r3, #0]
    7a1e:	2bff      	cmp	r3, #255	; 0xff
    7a20:	d110      	bne.n	7a44 <send_boot+0x8e0>
    7a22:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a2a:	2200      	movs	r2, #0
    7a2c:	701a      	strb	r2, [r3, #0]
    7a2e:	e009      	b.n	7a44 <send_boot+0x8e0>
    7a30:	2000b4b1 	.word	0x2000b4b1
    7a34:	2000b4b2 	.word	0x2000b4b2
    7a38:	2000b4b3 	.word	0x2000b4b3
    7a3c:	2000b4b5 	.word	0x2000b4b5
    7a40:	2000b4b6 	.word	0x2000b4b6
    7a44:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a4c:	781b      	ldrb	r3, [r3, #0]
    7a4e:	461a      	mov	r2, r3
    7a50:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    7a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a58:	78d9      	ldrb	r1, [r3, #3]
    7a5a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a62:	5499      	strb	r1, [r3, r2]
    7a64:	4bd3      	ldr	r3, [pc, #844]	; (7db4 <send_boot+0xc50>)
    7a66:	781a      	ldrb	r2, [r3, #0]
    7a68:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a70:	781b      	ldrb	r3, [r3, #0]
    7a72:	4413      	add	r3, r2
    7a74:	b2da      	uxtb	r2, r3
    7a76:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a7e:	701a      	strb	r2, [r3, #0]
    7a80:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a88:	781a      	ldrb	r2, [r3, #0]
    7a8a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a92:	781b      	ldrb	r3, [r3, #0]
    7a94:	4413      	add	r3, r2
    7a96:	b2da      	uxtb	r2, r3
    7a98:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa0:	701a      	strb	r2, [r3, #0]
    7aa2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aaa:	781b      	ldrb	r3, [r3, #0]
    7aac:	3301      	adds	r3, #1
    7aae:	b2da      	uxtb	r2, r3
    7ab0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ab8:	701a      	strb	r2, [r3, #0]
    7aba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ac2:	781b      	ldrb	r3, [r3, #0]
    7ac4:	2bff      	cmp	r3, #255	; 0xff
    7ac6:	d105      	bne.n	7ad4 <send_boot+0x970>
    7ac8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ad0:	2200      	movs	r2, #0
    7ad2:	701a      	strb	r2, [r3, #0]
    7ad4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7adc:	781b      	ldrb	r3, [r3, #0]
    7ade:	461a      	mov	r2, r3
    7ae0:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    7ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ae8:	7819      	ldrb	r1, [r3, #0]
    7aea:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af2:	5499      	strb	r1, [r3, r2]
    7af4:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    7af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7afc:	781a      	ldrb	r2, [r3, #0]
    7afe:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b06:	781b      	ldrb	r3, [r3, #0]
    7b08:	4413      	add	r3, r2
    7b0a:	b2da      	uxtb	r2, r3
    7b0c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b14:	701a      	strb	r2, [r3, #0]
    7b16:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b1e:	781a      	ldrb	r2, [r3, #0]
    7b20:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b28:	781b      	ldrb	r3, [r3, #0]
    7b2a:	4413      	add	r3, r2
    7b2c:	b2da      	uxtb	r2, r3
    7b2e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b36:	701a      	strb	r2, [r3, #0]
    7b38:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b40:	781b      	ldrb	r3, [r3, #0]
    7b42:	3301      	adds	r3, #1
    7b44:	b2da      	uxtb	r2, r3
    7b46:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b4e:	701a      	strb	r2, [r3, #0]
    7b50:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b58:	781b      	ldrb	r3, [r3, #0]
    7b5a:	2bff      	cmp	r3, #255	; 0xff
    7b5c:	d105      	bne.n	7b6a <send_boot+0xa06>
    7b5e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b66:	2200      	movs	r2, #0
    7b68:	701a      	strb	r2, [r3, #0]
    7b6a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b72:	781b      	ldrb	r3, [r3, #0]
    7b74:	461a      	mov	r2, r3
    7b76:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    7b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b7e:	7859      	ldrb	r1, [r3, #1]
    7b80:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b88:	5499      	strb	r1, [r3, r2]
    7b8a:	4b8b      	ldr	r3, [pc, #556]	; (7db8 <send_boot+0xc54>)
    7b8c:	781a      	ldrb	r2, [r3, #0]
    7b8e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b96:	781b      	ldrb	r3, [r3, #0]
    7b98:	4413      	add	r3, r2
    7b9a:	b2da      	uxtb	r2, r3
    7b9c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ba4:	701a      	strb	r2, [r3, #0]
    7ba6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bae:	781a      	ldrb	r2, [r3, #0]
    7bb0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bb8:	781b      	ldrb	r3, [r3, #0]
    7bba:	4413      	add	r3, r2
    7bbc:	b2da      	uxtb	r2, r3
    7bbe:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bc6:	701a      	strb	r2, [r3, #0]
    7bc8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bd0:	781b      	ldrb	r3, [r3, #0]
    7bd2:	3301      	adds	r3, #1
    7bd4:	b2da      	uxtb	r2, r3
    7bd6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bde:	701a      	strb	r2, [r3, #0]
    7be0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7be8:	781b      	ldrb	r3, [r3, #0]
    7bea:	2bff      	cmp	r3, #255	; 0xff
    7bec:	d105      	bne.n	7bfa <send_boot+0xa96>
    7bee:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bf6:	2200      	movs	r2, #0
    7bf8:	701a      	strb	r2, [r3, #0]
    7bfa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c02:	781b      	ldrb	r3, [r3, #0]
    7c04:	461a      	mov	r2, r3
    7c06:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    7c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c0e:	7899      	ldrb	r1, [r3, #2]
    7c10:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c18:	5499      	strb	r1, [r3, r2]
    7c1a:	4b68      	ldr	r3, [pc, #416]	; (7dbc <send_boot+0xc58>)
    7c1c:	781a      	ldrb	r2, [r3, #0]
    7c1e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c26:	781b      	ldrb	r3, [r3, #0]
    7c28:	4413      	add	r3, r2
    7c2a:	b2da      	uxtb	r2, r3
    7c2c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c34:	701a      	strb	r2, [r3, #0]
    7c36:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c3e:	781a      	ldrb	r2, [r3, #0]
    7c40:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c48:	781b      	ldrb	r3, [r3, #0]
    7c4a:	4413      	add	r3, r2
    7c4c:	b2da      	uxtb	r2, r3
    7c4e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c56:	701a      	strb	r2, [r3, #0]
    7c58:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c60:	781b      	ldrb	r3, [r3, #0]
    7c62:	3301      	adds	r3, #1
    7c64:	b2da      	uxtb	r2, r3
    7c66:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c6e:	701a      	strb	r2, [r3, #0]
    7c70:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c78:	781b      	ldrb	r3, [r3, #0]
    7c7a:	2bff      	cmp	r3, #255	; 0xff
    7c7c:	d105      	bne.n	7c8a <send_boot+0xb26>
    7c7e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c86:	2200      	movs	r2, #0
    7c88:	701a      	strb	r2, [r3, #0]
    7c8a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c92:	781b      	ldrb	r3, [r3, #0]
    7c94:	461a      	mov	r2, r3
    7c96:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    7c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c9e:	78d9      	ldrb	r1, [r3, #3]
    7ca0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ca8:	5499      	strb	r1, [r3, r2]
    7caa:	4b45      	ldr	r3, [pc, #276]	; (7dc0 <send_boot+0xc5c>)
    7cac:	781a      	ldrb	r2, [r3, #0]
    7cae:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cb6:	781b      	ldrb	r3, [r3, #0]
    7cb8:	4413      	add	r3, r2
    7cba:	b2da      	uxtb	r2, r3
    7cbc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cc4:	701a      	strb	r2, [r3, #0]
    7cc6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cce:	781a      	ldrb	r2, [r3, #0]
    7cd0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cd8:	781b      	ldrb	r3, [r3, #0]
    7cda:	4413      	add	r3, r2
    7cdc:	b2da      	uxtb	r2, r3
    7cde:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ce6:	701a      	strb	r2, [r3, #0]
    7ce8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cf0:	781b      	ldrb	r3, [r3, #0]
    7cf2:	3301      	adds	r3, #1
    7cf4:	b2da      	uxtb	r2, r3
    7cf6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cfe:	701a      	strb	r2, [r3, #0]
    7d00:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d08:	781b      	ldrb	r3, [r3, #0]
    7d0a:	2bff      	cmp	r3, #255	; 0xff
    7d0c:	d105      	bne.n	7d1a <send_boot+0xbb6>
    7d0e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d16:	2200      	movs	r2, #0
    7d18:	701a      	strb	r2, [r3, #0]
    7d1a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d22:	781b      	ldrb	r3, [r3, #0]
    7d24:	461a      	mov	r2, r3
    7d26:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d2e:	7819      	ldrb	r1, [r3, #0]
    7d30:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d38:	5499      	strb	r1, [r3, r2]
    7d3a:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d42:	781a      	ldrb	r2, [r3, #0]
    7d44:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d4c:	781b      	ldrb	r3, [r3, #0]
    7d4e:	4413      	add	r3, r2
    7d50:	b2da      	uxtb	r2, r3
    7d52:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d5a:	701a      	strb	r2, [r3, #0]
    7d5c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d64:	781a      	ldrb	r2, [r3, #0]
    7d66:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d6e:	781b      	ldrb	r3, [r3, #0]
    7d70:	4413      	add	r3, r2
    7d72:	b2da      	uxtb	r2, r3
    7d74:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d7c:	701a      	strb	r2, [r3, #0]
    7d7e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d86:	781b      	ldrb	r3, [r3, #0]
    7d88:	3301      	adds	r3, #1
    7d8a:	b2da      	uxtb	r2, r3
    7d8c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d94:	701a      	strb	r2, [r3, #0]
    7d96:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d9e:	781b      	ldrb	r3, [r3, #0]
    7da0:	2bff      	cmp	r3, #255	; 0xff
    7da2:	d10f      	bne.n	7dc4 <send_boot+0xc60>
    7da4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dac:	2200      	movs	r2, #0
    7dae:	701a      	strb	r2, [r3, #0]
    7db0:	e008      	b.n	7dc4 <send_boot+0xc60>
    7db2:	bf00      	nop
    7db4:	2000b4b7 	.word	0x2000b4b7
    7db8:	2000b4ad 	.word	0x2000b4ad
    7dbc:	2000b4ae 	.word	0x2000b4ae
    7dc0:	2000b4af 	.word	0x2000b4af
    7dc4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dcc:	781b      	ldrb	r3, [r3, #0]
    7dce:	461a      	mov	r2, r3
    7dd0:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dd8:	7859      	ldrb	r1, [r3, #1]
    7dda:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7de2:	5499      	strb	r1, [r3, r2]
    7de4:	4bc5      	ldr	r3, [pc, #788]	; (80fc <send_boot+0xf98>)
    7de6:	781a      	ldrb	r2, [r3, #0]
    7de8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df0:	781b      	ldrb	r3, [r3, #0]
    7df2:	4413      	add	r3, r2
    7df4:	b2da      	uxtb	r2, r3
    7df6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dfe:	701a      	strb	r2, [r3, #0]
    7e00:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e08:	781a      	ldrb	r2, [r3, #0]
    7e0a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e12:	781b      	ldrb	r3, [r3, #0]
    7e14:	4413      	add	r3, r2
    7e16:	b2da      	uxtb	r2, r3
    7e18:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e20:	701a      	strb	r2, [r3, #0]
    7e22:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e2a:	781b      	ldrb	r3, [r3, #0]
    7e2c:	3301      	adds	r3, #1
    7e2e:	b2da      	uxtb	r2, r3
    7e30:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e38:	701a      	strb	r2, [r3, #0]
    7e3a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e42:	781b      	ldrb	r3, [r3, #0]
    7e44:	2bff      	cmp	r3, #255	; 0xff
    7e46:	d105      	bne.n	7e54 <send_boot+0xcf0>
    7e48:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e50:	2200      	movs	r2, #0
    7e52:	701a      	strb	r2, [r3, #0]
    7e54:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e5c:	781b      	ldrb	r3, [r3, #0]
    7e5e:	461a      	mov	r2, r3
    7e60:	f240 33f4 	movw	r3, #1012	; 0x3f4
    7e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e68:	7819      	ldrb	r1, [r3, #0]
    7e6a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e72:	5499      	strb	r1, [r3, r2]
    7e74:	f240 33f4 	movw	r3, #1012	; 0x3f4
    7e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e7c:	781a      	ldrb	r2, [r3, #0]
    7e7e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e86:	781b      	ldrb	r3, [r3, #0]
    7e88:	4413      	add	r3, r2
    7e8a:	b2da      	uxtb	r2, r3
    7e8c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e94:	701a      	strb	r2, [r3, #0]
    7e96:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e9e:	781a      	ldrb	r2, [r3, #0]
    7ea0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ea8:	781b      	ldrb	r3, [r3, #0]
    7eaa:	4413      	add	r3, r2
    7eac:	b2da      	uxtb	r2, r3
    7eae:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eb6:	701a      	strb	r2, [r3, #0]
    7eb8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ec0:	781b      	ldrb	r3, [r3, #0]
    7ec2:	3301      	adds	r3, #1
    7ec4:	b2da      	uxtb	r2, r3
    7ec6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ece:	701a      	strb	r2, [r3, #0]
    7ed0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed8:	781b      	ldrb	r3, [r3, #0]
    7eda:	2bff      	cmp	r3, #255	; 0xff
    7edc:	d105      	bne.n	7eea <send_boot+0xd86>
    7ede:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ee6:	2200      	movs	r2, #0
    7ee8:	701a      	strb	r2, [r3, #0]
    7eea:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef2:	781b      	ldrb	r3, [r3, #0]
    7ef4:	461a      	mov	r2, r3
    7ef6:	f240 33f4 	movw	r3, #1012	; 0x3f4
    7efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7efe:	7859      	ldrb	r1, [r3, #1]
    7f00:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f08:	5499      	strb	r1, [r3, r2]
    7f0a:	4b7d      	ldr	r3, [pc, #500]	; (8100 <send_boot+0xf9c>)
    7f0c:	781a      	ldrb	r2, [r3, #0]
    7f0e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f16:	781b      	ldrb	r3, [r3, #0]
    7f18:	4413      	add	r3, r2
    7f1a:	b2da      	uxtb	r2, r3
    7f1c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f24:	701a      	strb	r2, [r3, #0]
    7f26:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f2e:	781a      	ldrb	r2, [r3, #0]
    7f30:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f38:	781b      	ldrb	r3, [r3, #0]
    7f3a:	4413      	add	r3, r2
    7f3c:	b2da      	uxtb	r2, r3
    7f3e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f46:	701a      	strb	r2, [r3, #0]
    7f48:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f50:	781b      	ldrb	r3, [r3, #0]
    7f52:	3301      	adds	r3, #1
    7f54:	b2da      	uxtb	r2, r3
    7f56:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f5e:	701a      	strb	r2, [r3, #0]
    7f60:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f68:	781b      	ldrb	r3, [r3, #0]
    7f6a:	2bff      	cmp	r3, #255	; 0xff
    7f6c:	d105      	bne.n	7f7a <send_boot+0xe16>
    7f6e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f76:	2200      	movs	r2, #0
    7f78:	701a      	strb	r2, [r3, #0]
    7f7a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f82:	781b      	ldrb	r3, [r3, #0]
    7f84:	461a      	mov	r2, r3
    7f86:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    7f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f8e:	7819      	ldrb	r1, [r3, #0]
    7f90:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f98:	5499      	strb	r1, [r3, r2]
    7f9a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fa2:	781b      	ldrb	r3, [r3, #0]
    7fa4:	3301      	adds	r3, #1
    7fa6:	b2da      	uxtb	r2, r3
    7fa8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fb0:	701a      	strb	r2, [r3, #0]
    7fb2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fba:	781b      	ldrb	r3, [r3, #0]
    7fbc:	2bff      	cmp	r3, #255	; 0xff
    7fbe:	d105      	bne.n	7fcc <send_boot+0xe68>
    7fc0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fc8:	2200      	movs	r2, #0
    7fca:	701a      	strb	r2, [r3, #0]
    7fcc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fd4:	781b      	ldrb	r3, [r3, #0]
    7fd6:	461a      	mov	r2, r3
    7fd8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    7fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fe0:	7819      	ldrb	r1, [r3, #0]
    7fe2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    7fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fea:	5499      	strb	r1, [r3, r2]
    7fec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ff4:	781b      	ldrb	r3, [r3, #0]
    7ff6:	3301      	adds	r3, #1
    7ff8:	b2da      	uxtb	r2, r3
    7ffa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8002:	701a      	strb	r2, [r3, #0]
    8004:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    800c:	781b      	ldrb	r3, [r3, #0]
    800e:	2bff      	cmp	r3, #255	; 0xff
    8010:	d105      	bne.n	801e <send_boot+0xeba>
    8012:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    801a:	2200      	movs	r2, #0
    801c:	701a      	strb	r2, [r3, #0]
    801e:	f242 0339 	movw	r3, #8249	; 0x2039
    8022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8026:	781b      	ldrb	r3, [r3, #0]
    8028:	b2db      	uxtb	r3, r3
    802a:	f003 0310 	and.w	r3, r3, #16
    802e:	2b00      	cmp	r3, #0
    8030:	d15a      	bne.n	80e8 <send_boot+0xf84>
    8032:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    803a:	781b      	ldrb	r3, [r3, #0]
    803c:	b2db      	uxtb	r3, r3
    803e:	461a      	mov	r2, r3
    8040:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8048:	5c9a      	ldrb	r2, [r3, r2]
    804a:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    804e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8052:	701a      	strb	r2, [r3, #0]
    8054:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    8058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    805c:	2200      	movs	r2, #0
    805e:	701a      	strb	r2, [r3, #0]
    8060:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8068:	781b      	ldrb	r3, [r3, #0]
    806a:	b2db      	uxtb	r3, r3
    806c:	3301      	adds	r3, #1
    806e:	b2da      	uxtb	r2, r3
    8070:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8078:	701a      	strb	r2, [r3, #0]
    807a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    807e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8082:	781b      	ldrb	r3, [r3, #0]
    8084:	b2db      	uxtb	r3, r3
    8086:	2bff      	cmp	r3, #255	; 0xff
    8088:	d105      	bne.n	8096 <send_boot+0xf32>
    808a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    808e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8092:	2200      	movs	r2, #0
    8094:	701a      	strb	r2, [r3, #0]
    8096:	f242 0338 	movw	r3, #8248	; 0x2038
    809a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    809e:	f242 0238 	movw	r2, #8248	; 0x2038
    80a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    80a6:	7812      	ldrb	r2, [r2, #0]
    80a8:	b2d2      	uxtb	r2, r2
    80aa:	f042 0201 	orr.w	r2, r2, #1
    80ae:	b2d2      	uxtb	r2, r2
    80b0:	701a      	strb	r2, [r3, #0]
    80b2:	f242 0339 	movw	r3, #8249	; 0x2039
    80b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ba:	f242 0239 	movw	r2, #8249	; 0x2039
    80be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    80c2:	7812      	ldrb	r2, [r2, #0]
    80c4:	b2d2      	uxtb	r2, r2
    80c6:	f042 0210 	orr.w	r2, r2, #16
    80ca:	b2d2      	uxtb	r2, r2
    80cc:	701a      	strb	r2, [r3, #0]
    80ce:	e00b      	b.n	80e8 <send_boot+0xf84>
    80d0:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    80d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80d8:	781b      	ldrb	r3, [r3, #0]
    80da:	3301      	adds	r3, #1
    80dc:	b2da      	uxtb	r2, r3
    80de:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    80e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80e6:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    80e8:	f240 33ed 	movw	r3, #1005	; 0x3ed
    80ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f0:	2200      	movs	r2, #0
    80f2:	701a      	strb	r2, [r3, #0]
  }
}
    80f4:	46bd      	mov	sp, r7
    80f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    80fa:	4770      	bx	lr
    80fc:	200003f3 	.word	0x200003f3
    8100:	200003f5 	.word	0x200003f5

00008104 <send_attitude>:
void send_attitude(void){ //499ms
    8104:	b480      	push	{r7}
    8106:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8108:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    810c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8110:	781b      	ldrb	r3, [r3, #0]
    8112:	3301      	adds	r3, #1
    8114:	b2da      	uxtb	r2, r3
    8116:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    811a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    811e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8120:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    8124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8128:	781b      	ldrb	r3, [r3, #0]
    812a:	2bfa      	cmp	r3, #250	; 0xfa
    812c:	d105      	bne.n	813a <send_attitude+0x36>
    812e:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    8132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8136:	2200      	movs	r2, #0
    8138:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    813a:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    813e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8142:	781a      	ldrb	r2, [r3, #0]
    8144:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8148:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    814c:	fba3 1302 	umull	r1, r3, r3, r2
    8150:	0899      	lsrs	r1, r3, #2
    8152:	460b      	mov	r3, r1
    8154:	009b      	lsls	r3, r3, #2
    8156:	440b      	add	r3, r1
    8158:	1ad3      	subs	r3, r2, r3
    815a:	b2db      	uxtb	r3, r3
    815c:	2b00      	cmp	r3, #0
    815e:	f040 84c1 	bne.w	8ae4 <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    8162:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    816a:	781a      	ldrb	r2, [r3, #0]
    816c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8174:	781b      	ldrb	r3, [r3, #0]
    8176:	b2db      	uxtb	r3, r3
    8178:	429a      	cmp	r2, r3
    817a:	d313      	bcc.n	81a4 <send_attitude+0xa0>
    817c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8184:	781b      	ldrb	r3, [r3, #0]
    8186:	b2db      	uxtb	r3, r3
    8188:	461a      	mov	r2, r3
    818a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    818e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8192:	781b      	ldrb	r3, [r3, #0]
    8194:	1ad3      	subs	r3, r2, r3
    8196:	33ff      	adds	r3, #255	; 0xff
    8198:	2b10      	cmp	r3, #16
    819a:	bfd4      	ite	le
    819c:	2300      	movle	r3, #0
    819e:	2301      	movgt	r3, #1
    81a0:	b2db      	uxtb	r3, r3
    81a2:	e011      	b.n	81c8 <send_attitude+0xc4>
    81a4:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    81a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ac:	781b      	ldrb	r3, [r3, #0]
    81ae:	b2db      	uxtb	r3, r3
    81b0:	461a      	mov	r2, r3
    81b2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    81b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ba:	781b      	ldrb	r3, [r3, #0]
    81bc:	1ad3      	subs	r3, r2, r3
    81be:	2b10      	cmp	r3, #16
    81c0:	bfd4      	ite	le
    81c2:	2300      	movle	r3, #0
    81c4:	2301      	movgt	r3, #1
    81c6:	b2db      	uxtb	r3, r3
    81c8:	2b00      	cmp	r3, #0
    81ca:	f000 847f 	beq.w	8acc <send_attitude+0x9c8>
    81ce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    81d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d6:	781b      	ldrb	r3, [r3, #0]
    81d8:	461a      	mov	r2, r3
    81da:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    81de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81e2:	2105      	movs	r1, #5
    81e4:	5499      	strb	r1, [r3, r2]
    81e6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    81ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ee:	781b      	ldrb	r3, [r3, #0]
    81f0:	3301      	adds	r3, #1
    81f2:	b2da      	uxtb	r2, r3
    81f4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    81f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81fc:	701a      	strb	r2, [r3, #0]
    81fe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8206:	781b      	ldrb	r3, [r3, #0]
    8208:	2bff      	cmp	r3, #255	; 0xff
    820a:	d105      	bne.n	8218 <send_attitude+0x114>
    820c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8214:	2200      	movs	r2, #0
    8216:	701a      	strb	r2, [r3, #0]
    8218:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    821c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8220:	781b      	ldrb	r3, [r3, #0]
    8222:	461a      	mov	r2, r3
    8224:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    822c:	2106      	movs	r1, #6
    822e:	5499      	strb	r1, [r3, r2]
    8230:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8238:	781b      	ldrb	r3, [r3, #0]
    823a:	3301      	adds	r3, #1
    823c:	b2da      	uxtb	r2, r3
    823e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8246:	701a      	strb	r2, [r3, #0]
    8248:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    824c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8250:	781b      	ldrb	r3, [r3, #0]
    8252:	2bff      	cmp	r3, #255	; 0xff
    8254:	d105      	bne.n	8262 <send_attitude+0x15e>
    8256:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    825a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    825e:	2200      	movs	r2, #0
    8260:	701a      	strb	r2, [r3, #0]
    8262:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    826a:	2206      	movs	r2, #6
    826c:	701a      	strb	r2, [r3, #0]
    826e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8276:	2206      	movs	r2, #6
    8278:	701a      	strb	r2, [r3, #0]
    827a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    827e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8282:	781b      	ldrb	r3, [r3, #0]
    8284:	461a      	mov	r2, r3
    8286:	f24b 4378 	movw	r3, #46200	; 0xb478
    828a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    828e:	7819      	ldrb	r1, [r3, #0]
    8290:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8298:	5499      	strb	r1, [r3, r2]
    829a:	f24b 4378 	movw	r3, #46200	; 0xb478
    829e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a2:	781a      	ldrb	r2, [r3, #0]
    82a4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    82a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ac:	781b      	ldrb	r3, [r3, #0]
    82ae:	4413      	add	r3, r2
    82b0:	b2da      	uxtb	r2, r3
    82b2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    82b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ba:	701a      	strb	r2, [r3, #0]
    82bc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    82c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82c4:	781a      	ldrb	r2, [r3, #0]
    82c6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    82ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ce:	781b      	ldrb	r3, [r3, #0]
    82d0:	4413      	add	r3, r2
    82d2:	b2da      	uxtb	r2, r3
    82d4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    82d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82dc:	701a      	strb	r2, [r3, #0]
    82de:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    82e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82e6:	781b      	ldrb	r3, [r3, #0]
    82e8:	3301      	adds	r3, #1
    82ea:	b2da      	uxtb	r2, r3
    82ec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    82f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82f4:	701a      	strb	r2, [r3, #0]
    82f6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    82fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82fe:	781b      	ldrb	r3, [r3, #0]
    8300:	2bff      	cmp	r3, #255	; 0xff
    8302:	d105      	bne.n	8310 <send_attitude+0x20c>
    8304:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    830c:	2200      	movs	r2, #0
    830e:	701a      	strb	r2, [r3, #0]
    8310:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8318:	781b      	ldrb	r3, [r3, #0]
    831a:	461a      	mov	r2, r3
    831c:	f24b 4378 	movw	r3, #46200	; 0xb478
    8320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8324:	7859      	ldrb	r1, [r3, #1]
    8326:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    832a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    832e:	5499      	strb	r1, [r3, r2]
    8330:	4bd1      	ldr	r3, [pc, #836]	; (8678 <send_attitude+0x574>)
    8332:	781a      	ldrb	r2, [r3, #0]
    8334:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    833c:	781b      	ldrb	r3, [r3, #0]
    833e:	4413      	add	r3, r2
    8340:	b2da      	uxtb	r2, r3
    8342:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    834a:	701a      	strb	r2, [r3, #0]
    834c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8354:	781a      	ldrb	r2, [r3, #0]
    8356:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    835a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    835e:	781b      	ldrb	r3, [r3, #0]
    8360:	4413      	add	r3, r2
    8362:	b2da      	uxtb	r2, r3
    8364:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    836c:	701a      	strb	r2, [r3, #0]
    836e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8376:	781b      	ldrb	r3, [r3, #0]
    8378:	3301      	adds	r3, #1
    837a:	b2da      	uxtb	r2, r3
    837c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8384:	701a      	strb	r2, [r3, #0]
    8386:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    838a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    838e:	781b      	ldrb	r3, [r3, #0]
    8390:	2bff      	cmp	r3, #255	; 0xff
    8392:	d105      	bne.n	83a0 <send_attitude+0x29c>
    8394:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    839c:	2200      	movs	r2, #0
    839e:	701a      	strb	r2, [r3, #0]
    83a0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    83a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a8:	781b      	ldrb	r3, [r3, #0]
    83aa:	461a      	mov	r2, r3
    83ac:	f24b 4378 	movw	r3, #46200	; 0xb478
    83b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83b4:	7899      	ldrb	r1, [r3, #2]
    83b6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    83ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83be:	5499      	strb	r1, [r3, r2]
    83c0:	4bae      	ldr	r3, [pc, #696]	; (867c <send_attitude+0x578>)
    83c2:	781a      	ldrb	r2, [r3, #0]
    83c4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    83c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83cc:	781b      	ldrb	r3, [r3, #0]
    83ce:	4413      	add	r3, r2
    83d0:	b2da      	uxtb	r2, r3
    83d2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    83d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83da:	701a      	strb	r2, [r3, #0]
    83dc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    83e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83e4:	781a      	ldrb	r2, [r3, #0]
    83e6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    83ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ee:	781b      	ldrb	r3, [r3, #0]
    83f0:	4413      	add	r3, r2
    83f2:	b2da      	uxtb	r2, r3
    83f4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    83f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83fc:	701a      	strb	r2, [r3, #0]
    83fe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8406:	781b      	ldrb	r3, [r3, #0]
    8408:	3301      	adds	r3, #1
    840a:	b2da      	uxtb	r2, r3
    840c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8414:	701a      	strb	r2, [r3, #0]
    8416:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    841a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    841e:	781b      	ldrb	r3, [r3, #0]
    8420:	2bff      	cmp	r3, #255	; 0xff
    8422:	d105      	bne.n	8430 <send_attitude+0x32c>
    8424:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    842c:	2200      	movs	r2, #0
    842e:	701a      	strb	r2, [r3, #0]
    8430:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	461a      	mov	r2, r3
    843c:	f24b 4378 	movw	r3, #46200	; 0xb478
    8440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8444:	78d9      	ldrb	r1, [r3, #3]
    8446:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    844a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    844e:	5499      	strb	r1, [r3, r2]
    8450:	4b8b      	ldr	r3, [pc, #556]	; (8680 <send_attitude+0x57c>)
    8452:	781a      	ldrb	r2, [r3, #0]
    8454:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    845c:	781b      	ldrb	r3, [r3, #0]
    845e:	4413      	add	r3, r2
    8460:	b2da      	uxtb	r2, r3
    8462:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846a:	701a      	strb	r2, [r3, #0]
    846c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8474:	781a      	ldrb	r2, [r3, #0]
    8476:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    847a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    847e:	781b      	ldrb	r3, [r3, #0]
    8480:	4413      	add	r3, r2
    8482:	b2da      	uxtb	r2, r3
    8484:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    848c:	701a      	strb	r2, [r3, #0]
    848e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8496:	781b      	ldrb	r3, [r3, #0]
    8498:	3301      	adds	r3, #1
    849a:	b2da      	uxtb	r2, r3
    849c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    84a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a4:	701a      	strb	r2, [r3, #0]
    84a6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    84aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ae:	781b      	ldrb	r3, [r3, #0]
    84b0:	2bff      	cmp	r3, #255	; 0xff
    84b2:	d105      	bne.n	84c0 <send_attitude+0x3bc>
    84b4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    84b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84bc:	2200      	movs	r2, #0
    84be:	701a      	strb	r2, [r3, #0]
    84c0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    84c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84c8:	781b      	ldrb	r3, [r3, #0]
    84ca:	461a      	mov	r2, r3
    84cc:	f24b 437c 	movw	r3, #46204	; 0xb47c
    84d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d4:	7819      	ldrb	r1, [r3, #0]
    84d6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    84da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84de:	5499      	strb	r1, [r3, r2]
    84e0:	f24b 437c 	movw	r3, #46204	; 0xb47c
    84e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e8:	781a      	ldrb	r2, [r3, #0]
    84ea:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    84ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84f2:	781b      	ldrb	r3, [r3, #0]
    84f4:	4413      	add	r3, r2
    84f6:	b2da      	uxtb	r2, r3
    84f8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    84fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8500:	701a      	strb	r2, [r3, #0]
    8502:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    850a:	781a      	ldrb	r2, [r3, #0]
    850c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8514:	781b      	ldrb	r3, [r3, #0]
    8516:	4413      	add	r3, r2
    8518:	b2da      	uxtb	r2, r3
    851a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    851e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8522:	701a      	strb	r2, [r3, #0]
    8524:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    852c:	781b      	ldrb	r3, [r3, #0]
    852e:	3301      	adds	r3, #1
    8530:	b2da      	uxtb	r2, r3
    8532:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    853a:	701a      	strb	r2, [r3, #0]
    853c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8544:	781b      	ldrb	r3, [r3, #0]
    8546:	2bff      	cmp	r3, #255	; 0xff
    8548:	d105      	bne.n	8556 <send_attitude+0x452>
    854a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    854e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8552:	2200      	movs	r2, #0
    8554:	701a      	strb	r2, [r3, #0]
    8556:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    855a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    855e:	781b      	ldrb	r3, [r3, #0]
    8560:	461a      	mov	r2, r3
    8562:	f24b 437c 	movw	r3, #46204	; 0xb47c
    8566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    856a:	7859      	ldrb	r1, [r3, #1]
    856c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8574:	5499      	strb	r1, [r3, r2]
    8576:	4b43      	ldr	r3, [pc, #268]	; (8684 <send_attitude+0x580>)
    8578:	781a      	ldrb	r2, [r3, #0]
    857a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    857e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8582:	781b      	ldrb	r3, [r3, #0]
    8584:	4413      	add	r3, r2
    8586:	b2da      	uxtb	r2, r3
    8588:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    858c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8590:	701a      	strb	r2, [r3, #0]
    8592:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    859a:	781a      	ldrb	r2, [r3, #0]
    859c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    85a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85a4:	781b      	ldrb	r3, [r3, #0]
    85a6:	4413      	add	r3, r2
    85a8:	b2da      	uxtb	r2, r3
    85aa:	f64a 73be 	movw	r3, #44990	; 0xafbe
    85ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b2:	701a      	strb	r2, [r3, #0]
    85b4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    85b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85bc:	781b      	ldrb	r3, [r3, #0]
    85be:	3301      	adds	r3, #1
    85c0:	b2da      	uxtb	r2, r3
    85c2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    85c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ca:	701a      	strb	r2, [r3, #0]
    85cc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    85d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85d4:	781b      	ldrb	r3, [r3, #0]
    85d6:	2bff      	cmp	r3, #255	; 0xff
    85d8:	d105      	bne.n	85e6 <send_attitude+0x4e2>
    85da:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    85de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85e2:	2200      	movs	r2, #0
    85e4:	701a      	strb	r2, [r3, #0]
    85e6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    85ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ee:	781b      	ldrb	r3, [r3, #0]
    85f0:	461a      	mov	r2, r3
    85f2:	f24b 437c 	movw	r3, #46204	; 0xb47c
    85f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85fa:	7899      	ldrb	r1, [r3, #2]
    85fc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8604:	5499      	strb	r1, [r3, r2]
    8606:	4b20      	ldr	r3, [pc, #128]	; (8688 <send_attitude+0x584>)
    8608:	781a      	ldrb	r2, [r3, #0]
    860a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    860e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8612:	781b      	ldrb	r3, [r3, #0]
    8614:	4413      	add	r3, r2
    8616:	b2da      	uxtb	r2, r3
    8618:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    861c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8620:	701a      	strb	r2, [r3, #0]
    8622:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    862a:	781a      	ldrb	r2, [r3, #0]
    862c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8634:	781b      	ldrb	r3, [r3, #0]
    8636:	4413      	add	r3, r2
    8638:	b2da      	uxtb	r2, r3
    863a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    863e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8642:	701a      	strb	r2, [r3, #0]
    8644:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    864c:	781b      	ldrb	r3, [r3, #0]
    864e:	3301      	adds	r3, #1
    8650:	b2da      	uxtb	r2, r3
    8652:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    865a:	701a      	strb	r2, [r3, #0]
    865c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8664:	781b      	ldrb	r3, [r3, #0]
    8666:	2bff      	cmp	r3, #255	; 0xff
    8668:	d110      	bne.n	868c <send_attitude+0x588>
    866a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    866e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8672:	2200      	movs	r2, #0
    8674:	701a      	strb	r2, [r3, #0]
    8676:	e009      	b.n	868c <send_attitude+0x588>
    8678:	2000b479 	.word	0x2000b479
    867c:	2000b47a 	.word	0x2000b47a
    8680:	2000b47b 	.word	0x2000b47b
    8684:	2000b47d 	.word	0x2000b47d
    8688:	2000b47e 	.word	0x2000b47e
    868c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8694:	781b      	ldrb	r3, [r3, #0]
    8696:	461a      	mov	r2, r3
    8698:	f24b 437c 	movw	r3, #46204	; 0xb47c
    869c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86a0:	78d9      	ldrb	r1, [r3, #3]
    86a2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    86a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86aa:	5499      	strb	r1, [r3, r2]
    86ac:	4bc2      	ldr	r3, [pc, #776]	; (89b8 <send_attitude+0x8b4>)
    86ae:	781a      	ldrb	r2, [r3, #0]
    86b0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    86b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86b8:	781b      	ldrb	r3, [r3, #0]
    86ba:	4413      	add	r3, r2
    86bc:	b2da      	uxtb	r2, r3
    86be:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    86c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86c6:	701a      	strb	r2, [r3, #0]
    86c8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    86cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86d0:	781a      	ldrb	r2, [r3, #0]
    86d2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    86d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86da:	781b      	ldrb	r3, [r3, #0]
    86dc:	4413      	add	r3, r2
    86de:	b2da      	uxtb	r2, r3
    86e0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    86e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86e8:	701a      	strb	r2, [r3, #0]
    86ea:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    86ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86f2:	781b      	ldrb	r3, [r3, #0]
    86f4:	3301      	adds	r3, #1
    86f6:	b2da      	uxtb	r2, r3
    86f8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    86fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8700:	701a      	strb	r2, [r3, #0]
    8702:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    870a:	781b      	ldrb	r3, [r3, #0]
    870c:	2bff      	cmp	r3, #255	; 0xff
    870e:	d105      	bne.n	871c <send_attitude+0x618>
    8710:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8718:	2200      	movs	r2, #0
    871a:	701a      	strb	r2, [r3, #0]
    871c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8724:	781b      	ldrb	r3, [r3, #0]
    8726:	461a      	mov	r2, r3
    8728:	f24b 4380 	movw	r3, #46208	; 0xb480
    872c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8730:	7819      	ldrb	r1, [r3, #0]
    8732:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    873a:	5499      	strb	r1, [r3, r2]
    873c:	f24b 4380 	movw	r3, #46208	; 0xb480
    8740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8744:	781a      	ldrb	r2, [r3, #0]
    8746:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    874a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    874e:	781b      	ldrb	r3, [r3, #0]
    8750:	4413      	add	r3, r2
    8752:	b2da      	uxtb	r2, r3
    8754:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    875c:	701a      	strb	r2, [r3, #0]
    875e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8766:	781a      	ldrb	r2, [r3, #0]
    8768:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    876c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8770:	781b      	ldrb	r3, [r3, #0]
    8772:	4413      	add	r3, r2
    8774:	b2da      	uxtb	r2, r3
    8776:	f64a 73be 	movw	r3, #44990	; 0xafbe
    877a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    877e:	701a      	strb	r2, [r3, #0]
    8780:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8788:	781b      	ldrb	r3, [r3, #0]
    878a:	3301      	adds	r3, #1
    878c:	b2da      	uxtb	r2, r3
    878e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8796:	701a      	strb	r2, [r3, #0]
    8798:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    879c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87a0:	781b      	ldrb	r3, [r3, #0]
    87a2:	2bff      	cmp	r3, #255	; 0xff
    87a4:	d105      	bne.n	87b2 <send_attitude+0x6ae>
    87a6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    87aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ae:	2200      	movs	r2, #0
    87b0:	701a      	strb	r2, [r3, #0]
    87b2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    87b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ba:	781b      	ldrb	r3, [r3, #0]
    87bc:	461a      	mov	r2, r3
    87be:	f24b 4380 	movw	r3, #46208	; 0xb480
    87c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87c6:	7859      	ldrb	r1, [r3, #1]
    87c8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    87cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87d0:	5499      	strb	r1, [r3, r2]
    87d2:	4b7a      	ldr	r3, [pc, #488]	; (89bc <send_attitude+0x8b8>)
    87d4:	781a      	ldrb	r2, [r3, #0]
    87d6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    87da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87de:	781b      	ldrb	r3, [r3, #0]
    87e0:	4413      	add	r3, r2
    87e2:	b2da      	uxtb	r2, r3
    87e4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    87e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ec:	701a      	strb	r2, [r3, #0]
    87ee:	f64a 73be 	movw	r3, #44990	; 0xafbe
    87f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87f6:	781a      	ldrb	r2, [r3, #0]
    87f8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    87fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8800:	781b      	ldrb	r3, [r3, #0]
    8802:	4413      	add	r3, r2
    8804:	b2da      	uxtb	r2, r3
    8806:	f64a 73be 	movw	r3, #44990	; 0xafbe
    880a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    880e:	701a      	strb	r2, [r3, #0]
    8810:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8818:	781b      	ldrb	r3, [r3, #0]
    881a:	3301      	adds	r3, #1
    881c:	b2da      	uxtb	r2, r3
    881e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8826:	701a      	strb	r2, [r3, #0]
    8828:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    882c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8830:	781b      	ldrb	r3, [r3, #0]
    8832:	2bff      	cmp	r3, #255	; 0xff
    8834:	d105      	bne.n	8842 <send_attitude+0x73e>
    8836:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    883a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    883e:	2200      	movs	r2, #0
    8840:	701a      	strb	r2, [r3, #0]
    8842:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    884a:	781b      	ldrb	r3, [r3, #0]
    884c:	461a      	mov	r2, r3
    884e:	f24b 4380 	movw	r3, #46208	; 0xb480
    8852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8856:	7899      	ldrb	r1, [r3, #2]
    8858:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    885c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8860:	5499      	strb	r1, [r3, r2]
    8862:	4b57      	ldr	r3, [pc, #348]	; (89c0 <send_attitude+0x8bc>)
    8864:	781a      	ldrb	r2, [r3, #0]
    8866:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    886a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    886e:	781b      	ldrb	r3, [r3, #0]
    8870:	4413      	add	r3, r2
    8872:	b2da      	uxtb	r2, r3
    8874:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    887c:	701a      	strb	r2, [r3, #0]
    887e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8886:	781a      	ldrb	r2, [r3, #0]
    8888:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    888c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8890:	781b      	ldrb	r3, [r3, #0]
    8892:	4413      	add	r3, r2
    8894:	b2da      	uxtb	r2, r3
    8896:	f64a 73be 	movw	r3, #44990	; 0xafbe
    889a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    889e:	701a      	strb	r2, [r3, #0]
    88a0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    88a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	3301      	adds	r3, #1
    88ac:	b2da      	uxtb	r2, r3
    88ae:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    88b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b6:	701a      	strb	r2, [r3, #0]
    88b8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    88bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88c0:	781b      	ldrb	r3, [r3, #0]
    88c2:	2bff      	cmp	r3, #255	; 0xff
    88c4:	d105      	bne.n	88d2 <send_attitude+0x7ce>
    88c6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    88ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ce:	2200      	movs	r2, #0
    88d0:	701a      	strb	r2, [r3, #0]
    88d2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    88d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88da:	781b      	ldrb	r3, [r3, #0]
    88dc:	461a      	mov	r2, r3
    88de:	f24b 4380 	movw	r3, #46208	; 0xb480
    88e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88e6:	78d9      	ldrb	r1, [r3, #3]
    88e8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    88ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88f0:	5499      	strb	r1, [r3, r2]
    88f2:	4b34      	ldr	r3, [pc, #208]	; (89c4 <send_attitude+0x8c0>)
    88f4:	781a      	ldrb	r2, [r3, #0]
    88f6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    88fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88fe:	781b      	ldrb	r3, [r3, #0]
    8900:	4413      	add	r3, r2
    8902:	b2da      	uxtb	r2, r3
    8904:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    890c:	701a      	strb	r2, [r3, #0]
    890e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8916:	781a      	ldrb	r2, [r3, #0]
    8918:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    891c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8920:	781b      	ldrb	r3, [r3, #0]
    8922:	4413      	add	r3, r2
    8924:	b2da      	uxtb	r2, r3
    8926:	f64a 73be 	movw	r3, #44990	; 0xafbe
    892a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    892e:	701a      	strb	r2, [r3, #0]
    8930:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8938:	781b      	ldrb	r3, [r3, #0]
    893a:	3301      	adds	r3, #1
    893c:	b2da      	uxtb	r2, r3
    893e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8946:	701a      	strb	r2, [r3, #0]
    8948:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    894c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8950:	781b      	ldrb	r3, [r3, #0]
    8952:	2bff      	cmp	r3, #255	; 0xff
    8954:	d105      	bne.n	8962 <send_attitude+0x85e>
    8956:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    895a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    895e:	2200      	movs	r2, #0
    8960:	701a      	strb	r2, [r3, #0]
    8962:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    896a:	781b      	ldrb	r3, [r3, #0]
    896c:	461a      	mov	r2, r3
    896e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8976:	7819      	ldrb	r1, [r3, #0]
    8978:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    897c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8980:	5499      	strb	r1, [r3, r2]
    8982:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    898a:	781b      	ldrb	r3, [r3, #0]
    898c:	3301      	adds	r3, #1
    898e:	b2da      	uxtb	r2, r3
    8990:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8998:	701a      	strb	r2, [r3, #0]
    899a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    899e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89a2:	781b      	ldrb	r3, [r3, #0]
    89a4:	2bff      	cmp	r3, #255	; 0xff
    89a6:	d10f      	bne.n	89c8 <send_attitude+0x8c4>
    89a8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    89ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89b0:	2200      	movs	r2, #0
    89b2:	701a      	strb	r2, [r3, #0]
    89b4:	e008      	b.n	89c8 <send_attitude+0x8c4>
    89b6:	bf00      	nop
    89b8:	2000b47f 	.word	0x2000b47f
    89bc:	2000b481 	.word	0x2000b481
    89c0:	2000b482 	.word	0x2000b482
    89c4:	2000b483 	.word	0x2000b483
    89c8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    89cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89d0:	781b      	ldrb	r3, [r3, #0]
    89d2:	461a      	mov	r2, r3
    89d4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    89d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89dc:	7819      	ldrb	r1, [r3, #0]
    89de:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    89e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89e6:	5499      	strb	r1, [r3, r2]
    89e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    89ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89f0:	781b      	ldrb	r3, [r3, #0]
    89f2:	3301      	adds	r3, #1
    89f4:	b2da      	uxtb	r2, r3
    89f6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    89fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89fe:	701a      	strb	r2, [r3, #0]
    8a00:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a08:	781b      	ldrb	r3, [r3, #0]
    8a0a:	2bff      	cmp	r3, #255	; 0xff
    8a0c:	d105      	bne.n	8a1a <send_attitude+0x916>
    8a0e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a16:	2200      	movs	r2, #0
    8a18:	701a      	strb	r2, [r3, #0]
    8a1a:	f242 0339 	movw	r3, #8249	; 0x2039
    8a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a22:	781b      	ldrb	r3, [r3, #0]
    8a24:	b2db      	uxtb	r3, r3
    8a26:	f003 0310 	and.w	r3, r3, #16
    8a2a:	2b00      	cmp	r3, #0
    8a2c:	d15a      	bne.n	8ae4 <send_attitude+0x9e0>
    8a2e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a36:	781b      	ldrb	r3, [r3, #0]
    8a38:	b2db      	uxtb	r3, r3
    8a3a:	461a      	mov	r2, r3
    8a3c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a44:	5c9a      	ldrb	r2, [r3, r2]
    8a46:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    8a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a4e:	701a      	strb	r2, [r3, #0]
    8a50:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    8a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a58:	2200      	movs	r2, #0
    8a5a:	701a      	strb	r2, [r3, #0]
    8a5c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a64:	781b      	ldrb	r3, [r3, #0]
    8a66:	b2db      	uxtb	r3, r3
    8a68:	3301      	adds	r3, #1
    8a6a:	b2da      	uxtb	r2, r3
    8a6c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a74:	701a      	strb	r2, [r3, #0]
    8a76:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a7e:	781b      	ldrb	r3, [r3, #0]
    8a80:	b2db      	uxtb	r3, r3
    8a82:	2bff      	cmp	r3, #255	; 0xff
    8a84:	d105      	bne.n	8a92 <send_attitude+0x98e>
    8a86:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a8e:	2200      	movs	r2, #0
    8a90:	701a      	strb	r2, [r3, #0]
    8a92:	f242 0338 	movw	r3, #8248	; 0x2038
    8a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a9a:	f242 0238 	movw	r2, #8248	; 0x2038
    8a9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8aa2:	7812      	ldrb	r2, [r2, #0]
    8aa4:	b2d2      	uxtb	r2, r2
    8aa6:	f042 0201 	orr.w	r2, r2, #1
    8aaa:	b2d2      	uxtb	r2, r2
    8aac:	701a      	strb	r2, [r3, #0]
    8aae:	f242 0339 	movw	r3, #8249	; 0x2039
    8ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab6:	f242 0239 	movw	r2, #8249	; 0x2039
    8aba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8abe:	7812      	ldrb	r2, [r2, #0]
    8ac0:	b2d2      	uxtb	r2, r2
    8ac2:	f042 0210 	orr.w	r2, r2, #16
    8ac6:	b2d2      	uxtb	r2, r2
    8ac8:	701a      	strb	r2, [r3, #0]
    8aca:	e00b      	b.n	8ae4 <send_attitude+0x9e0>
    8acc:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    8ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad4:	781b      	ldrb	r3, [r3, #0]
    8ad6:	3301      	adds	r3, #1
    8ad8:	b2da      	uxtb	r2, r3
    8ada:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    8ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ae2:	701a      	strb	r2, [r3, #0]
  }
}
    8ae4:	46bd      	mov	sp, r7
    8ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aea:	4770      	bx	lr

00008aec <send_adc>:
  
void send_adc(void){  //500ms
    8aec:	b480      	push	{r7}
    8aee:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8af0:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    8af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8af8:	781a      	ldrb	r2, [r3, #0]
    8afa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8afe:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8b02:	fba3 1302 	umull	r1, r3, r3, r2
    8b06:	0899      	lsrs	r1, r3, #2
    8b08:	460b      	mov	r3, r1
    8b0a:	009b      	lsls	r3, r3, #2
    8b0c:	440b      	add	r3, r1
    8b0e:	1ad3      	subs	r3, r2, r3
    8b10:	b2db      	uxtb	r3, r3
    8b12:	2b01      	cmp	r3, #1
    8b14:	f040 8269 	bne.w	8fea <send_adc+0x4fe>
    8b18:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b20:	781a      	ldrb	r2, [r3, #0]
    8b22:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b2a:	781b      	ldrb	r3, [r3, #0]
    8b2c:	b2db      	uxtb	r3, r3
    8b2e:	429a      	cmp	r2, r3
    8b30:	d313      	bcc.n	8b5a <send_adc+0x6e>
    8b32:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b3a:	781b      	ldrb	r3, [r3, #0]
    8b3c:	b2db      	uxtb	r3, r3
    8b3e:	461a      	mov	r2, r3
    8b40:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b48:	781b      	ldrb	r3, [r3, #0]
    8b4a:	1ad3      	subs	r3, r2, r3
    8b4c:	33ff      	adds	r3, #255	; 0xff
    8b4e:	2b08      	cmp	r3, #8
    8b50:	bfd4      	ite	le
    8b52:	2300      	movle	r3, #0
    8b54:	2301      	movgt	r3, #1
    8b56:	b2db      	uxtb	r3, r3
    8b58:	e011      	b.n	8b7e <send_adc+0x92>
    8b5a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b62:	781b      	ldrb	r3, [r3, #0]
    8b64:	b2db      	uxtb	r3, r3
    8b66:	461a      	mov	r2, r3
    8b68:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b70:	781b      	ldrb	r3, [r3, #0]
    8b72:	1ad3      	subs	r3, r2, r3
    8b74:	2b08      	cmp	r3, #8
    8b76:	bfd4      	ite	le
    8b78:	2300      	movle	r3, #0
    8b7a:	2301      	movgt	r3, #1
    8b7c:	b2db      	uxtb	r3, r3
    8b7e:	2b00      	cmp	r3, #0
    8b80:	f000 8227 	beq.w	8fd2 <send_adc+0x4e6>
    8b84:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b8c:	781b      	ldrb	r3, [r3, #0]
    8b8e:	461a      	mov	r2, r3
    8b90:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b98:	2105      	movs	r1, #5
    8b9a:	5499      	strb	r1, [r3, r2]
    8b9c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ba4:	781b      	ldrb	r3, [r3, #0]
    8ba6:	3301      	adds	r3, #1
    8ba8:	b2da      	uxtb	r2, r3
    8baa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bb2:	701a      	strb	r2, [r3, #0]
    8bb4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bbc:	781b      	ldrb	r3, [r3, #0]
    8bbe:	2bff      	cmp	r3, #255	; 0xff
    8bc0:	d105      	bne.n	8bce <send_adc+0xe2>
    8bc2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bca:	2200      	movs	r2, #0
    8bcc:	701a      	strb	r2, [r3, #0]
    8bce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bd6:	781b      	ldrb	r3, [r3, #0]
    8bd8:	461a      	mov	r2, r3
    8bda:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8be2:	2107      	movs	r1, #7
    8be4:	5499      	strb	r1, [r3, r2]
    8be6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bee:	781b      	ldrb	r3, [r3, #0]
    8bf0:	3301      	adds	r3, #1
    8bf2:	b2da      	uxtb	r2, r3
    8bf4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bfc:	701a      	strb	r2, [r3, #0]
    8bfe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c06:	781b      	ldrb	r3, [r3, #0]
    8c08:	2bff      	cmp	r3, #255	; 0xff
    8c0a:	d105      	bne.n	8c18 <send_adc+0x12c>
    8c0c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c14:	2200      	movs	r2, #0
    8c16:	701a      	strb	r2, [r3, #0]
    8c18:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c20:	2207      	movs	r2, #7
    8c22:	701a      	strb	r2, [r3, #0]
    8c24:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c2c:	2207      	movs	r2, #7
    8c2e:	701a      	strb	r2, [r3, #0]
    8c30:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c38:	781b      	ldrb	r3, [r3, #0]
    8c3a:	461a      	mov	r2, r3
    8c3c:	f24b 1358 	movw	r3, #45400	; 0xb158
    8c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c44:	7819      	ldrb	r1, [r3, #0]
    8c46:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c4e:	5499      	strb	r1, [r3, r2]
    8c50:	f24b 1358 	movw	r3, #45400	; 0xb158
    8c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c58:	781a      	ldrb	r2, [r3, #0]
    8c5a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c62:	781b      	ldrb	r3, [r3, #0]
    8c64:	4413      	add	r3, r2
    8c66:	b2da      	uxtb	r2, r3
    8c68:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c70:	701a      	strb	r2, [r3, #0]
    8c72:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c7a:	781a      	ldrb	r2, [r3, #0]
    8c7c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c84:	781b      	ldrb	r3, [r3, #0]
    8c86:	4413      	add	r3, r2
    8c88:	b2da      	uxtb	r2, r3
    8c8a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c92:	701a      	strb	r2, [r3, #0]
    8c94:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c9c:	781b      	ldrb	r3, [r3, #0]
    8c9e:	3301      	adds	r3, #1
    8ca0:	b2da      	uxtb	r2, r3
    8ca2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8caa:	701a      	strb	r2, [r3, #0]
    8cac:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cb4:	781b      	ldrb	r3, [r3, #0]
    8cb6:	2bff      	cmp	r3, #255	; 0xff
    8cb8:	d105      	bne.n	8cc6 <send_adc+0x1da>
    8cba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cc2:	2200      	movs	r2, #0
    8cc4:	701a      	strb	r2, [r3, #0]
    8cc6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cce:	781b      	ldrb	r3, [r3, #0]
    8cd0:	461a      	mov	r2, r3
    8cd2:	f24b 1358 	movw	r3, #45400	; 0xb158
    8cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cda:	7859      	ldrb	r1, [r3, #1]
    8cdc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ce4:	5499      	strb	r1, [r3, r2]
    8ce6:	4bc3      	ldr	r3, [pc, #780]	; (8ff4 <send_adc+0x508>)
    8ce8:	781a      	ldrb	r2, [r3, #0]
    8cea:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cf2:	781b      	ldrb	r3, [r3, #0]
    8cf4:	4413      	add	r3, r2
    8cf6:	b2da      	uxtb	r2, r3
    8cf8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d00:	701a      	strb	r2, [r3, #0]
    8d02:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d0a:	781a      	ldrb	r2, [r3, #0]
    8d0c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d14:	781b      	ldrb	r3, [r3, #0]
    8d16:	4413      	add	r3, r2
    8d18:	b2da      	uxtb	r2, r3
    8d1a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d22:	701a      	strb	r2, [r3, #0]
    8d24:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d2c:	781b      	ldrb	r3, [r3, #0]
    8d2e:	3301      	adds	r3, #1
    8d30:	b2da      	uxtb	r2, r3
    8d32:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d3a:	701a      	strb	r2, [r3, #0]
    8d3c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d44:	781b      	ldrb	r3, [r3, #0]
    8d46:	2bff      	cmp	r3, #255	; 0xff
    8d48:	d105      	bne.n	8d56 <send_adc+0x26a>
    8d4a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d52:	2200      	movs	r2, #0
    8d54:	701a      	strb	r2, [r3, #0]
    8d56:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d5e:	781b      	ldrb	r3, [r3, #0]
    8d60:	461a      	mov	r2, r3
    8d62:	f24b 135a 	movw	r3, #45402	; 0xb15a
    8d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d6a:	7819      	ldrb	r1, [r3, #0]
    8d6c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d74:	5499      	strb	r1, [r3, r2]
    8d76:	f24b 135a 	movw	r3, #45402	; 0xb15a
    8d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d7e:	781a      	ldrb	r2, [r3, #0]
    8d80:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d88:	781b      	ldrb	r3, [r3, #0]
    8d8a:	4413      	add	r3, r2
    8d8c:	b2da      	uxtb	r2, r3
    8d8e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d96:	701a      	strb	r2, [r3, #0]
    8d98:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8da0:	781a      	ldrb	r2, [r3, #0]
    8da2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8daa:	781b      	ldrb	r3, [r3, #0]
    8dac:	4413      	add	r3, r2
    8dae:	b2da      	uxtb	r2, r3
    8db0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db8:	701a      	strb	r2, [r3, #0]
    8dba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dc2:	781b      	ldrb	r3, [r3, #0]
    8dc4:	3301      	adds	r3, #1
    8dc6:	b2da      	uxtb	r2, r3
    8dc8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dd0:	701a      	strb	r2, [r3, #0]
    8dd2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dda:	781b      	ldrb	r3, [r3, #0]
    8ddc:	2bff      	cmp	r3, #255	; 0xff
    8dde:	d105      	bne.n	8dec <send_adc+0x300>
    8de0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8de8:	2200      	movs	r2, #0
    8dea:	701a      	strb	r2, [r3, #0]
    8dec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8df4:	781b      	ldrb	r3, [r3, #0]
    8df6:	461a      	mov	r2, r3
    8df8:	f24b 135a 	movw	r3, #45402	; 0xb15a
    8dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e00:	7859      	ldrb	r1, [r3, #1]
    8e02:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e0a:	5499      	strb	r1, [r3, r2]
    8e0c:	4b7a      	ldr	r3, [pc, #488]	; (8ff8 <send_adc+0x50c>)
    8e0e:	781a      	ldrb	r2, [r3, #0]
    8e10:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e18:	781b      	ldrb	r3, [r3, #0]
    8e1a:	4413      	add	r3, r2
    8e1c:	b2da      	uxtb	r2, r3
    8e1e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e26:	701a      	strb	r2, [r3, #0]
    8e28:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e30:	781a      	ldrb	r2, [r3, #0]
    8e32:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e3a:	781b      	ldrb	r3, [r3, #0]
    8e3c:	4413      	add	r3, r2
    8e3e:	b2da      	uxtb	r2, r3
    8e40:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e48:	701a      	strb	r2, [r3, #0]
    8e4a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e52:	781b      	ldrb	r3, [r3, #0]
    8e54:	3301      	adds	r3, #1
    8e56:	b2da      	uxtb	r2, r3
    8e58:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e60:	701a      	strb	r2, [r3, #0]
    8e62:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e6a:	781b      	ldrb	r3, [r3, #0]
    8e6c:	2bff      	cmp	r3, #255	; 0xff
    8e6e:	d105      	bne.n	8e7c <send_adc+0x390>
    8e70:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e78:	2200      	movs	r2, #0
    8e7a:	701a      	strb	r2, [r3, #0]
    8e7c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	461a      	mov	r2, r3
    8e88:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    8e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e90:	7819      	ldrb	r1, [r3, #0]
    8e92:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e9a:	5499      	strb	r1, [r3, r2]
    8e9c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea4:	781b      	ldrb	r3, [r3, #0]
    8ea6:	3301      	adds	r3, #1
    8ea8:	b2da      	uxtb	r2, r3
    8eaa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eb2:	701a      	strb	r2, [r3, #0]
    8eb4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ebc:	781b      	ldrb	r3, [r3, #0]
    8ebe:	2bff      	cmp	r3, #255	; 0xff
    8ec0:	d105      	bne.n	8ece <send_adc+0x3e2>
    8ec2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eca:	2200      	movs	r2, #0
    8ecc:	701a      	strb	r2, [r3, #0]
    8ece:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ed6:	781b      	ldrb	r3, [r3, #0]
    8ed8:	461a      	mov	r2, r3
    8eda:	f64a 73be 	movw	r3, #44990	; 0xafbe
    8ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee2:	7819      	ldrb	r1, [r3, #0]
    8ee4:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eec:	5499      	strb	r1, [r3, r2]
    8eee:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ef6:	781b      	ldrb	r3, [r3, #0]
    8ef8:	3301      	adds	r3, #1
    8efa:	b2da      	uxtb	r2, r3
    8efc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f04:	701a      	strb	r2, [r3, #0]
    8f06:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f0e:	781b      	ldrb	r3, [r3, #0]
    8f10:	2bff      	cmp	r3, #255	; 0xff
    8f12:	d105      	bne.n	8f20 <send_adc+0x434>
    8f14:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    8f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f1c:	2200      	movs	r2, #0
    8f1e:	701a      	strb	r2, [r3, #0]
    8f20:	f242 0339 	movw	r3, #8249	; 0x2039
    8f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f28:	781b      	ldrb	r3, [r3, #0]
    8f2a:	b2db      	uxtb	r3, r3
    8f2c:	f003 0310 	and.w	r3, r3, #16
    8f30:	2b00      	cmp	r3, #0
    8f32:	d15a      	bne.n	8fea <send_adc+0x4fe>
    8f34:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f3c:	781b      	ldrb	r3, [r3, #0]
    8f3e:	b2db      	uxtb	r3, r3
    8f40:	461a      	mov	r2, r3
    8f42:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    8f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f4a:	5c9a      	ldrb	r2, [r3, r2]
    8f4c:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    8f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f54:	701a      	strb	r2, [r3, #0]
    8f56:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    8f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f5e:	2200      	movs	r2, #0
    8f60:	701a      	strb	r2, [r3, #0]
    8f62:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f6a:	781b      	ldrb	r3, [r3, #0]
    8f6c:	b2db      	uxtb	r3, r3
    8f6e:	3301      	adds	r3, #1
    8f70:	b2da      	uxtb	r2, r3
    8f72:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f7a:	701a      	strb	r2, [r3, #0]
    8f7c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f84:	781b      	ldrb	r3, [r3, #0]
    8f86:	b2db      	uxtb	r3, r3
    8f88:	2bff      	cmp	r3, #255	; 0xff
    8f8a:	d105      	bne.n	8f98 <send_adc+0x4ac>
    8f8c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    8f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f94:	2200      	movs	r2, #0
    8f96:	701a      	strb	r2, [r3, #0]
    8f98:	f242 0338 	movw	r3, #8248	; 0x2038
    8f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa0:	f242 0238 	movw	r2, #8248	; 0x2038
    8fa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8fa8:	7812      	ldrb	r2, [r2, #0]
    8faa:	b2d2      	uxtb	r2, r2
    8fac:	f042 0201 	orr.w	r2, r2, #1
    8fb0:	b2d2      	uxtb	r2, r2
    8fb2:	701a      	strb	r2, [r3, #0]
    8fb4:	f242 0339 	movw	r3, #8249	; 0x2039
    8fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fbc:	f242 0239 	movw	r2, #8249	; 0x2039
    8fc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8fc4:	7812      	ldrb	r2, [r2, #0]
    8fc6:	b2d2      	uxtb	r2, r2
    8fc8:	f042 0210 	orr.w	r2, r2, #16
    8fcc:	b2d2      	uxtb	r2, r2
    8fce:	701a      	strb	r2, [r3, #0]
    8fd0:	e00b      	b.n	8fea <send_adc+0x4fe>
    8fd2:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    8fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fda:	781b      	ldrb	r3, [r3, #0]
    8fdc:	3301      	adds	r3, #1
    8fde:	b2da      	uxtb	r2, r3
    8fe0:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    8fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fe8:	701a      	strb	r2, [r3, #0]
}
    8fea:	46bd      	mov	sp, r7
    8fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ff0:	4770      	bx	lr
    8ff2:	bf00      	nop
    8ff4:	2000b159 	.word	0x2000b159
    8ff8:	2000b15b 	.word	0x2000b15b

00008ffc <send_settings>:
void send_settings(void){ //500ms
    8ffc:	b480      	push	{r7}
    8ffe:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9000:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    9004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9008:	781a      	ldrb	r2, [r3, #0]
    900a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    900e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9012:	fba3 1302 	umull	r1, r3, r3, r2
    9016:	0899      	lsrs	r1, r3, #2
    9018:	460b      	mov	r3, r1
    901a:	009b      	lsls	r3, r3, #2
    901c:	440b      	add	r3, r1
    901e:	1ad3      	subs	r3, r2, r3
    9020:	b2db      	uxtb	r3, r3
    9022:	2b02      	cmp	r3, #2
    9024:	f040 83e7 	bne.w	97f6 <send_settings+0x7fa>
    9028:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    902c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9030:	781b      	ldrb	r3, [r3, #0]
    9032:	2b00      	cmp	r3, #0
    9034:	f000 83df 	beq.w	97f6 <send_settings+0x7fa>
    9038:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    903c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9040:	781a      	ldrb	r2, [r3, #0]
    9042:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    9046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    904a:	781b      	ldrb	r3, [r3, #0]
    904c:	b2db      	uxtb	r3, r3
    904e:	429a      	cmp	r2, r3
    9050:	d313      	bcc.n	907a <send_settings+0x7e>
    9052:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    9056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    905a:	781b      	ldrb	r3, [r3, #0]
    905c:	b2db      	uxtb	r3, r3
    905e:	461a      	mov	r2, r3
    9060:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9068:	781b      	ldrb	r3, [r3, #0]
    906a:	1ad3      	subs	r3, r2, r3
    906c:	33ff      	adds	r3, #255	; 0xff
    906e:	2b0d      	cmp	r3, #13
    9070:	bfd4      	ite	le
    9072:	2300      	movle	r3, #0
    9074:	2301      	movgt	r3, #1
    9076:	b2db      	uxtb	r3, r3
    9078:	e011      	b.n	909e <send_settings+0xa2>
    907a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    907e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9082:	781b      	ldrb	r3, [r3, #0]
    9084:	b2db      	uxtb	r3, r3
    9086:	461a      	mov	r2, r3
    9088:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    908c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9090:	781b      	ldrb	r3, [r3, #0]
    9092:	1ad3      	subs	r3, r2, r3
    9094:	2b0d      	cmp	r3, #13
    9096:	bfd4      	ite	le
    9098:	2300      	movle	r3, #0
    909a:	2301      	movgt	r3, #1
    909c:	b2db      	uxtb	r3, r3
    909e:	2b00      	cmp	r3, #0
    90a0:	f000 839d 	beq.w	97de <send_settings+0x7e2>
    90a4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    90a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ac:	781b      	ldrb	r3, [r3, #0]
    90ae:	461a      	mov	r2, r3
    90b0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    90b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b8:	2105      	movs	r1, #5
    90ba:	5499      	strb	r1, [r3, r2]
    90bc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    90c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90c4:	781b      	ldrb	r3, [r3, #0]
    90c6:	3301      	adds	r3, #1
    90c8:	b2da      	uxtb	r2, r3
    90ca:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    90ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90d2:	701a      	strb	r2, [r3, #0]
    90d4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    90d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90dc:	781b      	ldrb	r3, [r3, #0]
    90de:	2bff      	cmp	r3, #255	; 0xff
    90e0:	d105      	bne.n	90ee <send_settings+0xf2>
    90e2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    90e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ea:	2200      	movs	r2, #0
    90ec:	701a      	strb	r2, [r3, #0]
    90ee:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    90f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90f6:	781b      	ldrb	r3, [r3, #0]
    90f8:	461a      	mov	r2, r3
    90fa:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    90fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9102:	2111      	movs	r1, #17
    9104:	5499      	strb	r1, [r3, r2]
    9106:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    910a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    910e:	781b      	ldrb	r3, [r3, #0]
    9110:	3301      	adds	r3, #1
    9112:	b2da      	uxtb	r2, r3
    9114:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    911c:	701a      	strb	r2, [r3, #0]
    911e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9126:	781b      	ldrb	r3, [r3, #0]
    9128:	2bff      	cmp	r3, #255	; 0xff
    912a:	d105      	bne.n	9138 <send_settings+0x13c>
    912c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9134:	2200      	movs	r2, #0
    9136:	701a      	strb	r2, [r3, #0]
    9138:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    913c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9140:	2211      	movs	r2, #17
    9142:	701a      	strb	r2, [r3, #0]
    9144:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    914c:	2211      	movs	r2, #17
    914e:	701a      	strb	r2, [r3, #0]
    9150:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9158:	781b      	ldrb	r3, [r3, #0]
    915a:	461a      	mov	r2, r3
    915c:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    9160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9164:	7819      	ldrb	r1, [r3, #0]
    9166:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    916a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    916e:	5499      	strb	r1, [r3, r2]
    9170:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9178:	781a      	ldrb	r2, [r3, #0]
    917a:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    917e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9182:	781b      	ldrb	r3, [r3, #0]
    9184:	4413      	add	r3, r2
    9186:	b2da      	uxtb	r2, r3
    9188:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    918c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9190:	701a      	strb	r2, [r3, #0]
    9192:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    919a:	781a      	ldrb	r2, [r3, #0]
    919c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    91a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91a4:	781b      	ldrb	r3, [r3, #0]
    91a6:	4413      	add	r3, r2
    91a8:	b2da      	uxtb	r2, r3
    91aa:	f64a 73be 	movw	r3, #44990	; 0xafbe
    91ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91b2:	701a      	strb	r2, [r3, #0]
    91b4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    91b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91bc:	781b      	ldrb	r3, [r3, #0]
    91be:	3301      	adds	r3, #1
    91c0:	b2da      	uxtb	r2, r3
    91c2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    91c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ca:	701a      	strb	r2, [r3, #0]
    91cc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    91d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91d4:	781b      	ldrb	r3, [r3, #0]
    91d6:	2bff      	cmp	r3, #255	; 0xff
    91d8:	d105      	bne.n	91e6 <send_settings+0x1ea>
    91da:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    91de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91e2:	2200      	movs	r2, #0
    91e4:	701a      	strb	r2, [r3, #0]
    91e6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    91ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ee:	781b      	ldrb	r3, [r3, #0]
    91f0:	461a      	mov	r2, r3
    91f2:	f64a 63a8 	movw	r3, #44712	; 0xaea8
    91f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91fa:	7819      	ldrb	r1, [r3, #0]
    91fc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9204:	5499      	strb	r1, [r3, r2]
    9206:	f64a 63a8 	movw	r3, #44712	; 0xaea8
    920a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    920e:	781a      	ldrb	r2, [r3, #0]
    9210:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9218:	781b      	ldrb	r3, [r3, #0]
    921a:	4413      	add	r3, r2
    921c:	b2da      	uxtb	r2, r3
    921e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9226:	701a      	strb	r2, [r3, #0]
    9228:	f64a 73be 	movw	r3, #44990	; 0xafbe
    922c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9230:	781a      	ldrb	r2, [r3, #0]
    9232:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    923a:	781b      	ldrb	r3, [r3, #0]
    923c:	4413      	add	r3, r2
    923e:	b2da      	uxtb	r2, r3
    9240:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9248:	701a      	strb	r2, [r3, #0]
    924a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    924e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9252:	781b      	ldrb	r3, [r3, #0]
    9254:	3301      	adds	r3, #1
    9256:	b2da      	uxtb	r2, r3
    9258:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    925c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9260:	701a      	strb	r2, [r3, #0]
    9262:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    926a:	781b      	ldrb	r3, [r3, #0]
    926c:	2bff      	cmp	r3, #255	; 0xff
    926e:	d105      	bne.n	927c <send_settings+0x280>
    9270:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9278:	2200      	movs	r2, #0
    927a:	701a      	strb	r2, [r3, #0]
    927c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9284:	781b      	ldrb	r3, [r3, #0]
    9286:	461a      	mov	r2, r3
    9288:	f64a 63a8 	movw	r3, #44712	; 0xaea8
    928c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9290:	7859      	ldrb	r1, [r3, #1]
    9292:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    929a:	5499      	strb	r1, [r3, r2]
    929c:	4bd1      	ldr	r3, [pc, #836]	; (95e4 <send_settings+0x5e8>)
    929e:	781a      	ldrb	r2, [r3, #0]
    92a0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    92a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a8:	781b      	ldrb	r3, [r3, #0]
    92aa:	4413      	add	r3, r2
    92ac:	b2da      	uxtb	r2, r3
    92ae:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    92b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92b6:	701a      	strb	r2, [r3, #0]
    92b8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    92bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92c0:	781a      	ldrb	r2, [r3, #0]
    92c2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    92c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ca:	781b      	ldrb	r3, [r3, #0]
    92cc:	4413      	add	r3, r2
    92ce:	b2da      	uxtb	r2, r3
    92d0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    92d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d8:	701a      	strb	r2, [r3, #0]
    92da:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    92de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92e2:	781b      	ldrb	r3, [r3, #0]
    92e4:	3301      	adds	r3, #1
    92e6:	b2da      	uxtb	r2, r3
    92e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    92ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f0:	701a      	strb	r2, [r3, #0]
    92f2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    92f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92fa:	781b      	ldrb	r3, [r3, #0]
    92fc:	2bff      	cmp	r3, #255	; 0xff
    92fe:	d105      	bne.n	930c <send_settings+0x310>
    9300:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9308:	2200      	movs	r2, #0
    930a:	701a      	strb	r2, [r3, #0]
    930c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9314:	781b      	ldrb	r3, [r3, #0]
    9316:	461a      	mov	r2, r3
    9318:	f64a 63a8 	movw	r3, #44712	; 0xaea8
    931c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9320:	7899      	ldrb	r1, [r3, #2]
    9322:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    932a:	5499      	strb	r1, [r3, r2]
    932c:	4bae      	ldr	r3, [pc, #696]	; (95e8 <send_settings+0x5ec>)
    932e:	781a      	ldrb	r2, [r3, #0]
    9330:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9338:	781b      	ldrb	r3, [r3, #0]
    933a:	4413      	add	r3, r2
    933c:	b2da      	uxtb	r2, r3
    933e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9346:	701a      	strb	r2, [r3, #0]
    9348:	f64a 73be 	movw	r3, #44990	; 0xafbe
    934c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9350:	781a      	ldrb	r2, [r3, #0]
    9352:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    935a:	781b      	ldrb	r3, [r3, #0]
    935c:	4413      	add	r3, r2
    935e:	b2da      	uxtb	r2, r3
    9360:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9368:	701a      	strb	r2, [r3, #0]
    936a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    936e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9372:	781b      	ldrb	r3, [r3, #0]
    9374:	3301      	adds	r3, #1
    9376:	b2da      	uxtb	r2, r3
    9378:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    937c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9380:	701a      	strb	r2, [r3, #0]
    9382:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    938a:	781b      	ldrb	r3, [r3, #0]
    938c:	2bff      	cmp	r3, #255	; 0xff
    938e:	d105      	bne.n	939c <send_settings+0x3a0>
    9390:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9398:	2200      	movs	r2, #0
    939a:	701a      	strb	r2, [r3, #0]
    939c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    93a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a4:	781b      	ldrb	r3, [r3, #0]
    93a6:	461a      	mov	r2, r3
    93a8:	f64a 63a8 	movw	r3, #44712	; 0xaea8
    93ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93b0:	78d9      	ldrb	r1, [r3, #3]
    93b2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    93b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ba:	5499      	strb	r1, [r3, r2]
    93bc:	4b8b      	ldr	r3, [pc, #556]	; (95ec <send_settings+0x5f0>)
    93be:	781a      	ldrb	r2, [r3, #0]
    93c0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    93c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	4413      	add	r3, r2
    93cc:	b2da      	uxtb	r2, r3
    93ce:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    93d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93d6:	701a      	strb	r2, [r3, #0]
    93d8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    93dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e0:	781a      	ldrb	r2, [r3, #0]
    93e2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    93e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ea:	781b      	ldrb	r3, [r3, #0]
    93ec:	4413      	add	r3, r2
    93ee:	b2da      	uxtb	r2, r3
    93f0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    93f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93f8:	701a      	strb	r2, [r3, #0]
    93fa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    93fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9402:	781b      	ldrb	r3, [r3, #0]
    9404:	3301      	adds	r3, #1
    9406:	b2da      	uxtb	r2, r3
    9408:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    940c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9410:	701a      	strb	r2, [r3, #0]
    9412:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    941a:	781b      	ldrb	r3, [r3, #0]
    941c:	2bff      	cmp	r3, #255	; 0xff
    941e:	d105      	bne.n	942c <send_settings+0x430>
    9420:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9428:	2200      	movs	r2, #0
    942a:	701a      	strb	r2, [r3, #0]
    942c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	461a      	mov	r2, r3
    9438:	f64a 63ac 	movw	r3, #44716	; 0xaeac
    943c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9440:	7819      	ldrb	r1, [r3, #0]
    9442:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    944a:	5499      	strb	r1, [r3, r2]
    944c:	f64a 63ac 	movw	r3, #44716	; 0xaeac
    9450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9454:	781a      	ldrb	r2, [r3, #0]
    9456:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    945a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    945e:	781b      	ldrb	r3, [r3, #0]
    9460:	4413      	add	r3, r2
    9462:	b2da      	uxtb	r2, r3
    9464:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    946c:	701a      	strb	r2, [r3, #0]
    946e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9476:	781a      	ldrb	r2, [r3, #0]
    9478:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    947c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9480:	781b      	ldrb	r3, [r3, #0]
    9482:	4413      	add	r3, r2
    9484:	b2da      	uxtb	r2, r3
    9486:	f64a 73be 	movw	r3, #44990	; 0xafbe
    948a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    948e:	701a      	strb	r2, [r3, #0]
    9490:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9498:	781b      	ldrb	r3, [r3, #0]
    949a:	3301      	adds	r3, #1
    949c:	b2da      	uxtb	r2, r3
    949e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    94a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94a6:	701a      	strb	r2, [r3, #0]
    94a8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    94ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b0:	781b      	ldrb	r3, [r3, #0]
    94b2:	2bff      	cmp	r3, #255	; 0xff
    94b4:	d105      	bne.n	94c2 <send_settings+0x4c6>
    94b6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    94ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94be:	2200      	movs	r2, #0
    94c0:	701a      	strb	r2, [r3, #0]
    94c2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    94c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ca:	781b      	ldrb	r3, [r3, #0]
    94cc:	461a      	mov	r2, r3
    94ce:	f64a 63ac 	movw	r3, #44716	; 0xaeac
    94d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d6:	7859      	ldrb	r1, [r3, #1]
    94d8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    94dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94e0:	5499      	strb	r1, [r3, r2]
    94e2:	4b43      	ldr	r3, [pc, #268]	; (95f0 <send_settings+0x5f4>)
    94e4:	781a      	ldrb	r2, [r3, #0]
    94e6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    94ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ee:	781b      	ldrb	r3, [r3, #0]
    94f0:	4413      	add	r3, r2
    94f2:	b2da      	uxtb	r2, r3
    94f4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    94f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94fc:	701a      	strb	r2, [r3, #0]
    94fe:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9506:	781a      	ldrb	r2, [r3, #0]
    9508:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    950c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9510:	781b      	ldrb	r3, [r3, #0]
    9512:	4413      	add	r3, r2
    9514:	b2da      	uxtb	r2, r3
    9516:	f64a 73be 	movw	r3, #44990	; 0xafbe
    951a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    951e:	701a      	strb	r2, [r3, #0]
    9520:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9528:	781b      	ldrb	r3, [r3, #0]
    952a:	3301      	adds	r3, #1
    952c:	b2da      	uxtb	r2, r3
    952e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9536:	701a      	strb	r2, [r3, #0]
    9538:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    953c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9540:	781b      	ldrb	r3, [r3, #0]
    9542:	2bff      	cmp	r3, #255	; 0xff
    9544:	d105      	bne.n	9552 <send_settings+0x556>
    9546:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    954a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    954e:	2200      	movs	r2, #0
    9550:	701a      	strb	r2, [r3, #0]
    9552:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    955a:	781b      	ldrb	r3, [r3, #0]
    955c:	461a      	mov	r2, r3
    955e:	f64a 63ac 	movw	r3, #44716	; 0xaeac
    9562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9566:	7899      	ldrb	r1, [r3, #2]
    9568:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    956c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9570:	5499      	strb	r1, [r3, r2]
    9572:	4b20      	ldr	r3, [pc, #128]	; (95f4 <send_settings+0x5f8>)
    9574:	781a      	ldrb	r2, [r3, #0]
    9576:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    957a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    957e:	781b      	ldrb	r3, [r3, #0]
    9580:	4413      	add	r3, r2
    9582:	b2da      	uxtb	r2, r3
    9584:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    958c:	701a      	strb	r2, [r3, #0]
    958e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9596:	781a      	ldrb	r2, [r3, #0]
    9598:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    959c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95a0:	781b      	ldrb	r3, [r3, #0]
    95a2:	4413      	add	r3, r2
    95a4:	b2da      	uxtb	r2, r3
    95a6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    95aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95ae:	701a      	strb	r2, [r3, #0]
    95b0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    95b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b8:	781b      	ldrb	r3, [r3, #0]
    95ba:	3301      	adds	r3, #1
    95bc:	b2da      	uxtb	r2, r3
    95be:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    95c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95c6:	701a      	strb	r2, [r3, #0]
    95c8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    95cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95d0:	781b      	ldrb	r3, [r3, #0]
    95d2:	2bff      	cmp	r3, #255	; 0xff
    95d4:	d110      	bne.n	95f8 <send_settings+0x5fc>
    95d6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    95da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95de:	2200      	movs	r2, #0
    95e0:	701a      	strb	r2, [r3, #0]
    95e2:	e009      	b.n	95f8 <send_settings+0x5fc>
    95e4:	2000aea9 	.word	0x2000aea9
    95e8:	2000aeaa 	.word	0x2000aeaa
    95ec:	2000aeab 	.word	0x2000aeab
    95f0:	2000aead 	.word	0x2000aead
    95f4:	2000aeae 	.word	0x2000aeae
    95f8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    95fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9600:	781b      	ldrb	r3, [r3, #0]
    9602:	461a      	mov	r2, r3
    9604:	f64a 63ac 	movw	r3, #44716	; 0xaeac
    9608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    960c:	78d9      	ldrb	r1, [r3, #3]
    960e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9616:	5499      	strb	r1, [r3, r2]
    9618:	4b79      	ldr	r3, [pc, #484]	; (9800 <send_settings+0x804>)
    961a:	781a      	ldrb	r2, [r3, #0]
    961c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9624:	781b      	ldrb	r3, [r3, #0]
    9626:	4413      	add	r3, r2
    9628:	b2da      	uxtb	r2, r3
    962a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    962e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9632:	701a      	strb	r2, [r3, #0]
    9634:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    963c:	781a      	ldrb	r2, [r3, #0]
    963e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9646:	781b      	ldrb	r3, [r3, #0]
    9648:	4413      	add	r3, r2
    964a:	b2da      	uxtb	r2, r3
    964c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9654:	701a      	strb	r2, [r3, #0]
    9656:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    965a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    965e:	781b      	ldrb	r3, [r3, #0]
    9660:	3301      	adds	r3, #1
    9662:	b2da      	uxtb	r2, r3
    9664:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    966c:	701a      	strb	r2, [r3, #0]
    966e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9676:	781b      	ldrb	r3, [r3, #0]
    9678:	2bff      	cmp	r3, #255	; 0xff
    967a:	d105      	bne.n	9688 <send_settings+0x68c>
    967c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9684:	2200      	movs	r2, #0
    9686:	701a      	strb	r2, [r3, #0]
    9688:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    968c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9690:	781b      	ldrb	r3, [r3, #0]
    9692:	461a      	mov	r2, r3
    9694:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    969c:	7819      	ldrb	r1, [r3, #0]
    969e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    96a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96a6:	5499      	strb	r1, [r3, r2]
    96a8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    96ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96b0:	781b      	ldrb	r3, [r3, #0]
    96b2:	3301      	adds	r3, #1
    96b4:	b2da      	uxtb	r2, r3
    96b6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    96ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96be:	701a      	strb	r2, [r3, #0]
    96c0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    96c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c8:	781b      	ldrb	r3, [r3, #0]
    96ca:	2bff      	cmp	r3, #255	; 0xff
    96cc:	d105      	bne.n	96da <send_settings+0x6de>
    96ce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    96d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96d6:	2200      	movs	r2, #0
    96d8:	701a      	strb	r2, [r3, #0]
    96da:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    96de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e2:	781b      	ldrb	r3, [r3, #0]
    96e4:	461a      	mov	r2, r3
    96e6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    96ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96ee:	7819      	ldrb	r1, [r3, #0]
    96f0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    96f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96f8:	5499      	strb	r1, [r3, r2]
    96fa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    96fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9702:	781b      	ldrb	r3, [r3, #0]
    9704:	3301      	adds	r3, #1
    9706:	b2da      	uxtb	r2, r3
    9708:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    970c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9710:	701a      	strb	r2, [r3, #0]
    9712:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    971a:	781b      	ldrb	r3, [r3, #0]
    971c:	2bff      	cmp	r3, #255	; 0xff
    971e:	d105      	bne.n	972c <send_settings+0x730>
    9720:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9728:	2200      	movs	r2, #0
    972a:	701a      	strb	r2, [r3, #0]
    972c:	f242 0339 	movw	r3, #8249	; 0x2039
    9730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9734:	781b      	ldrb	r3, [r3, #0]
    9736:	b2db      	uxtb	r3, r3
    9738:	f003 0310 	and.w	r3, r3, #16
    973c:	2b00      	cmp	r3, #0
    973e:	d15a      	bne.n	97f6 <send_settings+0x7fa>
    9740:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    9744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9748:	781b      	ldrb	r3, [r3, #0]
    974a:	b2db      	uxtb	r3, r3
    974c:	461a      	mov	r2, r3
    974e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9756:	5c9a      	ldrb	r2, [r3, r2]
    9758:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    975c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9760:	701a      	strb	r2, [r3, #0]
    9762:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    9766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    976a:	2200      	movs	r2, #0
    976c:	701a      	strb	r2, [r3, #0]
    976e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    9772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9776:	781b      	ldrb	r3, [r3, #0]
    9778:	b2db      	uxtb	r3, r3
    977a:	3301      	adds	r3, #1
    977c:	b2da      	uxtb	r2, r3
    977e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    9782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9786:	701a      	strb	r2, [r3, #0]
    9788:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    978c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9790:	781b      	ldrb	r3, [r3, #0]
    9792:	b2db      	uxtb	r3, r3
    9794:	2bff      	cmp	r3, #255	; 0xff
    9796:	d105      	bne.n	97a4 <send_settings+0x7a8>
    9798:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    979c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97a0:	2200      	movs	r2, #0
    97a2:	701a      	strb	r2, [r3, #0]
    97a4:	f242 0338 	movw	r3, #8248	; 0x2038
    97a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ac:	f242 0238 	movw	r2, #8248	; 0x2038
    97b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    97b4:	7812      	ldrb	r2, [r2, #0]
    97b6:	b2d2      	uxtb	r2, r2
    97b8:	f042 0201 	orr.w	r2, r2, #1
    97bc:	b2d2      	uxtb	r2, r2
    97be:	701a      	strb	r2, [r3, #0]
    97c0:	f242 0339 	movw	r3, #8249	; 0x2039
    97c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c8:	f242 0239 	movw	r2, #8249	; 0x2039
    97cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    97d0:	7812      	ldrb	r2, [r2, #0]
    97d2:	b2d2      	uxtb	r2, r2
    97d4:	f042 0210 	orr.w	r2, r2, #16
    97d8:	b2d2      	uxtb	r2, r2
    97da:	701a      	strb	r2, [r3, #0]
    97dc:	e00b      	b.n	97f6 <send_settings+0x7fa>
    97de:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    97e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97e6:	781b      	ldrb	r3, [r3, #0]
    97e8:	3301      	adds	r3, #1
    97ea:	b2da      	uxtb	r2, r3
    97ec:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    97f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97f4:	701a      	strb	r2, [r3, #0]
}
    97f6:	46bd      	mov	sp, r7
    97f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    97fc:	4770      	bx	lr
    97fe:	bf00      	nop
    9800:	2000aeaf 	.word	0x2000aeaf

00009804 <send_desired>:
void send_desired(void){  //1000ms
    9804:	b480      	push	{r7}
    9806:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9808:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    980c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9810:	781a      	ldrb	r2, [r3, #0]
    9812:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9816:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    981a:	fba3 1302 	umull	r1, r3, r3, r2
    981e:	08d9      	lsrs	r1, r3, #3
    9820:	460b      	mov	r3, r1
    9822:	009b      	lsls	r3, r3, #2
    9824:	440b      	add	r3, r1
    9826:	005b      	lsls	r3, r3, #1
    9828:	1ad3      	subs	r3, r2, r3
    982a:	b2db      	uxtb	r3, r3
    982c:	2b03      	cmp	r3, #3
    982e:	f040 8712 	bne.w	a656 <send_desired+0xe52>
    9832:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    983a:	781a      	ldrb	r2, [r3, #0]
    983c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    9840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9844:	781b      	ldrb	r3, [r3, #0]
    9846:	b2db      	uxtb	r3, r3
    9848:	429a      	cmp	r2, r3
    984a:	d313      	bcc.n	9874 <send_desired+0x70>
    984c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    9850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9854:	781b      	ldrb	r3, [r3, #0]
    9856:	b2db      	uxtb	r3, r3
    9858:	461a      	mov	r2, r3
    985a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    985e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9862:	781b      	ldrb	r3, [r3, #0]
    9864:	1ad3      	subs	r3, r2, r3
    9866:	33ff      	adds	r3, #255	; 0xff
    9868:	2b18      	cmp	r3, #24
    986a:	bfd4      	ite	le
    986c:	2300      	movle	r3, #0
    986e:	2301      	movgt	r3, #1
    9870:	b2db      	uxtb	r3, r3
    9872:	e011      	b.n	9898 <send_desired+0x94>
    9874:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    9878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    987c:	781b      	ldrb	r3, [r3, #0]
    987e:	b2db      	uxtb	r3, r3
    9880:	461a      	mov	r2, r3
    9882:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    988a:	781b      	ldrb	r3, [r3, #0]
    988c:	1ad3      	subs	r3, r2, r3
    988e:	2b18      	cmp	r3, #24
    9890:	bfd4      	ite	le
    9892:	2300      	movle	r3, #0
    9894:	2301      	movgt	r3, #1
    9896:	b2db      	uxtb	r3, r3
    9898:	2b00      	cmp	r3, #0
    989a:	f000 86d0 	beq.w	a63e <send_desired+0xe3a>
    989e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    98a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98a6:	781b      	ldrb	r3, [r3, #0]
    98a8:	461a      	mov	r2, r3
    98aa:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    98ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98b2:	2105      	movs	r1, #5
    98b4:	5499      	strb	r1, [r3, r2]
    98b6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    98ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98be:	781b      	ldrb	r3, [r3, #0]
    98c0:	3301      	adds	r3, #1
    98c2:	b2da      	uxtb	r2, r3
    98c4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    98c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98cc:	701a      	strb	r2, [r3, #0]
    98ce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    98d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98d6:	781b      	ldrb	r3, [r3, #0]
    98d8:	2bff      	cmp	r3, #255	; 0xff
    98da:	d105      	bne.n	98e8 <send_desired+0xe4>
    98dc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    98e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98e4:	2200      	movs	r2, #0
    98e6:	701a      	strb	r2, [r3, #0]
    98e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    98ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98f0:	781b      	ldrb	r3, [r3, #0]
    98f2:	461a      	mov	r2, r3
    98f4:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    98f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98fc:	2112      	movs	r1, #18
    98fe:	5499      	strb	r1, [r3, r2]
    9900:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9908:	781b      	ldrb	r3, [r3, #0]
    990a:	3301      	adds	r3, #1
    990c:	b2da      	uxtb	r2, r3
    990e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9916:	701a      	strb	r2, [r3, #0]
    9918:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    991c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9920:	781b      	ldrb	r3, [r3, #0]
    9922:	2bff      	cmp	r3, #255	; 0xff
    9924:	d105      	bne.n	9932 <send_desired+0x12e>
    9926:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    992a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    992e:	2200      	movs	r2, #0
    9930:	701a      	strb	r2, [r3, #0]
    9932:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    993a:	2212      	movs	r2, #18
    993c:	701a      	strb	r2, [r3, #0]
    993e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9946:	2212      	movs	r2, #18
    9948:	701a      	strb	r2, [r3, #0]
    994a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    994e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9952:	781b      	ldrb	r3, [r3, #0]
    9954:	461a      	mov	r2, r3
    9956:	f24b 13e4 	movw	r3, #45540	; 0xb1e4
    995a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    995e:	7819      	ldrb	r1, [r3, #0]
    9960:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9968:	5499      	strb	r1, [r3, r2]
    996a:	f24b 13e4 	movw	r3, #45540	; 0xb1e4
    996e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9972:	781a      	ldrb	r2, [r3, #0]
    9974:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    997c:	781b      	ldrb	r3, [r3, #0]
    997e:	4413      	add	r3, r2
    9980:	b2da      	uxtb	r2, r3
    9982:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    998a:	701a      	strb	r2, [r3, #0]
    998c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9994:	781a      	ldrb	r2, [r3, #0]
    9996:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    999a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    999e:	781b      	ldrb	r3, [r3, #0]
    99a0:	4413      	add	r3, r2
    99a2:	b2da      	uxtb	r2, r3
    99a4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    99a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ac:	701a      	strb	r2, [r3, #0]
    99ae:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    99b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99b6:	781b      	ldrb	r3, [r3, #0]
    99b8:	3301      	adds	r3, #1
    99ba:	b2da      	uxtb	r2, r3
    99bc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    99c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99c4:	701a      	strb	r2, [r3, #0]
    99c6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    99ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ce:	781b      	ldrb	r3, [r3, #0]
    99d0:	2bff      	cmp	r3, #255	; 0xff
    99d2:	d105      	bne.n	99e0 <send_desired+0x1dc>
    99d4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    99d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99dc:	2200      	movs	r2, #0
    99de:	701a      	strb	r2, [r3, #0]
    99e0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    99e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99e8:	781b      	ldrb	r3, [r3, #0]
    99ea:	461a      	mov	r2, r3
    99ec:	f24b 13e4 	movw	r3, #45540	; 0xb1e4
    99f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99f4:	7859      	ldrb	r1, [r3, #1]
    99f6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    99fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99fe:	5499      	strb	r1, [r3, r2]
    9a00:	4bd1      	ldr	r3, [pc, #836]	; (9d48 <send_desired+0x544>)
    9a02:	781a      	ldrb	r2, [r3, #0]
    9a04:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a0c:	781b      	ldrb	r3, [r3, #0]
    9a0e:	4413      	add	r3, r2
    9a10:	b2da      	uxtb	r2, r3
    9a12:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a1a:	701a      	strb	r2, [r3, #0]
    9a1c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a24:	781a      	ldrb	r2, [r3, #0]
    9a26:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a2e:	781b      	ldrb	r3, [r3, #0]
    9a30:	4413      	add	r3, r2
    9a32:	b2da      	uxtb	r2, r3
    9a34:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a3c:	701a      	strb	r2, [r3, #0]
    9a3e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a46:	781b      	ldrb	r3, [r3, #0]
    9a48:	3301      	adds	r3, #1
    9a4a:	b2da      	uxtb	r2, r3
    9a4c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a54:	701a      	strb	r2, [r3, #0]
    9a56:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a5e:	781b      	ldrb	r3, [r3, #0]
    9a60:	2bff      	cmp	r3, #255	; 0xff
    9a62:	d105      	bne.n	9a70 <send_desired+0x26c>
    9a64:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a6c:	2200      	movs	r2, #0
    9a6e:	701a      	strb	r2, [r3, #0]
    9a70:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a78:	781b      	ldrb	r3, [r3, #0]
    9a7a:	461a      	mov	r2, r3
    9a7c:	f24b 13e4 	movw	r3, #45540	; 0xb1e4
    9a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a84:	7899      	ldrb	r1, [r3, #2]
    9a86:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a8e:	5499      	strb	r1, [r3, r2]
    9a90:	4bae      	ldr	r3, [pc, #696]	; (9d4c <send_desired+0x548>)
    9a92:	781a      	ldrb	r2, [r3, #0]
    9a94:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a9c:	781b      	ldrb	r3, [r3, #0]
    9a9e:	4413      	add	r3, r2
    9aa0:	b2da      	uxtb	r2, r3
    9aa2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aaa:	701a      	strb	r2, [r3, #0]
    9aac:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ab4:	781a      	ldrb	r2, [r3, #0]
    9ab6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9abe:	781b      	ldrb	r3, [r3, #0]
    9ac0:	4413      	add	r3, r2
    9ac2:	b2da      	uxtb	r2, r3
    9ac4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9acc:	701a      	strb	r2, [r3, #0]
    9ace:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ad6:	781b      	ldrb	r3, [r3, #0]
    9ad8:	3301      	adds	r3, #1
    9ada:	b2da      	uxtb	r2, r3
    9adc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae4:	701a      	strb	r2, [r3, #0]
    9ae6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aee:	781b      	ldrb	r3, [r3, #0]
    9af0:	2bff      	cmp	r3, #255	; 0xff
    9af2:	d105      	bne.n	9b00 <send_desired+0x2fc>
    9af4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9afc:	2200      	movs	r2, #0
    9afe:	701a      	strb	r2, [r3, #0]
    9b00:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b08:	781b      	ldrb	r3, [r3, #0]
    9b0a:	461a      	mov	r2, r3
    9b0c:	f24b 13e4 	movw	r3, #45540	; 0xb1e4
    9b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b14:	78d9      	ldrb	r1, [r3, #3]
    9b16:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b1e:	5499      	strb	r1, [r3, r2]
    9b20:	4b8b      	ldr	r3, [pc, #556]	; (9d50 <send_desired+0x54c>)
    9b22:	781a      	ldrb	r2, [r3, #0]
    9b24:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b2c:	781b      	ldrb	r3, [r3, #0]
    9b2e:	4413      	add	r3, r2
    9b30:	b2da      	uxtb	r2, r3
    9b32:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b3a:	701a      	strb	r2, [r3, #0]
    9b3c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b44:	781a      	ldrb	r2, [r3, #0]
    9b46:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b4e:	781b      	ldrb	r3, [r3, #0]
    9b50:	4413      	add	r3, r2
    9b52:	b2da      	uxtb	r2, r3
    9b54:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b5c:	701a      	strb	r2, [r3, #0]
    9b5e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b66:	781b      	ldrb	r3, [r3, #0]
    9b68:	3301      	adds	r3, #1
    9b6a:	b2da      	uxtb	r2, r3
    9b6c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b74:	701a      	strb	r2, [r3, #0]
    9b76:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b7e:	781b      	ldrb	r3, [r3, #0]
    9b80:	2bff      	cmp	r3, #255	; 0xff
    9b82:	d105      	bne.n	9b90 <send_desired+0x38c>
    9b84:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b8c:	2200      	movs	r2, #0
    9b8e:	701a      	strb	r2, [r3, #0]
    9b90:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b98:	781b      	ldrb	r3, [r3, #0]
    9b9a:	461a      	mov	r2, r3
    9b9c:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
    9ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ba4:	7819      	ldrb	r1, [r3, #0]
    9ba6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bae:	5499      	strb	r1, [r3, r2]
    9bb0:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
    9bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bb8:	781a      	ldrb	r2, [r3, #0]
    9bba:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bc2:	781b      	ldrb	r3, [r3, #0]
    9bc4:	4413      	add	r3, r2
    9bc6:	b2da      	uxtb	r2, r3
    9bc8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd0:	701a      	strb	r2, [r3, #0]
    9bd2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bda:	781a      	ldrb	r2, [r3, #0]
    9bdc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9be4:	781b      	ldrb	r3, [r3, #0]
    9be6:	4413      	add	r3, r2
    9be8:	b2da      	uxtb	r2, r3
    9bea:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bf2:	701a      	strb	r2, [r3, #0]
    9bf4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bfc:	781b      	ldrb	r3, [r3, #0]
    9bfe:	3301      	adds	r3, #1
    9c00:	b2da      	uxtb	r2, r3
    9c02:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c0a:	701a      	strb	r2, [r3, #0]
    9c0c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c14:	781b      	ldrb	r3, [r3, #0]
    9c16:	2bff      	cmp	r3, #255	; 0xff
    9c18:	d105      	bne.n	9c26 <send_desired+0x422>
    9c1a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c22:	2200      	movs	r2, #0
    9c24:	701a      	strb	r2, [r3, #0]
    9c26:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c2e:	781b      	ldrb	r3, [r3, #0]
    9c30:	461a      	mov	r2, r3
    9c32:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
    9c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c3a:	7859      	ldrb	r1, [r3, #1]
    9c3c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c44:	5499      	strb	r1, [r3, r2]
    9c46:	4b43      	ldr	r3, [pc, #268]	; (9d54 <send_desired+0x550>)
    9c48:	781a      	ldrb	r2, [r3, #0]
    9c4a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c52:	781b      	ldrb	r3, [r3, #0]
    9c54:	4413      	add	r3, r2
    9c56:	b2da      	uxtb	r2, r3
    9c58:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c60:	701a      	strb	r2, [r3, #0]
    9c62:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c6a:	781a      	ldrb	r2, [r3, #0]
    9c6c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c74:	781b      	ldrb	r3, [r3, #0]
    9c76:	4413      	add	r3, r2
    9c78:	b2da      	uxtb	r2, r3
    9c7a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c82:	701a      	strb	r2, [r3, #0]
    9c84:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c8c:	781b      	ldrb	r3, [r3, #0]
    9c8e:	3301      	adds	r3, #1
    9c90:	b2da      	uxtb	r2, r3
    9c92:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c9a:	701a      	strb	r2, [r3, #0]
    9c9c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ca4:	781b      	ldrb	r3, [r3, #0]
    9ca6:	2bff      	cmp	r3, #255	; 0xff
    9ca8:	d105      	bne.n	9cb6 <send_desired+0x4b2>
    9caa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb2:	2200      	movs	r2, #0
    9cb4:	701a      	strb	r2, [r3, #0]
    9cb6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cbe:	781b      	ldrb	r3, [r3, #0]
    9cc0:	461a      	mov	r2, r3
    9cc2:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
    9cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cca:	7899      	ldrb	r1, [r3, #2]
    9ccc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd4:	5499      	strb	r1, [r3, r2]
    9cd6:	4b20      	ldr	r3, [pc, #128]	; (9d58 <send_desired+0x554>)
    9cd8:	781a      	ldrb	r2, [r3, #0]
    9cda:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce2:	781b      	ldrb	r3, [r3, #0]
    9ce4:	4413      	add	r3, r2
    9ce6:	b2da      	uxtb	r2, r3
    9ce8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cf0:	701a      	strb	r2, [r3, #0]
    9cf2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cfa:	781a      	ldrb	r2, [r3, #0]
    9cfc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d04:	781b      	ldrb	r3, [r3, #0]
    9d06:	4413      	add	r3, r2
    9d08:	b2da      	uxtb	r2, r3
    9d0a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d12:	701a      	strb	r2, [r3, #0]
    9d14:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d1c:	781b      	ldrb	r3, [r3, #0]
    9d1e:	3301      	adds	r3, #1
    9d20:	b2da      	uxtb	r2, r3
    9d22:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d2a:	701a      	strb	r2, [r3, #0]
    9d2c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d34:	781b      	ldrb	r3, [r3, #0]
    9d36:	2bff      	cmp	r3, #255	; 0xff
    9d38:	d110      	bne.n	9d5c <send_desired+0x558>
    9d3a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d42:	2200      	movs	r2, #0
    9d44:	701a      	strb	r2, [r3, #0]
    9d46:	e009      	b.n	9d5c <send_desired+0x558>
    9d48:	2000b1e5 	.word	0x2000b1e5
    9d4c:	2000b1e6 	.word	0x2000b1e6
    9d50:	2000b1e7 	.word	0x2000b1e7
    9d54:	2000b1e9 	.word	0x2000b1e9
    9d58:	2000b1ea 	.word	0x2000b1ea
    9d5c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d64:	781b      	ldrb	r3, [r3, #0]
    9d66:	461a      	mov	r2, r3
    9d68:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
    9d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d70:	78d9      	ldrb	r1, [r3, #3]
    9d72:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d7a:	5499      	strb	r1, [r3, r2]
    9d7c:	4bd3      	ldr	r3, [pc, #844]	; (a0cc <send_desired+0x8c8>)
    9d7e:	781a      	ldrb	r2, [r3, #0]
    9d80:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d88:	781b      	ldrb	r3, [r3, #0]
    9d8a:	4413      	add	r3, r2
    9d8c:	b2da      	uxtb	r2, r3
    9d8e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d96:	701a      	strb	r2, [r3, #0]
    9d98:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9da0:	781a      	ldrb	r2, [r3, #0]
    9da2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9daa:	781b      	ldrb	r3, [r3, #0]
    9dac:	4413      	add	r3, r2
    9dae:	b2da      	uxtb	r2, r3
    9db0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9db8:	701a      	strb	r2, [r3, #0]
    9dba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc2:	781b      	ldrb	r3, [r3, #0]
    9dc4:	3301      	adds	r3, #1
    9dc6:	b2da      	uxtb	r2, r3
    9dc8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dd0:	701a      	strb	r2, [r3, #0]
    9dd2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dda:	781b      	ldrb	r3, [r3, #0]
    9ddc:	2bff      	cmp	r3, #255	; 0xff
    9dde:	d105      	bne.n	9dec <send_desired+0x5e8>
    9de0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9de8:	2200      	movs	r2, #0
    9dea:	701a      	strb	r2, [r3, #0]
    9dec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df4:	781b      	ldrb	r3, [r3, #0]
    9df6:	461a      	mov	r2, r3
    9df8:	f24b 2330 	movw	r3, #45616	; 0xb230
    9dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e00:	7819      	ldrb	r1, [r3, #0]
    9e02:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e0a:	5499      	strb	r1, [r3, r2]
    9e0c:	f24b 2330 	movw	r3, #45616	; 0xb230
    9e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e14:	781a      	ldrb	r2, [r3, #0]
    9e16:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e1e:	781b      	ldrb	r3, [r3, #0]
    9e20:	4413      	add	r3, r2
    9e22:	b2da      	uxtb	r2, r3
    9e24:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e2c:	701a      	strb	r2, [r3, #0]
    9e2e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e36:	781a      	ldrb	r2, [r3, #0]
    9e38:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e40:	781b      	ldrb	r3, [r3, #0]
    9e42:	4413      	add	r3, r2
    9e44:	b2da      	uxtb	r2, r3
    9e46:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e4e:	701a      	strb	r2, [r3, #0]
    9e50:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e58:	781b      	ldrb	r3, [r3, #0]
    9e5a:	3301      	adds	r3, #1
    9e5c:	b2da      	uxtb	r2, r3
    9e5e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e66:	701a      	strb	r2, [r3, #0]
    9e68:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e70:	781b      	ldrb	r3, [r3, #0]
    9e72:	2bff      	cmp	r3, #255	; 0xff
    9e74:	d105      	bne.n	9e82 <send_desired+0x67e>
    9e76:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e7e:	2200      	movs	r2, #0
    9e80:	701a      	strb	r2, [r3, #0]
    9e82:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e8a:	781b      	ldrb	r3, [r3, #0]
    9e8c:	461a      	mov	r2, r3
    9e8e:	f24b 2330 	movw	r3, #45616	; 0xb230
    9e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e96:	7859      	ldrb	r1, [r3, #1]
    9e98:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ea0:	5499      	strb	r1, [r3, r2]
    9ea2:	4b8b      	ldr	r3, [pc, #556]	; (a0d0 <send_desired+0x8cc>)
    9ea4:	781a      	ldrb	r2, [r3, #0]
    9ea6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eae:	781b      	ldrb	r3, [r3, #0]
    9eb0:	4413      	add	r3, r2
    9eb2:	b2da      	uxtb	r2, r3
    9eb4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ebc:	701a      	strb	r2, [r3, #0]
    9ebe:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ec6:	781a      	ldrb	r2, [r3, #0]
    9ec8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ed0:	781b      	ldrb	r3, [r3, #0]
    9ed2:	4413      	add	r3, r2
    9ed4:	b2da      	uxtb	r2, r3
    9ed6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ede:	701a      	strb	r2, [r3, #0]
    9ee0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee8:	781b      	ldrb	r3, [r3, #0]
    9eea:	3301      	adds	r3, #1
    9eec:	b2da      	uxtb	r2, r3
    9eee:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ef6:	701a      	strb	r2, [r3, #0]
    9ef8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f00:	781b      	ldrb	r3, [r3, #0]
    9f02:	2bff      	cmp	r3, #255	; 0xff
    9f04:	d105      	bne.n	9f12 <send_desired+0x70e>
    9f06:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f0e:	2200      	movs	r2, #0
    9f10:	701a      	strb	r2, [r3, #0]
    9f12:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f1a:	781b      	ldrb	r3, [r3, #0]
    9f1c:	461a      	mov	r2, r3
    9f1e:	f24b 2330 	movw	r3, #45616	; 0xb230
    9f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f26:	7899      	ldrb	r1, [r3, #2]
    9f28:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f30:	5499      	strb	r1, [r3, r2]
    9f32:	4b68      	ldr	r3, [pc, #416]	; (a0d4 <send_desired+0x8d0>)
    9f34:	781a      	ldrb	r2, [r3, #0]
    9f36:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f3e:	781b      	ldrb	r3, [r3, #0]
    9f40:	4413      	add	r3, r2
    9f42:	b2da      	uxtb	r2, r3
    9f44:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f4c:	701a      	strb	r2, [r3, #0]
    9f4e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f56:	781a      	ldrb	r2, [r3, #0]
    9f58:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f60:	781b      	ldrb	r3, [r3, #0]
    9f62:	4413      	add	r3, r2
    9f64:	b2da      	uxtb	r2, r3
    9f66:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f6e:	701a      	strb	r2, [r3, #0]
    9f70:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f78:	781b      	ldrb	r3, [r3, #0]
    9f7a:	3301      	adds	r3, #1
    9f7c:	b2da      	uxtb	r2, r3
    9f7e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f86:	701a      	strb	r2, [r3, #0]
    9f88:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f90:	781b      	ldrb	r3, [r3, #0]
    9f92:	2bff      	cmp	r3, #255	; 0xff
    9f94:	d105      	bne.n	9fa2 <send_desired+0x79e>
    9f96:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f9e:	2200      	movs	r2, #0
    9fa0:	701a      	strb	r2, [r3, #0]
    9fa2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    9fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9faa:	781b      	ldrb	r3, [r3, #0]
    9fac:	461a      	mov	r2, r3
    9fae:	f24b 2330 	movw	r3, #45616	; 0xb230
    9fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fb6:	78d9      	ldrb	r1, [r3, #3]
    9fb8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    9fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fc0:	5499      	strb	r1, [r3, r2]
    9fc2:	4b45      	ldr	r3, [pc, #276]	; (a0d8 <send_desired+0x8d4>)
    9fc4:	781a      	ldrb	r2, [r3, #0]
    9fc6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	4413      	add	r3, r2
    9fd2:	b2da      	uxtb	r2, r3
    9fd4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fdc:	701a      	strb	r2, [r3, #0]
    9fde:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fe6:	781a      	ldrb	r2, [r3, #0]
    9fe8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    9fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ff0:	781b      	ldrb	r3, [r3, #0]
    9ff2:	4413      	add	r3, r2
    9ff4:	b2da      	uxtb	r2, r3
    9ff6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    9ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ffe:	701a      	strb	r2, [r3, #0]
    a000:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a008:	781b      	ldrb	r3, [r3, #0]
    a00a:	3301      	adds	r3, #1
    a00c:	b2da      	uxtb	r2, r3
    a00e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a016:	701a      	strb	r2, [r3, #0]
    a018:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a020:	781b      	ldrb	r3, [r3, #0]
    a022:	2bff      	cmp	r3, #255	; 0xff
    a024:	d105      	bne.n	a032 <send_desired+0x82e>
    a026:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a02e:	2200      	movs	r2, #0
    a030:	701a      	strb	r2, [r3, #0]
    a032:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a03a:	781b      	ldrb	r3, [r3, #0]
    a03c:	461a      	mov	r2, r3
    a03e:	f24b 2334 	movw	r3, #45620	; 0xb234
    a042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a046:	7819      	ldrb	r1, [r3, #0]
    a048:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a050:	5499      	strb	r1, [r3, r2]
    a052:	f24b 2334 	movw	r3, #45620	; 0xb234
    a056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a05a:	781a      	ldrb	r2, [r3, #0]
    a05c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a064:	781b      	ldrb	r3, [r3, #0]
    a066:	4413      	add	r3, r2
    a068:	b2da      	uxtb	r2, r3
    a06a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a072:	701a      	strb	r2, [r3, #0]
    a074:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a07c:	781a      	ldrb	r2, [r3, #0]
    a07e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a086:	781b      	ldrb	r3, [r3, #0]
    a088:	4413      	add	r3, r2
    a08a:	b2da      	uxtb	r2, r3
    a08c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a094:	701a      	strb	r2, [r3, #0]
    a096:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a09a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a09e:	781b      	ldrb	r3, [r3, #0]
    a0a0:	3301      	adds	r3, #1
    a0a2:	b2da      	uxtb	r2, r3
    a0a4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ac:	701a      	strb	r2, [r3, #0]
    a0ae:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0b6:	781b      	ldrb	r3, [r3, #0]
    a0b8:	2bff      	cmp	r3, #255	; 0xff
    a0ba:	d10f      	bne.n	a0dc <send_desired+0x8d8>
    a0bc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0c4:	2200      	movs	r2, #0
    a0c6:	701a      	strb	r2, [r3, #0]
    a0c8:	e008      	b.n	a0dc <send_desired+0x8d8>
    a0ca:	bf00      	nop
    a0cc:	2000b1eb 	.word	0x2000b1eb
    a0d0:	2000b231 	.word	0x2000b231
    a0d4:	2000b232 	.word	0x2000b232
    a0d8:	2000b233 	.word	0x2000b233
    a0dc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0e4:	781b      	ldrb	r3, [r3, #0]
    a0e6:	461a      	mov	r2, r3
    a0e8:	f24b 2334 	movw	r3, #45620	; 0xb234
    a0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0f0:	7859      	ldrb	r1, [r3, #1]
    a0f2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0fa:	5499      	strb	r1, [r3, r2]
    a0fc:	4bd1      	ldr	r3, [pc, #836]	; (a444 <send_desired+0xc40>)
    a0fe:	781a      	ldrb	r2, [r3, #0]
    a100:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a108:	781b      	ldrb	r3, [r3, #0]
    a10a:	4413      	add	r3, r2
    a10c:	b2da      	uxtb	r2, r3
    a10e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a116:	701a      	strb	r2, [r3, #0]
    a118:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a120:	781a      	ldrb	r2, [r3, #0]
    a122:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a12a:	781b      	ldrb	r3, [r3, #0]
    a12c:	4413      	add	r3, r2
    a12e:	b2da      	uxtb	r2, r3
    a130:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a138:	701a      	strb	r2, [r3, #0]
    a13a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a142:	781b      	ldrb	r3, [r3, #0]
    a144:	3301      	adds	r3, #1
    a146:	b2da      	uxtb	r2, r3
    a148:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a14c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a150:	701a      	strb	r2, [r3, #0]
    a152:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a15a:	781b      	ldrb	r3, [r3, #0]
    a15c:	2bff      	cmp	r3, #255	; 0xff
    a15e:	d105      	bne.n	a16c <send_desired+0x968>
    a160:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a168:	2200      	movs	r2, #0
    a16a:	701a      	strb	r2, [r3, #0]
    a16c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a174:	781b      	ldrb	r3, [r3, #0]
    a176:	461a      	mov	r2, r3
    a178:	f24b 2334 	movw	r3, #45620	; 0xb234
    a17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a180:	7899      	ldrb	r1, [r3, #2]
    a182:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a18a:	5499      	strb	r1, [r3, r2]
    a18c:	4bae      	ldr	r3, [pc, #696]	; (a448 <send_desired+0xc44>)
    a18e:	781a      	ldrb	r2, [r3, #0]
    a190:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a198:	781b      	ldrb	r3, [r3, #0]
    a19a:	4413      	add	r3, r2
    a19c:	b2da      	uxtb	r2, r3
    a19e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a6:	701a      	strb	r2, [r3, #0]
    a1a8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b0:	781a      	ldrb	r2, [r3, #0]
    a1b2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ba:	781b      	ldrb	r3, [r3, #0]
    a1bc:	4413      	add	r3, r2
    a1be:	b2da      	uxtb	r2, r3
    a1c0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1c8:	701a      	strb	r2, [r3, #0]
    a1ca:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1d2:	781b      	ldrb	r3, [r3, #0]
    a1d4:	3301      	adds	r3, #1
    a1d6:	b2da      	uxtb	r2, r3
    a1d8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e0:	701a      	strb	r2, [r3, #0]
    a1e2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ea:	781b      	ldrb	r3, [r3, #0]
    a1ec:	2bff      	cmp	r3, #255	; 0xff
    a1ee:	d105      	bne.n	a1fc <send_desired+0x9f8>
    a1f0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1f8:	2200      	movs	r2, #0
    a1fa:	701a      	strb	r2, [r3, #0]
    a1fc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a204:	781b      	ldrb	r3, [r3, #0]
    a206:	461a      	mov	r2, r3
    a208:	f24b 2334 	movw	r3, #45620	; 0xb234
    a20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a210:	78d9      	ldrb	r1, [r3, #3]
    a212:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a21a:	5499      	strb	r1, [r3, r2]
    a21c:	4b8b      	ldr	r3, [pc, #556]	; (a44c <send_desired+0xc48>)
    a21e:	781a      	ldrb	r2, [r3, #0]
    a220:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a228:	781b      	ldrb	r3, [r3, #0]
    a22a:	4413      	add	r3, r2
    a22c:	b2da      	uxtb	r2, r3
    a22e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a236:	701a      	strb	r2, [r3, #0]
    a238:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a240:	781a      	ldrb	r2, [r3, #0]
    a242:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a24a:	781b      	ldrb	r3, [r3, #0]
    a24c:	4413      	add	r3, r2
    a24e:	b2da      	uxtb	r2, r3
    a250:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a258:	701a      	strb	r2, [r3, #0]
    a25a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a25e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a262:	781b      	ldrb	r3, [r3, #0]
    a264:	3301      	adds	r3, #1
    a266:	b2da      	uxtb	r2, r3
    a268:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a270:	701a      	strb	r2, [r3, #0]
    a272:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a27a:	781b      	ldrb	r3, [r3, #0]
    a27c:	2bff      	cmp	r3, #255	; 0xff
    a27e:	d105      	bne.n	a28c <send_desired+0xa88>
    a280:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a288:	2200      	movs	r2, #0
    a28a:	701a      	strb	r2, [r3, #0]
    a28c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a294:	781b      	ldrb	r3, [r3, #0]
    a296:	461a      	mov	r2, r3
    a298:	f240 4324 	movw	r3, #1060	; 0x424
    a29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2a0:	7819      	ldrb	r1, [r3, #0]
    a2a2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2aa:	5499      	strb	r1, [r3, r2]
    a2ac:	f240 4324 	movw	r3, #1060	; 0x424
    a2b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2b4:	781a      	ldrb	r2, [r3, #0]
    a2b6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a2ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2be:	781b      	ldrb	r3, [r3, #0]
    a2c0:	4413      	add	r3, r2
    a2c2:	b2da      	uxtb	r2, r3
    a2c4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a2c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2cc:	701a      	strb	r2, [r3, #0]
    a2ce:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d6:	781a      	ldrb	r2, [r3, #0]
    a2d8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a2dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2e0:	781b      	ldrb	r3, [r3, #0]
    a2e2:	4413      	add	r3, r2
    a2e4:	b2da      	uxtb	r2, r3
    a2e6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ee:	701a      	strb	r2, [r3, #0]
    a2f0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2f8:	781b      	ldrb	r3, [r3, #0]
    a2fa:	3301      	adds	r3, #1
    a2fc:	b2da      	uxtb	r2, r3
    a2fe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a306:	701a      	strb	r2, [r3, #0]
    a308:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a310:	781b      	ldrb	r3, [r3, #0]
    a312:	2bff      	cmp	r3, #255	; 0xff
    a314:	d105      	bne.n	a322 <send_desired+0xb1e>
    a316:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a31e:	2200      	movs	r2, #0
    a320:	701a      	strb	r2, [r3, #0]
    a322:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a32a:	781b      	ldrb	r3, [r3, #0]
    a32c:	461a      	mov	r2, r3
    a32e:	f240 4324 	movw	r3, #1060	; 0x424
    a332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a336:	7859      	ldrb	r1, [r3, #1]
    a338:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a340:	5499      	strb	r1, [r3, r2]
    a342:	4b43      	ldr	r3, [pc, #268]	; (a450 <send_desired+0xc4c>)
    a344:	781a      	ldrb	r2, [r3, #0]
    a346:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a34e:	781b      	ldrb	r3, [r3, #0]
    a350:	4413      	add	r3, r2
    a352:	b2da      	uxtb	r2, r3
    a354:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a35c:	701a      	strb	r2, [r3, #0]
    a35e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a366:	781a      	ldrb	r2, [r3, #0]
    a368:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a36c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a370:	781b      	ldrb	r3, [r3, #0]
    a372:	4413      	add	r3, r2
    a374:	b2da      	uxtb	r2, r3
    a376:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a37e:	701a      	strb	r2, [r3, #0]
    a380:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a388:	781b      	ldrb	r3, [r3, #0]
    a38a:	3301      	adds	r3, #1
    a38c:	b2da      	uxtb	r2, r3
    a38e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a396:	701a      	strb	r2, [r3, #0]
    a398:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3a0:	781b      	ldrb	r3, [r3, #0]
    a3a2:	2bff      	cmp	r3, #255	; 0xff
    a3a4:	d105      	bne.n	a3b2 <send_desired+0xbae>
    a3a6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ae:	2200      	movs	r2, #0
    a3b0:	701a      	strb	r2, [r3, #0]
    a3b2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a3b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ba:	781b      	ldrb	r3, [r3, #0]
    a3bc:	461a      	mov	r2, r3
    a3be:	f240 4324 	movw	r3, #1060	; 0x424
    a3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3c6:	7899      	ldrb	r1, [r3, #2]
    a3c8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a3cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3d0:	5499      	strb	r1, [r3, r2]
    a3d2:	4b20      	ldr	r3, [pc, #128]	; (a454 <send_desired+0xc50>)
    a3d4:	781a      	ldrb	r2, [r3, #0]
    a3d6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3de:	781b      	ldrb	r3, [r3, #0]
    a3e0:	4413      	add	r3, r2
    a3e2:	b2da      	uxtb	r2, r3
    a3e4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ec:	701a      	strb	r2, [r3, #0]
    a3ee:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3f6:	781a      	ldrb	r2, [r3, #0]
    a3f8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a400:	781b      	ldrb	r3, [r3, #0]
    a402:	4413      	add	r3, r2
    a404:	b2da      	uxtb	r2, r3
    a406:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a40e:	701a      	strb	r2, [r3, #0]
    a410:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a418:	781b      	ldrb	r3, [r3, #0]
    a41a:	3301      	adds	r3, #1
    a41c:	b2da      	uxtb	r2, r3
    a41e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a426:	701a      	strb	r2, [r3, #0]
    a428:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a430:	781b      	ldrb	r3, [r3, #0]
    a432:	2bff      	cmp	r3, #255	; 0xff
    a434:	d110      	bne.n	a458 <send_desired+0xc54>
    a436:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a43e:	2200      	movs	r2, #0
    a440:	701a      	strb	r2, [r3, #0]
    a442:	e009      	b.n	a458 <send_desired+0xc54>
    a444:	2000b235 	.word	0x2000b235
    a448:	2000b236 	.word	0x2000b236
    a44c:	2000b237 	.word	0x2000b237
    a450:	20000425 	.word	0x20000425
    a454:	20000426 	.word	0x20000426
    a458:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a460:	781b      	ldrb	r3, [r3, #0]
    a462:	461a      	mov	r2, r3
    a464:	f240 4324 	movw	r3, #1060	; 0x424
    a468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a46c:	78d9      	ldrb	r1, [r3, #3]
    a46e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a476:	5499      	strb	r1, [r3, r2]
    a478:	4b79      	ldr	r3, [pc, #484]	; (a660 <send_desired+0xe5c>)
    a47a:	781a      	ldrb	r2, [r3, #0]
    a47c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a484:	781b      	ldrb	r3, [r3, #0]
    a486:	4413      	add	r3, r2
    a488:	b2da      	uxtb	r2, r3
    a48a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a492:	701a      	strb	r2, [r3, #0]
    a494:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a49c:	781a      	ldrb	r2, [r3, #0]
    a49e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a6:	781b      	ldrb	r3, [r3, #0]
    a4a8:	4413      	add	r3, r2
    a4aa:	b2da      	uxtb	r2, r3
    a4ac:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4b4:	701a      	strb	r2, [r3, #0]
    a4b6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4be:	781b      	ldrb	r3, [r3, #0]
    a4c0:	3301      	adds	r3, #1
    a4c2:	b2da      	uxtb	r2, r3
    a4c4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4cc:	701a      	strb	r2, [r3, #0]
    a4ce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4d6:	781b      	ldrb	r3, [r3, #0]
    a4d8:	2bff      	cmp	r3, #255	; 0xff
    a4da:	d105      	bne.n	a4e8 <send_desired+0xce4>
    a4dc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e4:	2200      	movs	r2, #0
    a4e6:	701a      	strb	r2, [r3, #0]
    a4e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4f0:	781b      	ldrb	r3, [r3, #0]
    a4f2:	461a      	mov	r2, r3
    a4f4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a4f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4fc:	7819      	ldrb	r1, [r3, #0]
    a4fe:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a506:	5499      	strb	r1, [r3, r2]
    a508:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a50c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a510:	781b      	ldrb	r3, [r3, #0]
    a512:	3301      	adds	r3, #1
    a514:	b2da      	uxtb	r2, r3
    a516:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a51e:	701a      	strb	r2, [r3, #0]
    a520:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a528:	781b      	ldrb	r3, [r3, #0]
    a52a:	2bff      	cmp	r3, #255	; 0xff
    a52c:	d105      	bne.n	a53a <send_desired+0xd36>
    a52e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a536:	2200      	movs	r2, #0
    a538:	701a      	strb	r2, [r3, #0]
    a53a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a542:	781b      	ldrb	r3, [r3, #0]
    a544:	461a      	mov	r2, r3
    a546:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a54e:	7819      	ldrb	r1, [r3, #0]
    a550:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a558:	5499      	strb	r1, [r3, r2]
    a55a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a562:	781b      	ldrb	r3, [r3, #0]
    a564:	3301      	adds	r3, #1
    a566:	b2da      	uxtb	r2, r3
    a568:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a56c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a570:	701a      	strb	r2, [r3, #0]
    a572:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a57a:	781b      	ldrb	r3, [r3, #0]
    a57c:	2bff      	cmp	r3, #255	; 0xff
    a57e:	d105      	bne.n	a58c <send_desired+0xd88>
    a580:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a588:	2200      	movs	r2, #0
    a58a:	701a      	strb	r2, [r3, #0]
    a58c:	f242 0339 	movw	r3, #8249	; 0x2039
    a590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a594:	781b      	ldrb	r3, [r3, #0]
    a596:	b2db      	uxtb	r3, r3
    a598:	f003 0310 	and.w	r3, r3, #16
    a59c:	2b00      	cmp	r3, #0
    a59e:	d15a      	bne.n	a656 <send_desired+0xe52>
    a5a0:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5a8:	781b      	ldrb	r3, [r3, #0]
    a5aa:	b2db      	uxtb	r3, r3
    a5ac:	461a      	mov	r2, r3
    a5ae:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b6:	5c9a      	ldrb	r2, [r3, r2]
    a5b8:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    a5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5c0:	701a      	strb	r2, [r3, #0]
    a5c2:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    a5c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5ca:	2200      	movs	r2, #0
    a5cc:	701a      	strb	r2, [r3, #0]
    a5ce:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5d6:	781b      	ldrb	r3, [r3, #0]
    a5d8:	b2db      	uxtb	r3, r3
    a5da:	3301      	adds	r3, #1
    a5dc:	b2da      	uxtb	r2, r3
    a5de:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5e6:	701a      	strb	r2, [r3, #0]
    a5e8:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5f0:	781b      	ldrb	r3, [r3, #0]
    a5f2:	b2db      	uxtb	r3, r3
    a5f4:	2bff      	cmp	r3, #255	; 0xff
    a5f6:	d105      	bne.n	a604 <send_desired+0xe00>
    a5f8:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a600:	2200      	movs	r2, #0
    a602:	701a      	strb	r2, [r3, #0]
    a604:	f242 0338 	movw	r3, #8248	; 0x2038
    a608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a60c:	f242 0238 	movw	r2, #8248	; 0x2038
    a610:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a614:	7812      	ldrb	r2, [r2, #0]
    a616:	b2d2      	uxtb	r2, r2
    a618:	f042 0201 	orr.w	r2, r2, #1
    a61c:	b2d2      	uxtb	r2, r2
    a61e:	701a      	strb	r2, [r3, #0]
    a620:	f242 0339 	movw	r3, #8249	; 0x2039
    a624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a628:	f242 0239 	movw	r2, #8249	; 0x2039
    a62c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a630:	7812      	ldrb	r2, [r2, #0]
    a632:	b2d2      	uxtb	r2, r2
    a634:	f042 0210 	orr.w	r2, r2, #16
    a638:	b2d2      	uxtb	r2, r2
    a63a:	701a      	strb	r2, [r3, #0]
    a63c:	e00b      	b.n	a656 <send_desired+0xe52>
    a63e:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    a642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a646:	781b      	ldrb	r3, [r3, #0]
    a648:	3301      	adds	r3, #1
    a64a:	b2da      	uxtb	r2, r3
    a64c:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    a650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a654:	701a      	strb	r2, [r3, #0]
}
    a656:	46bd      	mov	sp, r7
    a658:	f85d 7b04 	ldr.w	r7, [sp], #4
    a65c:	4770      	bx	lr
    a65e:	bf00      	nop
    a660:	20000427 	.word	0x20000427

0000a664 <send_bat>:
void send_bat(void){  //2000ms
    a664:	b480      	push	{r7}
    a666:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a668:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    a66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a670:	781a      	ldrb	r2, [r3, #0]
    a672:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a676:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a67a:	fba3 1302 	umull	r1, r3, r3, r2
    a67e:	0919      	lsrs	r1, r3, #4
    a680:	460b      	mov	r3, r1
    a682:	009b      	lsls	r3, r3, #2
    a684:	440b      	add	r3, r1
    a686:	009b      	lsls	r3, r3, #2
    a688:	1ad3      	subs	r3, r2, r3
    a68a:	b2db      	uxtb	r3, r3
    a68c:	2b08      	cmp	r3, #8
    a68e:	f040 839a 	bne.w	adc6 <send_bat+0x762>
    a692:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a69a:	781a      	ldrb	r2, [r3, #0]
    a69c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6a4:	781b      	ldrb	r3, [r3, #0]
    a6a6:	b2db      	uxtb	r3, r3
    a6a8:	429a      	cmp	r2, r3
    a6aa:	d313      	bcc.n	a6d4 <send_bat+0x70>
    a6ac:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b4:	781b      	ldrb	r3, [r3, #0]
    a6b6:	b2db      	uxtb	r3, r3
    a6b8:	461a      	mov	r2, r3
    a6ba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c2:	781b      	ldrb	r3, [r3, #0]
    a6c4:	1ad3      	subs	r3, r2, r3
    a6c6:	33ff      	adds	r3, #255	; 0xff
    a6c8:	2b0c      	cmp	r3, #12
    a6ca:	bfd4      	ite	le
    a6cc:	2300      	movle	r3, #0
    a6ce:	2301      	movgt	r3, #1
    a6d0:	b2db      	uxtb	r3, r3
    a6d2:	e011      	b.n	a6f8 <send_bat+0x94>
    a6d4:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6dc:	781b      	ldrb	r3, [r3, #0]
    a6de:	b2db      	uxtb	r3, r3
    a6e0:	461a      	mov	r2, r3
    a6e2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ea:	781b      	ldrb	r3, [r3, #0]
    a6ec:	1ad3      	subs	r3, r2, r3
    a6ee:	2b0c      	cmp	r3, #12
    a6f0:	bfd4      	ite	le
    a6f2:	2300      	movle	r3, #0
    a6f4:	2301      	movgt	r3, #1
    a6f6:	b2db      	uxtb	r3, r3
    a6f8:	2b00      	cmp	r3, #0
    a6fa:	f000 8358 	beq.w	adae <send_bat+0x74a>
    a6fe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a706:	781b      	ldrb	r3, [r3, #0]
    a708:	461a      	mov	r2, r3
    a70a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a70e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a712:	2105      	movs	r1, #5
    a714:	5499      	strb	r1, [r3, r2]
    a716:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a71e:	781b      	ldrb	r3, [r3, #0]
    a720:	3301      	adds	r3, #1
    a722:	b2da      	uxtb	r2, r3
    a724:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a72c:	701a      	strb	r2, [r3, #0]
    a72e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a736:	781b      	ldrb	r3, [r3, #0]
    a738:	2bff      	cmp	r3, #255	; 0xff
    a73a:	d105      	bne.n	a748 <send_bat+0xe4>
    a73c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a744:	2200      	movs	r2, #0
    a746:	701a      	strb	r2, [r3, #0]
    a748:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a750:	781b      	ldrb	r3, [r3, #0]
    a752:	461a      	mov	r2, r3
    a754:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a75c:	210c      	movs	r1, #12
    a75e:	5499      	strb	r1, [r3, r2]
    a760:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a768:	781b      	ldrb	r3, [r3, #0]
    a76a:	3301      	adds	r3, #1
    a76c:	b2da      	uxtb	r2, r3
    a76e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a776:	701a      	strb	r2, [r3, #0]
    a778:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a780:	781b      	ldrb	r3, [r3, #0]
    a782:	2bff      	cmp	r3, #255	; 0xff
    a784:	d105      	bne.n	a792 <send_bat+0x12e>
    a786:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a78a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a78e:	2200      	movs	r2, #0
    a790:	701a      	strb	r2, [r3, #0]
    a792:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a79a:	220c      	movs	r2, #12
    a79c:	701a      	strb	r2, [r3, #0]
    a79e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7a6:	220c      	movs	r2, #12
    a7a8:	701a      	strb	r2, [r3, #0]
    a7aa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7b2:	781b      	ldrb	r3, [r3, #0]
    a7b4:	461a      	mov	r2, r3
    a7b6:	f64a 63a2 	movw	r3, #44706	; 0xaea2
    a7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7be:	7819      	ldrb	r1, [r3, #0]
    a7c0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7c8:	5499      	strb	r1, [r3, r2]
    a7ca:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7d2:	781a      	ldrb	r2, [r3, #0]
    a7d4:	f64a 63a2 	movw	r3, #44706	; 0xaea2
    a7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7dc:	781b      	ldrb	r3, [r3, #0]
    a7de:	4413      	add	r3, r2
    a7e0:	b2da      	uxtb	r2, r3
    a7e2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ea:	701a      	strb	r2, [r3, #0]
    a7ec:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7f4:	781a      	ldrb	r2, [r3, #0]
    a7f6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a7fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7fe:	781b      	ldrb	r3, [r3, #0]
    a800:	4413      	add	r3, r2
    a802:	b2da      	uxtb	r2, r3
    a804:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a80c:	701a      	strb	r2, [r3, #0]
    a80e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a816:	781b      	ldrb	r3, [r3, #0]
    a818:	3301      	adds	r3, #1
    a81a:	b2da      	uxtb	r2, r3
    a81c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a824:	701a      	strb	r2, [r3, #0]
    a826:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a82e:	781b      	ldrb	r3, [r3, #0]
    a830:	2bff      	cmp	r3, #255	; 0xff
    a832:	d105      	bne.n	a840 <send_bat+0x1dc>
    a834:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a83c:	2200      	movs	r2, #0
    a83e:	701a      	strb	r2, [r3, #0]
    a840:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a848:	781b      	ldrb	r3, [r3, #0]
    a84a:	461a      	mov	r2, r3
    a84c:	f24b 439c 	movw	r3, #46236	; 0xb49c
    a850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a854:	7819      	ldrb	r1, [r3, #0]
    a856:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a85e:	5499      	strb	r1, [r3, r2]
    a860:	f24b 439c 	movw	r3, #46236	; 0xb49c
    a864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a868:	781a      	ldrb	r2, [r3, #0]
    a86a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a872:	781b      	ldrb	r3, [r3, #0]
    a874:	4413      	add	r3, r2
    a876:	b2da      	uxtb	r2, r3
    a878:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a880:	701a      	strb	r2, [r3, #0]
    a882:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a88a:	781a      	ldrb	r2, [r3, #0]
    a88c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a894:	781b      	ldrb	r3, [r3, #0]
    a896:	4413      	add	r3, r2
    a898:	b2da      	uxtb	r2, r3
    a89a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a89e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8a2:	701a      	strb	r2, [r3, #0]
    a8a4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a8a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ac:	781b      	ldrb	r3, [r3, #0]
    a8ae:	3301      	adds	r3, #1
    a8b0:	b2da      	uxtb	r2, r3
    a8b2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a8b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ba:	701a      	strb	r2, [r3, #0]
    a8bc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8c4:	781b      	ldrb	r3, [r3, #0]
    a8c6:	2bff      	cmp	r3, #255	; 0xff
    a8c8:	d105      	bne.n	a8d6 <send_bat+0x272>
    a8ca:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a8ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8d2:	2200      	movs	r2, #0
    a8d4:	701a      	strb	r2, [r3, #0]
    a8d6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8de:	781b      	ldrb	r3, [r3, #0]
    a8e0:	461a      	mov	r2, r3
    a8e2:	f24b 439c 	movw	r3, #46236	; 0xb49c
    a8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ea:	7859      	ldrb	r1, [r3, #1]
    a8ec:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8f4:	5499      	strb	r1, [r3, r2]
    a8f6:	4bd5      	ldr	r3, [pc, #852]	; (ac4c <send_bat+0x5e8>)
    a8f8:	781a      	ldrb	r2, [r3, #0]
    a8fa:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a902:	781b      	ldrb	r3, [r3, #0]
    a904:	4413      	add	r3, r2
    a906:	b2da      	uxtb	r2, r3
    a908:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a910:	701a      	strb	r2, [r3, #0]
    a912:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a91a:	781a      	ldrb	r2, [r3, #0]
    a91c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a924:	781b      	ldrb	r3, [r3, #0]
    a926:	4413      	add	r3, r2
    a928:	b2da      	uxtb	r2, r3
    a92a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a92e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a932:	701a      	strb	r2, [r3, #0]
    a934:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a93c:	781b      	ldrb	r3, [r3, #0]
    a93e:	3301      	adds	r3, #1
    a940:	b2da      	uxtb	r2, r3
    a942:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a94a:	701a      	strb	r2, [r3, #0]
    a94c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a954:	781b      	ldrb	r3, [r3, #0]
    a956:	2bff      	cmp	r3, #255	; 0xff
    a958:	d105      	bne.n	a966 <send_bat+0x302>
    a95a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a962:	2200      	movs	r2, #0
    a964:	701a      	strb	r2, [r3, #0]
    a966:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a96e:	781b      	ldrb	r3, [r3, #0]
    a970:	461a      	mov	r2, r3
    a972:	f64a 63a5 	movw	r3, #44709	; 0xaea5
    a976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a97a:	7819      	ldrb	r1, [r3, #0]
    a97c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    a980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a984:	5499      	strb	r1, [r3, r2]
    a986:	f64a 63a5 	movw	r3, #44709	; 0xaea5
    a98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a98e:	781a      	ldrb	r2, [r3, #0]
    a990:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a998:	781b      	ldrb	r3, [r3, #0]
    a99a:	4413      	add	r3, r2
    a99c:	b2da      	uxtb	r2, r3
    a99e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a6:	701a      	strb	r2, [r3, #0]
    a9a8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b0:	781a      	ldrb	r2, [r3, #0]
    a9b2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    a9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ba:	781b      	ldrb	r3, [r3, #0]
    a9bc:	4413      	add	r3, r2
    a9be:	b2da      	uxtb	r2, r3
    a9c0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    a9c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9c8:	701a      	strb	r2, [r3, #0]
    a9ca:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9d2:	781b      	ldrb	r3, [r3, #0]
    a9d4:	3301      	adds	r3, #1
    a9d6:	b2da      	uxtb	r2, r3
    a9d8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9e0:	701a      	strb	r2, [r3, #0]
    a9e2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ea:	781b      	ldrb	r3, [r3, #0]
    a9ec:	2bff      	cmp	r3, #255	; 0xff
    a9ee:	d105      	bne.n	a9fc <send_bat+0x398>
    a9f0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    a9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9f8:	2200      	movs	r2, #0
    a9fa:	701a      	strb	r2, [r3, #0]
    a9fc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aa00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa04:	781b      	ldrb	r3, [r3, #0]
    aa06:	461a      	mov	r2, r3
    aa08:	f24b 2326 	movw	r3, #45606	; 0xb226
    aa0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa10:	7819      	ldrb	r1, [r3, #0]
    aa12:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    aa16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa1a:	5499      	strb	r1, [r3, r2]
    aa1c:	f24b 2326 	movw	r3, #45606	; 0xb226
    aa20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa24:	781a      	ldrb	r2, [r3, #0]
    aa26:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    aa2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa2e:	781b      	ldrb	r3, [r3, #0]
    aa30:	4413      	add	r3, r2
    aa32:	b2da      	uxtb	r2, r3
    aa34:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    aa38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa3c:	701a      	strb	r2, [r3, #0]
    aa3e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    aa42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa46:	781a      	ldrb	r2, [r3, #0]
    aa48:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    aa4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa50:	781b      	ldrb	r3, [r3, #0]
    aa52:	4413      	add	r3, r2
    aa54:	b2da      	uxtb	r2, r3
    aa56:	f64a 73be 	movw	r3, #44990	; 0xafbe
    aa5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa5e:	701a      	strb	r2, [r3, #0]
    aa60:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aa64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa68:	781b      	ldrb	r3, [r3, #0]
    aa6a:	3301      	adds	r3, #1
    aa6c:	b2da      	uxtb	r2, r3
    aa6e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aa72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa76:	701a      	strb	r2, [r3, #0]
    aa78:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aa7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa80:	781b      	ldrb	r3, [r3, #0]
    aa82:	2bff      	cmp	r3, #255	; 0xff
    aa84:	d105      	bne.n	aa92 <send_bat+0x42e>
    aa86:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aa8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa8e:	2200      	movs	r2, #0
    aa90:	701a      	strb	r2, [r3, #0]
    aa92:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aa96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa9a:	781b      	ldrb	r3, [r3, #0]
    aa9c:	461a      	mov	r2, r3
    aa9e:	f24b 2326 	movw	r3, #45606	; 0xb226
    aaa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaa6:	7859      	ldrb	r1, [r3, #1]
    aaa8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    aaac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aab0:	5499      	strb	r1, [r3, r2]
    aab2:	4b67      	ldr	r3, [pc, #412]	; (ac50 <send_bat+0x5ec>)
    aab4:	781a      	ldrb	r2, [r3, #0]
    aab6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    aaba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aabe:	781b      	ldrb	r3, [r3, #0]
    aac0:	4413      	add	r3, r2
    aac2:	b2da      	uxtb	r2, r3
    aac4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    aac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aacc:	701a      	strb	r2, [r3, #0]
    aace:	f64a 73be 	movw	r3, #44990	; 0xafbe
    aad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aad6:	781a      	ldrb	r2, [r3, #0]
    aad8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    aadc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aae0:	781b      	ldrb	r3, [r3, #0]
    aae2:	4413      	add	r3, r2
    aae4:	b2da      	uxtb	r2, r3
    aae6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    aaea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaee:	701a      	strb	r2, [r3, #0]
    aaf0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aaf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaf8:	781b      	ldrb	r3, [r3, #0]
    aafa:	3301      	adds	r3, #1
    aafc:	b2da      	uxtb	r2, r3
    aafe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ab02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab06:	701a      	strb	r2, [r3, #0]
    ab08:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ab0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab10:	781b      	ldrb	r3, [r3, #0]
    ab12:	2bff      	cmp	r3, #255	; 0xff
    ab14:	d105      	bne.n	ab22 <send_bat+0x4be>
    ab16:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ab1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab1e:	2200      	movs	r2, #0
    ab20:	701a      	strb	r2, [r3, #0]
    ab22:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ab26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab2a:	781b      	ldrb	r3, [r3, #0]
    ab2c:	461a      	mov	r2, r3
    ab2e:	f24b 2324 	movw	r3, #45604	; 0xb224
    ab32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab36:	7819      	ldrb	r1, [r3, #0]
    ab38:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ab3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab40:	5499      	strb	r1, [r3, r2]
    ab42:	f24b 2324 	movw	r3, #45604	; 0xb224
    ab46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab4a:	781a      	ldrb	r2, [r3, #0]
    ab4c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ab50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab54:	781b      	ldrb	r3, [r3, #0]
    ab56:	4413      	add	r3, r2
    ab58:	b2da      	uxtb	r2, r3
    ab5a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ab5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab62:	701a      	strb	r2, [r3, #0]
    ab64:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ab68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab6c:	781a      	ldrb	r2, [r3, #0]
    ab6e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ab72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab76:	781b      	ldrb	r3, [r3, #0]
    ab78:	4413      	add	r3, r2
    ab7a:	b2da      	uxtb	r2, r3
    ab7c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ab80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab84:	701a      	strb	r2, [r3, #0]
    ab86:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ab8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab8e:	781b      	ldrb	r3, [r3, #0]
    ab90:	3301      	adds	r3, #1
    ab92:	b2da      	uxtb	r2, r3
    ab94:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ab98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab9c:	701a      	strb	r2, [r3, #0]
    ab9e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba6:	781b      	ldrb	r3, [r3, #0]
    aba8:	2bff      	cmp	r3, #255	; 0xff
    abaa:	d105      	bne.n	abb8 <send_bat+0x554>
    abac:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    abb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abb4:	2200      	movs	r2, #0
    abb6:	701a      	strb	r2, [r3, #0]
    abb8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    abbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc0:	781b      	ldrb	r3, [r3, #0]
    abc2:	461a      	mov	r2, r3
    abc4:	f24b 2324 	movw	r3, #45604	; 0xb224
    abc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abcc:	7859      	ldrb	r1, [r3, #1]
    abce:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    abd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abd6:	5499      	strb	r1, [r3, r2]
    abd8:	4b1e      	ldr	r3, [pc, #120]	; (ac54 <send_bat+0x5f0>)
    abda:	781a      	ldrb	r2, [r3, #0]
    abdc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    abe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe4:	781b      	ldrb	r3, [r3, #0]
    abe6:	4413      	add	r3, r2
    abe8:	b2da      	uxtb	r2, r3
    abea:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    abee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abf2:	701a      	strb	r2, [r3, #0]
    abf4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    abf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abfc:	781a      	ldrb	r2, [r3, #0]
    abfe:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ac02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac06:	781b      	ldrb	r3, [r3, #0]
    ac08:	4413      	add	r3, r2
    ac0a:	b2da      	uxtb	r2, r3
    ac0c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ac10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac14:	701a      	strb	r2, [r3, #0]
    ac16:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ac1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac1e:	781b      	ldrb	r3, [r3, #0]
    ac20:	3301      	adds	r3, #1
    ac22:	b2da      	uxtb	r2, r3
    ac24:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ac28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac2c:	701a      	strb	r2, [r3, #0]
    ac2e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ac32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac36:	781b      	ldrb	r3, [r3, #0]
    ac38:	2bff      	cmp	r3, #255	; 0xff
    ac3a:	d10d      	bne.n	ac58 <send_bat+0x5f4>
    ac3c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ac40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac44:	2200      	movs	r2, #0
    ac46:	701a      	strb	r2, [r3, #0]
    ac48:	e006      	b.n	ac58 <send_bat+0x5f4>
    ac4a:	bf00      	nop
    ac4c:	2000b49d 	.word	0x2000b49d
    ac50:	2000b227 	.word	0x2000b227
    ac54:	2000b225 	.word	0x2000b225
    ac58:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ac5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac60:	781b      	ldrb	r3, [r3, #0]
    ac62:	461a      	mov	r2, r3
    ac64:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ac68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac6c:	7819      	ldrb	r1, [r3, #0]
    ac6e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ac72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac76:	5499      	strb	r1, [r3, r2]
    ac78:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ac7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac80:	781b      	ldrb	r3, [r3, #0]
    ac82:	3301      	adds	r3, #1
    ac84:	b2da      	uxtb	r2, r3
    ac86:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ac8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac8e:	701a      	strb	r2, [r3, #0]
    ac90:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ac94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac98:	781b      	ldrb	r3, [r3, #0]
    ac9a:	2bff      	cmp	r3, #255	; 0xff
    ac9c:	d105      	bne.n	acaa <send_bat+0x646>
    ac9e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aca6:	2200      	movs	r2, #0
    aca8:	701a      	strb	r2, [r3, #0]
    acaa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    acae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acb2:	781b      	ldrb	r3, [r3, #0]
    acb4:	461a      	mov	r2, r3
    acb6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    acba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acbe:	7819      	ldrb	r1, [r3, #0]
    acc0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    acc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc8:	5499      	strb	r1, [r3, r2]
    acca:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    acce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acd2:	781b      	ldrb	r3, [r3, #0]
    acd4:	3301      	adds	r3, #1
    acd6:	b2da      	uxtb	r2, r3
    acd8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    acdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ace0:	701a      	strb	r2, [r3, #0]
    ace2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ace6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acea:	781b      	ldrb	r3, [r3, #0]
    acec:	2bff      	cmp	r3, #255	; 0xff
    acee:	d105      	bne.n	acfc <send_bat+0x698>
    acf0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    acf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acf8:	2200      	movs	r2, #0
    acfa:	701a      	strb	r2, [r3, #0]
    acfc:	f242 0339 	movw	r3, #8249	; 0x2039
    ad00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad04:	781b      	ldrb	r3, [r3, #0]
    ad06:	b2db      	uxtb	r3, r3
    ad08:	f003 0310 	and.w	r3, r3, #16
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d15a      	bne.n	adc6 <send_bat+0x762>
    ad10:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    ad14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad18:	781b      	ldrb	r3, [r3, #0]
    ad1a:	b2db      	uxtb	r3, r3
    ad1c:	461a      	mov	r2, r3
    ad1e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ad22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad26:	5c9a      	ldrb	r2, [r3, r2]
    ad28:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    ad2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad30:	701a      	strb	r2, [r3, #0]
    ad32:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    ad36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad3a:	2200      	movs	r2, #0
    ad3c:	701a      	strb	r2, [r3, #0]
    ad3e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    ad42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad46:	781b      	ldrb	r3, [r3, #0]
    ad48:	b2db      	uxtb	r3, r3
    ad4a:	3301      	adds	r3, #1
    ad4c:	b2da      	uxtb	r2, r3
    ad4e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    ad52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad56:	701a      	strb	r2, [r3, #0]
    ad58:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    ad5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad60:	781b      	ldrb	r3, [r3, #0]
    ad62:	b2db      	uxtb	r3, r3
    ad64:	2bff      	cmp	r3, #255	; 0xff
    ad66:	d105      	bne.n	ad74 <send_bat+0x710>
    ad68:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    ad6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad70:	2200      	movs	r2, #0
    ad72:	701a      	strb	r2, [r3, #0]
    ad74:	f242 0338 	movw	r3, #8248	; 0x2038
    ad78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad7c:	f242 0238 	movw	r2, #8248	; 0x2038
    ad80:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ad84:	7812      	ldrb	r2, [r2, #0]
    ad86:	b2d2      	uxtb	r2, r2
    ad88:	f042 0201 	orr.w	r2, r2, #1
    ad8c:	b2d2      	uxtb	r2, r2
    ad8e:	701a      	strb	r2, [r3, #0]
    ad90:	f242 0339 	movw	r3, #8249	; 0x2039
    ad94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad98:	f242 0239 	movw	r2, #8249	; 0x2039
    ad9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ada0:	7812      	ldrb	r2, [r2, #0]
    ada2:	b2d2      	uxtb	r2, r2
    ada4:	f042 0210 	orr.w	r2, r2, #16
    ada8:	b2d2      	uxtb	r2, r2
    adaa:	701a      	strb	r2, [r3, #0]
    adac:	e00b      	b.n	adc6 <send_bat+0x762>
    adae:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    adb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adb6:	781b      	ldrb	r3, [r3, #0]
    adb8:	3301      	adds	r3, #1
    adba:	b2da      	uxtb	r2, r3
    adbc:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    adc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adc4:	701a      	strb	r2, [r3, #0]
}
    adc6:	46bd      	mov	sp, r7
    adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    adcc:	4770      	bx	lr
    adce:	bf00      	nop

0000add0 <send_climb>:
void send_climb(void){  //2000ms
    add0:	b480      	push	{r7}
    add2:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    add4:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    add8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    addc:	781a      	ldrb	r2, [r3, #0]
    adde:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    ade2:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    ade6:	fba3 1302 	umull	r1, r3, r3, r2
    adea:	0919      	lsrs	r1, r3, #4
    adec:	460b      	mov	r3, r1
    adee:	009b      	lsls	r3, r3, #2
    adf0:	440b      	add	r3, r1
    adf2:	009b      	lsls	r3, r3, #2
    adf4:	1ad3      	subs	r3, r2, r3
    adf6:	b2db      	uxtb	r3, r3
    adf8:	2b12      	cmp	r3, #18
    adfa:	f040 8554 	bne.w	b8a6 <send_climb+0xad6>
    adfe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ae02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae06:	781a      	ldrb	r2, [r3, #0]
    ae08:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    ae0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae10:	781b      	ldrb	r3, [r3, #0]
    ae12:	b2db      	uxtb	r3, r3
    ae14:	429a      	cmp	r2, r3
    ae16:	d313      	bcc.n	ae40 <send_climb+0x70>
    ae18:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    ae1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae20:	781b      	ldrb	r3, [r3, #0]
    ae22:	b2db      	uxtb	r3, r3
    ae24:	461a      	mov	r2, r3
    ae26:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ae2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae2e:	781b      	ldrb	r3, [r3, #0]
    ae30:	1ad3      	subs	r3, r2, r3
    ae32:	33ff      	adds	r3, #255	; 0xff
    ae34:	2b12      	cmp	r3, #18
    ae36:	bfd4      	ite	le
    ae38:	2300      	movle	r3, #0
    ae3a:	2301      	movgt	r3, #1
    ae3c:	b2db      	uxtb	r3, r3
    ae3e:	e011      	b.n	ae64 <send_climb+0x94>
    ae40:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    ae44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae48:	781b      	ldrb	r3, [r3, #0]
    ae4a:	b2db      	uxtb	r3, r3
    ae4c:	461a      	mov	r2, r3
    ae4e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ae52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae56:	781b      	ldrb	r3, [r3, #0]
    ae58:	1ad3      	subs	r3, r2, r3
    ae5a:	2b12      	cmp	r3, #18
    ae5c:	bfd4      	ite	le
    ae5e:	2300      	movle	r3, #0
    ae60:	2301      	movgt	r3, #1
    ae62:	b2db      	uxtb	r3, r3
    ae64:	2b00      	cmp	r3, #0
    ae66:	f000 8512 	beq.w	b88e <send_climb+0xabe>
    ae6a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ae6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae72:	781b      	ldrb	r3, [r3, #0]
    ae74:	461a      	mov	r2, r3
    ae76:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ae7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae7e:	2105      	movs	r1, #5
    ae80:	5499      	strb	r1, [r3, r2]
    ae82:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ae86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae8a:	781b      	ldrb	r3, [r3, #0]
    ae8c:	3301      	adds	r3, #1
    ae8e:	b2da      	uxtb	r2, r3
    ae90:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ae94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae98:	701a      	strb	r2, [r3, #0]
    ae9a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ae9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aea2:	781b      	ldrb	r3, [r3, #0]
    aea4:	2bff      	cmp	r3, #255	; 0xff
    aea6:	d105      	bne.n	aeb4 <send_climb+0xe4>
    aea8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aeac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb0:	2200      	movs	r2, #0
    aeb2:	701a      	strb	r2, [r3, #0]
    aeb4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aeb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aebc:	781b      	ldrb	r3, [r3, #0]
    aebe:	461a      	mov	r2, r3
    aec0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    aec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec8:	210e      	movs	r1, #14
    aeca:	5499      	strb	r1, [r3, r2]
    aecc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aed4:	781b      	ldrb	r3, [r3, #0]
    aed6:	3301      	adds	r3, #1
    aed8:	b2da      	uxtb	r2, r3
    aeda:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee2:	701a      	strb	r2, [r3, #0]
    aee4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeec:	781b      	ldrb	r3, [r3, #0]
    aeee:	2bff      	cmp	r3, #255	; 0xff
    aef0:	d105      	bne.n	aefe <send_climb+0x12e>
    aef2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    aef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aefa:	2200      	movs	r2, #0
    aefc:	701a      	strb	r2, [r3, #0]
    aefe:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    af02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af06:	220e      	movs	r2, #14
    af08:	701a      	strb	r2, [r3, #0]
    af0a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    af0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af12:	220e      	movs	r2, #14
    af14:	701a      	strb	r2, [r3, #0]
    af16:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    af1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af1e:	781b      	ldrb	r3, [r3, #0]
    af20:	461a      	mov	r2, r3
    af22:	f24b 13ec 	movw	r3, #45548	; 0xb1ec
    af26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af2a:	7819      	ldrb	r1, [r3, #0]
    af2c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    af30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af34:	5499      	strb	r1, [r3, r2]
    af36:	f24b 13ec 	movw	r3, #45548	; 0xb1ec
    af3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af3e:	781a      	ldrb	r2, [r3, #0]
    af40:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    af44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af48:	781b      	ldrb	r3, [r3, #0]
    af4a:	4413      	add	r3, r2
    af4c:	b2da      	uxtb	r2, r3
    af4e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    af52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af56:	701a      	strb	r2, [r3, #0]
    af58:	f64a 73be 	movw	r3, #44990	; 0xafbe
    af5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af60:	781a      	ldrb	r2, [r3, #0]
    af62:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    af66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af6a:	781b      	ldrb	r3, [r3, #0]
    af6c:	4413      	add	r3, r2
    af6e:	b2da      	uxtb	r2, r3
    af70:	f64a 73be 	movw	r3, #44990	; 0xafbe
    af74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af78:	701a      	strb	r2, [r3, #0]
    af7a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    af7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af82:	781b      	ldrb	r3, [r3, #0]
    af84:	3301      	adds	r3, #1
    af86:	b2da      	uxtb	r2, r3
    af88:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    af8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af90:	701a      	strb	r2, [r3, #0]
    af92:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    af96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af9a:	781b      	ldrb	r3, [r3, #0]
    af9c:	2bff      	cmp	r3, #255	; 0xff
    af9e:	d105      	bne.n	afac <send_climb+0x1dc>
    afa0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    afa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afa8:	2200      	movs	r2, #0
    afaa:	701a      	strb	r2, [r3, #0]
    afac:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    afb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afb4:	781b      	ldrb	r3, [r3, #0]
    afb6:	461a      	mov	r2, r3
    afb8:	f24b 13ec 	movw	r3, #45548	; 0xb1ec
    afbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc0:	7859      	ldrb	r1, [r3, #1]
    afc2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    afc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afca:	5499      	strb	r1, [r3, r2]
    afcc:	4bd3      	ldr	r3, [pc, #844]	; (b31c <send_climb+0x54c>)
    afce:	781a      	ldrb	r2, [r3, #0]
    afd0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    afd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afd8:	781b      	ldrb	r3, [r3, #0]
    afda:	4413      	add	r3, r2
    afdc:	b2da      	uxtb	r2, r3
    afde:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    afe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afe6:	701a      	strb	r2, [r3, #0]
    afe8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    afec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aff0:	781a      	ldrb	r2, [r3, #0]
    aff2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    aff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    affa:	781b      	ldrb	r3, [r3, #0]
    affc:	4413      	add	r3, r2
    affe:	b2da      	uxtb	r2, r3
    b000:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b008:	701a      	strb	r2, [r3, #0]
    b00a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b012:	781b      	ldrb	r3, [r3, #0]
    b014:	3301      	adds	r3, #1
    b016:	b2da      	uxtb	r2, r3
    b018:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b020:	701a      	strb	r2, [r3, #0]
    b022:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b02a:	781b      	ldrb	r3, [r3, #0]
    b02c:	2bff      	cmp	r3, #255	; 0xff
    b02e:	d105      	bne.n	b03c <send_climb+0x26c>
    b030:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b038:	2200      	movs	r2, #0
    b03a:	701a      	strb	r2, [r3, #0]
    b03c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b044:	781b      	ldrb	r3, [r3, #0]
    b046:	461a      	mov	r2, r3
    b048:	f24b 2300 	movw	r3, #45568	; 0xb200
    b04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b050:	7819      	ldrb	r1, [r3, #0]
    b052:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b05a:	5499      	strb	r1, [r3, r2]
    b05c:	f24b 2300 	movw	r3, #45568	; 0xb200
    b060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b064:	781a      	ldrb	r2, [r3, #0]
    b066:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b06a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b06e:	781b      	ldrb	r3, [r3, #0]
    b070:	4413      	add	r3, r2
    b072:	b2da      	uxtb	r2, r3
    b074:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b07c:	701a      	strb	r2, [r3, #0]
    b07e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b086:	781a      	ldrb	r2, [r3, #0]
    b088:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b090:	781b      	ldrb	r3, [r3, #0]
    b092:	4413      	add	r3, r2
    b094:	b2da      	uxtb	r2, r3
    b096:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b09a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b09e:	701a      	strb	r2, [r3, #0]
    b0a0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b0a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0a8:	781b      	ldrb	r3, [r3, #0]
    b0aa:	3301      	adds	r3, #1
    b0ac:	b2da      	uxtb	r2, r3
    b0ae:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b6:	701a      	strb	r2, [r3, #0]
    b0b8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b0bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0c0:	781b      	ldrb	r3, [r3, #0]
    b0c2:	2bff      	cmp	r3, #255	; 0xff
    b0c4:	d105      	bne.n	b0d2 <send_climb+0x302>
    b0c6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b0ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ce:	2200      	movs	r2, #0
    b0d0:	701a      	strb	r2, [r3, #0]
    b0d2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b0d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0da:	781b      	ldrb	r3, [r3, #0]
    b0dc:	461a      	mov	r2, r3
    b0de:	f24b 2300 	movw	r3, #45568	; 0xb200
    b0e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0e6:	7859      	ldrb	r1, [r3, #1]
    b0e8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0f0:	5499      	strb	r1, [r3, r2]
    b0f2:	4b8b      	ldr	r3, [pc, #556]	; (b320 <send_climb+0x550>)
    b0f4:	781a      	ldrb	r2, [r3, #0]
    b0f6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b0fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0fe:	781b      	ldrb	r3, [r3, #0]
    b100:	4413      	add	r3, r2
    b102:	b2da      	uxtb	r2, r3
    b104:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b10c:	701a      	strb	r2, [r3, #0]
    b10e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b116:	781a      	ldrb	r2, [r3, #0]
    b118:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b120:	781b      	ldrb	r3, [r3, #0]
    b122:	4413      	add	r3, r2
    b124:	b2da      	uxtb	r2, r3
    b126:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b12e:	701a      	strb	r2, [r3, #0]
    b130:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b138:	781b      	ldrb	r3, [r3, #0]
    b13a:	3301      	adds	r3, #1
    b13c:	b2da      	uxtb	r2, r3
    b13e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b146:	701a      	strb	r2, [r3, #0]
    b148:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b14c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b150:	781b      	ldrb	r3, [r3, #0]
    b152:	2bff      	cmp	r3, #255	; 0xff
    b154:	d105      	bne.n	b162 <send_climb+0x392>
    b156:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b15a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b15e:	2200      	movs	r2, #0
    b160:	701a      	strb	r2, [r3, #0]
    b162:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b16a:	781b      	ldrb	r3, [r3, #0]
    b16c:	461a      	mov	r2, r3
    b16e:	f24b 2300 	movw	r3, #45568	; 0xb200
    b172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b176:	7899      	ldrb	r1, [r3, #2]
    b178:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b180:	5499      	strb	r1, [r3, r2]
    b182:	4b68      	ldr	r3, [pc, #416]	; (b324 <send_climb+0x554>)
    b184:	781a      	ldrb	r2, [r3, #0]
    b186:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b18e:	781b      	ldrb	r3, [r3, #0]
    b190:	4413      	add	r3, r2
    b192:	b2da      	uxtb	r2, r3
    b194:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b19c:	701a      	strb	r2, [r3, #0]
    b19e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1a6:	781a      	ldrb	r2, [r3, #0]
    b1a8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b0:	781b      	ldrb	r3, [r3, #0]
    b1b2:	4413      	add	r3, r2
    b1b4:	b2da      	uxtb	r2, r3
    b1b6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1be:	701a      	strb	r2, [r3, #0]
    b1c0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c8:	781b      	ldrb	r3, [r3, #0]
    b1ca:	3301      	adds	r3, #1
    b1cc:	b2da      	uxtb	r2, r3
    b1ce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1d6:	701a      	strb	r2, [r3, #0]
    b1d8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e0:	781b      	ldrb	r3, [r3, #0]
    b1e2:	2bff      	cmp	r3, #255	; 0xff
    b1e4:	d105      	bne.n	b1f2 <send_climb+0x422>
    b1e6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ee:	2200      	movs	r2, #0
    b1f0:	701a      	strb	r2, [r3, #0]
    b1f2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1fa:	781b      	ldrb	r3, [r3, #0]
    b1fc:	461a      	mov	r2, r3
    b1fe:	f24b 2300 	movw	r3, #45568	; 0xb200
    b202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b206:	78d9      	ldrb	r1, [r3, #3]
    b208:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b210:	5499      	strb	r1, [r3, r2]
    b212:	4b45      	ldr	r3, [pc, #276]	; (b328 <send_climb+0x558>)
    b214:	781a      	ldrb	r2, [r3, #0]
    b216:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b21e:	781b      	ldrb	r3, [r3, #0]
    b220:	4413      	add	r3, r2
    b222:	b2da      	uxtb	r2, r3
    b224:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b22c:	701a      	strb	r2, [r3, #0]
    b22e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b236:	781a      	ldrb	r2, [r3, #0]
    b238:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b240:	781b      	ldrb	r3, [r3, #0]
    b242:	4413      	add	r3, r2
    b244:	b2da      	uxtb	r2, r3
    b246:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b24e:	701a      	strb	r2, [r3, #0]
    b250:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b258:	781b      	ldrb	r3, [r3, #0]
    b25a:	3301      	adds	r3, #1
    b25c:	b2da      	uxtb	r2, r3
    b25e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b266:	701a      	strb	r2, [r3, #0]
    b268:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b270:	781b      	ldrb	r3, [r3, #0]
    b272:	2bff      	cmp	r3, #255	; 0xff
    b274:	d105      	bne.n	b282 <send_climb+0x4b2>
    b276:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b27e:	2200      	movs	r2, #0
    b280:	701a      	strb	r2, [r3, #0]
    b282:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b28a:	781b      	ldrb	r3, [r3, #0]
    b28c:	461a      	mov	r2, r3
    b28e:	f24b 2308 	movw	r3, #45576	; 0xb208
    b292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b296:	7819      	ldrb	r1, [r3, #0]
    b298:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a0:	5499      	strb	r1, [r3, r2]
    b2a2:	f24b 2308 	movw	r3, #45576	; 0xb208
    b2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2aa:	781a      	ldrb	r2, [r3, #0]
    b2ac:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b2b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2b4:	781b      	ldrb	r3, [r3, #0]
    b2b6:	4413      	add	r3, r2
    b2b8:	b2da      	uxtb	r2, r3
    b2ba:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c2:	701a      	strb	r2, [r3, #0]
    b2c4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b2c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2cc:	781a      	ldrb	r2, [r3, #0]
    b2ce:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d6:	781b      	ldrb	r3, [r3, #0]
    b2d8:	4413      	add	r3, r2
    b2da:	b2da      	uxtb	r2, r3
    b2dc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b2e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e4:	701a      	strb	r2, [r3, #0]
    b2e6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2ee:	781b      	ldrb	r3, [r3, #0]
    b2f0:	3301      	adds	r3, #1
    b2f2:	b2da      	uxtb	r2, r3
    b2f4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2fc:	701a      	strb	r2, [r3, #0]
    b2fe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b306:	781b      	ldrb	r3, [r3, #0]
    b308:	2bff      	cmp	r3, #255	; 0xff
    b30a:	d10f      	bne.n	b32c <send_climb+0x55c>
    b30c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b314:	2200      	movs	r2, #0
    b316:	701a      	strb	r2, [r3, #0]
    b318:	e008      	b.n	b32c <send_climb+0x55c>
    b31a:	bf00      	nop
    b31c:	2000b1ed 	.word	0x2000b1ed
    b320:	2000b201 	.word	0x2000b201
    b324:	2000b202 	.word	0x2000b202
    b328:	2000b203 	.word	0x2000b203
    b32c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b334:	781b      	ldrb	r3, [r3, #0]
    b336:	461a      	mov	r2, r3
    b338:	f24b 2308 	movw	r3, #45576	; 0xb208
    b33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b340:	7859      	ldrb	r1, [r3, #1]
    b342:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b34a:	5499      	strb	r1, [r3, r2]
    b34c:	4bd1      	ldr	r3, [pc, #836]	; (b694 <send_climb+0x8c4>)
    b34e:	781a      	ldrb	r2, [r3, #0]
    b350:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b358:	781b      	ldrb	r3, [r3, #0]
    b35a:	4413      	add	r3, r2
    b35c:	b2da      	uxtb	r2, r3
    b35e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b366:	701a      	strb	r2, [r3, #0]
    b368:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b36c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b370:	781a      	ldrb	r2, [r3, #0]
    b372:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b37a:	781b      	ldrb	r3, [r3, #0]
    b37c:	4413      	add	r3, r2
    b37e:	b2da      	uxtb	r2, r3
    b380:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b388:	701a      	strb	r2, [r3, #0]
    b38a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b392:	781b      	ldrb	r3, [r3, #0]
    b394:	3301      	adds	r3, #1
    b396:	b2da      	uxtb	r2, r3
    b398:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3a0:	701a      	strb	r2, [r3, #0]
    b3a2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b3a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3aa:	781b      	ldrb	r3, [r3, #0]
    b3ac:	2bff      	cmp	r3, #255	; 0xff
    b3ae:	d105      	bne.n	b3bc <send_climb+0x5ec>
    b3b0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b3b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3b8:	2200      	movs	r2, #0
    b3ba:	701a      	strb	r2, [r3, #0]
    b3bc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b3c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3c4:	781b      	ldrb	r3, [r3, #0]
    b3c6:	461a      	mov	r2, r3
    b3c8:	f24b 2308 	movw	r3, #45576	; 0xb208
    b3cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d0:	7899      	ldrb	r1, [r3, #2]
    b3d2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b3d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3da:	5499      	strb	r1, [r3, r2]
    b3dc:	4bae      	ldr	r3, [pc, #696]	; (b698 <send_climb+0x8c8>)
    b3de:	781a      	ldrb	r2, [r3, #0]
    b3e0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e8:	781b      	ldrb	r3, [r3, #0]
    b3ea:	4413      	add	r3, r2
    b3ec:	b2da      	uxtb	r2, r3
    b3ee:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3f6:	701a      	strb	r2, [r3, #0]
    b3f8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b400:	781a      	ldrb	r2, [r3, #0]
    b402:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b40a:	781b      	ldrb	r3, [r3, #0]
    b40c:	4413      	add	r3, r2
    b40e:	b2da      	uxtb	r2, r3
    b410:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b418:	701a      	strb	r2, [r3, #0]
    b41a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b41e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b422:	781b      	ldrb	r3, [r3, #0]
    b424:	3301      	adds	r3, #1
    b426:	b2da      	uxtb	r2, r3
    b428:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b430:	701a      	strb	r2, [r3, #0]
    b432:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b43a:	781b      	ldrb	r3, [r3, #0]
    b43c:	2bff      	cmp	r3, #255	; 0xff
    b43e:	d105      	bne.n	b44c <send_climb+0x67c>
    b440:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b448:	2200      	movs	r2, #0
    b44a:	701a      	strb	r2, [r3, #0]
    b44c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b454:	781b      	ldrb	r3, [r3, #0]
    b456:	461a      	mov	r2, r3
    b458:	f24b 2308 	movw	r3, #45576	; 0xb208
    b45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b460:	78d9      	ldrb	r1, [r3, #3]
    b462:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b46a:	5499      	strb	r1, [r3, r2]
    b46c:	4b8b      	ldr	r3, [pc, #556]	; (b69c <send_climb+0x8cc>)
    b46e:	781a      	ldrb	r2, [r3, #0]
    b470:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b478:	781b      	ldrb	r3, [r3, #0]
    b47a:	4413      	add	r3, r2
    b47c:	b2da      	uxtb	r2, r3
    b47e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b486:	701a      	strb	r2, [r3, #0]
    b488:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b490:	781a      	ldrb	r2, [r3, #0]
    b492:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b49a:	781b      	ldrb	r3, [r3, #0]
    b49c:	4413      	add	r3, r2
    b49e:	b2da      	uxtb	r2, r3
    b4a0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4a8:	701a      	strb	r2, [r3, #0]
    b4aa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4b2:	781b      	ldrb	r3, [r3, #0]
    b4b4:	3301      	adds	r3, #1
    b4b6:	b2da      	uxtb	r2, r3
    b4b8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4c0:	701a      	strb	r2, [r3, #0]
    b4c2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b4c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ca:	781b      	ldrb	r3, [r3, #0]
    b4cc:	2bff      	cmp	r3, #255	; 0xff
    b4ce:	d105      	bne.n	b4dc <send_climb+0x70c>
    b4d0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b4d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4d8:	2200      	movs	r2, #0
    b4da:	701a      	strb	r2, [r3, #0]
    b4dc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4e4:	781b      	ldrb	r3, [r3, #0]
    b4e6:	461a      	mov	r2, r3
    b4e8:	f248 6380 	movw	r3, #34432	; 0x8680
    b4ec:	f2c0 0301 	movt	r3, #1
    b4f0:	7819      	ldrb	r1, [r3, #0]
    b4f2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b4f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4fa:	5499      	strb	r1, [r3, r2]
    b4fc:	f248 6380 	movw	r3, #34432	; 0x8680
    b500:	f2c0 0301 	movt	r3, #1
    b504:	781a      	ldrb	r2, [r3, #0]
    b506:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b50e:	781b      	ldrb	r3, [r3, #0]
    b510:	4413      	add	r3, r2
    b512:	b2da      	uxtb	r2, r3
    b514:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b51c:	701a      	strb	r2, [r3, #0]
    b51e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b526:	781a      	ldrb	r2, [r3, #0]
    b528:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b530:	781b      	ldrb	r3, [r3, #0]
    b532:	4413      	add	r3, r2
    b534:	b2da      	uxtb	r2, r3
    b536:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b53e:	701a      	strb	r2, [r3, #0]
    b540:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b548:	781b      	ldrb	r3, [r3, #0]
    b54a:	3301      	adds	r3, #1
    b54c:	b2da      	uxtb	r2, r3
    b54e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b556:	701a      	strb	r2, [r3, #0]
    b558:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b55c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b560:	781b      	ldrb	r3, [r3, #0]
    b562:	2bff      	cmp	r3, #255	; 0xff
    b564:	d105      	bne.n	b572 <send_climb+0x7a2>
    b566:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b56e:	2200      	movs	r2, #0
    b570:	701a      	strb	r2, [r3, #0]
    b572:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b57a:	781b      	ldrb	r3, [r3, #0]
    b57c:	461a      	mov	r2, r3
    b57e:	f248 6380 	movw	r3, #34432	; 0x8680
    b582:	f2c0 0301 	movt	r3, #1
    b586:	7859      	ldrb	r1, [r3, #1]
    b588:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b590:	5499      	strb	r1, [r3, r2]
    b592:	4b43      	ldr	r3, [pc, #268]	; (b6a0 <send_climb+0x8d0>)
    b594:	781a      	ldrb	r2, [r3, #0]
    b596:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b59e:	781b      	ldrb	r3, [r3, #0]
    b5a0:	4413      	add	r3, r2
    b5a2:	b2da      	uxtb	r2, r3
    b5a4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ac:	701a      	strb	r2, [r3, #0]
    b5ae:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5b6:	781a      	ldrb	r2, [r3, #0]
    b5b8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5c0:	781b      	ldrb	r3, [r3, #0]
    b5c2:	4413      	add	r3, r2
    b5c4:	b2da      	uxtb	r2, r3
    b5c6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ce:	701a      	strb	r2, [r3, #0]
    b5d0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5d8:	781b      	ldrb	r3, [r3, #0]
    b5da:	3301      	adds	r3, #1
    b5dc:	b2da      	uxtb	r2, r3
    b5de:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5e6:	701a      	strb	r2, [r3, #0]
    b5e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5f0:	781b      	ldrb	r3, [r3, #0]
    b5f2:	2bff      	cmp	r3, #255	; 0xff
    b5f4:	d105      	bne.n	b602 <send_climb+0x832>
    b5f6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5fe:	2200      	movs	r2, #0
    b600:	701a      	strb	r2, [r3, #0]
    b602:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b60a:	781b      	ldrb	r3, [r3, #0]
    b60c:	461a      	mov	r2, r3
    b60e:	f248 6380 	movw	r3, #34432	; 0x8680
    b612:	f2c0 0301 	movt	r3, #1
    b616:	7899      	ldrb	r1, [r3, #2]
    b618:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b620:	5499      	strb	r1, [r3, r2]
    b622:	4b20      	ldr	r3, [pc, #128]	; (b6a4 <send_climb+0x8d4>)
    b624:	781a      	ldrb	r2, [r3, #0]
    b626:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b62e:	781b      	ldrb	r3, [r3, #0]
    b630:	4413      	add	r3, r2
    b632:	b2da      	uxtb	r2, r3
    b634:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b63c:	701a      	strb	r2, [r3, #0]
    b63e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b646:	781a      	ldrb	r2, [r3, #0]
    b648:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b650:	781b      	ldrb	r3, [r3, #0]
    b652:	4413      	add	r3, r2
    b654:	b2da      	uxtb	r2, r3
    b656:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b65e:	701a      	strb	r2, [r3, #0]
    b660:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b668:	781b      	ldrb	r3, [r3, #0]
    b66a:	3301      	adds	r3, #1
    b66c:	b2da      	uxtb	r2, r3
    b66e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b676:	701a      	strb	r2, [r3, #0]
    b678:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b680:	781b      	ldrb	r3, [r3, #0]
    b682:	2bff      	cmp	r3, #255	; 0xff
    b684:	d110      	bne.n	b6a8 <send_climb+0x8d8>
    b686:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b68e:	2200      	movs	r2, #0
    b690:	701a      	strb	r2, [r3, #0]
    b692:	e009      	b.n	b6a8 <send_climb+0x8d8>
    b694:	2000b209 	.word	0x2000b209
    b698:	2000b20a 	.word	0x2000b20a
    b69c:	2000b20b 	.word	0x2000b20b
    b6a0:	00018681 	.word	0x00018681
    b6a4:	00018682 	.word	0x00018682
    b6a8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b0:	781b      	ldrb	r3, [r3, #0]
    b6b2:	461a      	mov	r2, r3
    b6b4:	f248 6380 	movw	r3, #34432	; 0x8680
    b6b8:	f2c0 0301 	movt	r3, #1
    b6bc:	78d9      	ldrb	r1, [r3, #3]
    b6be:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c6:	5499      	strb	r1, [r3, r2]
    b6c8:	4b79      	ldr	r3, [pc, #484]	; (b8b0 <send_climb+0xae0>)
    b6ca:	781a      	ldrb	r2, [r3, #0]
    b6cc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6d4:	781b      	ldrb	r3, [r3, #0]
    b6d6:	4413      	add	r3, r2
    b6d8:	b2da      	uxtb	r2, r3
    b6da:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e2:	701a      	strb	r2, [r3, #0]
    b6e4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b6e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ec:	781a      	ldrb	r2, [r3, #0]
    b6ee:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b6f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f6:	781b      	ldrb	r3, [r3, #0]
    b6f8:	4413      	add	r3, r2
    b6fa:	b2da      	uxtb	r2, r3
    b6fc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b704:	701a      	strb	r2, [r3, #0]
    b706:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b70a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b70e:	781b      	ldrb	r3, [r3, #0]
    b710:	3301      	adds	r3, #1
    b712:	b2da      	uxtb	r2, r3
    b714:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b71c:	701a      	strb	r2, [r3, #0]
    b71e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b726:	781b      	ldrb	r3, [r3, #0]
    b728:	2bff      	cmp	r3, #255	; 0xff
    b72a:	d105      	bne.n	b738 <send_climb+0x968>
    b72c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b734:	2200      	movs	r2, #0
    b736:	701a      	strb	r2, [r3, #0]
    b738:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b740:	781b      	ldrb	r3, [r3, #0]
    b742:	461a      	mov	r2, r3
    b744:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b74c:	7819      	ldrb	r1, [r3, #0]
    b74e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b756:	5499      	strb	r1, [r3, r2]
    b758:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b75c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b760:	781b      	ldrb	r3, [r3, #0]
    b762:	3301      	adds	r3, #1
    b764:	b2da      	uxtb	r2, r3
    b766:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b76e:	701a      	strb	r2, [r3, #0]
    b770:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b778:	781b      	ldrb	r3, [r3, #0]
    b77a:	2bff      	cmp	r3, #255	; 0xff
    b77c:	d105      	bne.n	b78a <send_climb+0x9ba>
    b77e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b786:	2200      	movs	r2, #0
    b788:	701a      	strb	r2, [r3, #0]
    b78a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b792:	781b      	ldrb	r3, [r3, #0]
    b794:	461a      	mov	r2, r3
    b796:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b79e:	7819      	ldrb	r1, [r3, #0]
    b7a0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a8:	5499      	strb	r1, [r3, r2]
    b7aa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7b2:	781b      	ldrb	r3, [r3, #0]
    b7b4:	3301      	adds	r3, #1
    b7b6:	b2da      	uxtb	r2, r3
    b7b8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7c0:	701a      	strb	r2, [r3, #0]
    b7c2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b7c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7ca:	781b      	ldrb	r3, [r3, #0]
    b7cc:	2bff      	cmp	r3, #255	; 0xff
    b7ce:	d105      	bne.n	b7dc <send_climb+0xa0c>
    b7d0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7d8:	2200      	movs	r2, #0
    b7da:	701a      	strb	r2, [r3, #0]
    b7dc:	f242 0339 	movw	r3, #8249	; 0x2039
    b7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7e4:	781b      	ldrb	r3, [r3, #0]
    b7e6:	b2db      	uxtb	r3, r3
    b7e8:	f003 0310 	and.w	r3, r3, #16
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	d15a      	bne.n	b8a6 <send_climb+0xad6>
    b7f0:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    b7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7f8:	781b      	ldrb	r3, [r3, #0]
    b7fa:	b2db      	uxtb	r3, r3
    b7fc:	461a      	mov	r2, r3
    b7fe:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b806:	5c9a      	ldrb	r2, [r3, r2]
    b808:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    b80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b810:	701a      	strb	r2, [r3, #0]
    b812:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    b816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b81a:	2200      	movs	r2, #0
    b81c:	701a      	strb	r2, [r3, #0]
    b81e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    b822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b826:	781b      	ldrb	r3, [r3, #0]
    b828:	b2db      	uxtb	r3, r3
    b82a:	3301      	adds	r3, #1
    b82c:	b2da      	uxtb	r2, r3
    b82e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    b832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b836:	701a      	strb	r2, [r3, #0]
    b838:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    b83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b840:	781b      	ldrb	r3, [r3, #0]
    b842:	b2db      	uxtb	r3, r3
    b844:	2bff      	cmp	r3, #255	; 0xff
    b846:	d105      	bne.n	b854 <send_climb+0xa84>
    b848:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    b84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b850:	2200      	movs	r2, #0
    b852:	701a      	strb	r2, [r3, #0]
    b854:	f242 0338 	movw	r3, #8248	; 0x2038
    b858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b85c:	f242 0238 	movw	r2, #8248	; 0x2038
    b860:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b864:	7812      	ldrb	r2, [r2, #0]
    b866:	b2d2      	uxtb	r2, r2
    b868:	f042 0201 	orr.w	r2, r2, #1
    b86c:	b2d2      	uxtb	r2, r2
    b86e:	701a      	strb	r2, [r3, #0]
    b870:	f242 0339 	movw	r3, #8249	; 0x2039
    b874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b878:	f242 0239 	movw	r2, #8249	; 0x2039
    b87c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b880:	7812      	ldrb	r2, [r2, #0]
    b882:	b2d2      	uxtb	r2, r2
    b884:	f042 0210 	orr.w	r2, r2, #16
    b888:	b2d2      	uxtb	r2, r2
    b88a:	701a      	strb	r2, [r3, #0]
    b88c:	e00b      	b.n	b8a6 <send_climb+0xad6>
    b88e:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    b892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b896:	781b      	ldrb	r3, [r3, #0]
    b898:	3301      	adds	r3, #1
    b89a:	b2da      	uxtb	r2, r3
    b89c:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    b8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8a4:	701a      	strb	r2, [r3, #0]
}
    b8a6:	46bd      	mov	sp, r7
    b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8ac:	4770      	bx	lr
    b8ae:	bf00      	nop
    b8b0:	00018683 	.word	0x00018683

0000b8b4 <send_mode>:
void send_mode(void){  //5000ms
    b8b4:	b480      	push	{r7}
    b8b6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    b8b8:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    b8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8c0:	781a      	ldrb	r2, [r3, #0]
    b8c2:	f248 531f 	movw	r3, #34079	; 0x851f
    b8c6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    b8ca:	fba3 1302 	umull	r1, r3, r3, r2
    b8ce:	091b      	lsrs	r3, r3, #4
    b8d0:	2132      	movs	r1, #50	; 0x32
    b8d2:	fb01 f303 	mul.w	r3, r1, r3
    b8d6:	1ad3      	subs	r3, r2, r3
    b8d8:	b2db      	uxtb	r3, r3
    b8da:	2b09      	cmp	r3, #9
    b8dc:	f040 82ba 	bne.w	be54 <send_mode+0x5a0>
    b8e0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8e8:	781a      	ldrb	r2, [r3, #0]
    b8ea:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    b8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8f2:	781b      	ldrb	r3, [r3, #0]
    b8f4:	b2db      	uxtb	r3, r3
    b8f6:	429a      	cmp	r2, r3
    b8f8:	d313      	bcc.n	b922 <send_mode+0x6e>
    b8fa:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    b8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b902:	781b      	ldrb	r3, [r3, #0]
    b904:	b2db      	uxtb	r3, r3
    b906:	461a      	mov	r2, r3
    b908:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b910:	781b      	ldrb	r3, [r3, #0]
    b912:	1ad3      	subs	r3, r2, r3
    b914:	33ff      	adds	r3, #255	; 0xff
    b916:	2b09      	cmp	r3, #9
    b918:	bfd4      	ite	le
    b91a:	2300      	movle	r3, #0
    b91c:	2301      	movgt	r3, #1
    b91e:	b2db      	uxtb	r3, r3
    b920:	e011      	b.n	b946 <send_mode+0x92>
    b922:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    b926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b92a:	781b      	ldrb	r3, [r3, #0]
    b92c:	b2db      	uxtb	r3, r3
    b92e:	461a      	mov	r2, r3
    b930:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b938:	781b      	ldrb	r3, [r3, #0]
    b93a:	1ad3      	subs	r3, r2, r3
    b93c:	2b09      	cmp	r3, #9
    b93e:	bfd4      	ite	le
    b940:	2300      	movle	r3, #0
    b942:	2301      	movgt	r3, #1
    b944:	b2db      	uxtb	r3, r3
    b946:	2b00      	cmp	r3, #0
    b948:	f000 8278 	beq.w	be3c <send_mode+0x588>
    b94c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b954:	781b      	ldrb	r3, [r3, #0]
    b956:	461a      	mov	r2, r3
    b958:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b960:	2105      	movs	r1, #5
    b962:	5499      	strb	r1, [r3, r2]
    b964:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b96c:	781b      	ldrb	r3, [r3, #0]
    b96e:	3301      	adds	r3, #1
    b970:	b2da      	uxtb	r2, r3
    b972:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b97a:	701a      	strb	r2, [r3, #0]
    b97c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b984:	781b      	ldrb	r3, [r3, #0]
    b986:	2bff      	cmp	r3, #255	; 0xff
    b988:	d105      	bne.n	b996 <send_mode+0xe2>
    b98a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b992:	2200      	movs	r2, #0
    b994:	701a      	strb	r2, [r3, #0]
    b996:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b99e:	781b      	ldrb	r3, [r3, #0]
    b9a0:	461a      	mov	r2, r3
    b9a2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    b9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9aa:	210b      	movs	r1, #11
    b9ac:	5499      	strb	r1, [r3, r2]
    b9ae:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9b6:	781b      	ldrb	r3, [r3, #0]
    b9b8:	3301      	adds	r3, #1
    b9ba:	b2da      	uxtb	r2, r3
    b9bc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9c4:	701a      	strb	r2, [r3, #0]
    b9c6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ce:	781b      	ldrb	r3, [r3, #0]
    b9d0:	2bff      	cmp	r3, #255	; 0xff
    b9d2:	d105      	bne.n	b9e0 <send_mode+0x12c>
    b9d4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9dc:	2200      	movs	r2, #0
    b9de:	701a      	strb	r2, [r3, #0]
    b9e0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    b9e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9e8:	220b      	movs	r2, #11
    b9ea:	701a      	strb	r2, [r3, #0]
    b9ec:	f64a 73be 	movw	r3, #44990	; 0xafbe
    b9f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9f4:	220b      	movs	r2, #11
    b9f6:	701a      	strb	r2, [r3, #0]
    b9f8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    b9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba00:	781b      	ldrb	r3, [r3, #0]
    ba02:	461a      	mov	r2, r3
    ba04:	f64a 639c 	movw	r3, #44700	; 0xae9c
    ba08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba0c:	7819      	ldrb	r1, [r3, #0]
    ba0e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ba12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba16:	5499      	strb	r1, [r3, r2]
    ba18:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ba1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba20:	781a      	ldrb	r2, [r3, #0]
    ba22:	f64a 639c 	movw	r3, #44700	; 0xae9c
    ba26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba2a:	781b      	ldrb	r3, [r3, #0]
    ba2c:	4413      	add	r3, r2
    ba2e:	b2da      	uxtb	r2, r3
    ba30:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ba34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba38:	701a      	strb	r2, [r3, #0]
    ba3a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ba3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba42:	781a      	ldrb	r2, [r3, #0]
    ba44:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ba48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba4c:	781b      	ldrb	r3, [r3, #0]
    ba4e:	4413      	add	r3, r2
    ba50:	b2da      	uxtb	r2, r3
    ba52:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ba56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba5a:	701a      	strb	r2, [r3, #0]
    ba5c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ba60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba64:	781b      	ldrb	r3, [r3, #0]
    ba66:	3301      	adds	r3, #1
    ba68:	b2da      	uxtb	r2, r3
    ba6a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ba6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba72:	701a      	strb	r2, [r3, #0]
    ba74:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ba78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba7c:	781b      	ldrb	r3, [r3, #0]
    ba7e:	2bff      	cmp	r3, #255	; 0xff
    ba80:	d105      	bne.n	ba8e <send_mode+0x1da>
    ba82:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ba86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba8a:	2200      	movs	r2, #0
    ba8c:	701a      	strb	r2, [r3, #0]
    ba8e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ba92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba96:	781b      	ldrb	r3, [r3, #0]
    ba98:	461a      	mov	r2, r3
    ba9a:	f64a 639d 	movw	r3, #44701	; 0xae9d
    ba9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baa2:	7819      	ldrb	r1, [r3, #0]
    baa4:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    baa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baac:	5499      	strb	r1, [r3, r2]
    baae:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bab6:	781a      	ldrb	r2, [r3, #0]
    bab8:	f64a 639d 	movw	r3, #44701	; 0xae9d
    babc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bac0:	781b      	ldrb	r3, [r3, #0]
    bac2:	4413      	add	r3, r2
    bac4:	b2da      	uxtb	r2, r3
    bac6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    baca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bace:	701a      	strb	r2, [r3, #0]
    bad0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    bad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bad8:	781a      	ldrb	r2, [r3, #0]
    bada:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bae2:	781b      	ldrb	r3, [r3, #0]
    bae4:	4413      	add	r3, r2
    bae6:	b2da      	uxtb	r2, r3
    bae8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    baec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baf0:	701a      	strb	r2, [r3, #0]
    baf2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    baf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bafa:	781b      	ldrb	r3, [r3, #0]
    bafc:	3301      	adds	r3, #1
    bafe:	b2da      	uxtb	r2, r3
    bb00:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb08:	701a      	strb	r2, [r3, #0]
    bb0a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bb0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb12:	781b      	ldrb	r3, [r3, #0]
    bb14:	2bff      	cmp	r3, #255	; 0xff
    bb16:	d105      	bne.n	bb24 <send_mode+0x270>
    bb18:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb20:	2200      	movs	r2, #0
    bb22:	701a      	strb	r2, [r3, #0]
    bb24:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb2c:	781b      	ldrb	r3, [r3, #0]
    bb2e:	461a      	mov	r2, r3
    bb30:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    bb34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb38:	7819      	ldrb	r1, [r3, #0]
    bb3a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    bb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb42:	5499      	strb	r1, [r3, r2]
    bb44:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bb48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb4c:	781a      	ldrb	r2, [r3, #0]
    bb4e:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    bb52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb56:	781b      	ldrb	r3, [r3, #0]
    bb58:	4413      	add	r3, r2
    bb5a:	b2da      	uxtb	r2, r3
    bb5c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bb60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb64:	701a      	strb	r2, [r3, #0]
    bb66:	f64a 73be 	movw	r3, #44990	; 0xafbe
    bb6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb6e:	781a      	ldrb	r2, [r3, #0]
    bb70:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bb74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb78:	781b      	ldrb	r3, [r3, #0]
    bb7a:	4413      	add	r3, r2
    bb7c:	b2da      	uxtb	r2, r3
    bb7e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    bb82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb86:	701a      	strb	r2, [r3, #0]
    bb88:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bb8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb90:	781b      	ldrb	r3, [r3, #0]
    bb92:	3301      	adds	r3, #1
    bb94:	b2da      	uxtb	r2, r3
    bb96:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bb9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb9e:	701a      	strb	r2, [r3, #0]
    bba0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bba8:	781b      	ldrb	r3, [r3, #0]
    bbaa:	2bff      	cmp	r3, #255	; 0xff
    bbac:	d105      	bne.n	bbba <send_mode+0x306>
    bbae:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bbb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb6:	2200      	movs	r2, #0
    bbb8:	701a      	strb	r2, [r3, #0]
    bbba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bbbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbc2:	781b      	ldrb	r3, [r3, #0]
    bbc4:	461a      	mov	r2, r3
    bbc6:	f64a 63a3 	movw	r3, #44707	; 0xaea3
    bbca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbce:	7819      	ldrb	r1, [r3, #0]
    bbd0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    bbd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbd8:	5499      	strb	r1, [r3, r2]
    bbda:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbe2:	781a      	ldrb	r2, [r3, #0]
    bbe4:	f64a 63a3 	movw	r3, #44707	; 0xaea3
    bbe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbec:	781b      	ldrb	r3, [r3, #0]
    bbee:	4413      	add	r3, r2
    bbf0:	b2da      	uxtb	r2, r3
    bbf2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bbf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbfa:	701a      	strb	r2, [r3, #0]
    bbfc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    bc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc04:	781a      	ldrb	r2, [r3, #0]
    bc06:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc0e:	781b      	ldrb	r3, [r3, #0]
    bc10:	4413      	add	r3, r2
    bc12:	b2da      	uxtb	r2, r3
    bc14:	f64a 73be 	movw	r3, #44990	; 0xafbe
    bc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc1c:	701a      	strb	r2, [r3, #0]
    bc1e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc26:	781b      	ldrb	r3, [r3, #0]
    bc28:	3301      	adds	r3, #1
    bc2a:	b2da      	uxtb	r2, r3
    bc2c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc34:	701a      	strb	r2, [r3, #0]
    bc36:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bc3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc3e:	781b      	ldrb	r3, [r3, #0]
    bc40:	2bff      	cmp	r3, #255	; 0xff
    bc42:	d105      	bne.n	bc50 <send_mode+0x39c>
    bc44:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bc48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc4c:	2200      	movs	r2, #0
    bc4e:	701a      	strb	r2, [r3, #0]
    bc50:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bc54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc58:	781b      	ldrb	r3, [r3, #0]
    bc5a:	461a      	mov	r2, r3
    bc5c:	f240 33ec 	movw	r3, #1004	; 0x3ec
    bc60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc64:	7819      	ldrb	r1, [r3, #0]
    bc66:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    bc6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc6e:	5499      	strb	r1, [r3, r2]
    bc70:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc78:	781a      	ldrb	r2, [r3, #0]
    bc7a:	f240 33ec 	movw	r3, #1004	; 0x3ec
    bc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc82:	781b      	ldrb	r3, [r3, #0]
    bc84:	4413      	add	r3, r2
    bc86:	b2da      	uxtb	r2, r3
    bc88:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc90:	701a      	strb	r2, [r3, #0]
    bc92:	f64a 73be 	movw	r3, #44990	; 0xafbe
    bc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc9a:	781a      	ldrb	r2, [r3, #0]
    bc9c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca4:	781b      	ldrb	r3, [r3, #0]
    bca6:	4413      	add	r3, r2
    bca8:	b2da      	uxtb	r2, r3
    bcaa:	f64a 73be 	movw	r3, #44990	; 0xafbe
    bcae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcb2:	701a      	strb	r2, [r3, #0]
    bcb4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bcb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcbc:	781b      	ldrb	r3, [r3, #0]
    bcbe:	3301      	adds	r3, #1
    bcc0:	b2da      	uxtb	r2, r3
    bcc2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bcc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcca:	701a      	strb	r2, [r3, #0]
    bccc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bcd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcd4:	781b      	ldrb	r3, [r3, #0]
    bcd6:	2bff      	cmp	r3, #255	; 0xff
    bcd8:	d105      	bne.n	bce6 <send_mode+0x432>
    bcda:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bcde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bce2:	2200      	movs	r2, #0
    bce4:	701a      	strb	r2, [r3, #0]
    bce6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bcea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcee:	781b      	ldrb	r3, [r3, #0]
    bcf0:	461a      	mov	r2, r3
    bcf2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bcf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcfa:	7819      	ldrb	r1, [r3, #0]
    bcfc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    bd00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd04:	5499      	strb	r1, [r3, r2]
    bd06:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bd0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd0e:	781b      	ldrb	r3, [r3, #0]
    bd10:	3301      	adds	r3, #1
    bd12:	b2da      	uxtb	r2, r3
    bd14:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bd18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd1c:	701a      	strb	r2, [r3, #0]
    bd1e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bd22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd26:	781b      	ldrb	r3, [r3, #0]
    bd28:	2bff      	cmp	r3, #255	; 0xff
    bd2a:	d105      	bne.n	bd38 <send_mode+0x484>
    bd2c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bd30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd34:	2200      	movs	r2, #0
    bd36:	701a      	strb	r2, [r3, #0]
    bd38:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bd3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd40:	781b      	ldrb	r3, [r3, #0]
    bd42:	461a      	mov	r2, r3
    bd44:	f64a 73be 	movw	r3, #44990	; 0xafbe
    bd48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd4c:	7819      	ldrb	r1, [r3, #0]
    bd4e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    bd52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd56:	5499      	strb	r1, [r3, r2]
    bd58:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd60:	781b      	ldrb	r3, [r3, #0]
    bd62:	3301      	adds	r3, #1
    bd64:	b2da      	uxtb	r2, r3
    bd66:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bd6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd6e:	701a      	strb	r2, [r3, #0]
    bd70:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bd74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd78:	781b      	ldrb	r3, [r3, #0]
    bd7a:	2bff      	cmp	r3, #255	; 0xff
    bd7c:	d105      	bne.n	bd8a <send_mode+0x4d6>
    bd7e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bd82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd86:	2200      	movs	r2, #0
    bd88:	701a      	strb	r2, [r3, #0]
    bd8a:	f242 0339 	movw	r3, #8249	; 0x2039
    bd8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd92:	781b      	ldrb	r3, [r3, #0]
    bd94:	b2db      	uxtb	r3, r3
    bd96:	f003 0310 	and.w	r3, r3, #16
    bd9a:	2b00      	cmp	r3, #0
    bd9c:	d15a      	bne.n	be54 <send_mode+0x5a0>
    bd9e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    bda2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bda6:	781b      	ldrb	r3, [r3, #0]
    bda8:	b2db      	uxtb	r3, r3
    bdaa:	461a      	mov	r2, r3
    bdac:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    bdb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb4:	5c9a      	ldrb	r2, [r3, r2]
    bdb6:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    bdba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdbe:	701a      	strb	r2, [r3, #0]
    bdc0:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    bdc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc8:	2200      	movs	r2, #0
    bdca:	701a      	strb	r2, [r3, #0]
    bdcc:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    bdd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdd4:	781b      	ldrb	r3, [r3, #0]
    bdd6:	b2db      	uxtb	r3, r3
    bdd8:	3301      	adds	r3, #1
    bdda:	b2da      	uxtb	r2, r3
    bddc:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    bde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde4:	701a      	strb	r2, [r3, #0]
    bde6:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    bdea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdee:	781b      	ldrb	r3, [r3, #0]
    bdf0:	b2db      	uxtb	r3, r3
    bdf2:	2bff      	cmp	r3, #255	; 0xff
    bdf4:	d105      	bne.n	be02 <send_mode+0x54e>
    bdf6:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    bdfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdfe:	2200      	movs	r2, #0
    be00:	701a      	strb	r2, [r3, #0]
    be02:	f242 0338 	movw	r3, #8248	; 0x2038
    be06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be0a:	f242 0238 	movw	r2, #8248	; 0x2038
    be0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be12:	7812      	ldrb	r2, [r2, #0]
    be14:	b2d2      	uxtb	r2, r2
    be16:	f042 0201 	orr.w	r2, r2, #1
    be1a:	b2d2      	uxtb	r2, r2
    be1c:	701a      	strb	r2, [r3, #0]
    be1e:	f242 0339 	movw	r3, #8249	; 0x2039
    be22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be26:	f242 0239 	movw	r2, #8249	; 0x2039
    be2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be2e:	7812      	ldrb	r2, [r2, #0]
    be30:	b2d2      	uxtb	r2, r2
    be32:	f042 0210 	orr.w	r2, r2, #16
    be36:	b2d2      	uxtb	r2, r2
    be38:	701a      	strb	r2, [r3, #0]
    be3a:	e00b      	b.n	be54 <send_mode+0x5a0>
    be3c:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    be40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be44:	781b      	ldrb	r3, [r3, #0]
    be46:	3301      	adds	r3, #1
    be48:	b2da      	uxtb	r2, r3
    be4a:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    be4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be52:	701a      	strb	r2, [r3, #0]
}
    be54:	46bd      	mov	sp, r7
    be56:	f85d 7b04 	ldr.w	r7, [sp], #4
    be5a:	4770      	bx	lr

0000be5c <send_debug>:
void send_debug(void){  //5000ms
    be5c:	b480      	push	{r7}
    be5e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    be60:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    be64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be68:	781a      	ldrb	r2, [r3, #0]
    be6a:	f248 531f 	movw	r3, #34079	; 0x851f
    be6e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    be72:	fba3 1302 	umull	r1, r3, r3, r2
    be76:	091b      	lsrs	r3, r3, #4
    be78:	2132      	movs	r1, #50	; 0x32
    be7a:	fb01 f303 	mul.w	r3, r1, r3
    be7e:	1ad3      	subs	r3, r2, r3
    be80:	b2db      	uxtb	r3, r3
    be82:	2b1d      	cmp	r3, #29
    be84:	f040 82bb 	bne.w	c3fe <send_debug+0x5a2>
    be88:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    be8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be90:	781a      	ldrb	r2, [r3, #0]
    be92:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    be96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be9a:	781b      	ldrb	r3, [r3, #0]
    be9c:	b2db      	uxtb	r3, r3
    be9e:	429a      	cmp	r2, r3
    bea0:	d313      	bcc.n	beca <send_debug+0x6e>
    bea2:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    bea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beaa:	781b      	ldrb	r3, [r3, #0]
    beac:	b2db      	uxtb	r3, r3
    beae:	461a      	mov	r2, r3
    beb0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    beb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beb8:	781b      	ldrb	r3, [r3, #0]
    beba:	1ad3      	subs	r3, r2, r3
    bebc:	33ff      	adds	r3, #255	; 0xff
    bebe:	2b09      	cmp	r3, #9
    bec0:	bfd4      	ite	le
    bec2:	2300      	movle	r3, #0
    bec4:	2301      	movgt	r3, #1
    bec6:	b2db      	uxtb	r3, r3
    bec8:	e011      	b.n	beee <send_debug+0x92>
    beca:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    bece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bed2:	781b      	ldrb	r3, [r3, #0]
    bed4:	b2db      	uxtb	r3, r3
    bed6:	461a      	mov	r2, r3
    bed8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee0:	781b      	ldrb	r3, [r3, #0]
    bee2:	1ad3      	subs	r3, r2, r3
    bee4:	2b09      	cmp	r3, #9
    bee6:	bfd4      	ite	le
    bee8:	2300      	movle	r3, #0
    beea:	2301      	movgt	r3, #1
    beec:	b2db      	uxtb	r3, r3
    beee:	2b00      	cmp	r3, #0
    bef0:	f000 8279 	beq.w	c3e6 <send_debug+0x58a>
    bef4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    befc:	781b      	ldrb	r3, [r3, #0]
    befe:	461a      	mov	r2, r3
    bf00:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    bf04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf08:	2105      	movs	r1, #5
    bf0a:	5499      	strb	r1, [r3, r2]
    bf0c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bf10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf14:	781b      	ldrb	r3, [r3, #0]
    bf16:	3301      	adds	r3, #1
    bf18:	b2da      	uxtb	r2, r3
    bf1a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bf1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf22:	701a      	strb	r2, [r3, #0]
    bf24:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bf28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf2c:	781b      	ldrb	r3, [r3, #0]
    bf2e:	2bff      	cmp	r3, #255	; 0xff
    bf30:	d105      	bne.n	bf3e <send_debug+0xe2>
    bf32:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bf36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf3a:	2200      	movs	r2, #0
    bf3c:	701a      	strb	r2, [r3, #0]
    bf3e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bf42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf46:	781b      	ldrb	r3, [r3, #0]
    bf48:	461a      	mov	r2, r3
    bf4a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    bf4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf52:	210d      	movs	r1, #13
    bf54:	5499      	strb	r1, [r3, r2]
    bf56:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bf5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf5e:	781b      	ldrb	r3, [r3, #0]
    bf60:	3301      	adds	r3, #1
    bf62:	b2da      	uxtb	r2, r3
    bf64:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bf68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf6c:	701a      	strb	r2, [r3, #0]
    bf6e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bf72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf76:	781b      	ldrb	r3, [r3, #0]
    bf78:	2bff      	cmp	r3, #255	; 0xff
    bf7a:	d105      	bne.n	bf88 <send_debug+0x12c>
    bf7c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bf80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf84:	2200      	movs	r2, #0
    bf86:	701a      	strb	r2, [r3, #0]
    bf88:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bf8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf90:	220d      	movs	r2, #13
    bf92:	701a      	strb	r2, [r3, #0]
    bf94:	f64a 73be 	movw	r3, #44990	; 0xafbe
    bf98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf9c:	220d      	movs	r2, #13
    bf9e:	701a      	strb	r2, [r3, #0]
    bfa0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    bfa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfa8:	781b      	ldrb	r3, [r3, #0]
    bfaa:	461a      	mov	r2, r3
    bfac:	f64a 73ef 	movw	r3, #45039	; 0xafef
    bfb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfb4:	781b      	ldrb	r3, [r3, #0]
    bfb6:	b2d9      	uxtb	r1, r3
    bfb8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    bfbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfc0:	5499      	strb	r1, [r3, r2]
    bfc2:	f64a 73ef 	movw	r3, #45039	; 0xafef
    bfc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfca:	781a      	ldrb	r2, [r3, #0]
    bfcc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bfd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfd4:	781b      	ldrb	r3, [r3, #0]
    bfd6:	4413      	add	r3, r2
    bfd8:	b2da      	uxtb	r2, r3
    bfda:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bfde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfe2:	701a      	strb	r2, [r3, #0]
    bfe4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    bfe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfec:	781a      	ldrb	r2, [r3, #0]
    bfee:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    bff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bff6:	781b      	ldrb	r3, [r3, #0]
    bff8:	4413      	add	r3, r2
    bffa:	b2da      	uxtb	r2, r3
    bffc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c004:	701a      	strb	r2, [r3, #0]
    c006:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c00a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c00e:	781b      	ldrb	r3, [r3, #0]
    c010:	3301      	adds	r3, #1
    c012:	b2da      	uxtb	r2, r3
    c014:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c01c:	701a      	strb	r2, [r3, #0]
    c01e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c026:	781b      	ldrb	r3, [r3, #0]
    c028:	2bff      	cmp	r3, #255	; 0xff
    c02a:	d105      	bne.n	c038 <send_debug+0x1dc>
    c02c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c034:	2200      	movs	r2, #0
    c036:	701a      	strb	r2, [r3, #0]
    c038:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c040:	781b      	ldrb	r3, [r3, #0]
    c042:	461a      	mov	r2, r3
    c044:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    c048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c04c:	7819      	ldrb	r1, [r3, #0]
    c04e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c056:	5499      	strb	r1, [r3, r2]
    c058:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c060:	781a      	ldrb	r2, [r3, #0]
    c062:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    c066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c06a:	781b      	ldrb	r3, [r3, #0]
    c06c:	4413      	add	r3, r2
    c06e:	b2da      	uxtb	r2, r3
    c070:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c078:	701a      	strb	r2, [r3, #0]
    c07a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c082:	781a      	ldrb	r2, [r3, #0]
    c084:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c08c:	781b      	ldrb	r3, [r3, #0]
    c08e:	4413      	add	r3, r2
    c090:	b2da      	uxtb	r2, r3
    c092:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c09a:	701a      	strb	r2, [r3, #0]
    c09c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0a4:	781b      	ldrb	r3, [r3, #0]
    c0a6:	3301      	adds	r3, #1
    c0a8:	b2da      	uxtb	r2, r3
    c0aa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0b2:	701a      	strb	r2, [r3, #0]
    c0b4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0bc:	781b      	ldrb	r3, [r3, #0]
    c0be:	2bff      	cmp	r3, #255	; 0xff
    c0c0:	d105      	bne.n	c0ce <send_debug+0x272>
    c0c2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ca:	2200      	movs	r2, #0
    c0cc:	701a      	strb	r2, [r3, #0]
    c0ce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0d6:	781b      	ldrb	r3, [r3, #0]
    c0d8:	461a      	mov	r2, r3
    c0da:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    c0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e2:	7819      	ldrb	r1, [r3, #0]
    c0e4:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ec:	5499      	strb	r1, [r3, r2]
    c0ee:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0f6:	781a      	ldrb	r2, [r3, #0]
    c0f8:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    c0fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c100:	781b      	ldrb	r3, [r3, #0]
    c102:	4413      	add	r3, r2
    c104:	b2da      	uxtb	r2, r3
    c106:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c10a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c10e:	701a      	strb	r2, [r3, #0]
    c110:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c118:	781a      	ldrb	r2, [r3, #0]
    c11a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c122:	781b      	ldrb	r3, [r3, #0]
    c124:	4413      	add	r3, r2
    c126:	b2da      	uxtb	r2, r3
    c128:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c130:	701a      	strb	r2, [r3, #0]
    c132:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c13a:	781b      	ldrb	r3, [r3, #0]
    c13c:	3301      	adds	r3, #1
    c13e:	b2da      	uxtb	r2, r3
    c140:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c148:	701a      	strb	r2, [r3, #0]
    c14a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c14e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c152:	781b      	ldrb	r3, [r3, #0]
    c154:	2bff      	cmp	r3, #255	; 0xff
    c156:	d105      	bne.n	c164 <send_debug+0x308>
    c158:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c160:	2200      	movs	r2, #0
    c162:	701a      	strb	r2, [r3, #0]
    c164:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c16c:	781b      	ldrb	r3, [r3, #0]
    c16e:	461a      	mov	r2, r3
    c170:	f24b 1357 	movw	r3, #45399	; 0xb157
    c174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c178:	7819      	ldrb	r1, [r3, #0]
    c17a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c17e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c182:	5499      	strb	r1, [r3, r2]
    c184:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c18c:	781a      	ldrb	r2, [r3, #0]
    c18e:	f24b 1357 	movw	r3, #45399	; 0xb157
    c192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c196:	781b      	ldrb	r3, [r3, #0]
    c198:	4413      	add	r3, r2
    c19a:	b2da      	uxtb	r2, r3
    c19c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1a4:	701a      	strb	r2, [r3, #0]
    c1a6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ae:	781a      	ldrb	r2, [r3, #0]
    c1b0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1b8:	781b      	ldrb	r3, [r3, #0]
    c1ba:	4413      	add	r3, r2
    c1bc:	b2da      	uxtb	r2, r3
    c1be:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1c6:	701a      	strb	r2, [r3, #0]
    c1c8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	3301      	adds	r3, #1
    c1d4:	b2da      	uxtb	r2, r3
    c1d6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c1da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1de:	701a      	strb	r2, [r3, #0]
    c1e0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1e8:	781b      	ldrb	r3, [r3, #0]
    c1ea:	2bff      	cmp	r3, #255	; 0xff
    c1ec:	d105      	bne.n	c1fa <send_debug+0x39e>
    c1ee:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f6:	2200      	movs	r2, #0
    c1f8:	701a      	strb	r2, [r3, #0]
    c1fa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c202:	781b      	ldrb	r3, [r3, #0]
    c204:	461a      	mov	r2, r3
    c206:	f64a 63a4 	movw	r3, #44708	; 0xaea4
    c20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c20e:	7819      	ldrb	r1, [r3, #0]
    c210:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c218:	5499      	strb	r1, [r3, r2]
    c21a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c222:	781a      	ldrb	r2, [r3, #0]
    c224:	f64a 63a4 	movw	r3, #44708	; 0xaea4
    c228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c22c:	781b      	ldrb	r3, [r3, #0]
    c22e:	4413      	add	r3, r2
    c230:	b2da      	uxtb	r2, r3
    c232:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c23a:	701a      	strb	r2, [r3, #0]
    c23c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c244:	781a      	ldrb	r2, [r3, #0]
    c246:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c24e:	781b      	ldrb	r3, [r3, #0]
    c250:	4413      	add	r3, r2
    c252:	b2da      	uxtb	r2, r3
    c254:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25c:	701a      	strb	r2, [r3, #0]
    c25e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c266:	781b      	ldrb	r3, [r3, #0]
    c268:	3301      	adds	r3, #1
    c26a:	b2da      	uxtb	r2, r3
    c26c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c274:	701a      	strb	r2, [r3, #0]
    c276:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c27e:	781b      	ldrb	r3, [r3, #0]
    c280:	2bff      	cmp	r3, #255	; 0xff
    c282:	d105      	bne.n	c290 <send_debug+0x434>
    c284:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c28c:	2200      	movs	r2, #0
    c28e:	701a      	strb	r2, [r3, #0]
    c290:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c298:	781b      	ldrb	r3, [r3, #0]
    c29a:	461a      	mov	r2, r3
    c29c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c2a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a4:	7819      	ldrb	r1, [r3, #0]
    c2a6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ae:	5499      	strb	r1, [r3, r2]
    c2b0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b8:	781b      	ldrb	r3, [r3, #0]
    c2ba:	3301      	adds	r3, #1
    c2bc:	b2da      	uxtb	r2, r3
    c2be:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c6:	701a      	strb	r2, [r3, #0]
    c2c8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d0:	781b      	ldrb	r3, [r3, #0]
    c2d2:	2bff      	cmp	r3, #255	; 0xff
    c2d4:	d105      	bne.n	c2e2 <send_debug+0x486>
    c2d6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2de:	2200      	movs	r2, #0
    c2e0:	701a      	strb	r2, [r3, #0]
    c2e2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ea:	781b      	ldrb	r3, [r3, #0]
    c2ec:	461a      	mov	r2, r3
    c2ee:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2f6:	7819      	ldrb	r1, [r3, #0]
    c2f8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c300:	5499      	strb	r1, [r3, r2]
    c302:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c30a:	781b      	ldrb	r3, [r3, #0]
    c30c:	3301      	adds	r3, #1
    c30e:	b2da      	uxtb	r2, r3
    c310:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c318:	701a      	strb	r2, [r3, #0]
    c31a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c322:	781b      	ldrb	r3, [r3, #0]
    c324:	2bff      	cmp	r3, #255	; 0xff
    c326:	d105      	bne.n	c334 <send_debug+0x4d8>
    c328:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c330:	2200      	movs	r2, #0
    c332:	701a      	strb	r2, [r3, #0]
    c334:	f242 0339 	movw	r3, #8249	; 0x2039
    c338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c33c:	781b      	ldrb	r3, [r3, #0]
    c33e:	b2db      	uxtb	r3, r3
    c340:	f003 0310 	and.w	r3, r3, #16
    c344:	2b00      	cmp	r3, #0
    c346:	d15a      	bne.n	c3fe <send_debug+0x5a2>
    c348:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    c34c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c350:	781b      	ldrb	r3, [r3, #0]
    c352:	b2db      	uxtb	r3, r3
    c354:	461a      	mov	r2, r3
    c356:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c35e:	5c9a      	ldrb	r2, [r3, r2]
    c360:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    c364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c368:	701a      	strb	r2, [r3, #0]
    c36a:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    c36e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c372:	2200      	movs	r2, #0
    c374:	701a      	strb	r2, [r3, #0]
    c376:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    c37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c37e:	781b      	ldrb	r3, [r3, #0]
    c380:	b2db      	uxtb	r3, r3
    c382:	3301      	adds	r3, #1
    c384:	b2da      	uxtb	r2, r3
    c386:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    c38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c38e:	701a      	strb	r2, [r3, #0]
    c390:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    c394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c398:	781b      	ldrb	r3, [r3, #0]
    c39a:	b2db      	uxtb	r3, r3
    c39c:	2bff      	cmp	r3, #255	; 0xff
    c39e:	d105      	bne.n	c3ac <send_debug+0x550>
    c3a0:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    c3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3a8:	2200      	movs	r2, #0
    c3aa:	701a      	strb	r2, [r3, #0]
    c3ac:	f242 0338 	movw	r3, #8248	; 0x2038
    c3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b4:	f242 0238 	movw	r2, #8248	; 0x2038
    c3b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3bc:	7812      	ldrb	r2, [r2, #0]
    c3be:	b2d2      	uxtb	r2, r2
    c3c0:	f042 0201 	orr.w	r2, r2, #1
    c3c4:	b2d2      	uxtb	r2, r2
    c3c6:	701a      	strb	r2, [r3, #0]
    c3c8:	f242 0339 	movw	r3, #8249	; 0x2039
    c3cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d0:	f242 0239 	movw	r2, #8249	; 0x2039
    c3d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3d8:	7812      	ldrb	r2, [r2, #0]
    c3da:	b2d2      	uxtb	r2, r2
    c3dc:	f042 0210 	orr.w	r2, r2, #16
    c3e0:	b2d2      	uxtb	r2, r2
    c3e2:	701a      	strb	r2, [r3, #0]
    c3e4:	e00b      	b.n	c3fe <send_debug+0x5a2>
    c3e6:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    c3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ee:	781b      	ldrb	r3, [r3, #0]
    c3f0:	3301      	adds	r3, #1
    c3f2:	b2da      	uxtb	r2, r3
    c3f4:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    c3f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3fc:	701a      	strb	r2, [r3, #0]
}
    c3fe:	46bd      	mov	sp, r7
    c400:	f85d 7b04 	ldr.w	r7, [sp], #4
    c404:	4770      	bx	lr
    c406:	bf00      	nop

0000c408 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c408:	b480      	push	{r7}
    c40a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c40c:	f64a 63b1 	movw	r3, #44721	; 0xaeb1
    c410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c414:	781a      	ldrb	r2, [r3, #0]
    c416:	f248 531f 	movw	r3, #34079	; 0x851f
    c41a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c41e:	fba3 1302 	umull	r1, r3, r3, r2
    c422:	095b      	lsrs	r3, r3, #5
    c424:	2164      	movs	r1, #100	; 0x64
    c426:	fb01 f303 	mul.w	r3, r1, r3
    c42a:	1ad3      	subs	r3, r2, r3
    c42c:	b2db      	uxtb	r3, r3
    c42e:	2b31      	cmp	r3, #49	; 0x31
    c430:	f040 8395 	bne.w	cb5e <send_nav_ref+0x756>
    c434:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c43c:	781a      	ldrb	r2, [r3, #0]
    c43e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    c442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c446:	781b      	ldrb	r3, [r3, #0]
    c448:	b2db      	uxtb	r3, r3
    c44a:	429a      	cmp	r2, r3
    c44c:	d313      	bcc.n	c476 <send_nav_ref+0x6e>
    c44e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    c452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c456:	781b      	ldrb	r3, [r3, #0]
    c458:	b2db      	uxtb	r3, r3
    c45a:	461a      	mov	r2, r3
    c45c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c464:	781b      	ldrb	r3, [r3, #0]
    c466:	1ad3      	subs	r3, r2, r3
    c468:	33ff      	adds	r3, #255	; 0xff
    c46a:	2b0c      	cmp	r3, #12
    c46c:	bfd4      	ite	le
    c46e:	2300      	movle	r3, #0
    c470:	2301      	movgt	r3, #1
    c472:	b2db      	uxtb	r3, r3
    c474:	e011      	b.n	c49a <send_nav_ref+0x92>
    c476:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    c47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c47e:	781b      	ldrb	r3, [r3, #0]
    c480:	b2db      	uxtb	r3, r3
    c482:	461a      	mov	r2, r3
    c484:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c48c:	781b      	ldrb	r3, [r3, #0]
    c48e:	1ad3      	subs	r3, r2, r3
    c490:	2b0c      	cmp	r3, #12
    c492:	bfd4      	ite	le
    c494:	2300      	movle	r3, #0
    c496:	2301      	movgt	r3, #1
    c498:	b2db      	uxtb	r3, r3
    c49a:	2b00      	cmp	r3, #0
    c49c:	f000 8353 	beq.w	cb46 <send_nav_ref+0x73e>
    c4a0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4a8:	781b      	ldrb	r3, [r3, #0]
    c4aa:	461a      	mov	r2, r3
    c4ac:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4b4:	2105      	movs	r1, #5
    c4b6:	5499      	strb	r1, [r3, r2]
    c4b8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c0:	781b      	ldrb	r3, [r3, #0]
    c4c2:	3301      	adds	r3, #1
    c4c4:	b2da      	uxtb	r2, r3
    c4c6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c4ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ce:	701a      	strb	r2, [r3, #0]
    c4d0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c4d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4d8:	781b      	ldrb	r3, [r3, #0]
    c4da:	2bff      	cmp	r3, #255	; 0xff
    c4dc:	d105      	bne.n	c4ea <send_nav_ref+0xe2>
    c4de:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4e6:	2200      	movs	r2, #0
    c4e8:	701a      	strb	r2, [r3, #0]
    c4ea:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4f2:	781b      	ldrb	r3, [r3, #0]
    c4f4:	461a      	mov	r2, r3
    c4f6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4fe:	2109      	movs	r1, #9
    c500:	5499      	strb	r1, [r3, r2]
    c502:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c50a:	781b      	ldrb	r3, [r3, #0]
    c50c:	3301      	adds	r3, #1
    c50e:	b2da      	uxtb	r2, r3
    c510:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c518:	701a      	strb	r2, [r3, #0]
    c51a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c51e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c522:	781b      	ldrb	r3, [r3, #0]
    c524:	2bff      	cmp	r3, #255	; 0xff
    c526:	d105      	bne.n	c534 <send_nav_ref+0x12c>
    c528:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c530:	2200      	movs	r2, #0
    c532:	701a      	strb	r2, [r3, #0]
    c534:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c53c:	2209      	movs	r2, #9
    c53e:	701a      	strb	r2, [r3, #0]
    c540:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c548:	2209      	movs	r2, #9
    c54a:	701a      	strb	r2, [r3, #0]
    c54c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c554:	781b      	ldrb	r3, [r3, #0]
    c556:	461a      	mov	r2, r3
    c558:	f248 6378 	movw	r3, #34424	; 0x8678
    c55c:	f2c0 0301 	movt	r3, #1
    c560:	7819      	ldrb	r1, [r3, #0]
    c562:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c56a:	5499      	strb	r1, [r3, r2]
    c56c:	f248 6378 	movw	r3, #34424	; 0x8678
    c570:	f2c0 0301 	movt	r3, #1
    c574:	781a      	ldrb	r2, [r3, #0]
    c576:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c57e:	781b      	ldrb	r3, [r3, #0]
    c580:	4413      	add	r3, r2
    c582:	b2da      	uxtb	r2, r3
    c584:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c58c:	701a      	strb	r2, [r3, #0]
    c58e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c596:	781a      	ldrb	r2, [r3, #0]
    c598:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5a0:	781b      	ldrb	r3, [r3, #0]
    c5a2:	4413      	add	r3, r2
    c5a4:	b2da      	uxtb	r2, r3
    c5a6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ae:	701a      	strb	r2, [r3, #0]
    c5b0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5b8:	781b      	ldrb	r3, [r3, #0]
    c5ba:	3301      	adds	r3, #1
    c5bc:	b2da      	uxtb	r2, r3
    c5be:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5c6:	701a      	strb	r2, [r3, #0]
    c5c8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5d0:	781b      	ldrb	r3, [r3, #0]
    c5d2:	2bff      	cmp	r3, #255	; 0xff
    c5d4:	d105      	bne.n	c5e2 <send_nav_ref+0x1da>
    c5d6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5de:	2200      	movs	r2, #0
    c5e0:	701a      	strb	r2, [r3, #0]
    c5e2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c5e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ea:	781b      	ldrb	r3, [r3, #0]
    c5ec:	461a      	mov	r2, r3
    c5ee:	f248 6378 	movw	r3, #34424	; 0x8678
    c5f2:	f2c0 0301 	movt	r3, #1
    c5f6:	7859      	ldrb	r1, [r3, #1]
    c5f8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c600:	5499      	strb	r1, [r3, r2]
    c602:	4bd2      	ldr	r3, [pc, #840]	; (c94c <send_nav_ref+0x544>)
    c604:	781a      	ldrb	r2, [r3, #0]
    c606:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c60e:	781b      	ldrb	r3, [r3, #0]
    c610:	4413      	add	r3, r2
    c612:	b2da      	uxtb	r2, r3
    c614:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c61c:	701a      	strb	r2, [r3, #0]
    c61e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c626:	781a      	ldrb	r2, [r3, #0]
    c628:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c630:	781b      	ldrb	r3, [r3, #0]
    c632:	4413      	add	r3, r2
    c634:	b2da      	uxtb	r2, r3
    c636:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c63e:	701a      	strb	r2, [r3, #0]
    c640:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c648:	781b      	ldrb	r3, [r3, #0]
    c64a:	3301      	adds	r3, #1
    c64c:	b2da      	uxtb	r2, r3
    c64e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c656:	701a      	strb	r2, [r3, #0]
    c658:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c660:	781b      	ldrb	r3, [r3, #0]
    c662:	2bff      	cmp	r3, #255	; 0xff
    c664:	d105      	bne.n	c672 <send_nav_ref+0x26a>
    c666:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c66e:	2200      	movs	r2, #0
    c670:	701a      	strb	r2, [r3, #0]
    c672:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c67a:	781b      	ldrb	r3, [r3, #0]
    c67c:	461a      	mov	r2, r3
    c67e:	f248 6378 	movw	r3, #34424	; 0x8678
    c682:	f2c0 0301 	movt	r3, #1
    c686:	7899      	ldrb	r1, [r3, #2]
    c688:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c690:	5499      	strb	r1, [r3, r2]
    c692:	4baf      	ldr	r3, [pc, #700]	; (c950 <send_nav_ref+0x548>)
    c694:	781a      	ldrb	r2, [r3, #0]
    c696:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c69e:	781b      	ldrb	r3, [r3, #0]
    c6a0:	4413      	add	r3, r2
    c6a2:	b2da      	uxtb	r2, r3
    c6a4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ac:	701a      	strb	r2, [r3, #0]
    c6ae:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6b6:	781a      	ldrb	r2, [r3, #0]
    c6b8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6c0:	781b      	ldrb	r3, [r3, #0]
    c6c2:	4413      	add	r3, r2
    c6c4:	b2da      	uxtb	r2, r3
    c6c6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ce:	701a      	strb	r2, [r3, #0]
    c6d0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6d8:	781b      	ldrb	r3, [r3, #0]
    c6da:	3301      	adds	r3, #1
    c6dc:	b2da      	uxtb	r2, r3
    c6de:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6e6:	701a      	strb	r2, [r3, #0]
    c6e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6f0:	781b      	ldrb	r3, [r3, #0]
    c6f2:	2bff      	cmp	r3, #255	; 0xff
    c6f4:	d105      	bne.n	c702 <send_nav_ref+0x2fa>
    c6f6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6fe:	2200      	movs	r2, #0
    c700:	701a      	strb	r2, [r3, #0]
    c702:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c70a:	781b      	ldrb	r3, [r3, #0]
    c70c:	461a      	mov	r2, r3
    c70e:	f248 6378 	movw	r3, #34424	; 0x8678
    c712:	f2c0 0301 	movt	r3, #1
    c716:	78d9      	ldrb	r1, [r3, #3]
    c718:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c720:	5499      	strb	r1, [r3, r2]
    c722:	4b8c      	ldr	r3, [pc, #560]	; (c954 <send_nav_ref+0x54c>)
    c724:	781a      	ldrb	r2, [r3, #0]
    c726:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c72e:	781b      	ldrb	r3, [r3, #0]
    c730:	4413      	add	r3, r2
    c732:	b2da      	uxtb	r2, r3
    c734:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c73c:	701a      	strb	r2, [r3, #0]
    c73e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c746:	781a      	ldrb	r2, [r3, #0]
    c748:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c750:	781b      	ldrb	r3, [r3, #0]
    c752:	4413      	add	r3, r2
    c754:	b2da      	uxtb	r2, r3
    c756:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c75e:	701a      	strb	r2, [r3, #0]
    c760:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c768:	781b      	ldrb	r3, [r3, #0]
    c76a:	3301      	adds	r3, #1
    c76c:	b2da      	uxtb	r2, r3
    c76e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c776:	701a      	strb	r2, [r3, #0]
    c778:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c780:	781b      	ldrb	r3, [r3, #0]
    c782:	2bff      	cmp	r3, #255	; 0xff
    c784:	d105      	bne.n	c792 <send_nav_ref+0x38a>
    c786:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c78a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c78e:	2200      	movs	r2, #0
    c790:	701a      	strb	r2, [r3, #0]
    c792:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c79a:	781b      	ldrb	r3, [r3, #0]
    c79c:	461a      	mov	r2, r3
    c79e:	f248 637c 	movw	r3, #34428	; 0x867c
    c7a2:	f2c0 0301 	movt	r3, #1
    c7a6:	7819      	ldrb	r1, [r3, #0]
    c7a8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7b0:	5499      	strb	r1, [r3, r2]
    c7b2:	f248 637c 	movw	r3, #34428	; 0x867c
    c7b6:	f2c0 0301 	movt	r3, #1
    c7ba:	781a      	ldrb	r2, [r3, #0]
    c7bc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7c4:	781b      	ldrb	r3, [r3, #0]
    c7c6:	4413      	add	r3, r2
    c7c8:	b2da      	uxtb	r2, r3
    c7ca:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d2:	701a      	strb	r2, [r3, #0]
    c7d4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7dc:	781a      	ldrb	r2, [r3, #0]
    c7de:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e6:	781b      	ldrb	r3, [r3, #0]
    c7e8:	4413      	add	r3, r2
    c7ea:	b2da      	uxtb	r2, r3
    c7ec:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7f4:	701a      	strb	r2, [r3, #0]
    c7f6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c7fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7fe:	781b      	ldrb	r3, [r3, #0]
    c800:	3301      	adds	r3, #1
    c802:	b2da      	uxtb	r2, r3
    c804:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c80c:	701a      	strb	r2, [r3, #0]
    c80e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c816:	781b      	ldrb	r3, [r3, #0]
    c818:	2bff      	cmp	r3, #255	; 0xff
    c81a:	d105      	bne.n	c828 <send_nav_ref+0x420>
    c81c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c824:	2200      	movs	r2, #0
    c826:	701a      	strb	r2, [r3, #0]
    c828:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c830:	781b      	ldrb	r3, [r3, #0]
    c832:	461a      	mov	r2, r3
    c834:	f248 637c 	movw	r3, #34428	; 0x867c
    c838:	f2c0 0301 	movt	r3, #1
    c83c:	7859      	ldrb	r1, [r3, #1]
    c83e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c846:	5499      	strb	r1, [r3, r2]
    c848:	4b43      	ldr	r3, [pc, #268]	; (c958 <send_nav_ref+0x550>)
    c84a:	781a      	ldrb	r2, [r3, #0]
    c84c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c854:	781b      	ldrb	r3, [r3, #0]
    c856:	4413      	add	r3, r2
    c858:	b2da      	uxtb	r2, r3
    c85a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c85e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c862:	701a      	strb	r2, [r3, #0]
    c864:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c86c:	781a      	ldrb	r2, [r3, #0]
    c86e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c876:	781b      	ldrb	r3, [r3, #0]
    c878:	4413      	add	r3, r2
    c87a:	b2da      	uxtb	r2, r3
    c87c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c884:	701a      	strb	r2, [r3, #0]
    c886:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c88a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c88e:	781b      	ldrb	r3, [r3, #0]
    c890:	3301      	adds	r3, #1
    c892:	b2da      	uxtb	r2, r3
    c894:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c89c:	701a      	strb	r2, [r3, #0]
    c89e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8a6:	781b      	ldrb	r3, [r3, #0]
    c8a8:	2bff      	cmp	r3, #255	; 0xff
    c8aa:	d105      	bne.n	c8b8 <send_nav_ref+0x4b0>
    c8ac:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c8b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8b4:	2200      	movs	r2, #0
    c8b6:	701a      	strb	r2, [r3, #0]
    c8b8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c0:	781b      	ldrb	r3, [r3, #0]
    c8c2:	461a      	mov	r2, r3
    c8c4:	f248 637c 	movw	r3, #34428	; 0x867c
    c8c8:	f2c0 0301 	movt	r3, #1
    c8cc:	7899      	ldrb	r1, [r3, #2]
    c8ce:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c8d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8d6:	5499      	strb	r1, [r3, r2]
    c8d8:	4b20      	ldr	r3, [pc, #128]	; (c95c <send_nav_ref+0x554>)
    c8da:	781a      	ldrb	r2, [r3, #0]
    c8dc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8e4:	781b      	ldrb	r3, [r3, #0]
    c8e6:	4413      	add	r3, r2
    c8e8:	b2da      	uxtb	r2, r3
    c8ea:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f2:	701a      	strb	r2, [r3, #0]
    c8f4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8fc:	781a      	ldrb	r2, [r3, #0]
    c8fe:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c906:	781b      	ldrb	r3, [r3, #0]
    c908:	4413      	add	r3, r2
    c90a:	b2da      	uxtb	r2, r3
    c90c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c914:	701a      	strb	r2, [r3, #0]
    c916:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c91e:	781b      	ldrb	r3, [r3, #0]
    c920:	3301      	adds	r3, #1
    c922:	b2da      	uxtb	r2, r3
    c924:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c92c:	701a      	strb	r2, [r3, #0]
    c92e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c936:	781b      	ldrb	r3, [r3, #0]
    c938:	2bff      	cmp	r3, #255	; 0xff
    c93a:	d111      	bne.n	c960 <send_nav_ref+0x558>
    c93c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c944:	2200      	movs	r2, #0
    c946:	701a      	strb	r2, [r3, #0]
    c948:	e00a      	b.n	c960 <send_nav_ref+0x558>
    c94a:	bf00      	nop
    c94c:	00018679 	.word	0x00018679
    c950:	0001867a 	.word	0x0001867a
    c954:	0001867b 	.word	0x0001867b
    c958:	0001867d 	.word	0x0001867d
    c95c:	0001867e 	.word	0x0001867e
    c960:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c968:	781b      	ldrb	r3, [r3, #0]
    c96a:	461a      	mov	r2, r3
    c96c:	f248 637c 	movw	r3, #34428	; 0x867c
    c970:	f2c0 0301 	movt	r3, #1
    c974:	78d9      	ldrb	r1, [r3, #3]
    c976:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c97e:	5499      	strb	r1, [r3, r2]
    c980:	4b79      	ldr	r3, [pc, #484]	; (cb68 <send_nav_ref+0x760>)
    c982:	781a      	ldrb	r2, [r3, #0]
    c984:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c98c:	781b      	ldrb	r3, [r3, #0]
    c98e:	4413      	add	r3, r2
    c990:	b2da      	uxtb	r2, r3
    c992:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c99a:	701a      	strb	r2, [r3, #0]
    c99c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9a4:	781a      	ldrb	r2, [r3, #0]
    c9a6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    c9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ae:	781b      	ldrb	r3, [r3, #0]
    c9b0:	4413      	add	r3, r2
    c9b2:	b2da      	uxtb	r2, r3
    c9b4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    c9b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9bc:	701a      	strb	r2, [r3, #0]
    c9be:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c9c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9c6:	781b      	ldrb	r3, [r3, #0]
    c9c8:	3301      	adds	r3, #1
    c9ca:	b2da      	uxtb	r2, r3
    c9cc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9d4:	701a      	strb	r2, [r3, #0]
    c9d6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c9da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9de:	781b      	ldrb	r3, [r3, #0]
    c9e0:	2bff      	cmp	r3, #255	; 0xff
    c9e2:	d105      	bne.n	c9f0 <send_nav_ref+0x5e8>
    c9e4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ec:	2200      	movs	r2, #0
    c9ee:	701a      	strb	r2, [r3, #0]
    c9f0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    c9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9f8:	781b      	ldrb	r3, [r3, #0]
    c9fa:	461a      	mov	r2, r3
    c9fc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ca00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca04:	7819      	ldrb	r1, [r3, #0]
    ca06:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ca0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca0e:	5499      	strb	r1, [r3, r2]
    ca10:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ca14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca18:	781b      	ldrb	r3, [r3, #0]
    ca1a:	3301      	adds	r3, #1
    ca1c:	b2da      	uxtb	r2, r3
    ca1e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ca22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca26:	701a      	strb	r2, [r3, #0]
    ca28:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ca2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca30:	781b      	ldrb	r3, [r3, #0]
    ca32:	2bff      	cmp	r3, #255	; 0xff
    ca34:	d105      	bne.n	ca42 <send_nav_ref+0x63a>
    ca36:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ca3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca3e:	2200      	movs	r2, #0
    ca40:	701a      	strb	r2, [r3, #0]
    ca42:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ca46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca4a:	781b      	ldrb	r3, [r3, #0]
    ca4c:	461a      	mov	r2, r3
    ca4e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ca52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca56:	7819      	ldrb	r1, [r3, #0]
    ca58:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ca5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca60:	5499      	strb	r1, [r3, r2]
    ca62:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ca66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca6a:	781b      	ldrb	r3, [r3, #0]
    ca6c:	3301      	adds	r3, #1
    ca6e:	b2da      	uxtb	r2, r3
    ca70:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ca74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca78:	701a      	strb	r2, [r3, #0]
    ca7a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ca7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca82:	781b      	ldrb	r3, [r3, #0]
    ca84:	2bff      	cmp	r3, #255	; 0xff
    ca86:	d105      	bne.n	ca94 <send_nav_ref+0x68c>
    ca88:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ca8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca90:	2200      	movs	r2, #0
    ca92:	701a      	strb	r2, [r3, #0]
    ca94:	f242 0339 	movw	r3, #8249	; 0x2039
    ca98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca9c:	781b      	ldrb	r3, [r3, #0]
    ca9e:	b2db      	uxtb	r3, r3
    caa0:	f003 0310 	and.w	r3, r3, #16
    caa4:	2b00      	cmp	r3, #0
    caa6:	d15a      	bne.n	cb5e <send_nav_ref+0x756>
    caa8:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    caac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cab0:	781b      	ldrb	r3, [r3, #0]
    cab2:	b2db      	uxtb	r3, r3
    cab4:	461a      	mov	r2, r3
    cab6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    caba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cabe:	5c9a      	ldrb	r2, [r3, r2]
    cac0:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    cac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cac8:	701a      	strb	r2, [r3, #0]
    caca:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    cace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cad2:	2200      	movs	r2, #0
    cad4:	701a      	strb	r2, [r3, #0]
    cad6:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    cada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cade:	781b      	ldrb	r3, [r3, #0]
    cae0:	b2db      	uxtb	r3, r3
    cae2:	3301      	adds	r3, #1
    cae4:	b2da      	uxtb	r2, r3
    cae6:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    caea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caee:	701a      	strb	r2, [r3, #0]
    caf0:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    caf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caf8:	781b      	ldrb	r3, [r3, #0]
    cafa:	b2db      	uxtb	r3, r3
    cafc:	2bff      	cmp	r3, #255	; 0xff
    cafe:	d105      	bne.n	cb0c <send_nav_ref+0x704>
    cb00:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    cb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb08:	2200      	movs	r2, #0
    cb0a:	701a      	strb	r2, [r3, #0]
    cb0c:	f242 0338 	movw	r3, #8248	; 0x2038
    cb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb14:	f242 0238 	movw	r2, #8248	; 0x2038
    cb18:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cb1c:	7812      	ldrb	r2, [r2, #0]
    cb1e:	b2d2      	uxtb	r2, r2
    cb20:	f042 0201 	orr.w	r2, r2, #1
    cb24:	b2d2      	uxtb	r2, r2
    cb26:	701a      	strb	r2, [r3, #0]
    cb28:	f242 0339 	movw	r3, #8249	; 0x2039
    cb2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb30:	f242 0239 	movw	r2, #8249	; 0x2039
    cb34:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cb38:	7812      	ldrb	r2, [r2, #0]
    cb3a:	b2d2      	uxtb	r2, r2
    cb3c:	f042 0210 	orr.w	r2, r2, #16
    cb40:	b2d2      	uxtb	r2, r2
    cb42:	701a      	strb	r2, [r3, #0]
    cb44:	e00b      	b.n	cb5e <send_nav_ref+0x756>
    cb46:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    cb4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb4e:	781b      	ldrb	r3, [r3, #0]
    cb50:	3301      	adds	r3, #1
    cb52:	b2da      	uxtb	r2, r3
    cb54:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    cb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb5c:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cb5e:	46bd      	mov	sp, r7
    cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb64:	4770      	bx	lr
    cb66:	bf00      	nop
    cb68:	0001867f 	.word	0x0001867f

0000cb6c <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cb6c:	b480      	push	{r7}
    cb6e:	b083      	sub	sp, #12
    cb70:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cb72:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    cb76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb7a:	8a1b      	ldrh	r3, [r3, #16]
    cb7c:	b21b      	sxth	r3, r3
    cb7e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cb82:	db0d      	blt.n	cba0 <inflight_calib_mode_update+0x34>
    cb84:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    cb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb8c:	8a1b      	ldrh	r3, [r3, #16]
    cb8e:	b21a      	sxth	r2, r3
    cb90:	f640 437f 	movw	r3, #3199	; 0xc7f
    cb94:	429a      	cmp	r2, r3
    cb96:	bfd4      	ite	le
    cb98:	2300      	movle	r3, #0
    cb9a:	2301      	movgt	r3, #1
    cb9c:	b2db      	uxtb	r3, r3
    cb9e:	e000      	b.n	cba2 <inflight_calib_mode_update+0x36>
    cba0:	2302      	movs	r3, #2
    cba2:	71fb      	strb	r3, [r7, #7]
    cba4:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    cba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbac:	781b      	ldrb	r3, [r3, #0]
    cbae:	79fa      	ldrb	r2, [r7, #7]
    cbb0:	429a      	cmp	r2, r3
    cbb2:	d007      	beq.n	cbc4 <inflight_calib_mode_update+0x58>
    cbb4:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    cbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbbc:	79fa      	ldrb	r2, [r7, #7]
    cbbe:	701a      	strb	r2, [r3, #0]
    cbc0:	2301      	movs	r3, #1
    cbc2:	e000      	b.n	cbc6 <inflight_calib_mode_update+0x5a>
    cbc4:	2300      	movs	r3, #0
}
    cbc6:	4618      	mov	r0, r3
    cbc8:	370c      	adds	r7, #12
    cbca:	46bd      	mov	sp, r7
    cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbd0:	4770      	bx	lr
    cbd2:	bf00      	nop

0000cbd4 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    cbd4:	b580      	push	{r7, lr}
    cbd6:	b082      	sub	sp, #8
    cbd8:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    cbda:	f64a 73ee 	movw	r3, #45038	; 0xafee
    cbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbe2:	2201      	movs	r2, #1
    cbe4:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    cbe6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    cbea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbee:	781b      	ldrb	r3, [r3, #0]
    cbf0:	b2db      	uxtb	r3, r3
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	f000 83b8 	beq.w	d368 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    cbf8:	2300      	movs	r3, #0
    cbfa:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    cbfc:	f7fa fa9c 	bl	7138 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    cc00:	4b3a      	ldr	r3, [pc, #232]	; (ccec <radio_control_task+0x118>)
    cc02:	781b      	ldrb	r3, [r3, #0]
    cc04:	b2db      	uxtb	r3, r3
    cc06:	f003 0302 	and.w	r3, r3, #2
    cc0a:	2b00      	cmp	r3, #0
    cc0c:	d00d      	beq.n	cc2a <radio_control_task+0x56>
    cc0e:	f64a 639c 	movw	r3, #44700	; 0xae9c
    cc12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc16:	781b      	ldrb	r3, [r3, #0]
    cc18:	2b01      	cmp	r3, #1
    cc1a:	d00d      	beq.n	cc38 <radio_control_task+0x64>
    cc1c:	f64a 639c 	movw	r3, #44700	; 0xae9c
    cc20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc24:	781b      	ldrb	r3, [r3, #0]
    cc26:	2b00      	cmp	r3, #0
    cc28:	d006      	beq.n	cc38 <radio_control_task+0x64>
    cc2a:	f24b 234c 	movw	r3, #45644	; 0xb24c
    cc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc32:	781b      	ldrb	r3, [r3, #0]
    cc34:	2b00      	cmp	r3, #0
    cc36:	d007      	beq.n	cc48 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    cc38:	f64a 639c 	movw	r3, #44700	; 0xae9c
    cc3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc40:	2203      	movs	r2, #3
    cc42:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    cc44:	2301      	movs	r3, #1
    cc46:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    cc48:	f7fa f950 	bl	6eec <pprz_mode_update>
    cc4c:	4603      	mov	r3, r0
    cc4e:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    cc50:	79fa      	ldrb	r2, [r7, #7]
    cc52:	79bb      	ldrb	r3, [r7, #6]
    cc54:	4313      	orrs	r3, r2
    cc56:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    cc58:	f7fa f994 	bl	6f84 <ir_estim_mode_update>
    cc5c:	4603      	mov	r3, r0
    cc5e:	461a      	mov	r2, r3
    cc60:	79fb      	ldrb	r3, [r7, #7]
    cc62:	4313      	orrs	r3, r2
    cc64:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    cc66:	f7ff ff81 	bl	cb6c <inflight_calib_mode_update>
    cc6a:	4603      	mov	r3, r0
    cc6c:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    cc6e:	797b      	ldrb	r3, [r7, #5]
    cc70:	2b00      	cmp	r3, #0
    cc72:	d102      	bne.n	cc7a <radio_control_task+0xa6>
    cc74:	79bb      	ldrb	r3, [r7, #6]
    cc76:	2b00      	cmp	r3, #0
    cc78:	d001      	beq.n	cc7e <radio_control_task+0xaa>
    cc7a:	2301      	movs	r3, #1
    cc7c:	e000      	b.n	cc80 <radio_control_task+0xac>
    cc7e:	2300      	movs	r3, #0
    cc80:	b2db      	uxtb	r3, r3
    cc82:	4618      	mov	r0, r3
    cc84:	f008 fba0 	bl	153c8 <inflight_calib>
      mode_changed |= calib_mode_changed;
    cc88:	79fa      	ldrb	r2, [r7, #7]
    cc8a:	797b      	ldrb	r3, [r7, #5]
    cc8c:	4313      	orrs	r3, r2
    cc8e:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    cc90:	f7fa f9a0 	bl	6fd4 <mcu1_status_update>
    cc94:	4603      	mov	r3, r0
    cc96:	461a      	mov	r2, r3
    cc98:	79fb      	ldrb	r3, [r7, #7]
    cc9a:	4313      	orrs	r3, r2
    cc9c:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    cc9e:	2301      	movs	r3, #1
    cca0:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    cca2:	79fb      	ldrb	r3, [r7, #7]
    cca4:	2b00      	cmp	r3, #0
    cca6:	f000 82bc 	beq.w	d222 <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    ccaa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ccae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccb2:	781a      	ldrb	r2, [r3, #0]
    ccb4:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    ccb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccbc:	781b      	ldrb	r3, [r3, #0]
    ccbe:	b2db      	uxtb	r3, r3
    ccc0:	429a      	cmp	r2, r3
    ccc2:	d315      	bcc.n	ccf0 <radio_control_task+0x11c>
    ccc4:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    ccc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cccc:	781b      	ldrb	r3, [r3, #0]
    ccce:	b2db      	uxtb	r3, r3
    ccd0:	461a      	mov	r2, r3
    ccd2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ccd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccda:	781b      	ldrb	r3, [r3, #0]
    ccdc:	1ad3      	subs	r3, r2, r3
    ccde:	33ff      	adds	r3, #255	; 0xff
    cce0:	2b09      	cmp	r3, #9
    cce2:	bfd4      	ite	le
    cce4:	2300      	movle	r3, #0
    cce6:	2301      	movgt	r3, #1
    cce8:	b2db      	uxtb	r3, r3
    ccea:	e013      	b.n	cd14 <radio_control_task+0x140>
    ccec:	2000afd3 	.word	0x2000afd3
    ccf0:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    ccf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccf8:	781b      	ldrb	r3, [r3, #0]
    ccfa:	b2db      	uxtb	r3, r3
    ccfc:	461a      	mov	r2, r3
    ccfe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cd02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd06:	781b      	ldrb	r3, [r3, #0]
    cd08:	1ad3      	subs	r3, r2, r3
    cd0a:	2b09      	cmp	r3, #9
    cd0c:	bfd4      	ite	le
    cd0e:	2300      	movle	r3, #0
    cd10:	2301      	movgt	r3, #1
    cd12:	b2db      	uxtb	r3, r3
    cd14:	2b00      	cmp	r3, #0
    cd16:	f000 8278 	beq.w	d20a <radio_control_task+0x636>
    cd1a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd22:	781b      	ldrb	r3, [r3, #0]
    cd24:	461a      	mov	r2, r3
    cd26:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    cd2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd2e:	2105      	movs	r1, #5
    cd30:	5499      	strb	r1, [r3, r2]
    cd32:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd3a:	781b      	ldrb	r3, [r3, #0]
    cd3c:	3301      	adds	r3, #1
    cd3e:	b2da      	uxtb	r2, r3
    cd40:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cd44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd48:	701a      	strb	r2, [r3, #0]
    cd4a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd52:	781b      	ldrb	r3, [r3, #0]
    cd54:	2bff      	cmp	r3, #255	; 0xff
    cd56:	d105      	bne.n	cd64 <radio_control_task+0x190>
    cd58:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd60:	2200      	movs	r2, #0
    cd62:	701a      	strb	r2, [r3, #0]
    cd64:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd6c:	781b      	ldrb	r3, [r3, #0]
    cd6e:	461a      	mov	r2, r3
    cd70:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    cd74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd78:	210b      	movs	r1, #11
    cd7a:	5499      	strb	r1, [r3, r2]
    cd7c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cd80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd84:	781b      	ldrb	r3, [r3, #0]
    cd86:	3301      	adds	r3, #1
    cd88:	b2da      	uxtb	r2, r3
    cd8a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cd8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd92:	701a      	strb	r2, [r3, #0]
    cd94:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd9c:	781b      	ldrb	r3, [r3, #0]
    cd9e:	2bff      	cmp	r3, #255	; 0xff
    cda0:	d105      	bne.n	cdae <radio_control_task+0x1da>
    cda2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdaa:	2200      	movs	r2, #0
    cdac:	701a      	strb	r2, [r3, #0]
    cdae:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    cdb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdb6:	220b      	movs	r2, #11
    cdb8:	701a      	strb	r2, [r3, #0]
    cdba:	f64a 73be 	movw	r3, #44990	; 0xafbe
    cdbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdc2:	220b      	movs	r2, #11
    cdc4:	701a      	strb	r2, [r3, #0]
    cdc6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cdca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdce:	781b      	ldrb	r3, [r3, #0]
    cdd0:	461a      	mov	r2, r3
    cdd2:	f64a 639c 	movw	r3, #44700	; 0xae9c
    cdd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdda:	7819      	ldrb	r1, [r3, #0]
    cddc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    cde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cde4:	5499      	strb	r1, [r3, r2]
    cde6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    cdea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdee:	781a      	ldrb	r2, [r3, #0]
    cdf0:	f64a 639c 	movw	r3, #44700	; 0xae9c
    cdf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdf8:	781b      	ldrb	r3, [r3, #0]
    cdfa:	4413      	add	r3, r2
    cdfc:	b2da      	uxtb	r2, r3
    cdfe:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ce02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce06:	701a      	strb	r2, [r3, #0]
    ce08:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ce0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce10:	781a      	ldrb	r2, [r3, #0]
    ce12:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ce16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce1a:	781b      	ldrb	r3, [r3, #0]
    ce1c:	4413      	add	r3, r2
    ce1e:	b2da      	uxtb	r2, r3
    ce20:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ce24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce28:	701a      	strb	r2, [r3, #0]
    ce2a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ce2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce32:	781b      	ldrb	r3, [r3, #0]
    ce34:	3301      	adds	r3, #1
    ce36:	b2da      	uxtb	r2, r3
    ce38:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ce3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce40:	701a      	strb	r2, [r3, #0]
    ce42:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ce46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce4a:	781b      	ldrb	r3, [r3, #0]
    ce4c:	2bff      	cmp	r3, #255	; 0xff
    ce4e:	d105      	bne.n	ce5c <radio_control_task+0x288>
    ce50:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ce54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce58:	2200      	movs	r2, #0
    ce5a:	701a      	strb	r2, [r3, #0]
    ce5c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ce60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce64:	781b      	ldrb	r3, [r3, #0]
    ce66:	461a      	mov	r2, r3
    ce68:	f64a 639d 	movw	r3, #44701	; 0xae9d
    ce6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce70:	7819      	ldrb	r1, [r3, #0]
    ce72:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ce76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce7a:	5499      	strb	r1, [r3, r2]
    ce7c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ce80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce84:	781a      	ldrb	r2, [r3, #0]
    ce86:	f64a 639d 	movw	r3, #44701	; 0xae9d
    ce8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce8e:	781b      	ldrb	r3, [r3, #0]
    ce90:	4413      	add	r3, r2
    ce92:	b2da      	uxtb	r2, r3
    ce94:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ce98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce9c:	701a      	strb	r2, [r3, #0]
    ce9e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    cea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cea6:	781a      	ldrb	r2, [r3, #0]
    cea8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ceac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceb0:	781b      	ldrb	r3, [r3, #0]
    ceb2:	4413      	add	r3, r2
    ceb4:	b2da      	uxtb	r2, r3
    ceb6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ceba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cebe:	701a      	strb	r2, [r3, #0]
    cec0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cec8:	781b      	ldrb	r3, [r3, #0]
    ceca:	3301      	adds	r3, #1
    cecc:	b2da      	uxtb	r2, r3
    cece:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ced2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ced6:	701a      	strb	r2, [r3, #0]
    ced8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee0:	781b      	ldrb	r3, [r3, #0]
    cee2:	2bff      	cmp	r3, #255	; 0xff
    cee4:	d105      	bne.n	cef2 <radio_control_task+0x31e>
    cee6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ceea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceee:	2200      	movs	r2, #0
    cef0:	701a      	strb	r2, [r3, #0]
    cef2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cefa:	781b      	ldrb	r3, [r3, #0]
    cefc:	461a      	mov	r2, r3
    cefe:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    cf02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf06:	7819      	ldrb	r1, [r3, #0]
    cf08:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    cf0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf10:	5499      	strb	r1, [r3, r2]
    cf12:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    cf16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf1a:	781a      	ldrb	r2, [r3, #0]
    cf1c:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    cf20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf24:	781b      	ldrb	r3, [r3, #0]
    cf26:	4413      	add	r3, r2
    cf28:	b2da      	uxtb	r2, r3
    cf2a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    cf2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf32:	701a      	strb	r2, [r3, #0]
    cf34:	f64a 73be 	movw	r3, #44990	; 0xafbe
    cf38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf3c:	781a      	ldrb	r2, [r3, #0]
    cf3e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    cf42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf46:	781b      	ldrb	r3, [r3, #0]
    cf48:	4413      	add	r3, r2
    cf4a:	b2da      	uxtb	r2, r3
    cf4c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    cf50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf54:	701a      	strb	r2, [r3, #0]
    cf56:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cf5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf5e:	781b      	ldrb	r3, [r3, #0]
    cf60:	3301      	adds	r3, #1
    cf62:	b2da      	uxtb	r2, r3
    cf64:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cf68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf6c:	701a      	strb	r2, [r3, #0]
    cf6e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cf72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf76:	781b      	ldrb	r3, [r3, #0]
    cf78:	2bff      	cmp	r3, #255	; 0xff
    cf7a:	d105      	bne.n	cf88 <radio_control_task+0x3b4>
    cf7c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cf80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf84:	2200      	movs	r2, #0
    cf86:	701a      	strb	r2, [r3, #0]
    cf88:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cf8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf90:	781b      	ldrb	r3, [r3, #0]
    cf92:	461a      	mov	r2, r3
    cf94:	f64a 63a3 	movw	r3, #44707	; 0xaea3
    cf98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf9c:	7819      	ldrb	r1, [r3, #0]
    cf9e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    cfa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfa6:	5499      	strb	r1, [r3, r2]
    cfa8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    cfac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfb0:	781a      	ldrb	r2, [r3, #0]
    cfb2:	f64a 63a3 	movw	r3, #44707	; 0xaea3
    cfb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfba:	781b      	ldrb	r3, [r3, #0]
    cfbc:	4413      	add	r3, r2
    cfbe:	b2da      	uxtb	r2, r3
    cfc0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    cfc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc8:	701a      	strb	r2, [r3, #0]
    cfca:	f64a 73be 	movw	r3, #44990	; 0xafbe
    cfce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfd2:	781a      	ldrb	r2, [r3, #0]
    cfd4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    cfd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfdc:	781b      	ldrb	r3, [r3, #0]
    cfde:	4413      	add	r3, r2
    cfe0:	b2da      	uxtb	r2, r3
    cfe2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    cfe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfea:	701a      	strb	r2, [r3, #0]
    cfec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff4:	781b      	ldrb	r3, [r3, #0]
    cff6:	3301      	adds	r3, #1
    cff8:	b2da      	uxtb	r2, r3
    cffa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    cffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d002:	701a      	strb	r2, [r3, #0]
    d004:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d00c:	781b      	ldrb	r3, [r3, #0]
    d00e:	2bff      	cmp	r3, #255	; 0xff
    d010:	d105      	bne.n	d01e <radio_control_task+0x44a>
    d012:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d01a:	2200      	movs	r2, #0
    d01c:	701a      	strb	r2, [r3, #0]
    d01e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d026:	781b      	ldrb	r3, [r3, #0]
    d028:	461a      	mov	r2, r3
    d02a:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d032:	7819      	ldrb	r1, [r3, #0]
    d034:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d03c:	5499      	strb	r1, [r3, r2]
    d03e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d046:	781a      	ldrb	r2, [r3, #0]
    d048:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d050:	781b      	ldrb	r3, [r3, #0]
    d052:	4413      	add	r3, r2
    d054:	b2da      	uxtb	r2, r3
    d056:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d05e:	701a      	strb	r2, [r3, #0]
    d060:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d068:	781a      	ldrb	r2, [r3, #0]
    d06a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d072:	781b      	ldrb	r3, [r3, #0]
    d074:	4413      	add	r3, r2
    d076:	b2da      	uxtb	r2, r3
    d078:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d080:	701a      	strb	r2, [r3, #0]
    d082:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d08a:	781b      	ldrb	r3, [r3, #0]
    d08c:	3301      	adds	r3, #1
    d08e:	b2da      	uxtb	r2, r3
    d090:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d098:	701a      	strb	r2, [r3, #0]
    d09a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0a2:	781b      	ldrb	r3, [r3, #0]
    d0a4:	2bff      	cmp	r3, #255	; 0xff
    d0a6:	d105      	bne.n	d0b4 <radio_control_task+0x4e0>
    d0a8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0b0:	2200      	movs	r2, #0
    d0b2:	701a      	strb	r2, [r3, #0]
    d0b4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0bc:	781b      	ldrb	r3, [r3, #0]
    d0be:	461a      	mov	r2, r3
    d0c0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0c8:	7819      	ldrb	r1, [r3, #0]
    d0ca:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d0ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0d2:	5499      	strb	r1, [r3, r2]
    d0d4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0dc:	781b      	ldrb	r3, [r3, #0]
    d0de:	3301      	adds	r3, #1
    d0e0:	b2da      	uxtb	r2, r3
    d0e2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ea:	701a      	strb	r2, [r3, #0]
    d0ec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f4:	781b      	ldrb	r3, [r3, #0]
    d0f6:	2bff      	cmp	r3, #255	; 0xff
    d0f8:	d105      	bne.n	d106 <radio_control_task+0x532>
    d0fa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d102:	2200      	movs	r2, #0
    d104:	701a      	strb	r2, [r3, #0]
    d106:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d10a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d10e:	781b      	ldrb	r3, [r3, #0]
    d110:	461a      	mov	r2, r3
    d112:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d11a:	7819      	ldrb	r1, [r3, #0]
    d11c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d124:	5499      	strb	r1, [r3, r2]
    d126:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d12e:	781b      	ldrb	r3, [r3, #0]
    d130:	3301      	adds	r3, #1
    d132:	b2da      	uxtb	r2, r3
    d134:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d13c:	701a      	strb	r2, [r3, #0]
    d13e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d146:	781b      	ldrb	r3, [r3, #0]
    d148:	2bff      	cmp	r3, #255	; 0xff
    d14a:	d105      	bne.n	d158 <radio_control_task+0x584>
    d14c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d154:	2200      	movs	r2, #0
    d156:	701a      	strb	r2, [r3, #0]
    d158:	f242 0339 	movw	r3, #8249	; 0x2039
    d15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d160:	781b      	ldrb	r3, [r3, #0]
    d162:	b2db      	uxtb	r3, r3
    d164:	f003 0310 	and.w	r3, r3, #16
    d168:	2b00      	cmp	r3, #0
    d16a:	d15a      	bne.n	d222 <radio_control_task+0x64e>
    d16c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    d170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d174:	781b      	ldrb	r3, [r3, #0]
    d176:	b2db      	uxtb	r3, r3
    d178:	461a      	mov	r2, r3
    d17a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d17e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d182:	5c9a      	ldrb	r2, [r3, r2]
    d184:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    d188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d18c:	701a      	strb	r2, [r3, #0]
    d18e:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    d192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d196:	2200      	movs	r2, #0
    d198:	701a      	strb	r2, [r3, #0]
    d19a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    d19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1a2:	781b      	ldrb	r3, [r3, #0]
    d1a4:	b2db      	uxtb	r3, r3
    d1a6:	3301      	adds	r3, #1
    d1a8:	b2da      	uxtb	r2, r3
    d1aa:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    d1ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1b2:	701a      	strb	r2, [r3, #0]
    d1b4:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    d1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1bc:	781b      	ldrb	r3, [r3, #0]
    d1be:	b2db      	uxtb	r3, r3
    d1c0:	2bff      	cmp	r3, #255	; 0xff
    d1c2:	d105      	bne.n	d1d0 <radio_control_task+0x5fc>
    d1c4:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    d1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1cc:	2200      	movs	r2, #0
    d1ce:	701a      	strb	r2, [r3, #0]
    d1d0:	f242 0338 	movw	r3, #8248	; 0x2038
    d1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1d8:	f242 0238 	movw	r2, #8248	; 0x2038
    d1dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d1e0:	7812      	ldrb	r2, [r2, #0]
    d1e2:	b2d2      	uxtb	r2, r2
    d1e4:	f042 0201 	orr.w	r2, r2, #1
    d1e8:	b2d2      	uxtb	r2, r2
    d1ea:	701a      	strb	r2, [r3, #0]
    d1ec:	f242 0339 	movw	r3, #8249	; 0x2039
    d1f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1f4:	f242 0239 	movw	r2, #8249	; 0x2039
    d1f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d1fc:	7812      	ldrb	r2, [r2, #0]
    d1fe:	b2d2      	uxtb	r2, r2
    d200:	f042 0210 	orr.w	r2, r2, #16
    d204:	b2d2      	uxtb	r2, r2
    d206:	701a      	strb	r2, [r3, #0]
    d208:	e00b      	b.n	d222 <radio_control_task+0x64e>
    d20a:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    d20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d212:	781b      	ldrb	r3, [r3, #0]
    d214:	3301      	adds	r3, #1
    d216:	b2da      	uxtb	r2, r3
    d218:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    d21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d220:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d222:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    d226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d22a:	885b      	ldrh	r3, [r3, #2]
    d22c:	b21b      	sxth	r3, r3
    d22e:	4618      	mov	r0, r3
    d230:	f00a fe96 	bl	17f60 <__aeabi_i2f>
    d234:	4603      	mov	r3, r0
    d236:	4618      	mov	r0, r3
    d238:	f04f 0100 	mov.w	r1, #0
    d23c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d240:	f00a ff96 	bl	18170 <__aeabi_fdiv>
    d244:	4603      	mov	r3, r0
    d246:	4618      	mov	r0, r3
    d248:	f00a fa4a 	bl	176e0 <__aeabi_f2d>
    d24c:	4602      	mov	r2, r0
    d24e:	460b      	mov	r3, r1
    d250:	4610      	mov	r0, r2
    d252:	4619      	mov	r1, r3
    d254:	a346      	add	r3, pc, #280	; (adr r3, d370 <radio_control_task+0x79c>)
    d256:	e9d3 2300 	ldrd	r2, r3, [r3]
    d25a:	f00a fa95 	bl	17788 <__aeabi_dmul>
    d25e:	4602      	mov	r2, r0
    d260:	460b      	mov	r3, r1
    d262:	4610      	mov	r0, r2
    d264:	4619      	mov	r1, r3
    d266:	f04f 0200 	mov.w	r2, #0
    d26a:	f04f 0300 	mov.w	r3, #0
    d26e:	f00a f8d9 	bl	17424 <__adddf3>
    d272:	4602      	mov	r2, r0
    d274:	460b      	mov	r3, r1
    d276:	4610      	mov	r0, r2
    d278:	4619      	mov	r1, r3
    d27a:	f00a fd67 	bl	17d4c <__aeabi_d2f>
    d27e:	4602      	mov	r2, r0
    d280:	f24b 13e4 	movw	r3, #45540	; 0xb1e4
    d284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d288:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d28a:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    d28e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d292:	889b      	ldrh	r3, [r3, #4]
    d294:	b21b      	sxth	r3, r3
    d296:	4618      	mov	r0, r3
    d298:	f00a fe62 	bl	17f60 <__aeabi_i2f>
    d29c:	4603      	mov	r3, r0
    d29e:	4618      	mov	r0, r3
    d2a0:	f04f 0100 	mov.w	r1, #0
    d2a4:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d2a8:	f00a ff62 	bl	18170 <__aeabi_fdiv>
    d2ac:	4603      	mov	r3, r0
    d2ae:	4618      	mov	r0, r3
    d2b0:	f00a fa16 	bl	176e0 <__aeabi_f2d>
    d2b4:	4602      	mov	r2, r0
    d2b6:	460b      	mov	r3, r1
    d2b8:	4610      	mov	r0, r2
    d2ba:	4619      	mov	r1, r3
    d2bc:	f04f 0200 	mov.w	r2, #0
    d2c0:	f04f 0300 	mov.w	r3, #0
    d2c4:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d2c8:	f00a fa5e 	bl	17788 <__aeabi_dmul>
    d2cc:	4602      	mov	r2, r0
    d2ce:	460b      	mov	r3, r1
    d2d0:	4610      	mov	r0, r2
    d2d2:	4619      	mov	r1, r3
    d2d4:	f04f 0200 	mov.w	r2, #0
    d2d8:	f04f 0300 	mov.w	r3, #0
    d2dc:	f00a f8a2 	bl	17424 <__adddf3>
    d2e0:	4602      	mov	r2, r0
    d2e2:	460b      	mov	r3, r1
    d2e4:	4610      	mov	r0, r2
    d2e6:	4619      	mov	r1, r3
    d2e8:	f00a fd30 	bl	17d4c <__aeabi_d2f>
    d2ec:	4602      	mov	r2, r0
    d2ee:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
    d2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2f6:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d2f8:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    d2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d300:	881a      	ldrh	r2, [r3, #0]
    d302:	f24b 13ec 	movw	r3, #45548	; 0xb1ec
    d306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d30a:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d30c:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    d310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d314:	7c9a      	ldrb	r2, [r3, #18]
    d316:	f64a 63a4 	movw	r3, #44708	; 0xaea4
    d31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d31e:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d320:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    d324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d328:	7d5a      	ldrb	r2, [r3, #21]
    d32a:	f64a 63a2 	movw	r3, #44706	; 0xaea2
    d32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d332:	701a      	strb	r2, [r3, #0]

    events_update();
    d334:	f7f9 fe7e 	bl	7034 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d338:	f7f8 fc7e 	bl	5c38 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d33c:	f64a 639c 	movw	r3, #44700	; 0xae9c
    d340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d344:	781b      	ldrb	r3, [r3, #0]
    d346:	2b02      	cmp	r3, #2
    d348:	d10e      	bne.n	d368 <radio_control_task+0x794>
    d34a:	f64a 73c0 	movw	r3, #44992	; 0xafc0
    d34e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d352:	881b      	ldrh	r3, [r3, #0]
    d354:	b21b      	sxth	r3, r3
    d356:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d35a:	dd05      	ble.n	d368 <radio_control_task+0x794>
	launch = TRUE;
    d35c:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
    d360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d364:	2201      	movs	r2, #1
    d366:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d368:	3708      	adds	r7, #8
    d36a:	46bd      	mov	sp, r7
    d36c:	bd80      	pop	{r7, pc}
    d36e:	bf00      	nop
    d370:	33333333 	.word	0x33333333
    d374:	bfe33333 	.word	0xbfe33333

0000d378 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d378:	b580      	push	{r7, lr}
    d37a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d37c:	f64a 639e 	movw	r3, #44702	; 0xae9e
    d380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d384:	2203      	movs	r2, #3
    d386:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d388:	f64a 639c 	movw	r3, #44700	; 0xae9c
    d38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d390:	781b      	ldrb	r3, [r3, #0]
    d392:	2b03      	cmp	r3, #3
    d394:	d102      	bne.n	d39c <navigation_update+0x24>
    nav_home();
    d396:	f007 fa9b 	bl	148d0 <nav_home>
    d39a:	e001      	b.n	d3a0 <navigation_update+0x28>
  else
    nav_update();
    d39c:	f007 fabe 	bl	1491c <nav_update>
}
    d3a0:	bd80      	pop	{r7, pc}
    d3a2:	bf00      	nop

0000d3a4 <send_nav_values>:

void send_nav_values(void){
    d3a4:	b480      	push	{r7}
    d3a6:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d3a8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3b0:	781a      	ldrb	r2, [r3, #0]
    d3b2:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    d3b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ba:	781b      	ldrb	r3, [r3, #0]
    d3bc:	b2db      	uxtb	r3, r3
    d3be:	429a      	cmp	r2, r3
    d3c0:	d313      	bcc.n	d3ea <send_nav_values+0x46>
    d3c2:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    d3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ca:	781b      	ldrb	r3, [r3, #0]
    d3cc:	b2db      	uxtb	r3, r3
    d3ce:	461a      	mov	r2, r3
    d3d0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3d8:	781b      	ldrb	r3, [r3, #0]
    d3da:	1ad3      	subs	r3, r2, r3
    d3dc:	33ff      	adds	r3, #255	; 0xff
    d3de:	2b1e      	cmp	r3, #30
    d3e0:	bfd4      	ite	le
    d3e2:	2300      	movle	r3, #0
    d3e4:	2301      	movgt	r3, #1
    d3e6:	b2db      	uxtb	r3, r3
    d3e8:	e011      	b.n	d40e <send_nav_values+0x6a>
    d3ea:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    d3ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3f2:	781b      	ldrb	r3, [r3, #0]
    d3f4:	b2db      	uxtb	r3, r3
    d3f6:	461a      	mov	r2, r3
    d3f8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d400:	781b      	ldrb	r3, [r3, #0]
    d402:	1ad3      	subs	r3, r2, r3
    d404:	2b1e      	cmp	r3, #30
    d406:	bfd4      	ite	le
    d408:	2300      	movle	r3, #0
    d40a:	2301      	movgt	r3, #1
    d40c:	b2db      	uxtb	r3, r3
    d40e:	2b00      	cmp	r3, #0
    d410:	f001 8094 	beq.w	e53c <send_nav_values+0x1198>
    d414:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d41c:	781b      	ldrb	r3, [r3, #0]
    d41e:	461a      	mov	r2, r3
    d420:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d428:	2105      	movs	r1, #5
    d42a:	5499      	strb	r1, [r3, r2]
    d42c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d434:	781b      	ldrb	r3, [r3, #0]
    d436:	3301      	adds	r3, #1
    d438:	b2da      	uxtb	r2, r3
    d43a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d43e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d442:	701a      	strb	r2, [r3, #0]
    d444:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d44c:	781b      	ldrb	r3, [r3, #0]
    d44e:	2bff      	cmp	r3, #255	; 0xff
    d450:	d105      	bne.n	d45e <send_nav_values+0xba>
    d452:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d45a:	2200      	movs	r2, #0
    d45c:	701a      	strb	r2, [r3, #0]
    d45e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d466:	781b      	ldrb	r3, [r3, #0]
    d468:	461a      	mov	r2, r3
    d46a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d46e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d472:	210a      	movs	r1, #10
    d474:	5499      	strb	r1, [r3, r2]
    d476:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d47e:	781b      	ldrb	r3, [r3, #0]
    d480:	3301      	adds	r3, #1
    d482:	b2da      	uxtb	r2, r3
    d484:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d48c:	701a      	strb	r2, [r3, #0]
    d48e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d496:	781b      	ldrb	r3, [r3, #0]
    d498:	2bff      	cmp	r3, #255	; 0xff
    d49a:	d105      	bne.n	d4a8 <send_nav_values+0x104>
    d49c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d4a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4a4:	2200      	movs	r2, #0
    d4a6:	701a      	strb	r2, [r3, #0]
    d4a8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4b0:	220a      	movs	r2, #10
    d4b2:	701a      	strb	r2, [r3, #0]
    d4b4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d4b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4bc:	220a      	movs	r2, #10
    d4be:	701a      	strb	r2, [r3, #0]
    d4c0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4c8:	781b      	ldrb	r3, [r3, #0]
    d4ca:	461a      	mov	r2, r3
    d4cc:	f24b 2311 	movw	r3, #45585	; 0xb211
    d4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4d4:	7819      	ldrb	r1, [r3, #0]
    d4d6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4de:	5499      	strb	r1, [r3, r2]
    d4e0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4e8:	781a      	ldrb	r2, [r3, #0]
    d4ea:	f24b 2311 	movw	r3, #45585	; 0xb211
    d4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4f2:	781b      	ldrb	r3, [r3, #0]
    d4f4:	4413      	add	r3, r2
    d4f6:	b2da      	uxtb	r2, r3
    d4f8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d500:	701a      	strb	r2, [r3, #0]
    d502:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d50a:	781a      	ldrb	r2, [r3, #0]
    d50c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d514:	781b      	ldrb	r3, [r3, #0]
    d516:	4413      	add	r3, r2
    d518:	b2da      	uxtb	r2, r3
    d51a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d51e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d522:	701a      	strb	r2, [r3, #0]
    d524:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d52c:	781b      	ldrb	r3, [r3, #0]
    d52e:	3301      	adds	r3, #1
    d530:	b2da      	uxtb	r2, r3
    d532:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d53a:	701a      	strb	r2, [r3, #0]
    d53c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d544:	781b      	ldrb	r3, [r3, #0]
    d546:	2bff      	cmp	r3, #255	; 0xff
    d548:	d105      	bne.n	d556 <send_nav_values+0x1b2>
    d54a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d552:	2200      	movs	r2, #0
    d554:	701a      	strb	r2, [r3, #0]
    d556:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d55e:	781b      	ldrb	r3, [r3, #0]
    d560:	461a      	mov	r2, r3
    d562:	f24b 2310 	movw	r3, #45584	; 0xb210
    d566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d56a:	7819      	ldrb	r1, [r3, #0]
    d56c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d574:	5499      	strb	r1, [r3, r2]
    d576:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d57e:	781a      	ldrb	r2, [r3, #0]
    d580:	f24b 2310 	movw	r3, #45584	; 0xb210
    d584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d588:	781b      	ldrb	r3, [r3, #0]
    d58a:	4413      	add	r3, r2
    d58c:	b2da      	uxtb	r2, r3
    d58e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d596:	701a      	strb	r2, [r3, #0]
    d598:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5a0:	781a      	ldrb	r2, [r3, #0]
    d5a2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5aa:	781b      	ldrb	r3, [r3, #0]
    d5ac:	4413      	add	r3, r2
    d5ae:	b2da      	uxtb	r2, r3
    d5b0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5b8:	701a      	strb	r2, [r3, #0]
    d5ba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5c2:	781b      	ldrb	r3, [r3, #0]
    d5c4:	3301      	adds	r3, #1
    d5c6:	b2da      	uxtb	r2, r3
    d5c8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d0:	701a      	strb	r2, [r3, #0]
    d5d2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d5d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5da:	781b      	ldrb	r3, [r3, #0]
    d5dc:	2bff      	cmp	r3, #255	; 0xff
    d5de:	d105      	bne.n	d5ec <send_nav_values+0x248>
    d5e0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5e8:	2200      	movs	r2, #0
    d5ea:	701a      	strb	r2, [r3, #0]
    d5ec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d5f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f4:	781b      	ldrb	r3, [r3, #0]
    d5f6:	461a      	mov	r2, r3
    d5f8:	f24b 436c 	movw	r3, #46188	; 0xb46c
    d5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d600:	7819      	ldrb	r1, [r3, #0]
    d602:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d60a:	5499      	strb	r1, [r3, r2]
    d60c:	f24b 436c 	movw	r3, #46188	; 0xb46c
    d610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d614:	781a      	ldrb	r2, [r3, #0]
    d616:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d61e:	781b      	ldrb	r3, [r3, #0]
    d620:	4413      	add	r3, r2
    d622:	b2da      	uxtb	r2, r3
    d624:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d62c:	701a      	strb	r2, [r3, #0]
    d62e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d636:	781a      	ldrb	r2, [r3, #0]
    d638:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d640:	781b      	ldrb	r3, [r3, #0]
    d642:	4413      	add	r3, r2
    d644:	b2da      	uxtb	r2, r3
    d646:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d64e:	701a      	strb	r2, [r3, #0]
    d650:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d658:	781b      	ldrb	r3, [r3, #0]
    d65a:	3301      	adds	r3, #1
    d65c:	b2da      	uxtb	r2, r3
    d65e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d666:	701a      	strb	r2, [r3, #0]
    d668:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d670:	781b      	ldrb	r3, [r3, #0]
    d672:	2bff      	cmp	r3, #255	; 0xff
    d674:	d105      	bne.n	d682 <send_nav_values+0x2de>
    d676:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d67e:	2200      	movs	r2, #0
    d680:	701a      	strb	r2, [r3, #0]
    d682:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d68a:	781b      	ldrb	r3, [r3, #0]
    d68c:	461a      	mov	r2, r3
    d68e:	f24b 436c 	movw	r3, #46188	; 0xb46c
    d692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d696:	7859      	ldrb	r1, [r3, #1]
    d698:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d69c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6a0:	5499      	strb	r1, [r3, r2]
    d6a2:	4bd2      	ldr	r3, [pc, #840]	; (d9ec <send_nav_values+0x648>)
    d6a4:	781a      	ldrb	r2, [r3, #0]
    d6a6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ae:	781b      	ldrb	r3, [r3, #0]
    d6b0:	4413      	add	r3, r2
    d6b2:	b2da      	uxtb	r2, r3
    d6b4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6bc:	701a      	strb	r2, [r3, #0]
    d6be:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c6:	781a      	ldrb	r2, [r3, #0]
    d6c8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6d0:	781b      	ldrb	r3, [r3, #0]
    d6d2:	4413      	add	r3, r2
    d6d4:	b2da      	uxtb	r2, r3
    d6d6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d6da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6de:	701a      	strb	r2, [r3, #0]
    d6e0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6e8:	781b      	ldrb	r3, [r3, #0]
    d6ea:	3301      	adds	r3, #1
    d6ec:	b2da      	uxtb	r2, r3
    d6ee:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d6f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f6:	701a      	strb	r2, [r3, #0]
    d6f8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d6fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d700:	781b      	ldrb	r3, [r3, #0]
    d702:	2bff      	cmp	r3, #255	; 0xff
    d704:	d105      	bne.n	d712 <send_nav_values+0x36e>
    d706:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d70a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d70e:	2200      	movs	r2, #0
    d710:	701a      	strb	r2, [r3, #0]
    d712:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d71a:	781b      	ldrb	r3, [r3, #0]
    d71c:	461a      	mov	r2, r3
    d71e:	f24b 436c 	movw	r3, #46188	; 0xb46c
    d722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d726:	7899      	ldrb	r1, [r3, #2]
    d728:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d730:	5499      	strb	r1, [r3, r2]
    d732:	4baf      	ldr	r3, [pc, #700]	; (d9f0 <send_nav_values+0x64c>)
    d734:	781a      	ldrb	r2, [r3, #0]
    d736:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d73a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d73e:	781b      	ldrb	r3, [r3, #0]
    d740:	4413      	add	r3, r2
    d742:	b2da      	uxtb	r2, r3
    d744:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d74c:	701a      	strb	r2, [r3, #0]
    d74e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d756:	781a      	ldrb	r2, [r3, #0]
    d758:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d75c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d760:	781b      	ldrb	r3, [r3, #0]
    d762:	4413      	add	r3, r2
    d764:	b2da      	uxtb	r2, r3
    d766:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d76e:	701a      	strb	r2, [r3, #0]
    d770:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d778:	781b      	ldrb	r3, [r3, #0]
    d77a:	3301      	adds	r3, #1
    d77c:	b2da      	uxtb	r2, r3
    d77e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d786:	701a      	strb	r2, [r3, #0]
    d788:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d790:	781b      	ldrb	r3, [r3, #0]
    d792:	2bff      	cmp	r3, #255	; 0xff
    d794:	d105      	bne.n	d7a2 <send_nav_values+0x3fe>
    d796:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d79e:	2200      	movs	r2, #0
    d7a0:	701a      	strb	r2, [r3, #0]
    d7a2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7aa:	781b      	ldrb	r3, [r3, #0]
    d7ac:	461a      	mov	r2, r3
    d7ae:	f24b 436c 	movw	r3, #46188	; 0xb46c
    d7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7b6:	78d9      	ldrb	r1, [r3, #3]
    d7b8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c0:	5499      	strb	r1, [r3, r2]
    d7c2:	4b8c      	ldr	r3, [pc, #560]	; (d9f4 <send_nav_values+0x650>)
    d7c4:	781a      	ldrb	r2, [r3, #0]
    d7c6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ce:	781b      	ldrb	r3, [r3, #0]
    d7d0:	4413      	add	r3, r2
    d7d2:	b2da      	uxtb	r2, r3
    d7d4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7dc:	701a      	strb	r2, [r3, #0]
    d7de:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7e6:	781a      	ldrb	r2, [r3, #0]
    d7e8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d7ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f0:	781b      	ldrb	r3, [r3, #0]
    d7f2:	4413      	add	r3, r2
    d7f4:	b2da      	uxtb	r2, r3
    d7f6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d7fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7fe:	701a      	strb	r2, [r3, #0]
    d800:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d808:	781b      	ldrb	r3, [r3, #0]
    d80a:	3301      	adds	r3, #1
    d80c:	b2da      	uxtb	r2, r3
    d80e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d816:	701a      	strb	r2, [r3, #0]
    d818:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d81c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d820:	781b      	ldrb	r3, [r3, #0]
    d822:	2bff      	cmp	r3, #255	; 0xff
    d824:	d105      	bne.n	d832 <send_nav_values+0x48e>
    d826:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d82e:	2200      	movs	r2, #0
    d830:	701a      	strb	r2, [r3, #0]
    d832:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d83a:	781b      	ldrb	r3, [r3, #0]
    d83c:	461a      	mov	r2, r3
    d83e:	f24b 4370 	movw	r3, #46192	; 0xb470
    d842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d846:	7819      	ldrb	r1, [r3, #0]
    d848:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d850:	5499      	strb	r1, [r3, r2]
    d852:	f24b 4370 	movw	r3, #46192	; 0xb470
    d856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d85a:	781a      	ldrb	r2, [r3, #0]
    d85c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d864:	781b      	ldrb	r3, [r3, #0]
    d866:	4413      	add	r3, r2
    d868:	b2da      	uxtb	r2, r3
    d86a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d872:	701a      	strb	r2, [r3, #0]
    d874:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d87c:	781a      	ldrb	r2, [r3, #0]
    d87e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d886:	781b      	ldrb	r3, [r3, #0]
    d888:	4413      	add	r3, r2
    d88a:	b2da      	uxtb	r2, r3
    d88c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d894:	701a      	strb	r2, [r3, #0]
    d896:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d89a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d89e:	781b      	ldrb	r3, [r3, #0]
    d8a0:	3301      	adds	r3, #1
    d8a2:	b2da      	uxtb	r2, r3
    d8a4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d8a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8ac:	701a      	strb	r2, [r3, #0]
    d8ae:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b6:	781b      	ldrb	r3, [r3, #0]
    d8b8:	2bff      	cmp	r3, #255	; 0xff
    d8ba:	d105      	bne.n	d8c8 <send_nav_values+0x524>
    d8bc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8c4:	2200      	movs	r2, #0
    d8c6:	701a      	strb	r2, [r3, #0]
    d8c8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8d0:	781b      	ldrb	r3, [r3, #0]
    d8d2:	461a      	mov	r2, r3
    d8d4:	f24b 4370 	movw	r3, #46192	; 0xb470
    d8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8dc:	7859      	ldrb	r1, [r3, #1]
    d8de:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d8e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e6:	5499      	strb	r1, [r3, r2]
    d8e8:	4b43      	ldr	r3, [pc, #268]	; (d9f8 <send_nav_values+0x654>)
    d8ea:	781a      	ldrb	r2, [r3, #0]
    d8ec:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8f4:	781b      	ldrb	r3, [r3, #0]
    d8f6:	4413      	add	r3, r2
    d8f8:	b2da      	uxtb	r2, r3
    d8fa:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d902:	701a      	strb	r2, [r3, #0]
    d904:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d90c:	781a      	ldrb	r2, [r3, #0]
    d90e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d916:	781b      	ldrb	r3, [r3, #0]
    d918:	4413      	add	r3, r2
    d91a:	b2da      	uxtb	r2, r3
    d91c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d924:	701a      	strb	r2, [r3, #0]
    d926:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d92a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d92e:	781b      	ldrb	r3, [r3, #0]
    d930:	3301      	adds	r3, #1
    d932:	b2da      	uxtb	r2, r3
    d934:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d93c:	701a      	strb	r2, [r3, #0]
    d93e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d946:	781b      	ldrb	r3, [r3, #0]
    d948:	2bff      	cmp	r3, #255	; 0xff
    d94a:	d105      	bne.n	d958 <send_nav_values+0x5b4>
    d94c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d954:	2200      	movs	r2, #0
    d956:	701a      	strb	r2, [r3, #0]
    d958:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d960:	781b      	ldrb	r3, [r3, #0]
    d962:	461a      	mov	r2, r3
    d964:	f24b 4370 	movw	r3, #46192	; 0xb470
    d968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d96c:	7899      	ldrb	r1, [r3, #2]
    d96e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d976:	5499      	strb	r1, [r3, r2]
    d978:	4b20      	ldr	r3, [pc, #128]	; (d9fc <send_nav_values+0x658>)
    d97a:	781a      	ldrb	r2, [r3, #0]
    d97c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d984:	781b      	ldrb	r3, [r3, #0]
    d986:	4413      	add	r3, r2
    d988:	b2da      	uxtb	r2, r3
    d98a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d992:	701a      	strb	r2, [r3, #0]
    d994:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d99c:	781a      	ldrb	r2, [r3, #0]
    d99e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    d9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9a6:	781b      	ldrb	r3, [r3, #0]
    d9a8:	4413      	add	r3, r2
    d9aa:	b2da      	uxtb	r2, r3
    d9ac:	f64a 73be 	movw	r3, #44990	; 0xafbe
    d9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9b4:	701a      	strb	r2, [r3, #0]
    d9b6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9be:	781b      	ldrb	r3, [r3, #0]
    d9c0:	3301      	adds	r3, #1
    d9c2:	b2da      	uxtb	r2, r3
    d9c4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9cc:	701a      	strb	r2, [r3, #0]
    d9ce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d9d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9d6:	781b      	ldrb	r3, [r3, #0]
    d9d8:	2bff      	cmp	r3, #255	; 0xff
    d9da:	d111      	bne.n	da00 <send_nav_values+0x65c>
    d9dc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    d9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9e4:	2200      	movs	r2, #0
    d9e6:	701a      	strb	r2, [r3, #0]
    d9e8:	e00a      	b.n	da00 <send_nav_values+0x65c>
    d9ea:	bf00      	nop
    d9ec:	2000b46d 	.word	0x2000b46d
    d9f0:	2000b46e 	.word	0x2000b46e
    d9f4:	2000b46f 	.word	0x2000b46f
    d9f8:	2000b471 	.word	0x2000b471
    d9fc:	2000b472 	.word	0x2000b472
    da00:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    da04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da08:	781b      	ldrb	r3, [r3, #0]
    da0a:	461a      	mov	r2, r3
    da0c:	f24b 4370 	movw	r3, #46192	; 0xb470
    da10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da14:	78d9      	ldrb	r1, [r3, #3]
    da16:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    da1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da1e:	5499      	strb	r1, [r3, r2]
    da20:	4bd3      	ldr	r3, [pc, #844]	; (dd70 <send_nav_values+0x9cc>)
    da22:	781a      	ldrb	r2, [r3, #0]
    da24:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    da28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da2c:	781b      	ldrb	r3, [r3, #0]
    da2e:	4413      	add	r3, r2
    da30:	b2da      	uxtb	r2, r3
    da32:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    da36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da3a:	701a      	strb	r2, [r3, #0]
    da3c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    da40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da44:	781a      	ldrb	r2, [r3, #0]
    da46:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    da4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da4e:	781b      	ldrb	r3, [r3, #0]
    da50:	4413      	add	r3, r2
    da52:	b2da      	uxtb	r2, r3
    da54:	f64a 73be 	movw	r3, #44990	; 0xafbe
    da58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da5c:	701a      	strb	r2, [r3, #0]
    da5e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    da62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da66:	781b      	ldrb	r3, [r3, #0]
    da68:	3301      	adds	r3, #1
    da6a:	b2da      	uxtb	r2, r3
    da6c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    da70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da74:	701a      	strb	r2, [r3, #0]
    da76:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    da7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da7e:	781b      	ldrb	r3, [r3, #0]
    da80:	2bff      	cmp	r3, #255	; 0xff
    da82:	d105      	bne.n	da90 <send_nav_values+0x6ec>
    da84:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    da88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da8c:	2200      	movs	r2, #0
    da8e:	701a      	strb	r2, [r3, #0]
    da90:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    da94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da98:	781b      	ldrb	r3, [r3, #0]
    da9a:	461a      	mov	r2, r3
    da9c:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    daa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daa4:	7819      	ldrb	r1, [r3, #0]
    daa6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    daaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daae:	5499      	strb	r1, [r3, r2]
    dab0:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    dab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dab8:	781a      	ldrb	r2, [r3, #0]
    daba:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dac2:	781b      	ldrb	r3, [r3, #0]
    dac4:	4413      	add	r3, r2
    dac6:	b2da      	uxtb	r2, r3
    dac8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dacc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dad0:	701a      	strb	r2, [r3, #0]
    dad2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    dad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dada:	781a      	ldrb	r2, [r3, #0]
    dadc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dae4:	781b      	ldrb	r3, [r3, #0]
    dae6:	4413      	add	r3, r2
    dae8:	b2da      	uxtb	r2, r3
    daea:	f64a 73be 	movw	r3, #44990	; 0xafbe
    daee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daf2:	701a      	strb	r2, [r3, #0]
    daf4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    daf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dafc:	781b      	ldrb	r3, [r3, #0]
    dafe:	3301      	adds	r3, #1
    db00:	b2da      	uxtb	r2, r3
    db02:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    db06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db0a:	701a      	strb	r2, [r3, #0]
    db0c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    db10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db14:	781b      	ldrb	r3, [r3, #0]
    db16:	2bff      	cmp	r3, #255	; 0xff
    db18:	d105      	bne.n	db26 <send_nav_values+0x782>
    db1a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    db1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db22:	2200      	movs	r2, #0
    db24:	701a      	strb	r2, [r3, #0]
    db26:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    db2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db2e:	781b      	ldrb	r3, [r3, #0]
    db30:	461a      	mov	r2, r3
    db32:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    db36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db3a:	7859      	ldrb	r1, [r3, #1]
    db3c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    db40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db44:	5499      	strb	r1, [r3, r2]
    db46:	4b8b      	ldr	r3, [pc, #556]	; (dd74 <send_nav_values+0x9d0>)
    db48:	781a      	ldrb	r2, [r3, #0]
    db4a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    db4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db52:	781b      	ldrb	r3, [r3, #0]
    db54:	4413      	add	r3, r2
    db56:	b2da      	uxtb	r2, r3
    db58:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    db5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db60:	701a      	strb	r2, [r3, #0]
    db62:	f64a 73be 	movw	r3, #44990	; 0xafbe
    db66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db6a:	781a      	ldrb	r2, [r3, #0]
    db6c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    db70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db74:	781b      	ldrb	r3, [r3, #0]
    db76:	4413      	add	r3, r2
    db78:	b2da      	uxtb	r2, r3
    db7a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    db7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db82:	701a      	strb	r2, [r3, #0]
    db84:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    db88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db8c:	781b      	ldrb	r3, [r3, #0]
    db8e:	3301      	adds	r3, #1
    db90:	b2da      	uxtb	r2, r3
    db92:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    db96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db9a:	701a      	strb	r2, [r3, #0]
    db9c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dba4:	781b      	ldrb	r3, [r3, #0]
    dba6:	2bff      	cmp	r3, #255	; 0xff
    dba8:	d105      	bne.n	dbb6 <send_nav_values+0x812>
    dbaa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dbae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbb2:	2200      	movs	r2, #0
    dbb4:	701a      	strb	r2, [r3, #0]
    dbb6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dbba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbbe:	781b      	ldrb	r3, [r3, #0]
    dbc0:	461a      	mov	r2, r3
    dbc2:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    dbc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbca:	7899      	ldrb	r1, [r3, #2]
    dbcc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    dbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbd4:	5499      	strb	r1, [r3, r2]
    dbd6:	4b68      	ldr	r3, [pc, #416]	; (dd78 <send_nav_values+0x9d4>)
    dbd8:	781a      	ldrb	r2, [r3, #0]
    dbda:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbe2:	781b      	ldrb	r3, [r3, #0]
    dbe4:	4413      	add	r3, r2
    dbe6:	b2da      	uxtb	r2, r3
    dbe8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dbec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbf0:	701a      	strb	r2, [r3, #0]
    dbf2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    dbf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbfa:	781a      	ldrb	r2, [r3, #0]
    dbfc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc04:	781b      	ldrb	r3, [r3, #0]
    dc06:	4413      	add	r3, r2
    dc08:	b2da      	uxtb	r2, r3
    dc0a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    dc0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc12:	701a      	strb	r2, [r3, #0]
    dc14:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc1c:	781b      	ldrb	r3, [r3, #0]
    dc1e:	3301      	adds	r3, #1
    dc20:	b2da      	uxtb	r2, r3
    dc22:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc2a:	701a      	strb	r2, [r3, #0]
    dc2c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc34:	781b      	ldrb	r3, [r3, #0]
    dc36:	2bff      	cmp	r3, #255	; 0xff
    dc38:	d105      	bne.n	dc46 <send_nav_values+0x8a2>
    dc3a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dc3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc42:	2200      	movs	r2, #0
    dc44:	701a      	strb	r2, [r3, #0]
    dc46:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dc4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc4e:	781b      	ldrb	r3, [r3, #0]
    dc50:	461a      	mov	r2, r3
    dc52:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    dc56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc5a:	78d9      	ldrb	r1, [r3, #3]
    dc5c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    dc60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc64:	5499      	strb	r1, [r3, r2]
    dc66:	4b45      	ldr	r3, [pc, #276]	; (dd7c <send_nav_values+0x9d8>)
    dc68:	781a      	ldrb	r2, [r3, #0]
    dc6a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dc6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc72:	781b      	ldrb	r3, [r3, #0]
    dc74:	4413      	add	r3, r2
    dc76:	b2da      	uxtb	r2, r3
    dc78:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dc7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc80:	701a      	strb	r2, [r3, #0]
    dc82:	f64a 73be 	movw	r3, #44990	; 0xafbe
    dc86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc8a:	781a      	ldrb	r2, [r3, #0]
    dc8c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dc90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc94:	781b      	ldrb	r3, [r3, #0]
    dc96:	4413      	add	r3, r2
    dc98:	b2da      	uxtb	r2, r3
    dc9a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    dc9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dca2:	701a      	strb	r2, [r3, #0]
    dca4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcac:	781b      	ldrb	r3, [r3, #0]
    dcae:	3301      	adds	r3, #1
    dcb0:	b2da      	uxtb	r2, r3
    dcb2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dcb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcba:	701a      	strb	r2, [r3, #0]
    dcbc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dcc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcc4:	781b      	ldrb	r3, [r3, #0]
    dcc6:	2bff      	cmp	r3, #255	; 0xff
    dcc8:	d105      	bne.n	dcd6 <send_nav_values+0x932>
    dcca:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dcce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcd2:	2200      	movs	r2, #0
    dcd4:	701a      	strb	r2, [r3, #0]
    dcd6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dcda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcde:	781b      	ldrb	r3, [r3, #0]
    dce0:	461a      	mov	r2, r3
    dce2:	f24b 2344 	movw	r3, #45636	; 0xb244
    dce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcea:	7819      	ldrb	r1, [r3, #0]
    dcec:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    dcf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcf4:	5499      	strb	r1, [r3, r2]
    dcf6:	f24b 2344 	movw	r3, #45636	; 0xb244
    dcfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcfe:	781a      	ldrb	r2, [r3, #0]
    dd00:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dd04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd08:	781b      	ldrb	r3, [r3, #0]
    dd0a:	4413      	add	r3, r2
    dd0c:	b2da      	uxtb	r2, r3
    dd0e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dd12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd16:	701a      	strb	r2, [r3, #0]
    dd18:	f64a 73be 	movw	r3, #44990	; 0xafbe
    dd1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd20:	781a      	ldrb	r2, [r3, #0]
    dd22:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dd26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd2a:	781b      	ldrb	r3, [r3, #0]
    dd2c:	4413      	add	r3, r2
    dd2e:	b2da      	uxtb	r2, r3
    dd30:	f64a 73be 	movw	r3, #44990	; 0xafbe
    dd34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd38:	701a      	strb	r2, [r3, #0]
    dd3a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dd3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd42:	781b      	ldrb	r3, [r3, #0]
    dd44:	3301      	adds	r3, #1
    dd46:	b2da      	uxtb	r2, r3
    dd48:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dd4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd50:	701a      	strb	r2, [r3, #0]
    dd52:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dd56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd5a:	781b      	ldrb	r3, [r3, #0]
    dd5c:	2bff      	cmp	r3, #255	; 0xff
    dd5e:	d10f      	bne.n	dd80 <send_nav_values+0x9dc>
    dd60:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dd64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd68:	2200      	movs	r2, #0
    dd6a:	701a      	strb	r2, [r3, #0]
    dd6c:	e008      	b.n	dd80 <send_nav_values+0x9dc>
    dd6e:	bf00      	nop
    dd70:	2000b473 	.word	0x2000b473
    dd74:	2000b1fd 	.word	0x2000b1fd
    dd78:	2000b1fe 	.word	0x2000b1fe
    dd7c:	2000b1ff 	.word	0x2000b1ff
    dd80:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dd84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd88:	781b      	ldrb	r3, [r3, #0]
    dd8a:	461a      	mov	r2, r3
    dd8c:	f24b 2344 	movw	r3, #45636	; 0xb244
    dd90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd94:	7859      	ldrb	r1, [r3, #1]
    dd96:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    dd9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd9e:	5499      	strb	r1, [r3, r2]
    dda0:	4bd1      	ldr	r3, [pc, #836]	; (e0e8 <send_nav_values+0xd44>)
    dda2:	781a      	ldrb	r2, [r3, #0]
    dda4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddac:	781b      	ldrb	r3, [r3, #0]
    ddae:	4413      	add	r3, r2
    ddb0:	b2da      	uxtb	r2, r3
    ddb2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ddb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddba:	701a      	strb	r2, [r3, #0]
    ddbc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ddc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddc4:	781a      	ldrb	r2, [r3, #0]
    ddc6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ddca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddce:	781b      	ldrb	r3, [r3, #0]
    ddd0:	4413      	add	r3, r2
    ddd2:	b2da      	uxtb	r2, r3
    ddd4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ddd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dddc:	701a      	strb	r2, [r3, #0]
    ddde:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dde2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde6:	781b      	ldrb	r3, [r3, #0]
    dde8:	3301      	adds	r3, #1
    ddea:	b2da      	uxtb	r2, r3
    ddec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ddf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddf4:	701a      	strb	r2, [r3, #0]
    ddf6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ddfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddfe:	781b      	ldrb	r3, [r3, #0]
    de00:	2bff      	cmp	r3, #255	; 0xff
    de02:	d105      	bne.n	de10 <send_nav_values+0xa6c>
    de04:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    de08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de0c:	2200      	movs	r2, #0
    de0e:	701a      	strb	r2, [r3, #0]
    de10:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    de14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de18:	781b      	ldrb	r3, [r3, #0]
    de1a:	461a      	mov	r2, r3
    de1c:	f24b 2344 	movw	r3, #45636	; 0xb244
    de20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de24:	7899      	ldrb	r1, [r3, #2]
    de26:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    de2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de2e:	5499      	strb	r1, [r3, r2]
    de30:	4bae      	ldr	r3, [pc, #696]	; (e0ec <send_nav_values+0xd48>)
    de32:	781a      	ldrb	r2, [r3, #0]
    de34:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    de38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de3c:	781b      	ldrb	r3, [r3, #0]
    de3e:	4413      	add	r3, r2
    de40:	b2da      	uxtb	r2, r3
    de42:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    de46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de4a:	701a      	strb	r2, [r3, #0]
    de4c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    de50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de54:	781a      	ldrb	r2, [r3, #0]
    de56:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    de5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de5e:	781b      	ldrb	r3, [r3, #0]
    de60:	4413      	add	r3, r2
    de62:	b2da      	uxtb	r2, r3
    de64:	f64a 73be 	movw	r3, #44990	; 0xafbe
    de68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de6c:	701a      	strb	r2, [r3, #0]
    de6e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    de72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de76:	781b      	ldrb	r3, [r3, #0]
    de78:	3301      	adds	r3, #1
    de7a:	b2da      	uxtb	r2, r3
    de7c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    de80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de84:	701a      	strb	r2, [r3, #0]
    de86:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    de8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de8e:	781b      	ldrb	r3, [r3, #0]
    de90:	2bff      	cmp	r3, #255	; 0xff
    de92:	d105      	bne.n	dea0 <send_nav_values+0xafc>
    de94:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    de98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de9c:	2200      	movs	r2, #0
    de9e:	701a      	strb	r2, [r3, #0]
    dea0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dea8:	781b      	ldrb	r3, [r3, #0]
    deaa:	461a      	mov	r2, r3
    deac:	f24b 2344 	movw	r3, #45636	; 0xb244
    deb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deb4:	78d9      	ldrb	r1, [r3, #3]
    deb6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    deba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    debe:	5499      	strb	r1, [r3, r2]
    dec0:	4b8b      	ldr	r3, [pc, #556]	; (e0f0 <send_nav_values+0xd4c>)
    dec2:	781a      	ldrb	r2, [r3, #0]
    dec4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    decc:	781b      	ldrb	r3, [r3, #0]
    dece:	4413      	add	r3, r2
    ded0:	b2da      	uxtb	r2, r3
    ded2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ded6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deda:	701a      	strb	r2, [r3, #0]
    dedc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    dee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dee4:	781a      	ldrb	r2, [r3, #0]
    dee6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    deea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deee:	781b      	ldrb	r3, [r3, #0]
    def0:	4413      	add	r3, r2
    def2:	b2da      	uxtb	r2, r3
    def4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    def8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    defc:	701a      	strb	r2, [r3, #0]
    defe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    df02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df06:	781b      	ldrb	r3, [r3, #0]
    df08:	3301      	adds	r3, #1
    df0a:	b2da      	uxtb	r2, r3
    df0c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    df10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df14:	701a      	strb	r2, [r3, #0]
    df16:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    df1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df1e:	781b      	ldrb	r3, [r3, #0]
    df20:	2bff      	cmp	r3, #255	; 0xff
    df22:	d105      	bne.n	df30 <send_nav_values+0xb8c>
    df24:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    df28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df2c:	2200      	movs	r2, #0
    df2e:	701a      	strb	r2, [r3, #0]
    df30:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    df34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df38:	781b      	ldrb	r3, [r3, #0]
    df3a:	461a      	mov	r2, r3
    df3c:	f240 4308 	movw	r3, #1032	; 0x408
    df40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df44:	7819      	ldrb	r1, [r3, #0]
    df46:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    df4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df4e:	5499      	strb	r1, [r3, r2]
    df50:	f240 4308 	movw	r3, #1032	; 0x408
    df54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df58:	781a      	ldrb	r2, [r3, #0]
    df5a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    df5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df62:	781b      	ldrb	r3, [r3, #0]
    df64:	4413      	add	r3, r2
    df66:	b2da      	uxtb	r2, r3
    df68:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    df6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df70:	701a      	strb	r2, [r3, #0]
    df72:	f64a 73be 	movw	r3, #44990	; 0xafbe
    df76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df7a:	781a      	ldrb	r2, [r3, #0]
    df7c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    df80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df84:	781b      	ldrb	r3, [r3, #0]
    df86:	4413      	add	r3, r2
    df88:	b2da      	uxtb	r2, r3
    df8a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    df8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df92:	701a      	strb	r2, [r3, #0]
    df94:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    df98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df9c:	781b      	ldrb	r3, [r3, #0]
    df9e:	3301      	adds	r3, #1
    dfa0:	b2da      	uxtb	r2, r3
    dfa2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dfa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfaa:	701a      	strb	r2, [r3, #0]
    dfac:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dfb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfb4:	781b      	ldrb	r3, [r3, #0]
    dfb6:	2bff      	cmp	r3, #255	; 0xff
    dfb8:	d105      	bne.n	dfc6 <send_nav_values+0xc22>
    dfba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dfbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfc2:	2200      	movs	r2, #0
    dfc4:	701a      	strb	r2, [r3, #0]
    dfc6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    dfca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfce:	781b      	ldrb	r3, [r3, #0]
    dfd0:	461a      	mov	r2, r3
    dfd2:	f240 4308 	movw	r3, #1032	; 0x408
    dfd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfda:	7859      	ldrb	r1, [r3, #1]
    dfdc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    dfe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfe4:	5499      	strb	r1, [r3, r2]
    dfe6:	4b43      	ldr	r3, [pc, #268]	; (e0f4 <send_nav_values+0xd50>)
    dfe8:	781a      	ldrb	r2, [r3, #0]
    dfea:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dfee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dff2:	781b      	ldrb	r3, [r3, #0]
    dff4:	4413      	add	r3, r2
    dff6:	b2da      	uxtb	r2, r3
    dff8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    dffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e000:	701a      	strb	r2, [r3, #0]
    e002:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e00a:	781a      	ldrb	r2, [r3, #0]
    e00c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e014:	781b      	ldrb	r3, [r3, #0]
    e016:	4413      	add	r3, r2
    e018:	b2da      	uxtb	r2, r3
    e01a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e01e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e022:	701a      	strb	r2, [r3, #0]
    e024:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e02c:	781b      	ldrb	r3, [r3, #0]
    e02e:	3301      	adds	r3, #1
    e030:	b2da      	uxtb	r2, r3
    e032:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e03a:	701a      	strb	r2, [r3, #0]
    e03c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e044:	781b      	ldrb	r3, [r3, #0]
    e046:	2bff      	cmp	r3, #255	; 0xff
    e048:	d105      	bne.n	e056 <send_nav_values+0xcb2>
    e04a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e04e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e052:	2200      	movs	r2, #0
    e054:	701a      	strb	r2, [r3, #0]
    e056:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e05e:	781b      	ldrb	r3, [r3, #0]
    e060:	461a      	mov	r2, r3
    e062:	f240 4308 	movw	r3, #1032	; 0x408
    e066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e06a:	7899      	ldrb	r1, [r3, #2]
    e06c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e074:	5499      	strb	r1, [r3, r2]
    e076:	4b20      	ldr	r3, [pc, #128]	; (e0f8 <send_nav_values+0xd54>)
    e078:	781a      	ldrb	r2, [r3, #0]
    e07a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e082:	781b      	ldrb	r3, [r3, #0]
    e084:	4413      	add	r3, r2
    e086:	b2da      	uxtb	r2, r3
    e088:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e090:	701a      	strb	r2, [r3, #0]
    e092:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e09a:	781a      	ldrb	r2, [r3, #0]
    e09c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0a4:	781b      	ldrb	r3, [r3, #0]
    e0a6:	4413      	add	r3, r2
    e0a8:	b2da      	uxtb	r2, r3
    e0aa:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0b2:	701a      	strb	r2, [r3, #0]
    e0b4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0bc:	781b      	ldrb	r3, [r3, #0]
    e0be:	3301      	adds	r3, #1
    e0c0:	b2da      	uxtb	r2, r3
    e0c2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ca:	701a      	strb	r2, [r3, #0]
    e0cc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0d4:	781b      	ldrb	r3, [r3, #0]
    e0d6:	2bff      	cmp	r3, #255	; 0xff
    e0d8:	d110      	bne.n	e0fc <send_nav_values+0xd58>
    e0da:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e2:	2200      	movs	r2, #0
    e0e4:	701a      	strb	r2, [r3, #0]
    e0e6:	e009      	b.n	e0fc <send_nav_values+0xd58>
    e0e8:	2000b245 	.word	0x2000b245
    e0ec:	2000b246 	.word	0x2000b246
    e0f0:	2000b247 	.word	0x2000b247
    e0f4:	20000409 	.word	0x20000409
    e0f8:	2000040a 	.word	0x2000040a
    e0fc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e104:	781b      	ldrb	r3, [r3, #0]
    e106:	461a      	mov	r2, r3
    e108:	f240 4308 	movw	r3, #1032	; 0x408
    e10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e110:	78d9      	ldrb	r1, [r3, #3]
    e112:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e11a:	5499      	strb	r1, [r3, r2]
    e11c:	4bc2      	ldr	r3, [pc, #776]	; (e428 <send_nav_values+0x1084>)
    e11e:	781a      	ldrb	r2, [r3, #0]
    e120:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e128:	781b      	ldrb	r3, [r3, #0]
    e12a:	4413      	add	r3, r2
    e12c:	b2da      	uxtb	r2, r3
    e12e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e136:	701a      	strb	r2, [r3, #0]
    e138:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e140:	781a      	ldrb	r2, [r3, #0]
    e142:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e14a:	781b      	ldrb	r3, [r3, #0]
    e14c:	4413      	add	r3, r2
    e14e:	b2da      	uxtb	r2, r3
    e150:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e158:	701a      	strb	r2, [r3, #0]
    e15a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e162:	781b      	ldrb	r3, [r3, #0]
    e164:	3301      	adds	r3, #1
    e166:	b2da      	uxtb	r2, r3
    e168:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e170:	701a      	strb	r2, [r3, #0]
    e172:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e17a:	781b      	ldrb	r3, [r3, #0]
    e17c:	2bff      	cmp	r3, #255	; 0xff
    e17e:	d105      	bne.n	e18c <send_nav_values+0xde8>
    e180:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e188:	2200      	movs	r2, #0
    e18a:	701a      	strb	r2, [r3, #0]
    e18c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e194:	781b      	ldrb	r3, [r3, #0]
    e196:	461a      	mov	r2, r3
    e198:	f24b 2348 	movw	r3, #45640	; 0xb248
    e19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1a0:	7819      	ldrb	r1, [r3, #0]
    e1a2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1aa:	5499      	strb	r1, [r3, r2]
    e1ac:	f24b 2348 	movw	r3, #45640	; 0xb248
    e1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1b4:	781a      	ldrb	r2, [r3, #0]
    e1b6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1be:	781b      	ldrb	r3, [r3, #0]
    e1c0:	4413      	add	r3, r2
    e1c2:	b2da      	uxtb	r2, r3
    e1c4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1cc:	701a      	strb	r2, [r3, #0]
    e1ce:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1d6:	781a      	ldrb	r2, [r3, #0]
    e1d8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1e0:	781b      	ldrb	r3, [r3, #0]
    e1e2:	4413      	add	r3, r2
    e1e4:	b2da      	uxtb	r2, r3
    e1e6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ee:	701a      	strb	r2, [r3, #0]
    e1f0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f8:	781b      	ldrb	r3, [r3, #0]
    e1fa:	3301      	adds	r3, #1
    e1fc:	b2da      	uxtb	r2, r3
    e1fe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e206:	701a      	strb	r2, [r3, #0]
    e208:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e210:	781b      	ldrb	r3, [r3, #0]
    e212:	2bff      	cmp	r3, #255	; 0xff
    e214:	d105      	bne.n	e222 <send_nav_values+0xe7e>
    e216:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e21e:	2200      	movs	r2, #0
    e220:	701a      	strb	r2, [r3, #0]
    e222:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e22a:	781b      	ldrb	r3, [r3, #0]
    e22c:	461a      	mov	r2, r3
    e22e:	f24b 2348 	movw	r3, #45640	; 0xb248
    e232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e236:	7859      	ldrb	r1, [r3, #1]
    e238:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e240:	5499      	strb	r1, [r3, r2]
    e242:	4b7a      	ldr	r3, [pc, #488]	; (e42c <send_nav_values+0x1088>)
    e244:	781a      	ldrb	r2, [r3, #0]
    e246:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e24e:	781b      	ldrb	r3, [r3, #0]
    e250:	4413      	add	r3, r2
    e252:	b2da      	uxtb	r2, r3
    e254:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e25c:	701a      	strb	r2, [r3, #0]
    e25e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e266:	781a      	ldrb	r2, [r3, #0]
    e268:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e270:	781b      	ldrb	r3, [r3, #0]
    e272:	4413      	add	r3, r2
    e274:	b2da      	uxtb	r2, r3
    e276:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e27e:	701a      	strb	r2, [r3, #0]
    e280:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e288:	781b      	ldrb	r3, [r3, #0]
    e28a:	3301      	adds	r3, #1
    e28c:	b2da      	uxtb	r2, r3
    e28e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e296:	701a      	strb	r2, [r3, #0]
    e298:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2a0:	781b      	ldrb	r3, [r3, #0]
    e2a2:	2bff      	cmp	r3, #255	; 0xff
    e2a4:	d105      	bne.n	e2b2 <send_nav_values+0xf0e>
    e2a6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ae:	2200      	movs	r2, #0
    e2b0:	701a      	strb	r2, [r3, #0]
    e2b2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ba:	781b      	ldrb	r3, [r3, #0]
    e2bc:	461a      	mov	r2, r3
    e2be:	f24b 2348 	movw	r3, #45640	; 0xb248
    e2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2c6:	7899      	ldrb	r1, [r3, #2]
    e2c8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2d0:	5499      	strb	r1, [r3, r2]
    e2d2:	4b57      	ldr	r3, [pc, #348]	; (e430 <send_nav_values+0x108c>)
    e2d4:	781a      	ldrb	r2, [r3, #0]
    e2d6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2de:	781b      	ldrb	r3, [r3, #0]
    e2e0:	4413      	add	r3, r2
    e2e2:	b2da      	uxtb	r2, r3
    e2e4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ec:	701a      	strb	r2, [r3, #0]
    e2ee:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f6:	781a      	ldrb	r2, [r3, #0]
    e2f8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e300:	781b      	ldrb	r3, [r3, #0]
    e302:	4413      	add	r3, r2
    e304:	b2da      	uxtb	r2, r3
    e306:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e30e:	701a      	strb	r2, [r3, #0]
    e310:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e318:	781b      	ldrb	r3, [r3, #0]
    e31a:	3301      	adds	r3, #1
    e31c:	b2da      	uxtb	r2, r3
    e31e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e326:	701a      	strb	r2, [r3, #0]
    e328:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e330:	781b      	ldrb	r3, [r3, #0]
    e332:	2bff      	cmp	r3, #255	; 0xff
    e334:	d105      	bne.n	e342 <send_nav_values+0xf9e>
    e336:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e33e:	2200      	movs	r2, #0
    e340:	701a      	strb	r2, [r3, #0]
    e342:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e34a:	781b      	ldrb	r3, [r3, #0]
    e34c:	461a      	mov	r2, r3
    e34e:	f24b 2348 	movw	r3, #45640	; 0xb248
    e352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e356:	78d9      	ldrb	r1, [r3, #3]
    e358:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e360:	5499      	strb	r1, [r3, r2]
    e362:	4b34      	ldr	r3, [pc, #208]	; (e434 <send_nav_values+0x1090>)
    e364:	781a      	ldrb	r2, [r3, #0]
    e366:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e36e:	781b      	ldrb	r3, [r3, #0]
    e370:	4413      	add	r3, r2
    e372:	b2da      	uxtb	r2, r3
    e374:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e37c:	701a      	strb	r2, [r3, #0]
    e37e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e386:	781a      	ldrb	r2, [r3, #0]
    e388:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e390:	781b      	ldrb	r3, [r3, #0]
    e392:	4413      	add	r3, r2
    e394:	b2da      	uxtb	r2, r3
    e396:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e39e:	701a      	strb	r2, [r3, #0]
    e3a0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3a8:	781b      	ldrb	r3, [r3, #0]
    e3aa:	3301      	adds	r3, #1
    e3ac:	b2da      	uxtb	r2, r3
    e3ae:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e3b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3b6:	701a      	strb	r2, [r3, #0]
    e3b8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c0:	781b      	ldrb	r3, [r3, #0]
    e3c2:	2bff      	cmp	r3, #255	; 0xff
    e3c4:	d105      	bne.n	e3d2 <send_nav_values+0x102e>
    e3c6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3ce:	2200      	movs	r2, #0
    e3d0:	701a      	strb	r2, [r3, #0]
    e3d2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e3d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3da:	781b      	ldrb	r3, [r3, #0]
    e3dc:	461a      	mov	r2, r3
    e3de:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e3e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3e6:	7819      	ldrb	r1, [r3, #0]
    e3e8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3f0:	5499      	strb	r1, [r3, r2]
    e3f2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e3f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3fa:	781b      	ldrb	r3, [r3, #0]
    e3fc:	3301      	adds	r3, #1
    e3fe:	b2da      	uxtb	r2, r3
    e400:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e408:	701a      	strb	r2, [r3, #0]
    e40a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e412:	781b      	ldrb	r3, [r3, #0]
    e414:	2bff      	cmp	r3, #255	; 0xff
    e416:	d10f      	bne.n	e438 <send_nav_values+0x1094>
    e418:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e420:	2200      	movs	r2, #0
    e422:	701a      	strb	r2, [r3, #0]
    e424:	e008      	b.n	e438 <send_nav_values+0x1094>
    e426:	bf00      	nop
    e428:	2000040b 	.word	0x2000040b
    e42c:	2000b249 	.word	0x2000b249
    e430:	2000b24a 	.word	0x2000b24a
    e434:	2000b24b 	.word	0x2000b24b
    e438:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e440:	781b      	ldrb	r3, [r3, #0]
    e442:	461a      	mov	r2, r3
    e444:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e44c:	7819      	ldrb	r1, [r3, #0]
    e44e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e456:	5499      	strb	r1, [r3, r2]
    e458:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e460:	781b      	ldrb	r3, [r3, #0]
    e462:	3301      	adds	r3, #1
    e464:	b2da      	uxtb	r2, r3
    e466:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e46e:	701a      	strb	r2, [r3, #0]
    e470:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e478:	781b      	ldrb	r3, [r3, #0]
    e47a:	2bff      	cmp	r3, #255	; 0xff
    e47c:	d105      	bne.n	e48a <send_nav_values+0x10e6>
    e47e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e486:	2200      	movs	r2, #0
    e488:	701a      	strb	r2, [r3, #0]
    e48a:	f242 0339 	movw	r3, #8249	; 0x2039
    e48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e492:	781b      	ldrb	r3, [r3, #0]
    e494:	b2db      	uxtb	r3, r3
    e496:	f003 0310 	and.w	r3, r3, #16
    e49a:	2b00      	cmp	r3, #0
    e49c:	d15a      	bne.n	e554 <send_nav_values+0x11b0>
    e49e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    e4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4a6:	781b      	ldrb	r3, [r3, #0]
    e4a8:	b2db      	uxtb	r3, r3
    e4aa:	461a      	mov	r2, r3
    e4ac:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4b4:	5c9a      	ldrb	r2, [r3, r2]
    e4b6:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    e4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4be:	701a      	strb	r2, [r3, #0]
    e4c0:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    e4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4c8:	2200      	movs	r2, #0
    e4ca:	701a      	strb	r2, [r3, #0]
    e4cc:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    e4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4d4:	781b      	ldrb	r3, [r3, #0]
    e4d6:	b2db      	uxtb	r3, r3
    e4d8:	3301      	adds	r3, #1
    e4da:	b2da      	uxtb	r2, r3
    e4dc:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    e4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4e4:	701a      	strb	r2, [r3, #0]
    e4e6:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    e4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ee:	781b      	ldrb	r3, [r3, #0]
    e4f0:	b2db      	uxtb	r3, r3
    e4f2:	2bff      	cmp	r3, #255	; 0xff
    e4f4:	d105      	bne.n	e502 <send_nav_values+0x115e>
    e4f6:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    e4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4fe:	2200      	movs	r2, #0
    e500:	701a      	strb	r2, [r3, #0]
    e502:	f242 0338 	movw	r3, #8248	; 0x2038
    e506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e50a:	f242 0238 	movw	r2, #8248	; 0x2038
    e50e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e512:	7812      	ldrb	r2, [r2, #0]
    e514:	b2d2      	uxtb	r2, r2
    e516:	f042 0201 	orr.w	r2, r2, #1
    e51a:	b2d2      	uxtb	r2, r2
    e51c:	701a      	strb	r2, [r3, #0]
    e51e:	f242 0339 	movw	r3, #8249	; 0x2039
    e522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e526:	f242 0239 	movw	r2, #8249	; 0x2039
    e52a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e52e:	7812      	ldrb	r2, [r2, #0]
    e530:	b2d2      	uxtb	r2, r2
    e532:	f042 0210 	orr.w	r2, r2, #16
    e536:	b2d2      	uxtb	r2, r2
    e538:	701a      	strb	r2, [r3, #0]
    e53a:	e00b      	b.n	e554 <send_nav_values+0x11b0>
    e53c:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    e540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e544:	781b      	ldrb	r3, [r3, #0]
    e546:	3301      	adds	r3, #1
    e548:	b2da      	uxtb	r2, r3
    e54a:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    e54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e552:	701a      	strb	r2, [r3, #0]
}
    e554:	46bd      	mov	sp, r7
    e556:	f85d 7b04 	ldr.w	r7, [sp], #4
    e55a:	4770      	bx	lr

0000e55c <course_run>:

void course_run(void){
    e55c:	b580      	push	{r7, lr}
    e55e:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e560:	f64a 639c 	movw	r3, #44700	; 0xae9c
    e564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e568:	781b      	ldrb	r3, [r3, #0]
    e56a:	2b02      	cmp	r3, #2
    e56c:	d006      	beq.n	e57c <course_run+0x20>
    e56e:	f64a 639c 	movw	r3, #44700	; 0xae9c
    e572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e576:	781b      	ldrb	r3, [r3, #0]
    e578:	2b03      	cmp	r3, #3
    e57a:	d112      	bne.n	e5a2 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e57c:	f64a 639e 	movw	r3, #44702	; 0xae9e
    e580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e584:	781b      	ldrb	r3, [r3, #0]
    e586:	2b02      	cmp	r3, #2
    e588:	d901      	bls.n	e58e <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e58a:	f003 faf1 	bl	11b70 <course_pid_run>
    desired_roll = nav_desired_roll;
    e58e:	f24b 2340 	movw	r3, #45632	; 0xb240
    e592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e596:	681a      	ldr	r2, [r3, #0]
    e598:	f24b 13e4 	movw	r3, #45540	; 0xb1e4
    e59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a0:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e5a2:	bd80      	pop	{r7, pc}

0000e5a4 <altitude_control_task>:

void altitude_control_task(void)
{
    e5a4:	b580      	push	{r7, lr}
    e5a6:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e5a8:	f64a 639c 	movw	r3, #44700	; 0xae9c
    e5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5b0:	781b      	ldrb	r3, [r3, #0]
    e5b2:	2b02      	cmp	r3, #2
    e5b4:	d006      	beq.n	e5c4 <altitude_control_task+0x20>
    e5b6:	f64a 639c 	movw	r3, #44700	; 0xae9c
    e5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5be:	781b      	ldrb	r3, [r3, #0]
    e5c0:	2b03      	cmp	r3, #3
    e5c2:	d108      	bne.n	e5d6 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e5c4:	f64a 639d 	movw	r3, #44701	; 0xae9d
    e5c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5cc:	781b      	ldrb	r3, [r3, #0]
    e5ce:	2b03      	cmp	r3, #3
    e5d0:	d101      	bne.n	e5d6 <altitude_control_task+0x32>
      			altitude_pid_run();
    e5d2:	f003 fd55 	bl	12080 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e5d6:	bd80      	pop	{r7, pc}

0000e5d8 <climb_control_task>:
void climb_control_task(void)
{
    e5d8:	b580      	push	{r7, lr}
    e5da:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e5dc:	f64a 639c 	movw	r3, #44700	; 0xae9c
    e5e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e4:	781b      	ldrb	r3, [r3, #0]
    e5e6:	2b02      	cmp	r3, #2
    e5e8:	d006      	beq.n	e5f8 <climb_control_task+0x20>
    e5ea:	f64a 639c 	movw	r3, #44700	; 0xae9c
    e5ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5f2:	781b      	ldrb	r3, [r3, #0]
    e5f4:	2b03      	cmp	r3, #3
    e5f6:	d135      	bne.n	e664 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e5f8:	f64a 639d 	movw	r3, #44701	; 0xae9d
    e5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e600:	781b      	ldrb	r3, [r3, #0]
    e602:	2b01      	cmp	r3, #1
    e604:	d901      	bls.n	e60a <climb_control_task+0x32>
        	climb_pid_run();
    e606:	f003 fb6b 	bl	11ce0 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e60a:	f64a 639d 	movw	r3, #44701	; 0xae9d
    e60e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e612:	781b      	ldrb	r3, [r3, #0]
    e614:	2b01      	cmp	r3, #1
    e616:	d10a      	bne.n	e62e <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e618:	f24b 2338 	movw	r3, #45624	; 0xb238
    e61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e620:	881b      	ldrh	r3, [r3, #0]
    e622:	b29a      	uxth	r2, r3
    e624:	f24b 13ec 	movw	r3, #45548	; 0xb1ec
    e628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e62c:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e62e:	f64a 63a5 	movw	r3, #44709	; 0xaea5
    e632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e636:	781b      	ldrb	r3, [r3, #0]
    e638:	2b00      	cmp	r3, #0
    e63a:	d10d      	bne.n	e658 <climb_control_task+0x80>
    e63c:	f24b 439c 	movw	r3, #46236	; 0xb49c
    e640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e644:	881b      	ldrh	r3, [r3, #0]
    e646:	2b00      	cmp	r3, #0
    e648:	d10c      	bne.n	e664 <climb_control_task+0x8c>
    e64a:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
    e64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e652:	781b      	ldrb	r3, [r3, #0]
    e654:	2b00      	cmp	r3, #0
    e656:	d105      	bne.n	e664 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e658:	f24b 13ec 	movw	r3, #45548	; 0xb1ec
    e65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e660:	2200      	movs	r2, #0
    e662:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e664:	bd80      	pop	{r7, pc}
    e666:	bf00      	nop

0000e668 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e668:	b580      	push	{r7, lr}
    e66a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e66c:	f003 f926 	bl	118bc <ir_update>
    estimator_update_state_infrared();
    e670:	f006 fbac 	bl	14dcc <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e674:	f003 f990 	bl	11998 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e678:	f24b 13ec 	movw	r3, #45548	; 0xb1ec
    e67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e680:	881a      	ldrh	r2, [r3, #0]
    e682:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    e686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e68a:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e68c:	f24b 13ee 	movw	r3, #45550	; 0xb1ee
    e690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e694:	881a      	ldrh	r2, [r3, #0]
    e696:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    e69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e69e:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e6a0:	f24b 13f0 	movw	r3, #45552	; 0xb1f0
    e6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6a8:	881a      	ldrh	r2, [r3, #0]
    e6aa:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    e6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6b2:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e6b4:	f24b 4378 	movw	r3, #46200	; 0xb478
    e6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6bc:	681b      	ldr	r3, [r3, #0]
    e6be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e6c2:	4618      	mov	r0, r3
    e6c4:	f009 f80c 	bl	176e0 <__aeabi_f2d>
    e6c8:	4602      	mov	r2, r0
    e6ca:	460b      	mov	r3, r1
    e6cc:	4610      	mov	r0, r2
    e6ce:	4619      	mov	r1, r3
    e6d0:	f04f 0200 	mov.w	r2, #0
    e6d4:	f04f 0300 	mov.w	r3, #0
    e6d8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e6dc:	f009 f854 	bl	17788 <__aeabi_dmul>
    e6e0:	4602      	mov	r2, r0
    e6e2:	460b      	mov	r3, r1
    e6e4:	4610      	mov	r0, r2
    e6e6:	4619      	mov	r1, r3
    e6e8:	f04f 0200 	mov.w	r2, #0
    e6ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e6f0:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e6f4:	f009 faba 	bl	17c6c <__aeabi_dcmplt>
    e6f8:	4603      	mov	r3, r0
    e6fa:	2b00      	cmp	r3, #0
    e6fc:	d002      	beq.n	e704 <stabilisation_task+0x9c>
    e6fe:	f64d 2280 	movw	r2, #55936	; 0xda80
    e702:	e046      	b.n	e792 <stabilisation_task+0x12a>
    e704:	f24b 4378 	movw	r3, #46200	; 0xb478
    e708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e70c:	681b      	ldr	r3, [r3, #0]
    e70e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e712:	4618      	mov	r0, r3
    e714:	f008 ffe4 	bl	176e0 <__aeabi_f2d>
    e718:	4602      	mov	r2, r0
    e71a:	460b      	mov	r3, r1
    e71c:	4610      	mov	r0, r2
    e71e:	4619      	mov	r1, r3
    e720:	f04f 0200 	mov.w	r2, #0
    e724:	f04f 0300 	mov.w	r3, #0
    e728:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e72c:	f009 f82c 	bl	17788 <__aeabi_dmul>
    e730:	4602      	mov	r2, r0
    e732:	460b      	mov	r3, r1
    e734:	4610      	mov	r0, r2
    e736:	4619      	mov	r1, r3
    e738:	f04f 0200 	mov.w	r2, #0
    e73c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e740:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    e744:	f009 fab0 	bl	17ca8 <__aeabi_dcmpgt>
    e748:	4603      	mov	r3, r0
    e74a:	2b00      	cmp	r3, #0
    e74c:	d002      	beq.n	e754 <stabilisation_task+0xec>
    e74e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    e752:	e01d      	b.n	e790 <stabilisation_task+0x128>
    e754:	f24b 4378 	movw	r3, #46200	; 0xb478
    e758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e75c:	681b      	ldr	r3, [r3, #0]
    e75e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e762:	4618      	mov	r0, r3
    e764:	f008 ffbc 	bl	176e0 <__aeabi_f2d>
    e768:	4602      	mov	r2, r0
    e76a:	460b      	mov	r3, r1
    e76c:	4610      	mov	r0, r2
    e76e:	4619      	mov	r1, r3
    e770:	f04f 0200 	mov.w	r2, #0
    e774:	f04f 0300 	mov.w	r3, #0
    e778:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e77c:	f009 f804 	bl	17788 <__aeabi_dmul>
    e780:	4602      	mov	r2, r0
    e782:	460b      	mov	r3, r1
    e784:	4610      	mov	r0, r2
    e786:	4619      	mov	r1, r3
    e788:	f009 fa98 	bl	17cbc <__aeabi_d2iz>
    e78c:	4603      	mov	r3, r0
    e78e:	b29b      	uxth	r3, r3
    e790:	b29a      	uxth	r2, r3
    e792:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    e796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e79a:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    e79c:	bd80      	pop	{r7, pc}
    e79e:	bf00      	nop

0000e7a0 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    e7a0:	b580      	push	{r7, lr}
    e7a2:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    e7a4:	f24b 034d 	movw	r3, #45133	; 0xb04d
    e7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7ac:	2200      	movs	r2, #0
    e7ae:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    e7b0:	f24b 034e 	movw	r3, #45134	; 0xb04e
    e7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7b8:	781b      	ldrb	r3, [r3, #0]
    e7ba:	2b00      	cmp	r3, #0
    e7bc:	f001 81af 	beq.w	fb1e <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    e7c0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7c8:	781a      	ldrb	r2, [r3, #0]
    e7ca:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    e7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7d2:	781b      	ldrb	r3, [r3, #0]
    e7d4:	b2db      	uxtb	r3, r3
    e7d6:	429a      	cmp	r2, r3
    e7d8:	d313      	bcc.n	e802 <send_gps_pos+0x62>
    e7da:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    e7de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7e2:	781b      	ldrb	r3, [r3, #0]
    e7e4:	b2db      	uxtb	r3, r3
    e7e6:	461a      	mov	r2, r3
    e7e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e7ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7f0:	781b      	ldrb	r3, [r3, #0]
    e7f2:	1ad3      	subs	r3, r2, r3
    e7f4:	33ff      	adds	r3, #255	; 0xff
    e7f6:	2b21      	cmp	r3, #33	; 0x21
    e7f8:	bfd4      	ite	le
    e7fa:	2300      	movle	r3, #0
    e7fc:	2301      	movgt	r3, #1
    e7fe:	b2db      	uxtb	r3, r3
    e800:	e011      	b.n	e826 <send_gps_pos+0x86>
    e802:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    e806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e80a:	781b      	ldrb	r3, [r3, #0]
    e80c:	b2db      	uxtb	r3, r3
    e80e:	461a      	mov	r2, r3
    e810:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e818:	781b      	ldrb	r3, [r3, #0]
    e81a:	1ad3      	subs	r3, r2, r3
    e81c:	2b21      	cmp	r3, #33	; 0x21
    e81e:	bfd4      	ite	le
    e820:	2300      	movle	r3, #0
    e822:	2301      	movgt	r3, #1
    e824:	b2db      	uxtb	r3, r3
    e826:	2b00      	cmp	r3, #0
    e828:	f001 816b 	beq.w	fb02 <send_gps_pos+0x1362>
    e82c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e834:	781b      	ldrb	r3, [r3, #0]
    e836:	461a      	mov	r2, r3
    e838:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e840:	2105      	movs	r1, #5
    e842:	5499      	strb	r1, [r3, r2]
    e844:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e84c:	781b      	ldrb	r3, [r3, #0]
    e84e:	3301      	adds	r3, #1
    e850:	b2da      	uxtb	r2, r3
    e852:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e85a:	701a      	strb	r2, [r3, #0]
    e85c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e864:	781b      	ldrb	r3, [r3, #0]
    e866:	2bff      	cmp	r3, #255	; 0xff
    e868:	d105      	bne.n	e876 <send_gps_pos+0xd6>
    e86a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e872:	2200      	movs	r2, #0
    e874:	701a      	strb	r2, [r3, #0]
    e876:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e87e:	781b      	ldrb	r3, [r3, #0]
    e880:	461a      	mov	r2, r3
    e882:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e88a:	2108      	movs	r1, #8
    e88c:	5499      	strb	r1, [r3, r2]
    e88e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e896:	781b      	ldrb	r3, [r3, #0]
    e898:	3301      	adds	r3, #1
    e89a:	b2da      	uxtb	r2, r3
    e89c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8a4:	701a      	strb	r2, [r3, #0]
    e8a6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8ae:	781b      	ldrb	r3, [r3, #0]
    e8b0:	2bff      	cmp	r3, #255	; 0xff
    e8b2:	d105      	bne.n	e8c0 <send_gps_pos+0x120>
    e8b4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e8b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8bc:	2200      	movs	r2, #0
    e8be:	701a      	strb	r2, [r3, #0]
    e8c0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8c8:	2208      	movs	r2, #8
    e8ca:	701a      	strb	r2, [r3, #0]
    e8cc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8d4:	2208      	movs	r2, #8
    e8d6:	701a      	strb	r2, [r3, #0]
    e8d8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e8dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8e0:	781b      	ldrb	r3, [r3, #0]
    e8e2:	461a      	mov	r2, r3
    e8e4:	f24b 034c 	movw	r3, #45132	; 0xb04c
    e8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8ec:	7819      	ldrb	r1, [r3, #0]
    e8ee:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8f6:	5499      	strb	r1, [r3, r2]
    e8f8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e900:	781a      	ldrb	r2, [r3, #0]
    e902:	f24b 034c 	movw	r3, #45132	; 0xb04c
    e906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e90a:	781b      	ldrb	r3, [r3, #0]
    e90c:	4413      	add	r3, r2
    e90e:	b2da      	uxtb	r2, r3
    e910:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e918:	701a      	strb	r2, [r3, #0]
    e91a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e922:	781a      	ldrb	r2, [r3, #0]
    e924:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e92c:	781b      	ldrb	r3, [r3, #0]
    e92e:	4413      	add	r3, r2
    e930:	b2da      	uxtb	r2, r3
    e932:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e93a:	701a      	strb	r2, [r3, #0]
    e93c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e944:	781b      	ldrb	r3, [r3, #0]
    e946:	3301      	adds	r3, #1
    e948:	b2da      	uxtb	r2, r3
    e94a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e94e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e952:	701a      	strb	r2, [r3, #0]
    e954:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e95c:	781b      	ldrb	r3, [r3, #0]
    e95e:	2bff      	cmp	r3, #255	; 0xff
    e960:	d105      	bne.n	e96e <send_gps_pos+0x1ce>
    e962:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e96a:	2200      	movs	r2, #0
    e96c:	701a      	strb	r2, [r3, #0]
    e96e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e976:	781b      	ldrb	r3, [r3, #0]
    e978:	461a      	mov	r2, r3
    e97a:	f24b 033c 	movw	r3, #45116	; 0xb03c
    e97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e982:	7819      	ldrb	r1, [r3, #0]
    e984:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    e988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e98c:	5499      	strb	r1, [r3, r2]
    e98e:	f24b 033c 	movw	r3, #45116	; 0xb03c
    e992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e996:	781a      	ldrb	r2, [r3, #0]
    e998:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9a0:	781b      	ldrb	r3, [r3, #0]
    e9a2:	4413      	add	r3, r2
    e9a4:	b2da      	uxtb	r2, r3
    e9a6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9ae:	701a      	strb	r2, [r3, #0]
    e9b0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e9b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9b8:	781a      	ldrb	r2, [r3, #0]
    e9ba:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    e9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9c2:	781b      	ldrb	r3, [r3, #0]
    e9c4:	4413      	add	r3, r2
    e9c6:	b2da      	uxtb	r2, r3
    e9c8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    e9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9d0:	701a      	strb	r2, [r3, #0]
    e9d2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9da:	781b      	ldrb	r3, [r3, #0]
    e9dc:	3301      	adds	r3, #1
    e9de:	b2da      	uxtb	r2, r3
    e9e0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e9e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9e8:	701a      	strb	r2, [r3, #0]
    e9ea:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9f2:	781b      	ldrb	r3, [r3, #0]
    e9f4:	2bff      	cmp	r3, #255	; 0xff
    e9f6:	d105      	bne.n	ea04 <send_gps_pos+0x264>
    e9f8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    e9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea00:	2200      	movs	r2, #0
    ea02:	701a      	strb	r2, [r3, #0]
    ea04:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ea08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea0c:	781b      	ldrb	r3, [r3, #0]
    ea0e:	461a      	mov	r2, r3
    ea10:	f24b 033c 	movw	r3, #45116	; 0xb03c
    ea14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea18:	7859      	ldrb	r1, [r3, #1]
    ea1a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ea1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea22:	5499      	strb	r1, [r3, r2]
    ea24:	4bd1      	ldr	r3, [pc, #836]	; (ed6c <send_gps_pos+0x5cc>)
    ea26:	781a      	ldrb	r2, [r3, #0]
    ea28:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ea2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea30:	781b      	ldrb	r3, [r3, #0]
    ea32:	4413      	add	r3, r2
    ea34:	b2da      	uxtb	r2, r3
    ea36:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ea3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea3e:	701a      	strb	r2, [r3, #0]
    ea40:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ea44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea48:	781a      	ldrb	r2, [r3, #0]
    ea4a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ea4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea52:	781b      	ldrb	r3, [r3, #0]
    ea54:	4413      	add	r3, r2
    ea56:	b2da      	uxtb	r2, r3
    ea58:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ea5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea60:	701a      	strb	r2, [r3, #0]
    ea62:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ea66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea6a:	781b      	ldrb	r3, [r3, #0]
    ea6c:	3301      	adds	r3, #1
    ea6e:	b2da      	uxtb	r2, r3
    ea70:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ea74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea78:	701a      	strb	r2, [r3, #0]
    ea7a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ea7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea82:	781b      	ldrb	r3, [r3, #0]
    ea84:	2bff      	cmp	r3, #255	; 0xff
    ea86:	d105      	bne.n	ea94 <send_gps_pos+0x2f4>
    ea88:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ea8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea90:	2200      	movs	r2, #0
    ea92:	701a      	strb	r2, [r3, #0]
    ea94:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ea98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea9c:	781b      	ldrb	r3, [r3, #0]
    ea9e:	461a      	mov	r2, r3
    eaa0:	f24b 033c 	movw	r3, #45116	; 0xb03c
    eaa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaa8:	7899      	ldrb	r1, [r3, #2]
    eaaa:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    eaae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab2:	5499      	strb	r1, [r3, r2]
    eab4:	4bae      	ldr	r3, [pc, #696]	; (ed70 <send_gps_pos+0x5d0>)
    eab6:	781a      	ldrb	r2, [r3, #0]
    eab8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    eabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eac0:	781b      	ldrb	r3, [r3, #0]
    eac2:	4413      	add	r3, r2
    eac4:	b2da      	uxtb	r2, r3
    eac6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    eaca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eace:	701a      	strb	r2, [r3, #0]
    ead0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ead4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ead8:	781a      	ldrb	r2, [r3, #0]
    eada:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    eade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eae2:	781b      	ldrb	r3, [r3, #0]
    eae4:	4413      	add	r3, r2
    eae6:	b2da      	uxtb	r2, r3
    eae8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    eaec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaf0:	701a      	strb	r2, [r3, #0]
    eaf2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    eaf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eafa:	781b      	ldrb	r3, [r3, #0]
    eafc:	3301      	adds	r3, #1
    eafe:	b2da      	uxtb	r2, r3
    eb00:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    eb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb08:	701a      	strb	r2, [r3, #0]
    eb0a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    eb0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb12:	781b      	ldrb	r3, [r3, #0]
    eb14:	2bff      	cmp	r3, #255	; 0xff
    eb16:	d105      	bne.n	eb24 <send_gps_pos+0x384>
    eb18:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    eb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb20:	2200      	movs	r2, #0
    eb22:	701a      	strb	r2, [r3, #0]
    eb24:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    eb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb2c:	781b      	ldrb	r3, [r3, #0]
    eb2e:	461a      	mov	r2, r3
    eb30:	f24b 033c 	movw	r3, #45116	; 0xb03c
    eb34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb38:	78d9      	ldrb	r1, [r3, #3]
    eb3a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    eb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb42:	5499      	strb	r1, [r3, r2]
    eb44:	4b8b      	ldr	r3, [pc, #556]	; (ed74 <send_gps_pos+0x5d4>)
    eb46:	781a      	ldrb	r2, [r3, #0]
    eb48:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    eb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb50:	781b      	ldrb	r3, [r3, #0]
    eb52:	4413      	add	r3, r2
    eb54:	b2da      	uxtb	r2, r3
    eb56:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    eb5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb5e:	701a      	strb	r2, [r3, #0]
    eb60:	f64a 73be 	movw	r3, #44990	; 0xafbe
    eb64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb68:	781a      	ldrb	r2, [r3, #0]
    eb6a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    eb6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb72:	781b      	ldrb	r3, [r3, #0]
    eb74:	4413      	add	r3, r2
    eb76:	b2da      	uxtb	r2, r3
    eb78:	f64a 73be 	movw	r3, #44990	; 0xafbe
    eb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb80:	701a      	strb	r2, [r3, #0]
    eb82:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    eb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb8a:	781b      	ldrb	r3, [r3, #0]
    eb8c:	3301      	adds	r3, #1
    eb8e:	b2da      	uxtb	r2, r3
    eb90:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    eb94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb98:	701a      	strb	r2, [r3, #0]
    eb9a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    eb9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eba2:	781b      	ldrb	r3, [r3, #0]
    eba4:	2bff      	cmp	r3, #255	; 0xff
    eba6:	d105      	bne.n	ebb4 <send_gps_pos+0x414>
    eba8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ebac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebb0:	2200      	movs	r2, #0
    ebb2:	701a      	strb	r2, [r3, #0]
    ebb4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ebb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebbc:	781b      	ldrb	r3, [r3, #0]
    ebbe:	461a      	mov	r2, r3
    ebc0:	f24b 0340 	movw	r3, #45120	; 0xb040
    ebc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebc8:	7819      	ldrb	r1, [r3, #0]
    ebca:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ebce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebd2:	5499      	strb	r1, [r3, r2]
    ebd4:	f24b 0340 	movw	r3, #45120	; 0xb040
    ebd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebdc:	781a      	ldrb	r2, [r3, #0]
    ebde:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ebe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe6:	781b      	ldrb	r3, [r3, #0]
    ebe8:	4413      	add	r3, r2
    ebea:	b2da      	uxtb	r2, r3
    ebec:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ebf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebf4:	701a      	strb	r2, [r3, #0]
    ebf6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ebfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebfe:	781a      	ldrb	r2, [r3, #0]
    ec00:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ec04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec08:	781b      	ldrb	r3, [r3, #0]
    ec0a:	4413      	add	r3, r2
    ec0c:	b2da      	uxtb	r2, r3
    ec0e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ec12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec16:	701a      	strb	r2, [r3, #0]
    ec18:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ec1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec20:	781b      	ldrb	r3, [r3, #0]
    ec22:	3301      	adds	r3, #1
    ec24:	b2da      	uxtb	r2, r3
    ec26:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ec2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec2e:	701a      	strb	r2, [r3, #0]
    ec30:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ec34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec38:	781b      	ldrb	r3, [r3, #0]
    ec3a:	2bff      	cmp	r3, #255	; 0xff
    ec3c:	d105      	bne.n	ec4a <send_gps_pos+0x4aa>
    ec3e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ec42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec46:	2200      	movs	r2, #0
    ec48:	701a      	strb	r2, [r3, #0]
    ec4a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ec4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec52:	781b      	ldrb	r3, [r3, #0]
    ec54:	461a      	mov	r2, r3
    ec56:	f24b 0340 	movw	r3, #45120	; 0xb040
    ec5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec5e:	7859      	ldrb	r1, [r3, #1]
    ec60:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ec64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec68:	5499      	strb	r1, [r3, r2]
    ec6a:	4b43      	ldr	r3, [pc, #268]	; (ed78 <send_gps_pos+0x5d8>)
    ec6c:	781a      	ldrb	r2, [r3, #0]
    ec6e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ec72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec76:	781b      	ldrb	r3, [r3, #0]
    ec78:	4413      	add	r3, r2
    ec7a:	b2da      	uxtb	r2, r3
    ec7c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ec80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec84:	701a      	strb	r2, [r3, #0]
    ec86:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ec8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec8e:	781a      	ldrb	r2, [r3, #0]
    ec90:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ec94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec98:	781b      	ldrb	r3, [r3, #0]
    ec9a:	4413      	add	r3, r2
    ec9c:	b2da      	uxtb	r2, r3
    ec9e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    eca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eca6:	701a      	strb	r2, [r3, #0]
    eca8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ecac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecb0:	781b      	ldrb	r3, [r3, #0]
    ecb2:	3301      	adds	r3, #1
    ecb4:	b2da      	uxtb	r2, r3
    ecb6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ecba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecbe:	701a      	strb	r2, [r3, #0]
    ecc0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ecc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecc8:	781b      	ldrb	r3, [r3, #0]
    ecca:	2bff      	cmp	r3, #255	; 0xff
    eccc:	d105      	bne.n	ecda <send_gps_pos+0x53a>
    ecce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ecd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecd6:	2200      	movs	r2, #0
    ecd8:	701a      	strb	r2, [r3, #0]
    ecda:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ecde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece2:	781b      	ldrb	r3, [r3, #0]
    ece4:	461a      	mov	r2, r3
    ece6:	f24b 0340 	movw	r3, #45120	; 0xb040
    ecea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecee:	7899      	ldrb	r1, [r3, #2]
    ecf0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ecf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf8:	5499      	strb	r1, [r3, r2]
    ecfa:	4b20      	ldr	r3, [pc, #128]	; (ed7c <send_gps_pos+0x5dc>)
    ecfc:	781a      	ldrb	r2, [r3, #0]
    ecfe:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ed02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed06:	781b      	ldrb	r3, [r3, #0]
    ed08:	4413      	add	r3, r2
    ed0a:	b2da      	uxtb	r2, r3
    ed0c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ed10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed14:	701a      	strb	r2, [r3, #0]
    ed16:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ed1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed1e:	781a      	ldrb	r2, [r3, #0]
    ed20:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ed24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed28:	781b      	ldrb	r3, [r3, #0]
    ed2a:	4413      	add	r3, r2
    ed2c:	b2da      	uxtb	r2, r3
    ed2e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ed32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed36:	701a      	strb	r2, [r3, #0]
    ed38:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ed3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed40:	781b      	ldrb	r3, [r3, #0]
    ed42:	3301      	adds	r3, #1
    ed44:	b2da      	uxtb	r2, r3
    ed46:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ed4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed4e:	701a      	strb	r2, [r3, #0]
    ed50:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ed54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed58:	781b      	ldrb	r3, [r3, #0]
    ed5a:	2bff      	cmp	r3, #255	; 0xff
    ed5c:	d110      	bne.n	ed80 <send_gps_pos+0x5e0>
    ed5e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ed62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed66:	2200      	movs	r2, #0
    ed68:	701a      	strb	r2, [r3, #0]
    ed6a:	e009      	b.n	ed80 <send_gps_pos+0x5e0>
    ed6c:	2000b03d 	.word	0x2000b03d
    ed70:	2000b03e 	.word	0x2000b03e
    ed74:	2000b03f 	.word	0x2000b03f
    ed78:	2000b041 	.word	0x2000b041
    ed7c:	2000b042 	.word	0x2000b042
    ed80:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ed84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed88:	781b      	ldrb	r3, [r3, #0]
    ed8a:	461a      	mov	r2, r3
    ed8c:	f24b 0340 	movw	r3, #45120	; 0xb040
    ed90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed94:	78d9      	ldrb	r1, [r3, #3]
    ed96:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ed9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed9e:	5499      	strb	r1, [r3, r2]
    eda0:	4bd3      	ldr	r3, [pc, #844]	; (f0f0 <send_gps_pos+0x950>)
    eda2:	781a      	ldrb	r2, [r3, #0]
    eda4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    eda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edac:	781b      	ldrb	r3, [r3, #0]
    edae:	4413      	add	r3, r2
    edb0:	b2da      	uxtb	r2, r3
    edb2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    edb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edba:	701a      	strb	r2, [r3, #0]
    edbc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    edc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc4:	781a      	ldrb	r2, [r3, #0]
    edc6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    edca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edce:	781b      	ldrb	r3, [r3, #0]
    edd0:	4413      	add	r3, r2
    edd2:	b2da      	uxtb	r2, r3
    edd4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    edd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eddc:	701a      	strb	r2, [r3, #0]
    edde:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ede2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ede6:	781b      	ldrb	r3, [r3, #0]
    ede8:	3301      	adds	r3, #1
    edea:	b2da      	uxtb	r2, r3
    edec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    edf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edf4:	701a      	strb	r2, [r3, #0]
    edf6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    edfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edfe:	781b      	ldrb	r3, [r3, #0]
    ee00:	2bff      	cmp	r3, #255	; 0xff
    ee02:	d105      	bne.n	ee10 <send_gps_pos+0x670>
    ee04:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ee08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee0c:	2200      	movs	r2, #0
    ee0e:	701a      	strb	r2, [r3, #0]
    ee10:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ee14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee18:	781b      	ldrb	r3, [r3, #0]
    ee1a:	461a      	mov	r2, r3
    ee1c:	f24b 0338 	movw	r3, #45112	; 0xb038
    ee20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee24:	7819      	ldrb	r1, [r3, #0]
    ee26:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ee2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee2e:	5499      	strb	r1, [r3, r2]
    ee30:	f24b 0338 	movw	r3, #45112	; 0xb038
    ee34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee38:	781a      	ldrb	r2, [r3, #0]
    ee3a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ee3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee42:	781b      	ldrb	r3, [r3, #0]
    ee44:	4413      	add	r3, r2
    ee46:	b2da      	uxtb	r2, r3
    ee48:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ee4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee50:	701a      	strb	r2, [r3, #0]
    ee52:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ee56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee5a:	781a      	ldrb	r2, [r3, #0]
    ee5c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ee60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee64:	781b      	ldrb	r3, [r3, #0]
    ee66:	4413      	add	r3, r2
    ee68:	b2da      	uxtb	r2, r3
    ee6a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ee6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee72:	701a      	strb	r2, [r3, #0]
    ee74:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ee78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee7c:	781b      	ldrb	r3, [r3, #0]
    ee7e:	3301      	adds	r3, #1
    ee80:	b2da      	uxtb	r2, r3
    ee82:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ee86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee8a:	701a      	strb	r2, [r3, #0]
    ee8c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ee90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee94:	781b      	ldrb	r3, [r3, #0]
    ee96:	2bff      	cmp	r3, #255	; 0xff
    ee98:	d105      	bne.n	eea6 <send_gps_pos+0x706>
    ee9a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ee9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eea2:	2200      	movs	r2, #0
    eea4:	701a      	strb	r2, [r3, #0]
    eea6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    eeaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeae:	781b      	ldrb	r3, [r3, #0]
    eeb0:	461a      	mov	r2, r3
    eeb2:	f24b 0338 	movw	r3, #45112	; 0xb038
    eeb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeba:	7859      	ldrb	r1, [r3, #1]
    eebc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    eec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eec4:	5499      	strb	r1, [r3, r2]
    eec6:	4b8b      	ldr	r3, [pc, #556]	; (f0f4 <send_gps_pos+0x954>)
    eec8:	781a      	ldrb	r2, [r3, #0]
    eeca:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    eece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eed2:	781b      	ldrb	r3, [r3, #0]
    eed4:	4413      	add	r3, r2
    eed6:	b2da      	uxtb	r2, r3
    eed8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    eedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee0:	701a      	strb	r2, [r3, #0]
    eee2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    eee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeea:	781a      	ldrb	r2, [r3, #0]
    eeec:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    eef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eef4:	781b      	ldrb	r3, [r3, #0]
    eef6:	4413      	add	r3, r2
    eef8:	b2da      	uxtb	r2, r3
    eefa:	f64a 73be 	movw	r3, #44990	; 0xafbe
    eefe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef02:	701a      	strb	r2, [r3, #0]
    ef04:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ef08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef0c:	781b      	ldrb	r3, [r3, #0]
    ef0e:	3301      	adds	r3, #1
    ef10:	b2da      	uxtb	r2, r3
    ef12:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ef16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef1a:	701a      	strb	r2, [r3, #0]
    ef1c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ef20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef24:	781b      	ldrb	r3, [r3, #0]
    ef26:	2bff      	cmp	r3, #255	; 0xff
    ef28:	d105      	bne.n	ef36 <send_gps_pos+0x796>
    ef2a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ef2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef32:	2200      	movs	r2, #0
    ef34:	701a      	strb	r2, [r3, #0]
    ef36:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ef3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef3e:	781b      	ldrb	r3, [r3, #0]
    ef40:	461a      	mov	r2, r3
    ef42:	f24b 0338 	movw	r3, #45112	; 0xb038
    ef46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef4a:	7899      	ldrb	r1, [r3, #2]
    ef4c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ef50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef54:	5499      	strb	r1, [r3, r2]
    ef56:	4b68      	ldr	r3, [pc, #416]	; (f0f8 <send_gps_pos+0x958>)
    ef58:	781a      	ldrb	r2, [r3, #0]
    ef5a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ef5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef62:	781b      	ldrb	r3, [r3, #0]
    ef64:	4413      	add	r3, r2
    ef66:	b2da      	uxtb	r2, r3
    ef68:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ef6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef70:	701a      	strb	r2, [r3, #0]
    ef72:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ef76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef7a:	781a      	ldrb	r2, [r3, #0]
    ef7c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ef80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef84:	781b      	ldrb	r3, [r3, #0]
    ef86:	4413      	add	r3, r2
    ef88:	b2da      	uxtb	r2, r3
    ef8a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ef8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef92:	701a      	strb	r2, [r3, #0]
    ef94:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ef98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef9c:	781b      	ldrb	r3, [r3, #0]
    ef9e:	3301      	adds	r3, #1
    efa0:	b2da      	uxtb	r2, r3
    efa2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    efa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efaa:	701a      	strb	r2, [r3, #0]
    efac:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    efb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb4:	781b      	ldrb	r3, [r3, #0]
    efb6:	2bff      	cmp	r3, #255	; 0xff
    efb8:	d105      	bne.n	efc6 <send_gps_pos+0x826>
    efba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    efbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efc2:	2200      	movs	r2, #0
    efc4:	701a      	strb	r2, [r3, #0]
    efc6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    efca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efce:	781b      	ldrb	r3, [r3, #0]
    efd0:	461a      	mov	r2, r3
    efd2:	f24b 0338 	movw	r3, #45112	; 0xb038
    efd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efda:	78d9      	ldrb	r1, [r3, #3]
    efdc:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    efe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efe4:	5499      	strb	r1, [r3, r2]
    efe6:	4b45      	ldr	r3, [pc, #276]	; (f0fc <send_gps_pos+0x95c>)
    efe8:	781a      	ldrb	r2, [r3, #0]
    efea:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    efee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eff2:	781b      	ldrb	r3, [r3, #0]
    eff4:	4413      	add	r3, r2
    eff6:	b2da      	uxtb	r2, r3
    eff8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    effc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f000:	701a      	strb	r2, [r3, #0]
    f002:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f00a:	781a      	ldrb	r2, [r3, #0]
    f00c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f014:	781b      	ldrb	r3, [r3, #0]
    f016:	4413      	add	r3, r2
    f018:	b2da      	uxtb	r2, r3
    f01a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f01e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f022:	701a      	strb	r2, [r3, #0]
    f024:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f02c:	781b      	ldrb	r3, [r3, #0]
    f02e:	3301      	adds	r3, #1
    f030:	b2da      	uxtb	r2, r3
    f032:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f03a:	701a      	strb	r2, [r3, #0]
    f03c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f044:	781b      	ldrb	r3, [r3, #0]
    f046:	2bff      	cmp	r3, #255	; 0xff
    f048:	d105      	bne.n	f056 <send_gps_pos+0x8b6>
    f04a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f04e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f052:	2200      	movs	r2, #0
    f054:	701a      	strb	r2, [r3, #0]
    f056:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f05e:	781b      	ldrb	r3, [r3, #0]
    f060:	461a      	mov	r2, r3
    f062:	f24b 032c 	movw	r3, #45100	; 0xb02c
    f066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f06a:	7819      	ldrb	r1, [r3, #0]
    f06c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f074:	5499      	strb	r1, [r3, r2]
    f076:	f24b 032c 	movw	r3, #45100	; 0xb02c
    f07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f07e:	781a      	ldrb	r2, [r3, #0]
    f080:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f088:	781b      	ldrb	r3, [r3, #0]
    f08a:	4413      	add	r3, r2
    f08c:	b2da      	uxtb	r2, r3
    f08e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f096:	701a      	strb	r2, [r3, #0]
    f098:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f09c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0a0:	781a      	ldrb	r2, [r3, #0]
    f0a2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0aa:	781b      	ldrb	r3, [r3, #0]
    f0ac:	4413      	add	r3, r2
    f0ae:	b2da      	uxtb	r2, r3
    f0b0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0b8:	701a      	strb	r2, [r3, #0]
    f0ba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0c2:	781b      	ldrb	r3, [r3, #0]
    f0c4:	3301      	adds	r3, #1
    f0c6:	b2da      	uxtb	r2, r3
    f0c8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f0cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0d0:	701a      	strb	r2, [r3, #0]
    f0d2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f0d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0da:	781b      	ldrb	r3, [r3, #0]
    f0dc:	2bff      	cmp	r3, #255	; 0xff
    f0de:	d10f      	bne.n	f100 <send_gps_pos+0x960>
    f0e0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0e8:	2200      	movs	r2, #0
    f0ea:	701a      	strb	r2, [r3, #0]
    f0ec:	e008      	b.n	f100 <send_gps_pos+0x960>
    f0ee:	bf00      	nop
    f0f0:	2000b043 	.word	0x2000b043
    f0f4:	2000b039 	.word	0x2000b039
    f0f8:	2000b03a 	.word	0x2000b03a
    f0fc:	2000b03b 	.word	0x2000b03b
    f100:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f108:	781b      	ldrb	r3, [r3, #0]
    f10a:	461a      	mov	r2, r3
    f10c:	f24b 032c 	movw	r3, #45100	; 0xb02c
    f110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f114:	7859      	ldrb	r1, [r3, #1]
    f116:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f11e:	5499      	strb	r1, [r3, r2]
    f120:	4bd1      	ldr	r3, [pc, #836]	; (f468 <send_gps_pos+0xcc8>)
    f122:	781a      	ldrb	r2, [r3, #0]
    f124:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f12c:	781b      	ldrb	r3, [r3, #0]
    f12e:	4413      	add	r3, r2
    f130:	b2da      	uxtb	r2, r3
    f132:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f13a:	701a      	strb	r2, [r3, #0]
    f13c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f144:	781a      	ldrb	r2, [r3, #0]
    f146:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f14e:	781b      	ldrb	r3, [r3, #0]
    f150:	4413      	add	r3, r2
    f152:	b2da      	uxtb	r2, r3
    f154:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f15c:	701a      	strb	r2, [r3, #0]
    f15e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f166:	781b      	ldrb	r3, [r3, #0]
    f168:	3301      	adds	r3, #1
    f16a:	b2da      	uxtb	r2, r3
    f16c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f174:	701a      	strb	r2, [r3, #0]
    f176:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f17e:	781b      	ldrb	r3, [r3, #0]
    f180:	2bff      	cmp	r3, #255	; 0xff
    f182:	d105      	bne.n	f190 <send_gps_pos+0x9f0>
    f184:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f18c:	2200      	movs	r2, #0
    f18e:	701a      	strb	r2, [r3, #0]
    f190:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f198:	781b      	ldrb	r3, [r3, #0]
    f19a:	461a      	mov	r2, r3
    f19c:	f24b 032c 	movw	r3, #45100	; 0xb02c
    f1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1a4:	7899      	ldrb	r1, [r3, #2]
    f1a6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ae:	5499      	strb	r1, [r3, r2]
    f1b0:	4bae      	ldr	r3, [pc, #696]	; (f46c <send_gps_pos+0xccc>)
    f1b2:	781a      	ldrb	r2, [r3, #0]
    f1b4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1bc:	781b      	ldrb	r3, [r3, #0]
    f1be:	4413      	add	r3, r2
    f1c0:	b2da      	uxtb	r2, r3
    f1c2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f1c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ca:	701a      	strb	r2, [r3, #0]
    f1cc:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f1d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1d4:	781a      	ldrb	r2, [r3, #0]
    f1d6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f1da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1de:	781b      	ldrb	r3, [r3, #0]
    f1e0:	4413      	add	r3, r2
    f1e2:	b2da      	uxtb	r2, r3
    f1e4:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ec:	701a      	strb	r2, [r3, #0]
    f1ee:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1f6:	781b      	ldrb	r3, [r3, #0]
    f1f8:	3301      	adds	r3, #1
    f1fa:	b2da      	uxtb	r2, r3
    f1fc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f204:	701a      	strb	r2, [r3, #0]
    f206:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f20e:	781b      	ldrb	r3, [r3, #0]
    f210:	2bff      	cmp	r3, #255	; 0xff
    f212:	d105      	bne.n	f220 <send_gps_pos+0xa80>
    f214:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f21c:	2200      	movs	r2, #0
    f21e:	701a      	strb	r2, [r3, #0]
    f220:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f228:	781b      	ldrb	r3, [r3, #0]
    f22a:	461a      	mov	r2, r3
    f22c:	f24b 032c 	movw	r3, #45100	; 0xb02c
    f230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f234:	78d9      	ldrb	r1, [r3, #3]
    f236:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f23e:	5499      	strb	r1, [r3, r2]
    f240:	4b8b      	ldr	r3, [pc, #556]	; (f470 <send_gps_pos+0xcd0>)
    f242:	781a      	ldrb	r2, [r3, #0]
    f244:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f24c:	781b      	ldrb	r3, [r3, #0]
    f24e:	4413      	add	r3, r2
    f250:	b2da      	uxtb	r2, r3
    f252:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f25a:	701a      	strb	r2, [r3, #0]
    f25c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f264:	781a      	ldrb	r2, [r3, #0]
    f266:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f26e:	781b      	ldrb	r3, [r3, #0]
    f270:	4413      	add	r3, r2
    f272:	b2da      	uxtb	r2, r3
    f274:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f27c:	701a      	strb	r2, [r3, #0]
    f27e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f286:	781b      	ldrb	r3, [r3, #0]
    f288:	3301      	adds	r3, #1
    f28a:	b2da      	uxtb	r2, r3
    f28c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f294:	701a      	strb	r2, [r3, #0]
    f296:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f29e:	781b      	ldrb	r3, [r3, #0]
    f2a0:	2bff      	cmp	r3, #255	; 0xff
    f2a2:	d105      	bne.n	f2b0 <send_gps_pos+0xb10>
    f2a4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ac:	2200      	movs	r2, #0
    f2ae:	701a      	strb	r2, [r3, #0]
    f2b0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2b8:	781b      	ldrb	r3, [r3, #0]
    f2ba:	461a      	mov	r2, r3
    f2bc:	f24b 0330 	movw	r3, #45104	; 0xb030
    f2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c4:	7819      	ldrb	r1, [r3, #0]
    f2c6:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ce:	5499      	strb	r1, [r3, r2]
    f2d0:	f24b 0330 	movw	r3, #45104	; 0xb030
    f2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2d8:	781a      	ldrb	r2, [r3, #0]
    f2da:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f2de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2e2:	781b      	ldrb	r3, [r3, #0]
    f2e4:	4413      	add	r3, r2
    f2e6:	b2da      	uxtb	r2, r3
    f2e8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2f0:	701a      	strb	r2, [r3, #0]
    f2f2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f2f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2fa:	781a      	ldrb	r2, [r3, #0]
    f2fc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f304:	781b      	ldrb	r3, [r3, #0]
    f306:	4413      	add	r3, r2
    f308:	b2da      	uxtb	r2, r3
    f30a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f312:	701a      	strb	r2, [r3, #0]
    f314:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f31c:	781b      	ldrb	r3, [r3, #0]
    f31e:	3301      	adds	r3, #1
    f320:	b2da      	uxtb	r2, r3
    f322:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f32a:	701a      	strb	r2, [r3, #0]
    f32c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f334:	781b      	ldrb	r3, [r3, #0]
    f336:	2bff      	cmp	r3, #255	; 0xff
    f338:	d105      	bne.n	f346 <send_gps_pos+0xba6>
    f33a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f342:	2200      	movs	r2, #0
    f344:	701a      	strb	r2, [r3, #0]
    f346:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f34e:	781b      	ldrb	r3, [r3, #0]
    f350:	461a      	mov	r2, r3
    f352:	f24b 0330 	movw	r3, #45104	; 0xb030
    f356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f35a:	7859      	ldrb	r1, [r3, #1]
    f35c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f364:	5499      	strb	r1, [r3, r2]
    f366:	4b43      	ldr	r3, [pc, #268]	; (f474 <send_gps_pos+0xcd4>)
    f368:	781a      	ldrb	r2, [r3, #0]
    f36a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f36e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f372:	781b      	ldrb	r3, [r3, #0]
    f374:	4413      	add	r3, r2
    f376:	b2da      	uxtb	r2, r3
    f378:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f380:	701a      	strb	r2, [r3, #0]
    f382:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f38a:	781a      	ldrb	r2, [r3, #0]
    f38c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f394:	781b      	ldrb	r3, [r3, #0]
    f396:	4413      	add	r3, r2
    f398:	b2da      	uxtb	r2, r3
    f39a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f39e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3a2:	701a      	strb	r2, [r3, #0]
    f3a4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f3a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ac:	781b      	ldrb	r3, [r3, #0]
    f3ae:	3301      	adds	r3, #1
    f3b0:	b2da      	uxtb	r2, r3
    f3b2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f3b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ba:	701a      	strb	r2, [r3, #0]
    f3bc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f3c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3c4:	781b      	ldrb	r3, [r3, #0]
    f3c6:	2bff      	cmp	r3, #255	; 0xff
    f3c8:	d105      	bne.n	f3d6 <send_gps_pos+0xc36>
    f3ca:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3d2:	2200      	movs	r2, #0
    f3d4:	701a      	strb	r2, [r3, #0]
    f3d6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3de:	781b      	ldrb	r3, [r3, #0]
    f3e0:	461a      	mov	r2, r3
    f3e2:	f24b 0330 	movw	r3, #45104	; 0xb030
    f3e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ea:	7899      	ldrb	r1, [r3, #2]
    f3ec:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3f4:	5499      	strb	r1, [r3, r2]
    f3f6:	4b20      	ldr	r3, [pc, #128]	; (f478 <send_gps_pos+0xcd8>)
    f3f8:	781a      	ldrb	r2, [r3, #0]
    f3fa:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f3fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f402:	781b      	ldrb	r3, [r3, #0]
    f404:	4413      	add	r3, r2
    f406:	b2da      	uxtb	r2, r3
    f408:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f410:	701a      	strb	r2, [r3, #0]
    f412:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f41a:	781a      	ldrb	r2, [r3, #0]
    f41c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f424:	781b      	ldrb	r3, [r3, #0]
    f426:	4413      	add	r3, r2
    f428:	b2da      	uxtb	r2, r3
    f42a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f42e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f432:	701a      	strb	r2, [r3, #0]
    f434:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f43c:	781b      	ldrb	r3, [r3, #0]
    f43e:	3301      	adds	r3, #1
    f440:	b2da      	uxtb	r2, r3
    f442:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f44a:	701a      	strb	r2, [r3, #0]
    f44c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f454:	781b      	ldrb	r3, [r3, #0]
    f456:	2bff      	cmp	r3, #255	; 0xff
    f458:	d110      	bne.n	f47c <send_gps_pos+0xcdc>
    f45a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f45e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f462:	2200      	movs	r2, #0
    f464:	701a      	strb	r2, [r3, #0]
    f466:	e009      	b.n	f47c <send_gps_pos+0xcdc>
    f468:	2000b02d 	.word	0x2000b02d
    f46c:	2000b02e 	.word	0x2000b02e
    f470:	2000b02f 	.word	0x2000b02f
    f474:	2000b031 	.word	0x2000b031
    f478:	2000b032 	.word	0x2000b032
    f47c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f484:	781b      	ldrb	r3, [r3, #0]
    f486:	461a      	mov	r2, r3
    f488:	f24b 0330 	movw	r3, #45104	; 0xb030
    f48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f490:	78d9      	ldrb	r1, [r3, #3]
    f492:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f49a:	5499      	strb	r1, [r3, r2]
    f49c:	4bd3      	ldr	r3, [pc, #844]	; (f7ec <send_gps_pos+0x104c>)
    f49e:	781a      	ldrb	r2, [r3, #0]
    f4a0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4a8:	781b      	ldrb	r3, [r3, #0]
    f4aa:	4413      	add	r3, r2
    f4ac:	b2da      	uxtb	r2, r3
    f4ae:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4b6:	701a      	strb	r2, [r3, #0]
    f4b8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4c0:	781a      	ldrb	r2, [r3, #0]
    f4c2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f4c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ca:	781b      	ldrb	r3, [r3, #0]
    f4cc:	4413      	add	r3, r2
    f4ce:	b2da      	uxtb	r2, r3
    f4d0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f4d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4d8:	701a      	strb	r2, [r3, #0]
    f4da:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f4de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4e2:	781b      	ldrb	r3, [r3, #0]
    f4e4:	3301      	adds	r3, #1
    f4e6:	b2da      	uxtb	r2, r3
    f4e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4f0:	701a      	strb	r2, [r3, #0]
    f4f2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f4f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4fa:	781b      	ldrb	r3, [r3, #0]
    f4fc:	2bff      	cmp	r3, #255	; 0xff
    f4fe:	d105      	bne.n	f50c <send_gps_pos+0xd6c>
    f500:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f508:	2200      	movs	r2, #0
    f50a:	701a      	strb	r2, [r3, #0]
    f50c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f514:	781b      	ldrb	r3, [r3, #0]
    f516:	461a      	mov	r2, r3
    f518:	f24b 0334 	movw	r3, #45108	; 0xb034
    f51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f520:	7819      	ldrb	r1, [r3, #0]
    f522:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f52a:	5499      	strb	r1, [r3, r2]
    f52c:	f24b 0334 	movw	r3, #45108	; 0xb034
    f530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f534:	781a      	ldrb	r2, [r3, #0]
    f536:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f53e:	781b      	ldrb	r3, [r3, #0]
    f540:	4413      	add	r3, r2
    f542:	b2da      	uxtb	r2, r3
    f544:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f54c:	701a      	strb	r2, [r3, #0]
    f54e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f556:	781a      	ldrb	r2, [r3, #0]
    f558:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f55c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f560:	781b      	ldrb	r3, [r3, #0]
    f562:	4413      	add	r3, r2
    f564:	b2da      	uxtb	r2, r3
    f566:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f56e:	701a      	strb	r2, [r3, #0]
    f570:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f578:	781b      	ldrb	r3, [r3, #0]
    f57a:	3301      	adds	r3, #1
    f57c:	b2da      	uxtb	r2, r3
    f57e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f586:	701a      	strb	r2, [r3, #0]
    f588:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f590:	781b      	ldrb	r3, [r3, #0]
    f592:	2bff      	cmp	r3, #255	; 0xff
    f594:	d105      	bne.n	f5a2 <send_gps_pos+0xe02>
    f596:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f59e:	2200      	movs	r2, #0
    f5a0:	701a      	strb	r2, [r3, #0]
    f5a2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5aa:	781b      	ldrb	r3, [r3, #0]
    f5ac:	461a      	mov	r2, r3
    f5ae:	f24b 0334 	movw	r3, #45108	; 0xb034
    f5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5b6:	7859      	ldrb	r1, [r3, #1]
    f5b8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5c0:	5499      	strb	r1, [r3, r2]
    f5c2:	4b8b      	ldr	r3, [pc, #556]	; (f7f0 <send_gps_pos+0x1050>)
    f5c4:	781a      	ldrb	r2, [r3, #0]
    f5c6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ce:	781b      	ldrb	r3, [r3, #0]
    f5d0:	4413      	add	r3, r2
    f5d2:	b2da      	uxtb	r2, r3
    f5d4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5dc:	701a      	strb	r2, [r3, #0]
    f5de:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5e6:	781a      	ldrb	r2, [r3, #0]
    f5e8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5f0:	781b      	ldrb	r3, [r3, #0]
    f5f2:	4413      	add	r3, r2
    f5f4:	b2da      	uxtb	r2, r3
    f5f6:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5fe:	701a      	strb	r2, [r3, #0]
    f600:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f608:	781b      	ldrb	r3, [r3, #0]
    f60a:	3301      	adds	r3, #1
    f60c:	b2da      	uxtb	r2, r3
    f60e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f616:	701a      	strb	r2, [r3, #0]
    f618:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f620:	781b      	ldrb	r3, [r3, #0]
    f622:	2bff      	cmp	r3, #255	; 0xff
    f624:	d105      	bne.n	f632 <send_gps_pos+0xe92>
    f626:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f62e:	2200      	movs	r2, #0
    f630:	701a      	strb	r2, [r3, #0]
    f632:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f63a:	781b      	ldrb	r3, [r3, #0]
    f63c:	461a      	mov	r2, r3
    f63e:	f24b 0334 	movw	r3, #45108	; 0xb034
    f642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f646:	7899      	ldrb	r1, [r3, #2]
    f648:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f650:	5499      	strb	r1, [r3, r2]
    f652:	4b68      	ldr	r3, [pc, #416]	; (f7f4 <send_gps_pos+0x1054>)
    f654:	781a      	ldrb	r2, [r3, #0]
    f656:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f65e:	781b      	ldrb	r3, [r3, #0]
    f660:	4413      	add	r3, r2
    f662:	b2da      	uxtb	r2, r3
    f664:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f66c:	701a      	strb	r2, [r3, #0]
    f66e:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f676:	781a      	ldrb	r2, [r3, #0]
    f678:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f680:	781b      	ldrb	r3, [r3, #0]
    f682:	4413      	add	r3, r2
    f684:	b2da      	uxtb	r2, r3
    f686:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f68e:	701a      	strb	r2, [r3, #0]
    f690:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f698:	781b      	ldrb	r3, [r3, #0]
    f69a:	3301      	adds	r3, #1
    f69c:	b2da      	uxtb	r2, r3
    f69e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6a6:	701a      	strb	r2, [r3, #0]
    f6a8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6b0:	781b      	ldrb	r3, [r3, #0]
    f6b2:	2bff      	cmp	r3, #255	; 0xff
    f6b4:	d105      	bne.n	f6c2 <send_gps_pos+0xf22>
    f6b6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6be:	2200      	movs	r2, #0
    f6c0:	701a      	strb	r2, [r3, #0]
    f6c2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f6c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ca:	781b      	ldrb	r3, [r3, #0]
    f6cc:	461a      	mov	r2, r3
    f6ce:	f24b 0334 	movw	r3, #45108	; 0xb034
    f6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6d6:	78d9      	ldrb	r1, [r3, #3]
    f6d8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6e0:	5499      	strb	r1, [r3, r2]
    f6e2:	4b45      	ldr	r3, [pc, #276]	; (f7f8 <send_gps_pos+0x1058>)
    f6e4:	781a      	ldrb	r2, [r3, #0]
    f6e6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ee:	781b      	ldrb	r3, [r3, #0]
    f6f0:	4413      	add	r3, r2
    f6f2:	b2da      	uxtb	r2, r3
    f6f4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6fc:	701a      	strb	r2, [r3, #0]
    f6fe:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f706:	781a      	ldrb	r2, [r3, #0]
    f708:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f710:	781b      	ldrb	r3, [r3, #0]
    f712:	4413      	add	r3, r2
    f714:	b2da      	uxtb	r2, r3
    f716:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f71e:	701a      	strb	r2, [r3, #0]
    f720:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f728:	781b      	ldrb	r3, [r3, #0]
    f72a:	3301      	adds	r3, #1
    f72c:	b2da      	uxtb	r2, r3
    f72e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f736:	701a      	strb	r2, [r3, #0]
    f738:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f740:	781b      	ldrb	r3, [r3, #0]
    f742:	2bff      	cmp	r3, #255	; 0xff
    f744:	d105      	bne.n	f752 <send_gps_pos+0xfb2>
    f746:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f74a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f74e:	2200      	movs	r2, #0
    f750:	701a      	strb	r2, [r3, #0]
    f752:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f75a:	781b      	ldrb	r3, [r3, #0]
    f75c:	461a      	mov	r2, r3
    f75e:	f24b 0328 	movw	r3, #45096	; 0xb028
    f762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f766:	7819      	ldrb	r1, [r3, #0]
    f768:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f770:	5499      	strb	r1, [r3, r2]
    f772:	f24b 0328 	movw	r3, #45096	; 0xb028
    f776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f77a:	781a      	ldrb	r2, [r3, #0]
    f77c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f784:	781b      	ldrb	r3, [r3, #0]
    f786:	4413      	add	r3, r2
    f788:	b2da      	uxtb	r2, r3
    f78a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f792:	701a      	strb	r2, [r3, #0]
    f794:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f79c:	781a      	ldrb	r2, [r3, #0]
    f79e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7a6:	781b      	ldrb	r3, [r3, #0]
    f7a8:	4413      	add	r3, r2
    f7aa:	b2da      	uxtb	r2, r3
    f7ac:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7b4:	701a      	strb	r2, [r3, #0]
    f7b6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7be:	781b      	ldrb	r3, [r3, #0]
    f7c0:	3301      	adds	r3, #1
    f7c2:	b2da      	uxtb	r2, r3
    f7c4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7cc:	701a      	strb	r2, [r3, #0]
    f7ce:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7d6:	781b      	ldrb	r3, [r3, #0]
    f7d8:	2bff      	cmp	r3, #255	; 0xff
    f7da:	d10f      	bne.n	f7fc <send_gps_pos+0x105c>
    f7dc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7e4:	2200      	movs	r2, #0
    f7e6:	701a      	strb	r2, [r3, #0]
    f7e8:	e008      	b.n	f7fc <send_gps_pos+0x105c>
    f7ea:	bf00      	nop
    f7ec:	2000b033 	.word	0x2000b033
    f7f0:	2000b035 	.word	0x2000b035
    f7f4:	2000b036 	.word	0x2000b036
    f7f8:	2000b037 	.word	0x2000b037
    f7fc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f804:	781b      	ldrb	r3, [r3, #0]
    f806:	461a      	mov	r2, r3
    f808:	f24b 0328 	movw	r3, #45096	; 0xb028
    f80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f810:	7859      	ldrb	r1, [r3, #1]
    f812:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f81a:	5499      	strb	r1, [r3, r2]
    f81c:	4bc0      	ldr	r3, [pc, #768]	; (fb20 <send_gps_pos+0x1380>)
    f81e:	781a      	ldrb	r2, [r3, #0]
    f820:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f828:	781b      	ldrb	r3, [r3, #0]
    f82a:	4413      	add	r3, r2
    f82c:	b2da      	uxtb	r2, r3
    f82e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f836:	701a      	strb	r2, [r3, #0]
    f838:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f840:	781a      	ldrb	r2, [r3, #0]
    f842:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f84a:	781b      	ldrb	r3, [r3, #0]
    f84c:	4413      	add	r3, r2
    f84e:	b2da      	uxtb	r2, r3
    f850:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f858:	701a      	strb	r2, [r3, #0]
    f85a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f85e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f862:	781b      	ldrb	r3, [r3, #0]
    f864:	3301      	adds	r3, #1
    f866:	b2da      	uxtb	r2, r3
    f868:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f870:	701a      	strb	r2, [r3, #0]
    f872:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f87a:	781b      	ldrb	r3, [r3, #0]
    f87c:	2bff      	cmp	r3, #255	; 0xff
    f87e:	d105      	bne.n	f88c <send_gps_pos+0x10ec>
    f880:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f888:	2200      	movs	r2, #0
    f88a:	701a      	strb	r2, [r3, #0]
    f88c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f894:	781b      	ldrb	r3, [r3, #0]
    f896:	461a      	mov	r2, r3
    f898:	f24b 0328 	movw	r3, #45096	; 0xb028
    f89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8a0:	7899      	ldrb	r1, [r3, #2]
    f8a2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f8a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8aa:	5499      	strb	r1, [r3, r2]
    f8ac:	4b9d      	ldr	r3, [pc, #628]	; (fb24 <send_gps_pos+0x1384>)
    f8ae:	781a      	ldrb	r2, [r3, #0]
    f8b0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8b8:	781b      	ldrb	r3, [r3, #0]
    f8ba:	4413      	add	r3, r2
    f8bc:	b2da      	uxtb	r2, r3
    f8be:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8c6:	701a      	strb	r2, [r3, #0]
    f8c8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8d0:	781a      	ldrb	r2, [r3, #0]
    f8d2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8da:	781b      	ldrb	r3, [r3, #0]
    f8dc:	4413      	add	r3, r2
    f8de:	b2da      	uxtb	r2, r3
    f8e0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8e8:	701a      	strb	r2, [r3, #0]
    f8ea:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8f2:	781b      	ldrb	r3, [r3, #0]
    f8f4:	3301      	adds	r3, #1
    f8f6:	b2da      	uxtb	r2, r3
    f8f8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f900:	701a      	strb	r2, [r3, #0]
    f902:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f90a:	781b      	ldrb	r3, [r3, #0]
    f90c:	2bff      	cmp	r3, #255	; 0xff
    f90e:	d105      	bne.n	f91c <send_gps_pos+0x117c>
    f910:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f918:	2200      	movs	r2, #0
    f91a:	701a      	strb	r2, [r3, #0]
    f91c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f924:	781b      	ldrb	r3, [r3, #0]
    f926:	461a      	mov	r2, r3
    f928:	f24b 0328 	movw	r3, #45096	; 0xb028
    f92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f930:	78d9      	ldrb	r1, [r3, #3]
    f932:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f93a:	5499      	strb	r1, [r3, r2]
    f93c:	4b7a      	ldr	r3, [pc, #488]	; (fb28 <send_gps_pos+0x1388>)
    f93e:	781a      	ldrb	r2, [r3, #0]
    f940:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f948:	781b      	ldrb	r3, [r3, #0]
    f94a:	4413      	add	r3, r2
    f94c:	b2da      	uxtb	r2, r3
    f94e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f956:	701a      	strb	r2, [r3, #0]
    f958:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f960:	781a      	ldrb	r2, [r3, #0]
    f962:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f96a:	781b      	ldrb	r3, [r3, #0]
    f96c:	4413      	add	r3, r2
    f96e:	b2da      	uxtb	r2, r3
    f970:	f64a 73be 	movw	r3, #44990	; 0xafbe
    f974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f978:	701a      	strb	r2, [r3, #0]
    f97a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f982:	781b      	ldrb	r3, [r3, #0]
    f984:	3301      	adds	r3, #1
    f986:	b2da      	uxtb	r2, r3
    f988:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f990:	701a      	strb	r2, [r3, #0]
    f992:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f99a:	781b      	ldrb	r3, [r3, #0]
    f99c:	2bff      	cmp	r3, #255	; 0xff
    f99e:	d105      	bne.n	f9ac <send_gps_pos+0x120c>
    f9a0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9a8:	2200      	movs	r2, #0
    f9aa:	701a      	strb	r2, [r3, #0]
    f9ac:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9b4:	781b      	ldrb	r3, [r3, #0]
    f9b6:	461a      	mov	r2, r3
    f9b8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    f9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9c0:	7819      	ldrb	r1, [r3, #0]
    f9c2:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    f9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ca:	5499      	strb	r1, [r3, r2]
    f9cc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9d4:	781b      	ldrb	r3, [r3, #0]
    f9d6:	3301      	adds	r3, #1
    f9d8:	b2da      	uxtb	r2, r3
    f9da:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9e2:	701a      	strb	r2, [r3, #0]
    f9e4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ec:	781b      	ldrb	r3, [r3, #0]
    f9ee:	2bff      	cmp	r3, #255	; 0xff
    f9f0:	d105      	bne.n	f9fe <send_gps_pos+0x125e>
    f9f2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    f9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9fa:	2200      	movs	r2, #0
    f9fc:	701a      	strb	r2, [r3, #0]
    f9fe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fa02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa06:	781b      	ldrb	r3, [r3, #0]
    fa08:	461a      	mov	r2, r3
    fa0a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fa0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa12:	7819      	ldrb	r1, [r3, #0]
    fa14:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    fa18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa1c:	5499      	strb	r1, [r3, r2]
    fa1e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fa22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa26:	781b      	ldrb	r3, [r3, #0]
    fa28:	3301      	adds	r3, #1
    fa2a:	b2da      	uxtb	r2, r3
    fa2c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fa30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa34:	701a      	strb	r2, [r3, #0]
    fa36:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fa3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa3e:	781b      	ldrb	r3, [r3, #0]
    fa40:	2bff      	cmp	r3, #255	; 0xff
    fa42:	d105      	bne.n	fa50 <send_gps_pos+0x12b0>
    fa44:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fa48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa4c:	2200      	movs	r2, #0
    fa4e:	701a      	strb	r2, [r3, #0]
    fa50:	f242 0339 	movw	r3, #8249	; 0x2039
    fa54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa58:	781b      	ldrb	r3, [r3, #0]
    fa5a:	b2db      	uxtb	r3, r3
    fa5c:	f003 0310 	and.w	r3, r3, #16
    fa60:	2b00      	cmp	r3, #0
    fa62:	d15a      	bne.n	fb1a <send_gps_pos+0x137a>
    fa64:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    fa68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa6c:	781b      	ldrb	r3, [r3, #0]
    fa6e:	b2db      	uxtb	r3, r3
    fa70:	461a      	mov	r2, r3
    fa72:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    fa76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa7a:	5c9a      	ldrb	r2, [r3, r2]
    fa7c:	f64a 73bb 	movw	r3, #44987	; 0xafbb
    fa80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa84:	701a      	strb	r2, [r3, #0]
    fa86:	f64a 73bc 	movw	r3, #44988	; 0xafbc
    fa8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa8e:	2200      	movs	r2, #0
    fa90:	701a      	strb	r2, [r3, #0]
    fa92:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    fa96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa9a:	781b      	ldrb	r3, [r3, #0]
    fa9c:	b2db      	uxtb	r3, r3
    fa9e:	3301      	adds	r3, #1
    faa0:	b2da      	uxtb	r2, r3
    faa2:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    faa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faaa:	701a      	strb	r2, [r3, #0]
    faac:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    fab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fab4:	781b      	ldrb	r3, [r3, #0]
    fab6:	b2db      	uxtb	r3, r3
    fab8:	2bff      	cmp	r3, #255	; 0xff
    faba:	d105      	bne.n	fac8 <send_gps_pos+0x1328>
    fabc:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    fac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fac4:	2200      	movs	r2, #0
    fac6:	701a      	strb	r2, [r3, #0]
    fac8:	f242 0338 	movw	r3, #8248	; 0x2038
    facc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fad0:	f242 0238 	movw	r2, #8248	; 0x2038
    fad4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fad8:	7812      	ldrb	r2, [r2, #0]
    fada:	b2d2      	uxtb	r2, r2
    fadc:	f042 0201 	orr.w	r2, r2, #1
    fae0:	b2d2      	uxtb	r2, r2
    fae2:	701a      	strb	r2, [r3, #0]
    fae4:	f242 0339 	movw	r3, #8249	; 0x2039
    fae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faec:	f242 0239 	movw	r2, #8249	; 0x2039
    faf0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    faf4:	7812      	ldrb	r2, [r2, #0]
    faf6:	b2d2      	uxtb	r2, r2
    faf8:	f042 0210 	orr.w	r2, r2, #16
    fafc:	b2d2      	uxtb	r2, r2
    fafe:	701a      	strb	r2, [r3, #0]
    fb00:	e00b      	b.n	fb1a <send_gps_pos+0x137a>
    fb02:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    fb06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb0a:	781b      	ldrb	r3, [r3, #0]
    fb0c:	3301      	adds	r3, #1
    fb0e:	b2da      	uxtb	r2, r3
    fb10:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    fb14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb18:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    fb1a:	f005 fbfd 	bl	15318 <estimator_update_state_gps>
  }
}
    fb1e:	bd80      	pop	{r7, pc}
    fb20:	2000b029 	.word	0x2000b029
    fb24:	2000b02a 	.word	0x2000b02a
    fb28:	2000b02b 	.word	0x2000b02b

0000fb2c <send_radIR>:

void send_radIR(void){
    fb2c:	b480      	push	{r7}
    fb2e:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    fb30:	f24b 034e 	movw	r3, #45134	; 0xb04e
    fb34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb38:	781b      	ldrb	r3, [r3, #0]
    fb3a:	2b00      	cmp	r3, #0
    fb3c:	f000 85e8 	beq.w	10710 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    fb40:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fb44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb48:	781a      	ldrb	r2, [r3, #0]
    fb4a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    fb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb52:	781b      	ldrb	r3, [r3, #0]
    fb54:	b2db      	uxtb	r3, r3
    fb56:	429a      	cmp	r2, r3
    fb58:	d313      	bcc.n	fb82 <send_radIR+0x56>
    fb5a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    fb5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb62:	781b      	ldrb	r3, [r3, #0]
    fb64:	b2db      	uxtb	r3, r3
    fb66:	461a      	mov	r2, r3
    fb68:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fb6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb70:	781b      	ldrb	r3, [r3, #0]
    fb72:	1ad3      	subs	r3, r2, r3
    fb74:	33ff      	adds	r3, #255	; 0xff
    fb76:	2b14      	cmp	r3, #20
    fb78:	bfd4      	ite	le
    fb7a:	2300      	movle	r3, #0
    fb7c:	2301      	movgt	r3, #1
    fb7e:	b2db      	uxtb	r3, r3
    fb80:	e011      	b.n	fba6 <send_radIR+0x7a>
    fb82:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    fb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb8a:	781b      	ldrb	r3, [r3, #0]
    fb8c:	b2db      	uxtb	r3, r3
    fb8e:	461a      	mov	r2, r3
    fb90:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fb94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb98:	781b      	ldrb	r3, [r3, #0]
    fb9a:	1ad3      	subs	r3, r2, r3
    fb9c:	2b14      	cmp	r3, #20
    fb9e:	bfd4      	ite	le
    fba0:	2300      	movle	r3, #0
    fba2:	2301      	movgt	r3, #1
    fba4:	b2db      	uxtb	r3, r3
    fba6:	2b00      	cmp	r3, #0
    fba8:	f000 85a6 	beq.w	106f8 <send_radIR+0xbcc>
    fbac:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbb4:	781b      	ldrb	r3, [r3, #0]
    fbb6:	461a      	mov	r2, r3
    fbb8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    fbbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbc0:	2105      	movs	r1, #5
    fbc2:	5499      	strb	r1, [r3, r2]
    fbc4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fbc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbcc:	781b      	ldrb	r3, [r3, #0]
    fbce:	3301      	adds	r3, #1
    fbd0:	b2da      	uxtb	r2, r3
    fbd2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fbd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbda:	701a      	strb	r2, [r3, #0]
    fbdc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fbe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbe4:	781b      	ldrb	r3, [r3, #0]
    fbe6:	2bff      	cmp	r3, #255	; 0xff
    fbe8:	d105      	bne.n	fbf6 <send_radIR+0xca>
    fbea:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fbee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbf2:	2200      	movs	r2, #0
    fbf4:	701a      	strb	r2, [r3, #0]
    fbf6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fbfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbfe:	781b      	ldrb	r3, [r3, #0]
    fc00:	461a      	mov	r2, r3
    fc02:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    fc06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc0a:	2105      	movs	r1, #5
    fc0c:	5499      	strb	r1, [r3, r2]
    fc0e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fc12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc16:	781b      	ldrb	r3, [r3, #0]
    fc18:	3301      	adds	r3, #1
    fc1a:	b2da      	uxtb	r2, r3
    fc1c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fc20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc24:	701a      	strb	r2, [r3, #0]
    fc26:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fc2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc2e:	781b      	ldrb	r3, [r3, #0]
    fc30:	2bff      	cmp	r3, #255	; 0xff
    fc32:	d105      	bne.n	fc40 <send_radIR+0x114>
    fc34:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fc38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc3c:	2200      	movs	r2, #0
    fc3e:	701a      	strb	r2, [r3, #0]
    fc40:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fc44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc48:	2205      	movs	r2, #5
    fc4a:	701a      	strb	r2, [r3, #0]
    fc4c:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fc50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc54:	2205      	movs	r2, #5
    fc56:	701a      	strb	r2, [r3, #0]
    fc58:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fc5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc60:	781b      	ldrb	r3, [r3, #0]
    fc62:	461a      	mov	r2, r3
    fc64:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    fc68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc6c:	7819      	ldrb	r1, [r3, #0]
    fc6e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    fc72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc76:	5499      	strb	r1, [r3, r2]
    fc78:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    fc7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc80:	781a      	ldrb	r2, [r3, #0]
    fc82:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fc86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc8a:	781b      	ldrb	r3, [r3, #0]
    fc8c:	4413      	add	r3, r2
    fc8e:	b2da      	uxtb	r2, r3
    fc90:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fc94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc98:	701a      	strb	r2, [r3, #0]
    fc9a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fc9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fca2:	781a      	ldrb	r2, [r3, #0]
    fca4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcac:	781b      	ldrb	r3, [r3, #0]
    fcae:	4413      	add	r3, r2
    fcb0:	b2da      	uxtb	r2, r3
    fcb2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fcb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcba:	701a      	strb	r2, [r3, #0]
    fcbc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fcc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcc4:	781b      	ldrb	r3, [r3, #0]
    fcc6:	3301      	adds	r3, #1
    fcc8:	b2da      	uxtb	r2, r3
    fcca:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fcce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcd2:	701a      	strb	r2, [r3, #0]
    fcd4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fcd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcdc:	781b      	ldrb	r3, [r3, #0]
    fcde:	2bff      	cmp	r3, #255	; 0xff
    fce0:	d105      	bne.n	fcee <send_radIR+0x1c2>
    fce2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcea:	2200      	movs	r2, #0
    fcec:	701a      	strb	r2, [r3, #0]
    fcee:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fcf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcf6:	781b      	ldrb	r3, [r3, #0]
    fcf8:	461a      	mov	r2, r3
    fcfa:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    fcfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd02:	7859      	ldrb	r1, [r3, #1]
    fd04:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    fd08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd0c:	5499      	strb	r1, [r3, r2]
    fd0e:	4bd2      	ldr	r3, [pc, #840]	; (10058 <send_radIR+0x52c>)
    fd10:	781a      	ldrb	r2, [r3, #0]
    fd12:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fd16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd1a:	781b      	ldrb	r3, [r3, #0]
    fd1c:	4413      	add	r3, r2
    fd1e:	b2da      	uxtb	r2, r3
    fd20:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fd24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd28:	701a      	strb	r2, [r3, #0]
    fd2a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fd2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd32:	781a      	ldrb	r2, [r3, #0]
    fd34:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd3c:	781b      	ldrb	r3, [r3, #0]
    fd3e:	4413      	add	r3, r2
    fd40:	b2da      	uxtb	r2, r3
    fd42:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd4a:	701a      	strb	r2, [r3, #0]
    fd4c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd54:	781b      	ldrb	r3, [r3, #0]
    fd56:	3301      	adds	r3, #1
    fd58:	b2da      	uxtb	r2, r3
    fd5a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fd5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd62:	701a      	strb	r2, [r3, #0]
    fd64:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd6c:	781b      	ldrb	r3, [r3, #0]
    fd6e:	2bff      	cmp	r3, #255	; 0xff
    fd70:	d105      	bne.n	fd7e <send_radIR+0x252>
    fd72:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd7a:	2200      	movs	r2, #0
    fd7c:	701a      	strb	r2, [r3, #0]
    fd7e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fd82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd86:	781b      	ldrb	r3, [r3, #0]
    fd88:	461a      	mov	r2, r3
    fd8a:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    fd8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd92:	7899      	ldrb	r1, [r3, #2]
    fd94:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    fd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd9c:	5499      	strb	r1, [r3, r2]
    fd9e:	4baf      	ldr	r3, [pc, #700]	; (1005c <send_radIR+0x530>)
    fda0:	781a      	ldrb	r2, [r3, #0]
    fda2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdaa:	781b      	ldrb	r3, [r3, #0]
    fdac:	4413      	add	r3, r2
    fdae:	b2da      	uxtb	r2, r3
    fdb0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb8:	701a      	strb	r2, [r3, #0]
    fdba:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fdbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdc2:	781a      	ldrb	r2, [r3, #0]
    fdc4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fdc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdcc:	781b      	ldrb	r3, [r3, #0]
    fdce:	4413      	add	r3, r2
    fdd0:	b2da      	uxtb	r2, r3
    fdd2:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fdd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdda:	701a      	strb	r2, [r3, #0]
    fddc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fde4:	781b      	ldrb	r3, [r3, #0]
    fde6:	3301      	adds	r3, #1
    fde8:	b2da      	uxtb	r2, r3
    fdea:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fdee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdf2:	701a      	strb	r2, [r3, #0]
    fdf4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fdf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdfc:	781b      	ldrb	r3, [r3, #0]
    fdfe:	2bff      	cmp	r3, #255	; 0xff
    fe00:	d105      	bne.n	fe0e <send_radIR+0x2e2>
    fe02:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fe06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe0a:	2200      	movs	r2, #0
    fe0c:	701a      	strb	r2, [r3, #0]
    fe0e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fe12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe16:	781b      	ldrb	r3, [r3, #0]
    fe18:	461a      	mov	r2, r3
    fe1a:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    fe1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe22:	78d9      	ldrb	r1, [r3, #3]
    fe24:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    fe28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe2c:	5499      	strb	r1, [r3, r2]
    fe2e:	4b8c      	ldr	r3, [pc, #560]	; (10060 <send_radIR+0x534>)
    fe30:	781a      	ldrb	r2, [r3, #0]
    fe32:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fe36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe3a:	781b      	ldrb	r3, [r3, #0]
    fe3c:	4413      	add	r3, r2
    fe3e:	b2da      	uxtb	r2, r3
    fe40:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fe44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe48:	701a      	strb	r2, [r3, #0]
    fe4a:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fe4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe52:	781a      	ldrb	r2, [r3, #0]
    fe54:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fe58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe5c:	781b      	ldrb	r3, [r3, #0]
    fe5e:	4413      	add	r3, r2
    fe60:	b2da      	uxtb	r2, r3
    fe62:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fe66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe6a:	701a      	strb	r2, [r3, #0]
    fe6c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fe70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe74:	781b      	ldrb	r3, [r3, #0]
    fe76:	3301      	adds	r3, #1
    fe78:	b2da      	uxtb	r2, r3
    fe7a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fe7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe82:	701a      	strb	r2, [r3, #0]
    fe84:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fe88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe8c:	781b      	ldrb	r3, [r3, #0]
    fe8e:	2bff      	cmp	r3, #255	; 0xff
    fe90:	d105      	bne.n	fe9e <send_radIR+0x372>
    fe92:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fe96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe9a:	2200      	movs	r2, #0
    fe9c:	701a      	strb	r2, [r3, #0]
    fe9e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    fea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea6:	781b      	ldrb	r3, [r3, #0]
    fea8:	461a      	mov	r2, r3
    feaa:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    feae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb2:	7819      	ldrb	r1, [r3, #0]
    feb4:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    feb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    febc:	5499      	strb	r1, [r3, r2]
    febe:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    fec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec6:	781a      	ldrb	r2, [r3, #0]
    fec8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed0:	781b      	ldrb	r3, [r3, #0]
    fed2:	4413      	add	r3, r2
    fed4:	b2da      	uxtb	r2, r3
    fed6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    feda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fede:	701a      	strb	r2, [r3, #0]
    fee0:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fee8:	781a      	ldrb	r2, [r3, #0]
    feea:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    feee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fef2:	781b      	ldrb	r3, [r3, #0]
    fef4:	4413      	add	r3, r2
    fef6:	b2da      	uxtb	r2, r3
    fef8:	f64a 73be 	movw	r3, #44990	; 0xafbe
    fefc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff00:	701a      	strb	r2, [r3, #0]
    ff02:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ff06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff0a:	781b      	ldrb	r3, [r3, #0]
    ff0c:	3301      	adds	r3, #1
    ff0e:	b2da      	uxtb	r2, r3
    ff10:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ff14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff18:	701a      	strb	r2, [r3, #0]
    ff1a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ff1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff22:	781b      	ldrb	r3, [r3, #0]
    ff24:	2bff      	cmp	r3, #255	; 0xff
    ff26:	d105      	bne.n	ff34 <send_radIR+0x408>
    ff28:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ff2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff30:	2200      	movs	r2, #0
    ff32:	701a      	strb	r2, [r3, #0]
    ff34:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ff38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff3c:	781b      	ldrb	r3, [r3, #0]
    ff3e:	461a      	mov	r2, r3
    ff40:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    ff44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff48:	7859      	ldrb	r1, [r3, #1]
    ff4a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ff4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff52:	5499      	strb	r1, [r3, r2]
    ff54:	4b43      	ldr	r3, [pc, #268]	; (10064 <send_radIR+0x538>)
    ff56:	781a      	ldrb	r2, [r3, #0]
    ff58:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ff5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff60:	781b      	ldrb	r3, [r3, #0]
    ff62:	4413      	add	r3, r2
    ff64:	b2da      	uxtb	r2, r3
    ff66:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ff6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff6e:	701a      	strb	r2, [r3, #0]
    ff70:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ff74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff78:	781a      	ldrb	r2, [r3, #0]
    ff7a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ff7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff82:	781b      	ldrb	r3, [r3, #0]
    ff84:	4413      	add	r3, r2
    ff86:	b2da      	uxtb	r2, r3
    ff88:	f64a 73be 	movw	r3, #44990	; 0xafbe
    ff8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff90:	701a      	strb	r2, [r3, #0]
    ff92:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ff96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff9a:	781b      	ldrb	r3, [r3, #0]
    ff9c:	3301      	adds	r3, #1
    ff9e:	b2da      	uxtb	r2, r3
    ffa0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ffa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa8:	701a      	strb	r2, [r3, #0]
    ffaa:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ffae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffb2:	781b      	ldrb	r3, [r3, #0]
    ffb4:	2bff      	cmp	r3, #255	; 0xff
    ffb6:	d105      	bne.n	ffc4 <send_radIR+0x498>
    ffb8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ffbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc0:	2200      	movs	r2, #0
    ffc2:	701a      	strb	r2, [r3, #0]
    ffc4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    ffc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffcc:	781b      	ldrb	r3, [r3, #0]
    ffce:	461a      	mov	r2, r3
    ffd0:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    ffd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffd8:	7899      	ldrb	r1, [r3, #2]
    ffda:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    ffde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe2:	5499      	strb	r1, [r3, r2]
    ffe4:	4b20      	ldr	r3, [pc, #128]	; (10068 <send_radIR+0x53c>)
    ffe6:	781a      	ldrb	r2, [r3, #0]
    ffe8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    ffec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff0:	781b      	ldrb	r3, [r3, #0]
    fff2:	4413      	add	r3, r2
    fff4:	b2da      	uxtb	r2, r3
    fff6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
    fffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fffe:	701a      	strb	r2, [r3, #0]
   10000:	f64a 73be 	movw	r3, #44990	; 0xafbe
   10004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10008:	781a      	ldrb	r2, [r3, #0]
   1000a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   1000e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10012:	781b      	ldrb	r3, [r3, #0]
   10014:	4413      	add	r3, r2
   10016:	b2da      	uxtb	r2, r3
   10018:	f64a 73be 	movw	r3, #44990	; 0xafbe
   1001c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10020:	701a      	strb	r2, [r3, #0]
   10022:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10026:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1002a:	781b      	ldrb	r3, [r3, #0]
   1002c:	3301      	adds	r3, #1
   1002e:	b2da      	uxtb	r2, r3
   10030:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10038:	701a      	strb	r2, [r3, #0]
   1003a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1003e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10042:	781b      	ldrb	r3, [r3, #0]
   10044:	2bff      	cmp	r3, #255	; 0xff
   10046:	d111      	bne.n	1006c <send_radIR+0x540>
   10048:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1004c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10050:	2200      	movs	r2, #0
   10052:	701a      	strb	r2, [r3, #0]
   10054:	e00a      	b.n	1006c <send_radIR+0x540>
   10056:	bf00      	nop
   10058:	2000b4b1 	.word	0x2000b4b1
   1005c:	2000b4b2 	.word	0x2000b4b2
   10060:	2000b4b3 	.word	0x2000b4b3
   10064:	2000b4b5 	.word	0x2000b4b5
   10068:	2000b4b6 	.word	0x2000b4b6
   1006c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10074:	781b      	ldrb	r3, [r3, #0]
   10076:	461a      	mov	r2, r3
   10078:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   1007c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10080:	78d9      	ldrb	r1, [r3, #3]
   10082:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   10086:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1008a:	5499      	strb	r1, [r3, r2]
   1008c:	4bd3      	ldr	r3, [pc, #844]	; (103dc <send_radIR+0x8b0>)
   1008e:	781a      	ldrb	r2, [r3, #0]
   10090:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10098:	781b      	ldrb	r3, [r3, #0]
   1009a:	4413      	add	r3, r2
   1009c:	b2da      	uxtb	r2, r3
   1009e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   100a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a6:	701a      	strb	r2, [r3, #0]
   100a8:	f64a 73be 	movw	r3, #44990	; 0xafbe
   100ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100b0:	781a      	ldrb	r2, [r3, #0]
   100b2:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   100b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ba:	781b      	ldrb	r3, [r3, #0]
   100bc:	4413      	add	r3, r2
   100be:	b2da      	uxtb	r2, r3
   100c0:	f64a 73be 	movw	r3, #44990	; 0xafbe
   100c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100c8:	701a      	strb	r2, [r3, #0]
   100ca:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   100ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d2:	781b      	ldrb	r3, [r3, #0]
   100d4:	3301      	adds	r3, #1
   100d6:	b2da      	uxtb	r2, r3
   100d8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   100dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e0:	701a      	strb	r2, [r3, #0]
   100e2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   100e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ea:	781b      	ldrb	r3, [r3, #0]
   100ec:	2bff      	cmp	r3, #255	; 0xff
   100ee:	d105      	bne.n	100fc <send_radIR+0x5d0>
   100f0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   100f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f8:	2200      	movs	r2, #0
   100fa:	701a      	strb	r2, [r3, #0]
   100fc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10100:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10104:	781b      	ldrb	r3, [r3, #0]
   10106:	461a      	mov	r2, r3
   10108:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   1010c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10110:	7819      	ldrb	r1, [r3, #0]
   10112:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   10116:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1011a:	5499      	strb	r1, [r3, r2]
   1011c:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   10120:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10124:	781a      	ldrb	r2, [r3, #0]
   10126:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   1012a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1012e:	781b      	ldrb	r3, [r3, #0]
   10130:	4413      	add	r3, r2
   10132:	b2da      	uxtb	r2, r3
   10134:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1013c:	701a      	strb	r2, [r3, #0]
   1013e:	f64a 73be 	movw	r3, #44990	; 0xafbe
   10142:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10146:	781a      	ldrb	r2, [r3, #0]
   10148:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   1014c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10150:	781b      	ldrb	r3, [r3, #0]
   10152:	4413      	add	r3, r2
   10154:	b2da      	uxtb	r2, r3
   10156:	f64a 73be 	movw	r3, #44990	; 0xafbe
   1015a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1015e:	701a      	strb	r2, [r3, #0]
   10160:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10164:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10168:	781b      	ldrb	r3, [r3, #0]
   1016a:	3301      	adds	r3, #1
   1016c:	b2da      	uxtb	r2, r3
   1016e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10172:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10176:	701a      	strb	r2, [r3, #0]
   10178:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1017c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10180:	781b      	ldrb	r3, [r3, #0]
   10182:	2bff      	cmp	r3, #255	; 0xff
   10184:	d105      	bne.n	10192 <send_radIR+0x666>
   10186:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1018a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1018e:	2200      	movs	r2, #0
   10190:	701a      	strb	r2, [r3, #0]
   10192:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10196:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1019a:	781b      	ldrb	r3, [r3, #0]
   1019c:	461a      	mov	r2, r3
   1019e:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   101a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101a6:	7859      	ldrb	r1, [r3, #1]
   101a8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   101ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101b0:	5499      	strb	r1, [r3, r2]
   101b2:	4b8b      	ldr	r3, [pc, #556]	; (103e0 <send_radIR+0x8b4>)
   101b4:	781a      	ldrb	r2, [r3, #0]
   101b6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   101ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101be:	781b      	ldrb	r3, [r3, #0]
   101c0:	4413      	add	r3, r2
   101c2:	b2da      	uxtb	r2, r3
   101c4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   101c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101cc:	701a      	strb	r2, [r3, #0]
   101ce:	f64a 73be 	movw	r3, #44990	; 0xafbe
   101d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101d6:	781a      	ldrb	r2, [r3, #0]
   101d8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   101dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101e0:	781b      	ldrb	r3, [r3, #0]
   101e2:	4413      	add	r3, r2
   101e4:	b2da      	uxtb	r2, r3
   101e6:	f64a 73be 	movw	r3, #44990	; 0xafbe
   101ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ee:	701a      	strb	r2, [r3, #0]
   101f0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   101f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101f8:	781b      	ldrb	r3, [r3, #0]
   101fa:	3301      	adds	r3, #1
   101fc:	b2da      	uxtb	r2, r3
   101fe:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10202:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10206:	701a      	strb	r2, [r3, #0]
   10208:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1020c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10210:	781b      	ldrb	r3, [r3, #0]
   10212:	2bff      	cmp	r3, #255	; 0xff
   10214:	d105      	bne.n	10222 <send_radIR+0x6f6>
   10216:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1021a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1021e:	2200      	movs	r2, #0
   10220:	701a      	strb	r2, [r3, #0]
   10222:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10226:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1022a:	781b      	ldrb	r3, [r3, #0]
   1022c:	461a      	mov	r2, r3
   1022e:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   10232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10236:	7899      	ldrb	r1, [r3, #2]
   10238:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   1023c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10240:	5499      	strb	r1, [r3, r2]
   10242:	4b68      	ldr	r3, [pc, #416]	; (103e4 <send_radIR+0x8b8>)
   10244:	781a      	ldrb	r2, [r3, #0]
   10246:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   1024a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1024e:	781b      	ldrb	r3, [r3, #0]
   10250:	4413      	add	r3, r2
   10252:	b2da      	uxtb	r2, r3
   10254:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10258:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1025c:	701a      	strb	r2, [r3, #0]
   1025e:	f64a 73be 	movw	r3, #44990	; 0xafbe
   10262:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10266:	781a      	ldrb	r2, [r3, #0]
   10268:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   1026c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10270:	781b      	ldrb	r3, [r3, #0]
   10272:	4413      	add	r3, r2
   10274:	b2da      	uxtb	r2, r3
   10276:	f64a 73be 	movw	r3, #44990	; 0xafbe
   1027a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1027e:	701a      	strb	r2, [r3, #0]
   10280:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10284:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10288:	781b      	ldrb	r3, [r3, #0]
   1028a:	3301      	adds	r3, #1
   1028c:	b2da      	uxtb	r2, r3
   1028e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10292:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10296:	701a      	strb	r2, [r3, #0]
   10298:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1029c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102a0:	781b      	ldrb	r3, [r3, #0]
   102a2:	2bff      	cmp	r3, #255	; 0xff
   102a4:	d105      	bne.n	102b2 <send_radIR+0x786>
   102a6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   102aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ae:	2200      	movs	r2, #0
   102b0:	701a      	strb	r2, [r3, #0]
   102b2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   102b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ba:	781b      	ldrb	r3, [r3, #0]
   102bc:	461a      	mov	r2, r3
   102be:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   102c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102c6:	78d9      	ldrb	r1, [r3, #3]
   102c8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   102cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102d0:	5499      	strb	r1, [r3, r2]
   102d2:	4b45      	ldr	r3, [pc, #276]	; (103e8 <send_radIR+0x8bc>)
   102d4:	781a      	ldrb	r2, [r3, #0]
   102d6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   102da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102de:	781b      	ldrb	r3, [r3, #0]
   102e0:	4413      	add	r3, r2
   102e2:	b2da      	uxtb	r2, r3
   102e4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   102e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ec:	701a      	strb	r2, [r3, #0]
   102ee:	f64a 73be 	movw	r3, #44990	; 0xafbe
   102f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102f6:	781a      	ldrb	r2, [r3, #0]
   102f8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   102fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10300:	781b      	ldrb	r3, [r3, #0]
   10302:	4413      	add	r3, r2
   10304:	b2da      	uxtb	r2, r3
   10306:	f64a 73be 	movw	r3, #44990	; 0xafbe
   1030a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1030e:	701a      	strb	r2, [r3, #0]
   10310:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10314:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10318:	781b      	ldrb	r3, [r3, #0]
   1031a:	3301      	adds	r3, #1
   1031c:	b2da      	uxtb	r2, r3
   1031e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10326:	701a      	strb	r2, [r3, #0]
   10328:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1032c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10330:	781b      	ldrb	r3, [r3, #0]
   10332:	2bff      	cmp	r3, #255	; 0xff
   10334:	d105      	bne.n	10342 <send_radIR+0x816>
   10336:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1033a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1033e:	2200      	movs	r2, #0
   10340:	701a      	strb	r2, [r3, #0]
   10342:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10346:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1034a:	781b      	ldrb	r3, [r3, #0]
   1034c:	461a      	mov	r2, r3
   1034e:	f240 33f2 	movw	r3, #1010	; 0x3f2
   10352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10356:	7819      	ldrb	r1, [r3, #0]
   10358:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   1035c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10360:	5499      	strb	r1, [r3, r2]
   10362:	f240 33f2 	movw	r3, #1010	; 0x3f2
   10366:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1036a:	781a      	ldrb	r2, [r3, #0]
   1036c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10370:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10374:	781b      	ldrb	r3, [r3, #0]
   10376:	4413      	add	r3, r2
   10378:	b2da      	uxtb	r2, r3
   1037a:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   1037e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10382:	701a      	strb	r2, [r3, #0]
   10384:	f64a 73be 	movw	r3, #44990	; 0xafbe
   10388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1038c:	781a      	ldrb	r2, [r3, #0]
   1038e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10392:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10396:	781b      	ldrb	r3, [r3, #0]
   10398:	4413      	add	r3, r2
   1039a:	b2da      	uxtb	r2, r3
   1039c:	f64a 73be 	movw	r3, #44990	; 0xafbe
   103a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103a4:	701a      	strb	r2, [r3, #0]
   103a6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   103aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ae:	781b      	ldrb	r3, [r3, #0]
   103b0:	3301      	adds	r3, #1
   103b2:	b2da      	uxtb	r2, r3
   103b4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   103b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103bc:	701a      	strb	r2, [r3, #0]
   103be:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   103c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c6:	781b      	ldrb	r3, [r3, #0]
   103c8:	2bff      	cmp	r3, #255	; 0xff
   103ca:	d10f      	bne.n	103ec <send_radIR+0x8c0>
   103cc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   103d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103d4:	2200      	movs	r2, #0
   103d6:	701a      	strb	r2, [r3, #0]
   103d8:	e008      	b.n	103ec <send_radIR+0x8c0>
   103da:	bf00      	nop
   103dc:	2000b4b7 	.word	0x2000b4b7
   103e0:	2000b4ad 	.word	0x2000b4ad
   103e4:	2000b4ae 	.word	0x2000b4ae
   103e8:	2000b4af 	.word	0x2000b4af
   103ec:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   103f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103f4:	781b      	ldrb	r3, [r3, #0]
   103f6:	461a      	mov	r2, r3
   103f8:	f240 33f2 	movw	r3, #1010	; 0x3f2
   103fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10400:	7859      	ldrb	r1, [r3, #1]
   10402:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   10406:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1040a:	5499      	strb	r1, [r3, r2]
   1040c:	4bc2      	ldr	r3, [pc, #776]	; (10718 <send_radIR+0xbec>)
   1040e:	781a      	ldrb	r2, [r3, #0]
   10410:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10414:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10418:	781b      	ldrb	r3, [r3, #0]
   1041a:	4413      	add	r3, r2
   1041c:	b2da      	uxtb	r2, r3
   1041e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10426:	701a      	strb	r2, [r3, #0]
   10428:	f64a 73be 	movw	r3, #44990	; 0xafbe
   1042c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10430:	781a      	ldrb	r2, [r3, #0]
   10432:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1043a:	781b      	ldrb	r3, [r3, #0]
   1043c:	4413      	add	r3, r2
   1043e:	b2da      	uxtb	r2, r3
   10440:	f64a 73be 	movw	r3, #44990	; 0xafbe
   10444:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10448:	701a      	strb	r2, [r3, #0]
   1044a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1044e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10452:	781b      	ldrb	r3, [r3, #0]
   10454:	3301      	adds	r3, #1
   10456:	b2da      	uxtb	r2, r3
   10458:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1045c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10460:	701a      	strb	r2, [r3, #0]
   10462:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10466:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1046a:	781b      	ldrb	r3, [r3, #0]
   1046c:	2bff      	cmp	r3, #255	; 0xff
   1046e:	d105      	bne.n	1047c <send_radIR+0x950>
   10470:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10478:	2200      	movs	r2, #0
   1047a:	701a      	strb	r2, [r3, #0]
   1047c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10480:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10484:	781b      	ldrb	r3, [r3, #0]
   10486:	461a      	mov	r2, r3
   10488:	f240 33f4 	movw	r3, #1012	; 0x3f4
   1048c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10490:	7819      	ldrb	r1, [r3, #0]
   10492:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   10496:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1049a:	5499      	strb	r1, [r3, r2]
   1049c:	f240 33f4 	movw	r3, #1012	; 0x3f4
   104a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104a4:	781a      	ldrb	r2, [r3, #0]
   104a6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   104aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ae:	781b      	ldrb	r3, [r3, #0]
   104b0:	4413      	add	r3, r2
   104b2:	b2da      	uxtb	r2, r3
   104b4:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   104b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104bc:	701a      	strb	r2, [r3, #0]
   104be:	f64a 73be 	movw	r3, #44990	; 0xafbe
   104c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104c6:	781a      	ldrb	r2, [r3, #0]
   104c8:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   104cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104d0:	781b      	ldrb	r3, [r3, #0]
   104d2:	4413      	add	r3, r2
   104d4:	b2da      	uxtb	r2, r3
   104d6:	f64a 73be 	movw	r3, #44990	; 0xafbe
   104da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104de:	701a      	strb	r2, [r3, #0]
   104e0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   104e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104e8:	781b      	ldrb	r3, [r3, #0]
   104ea:	3301      	adds	r3, #1
   104ec:	b2da      	uxtb	r2, r3
   104ee:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   104f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104f6:	701a      	strb	r2, [r3, #0]
   104f8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   104fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10500:	781b      	ldrb	r3, [r3, #0]
   10502:	2bff      	cmp	r3, #255	; 0xff
   10504:	d105      	bne.n	10512 <send_radIR+0x9e6>
   10506:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1050a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1050e:	2200      	movs	r2, #0
   10510:	701a      	strb	r2, [r3, #0]
   10512:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10516:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1051a:	781b      	ldrb	r3, [r3, #0]
   1051c:	461a      	mov	r2, r3
   1051e:	f240 33f4 	movw	r3, #1012	; 0x3f4
   10522:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10526:	7859      	ldrb	r1, [r3, #1]
   10528:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   1052c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10530:	5499      	strb	r1, [r3, r2]
   10532:	4b7a      	ldr	r3, [pc, #488]	; (1071c <send_radIR+0xbf0>)
   10534:	781a      	ldrb	r2, [r3, #0]
   10536:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   1053a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1053e:	781b      	ldrb	r3, [r3, #0]
   10540:	4413      	add	r3, r2
   10542:	b2da      	uxtb	r2, r3
   10544:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10548:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1054c:	701a      	strb	r2, [r3, #0]
   1054e:	f64a 73be 	movw	r3, #44990	; 0xafbe
   10552:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10556:	781a      	ldrb	r2, [r3, #0]
   10558:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   1055c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10560:	781b      	ldrb	r3, [r3, #0]
   10562:	4413      	add	r3, r2
   10564:	b2da      	uxtb	r2, r3
   10566:	f64a 73be 	movw	r3, #44990	; 0xafbe
   1056a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1056e:	701a      	strb	r2, [r3, #0]
   10570:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10574:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10578:	781b      	ldrb	r3, [r3, #0]
   1057a:	3301      	adds	r3, #1
   1057c:	b2da      	uxtb	r2, r3
   1057e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10582:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10586:	701a      	strb	r2, [r3, #0]
   10588:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1058c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10590:	781b      	ldrb	r3, [r3, #0]
   10592:	2bff      	cmp	r3, #255	; 0xff
   10594:	d105      	bne.n	105a2 <send_radIR+0xa76>
   10596:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1059a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1059e:	2200      	movs	r2, #0
   105a0:	701a      	strb	r2, [r3, #0]
   105a2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   105a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105aa:	781b      	ldrb	r3, [r3, #0]
   105ac:	461a      	mov	r2, r3
   105ae:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   105b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105b6:	7819      	ldrb	r1, [r3, #0]
   105b8:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   105bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105c0:	5499      	strb	r1, [r3, r2]
   105c2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   105c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105ca:	781b      	ldrb	r3, [r3, #0]
   105cc:	3301      	adds	r3, #1
   105ce:	b2da      	uxtb	r2, r3
   105d0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   105d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105d8:	701a      	strb	r2, [r3, #0]
   105da:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   105de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105e2:	781b      	ldrb	r3, [r3, #0]
   105e4:	2bff      	cmp	r3, #255	; 0xff
   105e6:	d105      	bne.n	105f4 <send_radIR+0xac8>
   105e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   105ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105f0:	2200      	movs	r2, #0
   105f2:	701a      	strb	r2, [r3, #0]
   105f4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   105f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105fc:	781b      	ldrb	r3, [r3, #0]
   105fe:	461a      	mov	r2, r3
   10600:	f64a 73be 	movw	r3, #44990	; 0xafbe
   10604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10608:	7819      	ldrb	r1, [r3, #0]
   1060a:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   1060e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10612:	5499      	strb	r1, [r3, r2]
   10614:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1061c:	781b      	ldrb	r3, [r3, #0]
   1061e:	3301      	adds	r3, #1
   10620:	b2da      	uxtb	r2, r3
   10622:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10626:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1062a:	701a      	strb	r2, [r3, #0]
   1062c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10630:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10634:	781b      	ldrb	r3, [r3, #0]
   10636:	2bff      	cmp	r3, #255	; 0xff
   10638:	d105      	bne.n	10646 <send_radIR+0xb1a>
   1063a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1063e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10642:	2200      	movs	r2, #0
   10644:	701a      	strb	r2, [r3, #0]
   10646:	f242 0339 	movw	r3, #8249	; 0x2039
   1064a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1064e:	781b      	ldrb	r3, [r3, #0]
   10650:	b2db      	uxtb	r3, r3
   10652:	f003 0310 	and.w	r3, r3, #16
   10656:	2b00      	cmp	r3, #0
   10658:	d15a      	bne.n	10710 <send_radIR+0xbe4>
   1065a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   1065e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10662:	781b      	ldrb	r3, [r3, #0]
   10664:	b2db      	uxtb	r3, r3
   10666:	461a      	mov	r2, r3
   10668:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   1066c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10670:	5c9a      	ldrb	r2, [r3, r2]
   10672:	f64a 73bb 	movw	r3, #44987	; 0xafbb
   10676:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1067a:	701a      	strb	r2, [r3, #0]
   1067c:	f64a 73bc 	movw	r3, #44988	; 0xafbc
   10680:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10684:	2200      	movs	r2, #0
   10686:	701a      	strb	r2, [r3, #0]
   10688:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   1068c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10690:	781b      	ldrb	r3, [r3, #0]
   10692:	b2db      	uxtb	r3, r3
   10694:	3301      	adds	r3, #1
   10696:	b2da      	uxtb	r2, r3
   10698:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   1069c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106a0:	701a      	strb	r2, [r3, #0]
   106a2:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   106a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106aa:	781b      	ldrb	r3, [r3, #0]
   106ac:	b2db      	uxtb	r3, r3
   106ae:	2bff      	cmp	r3, #255	; 0xff
   106b0:	d105      	bne.n	106be <send_radIR+0xb92>
   106b2:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   106b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ba:	2200      	movs	r2, #0
   106bc:	701a      	strb	r2, [r3, #0]
   106be:	f242 0338 	movw	r3, #8248	; 0x2038
   106c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106c6:	f242 0238 	movw	r2, #8248	; 0x2038
   106ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
   106ce:	7812      	ldrb	r2, [r2, #0]
   106d0:	b2d2      	uxtb	r2, r2
   106d2:	f042 0201 	orr.w	r2, r2, #1
   106d6:	b2d2      	uxtb	r2, r2
   106d8:	701a      	strb	r2, [r3, #0]
   106da:	f242 0339 	movw	r3, #8249	; 0x2039
   106de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106e2:	f242 0239 	movw	r2, #8249	; 0x2039
   106e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   106ea:	7812      	ldrb	r2, [r2, #0]
   106ec:	b2d2      	uxtb	r2, r2
   106ee:	f042 0210 	orr.w	r2, r2, #16
   106f2:	b2d2      	uxtb	r2, r2
   106f4:	701a      	strb	r2, [r3, #0]
   106f6:	e00b      	b.n	10710 <send_radIR+0xbe4>
   106f8:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   106fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10700:	781b      	ldrb	r3, [r3, #0]
   10702:	3301      	adds	r3, #1
   10704:	b2da      	uxtb	r2, r3
   10706:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   1070a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1070e:	701a      	strb	r2, [r3, #0]
}
   10710:	46bd      	mov	sp, r7
   10712:	f85d 7b04 	ldr.w	r7, [sp], #4
   10716:	4770      	bx	lr
   10718:	200003f3 	.word	0x200003f3
   1071c:	200003f5 	.word	0x200003f5

00010720 <send_takeOff>:

void send_takeOff(void){
   10720:	b580      	push	{r7, lr}
   10722:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10724:	f24b 034e 	movw	r3, #45134	; 0xb04e
   10728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1072c:	781b      	ldrb	r3, [r3, #0]
   1072e:	2b00      	cmp	r3, #0
   10730:	f000 8200 	beq.w	10b34 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10734:	f24b 439c 	movw	r3, #46236	; 0xb49c
   10738:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1073c:	881b      	ldrh	r3, [r3, #0]
   1073e:	2b00      	cmp	r3, #0
   10740:	f040 81f2 	bne.w	10b28 <send_takeOff+0x408>
   10744:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   10748:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1074c:	681b      	ldr	r3, [r3, #0]
   1074e:	4618      	mov	r0, r3
   10750:	f04f 0100 	mov.w	r1, #0
   10754:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10758:	f007 fe12 	bl	18380 <__aeabi_fcmpgt>
   1075c:	4603      	mov	r3, r0
   1075e:	2b00      	cmp	r3, #0
   10760:	f000 81e2 	beq.w	10b28 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10764:	f24b 439c 	movw	r3, #46236	; 0xb49c
   10768:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1076c:	2201      	movs	r2, #1
   1076e:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10770:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
   10774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10778:	2201      	movs	r2, #1
   1077a:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   1077c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10780:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10784:	781a      	ldrb	r2, [r3, #0]
   10786:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   1078a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1078e:	781b      	ldrb	r3, [r3, #0]
   10790:	b2db      	uxtb	r3, r3
   10792:	429a      	cmp	r2, r3
   10794:	d313      	bcc.n	107be <send_takeOff+0x9e>
   10796:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   1079a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1079e:	781b      	ldrb	r3, [r3, #0]
   107a0:	b2db      	uxtb	r3, r3
   107a2:	461a      	mov	r2, r3
   107a4:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   107a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ac:	781b      	ldrb	r3, [r3, #0]
   107ae:	1ad3      	subs	r3, r2, r3
   107b0:	33ff      	adds	r3, #255	; 0xff
   107b2:	2b06      	cmp	r3, #6
   107b4:	bfd4      	ite	le
   107b6:	2300      	movle	r3, #0
   107b8:	2301      	movgt	r3, #1
   107ba:	b2db      	uxtb	r3, r3
   107bc:	e011      	b.n	107e2 <send_takeOff+0xc2>
   107be:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   107c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107c6:	781b      	ldrb	r3, [r3, #0]
   107c8:	b2db      	uxtb	r3, r3
   107ca:	461a      	mov	r2, r3
   107cc:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   107d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107d4:	781b      	ldrb	r3, [r3, #0]
   107d6:	1ad3      	subs	r3, r2, r3
   107d8:	2b06      	cmp	r3, #6
   107da:	bfd4      	ite	le
   107dc:	2300      	movle	r3, #0
   107de:	2301      	movgt	r3, #1
   107e0:	b2db      	uxtb	r3, r3
   107e2:	2b00      	cmp	r3, #0
   107e4:	f000 8194 	beq.w	10b10 <send_takeOff+0x3f0>
   107e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   107ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f0:	781b      	ldrb	r3, [r3, #0]
   107f2:	461a      	mov	r2, r3
   107f4:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   107f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107fc:	2105      	movs	r1, #5
   107fe:	5499      	strb	r1, [r3, r2]
   10800:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10808:	781b      	ldrb	r3, [r3, #0]
   1080a:	3301      	adds	r3, #1
   1080c:	b2da      	uxtb	r2, r3
   1080e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10812:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10816:	701a      	strb	r2, [r3, #0]
   10818:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1081c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10820:	781b      	ldrb	r3, [r3, #0]
   10822:	2bff      	cmp	r3, #255	; 0xff
   10824:	d105      	bne.n	10832 <send_takeOff+0x112>
   10826:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1082a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1082e:	2200      	movs	r2, #0
   10830:	701a      	strb	r2, [r3, #0]
   10832:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10836:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1083a:	781b      	ldrb	r3, [r3, #0]
   1083c:	461a      	mov	r2, r3
   1083e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   10842:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10846:	2104      	movs	r1, #4
   10848:	5499      	strb	r1, [r3, r2]
   1084a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1084e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10852:	781b      	ldrb	r3, [r3, #0]
   10854:	3301      	adds	r3, #1
   10856:	b2da      	uxtb	r2, r3
   10858:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1085c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10860:	701a      	strb	r2, [r3, #0]
   10862:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10866:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1086a:	781b      	ldrb	r3, [r3, #0]
   1086c:	2bff      	cmp	r3, #255	; 0xff
   1086e:	d105      	bne.n	1087c <send_takeOff+0x15c>
   10870:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10878:	2200      	movs	r2, #0
   1087a:	701a      	strb	r2, [r3, #0]
   1087c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10880:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10884:	2204      	movs	r2, #4
   10886:	701a      	strb	r2, [r3, #0]
   10888:	f64a 73be 	movw	r3, #44990	; 0xafbe
   1088c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10890:	2204      	movs	r2, #4
   10892:	701a      	strb	r2, [r3, #0]
   10894:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10898:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1089c:	781b      	ldrb	r3, [r3, #0]
   1089e:	461a      	mov	r2, r3
   108a0:	f64a 639a 	movw	r3, #44698	; 0xae9a
   108a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108a8:	7819      	ldrb	r1, [r3, #0]
   108aa:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   108ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108b2:	5499      	strb	r1, [r3, r2]
   108b4:	f64a 639a 	movw	r3, #44698	; 0xae9a
   108b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108bc:	781a      	ldrb	r2, [r3, #0]
   108be:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   108c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108c6:	781b      	ldrb	r3, [r3, #0]
   108c8:	4413      	add	r3, r2
   108ca:	b2da      	uxtb	r2, r3
   108cc:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   108d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108d4:	701a      	strb	r2, [r3, #0]
   108d6:	f64a 73be 	movw	r3, #44990	; 0xafbe
   108da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108de:	781a      	ldrb	r2, [r3, #0]
   108e0:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   108e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108e8:	781b      	ldrb	r3, [r3, #0]
   108ea:	4413      	add	r3, r2
   108ec:	b2da      	uxtb	r2, r3
   108ee:	f64a 73be 	movw	r3, #44990	; 0xafbe
   108f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108f6:	701a      	strb	r2, [r3, #0]
   108f8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   108fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10900:	781b      	ldrb	r3, [r3, #0]
   10902:	3301      	adds	r3, #1
   10904:	b2da      	uxtb	r2, r3
   10906:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1090a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1090e:	701a      	strb	r2, [r3, #0]
   10910:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10918:	781b      	ldrb	r3, [r3, #0]
   1091a:	2bff      	cmp	r3, #255	; 0xff
   1091c:	d105      	bne.n	1092a <send_takeOff+0x20a>
   1091e:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10922:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10926:	2200      	movs	r2, #0
   10928:	701a      	strb	r2, [r3, #0]
   1092a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1092e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10932:	781b      	ldrb	r3, [r3, #0]
   10934:	461a      	mov	r2, r3
   10936:	f64a 639a 	movw	r3, #44698	; 0xae9a
   1093a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1093e:	7859      	ldrb	r1, [r3, #1]
   10940:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   10944:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10948:	5499      	strb	r1, [r3, r2]
   1094a:	4b7b      	ldr	r3, [pc, #492]	; (10b38 <send_takeOff+0x418>)
   1094c:	781a      	ldrb	r2, [r3, #0]
   1094e:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10952:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10956:	781b      	ldrb	r3, [r3, #0]
   10958:	4413      	add	r3, r2
   1095a:	b2da      	uxtb	r2, r3
   1095c:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10960:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10964:	701a      	strb	r2, [r3, #0]
   10966:	f64a 73be 	movw	r3, #44990	; 0xafbe
   1096a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1096e:	781a      	ldrb	r2, [r3, #0]
   10970:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   10974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10978:	781b      	ldrb	r3, [r3, #0]
   1097a:	4413      	add	r3, r2
   1097c:	b2da      	uxtb	r2, r3
   1097e:	f64a 73be 	movw	r3, #44990	; 0xafbe
   10982:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10986:	701a      	strb	r2, [r3, #0]
   10988:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1098c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10990:	781b      	ldrb	r3, [r3, #0]
   10992:	3301      	adds	r3, #1
   10994:	b2da      	uxtb	r2, r3
   10996:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   1099a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1099e:	701a      	strb	r2, [r3, #0]
   109a0:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   109a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109a8:	781b      	ldrb	r3, [r3, #0]
   109aa:	2bff      	cmp	r3, #255	; 0xff
   109ac:	d105      	bne.n	109ba <send_takeOff+0x29a>
   109ae:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   109b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109b6:	2200      	movs	r2, #0
   109b8:	701a      	strb	r2, [r3, #0]
   109ba:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   109be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c2:	781b      	ldrb	r3, [r3, #0]
   109c4:	461a      	mov	r2, r3
   109c6:	f64a 73bd 	movw	r3, #44989	; 0xafbd
   109ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109ce:	7819      	ldrb	r1, [r3, #0]
   109d0:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   109d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109d8:	5499      	strb	r1, [r3, r2]
   109da:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   109de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109e2:	781b      	ldrb	r3, [r3, #0]
   109e4:	3301      	adds	r3, #1
   109e6:	b2da      	uxtb	r2, r3
   109e8:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   109ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109f0:	701a      	strb	r2, [r3, #0]
   109f2:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   109f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109fa:	781b      	ldrb	r3, [r3, #0]
   109fc:	2bff      	cmp	r3, #255	; 0xff
   109fe:	d105      	bne.n	10a0c <send_takeOff+0x2ec>
   10a00:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a08:	2200      	movs	r2, #0
   10a0a:	701a      	strb	r2, [r3, #0]
   10a0c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a14:	781b      	ldrb	r3, [r3, #0]
   10a16:	461a      	mov	r2, r3
   10a18:	f64a 73be 	movw	r3, #44990	; 0xafbe
   10a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a20:	7819      	ldrb	r1, [r3, #0]
   10a22:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   10a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a2a:	5499      	strb	r1, [r3, r2]
   10a2c:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a34:	781b      	ldrb	r3, [r3, #0]
   10a36:	3301      	adds	r3, #1
   10a38:	b2da      	uxtb	r2, r3
   10a3a:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a42:	701a      	strb	r2, [r3, #0]
   10a44:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a4c:	781b      	ldrb	r3, [r3, #0]
   10a4e:	2bff      	cmp	r3, #255	; 0xff
   10a50:	d105      	bne.n	10a5e <send_takeOff+0x33e>
   10a52:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a5a:	2200      	movs	r2, #0
   10a5c:	701a      	strb	r2, [r3, #0]
   10a5e:	f242 0339 	movw	r3, #8249	; 0x2039
   10a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a66:	781b      	ldrb	r3, [r3, #0]
   10a68:	b2db      	uxtb	r3, r3
   10a6a:	f003 0310 	and.w	r3, r3, #16
   10a6e:	2b00      	cmp	r3, #0
   10a70:	d15a      	bne.n	10b28 <send_takeOff+0x408>
   10a72:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   10a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a7a:	781b      	ldrb	r3, [r3, #0]
   10a7c:	b2db      	uxtb	r3, r3
   10a7e:	461a      	mov	r2, r3
   10a80:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   10a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a88:	5c9a      	ldrb	r2, [r3, r2]
   10a8a:	f64a 73bb 	movw	r3, #44987	; 0xafbb
   10a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a92:	701a      	strb	r2, [r3, #0]
   10a94:	f64a 73bc 	movw	r3, #44988	; 0xafbc
   10a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a9c:	2200      	movs	r2, #0
   10a9e:	701a      	strb	r2, [r3, #0]
   10aa0:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   10aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aa8:	781b      	ldrb	r3, [r3, #0]
   10aaa:	b2db      	uxtb	r3, r3
   10aac:	3301      	adds	r3, #1
   10aae:	b2da      	uxtb	r2, r3
   10ab0:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   10ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ab8:	701a      	strb	r2, [r3, #0]
   10aba:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   10abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ac2:	781b      	ldrb	r3, [r3, #0]
   10ac4:	b2db      	uxtb	r3, r3
   10ac6:	2bff      	cmp	r3, #255	; 0xff
   10ac8:	d105      	bne.n	10ad6 <send_takeOff+0x3b6>
   10aca:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   10ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ad2:	2200      	movs	r2, #0
   10ad4:	701a      	strb	r2, [r3, #0]
   10ad6:	f242 0338 	movw	r3, #8248	; 0x2038
   10ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ade:	f242 0238 	movw	r2, #8248	; 0x2038
   10ae2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ae6:	7812      	ldrb	r2, [r2, #0]
   10ae8:	b2d2      	uxtb	r2, r2
   10aea:	f042 0201 	orr.w	r2, r2, #1
   10aee:	b2d2      	uxtb	r2, r2
   10af0:	701a      	strb	r2, [r3, #0]
   10af2:	f242 0339 	movw	r3, #8249	; 0x2039
   10af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10afa:	f242 0239 	movw	r2, #8249	; 0x2039
   10afe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b02:	7812      	ldrb	r2, [r2, #0]
   10b04:	b2d2      	uxtb	r2, r2
   10b06:	f042 0210 	orr.w	r2, r2, #16
   10b0a:	b2d2      	uxtb	r2, r2
   10b0c:	701a      	strb	r2, [r3, #0]
   10b0e:	e00b      	b.n	10b28 <send_takeOff+0x408>
   10b10:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   10b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b18:	781b      	ldrb	r3, [r3, #0]
   10b1a:	3301      	adds	r3, #1
   10b1c:	b2da      	uxtb	r2, r3
   10b1e:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   10b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b26:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10b28:	f24b 034e 	movw	r3, #45134	; 0xb04e
   10b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b30:	2200      	movs	r2, #0
   10b32:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10b34:	bd80      	pop	{r7, pc}
   10b36:	bf00      	nop
   10b38:	2000ae9b 	.word	0x2000ae9b
   10b3c:	f3af 8000 	nop.w

00010b40 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10b40:	b480      	push	{r7}
   10b42:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10b44:	f242 0317 	movw	r3, #8215	; 0x2017
   10b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b4c:	f242 0217 	movw	r2, #8215	; 0x2017
   10b50:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b54:	7812      	ldrb	r2, [r2, #0]
   10b56:	b2d2      	uxtb	r2, r2
   10b58:	f042 0210 	orr.w	r2, r2, #16
   10b5c:	b2d2      	uxtb	r2, r2
   10b5e:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10b60:	f242 0331 	movw	r3, #8241	; 0x2031
   10b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b68:	2201      	movs	r2, #1
   10b6a:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10b6c:	f242 0333 	movw	r3, #8243	; 0x2033
   10b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b74:	2219      	movs	r2, #25
   10b76:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10b78:	f242 0311 	movw	r3, #8209	; 0x2011
   10b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b80:	f242 0211 	movw	r2, #8209	; 0x2011
   10b84:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b88:	7812      	ldrb	r2, [r2, #0]
   10b8a:	b2d2      	uxtb	r2, r2
   10b8c:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10b90:	b2d2      	uxtb	r2, r2
   10b92:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10b94:	f242 0312 	movw	r3, #8210	; 0x2012
   10b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b9c:	f242 0212 	movw	r2, #8210	; 0x2012
   10ba0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ba4:	7812      	ldrb	r2, [r2, #0]
   10ba6:	b2d2      	uxtb	r2, r2
   10ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10bac:	b2d2      	uxtb	r2, r2
   10bae:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10bb0:	f242 0312 	movw	r3, #8210	; 0x2012
   10bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bb8:	f242 0212 	movw	r2, #8210	; 0x2012
   10bbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10bc0:	7812      	ldrb	r2, [r2, #0]
   10bc2:	b2d2      	uxtb	r2, r2
   10bc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10bc8:	b2d2      	uxtb	r2, r2
   10bca:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10bcc:	f242 033a 	movw	r3, #8250	; 0x203a
   10bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bd4:	f242 023a 	movw	r2, #8250	; 0x203a
   10bd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10bdc:	7812      	ldrb	r2, [r2, #0]
   10bde:	b2d2      	uxtb	r2, r2
   10be0:	f042 0202 	orr.w	r2, r2, #2
   10be4:	b2d2      	uxtb	r2, r2
   10be6:	701a      	strb	r2, [r3, #0]
}
   10be8:	46bd      	mov	sp, r7
   10bea:	f85d 7b04 	ldr.w	r7, [sp], #4
   10bee:	4770      	bx	lr

00010bf0 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10bf0:	b480      	push	{r7}
   10bf2:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10bf4:	f64a 73bc 	movw	r3, #44988	; 0xafbc
   10bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bfc:	781b      	ldrb	r3, [r3, #0]
   10bfe:	2b00      	cmp	r3, #0
   10c00:	d10e      	bne.n	10c20 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10c02:	f242 0312 	movw	r3, #8210	; 0x2012
   10c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c0a:	f242 0212 	movw	r2, #8210	; 0x2012
   10c0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c12:	7812      	ldrb	r2, [r2, #0]
   10c14:	b2d2      	uxtb	r2, r2
   10c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10c1a:	b2d2      	uxtb	r2, r2
   10c1c:	701a      	strb	r2, [r3, #0]
   10c1e:	e047      	b.n	10cb0 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10c20:	f64a 73bc 	movw	r3, #44988	; 0xafbc
   10c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c28:	781b      	ldrb	r3, [r3, #0]
   10c2a:	2b08      	cmp	r3, #8
   10c2c:	d832      	bhi.n	10c94 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10c2e:	f64a 73bb 	movw	r3, #44987	; 0xafbb
   10c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c36:	781b      	ldrb	r3, [r3, #0]
   10c38:	f003 0301 	and.w	r3, r3, #1
   10c3c:	2b00      	cmp	r3, #0
   10c3e:	d00e      	beq.n	10c5e <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10c40:	f242 0312 	movw	r3, #8210	; 0x2012
   10c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c48:	f242 0212 	movw	r2, #8210	; 0x2012
   10c4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c50:	7812      	ldrb	r2, [r2, #0]
   10c52:	b2d2      	uxtb	r2, r2
   10c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10c58:	b2d2      	uxtb	r2, r2
   10c5a:	701a      	strb	r2, [r3, #0]
   10c5c:	e00d      	b.n	10c7a <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10c5e:	f242 0312 	movw	r3, #8210	; 0x2012
   10c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c66:	f242 0212 	movw	r2, #8210	; 0x2012
   10c6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c6e:	7812      	ldrb	r2, [r2, #0]
   10c70:	b2d2      	uxtb	r2, r2
   10c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10c76:	b2d2      	uxtb	r2, r2
   10c78:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   10c7a:	f64a 73bb 	movw	r3, #44987	; 0xafbb
   10c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c82:	781b      	ldrb	r3, [r3, #0]
   10c84:	085b      	lsrs	r3, r3, #1
   10c86:	b2da      	uxtb	r2, r3
   10c88:	f64a 73bb 	movw	r3, #44987	; 0xafbb
   10c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c90:	701a      	strb	r2, [r3, #0]
   10c92:	e00d      	b.n	10cb0 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   10c94:	f242 0312 	movw	r3, #8210	; 0x2012
   10c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c9c:	f242 0212 	movw	r2, #8210	; 0x2012
   10ca0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ca4:	7812      	ldrb	r2, [r2, #0]
   10ca6:	b2d2      	uxtb	r2, r2
   10ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10cac:	b2d2      	uxtb	r2, r2
   10cae:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10cb0:	f64a 73bc 	movw	r3, #44988	; 0xafbc
   10cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cb8:	781b      	ldrb	r3, [r3, #0]
   10cba:	3301      	adds	r3, #1
   10cbc:	b2da      	uxtb	r2, r3
   10cbe:	f64a 73bc 	movw	r3, #44988	; 0xafbc
   10cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cc6:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10cc8:	f64a 73bc 	movw	r3, #44988	; 0xafbc
   10ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cd0:	781b      	ldrb	r3, [r3, #0]
   10cd2:	2b09      	cmp	r3, #9
   10cd4:	d94d      	bls.n	10d72 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10cd6:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
   10cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cde:	781a      	ldrb	r2, [r3, #0]
   10ce0:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   10ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ce8:	781b      	ldrb	r3, [r3, #0]
   10cea:	b2db      	uxtb	r3, r3
   10cec:	429a      	cmp	r2, r3
   10cee:	d10e      	bne.n	10d0e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10cf0:	f242 0339 	movw	r3, #8249	; 0x2039
   10cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cf8:	f242 0239 	movw	r2, #8249	; 0x2039
   10cfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d00:	7812      	ldrb	r2, [r2, #0]
   10d02:	b2d2      	uxtb	r2, r2
   10d04:	f022 0210 	bic.w	r2, r2, #16
   10d08:	b2d2      	uxtb	r2, r2
   10d0a:	701a      	strb	r2, [r3, #0]
   10d0c:	e031      	b.n	10d72 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   10d0e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   10d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d16:	781b      	ldrb	r3, [r3, #0]
   10d18:	b2db      	uxtb	r3, r3
   10d1a:	461a      	mov	r2, r3
   10d1c:	f64a 63bc 	movw	r3, #44732	; 0xaebc
   10d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d24:	5c9a      	ldrb	r2, [r3, r2]
   10d26:	f64a 73bb 	movw	r3, #44987	; 0xafbb
   10d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d2e:	701a      	strb	r2, [r3, #0]
   10d30:	f64a 73bc 	movw	r3, #44988	; 0xafbc
   10d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d38:	2200      	movs	r2, #0
   10d3a:	701a      	strb	r2, [r3, #0]
   10d3c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   10d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d44:	781b      	ldrb	r3, [r3, #0]
   10d46:	b2db      	uxtb	r3, r3
   10d48:	3301      	adds	r3, #1
   10d4a:	b2da      	uxtb	r2, r3
   10d4c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   10d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d54:	701a      	strb	r2, [r3, #0]
   10d56:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   10d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d5e:	781b      	ldrb	r3, [r3, #0]
   10d60:	b2db      	uxtb	r3, r3
   10d62:	2bff      	cmp	r3, #255	; 0xff
   10d64:	d105      	bne.n	10d72 <__vector_5+0x182>
   10d66:	f64a 63ba 	movw	r3, #44730	; 0xaeba
   10d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d6e:	2200      	movs	r2, #0
   10d70:	701a      	strb	r2, [r3, #0]
    }
  }
}
   10d72:	46bd      	mov	sp, r7
   10d74:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d78:	4770      	bx	lr
   10d7a:	bf00      	nop

00010d7c <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   10d7c:	b480      	push	{r7}
   10d7e:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   10d80:	f64a 73ef 	movw	r3, #45039	; 0xafef
   10d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d88:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   10d8a:	f240 33ee 	movw	r3, #1006	; 0x3ee
   10d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d92:	2200      	movs	r2, #0
   10d94:	701a      	strb	r2, [r3, #0]
}
   10d96:	46bd      	mov	sp, r7
   10d98:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d9c:	4770      	bx	lr
   10d9e:	bf00      	nop

00010da0 <link_fbw_send>:

void link_fbw_send(void) {
   10da0:	b480      	push	{r7}
   10da2:	b083      	sub	sp, #12
   10da4:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   10da6:	f64a 73f4 	movw	r3, #45044	; 0xaff4
   10daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dae:	781b      	ldrb	r3, [r3, #0]
   10db0:	b2db      	uxtb	r3, r3
   10db2:	2b00      	cmp	r3, #0
   10db4:	d00c      	beq.n	10dd0 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   10db6:	f64a 73f5 	movw	r3, #45045	; 0xaff5
   10dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dbe:	781b      	ldrb	r3, [r3, #0]
   10dc0:	3301      	adds	r3, #1
   10dc2:	b2da      	uxtb	r2, r3
   10dc4:	f64a 73f5 	movw	r3, #45045	; 0xaff5
   10dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dcc:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   10dce:	e064      	b.n	10e9a <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   10dd0:	f242 030d 	movw	r3, #8205	; 0x200d
   10dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dd8:	2251      	movs	r2, #81	; 0x51
   10dda:	701a      	strb	r2, [r3, #0]
   10ddc:	f242 030e 	movw	r3, #8206	; 0x200e
   10de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10de4:	781b      	ldrb	r3, [r3, #0]
   10de6:	b2db      	uxtb	r3, r3
   10de8:	b2db      	uxtb	r3, r3
   10dea:	b25b      	sxtb	r3, r3
   10dec:	2b00      	cmp	r3, #0
   10dee:	da05      	bge.n	10dfc <link_fbw_send+0x5c>
   10df0:	f242 030f 	movw	r3, #8207	; 0x200f
   10df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10df8:	781b      	ldrb	r3, [r3, #0]
   10dfa:	71fb      	strb	r3, [r7, #7]
   10dfc:	f242 030d 	movw	r3, #8205	; 0x200d
   10e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e04:	f242 020d 	movw	r2, #8205	; 0x200d
   10e08:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e0c:	7812      	ldrb	r2, [r2, #0]
   10e0e:	b2d2      	uxtb	r2, r2
   10e10:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10e14:	b2d2      	uxtb	r2, r2
   10e16:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   10e18:	f64a 73f4 	movw	r3, #45044	; 0xaff4
   10e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e20:	2201      	movs	r2, #1
   10e22:	701a      	strb	r2, [r3, #0]
   10e24:	f242 0318 	movw	r3, #8216	; 0x2018
   10e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e2c:	f242 0218 	movw	r2, #8216	; 0x2018
   10e30:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e34:	7812      	ldrb	r2, [r2, #0]
   10e36:	b2d2      	uxtb	r2, r2
   10e38:	f022 0201 	bic.w	r2, r2, #1
   10e3c:	b2d2      	uxtb	r2, r2
   10e3e:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   10e40:	f64a 73f1 	movw	r3, #45041	; 0xaff1
   10e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e48:	2200      	movs	r2, #0
   10e4a:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   10e4c:	f64a 73f2 	movw	r3, #45042	; 0xaff2
   10e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e54:	2200      	movs	r2, #0
   10e56:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   10e58:	f64a 73f1 	movw	r3, #45041	; 0xaff1
   10e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e60:	781b      	ldrb	r3, [r3, #0]
   10e62:	461a      	mov	r2, r3
   10e64:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   10e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e6c:	4413      	add	r3, r2
   10e6e:	781a      	ldrb	r2, [r3, #0]
   10e70:	f64a 73f3 	movw	r3, #45043	; 0xaff3
   10e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e78:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   10e7a:	f242 030f 	movw	r3, #8207	; 0x200f
   10e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e82:	f64a 72f3 	movw	r2, #45043	; 0xaff3
   10e86:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e8a:	7812      	ldrb	r2, [r2, #0]
   10e8c:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   10e8e:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e96:	2200      	movs	r2, #0
   10e98:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   10e9a:	370c      	adds	r7, #12
   10e9c:	46bd      	mov	sp, r7
   10e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ea2:	4770      	bx	lr

00010ea4 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   10ea4:	b480      	push	{r7}
   10ea6:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   10ea8:	f242 032a 	movw	r3, #8234	; 0x202a
   10eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb0:	f242 022c 	movw	r2, #8236	; 0x202c
   10eb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10eb8:	8812      	ldrh	r2, [r2, #0]
   10eba:	b292      	uxth	r2, r2
   10ebc:	32c8      	adds	r2, #200	; 0xc8
   10ebe:	b292      	uxth	r2, r2
   10ec0:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   10ec2:	f242 0336 	movw	r3, #8246	; 0x2036
   10ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eca:	f242 0236 	movw	r2, #8246	; 0x2036
   10ece:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ed2:	7812      	ldrb	r2, [r2, #0]
   10ed4:	b2d2      	uxtb	r2, r2
   10ed6:	f042 0210 	orr.w	r2, r2, #16
   10eda:	b2d2      	uxtb	r2, r2
   10edc:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   10ede:	f242 0337 	movw	r3, #8247	; 0x2037
   10ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ee6:	f242 0237 	movw	r2, #8247	; 0x2037
   10eea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10eee:	7812      	ldrb	r2, [r2, #0]
   10ef0:	b2d2      	uxtb	r2, r2
   10ef2:	f042 0210 	orr.w	r2, r2, #16
   10ef6:	b2d2      	uxtb	r2, r2
   10ef8:	701a      	strb	r2, [r3, #0]
}
   10efa:	46bd      	mov	sp, r7
   10efc:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f00:	4770      	bx	lr
   10f02:	bf00      	nop

00010f04 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   10f04:	b480      	push	{r7}
   10f06:	b083      	sub	sp, #12
   10f08:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   10f0a:	f242 0337 	movw	r3, #8247	; 0x2037
   10f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f12:	f242 0237 	movw	r2, #8247	; 0x2037
   10f16:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f1a:	7812      	ldrb	r2, [r2, #0]
   10f1c:	b2d2      	uxtb	r2, r2
   10f1e:	f022 0210 	bic.w	r2, r2, #16
   10f22:	b2d2      	uxtb	r2, r2
   10f24:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   10f26:	f64a 73f1 	movw	r3, #45041	; 0xaff1
   10f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f2e:	781b      	ldrb	r3, [r3, #0]
   10f30:	3301      	adds	r3, #1
   10f32:	b2da      	uxtb	r2, r3
   10f34:	f64a 73f1 	movw	r3, #45041	; 0xaff1
   10f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f3c:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   10f3e:	f64a 73f1 	movw	r3, #45041	; 0xaff1
   10f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f46:	781b      	ldrb	r3, [r3, #0]
   10f48:	2b17      	cmp	r3, #23
   10f4a:	d162      	bne.n	11012 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   10f4c:	f242 030f 	movw	r3, #8207	; 0x200f
   10f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f54:	781b      	ldrb	r3, [r3, #0]
   10f56:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   10f58:	f64a 73f2 	movw	r3, #45042	; 0xaff2
   10f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f60:	781b      	ldrb	r3, [r3, #0]
   10f62:	79fa      	ldrb	r2, [r7, #7]
   10f64:	429a      	cmp	r2, r3
   10f66:	d110      	bne.n	10f8a <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   10f68:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f70:	2201      	movs	r2, #1
   10f72:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   10f74:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   10f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f7c:	7d1a      	ldrb	r2, [r3, #20]
   10f7e:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   10f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f86:	701a      	strb	r2, [r3, #0]
   10f88:	e00c      	b.n	10fa4 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   10f8a:	f64a 73ef 	movw	r3, #45039	; 0xafef
   10f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f92:	781b      	ldrb	r3, [r3, #0]
   10f94:	b2db      	uxtb	r3, r3
   10f96:	3301      	adds	r3, #1
   10f98:	b2da      	uxtb	r2, r3
   10f9a:	f64a 73ef 	movw	r3, #45039	; 0xafef
   10f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa2:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   10fa4:	f240 33ee 	movw	r3, #1006	; 0x3ee
   10fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fac:	2201      	movs	r2, #1
   10fae:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   10fb0:	f64a 73f4 	movw	r3, #45044	; 0xaff4
   10fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb8:	2200      	movs	r2, #0
   10fba:	701a      	strb	r2, [r3, #0]
   10fbc:	f242 0318 	movw	r3, #8216	; 0x2018
   10fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fc4:	f242 0218 	movw	r2, #8216	; 0x2018
   10fc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fcc:	7812      	ldrb	r2, [r2, #0]
   10fce:	b2d2      	uxtb	r2, r2
   10fd0:	f042 0201 	orr.w	r2, r2, #1
   10fd4:	b2d2      	uxtb	r2, r2
   10fd6:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   10fd8:	f242 030d 	movw	r3, #8205	; 0x200d
   10fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe0:	f242 020d 	movw	r2, #8205	; 0x200d
   10fe4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fe8:	7812      	ldrb	r2, [r2, #0]
   10fea:	b2d2      	uxtb	r2, r2
   10fec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10ff0:	b2d2      	uxtb	r2, r2
   10ff2:	701a      	strb	r2, [r3, #0]
   10ff4:	f242 030d 	movw	r3, #8205	; 0x200d
   10ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ffc:	f242 020d 	movw	r2, #8205	; 0x200d
   11000:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11004:	7812      	ldrb	r2, [r2, #0]
   11006:	b2d2      	uxtb	r2, r2
   11008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1100c:	b2d2      	uxtb	r2, r2
   1100e:	701a      	strb	r2, [r3, #0]
    return;
   11010:	e051      	b.n	110b6 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   11012:	f64a 73f1 	movw	r3, #45041	; 0xaff1
   11016:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1101a:	781b      	ldrb	r3, [r3, #0]
   1101c:	2b15      	cmp	r3, #21
   1101e:	d820      	bhi.n	11062 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11020:	f64a 73f1 	movw	r3, #45041	; 0xaff1
   11024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11028:	781b      	ldrb	r3, [r3, #0]
   1102a:	461a      	mov	r2, r3
   1102c:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   11030:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11034:	4413      	add	r3, r2
   11036:	781b      	ldrb	r3, [r3, #0]
   11038:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   1103a:	f242 030f 	movw	r3, #8207	; 0x200f
   1103e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11042:	79fa      	ldrb	r2, [r7, #7]
   11044:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   11046:	f64a 73f3 	movw	r3, #45043	; 0xaff3
   1104a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1104e:	781a      	ldrb	r2, [r3, #0]
   11050:	79fb      	ldrb	r3, [r7, #7]
   11052:	4053      	eors	r3, r2
   11054:	b2da      	uxtb	r2, r3
   11056:	f64a 73f3 	movw	r3, #45043	; 0xaff3
   1105a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1105e:	701a      	strb	r2, [r3, #0]
   11060:	e009      	b.n	11076 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   11062:	f242 030f 	movw	r3, #8207	; 0x200f
   11066:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1106a:	f64a 72f3 	movw	r2, #45043	; 0xaff3
   1106e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11072:	7812      	ldrb	r2, [r2, #0]
   11074:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   11076:	f242 030f 	movw	r3, #8207	; 0x200f
   1107a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1107e:	781b      	ldrb	r3, [r3, #0]
   11080:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   11082:	f64a 73f1 	movw	r3, #45041	; 0xaff1
   11086:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1108a:	781b      	ldrb	r3, [r3, #0]
   1108c:	1e5a      	subs	r2, r3, #1
   1108e:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   11092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11096:	4413      	add	r3, r2
   11098:	79fa      	ldrb	r2, [r7, #7]
   1109a:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   1109c:	f64a 73f2 	movw	r3, #45042	; 0xaff2
   110a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110a4:	781a      	ldrb	r2, [r3, #0]
   110a6:	79fb      	ldrb	r3, [r7, #7]
   110a8:	4053      	eors	r3, r2
   110aa:	b2da      	uxtb	r2, r3
   110ac:	f64a 73f2 	movw	r3, #45042	; 0xaff2
   110b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b4:	701a      	strb	r2, [r3, #0]
}
   110b6:	370c      	adds	r7, #12
   110b8:	46bd      	mov	sp, r7
   110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   110be:	4770      	bx	lr

000110c0 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   110c0:	b480      	push	{r7}
   110c2:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   110c4:	f242 0317 	movw	r3, #8215	; 0x2017
   110c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110cc:	f242 0217 	movw	r2, #8215	; 0x2017
   110d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110d4:	7812      	ldrb	r2, [r2, #0]
   110d6:	b2d2      	uxtb	r2, r2
   110d8:	f042 0206 	orr.w	r2, r2, #6
   110dc:	b2d2      	uxtb	r2, r2
   110de:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   110e0:	f242 0317 	movw	r3, #8215	; 0x2017
   110e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e8:	f242 0217 	movw	r2, #8215	; 0x2017
   110ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110f0:	7812      	ldrb	r2, [r2, #0]
   110f2:	b2d2      	uxtb	r2, r2
   110f4:	f042 0201 	orr.w	r2, r2, #1
   110f8:	b2d2      	uxtb	r2, r2
   110fa:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   110fc:	f64a 73f4 	movw	r3, #45044	; 0xaff4
   11100:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11104:	2200      	movs	r2, #0
   11106:	701a      	strb	r2, [r3, #0]
   11108:	f242 0318 	movw	r3, #8216	; 0x2018
   1110c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11110:	f242 0218 	movw	r2, #8216	; 0x2018
   11114:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11118:	7812      	ldrb	r2, [r2, #0]
   1111a:	b2d2      	uxtb	r2, r2
   1111c:	f042 0201 	orr.w	r2, r2, #1
   11120:	b2d2      	uxtb	r2, r2
   11122:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   11124:	f242 0302 	movw	r3, #8194	; 0x2002
   11128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1112c:	f242 0202 	movw	r2, #8194	; 0x2002
   11130:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11134:	7812      	ldrb	r2, [r2, #0]
   11136:	b2d2      	uxtb	r2, r2
   11138:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1113c:	b2d2      	uxtb	r2, r2
   1113e:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11140:	f64a 73f4 	movw	r3, #45044	; 0xaff4
   11144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11148:	2200      	movs	r2, #0
   1114a:	701a      	strb	r2, [r3, #0]
   1114c:	f242 0303 	movw	r3, #8195	; 0x2003
   11150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11154:	f242 0203 	movw	r2, #8195	; 0x2003
   11158:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1115c:	7812      	ldrb	r2, [r2, #0]
   1115e:	b2d2      	uxtb	r2, r2
   11160:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11164:	b2d2      	uxtb	r2, r2
   11166:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11168:	f64a 73f4 	movw	r3, #45044	; 0xaff4
   1116c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11170:	2200      	movs	r2, #0
   11172:	701a      	strb	r2, [r3, #0]
}
   11174:	46bd      	mov	sp, r7
   11176:	f85d 7b04 	ldr.w	r7, [sp], #4
   1117a:	4770      	bx	lr

0001117c <__vector_17>:


SIGNAL(SIG_SPI) {
   1117c:	b580      	push	{r7, lr}
   1117e:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11180:	f64a 73f4 	movw	r3, #45044	; 0xaff4
   11184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11188:	781b      	ldrb	r3, [r3, #0]
   1118a:	b2db      	uxtb	r3, r3
   1118c:	2b01      	cmp	r3, #1
   1118e:	d102      	bne.n	11196 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11190:	f7ff fe88 	bl	10ea4 <link_fbw_on_spi_it>
   11194:	e00b      	b.n	111ae <__vector_17+0x32>
  else
    fatal_error_nb++;
   11196:	f64a 6398 	movw	r3, #44696	; 0xae98
   1119a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1119e:	781b      	ldrb	r3, [r3, #0]
   111a0:	3301      	adds	r3, #1
   111a2:	b2da      	uxtb	r2, r3
   111a4:	f64a 6398 	movw	r3, #44696	; 0xae98
   111a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ac:	701a      	strb	r2, [r3, #0]
}
   111ae:	bd80      	pop	{r7, pc}

000111b0 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   111b0:	b480      	push	{r7}
   111b2:	b083      	sub	sp, #12
   111b4:	af00      	add	r7, sp, #0
   111b6:	4603      	mov	r3, r0
   111b8:	6039      	str	r1, [r7, #0]
   111ba:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   111bc:	79fa      	ldrb	r2, [r7, #7]
   111be:	f24b 0308 	movw	r3, #45064	; 0xb008
   111c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111c6:	6839      	ldr	r1, [r7, #0]
   111c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   111cc:	370c      	adds	r7, #12
   111ce:	46bd      	mov	sp, r7
   111d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   111d4:	4770      	bx	lr
   111d6:	bf00      	nop

000111d8 <adc_init>:

void 
adc_init( void )
{
   111d8:	b480      	push	{r7}
   111da:	b083      	sub	sp, #12
   111dc:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   111de:	f242 0362 	movw	r3, #8290	; 0x2062
   111e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e6:	2200      	movs	r2, #0
   111e8:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   111ea:	f242 0361 	movw	r3, #8289	; 0x2061
   111ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111f2:	2200      	movs	r2, #0
   111f4:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   111f6:	f242 0307 	movw	r3, #8199	; 0x2007
   111fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111fe:	2240      	movs	r2, #64	; 0x40
   11200:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   11202:	f242 0308 	movw	r3, #8200	; 0x2008
   11206:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1120a:	f242 0208 	movw	r2, #8200	; 0x2008
   1120e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11212:	7812      	ldrb	r2, [r2, #0]
   11214:	b2d2      	uxtb	r2, r2
   11216:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1121a:	b2d2      	uxtb	r2, r2
   1121c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   1121e:	f242 0306 	movw	r3, #8198	; 0x2006
   11222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11226:	22cf      	movs	r2, #207	; 0xcf
   11228:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   1122a:	2300      	movs	r3, #0
   1122c:	71fb      	strb	r3, [r7, #7]
   1122e:	e00a      	b.n	11246 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11230:	79fa      	ldrb	r2, [r7, #7]
   11232:	f24b 0308 	movw	r3, #45064	; 0xb008
   11236:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1123a:	2100      	movs	r1, #0
   1123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11240:	79fb      	ldrb	r3, [r7, #7]
   11242:	3301      	adds	r3, #1
   11244:	71fb      	strb	r3, [r7, #7]
   11246:	79fb      	ldrb	r3, [r7, #7]
   11248:	2b07      	cmp	r3, #7
   1124a:	d9f1      	bls.n	11230 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   1124c:	370c      	adds	r7, #12
   1124e:	46bd      	mov	sp, r7
   11250:	f85d 7b04 	ldr.w	r7, [sp], #4
   11254:	4770      	bx	lr
   11256:	bf00      	nop

00011258 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11258:	b480      	push	{r7}
   1125a:	b085      	sub	sp, #20
   1125c:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   1125e:	f242 0307 	movw	r3, #8199	; 0x2007
   11262:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11266:	781b      	ldrb	r3, [r3, #0]
   11268:	b2db      	uxtb	r3, r3
   1126a:	f003 0307 	and.w	r3, r3, #7
   1126e:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11270:	7bfa      	ldrb	r2, [r7, #15]
   11272:	f24b 0308 	movw	r3, #45064	; 0xb008
   11276:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1127e:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11280:	f242 0304 	movw	r3, #8196	; 0x2004
   11284:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11288:	881b      	ldrh	r3, [r3, #0]
   1128a:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   1128c:	7bfa      	ldrb	r2, [r7, #15]
   1128e:	f64a 73f8 	movw	r3, #45048	; 0xaff8
   11292:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11296:	88f9      	ldrh	r1, [r7, #6]
   11298:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   1129c:	68bb      	ldr	r3, [r7, #8]
   1129e:	2b00      	cmp	r3, #0
   112a0:	d025      	beq.n	112ee <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   112a2:	68bb      	ldr	r3, [r7, #8]
   112a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   112a8:	3301      	adds	r3, #1
   112aa:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   112ac:	7bbb      	ldrb	r3, [r7, #14]
   112ae:	2b1f      	cmp	r3, #31
   112b0:	d901      	bls.n	112b6 <__vector_21+0x5e>
   112b2:	2300      	movs	r3, #0
   112b4:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   112b6:	68bb      	ldr	r3, [r7, #8]
   112b8:	881a      	ldrh	r2, [r3, #0]
   112ba:	7bbb      	ldrb	r3, [r7, #14]
   112bc:	68b9      	ldr	r1, [r7, #8]
   112be:	005b      	lsls	r3, r3, #1
   112c0:	440b      	add	r3, r1
   112c2:	885b      	ldrh	r3, [r3, #2]
   112c4:	1ad3      	subs	r3, r2, r3
   112c6:	b29a      	uxth	r2, r3
   112c8:	68bb      	ldr	r3, [r7, #8]
   112ca:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   112cc:	7bbb      	ldrb	r3, [r7, #14]
   112ce:	68ba      	ldr	r2, [r7, #8]
   112d0:	005b      	lsls	r3, r3, #1
   112d2:	4413      	add	r3, r2
   112d4:	88fa      	ldrh	r2, [r7, #6]
   112d6:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   112d8:	68bb      	ldr	r3, [r7, #8]
   112da:	881a      	ldrh	r2, [r3, #0]
   112dc:	88fb      	ldrh	r3, [r7, #6]
   112de:	4413      	add	r3, r2
   112e0:	b29a      	uxth	r2, r3
   112e2:	68bb      	ldr	r3, [r7, #8]
   112e4:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   112e6:	68bb      	ldr	r3, [r7, #8]
   112e8:	7bba      	ldrb	r2, [r7, #14]
   112ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   112ee:	7bfb      	ldrb	r3, [r7, #15]
   112f0:	3301      	adds	r3, #1
   112f2:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   112f4:	7bfb      	ldrb	r3, [r7, #15]
   112f6:	2b07      	cmp	r3, #7
   112f8:	d901      	bls.n	112fe <__vector_21+0xa6>
    adc_input = 0;
   112fa:	2300      	movs	r3, #0
   112fc:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   112fe:	f242 0307 	movw	r3, #8199	; 0x2007
   11302:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11306:	7bfa      	ldrb	r2, [r7, #15]
   11308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1130c:	b2d2      	uxtb	r2, r2
   1130e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11310:	f242 0306 	movw	r3, #8198	; 0x2006
   11314:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11318:	f242 0206 	movw	r2, #8198	; 0x2006
   1131c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11320:	7812      	ldrb	r2, [r2, #0]
   11322:	b2d2      	uxtb	r2, r2
   11324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11328:	b2d2      	uxtb	r2, r2
   1132a:	701a      	strb	r2, [r3, #0]
  
}
   1132c:	3714      	adds	r7, #20
   1132e:	46bd      	mov	sp, r7
   11330:	f85d 7b04 	ldr.w	r7, [sp], #4
   11334:	4770      	bx	lr
   11336:	bf00      	nop

00011338 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11338:	b580      	push	{r7, lr}
   1133a:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   1133c:	f003 fca8 	bl	14c90 <uart1_init>
#endif
  ubx_status = UNINIT;
   11340:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11348:	2200      	movs	r2, #0
   1134a:	701a      	strb	r2, [r3, #0]
}
   1134c:	bd80      	pop	{r7, pc}
   1134e:	bf00      	nop

00011350 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11350:	b580      	push	{r7, lr}
   11352:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   11354:	f24b 1356 	movw	r3, #45398	; 0xb156
   11358:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1135c:	781b      	ldrb	r3, [r3, #0]
   1135e:	2b01      	cmp	r3, #1
   11360:	f040 80f9 	bne.w	11556 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   11364:	f24b 1355 	movw	r3, #45397	; 0xb155
   11368:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1136c:	781b      	ldrb	r3, [r3, #0]
   1136e:	2b08      	cmp	r3, #8
   11370:	d128      	bne.n	113c4 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   11372:	f24b 0350 	movw	r3, #45136	; 0xb050
   11376:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1137a:	685a      	ldr	r2, [r3, #4]
   1137c:	f24b 033c 	movw	r3, #45116	; 0xb03c
   11380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11384:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   11386:	f24b 0350 	movw	r3, #45136	; 0xb050
   1138a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1138e:	689a      	ldr	r2, [r3, #8]
   11390:	f24b 0340 	movw	r3, #45120	; 0xb040
   11394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11398:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   1139a:	4b73      	ldr	r3, [pc, #460]	; (11568 <parse_gps_msg+0x218>)
   1139c:	681b      	ldr	r3, [r3, #0]
   1139e:	4618      	mov	r0, r3
   113a0:	f006 fdde 	bl	17f60 <__aeabi_i2f>
   113a4:	4603      	mov	r3, r0
   113a6:	4618      	mov	r0, r3
   113a8:	f04f 0100 	mov.w	r1, #0
   113ac:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   113b0:	f006 fede 	bl	18170 <__aeabi_fdiv>
   113b4:	4603      	mov	r3, r0
   113b6:	461a      	mov	r2, r3
   113b8:	f24b 032c 	movw	r3, #45100	; 0xb02c
   113bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113c0:	601a      	str	r2, [r3, #0]
   113c2:	e0c8      	b.n	11556 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   113c4:	f24b 1355 	movw	r3, #45397	; 0xb155
   113c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113cc:	781b      	ldrb	r3, [r3, #0]
   113ce:	2b03      	cmp	r3, #3
   113d0:	d10a      	bne.n	113e8 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   113d2:	f24b 0350 	movw	r3, #45136	; 0xb050
   113d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113da:	791a      	ldrb	r2, [r3, #4]
   113dc:	f24b 034c 	movw	r3, #45132	; 0xb04c
   113e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e4:	701a      	strb	r2, [r3, #0]
   113e6:	e0b6      	b.n	11556 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   113e8:	f24b 1355 	movw	r3, #45397	; 0xb155
   113ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113f0:	781b      	ldrb	r3, [r3, #0]
   113f2:	2b12      	cmp	r3, #18
   113f4:	f040 80af 	bne.w	11556 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   113f8:	4b5c      	ldr	r3, [pc, #368]	; (1156c <parse_gps_msg+0x21c>)
   113fa:	681b      	ldr	r3, [r3, #0]
   113fc:	4618      	mov	r0, r3
   113fe:	f006 fdab 	bl	17f58 <__aeabi_ui2f>
   11402:	4603      	mov	r3, r0
   11404:	4618      	mov	r0, r3
   11406:	f04f 0100 	mov.w	r1, #0
   1140a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1140e:	f006 feaf 	bl	18170 <__aeabi_fdiv>
   11412:	4603      	mov	r3, r0
   11414:	461a      	mov	r2, r3
   11416:	f24b 0330 	movw	r3, #45104	; 0xb030
   1141a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1141e:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11420:	4b51      	ldr	r3, [pc, #324]	; (11568 <parse_gps_msg+0x218>)
   11422:	681b      	ldr	r3, [r3, #0]
   11424:	4618      	mov	r0, r3
   11426:	f006 fd9b 	bl	17f60 <__aeabi_i2f>
   1142a:	4603      	mov	r3, r0
   1142c:	4618      	mov	r0, r3
   1142e:	f04f 0100 	mov.w	r1, #0
   11432:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11436:	f006 fe9b 	bl	18170 <__aeabi_fdiv>
   1143a:	4603      	mov	r3, r0
   1143c:	461a      	mov	r2, r3
   1143e:	f24b 0334 	movw	r3, #45108	; 0xb034
   11442:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11446:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11448:	4b49      	ldr	r3, [pc, #292]	; (11570 <parse_gps_msg+0x220>)
   1144a:	681b      	ldr	r3, [r3, #0]
   1144c:	4618      	mov	r0, r3
   1144e:	f006 fd87 	bl	17f60 <__aeabi_i2f>
   11452:	4603      	mov	r3, r0
   11454:	4618      	mov	r0, r3
   11456:	f006 f943 	bl	176e0 <__aeabi_f2d>
   1145a:	4602      	mov	r2, r0
   1145c:	460b      	mov	r3, r1
   1145e:	4610      	mov	r0, r2
   11460:	4619      	mov	r1, r3
   11462:	a33d      	add	r3, pc, #244	; (adr r3, 11558 <parse_gps_msg+0x208>)
   11464:	e9d3 2300 	ldrd	r2, r3, [r3]
   11468:	f006 fab8 	bl	179dc <__aeabi_ddiv>
   1146c:	4602      	mov	r2, r0
   1146e:	460b      	mov	r3, r1
   11470:	4610      	mov	r0, r2
   11472:	4619      	mov	r1, r3
   11474:	f04f 0200 	mov.w	r2, #0
   11478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1147c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11480:	f006 faac 	bl	179dc <__aeabi_ddiv>
   11484:	4602      	mov	r2, r0
   11486:	460b      	mov	r3, r1
   11488:	4610      	mov	r0, r2
   1148a:	4619      	mov	r1, r3
   1148c:	a334      	add	r3, pc, #208	; (adr r3, 11560 <parse_gps_msg+0x210>)
   1148e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11492:	f006 f979 	bl	17788 <__aeabi_dmul>
   11496:	4602      	mov	r2, r0
   11498:	460b      	mov	r3, r1
   1149a:	4610      	mov	r0, r2
   1149c:	4619      	mov	r1, r3
   1149e:	f006 fc55 	bl	17d4c <__aeabi_d2f>
   114a2:	4602      	mov	r2, r0
   114a4:	f24b 0338 	movw	r3, #45112	; 0xb038
   114a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ac:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   114ae:	f24b 0350 	movw	r3, #45136	; 0xb050
   114b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b6:	681b      	ldr	r3, [r3, #0]
   114b8:	4618      	mov	r0, r3
   114ba:	f006 fd4d 	bl	17f58 <__aeabi_ui2f>
   114be:	4603      	mov	r3, r0
   114c0:	4618      	mov	r0, r3
   114c2:	f04f 0100 	mov.w	r1, #0
   114c6:	f2c4 417a 	movt	r1, #17530	; 0x447a
   114ca:	f006 fe51 	bl	18170 <__aeabi_fdiv>
   114ce:	4603      	mov	r3, r0
   114d0:	461a      	mov	r2, r3
   114d2:	f24b 0328 	movw	r3, #45096	; 0xb028
   114d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114da:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   114dc:	f24b 033c 	movw	r3, #45116	; 0xb03c
   114e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114e4:	681a      	ldr	r2, [r3, #0]
   114e6:	f248 531f 	movw	r3, #34079	; 0x851f
   114ea:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   114ee:	fb83 1302 	smull	r1, r3, r3, r2
   114f2:	1159      	asrs	r1, r3, #5
   114f4:	17d3      	asrs	r3, r2, #31
   114f6:	1acb      	subs	r3, r1, r3
   114f8:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   114fc:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11500:	4618      	mov	r0, r3
   11502:	f006 fd2d 	bl	17f60 <__aeabi_i2f>
   11506:	4602      	mov	r2, r0
   11508:	f24b 0344 	movw	r3, #45124	; 0xb044
   1150c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11510:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11512:	f24b 0340 	movw	r3, #45120	; 0xb040
   11516:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1151a:	681a      	ldr	r2, [r3, #0]
   1151c:	f248 531f 	movw	r3, #34079	; 0x851f
   11520:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11524:	fb83 1302 	smull	r1, r3, r3, r2
   11528:	1159      	asrs	r1, r3, #5
   1152a:	17d3      	asrs	r3, r2, #31
   1152c:	1aca      	subs	r2, r1, r3
   1152e:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11532:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11536:	4413      	add	r3, r2
   11538:	4618      	mov	r0, r3
   1153a:	f006 fd11 	bl	17f60 <__aeabi_i2f>
   1153e:	4602      	mov	r2, r0
   11540:	f24b 0348 	movw	r3, #45128	; 0xb048
   11544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11548:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   1154a:	f24b 034e 	movw	r3, #45134	; 0xb04e
   1154e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11552:	2201      	movs	r2, #1
   11554:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11556:	bd80      	pop	{r7, pc}
   11558:	00000000 	.word	0x00000000
   1155c:	40f86a00 	.word	0x40f86a00
   11560:	5a7ed197 	.word	0x5a7ed197
   11564:	400921fb 	.word	0x400921fb
   11568:	2000b05c 	.word	0x2000b05c
   1156c:	2000b064 	.word	0x2000b064
   11570:	2000b068 	.word	0x2000b068

00011574 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11574:	b480      	push	{r7}
   11576:	b083      	sub	sp, #12
   11578:	af00      	add	r7, sp, #0
   1157a:	4603      	mov	r3, r0
   1157c:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   1157e:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11582:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11586:	781b      	ldrb	r3, [r3, #0]
   11588:	2b06      	cmp	r3, #6
   1158a:	d81d      	bhi.n	115c8 <parse_ubx+0x54>
    ck_a += c;
   1158c:	f24b 1353 	movw	r3, #45395	; 0xb153
   11590:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11594:	781a      	ldrb	r2, [r3, #0]
   11596:	79fb      	ldrb	r3, [r7, #7]
   11598:	4413      	add	r3, r2
   1159a:	b2da      	uxtb	r2, r3
   1159c:	f24b 1353 	movw	r3, #45395	; 0xb153
   115a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a4:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   115a6:	f24b 1354 	movw	r3, #45396	; 0xb154
   115aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ae:	781a      	ldrb	r2, [r3, #0]
   115b0:	f24b 1353 	movw	r3, #45395	; 0xb153
   115b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b8:	781b      	ldrb	r3, [r3, #0]
   115ba:	4413      	add	r3, r2
   115bc:	b2da      	uxtb	r2, r3
   115be:	f24b 1354 	movw	r3, #45396	; 0xb154
   115c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c6:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   115c8:	f24b 134f 	movw	r3, #45391	; 0xb14f
   115cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115d0:	781b      	ldrb	r3, [r3, #0]
   115d2:	2b00      	cmp	r3, #0
   115d4:	d110      	bne.n	115f8 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   115d6:	79fb      	ldrb	r3, [r7, #7]
   115d8:	2bb5      	cmp	r3, #181	; 0xb5
   115da:	f040 8135 	bne.w	11848 <parse_ubx+0x2d4>
      ubx_status++;
   115de:	f24b 134f 	movw	r3, #45391	; 0xb14f
   115e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e6:	781b      	ldrb	r3, [r3, #0]
   115e8:	3301      	adds	r3, #1
   115ea:	b2da      	uxtb	r2, r3
   115ec:	f24b 134f 	movw	r3, #45391	; 0xb14f
   115f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115f4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   115f6:	e12f      	b.n	11858 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   115f8:	f24b 134f 	movw	r3, #45391	; 0xb14f
   115fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11600:	781b      	ldrb	r3, [r3, #0]
   11602:	2b01      	cmp	r3, #1
   11604:	d11c      	bne.n	11640 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11606:	79fb      	ldrb	r3, [r7, #7]
   11608:	2b62      	cmp	r3, #98	; 0x62
   1160a:	d000      	beq.n	1160e <parse_ubx+0x9a>
      goto error;
   1160c:	e11d      	b.n	1184a <parse_ubx+0x2d6>
    ck_a = 0;
   1160e:	f24b 1353 	movw	r3, #45395	; 0xb153
   11612:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11616:	2200      	movs	r2, #0
   11618:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   1161a:	f24b 1354 	movw	r3, #45396	; 0xb154
   1161e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11622:	2200      	movs	r2, #0
   11624:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11626:	f24b 134f 	movw	r3, #45391	; 0xb14f
   1162a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1162e:	781b      	ldrb	r3, [r3, #0]
   11630:	3301      	adds	r3, #1
   11632:	b2da      	uxtb	r2, r3
   11634:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11638:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1163c:	701a      	strb	r2, [r3, #0]
   1163e:	e103      	b.n	11848 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11640:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11648:	781b      	ldrb	r3, [r3, #0]
   1164a:	2b02      	cmp	r3, #2
   1164c:	d127      	bne.n	1169e <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   1164e:	f24b 034d 	movw	r3, #45133	; 0xb04d
   11652:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11656:	781b      	ldrb	r3, [r3, #0]
   11658:	b2db      	uxtb	r3, r3
   1165a:	2b00      	cmp	r3, #0
   1165c:	d00c      	beq.n	11678 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   1165e:	f24b 1357 	movw	r3, #45399	; 0xb157
   11662:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11666:	781b      	ldrb	r3, [r3, #0]
   11668:	3301      	adds	r3, #1
   1166a:	b2da      	uxtb	r2, r3
   1166c:	f24b 1357 	movw	r3, #45399	; 0xb157
   11670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11674:	701a      	strb	r2, [r3, #0]
      goto error;
   11676:	e0e8      	b.n	1184a <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11678:	f24b 1356 	movw	r3, #45398	; 0xb156
   1167c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11680:	79fa      	ldrb	r2, [r7, #7]
   11682:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11684:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11688:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1168c:	781b      	ldrb	r3, [r3, #0]
   1168e:	3301      	adds	r3, #1
   11690:	b2da      	uxtb	r2, r3
   11692:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11696:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1169a:	701a      	strb	r2, [r3, #0]
   1169c:	e0d4      	b.n	11848 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   1169e:	f24b 134f 	movw	r3, #45391	; 0xb14f
   116a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116a6:	781b      	ldrb	r3, [r3, #0]
   116a8:	2b03      	cmp	r3, #3
   116aa:	d112      	bne.n	116d2 <parse_ubx+0x15e>
  {
    ubx_id = c;
   116ac:	f24b 1355 	movw	r3, #45397	; 0xb155
   116b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b4:	79fa      	ldrb	r2, [r7, #7]
   116b6:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   116b8:	f24b 134f 	movw	r3, #45391	; 0xb14f
   116bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116c0:	781b      	ldrb	r3, [r3, #0]
   116c2:	3301      	adds	r3, #1
   116c4:	b2da      	uxtb	r2, r3
   116c6:	f24b 134f 	movw	r3, #45391	; 0xb14f
   116ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116ce:	701a      	strb	r2, [r3, #0]
   116d0:	e0ba      	b.n	11848 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   116d2:	f24b 134f 	movw	r3, #45391	; 0xb14f
   116d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116da:	781b      	ldrb	r3, [r3, #0]
   116dc:	2b04      	cmp	r3, #4
   116de:	d113      	bne.n	11708 <parse_ubx+0x194>
  {
    ubx_len = c;
   116e0:	79fb      	ldrb	r3, [r7, #7]
   116e2:	b29a      	uxth	r2, r3
   116e4:	f24b 1350 	movw	r3, #45392	; 0xb150
   116e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116ec:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   116ee:	f24b 134f 	movw	r3, #45391	; 0xb14f
   116f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f6:	781b      	ldrb	r3, [r3, #0]
   116f8:	3301      	adds	r3, #1
   116fa:	b2da      	uxtb	r2, r3
   116fc:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11700:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11704:	701a      	strb	r2, [r3, #0]
   11706:	e09f      	b.n	11848 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11708:	f24b 134f 	movw	r3, #45391	; 0xb14f
   1170c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11710:	781b      	ldrb	r3, [r3, #0]
   11712:	2b05      	cmp	r3, #5
   11714:	d12b      	bne.n	1176e <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11716:	79fb      	ldrb	r3, [r7, #7]
   11718:	021b      	lsls	r3, r3, #8
   1171a:	b29a      	uxth	r2, r3
   1171c:	f24b 1350 	movw	r3, #45392	; 0xb150
   11720:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11724:	881b      	ldrh	r3, [r3, #0]
   11726:	b29b      	uxth	r3, r3
   11728:	4313      	orrs	r3, r2
   1172a:	b29b      	uxth	r3, r3
   1172c:	b29a      	uxth	r2, r3
   1172e:	f24b 1350 	movw	r3, #45392	; 0xb150
   11732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11736:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11738:	f24b 1350 	movw	r3, #45392	; 0xb150
   1173c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11740:	881b      	ldrh	r3, [r3, #0]
   11742:	2bff      	cmp	r3, #255	; 0xff
   11744:	d900      	bls.n	11748 <parse_ubx+0x1d4>
      goto error;
   11746:	e080      	b.n	1184a <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11748:	f24b 1352 	movw	r3, #45394	; 0xb152
   1174c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11750:	2200      	movs	r2, #0
   11752:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11754:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11758:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1175c:	781b      	ldrb	r3, [r3, #0]
   1175e:	3301      	adds	r3, #1
   11760:	b2da      	uxtb	r2, r3
   11762:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11766:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1176a:	701a      	strb	r2, [r3, #0]
   1176c:	e06c      	b.n	11848 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   1176e:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11772:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11776:	781b      	ldrb	r3, [r3, #0]
   11778:	2b06      	cmp	r3, #6
   1177a:	d131      	bne.n	117e0 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   1177c:	f24b 1352 	movw	r3, #45394	; 0xb152
   11780:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11784:	781b      	ldrb	r3, [r3, #0]
   11786:	461a      	mov	r2, r3
   11788:	f24b 0350 	movw	r3, #45136	; 0xb050
   1178c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11790:	79f9      	ldrb	r1, [r7, #7]
   11792:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11794:	f24b 1352 	movw	r3, #45394	; 0xb152
   11798:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1179c:	781b      	ldrb	r3, [r3, #0]
   1179e:	3301      	adds	r3, #1
   117a0:	b2da      	uxtb	r2, r3
   117a2:	f24b 1352 	movw	r3, #45394	; 0xb152
   117a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117aa:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   117ac:	f24b 1352 	movw	r3, #45394	; 0xb152
   117b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117b4:	781b      	ldrb	r3, [r3, #0]
   117b6:	461a      	mov	r2, r3
   117b8:	f24b 1350 	movw	r3, #45392	; 0xb150
   117bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117c0:	881b      	ldrh	r3, [r3, #0]
   117c2:	429a      	cmp	r2, r3
   117c4:	d340      	bcc.n	11848 <parse_ubx+0x2d4>
      ubx_status++;
   117c6:	f24b 134f 	movw	r3, #45391	; 0xb14f
   117ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ce:	781b      	ldrb	r3, [r3, #0]
   117d0:	3301      	adds	r3, #1
   117d2:	b2da      	uxtb	r2, r3
   117d4:	f24b 134f 	movw	r3, #45391	; 0xb14f
   117d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117dc:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   117de:	e03b      	b.n	11858 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   117e0:	f24b 134f 	movw	r3, #45391	; 0xb14f
   117e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117e8:	781b      	ldrb	r3, [r3, #0]
   117ea:	2b07      	cmp	r3, #7
   117ec:	d115      	bne.n	1181a <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   117ee:	f24b 1353 	movw	r3, #45395	; 0xb153
   117f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117f6:	781b      	ldrb	r3, [r3, #0]
   117f8:	79fa      	ldrb	r2, [r7, #7]
   117fa:	429a      	cmp	r2, r3
   117fc:	d000      	beq.n	11800 <parse_ubx+0x28c>
      goto error;
   117fe:	e024      	b.n	1184a <parse_ubx+0x2d6>
    ubx_status++;
   11800:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11808:	781b      	ldrb	r3, [r3, #0]
   1180a:	3301      	adds	r3, #1
   1180c:	b2da      	uxtb	r2, r3
   1180e:	f24b 134f 	movw	r3, #45391	; 0xb14f
   11812:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11816:	701a      	strb	r2, [r3, #0]
   11818:	e016      	b.n	11848 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   1181a:	f24b 134f 	movw	r3, #45391	; 0xb14f
   1181e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11822:	781b      	ldrb	r3, [r3, #0]
   11824:	2b08      	cmp	r3, #8
   11826:	d10f      	bne.n	11848 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11828:	f24b 1354 	movw	r3, #45396	; 0xb154
   1182c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11830:	781b      	ldrb	r3, [r3, #0]
   11832:	79fa      	ldrb	r2, [r7, #7]
   11834:	429a      	cmp	r2, r3
   11836:	d000      	beq.n	1183a <parse_ubx+0x2c6>
      goto error;
   11838:	e007      	b.n	1184a <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   1183a:	f24b 034d 	movw	r3, #45133	; 0xb04d
   1183e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11842:	2201      	movs	r2, #1
   11844:	701a      	strb	r2, [r3, #0]
    goto restart;
   11846:	e000      	b.n	1184a <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11848:	e006      	b.n	11858 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   1184a:	f24b 134f 	movw	r3, #45391	; 0xb14f
   1184e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11852:	2200      	movs	r2, #0
   11854:	701a      	strb	r2, [r3, #0]
  return;
   11856:	bf00      	nop
}
   11858:	370c      	adds	r7, #12
   1185a:	46bd      	mov	sp, r7
   1185c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11860:	4770      	bx	lr
   11862:	bf00      	nop

00011864 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11864:	b580      	push	{r7, lr}
   11866:	b082      	sub	sp, #8
   11868:	af00      	add	r7, sp, #0
   1186a:	f242 039c 	movw	r3, #8348	; 0x209c
   1186e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11872:	781b      	ldrb	r3, [r3, #0]
   11874:	71fb      	strb	r3, [r7, #7]
   11876:	79fb      	ldrb	r3, [r7, #7]
   11878:	4618      	mov	r0, r3
   1187a:	f7ff fe7b 	bl	11574 <parse_ubx>
   1187e:	3708      	adds	r7, #8
   11880:	46bd      	mov	sp, r7
   11882:	bd80      	pop	{r7, pc}
   11884:	f3af 8000 	nop.w

00011888 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11888:	b580      	push	{r7, lr}
   1188a:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   1188c:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11894:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11898:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   1189c:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   1189e:	2001      	movs	r0, #1
   118a0:	f24b 115c 	movw	r1, #45404	; 0xb15c
   118a4:	f2c2 0100 	movt	r1, #8192	; 0x2000
   118a8:	f7ff fc82 	bl	111b0 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   118ac:	2002      	movs	r0, #2
   118ae:	f24b 11a0 	movw	r1, #45472	; 0xb1a0
   118b2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   118b6:	f7ff fc7b 	bl	111b0 <adc_buf_channel>
}
   118ba:	bd80      	pop	{r7, pc}

000118bc <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   118bc:	b480      	push	{r7}
   118be:	b083      	sub	sp, #12
   118c0:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   118c2:	f24b 135c 	movw	r3, #45404	; 0xb15c
   118c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118ca:	881b      	ldrh	r3, [r3, #0]
   118cc:	095b      	lsrs	r3, r3, #5
   118ce:	b29b      	uxth	r3, r3
   118d0:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   118d2:	f24b 13a0 	movw	r3, #45472	; 0xb1a0
   118d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118da:	881b      	ldrh	r3, [r3, #0]
   118dc:	095b      	lsrs	r3, r3, #5
   118de:	b29b      	uxth	r3, r3
   118e0:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   118e2:	88fb      	ldrh	r3, [r7, #6]
   118e4:	425b      	negs	r3, r3
   118e6:	b29a      	uxth	r2, r3
   118e8:	88bb      	ldrh	r3, [r7, #4]
   118ea:	1ad3      	subs	r3, r2, r3
   118ec:	b29a      	uxth	r2, r3
   118ee:	f240 33f2 	movw	r3, #1010	; 0x3f2
   118f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118f6:	881b      	ldrh	r3, [r3, #0]
   118f8:	b29b      	uxth	r3, r3
   118fa:	1ad3      	subs	r3, r2, r3
   118fc:	b29b      	uxth	r3, r3
   118fe:	b29a      	uxth	r2, r3
   11900:	f24b 1358 	movw	r3, #45400	; 0xb158
   11904:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11908:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   1190a:	88ba      	ldrh	r2, [r7, #4]
   1190c:	88fb      	ldrh	r3, [r7, #6]
   1190e:	1ad3      	subs	r3, r2, r3
   11910:	b29a      	uxth	r2, r3
   11912:	f240 33f4 	movw	r3, #1012	; 0x3f4
   11916:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1191a:	881b      	ldrh	r3, [r3, #0]
   1191c:	b29b      	uxth	r3, r3
   1191e:	1ad3      	subs	r3, r2, r3
   11920:	b29b      	uxth	r3, r3
   11922:	b29a      	uxth	r2, r3
   11924:	f24b 135a 	movw	r3, #45402	; 0xb15a
   11928:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1192c:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   1192e:	370c      	adds	r7, #12
   11930:	46bd      	mov	sp, r7
   11932:	f85d 7b04 	ldr.w	r7, [sp], #4
   11936:	4770      	bx	lr

00011938 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11938:	b580      	push	{r7, lr}
   1193a:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   1193c:	f24b 135a 	movw	r3, #45402	; 0xb15a
   11940:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11944:	881b      	ldrh	r3, [r3, #0]
   11946:	b29b      	uxth	r3, r3
   11948:	425b      	negs	r3, r3
   1194a:	b29b      	uxth	r3, r3
   1194c:	b29a      	uxth	r2, r3
   1194e:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11952:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11956:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11958:	f240 33f0 	movw	r3, #1008	; 0x3f0
   1195c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11960:	881b      	ldrh	r3, [r3, #0]
   11962:	b21b      	sxth	r3, r3
   11964:	4618      	mov	r0, r3
   11966:	f005 fea9 	bl	176bc <__aeabi_i2d>
   1196a:	4602      	mov	r2, r0
   1196c:	460b      	mov	r3, r1
   1196e:	f04f 0000 	mov.w	r0, #0
   11972:	f04f 0100 	mov.w	r1, #0
   11976:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   1197a:	f006 f82f 	bl	179dc <__aeabi_ddiv>
   1197e:	4602      	mov	r2, r0
   11980:	460b      	mov	r3, r1
   11982:	4610      	mov	r0, r2
   11984:	4619      	mov	r1, r3
   11986:	f006 f9e1 	bl	17d4c <__aeabi_d2f>
   1198a:	4602      	mov	r2, r0
   1198c:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11990:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11994:	601a      	str	r2, [r3, #0]
}
   11996:	bd80      	pop	{r7, pc}

00011998 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11998:	b590      	push	{r4, r7, lr}
   1199a:	b083      	sub	sp, #12
   1199c:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   1199e:	f24b 4378 	movw	r3, #46200	; 0xb478
   119a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119a6:	681a      	ldr	r2, [r3, #0]
   119a8:	f24b 13e4 	movw	r3, #45540	; 0xb1e4
   119ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119b0:	681b      	ldr	r3, [r3, #0]
   119b2:	4610      	mov	r0, r2
   119b4:	4619      	mov	r1, r3
   119b6:	f006 fa1d 	bl	17df4 <__aeabi_fsub>
   119ba:	4603      	mov	r3, r0
   119bc:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   119be:	f240 33fc 	movw	r3, #1020	; 0x3fc
   119c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119c6:	681b      	ldr	r3, [r3, #0]
   119c8:	4618      	mov	r0, r3
   119ca:	6879      	ldr	r1, [r7, #4]
   119cc:	f006 fb1c 	bl	18008 <__aeabi_fmul>
   119d0:	4603      	mov	r3, r0
   119d2:	4618      	mov	r0, r3
   119d4:	f04f 0100 	mov.w	r1, #0
   119d8:	f2cc 6116 	movt	r1, #50710	; 0xc616
   119dc:	f006 fcb2 	bl	18344 <__aeabi_fcmplt>
   119e0:	4603      	mov	r3, r0
   119e2:	2b00      	cmp	r3, #0
   119e4:	d002      	beq.n	119ec <roll_pitch_pid_run+0x54>
   119e6:	f64d 2280 	movw	r2, #55936	; 0xda80
   119ea:	e026      	b.n	11a3a <roll_pitch_pid_run+0xa2>
   119ec:	f240 33fc 	movw	r3, #1020	; 0x3fc
   119f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119f4:	681b      	ldr	r3, [r3, #0]
   119f6:	4618      	mov	r0, r3
   119f8:	6879      	ldr	r1, [r7, #4]
   119fa:	f006 fb05 	bl	18008 <__aeabi_fmul>
   119fe:	4603      	mov	r3, r0
   11a00:	4618      	mov	r0, r3
   11a02:	f04f 0100 	mov.w	r1, #0
   11a06:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11a0a:	f006 fcb9 	bl	18380 <__aeabi_fcmpgt>
   11a0e:	4603      	mov	r3, r0
   11a10:	2b00      	cmp	r3, #0
   11a12:	d002      	beq.n	11a1a <roll_pitch_pid_run+0x82>
   11a14:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11a18:	e00e      	b.n	11a38 <roll_pitch_pid_run+0xa0>
   11a1a:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a22:	681b      	ldr	r3, [r3, #0]
   11a24:	4618      	mov	r0, r3
   11a26:	6879      	ldr	r1, [r7, #4]
   11a28:	f006 faee 	bl	18008 <__aeabi_fmul>
   11a2c:	4603      	mov	r3, r0
   11a2e:	4618      	mov	r0, r3
   11a30:	f006 fcb0 	bl	18394 <__aeabi_f2iz>
   11a34:	4603      	mov	r3, r0
   11a36:	b29b      	uxth	r3, r3
   11a38:	b29a      	uxth	r2, r3
   11a3a:	f24b 13ee 	movw	r3, #45550	; 0xb1ee
   11a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a42:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11a44:	f24b 13f4 	movw	r3, #45556	; 0xb1f4
   11a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a4c:	681b      	ldr	r3, [r3, #0]
   11a4e:	4618      	mov	r0, r3
   11a50:	f04f 0100 	mov.w	r1, #0
   11a54:	f006 fc76 	bl	18344 <__aeabi_fcmplt>
   11a58:	4603      	mov	r3, r0
   11a5a:	2b00      	cmp	r3, #0
   11a5c:	d006      	beq.n	11a6c <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11a5e:	f24b 13f4 	movw	r3, #45556	; 0xb1f4
   11a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a66:	f04f 0200 	mov.w	r2, #0
   11a6a:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11a6c:	f24b 4380 	movw	r3, #46208	; 0xb480
   11a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a74:	681a      	ldr	r2, [r3, #0]
   11a76:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
   11a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a7e:	681b      	ldr	r3, [r3, #0]
   11a80:	4610      	mov	r0, r2
   11a82:	4619      	mov	r1, r3
   11a84:	f006 f9b6 	bl	17df4 <__aeabi_fsub>
   11a88:	4603      	mov	r3, r0
   11a8a:	461c      	mov	r4, r3
   11a8c:	f24b 4378 	movw	r3, #46200	; 0xb478
   11a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a94:	681b      	ldr	r3, [r3, #0]
   11a96:	4618      	mov	r0, r3
   11a98:	f04f 0100 	mov.w	r1, #0
   11a9c:	f006 fc52 	bl	18344 <__aeabi_fcmplt>
   11aa0:	4603      	mov	r3, r0
   11aa2:	2b00      	cmp	r3, #0
   11aa4:	d007      	beq.n	11ab6 <roll_pitch_pid_run+0x11e>
   11aa6:	f24b 4378 	movw	r3, #46200	; 0xb478
   11aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aae:	681b      	ldr	r3, [r3, #0]
   11ab0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11ab4:	e004      	b.n	11ac0 <roll_pitch_pid_run+0x128>
   11ab6:	f24b 4378 	movw	r3, #46200	; 0xb478
   11aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11abe:	681a      	ldr	r2, [r3, #0]
   11ac0:	f24b 13f4 	movw	r3, #45556	; 0xb1f4
   11ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ac8:	681b      	ldr	r3, [r3, #0]
   11aca:	4610      	mov	r0, r2
   11acc:	4619      	mov	r1, r3
   11ace:	f006 fa9b 	bl	18008 <__aeabi_fmul>
   11ad2:	4603      	mov	r3, r0
   11ad4:	4620      	mov	r0, r4
   11ad6:	4619      	mov	r1, r3
   11ad8:	f006 f98c 	bl	17df4 <__aeabi_fsub>
   11adc:	4603      	mov	r3, r0
   11ade:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11ae2:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11ae4:	f240 4300 	movw	r3, #1024	; 0x400
   11ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aec:	681b      	ldr	r3, [r3, #0]
   11aee:	4618      	mov	r0, r3
   11af0:	6879      	ldr	r1, [r7, #4]
   11af2:	f006 fa89 	bl	18008 <__aeabi_fmul>
   11af6:	4603      	mov	r3, r0
   11af8:	4618      	mov	r0, r3
   11afa:	f04f 0100 	mov.w	r1, #0
   11afe:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11b02:	f006 fc1f 	bl	18344 <__aeabi_fcmplt>
   11b06:	4603      	mov	r3, r0
   11b08:	2b00      	cmp	r3, #0
   11b0a:	d002      	beq.n	11b12 <roll_pitch_pid_run+0x17a>
   11b0c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11b10:	e026      	b.n	11b60 <roll_pitch_pid_run+0x1c8>
   11b12:	f240 4300 	movw	r3, #1024	; 0x400
   11b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b1a:	681b      	ldr	r3, [r3, #0]
   11b1c:	4618      	mov	r0, r3
   11b1e:	6879      	ldr	r1, [r7, #4]
   11b20:	f006 fa72 	bl	18008 <__aeabi_fmul>
   11b24:	4603      	mov	r3, r0
   11b26:	4618      	mov	r0, r3
   11b28:	f04f 0100 	mov.w	r1, #0
   11b2c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11b30:	f006 fc26 	bl	18380 <__aeabi_fcmpgt>
   11b34:	4603      	mov	r3, r0
   11b36:	2b00      	cmp	r3, #0
   11b38:	d002      	beq.n	11b40 <roll_pitch_pid_run+0x1a8>
   11b3a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11b3e:	e00e      	b.n	11b5e <roll_pitch_pid_run+0x1c6>
   11b40:	f240 4300 	movw	r3, #1024	; 0x400
   11b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b48:	681b      	ldr	r3, [r3, #0]
   11b4a:	4618      	mov	r0, r3
   11b4c:	6879      	ldr	r1, [r7, #4]
   11b4e:	f006 fa5b 	bl	18008 <__aeabi_fmul>
   11b52:	4603      	mov	r3, r0
   11b54:	4618      	mov	r0, r3
   11b56:	f006 fc1d 	bl	18394 <__aeabi_f2iz>
   11b5a:	4603      	mov	r3, r0
   11b5c:	b29b      	uxth	r3, r3
   11b5e:	b29a      	uxth	r2, r3
   11b60:	f24b 13f0 	movw	r3, #45552	; 0xb1f0
   11b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b68:	801a      	strh	r2, [r3, #0]
}
   11b6a:	370c      	adds	r7, #12
   11b6c:	46bd      	mov	sp, r7
   11b6e:	bd90      	pop	{r4, r7, pc}

00011b70 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11b70:	b580      	push	{r7, lr}
   11b72:	b082      	sub	sp, #8
   11b74:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11b76:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   11b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b7e:	681a      	ldr	r2, [r3, #0]
   11b80:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
   11b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b88:	681b      	ldr	r3, [r3, #0]
   11b8a:	4610      	mov	r0, r2
   11b8c:	4619      	mov	r1, r3
   11b8e:	f006 f931 	bl	17df4 <__aeabi_fsub>
   11b92:	4603      	mov	r3, r0
   11b94:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11b96:	e013      	b.n	11bc0 <course_pid_run+0x50>
   11b98:	6878      	ldr	r0, [r7, #4]
   11b9a:	f005 fda1 	bl	176e0 <__aeabi_f2d>
   11b9e:	4602      	mov	r2, r0
   11ba0:	460b      	mov	r3, r1
   11ba2:	4610      	mov	r0, r2
   11ba4:	4619      	mov	r1, r3
   11ba6:	a348      	add	r3, pc, #288	; (adr r3, 11cc8 <course_pid_run+0x158>)
   11ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bac:	f005 fc38 	bl	17420 <__aeabi_dsub>
   11bb0:	4602      	mov	r2, r0
   11bb2:	460b      	mov	r3, r1
   11bb4:	4610      	mov	r0, r2
   11bb6:	4619      	mov	r1, r3
   11bb8:	f006 f8c8 	bl	17d4c <__aeabi_d2f>
   11bbc:	4603      	mov	r3, r0
   11bbe:	607b      	str	r3, [r7, #4]
   11bc0:	6878      	ldr	r0, [r7, #4]
   11bc2:	f005 fd8d 	bl	176e0 <__aeabi_f2d>
   11bc6:	4602      	mov	r2, r0
   11bc8:	460b      	mov	r3, r1
   11bca:	4610      	mov	r0, r2
   11bcc:	4619      	mov	r1, r3
   11bce:	a340      	add	r3, pc, #256	; (adr r3, 11cd0 <course_pid_run+0x160>)
   11bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bd4:	f006 f868 	bl	17ca8 <__aeabi_dcmpgt>
   11bd8:	4603      	mov	r3, r0
   11bda:	2b00      	cmp	r3, #0
   11bdc:	d1dc      	bne.n	11b98 <course_pid_run+0x28>
   11bde:	e013      	b.n	11c08 <course_pid_run+0x98>
   11be0:	6878      	ldr	r0, [r7, #4]
   11be2:	f005 fd7d 	bl	176e0 <__aeabi_f2d>
   11be6:	4602      	mov	r2, r0
   11be8:	460b      	mov	r3, r1
   11bea:	4610      	mov	r0, r2
   11bec:	4619      	mov	r1, r3
   11bee:	a336      	add	r3, pc, #216	; (adr r3, 11cc8 <course_pid_run+0x158>)
   11bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bf4:	f005 fc16 	bl	17424 <__adddf3>
   11bf8:	4602      	mov	r2, r0
   11bfa:	460b      	mov	r3, r1
   11bfc:	4610      	mov	r0, r2
   11bfe:	4619      	mov	r1, r3
   11c00:	f006 f8a4 	bl	17d4c <__aeabi_d2f>
   11c04:	4603      	mov	r3, r0
   11c06:	607b      	str	r3, [r7, #4]
   11c08:	6878      	ldr	r0, [r7, #4]
   11c0a:	f005 fd69 	bl	176e0 <__aeabi_f2d>
   11c0e:	4602      	mov	r2, r0
   11c10:	460b      	mov	r3, r1
   11c12:	4610      	mov	r0, r2
   11c14:	4619      	mov	r1, r3
   11c16:	a330      	add	r3, pc, #192	; (adr r3, 11cd8 <course_pid_run+0x168>)
   11c18:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c1c:	f006 f826 	bl	17c6c <__aeabi_dcmplt>
   11c20:	4603      	mov	r3, r0
   11c22:	2b00      	cmp	r3, #0
   11c24:	d1dc      	bne.n	11be0 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11c26:	f240 4308 	movw	r3, #1032	; 0x408
   11c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c2e:	681b      	ldr	r3, [r3, #0]
   11c30:	4618      	mov	r0, r3
   11c32:	6879      	ldr	r1, [r7, #4]
   11c34:	f006 f9e8 	bl	18008 <__aeabi_fmul>
   11c38:	4603      	mov	r3, r0
   11c3a:	461a      	mov	r2, r3
   11c3c:	f24b 2340 	movw	r3, #45632	; 0xb240
   11c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c44:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11c46:	f24b 2340 	movw	r3, #45632	; 0xb240
   11c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c4e:	681a      	ldr	r2, [r3, #0]
   11c50:	f240 430c 	movw	r3, #1036	; 0x40c
   11c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c58:	681b      	ldr	r3, [r3, #0]
   11c5a:	4610      	mov	r0, r2
   11c5c:	4619      	mov	r1, r3
   11c5e:	f006 fb8f 	bl	18380 <__aeabi_fcmpgt>
   11c62:	4603      	mov	r3, r0
   11c64:	2b00      	cmp	r3, #0
   11c66:	d00a      	beq.n	11c7e <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   11c68:	f240 430c 	movw	r3, #1036	; 0x40c
   11c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c70:	681a      	ldr	r2, [r3, #0]
   11c72:	f24b 2340 	movw	r3, #45632	; 0xb240
   11c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c7a:	601a      	str	r2, [r3, #0]
   11c7c:	e01e      	b.n	11cbc <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   11c7e:	f240 430c 	movw	r3, #1036	; 0x40c
   11c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c86:	681b      	ldr	r3, [r3, #0]
   11c88:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11c8c:	f24b 2340 	movw	r3, #45632	; 0xb240
   11c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c94:	681b      	ldr	r3, [r3, #0]
   11c96:	4610      	mov	r0, r2
   11c98:	4619      	mov	r1, r3
   11c9a:	f006 fb71 	bl	18380 <__aeabi_fcmpgt>
   11c9e:	4603      	mov	r3, r0
   11ca0:	2b00      	cmp	r3, #0
   11ca2:	d00b      	beq.n	11cbc <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   11ca4:	f240 430c 	movw	r3, #1036	; 0x40c
   11ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cac:	681b      	ldr	r3, [r3, #0]
   11cae:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11cb2:	f24b 2340 	movw	r3, #45632	; 0xb240
   11cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cba:	601a      	str	r2, [r3, #0]
}
   11cbc:	3708      	adds	r7, #8
   11cbe:	46bd      	mov	sp, r7
   11cc0:	bd80      	pop	{r7, pc}
   11cc2:	bf00      	nop
   11cc4:	f3af 8000 	nop.w
   11cc8:	54442d18 	.word	0x54442d18
   11ccc:	401921fb 	.word	0x401921fb
   11cd0:	54442d18 	.word	0x54442d18
   11cd4:	400921fb 	.word	0x400921fb
   11cd8:	54442d18 	.word	0x54442d18
   11cdc:	c00921fb 	.word	0xc00921fb

00011ce0 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11ce0:	b5b0      	push	{r4, r5, r7, lr}
   11ce2:	b082      	sub	sp, #8
   11ce4:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11ce6:	f24b 438c 	movw	r3, #46220	; 0xb48c
   11cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cee:	681a      	ldr	r2, [r3, #0]
   11cf0:	f24b 2300 	movw	r3, #45568	; 0xb200
   11cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cf8:	681b      	ldr	r3, [r3, #0]
   11cfa:	4610      	mov	r0, r2
   11cfc:	4619      	mov	r1, r3
   11cfe:	f006 f879 	bl	17df4 <__aeabi_fsub>
   11d02:	4603      	mov	r3, r0
   11d04:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   11d06:	f64a 639f 	movw	r3, #44703	; 0xae9f
   11d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d0e:	781b      	ldrb	r3, [r3, #0]
   11d10:	2b00      	cmp	r3, #0
   11d12:	f000 80a8 	beq.w	11e66 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   11d16:	f24b 2338 	movw	r3, #45624	; 0xb238
   11d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d1e:	881b      	ldrh	r3, [r3, #0]
   11d20:	b29a      	uxth	r2, r3
   11d22:	f24b 13ec 	movw	r3, #45548	; 0xb1ec
   11d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d2a:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   11d2c:	f240 4314 	movw	r3, #1044	; 0x414
   11d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d34:	681a      	ldr	r2, [r3, #0]
   11d36:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d3e:	681b      	ldr	r3, [r3, #0]
   11d40:	4610      	mov	r0, r2
   11d42:	4619      	mov	r1, r3
   11d44:	f006 f960 	bl	18008 <__aeabi_fmul>
   11d48:	4603      	mov	r3, r0
   11d4a:	4618      	mov	r0, r3
   11d4c:	6879      	ldr	r1, [r7, #4]
   11d4e:	f006 f853 	bl	17df8 <__addsf3>
   11d52:	4603      	mov	r3, r0
   11d54:	461a      	mov	r2, r3
   11d56:	f240 4310 	movw	r3, #1040	; 0x410
   11d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d5e:	681b      	ldr	r3, [r3, #0]
   11d60:	4610      	mov	r0, r2
   11d62:	4619      	mov	r1, r3
   11d64:	f006 f950 	bl	18008 <__aeabi_fmul>
   11d68:	4603      	mov	r3, r0
   11d6a:	461a      	mov	r2, r3
   11d6c:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
   11d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d74:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   11d76:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
   11d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d7e:	681a      	ldr	r2, [r3, #0]
   11d80:	f240 4318 	movw	r3, #1048	; 0x418
   11d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d88:	681b      	ldr	r3, [r3, #0]
   11d8a:	4610      	mov	r0, r2
   11d8c:	4619      	mov	r1, r3
   11d8e:	f006 faf7 	bl	18380 <__aeabi_fcmpgt>
   11d92:	4603      	mov	r3, r0
   11d94:	2b00      	cmp	r3, #0
   11d96:	d009      	beq.n	11dac <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   11d98:	f240 4318 	movw	r3, #1048	; 0x418
   11d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11da0:	681a      	ldr	r2, [r3, #0]
   11da2:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
   11da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11daa:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   11dac:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
   11db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11db4:	681a      	ldr	r2, [r3, #0]
   11db6:	f240 431c 	movw	r3, #1052	; 0x41c
   11dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dbe:	681b      	ldr	r3, [r3, #0]
   11dc0:	4610      	mov	r0, r2
   11dc2:	4619      	mov	r1, r3
   11dc4:	f006 fabe 	bl	18344 <__aeabi_fcmplt>
   11dc8:	4603      	mov	r3, r0
   11dca:	2b00      	cmp	r3, #0
   11dcc:	d009      	beq.n	11de2 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   11dce:	f240 431c 	movw	r3, #1052	; 0x41c
   11dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dd6:	681a      	ldr	r2, [r3, #0]
   11dd8:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
   11ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11de0:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   11de2:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dea:	681b      	ldr	r3, [r3, #0]
   11dec:	4618      	mov	r0, r3
   11dee:	6879      	ldr	r1, [r7, #4]
   11df0:	f006 f802 	bl	17df8 <__addsf3>
   11df4:	4603      	mov	r3, r0
   11df6:	461a      	mov	r2, r3
   11df8:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e00:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   11e02:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e0a:	681b      	ldr	r3, [r3, #0]
   11e0c:	4618      	mov	r0, r3
   11e0e:	f04f 0100 	mov.w	r1, #0
   11e12:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11e16:	f006 fab3 	bl	18380 <__aeabi_fcmpgt>
   11e1a:	4603      	mov	r3, r0
   11e1c:	2b00      	cmp	r3, #0
   11e1e:	d008      	beq.n	11e32 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   11e20:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e28:	f04f 0200 	mov.w	r2, #0
   11e2c:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11e30:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   11e32:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e3a:	681b      	ldr	r3, [r3, #0]
   11e3c:	4618      	mov	r0, r3
   11e3e:	f04f 0100 	mov.w	r1, #0
   11e42:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11e46:	f006 fa7d 	bl	18344 <__aeabi_fcmplt>
   11e4a:	4603      	mov	r3, r0
   11e4c:	2b00      	cmp	r3, #0
   11e4e:	d100      	bne.n	11e52 <climb_pid_run+0x172>
   11e50:	e109      	b.n	12066 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   11e52:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e5a:	f04f 0200 	mov.w	r2, #0
   11e5e:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11e62:	601a      	str	r2, [r3, #0]
   11e64:	e0ff      	b.n	12066 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   11e66:	f24b 2300 	movw	r3, #45568	; 0xb200
   11e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e6e:	681b      	ldr	r3, [r3, #0]
   11e70:	4618      	mov	r0, r3
   11e72:	f04f 0100 	mov.w	r1, #0
   11e76:	f006 fa83 	bl	18380 <__aeabi_fcmpgt>
   11e7a:	4603      	mov	r3, r0
   11e7c:	2b00      	cmp	r3, #0
   11e7e:	d010      	beq.n	11ea2 <climb_pid_run+0x1c2>
   11e80:	f24b 2300 	movw	r3, #45568	; 0xb200
   11e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e88:	681a      	ldr	r2, [r3, #0]
   11e8a:	f240 4304 	movw	r3, #1028	; 0x404
   11e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e92:	681b      	ldr	r3, [r3, #0]
   11e94:	4610      	mov	r0, r2
   11e96:	4619      	mov	r1, r3
   11e98:	f006 f8b6 	bl	18008 <__aeabi_fmul>
   11e9c:	4603      	mov	r3, r0
   11e9e:	461a      	mov	r2, r3
   11ea0:	e001      	b.n	11ea6 <climb_pid_run+0x1c6>
   11ea2:	f04f 0200 	mov.w	r2, #0
   11ea6:	f24b 13f8 	movw	r3, #45560	; 0xb1f8
   11eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eae:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   11eb0:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   11eb4:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   11eb8:	f24b 2308 	movw	r3, #45576	; 0xb208
   11ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ec0:	681b      	ldr	r3, [r3, #0]
   11ec2:	4610      	mov	r0, r2
   11ec4:	4619      	mov	r1, r3
   11ec6:	f006 f89f 	bl	18008 <__aeabi_fmul>
   11eca:	4603      	mov	r3, r0
   11ecc:	4618      	mov	r0, r3
   11ece:	6879      	ldr	r1, [r7, #4]
   11ed0:	f005 ff92 	bl	17df8 <__addsf3>
   11ed4:	4603      	mov	r3, r0
   11ed6:	461a      	mov	r2, r3
   11ed8:	f24c 238f 	movw	r3, #49807	; 0xc28f
   11edc:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   11ee0:	4610      	mov	r0, r2
   11ee2:	4619      	mov	r1, r3
   11ee4:	f006 f890 	bl	18008 <__aeabi_fmul>
   11ee8:	4603      	mov	r3, r0
   11eea:	4618      	mov	r0, r3
   11eec:	f005 fbf8 	bl	176e0 <__aeabi_f2d>
   11ef0:	4602      	mov	r2, r0
   11ef2:	460b      	mov	r3, r1
   11ef4:	4610      	mov	r0, r2
   11ef6:	4619      	mov	r1, r3
   11ef8:	a35d      	add	r3, pc, #372	; (adr r3, 12070 <climb_pid_run+0x390>)
   11efa:	e9d3 2300 	ldrd	r2, r3, [r3]
   11efe:	f005 fa91 	bl	17424 <__adddf3>
   11f02:	4602      	mov	r2, r0
   11f04:	460b      	mov	r3, r1
   11f06:	4614      	mov	r4, r2
   11f08:	461d      	mov	r5, r3
   11f0a:	f24b 2300 	movw	r3, #45568	; 0xb200
   11f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f12:	681b      	ldr	r3, [r3, #0]
   11f14:	4618      	mov	r0, r3
   11f16:	f005 fbe3 	bl	176e0 <__aeabi_f2d>
   11f1a:	4602      	mov	r2, r0
   11f1c:	460b      	mov	r3, r1
   11f1e:	4610      	mov	r0, r2
   11f20:	4619      	mov	r1, r3
   11f22:	a355      	add	r3, pc, #340	; (adr r3, 12078 <climb_pid_run+0x398>)
   11f24:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f28:	f005 fc2e 	bl	17788 <__aeabi_dmul>
   11f2c:	4602      	mov	r2, r0
   11f2e:	460b      	mov	r3, r1
   11f30:	4620      	mov	r0, r4
   11f32:	4629      	mov	r1, r5
   11f34:	f005 fa76 	bl	17424 <__adddf3>
   11f38:	4602      	mov	r2, r0
   11f3a:	460b      	mov	r3, r1
   11f3c:	4610      	mov	r0, r2
   11f3e:	4619      	mov	r1, r3
   11f40:	f005 ff04 	bl	17d4c <__aeabi_d2f>
   11f44:	4603      	mov	r3, r0
   11f46:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   11f48:	f24b 2308 	movw	r3, #45576	; 0xb208
   11f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f50:	681b      	ldr	r3, [r3, #0]
   11f52:	4618      	mov	r0, r3
   11f54:	6879      	ldr	r1, [r7, #4]
   11f56:	f005 ff4f 	bl	17df8 <__addsf3>
   11f5a:	4603      	mov	r3, r0
   11f5c:	461a      	mov	r2, r3
   11f5e:	f24b 2308 	movw	r3, #45576	; 0xb208
   11f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f66:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   11f68:	f24b 2308 	movw	r3, #45576	; 0xb208
   11f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f70:	681b      	ldr	r3, [r3, #0]
   11f72:	4618      	mov	r0, r3
   11f74:	f04f 0100 	mov.w	r1, #0
   11f78:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11f7c:	f006 fa00 	bl	18380 <__aeabi_fcmpgt>
   11f80:	4603      	mov	r3, r0
   11f82:	2b00      	cmp	r3, #0
   11f84:	d008      	beq.n	11f98 <climb_pid_run+0x2b8>
   11f86:	f24b 2308 	movw	r3, #45576	; 0xb208
   11f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f8e:	f04f 0200 	mov.w	r2, #0
   11f92:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11f96:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   11f98:	f24b 2308 	movw	r3, #45576	; 0xb208
   11f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fa0:	681b      	ldr	r3, [r3, #0]
   11fa2:	4618      	mov	r0, r3
   11fa4:	f04f 0100 	mov.w	r1, #0
   11fa8:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11fac:	f006 f9ca 	bl	18344 <__aeabi_fcmplt>
   11fb0:	4603      	mov	r3, r0
   11fb2:	2b00      	cmp	r3, #0
   11fb4:	d008      	beq.n	11fc8 <climb_pid_run+0x2e8>
   11fb6:	f24b 2308 	movw	r3, #45576	; 0xb208
   11fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fbe:	f04f 0200 	mov.w	r2, #0
   11fc2:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11fc6:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   11fc8:	6838      	ldr	r0, [r7, #0]
   11fca:	f04f 0100 	mov.w	r1, #0
   11fce:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11fd2:	f006 f819 	bl	18008 <__aeabi_fmul>
   11fd6:	4603      	mov	r3, r0
   11fd8:	4618      	mov	r0, r3
   11fda:	f04f 0100 	mov.w	r1, #0
   11fde:	f006 f9b1 	bl	18344 <__aeabi_fcmplt>
   11fe2:	4603      	mov	r3, r0
   11fe4:	2b00      	cmp	r3, #0
   11fe6:	d001      	beq.n	11fec <climb_pid_run+0x30c>
   11fe8:	2200      	movs	r2, #0
   11fea:	e022      	b.n	12032 <climb_pid_run+0x352>
   11fec:	6838      	ldr	r0, [r7, #0]
   11fee:	f04f 0100 	mov.w	r1, #0
   11ff2:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11ff6:	f006 f807 	bl	18008 <__aeabi_fmul>
   11ffa:	4603      	mov	r3, r0
   11ffc:	4618      	mov	r0, r3
   11ffe:	f04f 0100 	mov.w	r1, #0
   12002:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12006:	f006 f9bb 	bl	18380 <__aeabi_fcmpgt>
   1200a:	4603      	mov	r3, r0
   1200c:	2b00      	cmp	r3, #0
   1200e:	d002      	beq.n	12016 <climb_pid_run+0x336>
   12010:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12014:	e00c      	b.n	12030 <climb_pid_run+0x350>
   12016:	6838      	ldr	r0, [r7, #0]
   12018:	f04f 0100 	mov.w	r1, #0
   1201c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12020:	f005 fff2 	bl	18008 <__aeabi_fmul>
   12024:	4603      	mov	r3, r0
   12026:	4618      	mov	r0, r3
   12028:	f006 f9b4 	bl	18394 <__aeabi_f2iz>
   1202c:	4603      	mov	r3, r0
   1202e:	b29b      	uxth	r3, r3
   12030:	b29a      	uxth	r2, r3
   12032:	f24b 13ec 	movw	r3, #45548	; 0xb1ec
   12036:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1203a:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   1203c:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12044:	681a      	ldr	r2, [r3, #0]
   12046:	f24b 13f8 	movw	r3, #45560	; 0xb1f8
   1204a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1204e:	681b      	ldr	r3, [r3, #0]
   12050:	4610      	mov	r0, r2
   12052:	4619      	mov	r1, r3
   12054:	f005 fed0 	bl	17df8 <__addsf3>
   12058:	4603      	mov	r3, r0
   1205a:	461a      	mov	r2, r3
   1205c:	f24b 13e8 	movw	r3, #45544	; 0xb1e8
   12060:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12064:	601a      	str	r2, [r3, #0]
  }
}
   12066:	3708      	adds	r7, #8
   12068:	46bd      	mov	sp, r7
   1206a:	bdb0      	pop	{r4, r5, r7, pc}
   1206c:	f3af 8000 	nop.w
   12070:	3d70a3d7 	.word	0x3d70a3d7
   12074:	3fd3d70a 	.word	0x3fd3d70a
   12078:	9999999a 	.word	0x9999999a
   1207c:	3fc99999 	.word	0x3fc99999

00012080 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12080:	b580      	push	{r7, lr}
   12082:	b082      	sub	sp, #8
   12084:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   12086:	f24b 4374 	movw	r3, #46196	; 0xb474
   1208a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1208e:	681a      	ldr	r2, [r3, #0]
   12090:	f240 4324 	movw	r3, #1060	; 0x424
   12094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12098:	681b      	ldr	r3, [r3, #0]
   1209a:	4610      	mov	r0, r2
   1209c:	4619      	mov	r1, r3
   1209e:	f005 fea9 	bl	17df4 <__aeabi_fsub>
   120a2:	4603      	mov	r3, r0
   120a4:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   120a6:	f240 4320 	movw	r3, #1056	; 0x420
   120aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120ae:	681b      	ldr	r3, [r3, #0]
   120b0:	4618      	mov	r0, r3
   120b2:	6879      	ldr	r1, [r7, #4]
   120b4:	f005 ffa8 	bl	18008 <__aeabi_fmul>
   120b8:	4603      	mov	r3, r0
   120ba:	461a      	mov	r2, r3
   120bc:	f24b 2304 	movw	r3, #45572	; 0xb204
   120c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120c4:	681b      	ldr	r3, [r3, #0]
   120c6:	4610      	mov	r0, r2
   120c8:	4619      	mov	r1, r3
   120ca:	f005 fe95 	bl	17df8 <__addsf3>
   120ce:	4603      	mov	r3, r0
   120d0:	461a      	mov	r2, r3
   120d2:	f24b 2300 	movw	r3, #45568	; 0xb200
   120d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120da:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   120dc:	f24b 2300 	movw	r3, #45568	; 0xb200
   120e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120e4:	681b      	ldr	r3, [r3, #0]
   120e6:	4618      	mov	r0, r3
   120e8:	f04f 0100 	mov.w	r1, #0
   120ec:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   120f0:	f006 f928 	bl	18344 <__aeabi_fcmplt>
   120f4:	4603      	mov	r3, r0
   120f6:	2b00      	cmp	r3, #0
   120f8:	d008      	beq.n	1210c <altitude_pid_run+0x8c>
   120fa:	f24b 2300 	movw	r3, #45568	; 0xb200
   120fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12102:	f04f 0200 	mov.w	r2, #0
   12106:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   1210a:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   1210c:	f24b 2300 	movw	r3, #45568	; 0xb200
   12110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12114:	681b      	ldr	r3, [r3, #0]
   12116:	4618      	mov	r0, r3
   12118:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1211c:	f006 f930 	bl	18380 <__aeabi_fcmpgt>
   12120:	4603      	mov	r3, r0
   12122:	2b00      	cmp	r3, #0
   12124:	d006      	beq.n	12134 <altitude_pid_run+0xb4>
   12126:	f24b 2300 	movw	r3, #45568	; 0xb200
   1212a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1212e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   12132:	601a      	str	r2, [r3, #0]
}
   12134:	3708      	adds	r7, #8
   12136:	46bd      	mov	sp, r7
   12138:	bd80      	pop	{r7, pc}
   1213a:	bf00      	nop
   1213c:	f3af 8000 	nop.w

00012140 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12140:	b5f0      	push	{r4, r5, r6, r7, lr}
   12142:	b08b      	sub	sp, #44	; 0x2c
   12144:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   12146:	f24b 2311 	movw	r3, #45585	; 0xb211
   1214a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1214e:	781b      	ldrb	r3, [r3, #0]
   12150:	2b00      	cmp	r3, #0
   12152:	f040 8169 	bne.w	12428 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   12156:	f24b 2310 	movw	r3, #45584	; 0xb210
   1215a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1215e:	781b      	ldrb	r3, [r3, #0]
   12160:	2b00      	cmp	r3, #0
   12162:	d13c      	bne.n	121de <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   12164:	f24b 2310 	movw	r3, #45584	; 0xb210
   12168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1216c:	2200      	movs	r2, #0
   1216e:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12170:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12178:	881b      	ldrh	r3, [r3, #0]
   1217a:	2b00      	cmp	r3, #0
   1217c:	d000      	beq.n	12180 <auto_nav+0x40>
   1217e:	e03d      	b.n	121fc <auto_nav+0xbc>
	else NextStage(); 
   12180:	f24b 2310 	movw	r3, #45584	; 0xb210
   12184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12188:	781b      	ldrb	r3, [r3, #0]
   1218a:	3301      	adds	r3, #1
   1218c:	b2da      	uxtb	r2, r3
   1218e:	f24b 2310 	movw	r3, #45584	; 0xb210
   12192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12196:	701a      	strb	r2, [r3, #0]
   12198:	f24b 436c 	movw	r3, #46188	; 0xb46c
   1219c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a0:	681a      	ldr	r2, [r3, #0]
   121a2:	f24b 2314 	movw	r3, #45588	; 0xb214
   121a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121aa:	601a      	str	r2, [r3, #0]
   121ac:	f24b 4370 	movw	r3, #46192	; 0xb470
   121b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121b4:	681a      	ldr	r2, [r3, #0]
   121b6:	f24b 2318 	movw	r3, #45592	; 0xb218
   121ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121be:	601a      	str	r2, [r3, #0]
   121c0:	f24b 2324 	movw	r3, #45604	; 0xb224
   121c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121c8:	2200      	movs	r2, #0
   121ca:	801a      	strh	r2, [r3, #0]
   121cc:	f24b 2328 	movw	r3, #45608	; 0xb228
   121d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121d4:	f04f 0200 	mov.w	r2, #0
   121d8:	601a      	str	r2, [r3, #0]
   121da:	f002 b883 	b.w	142e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   121de:	f24b 2310 	movw	r3, #45584	; 0xb210
   121e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121e6:	781b      	ldrb	r3, [r3, #0]
   121e8:	2b01      	cmp	r3, #1
   121ea:	d100      	bne.n	121ee <auto_nav+0xae>
    {   Goto(while_1)}
   121ec:	e7ba      	b.n	12164 <auto_nav+0x24>
    else if (nav_stage == 2)
   121ee:	f24b 2310 	movw	r3, #45584	; 0xb210
   121f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121f6:	781b      	ldrb	r3, [r3, #0]
   121f8:	2b02      	cmp	r3, #2
   121fa:	d162      	bne.n	122c2 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   121fc:	f24b 2310 	movw	r3, #45584	; 0xb210
   12200:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12204:	2202      	movs	r2, #2
   12206:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12208:	f24b 439c 	movw	r3, #46236	; 0xb49c
   1220c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12210:	881b      	ldrh	r3, [r3, #0]
   12212:	2b08      	cmp	r3, #8
   12214:	d92e      	bls.n	12274 <auto_nav+0x134>
   12216:	f24b 2310 	movw	r3, #45584	; 0xb210
   1221a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1221e:	781b      	ldrb	r3, [r3, #0]
   12220:	3301      	adds	r3, #1
   12222:	b2da      	uxtb	r2, r3
   12224:	f24b 2310 	movw	r3, #45584	; 0xb210
   12228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1222c:	701a      	strb	r2, [r3, #0]
   1222e:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12236:	681a      	ldr	r2, [r3, #0]
   12238:	f24b 2314 	movw	r3, #45588	; 0xb214
   1223c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12240:	601a      	str	r2, [r3, #0]
   12242:	f24b 4370 	movw	r3, #46192	; 0xb470
   12246:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1224a:	681a      	ldr	r2, [r3, #0]
   1224c:	f24b 2318 	movw	r3, #45592	; 0xb218
   12250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12254:	601a      	str	r2, [r3, #0]
   12256:	f24b 2324 	movw	r3, #45604	; 0xb224
   1225a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1225e:	2200      	movs	r2, #0
   12260:	801a      	strh	r2, [r3, #0]
   12262:	f24b 2328 	movw	r3, #45608	; 0xb228
   12266:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1226a:	f04f 0200 	mov.w	r2, #0
   1226e:	601a      	str	r2, [r3, #0]
   12270:	f002 b838 	b.w	142e4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12274:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
   12278:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1227c:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12280:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12284:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12286:	f64a 639f 	movw	r3, #44703	; 0xae9f
   1228a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1228e:	2200      	movs	r2, #0
   12290:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   12292:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12296:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1229a:	f649 129a 	movw	r2, #39322	; 0x999a
   1229e:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   122a2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   122a4:	f64a 639d 	movw	r3, #44701	; 0xae9d
   122a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ac:	2201      	movs	r2, #1
   122ae:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   122b0:	f24b 2338 	movw	r3, #45624	; 0xb238
   122b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122b8:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   122bc:	801a      	strh	r2, [r3, #0]
        }
        return;
   122be:	f002 b811 	b.w	142e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   122c2:	f24b 2310 	movw	r3, #45584	; 0xb210
   122c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ca:	781b      	ldrb	r3, [r3, #0]
   122cc:	2b03      	cmp	r3, #3
   122ce:	d168      	bne.n	123a2 <auto_nav+0x262>
     {
	nav_stage = 3;	
   122d0:	f24b 2310 	movw	r3, #45584	; 0xb210
   122d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122d8:	2203      	movs	r2, #3
   122da:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   122dc:	f24b 4374 	movw	r3, #46196	; 0xb474
   122e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122e4:	681b      	ldr	r3, [r3, #0]
   122e6:	4618      	mov	r0, r3
   122e8:	f04f 0100 	mov.w	r1, #0
   122ec:	f2c4 3116 	movt	r1, #17174	; 0x4316
   122f0:	f006 f846 	bl	18380 <__aeabi_fcmpgt>
   122f4:	4603      	mov	r3, r0
   122f6:	2b00      	cmp	r3, #0
   122f8:	d02e      	beq.n	12358 <auto_nav+0x218>
   122fa:	f24b 2310 	movw	r3, #45584	; 0xb210
   122fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12302:	781b      	ldrb	r3, [r3, #0]
   12304:	3301      	adds	r3, #1
   12306:	b2da      	uxtb	r2, r3
   12308:	f24b 2310 	movw	r3, #45584	; 0xb210
   1230c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12310:	701a      	strb	r2, [r3, #0]
   12312:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12316:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1231a:	681a      	ldr	r2, [r3, #0]
   1231c:	f24b 2314 	movw	r3, #45588	; 0xb214
   12320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12324:	601a      	str	r2, [r3, #0]
   12326:	f24b 4370 	movw	r3, #46192	; 0xb470
   1232a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1232e:	681a      	ldr	r2, [r3, #0]
   12330:	f24b 2318 	movw	r3, #45592	; 0xb218
   12334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12338:	601a      	str	r2, [r3, #0]
   1233a:	f24b 2324 	movw	r3, #45604	; 0xb224
   1233e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12342:	2200      	movs	r2, #0
   12344:	801a      	strh	r2, [r3, #0]
   12346:	f24b 2328 	movw	r3, #45608	; 0xb228
   1234a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1234e:	f04f 0200 	mov.w	r2, #0
   12352:	601a      	str	r2, [r3, #0]
   12354:	f001 bfc6 	b.w	142e4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12358:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
   1235c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12360:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12364:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12368:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1236a:	f64a 639f 	movw	r3, #44703	; 0xae9f
   1236e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12372:	2200      	movs	r2, #0
   12374:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   12376:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1237a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1237e:	f04f 0200 	mov.w	r2, #0
   12382:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   12384:	f64a 639d 	movw	r3, #44701	; 0xae9d
   12388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1238c:	2202      	movs	r2, #2
   1238e:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12390:	f24b 2300 	movw	r3, #45568	; 0xb200
   12394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12398:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1239c:	601a      	str	r2, [r3, #0]
        }
        return;
   1239e:	f001 bfa1 	b.w	142e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   123a2:	f24b 2310 	movw	r3, #45584	; 0xb210
   123a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	2b04      	cmp	r3, #4
   123ae:	f041 8799 	bne.w	142e4 <auto_nav+0x21a4>
        NextBlock()
   123b2:	f24b 2311 	movw	r3, #45585	; 0xb211
   123b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ba:	781b      	ldrb	r3, [r3, #0]
   123bc:	3301      	adds	r3, #1
   123be:	b2da      	uxtb	r2, r3
   123c0:	f24b 2311 	movw	r3, #45585	; 0xb211
   123c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123c8:	701a      	strb	r2, [r3, #0]
   123ca:	f24b 2310 	movw	r3, #45584	; 0xb210
   123ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123d2:	2200      	movs	r2, #0
   123d4:	701a      	strb	r2, [r3, #0]
   123d6:	f24b 2326 	movw	r3, #45606	; 0xb226
   123da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123de:	2200      	movs	r2, #0
   123e0:	801a      	strh	r2, [r3, #0]
   123e2:	f24b 436c 	movw	r3, #46188	; 0xb46c
   123e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ea:	681a      	ldr	r2, [r3, #0]
   123ec:	f24b 2314 	movw	r3, #45588	; 0xb214
   123f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123f4:	601a      	str	r2, [r3, #0]
   123f6:	f24b 4370 	movw	r3, #46192	; 0xb470
   123fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123fe:	681a      	ldr	r2, [r3, #0]
   12400:	f24b 2318 	movw	r3, #45592	; 0xb218
   12404:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12408:	601a      	str	r2, [r3, #0]
   1240a:	f24b 2324 	movw	r3, #45604	; 0xb224
   1240e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12412:	2200      	movs	r2, #0
   12414:	801a      	strh	r2, [r3, #0]
   12416:	f24b 2328 	movw	r3, #45608	; 0xb228
   1241a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1241e:	f04f 0200 	mov.w	r2, #0
   12422:	601a      	str	r2, [r3, #0]
   12424:	f001 bf5e 	b.w	142e4 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12428:	f24b 2311 	movw	r3, #45585	; 0xb211
   1242c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12430:	781b      	ldrb	r3, [r3, #0]
   12432:	2b01      	cmp	r3, #1
   12434:	f040 81bc 	bne.w	127b0 <auto_nav+0x670>
{
    nav_block = 1;
   12438:	f24b 2311 	movw	r3, #45585	; 0xb211
   1243c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12440:	2201      	movs	r2, #1
   12442:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   12444:	f64a 63a0 	movw	r3, #44704	; 0xaea0
   12448:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1244c:	781b      	ldrb	r3, [r3, #0]
   1244e:	2b00      	cmp	r3, #0
   12450:	d007      	beq.n	12462 <auto_nav+0x322>
   12452:	f64a 63a0 	movw	r3, #44704	; 0xaea0
   12456:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1245a:	2200      	movs	r2, #0
   1245c:	701a      	strb	r2, [r3, #0]
   1245e:	2301      	movs	r3, #1
   12460:	e000      	b.n	12464 <auto_nav+0x324>
   12462:	2300      	movs	r3, #0
   12464:	2b00      	cmp	r3, #0
   12466:	d034      	beq.n	124d2 <auto_nav+0x392>
	{ GotoBlock(2) }
   12468:	f24b 2311 	movw	r3, #45585	; 0xb211
   1246c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12470:	2202      	movs	r2, #2
   12472:	701a      	strb	r2, [r3, #0]
   12474:	f24b 2310 	movw	r3, #45584	; 0xb210
   12478:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1247c:	2200      	movs	r2, #0
   1247e:	701a      	strb	r2, [r3, #0]
   12480:	f24b 2326 	movw	r3, #45606	; 0xb226
   12484:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12488:	2200      	movs	r2, #0
   1248a:	801a      	strh	r2, [r3, #0]
   1248c:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12494:	681a      	ldr	r2, [r3, #0]
   12496:	f24b 2314 	movw	r3, #45588	; 0xb214
   1249a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1249e:	601a      	str	r2, [r3, #0]
   124a0:	f24b 4370 	movw	r3, #46192	; 0xb470
   124a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a8:	681a      	ldr	r2, [r3, #0]
   124aa:	f24b 2318 	movw	r3, #45592	; 0xb218
   124ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124b2:	601a      	str	r2, [r3, #0]
   124b4:	f24b 2324 	movw	r3, #45604	; 0xb224
   124b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124bc:	2200      	movs	r2, #0
   124be:	801a      	strh	r2, [r3, #0]
   124c0:	f24b 2328 	movw	r3, #45608	; 0xb228
   124c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124c8:	f04f 0200 	mov.w	r2, #0
   124cc:	601a      	str	r2, [r3, #0]
   124ce:	f001 bf09 	b.w	142e4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   124d2:	f24b 2310 	movw	r3, #45584	; 0xb210
   124d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124da:	781b      	ldrb	r3, [r3, #0]
   124dc:	2b00      	cmp	r3, #0
   124de:	d12e      	bne.n	1253e <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   124e0:	f24b 2310 	movw	r3, #45584	; 0xb210
   124e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124e8:	781b      	ldrb	r3, [r3, #0]
   124ea:	3301      	adds	r3, #1
   124ec:	b2da      	uxtb	r2, r3
   124ee:	f24b 2310 	movw	r3, #45584	; 0xb210
   124f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124f6:	701a      	strb	r2, [r3, #0]
   124f8:	f24b 436c 	movw	r3, #46188	; 0xb46c
   124fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12500:	681a      	ldr	r2, [r3, #0]
   12502:	f24b 2314 	movw	r3, #45588	; 0xb214
   12506:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1250a:	601a      	str	r2, [r3, #0]
   1250c:	f24b 4370 	movw	r3, #46192	; 0xb470
   12510:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12514:	681a      	ldr	r2, [r3, #0]
   12516:	f24b 2318 	movw	r3, #45592	; 0xb218
   1251a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1251e:	601a      	str	r2, [r3, #0]
   12520:	f24b 2324 	movw	r3, #45604	; 0xb224
   12524:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12528:	2200      	movs	r2, #0
   1252a:	801a      	strh	r2, [r3, #0]
   1252c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12530:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12534:	f04f 0200 	mov.w	r2, #0
   12538:	601a      	str	r2, [r3, #0]
   1253a:	f001 bed3 	b.w	142e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1253e:	f24b 2310 	movw	r3, #45584	; 0xb210
   12542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12546:	781b      	ldrb	r3, [r3, #0]
   12548:	2b01      	cmp	r3, #1
   1254a:	d169      	bne.n	12620 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   1254c:	f24b 2310 	movw	r3, #45584	; 0xb210
   12550:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12554:	2201      	movs	r2, #1
   12556:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12558:	2001      	movs	r0, #1
   1255a:	f001 fed1 	bl	14300 <approaching>
   1255e:	4603      	mov	r3, r0
   12560:	2b00      	cmp	r3, #0
   12562:	d034      	beq.n	125ce <auto_nav+0x48e>
   12564:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12568:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1256c:	2201      	movs	r2, #1
   1256e:	701a      	strb	r2, [r3, #0]
   12570:	f24b 2310 	movw	r3, #45584	; 0xb210
   12574:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12578:	781b      	ldrb	r3, [r3, #0]
   1257a:	3301      	adds	r3, #1
   1257c:	b2da      	uxtb	r2, r3
   1257e:	f24b 2310 	movw	r3, #45584	; 0xb210
   12582:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12586:	701a      	strb	r2, [r3, #0]
   12588:	f24b 436c 	movw	r3, #46188	; 0xb46c
   1258c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12590:	681a      	ldr	r2, [r3, #0]
   12592:	f24b 2314 	movw	r3, #45588	; 0xb214
   12596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1259a:	601a      	str	r2, [r3, #0]
   1259c:	f24b 4370 	movw	r3, #46192	; 0xb470
   125a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125a4:	681a      	ldr	r2, [r3, #0]
   125a6:	f24b 2318 	movw	r3, #45592	; 0xb218
   125aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125ae:	601a      	str	r2, [r3, #0]
   125b0:	f24b 2324 	movw	r3, #45604	; 0xb224
   125b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125b8:	2200      	movs	r2, #0
   125ba:	801a      	strh	r2, [r3, #0]
   125bc:	f24b 2328 	movw	r3, #45608	; 0xb228
   125c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125c4:	f04f 0200 	mov.w	r2, #0
   125c8:	601a      	str	r2, [r3, #0]
   125ca:	f001 be8b 	b.w	142e4 <auto_nav+0x21a4>
            fly_to(1);
   125ce:	2001      	movs	r0, #1
   125d0:	f001 ffca 	bl	14568 <fly_to>
            auto_pitch = FALSE;
   125d4:	f64a 639f 	movw	r3, #44703	; 0xae9f
   125d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125dc:	2200      	movs	r2, #0
   125de:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   125e0:	f24b 233c 	movw	r3, #45628	; 0xb23c
   125e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e8:	f04f 0200 	mov.w	r2, #0
   125ec:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   125ee:	f64a 639d 	movw	r3, #44701	; 0xae9d
   125f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125f6:	2203      	movs	r2, #3
   125f8:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   125fa:	f240 4328 	movw	r3, #1064	; 0x428
   125fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12602:	695a      	ldr	r2, [r3, #20]
   12604:	f240 4324 	movw	r3, #1060	; 0x424
   12608:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1260c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1260e:	f24b 2304 	movw	r3, #45572	; 0xb204
   12612:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12616:	f04f 0200 	mov.w	r2, #0
   1261a:	601a      	str	r2, [r3, #0]
          }
          return;
   1261c:	f001 be62 	b.w	142e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12620:	f24b 2310 	movw	r3, #45584	; 0xb210
   12624:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12628:	781b      	ldrb	r3, [r3, #0]
   1262a:	2b02      	cmp	r3, #2
   1262c:	d169      	bne.n	12702 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   1262e:	f24b 2310 	movw	r3, #45584	; 0xb210
   12632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12636:	2202      	movs	r2, #2
   12638:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   1263a:	2004      	movs	r0, #4
   1263c:	f001 fe60 	bl	14300 <approaching>
   12640:	4603      	mov	r3, r0
   12642:	2b00      	cmp	r3, #0
   12644:	d034      	beq.n	126b0 <auto_nav+0x570>
   12646:	f24b 231c 	movw	r3, #45596	; 0xb21c
   1264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1264e:	2204      	movs	r2, #4
   12650:	701a      	strb	r2, [r3, #0]
   12652:	f24b 2310 	movw	r3, #45584	; 0xb210
   12656:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1265a:	781b      	ldrb	r3, [r3, #0]
   1265c:	3301      	adds	r3, #1
   1265e:	b2da      	uxtb	r2, r3
   12660:	f24b 2310 	movw	r3, #45584	; 0xb210
   12664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12668:	701a      	strb	r2, [r3, #0]
   1266a:	f24b 436c 	movw	r3, #46188	; 0xb46c
   1266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12672:	681a      	ldr	r2, [r3, #0]
   12674:	f24b 2314 	movw	r3, #45588	; 0xb214
   12678:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1267c:	601a      	str	r2, [r3, #0]
   1267e:	f24b 4370 	movw	r3, #46192	; 0xb470
   12682:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12686:	681a      	ldr	r2, [r3, #0]
   12688:	f24b 2318 	movw	r3, #45592	; 0xb218
   1268c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12690:	601a      	str	r2, [r3, #0]
   12692:	f24b 2324 	movw	r3, #45604	; 0xb224
   12696:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1269a:	2200      	movs	r2, #0
   1269c:	801a      	strh	r2, [r3, #0]
   1269e:	f24b 2328 	movw	r3, #45608	; 0xb228
   126a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126a6:	f04f 0200 	mov.w	r2, #0
   126aa:	601a      	str	r2, [r3, #0]
   126ac:	f001 be1a 	b.w	142e4 <auto_nav+0x21a4>
            fly_to(4);
   126b0:	2004      	movs	r0, #4
   126b2:	f001 ff59 	bl	14568 <fly_to>
            auto_pitch = FALSE;
   126b6:	f64a 639f 	movw	r3, #44703	; 0xae9f
   126ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126be:	2200      	movs	r2, #0
   126c0:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   126c2:	f24b 233c 	movw	r3, #45628	; 0xb23c
   126c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ca:	f04f 0200 	mov.w	r2, #0
   126ce:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   126d0:	f64a 639d 	movw	r3, #44701	; 0xae9d
   126d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126d8:	2203      	movs	r2, #3
   126da:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   126dc:	f240 4328 	movw	r3, #1064	; 0x428
   126e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   126e6:	f240 4324 	movw	r3, #1060	; 0x424
   126ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ee:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   126f0:	f24b 2304 	movw	r3, #45572	; 0xb204
   126f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126f8:	f04f 0200 	mov.w	r2, #0
   126fc:	601a      	str	r2, [r3, #0]
          }
          return;
   126fe:	f001 bdf1 	b.w	142e4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12702:	f24b 2310 	movw	r3, #45584	; 0xb210
   12706:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1270a:	781b      	ldrb	r3, [r3, #0]
   1270c:	2b03      	cmp	r3, #3
   1270e:	d106      	bne.n	1271e <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12710:	f24b 2310 	movw	r3, #45584	; 0xb210
   12714:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12718:	2203      	movs	r2, #3
   1271a:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   1271c:	e6e0      	b.n	124e0 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   1271e:	f24b 2310 	movw	r3, #45584	; 0xb210
   12722:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12726:	781b      	ldrb	r3, [r3, #0]
   12728:	2b04      	cmp	r3, #4
   1272a:	f041 85db 	bne.w	142e4 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   1272e:	f24b 2310 	movw	r3, #45584	; 0xb210
   12732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12736:	2204      	movs	r2, #4
   12738:	701a      	strb	r2, [r3, #0]
        NextBlock()
   1273a:	f24b 2311 	movw	r3, #45585	; 0xb211
   1273e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12742:	781b      	ldrb	r3, [r3, #0]
   12744:	3301      	adds	r3, #1
   12746:	b2da      	uxtb	r2, r3
   12748:	f24b 2311 	movw	r3, #45585	; 0xb211
   1274c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12750:	701a      	strb	r2, [r3, #0]
   12752:	f24b 2310 	movw	r3, #45584	; 0xb210
   12756:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1275a:	2200      	movs	r2, #0
   1275c:	701a      	strb	r2, [r3, #0]
   1275e:	f24b 2326 	movw	r3, #45606	; 0xb226
   12762:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12766:	2200      	movs	r2, #0
   12768:	801a      	strh	r2, [r3, #0]
   1276a:	f24b 436c 	movw	r3, #46188	; 0xb46c
   1276e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12772:	681a      	ldr	r2, [r3, #0]
   12774:	f24b 2314 	movw	r3, #45588	; 0xb214
   12778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1277c:	601a      	str	r2, [r3, #0]
   1277e:	f24b 4370 	movw	r3, #46192	; 0xb470
   12782:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12786:	681a      	ldr	r2, [r3, #0]
   12788:	f24b 2318 	movw	r3, #45592	; 0xb218
   1278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12790:	601a      	str	r2, [r3, #0]
   12792:	f24b 2324 	movw	r3, #45604	; 0xb224
   12796:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1279a:	2200      	movs	r2, #0
   1279c:	801a      	strh	r2, [r3, #0]
   1279e:	f24b 2328 	movw	r3, #45608	; 0xb228
   127a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127a6:	f04f 0200 	mov.w	r2, #0
   127aa:	601a      	str	r2, [r3, #0]
   127ac:	f001 bd9a 	b.w	142e4 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   127b0:	f24b 2311 	movw	r3, #45585	; 0xb211
   127b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127b8:	781b      	ldrb	r3, [r3, #0]
   127ba:	2b02      	cmp	r3, #2
   127bc:	f040 8392 	bne.w	12ee4 <auto_nav+0xda4>
{
	nav_block = 2;
   127c0:	f24b 2311 	movw	r3, #45585	; 0xb211
   127c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127c8:	2202      	movs	r2, #2
   127ca:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   127cc:	f64a 63a0 	movw	r3, #44704	; 0xaea0
   127d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127d4:	781b      	ldrb	r3, [r3, #0]
   127d6:	2b00      	cmp	r3, #0
   127d8:	d007      	beq.n	127ea <auto_nav+0x6aa>
   127da:	f64a 63a0 	movw	r3, #44704	; 0xaea0
   127de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127e2:	2200      	movs	r2, #0
   127e4:	701a      	strb	r2, [r3, #0]
   127e6:	2301      	movs	r3, #1
   127e8:	e000      	b.n	127ec <auto_nav+0x6ac>
   127ea:	2300      	movs	r3, #0
   127ec:	2b00      	cmp	r3, #0
   127ee:	d034      	beq.n	1285a <auto_nav+0x71a>
   127f0:	f24b 2311 	movw	r3, #45585	; 0xb211
   127f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127f8:	2203      	movs	r2, #3
   127fa:	701a      	strb	r2, [r3, #0]
   127fc:	f24b 2310 	movw	r3, #45584	; 0xb210
   12800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12804:	2200      	movs	r2, #0
   12806:	701a      	strb	r2, [r3, #0]
   12808:	f24b 2326 	movw	r3, #45606	; 0xb226
   1280c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12810:	2200      	movs	r2, #0
   12812:	801a      	strh	r2, [r3, #0]
   12814:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1281c:	681a      	ldr	r2, [r3, #0]
   1281e:	f24b 2314 	movw	r3, #45588	; 0xb214
   12822:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12826:	601a      	str	r2, [r3, #0]
   12828:	f24b 4370 	movw	r3, #46192	; 0xb470
   1282c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12830:	681a      	ldr	r2, [r3, #0]
   12832:	f24b 2318 	movw	r3, #45592	; 0xb218
   12836:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1283a:	601a      	str	r2, [r3, #0]
   1283c:	f24b 2324 	movw	r3, #45604	; 0xb224
   12840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12844:	2200      	movs	r2, #0
   12846:	801a      	strh	r2, [r3, #0]
   12848:	f24b 2328 	movw	r3, #45608	; 0xb228
   1284c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12850:	f04f 0200 	mov.w	r2, #0
   12854:	601a      	str	r2, [r3, #0]
   12856:	f001 bd45 	b.w	142e4 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   1285a:	f24b 2310 	movw	r3, #45584	; 0xb210
   1285e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2b00      	cmp	r3, #0
   12866:	d134      	bne.n	128d2 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12868:	f24b 2310 	movw	r3, #45584	; 0xb210
   1286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12870:	2200      	movs	r2, #0
   12872:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12874:	f24b 2310 	movw	r3, #45584	; 0xb210
   12878:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1287c:	781b      	ldrb	r3, [r3, #0]
   1287e:	3301      	adds	r3, #1
   12880:	b2da      	uxtb	r2, r3
   12882:	f24b 2310 	movw	r3, #45584	; 0xb210
   12886:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1288a:	701a      	strb	r2, [r3, #0]
   1288c:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12894:	681a      	ldr	r2, [r3, #0]
   12896:	f24b 2314 	movw	r3, #45588	; 0xb214
   1289a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1289e:	601a      	str	r2, [r3, #0]
   128a0:	f24b 4370 	movw	r3, #46192	; 0xb470
   128a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a8:	681a      	ldr	r2, [r3, #0]
   128aa:	f24b 2318 	movw	r3, #45592	; 0xb218
   128ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128b2:	601a      	str	r2, [r3, #0]
   128b4:	f24b 2324 	movw	r3, #45604	; 0xb224
   128b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128bc:	2200      	movs	r2, #0
   128be:	801a      	strh	r2, [r3, #0]
   128c0:	f24b 2328 	movw	r3, #45608	; 0xb228
   128c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128c8:	f04f 0200 	mov.w	r2, #0
   128cc:	601a      	str	r2, [r3, #0]
   128ce:	f001 bd09 	b.w	142e4 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   128d2:	f24b 2310 	movw	r3, #45584	; 0xb210
   128d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128da:	781b      	ldrb	r3, [r3, #0]
   128dc:	2b01      	cmp	r3, #1
   128de:	d169      	bne.n	129b4 <auto_nav+0x874>
    {
         nav_stage =1;
   128e0:	f24b 2310 	movw	r3, #45584	; 0xb210
   128e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128e8:	2201      	movs	r2, #1
   128ea:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   128ec:	2006      	movs	r0, #6
   128ee:	f001 fd07 	bl	14300 <approaching>
   128f2:	4603      	mov	r3, r0
   128f4:	2b00      	cmp	r3, #0
   128f6:	d034      	beq.n	12962 <auto_nav+0x822>
   128f8:	f24b 231c 	movw	r3, #45596	; 0xb21c
   128fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12900:	2206      	movs	r2, #6
   12902:	701a      	strb	r2, [r3, #0]
   12904:	f24b 2310 	movw	r3, #45584	; 0xb210
   12908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1290c:	781b      	ldrb	r3, [r3, #0]
   1290e:	3301      	adds	r3, #1
   12910:	b2da      	uxtb	r2, r3
   12912:	f24b 2310 	movw	r3, #45584	; 0xb210
   12916:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1291a:	701a      	strb	r2, [r3, #0]
   1291c:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12920:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12924:	681a      	ldr	r2, [r3, #0]
   12926:	f24b 2314 	movw	r3, #45588	; 0xb214
   1292a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1292e:	601a      	str	r2, [r3, #0]
   12930:	f24b 4370 	movw	r3, #46192	; 0xb470
   12934:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12938:	681a      	ldr	r2, [r3, #0]
   1293a:	f24b 2318 	movw	r3, #45592	; 0xb218
   1293e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12942:	601a      	str	r2, [r3, #0]
   12944:	f24b 2324 	movw	r3, #45604	; 0xb224
   12948:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1294c:	2200      	movs	r2, #0
   1294e:	801a      	strh	r2, [r3, #0]
   12950:	f24b 2328 	movw	r3, #45608	; 0xb228
   12954:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12958:	f04f 0200 	mov.w	r2, #0
   1295c:	601a      	str	r2, [r3, #0]
   1295e:	f001 bcc1 	b.w	142e4 <auto_nav+0x21a4>
            fly_to(6);
   12962:	2006      	movs	r0, #6
   12964:	f001 fe00 	bl	14568 <fly_to>
            auto_pitch = FALSE;
   12968:	f64a 639f 	movw	r3, #44703	; 0xae9f
   1296c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12970:	2200      	movs	r2, #0
   12972:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12974:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12978:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1297c:	f04f 0200 	mov.w	r2, #0
   12980:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12982:	f64a 639d 	movw	r3, #44701	; 0xae9d
   12986:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1298a:	2203      	movs	r2, #3
   1298c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   1298e:	f240 4328 	movw	r3, #1064	; 0x428
   12992:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12996:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12998:	f240 4324 	movw	r3, #1060	; 0x424
   1299c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129a0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   129a2:	f24b 2304 	movw	r3, #45572	; 0xb204
   129a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129aa:	f04f 0200 	mov.w	r2, #0
   129ae:	601a      	str	r2, [r3, #0]
          }
          return;
   129b0:	f001 bc98 	b.w	142e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   129b4:	f24b 2310 	movw	r3, #45584	; 0xb210
   129b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129bc:	781b      	ldrb	r3, [r3, #0]
   129be:	2b02      	cmp	r3, #2
   129c0:	d169      	bne.n	12a96 <auto_nav+0x956>
     {
         nav_stage =2; 
   129c2:	f24b 2310 	movw	r3, #45584	; 0xb210
   129c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ca:	2202      	movs	r2, #2
   129cc:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   129ce:	2001      	movs	r0, #1
   129d0:	f001 fc96 	bl	14300 <approaching>
   129d4:	4603      	mov	r3, r0
   129d6:	2b00      	cmp	r3, #0
   129d8:	d034      	beq.n	12a44 <auto_nav+0x904>
   129da:	f24b 231c 	movw	r3, #45596	; 0xb21c
   129de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129e2:	2201      	movs	r2, #1
   129e4:	701a      	strb	r2, [r3, #0]
   129e6:	f24b 2310 	movw	r3, #45584	; 0xb210
   129ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ee:	781b      	ldrb	r3, [r3, #0]
   129f0:	3301      	adds	r3, #1
   129f2:	b2da      	uxtb	r2, r3
   129f4:	f24b 2310 	movw	r3, #45584	; 0xb210
   129f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129fc:	701a      	strb	r2, [r3, #0]
   129fe:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a06:	681a      	ldr	r2, [r3, #0]
   12a08:	f24b 2314 	movw	r3, #45588	; 0xb214
   12a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a10:	601a      	str	r2, [r3, #0]
   12a12:	f24b 4370 	movw	r3, #46192	; 0xb470
   12a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a1a:	681a      	ldr	r2, [r3, #0]
   12a1c:	f24b 2318 	movw	r3, #45592	; 0xb218
   12a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a24:	601a      	str	r2, [r3, #0]
   12a26:	f24b 2324 	movw	r3, #45604	; 0xb224
   12a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a2e:	2200      	movs	r2, #0
   12a30:	801a      	strh	r2, [r3, #0]
   12a32:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a3a:	f04f 0200 	mov.w	r2, #0
   12a3e:	601a      	str	r2, [r3, #0]
   12a40:	f001 bc50 	b.w	142e4 <auto_nav+0x21a4>
            fly_to(1);
   12a44:	2001      	movs	r0, #1
   12a46:	f001 fd8f 	bl	14568 <fly_to>
            auto_pitch = FALSE;
   12a4a:	f64a 639f 	movw	r3, #44703	; 0xae9f
   12a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a52:	2200      	movs	r2, #0
   12a54:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12a56:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a5e:	f04f 0200 	mov.w	r2, #0
   12a62:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12a64:	f64a 639d 	movw	r3, #44701	; 0xae9d
   12a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a6c:	2203      	movs	r2, #3
   12a6e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12a70:	f240 4328 	movw	r3, #1064	; 0x428
   12a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a78:	695a      	ldr	r2, [r3, #20]
   12a7a:	f240 4324 	movw	r3, #1060	; 0x424
   12a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a82:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a84:	f24b 2304 	movw	r3, #45572	; 0xb204
   12a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a8c:	f04f 0200 	mov.w	r2, #0
   12a90:	601a      	str	r2, [r3, #0]
          }
          return;
   12a92:	f001 bc27 	b.w	142e4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12a96:	f24b 2310 	movw	r3, #45584	; 0xb210
   12a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a9e:	781b      	ldrb	r3, [r3, #0]
   12aa0:	2b03      	cmp	r3, #3
   12aa2:	d16f      	bne.n	12b84 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12aa4:	f24b 2310 	movw	r3, #45584	; 0xb210
   12aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aac:	2203      	movs	r2, #3
   12aae:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12ab0:	2002      	movs	r0, #2
   12ab2:	f001 fc25 	bl	14300 <approaching>
   12ab6:	4603      	mov	r3, r0
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d034      	beq.n	12b26 <auto_nav+0x9e6>
   12abc:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ac4:	2202      	movs	r2, #2
   12ac6:	701a      	strb	r2, [r3, #0]
   12ac8:	f24b 2310 	movw	r3, #45584	; 0xb210
   12acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ad0:	781b      	ldrb	r3, [r3, #0]
   12ad2:	3301      	adds	r3, #1
   12ad4:	b2da      	uxtb	r2, r3
   12ad6:	f24b 2310 	movw	r3, #45584	; 0xb210
   12ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ade:	701a      	strb	r2, [r3, #0]
   12ae0:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ae8:	681a      	ldr	r2, [r3, #0]
   12aea:	f24b 2314 	movw	r3, #45588	; 0xb214
   12aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12af2:	601a      	str	r2, [r3, #0]
   12af4:	f24b 4370 	movw	r3, #46192	; 0xb470
   12af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12afc:	681a      	ldr	r2, [r3, #0]
   12afe:	f24b 2318 	movw	r3, #45592	; 0xb218
   12b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b06:	601a      	str	r2, [r3, #0]
   12b08:	f24b 2324 	movw	r3, #45604	; 0xb224
   12b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b10:	2200      	movs	r2, #0
   12b12:	801a      	strh	r2, [r3, #0]
   12b14:	f24b 2328 	movw	r3, #45608	; 0xb228
   12b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b1c:	f04f 0200 	mov.w	r2, #0
   12b20:	601a      	str	r2, [r3, #0]
   12b22:	f001 bbdf 	b.w	142e4 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12b26:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b2e:	781b      	ldrb	r3, [r3, #0]
   12b30:	4618      	mov	r0, r3
   12b32:	2102      	movs	r1, #2
   12b34:	f001 fd3a 	bl	145ac <route_to>
            auto_pitch = FALSE;
   12b38:	f64a 639f 	movw	r3, #44703	; 0xae9f
   12b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b40:	2200      	movs	r2, #0
   12b42:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b44:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b4c:	f04f 0200 	mov.w	r2, #0
   12b50:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b52:	f64a 639d 	movw	r3, #44701	; 0xae9d
   12b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b5a:	2203      	movs	r2, #3
   12b5c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12b5e:	f240 4328 	movw	r3, #1064	; 0x428
   12b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b66:	6a1a      	ldr	r2, [r3, #32]
   12b68:	f240 4324 	movw	r3, #1060	; 0x424
   12b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b70:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b72:	f24b 2304 	movw	r3, #45572	; 0xb204
   12b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b7a:	f04f 0200 	mov.w	r2, #0
   12b7e:	601a      	str	r2, [r3, #0]
          }
          return;
   12b80:	f001 bbb0 	b.w	142e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12b84:	f24b 2310 	movw	r3, #45584	; 0xb210
   12b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b8c:	781b      	ldrb	r3, [r3, #0]
   12b8e:	2b04      	cmp	r3, #4
   12b90:	d169      	bne.n	12c66 <auto_nav+0xb26>
       {
          nav_stage = 4;
   12b92:	f24b 2310 	movw	r3, #45584	; 0xb210
   12b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b9a:	2204      	movs	r2, #4
   12b9c:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12b9e:	2003      	movs	r0, #3
   12ba0:	f001 fbae 	bl	14300 <approaching>
   12ba4:	4603      	mov	r3, r0
   12ba6:	2b00      	cmp	r3, #0
   12ba8:	d034      	beq.n	12c14 <auto_nav+0xad4>
   12baa:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb2:	2203      	movs	r2, #3
   12bb4:	701a      	strb	r2, [r3, #0]
   12bb6:	f24b 2310 	movw	r3, #45584	; 0xb210
   12bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bbe:	781b      	ldrb	r3, [r3, #0]
   12bc0:	3301      	adds	r3, #1
   12bc2:	b2da      	uxtb	r2, r3
   12bc4:	f24b 2310 	movw	r3, #45584	; 0xb210
   12bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bcc:	701a      	strb	r2, [r3, #0]
   12bce:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bd6:	681a      	ldr	r2, [r3, #0]
   12bd8:	f24b 2314 	movw	r3, #45588	; 0xb214
   12bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12be0:	601a      	str	r2, [r3, #0]
   12be2:	f24b 4370 	movw	r3, #46192	; 0xb470
   12be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bea:	681a      	ldr	r2, [r3, #0]
   12bec:	f24b 2318 	movw	r3, #45592	; 0xb218
   12bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bf4:	601a      	str	r2, [r3, #0]
   12bf6:	f24b 2324 	movw	r3, #45604	; 0xb224
   12bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bfe:	2200      	movs	r2, #0
   12c00:	801a      	strh	r2, [r3, #0]
   12c02:	f24b 2328 	movw	r3, #45608	; 0xb228
   12c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c0a:	f04f 0200 	mov.w	r2, #0
   12c0e:	601a      	str	r2, [r3, #0]
   12c10:	f001 bb68 	b.w	142e4 <auto_nav+0x21a4>
            fly_to(3);
   12c14:	2003      	movs	r0, #3
   12c16:	f001 fca7 	bl	14568 <fly_to>
            auto_pitch = FALSE;
   12c1a:	f64a 639f 	movw	r3, #44703	; 0xae9f
   12c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c22:	2200      	movs	r2, #0
   12c24:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c26:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c2e:	f04f 0200 	mov.w	r2, #0
   12c32:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c34:	f64a 639d 	movw	r3, #44701	; 0xae9d
   12c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c3c:	2203      	movs	r2, #3
   12c3e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12c40:	f240 4328 	movw	r3, #1064	; 0x428
   12c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12c4a:	f240 4324 	movw	r3, #1060	; 0x424
   12c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c52:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12c54:	f24b 2304 	movw	r3, #45572	; 0xb204
   12c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c5c:	f04f 0200 	mov.w	r2, #0
   12c60:	601a      	str	r2, [r3, #0]
          }
          return;
   12c62:	f001 bb3f 	b.w	142e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   12c66:	f24b 2310 	movw	r3, #45584	; 0xb210
   12c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c6e:	781b      	ldrb	r3, [r3, #0]
   12c70:	2b05      	cmp	r3, #5
   12c72:	d169      	bne.n	12d48 <auto_nav+0xc08>
       {
          nav_stage =5;
   12c74:	f24b 2310 	movw	r3, #45584	; 0xb210
   12c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c7c:	2205      	movs	r2, #5
   12c7e:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12c80:	2004      	movs	r0, #4
   12c82:	f001 fb3d 	bl	14300 <approaching>
   12c86:	4603      	mov	r3, r0
   12c88:	2b00      	cmp	r3, #0
   12c8a:	d034      	beq.n	12cf6 <auto_nav+0xbb6>
   12c8c:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c94:	2204      	movs	r2, #4
   12c96:	701a      	strb	r2, [r3, #0]
   12c98:	f24b 2310 	movw	r3, #45584	; 0xb210
   12c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ca0:	781b      	ldrb	r3, [r3, #0]
   12ca2:	3301      	adds	r3, #1
   12ca4:	b2da      	uxtb	r2, r3
   12ca6:	f24b 2310 	movw	r3, #45584	; 0xb210
   12caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cae:	701a      	strb	r2, [r3, #0]
   12cb0:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cb8:	681a      	ldr	r2, [r3, #0]
   12cba:	f24b 2314 	movw	r3, #45588	; 0xb214
   12cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cc2:	601a      	str	r2, [r3, #0]
   12cc4:	f24b 4370 	movw	r3, #46192	; 0xb470
   12cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ccc:	681a      	ldr	r2, [r3, #0]
   12cce:	f24b 2318 	movw	r3, #45592	; 0xb218
   12cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cd6:	601a      	str	r2, [r3, #0]
   12cd8:	f24b 2324 	movw	r3, #45604	; 0xb224
   12cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ce0:	2200      	movs	r2, #0
   12ce2:	801a      	strh	r2, [r3, #0]
   12ce4:	f24b 2328 	movw	r3, #45608	; 0xb228
   12ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cec:	f04f 0200 	mov.w	r2, #0
   12cf0:	601a      	str	r2, [r3, #0]
   12cf2:	f001 baf7 	b.w	142e4 <auto_nav+0x21a4>
            fly_to(4);
   12cf6:	2004      	movs	r0, #4
   12cf8:	f001 fc36 	bl	14568 <fly_to>
            auto_pitch = FALSE;
   12cfc:	f64a 639f 	movw	r3, #44703	; 0xae9f
   12d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d04:	2200      	movs	r2, #0
   12d06:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12d08:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d10:	f04f 0200 	mov.w	r2, #0
   12d14:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12d16:	f64a 639d 	movw	r3, #44701	; 0xae9d
   12d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d1e:	2203      	movs	r2, #3
   12d20:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12d22:	f240 4328 	movw	r3, #1064	; 0x428
   12d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12d2c:	f240 4324 	movw	r3, #1060	; 0x424
   12d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d34:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12d36:	f24b 2304 	movw	r3, #45572	; 0xb204
   12d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d3e:	f04f 0200 	mov.w	r2, #0
   12d42:	601a      	str	r2, [r3, #0]
          }
          return;
   12d44:	f001 bace 	b.w	142e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   12d48:	f24b 2310 	movw	r3, #45584	; 0xb210
   12d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d50:	781b      	ldrb	r3, [r3, #0]
   12d52:	2b06      	cmp	r3, #6
   12d54:	d16f      	bne.n	12e36 <auto_nav+0xcf6>
       {
          nav_stage =6;
   12d56:	f24b 2310 	movw	r3, #45584	; 0xb210
   12d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d5e:	2206      	movs	r2, #6
   12d60:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   12d62:	2005      	movs	r0, #5
   12d64:	f001 facc 	bl	14300 <approaching>
   12d68:	4603      	mov	r3, r0
   12d6a:	2b00      	cmp	r3, #0
   12d6c:	d034      	beq.n	12dd8 <auto_nav+0xc98>
   12d6e:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d76:	2205      	movs	r2, #5
   12d78:	701a      	strb	r2, [r3, #0]
   12d7a:	f24b 2310 	movw	r3, #45584	; 0xb210
   12d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d82:	781b      	ldrb	r3, [r3, #0]
   12d84:	3301      	adds	r3, #1
   12d86:	b2da      	uxtb	r2, r3
   12d88:	f24b 2310 	movw	r3, #45584	; 0xb210
   12d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d90:	701a      	strb	r2, [r3, #0]
   12d92:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d9a:	681a      	ldr	r2, [r3, #0]
   12d9c:	f24b 2314 	movw	r3, #45588	; 0xb214
   12da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12da4:	601a      	str	r2, [r3, #0]
   12da6:	f24b 4370 	movw	r3, #46192	; 0xb470
   12daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dae:	681a      	ldr	r2, [r3, #0]
   12db0:	f24b 2318 	movw	r3, #45592	; 0xb218
   12db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12db8:	601a      	str	r2, [r3, #0]
   12dba:	f24b 2324 	movw	r3, #45604	; 0xb224
   12dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dc2:	2200      	movs	r2, #0
   12dc4:	801a      	strh	r2, [r3, #0]
   12dc6:	f24b 2328 	movw	r3, #45608	; 0xb228
   12dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dce:	f04f 0200 	mov.w	r2, #0
   12dd2:	601a      	str	r2, [r3, #0]
   12dd4:	f001 ba86 	b.w	142e4 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   12dd8:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12de0:	781b      	ldrb	r3, [r3, #0]
   12de2:	4618      	mov	r0, r3
   12de4:	2105      	movs	r1, #5
   12de6:	f001 fbe1 	bl	145ac <route_to>
            auto_pitch = FALSE;
   12dea:	f64a 639f 	movw	r3, #44703	; 0xae9f
   12dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12df2:	2200      	movs	r2, #0
   12df4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12df6:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dfe:	f04f 0200 	mov.w	r2, #0
   12e02:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e04:	f64a 639d 	movw	r3, #44701	; 0xae9d
   12e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e0c:	2203      	movs	r2, #3
   12e0e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   12e10:	f240 4328 	movw	r3, #1064	; 0x428
   12e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12e1a:	f240 4324 	movw	r3, #1060	; 0x424
   12e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e22:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e24:	f24b 2304 	movw	r3, #45572	; 0xb204
   12e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e2c:	f04f 0200 	mov.w	r2, #0
   12e30:	601a      	str	r2, [r3, #0]
          }
          return;
   12e32:	f001 ba57 	b.w	142e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   12e36:	f24b 2310 	movw	r3, #45584	; 0xb210
   12e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e3e:	781b      	ldrb	r3, [r3, #0]
   12e40:	2b07      	cmp	r3, #7
   12e42:	d106      	bne.n	12e52 <auto_nav+0xd12>
       {
	   nav_stage =7;
   12e44:	f24b 2310 	movw	r3, #45584	; 0xb210
   12e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e4c:	2207      	movs	r2, #7
   12e4e:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   12e50:	e50a      	b.n	12868 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   12e52:	f24b 2310 	movw	r3, #45584	; 0xb210
   12e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e5a:	781b      	ldrb	r3, [r3, #0]
   12e5c:	2b08      	cmp	r3, #8
   12e5e:	f041 8241 	bne.w	142e4 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   12e62:	f24b 2310 	movw	r3, #45584	; 0xb210
   12e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e6a:	2208      	movs	r2, #8
   12e6c:	701a      	strb	r2, [r3, #0]
          NextBlock();
   12e6e:	f24b 2311 	movw	r3, #45585	; 0xb211
   12e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e76:	781b      	ldrb	r3, [r3, #0]
   12e78:	3301      	adds	r3, #1
   12e7a:	b2da      	uxtb	r2, r3
   12e7c:	f24b 2311 	movw	r3, #45585	; 0xb211
   12e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e84:	701a      	strb	r2, [r3, #0]
   12e86:	f24b 2310 	movw	r3, #45584	; 0xb210
   12e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e8e:	2200      	movs	r2, #0
   12e90:	701a      	strb	r2, [r3, #0]
   12e92:	f24b 2326 	movw	r3, #45606	; 0xb226
   12e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e9a:	2200      	movs	r2, #0
   12e9c:	801a      	strh	r2, [r3, #0]
   12e9e:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ea6:	681a      	ldr	r2, [r3, #0]
   12ea8:	f24b 2314 	movw	r3, #45588	; 0xb214
   12eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eb0:	601a      	str	r2, [r3, #0]
   12eb2:	f24b 4370 	movw	r3, #46192	; 0xb470
   12eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eba:	681a      	ldr	r2, [r3, #0]
   12ebc:	f24b 2318 	movw	r3, #45592	; 0xb218
   12ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ec4:	601a      	str	r2, [r3, #0]
   12ec6:	f24b 2324 	movw	r3, #45604	; 0xb224
   12eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ece:	2200      	movs	r2, #0
   12ed0:	801a      	strh	r2, [r3, #0]
   12ed2:	f24b 2328 	movw	r3, #45608	; 0xb228
   12ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eda:	f04f 0200 	mov.w	r2, #0
   12ede:	601a      	str	r2, [r3, #0]
   12ee0:	f001 ba00 	b.w	142e4 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   12ee4:	f24b 2311 	movw	r3, #45585	; 0xb211
   12ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eec:	781b      	ldrb	r3, [r3, #0]
   12eee:	2b03      	cmp	r3, #3
   12ef0:	f040 8388 	bne.w	13604 <auto_nav+0x14c4>
{
    nav_block = 3;
   12ef4:	f24b 2311 	movw	r3, #45585	; 0xb211
   12ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12efc:	2203      	movs	r2, #3
   12efe:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   12f00:	f64a 63a0 	movw	r3, #44704	; 0xaea0
   12f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f08:	781b      	ldrb	r3, [r3, #0]
   12f0a:	2b00      	cmp	r3, #0
   12f0c:	d007      	beq.n	12f1e <auto_nav+0xdde>
   12f0e:	f64a 63a0 	movw	r3, #44704	; 0xaea0
   12f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f16:	2200      	movs	r2, #0
   12f18:	701a      	strb	r2, [r3, #0]
   12f1a:	2301      	movs	r3, #1
   12f1c:	e000      	b.n	12f20 <auto_nav+0xde0>
   12f1e:	2300      	movs	r3, #0
   12f20:	2b00      	cmp	r3, #0
   12f22:	d034      	beq.n	12f8e <auto_nav+0xe4e>
   12f24:	f24b 2311 	movw	r3, #45585	; 0xb211
   12f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f2c:	2204      	movs	r2, #4
   12f2e:	701a      	strb	r2, [r3, #0]
   12f30:	f24b 2310 	movw	r3, #45584	; 0xb210
   12f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f38:	2200      	movs	r2, #0
   12f3a:	701a      	strb	r2, [r3, #0]
   12f3c:	f24b 2326 	movw	r3, #45606	; 0xb226
   12f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f44:	2200      	movs	r2, #0
   12f46:	801a      	strh	r2, [r3, #0]
   12f48:	f24b 436c 	movw	r3, #46188	; 0xb46c
   12f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f50:	681a      	ldr	r2, [r3, #0]
   12f52:	f24b 2314 	movw	r3, #45588	; 0xb214
   12f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f5a:	601a      	str	r2, [r3, #0]
   12f5c:	f24b 4370 	movw	r3, #46192	; 0xb470
   12f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f64:	681a      	ldr	r2, [r3, #0]
   12f66:	f24b 2318 	movw	r3, #45592	; 0xb218
   12f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f6e:	601a      	str	r2, [r3, #0]
   12f70:	f24b 2324 	movw	r3, #45604	; 0xb224
   12f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f78:	2200      	movs	r2, #0
   12f7a:	801a      	strh	r2, [r3, #0]
   12f7c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f84:	f04f 0200 	mov.w	r2, #0
   12f88:	601a      	str	r2, [r3, #0]
   12f8a:	f001 b9ab 	b.w	142e4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   12f8e:	f24b 2310 	movw	r3, #45584	; 0xb210
   12f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f96:	781b      	ldrb	r3, [r3, #0]
   12f98:	2b00      	cmp	r3, #0
   12f9a:	f040 82ea 	bne.w	13572 <auto_nav+0x1432>
    {
        nav_stage = 0;
   12f9e:	f24b 2310 	movw	r3, #45584	; 0xb210
   12fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fa6:	2200      	movs	r2, #0
   12fa8:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   12faa:	f64a 639c 	movw	r3, #44700	; 0xae9c
   12fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fb2:	781b      	ldrb	r3, [r3, #0]
   12fb4:	2b02      	cmp	r3, #2
   12fb6:	f040 81a5 	bne.w	13304 <auto_nav+0x11c4>
   12fba:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   12fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fc2:	88db      	ldrh	r3, [r3, #6]
   12fc4:	84fb      	strh	r3, [r7, #38]	; 0x26
   12fc6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12fca:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12fce:	dc04      	bgt.n	12fda <auto_nav+0xe9a>
   12fd0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12fd4:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12fd8:	da7e      	bge.n	130d8 <auto_nav+0xf98>
   12fda:	f24b 235c 	movw	r3, #45660	; 0xb25c
   12fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fe2:	681b      	ldr	r3, [r3, #0]
   12fe4:	4618      	mov	r0, r3
   12fe6:	f004 fb7b 	bl	176e0 <__aeabi_f2d>
   12fea:	4604      	mov	r4, r0
   12fec:	460d      	mov	r5, r1
   12fee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12ff2:	4618      	mov	r0, r3
   12ff4:	f004 ffb4 	bl	17f60 <__aeabi_i2f>
   12ff8:	4603      	mov	r3, r0
   12ffa:	4618      	mov	r0, r3
   12ffc:	f04f 0100 	mov.w	r1, #0
   13000:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13004:	f005 f8b4 	bl	18170 <__aeabi_fdiv>
   13008:	4603      	mov	r3, r0
   1300a:	4618      	mov	r0, r3
   1300c:	f004 fb68 	bl	176e0 <__aeabi_f2d>
   13010:	4602      	mov	r2, r0
   13012:	460b      	mov	r3, r1
   13014:	4610      	mov	r0, r2
   13016:	4619      	mov	r1, r3
   13018:	f04f 0200 	mov.w	r2, #0
   1301c:	f04f 0300 	mov.w	r3, #0
   13020:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13024:	f004 fbb0 	bl	17788 <__aeabi_dmul>
   13028:	4602      	mov	r2, r0
   1302a:	460b      	mov	r3, r1
   1302c:	4610      	mov	r0, r2
   1302e:	4619      	mov	r1, r3
   13030:	f04f 0200 	mov.w	r2, #0
   13034:	f04f 0300 	mov.w	r3, #0
   13038:	f004 f9f4 	bl	17424 <__adddf3>
   1303c:	4602      	mov	r2, r0
   1303e:	460b      	mov	r3, r1
   13040:	4620      	mov	r0, r4
   13042:	4629      	mov	r1, r5
   13044:	f004 f9ee 	bl	17424 <__adddf3>
   13048:	4602      	mov	r2, r0
   1304a:	460b      	mov	r3, r1
   1304c:	4610      	mov	r0, r2
   1304e:	4619      	mov	r1, r3
   13050:	f004 fe7c 	bl	17d4c <__aeabi_d2f>
   13054:	4602      	mov	r2, r0
   13056:	f24b 235c 	movw	r3, #45660	; 0xb25c
   1305a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1305e:	601a      	str	r2, [r3, #0]
   13060:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13068:	681b      	ldr	r3, [r3, #0]
   1306a:	4618      	mov	r0, r3
   1306c:	f04f 0100 	mov.w	r1, #0
   13070:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13074:	f005 f970 	bl	18358 <__aeabi_fcmple>
   13078:	4603      	mov	r3, r0
   1307a:	2b00      	cmp	r3, #0
   1307c:	d005      	beq.n	1308a <auto_nav+0xf4a>
   1307e:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13086:	681a      	ldr	r2, [r3, #0]
   13088:	e003      	b.n	13092 <auto_nav+0xf52>
   1308a:	f04f 0200 	mov.w	r2, #0
   1308e:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13092:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13096:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1309a:	601a      	str	r2, [r3, #0]
   1309c:	f24b 235c 	movw	r3, #45660	; 0xb25c
   130a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130a4:	681b      	ldr	r3, [r3, #0]
   130a6:	4618      	mov	r0, r3
   130a8:	f04f 0100 	mov.w	r1, #0
   130ac:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   130b0:	f005 f95c 	bl	1836c <__aeabi_fcmpge>
   130b4:	4603      	mov	r3, r0
   130b6:	2b00      	cmp	r3, #0
   130b8:	d005      	beq.n	130c6 <auto_nav+0xf86>
   130ba:	f24b 235c 	movw	r3, #45660	; 0xb25c
   130be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130c2:	681a      	ldr	r2, [r3, #0]
   130c4:	e003      	b.n	130ce <auto_nav+0xf8e>
   130c6:	f04f 0200 	mov.w	r2, #0
   130ca:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   130ce:	f24b 235c 	movw	r3, #45660	; 0xb25c
   130d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130d6:	601a      	str	r2, [r3, #0]
   130d8:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   130dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130e0:	889b      	ldrh	r3, [r3, #4]
   130e2:	84bb      	strh	r3, [r7, #36]	; 0x24
   130e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   130e8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   130ec:	dc04      	bgt.n	130f8 <auto_nav+0xfb8>
   130ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   130f2:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   130f6:	da7e      	bge.n	131f6 <auto_nav+0x10b6>
   130f8:	f24b 2360 	movw	r3, #45664	; 0xb260
   130fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13100:	681b      	ldr	r3, [r3, #0]
   13102:	4618      	mov	r0, r3
   13104:	f004 faec 	bl	176e0 <__aeabi_f2d>
   13108:	4604      	mov	r4, r0
   1310a:	460d      	mov	r5, r1
   1310c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13110:	4618      	mov	r0, r3
   13112:	f004 ff25 	bl	17f60 <__aeabi_i2f>
   13116:	4603      	mov	r3, r0
   13118:	4618      	mov	r0, r3
   1311a:	f04f 0100 	mov.w	r1, #0
   1311e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13122:	f005 f825 	bl	18170 <__aeabi_fdiv>
   13126:	4603      	mov	r3, r0
   13128:	4618      	mov	r0, r3
   1312a:	f004 fad9 	bl	176e0 <__aeabi_f2d>
   1312e:	4602      	mov	r2, r0
   13130:	460b      	mov	r3, r1
   13132:	4610      	mov	r0, r2
   13134:	4619      	mov	r1, r3
   13136:	f04f 0200 	mov.w	r2, #0
   1313a:	f04f 0300 	mov.w	r3, #0
   1313e:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13142:	f004 fb21 	bl	17788 <__aeabi_dmul>
   13146:	4602      	mov	r2, r0
   13148:	460b      	mov	r3, r1
   1314a:	4610      	mov	r0, r2
   1314c:	4619      	mov	r1, r3
   1314e:	f04f 0200 	mov.w	r2, #0
   13152:	f04f 0300 	mov.w	r3, #0
   13156:	f004 f965 	bl	17424 <__adddf3>
   1315a:	4602      	mov	r2, r0
   1315c:	460b      	mov	r3, r1
   1315e:	4620      	mov	r0, r4
   13160:	4629      	mov	r1, r5
   13162:	f004 f95f 	bl	17424 <__adddf3>
   13166:	4602      	mov	r2, r0
   13168:	460b      	mov	r3, r1
   1316a:	4610      	mov	r0, r2
   1316c:	4619      	mov	r1, r3
   1316e:	f004 fded 	bl	17d4c <__aeabi_d2f>
   13172:	4602      	mov	r2, r0
   13174:	f24b 2360 	movw	r3, #45664	; 0xb260
   13178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1317c:	601a      	str	r2, [r3, #0]
   1317e:	f24b 2360 	movw	r3, #45664	; 0xb260
   13182:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13186:	681b      	ldr	r3, [r3, #0]
   13188:	4618      	mov	r0, r3
   1318a:	f04f 0100 	mov.w	r1, #0
   1318e:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13192:	f005 f8e1 	bl	18358 <__aeabi_fcmple>
   13196:	4603      	mov	r3, r0
   13198:	2b00      	cmp	r3, #0
   1319a:	d005      	beq.n	131a8 <auto_nav+0x1068>
   1319c:	f24b 2360 	movw	r3, #45664	; 0xb260
   131a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131a4:	681a      	ldr	r2, [r3, #0]
   131a6:	e003      	b.n	131b0 <auto_nav+0x1070>
   131a8:	f04f 0200 	mov.w	r2, #0
   131ac:	f2c4 327a 	movt	r2, #17274	; 0x437a
   131b0:	f24b 2360 	movw	r3, #45664	; 0xb260
   131b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131b8:	601a      	str	r2, [r3, #0]
   131ba:	f24b 2360 	movw	r3, #45664	; 0xb260
   131be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131c2:	681b      	ldr	r3, [r3, #0]
   131c4:	4618      	mov	r0, r3
   131c6:	f04f 0100 	mov.w	r1, #0
   131ca:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   131ce:	f005 f8cd 	bl	1836c <__aeabi_fcmpge>
   131d2:	4603      	mov	r3, r0
   131d4:	2b00      	cmp	r3, #0
   131d6:	d005      	beq.n	131e4 <auto_nav+0x10a4>
   131d8:	f24b 2360 	movw	r3, #45664	; 0xb260
   131dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131e0:	681a      	ldr	r2, [r3, #0]
   131e2:	e003      	b.n	131ec <auto_nav+0x10ac>
   131e4:	f04f 0200 	mov.w	r2, #0
   131e8:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   131ec:	f24b 2360 	movw	r3, #45664	; 0xb260
   131f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131f4:	601a      	str	r2, [r3, #0]
   131f6:	f64a 639d 	movw	r3, #44701	; 0xae9d
   131fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131fe:	2203      	movs	r2, #3
   13200:	701a      	strb	r2, [r3, #0]
   13202:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   13206:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1320a:	885b      	ldrh	r3, [r3, #2]
   1320c:	847b      	strh	r3, [r7, #34]	; 0x22
   1320e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13212:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13216:	dc04      	bgt.n	13222 <auto_nav+0x10e2>
   13218:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1321c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13220:	da70      	bge.n	13304 <auto_nav+0x11c4>
   13222:	f240 4324 	movw	r3, #1060	; 0x424
   13226:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1322a:	681b      	ldr	r3, [r3, #0]
   1322c:	4618      	mov	r0, r3
   1322e:	f004 fa57 	bl	176e0 <__aeabi_f2d>
   13232:	4604      	mov	r4, r0
   13234:	460d      	mov	r5, r1
   13236:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1323a:	4618      	mov	r0, r3
   1323c:	f004 fe90 	bl	17f60 <__aeabi_i2f>
   13240:	4603      	mov	r3, r0
   13242:	4618      	mov	r0, r3
   13244:	f04f 0100 	mov.w	r1, #0
   13248:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1324c:	f004 ff90 	bl	18170 <__aeabi_fdiv>
   13250:	4603      	mov	r3, r0
   13252:	4618      	mov	r0, r3
   13254:	f004 fa44 	bl	176e0 <__aeabi_f2d>
   13258:	4602      	mov	r2, r0
   1325a:	460b      	mov	r3, r1
   1325c:	f04f 0000 	mov.w	r0, #0
   13260:	f04f 0100 	mov.w	r1, #0
   13264:	f004 f8dc 	bl	17420 <__aeabi_dsub>
   13268:	4602      	mov	r2, r0
   1326a:	460b      	mov	r3, r1
   1326c:	4620      	mov	r0, r4
   1326e:	4629      	mov	r1, r5
   13270:	f004 f8d8 	bl	17424 <__adddf3>
   13274:	4602      	mov	r2, r0
   13276:	460b      	mov	r3, r1
   13278:	4610      	mov	r0, r2
   1327a:	4619      	mov	r1, r3
   1327c:	f004 fd66 	bl	17d4c <__aeabi_d2f>
   13280:	4602      	mov	r2, r0
   13282:	f240 4324 	movw	r3, #1060	; 0x424
   13286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1328a:	601a      	str	r2, [r3, #0]
   1328c:	f240 4324 	movw	r3, #1060	; 0x424
   13290:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13294:	681b      	ldr	r3, [r3, #0]
   13296:	4618      	mov	r0, r3
   13298:	f04f 0100 	mov.w	r1, #0
   1329c:	f2c4 312f 	movt	r1, #17199	; 0x432f
   132a0:	f005 f864 	bl	1836c <__aeabi_fcmpge>
   132a4:	4603      	mov	r3, r0
   132a6:	2b00      	cmp	r3, #0
   132a8:	d005      	beq.n	132b6 <auto_nav+0x1176>
   132aa:	f240 4324 	movw	r3, #1060	; 0x424
   132ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132b2:	681a      	ldr	r2, [r3, #0]
   132b4:	e003      	b.n	132be <auto_nav+0x117e>
   132b6:	f04f 0200 	mov.w	r2, #0
   132ba:	f2c4 322f 	movt	r2, #17199	; 0x432f
   132be:	f240 4324 	movw	r3, #1060	; 0x424
   132c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132c6:	601a      	str	r2, [r3, #0]
   132c8:	f240 4324 	movw	r3, #1060	; 0x424
   132cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132d0:	681b      	ldr	r3, [r3, #0]
   132d2:	4618      	mov	r0, r3
   132d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   132d8:	f2c4 3189 	movt	r1, #17289	; 0x4389
   132dc:	f005 f83c 	bl	18358 <__aeabi_fcmple>
   132e0:	4603      	mov	r3, r0
   132e2:	2b00      	cmp	r3, #0
   132e4:	d005      	beq.n	132f2 <auto_nav+0x11b2>
   132e6:	f240 4324 	movw	r3, #1060	; 0x424
   132ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132ee:	681a      	ldr	r2, [r3, #0]
   132f0:	e003      	b.n	132fa <auto_nav+0x11ba>
   132f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   132f6:	f2c4 3289 	movt	r2, #17289	; 0x4389
   132fa:	f240 4324 	movw	r3, #1060	; 0x424
   132fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13302:	601a      	str	r2, [r3, #0]
   13304:	f24b 4370 	movw	r3, #46192	; 0xb470
   13308:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1330c:	681a      	ldr	r2, [r3, #0]
   1330e:	f24b 2360 	movw	r3, #45664	; 0xb260
   13312:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13316:	681b      	ldr	r3, [r3, #0]
   13318:	4610      	mov	r0, r2
   1331a:	4619      	mov	r1, r3
   1331c:	f004 fd6a 	bl	17df4 <__aeabi_fsub>
   13320:	4603      	mov	r3, r0
   13322:	4618      	mov	r0, r3
   13324:	f004 f9dc 	bl	176e0 <__aeabi_f2d>
   13328:	4604      	mov	r4, r0
   1332a:	460d      	mov	r5, r1
   1332c:	f24b 436c 	movw	r3, #46188	; 0xb46c
   13330:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13334:	681a      	ldr	r2, [r3, #0]
   13336:	f24b 235c 	movw	r3, #45660	; 0xb25c
   1333a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1333e:	681b      	ldr	r3, [r3, #0]
   13340:	4610      	mov	r0, r2
   13342:	4619      	mov	r1, r3
   13344:	f004 fd56 	bl	17df4 <__aeabi_fsub>
   13348:	4603      	mov	r3, r0
   1334a:	4618      	mov	r0, r3
   1334c:	f004 f9c8 	bl	176e0 <__aeabi_f2d>
   13350:	4602      	mov	r2, r0
   13352:	460b      	mov	r3, r1
   13354:	4620      	mov	r0, r4
   13356:	4629      	mov	r1, r5
   13358:	f002 fa12 	bl	15780 <pp_atan2>
   1335c:	4602      	mov	r2, r0
   1335e:	460b      	mov	r3, r1
   13360:	4610      	mov	r0, r2
   13362:	4619      	mov	r1, r3
   13364:	f004 fcf2 	bl	17d4c <__aeabi_d2f>
   13368:	4603      	mov	r3, r0
   1336a:	61fb      	str	r3, [r7, #28]
   1336c:	69f8      	ldr	r0, [r7, #28]
   1336e:	f004 f9b7 	bl	176e0 <__aeabi_f2d>
   13372:	4604      	mov	r4, r0
   13374:	460d      	mov	r5, r1
   13376:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   1337a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1337e:	681b      	ldr	r3, [r3, #0]
   13380:	4618      	mov	r0, r3
   13382:	f04f 0100 	mov.w	r1, #0
   13386:	f2cc 2148 	movt	r1, #49736	; 0xc248
   1338a:	f004 fe3d 	bl	18008 <__aeabi_fmul>
   1338e:	4603      	mov	r3, r0
   13390:	4618      	mov	r0, r3
   13392:	f004 f9a5 	bl	176e0 <__aeabi_f2d>
   13396:	4602      	mov	r2, r0
   13398:	460b      	mov	r3, r1
   1339a:	f04f 0000 	mov.w	r0, #0
   1339e:	f04f 0100 	mov.w	r1, #0
   133a2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   133a6:	f004 fb19 	bl	179dc <__aeabi_ddiv>
   133aa:	4602      	mov	r2, r0
   133ac:	460b      	mov	r3, r1
   133ae:	4620      	mov	r0, r4
   133b0:	4629      	mov	r1, r5
   133b2:	f004 f837 	bl	17424 <__adddf3>
   133b6:	4602      	mov	r2, r0
   133b8:	460b      	mov	r3, r1
   133ba:	4610      	mov	r0, r2
   133bc:	4619      	mov	r1, r3
   133be:	f004 fcc5 	bl	17d4c <__aeabi_d2f>
   133c2:	4603      	mov	r3, r0
   133c4:	61bb      	str	r3, [r7, #24]
   133c6:	f24b 235c 	movw	r3, #45660	; 0xb25c
   133ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133ce:	681b      	ldr	r3, [r3, #0]
   133d0:	4618      	mov	r0, r3
   133d2:	f004 f985 	bl	176e0 <__aeabi_f2d>
   133d6:	4604      	mov	r4, r0
   133d8:	460d      	mov	r5, r1
   133da:	69b8      	ldr	r0, [r7, #24]
   133dc:	f004 f980 	bl	176e0 <__aeabi_f2d>
   133e0:	4602      	mov	r2, r0
   133e2:	460b      	mov	r3, r1
   133e4:	4610      	mov	r0, r2
   133e6:	4619      	mov	r1, r3
   133e8:	a3b1      	add	r3, pc, #708	; (adr r3, 136b0 <auto_nav+0x1570>)
   133ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   133ee:	f004 f819 	bl	17424 <__adddf3>
   133f2:	4602      	mov	r2, r0
   133f4:	460b      	mov	r3, r1
   133f6:	4610      	mov	r0, r2
   133f8:	4619      	mov	r1, r3
   133fa:	f002 fa81 	bl	15900 <pp_sin>
   133fe:	4602      	mov	r2, r0
   13400:	460b      	mov	r3, r1
   13402:	4610      	mov	r0, r2
   13404:	4619      	mov	r1, r3
   13406:	f04f 0200 	mov.w	r2, #0
   1340a:	f04f 0300 	mov.w	r3, #0
   1340e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13412:	f004 f9b9 	bl	17788 <__aeabi_dmul>
   13416:	4602      	mov	r2, r0
   13418:	460b      	mov	r3, r1
   1341a:	4620      	mov	r0, r4
   1341c:	4629      	mov	r1, r5
   1341e:	f004 f801 	bl	17424 <__adddf3>
   13422:	4602      	mov	r2, r0
   13424:	460b      	mov	r3, r1
   13426:	4610      	mov	r0, r2
   13428:	4619      	mov	r1, r3
   1342a:	f004 fc8f 	bl	17d4c <__aeabi_d2f>
   1342e:	4606      	mov	r6, r0
   13430:	f24b 2360 	movw	r3, #45664	; 0xb260
   13434:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13438:	681b      	ldr	r3, [r3, #0]
   1343a:	4618      	mov	r0, r3
   1343c:	f004 f950 	bl	176e0 <__aeabi_f2d>
   13440:	4604      	mov	r4, r0
   13442:	460d      	mov	r5, r1
   13444:	69b8      	ldr	r0, [r7, #24]
   13446:	f004 f94b 	bl	176e0 <__aeabi_f2d>
   1344a:	4602      	mov	r2, r0
   1344c:	460b      	mov	r3, r1
   1344e:	4610      	mov	r0, r2
   13450:	4619      	mov	r1, r3
   13452:	f002 fa55 	bl	15900 <pp_sin>
   13456:	4602      	mov	r2, r0
   13458:	460b      	mov	r3, r1
   1345a:	4610      	mov	r0, r2
   1345c:	4619      	mov	r1, r3
   1345e:	f04f 0200 	mov.w	r2, #0
   13462:	f04f 0300 	mov.w	r3, #0
   13466:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1346a:	f004 f98d 	bl	17788 <__aeabi_dmul>
   1346e:	4602      	mov	r2, r0
   13470:	460b      	mov	r3, r1
   13472:	4620      	mov	r0, r4
   13474:	4629      	mov	r1, r5
   13476:	f003 ffd5 	bl	17424 <__adddf3>
   1347a:	4602      	mov	r2, r0
   1347c:	460b      	mov	r3, r1
   1347e:	4610      	mov	r0, r2
   13480:	4619      	mov	r1, r3
   13482:	f004 fc63 	bl	17d4c <__aeabi_d2f>
   13486:	4603      	mov	r3, r0
   13488:	4630      	mov	r0, r6
   1348a:	4619      	mov	r1, r3
   1348c:	f001 f81c 	bl	144c8 <fly_to_xy>
   13490:	69b8      	ldr	r0, [r7, #24]
   13492:	f004 f925 	bl	176e0 <__aeabi_f2d>
   13496:	4602      	mov	r2, r0
   13498:	460b      	mov	r3, r1
   1349a:	a185      	add	r1, pc, #532	; (adr r1, 136b0 <auto_nav+0x1570>)
   1349c:	e9d1 0100 	ldrd	r0, r1, [r1]
   134a0:	f003 ffbe 	bl	17420 <__aeabi_dsub>
   134a4:	4602      	mov	r2, r0
   134a6:	460b      	mov	r3, r1
   134a8:	4610      	mov	r0, r2
   134aa:	4619      	mov	r1, r3
   134ac:	a382      	add	r3, pc, #520	; (adr r3, 136b8 <auto_nav+0x1578>)
   134ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   134b2:	f004 fa93 	bl	179dc <__aeabi_ddiv>
   134b6:	4602      	mov	r2, r0
   134b8:	460b      	mov	r3, r1
   134ba:	4610      	mov	r0, r2
   134bc:	4619      	mov	r1, r3
   134be:	f04f 0200 	mov.w	r2, #0
   134c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   134c6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   134ca:	f004 f95d 	bl	17788 <__aeabi_dmul>
   134ce:	4602      	mov	r2, r0
   134d0:	460b      	mov	r3, r1
   134d2:	4610      	mov	r0, r2
   134d4:	4619      	mov	r1, r3
   134d6:	f004 fc39 	bl	17d4c <__aeabi_d2f>
   134da:	4602      	mov	r2, r0
   134dc:	f24b 232c 	movw	r3, #45612	; 0xb22c
   134e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134e4:	601a      	str	r2, [r3, #0]
   134e6:	e012      	b.n	1350e <auto_nav+0x13ce>
   134e8:	f24b 232c 	movw	r3, #45612	; 0xb22c
   134ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134f0:	681b      	ldr	r3, [r3, #0]
   134f2:	4618      	mov	r0, r3
   134f4:	f04f 0100 	mov.w	r1, #0
   134f8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   134fc:	f004 fc7c 	bl	17df8 <__addsf3>
   13500:	4603      	mov	r3, r0
   13502:	461a      	mov	r2, r3
   13504:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1350c:	601a      	str	r2, [r3, #0]
   1350e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13516:	681b      	ldr	r3, [r3, #0]
   13518:	4618      	mov	r0, r3
   1351a:	f04f 0100 	mov.w	r1, #0
   1351e:	f004 ff11 	bl	18344 <__aeabi_fcmplt>
   13522:	4603      	mov	r3, r0
   13524:	2b00      	cmp	r3, #0
   13526:	d1df      	bne.n	134e8 <auto_nav+0x13a8>
   13528:	e012      	b.n	13550 <auto_nav+0x1410>
   1352a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1352e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13532:	681b      	ldr	r3, [r3, #0]
   13534:	4618      	mov	r0, r3
   13536:	f04f 0100 	mov.w	r1, #0
   1353a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1353e:	f004 fc59 	bl	17df4 <__aeabi_fsub>
   13542:	4603      	mov	r3, r0
   13544:	461a      	mov	r2, r3
   13546:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1354a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1354e:	601a      	str	r2, [r3, #0]
   13550:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13558:	681b      	ldr	r3, [r3, #0]
   1355a:	4618      	mov	r0, r3
   1355c:	f04f 0100 	mov.w	r1, #0
   13560:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13564:	f004 ff02 	bl	1836c <__aeabi_fcmpge>
   13568:	4603      	mov	r3, r0
   1356a:	2b00      	cmp	r3, #0
   1356c:	d1dd      	bne.n	1352a <auto_nav+0x13ea>
        return;
   1356e:	f000 beb9 	b.w	142e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13572:	f24b 2310 	movw	r3, #45584	; 0xb210
   13576:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1357a:	781b      	ldrb	r3, [r3, #0]
   1357c:	2b01      	cmp	r3, #1
   1357e:	f040 86b1 	bne.w	142e4 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13582:	f24b 2310 	movw	r3, #45584	; 0xb210
   13586:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1358a:	2201      	movs	r2, #1
   1358c:	701a      	strb	r2, [r3, #0]
        NextBlock()
   1358e:	f24b 2311 	movw	r3, #45585	; 0xb211
   13592:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13596:	781b      	ldrb	r3, [r3, #0]
   13598:	3301      	adds	r3, #1
   1359a:	b2da      	uxtb	r2, r3
   1359c:	f24b 2311 	movw	r3, #45585	; 0xb211
   135a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135a4:	701a      	strb	r2, [r3, #0]
   135a6:	f24b 2310 	movw	r3, #45584	; 0xb210
   135aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135ae:	2200      	movs	r2, #0
   135b0:	701a      	strb	r2, [r3, #0]
   135b2:	f24b 2326 	movw	r3, #45606	; 0xb226
   135b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135ba:	2200      	movs	r2, #0
   135bc:	801a      	strh	r2, [r3, #0]
   135be:	f24b 436c 	movw	r3, #46188	; 0xb46c
   135c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135c6:	681a      	ldr	r2, [r3, #0]
   135c8:	f24b 2314 	movw	r3, #45588	; 0xb214
   135cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135d0:	601a      	str	r2, [r3, #0]
   135d2:	f24b 4370 	movw	r3, #46192	; 0xb470
   135d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135da:	681a      	ldr	r2, [r3, #0]
   135dc:	f24b 2318 	movw	r3, #45592	; 0xb218
   135e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135e4:	601a      	str	r2, [r3, #0]
   135e6:	f24b 2324 	movw	r3, #45604	; 0xb224
   135ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135ee:	2200      	movs	r2, #0
   135f0:	801a      	strh	r2, [r3, #0]
   135f2:	f24b 2328 	movw	r3, #45608	; 0xb228
   135f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135fa:	f04f 0200 	mov.w	r2, #0
   135fe:	601a      	str	r2, [r3, #0]
   13600:	f000 be70 	b.w	142e4 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13604:	f24b 2311 	movw	r3, #45585	; 0xb211
   13608:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1360c:	781b      	ldrb	r3, [r3, #0]
   1360e:	2b04      	cmp	r3, #4
   13610:	f040 8202 	bne.w	13a18 <auto_nav+0x18d8>
{
    nav_block = 4;
   13614:	f24b 2311 	movw	r3, #45585	; 0xb211
   13618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1361c:	2204      	movs	r2, #4
   1361e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13620:	f64a 63a0 	movw	r3, #44704	; 0xaea0
   13624:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13628:	781b      	ldrb	r3, [r3, #0]
   1362a:	2b00      	cmp	r3, #0
   1362c:	d007      	beq.n	1363e <auto_nav+0x14fe>
   1362e:	f64a 63a0 	movw	r3, #44704	; 0xaea0
   13632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13636:	2200      	movs	r2, #0
   13638:	701a      	strb	r2, [r3, #0]
   1363a:	2301      	movs	r3, #1
   1363c:	e000      	b.n	13640 <auto_nav+0x1500>
   1363e:	2300      	movs	r3, #0
   13640:	2b00      	cmp	r3, #0
   13642:	d03d      	beq.n	136c0 <auto_nav+0x1580>
   13644:	f24b 2311 	movw	r3, #45585	; 0xb211
   13648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1364c:	2205      	movs	r2, #5
   1364e:	701a      	strb	r2, [r3, #0]
   13650:	f24b 2310 	movw	r3, #45584	; 0xb210
   13654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13658:	2200      	movs	r2, #0
   1365a:	701a      	strb	r2, [r3, #0]
   1365c:	f24b 2326 	movw	r3, #45606	; 0xb226
   13660:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13664:	2200      	movs	r2, #0
   13666:	801a      	strh	r2, [r3, #0]
   13668:	f24b 436c 	movw	r3, #46188	; 0xb46c
   1366c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13670:	681a      	ldr	r2, [r3, #0]
   13672:	f24b 2314 	movw	r3, #45588	; 0xb214
   13676:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1367a:	601a      	str	r2, [r3, #0]
   1367c:	f24b 4370 	movw	r3, #46192	; 0xb470
   13680:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13684:	681a      	ldr	r2, [r3, #0]
   13686:	f24b 2318 	movw	r3, #45592	; 0xb218
   1368a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1368e:	601a      	str	r2, [r3, #0]
   13690:	f24b 2324 	movw	r3, #45604	; 0xb224
   13694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13698:	2200      	movs	r2, #0
   1369a:	801a      	strh	r2, [r3, #0]
   1369c:	f24b 2328 	movw	r3, #45608	; 0xb228
   136a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136a4:	f04f 0200 	mov.w	r2, #0
   136a8:	601a      	str	r2, [r3, #0]
   136aa:	f000 be1b 	b.w	142e4 <auto_nav+0x21a4>
   136ae:	bf00      	nop
   136b0:	54442d18 	.word	0x54442d18
   136b4:	3ff921fb 	.word	0x3ff921fb
   136b8:	54442d18 	.word	0x54442d18
   136bc:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   136c0:	f24b 2310 	movw	r3, #45584	; 0xb210
   136c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136c8:	781b      	ldrb	r3, [r3, #0]
   136ca:	2b00      	cmp	r3, #0
   136cc:	f040 815b 	bne.w	13986 <auto_nav+0x1846>
    {
        nav_stage = 0;
   136d0:	f24b 2310 	movw	r3, #45584	; 0xb210
   136d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136d8:	2200      	movs	r2, #0
   136da:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   136dc:	f64a 639f 	movw	r3, #44703	; 0xae9f
   136e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136e4:	2200      	movs	r2, #0
   136e6:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   136e8:	f24b 233c 	movw	r3, #45628	; 0xb23c
   136ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136f0:	f04f 0200 	mov.w	r2, #0
   136f4:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   136f6:	f64a 639d 	movw	r3, #44701	; 0xae9d
   136fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136fe:	2203      	movs	r2, #3
   13700:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13702:	f240 4328 	movw	r3, #1064	; 0x428
   13706:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1370a:	689a      	ldr	r2, [r3, #8]
   1370c:	f240 4324 	movw	r3, #1060	; 0x424
   13710:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13714:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13716:	f24b 2304 	movw	r3, #45572	; 0xb204
   1371a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1371e:	f04f 0200 	mov.w	r2, #0
   13722:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13724:	f24b 4370 	movw	r3, #46192	; 0xb470
   13728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1372c:	681a      	ldr	r2, [r3, #0]
   1372e:	f240 4328 	movw	r3, #1064	; 0x428
   13732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13736:	685b      	ldr	r3, [r3, #4]
   13738:	4610      	mov	r0, r2
   1373a:	4619      	mov	r1, r3
   1373c:	f004 fb5a 	bl	17df4 <__aeabi_fsub>
   13740:	4603      	mov	r3, r0
   13742:	4618      	mov	r0, r3
   13744:	f003 ffcc 	bl	176e0 <__aeabi_f2d>
   13748:	4604      	mov	r4, r0
   1374a:	460d      	mov	r5, r1
   1374c:	f24b 436c 	movw	r3, #46188	; 0xb46c
   13750:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13754:	681a      	ldr	r2, [r3, #0]
   13756:	f240 4328 	movw	r3, #1064	; 0x428
   1375a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1375e:	681b      	ldr	r3, [r3, #0]
   13760:	4610      	mov	r0, r2
   13762:	4619      	mov	r1, r3
   13764:	f004 fb46 	bl	17df4 <__aeabi_fsub>
   13768:	4603      	mov	r3, r0
   1376a:	4618      	mov	r0, r3
   1376c:	f003 ffb8 	bl	176e0 <__aeabi_f2d>
   13770:	4602      	mov	r2, r0
   13772:	460b      	mov	r3, r1
   13774:	4620      	mov	r0, r4
   13776:	4629      	mov	r1, r5
   13778:	f002 f802 	bl	15780 <pp_atan2>
   1377c:	4602      	mov	r2, r0
   1377e:	460b      	mov	r3, r1
   13780:	4610      	mov	r0, r2
   13782:	4619      	mov	r1, r3
   13784:	f004 fae2 	bl	17d4c <__aeabi_d2f>
   13788:	4603      	mov	r3, r0
   1378a:	617b      	str	r3, [r7, #20]
   1378c:	6978      	ldr	r0, [r7, #20]
   1378e:	f003 ffa7 	bl	176e0 <__aeabi_f2d>
   13792:	4604      	mov	r4, r0
   13794:	460d      	mov	r5, r1
   13796:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   1379a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1379e:	681b      	ldr	r3, [r3, #0]
   137a0:	4618      	mov	r0, r3
   137a2:	f04f 0100 	mov.w	r1, #0
   137a6:	f2cc 3116 	movt	r1, #49942	; 0xc316
   137aa:	f004 fc2d 	bl	18008 <__aeabi_fmul>
   137ae:	4603      	mov	r3, r0
   137b0:	4618      	mov	r0, r3
   137b2:	f003 ff95 	bl	176e0 <__aeabi_f2d>
   137b6:	4602      	mov	r2, r0
   137b8:	460b      	mov	r3, r1
   137ba:	f04f 0000 	mov.w	r0, #0
   137be:	f04f 0100 	mov.w	r1, #0
   137c2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   137c6:	f004 f909 	bl	179dc <__aeabi_ddiv>
   137ca:	4602      	mov	r2, r0
   137cc:	460b      	mov	r3, r1
   137ce:	4620      	mov	r0, r4
   137d0:	4629      	mov	r1, r5
   137d2:	f003 fe27 	bl	17424 <__adddf3>
   137d6:	4602      	mov	r2, r0
   137d8:	460b      	mov	r3, r1
   137da:	4610      	mov	r0, r2
   137dc:	4619      	mov	r1, r3
   137de:	f004 fab5 	bl	17d4c <__aeabi_d2f>
   137e2:	4603      	mov	r3, r0
   137e4:	613b      	str	r3, [r7, #16]
   137e6:	f240 4328 	movw	r3, #1064	; 0x428
   137ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137ee:	681b      	ldr	r3, [r3, #0]
   137f0:	4618      	mov	r0, r3
   137f2:	f003 ff75 	bl	176e0 <__aeabi_f2d>
   137f6:	4604      	mov	r4, r0
   137f8:	460d      	mov	r5, r1
   137fa:	6938      	ldr	r0, [r7, #16]
   137fc:	f003 ff70 	bl	176e0 <__aeabi_f2d>
   13800:	4602      	mov	r2, r0
   13802:	460b      	mov	r3, r1
   13804:	4610      	mov	r0, r2
   13806:	4619      	mov	r1, r3
   13808:	a3af      	add	r3, pc, #700	; (adr r3, 13ac8 <auto_nav+0x1988>)
   1380a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1380e:	f003 fe09 	bl	17424 <__adddf3>
   13812:	4602      	mov	r2, r0
   13814:	460b      	mov	r3, r1
   13816:	4610      	mov	r0, r2
   13818:	4619      	mov	r1, r3
   1381a:	f002 f871 	bl	15900 <pp_sin>
   1381e:	4602      	mov	r2, r0
   13820:	460b      	mov	r3, r1
   13822:	4610      	mov	r0, r2
   13824:	4619      	mov	r1, r3
   13826:	a3aa      	add	r3, pc, #680	; (adr r3, 13ad0 <auto_nav+0x1990>)
   13828:	e9d3 2300 	ldrd	r2, r3, [r3]
   1382c:	f003 ffac 	bl	17788 <__aeabi_dmul>
   13830:	4602      	mov	r2, r0
   13832:	460b      	mov	r3, r1
   13834:	4620      	mov	r0, r4
   13836:	4629      	mov	r1, r5
   13838:	f003 fdf4 	bl	17424 <__adddf3>
   1383c:	4602      	mov	r2, r0
   1383e:	460b      	mov	r3, r1
   13840:	4610      	mov	r0, r2
   13842:	4619      	mov	r1, r3
   13844:	f004 fa82 	bl	17d4c <__aeabi_d2f>
   13848:	4606      	mov	r6, r0
   1384a:	f240 4328 	movw	r3, #1064	; 0x428
   1384e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13852:	685b      	ldr	r3, [r3, #4]
   13854:	4618      	mov	r0, r3
   13856:	f003 ff43 	bl	176e0 <__aeabi_f2d>
   1385a:	4604      	mov	r4, r0
   1385c:	460d      	mov	r5, r1
   1385e:	6938      	ldr	r0, [r7, #16]
   13860:	f003 ff3e 	bl	176e0 <__aeabi_f2d>
   13864:	4602      	mov	r2, r0
   13866:	460b      	mov	r3, r1
   13868:	4610      	mov	r0, r2
   1386a:	4619      	mov	r1, r3
   1386c:	f002 f848 	bl	15900 <pp_sin>
   13870:	4602      	mov	r2, r0
   13872:	460b      	mov	r3, r1
   13874:	4610      	mov	r0, r2
   13876:	4619      	mov	r1, r3
   13878:	a395      	add	r3, pc, #596	; (adr r3, 13ad0 <auto_nav+0x1990>)
   1387a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1387e:	f003 ff83 	bl	17788 <__aeabi_dmul>
   13882:	4602      	mov	r2, r0
   13884:	460b      	mov	r3, r1
   13886:	4620      	mov	r0, r4
   13888:	4629      	mov	r1, r5
   1388a:	f003 fdcb 	bl	17424 <__adddf3>
   1388e:	4602      	mov	r2, r0
   13890:	460b      	mov	r3, r1
   13892:	4610      	mov	r0, r2
   13894:	4619      	mov	r1, r3
   13896:	f004 fa59 	bl	17d4c <__aeabi_d2f>
   1389a:	4603      	mov	r3, r0
   1389c:	4630      	mov	r0, r6
   1389e:	4619      	mov	r1, r3
   138a0:	f000 fe12 	bl	144c8 <fly_to_xy>
   138a4:	6938      	ldr	r0, [r7, #16]
   138a6:	f003 ff1b 	bl	176e0 <__aeabi_f2d>
   138aa:	4602      	mov	r2, r0
   138ac:	460b      	mov	r3, r1
   138ae:	a186      	add	r1, pc, #536	; (adr r1, 13ac8 <auto_nav+0x1988>)
   138b0:	e9d1 0100 	ldrd	r0, r1, [r1]
   138b4:	f003 fdb4 	bl	17420 <__aeabi_dsub>
   138b8:	4602      	mov	r2, r0
   138ba:	460b      	mov	r3, r1
   138bc:	4610      	mov	r0, r2
   138be:	4619      	mov	r1, r3
   138c0:	a385      	add	r3, pc, #532	; (adr r3, 13ad8 <auto_nav+0x1998>)
   138c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   138c6:	f004 f889 	bl	179dc <__aeabi_ddiv>
   138ca:	4602      	mov	r2, r0
   138cc:	460b      	mov	r3, r1
   138ce:	4610      	mov	r0, r2
   138d0:	4619      	mov	r1, r3
   138d2:	f04f 0200 	mov.w	r2, #0
   138d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   138da:	f2c4 0366 	movt	r3, #16486	; 0x4066
   138de:	f003 ff53 	bl	17788 <__aeabi_dmul>
   138e2:	4602      	mov	r2, r0
   138e4:	460b      	mov	r3, r1
   138e6:	4610      	mov	r0, r2
   138e8:	4619      	mov	r1, r3
   138ea:	f004 fa2f 	bl	17d4c <__aeabi_d2f>
   138ee:	4602      	mov	r2, r0
   138f0:	f24b 232c 	movw	r3, #45612	; 0xb22c
   138f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138f8:	601a      	str	r2, [r3, #0]
   138fa:	e012      	b.n	13922 <auto_nav+0x17e2>
   138fc:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13900:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13904:	681b      	ldr	r3, [r3, #0]
   13906:	4618      	mov	r0, r3
   13908:	f04f 0100 	mov.w	r1, #0
   1390c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13910:	f004 fa72 	bl	17df8 <__addsf3>
   13914:	4603      	mov	r3, r0
   13916:	461a      	mov	r2, r3
   13918:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1391c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13920:	601a      	str	r2, [r3, #0]
   13922:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13926:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1392a:	681b      	ldr	r3, [r3, #0]
   1392c:	4618      	mov	r0, r3
   1392e:	f04f 0100 	mov.w	r1, #0
   13932:	f004 fd07 	bl	18344 <__aeabi_fcmplt>
   13936:	4603      	mov	r3, r0
   13938:	2b00      	cmp	r3, #0
   1393a:	d1df      	bne.n	138fc <auto_nav+0x17bc>
   1393c:	e012      	b.n	13964 <auto_nav+0x1824>
   1393e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13942:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13946:	681b      	ldr	r3, [r3, #0]
   13948:	4618      	mov	r0, r3
   1394a:	f04f 0100 	mov.w	r1, #0
   1394e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13952:	f004 fa4f 	bl	17df4 <__aeabi_fsub>
   13956:	4603      	mov	r3, r0
   13958:	461a      	mov	r2, r3
   1395a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1395e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13962:	601a      	str	r2, [r3, #0]
   13964:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1396c:	681b      	ldr	r3, [r3, #0]
   1396e:	4618      	mov	r0, r3
   13970:	f04f 0100 	mov.w	r1, #0
   13974:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13978:	f004 fcf8 	bl	1836c <__aeabi_fcmpge>
   1397c:	4603      	mov	r3, r0
   1397e:	2b00      	cmp	r3, #0
   13980:	d1dd      	bne.n	1393e <auto_nav+0x17fe>
        return;
   13982:	f000 bcaf 	b.w	142e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13986:	f24b 2310 	movw	r3, #45584	; 0xb210
   1398a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1398e:	781b      	ldrb	r3, [r3, #0]
   13990:	2b01      	cmp	r3, #1
   13992:	f040 84a7 	bne.w	142e4 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13996:	f24b 2310 	movw	r3, #45584	; 0xb210
   1399a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1399e:	2201      	movs	r2, #1
   139a0:	701a      	strb	r2, [r3, #0]
        NextBlock()
   139a2:	f24b 2311 	movw	r3, #45585	; 0xb211
   139a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139aa:	781b      	ldrb	r3, [r3, #0]
   139ac:	3301      	adds	r3, #1
   139ae:	b2da      	uxtb	r2, r3
   139b0:	f24b 2311 	movw	r3, #45585	; 0xb211
   139b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139b8:	701a      	strb	r2, [r3, #0]
   139ba:	f24b 2310 	movw	r3, #45584	; 0xb210
   139be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139c2:	2200      	movs	r2, #0
   139c4:	701a      	strb	r2, [r3, #0]
   139c6:	f24b 2326 	movw	r3, #45606	; 0xb226
   139ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139ce:	2200      	movs	r2, #0
   139d0:	801a      	strh	r2, [r3, #0]
   139d2:	f24b 436c 	movw	r3, #46188	; 0xb46c
   139d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139da:	681a      	ldr	r2, [r3, #0]
   139dc:	f24b 2314 	movw	r3, #45588	; 0xb214
   139e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139e4:	601a      	str	r2, [r3, #0]
   139e6:	f24b 4370 	movw	r3, #46192	; 0xb470
   139ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139ee:	681a      	ldr	r2, [r3, #0]
   139f0:	f24b 2318 	movw	r3, #45592	; 0xb218
   139f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139f8:	601a      	str	r2, [r3, #0]
   139fa:	f24b 2324 	movw	r3, #45604	; 0xb224
   139fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a02:	2200      	movs	r2, #0
   13a04:	801a      	strh	r2, [r3, #0]
   13a06:	f24b 2328 	movw	r3, #45608	; 0xb228
   13a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a0e:	f04f 0200 	mov.w	r2, #0
   13a12:	601a      	str	r2, [r3, #0]
   13a14:	f000 bc66 	b.w	142e4 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13a18:	f24b 2311 	movw	r3, #45585	; 0xb211
   13a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a20:	781b      	ldrb	r3, [r3, #0]
   13a22:	2b05      	cmp	r3, #5
   13a24:	f040 845e 	bne.w	142e4 <auto_nav+0x21a4>
{
    nav_block = 5;
   13a28:	f24b 2311 	movw	r3, #45585	; 0xb211
   13a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a30:	2205      	movs	r2, #5
   13a32:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13a34:	f64a 63a0 	movw	r3, #44704	; 0xaea0
   13a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a3c:	781b      	ldrb	r3, [r3, #0]
   13a3e:	2b00      	cmp	r3, #0
   13a40:	d007      	beq.n	13a52 <auto_nav+0x1912>
   13a42:	f64a 63a0 	movw	r3, #44704	; 0xaea0
   13a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a4a:	2200      	movs	r2, #0
   13a4c:	701a      	strb	r2, [r3, #0]
   13a4e:	2301      	movs	r3, #1
   13a50:	e000      	b.n	13a54 <auto_nav+0x1914>
   13a52:	2300      	movs	r3, #0
   13a54:	2b00      	cmp	r3, #0
   13a56:	d043      	beq.n	13ae0 <auto_nav+0x19a0>
   13a58:	f24b 2311 	movw	r3, #45585	; 0xb211
   13a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a60:	2201      	movs	r2, #1
   13a62:	701a      	strb	r2, [r3, #0]
   13a64:	f24b 2310 	movw	r3, #45584	; 0xb210
   13a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a6c:	2200      	movs	r2, #0
   13a6e:	701a      	strb	r2, [r3, #0]
   13a70:	f24b 2326 	movw	r3, #45606	; 0xb226
   13a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a78:	2200      	movs	r2, #0
   13a7a:	801a      	strh	r2, [r3, #0]
   13a7c:	f24b 436c 	movw	r3, #46188	; 0xb46c
   13a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a84:	681a      	ldr	r2, [r3, #0]
   13a86:	f24b 2314 	movw	r3, #45588	; 0xb214
   13a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a8e:	601a      	str	r2, [r3, #0]
   13a90:	f24b 4370 	movw	r3, #46192	; 0xb470
   13a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a98:	681a      	ldr	r2, [r3, #0]
   13a9a:	f24b 2318 	movw	r3, #45592	; 0xb218
   13a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aa2:	601a      	str	r2, [r3, #0]
   13aa4:	f24b 2324 	movw	r3, #45604	; 0xb224
   13aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aac:	2200      	movs	r2, #0
   13aae:	801a      	strh	r2, [r3, #0]
   13ab0:	f24b 2328 	movw	r3, #45608	; 0xb228
   13ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ab8:	f04f 0200 	mov.w	r2, #0
   13abc:	601a      	str	r2, [r3, #0]
   13abe:	f000 bc11 	b.w	142e4 <auto_nav+0x21a4>
   13ac2:	bf00      	nop
   13ac4:	f3af 8000 	nop.w
   13ac8:	54442d18 	.word	0x54442d18
   13acc:	3ff921fb 	.word	0x3ff921fb
   13ad0:	00000000 	.word	0x00000000
   13ad4:	4062c000 	.word	0x4062c000
   13ad8:	54442d18 	.word	0x54442d18
   13adc:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13ae0:	f24b 2310 	movw	r3, #45584	; 0xb210
   13ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ae8:	781b      	ldrb	r3, [r3, #0]
   13aea:	2b00      	cmp	r3, #0
   13aec:	d133      	bne.n	13b56 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13aee:	f24b 2310 	movw	r3, #45584	; 0xb210
   13af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13af6:	2200      	movs	r2, #0
   13af8:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13afa:	f24b 2310 	movw	r3, #45584	; 0xb210
   13afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b02:	781b      	ldrb	r3, [r3, #0]
   13b04:	3301      	adds	r3, #1
   13b06:	b2da      	uxtb	r2, r3
   13b08:	f24b 2310 	movw	r3, #45584	; 0xb210
   13b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b10:	701a      	strb	r2, [r3, #0]
   13b12:	f24b 436c 	movw	r3, #46188	; 0xb46c
   13b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b1a:	681a      	ldr	r2, [r3, #0]
   13b1c:	f24b 2314 	movw	r3, #45588	; 0xb214
   13b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b24:	601a      	str	r2, [r3, #0]
   13b26:	f24b 4370 	movw	r3, #46192	; 0xb470
   13b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b2e:	681a      	ldr	r2, [r3, #0]
   13b30:	f24b 2318 	movw	r3, #45592	; 0xb218
   13b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b38:	601a      	str	r2, [r3, #0]
   13b3a:	f24b 2324 	movw	r3, #45604	; 0xb224
   13b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b42:	2200      	movs	r2, #0
   13b44:	801a      	strh	r2, [r3, #0]
   13b46:	f24b 2328 	movw	r3, #45608	; 0xb228
   13b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b4e:	f04f 0200 	mov.w	r2, #0
   13b52:	601a      	str	r2, [r3, #0]
   13b54:	e3c6      	b.n	142e4 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13b56:	f24b 2310 	movw	r3, #45584	; 0xb210
   13b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b5e:	781b      	ldrb	r3, [r3, #0]
   13b60:	2b01      	cmp	r3, #1
   13b62:	f040 81b5 	bne.w	13ed0 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13b66:	f24b 2310 	movw	r3, #45584	; 0xb210
   13b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b6e:	2201      	movs	r2, #1
   13b70:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13b72:	f64a 639f 	movw	r3, #44703	; 0xae9f
   13b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b7a:	2200      	movs	r2, #0
   13b7c:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13b7e:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b86:	f04f 0200 	mov.w	r2, #0
   13b8a:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13b8c:	f64a 639d 	movw	r3, #44701	; 0xae9d
   13b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b94:	2203      	movs	r2, #3
   13b96:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13b98:	f240 4328 	movw	r3, #1064	; 0x428
   13b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ba0:	695a      	ldr	r2, [r3, #20]
   13ba2:	f240 4324 	movw	r3, #1060	; 0x424
   13ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13baa:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13bac:	f24b 2304 	movw	r3, #45572	; 0xb204
   13bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bb4:	f04f 0200 	mov.w	r2, #0
   13bb8:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13bba:	f24b 4370 	movw	r3, #46192	; 0xb470
   13bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bc2:	681a      	ldr	r2, [r3, #0]
   13bc4:	f240 4328 	movw	r3, #1064	; 0x428
   13bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bcc:	691b      	ldr	r3, [r3, #16]
   13bce:	4610      	mov	r0, r2
   13bd0:	4619      	mov	r1, r3
   13bd2:	f004 f90f 	bl	17df4 <__aeabi_fsub>
   13bd6:	4603      	mov	r3, r0
   13bd8:	4618      	mov	r0, r3
   13bda:	f003 fd81 	bl	176e0 <__aeabi_f2d>
   13bde:	4604      	mov	r4, r0
   13be0:	460d      	mov	r5, r1
   13be2:	f24b 436c 	movw	r3, #46188	; 0xb46c
   13be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bea:	681a      	ldr	r2, [r3, #0]
   13bec:	f240 4328 	movw	r3, #1064	; 0x428
   13bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bf4:	68db      	ldr	r3, [r3, #12]
   13bf6:	4610      	mov	r0, r2
   13bf8:	4619      	mov	r1, r3
   13bfa:	f004 f8fb 	bl	17df4 <__aeabi_fsub>
   13bfe:	4603      	mov	r3, r0
   13c00:	4618      	mov	r0, r3
   13c02:	f003 fd6d 	bl	176e0 <__aeabi_f2d>
   13c06:	4602      	mov	r2, r0
   13c08:	460b      	mov	r3, r1
   13c0a:	4620      	mov	r0, r4
   13c0c:	4629      	mov	r1, r5
   13c0e:	f001 fdb7 	bl	15780 <pp_atan2>
   13c12:	4602      	mov	r2, r0
   13c14:	460b      	mov	r3, r1
   13c16:	4610      	mov	r0, r2
   13c18:	4619      	mov	r1, r3
   13c1a:	f004 f897 	bl	17d4c <__aeabi_d2f>
   13c1e:	4603      	mov	r3, r0
   13c20:	60fb      	str	r3, [r7, #12]
   13c22:	68f8      	ldr	r0, [r7, #12]
   13c24:	f003 fd5c 	bl	176e0 <__aeabi_f2d>
   13c28:	4604      	mov	r4, r0
   13c2a:	460d      	mov	r5, r1
   13c2c:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   13c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c34:	681b      	ldr	r3, [r3, #0]
   13c36:	4618      	mov	r0, r3
   13c38:	f04f 0100 	mov.w	r1, #0
   13c3c:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13c40:	f004 f9e2 	bl	18008 <__aeabi_fmul>
   13c44:	4603      	mov	r3, r0
   13c46:	4618      	mov	r0, r3
   13c48:	f003 fd4a 	bl	176e0 <__aeabi_f2d>
   13c4c:	4602      	mov	r2, r0
   13c4e:	460b      	mov	r3, r1
   13c50:	f04f 0000 	mov.w	r0, #0
   13c54:	f04f 0100 	mov.w	r1, #0
   13c58:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13c5c:	f003 febe 	bl	179dc <__aeabi_ddiv>
   13c60:	4602      	mov	r2, r0
   13c62:	460b      	mov	r3, r1
   13c64:	4620      	mov	r0, r4
   13c66:	4629      	mov	r1, r5
   13c68:	f003 fbdc 	bl	17424 <__adddf3>
   13c6c:	4602      	mov	r2, r0
   13c6e:	460b      	mov	r3, r1
   13c70:	4610      	mov	r0, r2
   13c72:	4619      	mov	r1, r3
   13c74:	f004 f86a 	bl	17d4c <__aeabi_d2f>
   13c78:	4603      	mov	r3, r0
   13c7a:	60bb      	str	r3, [r7, #8]
   13c7c:	f240 4328 	movw	r3, #1064	; 0x428
   13c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c84:	68db      	ldr	r3, [r3, #12]
   13c86:	4618      	mov	r0, r3
   13c88:	f003 fd2a 	bl	176e0 <__aeabi_f2d>
   13c8c:	4604      	mov	r4, r0
   13c8e:	460d      	mov	r5, r1
   13c90:	68b8      	ldr	r0, [r7, #8]
   13c92:	f003 fd25 	bl	176e0 <__aeabi_f2d>
   13c96:	4602      	mov	r2, r0
   13c98:	460b      	mov	r3, r1
   13c9a:	4610      	mov	r0, r2
   13c9c:	4619      	mov	r1, r3
   13c9e:	a388      	add	r3, pc, #544	; (adr r3, 13ec0 <auto_nav+0x1d80>)
   13ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ca4:	f003 fbbe 	bl	17424 <__adddf3>
   13ca8:	4602      	mov	r2, r0
   13caa:	460b      	mov	r3, r1
   13cac:	4610      	mov	r0, r2
   13cae:	4619      	mov	r1, r3
   13cb0:	f001 fe26 	bl	15900 <pp_sin>
   13cb4:	4602      	mov	r2, r0
   13cb6:	460b      	mov	r3, r1
   13cb8:	4610      	mov	r0, r2
   13cba:	4619      	mov	r1, r3
   13cbc:	f04f 0200 	mov.w	r2, #0
   13cc0:	f04f 0300 	mov.w	r3, #0
   13cc4:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13cc8:	f003 fd5e 	bl	17788 <__aeabi_dmul>
   13ccc:	4602      	mov	r2, r0
   13cce:	460b      	mov	r3, r1
   13cd0:	4620      	mov	r0, r4
   13cd2:	4629      	mov	r1, r5
   13cd4:	f003 fba6 	bl	17424 <__adddf3>
   13cd8:	4602      	mov	r2, r0
   13cda:	460b      	mov	r3, r1
   13cdc:	4610      	mov	r0, r2
   13cde:	4619      	mov	r1, r3
   13ce0:	f004 f834 	bl	17d4c <__aeabi_d2f>
   13ce4:	4606      	mov	r6, r0
   13ce6:	f240 4328 	movw	r3, #1064	; 0x428
   13cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cee:	691b      	ldr	r3, [r3, #16]
   13cf0:	4618      	mov	r0, r3
   13cf2:	f003 fcf5 	bl	176e0 <__aeabi_f2d>
   13cf6:	4604      	mov	r4, r0
   13cf8:	460d      	mov	r5, r1
   13cfa:	68b8      	ldr	r0, [r7, #8]
   13cfc:	f003 fcf0 	bl	176e0 <__aeabi_f2d>
   13d00:	4602      	mov	r2, r0
   13d02:	460b      	mov	r3, r1
   13d04:	4610      	mov	r0, r2
   13d06:	4619      	mov	r1, r3
   13d08:	f001 fdfa 	bl	15900 <pp_sin>
   13d0c:	4602      	mov	r2, r0
   13d0e:	460b      	mov	r3, r1
   13d10:	4610      	mov	r0, r2
   13d12:	4619      	mov	r1, r3
   13d14:	f04f 0200 	mov.w	r2, #0
   13d18:	f04f 0300 	mov.w	r3, #0
   13d1c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13d20:	f003 fd32 	bl	17788 <__aeabi_dmul>
   13d24:	4602      	mov	r2, r0
   13d26:	460b      	mov	r3, r1
   13d28:	4620      	mov	r0, r4
   13d2a:	4629      	mov	r1, r5
   13d2c:	f003 fb7a 	bl	17424 <__adddf3>
   13d30:	4602      	mov	r2, r0
   13d32:	460b      	mov	r3, r1
   13d34:	4610      	mov	r0, r2
   13d36:	4619      	mov	r1, r3
   13d38:	f004 f808 	bl	17d4c <__aeabi_d2f>
   13d3c:	4603      	mov	r3, r0
   13d3e:	4630      	mov	r0, r6
   13d40:	4619      	mov	r1, r3
   13d42:	f000 fbc1 	bl	144c8 <fly_to_xy>
   13d46:	68b8      	ldr	r0, [r7, #8]
   13d48:	f003 fcca 	bl	176e0 <__aeabi_f2d>
   13d4c:	4602      	mov	r2, r0
   13d4e:	460b      	mov	r3, r1
   13d50:	a15b      	add	r1, pc, #364	; (adr r1, 13ec0 <auto_nav+0x1d80>)
   13d52:	e9d1 0100 	ldrd	r0, r1, [r1]
   13d56:	f003 fb63 	bl	17420 <__aeabi_dsub>
   13d5a:	4602      	mov	r2, r0
   13d5c:	460b      	mov	r3, r1
   13d5e:	4610      	mov	r0, r2
   13d60:	4619      	mov	r1, r3
   13d62:	a359      	add	r3, pc, #356	; (adr r3, 13ec8 <auto_nav+0x1d88>)
   13d64:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d68:	f003 fe38 	bl	179dc <__aeabi_ddiv>
   13d6c:	4602      	mov	r2, r0
   13d6e:	460b      	mov	r3, r1
   13d70:	4610      	mov	r0, r2
   13d72:	4619      	mov	r1, r3
   13d74:	f04f 0200 	mov.w	r2, #0
   13d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13d7c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13d80:	f003 fd02 	bl	17788 <__aeabi_dmul>
   13d84:	4602      	mov	r2, r0
   13d86:	460b      	mov	r3, r1
   13d88:	4610      	mov	r0, r2
   13d8a:	4619      	mov	r1, r3
   13d8c:	f003 ffde 	bl	17d4c <__aeabi_d2f>
   13d90:	4602      	mov	r2, r0
   13d92:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d9a:	601a      	str	r2, [r3, #0]
   13d9c:	e012      	b.n	13dc4 <auto_nav+0x1c84>
   13d9e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13da6:	681b      	ldr	r3, [r3, #0]
   13da8:	4618      	mov	r0, r3
   13daa:	f04f 0100 	mov.w	r1, #0
   13dae:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13db2:	f004 f821 	bl	17df8 <__addsf3>
   13db6:	4603      	mov	r3, r0
   13db8:	461a      	mov	r2, r3
   13dba:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dc2:	601a      	str	r2, [r3, #0]
   13dc4:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dcc:	681b      	ldr	r3, [r3, #0]
   13dce:	4618      	mov	r0, r3
   13dd0:	f04f 0100 	mov.w	r1, #0
   13dd4:	f004 fab6 	bl	18344 <__aeabi_fcmplt>
   13dd8:	4603      	mov	r3, r0
   13dda:	2b00      	cmp	r3, #0
   13ddc:	d1df      	bne.n	13d9e <auto_nav+0x1c5e>
   13dde:	e012      	b.n	13e06 <auto_nav+0x1cc6>
   13de0:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13de8:	681b      	ldr	r3, [r3, #0]
   13dea:	4618      	mov	r0, r3
   13dec:	f04f 0100 	mov.w	r1, #0
   13df0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13df4:	f003 fffe 	bl	17df4 <__aeabi_fsub>
   13df8:	4603      	mov	r3, r0
   13dfa:	461a      	mov	r2, r3
   13dfc:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e04:	601a      	str	r2, [r3, #0]
   13e06:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e0e:	681b      	ldr	r3, [r3, #0]
   13e10:	4618      	mov	r0, r3
   13e12:	f04f 0100 	mov.w	r1, #0
   13e16:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e1a:	f004 faa7 	bl	1836c <__aeabi_fcmpge>
   13e1e:	4603      	mov	r3, r0
   13e20:	2b00      	cmp	r3, #0
   13e22:	d1dd      	bne.n	13de0 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   13e24:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e2c:	681b      	ldr	r3, [r3, #0]
   13e2e:	4618      	mov	r0, r3
   13e30:	f04f 0100 	mov.w	r1, #0
   13e34:	f004 faa4 	bl	18380 <__aeabi_fcmpgt>
   13e38:	4603      	mov	r3, r0
   13e3a:	2b00      	cmp	r3, #0
   13e3c:	d100      	bne.n	13e40 <auto_nav+0x1d00>
        return;
   13e3e:	e251      	b.n	142e4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13e40:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e48:	681b      	ldr	r3, [r3, #0]
   13e4a:	4618      	mov	r0, r3
   13e4c:	f04f 0100 	mov.w	r1, #0
   13e50:	f2c4 1120 	movt	r1, #16672	; 0x4120
   13e54:	f004 fa76 	bl	18344 <__aeabi_fcmplt>
   13e58:	4603      	mov	r3, r0
   13e5a:	2b00      	cmp	r3, #0
   13e5c:	d100      	bne.n	13e60 <auto_nav+0x1d20>
        return;
   13e5e:	e241      	b.n	142e4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13e60:	f24b 2310 	movw	r3, #45584	; 0xb210
   13e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e68:	781b      	ldrb	r3, [r3, #0]
   13e6a:	3301      	adds	r3, #1
   13e6c:	b2da      	uxtb	r2, r3
   13e6e:	f24b 2310 	movw	r3, #45584	; 0xb210
   13e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e76:	701a      	strb	r2, [r3, #0]
   13e78:	f24b 436c 	movw	r3, #46188	; 0xb46c
   13e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e80:	681a      	ldr	r2, [r3, #0]
   13e82:	f24b 2314 	movw	r3, #45588	; 0xb214
   13e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e8a:	601a      	str	r2, [r3, #0]
   13e8c:	f24b 4370 	movw	r3, #46192	; 0xb470
   13e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e94:	681a      	ldr	r2, [r3, #0]
   13e96:	f24b 2318 	movw	r3, #45592	; 0xb218
   13e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e9e:	601a      	str	r2, [r3, #0]
   13ea0:	f24b 2324 	movw	r3, #45604	; 0xb224
   13ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ea8:	2200      	movs	r2, #0
   13eaa:	801a      	strh	r2, [r3, #0]
   13eac:	f24b 2328 	movw	r3, #45608	; 0xb228
   13eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eb4:	f04f 0200 	mov.w	r2, #0
   13eb8:	601a      	str	r2, [r3, #0]
   13eba:	e213      	b.n	142e4 <auto_nav+0x21a4>
   13ebc:	f3af 8000 	nop.w
   13ec0:	54442d18 	.word	0x54442d18
   13ec4:	3ff921fb 	.word	0x3ff921fb
   13ec8:	54442d18 	.word	0x54442d18
   13ecc:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   13ed0:	f24b 2310 	movw	r3, #45584	; 0xb210
   13ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ed8:	781b      	ldrb	r3, [r3, #0]
   13eda:	2b02      	cmp	r3, #2
   13edc:	f040 81ad 	bne.w	1423a <auto_nav+0x20fa>
    {
         nav_stage = 2;
   13ee0:	f24b 2310 	movw	r3, #45584	; 0xb210
   13ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ee8:	2202      	movs	r2, #2
   13eea:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   13eec:	f64a 639f 	movw	r3, #44703	; 0xae9f
   13ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ef4:	2200      	movs	r2, #0
   13ef6:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   13ef8:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f00:	f04f 0200 	mov.w	r2, #0
   13f04:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13f06:	f64a 639d 	movw	r3, #44701	; 0xae9d
   13f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f0e:	2203      	movs	r2, #3
   13f10:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   13f12:	f240 4328 	movw	r3, #1064	; 0x428
   13f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13f1c:	f240 4324 	movw	r3, #1060	; 0x424
   13f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f24:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   13f26:	f24b 2304 	movw	r3, #45572	; 0xb204
   13f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f2e:	f04f 0200 	mov.w	r2, #0
   13f32:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   13f34:	f24b 4370 	movw	r3, #46192	; 0xb470
   13f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f3c:	681a      	ldr	r2, [r3, #0]
   13f3e:	f240 4328 	movw	r3, #1064	; 0x428
   13f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13f48:	4610      	mov	r0, r2
   13f4a:	4619      	mov	r1, r3
   13f4c:	f003 ff52 	bl	17df4 <__aeabi_fsub>
   13f50:	4603      	mov	r3, r0
   13f52:	4618      	mov	r0, r3
   13f54:	f003 fbc4 	bl	176e0 <__aeabi_f2d>
   13f58:	4604      	mov	r4, r0
   13f5a:	460d      	mov	r5, r1
   13f5c:	f24b 436c 	movw	r3, #46188	; 0xb46c
   13f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f64:	681a      	ldr	r2, [r3, #0]
   13f66:	f240 4328 	movw	r3, #1064	; 0x428
   13f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13f70:	4610      	mov	r0, r2
   13f72:	4619      	mov	r1, r3
   13f74:	f003 ff3e 	bl	17df4 <__aeabi_fsub>
   13f78:	4603      	mov	r3, r0
   13f7a:	4618      	mov	r0, r3
   13f7c:	f003 fbb0 	bl	176e0 <__aeabi_f2d>
   13f80:	4602      	mov	r2, r0
   13f82:	460b      	mov	r3, r1
   13f84:	4620      	mov	r0, r4
   13f86:	4629      	mov	r1, r5
   13f88:	f001 fbfa 	bl	15780 <pp_atan2>
   13f8c:	4602      	mov	r2, r0
   13f8e:	460b      	mov	r3, r1
   13f90:	4610      	mov	r0, r2
   13f92:	4619      	mov	r1, r3
   13f94:	f003 feda 	bl	17d4c <__aeabi_d2f>
   13f98:	4603      	mov	r3, r0
   13f9a:	607b      	str	r3, [r7, #4]
   13f9c:	6878      	ldr	r0, [r7, #4]
   13f9e:	f003 fb9f 	bl	176e0 <__aeabi_f2d>
   13fa2:	4604      	mov	r4, r0
   13fa4:	460d      	mov	r5, r1
   13fa6:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   13faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fae:	681b      	ldr	r3, [r3, #0]
   13fb0:	4618      	mov	r0, r3
   13fb2:	f04f 0100 	mov.w	r1, #0
   13fb6:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13fba:	f004 f825 	bl	18008 <__aeabi_fmul>
   13fbe:	4603      	mov	r3, r0
   13fc0:	4618      	mov	r0, r3
   13fc2:	f003 fb8d 	bl	176e0 <__aeabi_f2d>
   13fc6:	4602      	mov	r2, r0
   13fc8:	460b      	mov	r3, r1
   13fca:	f04f 0000 	mov.w	r0, #0
   13fce:	f04f 0100 	mov.w	r1, #0
   13fd2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13fd6:	f003 fd01 	bl	179dc <__aeabi_ddiv>
   13fda:	4602      	mov	r2, r0
   13fdc:	460b      	mov	r3, r1
   13fde:	4620      	mov	r0, r4
   13fe0:	4629      	mov	r1, r5
   13fe2:	f003 fa1f 	bl	17424 <__adddf3>
   13fe6:	4602      	mov	r2, r0
   13fe8:	460b      	mov	r3, r1
   13fea:	4610      	mov	r0, r2
   13fec:	4619      	mov	r1, r3
   13fee:	f003 fead 	bl	17d4c <__aeabi_d2f>
   13ff2:	4603      	mov	r3, r0
   13ff4:	603b      	str	r3, [r7, #0]
   13ff6:	f240 4328 	movw	r3, #1064	; 0x428
   13ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14000:	4618      	mov	r0, r3
   14002:	f003 fb6d 	bl	176e0 <__aeabi_f2d>
   14006:	4604      	mov	r4, r0
   14008:	460d      	mov	r5, r1
   1400a:	6838      	ldr	r0, [r7, #0]
   1400c:	f003 fb68 	bl	176e0 <__aeabi_f2d>
   14010:	4602      	mov	r2, r0
   14012:	460b      	mov	r3, r1
   14014:	4610      	mov	r0, r2
   14016:	4619      	mov	r1, r3
   14018:	a3b5      	add	r3, pc, #724	; (adr r3, 142f0 <auto_nav+0x21b0>)
   1401a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1401e:	f003 fa01 	bl	17424 <__adddf3>
   14022:	4602      	mov	r2, r0
   14024:	460b      	mov	r3, r1
   14026:	4610      	mov	r0, r2
   14028:	4619      	mov	r1, r3
   1402a:	f001 fc69 	bl	15900 <pp_sin>
   1402e:	4602      	mov	r2, r0
   14030:	460b      	mov	r3, r1
   14032:	4610      	mov	r0, r2
   14034:	4619      	mov	r1, r3
   14036:	f04f 0200 	mov.w	r2, #0
   1403a:	f04f 0300 	mov.w	r3, #0
   1403e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14042:	f003 fba1 	bl	17788 <__aeabi_dmul>
   14046:	4602      	mov	r2, r0
   14048:	460b      	mov	r3, r1
   1404a:	4620      	mov	r0, r4
   1404c:	4629      	mov	r1, r5
   1404e:	f003 f9e9 	bl	17424 <__adddf3>
   14052:	4602      	mov	r2, r0
   14054:	460b      	mov	r3, r1
   14056:	4610      	mov	r0, r2
   14058:	4619      	mov	r1, r3
   1405a:	f003 fe77 	bl	17d4c <__aeabi_d2f>
   1405e:	4606      	mov	r6, r0
   14060:	f240 4328 	movw	r3, #1064	; 0x428
   14064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1406a:	4618      	mov	r0, r3
   1406c:	f003 fb38 	bl	176e0 <__aeabi_f2d>
   14070:	4604      	mov	r4, r0
   14072:	460d      	mov	r5, r1
   14074:	6838      	ldr	r0, [r7, #0]
   14076:	f003 fb33 	bl	176e0 <__aeabi_f2d>
   1407a:	4602      	mov	r2, r0
   1407c:	460b      	mov	r3, r1
   1407e:	4610      	mov	r0, r2
   14080:	4619      	mov	r1, r3
   14082:	f001 fc3d 	bl	15900 <pp_sin>
   14086:	4602      	mov	r2, r0
   14088:	460b      	mov	r3, r1
   1408a:	4610      	mov	r0, r2
   1408c:	4619      	mov	r1, r3
   1408e:	f04f 0200 	mov.w	r2, #0
   14092:	f04f 0300 	mov.w	r3, #0
   14096:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1409a:	f003 fb75 	bl	17788 <__aeabi_dmul>
   1409e:	4602      	mov	r2, r0
   140a0:	460b      	mov	r3, r1
   140a2:	4620      	mov	r0, r4
   140a4:	4629      	mov	r1, r5
   140a6:	f003 f9bd 	bl	17424 <__adddf3>
   140aa:	4602      	mov	r2, r0
   140ac:	460b      	mov	r3, r1
   140ae:	4610      	mov	r0, r2
   140b0:	4619      	mov	r1, r3
   140b2:	f003 fe4b 	bl	17d4c <__aeabi_d2f>
   140b6:	4603      	mov	r3, r0
   140b8:	4630      	mov	r0, r6
   140ba:	4619      	mov	r1, r3
   140bc:	f000 fa04 	bl	144c8 <fly_to_xy>
   140c0:	6838      	ldr	r0, [r7, #0]
   140c2:	f003 fb0d 	bl	176e0 <__aeabi_f2d>
   140c6:	4602      	mov	r2, r0
   140c8:	460b      	mov	r3, r1
   140ca:	a189      	add	r1, pc, #548	; (adr r1, 142f0 <auto_nav+0x21b0>)
   140cc:	e9d1 0100 	ldrd	r0, r1, [r1]
   140d0:	f003 f9a6 	bl	17420 <__aeabi_dsub>
   140d4:	4602      	mov	r2, r0
   140d6:	460b      	mov	r3, r1
   140d8:	4610      	mov	r0, r2
   140da:	4619      	mov	r1, r3
   140dc:	a386      	add	r3, pc, #536	; (adr r3, 142f8 <auto_nav+0x21b8>)
   140de:	e9d3 2300 	ldrd	r2, r3, [r3]
   140e2:	f003 fc7b 	bl	179dc <__aeabi_ddiv>
   140e6:	4602      	mov	r2, r0
   140e8:	460b      	mov	r3, r1
   140ea:	4610      	mov	r0, r2
   140ec:	4619      	mov	r1, r3
   140ee:	f04f 0200 	mov.w	r2, #0
   140f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   140f6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   140fa:	f003 fb45 	bl	17788 <__aeabi_dmul>
   140fe:	4602      	mov	r2, r0
   14100:	460b      	mov	r3, r1
   14102:	4610      	mov	r0, r2
   14104:	4619      	mov	r1, r3
   14106:	f003 fe21 	bl	17d4c <__aeabi_d2f>
   1410a:	4602      	mov	r2, r0
   1410c:	f24b 232c 	movw	r3, #45612	; 0xb22c
   14110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14114:	601a      	str	r2, [r3, #0]
   14116:	e012      	b.n	1413e <auto_nav+0x1ffe>
   14118:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1411c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14120:	681b      	ldr	r3, [r3, #0]
   14122:	4618      	mov	r0, r3
   14124:	f04f 0100 	mov.w	r1, #0
   14128:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1412c:	f003 fe64 	bl	17df8 <__addsf3>
   14130:	4603      	mov	r3, r0
   14132:	461a      	mov	r2, r3
   14134:	f24b 232c 	movw	r3, #45612	; 0xb22c
   14138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1413c:	601a      	str	r2, [r3, #0]
   1413e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   14142:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14146:	681b      	ldr	r3, [r3, #0]
   14148:	4618      	mov	r0, r3
   1414a:	f04f 0100 	mov.w	r1, #0
   1414e:	f004 f8f9 	bl	18344 <__aeabi_fcmplt>
   14152:	4603      	mov	r3, r0
   14154:	2b00      	cmp	r3, #0
   14156:	d1df      	bne.n	14118 <auto_nav+0x1fd8>
   14158:	e012      	b.n	14180 <auto_nav+0x2040>
   1415a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1415e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14162:	681b      	ldr	r3, [r3, #0]
   14164:	4618      	mov	r0, r3
   14166:	f04f 0100 	mov.w	r1, #0
   1416a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1416e:	f003 fe41 	bl	17df4 <__aeabi_fsub>
   14172:	4603      	mov	r3, r0
   14174:	461a      	mov	r2, r3
   14176:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1417a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1417e:	601a      	str	r2, [r3, #0]
   14180:	f24b 232c 	movw	r3, #45612	; 0xb22c
   14184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14188:	681b      	ldr	r3, [r3, #0]
   1418a:	4618      	mov	r0, r3
   1418c:	f04f 0100 	mov.w	r1, #0
   14190:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14194:	f004 f8ea 	bl	1836c <__aeabi_fcmpge>
   14198:	4603      	mov	r3, r0
   1419a:	2b00      	cmp	r3, #0
   1419c:	d1dd      	bne.n	1415a <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   1419e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   141a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141a6:	681b      	ldr	r3, [r3, #0]
   141a8:	4618      	mov	r0, r3
   141aa:	f04f 0100 	mov.w	r1, #0
   141ae:	f2c4 3134 	movt	r1, #17204	; 0x4334
   141b2:	f004 f8e5 	bl	18380 <__aeabi_fcmpgt>
   141b6:	4603      	mov	r3, r0
   141b8:	2b00      	cmp	r3, #0
   141ba:	d100      	bne.n	141be <auto_nav+0x207e>
          return;
   141bc:	e092      	b.n	142e4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   141be:	f24b 232c 	movw	r3, #45612	; 0xb22c
   141c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141c6:	681b      	ldr	r3, [r3, #0]
   141c8:	4618      	mov	r0, r3
   141ca:	f04f 0100 	mov.w	r1, #0
   141ce:	f2c4 313e 	movt	r1, #17214	; 0x433e
   141d2:	f004 f8b7 	bl	18344 <__aeabi_fcmplt>
   141d6:	4603      	mov	r3, r0
   141d8:	2b00      	cmp	r3, #0
   141da:	d100      	bne.n	141de <auto_nav+0x209e>
          return;
   141dc:	e082      	b.n	142e4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   141de:	f24b 2310 	movw	r3, #45584	; 0xb210
   141e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141e6:	781b      	ldrb	r3, [r3, #0]
   141e8:	3301      	adds	r3, #1
   141ea:	b2da      	uxtb	r2, r3
   141ec:	f24b 2310 	movw	r3, #45584	; 0xb210
   141f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141f4:	701a      	strb	r2, [r3, #0]
   141f6:	f24b 436c 	movw	r3, #46188	; 0xb46c
   141fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141fe:	681a      	ldr	r2, [r3, #0]
   14200:	f24b 2314 	movw	r3, #45588	; 0xb214
   14204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14208:	601a      	str	r2, [r3, #0]
   1420a:	f24b 4370 	movw	r3, #46192	; 0xb470
   1420e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14212:	681a      	ldr	r2, [r3, #0]
   14214:	f24b 2318 	movw	r3, #45592	; 0xb218
   14218:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1421c:	601a      	str	r2, [r3, #0]
   1421e:	f24b 2324 	movw	r3, #45604	; 0xb224
   14222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14226:	2200      	movs	r2, #0
   14228:	801a      	strh	r2, [r3, #0]
   1422a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1422e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14232:	f04f 0200 	mov.w	r2, #0
   14236:	601a      	str	r2, [r3, #0]
   14238:	e054      	b.n	142e4 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   1423a:	f24b 2310 	movw	r3, #45584	; 0xb210
   1423e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14242:	781b      	ldrb	r3, [r3, #0]
   14244:	2b03      	cmp	r3, #3
   14246:	d106      	bne.n	14256 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14248:	f24b 2310 	movw	r3, #45584	; 0xb210
   1424c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14250:	2203      	movs	r2, #3
   14252:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   14254:	e44b      	b.n	13aee <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   14256:	f24b 2310 	movw	r3, #45584	; 0xb210
   1425a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1425e:	781b      	ldrb	r3, [r3, #0]
   14260:	2b04      	cmp	r3, #4
   14262:	d13f      	bne.n	142e4 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   14264:	f24b 2310 	movw	r3, #45584	; 0xb210
   14268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1426c:	2204      	movs	r2, #4
   1426e:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14270:	f24b 2311 	movw	r3, #45585	; 0xb211
   14274:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14278:	781b      	ldrb	r3, [r3, #0]
   1427a:	3301      	adds	r3, #1
   1427c:	b2da      	uxtb	r2, r3
   1427e:	f24b 2311 	movw	r3, #45585	; 0xb211
   14282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14286:	701a      	strb	r2, [r3, #0]
   14288:	f24b 2310 	movw	r3, #45584	; 0xb210
   1428c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14290:	2200      	movs	r2, #0
   14292:	701a      	strb	r2, [r3, #0]
   14294:	f24b 2326 	movw	r3, #45606	; 0xb226
   14298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1429c:	2200      	movs	r2, #0
   1429e:	801a      	strh	r2, [r3, #0]
   142a0:	f24b 436c 	movw	r3, #46188	; 0xb46c
   142a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142a8:	681a      	ldr	r2, [r3, #0]
   142aa:	f24b 2314 	movw	r3, #45588	; 0xb214
   142ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142b2:	601a      	str	r2, [r3, #0]
   142b4:	f24b 4370 	movw	r3, #46192	; 0xb470
   142b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142bc:	681a      	ldr	r2, [r3, #0]
   142be:	f24b 2318 	movw	r3, #45592	; 0xb218
   142c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142c6:	601a      	str	r2, [r3, #0]
   142c8:	f24b 2324 	movw	r3, #45604	; 0xb224
   142cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142d0:	2200      	movs	r2, #0
   142d2:	801a      	strh	r2, [r3, #0]
   142d4:	f24b 2328 	movw	r3, #45608	; 0xb228
   142d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142dc:	f04f 0200 	mov.w	r2, #0
   142e0:	601a      	str	r2, [r3, #0]
   142e2:	bf00      	nop
    else { }
}
else { }

//#endif
}
   142e4:	372c      	adds	r7, #44	; 0x2c
   142e6:	46bd      	mov	sp, r7
   142e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142ea:	bf00      	nop
   142ec:	f3af 8000 	nop.w
   142f0:	54442d18 	.word	0x54442d18
   142f4:	3ff921fb 	.word	0x3ff921fb
   142f8:	54442d18 	.word	0x54442d18
   142fc:	400921fb 	.word	0x400921fb

00014300 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14300:	b590      	push	{r4, r7, lr}
   14302:	b087      	sub	sp, #28
   14304:	af00      	add	r7, sp, #0
   14306:	4603      	mov	r3, r0
   14308:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   1430a:	79f9      	ldrb	r1, [r7, #7]
   1430c:	f240 4228 	movw	r2, #1064	; 0x428
   14310:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14314:	460b      	mov	r3, r1
   14316:	005b      	lsls	r3, r3, #1
   14318:	440b      	add	r3, r1
   1431a:	009b      	lsls	r3, r3, #2
   1431c:	4413      	add	r3, r2
   1431e:	681a      	ldr	r2, [r3, #0]
   14320:	f24b 436c 	movw	r3, #46188	; 0xb46c
   14324:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14328:	681b      	ldr	r3, [r3, #0]
   1432a:	4610      	mov	r0, r2
   1432c:	4619      	mov	r1, r3
   1432e:	f003 fd61 	bl	17df4 <__aeabi_fsub>
   14332:	4603      	mov	r3, r0
   14334:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   14336:	79f9      	ldrb	r1, [r7, #7]
   14338:	f240 4228 	movw	r2, #1064	; 0x428
   1433c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14340:	460b      	mov	r3, r1
   14342:	005b      	lsls	r3, r3, #1
   14344:	440b      	add	r3, r1
   14346:	009b      	lsls	r3, r3, #2
   14348:	4413      	add	r3, r2
   1434a:	3304      	adds	r3, #4
   1434c:	681a      	ldr	r2, [r3, #0]
   1434e:	f24b 4370 	movw	r3, #46192	; 0xb470
   14352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14356:	681b      	ldr	r3, [r3, #0]
   14358:	4610      	mov	r0, r2
   1435a:	4619      	mov	r1, r3
   1435c:	f003 fd4a 	bl	17df4 <__aeabi_fsub>
   14360:	4603      	mov	r3, r0
   14362:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   14364:	6978      	ldr	r0, [r7, #20]
   14366:	6979      	ldr	r1, [r7, #20]
   14368:	f003 fe4e 	bl	18008 <__aeabi_fmul>
   1436c:	4603      	mov	r3, r0
   1436e:	461c      	mov	r4, r3
   14370:	6938      	ldr	r0, [r7, #16]
   14372:	6939      	ldr	r1, [r7, #16]
   14374:	f003 fe48 	bl	18008 <__aeabi_fmul>
   14378:	4603      	mov	r3, r0
   1437a:	4620      	mov	r0, r4
   1437c:	4619      	mov	r1, r3
   1437e:	f003 fd3b 	bl	17df8 <__addsf3>
   14382:	4603      	mov	r3, r0
   14384:	461a      	mov	r2, r3
   14386:	f24b 2344 	movw	r3, #45636	; 0xb244
   1438a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1438e:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14390:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   14394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14398:	681b      	ldr	r3, [r3, #0]
   1439a:	4618      	mov	r0, r3
   1439c:	f04f 0100 	mov.w	r1, #0
   143a0:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   143a4:	f003 fe30 	bl	18008 <__aeabi_fmul>
   143a8:	4603      	mov	r3, r0
   143aa:	461a      	mov	r2, r3
   143ac:	f24b 2350 	movw	r3, #45648	; 0xb250
   143b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143b4:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   143b6:	f24b 2350 	movw	r3, #45648	; 0xb250
   143ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143be:	681b      	ldr	r3, [r3, #0]
   143c0:	4618      	mov	r0, r3
   143c2:	f04f 0100 	mov.w	r1, #0
   143c6:	f2c4 2120 	movt	r1, #16928	; 0x4220
   143ca:	f003 ffbb 	bl	18344 <__aeabi_fcmplt>
   143ce:	4603      	mov	r3, r0
   143d0:	2b00      	cmp	r3, #0
   143d2:	d004      	beq.n	143de <approaching+0xde>
   143d4:	f04f 0200 	mov.w	r2, #0
   143d8:	f2c4 2220 	movt	r2, #16928	; 0x4220
   143dc:	e004      	b.n	143e8 <approaching+0xe8>
   143de:	f24b 2350 	movw	r3, #45648	; 0xb250
   143e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143e6:	681a      	ldr	r2, [r3, #0]
   143e8:	f24b 2350 	movw	r3, #45648	; 0xb250
   143ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143f0:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   143f2:	f24b 2350 	movw	r3, #45648	; 0xb250
   143f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143fa:	681a      	ldr	r2, [r3, #0]
   143fc:	f24b 2350 	movw	r3, #45648	; 0xb250
   14400:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14404:	681b      	ldr	r3, [r3, #0]
   14406:	4610      	mov	r0, r2
   14408:	4619      	mov	r1, r3
   1440a:	f003 fdfd 	bl	18008 <__aeabi_fmul>
   1440e:	4603      	mov	r3, r0
   14410:	461a      	mov	r2, r3
   14412:	f24b 2344 	movw	r3, #45636	; 0xb244
   14416:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1441a:	681b      	ldr	r3, [r3, #0]
   1441c:	4610      	mov	r0, r2
   1441e:	4619      	mov	r1, r3
   14420:	f003 ffae 	bl	18380 <__aeabi_fcmpgt>
   14424:	4603      	mov	r3, r0
   14426:	2b00      	cmp	r3, #0
   14428:	d001      	beq.n	1442e <approaching+0x12e>
    return TRUE;
   1442a:	2301      	movs	r3, #1
   1442c:	e048      	b.n	144c0 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   1442e:	79f9      	ldrb	r1, [r7, #7]
   14430:	f240 4228 	movw	r2, #1064	; 0x428
   14434:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14438:	460b      	mov	r3, r1
   1443a:	005b      	lsls	r3, r3, #1
   1443c:	440b      	add	r3, r1
   1443e:	009b      	lsls	r3, r3, #2
   14440:	4413      	add	r3, r2
   14442:	681a      	ldr	r2, [r3, #0]
   14444:	f24b 2314 	movw	r3, #45588	; 0xb214
   14448:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1444c:	681b      	ldr	r3, [r3, #0]
   1444e:	4610      	mov	r0, r2
   14450:	4619      	mov	r1, r3
   14452:	f003 fccf 	bl	17df4 <__aeabi_fsub>
   14456:	4603      	mov	r3, r0
   14458:	4618      	mov	r0, r3
   1445a:	6979      	ldr	r1, [r7, #20]
   1445c:	f003 fdd4 	bl	18008 <__aeabi_fmul>
   14460:	4603      	mov	r3, r0
   14462:	461c      	mov	r4, r3
   14464:	79f9      	ldrb	r1, [r7, #7]
   14466:	f240 4228 	movw	r2, #1064	; 0x428
   1446a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1446e:	460b      	mov	r3, r1
   14470:	005b      	lsls	r3, r3, #1
   14472:	440b      	add	r3, r1
   14474:	009b      	lsls	r3, r3, #2
   14476:	4413      	add	r3, r2
   14478:	3304      	adds	r3, #4
   1447a:	681a      	ldr	r2, [r3, #0]
   1447c:	f24b 2318 	movw	r3, #45592	; 0xb218
   14480:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14484:	681b      	ldr	r3, [r3, #0]
   14486:	4610      	mov	r0, r2
   14488:	4619      	mov	r1, r3
   1448a:	f003 fcb3 	bl	17df4 <__aeabi_fsub>
   1448e:	4603      	mov	r3, r0
   14490:	4618      	mov	r0, r3
   14492:	6939      	ldr	r1, [r7, #16]
   14494:	f003 fdb8 	bl	18008 <__aeabi_fmul>
   14498:	4603      	mov	r3, r0
   1449a:	4620      	mov	r0, r4
   1449c:	4619      	mov	r1, r3
   1449e:	f003 fcab 	bl	17df8 <__addsf3>
   144a2:	4603      	mov	r3, r0
   144a4:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   144a6:	2301      	movs	r3, #1
   144a8:	461c      	mov	r4, r3
   144aa:	68f8      	ldr	r0, [r7, #12]
   144ac:	f04f 0100 	mov.w	r1, #0
   144b0:	f003 ff48 	bl	18344 <__aeabi_fcmplt>
   144b4:	4603      	mov	r3, r0
   144b6:	2b00      	cmp	r3, #0
   144b8:	d101      	bne.n	144be <approaching+0x1be>
   144ba:	2300      	movs	r3, #0
   144bc:	461c      	mov	r4, r3
   144be:	b2e3      	uxtb	r3, r4
}
   144c0:	4618      	mov	r0, r3
   144c2:	371c      	adds	r7, #28
   144c4:	46bd      	mov	sp, r7
   144c6:	bd90      	pop	{r4, r7, pc}

000144c8 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   144c8:	b5b0      	push	{r4, r5, r7, lr}
   144ca:	b082      	sub	sp, #8
   144cc:	af00      	add	r7, sp, #0
   144ce:	6078      	str	r0, [r7, #4]
   144d0:	6039      	str	r1, [r7, #0]
  desired_x = x;
   144d2:	f24b 2330 	movw	r3, #45616	; 0xb230
   144d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144da:	687a      	ldr	r2, [r7, #4]
   144dc:	601a      	str	r2, [r3, #0]
  desired_y = y;
   144de:	f24b 2334 	movw	r3, #45620	; 0xb234
   144e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144e6:	683a      	ldr	r2, [r7, #0]
   144e8:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   144ea:	f24b 4370 	movw	r3, #46192	; 0xb470
   144ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144f2:	681b      	ldr	r3, [r3, #0]
   144f4:	6838      	ldr	r0, [r7, #0]
   144f6:	4619      	mov	r1, r3
   144f8:	f003 fc7c 	bl	17df4 <__aeabi_fsub>
   144fc:	4603      	mov	r3, r0
   144fe:	4618      	mov	r0, r3
   14500:	f003 f8ee 	bl	176e0 <__aeabi_f2d>
   14504:	4604      	mov	r4, r0
   14506:	460d      	mov	r5, r1
   14508:	f24b 436c 	movw	r3, #46188	; 0xb46c
   1450c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14510:	681b      	ldr	r3, [r3, #0]
   14512:	6878      	ldr	r0, [r7, #4]
   14514:	4619      	mov	r1, r3
   14516:	f003 fc6d 	bl	17df4 <__aeabi_fsub>
   1451a:	4603      	mov	r3, r0
   1451c:	4618      	mov	r0, r3
   1451e:	f003 f8df 	bl	176e0 <__aeabi_f2d>
   14522:	4602      	mov	r2, r0
   14524:	460b      	mov	r3, r1
   14526:	4620      	mov	r0, r4
   14528:	4629      	mov	r1, r5
   1452a:	f001 f929 	bl	15780 <pp_atan2>
   1452e:	4602      	mov	r2, r0
   14530:	460b      	mov	r3, r1
   14532:	a10b      	add	r1, pc, #44	; (adr r1, 14560 <fly_to_xy+0x98>)
   14534:	e9d1 0100 	ldrd	r0, r1, [r1]
   14538:	f002 ff72 	bl	17420 <__aeabi_dsub>
   1453c:	4602      	mov	r2, r0
   1453e:	460b      	mov	r3, r1
   14540:	4610      	mov	r0, r2
   14542:	4619      	mov	r1, r3
   14544:	f003 fc02 	bl	17d4c <__aeabi_d2f>
   14548:	4602      	mov	r2, r0
   1454a:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
   1454e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14552:	601a      	str	r2, [r3, #0]
}
   14554:	3708      	adds	r7, #8
   14556:	46bd      	mov	sp, r7
   14558:	bdb0      	pop	{r4, r5, r7, pc}
   1455a:	bf00      	nop
   1455c:	f3af 8000 	nop.w
   14560:	54442d18 	.word	0x54442d18
   14564:	3ff921fb 	.word	0x3ff921fb

00014568 <fly_to>:

static void fly_to(uint8_t wp) { 
   14568:	b580      	push	{r7, lr}
   1456a:	b082      	sub	sp, #8
   1456c:	af00      	add	r7, sp, #0
   1456e:	4603      	mov	r3, r0
   14570:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14572:	79f9      	ldrb	r1, [r7, #7]
   14574:	f240 4228 	movw	r2, #1064	; 0x428
   14578:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1457c:	460b      	mov	r3, r1
   1457e:	005b      	lsls	r3, r3, #1
   14580:	440b      	add	r3, r1
   14582:	009b      	lsls	r3, r3, #2
   14584:	4413      	add	r3, r2
   14586:	6818      	ldr	r0, [r3, #0]
   14588:	79f9      	ldrb	r1, [r7, #7]
   1458a:	f240 4228 	movw	r2, #1064	; 0x428
   1458e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14592:	460b      	mov	r3, r1
   14594:	005b      	lsls	r3, r3, #1
   14596:	440b      	add	r3, r1
   14598:	009b      	lsls	r3, r3, #2
   1459a:	4413      	add	r3, r2
   1459c:	3304      	adds	r3, #4
   1459e:	681b      	ldr	r3, [r3, #0]
   145a0:	4619      	mov	r1, r3
   145a2:	f7ff ff91 	bl	144c8 <fly_to_xy>
}
   145a6:	3708      	adds	r7, #8
   145a8:	46bd      	mov	sp, r7
   145aa:	bd80      	pop	{r7, pc}

000145ac <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   145ac:	b5b0      	push	{r4, r5, r7, lr}
   145ae:	b088      	sub	sp, #32
   145b0:	af00      	add	r7, sp, #0
   145b2:	4602      	mov	r2, r0
   145b4:	460b      	mov	r3, r1
   145b6:	71fa      	strb	r2, [r7, #7]
   145b8:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   145ba:	79f9      	ldrb	r1, [r7, #7]
   145bc:	f240 4228 	movw	r2, #1064	; 0x428
   145c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   145c4:	460b      	mov	r3, r1
   145c6:	005b      	lsls	r3, r3, #1
   145c8:	440b      	add	r3, r1
   145ca:	009b      	lsls	r3, r3, #2
   145cc:	4413      	add	r3, r2
   145ce:	681b      	ldr	r3, [r3, #0]
   145d0:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   145d2:	79f9      	ldrb	r1, [r7, #7]
   145d4:	f240 4228 	movw	r2, #1064	; 0x428
   145d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   145dc:	460b      	mov	r3, r1
   145de:	005b      	lsls	r3, r3, #1
   145e0:	440b      	add	r3, r1
   145e2:	009b      	lsls	r3, r3, #2
   145e4:	4413      	add	r3, r2
   145e6:	3304      	adds	r3, #4
   145e8:	681b      	ldr	r3, [r3, #0]
   145ea:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   145ec:	79b9      	ldrb	r1, [r7, #6]
   145ee:	f240 4228 	movw	r2, #1064	; 0x428
   145f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   145f6:	460b      	mov	r3, r1
   145f8:	005b      	lsls	r3, r3, #1
   145fa:	440b      	add	r3, r1
   145fc:	009b      	lsls	r3, r3, #2
   145fe:	4413      	add	r3, r2
   14600:	681b      	ldr	r3, [r3, #0]
   14602:	4618      	mov	r0, r3
   14604:	69f9      	ldr	r1, [r7, #28]
   14606:	f003 fbf5 	bl	17df4 <__aeabi_fsub>
   1460a:	4603      	mov	r3, r0
   1460c:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   1460e:	79b9      	ldrb	r1, [r7, #6]
   14610:	f240 4228 	movw	r2, #1064	; 0x428
   14614:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14618:	460b      	mov	r3, r1
   1461a:	005b      	lsls	r3, r3, #1
   1461c:	440b      	add	r3, r1
   1461e:	009b      	lsls	r3, r3, #2
   14620:	4413      	add	r3, r2
   14622:	3304      	adds	r3, #4
   14624:	681b      	ldr	r3, [r3, #0]
   14626:	4618      	mov	r0, r3
   14628:	69b9      	ldr	r1, [r7, #24]
   1462a:	f003 fbe3 	bl	17df4 <__aeabi_fsub>
   1462e:	4603      	mov	r3, r0
   14630:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14632:	6978      	ldr	r0, [r7, #20]
   14634:	6979      	ldr	r1, [r7, #20]
   14636:	f003 fce7 	bl	18008 <__aeabi_fmul>
   1463a:	4603      	mov	r3, r0
   1463c:	461c      	mov	r4, r3
   1463e:	6938      	ldr	r0, [r7, #16]
   14640:	6939      	ldr	r1, [r7, #16]
   14642:	f003 fce1 	bl	18008 <__aeabi_fmul>
   14646:	4603      	mov	r3, r0
   14648:	4620      	mov	r0, r4
   1464a:	4619      	mov	r1, r3
   1464c:	f003 fbd4 	bl	17df8 <__addsf3>
   14650:	4603      	mov	r3, r0
   14652:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14654:	f24b 436c 	movw	r3, #46188	; 0xb46c
   14658:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1465c:	681b      	ldr	r3, [r3, #0]
   1465e:	4618      	mov	r0, r3
   14660:	69f9      	ldr	r1, [r7, #28]
   14662:	f003 fbc7 	bl	17df4 <__aeabi_fsub>
   14666:	4603      	mov	r3, r0
   14668:	4618      	mov	r0, r3
   1466a:	6979      	ldr	r1, [r7, #20]
   1466c:	f003 fccc 	bl	18008 <__aeabi_fmul>
   14670:	4603      	mov	r3, r0
   14672:	461c      	mov	r4, r3
   14674:	f24b 4370 	movw	r3, #46192	; 0xb470
   14678:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1467c:	681b      	ldr	r3, [r3, #0]
   1467e:	4618      	mov	r0, r3
   14680:	69b9      	ldr	r1, [r7, #24]
   14682:	f003 fbb7 	bl	17df4 <__aeabi_fsub>
   14686:	4603      	mov	r3, r0
   14688:	4618      	mov	r0, r3
   1468a:	6939      	ldr	r1, [r7, #16]
   1468c:	f003 fcbc 	bl	18008 <__aeabi_fmul>
   14690:	4603      	mov	r3, r0
   14692:	4620      	mov	r0, r4
   14694:	4619      	mov	r1, r3
   14696:	f003 fbaf 	bl	17df8 <__addsf3>
   1469a:	4603      	mov	r3, r0
   1469c:	4618      	mov	r0, r3
   1469e:	68f9      	ldr	r1, [r7, #12]
   146a0:	f003 fd66 	bl	18170 <__aeabi_fdiv>
   146a4:	4603      	mov	r3, r0
   146a6:	461a      	mov	r2, r3
   146a8:	f24b 2354 	movw	r3, #45652	; 0xb254
   146ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146b0:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   146b2:	f24b 2354 	movw	r3, #45652	; 0xb254
   146b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146ba:	681b      	ldr	r3, [r3, #0]
   146bc:	4618      	mov	r0, r3
   146be:	f04f 0100 	mov.w	r1, #0
   146c2:	f003 fe53 	bl	1836c <__aeabi_fcmpge>
   146c6:	4603      	mov	r3, r0
   146c8:	2b00      	cmp	r3, #0
   146ca:	d005      	beq.n	146d8 <route_to+0x12c>
   146cc:	f24b 2354 	movw	r3, #45652	; 0xb254
   146d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146d4:	681a      	ldr	r2, [r3, #0]
   146d6:	e001      	b.n	146dc <route_to+0x130>
   146d8:	f04f 0200 	mov.w	r2, #0
   146dc:	f24b 2354 	movw	r3, #45652	; 0xb254
   146e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146e4:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   146e6:	68f8      	ldr	r0, [r7, #12]
   146e8:	f002 fffa 	bl	176e0 <__aeabi_f2d>
   146ec:	4602      	mov	r2, r0
   146ee:	460b      	mov	r3, r1
   146f0:	4610      	mov	r0, r2
   146f2:	4619      	mov	r1, r3
   146f4:	f001 f9f4 	bl	15ae0 <pp_sqrt>
   146f8:	4602      	mov	r2, r0
   146fa:	460b      	mov	r3, r1
   146fc:	4610      	mov	r0, r2
   146fe:	4619      	mov	r1, r3
   14700:	f003 fb24 	bl	17d4c <__aeabi_d2f>
   14704:	4602      	mov	r2, r0
   14706:	f24b 2358 	movw	r3, #45656	; 0xb258
   1470a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1470e:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14710:	f24b 2354 	movw	r3, #45652	; 0xb254
   14714:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14718:	681b      	ldr	r3, [r3, #0]
   1471a:	4618      	mov	r0, r3
   1471c:	f002 ffe0 	bl	176e0 <__aeabi_f2d>
   14720:	4604      	mov	r4, r0
   14722:	460d      	mov	r5, r1
   14724:	f24b 2350 	movw	r3, #45648	; 0xb250
   14728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1472c:	681a      	ldr	r2, [r3, #0]
   1472e:	f24b 2358 	movw	r3, #45656	; 0xb258
   14732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14736:	681b      	ldr	r3, [r3, #0]
   14738:	4610      	mov	r0, r2
   1473a:	4619      	mov	r1, r3
   1473c:	f003 fd18 	bl	18170 <__aeabi_fdiv>
   14740:	4603      	mov	r3, r0
   14742:	4618      	mov	r0, r3
   14744:	f04f 0100 	mov.w	r1, #0
   14748:	f003 fe10 	bl	1836c <__aeabi_fcmpge>
   1474c:	4603      	mov	r3, r0
   1474e:	2b00      	cmp	r3, #0
   14750:	d014      	beq.n	1477c <route_to+0x1d0>
   14752:	f24b 2350 	movw	r3, #45648	; 0xb250
   14756:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1475a:	681a      	ldr	r2, [r3, #0]
   1475c:	f24b 2358 	movw	r3, #45656	; 0xb258
   14760:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14764:	681b      	ldr	r3, [r3, #0]
   14766:	4610      	mov	r0, r2
   14768:	4619      	mov	r1, r3
   1476a:	f003 fd01 	bl	18170 <__aeabi_fdiv>
   1476e:	4603      	mov	r3, r0
   14770:	4618      	mov	r0, r3
   14772:	f002 ffb5 	bl	176e0 <__aeabi_f2d>
   14776:	4602      	mov	r2, r0
   14778:	460b      	mov	r3, r1
   1477a:	e003      	b.n	14784 <route_to+0x1d8>
   1477c:	f04f 0200 	mov.w	r2, #0
   14780:	f04f 0300 	mov.w	r3, #0
   14784:	4620      	mov	r0, r4
   14786:	4629      	mov	r1, r5
   14788:	f002 fe4c 	bl	17424 <__adddf3>
   1478c:	4602      	mov	r2, r0
   1478e:	460b      	mov	r3, r1
   14790:	4610      	mov	r0, r2
   14792:	4619      	mov	r1, r3
   14794:	f003 fada 	bl	17d4c <__aeabi_d2f>
   14798:	4602      	mov	r2, r0
   1479a:	f24b 2354 	movw	r3, #45652	; 0xb254
   1479e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147a2:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   147a4:	f24b 2354 	movw	r3, #45652	; 0xb254
   147a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147ac:	681b      	ldr	r3, [r3, #0]
   147ae:	4618      	mov	r0, r3
   147b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   147b4:	f003 fdda 	bl	1836c <__aeabi_fcmpge>
   147b8:	4603      	mov	r3, r0
   147ba:	2b00      	cmp	r3, #0
   147bc:	d002      	beq.n	147c4 <route_to+0x218>
   147be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   147c2:	e004      	b.n	147ce <route_to+0x222>
   147c4:	f24b 2354 	movw	r3, #45652	; 0xb254
   147c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147cc:	681a      	ldr	r2, [r3, #0]
   147ce:	f24b 2354 	movw	r3, #45652	; 0xb254
   147d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147d6:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   147d8:	f24b 2354 	movw	r3, #45652	; 0xb254
   147dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147e0:	681b      	ldr	r3, [r3, #0]
   147e2:	4618      	mov	r0, r3
   147e4:	6979      	ldr	r1, [r7, #20]
   147e6:	f003 fc0f 	bl	18008 <__aeabi_fmul>
   147ea:	4603      	mov	r3, r0
   147ec:	4618      	mov	r0, r3
   147ee:	69f9      	ldr	r1, [r7, #28]
   147f0:	f003 fb02 	bl	17df8 <__addsf3>
   147f4:	4603      	mov	r3, r0
   147f6:	461c      	mov	r4, r3
   147f8:	f24b 2354 	movw	r3, #45652	; 0xb254
   147fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14800:	681b      	ldr	r3, [r3, #0]
   14802:	4618      	mov	r0, r3
   14804:	6939      	ldr	r1, [r7, #16]
   14806:	f003 fbff 	bl	18008 <__aeabi_fmul>
   1480a:	4603      	mov	r3, r0
   1480c:	4618      	mov	r0, r3
   1480e:	69b9      	ldr	r1, [r7, #24]
   14810:	f003 faf2 	bl	17df8 <__addsf3>
   14814:	4603      	mov	r3, r0
   14816:	4620      	mov	r0, r4
   14818:	4619      	mov	r1, r3
   1481a:	f7ff fe55 	bl	144c8 <fly_to_xy>
}
   1481e:	3720      	adds	r7, #32
   14820:	46bd      	mov	sp, r7
   14822:	bdb0      	pop	{r4, r5, r7, pc}

00014824 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14824:	b590      	push	{r4, r7, lr}
   14826:	b083      	sub	sp, #12
   14828:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   1482a:	f240 4328 	movw	r3, #1064	; 0x428
   1482e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14832:	681a      	ldr	r2, [r3, #0]
   14834:	f24b 436c 	movw	r3, #46188	; 0xb46c
   14838:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1483c:	681b      	ldr	r3, [r3, #0]
   1483e:	4610      	mov	r0, r2
   14840:	4619      	mov	r1, r3
   14842:	f003 fad7 	bl	17df4 <__aeabi_fsub>
   14846:	4603      	mov	r3, r0
   14848:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   1484a:	f240 4328 	movw	r3, #1064	; 0x428
   1484e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14852:	685a      	ldr	r2, [r3, #4]
   14854:	f24b 4370 	movw	r3, #46192	; 0xb470
   14858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1485c:	681b      	ldr	r3, [r3, #0]
   1485e:	4610      	mov	r0, r2
   14860:	4619      	mov	r1, r3
   14862:	f003 fac7 	bl	17df4 <__aeabi_fsub>
   14866:	4603      	mov	r3, r0
   14868:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   1486a:	6878      	ldr	r0, [r7, #4]
   1486c:	6879      	ldr	r1, [r7, #4]
   1486e:	f003 fbcb 	bl	18008 <__aeabi_fmul>
   14872:	4603      	mov	r3, r0
   14874:	461c      	mov	r4, r3
   14876:	6838      	ldr	r0, [r7, #0]
   14878:	6839      	ldr	r1, [r7, #0]
   1487a:	f003 fbc5 	bl	18008 <__aeabi_fmul>
   1487e:	4603      	mov	r3, r0
   14880:	4620      	mov	r0, r4
   14882:	4619      	mov	r1, r3
   14884:	f003 fab8 	bl	17df8 <__addsf3>
   14888:	4603      	mov	r3, r0
   1488a:	461a      	mov	r2, r3
   1488c:	f24b 2348 	movw	r3, #45640	; 0xb248
   14890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14894:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14896:	f24b 2348 	movw	r3, #45640	; 0xb248
   1489a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1489e:	681b      	ldr	r3, [r3, #0]
   148a0:	2201      	movs	r2, #1
   148a2:	4614      	mov	r4, r2
   148a4:	4618      	mov	r0, r3
   148a6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   148aa:	f6c4 0174 	movt	r1, #18548	; 0x4874
   148ae:	f003 fd67 	bl	18380 <__aeabi_fcmpgt>
   148b2:	4603      	mov	r3, r0
   148b4:	2b00      	cmp	r3, #0
   148b6:	d101      	bne.n	148bc <compute_dist2_to_home+0x98>
   148b8:	2300      	movs	r3, #0
   148ba:	461c      	mov	r4, r3
   148bc:	b2e3      	uxtb	r3, r4
   148be:	461a      	mov	r2, r3
   148c0:	f24b 234c 	movw	r3, #45644	; 0xb24c
   148c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148c8:	701a      	strb	r2, [r3, #0]
}
   148ca:	370c      	adds	r7, #12
   148cc:	46bd      	mov	sp, r7
   148ce:	bd90      	pop	{r4, r7, pc}

000148d0 <nav_home>:

void nav_home(void) {
   148d0:	b580      	push	{r7, lr}
   148d2:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   148d4:	f24b 233c 	movw	r3, #45628	; 0xb23c
   148d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148dc:	f04f 0200 	mov.w	r2, #0
   148e0:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   148e2:	f64a 639d 	movw	r3, #44701	; 0xae9d
   148e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ea:	2203      	movs	r2, #3
   148ec:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   148ee:	f240 4324 	movw	r3, #1060	; 0x424
   148f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148f6:	f04f 0200 	mov.w	r2, #0
   148fa:	f2c4 322f 	movt	r2, #17199	; 0x432f
   148fe:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14900:	f7ff ff90 	bl	14824 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14904:	f24b 2348 	movw	r3, #45640	; 0xb248
   14908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1490c:	681a      	ldr	r2, [r3, #0]
   1490e:	f24b 2344 	movw	r3, #45636	; 0xb244
   14912:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14916:	601a      	str	r2, [r3, #0]
}
   14918:	bd80      	pop	{r7, pc}
   1491a:	bf00      	nop

0001491c <nav_update>:

void nav_update(void) {
   1491c:	b580      	push	{r7, lr}
   1491e:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14920:	f7ff ff80 	bl	14824 <compute_dist2_to_home>

  auto_nav();
   14924:	f7fd fc0c 	bl	12140 <auto_nav>
}
   14928:	bd80      	pop	{r7, pc}
   1492a:	bf00      	nop

0001492c <nav_init>:


void nav_init(void) {
   1492c:	b480      	push	{r7}
   1492e:	af00      	add	r7, sp, #0
  nav_block = 0;
   14930:	f24b 2311 	movw	r3, #45585	; 0xb211
   14934:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14938:	2200      	movs	r2, #0
   1493a:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   1493c:	f24b 2310 	movw	r3, #45584	; 0xb210
   14940:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14944:	2200      	movs	r2, #0
   14946:	701a      	strb	r2, [r3, #0]
}
   14948:	46bd      	mov	sp, r7
   1494a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1494e:	4770      	bx	lr

00014950 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14950:	b480      	push	{r7}
   14952:	b083      	sub	sp, #12
   14954:	af00      	add	r7, sp, #0
   14956:	4603      	mov	r3, r0
   14958:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   1495a:	f242 030a 	movw	r3, #8202	; 0x200a
   1495e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14962:	781b      	ldrb	r3, [r3, #0]
   14964:	b2db      	uxtb	r3, r3
   14966:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1496a:	2b00      	cmp	r3, #0
   1496c:	d028      	beq.n	149c0 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   1496e:	f24b 2365 	movw	r3, #45669	; 0xb265
   14972:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14976:	781b      	ldrb	r3, [r3, #0]
   14978:	b2db      	uxtb	r3, r3
   1497a:	461a      	mov	r2, r3
   1497c:	f24b 2364 	movw	r3, #45668	; 0xb264
   14980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14984:	781b      	ldrb	r3, [r3, #0]
   14986:	3301      	adds	r3, #1
   14988:	429a      	cmp	r2, r3
   1498a:	d100      	bne.n	1498e <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   1498c:	e02c      	b.n	149e8 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   1498e:	f24b 2364 	movw	r3, #45668	; 0xb264
   14992:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14996:	781b      	ldrb	r3, [r3, #0]
   14998:	461a      	mov	r2, r3
   1499a:	f24b 2368 	movw	r3, #45672	; 0xb268
   1499e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149a2:	79f9      	ldrb	r1, [r7, #7]
   149a4:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   149a6:	f24b 2364 	movw	r3, #45668	; 0xb264
   149aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149ae:	781b      	ldrb	r3, [r3, #0]
   149b0:	3301      	adds	r3, #1
   149b2:	b2da      	uxtb	r2, r3
   149b4:	f24b 2364 	movw	r3, #45668	; 0xb264
   149b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149bc:	701a      	strb	r2, [r3, #0]
   149be:	e013      	b.n	149e8 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   149c0:	f242 030c 	movw	r3, #8204	; 0x200c
   149c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149c8:	79fa      	ldrb	r2, [r7, #7]
   149ca:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   149cc:	f242 030a 	movw	r3, #8202	; 0x200a
   149d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149d4:	f242 020a 	movw	r2, #8202	; 0x200a
   149d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149dc:	7812      	ldrb	r2, [r2, #0]
   149de:	b2d2      	uxtb	r2, r2
   149e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   149e4:	b2d2      	uxtb	r2, r2
   149e6:	701a      	strb	r2, [r3, #0]
  }
}
   149e8:	370c      	adds	r7, #12
   149ea:	46bd      	mov	sp, r7
   149ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   149f0:	4770      	bx	lr
   149f2:	bf00      	nop

000149f4 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   149f4:	b480      	push	{r7}
   149f6:	b083      	sub	sp, #12
   149f8:	af00      	add	r7, sp, #0
   149fa:	4603      	mov	r3, r0
   149fc:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   149fe:	f242 039a 	movw	r3, #8346	; 0x209a
   14a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a06:	781b      	ldrb	r3, [r3, #0]
   14a08:	b2db      	uxtb	r3, r3
   14a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14a0e:	2b00      	cmp	r3, #0
   14a10:	d028      	beq.n	14a64 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14a12:	f24b 3369 	movw	r3, #45929	; 0xb369
   14a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a1a:	781b      	ldrb	r3, [r3, #0]
   14a1c:	b2db      	uxtb	r3, r3
   14a1e:	461a      	mov	r2, r3
   14a20:	f24b 3368 	movw	r3, #45928	; 0xb368
   14a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a28:	781b      	ldrb	r3, [r3, #0]
   14a2a:	3301      	adds	r3, #1
   14a2c:	429a      	cmp	r2, r3
   14a2e:	d100      	bne.n	14a32 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14a30:	e02c      	b.n	14a8c <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14a32:	f24b 3368 	movw	r3, #45928	; 0xb368
   14a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a3a:	781b      	ldrb	r3, [r3, #0]
   14a3c:	461a      	mov	r2, r3
   14a3e:	f24b 336c 	movw	r3, #45932	; 0xb36c
   14a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a46:	79f9      	ldrb	r1, [r7, #7]
   14a48:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14a4a:	f24b 3368 	movw	r3, #45928	; 0xb368
   14a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a52:	781b      	ldrb	r3, [r3, #0]
   14a54:	3301      	adds	r3, #1
   14a56:	b2da      	uxtb	r2, r3
   14a58:	f24b 3368 	movw	r3, #45928	; 0xb368
   14a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a60:	701a      	strb	r2, [r3, #0]
   14a62:	e013      	b.n	14a8c <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14a64:	f242 039c 	movw	r3, #8348	; 0x209c
   14a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a6c:	79fa      	ldrb	r2, [r7, #7]
   14a6e:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14a70:	f242 039a 	movw	r3, #8346	; 0x209a
   14a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a78:	f242 029a 	movw	r2, #8346	; 0x209a
   14a7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a80:	7812      	ldrb	r2, [r2, #0]
   14a82:	b2d2      	uxtb	r2, r2
   14a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14a88:	b2d2      	uxtb	r2, r2
   14a8a:	701a      	strb	r2, [r3, #0]
  }
}
   14a8c:	370c      	adds	r7, #12
   14a8e:	46bd      	mov	sp, r7
   14a90:	f85d 7b04 	ldr.w	r7, [sp], #4
   14a94:	4770      	bx	lr
   14a96:	bf00      	nop

00014a98 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14a98:	b580      	push	{r7, lr}
   14a9a:	b084      	sub	sp, #16
   14a9c:	af00      	add	r7, sp, #0
   14a9e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14aa0:	2300      	movs	r3, #0
   14aa2:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14aa4:	e009      	b.n	14aba <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14aa6:	7bfb      	ldrb	r3, [r7, #15]
   14aa8:	687a      	ldr	r2, [r7, #4]
   14aaa:	4413      	add	r3, r2
   14aac:	781b      	ldrb	r3, [r3, #0]
   14aae:	4618      	mov	r0, r3
   14ab0:	f7ff ff4e 	bl	14950 <uart0_transmit>
    i++;
   14ab4:	7bfb      	ldrb	r3, [r7, #15]
   14ab6:	3301      	adds	r3, #1
   14ab8:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14aba:	7bfb      	ldrb	r3, [r7, #15]
   14abc:	687a      	ldr	r2, [r7, #4]
   14abe:	4413      	add	r3, r2
   14ac0:	781b      	ldrb	r3, [r3, #0]
   14ac2:	2b00      	cmp	r3, #0
   14ac4:	d1ef      	bne.n	14aa6 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14ac6:	3710      	adds	r7, #16
   14ac8:	46bd      	mov	sp, r7
   14aca:	bd80      	pop	{r7, pc}

00014acc <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14acc:	b590      	push	{r4, r7, lr}
   14ace:	b089      	sub	sp, #36	; 0x24
   14ad0:	af00      	add	r7, sp, #0
   14ad2:	4603      	mov	r3, r0
   14ad4:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14ad6:	f248 6398 	movw	r3, #34456	; 0x8698
   14ada:	f2c0 0301 	movt	r3, #1
   14ade:	f107 040c 	add.w	r4, r7, #12
   14ae2:	6818      	ldr	r0, [r3, #0]
   14ae4:	6859      	ldr	r1, [r3, #4]
   14ae6:	689a      	ldr	r2, [r3, #8]
   14ae8:	68db      	ldr	r3, [r3, #12]
   14aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14aec:	79fb      	ldrb	r3, [r7, #7]
   14aee:	091b      	lsrs	r3, r3, #4
   14af0:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14af2:	79fb      	ldrb	r3, [r7, #7]
   14af4:	f003 030f 	and.w	r3, r3, #15
   14af8:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14afa:	230f      	movs	r3, #15
   14afc:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14afe:	230f      	movs	r3, #15
   14b00:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14b02:	7ffb      	ldrb	r3, [r7, #31]
   14b04:	f107 0220 	add.w	r2, r7, #32
   14b08:	4413      	add	r3, r2
   14b0a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14b0e:	4618      	mov	r0, r3
   14b10:	f7ff ff1e 	bl	14950 <uart0_transmit>
  uart0_transmit(hex[low]);
   14b14:	7fbb      	ldrb	r3, [r7, #30]
   14b16:	f107 0220 	add.w	r2, r7, #32
   14b1a:	4413      	add	r3, r2
   14b1c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14b20:	4618      	mov	r0, r3
   14b22:	f7ff ff15 	bl	14950 <uart0_transmit>
}
   14b26:	3724      	adds	r7, #36	; 0x24
   14b28:	46bd      	mov	sp, r7
   14b2a:	bd90      	pop	{r4, r7, pc}

00014b2c <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14b2c:	b480      	push	{r7}
   14b2e:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14b30:	f24b 2364 	movw	r3, #45668	; 0xb264
   14b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b38:	781a      	ldrb	r2, [r3, #0]
   14b3a:	f24b 2365 	movw	r3, #45669	; 0xb265
   14b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b42:	781b      	ldrb	r3, [r3, #0]
   14b44:	b2db      	uxtb	r3, r3
   14b46:	429a      	cmp	r2, r3
   14b48:	d10e      	bne.n	14b68 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14b4a:	f242 030a 	movw	r3, #8202	; 0x200a
   14b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b52:	f242 020a 	movw	r2, #8202	; 0x200a
   14b56:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b5a:	7812      	ldrb	r2, [r2, #0]
   14b5c:	b2d2      	uxtb	r2, r2
   14b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14b62:	b2d2      	uxtb	r2, r2
   14b64:	701a      	strb	r2, [r3, #0]
   14b66:	e01d      	b.n	14ba4 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14b68:	f242 030c 	movw	r3, #8204	; 0x200c
   14b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b70:	f24b 2265 	movw	r2, #45669	; 0xb265
   14b74:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b78:	7812      	ldrb	r2, [r2, #0]
   14b7a:	b2d2      	uxtb	r2, r2
   14b7c:	4611      	mov	r1, r2
   14b7e:	f24b 2268 	movw	r2, #45672	; 0xb268
   14b82:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b86:	5c52      	ldrb	r2, [r2, r1]
   14b88:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14b8a:	f24b 2365 	movw	r3, #45669	; 0xb265
   14b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b92:	781b      	ldrb	r3, [r3, #0]
   14b94:	b2db      	uxtb	r3, r3
   14b96:	3301      	adds	r3, #1
   14b98:	b2da      	uxtb	r2, r3
   14b9a:	f24b 2365 	movw	r3, #45669	; 0xb265
   14b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ba2:	701a      	strb	r2, [r3, #0]
  }
}
   14ba4:	46bd      	mov	sp, r7
   14ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14baa:	4770      	bx	lr

00014bac <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14bac:	b480      	push	{r7}
   14bae:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14bb0:	f24b 3368 	movw	r3, #45928	; 0xb368
   14bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bb8:	781a      	ldrb	r2, [r3, #0]
   14bba:	f24b 3369 	movw	r3, #45929	; 0xb369
   14bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bc2:	781b      	ldrb	r3, [r3, #0]
   14bc4:	b2db      	uxtb	r3, r3
   14bc6:	429a      	cmp	r2, r3
   14bc8:	d10e      	bne.n	14be8 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14bca:	f242 039a 	movw	r3, #8346	; 0x209a
   14bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bd2:	f242 029a 	movw	r2, #8346	; 0x209a
   14bd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14bda:	7812      	ldrb	r2, [r2, #0]
   14bdc:	b2d2      	uxtb	r2, r2
   14bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14be2:	b2d2      	uxtb	r2, r2
   14be4:	701a      	strb	r2, [r3, #0]
   14be6:	e01d      	b.n	14c24 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14be8:	f242 039c 	movw	r3, #8348	; 0x209c
   14bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bf0:	f24b 3269 	movw	r2, #45929	; 0xb369
   14bf4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14bf8:	7812      	ldrb	r2, [r2, #0]
   14bfa:	b2d2      	uxtb	r2, r2
   14bfc:	4611      	mov	r1, r2
   14bfe:	f24b 326c 	movw	r2, #45932	; 0xb36c
   14c02:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14c06:	5c52      	ldrb	r2, [r2, r1]
   14c08:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14c0a:	f24b 3369 	movw	r3, #45929	; 0xb369
   14c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c12:	781b      	ldrb	r3, [r3, #0]
   14c14:	b2db      	uxtb	r3, r3
   14c16:	3301      	adds	r3, #1
   14c18:	b2da      	uxtb	r2, r3
   14c1a:	f24b 3369 	movw	r3, #45929	; 0xb369
   14c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c22:	701a      	strb	r2, [r3, #0]
  }
}
   14c24:	46bd      	mov	sp, r7
   14c26:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c2a:	4770      	bx	lr

00014c2c <uart0_init>:

void uart0_init( void ) {
   14c2c:	b480      	push	{r7}
   14c2e:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14c30:	f242 0390 	movw	r3, #8336	; 0x2090
   14c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c38:	2200      	movs	r2, #0
   14c3a:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14c3c:	f242 0309 	movw	r3, #8201	; 0x2009
   14c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c44:	2219      	movs	r2, #25
   14c46:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14c48:	f242 030b 	movw	r3, #8203	; 0x200b
   14c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c50:	2200      	movs	r2, #0
   14c52:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   14c54:	f242 030a 	movw	r3, #8202	; 0x200a
   14c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c5c:	2218      	movs	r2, #24
   14c5e:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14c60:	f242 0395 	movw	r3, #8341	; 0x2095
   14c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c68:	2206      	movs	r2, #6
   14c6a:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   14c6c:	f242 030a 	movw	r3, #8202	; 0x200a
   14c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c74:	f242 020a 	movw	r2, #8202	; 0x200a
   14c78:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14c7c:	7812      	ldrb	r2, [r2, #0]
   14c7e:	b2d2      	uxtb	r2, r2
   14c80:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14c84:	b2d2      	uxtb	r2, r2
   14c86:	701a      	strb	r2, [r3, #0]
}
   14c88:	46bd      	mov	sp, r7
   14c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c8e:	4770      	bx	lr

00014c90 <uart1_init>:

void uart1_init( void ) {
   14c90:	b480      	push	{r7}
   14c92:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   14c94:	f242 0398 	movw	r3, #8344	; 0x2098
   14c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c9c:	2200      	movs	r2, #0
   14c9e:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   14ca0:	f242 0399 	movw	r3, #8345	; 0x2099
   14ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ca8:	2219      	movs	r2, #25
   14caa:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   14cac:	f242 039b 	movw	r3, #8347	; 0x209b
   14cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cb4:	2200      	movs	r2, #0
   14cb6:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14cb8:	f242 039a 	movw	r3, #8346	; 0x209a
   14cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cc0:	2218      	movs	r2, #24
   14cc2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14cc4:	f242 039d 	movw	r3, #8349	; 0x209d
   14cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ccc:	2206      	movs	r2, #6
   14cce:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14cd0:	f242 039a 	movw	r3, #8346	; 0x209a
   14cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cd8:	f242 029a 	movw	r2, #8346	; 0x209a
   14cdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ce0:	7812      	ldrb	r2, [r2, #0]
   14ce2:	b2d2      	uxtb	r2, r2
   14ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14ce8:	b2d2      	uxtb	r2, r2
   14cea:	701a      	strb	r2, [r3, #0]
}
   14cec:	46bd      	mov	sp, r7
   14cee:	f85d 7b04 	ldr.w	r7, [sp], #4
   14cf2:	4770      	bx	lr
   14cf4:	0000      	movs	r0, r0
	...

00014cf8 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14cf8:	b480      	push	{r7}
   14cfa:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   14cfc:	f24b 436c 	movw	r3, #46188	; 0xb46c
   14d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d04:	f04f 0200 	mov.w	r2, #0
   14d08:	601a      	str	r2, [r3, #0]
   14d0a:	f24b 4370 	movw	r3, #46192	; 0xb470
   14d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d12:	f04f 0200 	mov.w	r2, #0
   14d16:	601a      	str	r2, [r3, #0]
   14d18:	f24b 4374 	movw	r3, #46196	; 0xb474
   14d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d20:	f04f 0200 	mov.w	r2, #0
   14d24:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   14d26:	f24b 4378 	movw	r3, #46200	; 0xb478
   14d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d2e:	f04f 0200 	mov.w	r2, #0
   14d32:	601a      	str	r2, [r3, #0]
   14d34:	f24b 437c 	movw	r3, #46204	; 0xb47c
   14d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d3c:	f04f 0200 	mov.w	r2, #0
   14d40:	601a      	str	r2, [r3, #0]
   14d42:	f24b 4380 	movw	r3, #46208	; 0xb480
   14d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d4a:	f04f 0200 	mov.w	r2, #0
   14d4e:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   14d50:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   14d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d58:	f04f 0200 	mov.w	r2, #0
   14d5c:	601a      	str	r2, [r3, #0]
   14d5e:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   14d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d66:	f04f 0200 	mov.w	r2, #0
   14d6a:	601a      	str	r2, [r3, #0]
   14d6c:	f24b 438c 	movw	r3, #46220	; 0xb48c
   14d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d74:	f04f 0200 	mov.w	r2, #0
   14d78:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   14d7a:	f24b 4390 	movw	r3, #46224	; 0xb490
   14d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d82:	f04f 0200 	mov.w	r2, #0
   14d86:	601a      	str	r2, [r3, #0]
   14d88:	f24b 4394 	movw	r3, #46228	; 0xb494
   14d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d90:	f04f 0200 	mov.w	r2, #0
   14d94:	601a      	str	r2, [r3, #0]
   14d96:	f24b 4398 	movw	r3, #46232	; 0xb498
   14d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d9e:	f04f 0200 	mov.w	r2, #0
   14da2:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   14da4:	f24b 439c 	movw	r3, #46236	; 0xb49c
   14da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dac:	2200      	movs	r2, #0
   14dae:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   14db0:	f240 33f8 	movw	r3, #1016	; 0x3f8
   14db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14db8:	681a      	ldr	r2, [r3, #0]
   14dba:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   14dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dc2:	601a      	str	r2, [r3, #0]
}
   14dc4:	46bd      	mov	sp, r7
   14dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14dca:	4770      	bx	lr

00014dcc <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   14dcc:	b580      	push	{r7, lr}
   14dce:	b082      	sub	sp, #8
   14dd0:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14dd2:	f240 33ec 	movw	r3, #1004	; 0x3ec
   14dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dda:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   14ddc:	2b01      	cmp	r3, #1
   14dde:	d105      	bne.n	14dec <estimator_update_state_infrared+0x20>
   14de0:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   14de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14de8:	681b      	ldr	r3, [r3, #0]
   14dea:	e004      	b.n	14df6 <estimator_update_state_infrared+0x2a>
   14dec:	f240 33f8 	movw	r3, #1016	; 0x3f8
   14df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14df4:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14df6:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   14df8:	f24b 1358 	movw	r3, #45400	; 0xb158
   14dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e00:	881b      	ldrh	r3, [r3, #0]
   14e02:	b21b      	sxth	r3, r3
   14e04:	4618      	mov	r0, r3
   14e06:	f003 f8ab 	bl	17f60 <__aeabi_i2f>
   14e0a:	4603      	mov	r3, r0
   14e0c:	4618      	mov	r0, r3
   14e0e:	6879      	ldr	r1, [r7, #4]
   14e10:	f003 f8fa 	bl	18008 <__aeabi_fmul>
   14e14:	4603      	mov	r3, r0
   14e16:	461a      	mov	r2, r3
   14e18:	f24b 4378 	movw	r3, #46200	; 0xb478
   14e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e20:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   14e22:	f24b 135a 	movw	r3, #45402	; 0xb15a
   14e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e2a:	881b      	ldrh	r3, [r3, #0]
   14e2c:	b21b      	sxth	r3, r3
   14e2e:	4618      	mov	r0, r3
   14e30:	f003 f896 	bl	17f60 <__aeabi_i2f>
   14e34:	4603      	mov	r3, r0
   14e36:	4618      	mov	r0, r3
   14e38:	6879      	ldr	r1, [r7, #4]
   14e3a:	f003 f8e5 	bl	18008 <__aeabi_fmul>
   14e3e:	4603      	mov	r3, r0
   14e40:	461a      	mov	r2, r3
   14e42:	f24b 4380 	movw	r3, #46208	; 0xb480
   14e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e4a:	601a      	str	r2, [r3, #0]
}
   14e4c:	3708      	adds	r7, #8
   14e4e:	46bd      	mov	sp, r7
   14e50:	bd80      	pop	{r7, pc}
   14e52:	bf00      	nop

00014e54 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   14e54:	b5b0      	push	{r4, r5, r7, lr}
   14e56:	b084      	sub	sp, #16
   14e58:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   14e5a:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
   14e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e62:	781b      	ldrb	r3, [r3, #0]
   14e64:	2b00      	cmp	r3, #0
   14e66:	f000 81e8 	beq.w	1523a <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   14e6a:	f24b 0328 	movw	r3, #45096	; 0xb028
   14e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e72:	681a      	ldr	r2, [r3, #0]
   14e74:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   14e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e7c:	681b      	ldr	r3, [r3, #0]
   14e7e:	4610      	mov	r0, r2
   14e80:	4619      	mov	r1, r3
   14e82:	f002 ffb7 	bl	17df4 <__aeabi_fsub>
   14e86:	4603      	mov	r3, r0
   14e88:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   14e8a:	68b8      	ldr	r0, [r7, #8]
   14e8c:	f002 fc28 	bl	176e0 <__aeabi_f2d>
   14e90:	4602      	mov	r2, r0
   14e92:	460b      	mov	r3, r1
   14e94:	4610      	mov	r0, r2
   14e96:	4619      	mov	r1, r3
   14e98:	a385      	add	r3, pc, #532	; (adr r3, 150b0 <estimator_update_ir_estim+0x25c>)
   14e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e9e:	f002 ff03 	bl	17ca8 <__aeabi_dcmpgt>
   14ea2:	4603      	mov	r3, r0
   14ea4:	2b00      	cmp	r3, #0
   14ea6:	d100      	bne.n	14eaa <estimator_update_ir_estim+0x56>
   14ea8:	e219      	b.n	152de <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   14eaa:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   14eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eb2:	681a      	ldr	r2, [r3, #0]
   14eb4:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   14eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ebc:	681b      	ldr	r3, [r3, #0]
   14ebe:	4610      	mov	r0, r2
   14ec0:	4619      	mov	r1, r3
   14ec2:	f002 ff97 	bl	17df4 <__aeabi_fsub>
   14ec6:	4603      	mov	r3, r0
   14ec8:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14eca:	e013      	b.n	14ef4 <estimator_update_ir_estim+0xa0>
   14ecc:	68f8      	ldr	r0, [r7, #12]
   14ece:	f002 fc07 	bl	176e0 <__aeabi_f2d>
   14ed2:	4602      	mov	r2, r0
   14ed4:	460b      	mov	r3, r1
   14ed6:	4610      	mov	r0, r2
   14ed8:	4619      	mov	r1, r3
   14eda:	a377      	add	r3, pc, #476	; (adr r3, 150b8 <estimator_update_ir_estim+0x264>)
   14edc:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ee0:	f002 fa9e 	bl	17420 <__aeabi_dsub>
   14ee4:	4602      	mov	r2, r0
   14ee6:	460b      	mov	r3, r1
   14ee8:	4610      	mov	r0, r2
   14eea:	4619      	mov	r1, r3
   14eec:	f002 ff2e 	bl	17d4c <__aeabi_d2f>
   14ef0:	4603      	mov	r3, r0
   14ef2:	60fb      	str	r3, [r7, #12]
   14ef4:	68f8      	ldr	r0, [r7, #12]
   14ef6:	f002 fbf3 	bl	176e0 <__aeabi_f2d>
   14efa:	4602      	mov	r2, r0
   14efc:	460b      	mov	r3, r1
   14efe:	4610      	mov	r0, r2
   14f00:	4619      	mov	r1, r3
   14f02:	a36f      	add	r3, pc, #444	; (adr r3, 150c0 <estimator_update_ir_estim+0x26c>)
   14f04:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f08:	f002 fece 	bl	17ca8 <__aeabi_dcmpgt>
   14f0c:	4603      	mov	r3, r0
   14f0e:	2b00      	cmp	r3, #0
   14f10:	d1dc      	bne.n	14ecc <estimator_update_ir_estim+0x78>
   14f12:	e013      	b.n	14f3c <estimator_update_ir_estim+0xe8>
   14f14:	68f8      	ldr	r0, [r7, #12]
   14f16:	f002 fbe3 	bl	176e0 <__aeabi_f2d>
   14f1a:	4602      	mov	r2, r0
   14f1c:	460b      	mov	r3, r1
   14f1e:	4610      	mov	r0, r2
   14f20:	4619      	mov	r1, r3
   14f22:	a365      	add	r3, pc, #404	; (adr r3, 150b8 <estimator_update_ir_estim+0x264>)
   14f24:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f28:	f002 fa7c 	bl	17424 <__adddf3>
   14f2c:	4602      	mov	r2, r0
   14f2e:	460b      	mov	r3, r1
   14f30:	4610      	mov	r0, r2
   14f32:	4619      	mov	r1, r3
   14f34:	f002 ff0a 	bl	17d4c <__aeabi_d2f>
   14f38:	4603      	mov	r3, r0
   14f3a:	60fb      	str	r3, [r7, #12]
   14f3c:	68f8      	ldr	r0, [r7, #12]
   14f3e:	f002 fbcf 	bl	176e0 <__aeabi_f2d>
   14f42:	4602      	mov	r2, r0
   14f44:	460b      	mov	r3, r1
   14f46:	4610      	mov	r0, r2
   14f48:	4619      	mov	r1, r3
   14f4a:	a35f      	add	r3, pc, #380	; (adr r3, 150c8 <estimator_update_ir_estim+0x274>)
   14f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f50:	f002 fe8c 	bl	17c6c <__aeabi_dcmplt>
   14f54:	4603      	mov	r3, r0
   14f56:	2b00      	cmp	r3, #0
   14f58:	d1dc      	bne.n	14f14 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   14f5a:	68f8      	ldr	r0, [r7, #12]
   14f5c:	68b9      	ldr	r1, [r7, #8]
   14f5e:	f003 f907 	bl	18170 <__aeabi_fdiv>
   14f62:	4603      	mov	r3, r0
   14f64:	4618      	mov	r0, r3
   14f66:	f002 fbbb 	bl	176e0 <__aeabi_f2d>
   14f6a:	4602      	mov	r2, r0
   14f6c:	460b      	mov	r3, r1
   14f6e:	4610      	mov	r0, r2
   14f70:	4619      	mov	r1, r3
   14f72:	f04f 0200 	mov.w	r2, #0
   14f76:	f04f 0300 	mov.w	r3, #0
   14f7a:	f2c4 0324 	movt	r3, #16420	; 0x4024
   14f7e:	f002 fc03 	bl	17788 <__aeabi_dmul>
   14f82:	4602      	mov	r2, r0
   14f84:	460b      	mov	r3, r1
   14f86:	4610      	mov	r0, r2
   14f88:	4619      	mov	r1, r3
   14f8a:	a351      	add	r3, pc, #324	; (adr r3, 150d0 <estimator_update_ir_estim+0x27c>)
   14f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f90:	f002 fd24 	bl	179dc <__aeabi_ddiv>
   14f94:	4602      	mov	r2, r0
   14f96:	460b      	mov	r3, r1
   14f98:	4610      	mov	r0, r2
   14f9a:	4619      	mov	r1, r3
   14f9c:	f002 fed6 	bl	17d4c <__aeabi_d2f>
   14fa0:	4603      	mov	r3, r0
   14fa2:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14fa4:	e013      	b.n	14fce <estimator_update_ir_estim+0x17a>
   14fa6:	68f8      	ldr	r0, [r7, #12]
   14fa8:	f002 fb9a 	bl	176e0 <__aeabi_f2d>
   14fac:	4602      	mov	r2, r0
   14fae:	460b      	mov	r3, r1
   14fb0:	4610      	mov	r0, r2
   14fb2:	4619      	mov	r1, r3
   14fb4:	a340      	add	r3, pc, #256	; (adr r3, 150b8 <estimator_update_ir_estim+0x264>)
   14fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   14fba:	f002 fa31 	bl	17420 <__aeabi_dsub>
   14fbe:	4602      	mov	r2, r0
   14fc0:	460b      	mov	r3, r1
   14fc2:	4610      	mov	r0, r2
   14fc4:	4619      	mov	r1, r3
   14fc6:	f002 fec1 	bl	17d4c <__aeabi_d2f>
   14fca:	4603      	mov	r3, r0
   14fcc:	60fb      	str	r3, [r7, #12]
   14fce:	68f8      	ldr	r0, [r7, #12]
   14fd0:	f002 fb86 	bl	176e0 <__aeabi_f2d>
   14fd4:	4602      	mov	r2, r0
   14fd6:	460b      	mov	r3, r1
   14fd8:	4610      	mov	r0, r2
   14fda:	4619      	mov	r1, r3
   14fdc:	a338      	add	r3, pc, #224	; (adr r3, 150c0 <estimator_update_ir_estim+0x26c>)
   14fde:	e9d3 2300 	ldrd	r2, r3, [r3]
   14fe2:	f002 fe61 	bl	17ca8 <__aeabi_dcmpgt>
   14fe6:	4603      	mov	r3, r0
   14fe8:	2b00      	cmp	r3, #0
   14fea:	d1dc      	bne.n	14fa6 <estimator_update_ir_estim+0x152>
   14fec:	e013      	b.n	15016 <estimator_update_ir_estim+0x1c2>
   14fee:	68f8      	ldr	r0, [r7, #12]
   14ff0:	f002 fb76 	bl	176e0 <__aeabi_f2d>
   14ff4:	4602      	mov	r2, r0
   14ff6:	460b      	mov	r3, r1
   14ff8:	4610      	mov	r0, r2
   14ffa:	4619      	mov	r1, r3
   14ffc:	a32e      	add	r3, pc, #184	; (adr r3, 150b8 <estimator_update_ir_estim+0x264>)
   14ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
   15002:	f002 fa0f 	bl	17424 <__adddf3>
   15006:	4602      	mov	r2, r0
   15008:	460b      	mov	r3, r1
   1500a:	4610      	mov	r0, r2
   1500c:	4619      	mov	r1, r3
   1500e:	f002 fe9d 	bl	17d4c <__aeabi_d2f>
   15012:	4603      	mov	r3, r0
   15014:	60fb      	str	r3, [r7, #12]
   15016:	68f8      	ldr	r0, [r7, #12]
   15018:	f002 fb62 	bl	176e0 <__aeabi_f2d>
   1501c:	4602      	mov	r2, r0
   1501e:	460b      	mov	r3, r1
   15020:	4610      	mov	r0, r2
   15022:	4619      	mov	r1, r3
   15024:	a328      	add	r3, pc, #160	; (adr r3, 150c8 <estimator_update_ir_estim+0x274>)
   15026:	e9d3 2300 	ldrd	r2, r3, [r3]
   1502a:	f002 fe1f 	bl	17c6c <__aeabi_dcmplt>
   1502e:	4603      	mov	r3, r0
   15030:	2b00      	cmp	r3, #0
   15032:	d1dc      	bne.n	14fee <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   15034:	f24b 1358 	movw	r3, #45400	; 0xb158
   15038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1503c:	881b      	ldrh	r3, [r3, #0]
   1503e:	b21b      	sxth	r3, r3
   15040:	4618      	mov	r0, r3
   15042:	f002 ff8d 	bl	17f60 <__aeabi_i2f>
   15046:	4602      	mov	r2, r0
   15048:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   1504c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15050:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   15052:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   15056:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1505a:	68fa      	ldr	r2, [r7, #12]
   1505c:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   1505e:	68f8      	ldr	r0, [r7, #12]
   15060:	f04f 0100 	mov.w	r1, #0
   15064:	f003 f96e 	bl	18344 <__aeabi_fcmplt>
   15068:	4603      	mov	r3, r0
   1506a:	2b00      	cmp	r3, #0
   1506c:	d003      	beq.n	15076 <estimator_update_ir_estim+0x222>
   1506e:	68fb      	ldr	r3, [r7, #12]
   15070:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   15074:	e000      	b.n	15078 <estimator_update_ir_estim+0x224>
   15076:	68fb      	ldr	r3, [r7, #12]
   15078:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   1507a:	6878      	ldr	r0, [r7, #4]
   1507c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15080:	f003 f960 	bl	18344 <__aeabi_fcmplt>
   15084:	4603      	mov	r3, r0
   15086:	2b00      	cmp	r3, #0
   15088:	d100      	bne.n	1508c <estimator_update_ir_estim+0x238>
   1508a:	e128      	b.n	152de <estimator_update_ir_estim+0x48a>
   1508c:	6878      	ldr	r0, [r7, #4]
   1508e:	f002 fb27 	bl	176e0 <__aeabi_f2d>
   15092:	4602      	mov	r2, r0
   15094:	460b      	mov	r3, r1
   15096:	4610      	mov	r0, r2
   15098:	4619      	mov	r1, r3
   1509a:	a30f      	add	r3, pc, #60	; (adr r3, 150d8 <estimator_update_ir_estim+0x284>)
   1509c:	e9d3 2300 	ldrd	r2, r3, [r3]
   150a0:	f002 fe02 	bl	17ca8 <__aeabi_dcmpgt>
   150a4:	4603      	mov	r3, r0
   150a6:	2b00      	cmp	r3, #0
   150a8:	d11a      	bne.n	150e0 <estimator_update_ir_estim+0x28c>
   150aa:	e118      	b.n	152de <estimator_update_ir_estim+0x48a>
   150ac:	f3af 8000 	nop.w
   150b0:	9999999a 	.word	0x9999999a
   150b4:	3fb99999 	.word	0x3fb99999
   150b8:	54442d18 	.word	0x54442d18
   150bc:	401921fb 	.word	0x401921fb
   150c0:	54442d18 	.word	0x54442d18
   150c4:	400921fb 	.word	0x400921fb
   150c8:	54442d18 	.word	0x54442d18
   150cc:	c00921fb 	.word	0xc00921fb
   150d0:	51eb851f 	.word	0x51eb851f
   150d4:	40239eb8 	.word	0x40239eb8
   150d8:	9999999a 	.word	0x9999999a
   150dc:	3fa99999 	.word	0x3fa99999
   150e0:	f240 33f0 	movw	r3, #1008	; 0x3f0
   150e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e8:	881b      	ldrh	r3, [r3, #0]
   150ea:	b21b      	sxth	r3, r3
   150ec:	425b      	negs	r3, r3
   150ee:	0fda      	lsrs	r2, r3, #31
   150f0:	4413      	add	r3, r2
   150f2:	105b      	asrs	r3, r3, #1
   150f4:	461a      	mov	r2, r3
   150f6:	f24b 1358 	movw	r3, #45400	; 0xb158
   150fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150fe:	881b      	ldrh	r3, [r3, #0]
   15100:	b21b      	sxth	r3, r3
   15102:	429a      	cmp	r2, r3
   15104:	f280 8098 	bge.w	15238 <estimator_update_ir_estim+0x3e4>
   15108:	f240 33f0 	movw	r3, #1008	; 0x3f0
   1510c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15110:	881b      	ldrh	r3, [r3, #0]
   15112:	b21b      	sxth	r3, r3
   15114:	0fda      	lsrs	r2, r3, #31
   15116:	4413      	add	r3, r2
   15118:	105b      	asrs	r3, r3, #1
   1511a:	b29a      	uxth	r2, r3
   1511c:	f24b 1358 	movw	r3, #45400	; 0xb158
   15120:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15124:	881b      	ldrh	r3, [r3, #0]
   15126:	b212      	sxth	r2, r2
   15128:	b21b      	sxth	r3, r3
   1512a:	429a      	cmp	r2, r3
   1512c:	f340 8084 	ble.w	15238 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15130:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   15134:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15138:	681a      	ldr	r2, [r3, #0]
   1513a:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   1513e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15142:	681b      	ldr	r3, [r3, #0]
   15144:	4610      	mov	r0, r2
   15146:	4619      	mov	r1, r3
   15148:	f002 ff5e 	bl	18008 <__aeabi_fmul>
   1514c:	4603      	mov	r3, r0
   1514e:	4618      	mov	r0, r3
   15150:	f002 fac6 	bl	176e0 <__aeabi_f2d>
   15154:	4604      	mov	r4, r0
   15156:	460d      	mov	r5, r1
   15158:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   1515c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15160:	681b      	ldr	r3, [r3, #0]
   15162:	4618      	mov	r0, r3
   15164:	f002 fabc 	bl	176e0 <__aeabi_f2d>
   15168:	4602      	mov	r2, r0
   1516a:	460b      	mov	r3, r1
   1516c:	4610      	mov	r0, r2
   1516e:	4619      	mov	r1, r3
   15170:	a367      	add	r3, pc, #412	; (adr r3, 15310 <estimator_update_ir_estim+0x4bc>)
   15172:	e9d3 2300 	ldrd	r2, r3, [r3]
   15176:	f002 fb07 	bl	17788 <__aeabi_dmul>
   1517a:	4602      	mov	r2, r0
   1517c:	460b      	mov	r3, r1
   1517e:	4620      	mov	r0, r4
   15180:	4629      	mov	r1, r5
   15182:	f002 f94f 	bl	17424 <__adddf3>
   15186:	4602      	mov	r2, r0
   15188:	460b      	mov	r3, r1
   1518a:	4610      	mov	r0, r2
   1518c:	4619      	mov	r1, r3
   1518e:	f002 fddd 	bl	17d4c <__aeabi_d2f>
   15192:	4602      	mov	r2, r0
   15194:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   15198:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1519c:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   1519e:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   151a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151a6:	681a      	ldr	r2, [r3, #0]
   151a8:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   151ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151b0:	681b      	ldr	r3, [r3, #0]
   151b2:	4610      	mov	r0, r2
   151b4:	4619      	mov	r1, r3
   151b6:	f002 ff27 	bl	18008 <__aeabi_fmul>
   151ba:	4603      	mov	r3, r0
   151bc:	4618      	mov	r0, r3
   151be:	f002 fa8f 	bl	176e0 <__aeabi_f2d>
   151c2:	4604      	mov	r4, r0
   151c4:	460d      	mov	r5, r1
   151c6:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   151ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ce:	681b      	ldr	r3, [r3, #0]
   151d0:	4618      	mov	r0, r3
   151d2:	f002 fa85 	bl	176e0 <__aeabi_f2d>
   151d6:	4602      	mov	r2, r0
   151d8:	460b      	mov	r3, r1
   151da:	4610      	mov	r0, r2
   151dc:	4619      	mov	r1, r3
   151de:	a34c      	add	r3, pc, #304	; (adr r3, 15310 <estimator_update_ir_estim+0x4bc>)
   151e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   151e4:	f002 fad0 	bl	17788 <__aeabi_dmul>
   151e8:	4602      	mov	r2, r0
   151ea:	460b      	mov	r3, r1
   151ec:	4620      	mov	r0, r4
   151ee:	4629      	mov	r1, r5
   151f0:	f002 f918 	bl	17424 <__adddf3>
   151f4:	4602      	mov	r2, r0
   151f6:	460b      	mov	r3, r1
   151f8:	4610      	mov	r0, r2
   151fa:	4619      	mov	r1, r3
   151fc:	f002 fda6 	bl	17d4c <__aeabi_d2f>
   15200:	4602      	mov	r2, r0
   15202:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   15206:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1520a:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   1520c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   15210:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15214:	681a      	ldr	r2, [r3, #0]
   15216:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   1521a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1521e:	681b      	ldr	r3, [r3, #0]
   15220:	4610      	mov	r0, r2
   15222:	4619      	mov	r1, r3
   15224:	f002 ffa4 	bl	18170 <__aeabi_fdiv>
   15228:	4603      	mov	r3, r0
   1522a:	461a      	mov	r2, r3
   1522c:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   15230:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15234:	601a      	str	r2, [r3, #0]
   15236:	e052      	b.n	152de <estimator_update_ir_estim+0x48a>
   15238:	e051      	b.n	152de <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   1523a:	f24b 43b8 	movw	r3, #46264	; 0xb4b8
   1523e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15242:	2201      	movs	r2, #1
   15244:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   15246:	f240 33f0 	movw	r3, #1008	; 0x3f0
   1524a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1524e:	881b      	ldrh	r3, [r3, #0]
   15250:	b21b      	sxth	r3, r3
   15252:	4618      	mov	r0, r3
   15254:	f002 fe84 	bl	17f60 <__aeabi_i2f>
   15258:	4603      	mov	r3, r0
   1525a:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   1525c:	6838      	ldr	r0, [r7, #0]
   1525e:	6839      	ldr	r1, [r7, #0]
   15260:	f002 fed2 	bl	18008 <__aeabi_fmul>
   15264:	4603      	mov	r3, r0
   15266:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15268:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   1526c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15270:	681b      	ldr	r3, [r3, #0]
   15272:	4618      	mov	r0, r3
   15274:	f002 fa34 	bl	176e0 <__aeabi_f2d>
   15278:	4602      	mov	r2, r0
   1527a:	460b      	mov	r3, r1
   1527c:	4610      	mov	r0, r2
   1527e:	4619      	mov	r1, r3
   15280:	f04f 0200 	mov.w	r2, #0
   15284:	f04f 0300 	mov.w	r3, #0
   15288:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1528c:	f002 fa7c 	bl	17788 <__aeabi_dmul>
   15290:	4602      	mov	r2, r0
   15292:	460b      	mov	r3, r1
   15294:	4614      	mov	r4, r2
   15296:	461d      	mov	r5, r3
   15298:	6838      	ldr	r0, [r7, #0]
   1529a:	f002 fa21 	bl	176e0 <__aeabi_f2d>
   1529e:	4602      	mov	r2, r0
   152a0:	460b      	mov	r3, r1
   152a2:	4620      	mov	r0, r4
   152a4:	4629      	mov	r1, r5
   152a6:	f002 fa6f 	bl	17788 <__aeabi_dmul>
   152aa:	4602      	mov	r2, r0
   152ac:	460b      	mov	r3, r1
   152ae:	4610      	mov	r0, r2
   152b0:	4619      	mov	r1, r3
   152b2:	f002 fd4b 	bl	17d4c <__aeabi_d2f>
   152b6:	4602      	mov	r2, r0
   152b8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   152bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152c0:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   152c2:	6838      	ldr	r0, [r7, #0]
   152c4:	f04f 0100 	mov.w	r1, #0
   152c8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   152cc:	f002 fe9c 	bl	18008 <__aeabi_fmul>
   152d0:	4603      	mov	r3, r0
   152d2:	461a      	mov	r2, r3
   152d4:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   152d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152dc:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   152de:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   152e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152e6:	681a      	ldr	r2, [r3, #0]
   152e8:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   152ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152f0:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   152f2:	f24b 0328 	movw	r3, #45096	; 0xb028
   152f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152fa:	681a      	ldr	r2, [r3, #0]
   152fc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   15300:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15304:	601a      	str	r2, [r3, #0]
}
   15306:	3710      	adds	r7, #16
   15308:	46bd      	mov	sp, r7
   1530a:	bdb0      	pop	{r4, r5, r7, pc}
   1530c:	f3af 8000 	nop.w
   15310:	d916872b 	.word	0xd916872b
   15314:	3feff7ce 	.word	0x3feff7ce

00015318 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15318:	b580      	push	{r7, lr}
   1531a:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   1531c:	f24b 034c 	movw	r3, #45132	; 0xb04c
   15320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15324:	781b      	ldrb	r3, [r3, #0]
   15326:	f003 0320 	and.w	r3, r3, #32
   1532a:	2b00      	cmp	r3, #0
   1532c:	d044      	beq.n	153b8 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   1532e:	f24b 0344 	movw	r3, #45124	; 0xb044
   15332:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15336:	681a      	ldr	r2, [r3, #0]
   15338:	f24b 436c 	movw	r3, #46188	; 0xb46c
   1533c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15340:	601a      	str	r2, [r3, #0]
   15342:	f24b 0348 	movw	r3, #45128	; 0xb048
   15346:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1534a:	681a      	ldr	r2, [r3, #0]
   1534c:	f24b 4370 	movw	r3, #46192	; 0xb470
   15350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15354:	601a      	str	r2, [r3, #0]
   15356:	f24b 032c 	movw	r3, #45100	; 0xb02c
   1535a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1535e:	681a      	ldr	r2, [r3, #0]
   15360:	f24b 4374 	movw	r3, #46196	; 0xb474
   15364:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15368:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   1536a:	f24b 0330 	movw	r3, #45104	; 0xb030
   1536e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15372:	681a      	ldr	r2, [r3, #0]
   15374:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   15378:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1537c:	601a      	str	r2, [r3, #0]
   1537e:	f24b 0338 	movw	r3, #45112	; 0xb038
   15382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15386:	681a      	ldr	r2, [r3, #0]
   15388:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   1538c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15390:	601a      	str	r2, [r3, #0]
   15392:	f24b 0334 	movw	r3, #45108	; 0xb034
   15396:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1539a:	681a      	ldr	r2, [r3, #0]
   1539c:	f24b 438c 	movw	r3, #46220	; 0xb48c
   153a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153a4:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   153a6:	f24b 439c 	movw	r3, #46236	; 0xb49c
   153aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153ae:	881b      	ldrh	r3, [r3, #0]
   153b0:	2b00      	cmp	r3, #0
   153b2:	d001      	beq.n	153b8 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   153b4:	f7ff fd4e 	bl	14e54 <estimator_update_ir_estim>
  }
}
   153b8:	bd80      	pop	{r7, pc}
   153ba:	bf00      	nop

000153bc <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   153bc:	b480      	push	{r7}
   153be:	af00      	add	r7, sp, #0
  
}
   153c0:	46bd      	mov	sp, r7
   153c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   153c6:	4770      	bx	lr

000153c8 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   153c8:	b5b0      	push	{r4, r5, r7, lr}
   153ca:	b082      	sub	sp, #8
   153cc:	af00      	add	r7, sp, #0
   153ce:	4603      	mov	r3, r0
   153d0:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   153d2:	f64a 639c 	movw	r3, #44700	; 0xae9c
   153d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153da:	781b      	ldrb	r3, [r3, #0]
   153dc:	2b01      	cmp	r3, #1
   153de:	f040 80e0 	bne.w	155a2 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   153e2:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   153e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153ea:	781b      	ldrb	r3, [r3, #0]
   153ec:	2b02      	cmp	r3, #2
   153ee:	d168      	bne.n	154c2 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   153f0:	79fb      	ldrb	r3, [r7, #7]
   153f2:	2b00      	cmp	r3, #0
   153f4:	d013      	beq.n	1541e <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   153f6:	f240 33f4 	movw	r3, #1012	; 0x3f4
   153fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153fe:	881a      	ldrh	r2, [r3, #0]
   15400:	f24b 43d2 	movw	r3, #46290	; 0xb4d2
   15404:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15408:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1540a:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   1540e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15412:	895a      	ldrh	r2, [r3, #10]
   15414:	f24b 43ce 	movw	r3, #46286	; 0xb4ce
   15418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1541c:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1541e:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   15422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15426:	895b      	ldrh	r3, [r3, #10]
   15428:	b21a      	sxth	r2, r3
   1542a:	f24b 43ce 	movw	r3, #46286	; 0xb4ce
   1542e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15432:	881b      	ldrh	r3, [r3, #0]
   15434:	b21b      	sxth	r3, r3
   15436:	1ad3      	subs	r3, r2, r3
   15438:	4618      	mov	r0, r3
   1543a:	f002 fd91 	bl	17f60 <__aeabi_i2f>
   1543e:	4603      	mov	r3, r0
   15440:	4618      	mov	r0, r3
   15442:	f002 f94d 	bl	176e0 <__aeabi_f2d>
   15446:	4602      	mov	r2, r0
   15448:	460b      	mov	r3, r1
   1544a:	4610      	mov	r0, r2
   1544c:	4619      	mov	r1, r3
   1544e:	f04f 0200 	mov.w	r2, #0
   15452:	f04f 0300 	mov.w	r3, #0
   15456:	f2c4 034e 	movt	r3, #16462	; 0x404e
   1545a:	f002 f995 	bl	17788 <__aeabi_dmul>
   1545e:	4602      	mov	r2, r0
   15460:	460b      	mov	r3, r1
   15462:	4610      	mov	r0, r2
   15464:	4619      	mov	r1, r3
   15466:	f04f 0200 	mov.w	r2, #0
   1546a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1546e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15472:	f002 fab3 	bl	179dc <__aeabi_ddiv>
   15476:	4602      	mov	r2, r0
   15478:	460b      	mov	r3, r1
   1547a:	4610      	mov	r0, r2
   1547c:	4619      	mov	r1, r3
   1547e:	f002 fc1d 	bl	17cbc <__aeabi_d2iz>
   15482:	4603      	mov	r3, r0
   15484:	b29b      	uxth	r3, r3
   15486:	b29a      	uxth	r2, r3
   15488:	f24b 43d2 	movw	r3, #46290	; 0xb4d2
   1548c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15490:	881b      	ldrh	r3, [r3, #0]
   15492:	b29b      	uxth	r3, r3
   15494:	4413      	add	r3, r2
   15496:	b29b      	uxth	r3, r3
   15498:	b29a      	uxth	r2, r3
   1549a:	f240 33f4 	movw	r3, #1012	; 0x3f4
   1549e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154a2:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   154a4:	f240 33f4 	movw	r3, #1012	; 0x3f4
   154a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154ac:	881b      	ldrh	r3, [r3, #0]
   154ae:	b21b      	sxth	r3, r3
   154b0:	4618      	mov	r0, r3
   154b2:	f002 fd55 	bl	17f60 <__aeabi_i2f>
   154b6:	4602      	mov	r2, r0
   154b8:	f64a 63a8 	movw	r3, #44712	; 0xaea8
   154bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154c0:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   154c2:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   154c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154ca:	781b      	ldrb	r3, [r3, #0]
   154cc:	2b02      	cmp	r3, #2
   154ce:	d168      	bne.n	155a2 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   154d0:	79fb      	ldrb	r3, [r7, #7]
   154d2:	2b00      	cmp	r3, #0
   154d4:	d013      	beq.n	154fe <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   154d6:	f240 33f2 	movw	r3, #1010	; 0x3f2
   154da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154de:	881a      	ldrh	r2, [r3, #0]
   154e0:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   154e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154e8:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   154ea:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   154ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154f2:	899a      	ldrh	r2, [r3, #12]
   154f4:	f24b 43d0 	movw	r3, #46288	; 0xb4d0
   154f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154fc:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   154fe:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   15502:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15506:	899b      	ldrh	r3, [r3, #12]
   15508:	b21a      	sxth	r2, r3
   1550a:	f24b 43d0 	movw	r3, #46288	; 0xb4d0
   1550e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15512:	881b      	ldrh	r3, [r3, #0]
   15514:	b21b      	sxth	r3, r3
   15516:	1ad3      	subs	r3, r2, r3
   15518:	4618      	mov	r0, r3
   1551a:	f002 fd21 	bl	17f60 <__aeabi_i2f>
   1551e:	4603      	mov	r3, r0
   15520:	4618      	mov	r0, r3
   15522:	f002 f8dd 	bl	176e0 <__aeabi_f2d>
   15526:	4602      	mov	r2, r0
   15528:	460b      	mov	r3, r1
   1552a:	4610      	mov	r0, r2
   1552c:	4619      	mov	r1, r3
   1552e:	f04f 0200 	mov.w	r2, #0
   15532:	f04f 0300 	mov.w	r3, #0
   15536:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   1553a:	f002 f925 	bl	17788 <__aeabi_dmul>
   1553e:	4602      	mov	r2, r0
   15540:	460b      	mov	r3, r1
   15542:	4610      	mov	r0, r2
   15544:	4619      	mov	r1, r3
   15546:	f04f 0200 	mov.w	r2, #0
   1554a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1554e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15552:	f002 fa43 	bl	179dc <__aeabi_ddiv>
   15556:	4602      	mov	r2, r0
   15558:	460b      	mov	r3, r1
   1555a:	4610      	mov	r0, r2
   1555c:	4619      	mov	r1, r3
   1555e:	f002 fbad 	bl	17cbc <__aeabi_d2iz>
   15562:	4603      	mov	r3, r0
   15564:	b29b      	uxth	r3, r3
   15566:	b29a      	uxth	r2, r3
   15568:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   1556c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15570:	881b      	ldrh	r3, [r3, #0]
   15572:	b29b      	uxth	r3, r3
   15574:	4413      	add	r3, r2
   15576:	b29b      	uxth	r3, r3
   15578:	b29a      	uxth	r2, r3
   1557a:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1557e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15582:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15584:	f240 33f2 	movw	r3, #1010	; 0x3f2
   15588:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1558c:	881b      	ldrh	r3, [r3, #0]
   1558e:	b21b      	sxth	r3, r3
   15590:	4618      	mov	r0, r3
   15592:	f002 fce5 	bl	17f60 <__aeabi_i2f>
   15596:	4602      	mov	r2, r0
   15598:	f64a 63ac 	movw	r3, #44716	; 0xaeac
   1559c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155a0:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   155a2:	f64a 639c 	movw	r3, #44700	; 0xae9c
   155a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155aa:	781b      	ldrb	r3, [r3, #0]
   155ac:	2b02      	cmp	r3, #2
   155ae:	f040 80da 	bne.w	15766 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   155b2:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   155b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155ba:	781b      	ldrb	r3, [r3, #0]
   155bc:	2b02      	cmp	r3, #2
   155be:	d165      	bne.n	1568c <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   155c0:	79fb      	ldrb	r3, [r7, #7]
   155c2:	2b00      	cmp	r3, #0
   155c4:	d013      	beq.n	155ee <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   155c6:	f240 4308 	movw	r3, #1032	; 0x408
   155ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155ce:	681a      	ldr	r2, [r3, #0]
   155d0:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   155d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155d8:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   155da:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   155de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155e2:	895a      	ldrh	r2, [r3, #10]
   155e4:	f24b 43ce 	movw	r3, #46286	; 0xb4ce
   155e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155ec:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   155ee:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   155f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155f6:	681b      	ldr	r3, [r3, #0]
   155f8:	4618      	mov	r0, r3
   155fa:	f002 f871 	bl	176e0 <__aeabi_f2d>
   155fe:	4604      	mov	r4, r0
   15600:	460d      	mov	r5, r1
   15602:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   15606:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1560a:	895b      	ldrh	r3, [r3, #10]
   1560c:	b21a      	sxth	r2, r3
   1560e:	f24b 43ce 	movw	r3, #46286	; 0xb4ce
   15612:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15616:	881b      	ldrh	r3, [r3, #0]
   15618:	b21b      	sxth	r3, r3
   1561a:	1ad3      	subs	r3, r2, r3
   1561c:	4618      	mov	r0, r3
   1561e:	f002 fc9f 	bl	17f60 <__aeabi_i2f>
   15622:	4603      	mov	r3, r0
   15624:	4618      	mov	r0, r3
   15626:	f002 f85b 	bl	176e0 <__aeabi_f2d>
   1562a:	4602      	mov	r2, r0
   1562c:	460b      	mov	r3, r1
   1562e:	4610      	mov	r0, r2
   15630:	4619      	mov	r1, r3
   15632:	a34f      	add	r3, pc, #316	; (adr r3, 15770 <inflight_calib+0x3a8>)
   15634:	e9d3 2300 	ldrd	r2, r3, [r3]
   15638:	f002 f8a6 	bl	17788 <__aeabi_dmul>
   1563c:	4602      	mov	r2, r0
   1563e:	460b      	mov	r3, r1
   15640:	4610      	mov	r0, r2
   15642:	4619      	mov	r1, r3
   15644:	f04f 0200 	mov.w	r2, #0
   15648:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1564c:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15650:	f002 f9c4 	bl	179dc <__aeabi_ddiv>
   15654:	4602      	mov	r2, r0
   15656:	460b      	mov	r3, r1
   15658:	4620      	mov	r0, r4
   1565a:	4629      	mov	r1, r5
   1565c:	f001 fee2 	bl	17424 <__adddf3>
   15660:	4602      	mov	r2, r0
   15662:	460b      	mov	r3, r1
   15664:	4610      	mov	r0, r2
   15666:	4619      	mov	r1, r3
   15668:	f002 fb70 	bl	17d4c <__aeabi_d2f>
   1566c:	4602      	mov	r2, r0
   1566e:	f240 4308 	movw	r3, #1032	; 0x408
   15672:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15676:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15678:	f240 4308 	movw	r3, #1032	; 0x408
   1567c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15680:	681a      	ldr	r2, [r3, #0]
   15682:	f64a 63a8 	movw	r3, #44712	; 0xaea8
   15686:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1568a:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1568c:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   15690:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15694:	781b      	ldrb	r3, [r3, #0]
   15696:	2b02      	cmp	r3, #2
   15698:	d165      	bne.n	15766 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   1569a:	79fb      	ldrb	r3, [r7, #7]
   1569c:	2b00      	cmp	r3, #0
   1569e:	d013      	beq.n	156c8 <inflight_calib+0x300>
        max_roll_init = max_roll;
   156a0:	f240 430c 	movw	r3, #1036	; 0x40c
   156a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156a8:	681a      	ldr	r2, [r3, #0]
   156aa:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   156ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156b2:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   156b4:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   156b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156bc:	899a      	ldrh	r2, [r3, #12]
   156be:	f24b 43d0 	movw	r3, #46288	; 0xb4d0
   156c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156c6:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   156c8:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   156cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156d0:	681b      	ldr	r3, [r3, #0]
   156d2:	4618      	mov	r0, r3
   156d4:	f002 f804 	bl	176e0 <__aeabi_f2d>
   156d8:	4604      	mov	r4, r0
   156da:	460d      	mov	r5, r1
   156dc:	f64a 73c0 	movw	r3, #44992	; 0xafc0
   156e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156e4:	899b      	ldrh	r3, [r3, #12]
   156e6:	b21a      	sxth	r2, r3
   156e8:	f24b 43d0 	movw	r3, #46288	; 0xb4d0
   156ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156f0:	881b      	ldrh	r3, [r3, #0]
   156f2:	b21b      	sxth	r3, r3
   156f4:	1ad3      	subs	r3, r2, r3
   156f6:	4618      	mov	r0, r3
   156f8:	f002 fc32 	bl	17f60 <__aeabi_i2f>
   156fc:	4603      	mov	r3, r0
   156fe:	4618      	mov	r0, r3
   15700:	f001 ffee 	bl	176e0 <__aeabi_f2d>
   15704:	4602      	mov	r2, r0
   15706:	460b      	mov	r3, r1
   15708:	4610      	mov	r0, r2
   1570a:	4619      	mov	r1, r3
   1570c:	a31a      	add	r3, pc, #104	; (adr r3, 15778 <inflight_calib+0x3b0>)
   1570e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15712:	f002 f839 	bl	17788 <__aeabi_dmul>
   15716:	4602      	mov	r2, r0
   15718:	460b      	mov	r3, r1
   1571a:	4610      	mov	r0, r2
   1571c:	4619      	mov	r1, r3
   1571e:	f04f 0200 	mov.w	r2, #0
   15722:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15726:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1572a:	f002 f957 	bl	179dc <__aeabi_ddiv>
   1572e:	4602      	mov	r2, r0
   15730:	460b      	mov	r3, r1
   15732:	4620      	mov	r0, r4
   15734:	4629      	mov	r1, r5
   15736:	f001 fe75 	bl	17424 <__adddf3>
   1573a:	4602      	mov	r2, r0
   1573c:	460b      	mov	r3, r1
   1573e:	4610      	mov	r0, r2
   15740:	4619      	mov	r1, r3
   15742:	f002 fb03 	bl	17d4c <__aeabi_d2f>
   15746:	4602      	mov	r2, r0
   15748:	f240 430c 	movw	r3, #1036	; 0x40c
   1574c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15750:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15752:	f240 430c 	movw	r3, #1036	; 0x40c
   15756:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1575a:	681a      	ldr	r2, [r3, #0]
   1575c:	f64a 63ac 	movw	r3, #44716	; 0xaeac
   15760:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15764:	601a      	str	r2, [r3, #0]
    }
  }
}
   15766:	3708      	adds	r7, #8
   15768:	46bd      	mov	sp, r7
   1576a:	bdb0      	pop	{r4, r5, r7, pc}
   1576c:	f3af 8000 	nop.w
   15770:	9999999a 	.word	0x9999999a
   15774:	3fb99999 	.word	0x3fb99999
   15778:	9999999a 	.word	0x9999999a
   1577c:	bfc99999 	.word	0xbfc99999

00015780 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15784:	b08e      	sub	sp, #56	; 0x38
   15786:	af00      	add	r7, sp, #0
   15788:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1578c:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15790:	a357      	add	r3, pc, #348	; (adr r3, 158f0 <pp_atan2+0x170>)
   15792:	e9d3 2300 	ldrd	r2, r3, [r3]
   15796:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   1579a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1579e:	f04f 0200 	mov.w	r2, #0
   157a2:	f04f 0300 	mov.w	r3, #0
   157a6:	f2c4 0308 	movt	r3, #16392	; 0x4008
   157aa:	f001 ffed 	bl	17788 <__aeabi_dmul>
   157ae:	4602      	mov	r2, r0
   157b0:	460b      	mov	r3, r1
   157b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   157b6:	e9d7 0100 	ldrd	r0, r1, [r7]
   157ba:	f04f 0200 	mov.w	r2, #0
   157be:	f04f 0300 	mov.w	r3, #0
   157c2:	f002 fa53 	bl	17c6c <__aeabi_dcmplt>
   157c6:	4603      	mov	r3, r0
   157c8:	2b00      	cmp	r3, #0
   157ca:	d009      	beq.n	157e0 <pp_atan2+0x60>
   157cc:	a14a      	add	r1, pc, #296	; (adr r1, 158f8 <pp_atan2+0x178>)
   157ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   157d2:	e9d7 2300 	ldrd	r2, r3, [r7]
   157d6:	f001 fe23 	bl	17420 <__aeabi_dsub>
   157da:	4602      	mov	r2, r0
   157dc:	460b      	mov	r3, r1
   157de:	e008      	b.n	157f2 <pp_atan2+0x72>
   157e0:	e9d7 0100 	ldrd	r0, r1, [r7]
   157e4:	a344      	add	r3, pc, #272	; (adr r3, 158f8 <pp_atan2+0x178>)
   157e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   157ea:	f001 fe1b 	bl	17424 <__adddf3>
   157ee:	4602      	mov	r2, r0
   157f0:	460b      	mov	r3, r1
   157f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   157f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   157fa:	f04f 0200 	mov.w	r2, #0
   157fe:	f04f 0300 	mov.w	r3, #0
   15802:	f002 fa51 	bl	17ca8 <__aeabi_dcmpgt>
   15806:	4603      	mov	r3, r0
   15808:	2b00      	cmp	r3, #0
   1580a:	d02a      	beq.n	15862 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   1580c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15814:	f001 fe04 	bl	17420 <__aeabi_dsub>
   15818:	4602      	mov	r2, r0
   1581a:	460b      	mov	r3, r1
   1581c:	4690      	mov	r8, r2
   1581e:	4699      	mov	r9, r3
   15820:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15824:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15828:	f001 fdfc 	bl	17424 <__adddf3>
   1582c:	4602      	mov	r2, r0
   1582e:	460b      	mov	r3, r1
   15830:	4640      	mov	r0, r8
   15832:	4649      	mov	r1, r9
   15834:	f002 f8d2 	bl	179dc <__aeabi_ddiv>
   15838:	4602      	mov	r2, r0
   1583a:	460b      	mov	r3, r1
   1583c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15840:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15844:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15848:	f001 ff9e 	bl	17788 <__aeabi_dmul>
   1584c:	4602      	mov	r2, r0
   1584e:	460b      	mov	r3, r1
   15850:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15854:	f001 fde4 	bl	17420 <__aeabi_dsub>
   15858:	4602      	mov	r2, r0
   1585a:	460b      	mov	r3, r1
   1585c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15860:	e029      	b.n	158b6 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15862:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1586a:	f001 fddb 	bl	17424 <__adddf3>
   1586e:	4602      	mov	r2, r0
   15870:	460b      	mov	r3, r1
   15872:	4690      	mov	r8, r2
   15874:	4699      	mov	r9, r3
   15876:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1587a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1587e:	f001 fdcf 	bl	17420 <__aeabi_dsub>
   15882:	4602      	mov	r2, r0
   15884:	460b      	mov	r3, r1
   15886:	4640      	mov	r0, r8
   15888:	4649      	mov	r1, r9
   1588a:	f002 f8a7 	bl	179dc <__aeabi_ddiv>
   1588e:	4602      	mov	r2, r0
   15890:	460b      	mov	r3, r1
   15892:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15896:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1589a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1589e:	f001 ff73 	bl	17788 <__aeabi_dmul>
   158a2:	4602      	mov	r2, r0
   158a4:	460b      	mov	r3, r1
   158a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   158aa:	f001 fdb9 	bl	17420 <__aeabi_dsub>
   158ae:	4602      	mov	r2, r0
   158b0:	460b      	mov	r3, r1
   158b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   158b6:	e9d7 0100 	ldrd	r0, r1, [r7]
   158ba:	f04f 0200 	mov.w	r2, #0
   158be:	f04f 0300 	mov.w	r3, #0
   158c2:	f002 f9d3 	bl	17c6c <__aeabi_dcmplt>
   158c6:	4603      	mov	r3, r0
   158c8:	2b00      	cmp	r3, #0
   158ca:	d004      	beq.n	158d6 <pp_atan2+0x156>
		return (-angle);
   158cc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   158ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   158d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   158d4:	e001      	b.n	158da <pp_atan2+0x15a>
	else
		return angle;
   158d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   158da:	4622      	mov	r2, r4
   158dc:	462b      	mov	r3, r5
}
   158de:	4610      	mov	r0, r2
   158e0:	4619      	mov	r1, r3
   158e2:	3738      	adds	r7, #56	; 0x38
   158e4:	46bd      	mov	sp, r7
   158e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   158ea:	bf00      	nop
   158ec:	f3af 8000 	nop.w
   158f0:	54442d18 	.word	0x54442d18
   158f4:	3fe921fb 	.word	0x3fe921fb
   158f8:	d9d7bdbb 	.word	0xd9d7bdbb
   158fc:	3ddb7cdf 	.word	0x3ddb7cdf

00015900 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15900:	b5b0      	push	{r4, r5, r7, lr}
   15902:	b08c      	sub	sp, #48	; 0x30
   15904:	af00      	add	r7, sp, #0
   15906:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   1590a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1590e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15912:	2301      	movs	r3, #1
   15914:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15916:	e00a      	b.n	1592e <pp_sin+0x2e>
   15918:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1591c:	a35a      	add	r3, pc, #360	; (adr r3, 15a88 <pp_sin+0x188>)
   1591e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15922:	f001 fd7f 	bl	17424 <__adddf3>
   15926:	4602      	mov	r2, r0
   15928:	460b      	mov	r3, r1
   1592a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1592e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15932:	a357      	add	r3, pc, #348	; (adr r3, 15a90 <pp_sin+0x190>)
   15934:	e9d3 2300 	ldrd	r2, r3, [r3]
   15938:	f002 f998 	bl	17c6c <__aeabi_dcmplt>
   1593c:	4603      	mov	r3, r0
   1593e:	2b00      	cmp	r3, #0
   15940:	d1ea      	bne.n	15918 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15942:	e00a      	b.n	1595a <pp_sin+0x5a>
   15944:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15948:	a34f      	add	r3, pc, #316	; (adr r3, 15a88 <pp_sin+0x188>)
   1594a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1594e:	f001 fd67 	bl	17420 <__aeabi_dsub>
   15952:	4602      	mov	r2, r0
   15954:	460b      	mov	r3, r1
   15956:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1595a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1595e:	a34e      	add	r3, pc, #312	; (adr r3, 15a98 <pp_sin+0x198>)
   15960:	e9d3 2300 	ldrd	r2, r3, [r3]
   15964:	f002 f9a0 	bl	17ca8 <__aeabi_dcmpgt>
   15968:	4603      	mov	r3, r0
   1596a:	2b00      	cmp	r3, #0
   1596c:	d1ea      	bne.n	15944 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   1596e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15972:	a34b      	add	r3, pc, #300	; (adr r3, 15aa0 <pp_sin+0x1a0>)
   15974:	e9d3 2300 	ldrd	r2, r3, [r3]
   15978:	f002 f996 	bl	17ca8 <__aeabi_dcmpgt>
   1597c:	4603      	mov	r3, r0
   1597e:	2b00      	cmp	r3, #0
   15980:	d00d      	beq.n	1599e <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15986:	a348      	add	r3, pc, #288	; (adr r3, 15aa8 <pp_sin+0x1a8>)
   15988:	e9d3 2300 	ldrd	r2, r3, [r3]
   1598c:	f001 fd48 	bl	17420 <__aeabi_dsub>
   15990:	4602      	mov	r2, r0
   15992:	460b      	mov	r3, r1
   15994:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15998:	f04f 33ff 	mov.w	r3, #4294967295
   1599c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   1599e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   159a2:	a343      	add	r3, pc, #268	; (adr r3, 15ab0 <pp_sin+0x1b0>)
   159a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   159a8:	f002 f818 	bl	179dc <__aeabi_ddiv>
   159ac:	4602      	mov	r2, r0
   159ae:	460b      	mov	r3, r1
   159b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
   159b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   159b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   159bc:	f001 fee4 	bl	17788 <__aeabi_dmul>
   159c0:	4602      	mov	r2, r0
   159c2:	460b      	mov	r3, r1
   159c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   159c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   159cc:	a33a      	add	r3, pc, #232	; (adr r3, 15ab8 <pp_sin+0x1b8>)
   159ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   159d2:	f001 fed9 	bl	17788 <__aeabi_dmul>
   159d6:	4602      	mov	r2, r0
   159d8:	460b      	mov	r3, r1
	      - .00467376557) * q2
   159da:	4610      	mov	r0, r2
   159dc:	4619      	mov	r1, r3
   159de:	a338      	add	r3, pc, #224	; (adr r3, 15ac0 <pp_sin+0x1c0>)
   159e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   159e4:	f001 fd1c 	bl	17420 <__aeabi_dsub>
   159e8:	4602      	mov	r2, r0
   159ea:	460b      	mov	r3, r1
   159ec:	4610      	mov	r0, r2
   159ee:	4619      	mov	r1, r3
   159f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   159f4:	f001 fec8 	bl	17788 <__aeabi_dmul>
   159f8:	4602      	mov	r2, r0
   159fa:	460b      	mov	r3, r1
	      + .07968967928) * q2
   159fc:	4610      	mov	r0, r2
   159fe:	4619      	mov	r1, r3
   15a00:	a331      	add	r3, pc, #196	; (adr r3, 15ac8 <pp_sin+0x1c8>)
   15a02:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a06:	f001 fd0d 	bl	17424 <__adddf3>
   15a0a:	4602      	mov	r2, r0
   15a0c:	460b      	mov	r3, r1
   15a0e:	4610      	mov	r0, r2
   15a10:	4619      	mov	r1, r3
   15a12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15a16:	f001 feb7 	bl	17788 <__aeabi_dmul>
   15a1a:	4602      	mov	r2, r0
   15a1c:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15a1e:	4610      	mov	r0, r2
   15a20:	4619      	mov	r1, r3
   15a22:	a32b      	add	r3, pc, #172	; (adr r3, 15ad0 <pp_sin+0x1d0>)
   15a24:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a28:	f001 fcfa 	bl	17420 <__aeabi_dsub>
   15a2c:	4602      	mov	r2, r0
   15a2e:	460b      	mov	r3, r1
   15a30:	4610      	mov	r0, r2
   15a32:	4619      	mov	r1, r3
   15a34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15a38:	f001 fea6 	bl	17788 <__aeabi_dmul>
   15a3c:	4602      	mov	r2, r0
   15a3e:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15a40:	4610      	mov	r0, r2
   15a42:	4619      	mov	r1, r3
   15a44:	a324      	add	r3, pc, #144	; (adr r3, 15ad8 <pp_sin+0x1d8>)
   15a46:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a4a:	f001 fceb 	bl	17424 <__adddf3>
   15a4e:	4602      	mov	r2, r0
   15a50:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15a52:	4610      	mov	r0, r2
   15a54:	4619      	mov	r1, r3
   15a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15a5a:	f001 fe95 	bl	17788 <__aeabi_dmul>
   15a5e:	4602      	mov	r2, r0
   15a60:	460b      	mov	r3, r1
   15a62:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a68:	2b00      	cmp	r3, #0
   15a6a:	da04      	bge.n	15a76 <pp_sin+0x176>
   15a6c:	68bc      	ldr	r4, [r7, #8]
   15a6e:	68fb      	ldr	r3, [r7, #12]
   15a70:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15a74:	e001      	b.n	15a7a <pp_sin+0x17a>
   15a76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15a7a:	4622      	mov	r2, r4
   15a7c:	462b      	mov	r3, r5
}
   15a7e:	4610      	mov	r0, r2
   15a80:	4619      	mov	r1, r3
   15a82:	3730      	adds	r7, #48	; 0x30
   15a84:	46bd      	mov	sp, r7
   15a86:	bdb0      	pop	{r4, r5, r7, pc}
   15a88:	54442d18 	.word	0x54442d18
   15a8c:	401921fb 	.word	0x401921fb
   15a90:	54442d18 	.word	0x54442d18
   15a94:	bff921fb 	.word	0xbff921fb
   15a98:	7f3321d2 	.word	0x7f3321d2
   15a9c:	4012d97c 	.word	0x4012d97c
   15aa0:	54442d18 	.word	0x54442d18
   15aa4:	3ff921fb 	.word	0x3ff921fb
   15aa8:	54442d18 	.word	0x54442d18
   15aac:	400921fb 	.word	0x400921fb
   15ab0:	5443d6f4 	.word	0x5443d6f4
   15ab4:	3ff921fb 	.word	0x3ff921fb
   15ab8:	48a890af 	.word	0x48a890af
   15abc:	3f23daf7 	.word	0x3f23daf7
   15ac0:	645b6d0e 	.word	0x645b6d0e
   15ac4:	3f7324cc 	.word	0x3f7324cc
   15ac8:	f65619a5 	.word	0xf65619a5
   15acc:	3fb4668a 	.word	0x3fb4668a
   15ad0:	16acf9cd 	.word	0x16acf9cd
   15ad4:	3fe4abbc 	.word	0x3fe4abbc
   15ad8:	520817f7 	.word	0x520817f7
   15adc:	3ff921fb 	.word	0x3ff921fb

00015ae0 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15ae0:	b480      	push	{r7}
   15ae2:	b083      	sub	sp, #12
   15ae4:	af00      	add	r7, sp, #0
   15ae6:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15aea:	4610      	mov	r0, r2
   15aec:	4619      	mov	r1, r3
   15aee:	370c      	adds	r7, #12
   15af0:	46bd      	mov	sp, r7
   15af2:	f85d 7b04 	ldr.w	r7, [sp], #4
   15af6:	4770      	bx	lr

00015af8 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15af8:	b480      	push	{r7}
   15afa:	b083      	sub	sp, #12
   15afc:	af00      	add	r7, sp, #0
   15afe:	4603      	mov	r3, r0
   15b00:	6039      	str	r1, [r7, #0]
   15b02:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15b04:	79fa      	ldrb	r2, [r7, #7]
   15b06:	f24b 43f0 	movw	r3, #46320	; 0xb4f0
   15b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b0e:	6839      	ldr	r1, [r7, #0]
   15b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15b14:	370c      	adds	r7, #12
   15b16:	46bd      	mov	sp, r7
   15b18:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b1c:	4770      	bx	lr
   15b1e:	bf00      	nop

00015b20 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15b20:	b480      	push	{r7}
   15b22:	b083      	sub	sp, #12
   15b24:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15b26:	f242 0315 	movw	r3, #8213	; 0x2015
   15b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b2e:	2200      	movs	r2, #0
   15b30:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15b32:	f242 0314 	movw	r3, #8212	; 0x2014
   15b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b3a:	2200      	movs	r2, #0
   15b3c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15b3e:	f242 0307 	movw	r3, #8199	; 0x2007
   15b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b46:	22c0      	movs	r2, #192	; 0xc0
   15b48:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15b4a:	f242 0306 	movw	r3, #8198	; 0x2006
   15b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b52:	22cf      	movs	r2, #207	; 0xcf
   15b54:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15b56:	2300      	movs	r3, #0
   15b58:	71fb      	strb	r3, [r7, #7]
   15b5a:	e00a      	b.n	15b72 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15b5c:	79fa      	ldrb	r2, [r7, #7]
   15b5e:	f24b 43f0 	movw	r3, #46320	; 0xb4f0
   15b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b66:	2100      	movs	r1, #0
   15b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15b6c:	79fb      	ldrb	r3, [r7, #7]
   15b6e:	3301      	adds	r3, #1
   15b70:	71fb      	strb	r3, [r7, #7]
   15b72:	79fb      	ldrb	r3, [r7, #7]
   15b74:	2b07      	cmp	r3, #7
   15b76:	d9f1      	bls.n	15b5c <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15b78:	370c      	adds	r7, #12
   15b7a:	46bd      	mov	sp, r7
   15b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b80:	4770      	bx	lr
   15b82:	bf00      	nop

00015b84 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15b84:	b480      	push	{r7}
   15b86:	b083      	sub	sp, #12
   15b88:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15b8a:	f242 0326 	movw	r3, #8230	; 0x2026
   15b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b92:	881b      	ldrh	r3, [r3, #0]
   15b94:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15b96:	f24b 534c 	movw	r3, #46412	; 0xb54c
   15b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b9e:	881b      	ldrh	r3, [r3, #0]
   15ba0:	88fa      	ldrh	r2, [r7, #6]
   15ba2:	1ad3      	subs	r3, r2, r3
   15ba4:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15ba6:	f24b 534c 	movw	r3, #46412	; 0xb54c
   15baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bae:	88fa      	ldrh	r2, [r7, #6]
   15bb0:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15bb2:	f24b 534e 	movw	r3, #46414	; 0xb54e
   15bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bba:	781b      	ldrb	r3, [r3, #0]
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	d11e      	bne.n	15bfe <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15bc0:	f242 0324 	movw	r3, #8228	; 0x2024
   15bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bc8:	781b      	ldrb	r3, [r3, #0]
   15bca:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15bcc:	f24b 534f 	movw	r3, #46415	; 0xb54f
   15bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bd4:	781b      	ldrb	r3, [r3, #0]
   15bd6:	78fa      	ldrb	r2, [r7, #3]
   15bd8:	1ad3      	subs	r3, r2, r3
   15bda:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15bdc:	f24b 534f 	movw	r3, #46415	; 0xb54f
   15be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15be4:	78fa      	ldrb	r2, [r7, #3]
   15be6:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15be8:	78bb      	ldrb	r3, [r7, #2]
   15bea:	2b6d      	cmp	r3, #109	; 0x6d
   15bec:	d906      	bls.n	15bfc <__vector_34+0x78>
      state = 1;
   15bee:	f24b 534e 	movw	r3, #46414	; 0xb54e
   15bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bf6:	2201      	movs	r2, #1
   15bf8:	701a      	strb	r2, [r3, #0]
   15bfa:	e053      	b.n	15ca4 <__vector_34+0x120>
   15bfc:	e052      	b.n	15ca4 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15bfe:	88bb      	ldrh	r3, [r7, #4]
   15c00:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15c04:	d304      	bcc.n	15c10 <__vector_34+0x8c>
   15c06:	88ba      	ldrh	r2, [r7, #4]
   15c08:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15c0c:	429a      	cmp	r2, r3
   15c0e:	d911      	bls.n	15c34 <__vector_34+0xb0>
      RestartPpmCycle();
   15c10:	f24b 534e 	movw	r3, #46414	; 0xb54e
   15c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c18:	2200      	movs	r2, #0
   15c1a:	701a      	strb	r2, [r3, #0]
   15c1c:	f242 0324 	movw	r3, #8228	; 0x2024
   15c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c24:	781b      	ldrb	r3, [r3, #0]
   15c26:	b2da      	uxtb	r2, r3
   15c28:	f24b 534f 	movw	r3, #46415	; 0xb54f
   15c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c30:	701a      	strb	r2, [r3, #0]
   15c32:	e038      	b.n	15ca6 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15c34:	f24b 534e 	movw	r3, #46414	; 0xb54e
   15c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c3c:	781b      	ldrb	r3, [r3, #0]
   15c3e:	1e5a      	subs	r2, r3, #1
   15c40:	f24b 5310 	movw	r3, #46352	; 0xb510
   15c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c48:	88b9      	ldrh	r1, [r7, #4]
   15c4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15c4e:	f24b 534e 	movw	r3, #46414	; 0xb54e
   15c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c56:	781b      	ldrb	r3, [r3, #0]
   15c58:	2b08      	cmp	r3, #8
   15c5a:	d917      	bls.n	15c8c <__vector_34+0x108>
      ppm_valid	= 1;
   15c5c:	f24b 534b 	movw	r3, #46411	; 0xb54b
   15c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c64:	2201      	movs	r2, #1
   15c66:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   15c68:	f24b 534e 	movw	r3, #46414	; 0xb54e
   15c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c70:	2200      	movs	r2, #0
   15c72:	701a      	strb	r2, [r3, #0]
   15c74:	f242 0324 	movw	r3, #8228	; 0x2024
   15c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c7c:	781b      	ldrb	r3, [r3, #0]
   15c7e:	b2da      	uxtb	r2, r3
   15c80:	f24b 534f 	movw	r3, #46415	; 0xb54f
   15c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c88:	701a      	strb	r2, [r3, #0]
   15c8a:	e00c      	b.n	15ca6 <__vector_34+0x122>
    } else 
      state++;
   15c8c:	f24b 534e 	movw	r3, #46414	; 0xb54e
   15c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c94:	781b      	ldrb	r3, [r3, #0]
   15c96:	3301      	adds	r3, #1
   15c98:	b2da      	uxtb	r2, r3
   15c9a:	f24b 534e 	movw	r3, #46414	; 0xb54e
   15c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ca2:	701a      	strb	r2, [r3, #0]
  }
  return;
   15ca4:	bf00      	nop
}
   15ca6:	370c      	adds	r7, #12
   15ca8:	46bd      	mov	sp, r7
   15caa:	f85d 7b04 	ldr.w	r7, [sp], #4
   15cae:	4770      	bx	lr

00015cb0 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15cb0:	b590      	push	{r4, r7, lr}
   15cb2:	b083      	sub	sp, #12
   15cb4:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15cb6:	f24b 5310 	movw	r3, #46352	; 0xb510
   15cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cbe:	881b      	ldrh	r3, [r3, #0]
   15cc0:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15cc4:	b29b      	uxth	r3, r3
   15cc6:	80fb      	strh	r3, [r7, #6]
   15cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15ccc:	4618      	mov	r0, r3
   15cce:	f002 f947 	bl	17f60 <__aeabi_i2f>
   15cd2:	4603      	mov	r3, r0
   15cd4:	4618      	mov	r0, r3
   15cd6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15cda:	f002 f995 	bl	18008 <__aeabi_fmul>
   15cde:	4603      	mov	r3, r0
   15ce0:	4618      	mov	r0, r3
   15ce2:	f002 fb57 	bl	18394 <__aeabi_f2iz>
   15ce6:	4603      	mov	r3, r0
   15ce8:	b29a      	uxth	r2, r3
   15cea:	f24b 5324 	movw	r3, #46372	; 0xb524
   15cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cf2:	801a      	strh	r2, [r3, #0]
   15cf4:	f24b 5324 	movw	r3, #46372	; 0xb524
   15cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cfc:	881b      	ldrh	r3, [r3, #0]
   15cfe:	b21b      	sxth	r3, r3
   15d00:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15d04:	dd07      	ble.n	15d16 <last_radio_from_ppm+0x66>
   15d06:	f24b 5324 	movw	r3, #46372	; 0xb524
   15d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d0e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15d12:	801a      	strh	r2, [r3, #0]
   15d14:	e00d      	b.n	15d32 <last_radio_from_ppm+0x82>
   15d16:	f24b 5324 	movw	r3, #46372	; 0xb524
   15d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d1e:	881b      	ldrh	r3, [r3, #0]
   15d20:	b21b      	sxth	r3, r3
   15d22:	2b00      	cmp	r3, #0
   15d24:	da05      	bge.n	15d32 <last_radio_from_ppm+0x82>
   15d26:	f24b 5324 	movw	r3, #46372	; 0xb524
   15d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d2e:	2200      	movs	r2, #0
   15d30:	801a      	strh	r2, [r3, #0]
   15d32:	f24b 5310 	movw	r3, #46352	; 0xb510
   15d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d3a:	885b      	ldrh	r3, [r3, #2]
   15d3c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15d40:	b29b      	uxth	r3, r3
   15d42:	80fb      	strh	r3, [r7, #6]
   15d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15d48:	4618      	mov	r0, r3
   15d4a:	f002 f909 	bl	17f60 <__aeabi_i2f>
   15d4e:	4603      	mov	r3, r0
   15d50:	4618      	mov	r0, r3
   15d52:	f002 fb1f 	bl	18394 <__aeabi_f2iz>
   15d56:	4603      	mov	r3, r0
   15d58:	b29a      	uxth	r2, r3
   15d5a:	f24b 5324 	movw	r3, #46372	; 0xb524
   15d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d62:	805a      	strh	r2, [r3, #2]
   15d64:	f24b 5324 	movw	r3, #46372	; 0xb524
   15d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d6c:	885b      	ldrh	r3, [r3, #2]
   15d6e:	b21b      	sxth	r3, r3
   15d70:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15d74:	dd07      	ble.n	15d86 <last_radio_from_ppm+0xd6>
   15d76:	f24b 5324 	movw	r3, #46372	; 0xb524
   15d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d7e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15d82:	805a      	strh	r2, [r3, #2]
   15d84:	e00f      	b.n	15da6 <last_radio_from_ppm+0xf6>
   15d86:	f24b 5324 	movw	r3, #46372	; 0xb524
   15d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d8e:	885b      	ldrh	r3, [r3, #2]
   15d90:	b21b      	sxth	r3, r3
   15d92:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15d96:	da06      	bge.n	15da6 <last_radio_from_ppm+0xf6>
   15d98:	f24b 5324 	movw	r3, #46372	; 0xb524
   15d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15da0:	f64d 2280 	movw	r2, #55936	; 0xda80
   15da4:	805a      	strh	r2, [r3, #2]
   15da6:	f24b 5310 	movw	r3, #46352	; 0xb510
   15daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dae:	889b      	ldrh	r3, [r3, #4]
   15db0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15db4:	b29b      	uxth	r3, r3
   15db6:	80fb      	strh	r3, [r7, #6]
   15db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15dbc:	4618      	mov	r0, r3
   15dbe:	f002 f8cf 	bl	17f60 <__aeabi_i2f>
   15dc2:	4603      	mov	r3, r0
   15dc4:	4618      	mov	r0, r3
   15dc6:	f002 fae5 	bl	18394 <__aeabi_f2iz>
   15dca:	4603      	mov	r3, r0
   15dcc:	b29a      	uxth	r2, r3
   15dce:	f24b 5324 	movw	r3, #46372	; 0xb524
   15dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dd6:	809a      	strh	r2, [r3, #4]
   15dd8:	f24b 5324 	movw	r3, #46372	; 0xb524
   15ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15de0:	889b      	ldrh	r3, [r3, #4]
   15de2:	b21b      	sxth	r3, r3
   15de4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15de8:	dd07      	ble.n	15dfa <last_radio_from_ppm+0x14a>
   15dea:	f24b 5324 	movw	r3, #46372	; 0xb524
   15dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15df2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15df6:	809a      	strh	r2, [r3, #4]
   15df8:	e00f      	b.n	15e1a <last_radio_from_ppm+0x16a>
   15dfa:	f24b 5324 	movw	r3, #46372	; 0xb524
   15dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e02:	889b      	ldrh	r3, [r3, #4]
   15e04:	b21b      	sxth	r3, r3
   15e06:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15e0a:	da06      	bge.n	15e1a <last_radio_from_ppm+0x16a>
   15e0c:	f24b 5324 	movw	r3, #46372	; 0xb524
   15e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e14:	f64d 2280 	movw	r2, #55936	; 0xda80
   15e18:	809a      	strh	r2, [r3, #4]
   15e1a:	f24b 5310 	movw	r3, #46352	; 0xb510
   15e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e22:	88db      	ldrh	r3, [r3, #6]
   15e24:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15e28:	b29b      	uxth	r3, r3
   15e2a:	80fb      	strh	r3, [r7, #6]
   15e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15e30:	4618      	mov	r0, r3
   15e32:	f002 f895 	bl	17f60 <__aeabi_i2f>
   15e36:	4603      	mov	r3, r0
   15e38:	4618      	mov	r0, r3
   15e3a:	f002 faab 	bl	18394 <__aeabi_f2iz>
   15e3e:	4603      	mov	r3, r0
   15e40:	b29a      	uxth	r2, r3
   15e42:	f24b 5324 	movw	r3, #46372	; 0xb524
   15e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e4a:	80da      	strh	r2, [r3, #6]
   15e4c:	f24b 5324 	movw	r3, #46372	; 0xb524
   15e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e54:	88db      	ldrh	r3, [r3, #6]
   15e56:	b21b      	sxth	r3, r3
   15e58:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15e5c:	dd07      	ble.n	15e6e <last_radio_from_ppm+0x1be>
   15e5e:	f24b 5324 	movw	r3, #46372	; 0xb524
   15e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e66:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15e6a:	80da      	strh	r2, [r3, #6]
   15e6c:	e00f      	b.n	15e8e <last_radio_from_ppm+0x1de>
   15e6e:	f24b 5324 	movw	r3, #46372	; 0xb524
   15e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e76:	88db      	ldrh	r3, [r3, #6]
   15e78:	b21b      	sxth	r3, r3
   15e7a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15e7e:	da06      	bge.n	15e8e <last_radio_from_ppm+0x1de>
   15e80:	f24b 5324 	movw	r3, #46372	; 0xb524
   15e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e88:	f64d 2280 	movw	r2, #55936	; 0xda80
   15e8c:	80da      	strh	r2, [r3, #6]
   15e8e:	f24b 5310 	movw	r3, #46352	; 0xb510
   15e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e96:	891b      	ldrh	r3, [r3, #8]
   15e98:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15e9c:	b29b      	uxth	r3, r3
   15e9e:	80fb      	strh	r3, [r7, #6]
   15ea0:	f24b 5338 	movw	r3, #46392	; 0xb538
   15ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ea8:	891b      	ldrh	r3, [r3, #8]
   15eaa:	b21b      	sxth	r3, r3
   15eac:	4618      	mov	r0, r3
   15eae:	f002 f857 	bl	17f60 <__aeabi_i2f>
   15eb2:	4604      	mov	r4, r0
   15eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15eb8:	4618      	mov	r0, r3
   15eba:	f002 f851 	bl	17f60 <__aeabi_i2f>
   15ebe:	4603      	mov	r3, r0
   15ec0:	4618      	mov	r0, r3
   15ec2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15ec6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15eca:	f002 f89d 	bl	18008 <__aeabi_fmul>
   15ece:	4603      	mov	r3, r0
   15ed0:	4620      	mov	r0, r4
   15ed2:	4619      	mov	r1, r3
   15ed4:	f001 ff90 	bl	17df8 <__addsf3>
   15ed8:	4603      	mov	r3, r0
   15eda:	4618      	mov	r0, r3
   15edc:	f002 fa5a 	bl	18394 <__aeabi_f2iz>
   15ee0:	4603      	mov	r3, r0
   15ee2:	b29a      	uxth	r2, r3
   15ee4:	f24b 5338 	movw	r3, #46392	; 0xb538
   15ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eec:	811a      	strh	r2, [r3, #8]
   15eee:	f24b 5310 	movw	r3, #46352	; 0xb510
   15ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ef6:	895b      	ldrh	r3, [r3, #10]
   15ef8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15efc:	b29b      	uxth	r3, r3
   15efe:	80fb      	strh	r3, [r7, #6]
   15f00:	f24b 5338 	movw	r3, #46392	; 0xb538
   15f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f08:	895b      	ldrh	r3, [r3, #10]
   15f0a:	b21b      	sxth	r3, r3
   15f0c:	4618      	mov	r0, r3
   15f0e:	f002 f827 	bl	17f60 <__aeabi_i2f>
   15f12:	4604      	mov	r4, r0
   15f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15f18:	4618      	mov	r0, r3
   15f1a:	f002 f821 	bl	17f60 <__aeabi_i2f>
   15f1e:	4603      	mov	r3, r0
   15f20:	4618      	mov	r0, r3
   15f22:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15f26:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15f2a:	f002 f86d 	bl	18008 <__aeabi_fmul>
   15f2e:	4603      	mov	r3, r0
   15f30:	4620      	mov	r0, r4
   15f32:	4619      	mov	r1, r3
   15f34:	f001 ff60 	bl	17df8 <__addsf3>
   15f38:	4603      	mov	r3, r0
   15f3a:	4618      	mov	r0, r3
   15f3c:	f002 fa2a 	bl	18394 <__aeabi_f2iz>
   15f40:	4603      	mov	r3, r0
   15f42:	b29a      	uxth	r2, r3
   15f44:	f24b 5338 	movw	r3, #46392	; 0xb538
   15f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f4c:	815a      	strh	r2, [r3, #10]
   15f4e:	f24b 5310 	movw	r3, #46352	; 0xb510
   15f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f56:	899b      	ldrh	r3, [r3, #12]
   15f58:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15f5c:	b29b      	uxth	r3, r3
   15f5e:	80fb      	strh	r3, [r7, #6]
   15f60:	f24b 5338 	movw	r3, #46392	; 0xb538
   15f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f68:	899b      	ldrh	r3, [r3, #12]
   15f6a:	b21b      	sxth	r3, r3
   15f6c:	4618      	mov	r0, r3
   15f6e:	f001 fff7 	bl	17f60 <__aeabi_i2f>
   15f72:	4604      	mov	r4, r0
   15f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15f78:	4618      	mov	r0, r3
   15f7a:	f001 fff1 	bl	17f60 <__aeabi_i2f>
   15f7e:	4603      	mov	r3, r0
   15f80:	4618      	mov	r0, r3
   15f82:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15f86:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15f8a:	f002 f83d 	bl	18008 <__aeabi_fmul>
   15f8e:	4603      	mov	r3, r0
   15f90:	4620      	mov	r0, r4
   15f92:	4619      	mov	r1, r3
   15f94:	f001 ff30 	bl	17df8 <__addsf3>
   15f98:	4603      	mov	r3, r0
   15f9a:	4618      	mov	r0, r3
   15f9c:	f002 f9fa 	bl	18394 <__aeabi_f2iz>
   15fa0:	4603      	mov	r3, r0
   15fa2:	b29a      	uxth	r2, r3
   15fa4:	f24b 5338 	movw	r3, #46392	; 0xb538
   15fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fac:	819a      	strh	r2, [r3, #12]
   15fae:	f24b 5310 	movw	r3, #46352	; 0xb510
   15fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fb6:	89db      	ldrh	r3, [r3, #14]
   15fb8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15fbc:	b29b      	uxth	r3, r3
   15fbe:	80fb      	strh	r3, [r7, #6]
   15fc0:	f24b 5338 	movw	r3, #46392	; 0xb538
   15fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fc8:	89db      	ldrh	r3, [r3, #14]
   15fca:	b21b      	sxth	r3, r3
   15fcc:	4618      	mov	r0, r3
   15fce:	f001 ffc7 	bl	17f60 <__aeabi_i2f>
   15fd2:	4604      	mov	r4, r0
   15fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15fd8:	4618      	mov	r0, r3
   15fda:	f001 ffc1 	bl	17f60 <__aeabi_i2f>
   15fde:	4603      	mov	r3, r0
   15fe0:	4618      	mov	r0, r3
   15fe2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15fe6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15fea:	f002 f80d 	bl	18008 <__aeabi_fmul>
   15fee:	4603      	mov	r3, r0
   15ff0:	4620      	mov	r0, r4
   15ff2:	4619      	mov	r1, r3
   15ff4:	f001 ff00 	bl	17df8 <__addsf3>
   15ff8:	4603      	mov	r3, r0
   15ffa:	4618      	mov	r0, r3
   15ffc:	f002 f9ca 	bl	18394 <__aeabi_f2iz>
   16000:	4603      	mov	r3, r0
   16002:	b29a      	uxth	r2, r3
   16004:	f24b 5338 	movw	r3, #46392	; 0xb538
   16008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1600c:	81da      	strh	r2, [r3, #14]
   1600e:	f24b 5310 	movw	r3, #46352	; 0xb510
   16012:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16016:	8a1b      	ldrh	r3, [r3, #16]
   16018:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1601c:	b29b      	uxth	r3, r3
   1601e:	80fb      	strh	r3, [r7, #6]
   16020:	f24b 5338 	movw	r3, #46392	; 0xb538
   16024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16028:	8a1b      	ldrh	r3, [r3, #16]
   1602a:	b21b      	sxth	r3, r3
   1602c:	4618      	mov	r0, r3
   1602e:	f001 ff97 	bl	17f60 <__aeabi_i2f>
   16032:	4604      	mov	r4, r0
   16034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16038:	4618      	mov	r0, r3
   1603a:	f001 ff91 	bl	17f60 <__aeabi_i2f>
   1603e:	4603      	mov	r3, r0
   16040:	4618      	mov	r0, r3
   16042:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16046:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1604a:	f001 ffdd 	bl	18008 <__aeabi_fmul>
   1604e:	4603      	mov	r3, r0
   16050:	4620      	mov	r0, r4
   16052:	4619      	mov	r1, r3
   16054:	f001 fed0 	bl	17df8 <__addsf3>
   16058:	4603      	mov	r3, r0
   1605a:	4618      	mov	r0, r3
   1605c:	f002 f99a 	bl	18394 <__aeabi_f2iz>
   16060:	4603      	mov	r3, r0
   16062:	b29a      	uxth	r2, r3
   16064:	f24b 5338 	movw	r3, #46392	; 0xb538
   16068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1606c:	821a      	strh	r2, [r3, #16]
   1606e:	f24b 5350 	movw	r3, #46416	; 0xb550
   16072:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16076:	781b      	ldrb	r3, [r3, #0]
   16078:	3301      	adds	r3, #1
   1607a:	b2da      	uxtb	r2, r3
   1607c:	f24b 5350 	movw	r3, #46416	; 0xb550
   16080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16084:	701a      	strb	r2, [r3, #0]
   16086:	f24b 5350 	movw	r3, #46416	; 0xb550
   1608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1608e:	781b      	ldrb	r3, [r3, #0]
   16090:	2b0a      	cmp	r3, #10
   16092:	f040 8101 	bne.w	16298 <last_radio_from_ppm+0x5e8>
   16096:	f24b 5350 	movw	r3, #46416	; 0xb550
   1609a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1609e:	2200      	movs	r2, #0
   160a0:	701a      	strb	r2, [r3, #0]
   160a2:	f24b 5338 	movw	r3, #46392	; 0xb538
   160a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160aa:	891a      	ldrh	r2, [r3, #8]
   160ac:	f24b 5324 	movw	r3, #46372	; 0xb524
   160b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160b4:	811a      	strh	r2, [r3, #8]
   160b6:	f24b 5338 	movw	r3, #46392	; 0xb538
   160ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160be:	2200      	movs	r2, #0
   160c0:	811a      	strh	r2, [r3, #8]
   160c2:	f24b 5324 	movw	r3, #46372	; 0xb524
   160c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160ca:	891b      	ldrh	r3, [r3, #8]
   160cc:	b21b      	sxth	r3, r3
   160ce:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   160d2:	dd07      	ble.n	160e4 <last_radio_from_ppm+0x434>
   160d4:	f24b 5324 	movw	r3, #46372	; 0xb524
   160d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   160e0:	811a      	strh	r2, [r3, #8]
   160e2:	e00f      	b.n	16104 <last_radio_from_ppm+0x454>
   160e4:	f24b 5324 	movw	r3, #46372	; 0xb524
   160e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160ec:	891b      	ldrh	r3, [r3, #8]
   160ee:	b21b      	sxth	r3, r3
   160f0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   160f4:	da06      	bge.n	16104 <last_radio_from_ppm+0x454>
   160f6:	f24b 5324 	movw	r3, #46372	; 0xb524
   160fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160fe:	f64d 2280 	movw	r2, #55936	; 0xda80
   16102:	811a      	strh	r2, [r3, #8]
   16104:	f24b 5338 	movw	r3, #46392	; 0xb538
   16108:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1610c:	895a      	ldrh	r2, [r3, #10]
   1610e:	f24b 5324 	movw	r3, #46372	; 0xb524
   16112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16116:	815a      	strh	r2, [r3, #10]
   16118:	f24b 5338 	movw	r3, #46392	; 0xb538
   1611c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16120:	2200      	movs	r2, #0
   16122:	815a      	strh	r2, [r3, #10]
   16124:	f24b 5324 	movw	r3, #46372	; 0xb524
   16128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1612c:	895b      	ldrh	r3, [r3, #10]
   1612e:	b21b      	sxth	r3, r3
   16130:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16134:	dd07      	ble.n	16146 <last_radio_from_ppm+0x496>
   16136:	f24b 5324 	movw	r3, #46372	; 0xb524
   1613a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1613e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16142:	815a      	strh	r2, [r3, #10]
   16144:	e00f      	b.n	16166 <last_radio_from_ppm+0x4b6>
   16146:	f24b 5324 	movw	r3, #46372	; 0xb524
   1614a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1614e:	895b      	ldrh	r3, [r3, #10]
   16150:	b21b      	sxth	r3, r3
   16152:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16156:	da06      	bge.n	16166 <last_radio_from_ppm+0x4b6>
   16158:	f24b 5324 	movw	r3, #46372	; 0xb524
   1615c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16160:	f64d 2280 	movw	r2, #55936	; 0xda80
   16164:	815a      	strh	r2, [r3, #10]
   16166:	f24b 5338 	movw	r3, #46392	; 0xb538
   1616a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1616e:	899a      	ldrh	r2, [r3, #12]
   16170:	f24b 5324 	movw	r3, #46372	; 0xb524
   16174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16178:	819a      	strh	r2, [r3, #12]
   1617a:	f24b 5338 	movw	r3, #46392	; 0xb538
   1617e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16182:	2200      	movs	r2, #0
   16184:	819a      	strh	r2, [r3, #12]
   16186:	f24b 5324 	movw	r3, #46372	; 0xb524
   1618a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1618e:	899b      	ldrh	r3, [r3, #12]
   16190:	b21b      	sxth	r3, r3
   16192:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16196:	dd07      	ble.n	161a8 <last_radio_from_ppm+0x4f8>
   16198:	f24b 5324 	movw	r3, #46372	; 0xb524
   1619c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   161a4:	819a      	strh	r2, [r3, #12]
   161a6:	e00f      	b.n	161c8 <last_radio_from_ppm+0x518>
   161a8:	f24b 5324 	movw	r3, #46372	; 0xb524
   161ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161b0:	899b      	ldrh	r3, [r3, #12]
   161b2:	b21b      	sxth	r3, r3
   161b4:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   161b8:	da06      	bge.n	161c8 <last_radio_from_ppm+0x518>
   161ba:	f24b 5324 	movw	r3, #46372	; 0xb524
   161be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161c2:	f64d 2280 	movw	r2, #55936	; 0xda80
   161c6:	819a      	strh	r2, [r3, #12]
   161c8:	f24b 5338 	movw	r3, #46392	; 0xb538
   161cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161d0:	89da      	ldrh	r2, [r3, #14]
   161d2:	f24b 5324 	movw	r3, #46372	; 0xb524
   161d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161da:	81da      	strh	r2, [r3, #14]
   161dc:	f24b 5338 	movw	r3, #46392	; 0xb538
   161e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161e4:	2200      	movs	r2, #0
   161e6:	81da      	strh	r2, [r3, #14]
   161e8:	f24b 5324 	movw	r3, #46372	; 0xb524
   161ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161f0:	89db      	ldrh	r3, [r3, #14]
   161f2:	b21b      	sxth	r3, r3
   161f4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161f8:	dd07      	ble.n	1620a <last_radio_from_ppm+0x55a>
   161fa:	f24b 5324 	movw	r3, #46372	; 0xb524
   161fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16202:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16206:	81da      	strh	r2, [r3, #14]
   16208:	e00f      	b.n	1622a <last_radio_from_ppm+0x57a>
   1620a:	f24b 5324 	movw	r3, #46372	; 0xb524
   1620e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16212:	89db      	ldrh	r3, [r3, #14]
   16214:	b21b      	sxth	r3, r3
   16216:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1621a:	da06      	bge.n	1622a <last_radio_from_ppm+0x57a>
   1621c:	f24b 5324 	movw	r3, #46372	; 0xb524
   16220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16224:	f64d 2280 	movw	r2, #55936	; 0xda80
   16228:	81da      	strh	r2, [r3, #14]
   1622a:	f24b 5338 	movw	r3, #46392	; 0xb538
   1622e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16232:	8a1a      	ldrh	r2, [r3, #16]
   16234:	f24b 5324 	movw	r3, #46372	; 0xb524
   16238:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1623c:	821a      	strh	r2, [r3, #16]
   1623e:	f24b 5338 	movw	r3, #46392	; 0xb538
   16242:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16246:	2200      	movs	r2, #0
   16248:	821a      	strh	r2, [r3, #16]
   1624a:	f24b 5324 	movw	r3, #46372	; 0xb524
   1624e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16252:	8a1b      	ldrh	r3, [r3, #16]
   16254:	b21b      	sxth	r3, r3
   16256:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1625a:	dd07      	ble.n	1626c <last_radio_from_ppm+0x5bc>
   1625c:	f24b 5324 	movw	r3, #46372	; 0xb524
   16260:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16264:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16268:	821a      	strh	r2, [r3, #16]
   1626a:	e00f      	b.n	1628c <last_radio_from_ppm+0x5dc>
   1626c:	f24b 5324 	movw	r3, #46372	; 0xb524
   16270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16274:	8a1b      	ldrh	r3, [r3, #16]
   16276:	b21b      	sxth	r3, r3
   16278:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1627c:	da06      	bge.n	1628c <last_radio_from_ppm+0x5dc>
   1627e:	f24b 5324 	movw	r3, #46372	; 0xb524
   16282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16286:	f64d 2280 	movw	r2, #55936	; 0xda80
   1628a:	821a      	strh	r2, [r3, #16]
   1628c:	f24b 534a 	movw	r3, #46410	; 0xb54a
   16290:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16294:	2201      	movs	r2, #1
   16296:	701a      	strb	r2, [r3, #0]
}
   16298:	370c      	adds	r7, #12
   1629a:	46bd      	mov	sp, r7
   1629c:	bd90      	pop	{r4, r7, pc}
   1629e:	bf00      	nop

000162a0 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   162a0:	b480      	push	{r7}
   162a2:	af00      	add	r7, sp, #0
  idx_buf = 0;
   162a4:	f24b 5384 	movw	r3, #46468	; 0xb584
   162a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162ac:	2200      	movs	r2, #0
   162ae:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   162b0:	f24b 5385 	movw	r3, #46469	; 0xb585
   162b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162b8:	2200      	movs	r2, #0
   162ba:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   162bc:	f24b 5384 	movw	r3, #46468	; 0xb584
   162c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162c4:	781b      	ldrb	r3, [r3, #0]
   162c6:	b2db      	uxtb	r3, r3
   162c8:	461a      	mov	r2, r3
   162ca:	f24b 536c 	movw	r3, #46444	; 0xb56c
   162ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162d2:	4413      	add	r3, r2
   162d4:	781a      	ldrb	r2, [r3, #0]
   162d6:	f24b 5386 	movw	r3, #46470	; 0xb586
   162da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162de:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   162e0:	f242 030f 	movw	r3, #8207	; 0x200f
   162e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162e8:	f24b 5286 	movw	r2, #46470	; 0xb586
   162ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   162f0:	7812      	ldrb	r2, [r2, #0]
   162f2:	b2d2      	uxtb	r2, r2
   162f4:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   162f6:	f24b 5382 	movw	r3, #46466	; 0xb582
   162fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162fe:	2200      	movs	r2, #0
   16300:	701a      	strb	r2, [r3, #0]
}
   16302:	46bd      	mov	sp, r7
   16304:	f85d 7b04 	ldr.w	r7, [sp], #4
   16308:	4770      	bx	lr
   1630a:	bf00      	nop

0001630c <fbw_spi_init>:

void fbw_spi_init(void) {
   1630c:	b480      	push	{r7}
   1630e:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16310:	f24b 536c 	movw	r3, #46444	; 0xb56c
   16314:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16318:	2200      	movs	r2, #0
   1631a:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   1631c:	f24b 536c 	movw	r3, #46444	; 0xb56c
   16320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16324:	2200      	movs	r2, #0
   16326:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16328:	f242 0317 	movw	r3, #8215	; 0x2017
   1632c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16330:	f242 0217 	movw	r2, #8215	; 0x2017
   16334:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16338:	7812      	ldrb	r2, [r2, #0]
   1633a:	b2d2      	uxtb	r2, r2
   1633c:	f042 0210 	orr.w	r2, r2, #16
   16340:	b2d2      	uxtb	r2, r2
   16342:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   16344:	f242 030d 	movw	r3, #8205	; 0x200d
   16348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1634c:	2240      	movs	r2, #64	; 0x40
   1634e:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16350:	f242 030d 	movw	r3, #8205	; 0x200d
   16354:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16358:	f242 020d 	movw	r2, #8205	; 0x200d
   1635c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16360:	7812      	ldrb	r2, [r2, #0]
   16362:	b2d2      	uxtb	r2, r2
   16364:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16368:	b2d2      	uxtb	r2, r2
   1636a:	701a      	strb	r2, [r3, #0]
}
   1636c:	46bd      	mov	sp, r7
   1636e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16372:	4770      	bx	lr
   16374:	0000      	movs	r0, r0
	...

00016378 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16378:	b480      	push	{r7}
   1637a:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   1637c:	f242 032f 	movw	r3, #8239	; 0x202f
   16380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16384:	2200      	movs	r2, #0
   16386:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16388:	f242 032e 	movw	r3, #8238	; 0x202e
   1638c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16390:	2201      	movs	r2, #1
   16392:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   16394:	f242 0325 	movw	r3, #8229	; 0x2025
   16398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1639c:	2207      	movs	r2, #7
   1639e:	701a      	strb	r2, [r3, #0]
}
   163a0:	46bd      	mov	sp, r7
   163a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   163a6:	4770      	bx	lr

000163a8 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   163a8:	b480      	push	{r7}
   163aa:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   163ac:	f242 032e 	movw	r3, #8238	; 0x202e
   163b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163b4:	f242 022e 	movw	r2, #8238	; 0x202e
   163b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   163bc:	7812      	ldrb	r2, [r2, #0]
   163be:	b2d2      	uxtb	r2, r2
   163c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   163c4:	b2d2      	uxtb	r2, r2
   163c6:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   163c8:	f242 032e 	movw	r3, #8238	; 0x202e
   163cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163d0:	f242 022e 	movw	r2, #8238	; 0x202e
   163d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   163d8:	7812      	ldrb	r2, [r2, #0]
   163da:	b2d2      	uxtb	r2, r2
   163dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   163e0:	b2d2      	uxtb	r2, r2
   163e2:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   163e4:	f242 0317 	movw	r3, #8215	; 0x2017
   163e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163ec:	f242 0217 	movw	r2, #8215	; 0x2017
   163f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   163f4:	7812      	ldrb	r2, [r2, #0]
   163f6:	b2d2      	uxtb	r2, r2
   163f8:	f022 0201 	bic.w	r2, r2, #1
   163fc:	b2d2      	uxtb	r2, r2
   163fe:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16400:	f242 0337 	movw	r3, #8247	; 0x2037
   16404:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16408:	f242 0237 	movw	r2, #8247	; 0x2037
   1640c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16410:	7812      	ldrb	r2, [r2, #0]
   16412:	b2d2      	uxtb	r2, r2
   16414:	f042 0220 	orr.w	r2, r2, #32
   16418:	b2d2      	uxtb	r2, r2
   1641a:	701a      	strb	r2, [r3, #0]
}
   1641c:	46bd      	mov	sp, r7
   1641e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16422:	4770      	bx	lr

00016424 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   16424:	b580      	push	{r7, lr}
   16426:	b082      	sub	sp, #8
   16428:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1642a:	2300      	movs	r3, #0
   1642c:	71fb      	strb	r3, [r7, #7]
   1642e:	e010      	b.n	16452 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16430:	79fa      	ldrb	r2, [r7, #7]
   16432:	79f9      	ldrb	r1, [r7, #7]
   16434:	f24b 5324 	movw	r3, #46372	; 0xb524
   16438:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1643c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16440:	f24b 536c 	movw	r3, #46444	; 0xb56c
   16444:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16448:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1644c:	79fb      	ldrb	r3, [r7, #7]
   1644e:	3301      	adds	r3, #1
   16450:	71fb      	strb	r3, [r7, #7]
   16452:	79fb      	ldrb	r3, [r7, #7]
   16454:	2b08      	cmp	r3, #8
   16456:	d9eb      	bls.n	16430 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16458:	f24b 6314 	movw	r3, #46612	; 0xb614
   1645c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16460:	781b      	ldrb	r3, [r3, #0]
   16462:	2b00      	cmp	r3, #0
   16464:	bf0c      	ite	eq
   16466:	2300      	moveq	r3, #0
   16468:	2301      	movne	r3, #1
   1646a:	b2db      	uxtb	r3, r3
   1646c:	461a      	mov	r2, r3
   1646e:	f24b 536c 	movw	r3, #46444	; 0xb56c
   16472:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16476:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16478:	f24b 536c 	movw	r3, #46444	; 0xb56c
   1647c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16480:	7cdb      	ldrb	r3, [r3, #19]
   16482:	b2da      	uxtb	r2, r3
   16484:	f24b 6316 	movw	r3, #46614	; 0xb616
   16488:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1648c:	781b      	ldrb	r3, [r3, #0]
   1648e:	2b00      	cmp	r3, #0
   16490:	d001      	beq.n	16496 <to_autopilot_from_last_radio+0x72>
   16492:	2302      	movs	r3, #2
   16494:	e000      	b.n	16498 <to_autopilot_from_last_radio+0x74>
   16496:	2300      	movs	r3, #0
   16498:	4313      	orrs	r3, r2
   1649a:	b2db      	uxtb	r3, r3
   1649c:	b2da      	uxtb	r2, r3
   1649e:	f24b 536c 	movw	r3, #46444	; 0xb56c
   164a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164a6:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   164a8:	f24b 534a 	movw	r3, #46410	; 0xb54a
   164ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164b0:	781b      	ldrb	r3, [r3, #0]
   164b2:	2b00      	cmp	r3, #0
   164b4:	d012      	beq.n	164dc <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   164b6:	f24b 536c 	movw	r3, #46444	; 0xb56c
   164ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164be:	7cdb      	ldrb	r3, [r3, #19]
   164c0:	f043 0304 	orr.w	r3, r3, #4
   164c4:	b2da      	uxtb	r2, r3
   164c6:	f24b 536c 	movw	r3, #46444	; 0xb56c
   164ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164ce:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   164d0:	f24b 534a 	movw	r3, #46410	; 0xb54a
   164d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164d8:	2200      	movs	r2, #0
   164da:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   164dc:	f24b 6318 	movw	r3, #46616	; 0xb618
   164e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164e4:	781a      	ldrb	r2, [r3, #0]
   164e6:	f24b 536c 	movw	r3, #46444	; 0xb56c
   164ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164ee:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   164f0:	f24b 5388 	movw	r3, #46472	; 0xb588
   164f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164f8:	881b      	ldrh	r3, [r3, #0]
   164fa:	4618      	mov	r0, r3
   164fc:	f001 f8de 	bl	176bc <__aeabi_i2d>
   16500:	4602      	mov	r2, r0
   16502:	460b      	mov	r3, r1
   16504:	4610      	mov	r0, r2
   16506:	4619      	mov	r1, r3
   16508:	a31b      	add	r3, pc, #108	; (adr r3, 16578 <to_autopilot_from_last_radio+0x154>)
   1650a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1650e:	f001 f93b 	bl	17788 <__aeabi_dmul>
   16512:	4602      	mov	r2, r0
   16514:	460b      	mov	r3, r1
   16516:	4610      	mov	r0, r2
   16518:	4619      	mov	r1, r3
   1651a:	f04f 0200 	mov.w	r2, #0
   1651e:	f04f 0300 	mov.w	r3, #0
   16522:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16526:	f001 fa59 	bl	179dc <__aeabi_ddiv>
   1652a:	4602      	mov	r2, r0
   1652c:	460b      	mov	r3, r1
   1652e:	4610      	mov	r0, r2
   16530:	4619      	mov	r1, r3
   16532:	a313      	add	r3, pc, #76	; (adr r3, 16580 <to_autopilot_from_last_radio+0x15c>)
   16534:	e9d3 2300 	ldrd	r2, r3, [r3]
   16538:	f000 ff74 	bl	17424 <__adddf3>
   1653c:	4602      	mov	r2, r0
   1653e:	460b      	mov	r3, r1
   16540:	4610      	mov	r0, r2
   16542:	4619      	mov	r1, r3
   16544:	f04f 0200 	mov.w	r2, #0
   16548:	f04f 0300 	mov.w	r3, #0
   1654c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16550:	f001 f91a 	bl	17788 <__aeabi_dmul>
   16554:	4602      	mov	r2, r0
   16556:	460b      	mov	r3, r1
   16558:	4610      	mov	r0, r2
   1655a:	4619      	mov	r1, r3
   1655c:	f001 fbd6 	bl	17d0c <__aeabi_d2uiz>
   16560:	4603      	mov	r3, r0
   16562:	b2da      	uxtb	r2, r3
   16564:	f24b 536c 	movw	r3, #46444	; 0xb56c
   16568:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1656c:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   1656e:	3708      	adds	r7, #8
   16570:	46bd      	mov	sp, r7
   16572:	bd80      	pop	{r7, pc}
   16574:	f3af 8000 	nop.w
   16578:	1eb851ec 	.word	0x1eb851ec
   1657c:	3f91eb85 	.word	0x3f91eb85
   16580:	020c49ba 	.word	0x020c49ba
   16584:	3fb6872b 	.word	0x3fb6872b

00016588 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16588:	b580      	push	{r7, lr}
   1658a:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   1658c:	f24b 5383 	movw	r3, #46467	; 0xb583
   16590:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16594:	2200      	movs	r2, #0
   16596:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16598:	f7ff ff44 	bl	16424 <to_autopilot_from_last_radio>
      spi_reset();
   1659c:	f7ff fe80 	bl	162a0 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   165a0:	bd80      	pop	{r7, pc}
   165a2:	bf00      	nop

000165a4 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   165a4:	b580      	push	{r7, lr}
   165a6:	af00      	add	r7, sp, #0
  uart_init_tx();
   165a8:	f000 fb02 	bl	16bb0 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   165ac:	f248 60bc 	movw	r0, #34492	; 0x86bc
   165b0:	f2c0 0001 	movt	r0, #1
   165b4:	f000 fbda 	bl	16d6c <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   165b8:	f7ff fab2 	bl	15b20 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   165bc:	2003      	movs	r0, #3
   165be:	f24b 5188 	movw	r1, #46472	; 0xb588
   165c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   165c6:	f7ff fa97 	bl	15af8 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   165ca:	2006      	movs	r0, #6
   165cc:	f24b 51cc 	movw	r1, #46540	; 0xb5cc
   165d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
   165d4:	f7ff fa90 	bl	15af8 <fbw_adc_buf_channel>
#endif
  timer_init();
   165d8:	f7ff fece 	bl	16378 <timer_init>
  servo_init();
   165dc:	f000 f894 	bl	16708 <servo_init>
  ppm_init();
   165e0:	f7ff fee2 	bl	163a8 <ppm_init>
  fbw_spi_init();
   165e4:	f7ff fe92 	bl	1630c <fbw_spi_init>
  //sei(); //FN
}
   165e8:	bd80      	pop	{r7, pc}
   165ea:	bf00      	nop

000165ec <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   165ec:	b580      	push	{r7, lr}
   165ee:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   165f0:	f24b 534b 	movw	r3, #46411	; 0xb54b
   165f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165f8:	2200      	movs	r2, #0
   165fa:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   165fc:	f24b 6317 	movw	r3, #46615	; 0xb617
   16600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16604:	781b      	ldrb	r3, [r3, #0]
   16606:	3301      	adds	r3, #1
   16608:	b2da      	uxtb	r2, r3
   1660a:	f24b 6317 	movw	r3, #46615	; 0xb617
   1660e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16612:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16614:	f24b 6314 	movw	r3, #46612	; 0xb614
   16618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1661c:	2201      	movs	r2, #1
   1661e:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16620:	f24b 6316 	movw	r3, #46614	; 0xb616
   16624:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16628:	2200      	movs	r2, #0
   1662a:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   1662c:	f24b 6312 	movw	r3, #46610	; 0xb612
   16630:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16634:	2200      	movs	r2, #0
   16636:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16638:	f7ff fb3a 	bl	15cb0 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   1663c:	f24b 5324 	movw	r3, #46372	; 0xb524
   16640:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16644:	891b      	ldrh	r3, [r3, #8]
   16646:	b21b      	sxth	r3, r3
   16648:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   1664c:	bfb4      	ite	lt
   1664e:	2300      	movlt	r3, #0
   16650:	2301      	movge	r3, #1
   16652:	b2db      	uxtb	r3, r3
   16654:	461a      	mov	r2, r3
   16656:	f24b 6310 	movw	r3, #46608	; 0xb610
   1665a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1665e:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16660:	f24b 6310 	movw	r3, #46608	; 0xb610
   16664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16668:	781b      	ldrb	r3, [r3, #0]
   1666a:	2b00      	cmp	r3, #0
   1666c:	d105      	bne.n	1667a <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   1666e:	f24b 5024 	movw	r0, #46372	; 0xb524
   16672:	f2c2 0000 	movt	r0, #8192	; 0x2000
   16676:	f000 f925 	bl	168c4 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   1667a:	f24b 6310 	movw	r3, #46608	; 0xb610
   1667e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16682:	2201      	movs	r2, #1
   16684:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   16686:	f24b 6314 	movw	r3, #46612	; 0xb614
   1668a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1668e:	2200      	movs	r2, #0
   16690:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   16692:	f24b 6316 	movw	r3, #46614	; 0xb616
   16696:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1669a:	2201      	movs	r2, #1
   1669c:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   1669e:	bd80      	pop	{r7, pc}

000166a0 <check_failsafe_task>:
void check_failsafe_task(void)
{
   166a0:	b580      	push	{r7, lr}
   166a2:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   166a4:	f248 60a8 	movw	r0, #34472	; 0x86a8
   166a8:	f2c0 0001 	movt	r0, #1
   166ac:	f000 f90a 	bl	168c4 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   166b0:	bd80      	pop	{r7, pc}
   166b2:	bf00      	nop

000166b4 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   166b4:	b580      	push	{r7, lr}
   166b6:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   166b8:	f24b 5382 	movw	r3, #46466	; 0xb582
   166bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166c0:	781b      	ldrb	r3, [r3, #0]
   166c2:	b2db      	uxtb	r3, r3
   166c4:	2b00      	cmp	r3, #0
   166c6:	d018      	beq.n	166fa <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   166c8:	f24b 6311 	movw	r3, #46609	; 0xb611
   166cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166d0:	2200      	movs	r2, #0
   166d2:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   166d4:	f24b 6315 	movw	r3, #46613	; 0xb615
   166d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166dc:	2201      	movs	r2, #1
   166de:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   166e0:	f24b 6310 	movw	r3, #46608	; 0xb610
   166e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166e8:	781b      	ldrb	r3, [r3, #0]
   166ea:	2b01      	cmp	r3, #1
   166ec:	d105      	bne.n	166fa <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   166ee:	f24b 5054 	movw	r0, #46420	; 0xb554
   166f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   166f6:	f000 f8e5 	bl	168c4 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   166fa:	f24b 6315 	movw	r3, #46613	; 0xb615
   166fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16702:	2200      	movs	r2, #0
   16704:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16706:	bd80      	pop	{r7, pc}

00016708 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16708:	b480      	push	{r7}
   1670a:	b083      	sub	sp, #12
   1670c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   1670e:	f242 0311 	movw	r3, #8209	; 0x2011
   16712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16716:	f242 0211 	movw	r2, #8209	; 0x2011
   1671a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1671e:	7812      	ldrb	r2, [r2, #0]
   16720:	b2d2      	uxtb	r2, r2
   16722:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16726:	b2d2      	uxtb	r2, r2
   16728:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   1672a:	f242 0317 	movw	r3, #8215	; 0x2017
   1672e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16732:	f242 0217 	movw	r2, #8215	; 0x2017
   16736:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1673a:	7812      	ldrb	r2, [r2, #0]
   1673c:	b2d2      	uxtb	r2, r2
   1673e:	f042 0202 	orr.w	r2, r2, #2
   16742:	b2d2      	uxtb	r2, r2
   16744:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16746:	f242 0312 	movw	r3, #8210	; 0x2012
   1674a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1674e:	f242 0212 	movw	r2, #8210	; 0x2012
   16752:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16756:	7812      	ldrb	r2, [r2, #0]
   16758:	b2d2      	uxtb	r2, r2
   1675a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1675e:	b2d2      	uxtb	r2, r2
   16760:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16762:	f242 0318 	movw	r3, #8216	; 0x2018
   16766:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1676a:	f242 0218 	movw	r2, #8216	; 0x2018
   1676e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16772:	7812      	ldrb	r2, [r2, #0]
   16774:	b2d2      	uxtb	r2, r2
   16776:	f022 0202 	bic.w	r2, r2, #2
   1677a:	b2d2      	uxtb	r2, r2
   1677c:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   1677e:	2300      	movs	r3, #0
   16780:	71fb      	strb	r3, [r7, #7]
   16782:	e00b      	b.n	1679c <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16784:	79fa      	ldrb	r2, [r7, #7]
   16786:	f24b 631c 	movw	r3, #46620	; 0xb61c
   1678a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1678e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16792:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16796:	79fb      	ldrb	r3, [r7, #7]
   16798:	3301      	adds	r3, #1
   1679a:	71fb      	strb	r3, [r7, #7]
   1679c:	79fb      	ldrb	r3, [r7, #7]
   1679e:	2b09      	cmp	r3, #9
   167a0:	d9f0      	bls.n	16784 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   167a2:	f242 032a 	movw	r3, #8234	; 0x202a
   167a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   167ae:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   167b0:	f242 032f 	movw	r3, #8239	; 0x202f
   167b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167b8:	f242 022f 	movw	r2, #8239	; 0x202f
   167bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167c0:	7812      	ldrb	r2, [r2, #0]
   167c2:	b2d2      	uxtb	r2, r2
   167c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   167c8:	b2d2      	uxtb	r2, r2
   167ca:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   167cc:	f242 0336 	movw	r3, #8246	; 0x2036
   167d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167d4:	2210      	movs	r2, #16
   167d6:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   167d8:	f242 0312 	movw	r3, #8210	; 0x2012
   167dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167e0:	f242 0212 	movw	r2, #8210	; 0x2012
   167e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167e8:	7812      	ldrb	r2, [r2, #0]
   167ea:	b2d2      	uxtb	r2, r2
   167ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   167f0:	b2d2      	uxtb	r2, r2
   167f2:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   167f4:	f242 0337 	movw	r3, #8247	; 0x2037
   167f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167fc:	f242 0237 	movw	r2, #8247	; 0x2037
   16800:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16804:	7812      	ldrb	r2, [r2, #0]
   16806:	b2d2      	uxtb	r2, r2
   16808:	f042 0210 	orr.w	r2, r2, #16
   1680c:	b2d2      	uxtb	r2, r2
   1680e:	701a      	strb	r2, [r3, #0]
}
   16810:	370c      	adds	r7, #12
   16812:	46bd      	mov	sp, r7
   16814:	f85d 7b04 	ldr.w	r7, [sp], #4
   16818:	4770      	bx	lr
   1681a:	bf00      	nop

0001681c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   1681c:	b480      	push	{r7}
   1681e:	b083      	sub	sp, #12
   16820:	af00      	add	r7, sp, #0
   16822:	4602      	mov	r2, r0
   16824:	460b      	mov	r3, r1
   16826:	71fa      	strb	r2, [r7, #7]
   16828:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   1682a:	79f9      	ldrb	r1, [r7, #7]
   1682c:	88bb      	ldrh	r3, [r7, #4]
   1682e:	011b      	lsls	r3, r3, #4
   16830:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16834:	d308      	bcc.n	16848 <servo_set_one+0x2c>
   16836:	88bb      	ldrh	r3, [r7, #4]
   16838:	011b      	lsls	r3, r3, #4
   1683a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1683e:	bf28      	it	cs
   16840:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16844:	b29a      	uxth	r2, r3
   16846:	e001      	b.n	1684c <servo_set_one+0x30>
   16848:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1684c:	f24b 631c 	movw	r3, #46620	; 0xb61c
   16850:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16854:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16858:	370c      	adds	r7, #12
   1685a:	46bd      	mov	sp, r7
   1685c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16860:	4770      	bx	lr
   16862:	bf00      	nop

00016864 <servo_transmit>:

void 
servo_transmit(void) {
   16864:	b580      	push	{r7, lr}
   16866:	b082      	sub	sp, #8
   16868:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   1686a:	2000      	movs	r0, #0
   1686c:	f000 f9e6 	bl	16c3c <uart_transmit>
   16870:	2000      	movs	r0, #0
   16872:	f000 f9e3 	bl	16c3c <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16876:	2300      	movs	r3, #0
   16878:	71fb      	strb	r3, [r7, #7]
   1687a:	e01a      	b.n	168b2 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   1687c:	79fa      	ldrb	r2, [r7, #7]
   1687e:	f24b 631c 	movw	r3, #46620	; 0xb61c
   16882:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16886:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1688a:	0a1b      	lsrs	r3, r3, #8
   1688c:	b29b      	uxth	r3, r3
   1688e:	b2db      	uxtb	r3, r3
   16890:	4618      	mov	r0, r3
   16892:	f000 f9d3 	bl	16c3c <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16896:	79fa      	ldrb	r2, [r7, #7]
   16898:	f24b 631c 	movw	r3, #46620	; 0xb61c
   1689c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   168a4:	b2db      	uxtb	r3, r3
   168a6:	4618      	mov	r0, r3
   168a8:	f000 f9c8 	bl	16c3c <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   168ac:	79fb      	ldrb	r3, [r7, #7]
   168ae:	3301      	adds	r3, #1
   168b0:	71fb      	strb	r3, [r7, #7]
   168b2:	79fb      	ldrb	r3, [r7, #7]
   168b4:	2b09      	cmp	r3, #9
   168b6:	d9e1      	bls.n	1687c <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   168b8:	200a      	movs	r0, #10
   168ba:	f000 f9bf 	bl	16c3c <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   168be:	3708      	adds	r7, #8
   168c0:	46bd      	mov	sp, r7
   168c2:	bd80      	pop	{r7, pc}

000168c4 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   168c4:	b5b0      	push	{r4, r5, r7, lr}
   168c6:	b084      	sub	sp, #16
   168c8:	af00      	add	r7, sp, #0
   168ca:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   168cc:	687b      	ldr	r3, [r7, #4]
   168ce:	330a      	adds	r3, #10
   168d0:	881b      	ldrh	r3, [r3, #0]
   168d2:	b21b      	sxth	r3, r3
   168d4:	005b      	lsls	r3, r3, #1
   168d6:	4618      	mov	r0, r3
   168d8:	f000 fef0 	bl	176bc <__aeabi_i2d>
   168dc:	4602      	mov	r2, r0
   168de:	460b      	mov	r3, r1
   168e0:	4610      	mov	r0, r2
   168e2:	4619      	mov	r1, r3
   168e4:	a3a6      	add	r3, pc, #664	; (adr r3, 16b80 <servo_set+0x2bc>)
   168e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   168ea:	f000 ff4d 	bl	17788 <__aeabi_dmul>
   168ee:	4602      	mov	r2, r0
   168f0:	460b      	mov	r3, r1
   168f2:	4610      	mov	r0, r2
   168f4:	4619      	mov	r1, r3
   168f6:	f001 f9e1 	bl	17cbc <__aeabi_d2iz>
   168fa:	4603      	mov	r3, r0
   168fc:	b29b      	uxth	r3, r3
   168fe:	b29b      	uxth	r3, r3
   16900:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16904:	81fb      	strh	r3, [r7, #14]
   16906:	89fb      	ldrh	r3, [r7, #14]
   16908:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1690c:	d307      	bcc.n	1691e <servo_set+0x5a>
   1690e:	89fb      	ldrh	r3, [r7, #14]
   16910:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16914:	bf28      	it	cs
   16916:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1691a:	b29a      	uxth	r2, r3
   1691c:	e001      	b.n	16922 <servo_set+0x5e>
   1691e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16922:	f24b 631c 	movw	r3, #46620	; 0xb61c
   16926:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1692a:	80da      	strh	r2, [r3, #6]
   1692c:	687b      	ldr	r3, [r7, #4]
   1692e:	881b      	ldrh	r3, [r3, #0]
   16930:	b21b      	sxth	r3, r3
   16932:	005b      	lsls	r3, r3, #1
   16934:	4618      	mov	r0, r3
   16936:	f000 fec1 	bl	176bc <__aeabi_i2d>
   1693a:	4602      	mov	r2, r0
   1693c:	460b      	mov	r3, r1
   1693e:	4610      	mov	r0, r2
   16940:	4619      	mov	r1, r3
   16942:	a38f      	add	r3, pc, #572	; (adr r3, 16b80 <servo_set+0x2bc>)
   16944:	e9d3 2300 	ldrd	r2, r3, [r3]
   16948:	f000 ff1e 	bl	17788 <__aeabi_dmul>
   1694c:	4602      	mov	r2, r0
   1694e:	460b      	mov	r3, r1
   16950:	4610      	mov	r0, r2
   16952:	4619      	mov	r1, r3
   16954:	f001 f9b2 	bl	17cbc <__aeabi_d2iz>
   16958:	4603      	mov	r3, r0
   1695a:	b29b      	uxth	r3, r3
   1695c:	b29b      	uxth	r3, r3
   1695e:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16962:	81fb      	strh	r3, [r7, #14]
   16964:	89fb      	ldrh	r3, [r7, #14]
   16966:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1696a:	d307      	bcc.n	1697c <servo_set+0xb8>
   1696c:	89fb      	ldrh	r3, [r7, #14]
   1696e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16972:	bf28      	it	cs
   16974:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16978:	b29a      	uxth	r2, r3
   1697a:	e001      	b.n	16980 <servo_set+0xbc>
   1697c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16980:	f24b 631c 	movw	r3, #46620	; 0xb61c
   16984:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16988:	825a      	strh	r2, [r3, #18]
   1698a:	687b      	ldr	r3, [r7, #4]
   1698c:	3304      	adds	r3, #4
   1698e:	881b      	ldrh	r3, [r3, #0]
   16990:	b21b      	sxth	r3, r3
   16992:	4618      	mov	r0, r3
   16994:	f000 fe92 	bl	176bc <__aeabi_i2d>
   16998:	4602      	mov	r2, r0
   1699a:	460b      	mov	r3, r1
   1699c:	4610      	mov	r0, r2
   1699e:	4619      	mov	r1, r3
   169a0:	a379      	add	r3, pc, #484	; (adr r3, 16b88 <servo_set+0x2c4>)
   169a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   169a6:	f000 feef 	bl	17788 <__aeabi_dmul>
   169aa:	4602      	mov	r2, r0
   169ac:	460b      	mov	r3, r1
   169ae:	4610      	mov	r0, r2
   169b0:	4619      	mov	r1, r3
   169b2:	f001 f983 	bl	17cbc <__aeabi_d2iz>
   169b6:	4603      	mov	r3, r0
   169b8:	b29b      	uxth	r3, r3
   169ba:	b29b      	uxth	r3, r3
   169bc:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   169c0:	3320      	adds	r3, #32
   169c2:	81fb      	strh	r3, [r7, #14]
   169c4:	89fb      	ldrh	r3, [r7, #14]
   169c6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   169ca:	d307      	bcc.n	169dc <servo_set+0x118>
   169cc:	89fb      	ldrh	r3, [r7, #14]
   169ce:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   169d2:	bf28      	it	cs
   169d4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   169d8:	b29a      	uxth	r2, r3
   169da:	e001      	b.n	169e0 <servo_set+0x11c>
   169dc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   169e0:	f24b 631c 	movw	r3, #46620	; 0xb61c
   169e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169e8:	819a      	strh	r2, [r3, #12]
   169ea:	687b      	ldr	r3, [r7, #4]
   169ec:	885b      	ldrh	r3, [r3, #2]
   169ee:	81bb      	strh	r3, [r7, #12]
   169f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   169f4:	2b00      	cmp	r3, #0
   169f6:	dd06      	ble.n	16a06 <servo_set+0x142>
   169f8:	f04f 0400 	mov.w	r4, #0
   169fc:	f04f 0500 	mov.w	r5, #0
   16a00:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16a04:	e002      	b.n	16a0c <servo_set+0x148>
   16a06:	a562      	add	r5, pc, #392	; (adr r5, 16b90 <servo_set+0x2cc>)
   16a08:	e9d5 4500 	ldrd	r4, r5, [r5]
   16a0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16a10:	4618      	mov	r0, r3
   16a12:	f000 fe53 	bl	176bc <__aeabi_i2d>
   16a16:	4602      	mov	r2, r0
   16a18:	460b      	mov	r3, r1
   16a1a:	4620      	mov	r0, r4
   16a1c:	4629      	mov	r1, r5
   16a1e:	f000 feb3 	bl	17788 <__aeabi_dmul>
   16a22:	4602      	mov	r2, r0
   16a24:	460b      	mov	r3, r1
   16a26:	4610      	mov	r0, r2
   16a28:	4619      	mov	r1, r3
   16a2a:	a35b      	add	r3, pc, #364	; (adr r3, 16b98 <servo_set+0x2d4>)
   16a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a30:	f000 feaa 	bl	17788 <__aeabi_dmul>
   16a34:	4602      	mov	r2, r0
   16a36:	460b      	mov	r3, r1
   16a38:	4610      	mov	r0, r2
   16a3a:	4619      	mov	r1, r3
   16a3c:	f001 f93e 	bl	17cbc <__aeabi_d2iz>
   16a40:	4603      	mov	r3, r0
   16a42:	b29b      	uxth	r3, r3
   16a44:	b29b      	uxth	r3, r3
   16a46:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16a4a:	81fb      	strh	r3, [r7, #14]
   16a4c:	89fb      	ldrh	r3, [r7, #14]
   16a4e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16a52:	d307      	bcc.n	16a64 <servo_set+0x1a0>
   16a54:	89fb      	ldrh	r3, [r7, #14]
   16a56:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16a5a:	bf28      	it	cs
   16a5c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16a60:	b29a      	uxth	r2, r3
   16a62:	e001      	b.n	16a68 <servo_set+0x1a4>
   16a64:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16a68:	f24b 631c 	movw	r3, #46620	; 0xb61c
   16a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a70:	801a      	strh	r2, [r3, #0]
   16a72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16a76:	2b00      	cmp	r3, #0
   16a78:	dd03      	ble.n	16a82 <servo_set+0x1be>
   16a7a:	a545      	add	r5, pc, #276	; (adr r5, 16b90 <servo_set+0x2cc>)
   16a7c:	e9d5 4500 	ldrd	r4, r5, [r5]
   16a80:	e005      	b.n	16a8e <servo_set+0x1ca>
   16a82:	f04f 0400 	mov.w	r4, #0
   16a86:	f04f 0500 	mov.w	r5, #0
   16a8a:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16a8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16a92:	4618      	mov	r0, r3
   16a94:	f000 fe12 	bl	176bc <__aeabi_i2d>
   16a98:	4602      	mov	r2, r0
   16a9a:	460b      	mov	r3, r1
   16a9c:	4620      	mov	r0, r4
   16a9e:	4629      	mov	r1, r5
   16aa0:	f000 fe72 	bl	17788 <__aeabi_dmul>
   16aa4:	4602      	mov	r2, r0
   16aa6:	460b      	mov	r3, r1
   16aa8:	4610      	mov	r0, r2
   16aaa:	4619      	mov	r1, r3
   16aac:	a33c      	add	r3, pc, #240	; (adr r3, 16ba0 <servo_set+0x2dc>)
   16aae:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ab2:	f000 fe69 	bl	17788 <__aeabi_dmul>
   16ab6:	4602      	mov	r2, r0
   16ab8:	460b      	mov	r3, r1
   16aba:	4610      	mov	r0, r2
   16abc:	4619      	mov	r1, r3
   16abe:	f001 f8fd 	bl	17cbc <__aeabi_d2iz>
   16ac2:	4603      	mov	r3, r0
   16ac4:	b29b      	uxth	r3, r3
   16ac6:	b29b      	uxth	r3, r3
   16ac8:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16acc:	3320      	adds	r3, #32
   16ace:	81fb      	strh	r3, [r7, #14]
   16ad0:	89fb      	ldrh	r3, [r7, #14]
   16ad2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ad6:	d307      	bcc.n	16ae8 <servo_set+0x224>
   16ad8:	89fb      	ldrh	r3, [r7, #14]
   16ada:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16ade:	bf28      	it	cs
   16ae0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16ae4:	b29a      	uxth	r2, r3
   16ae6:	e001      	b.n	16aec <servo_set+0x228>
   16ae8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16aec:	f24b 631c 	movw	r3, #46620	; 0xb61c
   16af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16af4:	809a      	strh	r2, [r3, #4]
   16af6:	687b      	ldr	r3, [r7, #4]
   16af8:	3306      	adds	r3, #6
   16afa:	881b      	ldrh	r3, [r3, #0]
   16afc:	b21b      	sxth	r3, r3
   16afe:	4618      	mov	r0, r3
   16b00:	f000 fddc 	bl	176bc <__aeabi_i2d>
   16b04:	4604      	mov	r4, r0
   16b06:	460d      	mov	r5, r1
   16b08:	687b      	ldr	r3, [r7, #4]
   16b0a:	3302      	adds	r3, #2
   16b0c:	881b      	ldrh	r3, [r3, #0]
   16b0e:	b21b      	sxth	r3, r3
   16b10:	4618      	mov	r0, r3
   16b12:	f000 fdd3 	bl	176bc <__aeabi_i2d>
   16b16:	4602      	mov	r2, r0
   16b18:	460b      	mov	r3, r1
   16b1a:	4620      	mov	r0, r4
   16b1c:	4629      	mov	r1, r5
   16b1e:	f000 fc81 	bl	17424 <__adddf3>
   16b22:	4602      	mov	r2, r0
   16b24:	460b      	mov	r3, r1
   16b26:	4610      	mov	r0, r2
   16b28:	4619      	mov	r1, r3
   16b2a:	a31f      	add	r3, pc, #124	; (adr r3, 16ba8 <servo_set+0x2e4>)
   16b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b30:	f000 fe2a 	bl	17788 <__aeabi_dmul>
   16b34:	4602      	mov	r2, r0
   16b36:	460b      	mov	r3, r1
   16b38:	4610      	mov	r0, r2
   16b3a:	4619      	mov	r1, r3
   16b3c:	f001 f8be 	bl	17cbc <__aeabi_d2iz>
   16b40:	4603      	mov	r3, r0
   16b42:	b29b      	uxth	r3, r3
   16b44:	b29b      	uxth	r3, r3
   16b46:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16b4a:	3320      	adds	r3, #32
   16b4c:	81fb      	strh	r3, [r7, #14]
   16b4e:	89fb      	ldrh	r3, [r7, #14]
   16b50:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16b54:	d307      	bcc.n	16b66 <servo_set+0x2a2>
   16b56:	89fb      	ldrh	r3, [r7, #14]
   16b58:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16b5c:	bf28      	it	cs
   16b5e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16b62:	b29a      	uxth	r2, r3
   16b64:	e001      	b.n	16b6a <servo_set+0x2a6>
   16b66:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16b6a:	f24b 631c 	movw	r3, #46620	; 0xb61c
   16b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b72:	81da      	strh	r2, [r3, #14]
}
   16b74:	3710      	adds	r7, #16
   16b76:	46bd      	mov	sp, r7
   16b78:	bdb0      	pop	{r4, r5, r7, pc}
   16b7a:	bf00      	nop
   16b7c:	f3af 8000 	nop.w
   16b80:	aaaa9ef0 	.word	0xaaaa9ef0
   16b84:	3feaaaaa 	.word	0x3feaaaaa
   16b88:	fc96473e 	.word	0xfc96473e
   16b8c:	3fdfc962 	.word	0x3fdfc962
   16b90:	51eb851f 	.word	0x51eb851f
   16b94:	3fe51eb8 	.word	0x3fe51eb8
   16b98:	9999999a 	.word	0x9999999a
   16b9c:	bfe19999 	.word	0xbfe19999
   16ba0:	aaaa9ef0 	.word	0xaaaa9ef0
   16ba4:	bfe0aaaa 	.word	0xbfe0aaaa
   16ba8:	eeeed77a 	.word	0xeeeed77a
   16bac:	bfdeeeee 	.word	0xbfdeeeee

00016bb0 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16bb0:	b480      	push	{r7}
   16bb2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16bb4:	f242 0320 	movw	r3, #8224	; 0x2020
   16bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bbc:	2200      	movs	r2, #0
   16bbe:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16bc0:	f242 0309 	movw	r3, #8201	; 0x2009
   16bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bc8:	2219      	movs	r2, #25
   16bca:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16bcc:	f242 030b 	movw	r3, #8203	; 0x200b
   16bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bd4:	2200      	movs	r2, #0
   16bd6:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16bd8:	f242 030a 	movw	r3, #8202	; 0x200a
   16bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16be0:	2208      	movs	r2, #8
   16be2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16be4:	f242 0320 	movw	r3, #8224	; 0x2020
   16be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bec:	2286      	movs	r2, #134	; 0x86
   16bee:	701a      	strb	r2, [r3, #0]
}
   16bf0:	46bd      	mov	sp, r7
   16bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
   16bf6:	4770      	bx	lr

00016bf8 <uart_init_rx>:

void uart_init_rx() {
   16bf8:	b480      	push	{r7}
   16bfa:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16bfc:	f242 030a 	movw	r3, #8202	; 0x200a
   16c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c04:	f242 020a 	movw	r2, #8202	; 0x200a
   16c08:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c0c:	7812      	ldrb	r2, [r2, #0]
   16c0e:	b2d2      	uxtb	r2, r2
   16c10:	f042 0210 	orr.w	r2, r2, #16
   16c14:	b2d2      	uxtb	r2, r2
   16c16:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16c18:	f242 030a 	movw	r3, #8202	; 0x200a
   16c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c20:	f242 020a 	movw	r2, #8202	; 0x200a
   16c24:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c28:	7812      	ldrb	r2, [r2, #0]
   16c2a:	b2d2      	uxtb	r2, r2
   16c2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16c30:	b2d2      	uxtb	r2, r2
   16c32:	701a      	strb	r2, [r3, #0]
}
   16c34:	46bd      	mov	sp, r7
   16c36:	f85d 7b04 	ldr.w	r7, [sp], #4
   16c3a:	4770      	bx	lr

00016c3c <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16c3c:	b480      	push	{r7}
   16c3e:	b083      	sub	sp, #12
   16c40:	af00      	add	r7, sp, #0
   16c42:	4603      	mov	r3, r0
   16c44:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16c46:	f242 030a 	movw	r3, #8202	; 0x200a
   16c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c4e:	781b      	ldrb	r3, [r3, #0]
   16c50:	b2db      	uxtb	r3, r3
   16c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16c56:	2b00      	cmp	r3, #0
   16c58:	d028      	beq.n	16cac <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16c5a:	f24b 6331 	movw	r3, #46641	; 0xb631
   16c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c62:	781b      	ldrb	r3, [r3, #0]
   16c64:	b2db      	uxtb	r3, r3
   16c66:	461a      	mov	r2, r3
   16c68:	f24b 6330 	movw	r3, #46640	; 0xb630
   16c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c70:	781b      	ldrb	r3, [r3, #0]
   16c72:	3301      	adds	r3, #1
   16c74:	429a      	cmp	r2, r3
   16c76:	d100      	bne.n	16c7a <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   16c78:	e02c      	b.n	16cd4 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   16c7a:	f24b 6330 	movw	r3, #46640	; 0xb630
   16c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c82:	781b      	ldrb	r3, [r3, #0]
   16c84:	461a      	mov	r2, r3
   16c86:	f24b 6334 	movw	r3, #46644	; 0xb634
   16c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c8e:	79f9      	ldrb	r1, [r7, #7]
   16c90:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   16c92:	f24b 6330 	movw	r3, #46640	; 0xb630
   16c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c9a:	781b      	ldrb	r3, [r3, #0]
   16c9c:	3301      	adds	r3, #1
   16c9e:	b2da      	uxtb	r2, r3
   16ca0:	f24b 6330 	movw	r3, #46640	; 0xb630
   16ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ca8:	701a      	strb	r2, [r3, #0]
   16caa:	e013      	b.n	16cd4 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   16cac:	f242 030c 	movw	r3, #8204	; 0x200c
   16cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cb4:	79fa      	ldrb	r2, [r7, #7]
   16cb6:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16cb8:	f242 030a 	movw	r3, #8202	; 0x200a
   16cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cc0:	f242 020a 	movw	r2, #8202	; 0x200a
   16cc4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cc8:	7812      	ldrb	r2, [r2, #0]
   16cca:	b2d2      	uxtb	r2, r2
   16ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16cd0:	b2d2      	uxtb	r2, r2
   16cd2:	701a      	strb	r2, [r3, #0]
  }
}
   16cd4:	370c      	adds	r7, #12
   16cd6:	46bd      	mov	sp, r7
   16cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
   16cdc:	4770      	bx	lr
   16cde:	bf00      	nop

00016ce0 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16ce0:	b590      	push	{r4, r7, lr}
   16ce2:	b089      	sub	sp, #36	; 0x24
   16ce4:	af00      	add	r7, sp, #0
   16ce6:	4603      	mov	r3, r0
   16ce8:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   16cea:	f248 63fc 	movw	r3, #34556	; 0x86fc
   16cee:	f2c0 0301 	movt	r3, #1
   16cf2:	f107 040c 	add.w	r4, r7, #12
   16cf6:	6818      	ldr	r0, [r3, #0]
   16cf8:	6859      	ldr	r1, [r3, #4]
   16cfa:	689a      	ldr	r2, [r3, #8]
   16cfc:	68db      	ldr	r3, [r3, #12]
   16cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   16d00:	79fb      	ldrb	r3, [r7, #7]
   16d02:	091b      	lsrs	r3, r3, #4
   16d04:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   16d06:	79fb      	ldrb	r3, [r7, #7]
   16d08:	f003 030f 	and.w	r3, r3, #15
   16d0c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   16d0e:	230f      	movs	r3, #15
   16d10:	77fb      	strb	r3, [r7, #31]
        low = 15;
   16d12:	230f      	movs	r3, #15
   16d14:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   16d16:	7ffb      	ldrb	r3, [r7, #31]
   16d18:	f107 0220 	add.w	r2, r7, #32
   16d1c:	4413      	add	r3, r2
   16d1e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16d22:	4618      	mov	r0, r3
   16d24:	f7ff ff8a 	bl	16c3c <uart_transmit>
  uart_transmit(hex[low]);
   16d28:	7fbb      	ldrb	r3, [r7, #30]
   16d2a:	f107 0220 	add.w	r2, r7, #32
   16d2e:	4413      	add	r3, r2
   16d30:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16d34:	4618      	mov	r0, r3
   16d36:	f7ff ff81 	bl	16c3c <uart_transmit>
} 
   16d3a:	3724      	adds	r7, #36	; 0x24
   16d3c:	46bd      	mov	sp, r7
   16d3e:	bd90      	pop	{r4, r7, pc}

00016d40 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   16d40:	b580      	push	{r7, lr}
   16d42:	b084      	sub	sp, #16
   16d44:	af00      	add	r7, sp, #0
   16d46:	4603      	mov	r3, r0
   16d48:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   16d4a:	88fb      	ldrh	r3, [r7, #6]
   16d4c:	0a1b      	lsrs	r3, r3, #8
   16d4e:	b29b      	uxth	r3, r3
   16d50:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   16d52:	88fb      	ldrh	r3, [r7, #6]
   16d54:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   16d56:	7bfb      	ldrb	r3, [r7, #15]
   16d58:	4618      	mov	r0, r3
   16d5a:	f7ff ffc1 	bl	16ce0 <uart_print_hex>
  uart_print_hex(low);
   16d5e:	7bbb      	ldrb	r3, [r7, #14]
   16d60:	4618      	mov	r0, r3
   16d62:	f7ff ffbd 	bl	16ce0 <uart_print_hex>
}
   16d66:	3710      	adds	r7, #16
   16d68:	46bd      	mov	sp, r7
   16d6a:	bd80      	pop	{r7, pc}

00016d6c <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   16d6c:	b580      	push	{r7, lr}
   16d6e:	b084      	sub	sp, #16
   16d70:	af00      	add	r7, sp, #0
   16d72:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   16d74:	2300      	movs	r3, #0
   16d76:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   16d78:	e009      	b.n	16d8e <uart_print_string+0x22>
    uart_transmit(s[i]);
   16d7a:	7bfb      	ldrb	r3, [r7, #15]
   16d7c:	687a      	ldr	r2, [r7, #4]
   16d7e:	4413      	add	r3, r2
   16d80:	781b      	ldrb	r3, [r3, #0]
   16d82:	4618      	mov	r0, r3
   16d84:	f7ff ff5a 	bl	16c3c <uart_transmit>
    i++;
   16d88:	7bfb      	ldrb	r3, [r7, #15]
   16d8a:	3301      	adds	r3, #1
   16d8c:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   16d8e:	7bfb      	ldrb	r3, [r7, #15]
   16d90:	687a      	ldr	r2, [r7, #4]
   16d92:	4413      	add	r3, r2
   16d94:	781b      	ldrb	r3, [r3, #0]
   16d96:	2b00      	cmp	r3, #0
   16d98:	d1ef      	bne.n	16d7a <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   16d9a:	3710      	adds	r7, #16
   16d9c:	46bd      	mov	sp, r7
   16d9e:	bd80      	pop	{r7, pc}

00016da0 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   16da0:	b480      	push	{r7}
   16da2:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   16da4:	f24b 6330 	movw	r3, #46640	; 0xb630
   16da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dac:	781a      	ldrb	r2, [r3, #0]
   16dae:	f24b 6331 	movw	r3, #46641	; 0xb631
   16db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16db6:	781b      	ldrb	r3, [r3, #0]
   16db8:	b2db      	uxtb	r3, r3
   16dba:	429a      	cmp	r2, r3
   16dbc:	d10e      	bne.n	16ddc <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   16dbe:	f242 030a 	movw	r3, #8202	; 0x200a
   16dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dc6:	f242 020a 	movw	r2, #8202	; 0x200a
   16dca:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16dce:	7812      	ldrb	r2, [r2, #0]
   16dd0:	b2d2      	uxtb	r2, r2
   16dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16dd6:	b2d2      	uxtb	r2, r2
   16dd8:	701a      	strb	r2, [r3, #0]
   16dda:	e01d      	b.n	16e18 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   16ddc:	f242 030c 	movw	r3, #8204	; 0x200c
   16de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16de4:	f24b 6231 	movw	r2, #46641	; 0xb631
   16de8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16dec:	7812      	ldrb	r2, [r2, #0]
   16dee:	b2d2      	uxtb	r2, r2
   16df0:	4611      	mov	r1, r2
   16df2:	f24b 6234 	movw	r2, #46644	; 0xb634
   16df6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16dfa:	5c52      	ldrb	r2, [r2, r1]
   16dfc:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   16dfe:	f24b 6331 	movw	r3, #46641	; 0xb631
   16e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e06:	781b      	ldrb	r3, [r3, #0]
   16e08:	b2db      	uxtb	r3, r3
   16e0a:	3301      	adds	r3, #1
   16e0c:	b2da      	uxtb	r2, r3
   16e0e:	f24b 6331 	movw	r3, #46641	; 0xb631
   16e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e16:	701a      	strb	r2, [r3, #0]
  }
}
   16e18:	46bd      	mov	sp, r7
   16e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e1e:	4770      	bx	lr

00016e20 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   16e20:	b580      	push	{r7, lr}
   16e22:	b082      	sub	sp, #8
   16e24:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   16e26:	2010      	movs	r0, #16
   16e28:	2101      	movs	r1, #1
   16e2a:	f7e9 ffc9 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   16e2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16e32:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16e3a:	2201      	movs	r2, #1
   16e3c:	f7ea fad0 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   16e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16e44:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   16e46:	2310      	movs	r3, #16
   16e48:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16e4a:	2303      	movs	r3, #3
   16e4c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16e4e:	1d3b      	adds	r3, r7, #4
   16e50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16e54:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16e58:	4619      	mov	r1, r3
   16e5a:	f7ea f985 	bl	1168 <GPIO_Init>
}
   16e5e:	3708      	adds	r7, #8
   16e60:	46bd      	mov	sp, r7
   16e62:	bd80      	pop	{r7, pc}

00016e64 <init_button>:

void init_button(void)
{
   16e64:	b580      	push	{r7, lr}
   16e66:	b082      	sub	sp, #8
   16e68:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   16e6a:	2004      	movs	r0, #4
   16e6c:	2101      	movs	r1, #1
   16e6e:	f7e9 ffa7 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   16e72:	2301      	movs	r3, #1
   16e74:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16e76:	2304      	movs	r3, #4
   16e78:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16e7a:	2303      	movs	r3, #3
   16e7c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16e7e:	1d3b      	adds	r3, r7, #4
   16e80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16e84:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16e88:	4619      	mov	r1, r3
   16e8a:	f7ea f96d 	bl	1168 <GPIO_Init>
}
   16e8e:	3708      	adds	r7, #8
   16e90:	46bd      	mov	sp, r7
   16e92:	bd80      	pop	{r7, pc}

00016e94 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   16e94:	b580      	push	{r7, lr}
   16e96:	b084      	sub	sp, #16
   16e98:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   16e9a:	2001      	movs	r0, #1
   16e9c:	2101      	movs	r1, #1
   16e9e:	f7e9 ff8f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   16ea2:	2000      	movs	r0, #0
   16ea4:	2100      	movs	r1, #0
   16ea6:	f7ea fb93 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   16eaa:	2301      	movs	r3, #1
   16eac:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   16eae:	2300      	movs	r3, #0
   16eb0:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   16eb2:	2308      	movs	r3, #8
   16eb4:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   16eb6:	2301      	movs	r3, #1
   16eb8:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   16eba:	f107 0308 	add.w	r3, r7, #8
   16ebe:	4618      	mov	r0, r3
   16ec0:	f7eb f88c 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   16ec4:	2306      	movs	r3, #6
   16ec6:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   16ec8:	230f      	movs	r3, #15
   16eca:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   16ecc:	230f      	movs	r3, #15
   16ece:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16ed0:	2301      	movs	r3, #1
   16ed2:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16ed4:	1d3b      	adds	r3, r7, #4
   16ed6:	4618      	mov	r0, r3
   16ed8:	f7eb f9ba 	bl	2250 <NVIC_Init>
}
   16edc:	3710      	adds	r7, #16
   16ede:	46bd      	mov	sp, r7
   16ee0:	bd80      	pop	{r7, pc}
   16ee2:	bf00      	nop

00016ee4 <init_rs232>:

void init_rs232(void)
{
   16ee4:	b580      	push	{r7, lr}
   16ee6:	b086      	sub	sp, #24
   16ee8:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   16eea:	2005      	movs	r0, #5
   16eec:	2101      	movs	r1, #1
   16eee:	f7e9 ff67 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   16ef2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   16ef6:	2101      	movs	r1, #1
   16ef8:	f7e9 ff8a 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   16efc:	2308      	movs	r3, #8
   16efe:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16f00:	2304      	movs	r3, #4
   16f02:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16f04:	1d3b      	adds	r3, r7, #4
   16f06:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16f0a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16f0e:	4619      	mov	r1, r3
   16f10:	f7ea f92a 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   16f14:	2304      	movs	r3, #4
   16f16:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16f18:	2303      	movs	r3, #3
   16f1a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   16f1c:	2318      	movs	r3, #24
   16f1e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16f20:	1d3b      	adds	r3, r7, #4
   16f22:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16f26:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16f2a:	4619      	mov	r1, r3
   16f2c:	f7ea f91c 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   16f30:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   16f34:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   16f36:	2300      	movs	r3, #0
   16f38:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   16f3a:	2300      	movs	r3, #0
   16f3c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   16f3e:	2300      	movs	r3, #0
   16f40:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   16f42:	2300      	movs	r3, #0
   16f44:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   16f46:	230c      	movs	r3, #12
   16f48:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   16f4a:	f107 0308 	add.w	r3, r7, #8
   16f4e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16f52:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16f56:	4619      	mov	r1, r3
   16f58:	f7ea fbee 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   16f5c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16f60:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16f64:	2101      	movs	r1, #1
   16f66:	f7ea fd05 	bl	1974 <USART_Cmd>
}
   16f6a:	3718      	adds	r7, #24
   16f6c:	46bd      	mov	sp, r7
   16f6e:	bd80      	pop	{r7, pc}

00016f70 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   16f70:	b580      	push	{r7, lr}
   16f72:	b082      	sub	sp, #8
   16f74:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   16f76:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16f7a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16f7e:	f240 7127 	movw	r1, #1831	; 0x727
   16f82:	2200      	movs	r2, #0
   16f84:	f7ea fd16 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   16f88:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16f8c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16f90:	f240 5125 	movw	r1, #1317	; 0x525
   16f94:	2201      	movs	r2, #1
   16f96:	f7ea fd0d 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   16f9a:	2326      	movs	r3, #38	; 0x26
   16f9c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   16f9e:	2300      	movs	r3, #0
   16fa0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16fa2:	2301      	movs	r3, #1
   16fa4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16fa6:	1d3b      	adds	r3, r7, #4
   16fa8:	4618      	mov	r0, r3
   16faa:	f7eb f951 	bl	2250 <NVIC_Init>
}
   16fae:	3708      	adds	r7, #8
   16fb0:	46bd      	mov	sp, r7
   16fb2:	bd80      	pop	{r7, pc}

00016fb4 <enable_rs232>:

void enable_rs232(void)
{
   16fb4:	b580      	push	{r7, lr}
   16fb6:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   16fb8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16fbc:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16fc0:	2101      	movs	r1, #1
   16fc2:	f7ea fcd7 	bl	1974 <USART_Cmd>
}
   16fc6:	bd80      	pop	{r7, pc}

00016fc8 <send_byte>:

void send_byte(uint8_t b)
{
   16fc8:	b580      	push	{r7, lr}
   16fca:	b082      	sub	sp, #8
   16fcc:	af00      	add	r7, sp, #0
   16fce:	4603      	mov	r3, r0
   16fd0:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   16fd2:	bf00      	nop
   16fd4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16fd8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16fdc:	2180      	movs	r1, #128	; 0x80
   16fde:	f7ea ff35 	bl	1e4c <USART_GetFlagStatus>
   16fe2:	4603      	mov	r3, r0
   16fe4:	2b00      	cmp	r3, #0
   16fe6:	d0f5      	beq.n	16fd4 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   16fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
   16ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16ff4:	f2c4 0201 	movt	r2, #16385	; 0x4001
   16ff8:	68d2      	ldr	r2, [r2, #12]
   16ffa:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   16ffe:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17000:	79fb      	ldrb	r3, [r7, #7]
   17002:	b29b      	uxth	r3, r3
   17004:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17008:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1700c:	4619      	mov	r1, r3
   1700e:	f7ea fdd1 	bl	1bb4 <USART_SendData>
}
   17012:	3708      	adds	r7, #8
   17014:	46bd      	mov	sp, r7
   17016:	bd80      	pop	{r7, pc}

00017018 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17018:	b580      	push	{r7, lr}
   1701a:	b082      	sub	sp, #8
   1701c:	af00      	add	r7, sp, #0
   1701e:	4603      	mov	r3, r0
   17020:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   17022:	79fb      	ldrb	r3, [r7, #7]
   17024:	3330      	adds	r3, #48	; 0x30
   17026:	b2db      	uxtb	r3, r3
   17028:	4618      	mov	r0, r3
   1702a:	f7ff ffcd 	bl	16fc8 <send_byte>
}
   1702e:	3708      	adds	r7, #8
   17030:	46bd      	mov	sp, r7
   17032:	bd80      	pop	{r7, pc}

00017034 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   17034:	b580      	push	{r7, lr}
   17036:	b084      	sub	sp, #16
   17038:	af00      	add	r7, sp, #0
   1703a:	6078      	str	r0, [r7, #4]
    int i = 0;
   1703c:	2300      	movs	r3, #0
   1703e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17040:	e009      	b.n	17056 <vPrintString+0x22>
    {
        send_byte(string[i]);
   17042:	68fb      	ldr	r3, [r7, #12]
   17044:	687a      	ldr	r2, [r7, #4]
   17046:	4413      	add	r3, r2
   17048:	781b      	ldrb	r3, [r3, #0]
   1704a:	4618      	mov	r0, r3
   1704c:	f7ff ffbc 	bl	16fc8 <send_byte>
        i++;
   17050:	68fb      	ldr	r3, [r7, #12]
   17052:	3301      	adds	r3, #1
   17054:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   17056:	68fb      	ldr	r3, [r7, #12]
   17058:	687a      	ldr	r2, [r7, #4]
   1705a:	4413      	add	r3, r2
   1705c:	781b      	ldrb	r3, [r3, #0]
   1705e:	2b00      	cmp	r3, #0
   17060:	d1ef      	bne.n	17042 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   17062:	3710      	adds	r7, #16
   17064:	46bd      	mov	sp, r7
   17066:	bd80      	pop	{r7, pc}

00017068 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17068:	b580      	push	{r7, lr}
   1706a:	b08a      	sub	sp, #40	; 0x28
   1706c:	af00      	add	r7, sp, #0
   1706e:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17070:	2300      	movs	r3, #0
   17072:	623b      	str	r3, [r7, #32]
    long num = c_num;
   17074:	687b      	ldr	r3, [r7, #4]
   17076:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17078:	69fb      	ldr	r3, [r7, #28]
   1707a:	2b00      	cmp	r3, #0
   1707c:	d106      	bne.n	1708c <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   1707e:	f248 700c 	movw	r0, #34572	; 0x870c
   17082:	f2c0 0001 	movt	r0, #1
   17086:	f7ff ffd5 	bl	17034 <vPrintString>
   1708a:	e062      	b.n	17152 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   1708c:	e024      	b.n	170d8 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   1708e:	69f9      	ldr	r1, [r7, #28]
   17090:	f246 6367 	movw	r3, #26215	; 0x6667
   17094:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17098:	fb83 2301 	smull	r2, r3, r3, r1
   1709c:	109a      	asrs	r2, r3, #2
   1709e:	17cb      	asrs	r3, r1, #31
   170a0:	1ad2      	subs	r2, r2, r3
   170a2:	4613      	mov	r3, r2
   170a4:	009b      	lsls	r3, r3, #2
   170a6:	4413      	add	r3, r2
   170a8:	005b      	lsls	r3, r3, #1
   170aa:	1aca      	subs	r2, r1, r3
   170ac:	b2d3      	uxtb	r3, r2
   170ae:	3330      	adds	r3, #48	; 0x30
   170b0:	b2da      	uxtb	r2, r3
   170b2:	f107 010c 	add.w	r1, r7, #12
   170b6:	6a3b      	ldr	r3, [r7, #32]
   170b8:	440b      	add	r3, r1
   170ba:	701a      	strb	r2, [r3, #0]
            count ++;
   170bc:	6a3b      	ldr	r3, [r7, #32]
   170be:	3301      	adds	r3, #1
   170c0:	623b      	str	r3, [r7, #32]
            num /= 10;
   170c2:	69fa      	ldr	r2, [r7, #28]
   170c4:	f246 6367 	movw	r3, #26215	; 0x6667
   170c8:	f2c6 6366 	movt	r3, #26214	; 0x6666
   170cc:	fb83 1302 	smull	r1, r3, r3, r2
   170d0:	1099      	asrs	r1, r3, #2
   170d2:	17d3      	asrs	r3, r2, #31
   170d4:	1acb      	subs	r3, r1, r3
   170d6:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   170d8:	69fb      	ldr	r3, [r7, #28]
   170da:	2b00      	cmp	r3, #0
   170dc:	d1d7      	bne.n	1708e <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   170de:	f107 020c 	add.w	r2, r7, #12
   170e2:	6a3b      	ldr	r3, [r7, #32]
   170e4:	4413      	add	r3, r2
   170e6:	2200      	movs	r2, #0
   170e8:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   170ea:	2300      	movs	r3, #0
   170ec:	627b      	str	r3, [r7, #36]	; 0x24
   170ee:	e020      	b.n	17132 <vPrintNumber+0xca>
        {
            tmp = time[i];
   170f0:	f107 020c 	add.w	r2, r7, #12
   170f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   170f6:	4413      	add	r3, r2
   170f8:	781b      	ldrb	r3, [r3, #0]
   170fa:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   170fc:	6a3a      	ldr	r2, [r7, #32]
   170fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17100:	1ad3      	subs	r3, r2, r3
   17102:	3b01      	subs	r3, #1
   17104:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17108:	4413      	add	r3, r2
   1710a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   1710e:	f107 010c 	add.w	r1, r7, #12
   17112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17114:	440b      	add	r3, r1
   17116:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17118:	6a3a      	ldr	r2, [r7, #32]
   1711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1711c:	1ad3      	subs	r3, r2, r3
   1711e:	3b01      	subs	r3, #1
   17120:	f107 0128 	add.w	r1, r7, #40	; 0x28
   17124:	440b      	add	r3, r1
   17126:	7efa      	ldrb	r2, [r7, #27]
   17128:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   1712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1712e:	3301      	adds	r3, #1
   17130:	627b      	str	r3, [r7, #36]	; 0x24
   17132:	6a3b      	ldr	r3, [r7, #32]
   17134:	085a      	lsrs	r2, r3, #1
   17136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17138:	429a      	cmp	r2, r3
   1713a:	d8d9      	bhi.n	170f0 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   1713c:	f107 030c 	add.w	r3, r7, #12
   17140:	4618      	mov	r0, r3
   17142:	f7ff ff77 	bl	17034 <vPrintString>
        vPrintString("\n\r");
   17146:	f248 7010 	movw	r0, #34576	; 0x8710
   1714a:	f2c0 0001 	movt	r0, #1
   1714e:	f7ff ff71 	bl	17034 <vPrintString>
    }
}
   17152:	3728      	adds	r7, #40	; 0x28
   17154:	46bd      	mov	sp, r7
   17156:	bd80      	pop	{r7, pc}

00017158 <vInitInitialise>:

extern xTaskComplete[NUMBEROFTASK];


void vInitInitialise()
{
   17158:	b480      	push	{r7}
   1715a:	b083      	sub	sp, #12
   1715c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   1715e:	2300      	movs	r3, #0
   17160:	607b      	str	r3, [r7, #4]
   17162:	e00a      	b.n	1717a <vInitInitialise+0x22>
    {
        IS_INIT[i] = 0;
   17164:	f24b 7334 	movw	r3, #46900	; 0xb734
   17168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1716c:	687a      	ldr	r2, [r7, #4]
   1716e:	2100      	movs	r1, #0
   17170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vInitInitialise()
{
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   17174:	687b      	ldr	r3, [r7, #4]
   17176:	3301      	adds	r3, #1
   17178:	607b      	str	r3, [r7, #4]
   1717a:	687b      	ldr	r3, [r7, #4]
   1717c:	2b0c      	cmp	r3, #12
   1717e:	ddf1      	ble.n	17164 <vInitInitialise+0xc>
    {
        IS_INIT[i] = 0;
    }
}
   17180:	370c      	adds	r7, #12
   17182:	46bd      	mov	sp, r7
   17184:	f85d 7b04 	ldr.w	r7, [sp], #4
   17188:	4770      	bx	lr
   1718a:	bf00      	nop

0001718c <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   1718c:	b590      	push	{r4, r7, lr}
   1718e:	b089      	sub	sp, #36	; 0x24
   17190:	af04      	add	r7, sp, #16
    init_led();
   17192:	f7ff fe45 	bl	16e20 <init_led>
    init_rs232();
   17196:	f7ff fea5 	bl	16ee4 <init_rs232>
    enable_rs232_interrupts();
   1719a:	f7ff fee9 	bl	16f70 <enable_rs232_interrupts>
    enable_rs232();
   1719e:	f7ff ff09 	bl	16fb4 <enable_rs232>

    //vTaskCompleteInitialise();
    vInitInitialise();
   171a2:	f7ff ffd9 	bl	17158 <vInitInitialise>
    vSemaphoreInitialise();
   171a6:	f7eb fe2b 	bl	2e00 <vSemaphoreInitialise>
    vParameterInitialise();
   171aa:	f7eb fe69 	bl	2e80 <vParameterInitialise>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   171ae:	2300      	movs	r3, #0
   171b0:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   171b2:	2301      	movs	r3, #1
   171b4:	9300      	str	r3, [sp, #0]
   171b6:	4b42      	ldr	r3, [pc, #264]	; (172c0 <main+0x134>)
   171b8:	9301      	str	r3, [sp, #4]
   171ba:	2300      	movs	r3, #0
   171bc:	9302      	str	r3, [sp, #8]
   171be:	2300      	movs	r3, #0
   171c0:	9303      	str	r3, [sp, #12]
   171c2:	f243 700d 	movw	r0, #14093	; 0x370d
   171c6:	f2c0 0000 	movt	r0, #0
   171ca:	f248 7114 	movw	r1, #34580	; 0x8714
   171ce:	f2c0 0101 	movt	r1, #1
   171d2:	2280      	movs	r2, #128	; 0x80
   171d4:	4b3b      	ldr	r3, [pc, #236]	; (172c4 <main+0x138>)
   171d6:	f7ed fa05 	bl	45e4 <xTaskGenericCreate>

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   171da:	2300      	movs	r3, #0
   171dc:	60fb      	str	r3, [r7, #12]
   171de:	e064      	b.n	172aa <main+0x11e>
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   171e0:	2300      	movs	r3, #0
   171e2:	60bb      	str	r3, [r7, #8]
   171e4:	e00f      	b.n	17206 <main+0x7a>
        {
            if( i == xSensorOfTask[j] )
   171e6:	f240 0360 	movw	r3, #96	; 0x60
   171ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171ee:	68ba      	ldr	r2, [r7, #8]
   171f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   171f4:	68fb      	ldr	r3, [r7, #12]
   171f6:	429a      	cmp	r2, r3
   171f8:	d102      	bne.n	17200 <main+0x74>
            {
                flag = 1;  // sensor 
   171fa:	2301      	movs	r3, #1
   171fc:	607b      	str	r3, [r7, #4]
                break;
   171fe:	e005      	b.n	1720c <main+0x80>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   17200:	68bb      	ldr	r3, [r7, #8]
   17202:	3301      	adds	r3, #1
   17204:	60bb      	str	r3, [r7, #8]
   17206:	68bb      	ldr	r3, [r7, #8]
   17208:	2b0c      	cmp	r3, #12
   1720a:	ddec      	ble.n	171e6 <main+0x5a>
                flag = 1;  // sensor 
                break;
            }
        }
        // create sensor 
        if(flag == 1)
   1720c:	687b      	ldr	r3, [r7, #4]
   1720e:	2b01      	cmp	r3, #1
   17210:	d125      	bne.n	1725e <main+0xd2>
        {
            flag = 0; 
   17212:	2300      	movs	r3, #0
   17214:	607b      	str	r3, [r7, #4]
            xTaskCreate( vSensor, "sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   17216:	68fb      	ldr	r3, [r7, #12]
   17218:	222c      	movs	r2, #44	; 0x2c
   1721a:	fb02 f203 	mul.w	r2, r2, r3
   1721e:	f240 5338 	movw	r3, #1336	; 0x538
   17222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17226:	18d4      	adds	r4, r2, r3
   17228:	68fb      	ldr	r3, [r7, #12]
   1722a:	009a      	lsls	r2, r3, #2
   1722c:	f640 33c8 	movw	r3, #3016	; 0xbc8
   17230:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17234:	4413      	add	r3, r2
   17236:	2202      	movs	r2, #2
   17238:	9200      	str	r2, [sp, #0]
   1723a:	9301      	str	r3, [sp, #4]
   1723c:	2300      	movs	r3, #0
   1723e:	9302      	str	r3, [sp, #8]
   17240:	2300      	movs	r3, #0
   17242:	9303      	str	r3, [sp, #12]
   17244:	f243 20f9 	movw	r0, #13049	; 0x32f9
   17248:	f2c0 0000 	movt	r0, #0
   1724c:	f248 7120 	movw	r1, #34592	; 0x8720
   17250:	f2c0 0101 	movt	r1, #1
   17254:	2280      	movs	r2, #128	; 0x80
   17256:	4623      	mov	r3, r4
   17258:	f7ed f9c4 	bl	45e4 <xTaskGenericCreate>
   1725c:	e022      	b.n	172a4 <main+0x118>
        }
        else  // create servant
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   1725e:	68fb      	ldr	r3, [r7, #12]
   17260:	222c      	movs	r2, #44	; 0x2c
   17262:	fb02 f203 	mul.w	r2, r2, r3
   17266:	f240 5338 	movw	r3, #1336	; 0x538
   1726a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1726e:	18d4      	adds	r4, r2, r3
   17270:	68fb      	ldr	r3, [r7, #12]
   17272:	009a      	lsls	r2, r3, #2
   17274:	f640 33c8 	movw	r3, #3016	; 0xbc8
   17278:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1727c:	4413      	add	r3, r2
   1727e:	2202      	movs	r2, #2
   17280:	9200      	str	r2, [sp, #0]
   17282:	9301      	str	r3, [sp, #4]
   17284:	2300      	movs	r3, #0
   17286:	9302      	str	r3, [sp, #8]
   17288:	2300      	movs	r3, #0
   1728a:	9303      	str	r3, [sp, #12]
   1728c:	f243 5029 	movw	r0, #13609	; 0x3529
   17290:	f2c0 0000 	movt	r0, #0
   17294:	f248 7128 	movw	r1, #34600	; 0x8728
   17298:	f2c0 0101 	movt	r1, #1
   1729c:	2280      	movs	r2, #128	; 0x80
   1729e:	4623      	mov	r3, r4
   172a0:	f7ed f9a0 	bl	45e4 <xTaskGenericCreate>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   172a4:	68fb      	ldr	r3, [r7, #12]
   172a6:	3301      	adds	r3, #1
   172a8:	60fb      	str	r3, [r7, #12]
   172aa:	68fb      	ldr	r3, [r7, #12]
   172ac:	2b21      	cmp	r3, #33	; 0x21
   172ae:	dd97      	ble.n	171e0 <main+0x54>
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
        }
    }
    /* Start running the task. */
    vTaskStartScheduler();
   172b0:	f7ed fd16 	bl	4ce0 <vTaskStartScheduler>

    return 0;
   172b4:	2300      	movs	r3, #0
}
   172b6:	4618      	mov	r0, r3
   172b8:	3714      	adds	r7, #20
   172ba:	46bd      	mov	sp, r7
   172bc:	bd90      	pop	{r4, r7, pc}
   172be:	bf00      	nop
   172c0:	20000c50 	.word	0x20000c50
   172c4:	20000b10 	.word	0x20000b10

000172c8 <myTraceCreate>:

void myTraceCreate      (){
   172c8:	b480      	push	{r7}
   172ca:	af00      	add	r7, sp, #0
}
   172cc:	46bd      	mov	sp, r7
   172ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   172d2:	4770      	bx	lr

000172d4 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   172d4:	b480      	push	{r7}
   172d6:	af00      	add	r7, sp, #0
}
   172d8:	46bd      	mov	sp, r7
   172da:	f85d 7b04 	ldr.w	r7, [sp], #4
   172de:	4770      	bx	lr

000172e0 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   172e0:	b480      	push	{r7}
   172e2:	af00      	add	r7, sp, #0
}
   172e4:	46bd      	mov	sp, r7
   172e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   172ea:	4770      	bx	lr

000172ec <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   172ec:	b580      	push	{r7, lr}
   172ee:	b082      	sub	sp, #8
   172f0:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   172f2:	f7ed fddf 	bl	4eb4 <xTaskGetTickCount>
   172f6:	6038      	str	r0, [r7, #0]
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 1001)
   172f8:	683b      	ldr	r3, [r7, #0]
   172fa:	2b00      	cmp	r3, #0
   172fc:	d03f      	beq.n	1737e <vApplicationTickHook+0x92>
   172fe:	683b      	ldr	r3, [r7, #0]
   17300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   17304:	d83b      	bhi.n	1737e <vApplicationTickHook+0x92>
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   17306:	2300      	movs	r3, #0
   17308:	607b      	str	r3, [r7, #4]
   1730a:	e035      	b.n	17378 <vApplicationTickHook+0x8c>
        {
            if( IS_INIT[i] == 0 && xCurrentTime % xPeriodOfTask[i] == 0 )
   1730c:	f24b 7334 	movw	r3, #46900	; 0xb734
   17310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17314:	687a      	ldr	r2, [r7, #4]
   17316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1731a:	2b00      	cmp	r3, #0
   1731c:	d129      	bne.n	17372 <vApplicationTickHook+0x86>
   1731e:	f240 032c 	movw	r3, #44	; 0x2c
   17322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17326:	687a      	ldr	r2, [r7, #4]
   17328:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1732c:	683b      	ldr	r3, [r7, #0]
   1732e:	fbb3 f1f2 	udiv	r1, r3, r2
   17332:	fb02 f201 	mul.w	r2, r2, r1
   17336:	1a9b      	subs	r3, r3, r2
   17338:	2b00      	cmp	r3, #0
   1733a:	d11a      	bne.n	17372 <vApplicationTickHook+0x86>
            {
                IS_INIT[i] = 1;
   1733c:	f24b 7334 	movw	r3, #46900	; 0xb734
   17340:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17344:	687a      	ldr	r2, [r7, #4]
   17346:	2101      	movs	r1, #1
   17348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xSemaphoreGive( xBinarySemaphore[xSensorOfTask[i]] );
   1734c:	f240 0360 	movw	r3, #96	; 0x60
   17350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17354:	687a      	ldr	r2, [r7, #4]
   17356:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1735a:	f640 333c 	movw	r3, #2876	; 0xb3c
   1735e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17366:	4618      	mov	r0, r3
   17368:	2100      	movs	r1, #0
   1736a:	2200      	movs	r2, #0
   1736c:	2300      	movs	r3, #0
   1736e:	f7ec fe27 	bl	3fc0 <xQueueGenericSend>
    portTickType xCurrentTime = xTaskGetTickCount();
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 1001)
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   17372:	687b      	ldr	r3, [r7, #4]
   17374:	3301      	adds	r3, #1
   17376:	607b      	str	r3, [r7, #4]
   17378:	687b      	ldr	r3, [r7, #4]
   1737a:	2b0c      	cmp	r3, #12
   1737c:	ddc6      	ble.n	1730c <vApplicationTickHook+0x20>
    }
    
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   1737e:	f240 032c 	movw	r3, #44	; 0x2c
   17382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17386:	681b      	ldr	r3, [r3, #0]
   17388:	005a      	lsls	r2, r3, #1
   1738a:	683b      	ldr	r3, [r7, #0]
   1738c:	429a      	cmp	r2, r3
   1738e:	d83f      	bhi.n	17410 <vApplicationTickHook+0x124>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   17390:	f240 032c 	movw	r3, #44	; 0x2c
   17394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17398:	681a      	ldr	r2, [r3, #0]
   1739a:	683b      	ldr	r3, [r7, #0]
   1739c:	fbb3 f1f2 	udiv	r1, r3, r2
   173a0:	fb02 f201 	mul.w	r2, r2, r1
   173a4:	1a9b      	subs	r3, r3, r2
   173a6:	2b00      	cmp	r3, #0
   173a8:	d026      	beq.n	173f8 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   173aa:	f240 032c 	movw	r3, #44	; 0x2c
   173ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173b2:	689a      	ldr	r2, [r3, #8]
   173b4:	683b      	ldr	r3, [r7, #0]
   173b6:	fbb3 f1f2 	udiv	r1, r3, r2
   173ba:	fb02 f201 	mul.w	r2, r2, r1
   173be:	1a9b      	subs	r3, r3, r2
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   173c0:	2b00      	cmp	r3, #0
   173c2:	d019      	beq.n	173f8 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   173c4:	f240 032c 	movw	r3, #44	; 0x2c
   173c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173cc:	6a1a      	ldr	r2, [r3, #32]
   173ce:	683b      	ldr	r3, [r7, #0]
   173d0:	fbb3 f1f2 	udiv	r1, r3, r2
   173d4:	fb02 f201 	mul.w	r2, r2, r1
   173d8:	1a9b      	subs	r3, r3, r2
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   173da:	2b00      	cmp	r3, #0
   173dc:	d00c      	beq.n	173f8 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[8] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0)
   173de:	f240 032c 	movw	r3, #44	; 0x2c
   173e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   173e8:	683b      	ldr	r3, [r7, #0]
   173ea:	fbb3 f1f2 	udiv	r1, r3, r2
   173ee:	fb02 f201 	mul.w	r2, r2, r1
   173f2:	1a9b      	subs	r3, r3, r2
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   173f4:	2b00      	cmp	r3, #0
   173f6:	d10b      	bne.n	17410 <vApplicationTickHook+0x124>
            xCurrentTime % xPeriodOfTask[12] == 0)
        {
           xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT - 1] ); 
   173f8:	f640 333c 	movw	r3, #2876	; 0xb3c
   173fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   17404:	4618      	mov	r0, r3
   17406:	2100      	movs	r1, #0
   17408:	2200      	movs	r2, #0
   1740a:	2300      	movs	r3, #0
   1740c:	f7ec fdd8 	bl	3fc0 <xQueueGenericSend>
        }
    }
}
   17410:	3708      	adds	r7, #8
   17412:	46bd      	mov	sp, r7
   17414:	bd80      	pop	{r7, pc}
   17416:	bf00      	nop

00017418 <__aeabi_drsub>:
   17418:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1741c:	e002      	b.n	17424 <__adddf3>
   1741e:	bf00      	nop

00017420 <__aeabi_dsub>:
   17420:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017424 <__adddf3>:
   17424:	b530      	push	{r4, r5, lr}
   17426:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1742a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1742e:	ea94 0f05 	teq	r4, r5
   17432:	bf08      	it	eq
   17434:	ea90 0f02 	teqeq	r0, r2
   17438:	bf1f      	itttt	ne
   1743a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1743e:	ea55 0c02 	orrsne.w	ip, r5, r2
   17442:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   17446:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1744a:	f000 80e2 	beq.w	17612 <__adddf3+0x1ee>
   1744e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17452:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17456:	bfb8      	it	lt
   17458:	426d      	neglt	r5, r5
   1745a:	dd0c      	ble.n	17476 <__adddf3+0x52>
   1745c:	442c      	add	r4, r5
   1745e:	ea80 0202 	eor.w	r2, r0, r2
   17462:	ea81 0303 	eor.w	r3, r1, r3
   17466:	ea82 0000 	eor.w	r0, r2, r0
   1746a:	ea83 0101 	eor.w	r1, r3, r1
   1746e:	ea80 0202 	eor.w	r2, r0, r2
   17472:	ea81 0303 	eor.w	r3, r1, r3
   17476:	2d36      	cmp	r5, #54	; 0x36
   17478:	bf88      	it	hi
   1747a:	bd30      	pophi	{r4, r5, pc}
   1747c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17480:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17484:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17488:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1748c:	d002      	beq.n	17494 <__adddf3+0x70>
   1748e:	4240      	negs	r0, r0
   17490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17494:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17498:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1749c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   174a0:	d002      	beq.n	174a8 <__adddf3+0x84>
   174a2:	4252      	negs	r2, r2
   174a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   174a8:	ea94 0f05 	teq	r4, r5
   174ac:	f000 80a7 	beq.w	175fe <__adddf3+0x1da>
   174b0:	f1a4 0401 	sub.w	r4, r4, #1
   174b4:	f1d5 0e20 	rsbs	lr, r5, #32
   174b8:	db0d      	blt.n	174d6 <__adddf3+0xb2>
   174ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   174be:	fa22 f205 	lsr.w	r2, r2, r5
   174c2:	1880      	adds	r0, r0, r2
   174c4:	f141 0100 	adc.w	r1, r1, #0
   174c8:	fa03 f20e 	lsl.w	r2, r3, lr
   174cc:	1880      	adds	r0, r0, r2
   174ce:	fa43 f305 	asr.w	r3, r3, r5
   174d2:	4159      	adcs	r1, r3
   174d4:	e00e      	b.n	174f4 <__adddf3+0xd0>
   174d6:	f1a5 0520 	sub.w	r5, r5, #32
   174da:	f10e 0e20 	add.w	lr, lr, #32
   174de:	2a01      	cmp	r2, #1
   174e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   174e4:	bf28      	it	cs
   174e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   174ea:	fa43 f305 	asr.w	r3, r3, r5
   174ee:	18c0      	adds	r0, r0, r3
   174f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   174f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   174f8:	d507      	bpl.n	1750a <__adddf3+0xe6>
   174fa:	f04f 0e00 	mov.w	lr, #0
   174fe:	f1dc 0c00 	rsbs	ip, ip, #0
   17502:	eb7e 0000 	sbcs.w	r0, lr, r0
   17506:	eb6e 0101 	sbc.w	r1, lr, r1
   1750a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1750e:	d31b      	bcc.n	17548 <__adddf3+0x124>
   17510:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17514:	d30c      	bcc.n	17530 <__adddf3+0x10c>
   17516:	0849      	lsrs	r1, r1, #1
   17518:	ea5f 0030 	movs.w	r0, r0, rrx
   1751c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17520:	f104 0401 	add.w	r4, r4, #1
   17524:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17528:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1752c:	f080 809a 	bcs.w	17664 <__adddf3+0x240>
   17530:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17534:	bf08      	it	eq
   17536:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1753a:	f150 0000 	adcs.w	r0, r0, #0
   1753e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17542:	ea41 0105 	orr.w	r1, r1, r5
   17546:	bd30      	pop	{r4, r5, pc}
   17548:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1754c:	4140      	adcs	r0, r0
   1754e:	eb41 0101 	adc.w	r1, r1, r1
   17552:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17556:	f1a4 0401 	sub.w	r4, r4, #1
   1755a:	d1e9      	bne.n	17530 <__adddf3+0x10c>
   1755c:	f091 0f00 	teq	r1, #0
   17560:	bf04      	itt	eq
   17562:	4601      	moveq	r1, r0
   17564:	2000      	moveq	r0, #0
   17566:	fab1 f381 	clz	r3, r1
   1756a:	bf08      	it	eq
   1756c:	3320      	addeq	r3, #32
   1756e:	f1a3 030b 	sub.w	r3, r3, #11
   17572:	f1b3 0220 	subs.w	r2, r3, #32
   17576:	da0c      	bge.n	17592 <__adddf3+0x16e>
   17578:	320c      	adds	r2, #12
   1757a:	dd08      	ble.n	1758e <__adddf3+0x16a>
   1757c:	f102 0c14 	add.w	ip, r2, #20
   17580:	f1c2 020c 	rsb	r2, r2, #12
   17584:	fa01 f00c 	lsl.w	r0, r1, ip
   17588:	fa21 f102 	lsr.w	r1, r1, r2
   1758c:	e00c      	b.n	175a8 <__adddf3+0x184>
   1758e:	f102 0214 	add.w	r2, r2, #20
   17592:	bfd8      	it	le
   17594:	f1c2 0c20 	rsble	ip, r2, #32
   17598:	fa01 f102 	lsl.w	r1, r1, r2
   1759c:	fa20 fc0c 	lsr.w	ip, r0, ip
   175a0:	bfdc      	itt	le
   175a2:	ea41 010c 	orrle.w	r1, r1, ip
   175a6:	4090      	lslle	r0, r2
   175a8:	1ae4      	subs	r4, r4, r3
   175aa:	bfa2      	ittt	ge
   175ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   175b0:	4329      	orrge	r1, r5
   175b2:	bd30      	popge	{r4, r5, pc}
   175b4:	ea6f 0404 	mvn.w	r4, r4
   175b8:	3c1f      	subs	r4, #31
   175ba:	da1c      	bge.n	175f6 <__adddf3+0x1d2>
   175bc:	340c      	adds	r4, #12
   175be:	dc0e      	bgt.n	175de <__adddf3+0x1ba>
   175c0:	f104 0414 	add.w	r4, r4, #20
   175c4:	f1c4 0220 	rsb	r2, r4, #32
   175c8:	fa20 f004 	lsr.w	r0, r0, r4
   175cc:	fa01 f302 	lsl.w	r3, r1, r2
   175d0:	ea40 0003 	orr.w	r0, r0, r3
   175d4:	fa21 f304 	lsr.w	r3, r1, r4
   175d8:	ea45 0103 	orr.w	r1, r5, r3
   175dc:	bd30      	pop	{r4, r5, pc}
   175de:	f1c4 040c 	rsb	r4, r4, #12
   175e2:	f1c4 0220 	rsb	r2, r4, #32
   175e6:	fa20 f002 	lsr.w	r0, r0, r2
   175ea:	fa01 f304 	lsl.w	r3, r1, r4
   175ee:	ea40 0003 	orr.w	r0, r0, r3
   175f2:	4629      	mov	r1, r5
   175f4:	bd30      	pop	{r4, r5, pc}
   175f6:	fa21 f004 	lsr.w	r0, r1, r4
   175fa:	4629      	mov	r1, r5
   175fc:	bd30      	pop	{r4, r5, pc}
   175fe:	f094 0f00 	teq	r4, #0
   17602:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17606:	bf06      	itte	eq
   17608:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1760c:	3401      	addeq	r4, #1
   1760e:	3d01      	subne	r5, #1
   17610:	e74e      	b.n	174b0 <__adddf3+0x8c>
   17612:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17616:	bf18      	it	ne
   17618:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1761c:	d029      	beq.n	17672 <__adddf3+0x24e>
   1761e:	ea94 0f05 	teq	r4, r5
   17622:	bf08      	it	eq
   17624:	ea90 0f02 	teqeq	r0, r2
   17628:	d005      	beq.n	17636 <__adddf3+0x212>
   1762a:	ea54 0c00 	orrs.w	ip, r4, r0
   1762e:	bf04      	itt	eq
   17630:	4619      	moveq	r1, r3
   17632:	4610      	moveq	r0, r2
   17634:	bd30      	pop	{r4, r5, pc}
   17636:	ea91 0f03 	teq	r1, r3
   1763a:	bf1e      	ittt	ne
   1763c:	2100      	movne	r1, #0
   1763e:	2000      	movne	r0, #0
   17640:	bd30      	popne	{r4, r5, pc}
   17642:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17646:	d105      	bne.n	17654 <__adddf3+0x230>
   17648:	0040      	lsls	r0, r0, #1
   1764a:	4149      	adcs	r1, r1
   1764c:	bf28      	it	cs
   1764e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17652:	bd30      	pop	{r4, r5, pc}
   17654:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17658:	bf3c      	itt	cc
   1765a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1765e:	bd30      	popcc	{r4, r5, pc}
   17660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17664:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17668:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1766c:	f04f 0000 	mov.w	r0, #0
   17670:	bd30      	pop	{r4, r5, pc}
   17672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17676:	bf1a      	itte	ne
   17678:	4619      	movne	r1, r3
   1767a:	4610      	movne	r0, r2
   1767c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17680:	bf1c      	itt	ne
   17682:	460b      	movne	r3, r1
   17684:	4602      	movne	r2, r0
   17686:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1768a:	bf06      	itte	eq
   1768c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17690:	ea91 0f03 	teqeq	r1, r3
   17694:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17698:	bd30      	pop	{r4, r5, pc}
   1769a:	bf00      	nop

0001769c <__aeabi_ui2d>:
   1769c:	f090 0f00 	teq	r0, #0
   176a0:	bf04      	itt	eq
   176a2:	2100      	moveq	r1, #0
   176a4:	4770      	bxeq	lr
   176a6:	b530      	push	{r4, r5, lr}
   176a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   176ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   176b0:	f04f 0500 	mov.w	r5, #0
   176b4:	f04f 0100 	mov.w	r1, #0
   176b8:	e750      	b.n	1755c <__adddf3+0x138>
   176ba:	bf00      	nop

000176bc <__aeabi_i2d>:
   176bc:	f090 0f00 	teq	r0, #0
   176c0:	bf04      	itt	eq
   176c2:	2100      	moveq	r1, #0
   176c4:	4770      	bxeq	lr
   176c6:	b530      	push	{r4, r5, lr}
   176c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   176cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   176d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   176d4:	bf48      	it	mi
   176d6:	4240      	negmi	r0, r0
   176d8:	f04f 0100 	mov.w	r1, #0
   176dc:	e73e      	b.n	1755c <__adddf3+0x138>
   176de:	bf00      	nop

000176e0 <__aeabi_f2d>:
   176e0:	0042      	lsls	r2, r0, #1
   176e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   176e6:	ea4f 0131 	mov.w	r1, r1, rrx
   176ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   176ee:	bf1f      	itttt	ne
   176f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   176f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   176f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   176fc:	4770      	bxne	lr
   176fe:	f092 0f00 	teq	r2, #0
   17702:	bf14      	ite	ne
   17704:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17708:	4770      	bxeq	lr
   1770a:	b530      	push	{r4, r5, lr}
   1770c:	f44f 7460 	mov.w	r4, #896	; 0x380
   17710:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17714:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17718:	e720      	b.n	1755c <__adddf3+0x138>
   1771a:	bf00      	nop

0001771c <__aeabi_ul2d>:
   1771c:	ea50 0201 	orrs.w	r2, r0, r1
   17720:	bf08      	it	eq
   17722:	4770      	bxeq	lr
   17724:	b530      	push	{r4, r5, lr}
   17726:	f04f 0500 	mov.w	r5, #0
   1772a:	e00a      	b.n	17742 <__aeabi_l2d+0x16>

0001772c <__aeabi_l2d>:
   1772c:	ea50 0201 	orrs.w	r2, r0, r1
   17730:	bf08      	it	eq
   17732:	4770      	bxeq	lr
   17734:	b530      	push	{r4, r5, lr}
   17736:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1773a:	d502      	bpl.n	17742 <__aeabi_l2d+0x16>
   1773c:	4240      	negs	r0, r0
   1773e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17742:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17746:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1774a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1774e:	f43f aedc 	beq.w	1750a <__adddf3+0xe6>
   17752:	f04f 0203 	mov.w	r2, #3
   17756:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1775a:	bf18      	it	ne
   1775c:	3203      	addne	r2, #3
   1775e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17762:	bf18      	it	ne
   17764:	3203      	addne	r2, #3
   17766:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1776a:	f1c2 0320 	rsb	r3, r2, #32
   1776e:	fa00 fc03 	lsl.w	ip, r0, r3
   17772:	fa20 f002 	lsr.w	r0, r0, r2
   17776:	fa01 fe03 	lsl.w	lr, r1, r3
   1777a:	ea40 000e 	orr.w	r0, r0, lr
   1777e:	fa21 f102 	lsr.w	r1, r1, r2
   17782:	4414      	add	r4, r2
   17784:	e6c1      	b.n	1750a <__adddf3+0xe6>
   17786:	bf00      	nop

00017788 <__aeabi_dmul>:
   17788:	b570      	push	{r4, r5, r6, lr}
   1778a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1778e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17792:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17796:	bf1d      	ittte	ne
   17798:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1779c:	ea94 0f0c 	teqne	r4, ip
   177a0:	ea95 0f0c 	teqne	r5, ip
   177a4:	f000 f8de 	bleq	17964 <__aeabi_dmul+0x1dc>
   177a8:	442c      	add	r4, r5
   177aa:	ea81 0603 	eor.w	r6, r1, r3
   177ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   177b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   177b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   177ba:	bf18      	it	ne
   177bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   177c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   177c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   177c8:	d038      	beq.n	1783c <__aeabi_dmul+0xb4>
   177ca:	fba0 ce02 	umull	ip, lr, r0, r2
   177ce:	f04f 0500 	mov.w	r5, #0
   177d2:	fbe1 e502 	umlal	lr, r5, r1, r2
   177d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   177da:	fbe0 e503 	umlal	lr, r5, r0, r3
   177de:	f04f 0600 	mov.w	r6, #0
   177e2:	fbe1 5603 	umlal	r5, r6, r1, r3
   177e6:	f09c 0f00 	teq	ip, #0
   177ea:	bf18      	it	ne
   177ec:	f04e 0e01 	orrne.w	lr, lr, #1
   177f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   177f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   177f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   177fc:	d204      	bcs.n	17808 <__aeabi_dmul+0x80>
   177fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17802:	416d      	adcs	r5, r5
   17804:	eb46 0606 	adc.w	r6, r6, r6
   17808:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1780c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17810:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17814:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17818:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1781c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17820:	bf88      	it	hi
   17822:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17826:	d81e      	bhi.n	17866 <__aeabi_dmul+0xde>
   17828:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1782c:	bf08      	it	eq
   1782e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17832:	f150 0000 	adcs.w	r0, r0, #0
   17836:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1783a:	bd70      	pop	{r4, r5, r6, pc}
   1783c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17840:	ea46 0101 	orr.w	r1, r6, r1
   17844:	ea40 0002 	orr.w	r0, r0, r2
   17848:	ea81 0103 	eor.w	r1, r1, r3
   1784c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17850:	bfc2      	ittt	gt
   17852:	ebd4 050c 	rsbsgt	r5, r4, ip
   17856:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1785a:	bd70      	popgt	{r4, r5, r6, pc}
   1785c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17860:	f04f 0e00 	mov.w	lr, #0
   17864:	3c01      	subs	r4, #1
   17866:	f300 80ab 	bgt.w	179c0 <__aeabi_dmul+0x238>
   1786a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1786e:	bfde      	ittt	le
   17870:	2000      	movle	r0, #0
   17872:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17876:	bd70      	pople	{r4, r5, r6, pc}
   17878:	f1c4 0400 	rsb	r4, r4, #0
   1787c:	3c20      	subs	r4, #32
   1787e:	da35      	bge.n	178ec <__aeabi_dmul+0x164>
   17880:	340c      	adds	r4, #12
   17882:	dc1b      	bgt.n	178bc <__aeabi_dmul+0x134>
   17884:	f104 0414 	add.w	r4, r4, #20
   17888:	f1c4 0520 	rsb	r5, r4, #32
   1788c:	fa00 f305 	lsl.w	r3, r0, r5
   17890:	fa20 f004 	lsr.w	r0, r0, r4
   17894:	fa01 f205 	lsl.w	r2, r1, r5
   17898:	ea40 0002 	orr.w	r0, r0, r2
   1789c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   178a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   178a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   178a8:	fa21 f604 	lsr.w	r6, r1, r4
   178ac:	eb42 0106 	adc.w	r1, r2, r6
   178b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   178b4:	bf08      	it	eq
   178b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   178ba:	bd70      	pop	{r4, r5, r6, pc}
   178bc:	f1c4 040c 	rsb	r4, r4, #12
   178c0:	f1c4 0520 	rsb	r5, r4, #32
   178c4:	fa00 f304 	lsl.w	r3, r0, r4
   178c8:	fa20 f005 	lsr.w	r0, r0, r5
   178cc:	fa01 f204 	lsl.w	r2, r1, r4
   178d0:	ea40 0002 	orr.w	r0, r0, r2
   178d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   178d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   178dc:	f141 0100 	adc.w	r1, r1, #0
   178e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   178e4:	bf08      	it	eq
   178e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   178ea:	bd70      	pop	{r4, r5, r6, pc}
   178ec:	f1c4 0520 	rsb	r5, r4, #32
   178f0:	fa00 f205 	lsl.w	r2, r0, r5
   178f4:	ea4e 0e02 	orr.w	lr, lr, r2
   178f8:	fa20 f304 	lsr.w	r3, r0, r4
   178fc:	fa01 f205 	lsl.w	r2, r1, r5
   17900:	ea43 0302 	orr.w	r3, r3, r2
   17904:	fa21 f004 	lsr.w	r0, r1, r4
   17908:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1790c:	fa21 f204 	lsr.w	r2, r1, r4
   17910:	ea20 0002 	bic.w	r0, r0, r2
   17914:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17918:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1791c:	bf08      	it	eq
   1791e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17922:	bd70      	pop	{r4, r5, r6, pc}
   17924:	f094 0f00 	teq	r4, #0
   17928:	d10f      	bne.n	1794a <__aeabi_dmul+0x1c2>
   1792a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1792e:	0040      	lsls	r0, r0, #1
   17930:	eb41 0101 	adc.w	r1, r1, r1
   17934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17938:	bf08      	it	eq
   1793a:	3c01      	subeq	r4, #1
   1793c:	d0f7      	beq.n	1792e <__aeabi_dmul+0x1a6>
   1793e:	ea41 0106 	orr.w	r1, r1, r6
   17942:	f095 0f00 	teq	r5, #0
   17946:	bf18      	it	ne
   17948:	4770      	bxne	lr
   1794a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1794e:	0052      	lsls	r2, r2, #1
   17950:	eb43 0303 	adc.w	r3, r3, r3
   17954:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17958:	bf08      	it	eq
   1795a:	3d01      	subeq	r5, #1
   1795c:	d0f7      	beq.n	1794e <__aeabi_dmul+0x1c6>
   1795e:	ea43 0306 	orr.w	r3, r3, r6
   17962:	4770      	bx	lr
   17964:	ea94 0f0c 	teq	r4, ip
   17968:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1796c:	bf18      	it	ne
   1796e:	ea95 0f0c 	teqne	r5, ip
   17972:	d00c      	beq.n	1798e <__aeabi_dmul+0x206>
   17974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17978:	bf18      	it	ne
   1797a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1797e:	d1d1      	bne.n	17924 <__aeabi_dmul+0x19c>
   17980:	ea81 0103 	eor.w	r1, r1, r3
   17984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17988:	f04f 0000 	mov.w	r0, #0
   1798c:	bd70      	pop	{r4, r5, r6, pc}
   1798e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17992:	bf06      	itte	eq
   17994:	4610      	moveq	r0, r2
   17996:	4619      	moveq	r1, r3
   17998:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1799c:	d019      	beq.n	179d2 <__aeabi_dmul+0x24a>
   1799e:	ea94 0f0c 	teq	r4, ip
   179a2:	d102      	bne.n	179aa <__aeabi_dmul+0x222>
   179a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   179a8:	d113      	bne.n	179d2 <__aeabi_dmul+0x24a>
   179aa:	ea95 0f0c 	teq	r5, ip
   179ae:	d105      	bne.n	179bc <__aeabi_dmul+0x234>
   179b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   179b4:	bf1c      	itt	ne
   179b6:	4610      	movne	r0, r2
   179b8:	4619      	movne	r1, r3
   179ba:	d10a      	bne.n	179d2 <__aeabi_dmul+0x24a>
   179bc:	ea81 0103 	eor.w	r1, r1, r3
   179c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   179c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   179c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   179cc:	f04f 0000 	mov.w	r0, #0
   179d0:	bd70      	pop	{r4, r5, r6, pc}
   179d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   179d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   179da:	bd70      	pop	{r4, r5, r6, pc}

000179dc <__aeabi_ddiv>:
   179dc:	b570      	push	{r4, r5, r6, lr}
   179de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   179e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   179e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   179ea:	bf1d      	ittte	ne
   179ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   179f0:	ea94 0f0c 	teqne	r4, ip
   179f4:	ea95 0f0c 	teqne	r5, ip
   179f8:	f000 f8a7 	bleq	17b4a <__aeabi_ddiv+0x16e>
   179fc:	eba4 0405 	sub.w	r4, r4, r5
   17a00:	ea81 0e03 	eor.w	lr, r1, r3
   17a04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17a08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17a0c:	f000 8088 	beq.w	17b20 <__aeabi_ddiv+0x144>
   17a10:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17a14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17a18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17a1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17a20:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17a24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17a28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17a2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17a30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17a34:	429d      	cmp	r5, r3
   17a36:	bf08      	it	eq
   17a38:	4296      	cmpeq	r6, r2
   17a3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17a3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17a42:	d202      	bcs.n	17a4a <__aeabi_ddiv+0x6e>
   17a44:	085b      	lsrs	r3, r3, #1
   17a46:	ea4f 0232 	mov.w	r2, r2, rrx
   17a4a:	1ab6      	subs	r6, r6, r2
   17a4c:	eb65 0503 	sbc.w	r5, r5, r3
   17a50:	085b      	lsrs	r3, r3, #1
   17a52:	ea4f 0232 	mov.w	r2, r2, rrx
   17a56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17a5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17a5e:	ebb6 0e02 	subs.w	lr, r6, r2
   17a62:	eb75 0e03 	sbcs.w	lr, r5, r3
   17a66:	bf22      	ittt	cs
   17a68:	1ab6      	subcs	r6, r6, r2
   17a6a:	4675      	movcs	r5, lr
   17a6c:	ea40 000c 	orrcs.w	r0, r0, ip
   17a70:	085b      	lsrs	r3, r3, #1
   17a72:	ea4f 0232 	mov.w	r2, r2, rrx
   17a76:	ebb6 0e02 	subs.w	lr, r6, r2
   17a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17a7e:	bf22      	ittt	cs
   17a80:	1ab6      	subcs	r6, r6, r2
   17a82:	4675      	movcs	r5, lr
   17a84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17a88:	085b      	lsrs	r3, r3, #1
   17a8a:	ea4f 0232 	mov.w	r2, r2, rrx
   17a8e:	ebb6 0e02 	subs.w	lr, r6, r2
   17a92:	eb75 0e03 	sbcs.w	lr, r5, r3
   17a96:	bf22      	ittt	cs
   17a98:	1ab6      	subcs	r6, r6, r2
   17a9a:	4675      	movcs	r5, lr
   17a9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17aa0:	085b      	lsrs	r3, r3, #1
   17aa2:	ea4f 0232 	mov.w	r2, r2, rrx
   17aa6:	ebb6 0e02 	subs.w	lr, r6, r2
   17aaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   17aae:	bf22      	ittt	cs
   17ab0:	1ab6      	subcs	r6, r6, r2
   17ab2:	4675      	movcs	r5, lr
   17ab4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17ab8:	ea55 0e06 	orrs.w	lr, r5, r6
   17abc:	d018      	beq.n	17af0 <__aeabi_ddiv+0x114>
   17abe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17ac2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17ac6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17aca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17ace:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17ad2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17ad6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17ada:	d1c0      	bne.n	17a5e <__aeabi_ddiv+0x82>
   17adc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17ae0:	d10b      	bne.n	17afa <__aeabi_ddiv+0x11e>
   17ae2:	ea41 0100 	orr.w	r1, r1, r0
   17ae6:	f04f 0000 	mov.w	r0, #0
   17aea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17aee:	e7b6      	b.n	17a5e <__aeabi_ddiv+0x82>
   17af0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17af4:	bf04      	itt	eq
   17af6:	4301      	orreq	r1, r0
   17af8:	2000      	moveq	r0, #0
   17afa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17afe:	bf88      	it	hi
   17b00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17b04:	f63f aeaf 	bhi.w	17866 <__aeabi_dmul+0xde>
   17b08:	ebb5 0c03 	subs.w	ip, r5, r3
   17b0c:	bf04      	itt	eq
   17b0e:	ebb6 0c02 	subseq.w	ip, r6, r2
   17b12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17b16:	f150 0000 	adcs.w	r0, r0, #0
   17b1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17b1e:	bd70      	pop	{r4, r5, r6, pc}
   17b20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17b24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17b28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17b2c:	bfc2      	ittt	gt
   17b2e:	ebd4 050c 	rsbsgt	r5, r4, ip
   17b32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17b36:	bd70      	popgt	{r4, r5, r6, pc}
   17b38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17b3c:	f04f 0e00 	mov.w	lr, #0
   17b40:	3c01      	subs	r4, #1
   17b42:	e690      	b.n	17866 <__aeabi_dmul+0xde>
   17b44:	ea45 0e06 	orr.w	lr, r5, r6
   17b48:	e68d      	b.n	17866 <__aeabi_dmul+0xde>
   17b4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17b4e:	ea94 0f0c 	teq	r4, ip
   17b52:	bf08      	it	eq
   17b54:	ea95 0f0c 	teqeq	r5, ip
   17b58:	f43f af3b 	beq.w	179d2 <__aeabi_dmul+0x24a>
   17b5c:	ea94 0f0c 	teq	r4, ip
   17b60:	d10a      	bne.n	17b78 <__aeabi_ddiv+0x19c>
   17b62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17b66:	f47f af34 	bne.w	179d2 <__aeabi_dmul+0x24a>
   17b6a:	ea95 0f0c 	teq	r5, ip
   17b6e:	f47f af25 	bne.w	179bc <__aeabi_dmul+0x234>
   17b72:	4610      	mov	r0, r2
   17b74:	4619      	mov	r1, r3
   17b76:	e72c      	b.n	179d2 <__aeabi_dmul+0x24a>
   17b78:	ea95 0f0c 	teq	r5, ip
   17b7c:	d106      	bne.n	17b8c <__aeabi_ddiv+0x1b0>
   17b7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17b82:	f43f aefd 	beq.w	17980 <__aeabi_dmul+0x1f8>
   17b86:	4610      	mov	r0, r2
   17b88:	4619      	mov	r1, r3
   17b8a:	e722      	b.n	179d2 <__aeabi_dmul+0x24a>
   17b8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17b90:	bf18      	it	ne
   17b92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17b96:	f47f aec5 	bne.w	17924 <__aeabi_dmul+0x19c>
   17b9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17b9e:	f47f af0d 	bne.w	179bc <__aeabi_dmul+0x234>
   17ba2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17ba6:	f47f aeeb 	bne.w	17980 <__aeabi_dmul+0x1f8>
   17baa:	e712      	b.n	179d2 <__aeabi_dmul+0x24a>

00017bac <__gedf2>:
   17bac:	f04f 3cff 	mov.w	ip, #4294967295
   17bb0:	e006      	b.n	17bc0 <__cmpdf2+0x4>
   17bb2:	bf00      	nop

00017bb4 <__ledf2>:
   17bb4:	f04f 0c01 	mov.w	ip, #1
   17bb8:	e002      	b.n	17bc0 <__cmpdf2+0x4>
   17bba:	bf00      	nop

00017bbc <__cmpdf2>:
   17bbc:	f04f 0c01 	mov.w	ip, #1
   17bc0:	f84d cd04 	str.w	ip, [sp, #-4]!
   17bc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17bc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17bd0:	bf18      	it	ne
   17bd2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17bd6:	d01b      	beq.n	17c10 <__cmpdf2+0x54>
   17bd8:	b001      	add	sp, #4
   17bda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17bde:	bf0c      	ite	eq
   17be0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17be4:	ea91 0f03 	teqne	r1, r3
   17be8:	bf02      	ittt	eq
   17bea:	ea90 0f02 	teqeq	r0, r2
   17bee:	2000      	moveq	r0, #0
   17bf0:	4770      	bxeq	lr
   17bf2:	f110 0f00 	cmn.w	r0, #0
   17bf6:	ea91 0f03 	teq	r1, r3
   17bfa:	bf58      	it	pl
   17bfc:	4299      	cmppl	r1, r3
   17bfe:	bf08      	it	eq
   17c00:	4290      	cmpeq	r0, r2
   17c02:	bf2c      	ite	cs
   17c04:	17d8      	asrcs	r0, r3, #31
   17c06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17c0a:	f040 0001 	orr.w	r0, r0, #1
   17c0e:	4770      	bx	lr
   17c10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17c14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17c18:	d102      	bne.n	17c20 <__cmpdf2+0x64>
   17c1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17c1e:	d107      	bne.n	17c30 <__cmpdf2+0x74>
   17c20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17c28:	d1d6      	bne.n	17bd8 <__cmpdf2+0x1c>
   17c2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17c2e:	d0d3      	beq.n	17bd8 <__cmpdf2+0x1c>
   17c30:	f85d 0b04 	ldr.w	r0, [sp], #4
   17c34:	4770      	bx	lr
   17c36:	bf00      	nop

00017c38 <__aeabi_cdrcmple>:
   17c38:	4684      	mov	ip, r0
   17c3a:	4610      	mov	r0, r2
   17c3c:	4662      	mov	r2, ip
   17c3e:	468c      	mov	ip, r1
   17c40:	4619      	mov	r1, r3
   17c42:	4663      	mov	r3, ip
   17c44:	e000      	b.n	17c48 <__aeabi_cdcmpeq>
   17c46:	bf00      	nop

00017c48 <__aeabi_cdcmpeq>:
   17c48:	b501      	push	{r0, lr}
   17c4a:	f7ff ffb7 	bl	17bbc <__cmpdf2>
   17c4e:	2800      	cmp	r0, #0
   17c50:	bf48      	it	mi
   17c52:	f110 0f00 	cmnmi.w	r0, #0
   17c56:	bd01      	pop	{r0, pc}

00017c58 <__aeabi_dcmpeq>:
   17c58:	f84d ed08 	str.w	lr, [sp, #-8]!
   17c5c:	f7ff fff4 	bl	17c48 <__aeabi_cdcmpeq>
   17c60:	bf0c      	ite	eq
   17c62:	2001      	moveq	r0, #1
   17c64:	2000      	movne	r0, #0
   17c66:	f85d fb08 	ldr.w	pc, [sp], #8
   17c6a:	bf00      	nop

00017c6c <__aeabi_dcmplt>:
   17c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17c70:	f7ff ffea 	bl	17c48 <__aeabi_cdcmpeq>
   17c74:	bf34      	ite	cc
   17c76:	2001      	movcc	r0, #1
   17c78:	2000      	movcs	r0, #0
   17c7a:	f85d fb08 	ldr.w	pc, [sp], #8
   17c7e:	bf00      	nop

00017c80 <__aeabi_dcmple>:
   17c80:	f84d ed08 	str.w	lr, [sp, #-8]!
   17c84:	f7ff ffe0 	bl	17c48 <__aeabi_cdcmpeq>
   17c88:	bf94      	ite	ls
   17c8a:	2001      	movls	r0, #1
   17c8c:	2000      	movhi	r0, #0
   17c8e:	f85d fb08 	ldr.w	pc, [sp], #8
   17c92:	bf00      	nop

00017c94 <__aeabi_dcmpge>:
   17c94:	f84d ed08 	str.w	lr, [sp, #-8]!
   17c98:	f7ff ffce 	bl	17c38 <__aeabi_cdrcmple>
   17c9c:	bf94      	ite	ls
   17c9e:	2001      	movls	r0, #1
   17ca0:	2000      	movhi	r0, #0
   17ca2:	f85d fb08 	ldr.w	pc, [sp], #8
   17ca6:	bf00      	nop

00017ca8 <__aeabi_dcmpgt>:
   17ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
   17cac:	f7ff ffc4 	bl	17c38 <__aeabi_cdrcmple>
   17cb0:	bf34      	ite	cc
   17cb2:	2001      	movcc	r0, #1
   17cb4:	2000      	movcs	r0, #0
   17cb6:	f85d fb08 	ldr.w	pc, [sp], #8
   17cba:	bf00      	nop

00017cbc <__aeabi_d2iz>:
   17cbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17cc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17cc4:	d215      	bcs.n	17cf2 <__aeabi_d2iz+0x36>
   17cc6:	d511      	bpl.n	17cec <__aeabi_d2iz+0x30>
   17cc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17ccc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17cd0:	d912      	bls.n	17cf8 <__aeabi_d2iz+0x3c>
   17cd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17cda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17ce2:	fa23 f002 	lsr.w	r0, r3, r2
   17ce6:	bf18      	it	ne
   17ce8:	4240      	negne	r0, r0
   17cea:	4770      	bx	lr
   17cec:	f04f 0000 	mov.w	r0, #0
   17cf0:	4770      	bx	lr
   17cf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17cf6:	d105      	bne.n	17d04 <__aeabi_d2iz+0x48>
   17cf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17cfc:	bf08      	it	eq
   17cfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17d02:	4770      	bx	lr
   17d04:	f04f 0000 	mov.w	r0, #0
   17d08:	4770      	bx	lr
   17d0a:	bf00      	nop

00017d0c <__aeabi_d2uiz>:
   17d0c:	004a      	lsls	r2, r1, #1
   17d0e:	d211      	bcs.n	17d34 <__aeabi_d2uiz+0x28>
   17d10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17d14:	d211      	bcs.n	17d3a <__aeabi_d2uiz+0x2e>
   17d16:	d50d      	bpl.n	17d34 <__aeabi_d2uiz+0x28>
   17d18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17d1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17d20:	d40e      	bmi.n	17d40 <__aeabi_d2uiz+0x34>
   17d22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17d26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17d2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17d2e:	fa23 f002 	lsr.w	r0, r3, r2
   17d32:	4770      	bx	lr
   17d34:	f04f 0000 	mov.w	r0, #0
   17d38:	4770      	bx	lr
   17d3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17d3e:	d102      	bne.n	17d46 <__aeabi_d2uiz+0x3a>
   17d40:	f04f 30ff 	mov.w	r0, #4294967295
   17d44:	4770      	bx	lr
   17d46:	f04f 0000 	mov.w	r0, #0
   17d4a:	4770      	bx	lr

00017d4c <__aeabi_d2f>:
   17d4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17d50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   17d54:	bf24      	itt	cs
   17d56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17d5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17d5e:	d90d      	bls.n	17d7c <__aeabi_d2f+0x30>
   17d60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17d64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17d68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17d6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17d70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   17d74:	bf08      	it	eq
   17d76:	f020 0001 	biceq.w	r0, r0, #1
   17d7a:	4770      	bx	lr
   17d7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17d80:	d121      	bne.n	17dc6 <__aeabi_d2f+0x7a>
   17d82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   17d86:	bfbc      	itt	lt
   17d88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17d8c:	4770      	bxlt	lr
   17d8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d92:	ea4f 5252 	mov.w	r2, r2, lsr #21
   17d96:	f1c2 0218 	rsb	r2, r2, #24
   17d9a:	f1c2 0c20 	rsb	ip, r2, #32
   17d9e:	fa10 f30c 	lsls.w	r3, r0, ip
   17da2:	fa20 f002 	lsr.w	r0, r0, r2
   17da6:	bf18      	it	ne
   17da8:	f040 0001 	orrne.w	r0, r0, #1
   17dac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17db0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   17db4:	fa03 fc0c 	lsl.w	ip, r3, ip
   17db8:	ea40 000c 	orr.w	r0, r0, ip
   17dbc:	fa23 f302 	lsr.w	r3, r3, r2
   17dc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17dc4:	e7cc      	b.n	17d60 <__aeabi_d2f+0x14>
   17dc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   17dca:	d107      	bne.n	17ddc <__aeabi_d2f+0x90>
   17dcc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   17dd0:	bf1e      	ittt	ne
   17dd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   17dd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   17dda:	4770      	bxne	lr
   17ddc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   17de0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   17de4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17de8:	4770      	bx	lr
   17dea:	bf00      	nop

00017dec <__aeabi_frsub>:
   17dec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   17df0:	e002      	b.n	17df8 <__addsf3>
   17df2:	bf00      	nop

00017df4 <__aeabi_fsub>:
   17df4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00017df8 <__addsf3>:
   17df8:	0042      	lsls	r2, r0, #1
   17dfa:	bf1f      	itttt	ne
   17dfc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   17e00:	ea92 0f03 	teqne	r2, r3
   17e04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   17e08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   17e0c:	d06a      	beq.n	17ee4 <__addsf3+0xec>
   17e0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   17e12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   17e16:	bfc1      	itttt	gt
   17e18:	18d2      	addgt	r2, r2, r3
   17e1a:	4041      	eorgt	r1, r0
   17e1c:	4048      	eorgt	r0, r1
   17e1e:	4041      	eorgt	r1, r0
   17e20:	bfb8      	it	lt
   17e22:	425b      	neglt	r3, r3
   17e24:	2b19      	cmp	r3, #25
   17e26:	bf88      	it	hi
   17e28:	4770      	bxhi	lr
   17e2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   17e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17e32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17e36:	bf18      	it	ne
   17e38:	4240      	negne	r0, r0
   17e3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17e3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   17e42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   17e46:	bf18      	it	ne
   17e48:	4249      	negne	r1, r1
   17e4a:	ea92 0f03 	teq	r2, r3
   17e4e:	d03f      	beq.n	17ed0 <__addsf3+0xd8>
   17e50:	f1a2 0201 	sub.w	r2, r2, #1
   17e54:	fa41 fc03 	asr.w	ip, r1, r3
   17e58:	eb10 000c 	adds.w	r0, r0, ip
   17e5c:	f1c3 0320 	rsb	r3, r3, #32
   17e60:	fa01 f103 	lsl.w	r1, r1, r3
   17e64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   17e68:	d502      	bpl.n	17e70 <__addsf3+0x78>
   17e6a:	4249      	negs	r1, r1
   17e6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   17e70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   17e74:	d313      	bcc.n	17e9e <__addsf3+0xa6>
   17e76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   17e7a:	d306      	bcc.n	17e8a <__addsf3+0x92>
   17e7c:	0840      	lsrs	r0, r0, #1
   17e7e:	ea4f 0131 	mov.w	r1, r1, rrx
   17e82:	f102 0201 	add.w	r2, r2, #1
   17e86:	2afe      	cmp	r2, #254	; 0xfe
   17e88:	d251      	bcs.n	17f2e <__addsf3+0x136>
   17e8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   17e8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   17e92:	bf08      	it	eq
   17e94:	f020 0001 	biceq.w	r0, r0, #1
   17e98:	ea40 0003 	orr.w	r0, r0, r3
   17e9c:	4770      	bx	lr
   17e9e:	0049      	lsls	r1, r1, #1
   17ea0:	eb40 0000 	adc.w	r0, r0, r0
   17ea4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   17ea8:	f1a2 0201 	sub.w	r2, r2, #1
   17eac:	d1ed      	bne.n	17e8a <__addsf3+0x92>
   17eae:	fab0 fc80 	clz	ip, r0
   17eb2:	f1ac 0c08 	sub.w	ip, ip, #8
   17eb6:	ebb2 020c 	subs.w	r2, r2, ip
   17eba:	fa00 f00c 	lsl.w	r0, r0, ip
   17ebe:	bfaa      	itet	ge
   17ec0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   17ec4:	4252      	neglt	r2, r2
   17ec6:	4318      	orrge	r0, r3
   17ec8:	bfbc      	itt	lt
   17eca:	40d0      	lsrlt	r0, r2
   17ecc:	4318      	orrlt	r0, r3
   17ece:	4770      	bx	lr
   17ed0:	f092 0f00 	teq	r2, #0
   17ed4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   17ed8:	bf06      	itte	eq
   17eda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   17ede:	3201      	addeq	r2, #1
   17ee0:	3b01      	subne	r3, #1
   17ee2:	e7b5      	b.n	17e50 <__addsf3+0x58>
   17ee4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   17ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   17eec:	bf18      	it	ne
   17eee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   17ef2:	d021      	beq.n	17f38 <__addsf3+0x140>
   17ef4:	ea92 0f03 	teq	r2, r3
   17ef8:	d004      	beq.n	17f04 <__addsf3+0x10c>
   17efa:	f092 0f00 	teq	r2, #0
   17efe:	bf08      	it	eq
   17f00:	4608      	moveq	r0, r1
   17f02:	4770      	bx	lr
   17f04:	ea90 0f01 	teq	r0, r1
   17f08:	bf1c      	itt	ne
   17f0a:	2000      	movne	r0, #0
   17f0c:	4770      	bxne	lr
   17f0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   17f12:	d104      	bne.n	17f1e <__addsf3+0x126>
   17f14:	0040      	lsls	r0, r0, #1
   17f16:	bf28      	it	cs
   17f18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   17f1c:	4770      	bx	lr
   17f1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   17f22:	bf3c      	itt	cc
   17f24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   17f28:	4770      	bxcc	lr
   17f2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   17f2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   17f32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17f36:	4770      	bx	lr
   17f38:	ea7f 6222 	mvns.w	r2, r2, asr #24
   17f3c:	bf16      	itet	ne
   17f3e:	4608      	movne	r0, r1
   17f40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   17f44:	4601      	movne	r1, r0
   17f46:	0242      	lsls	r2, r0, #9
   17f48:	bf06      	itte	eq
   17f4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   17f4e:	ea90 0f01 	teqeq	r0, r1
   17f52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   17f56:	4770      	bx	lr

00017f58 <__aeabi_ui2f>:
   17f58:	f04f 0300 	mov.w	r3, #0
   17f5c:	e004      	b.n	17f68 <__aeabi_i2f+0x8>
   17f5e:	bf00      	nop

00017f60 <__aeabi_i2f>:
   17f60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   17f64:	bf48      	it	mi
   17f66:	4240      	negmi	r0, r0
   17f68:	ea5f 0c00 	movs.w	ip, r0
   17f6c:	bf08      	it	eq
   17f6e:	4770      	bxeq	lr
   17f70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   17f74:	4601      	mov	r1, r0
   17f76:	f04f 0000 	mov.w	r0, #0
   17f7a:	e01c      	b.n	17fb6 <__aeabi_l2f+0x2a>

00017f7c <__aeabi_ul2f>:
   17f7c:	ea50 0201 	orrs.w	r2, r0, r1
   17f80:	bf08      	it	eq
   17f82:	4770      	bxeq	lr
   17f84:	f04f 0300 	mov.w	r3, #0
   17f88:	e00a      	b.n	17fa0 <__aeabi_l2f+0x14>
   17f8a:	bf00      	nop

00017f8c <__aeabi_l2f>:
   17f8c:	ea50 0201 	orrs.w	r2, r0, r1
   17f90:	bf08      	it	eq
   17f92:	4770      	bxeq	lr
   17f94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   17f98:	d502      	bpl.n	17fa0 <__aeabi_l2f+0x14>
   17f9a:	4240      	negs	r0, r0
   17f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17fa0:	ea5f 0c01 	movs.w	ip, r1
   17fa4:	bf02      	ittt	eq
   17fa6:	4684      	moveq	ip, r0
   17fa8:	4601      	moveq	r1, r0
   17faa:	2000      	moveq	r0, #0
   17fac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   17fb0:	bf08      	it	eq
   17fb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   17fb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   17fba:	fabc f28c 	clz	r2, ip
   17fbe:	3a08      	subs	r2, #8
   17fc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   17fc4:	db10      	blt.n	17fe8 <__aeabi_l2f+0x5c>
   17fc6:	fa01 fc02 	lsl.w	ip, r1, r2
   17fca:	4463      	add	r3, ip
   17fcc:	fa00 fc02 	lsl.w	ip, r0, r2
   17fd0:	f1c2 0220 	rsb	r2, r2, #32
   17fd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17fd8:	fa20 f202 	lsr.w	r2, r0, r2
   17fdc:	eb43 0002 	adc.w	r0, r3, r2
   17fe0:	bf08      	it	eq
   17fe2:	f020 0001 	biceq.w	r0, r0, #1
   17fe6:	4770      	bx	lr
   17fe8:	f102 0220 	add.w	r2, r2, #32
   17fec:	fa01 fc02 	lsl.w	ip, r1, r2
   17ff0:	f1c2 0220 	rsb	r2, r2, #32
   17ff4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   17ff8:	fa21 f202 	lsr.w	r2, r1, r2
   17ffc:	eb43 0002 	adc.w	r0, r3, r2
   18000:	bf08      	it	eq
   18002:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18006:	4770      	bx	lr

00018008 <__aeabi_fmul>:
   18008:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1800c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18010:	bf1e      	ittt	ne
   18012:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18016:	ea92 0f0c 	teqne	r2, ip
   1801a:	ea93 0f0c 	teqne	r3, ip
   1801e:	d06f      	beq.n	18100 <__aeabi_fmul+0xf8>
   18020:	441a      	add	r2, r3
   18022:	ea80 0c01 	eor.w	ip, r0, r1
   18026:	0240      	lsls	r0, r0, #9
   18028:	bf18      	it	ne
   1802a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1802e:	d01e      	beq.n	1806e <__aeabi_fmul+0x66>
   18030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18034:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18038:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1803c:	fba0 3101 	umull	r3, r1, r0, r1
   18040:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18044:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18048:	bf3e      	ittt	cc
   1804a:	0049      	lslcc	r1, r1, #1
   1804c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18050:	005b      	lslcc	r3, r3, #1
   18052:	ea40 0001 	orr.w	r0, r0, r1
   18056:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1805a:	2afd      	cmp	r2, #253	; 0xfd
   1805c:	d81d      	bhi.n	1809a <__aeabi_fmul+0x92>
   1805e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18062:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18066:	bf08      	it	eq
   18068:	f020 0001 	biceq.w	r0, r0, #1
   1806c:	4770      	bx	lr
   1806e:	f090 0f00 	teq	r0, #0
   18072:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18076:	bf08      	it	eq
   18078:	0249      	lsleq	r1, r1, #9
   1807a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1807e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18082:	3a7f      	subs	r2, #127	; 0x7f
   18084:	bfc2      	ittt	gt
   18086:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1808a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1808e:	4770      	bxgt	lr
   18090:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18094:	f04f 0300 	mov.w	r3, #0
   18098:	3a01      	subs	r2, #1
   1809a:	dc5d      	bgt.n	18158 <__aeabi_fmul+0x150>
   1809c:	f112 0f19 	cmn.w	r2, #25
   180a0:	bfdc      	itt	le
   180a2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   180a6:	4770      	bxle	lr
   180a8:	f1c2 0200 	rsb	r2, r2, #0
   180ac:	0041      	lsls	r1, r0, #1
   180ae:	fa21 f102 	lsr.w	r1, r1, r2
   180b2:	f1c2 0220 	rsb	r2, r2, #32
   180b6:	fa00 fc02 	lsl.w	ip, r0, r2
   180ba:	ea5f 0031 	movs.w	r0, r1, rrx
   180be:	f140 0000 	adc.w	r0, r0, #0
   180c2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   180c6:	bf08      	it	eq
   180c8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   180cc:	4770      	bx	lr
   180ce:	f092 0f00 	teq	r2, #0
   180d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   180d6:	bf02      	ittt	eq
   180d8:	0040      	lsleq	r0, r0, #1
   180da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   180de:	3a01      	subeq	r2, #1
   180e0:	d0f9      	beq.n	180d6 <__aeabi_fmul+0xce>
   180e2:	ea40 000c 	orr.w	r0, r0, ip
   180e6:	f093 0f00 	teq	r3, #0
   180ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   180ee:	bf02      	ittt	eq
   180f0:	0049      	lsleq	r1, r1, #1
   180f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   180f6:	3b01      	subeq	r3, #1
   180f8:	d0f9      	beq.n	180ee <__aeabi_fmul+0xe6>
   180fa:	ea41 010c 	orr.w	r1, r1, ip
   180fe:	e78f      	b.n	18020 <__aeabi_fmul+0x18>
   18100:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18104:	ea92 0f0c 	teq	r2, ip
   18108:	bf18      	it	ne
   1810a:	ea93 0f0c 	teqne	r3, ip
   1810e:	d00a      	beq.n	18126 <__aeabi_fmul+0x11e>
   18110:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18114:	bf18      	it	ne
   18116:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1811a:	d1d8      	bne.n	180ce <__aeabi_fmul+0xc6>
   1811c:	ea80 0001 	eor.w	r0, r0, r1
   18120:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18124:	4770      	bx	lr
   18126:	f090 0f00 	teq	r0, #0
   1812a:	bf17      	itett	ne
   1812c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18130:	4608      	moveq	r0, r1
   18132:	f091 0f00 	teqne	r1, #0
   18136:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1813a:	d014      	beq.n	18166 <__aeabi_fmul+0x15e>
   1813c:	ea92 0f0c 	teq	r2, ip
   18140:	d101      	bne.n	18146 <__aeabi_fmul+0x13e>
   18142:	0242      	lsls	r2, r0, #9
   18144:	d10f      	bne.n	18166 <__aeabi_fmul+0x15e>
   18146:	ea93 0f0c 	teq	r3, ip
   1814a:	d103      	bne.n	18154 <__aeabi_fmul+0x14c>
   1814c:	024b      	lsls	r3, r1, #9
   1814e:	bf18      	it	ne
   18150:	4608      	movne	r0, r1
   18152:	d108      	bne.n	18166 <__aeabi_fmul+0x15e>
   18154:	ea80 0001 	eor.w	r0, r0, r1
   18158:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1815c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18160:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18164:	4770      	bx	lr
   18166:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1816a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1816e:	4770      	bx	lr

00018170 <__aeabi_fdiv>:
   18170:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18178:	bf1e      	ittt	ne
   1817a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1817e:	ea92 0f0c 	teqne	r2, ip
   18182:	ea93 0f0c 	teqne	r3, ip
   18186:	d069      	beq.n	1825c <__aeabi_fdiv+0xec>
   18188:	eba2 0203 	sub.w	r2, r2, r3
   1818c:	ea80 0c01 	eor.w	ip, r0, r1
   18190:	0249      	lsls	r1, r1, #9
   18192:	ea4f 2040 	mov.w	r0, r0, lsl #9
   18196:	d037      	beq.n	18208 <__aeabi_fdiv+0x98>
   18198:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1819c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   181a0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   181a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   181a8:	428b      	cmp	r3, r1
   181aa:	bf38      	it	cc
   181ac:	005b      	lslcc	r3, r3, #1
   181ae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   181b2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   181b6:	428b      	cmp	r3, r1
   181b8:	bf24      	itt	cs
   181ba:	1a5b      	subcs	r3, r3, r1
   181bc:	ea40 000c 	orrcs.w	r0, r0, ip
   181c0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   181c4:	bf24      	itt	cs
   181c6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   181ca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   181ce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   181d2:	bf24      	itt	cs
   181d4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   181d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   181dc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   181e0:	bf24      	itt	cs
   181e2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   181e6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   181ea:	011b      	lsls	r3, r3, #4
   181ec:	bf18      	it	ne
   181ee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   181f2:	d1e0      	bne.n	181b6 <__aeabi_fdiv+0x46>
   181f4:	2afd      	cmp	r2, #253	; 0xfd
   181f6:	f63f af50 	bhi.w	1809a <__aeabi_fmul+0x92>
   181fa:	428b      	cmp	r3, r1
   181fc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18200:	bf08      	it	eq
   18202:	f020 0001 	biceq.w	r0, r0, #1
   18206:	4770      	bx	lr
   18208:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1820c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18210:	327f      	adds	r2, #127	; 0x7f
   18212:	bfc2      	ittt	gt
   18214:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18218:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1821c:	4770      	bxgt	lr
   1821e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18222:	f04f 0300 	mov.w	r3, #0
   18226:	3a01      	subs	r2, #1
   18228:	e737      	b.n	1809a <__aeabi_fmul+0x92>
   1822a:	f092 0f00 	teq	r2, #0
   1822e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18232:	bf02      	ittt	eq
   18234:	0040      	lsleq	r0, r0, #1
   18236:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1823a:	3a01      	subeq	r2, #1
   1823c:	d0f9      	beq.n	18232 <__aeabi_fdiv+0xc2>
   1823e:	ea40 000c 	orr.w	r0, r0, ip
   18242:	f093 0f00 	teq	r3, #0
   18246:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1824a:	bf02      	ittt	eq
   1824c:	0049      	lsleq	r1, r1, #1
   1824e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18252:	3b01      	subeq	r3, #1
   18254:	d0f9      	beq.n	1824a <__aeabi_fdiv+0xda>
   18256:	ea41 010c 	orr.w	r1, r1, ip
   1825a:	e795      	b.n	18188 <__aeabi_fdiv+0x18>
   1825c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18260:	ea92 0f0c 	teq	r2, ip
   18264:	d108      	bne.n	18278 <__aeabi_fdiv+0x108>
   18266:	0242      	lsls	r2, r0, #9
   18268:	f47f af7d 	bne.w	18166 <__aeabi_fmul+0x15e>
   1826c:	ea93 0f0c 	teq	r3, ip
   18270:	f47f af70 	bne.w	18154 <__aeabi_fmul+0x14c>
   18274:	4608      	mov	r0, r1
   18276:	e776      	b.n	18166 <__aeabi_fmul+0x15e>
   18278:	ea93 0f0c 	teq	r3, ip
   1827c:	d104      	bne.n	18288 <__aeabi_fdiv+0x118>
   1827e:	024b      	lsls	r3, r1, #9
   18280:	f43f af4c 	beq.w	1811c <__aeabi_fmul+0x114>
   18284:	4608      	mov	r0, r1
   18286:	e76e      	b.n	18166 <__aeabi_fmul+0x15e>
   18288:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1828c:	bf18      	it	ne
   1828e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18292:	d1ca      	bne.n	1822a <__aeabi_fdiv+0xba>
   18294:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18298:	f47f af5c 	bne.w	18154 <__aeabi_fmul+0x14c>
   1829c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   182a0:	f47f af3c 	bne.w	1811c <__aeabi_fmul+0x114>
   182a4:	e75f      	b.n	18166 <__aeabi_fmul+0x15e>
   182a6:	bf00      	nop

000182a8 <__gesf2>:
   182a8:	f04f 3cff 	mov.w	ip, #4294967295
   182ac:	e006      	b.n	182bc <__cmpsf2+0x4>
   182ae:	bf00      	nop

000182b0 <__lesf2>:
   182b0:	f04f 0c01 	mov.w	ip, #1
   182b4:	e002      	b.n	182bc <__cmpsf2+0x4>
   182b6:	bf00      	nop

000182b8 <__cmpsf2>:
   182b8:	f04f 0c01 	mov.w	ip, #1
   182bc:	f84d cd04 	str.w	ip, [sp, #-4]!
   182c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   182c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   182c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   182cc:	bf18      	it	ne
   182ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   182d2:	d011      	beq.n	182f8 <__cmpsf2+0x40>
   182d4:	b001      	add	sp, #4
   182d6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   182da:	bf18      	it	ne
   182dc:	ea90 0f01 	teqne	r0, r1
   182e0:	bf58      	it	pl
   182e2:	ebb2 0003 	subspl.w	r0, r2, r3
   182e6:	bf88      	it	hi
   182e8:	17c8      	asrhi	r0, r1, #31
   182ea:	bf38      	it	cc
   182ec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   182f0:	bf18      	it	ne
   182f2:	f040 0001 	orrne.w	r0, r0, #1
   182f6:	4770      	bx	lr
   182f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   182fc:	d102      	bne.n	18304 <__cmpsf2+0x4c>
   182fe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   18302:	d105      	bne.n	18310 <__cmpsf2+0x58>
   18304:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18308:	d1e4      	bne.n	182d4 <__cmpsf2+0x1c>
   1830a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1830e:	d0e1      	beq.n	182d4 <__cmpsf2+0x1c>
   18310:	f85d 0b04 	ldr.w	r0, [sp], #4
   18314:	4770      	bx	lr
   18316:	bf00      	nop

00018318 <__aeabi_cfrcmple>:
   18318:	4684      	mov	ip, r0
   1831a:	4608      	mov	r0, r1
   1831c:	4661      	mov	r1, ip
   1831e:	e7ff      	b.n	18320 <__aeabi_cfcmpeq>

00018320 <__aeabi_cfcmpeq>:
   18320:	b50f      	push	{r0, r1, r2, r3, lr}
   18322:	f7ff ffc9 	bl	182b8 <__cmpsf2>
   18326:	2800      	cmp	r0, #0
   18328:	bf48      	it	mi
   1832a:	f110 0f00 	cmnmi.w	r0, #0
   1832e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018330 <__aeabi_fcmpeq>:
   18330:	f84d ed08 	str.w	lr, [sp, #-8]!
   18334:	f7ff fff4 	bl	18320 <__aeabi_cfcmpeq>
   18338:	bf0c      	ite	eq
   1833a:	2001      	moveq	r0, #1
   1833c:	2000      	movne	r0, #0
   1833e:	f85d fb08 	ldr.w	pc, [sp], #8
   18342:	bf00      	nop

00018344 <__aeabi_fcmplt>:
   18344:	f84d ed08 	str.w	lr, [sp, #-8]!
   18348:	f7ff ffea 	bl	18320 <__aeabi_cfcmpeq>
   1834c:	bf34      	ite	cc
   1834e:	2001      	movcc	r0, #1
   18350:	2000      	movcs	r0, #0
   18352:	f85d fb08 	ldr.w	pc, [sp], #8
   18356:	bf00      	nop

00018358 <__aeabi_fcmple>:
   18358:	f84d ed08 	str.w	lr, [sp, #-8]!
   1835c:	f7ff ffe0 	bl	18320 <__aeabi_cfcmpeq>
   18360:	bf94      	ite	ls
   18362:	2001      	movls	r0, #1
   18364:	2000      	movhi	r0, #0
   18366:	f85d fb08 	ldr.w	pc, [sp], #8
   1836a:	bf00      	nop

0001836c <__aeabi_fcmpge>:
   1836c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18370:	f7ff ffd2 	bl	18318 <__aeabi_cfrcmple>
   18374:	bf94      	ite	ls
   18376:	2001      	movls	r0, #1
   18378:	2000      	movhi	r0, #0
   1837a:	f85d fb08 	ldr.w	pc, [sp], #8
   1837e:	bf00      	nop

00018380 <__aeabi_fcmpgt>:
   18380:	f84d ed08 	str.w	lr, [sp, #-8]!
   18384:	f7ff ffc8 	bl	18318 <__aeabi_cfrcmple>
   18388:	bf34      	ite	cc
   1838a:	2001      	movcc	r0, #1
   1838c:	2000      	movcs	r0, #0
   1838e:	f85d fb08 	ldr.w	pc, [sp], #8
   18392:	bf00      	nop

00018394 <__aeabi_f2iz>:
   18394:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18398:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1839c:	d30f      	bcc.n	183be <__aeabi_f2iz+0x2a>
   1839e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   183a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   183a6:	d90d      	bls.n	183c4 <__aeabi_f2iz+0x30>
   183a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   183ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   183b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   183b4:	fa23 f002 	lsr.w	r0, r3, r2
   183b8:	bf18      	it	ne
   183ba:	4240      	negne	r0, r0
   183bc:	4770      	bx	lr
   183be:	f04f 0000 	mov.w	r0, #0
   183c2:	4770      	bx	lr
   183c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   183c8:	d101      	bne.n	183ce <__aeabi_f2iz+0x3a>
   183ca:	0242      	lsls	r2, r0, #9
   183cc:	d105      	bne.n	183da <__aeabi_f2iz+0x46>
   183ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   183d2:	bf08      	it	eq
   183d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   183d8:	4770      	bx	lr
   183da:	f04f 0000 	mov.w	r0, #0
   183de:	4770      	bx	lr

000183e0 <memcpy>:
   183e0:	2a0f      	cmp	r2, #15
   183e2:	b4f0      	push	{r4, r5, r6, r7}
   183e4:	d945      	bls.n	18472 <memcpy+0x92>
   183e6:	ea40 0301 	orr.w	r3, r0, r1
   183ea:	079b      	lsls	r3, r3, #30
   183ec:	d145      	bne.n	1847a <memcpy+0x9a>
   183ee:	f1a2 0710 	sub.w	r7, r2, #16
   183f2:	460c      	mov	r4, r1
   183f4:	4603      	mov	r3, r0
   183f6:	093f      	lsrs	r7, r7, #4
   183f8:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   183fc:	3610      	adds	r6, #16
   183fe:	6825      	ldr	r5, [r4, #0]
   18400:	3310      	adds	r3, #16
   18402:	3410      	adds	r4, #16
   18404:	f843 5c10 	str.w	r5, [r3, #-16]
   18408:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   1840c:	f843 5c0c 	str.w	r5, [r3, #-12]
   18410:	f854 5c08 	ldr.w	r5, [r4, #-8]
   18414:	f843 5c08 	str.w	r5, [r3, #-8]
   18418:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1841c:	f843 5c04 	str.w	r5, [r3, #-4]
   18420:	42b3      	cmp	r3, r6
   18422:	d1ec      	bne.n	183fe <memcpy+0x1e>
   18424:	1c7b      	adds	r3, r7, #1
   18426:	f002 0c0f 	and.w	ip, r2, #15
   1842a:	f1bc 0f03 	cmp.w	ip, #3
   1842e:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18432:	4419      	add	r1, r3
   18434:	4403      	add	r3, r0
   18436:	d922      	bls.n	1847e <memcpy+0x9e>
   18438:	460e      	mov	r6, r1
   1843a:	461d      	mov	r5, r3
   1843c:	4664      	mov	r4, ip
   1843e:	f856 7b04 	ldr.w	r7, [r6], #4
   18442:	3c04      	subs	r4, #4
   18444:	2c03      	cmp	r4, #3
   18446:	f845 7b04 	str.w	r7, [r5], #4
   1844a:	d8f8      	bhi.n	1843e <memcpy+0x5e>
   1844c:	f1ac 0404 	sub.w	r4, ip, #4
   18450:	f002 0203 	and.w	r2, r2, #3
   18454:	f024 0403 	bic.w	r4, r4, #3
   18458:	3404      	adds	r4, #4
   1845a:	4423      	add	r3, r4
   1845c:	4421      	add	r1, r4
   1845e:	b132      	cbz	r2, 1846e <memcpy+0x8e>
   18460:	440a      	add	r2, r1
   18462:	f811 4b01 	ldrb.w	r4, [r1], #1
   18466:	4291      	cmp	r1, r2
   18468:	f803 4b01 	strb.w	r4, [r3], #1
   1846c:	d1f9      	bne.n	18462 <memcpy+0x82>
   1846e:	bcf0      	pop	{r4, r5, r6, r7}
   18470:	4770      	bx	lr
   18472:	4603      	mov	r3, r0
   18474:	2a00      	cmp	r2, #0
   18476:	d1f3      	bne.n	18460 <memcpy+0x80>
   18478:	e7f9      	b.n	1846e <memcpy+0x8e>
   1847a:	4603      	mov	r3, r0
   1847c:	e7f0      	b.n	18460 <memcpy+0x80>
   1847e:	4662      	mov	r2, ip
   18480:	2a00      	cmp	r2, #0
   18482:	d1ed      	bne.n	18460 <memcpy+0x80>
   18484:	e7f3      	b.n	1846e <memcpy+0x8e>
   18486:	bf00      	nop

00018488 <memset>:
   18488:	0783      	lsls	r3, r0, #30
   1848a:	b4f0      	push	{r4, r5, r6, r7}
   1848c:	d048      	beq.n	18520 <memset+0x98>
   1848e:	1e54      	subs	r4, r2, #1
   18490:	2a00      	cmp	r2, #0
   18492:	d043      	beq.n	1851c <memset+0x94>
   18494:	b2cd      	uxtb	r5, r1
   18496:	4603      	mov	r3, r0
   18498:	e002      	b.n	184a0 <memset+0x18>
   1849a:	2c00      	cmp	r4, #0
   1849c:	d03e      	beq.n	1851c <memset+0x94>
   1849e:	4614      	mov	r4, r2
   184a0:	f803 5b01 	strb.w	r5, [r3], #1
   184a4:	f013 0f03 	tst.w	r3, #3
   184a8:	f104 32ff 	add.w	r2, r4, #4294967295
   184ac:	d1f5      	bne.n	1849a <memset+0x12>
   184ae:	2c03      	cmp	r4, #3
   184b0:	d92d      	bls.n	1850e <memset+0x86>
   184b2:	b2cd      	uxtb	r5, r1
   184b4:	2c0f      	cmp	r4, #15
   184b6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   184ba:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   184be:	d918      	bls.n	184f2 <memset+0x6a>
   184c0:	f1a4 0710 	sub.w	r7, r4, #16
   184c4:	f103 0610 	add.w	r6, r3, #16
   184c8:	461a      	mov	r2, r3
   184ca:	093f      	lsrs	r7, r7, #4
   184cc:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   184d0:	6015      	str	r5, [r2, #0]
   184d2:	3210      	adds	r2, #16
   184d4:	f842 5c0c 	str.w	r5, [r2, #-12]
   184d8:	f842 5c08 	str.w	r5, [r2, #-8]
   184dc:	f842 5c04 	str.w	r5, [r2, #-4]
   184e0:	42b2      	cmp	r2, r6
   184e2:	d1f5      	bne.n	184d0 <memset+0x48>
   184e4:	f004 040f 	and.w	r4, r4, #15
   184e8:	3701      	adds	r7, #1
   184ea:	2c03      	cmp	r4, #3
   184ec:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   184f0:	d90d      	bls.n	1850e <memset+0x86>
   184f2:	461e      	mov	r6, r3
   184f4:	4622      	mov	r2, r4
   184f6:	3a04      	subs	r2, #4
   184f8:	f846 5b04 	str.w	r5, [r6], #4
   184fc:	2a03      	cmp	r2, #3
   184fe:	d8fa      	bhi.n	184f6 <memset+0x6e>
   18500:	1f22      	subs	r2, r4, #4
   18502:	f004 0403 	and.w	r4, r4, #3
   18506:	f022 0203 	bic.w	r2, r2, #3
   1850a:	3204      	adds	r2, #4
   1850c:	4413      	add	r3, r2
   1850e:	b12c      	cbz	r4, 1851c <memset+0x94>
   18510:	b2c9      	uxtb	r1, r1
   18512:	441c      	add	r4, r3
   18514:	f803 1b01 	strb.w	r1, [r3], #1
   18518:	42a3      	cmp	r3, r4
   1851a:	d1fb      	bne.n	18514 <memset+0x8c>
   1851c:	bcf0      	pop	{r4, r5, r6, r7}
   1851e:	4770      	bx	lr
   18520:	4614      	mov	r4, r2
   18522:	4603      	mov	r3, r0
   18524:	e7c3      	b.n	184ae <memset+0x26>
   18526:	bf00      	nop

00018528 <strncpy>:
   18528:	ea40 0301 	orr.w	r3, r0, r1
   1852c:	079b      	lsls	r3, r3, #30
   1852e:	b470      	push	{r4, r5, r6}
   18530:	d12b      	bne.n	1858a <strncpy+0x62>
   18532:	2a03      	cmp	r2, #3
   18534:	bf84      	itt	hi
   18536:	460b      	movhi	r3, r1
   18538:	4605      	movhi	r5, r0
   1853a:	d926      	bls.n	1858a <strncpy+0x62>
   1853c:	4619      	mov	r1, r3
   1853e:	f853 4b04 	ldr.w	r4, [r3], #4
   18542:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18546:	ea26 0604 	bic.w	r6, r6, r4
   1854a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   1854e:	d105      	bne.n	1855c <strncpy+0x34>
   18550:	3a04      	subs	r2, #4
   18552:	f845 4b04 	str.w	r4, [r5], #4
   18556:	2a03      	cmp	r2, #3
   18558:	4619      	mov	r1, r3
   1855a:	d8ef      	bhi.n	1853c <strncpy+0x14>
   1855c:	b19a      	cbz	r2, 18586 <strncpy+0x5e>
   1855e:	780c      	ldrb	r4, [r1, #0]
   18560:	3a01      	subs	r2, #1
   18562:	1c6b      	adds	r3, r5, #1
   18564:	702c      	strb	r4, [r5, #0]
   18566:	b13c      	cbz	r4, 18578 <strncpy+0x50>
   18568:	b16a      	cbz	r2, 18586 <strncpy+0x5e>
   1856a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1856e:	3a01      	subs	r2, #1
   18570:	f803 4b01 	strb.w	r4, [r3], #1
   18574:	2c00      	cmp	r4, #0
   18576:	d1f7      	bne.n	18568 <strncpy+0x40>
   18578:	b12a      	cbz	r2, 18586 <strncpy+0x5e>
   1857a:	441a      	add	r2, r3
   1857c:	2100      	movs	r1, #0
   1857e:	f803 1b01 	strb.w	r1, [r3], #1
   18582:	4293      	cmp	r3, r2
   18584:	d1fb      	bne.n	1857e <strncpy+0x56>
   18586:	bc70      	pop	{r4, r5, r6}
   18588:	4770      	bx	lr
   1858a:	4605      	mov	r5, r0
   1858c:	e7e6      	b.n	1855c <strncpy+0x34>
   1858e:	bf00      	nop

00018590 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18590:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18592:	e003      	b.n	1859c <LoopCopyDataInit>

00018594 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18594:	4b0a      	ldr	r3, [pc, #40]	; (185c0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18596:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18598:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   1859a:	3104      	adds	r1, #4

0001859c <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   1859c:	4809      	ldr	r0, [pc, #36]	; (185c4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   1859e:	4b0a      	ldr	r3, [pc, #40]	; (185c8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   185a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   185a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   185a4:	d3f6      	bcc.n	18594 <CopyDataInit>
	ldr	r2, =_sbss
   185a6:	4a09      	ldr	r2, [pc, #36]	; (185cc <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   185a8:	e002      	b.n	185b0 <LoopFillZerobss>

000185aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   185aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
   185ac:	f842 3b04 	str.w	r3, [r2], #4

000185b0 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   185b0:	4b07      	ldr	r3, [pc, #28]	; (185d0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   185b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
   185b4:	d3f9      	bcc.n	185aa <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   185b6:	f7e7 fec1 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   185ba:	f7fe fde7 	bl	1718c <main>
	bx	lr    
   185be:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   185c0:	00018730 	.word	0x00018730
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   185c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   185c8:	20000488 	.word	0x20000488
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   185cc:	20000488 	.word	0x20000488
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   185d0:	2000b768 	.word	0x2000b768

000185d4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   185d4:	e7fe      	b.n	185d4 <ADC1_2_IRQHandler>
   185d6:	0000      	movs	r0, r0
   185d8:	6c6c616d 	.word	0x6c6c616d
   185dc:	6620636f 	.word	0x6620636f
   185e0:	6520726f 	.word	0x6520726f
   185e4:	746e6576 	.word	0x746e6576
   185e8:	61747320 	.word	0x61747320
   185ec:	66206b63 	.word	0x66206b63
   185f0:	656c6961 	.word	0x656c6961
   185f4:	000d0a64 	.word	0x000d0a64
   185f8:	72656874 	.word	0x72656874
   185fc:	72612065 	.word	0x72612065
   18600:	65732065 	.word	0x65732065
   18604:	726f736e 	.word	0x726f736e
   18608:	73696d20 	.word	0x73696d20
   1860c:	676e6973 	.word	0x676e6973
   18610:	61656420 	.word	0x61656420
   18614:	6e696c64 	.word	0x6e696c64
   18618:	000d0a65 	.word	0x000d0a65
   1861c:	72656874 	.word	0x72656874
   18620:	72612065 	.word	0x72612065
   18624:	65732065 	.word	0x65732065
   18628:	6e617672 	.word	0x6e617672
   1862c:	6d207374 	.word	0x6d207374
   18630:	69737369 	.word	0x69737369
   18634:	6420676e 	.word	0x6420676e
   18638:	6c646165 	.word	0x6c646165
   1863c:	0a656e69 	.word	0x0a656e69
   18640:	0000000d 	.word	0x0000000d
   18644:	6f727245 	.word	0x6f727245
   18648:	54203a72 	.word	0x54203a72
   1864c:	20736968 	.word	0x20736968
   18650:	6e657665 	.word	0x6e657665
   18654:	61682074 	.word	0x61682074
   18658:	72612073 	.word	0x72612073
   1865c:	65766972 	.word	0x65766972
   18660:	0a212164 	.word	0x0a212164
   18664:	0000000d 	.word	0x0000000d
   18668:	454c4449 	.word	0x454c4449
   1866c:	00000000 	.word	0x00000000

00018670 <ulKernelPriority>:
   18670:	0000007f                                ....

00018674 <heapSTRUCT_SIZE>:
   18674:	00010010                                         ..

00018676 <version>:
   18676:	3d5a0001                                         ..

00018678 <utm_east0>:
   18678:	00093d5a                                Z=..

0001867c <utm_north0>:
   1867c:	005875e6                                .uX.

00018680 <climb_pgain>:
   18680:	bcf5c28f                                ....

00018684 <climb_igain>:
   18684:	3dcccccd                                ...=

00018688 <level_gaz>:
   18688:	3e9eb852                                R..>

0001868c <nav_east0>:
   1868c:	00093d5a                                Z=..

00018690 <nav_north0>:
   18690:	005875e6                                .uX.

00018694 <nb_waypoint>:
   18694:	00000007 33323130 37363534 42413938     ....0123456789AB
   186a4:	46454443                                CDEF

000186a8 <failsafe>:
	...
   186bc:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   186cc:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   186dc:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   186ec:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   186fc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   1870c:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   1871c:	00000074 736e6573 0000726f 76726573     t...sensor..serv
   1872c:	00746e61                                ant.
