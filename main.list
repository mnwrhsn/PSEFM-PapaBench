
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 d9 89 01 00 1d 8a 01 00 1d 8a 01 00     .P. ............
      10:	1d 8a 01 00 1d 8a 01 00 1d 8a 01 00 00 00 00 00     ................
	...
      2c:	31 5c 00 00 1d 8a 01 00 00 00 00 00 3d 5d 00 00     1\..........=]..
      3c:	79 5d 00 00 1d 8a 01 00 1d 8a 01 00 1d 8a 01 00     y]..............
      4c:	1d 8a 01 00 1d 8a 01 00 1d 8a 01 00 1d 8a 01 00     ................
      5c:	1d 8a 01 00 1d 8a 01 00 1d 8a 01 00 1d 8a 01 00     ................
      6c:	1d 8a 01 00 1d 8a 01 00 1d 8a 01 00 1d 8a 01 00     ................
      7c:	1d 8a 01 00 1d 8a 01 00 1d 8a 01 00 1d 8a 01 00     ................
      8c:	1d 8a 01 00 1d 8a 01 00 1d 8a 01 00 1d 8a 01 00     ................
      9c:	1d 8a 01 00 1d 8a 01 00 1d 8a 01 00 1d 8a 01 00     ................
      ac:	1d 8a 01 00 1d 8a 01 00 1d 8a 01 00 1d 8a 01 00     ................
      bc:	1d 8a 01 00 1d 8a 01 00 1d 8a 01 00 1d 8a 01 00     ................
      cc:	1d 8a 01 00 1d 8a 01 00 1d 8a 01 00 1d 8a 01 00     ................
      dc:	1d 8a 01 00 1d 8a 01 00 1d 8a 01 00 1d 8a 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018b08 	.word	0x00018b08
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cba4 	.word	0x2004cba4

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fce7 	bl	5dcc <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fe26 	bl	409c <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fe21 	bl	409c <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe01 	bl	40b4 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fe40 	bl	4174 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fdea 	bl	4104 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fdda 	bl	4104 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fdcd 	bl	4104 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fdee 	bl	4174 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fde5 	bl	4174 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fd64 	bl	40b4 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fe33 	bl	5270 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fd58 	bl	4174 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fd4f 	bl	4174 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fcca 	bl	40b4 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc01 	bl	405c <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fbf5 	bl	405c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fbef 	bl	405c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fbe9 	bl	405c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fc53 	bl	4174 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fbea 	bl	40b4 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b086      	sub	sp, #24
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f833 	bl	2994 <xEventGetpxDestination>
    292e:	6178      	str	r0, [r7, #20]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	1d3a      	adds	r2, r7, #4
    293e:	4610      	mov	r0, r2
    2940:	4619      	mov	r1, r3
    2942:	f000 f833 	bl	29ac <xEventGetxTag>
        if( xTaskGetTickCount() >= xTag.xTimestamp )
    2946:	f002 fc93 	bl	5270 <xTaskGetTickCount>
    294a:	4602      	mov	r2, r0
    294c:	68bb      	ldr	r3, [r7, #8]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6979      	ldr	r1, [r7, #20]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3718      	adds	r7, #24
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	681b      	ldr	r3, [r3, #0]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	685b      	ldr	r3, [r3, #4]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetxTag>:

struct tag xEventGetxTag( xEventHandle pxEvent)
{
    29ac:	b490      	push	{r4, r7}
    29ae:	b082      	sub	sp, #8
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    29b4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTag;
    29b6:	687a      	ldr	r2, [r7, #4]
    29b8:	683b      	ldr	r3, [r7, #0]
    29ba:	4614      	mov	r4, r2
    29bc:	3308      	adds	r3, #8
    29be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29c4:	6878      	ldr	r0, [r7, #4]
    29c6:	3708      	adds	r7, #8
    29c8:	46bd      	mov	sp, r7
    29ca:	bc90      	pop	{r4, r7}
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop

000029d0 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29d0:	b480      	push	{r7}
    29d2:	b083      	sub	sp, #12
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
    29d8:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	683a      	ldr	r2, [r7, #0]
    29de:	3218      	adds	r2, #24
    29e0:	e892 0003 	ldmia.w	r2, {r0, r1}
    29e4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    29e8:	6878      	ldr	r0, [r7, #4]
    29ea:	370c      	adds	r7, #12
    29ec:	46bd      	mov	sp, r7
    29ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    29f2:	4770      	bx	lr

000029f4 <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
    29fc:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	683a      	ldr	r2, [r7, #0]
    2a02:	fbb3 f2f2 	udiv	r2, r3, r2
    2a06:	6839      	ldr	r1, [r7, #0]
    2a08:	fb01 f202 	mul.w	r2, r1, r2
    2a0c:	1a9b      	subs	r3, r3, r2
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d00d      	beq.n	2a2e <getGCD+0x3a>
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	683a      	ldr	r2, [r7, #0]
    2a16:	fbb3 f2f2 	udiv	r2, r3, r2
    2a1a:	6839      	ldr	r1, [r7, #0]
    2a1c:	fb01 f202 	mul.w	r2, r1, r2
    2a20:	1a9b      	subs	r3, r3, r2
    2a22:	6838      	ldr	r0, [r7, #0]
    2a24:	4619      	mov	r1, r3
    2a26:	f7ff ffe5 	bl	29f4 <getGCD>
    2a2a:	4603      	mov	r3, r0
    2a2c:	e000      	b.n	2a30 <getGCD+0x3c>
    2a2e:	683b      	ldr	r3, [r7, #0]
}
    2a30:	4618      	mov	r0, r3
    2a32:	3708      	adds	r7, #8
    2a34:	46bd      	mov	sp, r7
    2a36:	bd80      	pop	{r7, pc}

00002a38 <GCDOfTaskPeriod>:

inline static portTickType GCDOfTaskPeriod()
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a3e:	f240 0328 	movw	r3, #40	; 0x28
    2a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a4a:	2301      	movs	r3, #1
    2a4c:	607b      	str	r3, [r7, #4]
    2a4e:	e00f      	b.n	2a70 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a50:	f240 0328 	movw	r3, #40	; 0x28
    2a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a58:	687a      	ldr	r2, [r7, #4]
    2a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a5e:	6838      	ldr	r0, [r7, #0]
    2a60:	4619      	mov	r1, r3
    2a62:	f7ff ffc7 	bl	29f4 <getGCD>
    2a66:	4603      	mov	r3, r0
    2a68:	603b      	str	r3, [r7, #0]
inline static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	3301      	adds	r3, #1
    2a6e:	607b      	str	r3, [r7, #4]
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	2b0c      	cmp	r3, #12
    2a74:	ddec      	ble.n	2a50 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a76:	683b      	ldr	r3, [r7, #0]
}
    2a78:	4618      	mov	r0, r3
    2a7a:	3708      	adds	r7, #8
    2a7c:	46bd      	mov	sp, r7
    2a7e:	bd80      	pop	{r7, pc}

00002a80 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a80:	b590      	push	{r4, r7, lr}
    2a82:	b091      	sub	sp, #68	; 0x44
    2a84:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a86:	f7ff ffd7 	bl	2a38 <GCDOfTaskPeriod>
    2a8a:	4602      	mov	r2, r0
    2a8c:	f240 6358 	movw	r3, #1624	; 0x658
    2a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a94:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a96:	f240 6060 	movw	r0, #1632	; 0x660
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fadd 	bl	405c <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2aa2:	f240 6074 	movw	r0, #1652	; 0x674
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fad7 	bl	405c <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2aae:	f240 6088 	movw	r0, #1672	; 0x688
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fad1 	bl	405c <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aba:	f240 609c 	movw	r0, #1692	; 0x69c
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 facb 	bl	405c <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2ac6:	f240 60b0 	movw	r0, #1712	; 0x6b0
    2aca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ace:	f001 fac5 	bl	405c <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2ad2:	f240 60c4 	movw	r0, #1732	; 0x6c4
    2ad6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ada:	f001 fabf 	bl	405c <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ade:	2300      	movs	r3, #0
    2ae0:	63bb      	str	r3, [r7, #56]	; 0x38
    2ae2:	e02b      	b.n	2b3c <vInitialiseEventLists+0xbc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2ae4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    2ae6:	2034      	movs	r0, #52	; 0x34
    2ae8:	f003 f970 	bl	5dcc <pvPortMalloc>
    2aec:	4602      	mov	r2, r0
    2aee:	00a3      	lsls	r3, r4, #2
    2af0:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af4:	440b      	add	r3, r1
    2af6:	f843 2c3c 	str.w	r2, [r3, #-60]
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
    2afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2afc:	009b      	lsls	r3, r3, #2
    2afe:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b02:	4413      	add	r3, r2
    2b04:	f853 2c3c 	ldr.w	r2, [r3, #-60]
    2b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2b10:	440b      	add	r3, r1
    2b12:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b16:	62d3      	str	r3, [r2, #44]	; 0x2c
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b1a:	009b      	lsls	r3, r3, #2
    2b1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b20:	4413      	add	r3, r2
    2b22:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b26:	3320      	adds	r3, #32
    2b28:	f240 6060 	movw	r0, #1632	; 0x660
    2b2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b30:	4619      	mov	r1, r3
    2b32:	f001 fabf 	bl	40b4 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b38:	3301      	adds	r3, #1
    2b3a:	63bb      	str	r3, [r7, #56]	; 0x38
    2b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b3e:	2b0c      	cmp	r3, #12
    2b40:	ddd0      	ble.n	2ae4 <vInitialiseEventLists+0x64>
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
}
    2b42:	3744      	adds	r7, #68	; 0x44
    2b44:	46bd      	mov	sp, r7
    2b46:	bd90      	pop	{r4, r7, pc}

00002b48 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2b48:	b580      	push	{r7, lr}
    2b4a:	b088      	sub	sp, #32
    2b4c:	af00      	add	r7, sp, #0
    volatile xListItem * pxIterator;
    portTickType xCurrentTime;
    portBASE_TYPE xLen, i;
    struct tag xTag;
    
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    2b4e:	f240 6374 	movw	r3, #1652	; 0x674
    2b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b56:	681b      	ldr	r3, [r3, #0]
    2b58:	617b      	str	r3, [r7, #20]
    2b5a:	697b      	ldr	r3, [r7, #20]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	dd22      	ble.n	2ba6 <xIsExecutableEventArrive+0x5e>
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
    2b60:	f240 6374 	movw	r3, #1652	; 0x674
    2b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b68:	68db      	ldr	r3, [r3, #12]
    2b6a:	61fb      	str	r3, [r7, #28]
        xCurrentTime = xTaskGetTickCount();
    2b6c:	f002 fb80 	bl	5270 <xTaskGetTickCount>
    2b70:	6138      	str	r0, [r7, #16]
        for( i = 0; i < xLen ; i++ ) 
    2b72:	2300      	movs	r3, #0
    2b74:	61bb      	str	r3, [r7, #24]
    2b76:	e012      	b.n	2b9e <xIsExecutableEventArrive+0x56>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner );
    2b78:	69fb      	ldr	r3, [r7, #28]
    2b7a:	68db      	ldr	r3, [r3, #12]
    2b7c:	463a      	mov	r2, r7
    2b7e:	4610      	mov	r0, r2
    2b80:	4619      	mov	r1, r3
    2b82:	f7ff ff13 	bl	29ac <xEventGetxTag>
            if(xTag.xTimestamp <= xCurrentTime) return pdTRUE;
    2b86:	687a      	ldr	r2, [r7, #4]
    2b88:	693b      	ldr	r3, [r7, #16]
    2b8a:	429a      	cmp	r2, r3
    2b8c:	d801      	bhi.n	2b92 <xIsExecutableEventArrive+0x4a>
    2b8e:	2301      	movs	r3, #1
    2b90:	e00a      	b.n	2ba8 <xIsExecutableEventArrive+0x60>
            pxIterator = pxIterator->pxNext;
    2b92:	69fb      	ldr	r3, [r7, #28]
    2b94:	685b      	ldr	r3, [r3, #4]
    2b96:	61fb      	str	r3, [r7, #28]
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
        xCurrentTime = xTaskGetTickCount();
        for( i = 0; i < xLen ; i++ ) 
    2b98:	69bb      	ldr	r3, [r7, #24]
    2b9a:	3301      	adds	r3, #1
    2b9c:	61bb      	str	r3, [r7, #24]
    2b9e:	69ba      	ldr	r2, [r7, #24]
    2ba0:	697b      	ldr	r3, [r7, #20]
    2ba2:	429a      	cmp	r2, r3
    2ba4:	dbe8      	blt.n	2b78 <xIsExecutableEventArrive+0x30>
       // temp_pxEventListItem = (xListItem *) xEventNonExecutableList.xListEnd.pxNext;
       // xTag = xEventGetxTag( (temp_pxEventListItem->pvOwner) );
       // xCurrentTime = xTaskGetTickCount();
       // return xTag.xTimestamp <= xCurrentTime ? pdTRUE : pdFALSE;
    }
    return pdFALSE;
    2ba6:	2300      	movs	r3, #0
}
    2ba8:	4618      	mov	r0, r3
    2baa:	3720      	adds	r7, #32
    2bac:	46bd      	mov	sp, r7
    2bae:	bd80      	pop	{r7, pc}

00002bb0 <xCompareFunction>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction( const struct tag t1, const struct tag t2 )
{
    2bb0:	b490      	push	{r4, r7}
    2bb2:	b084      	sub	sp, #16
    2bb4:	af00      	add	r7, sp, #0
    2bb6:	463c      	mov	r4, r7
    2bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2bbc:	683a      	ldr	r2, [r7, #0]
    2bbe:	69bb      	ldr	r3, [r7, #24]
    2bc0:	429a      	cmp	r2, r3
    2bc2:	d201      	bcs.n	2bc8 <xCompareFunction+0x18>
    {
        return pdTRUE;
    2bc4:	2301      	movs	r3, #1
    2bc6:	e01e      	b.n	2c06 <xCompareFunction+0x56>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2bc8:	683a      	ldr	r2, [r7, #0]
    2bca:	69bb      	ldr	r3, [r7, #24]
    2bcc:	429a      	cmp	r2, r3
    2bce:	d119      	bne.n	2c04 <xCompareFunction+0x54>
    {
        if( t1.xTimestamp < t2.xTimestamp)
    2bd0:	687a      	ldr	r2, [r7, #4]
    2bd2:	69fb      	ldr	r3, [r7, #28]
    2bd4:	429a      	cmp	r2, r3
    2bd6:	d201      	bcs.n	2bdc <xCompareFunction+0x2c>
        {
            return pdTRUE;
    2bd8:	2301      	movs	r3, #1
    2bda:	e014      	b.n	2c06 <xCompareFunction+0x56>
        }
        else if( t1.xTimestamp == t2.xTimestamp )
    2bdc:	687a      	ldr	r2, [r7, #4]
    2bde:	69fb      	ldr	r3, [r7, #28]
    2be0:	429a      	cmp	r2, r3
    2be2:	d10f      	bne.n	2c04 <xCompareFunction+0x54>
        {
            if( t1.xLevel < t2.xLevel )
    2be4:	68ba      	ldr	r2, [r7, #8]
    2be6:	6a3b      	ldr	r3, [r7, #32]
    2be8:	429a      	cmp	r2, r3
    2bea:	da01      	bge.n	2bf0 <xCompareFunction+0x40>
            {
                return pdTRUE;
    2bec:	2301      	movs	r3, #1
    2bee:	e00a      	b.n	2c06 <xCompareFunction+0x56>
            }
            else if( t1.xLevel == t2.xLevel && t1.xMicroStep < t2.xMicroStep )
    2bf0:	68ba      	ldr	r2, [r7, #8]
    2bf2:	6a3b      	ldr	r3, [r7, #32]
    2bf4:	429a      	cmp	r2, r3
    2bf6:	d105      	bne.n	2c04 <xCompareFunction+0x54>
    2bf8:	68fa      	ldr	r2, [r7, #12]
    2bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bfc:	429a      	cmp	r2, r3
    2bfe:	da01      	bge.n	2c04 <xCompareFunction+0x54>
            {
                return pdTRUE;
    2c00:	2301      	movs	r3, #1
    2c02:	e000      	b.n	2c06 <xCompareFunction+0x56>
            }
        }
    }

    return pdFALSE;
    2c04:	2300      	movs	r3, #0
}
    2c06:	4618      	mov	r0, r3
    2c08:	3710      	adds	r7, #16
    2c0a:	46bd      	mov	sp, r7
    2c0c:	bc90      	pop	{r4, r7}
    2c0e:	4770      	bx	lr

00002c10 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2c10:	b480      	push	{r7}
    2c12:	b087      	sub	sp, #28
    2c14:	af00      	add	r7, sp, #0
    2c16:	60f8      	str	r0, [r7, #12]
    2c18:	60b9      	str	r1, [r7, #8]
    2c1a:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2c20:	697b      	ldr	r3, [r7, #20]
    2c22:	68fa      	ldr	r2, [r7, #12]
    2c24:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2c26:	697b      	ldr	r3, [r7, #20]
    2c28:	68ba      	ldr	r2, [r7, #8]
    2c2a:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2c2c:	697b      	ldr	r3, [r7, #20]
    2c2e:	2200      	movs	r2, #0
    2c30:	615a      	str	r2, [r3, #20]
}
    2c32:	371c      	adds	r7, #28
    2c34:	46bd      	mov	sp, r7
    2c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c3a:	4770      	bx	lr

00002c3c <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2c3c:	b590      	push	{r4, r7, lr}
    2c3e:	b093      	sub	sp, #76	; 0x4c
    2c40:	af04      	add	r7, sp, #16
    2c42:	6078      	str	r0, [r7, #4]
    struct tag xTagOfInsertion;
    xList * pxList = &xEventExecutableList; 
    2c44:	f240 63b0 	movw	r3, #1712	; 0x6b0
    2c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    volatile xListItem *pxIterator = (xListItem *)&(pxList->xListEnd);
    2c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c50:	3308      	adds	r3, #8
    2c52:	637b      	str	r3, [r7, #52]	; 0x34
    portBASE_TYPE xLen, i;

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	68db      	ldr	r3, [r3, #12]
    2c58:	f107 0208 	add.w	r2, r7, #8
    2c5c:	4610      	mov	r0, r2
    2c5e:	4619      	mov	r1, r3
    2c60:	f7ff fea4 	bl	29ac <xEventGetxTag>

    taskENTER_CRITICAL();
    2c64:	f003 f838 	bl	5cd8 <vPortEnterCritical>
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    2c68:	f240 63b0 	movw	r3, #1712	; 0x6b0
    2c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c70:	681b      	ldr	r3, [r3, #0]
    2c72:	62bb      	str	r3, [r7, #40]	; 0x28
    for( i = 0; 
    2c74:	2300      	movs	r3, #0
    2c76:	633b      	str	r3, [r7, #48]	; 0x30
    2c78:	e005      	b.n	2c86 <prvEventListGenericInsert+0x4a>
         i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner ));
         i ++, pxIterator = pxIterator->pxPrevious) {}
    2c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c7c:	3301      	adds	r3, #1
    2c7e:	633b      	str	r3, [r7, #48]	; 0x30
    2c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2c82:	689b      	ldr	r3, [r3, #8]
    2c84:	637b      	str	r3, [r7, #52]	; 0x34
    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);

    taskENTER_CRITICAL();
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    for( i = 0; 
    2c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c8a:	429a      	cmp	r2, r3
    2c8c:	da16      	bge.n	2cbc <prvEventListGenericInsert+0x80>
         i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner ));
    2c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2c90:	689b      	ldr	r3, [r3, #8]
    2c92:	68db      	ldr	r3, [r3, #12]
    2c94:	f107 0218 	add.w	r2, r7, #24
    2c98:	4610      	mov	r0, r2
    2c9a:	4619      	mov	r1, r3
    2c9c:	f7ff fe86 	bl	29ac <xEventGetxTag>
    2ca0:	466c      	mov	r4, sp
    2ca2:	f107 0318 	add.w	r3, r7, #24
    2ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2cac:	f107 0308 	add.w	r3, r7, #8
    2cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cb2:	f7ff ff7d 	bl	2bb0 <xCompareFunction>
    2cb6:	4603      	mov	r3, r0
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d1de      	bne.n	2c7a <prvEventListGenericInsert+0x3e>
         i ++, pxIterator = pxIterator->pxPrevious) {}

    taskEXIT_CRITICAL();
    2cbc:	f003 f822 	bl	5d04 <vPortExitCritical>

    //pxIterator = pxIterator->pxPrevious;
    // insert the new event after a smaller one from the back of list
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2cc2:	685a      	ldr	r2, [r3, #4]
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	685b      	ldr	r3, [r3, #4]
    2ccc:	687a      	ldr	r2, [r7, #4]
    2cce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2cd4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2cd8:	687a      	ldr	r2, [r7, #4]
    2cda:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cdc:	687b      	ldr	r3, [r7, #4]
    2cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2ce0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ce4:	681b      	ldr	r3, [r3, #0]
    2ce6:	1c5a      	adds	r2, r3, #1
    2ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cea:	601a      	str	r2, [r3, #0]
}
    2cec:	373c      	adds	r7, #60	; 0x3c
    2cee:	46bd      	mov	sp, r7
    2cf0:	bd90      	pop	{r4, r7, pc}
    2cf2:	bf00      	nop

00002cf4 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * pdData)
{
    2cf4:	b580      	push	{r7, lr}
    2cf6:	b086      	sub	sp, #24
    2cf8:	af00      	add	r7, sp, #0
    2cfa:	60f8      	str	r0, [r7, #12]
    2cfc:	60b9      	str	r1, [r7, #8]
    2cfe:	607a      	str	r2, [r7, #4]
    2d00:	603b      	str	r3, [r7, #0]
    eveECB * pxNewEvent = NULL;
    2d02:	2300      	movs	r3, #0
    2d04:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2d06:	f002 ffe7 	bl	5cd8 <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2d0a:	f240 6360 	movw	r3, #1632	; 0x660
    2d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d12:	68db      	ldr	r3, [r3, #12]
    2d14:	68db      	ldr	r3, [r3, #12]
    2d16:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2d18:	697b      	ldr	r3, [r7, #20]
    2d1a:	3320      	adds	r3, #32
    2d1c:	4618      	mov	r0, r3
    2d1e:	f001 fa29 	bl	4174 <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2d22:	697b      	ldr	r3, [r7, #20]
    2d24:	68fa      	ldr	r2, [r7, #12]
    2d26:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2d28:	68b8      	ldr	r0, [r7, #8]
    2d2a:	6879      	ldr	r1, [r7, #4]
    2d2c:	697a      	ldr	r2, [r7, #20]
    2d2e:	f7ff ff6f 	bl	2c10 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = *pdData;
    2d32:	697b      	ldr	r3, [r7, #20]
    2d34:	683a      	ldr	r2, [r7, #0]
    2d36:	3318      	adds	r3, #24
    2d38:	e892 0003 	ldmia.w	r2, {r0, r1}
    2d3c:	e883 0003 	stmia.w	r3, {r0, r1}
    listSET_LIST_ITEM_OWNER( (xListItem *) &pxNewEvent->xEventListItem, pxNewEvent);
    2d40:	697b      	ldr	r3, [r7, #20]
    2d42:	697a      	ldr	r2, [r7, #20]
    2d44:	62da      	str	r2, [r3, #44]	; 0x2c

    taskEXIT_CRITICAL();
    2d46:	f002 ffdd 	bl	5d04 <vPortExitCritical>

    return pxNewEvent;
    2d4a:	697b      	ldr	r3, [r7, #20]
}
    2d4c:	4618      	mov	r0, r3
    2d4e:	3718      	adds	r7, #24
    2d50:	46bd      	mov	sp, r7
    2d52:	bd80      	pop	{r7, pc}

00002d54 <vEventGenericScatter>:


// find the executable events from xEventNonExecutablePool.
// scatter the events and transit them into xEventExecutablePool
void vEventGenericScatter()
{
    2d54:	b580      	push	{r7, lr}
    2d56:	b08e      	sub	sp, #56	; 0x38
    2d58:	af00      	add	r7, sp, #0
    portBASE_TYPE pxSource, pxDestination, outs;
    struct tag xTag;
    eveECB * pxEvent , * pxCopyEvent; 
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    volatile xListItem * pxIterator = xEventNonExecutablePool.xListEnd.pxNext;
    2d5a:	f240 6374 	movw	r3, #1652	; 0x674
    2d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d62:	68db      	ldr	r3, [r3, #12]
    2d64:	62fb      	str	r3, [r7, #44]	; 0x2c

    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    2d66:	f240 6374 	movw	r3, #1652	; 0x674
    2d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d6e:	681b      	ldr	r3, [r3, #0]
    2d70:	62bb      	str	r3, [r7, #40]	; 0x28
    2d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d74:	2b00      	cmp	r3, #0
    2d76:	f340 80c8 	ble.w	2f0a <vEventGenericScatter+0x1b6>
    {
        xCurrentTime = xTaskGetTickCount();
    2d7a:	f002 fa79 	bl	5270 <xTaskGetTickCount>
    2d7e:	6278      	str	r0, [r7, #36]	; 0x24
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2d80:	2300      	movs	r3, #0
    2d82:	633b      	str	r3, [r7, #48]	; 0x30
    2d84:	e0bc      	b.n	2f00 <vEventGenericScatter+0x1ac>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner ); 
    2d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d88:	68db      	ldr	r3, [r3, #12]
    2d8a:	463a      	mov	r2, r7
    2d8c:	4610      	mov	r0, r2
    2d8e:	4619      	mov	r1, r3
    2d90:	f7ff fe0c 	bl	29ac <xEventGetxTag>
            // find one
            if( xTag.xTimestamp <= xCurrentTime )
    2d94:	687a      	ldr	r2, [r7, #4]
    2d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d98:	429a      	cmp	r2, r3
    2d9a:	f200 80ab 	bhi.w	2ef4 <vEventGenericScatter+0x1a0>
            {
                pxEvent = (eveECB *) pxIterator->pvOwner;
    2d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2da0:	68db      	ldr	r3, [r3, #12]
    2da2:	623b      	str	r3, [r7, #32]
                outs = xContexts[ pxEvent->pxSource ].xNumOfOut; // used for cloning
    2da4:	6a3b      	ldr	r3, [r7, #32]
    2da6:	6819      	ldr	r1, [r3, #0]
    2da8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2dac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2db0:	460b      	mov	r3, r1
    2db2:	00db      	lsls	r3, r3, #3
    2db4:	1a5b      	subs	r3, r3, r1
    2db6:	00db      	lsls	r3, r3, #3
    2db8:	4413      	add	r3, r2
    2dba:	3310      	adds	r3, #16
    2dbc:	681b      	ldr	r3, [r3, #0]
    2dbe:	61fb      	str	r3, [r7, #28]

                taskENTER_CRITICAL();
    2dc0:	f002 ff8a 	bl	5cd8 <vPortEnterCritical>
                temp_pxEventListItem = (xListItem *) pxIterator;
    2dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2dc6:	61bb      	str	r3, [r7, #24]
                pxIterator = pxIterator->pxNext;
    2dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2dca:	685b      	ldr	r3, [r3, #4]
    2dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
                vListRemove(temp_pxEventListItem);
    2dce:	69b8      	ldr	r0, [r7, #24]
    2dd0:	f001 f9d0 	bl	4174 <vListRemove>
                // complete the information of the origin event.
                pxEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[0];
    2dd4:	6a3b      	ldr	r3, [r7, #32]
    2dd6:	6819      	ldr	r1, [r3, #0]
    2dd8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2ddc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2de0:	460b      	mov	r3, r1
    2de2:	00db      	lsls	r3, r3, #3
    2de4:	1a5b      	subs	r3, r3, r1
    2de6:	00db      	lsls	r3, r3, #3
    2de8:	4413      	add	r3, r2
    2dea:	331c      	adds	r3, #28
    2dec:	681a      	ldr	r2, [r3, #0]
    2dee:	6a3b      	ldr	r3, [r7, #32]
    2df0:	605a      	str	r2, [r3, #4]
                xContexts[pxEvent->pxDestination].xInBoolCount++;
    2df2:	6a3b      	ldr	r3, [r7, #32]
    2df4:	685a      	ldr	r2, [r3, #4]
    2df6:	f240 61d8 	movw	r1, #1752	; 0x6d8
    2dfa:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2dfe:	4613      	mov	r3, r2
    2e00:	00db      	lsls	r3, r3, #3
    2e02:	1a9b      	subs	r3, r3, r2
    2e04:	00db      	lsls	r3, r3, #3
    2e06:	440b      	add	r3, r1
    2e08:	3334      	adds	r3, #52	; 0x34
    2e0a:	681b      	ldr	r3, [r3, #0]
    2e0c:	1c58      	adds	r0, r3, #1
    2e0e:	f240 61d8 	movw	r1, #1752	; 0x6d8
    2e12:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e16:	4613      	mov	r3, r2
    2e18:	00db      	lsls	r3, r3, #3
    2e1a:	1a9b      	subs	r3, r3, r2
    2e1c:	00db      	lsls	r3, r3, #3
    2e1e:	440b      	add	r3, r1
    2e20:	3334      	adds	r3, #52	; 0x34
    2e22:	6018      	str	r0, [r3, #0]
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxSource].xTaskId;
    2e24:	6a3b      	ldr	r3, [r7, #32]
    2e26:	6819      	ldr	r1, [r3, #0]
    2e28:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2e2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e30:	460b      	mov	r3, r1
    2e32:	00db      	lsls	r3, r3, #3
    2e34:	1a5b      	subs	r3, r3, r1
    2e36:	00db      	lsls	r3, r3, #3
    2e38:	4413      	add	r3, r2
    2e3a:	3330      	adds	r3, #48	; 0x30
    2e3c:	681a      	ldr	r2, [r3, #0]
    2e3e:	6a3b      	ldr	r3, [r7, #32]
    2e40:	611a      	str	r2, [r3, #16]
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2e42:	f240 609c 	movw	r0, #1692	; 0x69c
    2e46:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e4a:	69b9      	ldr	r1, [r7, #24]
    2e4c:	f001 f932 	bl	40b4 <vListInsertEnd>

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2e50:	2301      	movs	r3, #1
    2e52:	637b      	str	r3, [r7, #52]	; 0x34
    2e54:	e047      	b.n	2ee6 <vEventGenericScatter+0x192>
                {
                    pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, &pxEvent->xData);
    2e56:	6a3b      	ldr	r3, [r7, #32]
    2e58:	6899      	ldr	r1, [r3, #8]
    2e5a:	6a3b      	ldr	r3, [r7, #32]
    2e5c:	68da      	ldr	r2, [r3, #12]
    2e5e:	6a3b      	ldr	r3, [r7, #32]
    2e60:	3318      	adds	r3, #24
    2e62:	6978      	ldr	r0, [r7, #20]
    2e64:	f7ff ff46 	bl	2cf4 <pxEventGenericCreate>
    2e68:	6138      	str	r0, [r7, #16]
                    // complete the information of the copied event.
                    pxCopyEvent->xTag.xMicroStep = i;
    2e6a:	693b      	ldr	r3, [r7, #16]
    2e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2e6e:	615a      	str	r2, [r3, #20]
                    pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
    2e70:	6a3b      	ldr	r3, [r7, #32]
    2e72:	691a      	ldr	r2, [r3, #16]
    2e74:	693b      	ldr	r3, [r7, #16]
    2e76:	611a      	str	r2, [r3, #16]
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
    2e78:	6a3b      	ldr	r3, [r7, #32]
    2e7a:	6819      	ldr	r1, [r3, #0]
    2e7c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2e80:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e84:	460b      	mov	r3, r1
    2e86:	00db      	lsls	r3, r3, #3
    2e88:	1a5b      	subs	r3, r3, r1
    2e8a:	005b      	lsls	r3, r3, #1
    2e8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    2e8e:	440b      	add	r3, r1
    2e90:	3306      	adds	r3, #6
    2e92:	009b      	lsls	r3, r3, #2
    2e94:	4413      	add	r3, r2
    2e96:	685a      	ldr	r2, [r3, #4]
    2e98:	693b      	ldr	r3, [r7, #16]
    2e9a:	605a      	str	r2, [r3, #4]
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
    2e9c:	693b      	ldr	r3, [r7, #16]
    2e9e:	685a      	ldr	r2, [r3, #4]
    2ea0:	f240 61d8 	movw	r1, #1752	; 0x6d8
    2ea4:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2ea8:	4613      	mov	r3, r2
    2eaa:	00db      	lsls	r3, r3, #3
    2eac:	1a9b      	subs	r3, r3, r2
    2eae:	00db      	lsls	r3, r3, #3
    2eb0:	440b      	add	r3, r1
    2eb2:	3334      	adds	r3, #52	; 0x34
    2eb4:	681b      	ldr	r3, [r3, #0]
    2eb6:	1c58      	adds	r0, r3, #1
    2eb8:	f240 61d8 	movw	r1, #1752	; 0x6d8
    2ebc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2ec0:	4613      	mov	r3, r2
    2ec2:	00db      	lsls	r3, r3, #3
    2ec4:	1a9b      	subs	r3, r3, r2
    2ec6:	00db      	lsls	r3, r3, #3
    2ec8:	440b      	add	r3, r1
    2eca:	3334      	adds	r3, #52	; 0x34
    2ecc:	6018      	str	r0, [r3, #0]
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
    2ece:	693b      	ldr	r3, [r7, #16]
    2ed0:	3320      	adds	r3, #32
    2ed2:	f240 609c 	movw	r0, #1692	; 0x69c
    2ed6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2eda:	4619      	mov	r1, r3
    2edc:	f001 f8ea 	bl	40b4 <vListInsertEnd>
                xContexts[pxEvent->pxDestination].xInBoolCount++;
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxSource].xTaskId;
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ee2:	3301      	adds	r3, #1
    2ee4:	637b      	str	r3, [r7, #52]	; 0x34
    2ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2ee8:	69fb      	ldr	r3, [r7, #28]
    2eea:	429a      	cmp	r2, r3
    2eec:	dbb3      	blt.n	2e56 <vEventGenericScatter+0x102>
                    pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
                }
                taskEXIT_CRITICAL();
    2eee:	f002 ff09 	bl	5d04 <vPortExitCritical>
    2ef2:	e002      	b.n	2efa <vEventGenericScatter+0x1a6>
            }
            else
            {
                pxIterator = pxIterator->pxNext;
    2ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ef6:	685b      	ldr	r3, [r3, #4]
    2ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    {
        xCurrentTime = xTaskGetTickCount();
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2efc:	3301      	adds	r3, #1
    2efe:	633b      	str	r3, [r7, #48]	; 0x30
    2f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f04:	429a      	cmp	r2, r3
    2f06:	f6ff af3e 	blt.w	2d86 <vEventGenericScatter+0x32>
            {
                pxIterator = pxIterator->pxNext;
            }
        }
    }
}
    2f0a:	3738      	adds	r7, #56	; 0x38
    2f0c:	46bd      	mov	sp, r7
    2f0e:	bd80      	pop	{r7, pc}

00002f10 <vEventGenericReduce>:

void vEventGenericReduce()
{
    2f10:	b580      	push	{r7, lr}
    2f12:	b08c      	sub	sp, #48	; 0x30
    2f14:	af00      	add	r7, sp, #0
    portBASE_TYPE i, pxDestination;
    struct tag temp_tag;
    struct eventData temp_data;
    volatile xListItem * pxIterator1, *pxIterator2;
    // event reduce 
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 0 )
    2f16:	f240 639c 	movw	r3, #1692	; 0x69c
    2f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f1e:	681b      	ldr	r3, [r3, #0]
    2f20:	2b00      	cmp	r3, #0
    2f22:	f000 80ac 	beq.w	307e <vEventGenericReduce+0x16e>
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    2f26:	f240 639c 	movw	r3, #1692	; 0x69c
    2f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f2e:	68db      	ldr	r3, [r3, #12]
    2f30:	62bb      	str	r3, [r7, #40]	; 0x28
    2f32:	e09f      	b.n	3074 <vEventGenericReduce+0x164>
                pxIterator1 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
        {
            reduce_pxEventListItem = (xListItem *) pxIterator1; 
    2f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f36:	623b      	str	r3, [r7, #32]
            pxDestination = xEventGetpxDestination(reduce_pxEventListItem->pvOwner); 
    2f38:	6a3b      	ldr	r3, [r7, #32]
    2f3a:	68db      	ldr	r3, [r3, #12]
    2f3c:	4618      	mov	r0, r3
    2f3e:	f7ff fd29 	bl	2994 <xEventGetpxDestination>
    2f42:	61f8      	str	r0, [r7, #28]

            // if the communication between servant is multiple to one,
            // then other events for the same servant need to be found
            if( xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    2f44:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2f48:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f4c:	69f9      	ldr	r1, [r7, #28]
    2f4e:	460b      	mov	r3, r1
    2f50:	00db      	lsls	r3, r3, #3
    2f52:	1a5b      	subs	r3, r3, r1
    2f54:	00db      	lsls	r3, r3, #3
    2f56:	4413      	add	r3, r2
    2f58:	3334      	adds	r3, #52	; 0x34
    2f5a:	6818      	ldr	r0, [r3, #0]
    2f5c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2f60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f64:	69f9      	ldr	r1, [r7, #28]
    2f66:	460b      	mov	r3, r1
    2f68:	00db      	lsls	r3, r3, #3
    2f6a:	1a5b      	subs	r3, r3, r1
    2f6c:	00db      	lsls	r3, r3, #3
    2f6e:	4413      	add	r3, r2
    2f70:	330c      	adds	r3, #12
    2f72:	681b      	ldr	r3, [r3, #0]
    2f74:	4298      	cmp	r0, r3
    2f76:	d17a      	bne.n	306e <vEventGenericReduce+0x15e>
            {
                taskENTER_CRITICAL();
    2f78:	f002 feae 	bl	5cd8 <vPortEnterCritical>
                if(xContexts[pxDestination].xInBoolCount > 1)
    2f7c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2f80:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f84:	69f9      	ldr	r1, [r7, #28]
    2f86:	460b      	mov	r3, r1
    2f88:	00db      	lsls	r3, r3, #3
    2f8a:	1a5b      	subs	r3, r3, r1
    2f8c:	00db      	lsls	r3, r3, #3
    2f8e:	4413      	add	r3, r2
    2f90:	3334      	adds	r3, #52	; 0x34
    2f92:	681b      	ldr	r3, [r3, #0]
    2f94:	2b01      	cmp	r3, #1
    2f96:	dd51      	ble.n	303c <vEventGenericReduce+0x12c>
                {
                    i = 1;
    2f98:	2301      	movs	r3, #1
    2f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    2f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f9e:	685b      	ldr	r3, [r3, #4]
    2fa0:	627b      	str	r3, [r7, #36]	; 0x24
    2fa2:	e047      	b.n	3034 <vEventGenericReduce+0x124>
                    {
                        // find another event for the same destinate servant, copy the data to the first one
                        if( xEventGetpxDestination(pxIterator2->pvOwner) == pxDestination ) 
    2fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fa6:	68db      	ldr	r3, [r3, #12]
    2fa8:	4618      	mov	r0, r3
    2faa:	f7ff fcf3 	bl	2994 <xEventGetpxDestination>
    2fae:	4602      	mov	r2, r0
    2fb0:	69fb      	ldr	r3, [r7, #28]
    2fb2:	429a      	cmp	r2, r3
    2fb4:	d13b      	bne.n	302e <vEventGenericReduce+0x11e>
                        {
                            // collecting data into the first event
                            temp_data = xEventGetxData(pxIterator2->pvOwner); 
    2fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fb8:	68db      	ldr	r3, [r3, #12]
    2fba:	463a      	mov	r2, r7
    2fbc:	4610      	mov	r0, r2
    2fbe:	4619      	mov	r1, r3
    2fc0:	f7ff fd06 	bl	29d0 <xEventGetxData>
                            ((eveECB *)reduce_pxEventListItem->pvOwner)->xData.xDataArray[i++] = temp_data.xDataArray[0];
    2fc4:	6a3b      	ldr	r3, [r7, #32]
    2fc6:	68da      	ldr	r2, [r3, #12]
    2fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2fca:	1c59      	adds	r1, r3, #1
    2fcc:	62f9      	str	r1, [r7, #44]	; 0x2c
    2fce:	6839      	ldr	r1, [r7, #0]
    2fd0:	3306      	adds	r3, #6
    2fd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                            // set the timestamp to the biggest one
                            temp_tag = xEventGetxTag(pxIterator2->pvOwner);
    2fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fd8:	68db      	ldr	r3, [r3, #12]
    2fda:	f107 0208 	add.w	r2, r7, #8
    2fde:	4610      	mov	r0, r2
    2fe0:	4619      	mov	r1, r3
    2fe2:	f7ff fce3 	bl	29ac <xEventGetxTag>
                            if(((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp < temp_tag.xTimestamp)
    2fe6:	6a3b      	ldr	r3, [r7, #32]
    2fe8:	68db      	ldr	r3, [r3, #12]
    2fea:	68da      	ldr	r2, [r3, #12]
    2fec:	68fb      	ldr	r3, [r7, #12]
    2fee:	429a      	cmp	r2, r3
    2ff0:	d203      	bcs.n	2ffa <vEventGenericReduce+0xea>
                            {
                                ((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp = temp_tag.xTimestamp;
    2ff2:	6a3b      	ldr	r3, [r7, #32]
    2ff4:	68db      	ldr	r3, [r3, #12]
    2ff6:	68fa      	ldr	r2, [r7, #12]
    2ff8:	60da      	str	r2, [r3, #12]
                            }
                            // delete the useless event, and return it back to event idle list
                            temp_pxEventListItem = (xListItem *) pxIterator2; 
    2ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ffc:	61bb      	str	r3, [r7, #24]
                            pxIterator2 = pxIterator2->pxNext;
    2ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3000:	685b      	ldr	r3, [r3, #4]
    3002:	627b      	str	r3, [r7, #36]	; 0x24
                            vEventGenericDelete(temp_pxEventListItem->pvOwner); 
    3004:	69bb      	ldr	r3, [r7, #24]
    3006:	68db      	ldr	r3, [r3, #12]
    3008:	4618      	mov	r0, r3
    300a:	f000 f9f9 	bl	3400 <vEventGenericDelete>
                            if( i == xContexts[pxDestination].xInBoolCount )
    300e:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3012:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3016:	69f9      	ldr	r1, [r7, #28]
    3018:	460b      	mov	r3, r1
    301a:	00db      	lsls	r3, r3, #3
    301c:	1a5b      	subs	r3, r3, r1
    301e:	00db      	lsls	r3, r3, #3
    3020:	4413      	add	r3, r2
    3022:	3334      	adds	r3, #52	; 0x34
    3024:	681a      	ldr	r2, [r3, #0]
    3026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3028:	429a      	cmp	r2, r3
    302a:	d103      	bne.n	3034 <vEventGenericReduce+0x124>
                            {
                                break;   // find all event for the same servant 
    302c:	e006      	b.n	303c <vEventGenericReduce+0x12c>
                            }
                        }
                        else
                        {
                            pxIterator2 = pxIterator2->pxNext;
    302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3030:	685b      	ldr	r3, [r3, #4]
    3032:	627b      	str	r3, [r7, #36]	; 0x24
            {
                taskENTER_CRITICAL();
                if(xContexts[pxDestination].xInBoolCount > 1)
                {
                    i = 1;
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    3034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3036:	4b13      	ldr	r3, [pc, #76]	; (3084 <vEventGenericReduce+0x174>)
    3038:	429a      	cmp	r2, r3
    303a:	d1b3      	bne.n	2fa4 <vEventGenericReduce+0x94>
                        {
                            pxIterator2 = pxIterator2->pxNext;
                        }
                    }
                }
                xContexts[pxDestination].xInBoolCount = 0; 
    303c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3040:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3044:	69f9      	ldr	r1, [r7, #28]
    3046:	460b      	mov	r3, r1
    3048:	00db      	lsls	r3, r3, #3
    304a:	1a5b      	subs	r3, r3, r1
    304c:	00db      	lsls	r3, r3, #3
    304e:	4413      	add	r3, r2
    3050:	3334      	adds	r3, #52	; 0x34
    3052:	2200      	movs	r2, #0
    3054:	601a      	str	r2, [r3, #0]
                pxIterator1 = pxIterator1->pxNext; 
    3056:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3058:	685b      	ldr	r3, [r3, #4]
    305a:	62bb      	str	r3, [r7, #40]	; 0x28
                vListRemove(reduce_pxEventListItem);
    305c:	6a38      	ldr	r0, [r7, #32]
    305e:	f001 f889 	bl	4174 <vListRemove>
                prvEventListGenericInsert(reduce_pxEventListItem);
    3062:	6a38      	ldr	r0, [r7, #32]
    3064:	f7ff fdea 	bl	2c3c <prvEventListGenericInsert>
                taskEXIT_CRITICAL();
    3068:	f002 fe4c 	bl	5d04 <vPortExitCritical>
    306c:	e002      	b.n	3074 <vEventGenericReduce+0x164>
            }
            else
            {
                pxIterator1 = pxIterator1->pxNext;
    306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3070:	685b      	ldr	r3, [r3, #4]
    3072:	62bb      	str	r3, [r7, #40]	; 0x28
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 0 )
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    3074:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3076:	4b03      	ldr	r3, [pc, #12]	; (3084 <vEventGenericReduce+0x174>)
    3078:	429a      	cmp	r2, r3
    307a:	f47f af5b 	bne.w	2f34 <vEventGenericReduce+0x24>
                pxIterator1 = pxIterator1->pxNext;
            }

        }
    }
}
    307e:	3730      	adds	r7, #48	; 0x30
    3080:	46bd      	mov	sp, r7
    3082:	bd80      	pop	{r7, pc}
    3084:	200006a4 	.word	0x200006a4

00003088 <pOverLap>:



static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    3088:	b480      	push	{r7}
    308a:	b087      	sub	sp, #28
    308c:	af00      	add	r7, sp, #0
    308e:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	68db      	ldr	r3, [r3, #12]
    3094:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    3096:	697b      	ldr	r3, [r7, #20]
    3098:	685b      	ldr	r3, [r3, #4]
    309a:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    309c:	697b      	ldr	r3, [r7, #20]
    309e:	68db      	ldr	r3, [r3, #12]
    30a0:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    30a2:	f240 62d8 	movw	r2, #1752	; 0x6d8
    30a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30aa:	6939      	ldr	r1, [r7, #16]
    30ac:	460b      	mov	r3, r1
    30ae:	00db      	lsls	r3, r3, #3
    30b0:	1a5b      	subs	r3, r3, r1
    30b2:	00db      	lsls	r3, r3, #3
    30b4:	4413      	add	r3, r2
    30b6:	3324      	adds	r3, #36	; 0x24
    30b8:	681a      	ldr	r2, [r3, #0]
    30ba:	68fb      	ldr	r3, [r7, #12]
    30bc:	4413      	add	r3, r2
    30be:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    30c0:	f240 6358 	movw	r3, #1624	; 0x658
    30c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30c8:	681a      	ldr	r2, [r3, #0]
    30ca:	68fb      	ldr	r3, [r7, #12]
    30cc:	fbb3 f1f2 	udiv	r1, r3, r2
    30d0:	fb02 f201 	mul.w	r2, r2, r1
    30d4:	1a9b      	subs	r3, r3, r2
    30d6:	2b02      	cmp	r3, #2
    30d8:	d932      	bls.n	3140 <pOverLap+0xb8>
    30da:	f240 6358 	movw	r3, #1624	; 0x658
    30de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30e2:	681a      	ldr	r2, [r3, #0]
    30e4:	68fb      	ldr	r3, [r7, #12]
    30e6:	fbb3 f1f2 	udiv	r1, r3, r2
    30ea:	fb02 f201 	mul.w	r2, r2, r1
    30ee:	1a9a      	subs	r2, r3, r2
    30f0:	f240 6358 	movw	r3, #1624	; 0x658
    30f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30f8:	681b      	ldr	r3, [r3, #0]
    30fa:	3b03      	subs	r3, #3
    30fc:	429a      	cmp	r2, r3
    30fe:	d81f      	bhi.n	3140 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3100:	f240 6358 	movw	r3, #1624	; 0x658
    3104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3108:	681a      	ldr	r2, [r3, #0]
    310a:	68bb      	ldr	r3, [r7, #8]
    310c:	fbb3 f1f2 	udiv	r1, r3, r2
    3110:	fb02 f201 	mul.w	r2, r2, r1
    3114:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    3116:	2b02      	cmp	r3, #2
    3118:	d912      	bls.n	3140 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    311a:	f240 6358 	movw	r3, #1624	; 0x658
    311e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3122:	681a      	ldr	r2, [r3, #0]
    3124:	68bb      	ldr	r3, [r7, #8]
    3126:	fbb3 f1f2 	udiv	r1, r3, r2
    312a:	fb02 f201 	mul.w	r2, r2, r1
    312e:	1a9a      	subs	r2, r3, r2
    3130:	f240 6358 	movw	r3, #1624	; 0x658
    3134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3138:	681b      	ldr	r3, [r3, #0]
    313a:	3b03      	subs	r3, #3
    313c:	429a      	cmp	r2, r3
    313e:	d901      	bls.n	3144 <pOverLap+0xbc>
    {
        return 1;
    3140:	2301      	movs	r3, #1
    3142:	e000      	b.n	3146 <pOverLap+0xbe>
    }
    return 0;
    3144:	2300      	movs	r3, #0
}
    3146:	4618      	mov	r0, r3
    3148:	371c      	adds	r7, #28
    314a:	46bd      	mov	sp, r7
    314c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3150:	4770      	bx	lr
    3152:	bf00      	nop

00003154 <xSetTimestamp>:

static void xSetTimestamp( xListItem * pxEventListItem)
{
    3154:	b580      	push	{r7, lr}
    3156:	b084      	sub	sp, #16
    3158:	af00      	add	r7, sp, #0
    315a:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    315c:	687b      	ldr	r3, [r7, #4]
    315e:	68db      	ldr	r3, [r3, #12]
    3160:	60fb      	str	r3, [r7, #12]
    pxEvent->xTag.xTimestamp = xFutureModelTime;
    3162:	f240 635c 	movw	r3, #1628	; 0x65c
    3166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    316a:	681a      	ldr	r2, [r3, #0]
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	60da      	str	r2, [r3, #12]

    if( pOverLap(pxEventListItem )== 0 ) // not overlaped
    3170:	6878      	ldr	r0, [r7, #4]
    3172:	f7ff ff89 	bl	3088 <pOverLap>
    3176:	4603      	mov	r3, r0
    3178:	2b00      	cmp	r3, #0
    317a:	d122      	bne.n	31c2 <xSetTimestamp+0x6e>
    {
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet; // update future model time
    317c:	68fb      	ldr	r3, [r7, #12]
    317e:	6859      	ldr	r1, [r3, #4]
    3180:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3184:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3188:	460b      	mov	r3, r1
    318a:	00db      	lsls	r3, r3, #3
    318c:	1a5b      	subs	r3, r3, r1
    318e:	00db      	lsls	r3, r3, #3
    3190:	4413      	add	r3, r2
    3192:	3324      	adds	r3, #36	; 0x24
    3194:	681a      	ldr	r2, [r3, #0]
    3196:	f240 635c 	movw	r3, #1628	; 0x65c
    319a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    319e:	681b      	ldr	r3, [r3, #0]
    31a0:	441a      	add	r2, r3
    31a2:	f240 635c 	movw	r3, #1628	; 0x65c
    31a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31aa:	601a      	str	r2, [r3, #0]
        vListRemove( pxEventListItem); 
    31ac:	6878      	ldr	r0, [r7, #4]
    31ae:	f000 ffe1 	bl	4174 <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    31b2:	f240 60c4 	movw	r0, #1732	; 0x6c4
    31b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    31ba:	6879      	ldr	r1, [r7, #4]
    31bc:	f000 ff7a 	bl	40b4 <vListInsertEnd>
    31c0:	e042      	b.n	3248 <xSetTimestamp+0xf4>
    }
    else  // overlaped
    {
        // set the future model time to start time of next LET
        xFutureModelTime = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;  
    31c2:	f240 635c 	movw	r3, #1628	; 0x65c
    31c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ca:	681a      	ldr	r2, [r3, #0]
    31cc:	f240 6358 	movw	r3, #1624	; 0x658
    31d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31d4:	681b      	ldr	r3, [r3, #0]
    31d6:	fbb2 f3f3 	udiv	r3, r2, r3
    31da:	1c5a      	adds	r2, r3, #1
    31dc:	f240 6358 	movw	r3, #1624	; 0x658
    31e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31e4:	681b      	ldr	r3, [r3, #0]
    31e6:	fb03 f302 	mul.w	r3, r3, r2
    31ea:	1cda      	adds	r2, r3, #3
    31ec:	f240 635c 	movw	r3, #1628	; 0x65c
    31f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31f4:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    31f6:	f240 635c 	movw	r3, #1628	; 0x65c
    31fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31fe:	681a      	ldr	r2, [r3, #0]
    3200:	68fb      	ldr	r3, [r7, #12]
    3202:	60da      	str	r2, [r3, #12]
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;
    3204:	68fb      	ldr	r3, [r7, #12]
    3206:	6859      	ldr	r1, [r3, #4]
    3208:	f240 62d8 	movw	r2, #1752	; 0x6d8
    320c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3210:	460b      	mov	r3, r1
    3212:	00db      	lsls	r3, r3, #3
    3214:	1a5b      	subs	r3, r3, r1
    3216:	00db      	lsls	r3, r3, #3
    3218:	4413      	add	r3, r2
    321a:	3324      	adds	r3, #36	; 0x24
    321c:	681a      	ldr	r2, [r3, #0]
    321e:	f240 635c 	movw	r3, #1628	; 0x65c
    3222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3226:	681b      	ldr	r3, [r3, #0]
    3228:	441a      	add	r2, r3
    322a:	f240 635c 	movw	r3, #1628	; 0x65c
    322e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3232:	601a      	str	r2, [r3, #0]

        vListRemove( pxEventListItem); 
    3234:	6878      	ldr	r0, [r7, #4]
    3236:	f000 ff9d 	bl	4174 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    323a:	f240 6074 	movw	r0, #1652	; 0x674
    323e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3242:	6879      	ldr	r1, [r7, #4]
    3244:	f000 ff36 	bl	40b4 <vListInsertEnd>
    }
}
    3248:	3710      	adds	r7, #16
    324a:	46bd      	mov	sp, r7
    324c:	bd80      	pop	{r7, pc}
    324e:	bf00      	nop

00003250 <pEqualxDeadline>:

inline static portBASE_TYPE pEqualxDeadline(struct tag xTag1, struct tag xTag2)
{
    3250:	b490      	push	{r4, r7}
    3252:	b084      	sub	sp, #16
    3254:	af00      	add	r7, sp, #0
    3256:	463c      	mov	r4, r7
    3258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return (xTag1.xDeadline == xTag2.xDeadline);
    325c:	683a      	ldr	r2, [r7, #0]
    325e:	69bb      	ldr	r3, [r7, #24]
    3260:	429a      	cmp	r2, r3
    3262:	bf14      	ite	ne
    3264:	2300      	movne	r3, #0
    3266:	2301      	moveq	r3, #1
    3268:	b2db      	uxtb	r3, r3
}
    326a:	4618      	mov	r0, r3
    326c:	3710      	adds	r7, #16
    326e:	46bd      	mov	sp, r7
    3270:	bc90      	pop	{r4, r7}
    3272:	4770      	bx	lr

00003274 <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    3274:	b590      	push	{r4, r7, lr}
    3276:	b08f      	sub	sp, #60	; 0x3c
    3278:	af04      	add	r7, sp, #16
    xListItem * flag_pxEventListItem;
    struct tag origin_tag;
    portBASE_TYPE count = 1;
    327a:	2301      	movs	r3, #1
    327c:	627b      	str	r3, [r7, #36]	; 0x24

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    327e:	f240 63b0 	movw	r3, #1712	; 0x6b0
    3282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3286:	681b      	ldr	r3, [r3, #0]
    3288:	2b00      	cmp	r3, #0
    328a:	d00b      	beq.n	32a4 <xEventGenericSerialize+0x30>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    328c:	f240 63b0 	movw	r3, #1712	; 0x6b0
    3290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3294:	68db      	ldr	r3, [r3, #12]
    3296:	68db      	ldr	r3, [r3, #12]
    3298:	463a      	mov	r2, r7
    329a:	4610      	mov	r0, r2
    329c:	4619      	mov	r1, r3
    329e:	f7ff fb85 	bl	29ac <xEventGetxTag>
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    32a2:	e03d      	b.n	3320 <xEventGenericSerialize+0xac>
    32a4:	e03c      	b.n	3320 <xEventGenericSerialize+0xac>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    32a6:	f240 63b0 	movw	r3, #1712	; 0x6b0
    32aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ae:	68db      	ldr	r3, [r3, #12]
    32b0:	623b      	str	r3, [r7, #32]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    32b2:	6a3b      	ldr	r3, [r7, #32]
    32b4:	68db      	ldr	r3, [r3, #12]
    32b6:	4618      	mov	r0, r3
    32b8:	f7ff fb6c 	bl	2994 <xEventGetpxDestination>
    32bc:	4601      	mov	r1, r0
    32be:	f240 62d8 	movw	r2, #1752	; 0x6d8
    32c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    32c6:	460b      	mov	r3, r1
    32c8:	00db      	lsls	r3, r3, #3
    32ca:	1a5b      	subs	r3, r3, r1
    32cc:	00db      	lsls	r3, r3, #3
    32ce:	4413      	add	r3, r2
    32d0:	3304      	adds	r3, #4
    32d2:	681b      	ldr	r3, [r3, #0]
    32d4:	2b02      	cmp	r3, #2
    32d6:	d119      	bne.n	330c <xEventGenericSerialize+0x98>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    32d8:	6a3b      	ldr	r3, [r7, #32]
    32da:	68db      	ldr	r3, [r3, #12]
    32dc:	f107 0210 	add.w	r2, r7, #16
    32e0:	4610      	mov	r0, r2
    32e2:	4619      	mov	r1, r3
    32e4:	f7ff fb62 	bl	29ac <xEventGetxTag>
    32e8:	466c      	mov	r4, sp
    32ea:	463b      	mov	r3, r7
    32ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    32ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    32f2:	f107 0310 	add.w	r3, r7, #16
    32f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    32f8:	f7ff ffaa 	bl	3250 <pEqualxDeadline>
    32fc:	4603      	mov	r3, r0
    32fe:	2b00      	cmp	r3, #0
    3300:	d003      	beq.n	330a <xEventGenericSerialize+0x96>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                xSetTimestamp( flag_pxEventListItem);
    3302:	6a38      	ldr	r0, [r7, #32]
    3304:	f7ff ff26 	bl	3154 <xSetTimestamp>
    3308:	e00a      	b.n	3320 <xEventGenericSerialize+0xac>
            }
            else
            {
                break;
    330a:	e010      	b.n	332e <xEventGenericSerialize+0xba>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    330c:	6a38      	ldr	r0, [r7, #32]
    330e:	f000 ff31 	bl	4174 <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    3312:	f240 60c4 	movw	r0, #1732	; 0x6c4
    3316:	f2c2 0000 	movt	r0, #8192	; 0x2000
    331a:	6a39      	ldr	r1, [r7, #32]
    331c:	f000 feca 	bl	40b4 <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    3320:	f240 63b0 	movw	r3, #1712	; 0x6b0
    3324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3328:	681b      	ldr	r3, [r3, #0]
    332a:	2b00      	cmp	r3, #0
    332c:	d1bb      	bne.n	32a6 <xEventGenericSerialize+0x32>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    332e:	f240 63c4 	movw	r3, #1732	; 0x6c4
    3332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3336:	681b      	ldr	r3, [r3, #0]
    3338:	2b00      	cmp	r3, #0
    333a:	d00a      	beq.n	3352 <xEventGenericSerialize+0xde>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    333c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    3340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3344:	68db      	ldr	r3, [r3, #12]
    3346:	68db      	ldr	r3, [r3, #12]
    3348:	4618      	mov	r0, r3
    334a:	f7ff fb23 	bl	2994 <xEventGetpxDestination>
    334e:	4603      	mov	r3, r0
    3350:	e001      	b.n	3356 <xEventGenericSerialize+0xe2>
    }
    return -1; // no event avaliable
    3352:	f04f 33ff 	mov.w	r3, #4294967295
}
    3356:	4618      	mov	r0, r3
    3358:	372c      	adds	r7, #44	; 0x2c
    335a:	46bd      	mov	sp, r7
    335c:	bd90      	pop	{r4, r7, pc}
    335e:	bf00      	nop

00003360 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    3360:	b580      	push	{r7, lr}
    3362:	b082      	sub	sp, #8
    3364:	af00      	add	r7, sp, #0
    3366:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	3320      	adds	r3, #32
    336c:	f240 6074 	movw	r0, #1652	; 0x674
    3370:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3374:	4619      	mov	r1, r3
    3376:	f000 fe9d 	bl	40b4 <vListInsertEnd>
}
    337a:	3708      	adds	r7, #8
    337c:	46bd      	mov	sp, r7
    337e:	bd80      	pop	{r7, pc}

00003380 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    3380:	b580      	push	{r7, lr}
    3382:	b082      	sub	sp, #8
    3384:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant
    xListItem * pxEventList;

    taskENTER_CRITICAL();
    3386:	f002 fca7 	bl	5cd8 <vPortEnterCritical>
    pxEventList= (xListItem *)xEventReadyList.xListEnd.pxNext;
    338a:	f240 63c4 	movw	r3, #1732	; 0x6c4
    338e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3392:	68db      	ldr	r3, [r3, #12]
    3394:	607b      	str	r3, [r7, #4]
    vListRemove(pxEventList);
    3396:	6878      	ldr	r0, [r7, #4]
    3398:	f000 feec 	bl	4174 <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxEventList);  // reuse event, which will be update by servant 
    339c:	f240 6074 	movw	r0, #1652	; 0x674
    33a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    33a4:	6879      	ldr	r1, [r7, #4]
    33a6:	f000 fe85 	bl	40b4 <vListInsertEnd>
    taskEXIT_CRITICAL();
    33aa:	f002 fcab 	bl	5d04 <vPortExitCritical>

    return (xEventHandle) pxEventList->pvOwner;
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	68db      	ldr	r3, [r3, #12]
}
    33b2:	4618      	mov	r0, r3
    33b4:	3708      	adds	r7, #8
    33b6:	46bd      	mov	sp, r7
    33b8:	bd80      	pop	{r7, pc}
    33ba:	bf00      	nop

000033bc <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData xData)
{
    33bc:	b480      	push	{r7}
    33be:	b087      	sub	sp, #28
    33c0:	af00      	add	r7, sp, #0
    33c2:	60f8      	str	r0, [r7, #12]
    33c4:	60b9      	str	r1, [r7, #8]
    33c6:	607a      	str	r2, [r7, #4]
    33c8:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    33ca:	68fb      	ldr	r3, [r7, #12]
    33cc:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    33ce:	697b      	ldr	r3, [r7, #20]
    33d0:	68ba      	ldr	r2, [r7, #8]
    33d2:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    33d4:	697b      	ldr	r3, [r7, #20]
    33d6:	687a      	ldr	r2, [r7, #4]
    33d8:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    33da:	697b      	ldr	r3, [r7, #20]
    33dc:	683a      	ldr	r2, [r7, #0]
    33de:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    33e0:	697b      	ldr	r3, [r7, #20]
    33e2:	2200      	movs	r2, #0
    33e4:	615a      	str	r2, [r3, #20]
    pxEvent->xData = xData;
    33e6:	697b      	ldr	r3, [r7, #20]
    33e8:	3318      	adds	r3, #24
    33ea:	f107 0220 	add.w	r2, r7, #32
    33ee:	e892 0003 	ldmia.w	r2, {r0, r1}
    33f2:	e883 0003 	stmia.w	r3, {r0, r1}
}
    33f6:	371c      	adds	r7, #28
    33f8:	46bd      	mov	sp, r7
    33fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    33fe:	4770      	bx	lr

00003400 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    3400:	b580      	push	{r7, lr}
    3402:	b084      	sub	sp, #16
    3404:	af00      	add	r7, sp, #0
    3406:	6078      	str	r0, [r7, #4]
    xListItem * pxEventItem;
    taskENTER_CRITICAL();
    3408:	f002 fc66 	bl	5cd8 <vPortEnterCritical>

    pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    340c:	687b      	ldr	r3, [r7, #4]
    340e:	3320      	adds	r3, #32
    3410:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    3412:	68f8      	ldr	r0, [r7, #12]
    3414:	f000 feae 	bl	4174 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    3418:	f240 6060 	movw	r0, #1632	; 0x660
    341c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3420:	68f9      	ldr	r1, [r7, #12]
    3422:	f000 fe47 	bl	40b4 <vListInsertEnd>

    taskEXIT_CRITICAL();
    3426:	f002 fc6d 	bl	5d04 <vPortExitCritical>
}
    342a:	3710      	adds	r7, #16
    342c:	46bd      	mov	sp, r7
    342e:	bd80      	pop	{r7, pc}

00003430 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3430:	b580      	push	{r7, lr}
    3432:	b082      	sub	sp, #8
    3434:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    3436:	2300      	movs	r3, #0
    3438:	607b      	str	r3, [r7, #4]
    343a:	e033      	b.n	34a4 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    343c:	2001      	movs	r0, #1
    343e:	2100      	movs	r1, #0
    3440:	2203      	movs	r2, #3
    3442:	f000 ff0d 	bl	4260 <xQueueGenericCreate>
    3446:	4601      	mov	r1, r0
    3448:	f241 1320 	movw	r3, #4384	; 0x1120
    344c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3450:	687a      	ldr	r2, [r7, #4]
    3452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    3456:	f241 1320 	movw	r3, #4384	; 0x1120
    345a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    345e:	687a      	ldr	r2, [r7, #4]
    3460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3464:	2b00      	cmp	r3, #0
    3466:	d00c      	beq.n	3482 <vSemaphoreInitialise+0x52>
    3468:	f241 1320 	movw	r3, #4384	; 0x1120
    346c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3470:	687a      	ldr	r2, [r7, #4]
    3472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3476:	4618      	mov	r0, r3
    3478:	2100      	movs	r1, #0
    347a:	2200      	movs	r2, #0
    347c:	2300      	movs	r3, #0
    347e:	f000 ff7d 	bl	437c <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    3482:	f241 1320 	movw	r3, #4384	; 0x1120
    3486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    348a:	687a      	ldr	r2, [r7, #4]
    348c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3490:	4618      	mov	r0, r3
    3492:	2100      	movs	r1, #0
    3494:	f04f 32ff 	mov.w	r2, #4294967295
    3498:	2300      	movs	r3, #0
    349a:	f001 f835 	bl	4508 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    349e:	687b      	ldr	r3, [r7, #4]
    34a0:	3301      	adds	r3, #1
    34a2:	607b      	str	r3, [r7, #4]
    34a4:	687b      	ldr	r3, [r7, #4]
    34a6:	2b03      	cmp	r3, #3
    34a8:	ddc8      	ble.n	343c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    34aa:	3708      	adds	r7, #8
    34ac:	46bd      	mov	sp, r7
    34ae:	bd80      	pop	{r7, pc}

000034b0 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    34b0:	b480      	push	{r7}
    34b2:	b085      	sub	sp, #20
    34b4:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    34b6:	2300      	movs	r3, #0
    34b8:	60fb      	str	r3, [r7, #12]
    34ba:	e0a1      	b.n	3600 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    34bc:	f240 62d8 	movw	r2, #1752	; 0x6d8
    34c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    34c4:	68f9      	ldr	r1, [r7, #12]
    34c6:	460b      	mov	r3, r1
    34c8:	00db      	lsls	r3, r3, #3
    34ca:	1a5b      	subs	r3, r3, r1
    34cc:	00db      	lsls	r3, r3, #3
    34ce:	4413      	add	r3, r2
    34d0:	68fa      	ldr	r2, [r7, #12]
    34d2:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    34d4:	f240 62d8 	movw	r2, #1752	; 0x6d8
    34d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    34dc:	68f9      	ldr	r1, [r7, #12]
    34de:	460b      	mov	r3, r1
    34e0:	00db      	lsls	r3, r3, #3
    34e2:	1a5b      	subs	r3, r3, r1
    34e4:	00db      	lsls	r3, r3, #3
    34e6:	4413      	add	r3, r2
    34e8:	3304      	adds	r3, #4
    34ea:	2202      	movs	r2, #2
    34ec:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    34ee:	f240 62d8 	movw	r2, #1752	; 0x6d8
    34f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    34f6:	68f9      	ldr	r1, [r7, #12]
    34f8:	460b      	mov	r3, r1
    34fa:	00db      	lsls	r3, r3, #3
    34fc:	1a5b      	subs	r3, r3, r1
    34fe:	00db      	lsls	r3, r3, #3
    3500:	4413      	add	r3, r2
    3502:	3308      	adds	r3, #8
    3504:	2201      	movs	r2, #1
    3506:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    3508:	f240 62d8 	movw	r2, #1752	; 0x6d8
    350c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3510:	68f9      	ldr	r1, [r7, #12]
    3512:	460b      	mov	r3, r1
    3514:	00db      	lsls	r3, r3, #3
    3516:	1a5b      	subs	r3, r3, r1
    3518:	00db      	lsls	r3, r3, #3
    351a:	4413      	add	r3, r2
    351c:	330c      	adds	r3, #12
    351e:	2200      	movs	r2, #0
    3520:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    3522:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3526:	f2c2 0200 	movt	r2, #8192	; 0x2000
    352a:	68f9      	ldr	r1, [r7, #12]
    352c:	460b      	mov	r3, r1
    352e:	00db      	lsls	r3, r3, #3
    3530:	1a5b      	subs	r3, r3, r1
    3532:	00db      	lsls	r3, r3, #3
    3534:	4413      	add	r3, r2
    3536:	3310      	adds	r3, #16
    3538:	2200      	movs	r2, #0
    353a:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    353c:	f240 03c4 	movw	r3, #196	; 0xc4
    3540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3544:	68fa      	ldr	r2, [r7, #12]
    3546:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    354a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    354e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3552:	68f9      	ldr	r1, [r7, #12]
    3554:	460b      	mov	r3, r1
    3556:	00db      	lsls	r3, r3, #3
    3558:	1a5b      	subs	r3, r3, r1
    355a:	00db      	lsls	r3, r3, #3
    355c:	4413      	add	r3, r2
    355e:	3324      	adds	r3, #36	; 0x24
    3560:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    3562:	f240 4374 	movw	r3, #1140	; 0x474
    3566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356a:	68fa      	ldr	r2, [r7, #12]
    356c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3570:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3574:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3578:	68f9      	ldr	r1, [r7, #12]
    357a:	460b      	mov	r3, r1
    357c:	00db      	lsls	r3, r3, #3
    357e:	1a5b      	subs	r3, r3, r1
    3580:	00db      	lsls	r3, r3, #3
    3582:	4413      	add	r3, r2
    3584:	3328      	adds	r3, #40	; 0x28
    3586:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    3588:	f240 1380 	movw	r3, #384	; 0x180
    358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3590:	68fa      	ldr	r2, [r7, #12]
    3592:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3596:	f240 62d8 	movw	r2, #1752	; 0x6d8
    359a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    359e:	68f9      	ldr	r1, [r7, #12]
    35a0:	460b      	mov	r3, r1
    35a2:	00db      	lsls	r3, r3, #3
    35a4:	1a5b      	subs	r3, r3, r1
    35a6:	00db      	lsls	r3, r3, #3
    35a8:	4413      	add	r3, r2
    35aa:	3330      	adds	r3, #48	; 0x30
    35ac:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    35ae:	f240 1380 	movw	r3, #384	; 0x180
    35b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35b6:	68fa      	ldr	r2, [r7, #12]
    35b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    35bc:	f240 0328 	movw	r3, #40	; 0x28
    35c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    35c8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    35cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35d0:	68f9      	ldr	r1, [r7, #12]
    35d2:	460b      	mov	r3, r1
    35d4:	00db      	lsls	r3, r3, #3
    35d6:	1a5b      	subs	r3, r3, r1
    35d8:	00db      	lsls	r3, r3, #3
    35da:	4413      	add	r3, r2
    35dc:	332c      	adds	r3, #44	; 0x2c
    35de:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    35e0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    35e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35e8:	68f9      	ldr	r1, [r7, #12]
    35ea:	460b      	mov	r3, r1
    35ec:	00db      	lsls	r3, r3, #3
    35ee:	1a5b      	subs	r3, r3, r1
    35f0:	00db      	lsls	r3, r3, #3
    35f2:	4413      	add	r3, r2
    35f4:	3334      	adds	r3, #52	; 0x34
    35f6:	2200      	movs	r2, #0
    35f8:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    35fa:	68fb      	ldr	r3, [r7, #12]
    35fc:	3301      	adds	r3, #1
    35fe:	60fb      	str	r3, [r7, #12]
    3600:	68fb      	ldr	r3, [r7, #12]
    3602:	2b2e      	cmp	r3, #46	; 0x2e
    3604:	f77f af5a 	ble.w	34bc <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3608:	2300      	movs	r3, #0
    360a:	60fb      	str	r3, [r7, #12]
    360c:	e028      	b.n	3660 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    360e:	f240 035c 	movw	r3, #92	; 0x5c
    3612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3616:	68fa      	ldr	r2, [r7, #12]
    3618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    361c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3620:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3624:	460b      	mov	r3, r1
    3626:	00db      	lsls	r3, r3, #3
    3628:	1a5b      	subs	r3, r3, r1
    362a:	00db      	lsls	r3, r3, #3
    362c:	4413      	add	r3, r2
    362e:	3304      	adds	r3, #4
    3630:	2201      	movs	r2, #1
    3632:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    3634:	f240 0390 	movw	r3, #144	; 0x90
    3638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    363c:	68fa      	ldr	r2, [r7, #12]
    363e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3642:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3646:	f2c2 0200 	movt	r2, #8192	; 0x2000
    364a:	460b      	mov	r3, r1
    364c:	00db      	lsls	r3, r3, #3
    364e:	1a5b      	subs	r3, r3, r1
    3650:	00db      	lsls	r3, r3, #3
    3652:	4413      	add	r3, r2
    3654:	3304      	adds	r3, #4
    3656:	2203      	movs	r2, #3
    3658:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    365a:	68fb      	ldr	r3, [r7, #12]
    365c:	3301      	adds	r3, #1
    365e:	60fb      	str	r3, [r7, #12]
    3660:	68fb      	ldr	r3, [r7, #12]
    3662:	2b0c      	cmp	r3, #12
    3664:	ddd3      	ble.n	360e <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3666:	2300      	movs	r3, #0
    3668:	60fb      	str	r3, [r7, #12]
    366a:	e084      	b.n	3776 <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    366c:	f240 223c 	movw	r2, #572	; 0x23c
    3670:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3674:	68f9      	ldr	r1, [r7, #12]
    3676:	460b      	mov	r3, r1
    3678:	005b      	lsls	r3, r3, #1
    367a:	440b      	add	r3, r1
    367c:	009b      	lsls	r3, r3, #2
    367e:	4413      	add	r3, r2
    3680:	3304      	adds	r3, #4
    3682:	681b      	ldr	r3, [r3, #0]
    3684:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    3686:	f240 223c 	movw	r2, #572	; 0x23c
    368a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    368e:	68f9      	ldr	r1, [r7, #12]
    3690:	460b      	mov	r3, r1
    3692:	005b      	lsls	r3, r3, #1
    3694:	440b      	add	r3, r1
    3696:	009b      	lsls	r3, r3, #2
    3698:	4413      	add	r3, r2
    369a:	3308      	adds	r3, #8
    369c:	681b      	ldr	r3, [r3, #0]
    369e:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    36a0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    36a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36a8:	68b9      	ldr	r1, [r7, #8]
    36aa:	460b      	mov	r3, r1
    36ac:	00db      	lsls	r3, r3, #3
    36ae:	1a5b      	subs	r3, r3, r1
    36b0:	00db      	lsls	r3, r3, #3
    36b2:	4413      	add	r3, r2
    36b4:	3310      	adds	r3, #16
    36b6:	6818      	ldr	r0, [r3, #0]
    36b8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    36bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36c0:	68b9      	ldr	r1, [r7, #8]
    36c2:	460b      	mov	r3, r1
    36c4:	00db      	lsls	r3, r3, #3
    36c6:	1a5b      	subs	r3, r3, r1
    36c8:	005b      	lsls	r3, r3, #1
    36ca:	4403      	add	r3, r0
    36cc:	3306      	adds	r3, #6
    36ce:	009b      	lsls	r3, r3, #2
    36d0:	4413      	add	r3, r2
    36d2:	687a      	ldr	r2, [r7, #4]
    36d4:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    36d6:	f240 62d8 	movw	r2, #1752	; 0x6d8
    36da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36de:	68b9      	ldr	r1, [r7, #8]
    36e0:	460b      	mov	r3, r1
    36e2:	00db      	lsls	r3, r3, #3
    36e4:	1a5b      	subs	r3, r3, r1
    36e6:	00db      	lsls	r3, r3, #3
    36e8:	4413      	add	r3, r2
    36ea:	3310      	adds	r3, #16
    36ec:	681b      	ldr	r3, [r3, #0]
    36ee:	1c58      	adds	r0, r3, #1
    36f0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    36f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36f8:	68b9      	ldr	r1, [r7, #8]
    36fa:	460b      	mov	r3, r1
    36fc:	00db      	lsls	r3, r3, #3
    36fe:	1a5b      	subs	r3, r3, r1
    3700:	00db      	lsls	r3, r3, #3
    3702:	4413      	add	r3, r2
    3704:	3310      	adds	r3, #16
    3706:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    3708:	f240 62d8 	movw	r2, #1752	; 0x6d8
    370c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3710:	6879      	ldr	r1, [r7, #4]
    3712:	460b      	mov	r3, r1
    3714:	00db      	lsls	r3, r3, #3
    3716:	1a5b      	subs	r3, r3, r1
    3718:	00db      	lsls	r3, r3, #3
    371a:	4413      	add	r3, r2
    371c:	330c      	adds	r3, #12
    371e:	6818      	ldr	r0, [r3, #0]
    3720:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3724:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3728:	6879      	ldr	r1, [r7, #4]
    372a:	460b      	mov	r3, r1
    372c:	00db      	lsls	r3, r3, #3
    372e:	1a5b      	subs	r3, r3, r1
    3730:	005b      	lsls	r3, r3, #1
    3732:	4403      	add	r3, r0
    3734:	3304      	adds	r3, #4
    3736:	009b      	lsls	r3, r3, #2
    3738:	4413      	add	r3, r2
    373a:	68ba      	ldr	r2, [r7, #8]
    373c:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    373e:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3742:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3746:	6879      	ldr	r1, [r7, #4]
    3748:	460b      	mov	r3, r1
    374a:	00db      	lsls	r3, r3, #3
    374c:	1a5b      	subs	r3, r3, r1
    374e:	00db      	lsls	r3, r3, #3
    3750:	4413      	add	r3, r2
    3752:	330c      	adds	r3, #12
    3754:	681b      	ldr	r3, [r3, #0]
    3756:	1c58      	adds	r0, r3, #1
    3758:	f240 62d8 	movw	r2, #1752	; 0x6d8
    375c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3760:	6879      	ldr	r1, [r7, #4]
    3762:	460b      	mov	r3, r1
    3764:	00db      	lsls	r3, r3, #3
    3766:	1a5b      	subs	r3, r3, r1
    3768:	00db      	lsls	r3, r3, #3
    376a:	4413      	add	r3, r2
    376c:	330c      	adds	r3, #12
    376e:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3770:	68fb      	ldr	r3, [r7, #12]
    3772:	3301      	adds	r3, #1
    3774:	60fb      	str	r3, [r7, #12]
    3776:	f240 233c 	movw	r3, #572	; 0x23c
    377a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    377e:	681a      	ldr	r2, [r3, #0]
    3780:	68fb      	ldr	r3, [r7, #12]
    3782:	429a      	cmp	r2, r3
    3784:	f73f af72 	bgt.w	366c <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    3788:	3714      	adds	r7, #20
    378a:	46bd      	mov	sp, r7
    378c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3790:	4770      	bx	lr
    3792:	bf00      	nop

00003794 <vSensor>:

void vSensor( void * pvParameter )
{
    3794:	b580      	push	{r7, lr}
    3796:	b092      	sub	sp, #72	; 0x48
    3798:	af02      	add	r7, sp, #8
    379a:	60f8      	str	r0, [r7, #12]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    379c:	f241 1320 	movw	r3, #4384	; 0x1120
    37a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37a4:	685b      	ldr	r3, [r3, #4]
    37a6:	4618      	mov	r0, r3
    37a8:	2100      	movs	r1, #0
    37aa:	f04f 32ff 	mov.w	r2, #4294967295
    37ae:	2300      	movs	r3, #0
    37b0:	f000 feaa 	bl	4508 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    37b4:	e071      	b.n	389a <vSensor+0x106>
        {
            if(boolFlag == 0)
    37b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    37b8:	2b00      	cmp	r3, #0
    37ba:	d100      	bne.n	37be <vSensor+0x2a>
                continue;
    37bc:	e06d      	b.n	389a <vSensor+0x106>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    37be:	f7ff fddf 	bl	3380 <pxEventGenericReceive>
    37c2:	63b8      	str	r0, [r7, #56]	; 0x38
            xMyFlag = xEventGetpxDestination( pxEvent );
    37c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    37c6:	f7ff f8e5 	bl	2994 <xEventGetpxDestination>
    37ca:	6378      	str	r0, [r7, #52]	; 0x34
            xMyData = xEventGetxData( pxEvent );
    37cc:	463b      	mov	r3, r7
    37ce:	4618      	mov	r0, r3
    37d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    37d2:	f7ff f8fd 	bl	29d0 <xEventGetxData>
    37d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
    37da:	463a      	mov	r2, r7
    37dc:	e892 0003 	ldmia.w	r2, {r0, r1}
    37e0:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    37e4:	f107 0314 	add.w	r3, r7, #20
    37e8:	4618      	mov	r0, r3
    37ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    37ec:	f7ff f8de 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    37f0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    37f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    37fa:	460b      	mov	r3, r1
    37fc:	00db      	lsls	r3, r3, #3
    37fe:	1a5b      	subs	r3, r3, r1
    3800:	00db      	lsls	r3, r3, #3
    3802:	4413      	add	r3, r2
    3804:	332c      	adds	r3, #44	; 0x2c
    3806:	681b      	ldr	r3, [r3, #0]
    3808:	633b      	str	r3, [r7, #48]	; 0x30
            xContexts[xMyFlag].xCount ++;
    380a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    380e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3812:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3814:	460b      	mov	r3, r1
    3816:	00db      	lsls	r3, r3, #3
    3818:	1a5b      	subs	r3, r3, r1
    381a:	00db      	lsls	r3, r3, #3
    381c:	4413      	add	r3, r2
    381e:	3308      	adds	r3, #8
    3820:	681b      	ldr	r3, [r3, #0]
    3822:	1c58      	adds	r0, r3, #1
    3824:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3828:	f2c2 0200 	movt	r2, #8192	; 0x2000
    382c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    382e:	460b      	mov	r3, r1
    3830:	00db      	lsls	r3, r3, #3
    3832:	1a5b      	subs	r3, r3, r1
    3834:	00db      	lsls	r3, r3, #3
    3836:	4413      	add	r3, r2
    3838:	3308      	adds	r3, #8
    383a:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag.xTimestamp + INPUT;   
    383c:	69bb      	ldr	r3, [r7, #24]
    383e:	3303      	adds	r3, #3
    3840:	62fb      	str	r3, [r7, #44]	; 0x2c
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    3842:	f240 635c 	movw	r3, #1628	; 0x65c
    3846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    384a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    384c:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    384e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3850:	f013 feba 	bl	175c8 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3854:	f001 fd0c 	bl	5270 <xTaskGetTickCount>
    3858:	4603      	mov	r3, r0
    385a:	4618      	mov	r0, r3
    385c:	f013 feb4 	bl	175c8 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    3860:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3864:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3868:	6b79      	ldr	r1, [r7, #52]	; 0x34
    386a:	460b      	mov	r3, r1
    386c:	00db      	lsls	r3, r3, #3
    386e:	1a5b      	subs	r3, r3, r1
    3870:	00db      	lsls	r3, r3, #3
    3872:	4413      	add	r3, r2
    3874:	3328      	adds	r3, #40	; 0x28
    3876:	681b      	ldr	r3, [r3, #0]
    3878:	f107 0224 	add.w	r2, r7, #36	; 0x24
    387c:	4610      	mov	r0, r2
    387e:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
    3880:	466b      	mov	r3, sp
    3882:	f107 0224 	add.w	r2, r7, #36	; 0x24
    3886:	e892 0003 	ldmia.w	r2, {r0, r1}
    388a:	e883 0003 	stmia.w	r3, {r0, r1}
    388e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3890:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3896:	f7ff fd91 	bl	33bc <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    389a:	f7ff f835 	bl	2908 <xIsERLNull>
    389e:	63f8      	str	r0, [r7, #60]	; 0x3c
    38a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38a2:	f1b3 3fff 	cmp.w	r3, #4294967295
    38a6:	d186      	bne.n	37b6 <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    38a8:	f241 1320 	movw	r3, #4384	; 0x1120
    38ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38b0:	681b      	ldr	r3, [r3, #0]
    38b2:	4618      	mov	r0, r3
    38b4:	2100      	movs	r1, #0
    38b6:	2200      	movs	r2, #0
    38b8:	2300      	movs	r3, #0
    38ba:	f000 fd5f 	bl	437c <xQueueGenericSend>
    }
    38be:	e76d      	b.n	379c <vSensor+0x8>

000038c0 <vServant>:
}

void vServant( void * pvParameter )
{
    38c0:	b580      	push	{r7, lr}
    38c2:	b092      	sub	sp, #72	; 0x48
    38c4:	af02      	add	r7, sp, #8
    38c6:	60f8      	str	r0, [r7, #12]
    struct eventData xMyData;
    struct tag xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    38c8:	f241 1320 	movw	r3, #4384	; 0x1120
    38cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38d0:	689b      	ldr	r3, [r3, #8]
    38d2:	4618      	mov	r0, r3
    38d4:	2100      	movs	r1, #0
    38d6:	f04f 32ff 	mov.w	r2, #4294967295
    38da:	2300      	movs	r3, #0
    38dc:	f000 fe14 	bl	4508 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    38e0:	e0a8      	b.n	3a34 <vServant+0x174>
        {
            if(boolFlag == 0)
    38e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    38e4:	2b00      	cmp	r3, #0
    38e6:	d100      	bne.n	38ea <vServant+0x2a>
                continue;
    38e8:	e0a4      	b.n	3a34 <vServant+0x174>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    38ea:	f7ff fd49 	bl	3380 <pxEventGenericReceive>
    38ee:	6378      	str	r0, [r7, #52]	; 0x34
            xMyFlag = xEventGetpxDestination( pxEvent );
    38f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
    38f2:	f7ff f84f 	bl	2994 <xEventGetpxDestination>
    38f6:	6338      	str	r0, [r7, #48]	; 0x30
            xMyData = xEventGetxData( pxEvent );
    38f8:	463b      	mov	r3, r7
    38fa:	4618      	mov	r0, r3
    38fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
    38fe:	f7ff f867 	bl	29d0 <xEventGetxData>
    3902:	f107 0320 	add.w	r3, r7, #32
    3906:	463a      	mov	r2, r7
    3908:	e892 0003 	ldmia.w	r2, {r0, r1}
    390c:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    3910:	f107 0310 	add.w	r3, r7, #16
    3914:	4618      	mov	r0, r3
    3916:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3918:	f7ff f848 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    391c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3920:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3924:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3926:	460b      	mov	r3, r1
    3928:	00db      	lsls	r3, r3, #3
    392a:	1a5b      	subs	r3, r3, r1
    392c:	00db      	lsls	r3, r3, #3
    392e:	4413      	add	r3, r2
    3930:	332c      	adds	r3, #44	; 0x2c
    3932:	681b      	ldr	r3, [r3, #0]
    3934:	62fb      	str	r3, [r7, #44]	; 0x2c
            xContexts[xMyFlag].xCount ++;
    3936:	f240 62d8 	movw	r2, #1752	; 0x6d8
    393a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    393e:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3940:	460b      	mov	r3, r1
    3942:	00db      	lsls	r3, r3, #3
    3944:	1a5b      	subs	r3, r3, r1
    3946:	00db      	lsls	r3, r3, #3
    3948:	4413      	add	r3, r2
    394a:	3308      	adds	r3, #8
    394c:	681b      	ldr	r3, [r3, #0]
    394e:	1c58      	adds	r0, r3, #1
    3950:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3954:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3958:	6b39      	ldr	r1, [r7, #48]	; 0x30
    395a:	460b      	mov	r3, r1
    395c:	00db      	lsls	r3, r3, #3
    395e:	1a5b      	subs	r3, r3, r1
    3960:	00db      	lsls	r3, r3, #3
    3962:	4413      	add	r3, r2
    3964:	3308      	adds	r3, #8
    3966:	6018      	str	r0, [r3, #0]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    3968:	f240 62d8 	movw	r2, #1752	; 0x6d8
    396c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3970:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3972:	460b      	mov	r3, r1
    3974:	00db      	lsls	r3, r3, #3
    3976:	1a5b      	subs	r3, r3, r1
    3978:	00db      	lsls	r3, r3, #3
    397a:	4413      	add	r3, r2
    397c:	331c      	adds	r3, #28
    397e:	681b      	ldr	r3, [r3, #0]
    3980:	62bb      	str	r3, [r7, #40]	; 0x28
            switch(xContexts[pxDestination].xType)
    3982:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3986:	f2c2 0200 	movt	r2, #8192	; 0x2000
    398a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    398c:	460b      	mov	r3, r1
    398e:	00db      	lsls	r3, r3, #3
    3990:	1a5b      	subs	r3, r3, r1
    3992:	00db      	lsls	r3, r3, #3
    3994:	4413      	add	r3, r2
    3996:	3304      	adds	r3, #4
    3998:	681b      	ldr	r3, [r3, #0]
    399a:	2b02      	cmp	r3, #2
    399c:	d002      	beq.n	39a4 <vServant+0xe4>
    399e:	2b03      	cmp	r3, #3
    39a0:	d010      	beq.n	39c4 <vServant+0x104>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
                    break;
                default:
                    break;
    39a2:	e021      	b.n	39e8 <vServant+0x128>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag.xTimestamp + xContexts[xMyFlag].xLet;
    39a4:	6978      	ldr	r0, [r7, #20]
    39a6:	f240 62d8 	movw	r2, #1752	; 0x6d8
    39aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
    39b0:	460b      	mov	r3, r1
    39b2:	00db      	lsls	r3, r3, #3
    39b4:	1a5b      	subs	r3, r3, r1
    39b6:	00db      	lsls	r3, r3, #3
    39b8:	4413      	add	r3, r2
    39ba:	3324      	adds	r3, #36	; 0x24
    39bc:	681b      	ldr	r3, [r3, #0]
    39be:	4403      	add	r3, r0
    39c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
    39c2:	e011      	b.n	39e8 <vServant+0x128>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
    39c4:	f240 62d8 	movw	r2, #1752	; 0x6d8
    39c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
    39ce:	460b      	mov	r3, r1
    39d0:	00db      	lsls	r3, r3, #3
    39d2:	1a5b      	subs	r3, r3, r1
    39d4:	00db      	lsls	r3, r3, #3
    39d6:	4413      	add	r3, r2
    39d8:	3308      	adds	r3, #8
    39da:	681b      	ldr	r3, [r3, #0]
    39dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    39de:	fb02 f303 	mul.w	r3, r2, r3
    39e2:	3b03      	subs	r3, #3
    39e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
    39e6:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    39e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
    39ea:	f013 fded 	bl	175c8 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    39ee:	f001 fc3f 	bl	5270 <xTaskGetTickCount>
    39f2:	4603      	mov	r3, r0
    39f4:	4618      	mov	r0, r3
    39f6:	f013 fde7 	bl	175c8 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    39fa:	f240 62d8 	movw	r2, #1752	; 0x6d8
    39fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3a04:	460b      	mov	r3, r1
    3a06:	00db      	lsls	r3, r3, #3
    3a08:	1a5b      	subs	r3, r3, r1
    3a0a:	00db      	lsls	r3, r3, #3
    3a0c:	4413      	add	r3, r2
    3a0e:	3328      	adds	r3, #40	; 0x28
    3a10:	681b      	ldr	r3, [r3, #0]
    3a12:	f107 0220 	add.w	r2, r7, #32
    3a16:	4610      	mov	r0, r2
    3a18:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
    3a1a:	466b      	mov	r3, sp
    3a1c:	f107 0220 	add.w	r2, r7, #32
    3a20:	e892 0003 	ldmia.w	r2, {r0, r1}
    3a24:	e883 0003 	stmia.w	r3, {r0, r1}
    3a28:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3a2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a30:	f7ff fcc4 	bl	33bc <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3a34:	f7fe ff68 	bl	2908 <xIsERLNull>
    3a38:	63b8      	str	r0, [r7, #56]	; 0x38
    3a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3a40:	f47f af4f 	bne.w	38e2 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3a44:	f241 1320 	movw	r3, #4384	; 0x1120
    3a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a4c:	681b      	ldr	r3, [r3, #0]
    3a4e:	4618      	mov	r0, r3
    3a50:	2100      	movs	r1, #0
    3a52:	2200      	movs	r2, #0
    3a54:	2300      	movs	r3, #0
    3a56:	f000 fc91 	bl	437c <xQueueGenericSend>
    }
    3a5a:	e735      	b.n	38c8 <vServant+0x8>

00003a5c <vActuator>:

}

void vActuator( void * pvParameter )
{
    3a5c:	b580      	push	{r7, lr}
    3a5e:	b092      	sub	sp, #72	; 0x48
    3a60:	af02      	add	r7, sp, #8
    3a62:	60f8      	str	r0, [r7, #12]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3a64:	f241 1320 	movw	r3, #4384	; 0x1120
    3a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a6c:	68db      	ldr	r3, [r3, #12]
    3a6e:	4618      	mov	r0, r3
    3a70:	2100      	movs	r1, #0
    3a72:	f04f 32ff 	mov.w	r2, #4294967295
    3a76:	2300      	movs	r3, #0
    3a78:	f000 fd46 	bl	4508 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3a7c:	e06b      	b.n	3b56 <vActuator+0xfa>
        {
            if(boolFlag == 0)
    3a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a80:	2b00      	cmp	r3, #0
    3a82:	d100      	bne.n	3a86 <vActuator+0x2a>
                continue;
    3a84:	e067      	b.n	3b56 <vActuator+0xfa>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3a86:	f7ff fc7b 	bl	3380 <pxEventGenericReceive>
    3a8a:	63b8      	str	r0, [r7, #56]	; 0x38
            xMyFlag = xEventGetpxDestination( pxEvent );
    3a8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3a8e:	f7fe ff81 	bl	2994 <xEventGetpxDestination>
    3a92:	6378      	str	r0, [r7, #52]	; 0x34
            xMyData = xEventGetxData( pxEvent );
    3a94:	463b      	mov	r3, r7
    3a96:	4618      	mov	r0, r3
    3a98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3a9a:	f7fe ff99 	bl	29d0 <xEventGetxData>
    3a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
    3aa2:	463a      	mov	r2, r7
    3aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
    3aa8:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    3aac:	f107 0314 	add.w	r3, r7, #20
    3ab0:	4618      	mov	r0, r3
    3ab2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3ab4:	f7fe ff7a 	bl	29ac <xEventGetxTag>
            xPeriod = xContexts[xMyFlag].xPeriod;
    3ab8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3abc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ac0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3ac2:	460b      	mov	r3, r1
    3ac4:	00db      	lsls	r3, r3, #3
    3ac6:	1a5b      	subs	r3, r3, r1
    3ac8:	00db      	lsls	r3, r3, #3
    3aca:	4413      	add	r3, r2
    3acc:	332c      	adds	r3, #44	; 0x2c
    3ace:	681b      	ldr	r3, [r3, #0]
    3ad0:	633b      	str	r3, [r7, #48]	; 0x30
            xContexts[xMyFlag].xCount ++;
    3ad2:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3ad6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ada:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3adc:	460b      	mov	r3, r1
    3ade:	00db      	lsls	r3, r3, #3
    3ae0:	1a5b      	subs	r3, r3, r1
    3ae2:	00db      	lsls	r3, r3, #3
    3ae4:	4413      	add	r3, r2
    3ae6:	3308      	adds	r3, #8
    3ae8:	681b      	ldr	r3, [r3, #0]
    3aea:	1c58      	adds	r0, r3, #1
    3aec:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3af0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3af4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3af6:	460b      	mov	r3, r1
    3af8:	00db      	lsls	r3, r3, #3
    3afa:	1a5b      	subs	r3, r3, r1
    3afc:	00db      	lsls	r3, r3, #3
    3afe:	4413      	add	r3, r2
    3b00:	3308      	adds	r3, #8
    3b02:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag.xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3b04:	69bb      	ldr	r3, [r7, #24]
    3b06:	3303      	adds	r3, #3
    3b08:	62fb      	str	r3, [r7, #44]	; 0x2c
            vPrintNumber(xMyFlag);
    3b0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3b0c:	f013 fd5c 	bl	175c8 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3b10:	f001 fbae 	bl	5270 <xTaskGetTickCount>
    3b14:	4603      	mov	r3, r0
    3b16:	4618      	mov	r0, r3
    3b18:	f013 fd56 	bl	175c8 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    3b1c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3b20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b24:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3b26:	460b      	mov	r3, r1
    3b28:	00db      	lsls	r3, r3, #3
    3b2a:	1a5b      	subs	r3, r3, r1
    3b2c:	00db      	lsls	r3, r3, #3
    3b2e:	4413      	add	r3, r2
    3b30:	3328      	adds	r3, #40	; 0x28
    3b32:	681b      	ldr	r3, [r3, #0]
    3b34:	f107 0224 	add.w	r2, r7, #36	; 0x24
    3b38:	4610      	mov	r0, r2
    3b3a:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
    3b3c:	466b      	mov	r3, sp
    3b3e:	f107 0224 	add.w	r2, r7, #36	; 0x24
    3b42:	e892 0003 	ldmia.w	r2, {r0, r1}
    3b46:	e883 0003 	stmia.w	r3, {r0, r1}
    3b4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3b4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b52:	f7ff fc33 	bl	33bc <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3b56:	f7fe fed7 	bl	2908 <xIsERLNull>
    3b5a:	63f8      	str	r0, [r7, #60]	; 0x3c
    3b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b62:	d18c      	bne.n	3a7e <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3b64:	f241 1320 	movw	r3, #4384	; 0x1120
    3b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b6c:	681b      	ldr	r3, [r3, #0]
    3b6e:	4618      	mov	r0, r3
    3b70:	2100      	movs	r1, #0
    3b72:	2200      	movs	r2, #0
    3b74:	2300      	movs	r3, #0
    3b76:	f000 fc01 	bl	437c <xQueueGenericSend>
    }
    3b7a:	e773      	b.n	3a64 <vActuator+0x8>

00003b7c <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3b7c:	b580      	push	{r7, lr}
    3b7e:	b084      	sub	sp, #16
    3b80:	af00      	add	r7, sp, #0
    3b82:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3b84:	f241 1320 	movw	r3, #4384	; 0x1120
    3b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b8c:	681b      	ldr	r3, [r3, #0]
    3b8e:	4618      	mov	r0, r3
    3b90:	2100      	movs	r1, #0
    3b92:	f04f 32ff 	mov.w	r2, #4294967295
    3b96:	2300      	movs	r3, #0
    3b98:	f000 fcb6 	bl	4508 <xQueueGenericReceive>
        vPrintString("Actuator\n\r");
    3b9c:	f648 2020 	movw	r0, #35360	; 0x8a20
    3ba0:	f2c0 0001 	movt	r0, #1
    3ba4:	f013 fcf6 	bl	17594 <vPrintString>

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventScatter();
    3ba8:	f7ff f8d4 	bl	2d54 <vEventGenericScatter>

        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3bac:	f7ff f9b0 	bl	2f10 <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3bb0:	f7ff fb60 	bl	3274 <xEventGenericSerialize>
    3bb4:	60f8      	str	r0, [r7, #12]

        switch(xContexts[pxDestination].xType)
    3bb6:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3bba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bbe:	68f9      	ldr	r1, [r7, #12]
    3bc0:	460b      	mov	r3, r1
    3bc2:	00db      	lsls	r3, r3, #3
    3bc4:	1a5b      	subs	r3, r3, r1
    3bc6:	00db      	lsls	r3, r3, #3
    3bc8:	4413      	add	r3, r2
    3bca:	3304      	adds	r3, #4
    3bcc:	681b      	ldr	r3, [r3, #0]
    3bce:	2b02      	cmp	r3, #2
    3bd0:	d010      	beq.n	3bf4 <vR_Servant+0x78>
    3bd2:	2b03      	cmp	r3, #3
    3bd4:	d01a      	beq.n	3c0c <vR_Servant+0x90>
    3bd6:	2b01      	cmp	r3, #1
    3bd8:	d000      	beq.n	3bdc <vR_Servant+0x60>
                break;
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
                break;
            default:
                break;
    3bda:	e023      	b.n	3c24 <vR_Servant+0xa8>
        pxDestination = xEventSerialize(); 

        switch(xContexts[pxDestination].xType)
        {
            case 1:
                xSemaphoreGive( xBinarySemaphore[1] );
    3bdc:	f241 1320 	movw	r3, #4384	; 0x1120
    3be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3be4:	685b      	ldr	r3, [r3, #4]
    3be6:	4618      	mov	r0, r3
    3be8:	2100      	movs	r1, #0
    3bea:	2200      	movs	r2, #0
    3bec:	2300      	movs	r3, #0
    3bee:	f000 fbc5 	bl	437c <xQueueGenericSend>
                break;
    3bf2:	e017      	b.n	3c24 <vR_Servant+0xa8>
            case 2:
                xSemaphoreGive( xBinarySemaphore[2] );
    3bf4:	f241 1320 	movw	r3, #4384	; 0x1120
    3bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bfc:	689b      	ldr	r3, [r3, #8]
    3bfe:	4618      	mov	r0, r3
    3c00:	2100      	movs	r1, #0
    3c02:	2200      	movs	r2, #0
    3c04:	2300      	movs	r3, #0
    3c06:	f000 fbb9 	bl	437c <xQueueGenericSend>
                break;
    3c0a:	e00b      	b.n	3c24 <vR_Servant+0xa8>
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
    3c0c:	f241 1320 	movw	r3, #4384	; 0x1120
    3c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c14:	68db      	ldr	r3, [r3, #12]
    3c16:	4618      	mov	r0, r3
    3c18:	2100      	movs	r1, #0
    3c1a:	2200      	movs	r2, #0
    3c1c:	2300      	movs	r3, #0
    3c1e:	f000 fbad 	bl	437c <xQueueGenericSend>
                break;
    3c22:	bf00      	nop
            default:
                break;
                // no event available 
        }
    }
    3c24:	e7ae      	b.n	3b84 <vR_Servant+0x8>
    3c26:	bf00      	nop

00003c28 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    3c28:	b480      	push	{r7}
    3c2a:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    3c2c:	f242 032f 	movw	r3, #8239	; 0x202f
    3c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c34:	2200      	movs	r2, #0
    3c36:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    3c38:	f242 032e 	movw	r3, #8238	; 0x202e
    3c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c40:	2201      	movs	r2, #1
    3c42:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    3c44:	f242 0325 	movw	r3, #8229	; 0x2025
    3c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c4c:	2207      	movs	r2, #7
    3c4e:	701a      	strb	r2, [r3, #0]
}
    3c50:	46bd      	mov	sp, r7
    3c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c56:	4770      	bx	lr

00003c58 <PapabenchInit>:
extern void ir_init();
extern void estimator_init();
extern void fbw_init();

void PapabenchInit()
{
    3c58:	b580      	push	{r7, lr}
    3c5a:	af00      	add	r7, sp, #0
    timer_init();
    3c5c:	f7ff ffe4 	bl	3c28 <timer_init>
    modem_init();
    3c60:	f00d f9a6 	bl	10fb0 <modem_init>
    adc_init();
    3c64:	f00d fcf0 	bl	11648 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(ADC_CHANNEL_BAT, &buf_bat);
#endif
    spi_init();
    3c68:	f00d fc62 	bl	11530 <spi_init>
    link_fbw_init();
    3c6c:	f00d fabe 	bl	111ec <link_fbw_init>
    gps_init();
    3c70:	f00d fd9a 	bl	117a8 <gps_init>
    nav_init();
    3c74:	f011 f892 	bl	14d9c <nav_init>
    ir_init();
    3c78:	f00e f83e 	bl	11cf8 <ir_init>
    estimator_init();
    3c7c:	f011 fa74 	bl	15168 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    3c80:	bd80      	pop	{r7, pc}
    3c82:	bf00      	nop

00003c84 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3c84:	b480      	push	{r7}
    3c86:	b083      	sub	sp, #12
    3c88:	af00      	add	r7, sp, #0
    3c8a:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3c8c:	370c      	adds	r7, #12
    3c8e:	46bd      	mov	sp, r7
    3c90:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c94:	4770      	bx	lr
    3c96:	bf00      	nop

00003c98 <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3c98:	b580      	push	{r7, lr}
    3c9a:	b082      	sub	sp, #8
    3c9c:	af00      	add	r7, sp, #0
    3c9e:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3ca0:	f012 fa3e 	bl	16120 <last_radio_from_ppm>
}
    3ca4:	3708      	adds	r7, #8
    3ca6:	46bd      	mov	sp, r7
    3ca8:	bd80      	pop	{r7, pc}
    3caa:	bf00      	nop

00003cac <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3cac:	b480      	push	{r7}
    3cae:	b083      	sub	sp, #12
    3cb0:	af00      	add	r7, sp, #0
    3cb2:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3cb4:	370c      	adds	r7, #12
    3cb6:	46bd      	mov	sp, r7
    3cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cbc:	4770      	bx	lr
    3cbe:	bf00      	nop

00003cc0 <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3cc0:	b480      	push	{r7}
    3cc2:	b083      	sub	sp, #12
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	6078      	str	r0, [r7, #4]
}
    3cc8:	370c      	adds	r7, #12
    3cca:	46bd      	mov	sp, r7
    3ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cd0:	4770      	bx	lr
    3cd2:	bf00      	nop

00003cd4 <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3cd4:	b480      	push	{r7}
    3cd6:	b083      	sub	sp, #12
    3cd8:	af00      	add	r7, sp, #0
    3cda:	6078      	str	r0, [r7, #4]
}
    3cdc:	370c      	adds	r7, #12
    3cde:	46bd      	mov	sp, r7
    3ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ce4:	4770      	bx	lr
    3ce6:	bf00      	nop

00003ce8 <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3ce8:	b580      	push	{r7, lr}
    3cea:	b082      	sub	sp, #8
    3cec:	af00      	add	r7, sp, #0
    3cee:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3cf0:	f012 fdd0 	bl	16894 <to_autopilot_from_last_radio>
}
    3cf4:	3708      	adds	r7, #8
    3cf6:	46bd      	mov	sp, r7
    3cf8:	bd80      	pop	{r7, pc}
    3cfa:	bf00      	nop

00003cfc <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3cfc:	b580      	push	{r7, lr}
    3cfe:	b082      	sub	sp, #8
    3d00:	af00      	add	r7, sp, #0
    3d02:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3d04:	f012 fd04 	bl	16710 <spi_reset>
}
    3d08:	3708      	adds	r7, #8
    3d0a:	46bd      	mov	sp, r7
    3d0c:	bd80      	pop	{r7, pc}
    3d0e:	bf00      	nop

00003d10 <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3d10:	b480      	push	{r7}
    3d12:	b083      	sub	sp, #12
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
}
    3d18:	370c      	adds	r7, #12
    3d1a:	46bd      	mov	sp, r7
    3d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d20:	4770      	bx	lr
    3d22:	bf00      	nop

00003d24 <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3d24:	b480      	push	{r7}
    3d26:	b083      	sub	sp, #12
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
}
    3d2c:	370c      	adds	r7, #12
    3d2e:	46bd      	mov	sp, r7
    3d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d34:	4770      	bx	lr
    3d36:	bf00      	nop

00003d38 <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	b082      	sub	sp, #8
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3d40:	f012 ff4c 	bl	16bdc <check_mega128_values_task>
}
    3d44:	3708      	adds	r7, #8
    3d46:	46bd      	mov	sp, r7
    3d48:	bd80      	pop	{r7, pc}
    3d4a:	bf00      	nop

00003d4c <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3d4c:	b480      	push	{r7}
    3d4e:	b083      	sub	sp, #12
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
}
    3d54:	370c      	adds	r7, #12
    3d56:	46bd      	mov	sp, r7
    3d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d5c:	4770      	bx	lr
    3d5e:	bf00      	nop

00003d60 <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3d60:	b480      	push	{r7}
    3d62:	b083      	sub	sp, #12
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
}
    3d68:	370c      	adds	r7, #12
    3d6a:	46bd      	mov	sp, r7
    3d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d70:	4770      	bx	lr
    3d72:	bf00      	nop

00003d74 <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3d74:	b580      	push	{r7, lr}
    3d76:	b082      	sub	sp, #8
    3d78:	af00      	add	r7, sp, #0
    3d7a:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3d7c:	f013 f822 	bl	16dc4 <servo_transmit>
}
    3d80:	3708      	adds	r7, #8
    3d82:	46bd      	mov	sp, r7
    3d84:	bd80      	pop	{r7, pc}
    3d86:	bf00      	nop

00003d88 <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3d88:	b480      	push	{r7}
    3d8a:	b083      	sub	sp, #12
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
}
    3d90:	370c      	adds	r7, #12
    3d92:	46bd      	mov	sp, r7
    3d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d98:	4770      	bx	lr
    3d9a:	bf00      	nop

00003d9c <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3d9c:	b480      	push	{r7}
    3d9e:	b083      	sub	sp, #12
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
}
    3da4:	370c      	adds	r7, #12
    3da6:	46bd      	mov	sp, r7
    3da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dac:	4770      	bx	lr
    3dae:	bf00      	nop

00003db0 <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3db0:	b580      	push	{r7, lr}
    3db2:	b082      	sub	sp, #8
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3db8:	f012 feea 	bl	16b90 <check_failsafe_task>
}
    3dbc:	3708      	adds	r7, #8
    3dbe:	46bd      	mov	sp, r7
    3dc0:	bd80      	pop	{r7, pc}
    3dc2:	bf00      	nop

00003dc4 <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3dc4:	b480      	push	{r7}
    3dc6:	b083      	sub	sp, #12
    3dc8:	af00      	add	r7, sp, #0
    3dca:	6078      	str	r0, [r7, #4]
}
    3dcc:	370c      	adds	r7, #12
    3dce:	46bd      	mov	sp, r7
    3dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd4:	4770      	bx	lr
    3dd6:	bf00      	nop

00003dd8 <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3dd8:	b480      	push	{r7}
    3dda:	b083      	sub	sp, #12
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
}
    3de0:	370c      	adds	r7, #12
    3de2:	46bd      	mov	sp, r7
    3de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3de8:	4770      	bx	lr
    3dea:	bf00      	nop

00003dec <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3dec:	b580      	push	{r7, lr}
    3dee:	b082      	sub	sp, #8
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3df4:	f009 f91e 	bl	d034 <radio_control_task>
}
    3df8:	3708      	adds	r7, #8
    3dfa:	46bd      	mov	sp, r7
    3dfc:	bd80      	pop	{r7, pc}
    3dfe:	bf00      	nop

00003e00 <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3e00:	b580      	push	{r7, lr}
    3e02:	b082      	sub	sp, #8
    3e04:	af00      	add	r7, sp, #0
    3e06:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3e08:	f00d ffce 	bl	11da8 <ir_gain_calib>
}
    3e0c:	3708      	adds	r7, #8
    3e0e:	46bd      	mov	sp, r7
    3e10:	bd80      	pop	{r7, pc}
    3e12:	bf00      	nop

00003e14 <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3e14:	b480      	push	{r7}
    3e16:	b083      	sub	sp, #12
    3e18:	af00      	add	r7, sp, #0
    3e1a:	6078      	str	r0, [r7, #4]
}
    3e1c:	370c      	adds	r7, #12
    3e1e:	46bd      	mov	sp, r7
    3e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e24:	4770      	bx	lr
    3e26:	bf00      	nop

00003e28 <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3e28:	b480      	push	{r7}
    3e2a:	b083      	sub	sp, #12
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	6078      	str	r0, [r7, #4]
}
    3e30:	370c      	adds	r7, #12
    3e32:	46bd      	mov	sp, r7
    3e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop

00003e3c <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3e3c:	b580      	push	{r7, lr}
    3e3e:	b082      	sub	sp, #8
    3e40:	af00      	add	r7, sp, #0
    3e42:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3e44:	f00d ff72 	bl	11d2c <ir_update>
}
    3e48:	3708      	adds	r7, #8
    3e4a:	46bd      	mov	sp, r7
    3e4c:	bd80      	pop	{r7, pc}
    3e4e:	bf00      	nop

00003e50 <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b082      	sub	sp, #8
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3e58:	f011 f9f0 	bl	1523c <estimator_update_state_infrared>
}
    3e5c:	3708      	adds	r7, #8
    3e5e:	46bd      	mov	sp, r7
    3e60:	bd80      	pop	{r7, pc}
    3e62:	bf00      	nop

00003e64 <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3e64:	b580      	push	{r7, lr}
    3e66:	b082      	sub	sp, #8
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3e6c:	f00d ffcc 	bl	11e08 <roll_pitch_pid_run>
}
    3e70:	3708      	adds	r7, #8
    3e72:	46bd      	mov	sp, r7
    3e74:	bd80      	pop	{r7, pc}
    3e76:	bf00      	nop

00003e78 <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3e78:	b480      	push	{r7}
    3e7a:	b083      	sub	sp, #12
    3e7c:	af00      	add	r7, sp, #0
    3e7e:	6078      	str	r0, [r7, #4]
}
    3e80:	370c      	adds	r7, #12
    3e82:	46bd      	mov	sp, r7
    3e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e88:	4770      	bx	lr
    3e8a:	bf00      	nop

00003e8c <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3e8c:	b480      	push	{r7}
    3e8e:	b083      	sub	sp, #12
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
}
    3e94:	370c      	adds	r7, #12
    3e96:	46bd      	mov	sp, r7
    3e98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e9c:	4770      	bx	lr
    3e9e:	bf00      	nop

00003ea0 <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3ea0:	b580      	push	{r7, lr}
    3ea2:	b082      	sub	sp, #8
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3ea8:	f00d f9b2 	bl	11210 <link_fbw_send>
}
    3eac:	3708      	adds	r7, #8
    3eae:	46bd      	mov	sp, r7
    3eb0:	bd80      	pop	{r7, pc}
    3eb2:	bf00      	nop

00003eb4 <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3eb4:	b480      	push	{r7}
    3eb6:	b083      	sub	sp, #12
    3eb8:	af00      	add	r7, sp, #0
    3eba:	6078      	str	r0, [r7, #4]
    3ebc:	370c      	adds	r7, #12
    3ebe:	46bd      	mov	sp, r7
    3ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec4:	4770      	bx	lr
    3ec6:	bf00      	nop

00003ec8 <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    3ec8:	b480      	push	{r7}
    3eca:	b083      	sub	sp, #12
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
}
    3ed0:	370c      	adds	r7, #12
    3ed2:	46bd      	mov	sp, r7
    3ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ed8:	4770      	bx	lr
    3eda:	bf00      	nop

00003edc <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    3ee4:	f00d fc6c 	bl	117c0 <parse_gps_msg>
}
    3ee8:	3708      	adds	r7, #8
    3eea:	46bd      	mov	sp, r7
    3eec:	bd80      	pop	{r7, pc}
    3eee:	bf00      	nop

00003ef0 <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    3ef0:	b580      	push	{r7, lr}
    3ef2:	b082      	sub	sp, #8
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3ef8:	f00a fe8a 	bl	ec10 <send_gps_pos>
    send_radIR();
    3efc:	f00c f84e 	bl	ff9c <send_radIR>
    send_takeOff();
    3f00:	f00c fe46 	bl	10b90 <send_takeOff>
}
    3f04:	3708      	adds	r7, #8
    3f06:	46bd      	mov	sp, r7
    3f08:	bd80      	pop	{r7, pc}
    3f0a:	bf00      	nop

00003f0c <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    3f0c:	b480      	push	{r7}
    3f0e:	b083      	sub	sp, #12
    3f10:	af00      	add	r7, sp, #0
    3f12:	6078      	str	r0, [r7, #4]
    3f14:	370c      	adds	r7, #12
    3f16:	46bd      	mov	sp, r7
    3f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f1c:	4770      	bx	lr
    3f1e:	bf00      	nop

00003f20 <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    3f20:	b480      	push	{r7}
    3f22:	b083      	sub	sp, #12
    3f24:	af00      	add	r7, sp, #0
    3f26:	6078      	str	r0, [r7, #4]
}
    3f28:	370c      	adds	r7, #12
    3f2a:	46bd      	mov	sp, r7
    3f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f30:	4770      	bx	lr
    3f32:	bf00      	nop

00003f34 <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    3f34:	b580      	push	{r7, lr}
    3f36:	b082      	sub	sp, #8
    3f38:	af00      	add	r7, sp, #0
    3f3a:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    3f3c:	f010 ff00 	bl	14d40 <nav_home>
}
    3f40:	3708      	adds	r7, #8
    3f42:	46bd      	mov	sp, r7
    3f44:	bd80      	pop	{r7, pc}
    3f46:	bf00      	nop

00003f48 <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    3f48:	b580      	push	{r7, lr}
    3f4a:	b082      	sub	sp, #8
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    3f50:	f010 ff1c 	bl	14d8c <nav_update>
}
    3f54:	3708      	adds	r7, #8
    3f56:	46bd      	mov	sp, r7
    3f58:	bd80      	pop	{r7, pc}
    3f5a:	bf00      	nop

00003f5c <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    3f5c:	b580      	push	{r7, lr}
    3f5e:	b082      	sub	sp, #8
    3f60:	af00      	add	r7, sp, #0
    3f62:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    3f64:	f00e f83c 	bl	11fe0 <course_pid_run>
}
    3f68:	3708      	adds	r7, #8
    3f6a:	46bd      	mov	sp, r7
    3f6c:	bd80      	pop	{r7, pc}
    3f6e:	bf00      	nop

00003f70 <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    3f70:	b480      	push	{r7}
    3f72:	b083      	sub	sp, #12
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
    3f78:	370c      	adds	r7, #12
    3f7a:	46bd      	mov	sp, r7
    3f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f80:	4770      	bx	lr
    3f82:	bf00      	nop

00003f84 <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    3f84:	b480      	push	{r7}
    3f86:	b083      	sub	sp, #12
    3f88:	af00      	add	r7, sp, #0
    3f8a:	6078      	str	r0, [r7, #4]
}
    3f8c:	370c      	adds	r7, #12
    3f8e:	46bd      	mov	sp, r7
    3f90:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f94:	4770      	bx	lr
    3f96:	bf00      	nop

00003f98 <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    3f98:	b580      	push	{r7, lr}
    3f9a:	b082      	sub	sp, #8
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    3fa0:	f00e faa6 	bl	124f0 <altitude_pid_run>
}
    3fa4:	3708      	adds	r7, #8
    3fa6:	46bd      	mov	sp, r7
    3fa8:	bd80      	pop	{r7, pc}
    3faa:	bf00      	nop

00003fac <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    3fac:	b480      	push	{r7}
    3fae:	b083      	sub	sp, #12
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
    3fb4:	370c      	adds	r7, #12
    3fb6:	46bd      	mov	sp, r7
    3fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fbc:	4770      	bx	lr
    3fbe:	bf00      	nop

00003fc0 <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    3fc0:	b480      	push	{r7}
    3fc2:	b083      	sub	sp, #12
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	6078      	str	r0, [r7, #4]
}
    3fc8:	370c      	adds	r7, #12
    3fca:	46bd      	mov	sp, r7
    3fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fd0:	4770      	bx	lr
    3fd2:	bf00      	nop

00003fd4 <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    3fd4:	b580      	push	{r7, lr}
    3fd6:	b082      	sub	sp, #8
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    3fdc:	f00e f8b8 	bl	12150 <climb_pid_run>
}
    3fe0:	3708      	adds	r7, #8
    3fe2:	46bd      	mov	sp, r7
    3fe4:	bd80      	pop	{r7, pc}
    3fe6:	bf00      	nop

00003fe8 <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    3fe8:	b480      	push	{r7}
    3fea:	b083      	sub	sp, #12
    3fec:	af00      	add	r7, sp, #0
    3fee:	6078      	str	r0, [r7, #4]
    3ff0:	370c      	adds	r7, #12
    3ff2:	46bd      	mov	sp, r7
    3ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff8:	4770      	bx	lr
    3ffa:	bf00      	nop

00003ffc <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    3ffc:	b480      	push	{r7}
    3ffe:	b083      	sub	sp, #12
    4000:	af00      	add	r7, sp, #0
    4002:	6078      	str	r0, [r7, #4]
}
    4004:	370c      	adds	r7, #12
    4006:	46bd      	mov	sp, r7
    4008:	f85d 7b04 	ldr.w	r7, [sp], #4
    400c:	4770      	bx	lr
    400e:	bf00      	nop

00004010 <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    4010:	b580      	push	{r7, lr}
    4012:	b082      	sub	sp, #8
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    4018:	f003 fa84 	bl	7524 <send_boot>
    send_attitude();
    401c:	f004 fa5a 	bl	84d4 <send_attitude>
    send_adc();
    4020:	f004 ff54 	bl	8ecc <send_adc>
    send_settings();
    4024:	f005 f9e2 	bl	93ec <send_settings>
    send_desired();
    4028:	f005 fdec 	bl	9c04 <send_desired>
    send_bat();
    402c:	f006 fd22 	bl	aa74 <send_bat>
    send_climb();
    4030:	f007 f8de 	bl	b1f0 <send_climb>
    send_mode();
    4034:	f007 fe56 	bl	bce4 <send_mode>
    send_debug();
    4038:	f008 f930 	bl	c29c <send_debug>
    send_nav_ref();
    403c:	f008 fc0c 	bl	c858 <send_nav_ref>
}
    4040:	3708      	adds	r7, #8
    4042:	46bd      	mov	sp, r7
    4044:	bd80      	pop	{r7, pc}
    4046:	bf00      	nop

00004048 <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    4048:	b480      	push	{r7}
    404a:	b083      	sub	sp, #12
    404c:	af00      	add	r7, sp, #0
    404e:	6078      	str	r0, [r7, #4]
    4050:	370c      	adds	r7, #12
    4052:	46bd      	mov	sp, r7
    4054:	f85d 7b04 	ldr.w	r7, [sp], #4
    4058:	4770      	bx	lr
    405a:	bf00      	nop

0000405c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    405c:	b480      	push	{r7}
    405e:	b083      	sub	sp, #12
    4060:	af00      	add	r7, sp, #0
    4062:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    4064:	687b      	ldr	r3, [r7, #4]
    4066:	f103 0208 	add.w	r2, r3, #8
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    406e:	687b      	ldr	r3, [r7, #4]
    4070:	f04f 32ff 	mov.w	r2, #4294967295
    4074:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    4076:	687b      	ldr	r3, [r7, #4]
    4078:	f103 0208 	add.w	r2, r3, #8
    407c:	687b      	ldr	r3, [r7, #4]
    407e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	f103 0208 	add.w	r2, r3, #8
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    408a:	687b      	ldr	r3, [r7, #4]
    408c:	2200      	movs	r2, #0
    408e:	601a      	str	r2, [r3, #0]
}
    4090:	370c      	adds	r7, #12
    4092:	46bd      	mov	sp, r7
    4094:	f85d 7b04 	ldr.w	r7, [sp], #4
    4098:	4770      	bx	lr
    409a:	bf00      	nop

0000409c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    409c:	b480      	push	{r7}
    409e:	b083      	sub	sp, #12
    40a0:	af00      	add	r7, sp, #0
    40a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    40a4:	687b      	ldr	r3, [r7, #4]
    40a6:	2200      	movs	r2, #0
    40a8:	611a      	str	r2, [r3, #16]
}
    40aa:	370c      	adds	r7, #12
    40ac:	46bd      	mov	sp, r7
    40ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    40b2:	4770      	bx	lr

000040b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    40b4:	b480      	push	{r7}
    40b6:	b085      	sub	sp, #20
    40b8:	af00      	add	r7, sp, #0
    40ba:	6078      	str	r0, [r7, #4]
    40bc:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    40be:	687b      	ldr	r3, [r7, #4]
    40c0:	685b      	ldr	r3, [r3, #4]
    40c2:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    40c4:	68fb      	ldr	r3, [r7, #12]
    40c6:	685a      	ldr	r2, [r3, #4]
    40c8:	683b      	ldr	r3, [r7, #0]
    40ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	685a      	ldr	r2, [r3, #4]
    40d0:	683b      	ldr	r3, [r7, #0]
    40d2:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    40d4:	68fb      	ldr	r3, [r7, #12]
    40d6:	685b      	ldr	r3, [r3, #4]
    40d8:	683a      	ldr	r2, [r7, #0]
    40da:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    40dc:	68fb      	ldr	r3, [r7, #12]
    40de:	683a      	ldr	r2, [r7, #0]
    40e0:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	683a      	ldr	r2, [r7, #0]
    40e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    40e8:	683b      	ldr	r3, [r7, #0]
    40ea:	687a      	ldr	r2, [r7, #4]
    40ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	681b      	ldr	r3, [r3, #0]
    40f2:	1c5a      	adds	r2, r3, #1
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	601a      	str	r2, [r3, #0]
}
    40f8:	3714      	adds	r7, #20
    40fa:	46bd      	mov	sp, r7
    40fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4100:	4770      	bx	lr
    4102:	bf00      	nop

00004104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    4104:	b480      	push	{r7}
    4106:	b085      	sub	sp, #20
    4108:	af00      	add	r7, sp, #0
    410a:	6078      	str	r0, [r7, #4]
    410c:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    410e:	683b      	ldr	r3, [r7, #0]
    4110:	681b      	ldr	r3, [r3, #0]
    4112:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    4114:	68bb      	ldr	r3, [r7, #8]
    4116:	f1b3 3fff 	cmp.w	r3, #4294967295
    411a:	d103      	bne.n	4124 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    411c:	687b      	ldr	r3, [r7, #4]
    411e:	691b      	ldr	r3, [r3, #16]
    4120:	60fb      	str	r3, [r7, #12]
    4122:	e00c      	b.n	413e <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	3308      	adds	r3, #8
    4128:	60fb      	str	r3, [r7, #12]
    412a:	e002      	b.n	4132 <vListInsert+0x2e>
    412c:	68fb      	ldr	r3, [r7, #12]
    412e:	685b      	ldr	r3, [r3, #4]
    4130:	60fb      	str	r3, [r7, #12]
    4132:	68fb      	ldr	r3, [r7, #12]
    4134:	685b      	ldr	r3, [r3, #4]
    4136:	681a      	ldr	r2, [r3, #0]
    4138:	68bb      	ldr	r3, [r7, #8]
    413a:	429a      	cmp	r2, r3
    413c:	d9f6      	bls.n	412c <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    413e:	68fb      	ldr	r3, [r7, #12]
    4140:	685a      	ldr	r2, [r3, #4]
    4142:	683b      	ldr	r3, [r7, #0]
    4144:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4146:	683b      	ldr	r3, [r7, #0]
    4148:	685b      	ldr	r3, [r3, #4]
    414a:	683a      	ldr	r2, [r7, #0]
    414c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    414e:	683b      	ldr	r3, [r7, #0]
    4150:	68fa      	ldr	r2, [r7, #12]
    4152:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    4154:	68fb      	ldr	r3, [r7, #12]
    4156:	683a      	ldr	r2, [r7, #0]
    4158:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    415a:	683b      	ldr	r3, [r7, #0]
    415c:	687a      	ldr	r2, [r7, #4]
    415e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	681b      	ldr	r3, [r3, #0]
    4164:	1c5a      	adds	r2, r3, #1
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	601a      	str	r2, [r3, #0]
}
    416a:	3714      	adds	r7, #20
    416c:	46bd      	mov	sp, r7
    416e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4172:	4770      	bx	lr

00004174 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    4174:	b480      	push	{r7}
    4176:	b085      	sub	sp, #20
    4178:	af00      	add	r7, sp, #0
    417a:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	685b      	ldr	r3, [r3, #4]
    4180:	687a      	ldr	r2, [r7, #4]
    4182:	6892      	ldr	r2, [r2, #8]
    4184:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4186:	687b      	ldr	r3, [r7, #4]
    4188:	689b      	ldr	r3, [r3, #8]
    418a:	687a      	ldr	r2, [r7, #4]
    418c:	6852      	ldr	r2, [r2, #4]
    418e:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    4190:	687b      	ldr	r3, [r7, #4]
    4192:	691b      	ldr	r3, [r3, #16]
    4194:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	685a      	ldr	r2, [r3, #4]
    419a:	687b      	ldr	r3, [r7, #4]
    419c:	429a      	cmp	r2, r3
    419e:	d103      	bne.n	41a8 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    41a0:	687b      	ldr	r3, [r7, #4]
    41a2:	689a      	ldr	r2, [r3, #8]
    41a4:	68fb      	ldr	r3, [r7, #12]
    41a6:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	2200      	movs	r2, #0
    41ac:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    41ae:	68fb      	ldr	r3, [r7, #12]
    41b0:	681b      	ldr	r3, [r3, #0]
    41b2:	1e5a      	subs	r2, r3, #1
    41b4:	68fb      	ldr	r3, [r7, #12]
    41b6:	601a      	str	r2, [r3, #0]
}
    41b8:	3714      	adds	r7, #20
    41ba:	46bd      	mov	sp, r7
    41bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    41c0:	4770      	bx	lr
    41c2:	bf00      	nop

000041c4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    41c4:	b580      	push	{r7, lr}
    41c6:	b084      	sub	sp, #16
    41c8:	af00      	add	r7, sp, #0
    41ca:	6078      	str	r0, [r7, #4]
    41cc:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    41ce:	2301      	movs	r3, #1
    41d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    41d2:	683b      	ldr	r3, [r7, #0]
    41d4:	2b01      	cmp	r3, #1
    41d6:	d00b      	beq.n	41f0 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    41d8:	687b      	ldr	r3, [r7, #4]
    41da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41dc:	2b00      	cmp	r3, #0
    41de:	d001      	beq.n	41e4 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    41e0:	2300      	movs	r3, #0
    41e2:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	691b      	ldr	r3, [r3, #16]
    41e8:	2b00      	cmp	r3, #0
    41ea:	d001      	beq.n	41f0 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    41ec:	2300      	movs	r3, #0
    41ee:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    41f0:	68fb      	ldr	r3, [r7, #12]
    41f2:	2b01      	cmp	r3, #1
    41f4:	d12f      	bne.n	4256 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    41f6:	687b      	ldr	r3, [r7, #4]
    41f8:	681a      	ldr	r2, [r3, #0]
    41fa:	687b      	ldr	r3, [r7, #4]
    41fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    41fe:	6879      	ldr	r1, [r7, #4]
    4200:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4202:	fb01 f303 	mul.w	r3, r1, r3
    4206:	441a      	add	r2, r3
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    420c:	687b      	ldr	r3, [r7, #4]
    420e:	2200      	movs	r2, #0
    4210:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    4212:	687b      	ldr	r3, [r7, #4]
    4214:	681a      	ldr	r2, [r3, #0]
    4216:	687b      	ldr	r3, [r7, #4]
    4218:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    421a:	687b      	ldr	r3, [r7, #4]
    421c:	681a      	ldr	r2, [r3, #0]
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4222:	3b01      	subs	r3, #1
    4224:	6879      	ldr	r1, [r7, #4]
    4226:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4228:	fb01 f303 	mul.w	r3, r1, r3
    422c:	441a      	add	r2, r3
    422e:	687b      	ldr	r3, [r7, #4]
    4230:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    4232:	687b      	ldr	r3, [r7, #4]
    4234:	f04f 32ff 	mov.w	r2, #4294967295
    4238:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	f04f 32ff 	mov.w	r2, #4294967295
    4240:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	3310      	adds	r3, #16
    4246:	4618      	mov	r0, r3
    4248:	f7ff ff08 	bl	405c <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    424c:	687b      	ldr	r3, [r7, #4]
    424e:	3324      	adds	r3, #36	; 0x24
    4250:	4618      	mov	r0, r3
    4252:	f7ff ff03 	bl	405c <vListInitialise>
	}

	return xReturn;
    4256:	68fb      	ldr	r3, [r7, #12]
}
    4258:	4618      	mov	r0, r3
    425a:	3710      	adds	r7, #16
    425c:	46bd      	mov	sp, r7
    425e:	bd80      	pop	{r7, pc}

00004260 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    4260:	b580      	push	{r7, lr}
    4262:	b088      	sub	sp, #32
    4264:	af00      	add	r7, sp, #0
    4266:	60f8      	str	r0, [r7, #12]
    4268:	60b9      	str	r1, [r7, #8]
    426a:	4613      	mov	r3, r2
    426c:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    426e:	2300      	movs	r3, #0
    4270:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    4272:	68fb      	ldr	r3, [r7, #12]
    4274:	2b00      	cmp	r3, #0
    4276:	d026      	beq.n	42c6 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4278:	204c      	movs	r0, #76	; 0x4c
    427a:	f001 fda7 	bl	5dcc <pvPortMalloc>
    427e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    4280:	69bb      	ldr	r3, [r7, #24]
    4282:	2b00      	cmp	r3, #0
    4284:	d01f      	beq.n	42c6 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    4286:	68fb      	ldr	r3, [r7, #12]
    4288:	68ba      	ldr	r2, [r7, #8]
    428a:	fb02 f303 	mul.w	r3, r2, r3
    428e:	3301      	adds	r3, #1
    4290:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    4292:	6978      	ldr	r0, [r7, #20]
    4294:	f001 fd9a 	bl	5dcc <pvPortMalloc>
    4298:	4602      	mov	r2, r0
    429a:	69bb      	ldr	r3, [r7, #24]
    429c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    429e:	69bb      	ldr	r3, [r7, #24]
    42a0:	681b      	ldr	r3, [r3, #0]
    42a2:	2b00      	cmp	r3, #0
    42a4:	d00c      	beq.n	42c0 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    42a6:	69bb      	ldr	r3, [r7, #24]
    42a8:	68fa      	ldr	r2, [r7, #12]
    42aa:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    42ac:	69bb      	ldr	r3, [r7, #24]
    42ae:	68ba      	ldr	r2, [r7, #8]
    42b0:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    42b2:	69b8      	ldr	r0, [r7, #24]
    42b4:	2101      	movs	r1, #1
    42b6:	f7ff ff85 	bl	41c4 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    42ba:	69bb      	ldr	r3, [r7, #24]
    42bc:	61fb      	str	r3, [r7, #28]
    42be:	e002      	b.n	42c6 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    42c0:	69b8      	ldr	r0, [r7, #24]
    42c2:	f001 fe47 	bl	5f54 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    42c6:	69fb      	ldr	r3, [r7, #28]
}
    42c8:	4618      	mov	r0, r3
    42ca:	3720      	adds	r7, #32
    42cc:	46bd      	mov	sp, r7
    42ce:	bd80      	pop	{r7, pc}

000042d0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    42d0:	b580      	push	{r7, lr}
    42d2:	b084      	sub	sp, #16
    42d4:	af00      	add	r7, sp, #0
    42d6:	4603      	mov	r3, r0
    42d8:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    42da:	204c      	movs	r0, #76	; 0x4c
    42dc:	f001 fd76 	bl	5dcc <pvPortMalloc>
    42e0:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    42e2:	68fb      	ldr	r3, [r7, #12]
    42e4:	2b00      	cmp	r3, #0
    42e6:	d02c      	beq.n	4342 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    42e8:	68fb      	ldr	r3, [r7, #12]
    42ea:	2200      	movs	r2, #0
    42ec:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    42ee:	68fb      	ldr	r3, [r7, #12]
    42f0:	2200      	movs	r2, #0
    42f2:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    42f4:	68fb      	ldr	r3, [r7, #12]
    42f6:	2200      	movs	r2, #0
    42f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    42fa:	68fb      	ldr	r3, [r7, #12]
    42fc:	2200      	movs	r2, #0
    42fe:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4300:	68fb      	ldr	r3, [r7, #12]
    4302:	2200      	movs	r2, #0
    4304:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    4306:	68fb      	ldr	r3, [r7, #12]
    4308:	2201      	movs	r2, #1
    430a:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    430c:	68fb      	ldr	r3, [r7, #12]
    430e:	2200      	movs	r2, #0
    4310:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    4312:	68fb      	ldr	r3, [r7, #12]
    4314:	f04f 32ff 	mov.w	r2, #4294967295
    4318:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    431a:	68fb      	ldr	r3, [r7, #12]
    431c:	f04f 32ff 	mov.w	r2, #4294967295
    4320:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    4322:	68fb      	ldr	r3, [r7, #12]
    4324:	3310      	adds	r3, #16
    4326:	4618      	mov	r0, r3
    4328:	f7ff fe98 	bl	405c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    432c:	68fb      	ldr	r3, [r7, #12]
    432e:	3324      	adds	r3, #36	; 0x24
    4330:	4618      	mov	r0, r3
    4332:	f7ff fe93 	bl	405c <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    4336:	68f8      	ldr	r0, [r7, #12]
    4338:	2100      	movs	r1, #0
    433a:	2200      	movs	r2, #0
    433c:	2300      	movs	r3, #0
    433e:	f000 f81d 	bl	437c <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    4342:	68fb      	ldr	r3, [r7, #12]
	}
    4344:	4618      	mov	r0, r3
    4346:	3710      	adds	r7, #16
    4348:	46bd      	mov	sp, r7
    434a:	bd80      	pop	{r7, pc}

0000434c <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    434c:	b580      	push	{r7, lr}
    434e:	b084      	sub	sp, #16
    4350:	af00      	add	r7, sp, #0
    4352:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    4354:	f001 fcc0 	bl	5cd8 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    4358:	687b      	ldr	r3, [r7, #4]
    435a:	681b      	ldr	r3, [r3, #0]
    435c:	2b00      	cmp	r3, #0
    435e:	d103      	bne.n	4368 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	685b      	ldr	r3, [r3, #4]
    4364:	60fb      	str	r3, [r7, #12]
    4366:	e001      	b.n	436c <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    4368:	2300      	movs	r3, #0
    436a:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    436c:	f001 fcca 	bl	5d04 <vPortExitCritical>
		
		return pxReturn;
    4370:	68fb      	ldr	r3, [r7, #12]
	}
    4372:	4618      	mov	r0, r3
    4374:	3710      	adds	r7, #16
    4376:	46bd      	mov	sp, r7
    4378:	bd80      	pop	{r7, pc}
    437a:	bf00      	nop

0000437c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    437c:	b580      	push	{r7, lr}
    437e:	b088      	sub	sp, #32
    4380:	af00      	add	r7, sp, #0
    4382:	60f8      	str	r0, [r7, #12]
    4384:	60b9      	str	r1, [r7, #8]
    4386:	607a      	str	r2, [r7, #4]
    4388:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    438a:	2300      	movs	r3, #0
    438c:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    438e:	f001 fca3 	bl	5cd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4396:	68fb      	ldr	r3, [r7, #12]
    4398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    439a:	429a      	cmp	r2, r3
    439c:	d216      	bcs.n	43cc <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    439e:	68f8      	ldr	r0, [r7, #12]
    43a0:	68b9      	ldr	r1, [r7, #8]
    43a2:	683a      	ldr	r2, [r7, #0]
    43a4:	f000 f9d6 	bl	4754 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    43a8:	68fb      	ldr	r3, [r7, #12]
    43aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43ac:	2b00      	cmp	r3, #0
    43ae:	d009      	beq.n	43c4 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    43b0:	68fb      	ldr	r3, [r7, #12]
    43b2:	3324      	adds	r3, #36	; 0x24
    43b4:	4618      	mov	r0, r3
    43b6:	f001 f905 	bl	55c4 <xTaskRemoveFromEventList>
    43ba:	4603      	mov	r3, r0
    43bc:	2b01      	cmp	r3, #1
    43be:	d101      	bne.n	43c4 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    43c0:	f001 fc7c 	bl	5cbc <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    43c4:	f001 fc9e 	bl	5d04 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    43c8:	2301      	movs	r3, #1
    43ca:	e059      	b.n	4480 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	2b00      	cmp	r3, #0
    43d0:	d103      	bne.n	43da <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    43d2:	f001 fc97 	bl	5d04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    43d6:	2300      	movs	r3, #0
    43d8:	e052      	b.n	4480 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    43da:	69fb      	ldr	r3, [r7, #28]
    43dc:	2b00      	cmp	r3, #0
    43de:	d106      	bne.n	43ee <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    43e0:	f107 0314 	add.w	r3, r7, #20
    43e4:	4618      	mov	r0, r3
    43e6:	f001 f945 	bl	5674 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    43ea:	2301      	movs	r3, #1
    43ec:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    43ee:	f001 fc89 	bl	5d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    43f2:	f000 fe93 	bl	511c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    43f6:	f001 fc6f 	bl	5cd8 <vPortEnterCritical>
    43fa:	68fb      	ldr	r3, [r7, #12]
    43fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    43fe:	f1b3 3fff 	cmp.w	r3, #4294967295
    4402:	d102      	bne.n	440a <xQueueGenericSend+0x8e>
    4404:	68fb      	ldr	r3, [r7, #12]
    4406:	2200      	movs	r2, #0
    4408:	645a      	str	r2, [r3, #68]	; 0x44
    440a:	68fb      	ldr	r3, [r7, #12]
    440c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    440e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4412:	d102      	bne.n	441a <xQueueGenericSend+0x9e>
    4414:	68fb      	ldr	r3, [r7, #12]
    4416:	2200      	movs	r2, #0
    4418:	649a      	str	r2, [r3, #72]	; 0x48
    441a:	f001 fc73 	bl	5d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    441e:	f107 0214 	add.w	r2, r7, #20
    4422:	1d3b      	adds	r3, r7, #4
    4424:	4610      	mov	r0, r2
    4426:	4619      	mov	r1, r3
    4428:	f001 f93c 	bl	56a4 <xTaskCheckForTimeOut>
    442c:	4603      	mov	r3, r0
    442e:	2b00      	cmp	r3, #0
    4430:	d11e      	bne.n	4470 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4432:	68f8      	ldr	r0, [r7, #12]
    4434:	f000 fa86 	bl	4944 <prvIsQueueFull>
    4438:	4603      	mov	r3, r0
    443a:	2b00      	cmp	r3, #0
    443c:	d012      	beq.n	4464 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	f103 0210 	add.w	r2, r3, #16
    4444:	687b      	ldr	r3, [r7, #4]
    4446:	4610      	mov	r0, r2
    4448:	4619      	mov	r1, r3
    444a:	f001 f883 	bl	5554 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    444e:	68f8      	ldr	r0, [r7, #12]
    4450:	f000 fa02 	bl	4858 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4454:	f000 fe74 	bl	5140 <xTaskResumeAll>
    4458:	4603      	mov	r3, r0
    445a:	2b00      	cmp	r3, #0
    445c:	d10f      	bne.n	447e <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    445e:	f001 fc2d 	bl	5cbc <vPortYieldFromISR>
    4462:	e00c      	b.n	447e <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4464:	68f8      	ldr	r0, [r7, #12]
    4466:	f000 f9f7 	bl	4858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    446a:	f000 fe69 	bl	5140 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    446e:	e78e      	b.n	438e <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    4470:	68f8      	ldr	r0, [r7, #12]
    4472:	f000 f9f1 	bl	4858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4476:	f000 fe63 	bl	5140 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    447a:	2300      	movs	r3, #0
    447c:	e000      	b.n	4480 <xQueueGenericSend+0x104>
		}
	}
    447e:	e786      	b.n	438e <xQueueGenericSend+0x12>
}
    4480:	4618      	mov	r0, r3
    4482:	3720      	adds	r7, #32
    4484:	46bd      	mov	sp, r7
    4486:	bd80      	pop	{r7, pc}

00004488 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    4488:	b580      	push	{r7, lr}
    448a:	b086      	sub	sp, #24
    448c:	af00      	add	r7, sp, #0
    448e:	60f8      	str	r0, [r7, #12]
    4490:	60b9      	str	r1, [r7, #8]
    4492:	607a      	str	r2, [r7, #4]
    4494:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4496:	2300      	movs	r3, #0
    4498:	613b      	str	r3, [r7, #16]
    449a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    449e:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    44a6:	68fb      	ldr	r3, [r7, #12]
    44a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    44aa:	429a      	cmp	r2, r3
    44ac:	d221      	bcs.n	44f2 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    44ae:	68f8      	ldr	r0, [r7, #12]
    44b0:	68b9      	ldr	r1, [r7, #8]
    44b2:	683a      	ldr	r2, [r7, #0]
    44b4:	f000 f94e 	bl	4754 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    44b8:	68fb      	ldr	r3, [r7, #12]
    44ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    44bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    44c0:	d10f      	bne.n	44e2 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    44c2:	68fb      	ldr	r3, [r7, #12]
    44c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44c6:	2b00      	cmp	r3, #0
    44c8:	d010      	beq.n	44ec <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    44ca:	68fb      	ldr	r3, [r7, #12]
    44cc:	3324      	adds	r3, #36	; 0x24
    44ce:	4618      	mov	r0, r3
    44d0:	f001 f878 	bl	55c4 <xTaskRemoveFromEventList>
    44d4:	4603      	mov	r3, r0
    44d6:	2b00      	cmp	r3, #0
    44d8:	d008      	beq.n	44ec <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    44da:	687b      	ldr	r3, [r7, #4]
    44dc:	2201      	movs	r2, #1
    44de:	601a      	str	r2, [r3, #0]
    44e0:	e004      	b.n	44ec <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    44e2:	68fb      	ldr	r3, [r7, #12]
    44e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    44e6:	1c5a      	adds	r2, r3, #1
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    44ec:	2301      	movs	r3, #1
    44ee:	617b      	str	r3, [r7, #20]
    44f0:	e001      	b.n	44f6 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    44f2:	2300      	movs	r3, #0
    44f4:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    44f6:	f04f 0000 	mov.w	r0, #0
    44fa:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    44fe:	697b      	ldr	r3, [r7, #20]
}
    4500:	4618      	mov	r0, r3
    4502:	3718      	adds	r7, #24
    4504:	46bd      	mov	sp, r7
    4506:	bd80      	pop	{r7, pc}

00004508 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4508:	b580      	push	{r7, lr}
    450a:	b088      	sub	sp, #32
    450c:	af00      	add	r7, sp, #0
    450e:	60f8      	str	r0, [r7, #12]
    4510:	60b9      	str	r1, [r7, #8]
    4512:	607a      	str	r2, [r7, #4]
    4514:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4516:	2300      	movs	r3, #0
    4518:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    451a:	f001 fbdd 	bl	5cd8 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    451e:	68fb      	ldr	r3, [r7, #12]
    4520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4522:	2b00      	cmp	r3, #0
    4524:	d03b      	beq.n	459e <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    4526:	68fb      	ldr	r3, [r7, #12]
    4528:	68db      	ldr	r3, [r3, #12]
    452a:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    452c:	68f8      	ldr	r0, [r7, #12]
    452e:	68b9      	ldr	r1, [r7, #8]
    4530:	f000 f96c 	bl	480c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4534:	683b      	ldr	r3, [r7, #0]
    4536:	2b00      	cmp	r3, #0
    4538:	d11c      	bne.n	4574 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    453a:	68fb      	ldr	r3, [r7, #12]
    453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    453e:	1e5a      	subs	r2, r3, #1
    4540:	68fb      	ldr	r3, [r7, #12]
    4542:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4544:	68fb      	ldr	r3, [r7, #12]
    4546:	681b      	ldr	r3, [r3, #0]
    4548:	2b00      	cmp	r3, #0
    454a:	d104      	bne.n	4556 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    454c:	f001 fa5c 	bl	5a08 <xTaskGetCurrentTaskHandle>
    4550:	4602      	mov	r2, r0
    4552:	68fb      	ldr	r3, [r7, #12]
    4554:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4556:	68fb      	ldr	r3, [r7, #12]
    4558:	691b      	ldr	r3, [r3, #16]
    455a:	2b00      	cmp	r3, #0
    455c:	d01b      	beq.n	4596 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    455e:	68fb      	ldr	r3, [r7, #12]
    4560:	3310      	adds	r3, #16
    4562:	4618      	mov	r0, r3
    4564:	f001 f82e 	bl	55c4 <xTaskRemoveFromEventList>
    4568:	4603      	mov	r3, r0
    456a:	2b01      	cmp	r3, #1
    456c:	d113      	bne.n	4596 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    456e:	f001 fba5 	bl	5cbc <vPortYieldFromISR>
    4572:	e010      	b.n	4596 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	69ba      	ldr	r2, [r7, #24]
    4578:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    457a:	68fb      	ldr	r3, [r7, #12]
    457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    457e:	2b00      	cmp	r3, #0
    4580:	d009      	beq.n	4596 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4582:	68fb      	ldr	r3, [r7, #12]
    4584:	3324      	adds	r3, #36	; 0x24
    4586:	4618      	mov	r0, r3
    4588:	f001 f81c 	bl	55c4 <xTaskRemoveFromEventList>
    458c:	4603      	mov	r3, r0
    458e:	2b00      	cmp	r3, #0
    4590:	d001      	beq.n	4596 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    4592:	f001 fb93 	bl	5cbc <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    4596:	f001 fbb5 	bl	5d04 <vPortExitCritical>
				return pdPASS;
    459a:	2301      	movs	r3, #1
    459c:	e066      	b.n	466c <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	2b00      	cmp	r3, #0
    45a2:	d103      	bne.n	45ac <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    45a4:	f001 fbae 	bl	5d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    45a8:	2300      	movs	r3, #0
    45aa:	e05f      	b.n	466c <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    45ac:	69fb      	ldr	r3, [r7, #28]
    45ae:	2b00      	cmp	r3, #0
    45b0:	d106      	bne.n	45c0 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    45b2:	f107 0310 	add.w	r3, r7, #16
    45b6:	4618      	mov	r0, r3
    45b8:	f001 f85c 	bl	5674 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    45bc:	2301      	movs	r3, #1
    45be:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    45c0:	f001 fba0 	bl	5d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    45c4:	f000 fdaa 	bl	511c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    45c8:	f001 fb86 	bl	5cd8 <vPortEnterCritical>
    45cc:	68fb      	ldr	r3, [r7, #12]
    45ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    45d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    45d4:	d102      	bne.n	45dc <xQueueGenericReceive+0xd4>
    45d6:	68fb      	ldr	r3, [r7, #12]
    45d8:	2200      	movs	r2, #0
    45da:	645a      	str	r2, [r3, #68]	; 0x44
    45dc:	68fb      	ldr	r3, [r7, #12]
    45de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    45e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    45e4:	d102      	bne.n	45ec <xQueueGenericReceive+0xe4>
    45e6:	68fb      	ldr	r3, [r7, #12]
    45e8:	2200      	movs	r2, #0
    45ea:	649a      	str	r2, [r3, #72]	; 0x48
    45ec:	f001 fb8a 	bl	5d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    45f0:	f107 0210 	add.w	r2, r7, #16
    45f4:	1d3b      	adds	r3, r7, #4
    45f6:	4610      	mov	r0, r2
    45f8:	4619      	mov	r1, r3
    45fa:	f001 f853 	bl	56a4 <xTaskCheckForTimeOut>
    45fe:	4603      	mov	r3, r0
    4600:	2b00      	cmp	r3, #0
    4602:	d12b      	bne.n	465c <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4604:	68f8      	ldr	r0, [r7, #12]
    4606:	f000 f973 	bl	48f0 <prvIsQueueEmpty>
    460a:	4603      	mov	r3, r0
    460c:	2b00      	cmp	r3, #0
    460e:	d01f      	beq.n	4650 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4610:	68fb      	ldr	r3, [r7, #12]
    4612:	681b      	ldr	r3, [r3, #0]
    4614:	2b00      	cmp	r3, #0
    4616:	d108      	bne.n	462a <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4618:	f001 fb5e 	bl	5cd8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    461c:	68fb      	ldr	r3, [r7, #12]
    461e:	685b      	ldr	r3, [r3, #4]
    4620:	4618      	mov	r0, r3
    4622:	f001 fa01 	bl	5a28 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    4626:	f001 fb6d 	bl	5d04 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    462a:	68fb      	ldr	r3, [r7, #12]
    462c:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4630:	687b      	ldr	r3, [r7, #4]
    4632:	4610      	mov	r0, r2
    4634:	4619      	mov	r1, r3
    4636:	f000 ff8d 	bl	5554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    463a:	68f8      	ldr	r0, [r7, #12]
    463c:	f000 f90c 	bl	4858 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    4640:	f000 fd7e 	bl	5140 <xTaskResumeAll>
    4644:	4603      	mov	r3, r0
    4646:	2b00      	cmp	r3, #0
    4648:	d10f      	bne.n	466a <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    464a:	f001 fb37 	bl	5cbc <vPortYieldFromISR>
    464e:	e00c      	b.n	466a <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4650:	68f8      	ldr	r0, [r7, #12]
    4652:	f000 f901 	bl	4858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4656:	f000 fd73 	bl	5140 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    465a:	e75e      	b.n	451a <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    465c:	68f8      	ldr	r0, [r7, #12]
    465e:	f000 f8fb 	bl	4858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4662:	f000 fd6d 	bl	5140 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    4666:	2300      	movs	r3, #0
    4668:	e000      	b.n	466c <xQueueGenericReceive+0x164>
		}
	}
    466a:	e756      	b.n	451a <xQueueGenericReceive+0x12>
}
    466c:	4618      	mov	r0, r3
    466e:	3720      	adds	r7, #32
    4670:	46bd      	mov	sp, r7
    4672:	bd80      	pop	{r7, pc}

00004674 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    4674:	b580      	push	{r7, lr}
    4676:	b086      	sub	sp, #24
    4678:	af00      	add	r7, sp, #0
    467a:	60f8      	str	r0, [r7, #12]
    467c:	60b9      	str	r1, [r7, #8]
    467e:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4680:	2300      	movs	r3, #0
    4682:	613b      	str	r3, [r7, #16]
    4684:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4688:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    468c:	68fb      	ldr	r3, [r7, #12]
    468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4690:	2b00      	cmp	r3, #0
    4692:	d025      	beq.n	46e0 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4694:	68f8      	ldr	r0, [r7, #12]
    4696:	68b9      	ldr	r1, [r7, #8]
    4698:	f000 f8b8 	bl	480c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    469c:	68fb      	ldr	r3, [r7, #12]
    469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46a0:	1e5a      	subs	r2, r3, #1
    46a2:	68fb      	ldr	r3, [r7, #12]
    46a4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    46a6:	68fb      	ldr	r3, [r7, #12]
    46a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    46aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    46ae:	d10f      	bne.n	46d0 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    46b0:	68fb      	ldr	r3, [r7, #12]
    46b2:	691b      	ldr	r3, [r3, #16]
    46b4:	2b00      	cmp	r3, #0
    46b6:	d010      	beq.n	46da <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    46b8:	68fb      	ldr	r3, [r7, #12]
    46ba:	3310      	adds	r3, #16
    46bc:	4618      	mov	r0, r3
    46be:	f000 ff81 	bl	55c4 <xTaskRemoveFromEventList>
    46c2:	4603      	mov	r3, r0
    46c4:	2b00      	cmp	r3, #0
    46c6:	d008      	beq.n	46da <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	2201      	movs	r2, #1
    46cc:	601a      	str	r2, [r3, #0]
    46ce:	e004      	b.n	46da <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    46d0:	68fb      	ldr	r3, [r7, #12]
    46d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    46d4:	1c5a      	adds	r2, r3, #1
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    46da:	2301      	movs	r3, #1
    46dc:	617b      	str	r3, [r7, #20]
    46de:	e001      	b.n	46e4 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    46e0:	2300      	movs	r3, #0
    46e2:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    46e4:	f04f 0000 	mov.w	r0, #0
    46e8:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    46ec:	697b      	ldr	r3, [r7, #20]
}
    46ee:	4618      	mov	r0, r3
    46f0:	3718      	adds	r7, #24
    46f2:	46bd      	mov	sp, r7
    46f4:	bd80      	pop	{r7, pc}
    46f6:	bf00      	nop

000046f8 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    46f8:	b580      	push	{r7, lr}
    46fa:	b084      	sub	sp, #16
    46fc:	af00      	add	r7, sp, #0
    46fe:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4700:	f001 faea 	bl	5cd8 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4704:	687b      	ldr	r3, [r7, #4]
    4706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4708:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    470a:	f001 fafb 	bl	5d04 <vPortExitCritical>

	return uxReturn;
    470e:	68fb      	ldr	r3, [r7, #12]
}
    4710:	4618      	mov	r0, r3
    4712:	3710      	adds	r7, #16
    4714:	46bd      	mov	sp, r7
    4716:	bd80      	pop	{r7, pc}

00004718 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4718:	b480      	push	{r7}
    471a:	b085      	sub	sp, #20
    471c:	af00      	add	r7, sp, #0
    471e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4720:	687b      	ldr	r3, [r7, #4]
    4722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4724:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    4726:	68fb      	ldr	r3, [r7, #12]
}
    4728:	4618      	mov	r0, r3
    472a:	3714      	adds	r7, #20
    472c:	46bd      	mov	sp, r7
    472e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4732:	4770      	bx	lr

00004734 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4734:	b580      	push	{r7, lr}
    4736:	b082      	sub	sp, #8
    4738:	af00      	add	r7, sp, #0
    473a:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    473c:	687b      	ldr	r3, [r7, #4]
    473e:	681b      	ldr	r3, [r3, #0]
    4740:	4618      	mov	r0, r3
    4742:	f001 fc07 	bl	5f54 <vPortFree>
	vPortFree( pxQueue );
    4746:	6878      	ldr	r0, [r7, #4]
    4748:	f001 fc04 	bl	5f54 <vPortFree>
}
    474c:	3708      	adds	r7, #8
    474e:	46bd      	mov	sp, r7
    4750:	bd80      	pop	{r7, pc}
    4752:	bf00      	nop

00004754 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4754:	b580      	push	{r7, lr}
    4756:	b084      	sub	sp, #16
    4758:	af00      	add	r7, sp, #0
    475a:	60f8      	str	r0, [r7, #12]
    475c:	60b9      	str	r1, [r7, #8]
    475e:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    4760:	68fb      	ldr	r3, [r7, #12]
    4762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4764:	2b00      	cmp	r3, #0
    4766:	d10c      	bne.n	4782 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4768:	68fb      	ldr	r3, [r7, #12]
    476a:	681b      	ldr	r3, [r3, #0]
    476c:	2b00      	cmp	r3, #0
    476e:	d145      	bne.n	47fc <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    4770:	68fb      	ldr	r3, [r7, #12]
    4772:	685b      	ldr	r3, [r3, #4]
    4774:	4618      	mov	r0, r3
    4776:	f001 f9bb 	bl	5af0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    477a:	68fb      	ldr	r3, [r7, #12]
    477c:	2200      	movs	r2, #0
    477e:	605a      	str	r2, [r3, #4]
    4780:	e03c      	b.n	47fc <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    4782:	687b      	ldr	r3, [r7, #4]
    4784:	2b00      	cmp	r3, #0
    4786:	d11a      	bne.n	47be <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4788:	68fb      	ldr	r3, [r7, #12]
    478a:	689a      	ldr	r2, [r3, #8]
    478c:	68fb      	ldr	r3, [r7, #12]
    478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4790:	4610      	mov	r0, r2
    4792:	68b9      	ldr	r1, [r7, #8]
    4794:	461a      	mov	r2, r3
    4796:	f014 f847 	bl	18828 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    479a:	68fb      	ldr	r3, [r7, #12]
    479c:	689a      	ldr	r2, [r3, #8]
    479e:	68fb      	ldr	r3, [r7, #12]
    47a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47a2:	441a      	add	r2, r3
    47a4:	68fb      	ldr	r3, [r7, #12]
    47a6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    47a8:	68fb      	ldr	r3, [r7, #12]
    47aa:	689a      	ldr	r2, [r3, #8]
    47ac:	68fb      	ldr	r3, [r7, #12]
    47ae:	685b      	ldr	r3, [r3, #4]
    47b0:	429a      	cmp	r2, r3
    47b2:	d323      	bcc.n	47fc <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    47b4:	68fb      	ldr	r3, [r7, #12]
    47b6:	681a      	ldr	r2, [r3, #0]
    47b8:	68fb      	ldr	r3, [r7, #12]
    47ba:	609a      	str	r2, [r3, #8]
    47bc:	e01e      	b.n	47fc <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    47be:	68fb      	ldr	r3, [r7, #12]
    47c0:	68da      	ldr	r2, [r3, #12]
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47c6:	4610      	mov	r0, r2
    47c8:	68b9      	ldr	r1, [r7, #8]
    47ca:	461a      	mov	r2, r3
    47cc:	f014 f82c 	bl	18828 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    47d0:	68fb      	ldr	r3, [r7, #12]
    47d2:	68da      	ldr	r2, [r3, #12]
    47d4:	68fb      	ldr	r3, [r7, #12]
    47d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47d8:	425b      	negs	r3, r3
    47da:	441a      	add	r2, r3
    47dc:	68fb      	ldr	r3, [r7, #12]
    47de:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    47e0:	68fb      	ldr	r3, [r7, #12]
    47e2:	68da      	ldr	r2, [r3, #12]
    47e4:	68fb      	ldr	r3, [r7, #12]
    47e6:	681b      	ldr	r3, [r3, #0]
    47e8:	429a      	cmp	r2, r3
    47ea:	d207      	bcs.n	47fc <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    47ec:	68fb      	ldr	r3, [r7, #12]
    47ee:	685a      	ldr	r2, [r3, #4]
    47f0:	68fb      	ldr	r3, [r7, #12]
    47f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47f4:	425b      	negs	r3, r3
    47f6:	441a      	add	r2, r3
    47f8:	68fb      	ldr	r3, [r7, #12]
    47fa:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    47fc:	68fb      	ldr	r3, [r7, #12]
    47fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4800:	1c5a      	adds	r2, r3, #1
    4802:	68fb      	ldr	r3, [r7, #12]
    4804:	639a      	str	r2, [r3, #56]	; 0x38
}
    4806:	3710      	adds	r7, #16
    4808:	46bd      	mov	sp, r7
    480a:	bd80      	pop	{r7, pc}

0000480c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    480c:	b580      	push	{r7, lr}
    480e:	b082      	sub	sp, #8
    4810:	af00      	add	r7, sp, #0
    4812:	6078      	str	r0, [r7, #4]
    4814:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    4816:	687b      	ldr	r3, [r7, #4]
    4818:	681b      	ldr	r3, [r3, #0]
    481a:	2b00      	cmp	r3, #0
    481c:	d019      	beq.n	4852 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    481e:	687b      	ldr	r3, [r7, #4]
    4820:	68da      	ldr	r2, [r3, #12]
    4822:	687b      	ldr	r3, [r7, #4]
    4824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4826:	441a      	add	r2, r3
    4828:	687b      	ldr	r3, [r7, #4]
    482a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    482c:	687b      	ldr	r3, [r7, #4]
    482e:	68da      	ldr	r2, [r3, #12]
    4830:	687b      	ldr	r3, [r7, #4]
    4832:	685b      	ldr	r3, [r3, #4]
    4834:	429a      	cmp	r2, r3
    4836:	d303      	bcc.n	4840 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4838:	687b      	ldr	r3, [r7, #4]
    483a:	681a      	ldr	r2, [r3, #0]
    483c:	687b      	ldr	r3, [r7, #4]
    483e:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    4840:	687b      	ldr	r3, [r7, #4]
    4842:	68da      	ldr	r2, [r3, #12]
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4848:	6838      	ldr	r0, [r7, #0]
    484a:	4611      	mov	r1, r2
    484c:	461a      	mov	r2, r3
    484e:	f013 ffeb 	bl	18828 <memcpy>
	}
}
    4852:	3708      	adds	r7, #8
    4854:	46bd      	mov	sp, r7
    4856:	bd80      	pop	{r7, pc}

00004858 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    4858:	b580      	push	{r7, lr}
    485a:	b082      	sub	sp, #8
    485c:	af00      	add	r7, sp, #0
    485e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    4860:	f001 fa3a 	bl	5cd8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4864:	e014      	b.n	4890 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4866:	687b      	ldr	r3, [r7, #4]
    4868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    486a:	2b00      	cmp	r3, #0
    486c:	d00f      	beq.n	488e <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    486e:	687b      	ldr	r3, [r7, #4]
    4870:	3324      	adds	r3, #36	; 0x24
    4872:	4618      	mov	r0, r3
    4874:	f000 fea6 	bl	55c4 <xTaskRemoveFromEventList>
    4878:	4603      	mov	r3, r0
    487a:	2b00      	cmp	r3, #0
    487c:	d001      	beq.n	4882 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    487e:	f000 ff5d 	bl	573c <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    4882:	687b      	ldr	r3, [r7, #4]
    4884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4886:	1e5a      	subs	r2, r3, #1
    4888:	687b      	ldr	r3, [r7, #4]
    488a:	649a      	str	r2, [r3, #72]	; 0x48
    488c:	e000      	b.n	4890 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    488e:	e003      	b.n	4898 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4890:	687b      	ldr	r3, [r7, #4]
    4892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4894:	2b00      	cmp	r3, #0
    4896:	dce6      	bgt.n	4866 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4898:	687b      	ldr	r3, [r7, #4]
    489a:	f04f 32ff 	mov.w	r2, #4294967295
    489e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    48a0:	f001 fa30 	bl	5d04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    48a4:	f001 fa18 	bl	5cd8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    48a8:	e014      	b.n	48d4 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	691b      	ldr	r3, [r3, #16]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d00f      	beq.n	48d2 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    48b2:	687b      	ldr	r3, [r7, #4]
    48b4:	3310      	adds	r3, #16
    48b6:	4618      	mov	r0, r3
    48b8:	f000 fe84 	bl	55c4 <xTaskRemoveFromEventList>
    48bc:	4603      	mov	r3, r0
    48be:	2b00      	cmp	r3, #0
    48c0:	d001      	beq.n	48c6 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    48c2:	f000 ff3b 	bl	573c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    48c6:	687b      	ldr	r3, [r7, #4]
    48c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    48ca:	1e5a      	subs	r2, r3, #1
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	645a      	str	r2, [r3, #68]	; 0x44
    48d0:	e000      	b.n	48d4 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    48d2:	e003      	b.n	48dc <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    48d8:	2b00      	cmp	r3, #0
    48da:	dce6      	bgt.n	48aa <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    48dc:	687b      	ldr	r3, [r7, #4]
    48de:	f04f 32ff 	mov.w	r2, #4294967295
    48e2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    48e4:	f001 fa0e 	bl	5d04 <vPortExitCritical>
}
    48e8:	3708      	adds	r7, #8
    48ea:	46bd      	mov	sp, r7
    48ec:	bd80      	pop	{r7, pc}
    48ee:	bf00      	nop

000048f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    48f0:	b580      	push	{r7, lr}
    48f2:	b084      	sub	sp, #16
    48f4:	af00      	add	r7, sp, #0
    48f6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    48f8:	f001 f9ee 	bl	5cd8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    48fc:	687b      	ldr	r3, [r7, #4]
    48fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4900:	2b00      	cmp	r3, #0
    4902:	bf14      	ite	ne
    4904:	2300      	movne	r3, #0
    4906:	2301      	moveq	r3, #1
    4908:	b2db      	uxtb	r3, r3
    490a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    490c:	f001 f9fa 	bl	5d04 <vPortExitCritical>

	return xReturn;
    4910:	68fb      	ldr	r3, [r7, #12]
}
    4912:	4618      	mov	r0, r3
    4914:	3710      	adds	r7, #16
    4916:	46bd      	mov	sp, r7
    4918:	bd80      	pop	{r7, pc}
    491a:	bf00      	nop

0000491c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    491c:	b480      	push	{r7}
    491e:	b085      	sub	sp, #20
    4920:	af00      	add	r7, sp, #0
    4922:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4924:	687b      	ldr	r3, [r7, #4]
    4926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4928:	2b00      	cmp	r3, #0
    492a:	bf14      	ite	ne
    492c:	2300      	movne	r3, #0
    492e:	2301      	moveq	r3, #1
    4930:	b2db      	uxtb	r3, r3
    4932:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4934:	68fb      	ldr	r3, [r7, #12]
}
    4936:	4618      	mov	r0, r3
    4938:	3714      	adds	r7, #20
    493a:	46bd      	mov	sp, r7
    493c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4940:	4770      	bx	lr
    4942:	bf00      	nop

00004944 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4944:	b580      	push	{r7, lr}
    4946:	b084      	sub	sp, #16
    4948:	af00      	add	r7, sp, #0
    494a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    494c:	f001 f9c4 	bl	5cd8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4950:	687b      	ldr	r3, [r7, #4]
    4952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4954:	687b      	ldr	r3, [r7, #4]
    4956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4958:	429a      	cmp	r2, r3
    495a:	bf14      	ite	ne
    495c:	2300      	movne	r3, #0
    495e:	2301      	moveq	r3, #1
    4960:	b2db      	uxtb	r3, r3
    4962:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4964:	f001 f9ce 	bl	5d04 <vPortExitCritical>

	return xReturn;
    4968:	68fb      	ldr	r3, [r7, #12]
}
    496a:	4618      	mov	r0, r3
    496c:	3710      	adds	r7, #16
    496e:	46bd      	mov	sp, r7
    4970:	bd80      	pop	{r7, pc}
    4972:	bf00      	nop

00004974 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4974:	b480      	push	{r7}
    4976:	b085      	sub	sp, #20
    4978:	af00      	add	r7, sp, #0
    497a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    497c:	687b      	ldr	r3, [r7, #4]
    497e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4980:	687b      	ldr	r3, [r7, #4]
    4982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4984:	429a      	cmp	r2, r3
    4986:	bf14      	ite	ne
    4988:	2300      	movne	r3, #0
    498a:	2301      	moveq	r3, #1
    498c:	b2db      	uxtb	r3, r3
    498e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4990:	68fb      	ldr	r3, [r7, #12]
}
    4992:	4618      	mov	r0, r3
    4994:	3714      	adds	r7, #20
    4996:	46bd      	mov	sp, r7
    4998:	f85d 7b04 	ldr.w	r7, [sp], #4
    499c:	4770      	bx	lr
    499e:	bf00      	nop

000049a0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    49a0:	b580      	push	{r7, lr}
    49a2:	b08a      	sub	sp, #40	; 0x28
    49a4:	af02      	add	r7, sp, #8
    49a6:	60f8      	str	r0, [r7, #12]
    49a8:	60b9      	str	r1, [r7, #8]
    49aa:	603b      	str	r3, [r7, #0]
    49ac:	4613      	mov	r3, r2
    49ae:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    49b0:	88fb      	ldrh	r3, [r7, #6]
    49b2:	4618      	mov	r0, r3
    49b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    49b6:	f000 ffe5 	bl	5984 <prvAllocateTCBAndStack>
    49ba:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    49bc:	69bb      	ldr	r3, [r7, #24]
    49be:	2b00      	cmp	r3, #0
    49c0:	f000 80a1 	beq.w	4b06 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    49c4:	69bb      	ldr	r3, [r7, #24]
    49c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    49c8:	88fb      	ldrh	r3, [r7, #6]
    49ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    49ce:	3b01      	subs	r3, #1
    49d0:	009b      	lsls	r3, r3, #2
    49d2:	4413      	add	r3, r2
    49d4:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    49d6:	697b      	ldr	r3, [r7, #20]
    49d8:	f023 0307 	bic.w	r3, r3, #7
    49dc:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    49de:	88fb      	ldrh	r3, [r7, #6]
    49e0:	9300      	str	r3, [sp, #0]
    49e2:	69b8      	ldr	r0, [r7, #24]
    49e4:	68b9      	ldr	r1, [r7, #8]
    49e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    49e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    49ea:	f000 febd 	bl	5768 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    49ee:	6978      	ldr	r0, [r7, #20]
    49f0:	68f9      	ldr	r1, [r7, #12]
    49f2:	683a      	ldr	r2, [r7, #0]
    49f4:	f001 f8f2 	bl	5bdc <pxPortInitialiseStack>
    49f8:	4602      	mov	r2, r0
    49fa:	69bb      	ldr	r3, [r7, #24]
    49fc:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    49fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a00:	2b00      	cmp	r3, #0
    4a02:	d002      	beq.n	4a0a <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a06:	69ba      	ldr	r2, [r7, #24]
    4a08:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4a0a:	f001 f965 	bl	5cd8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4a0e:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a16:	681b      	ldr	r3, [r3, #0]
    4a18:	1c5a      	adds	r2, r3, #1
    4a1a:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a22:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4a24:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a2c:	681b      	ldr	r3, [r3, #0]
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d10f      	bne.n	4a52 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4a32:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a3a:	69ba      	ldr	r2, [r7, #24]
    4a3c:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4a3e:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a46:	681b      	ldr	r3, [r3, #0]
    4a48:	2b01      	cmp	r3, #1
    4a4a:	d118      	bne.n	4a7e <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4a4c:	f000 fec2 	bl	57d4 <prvInitialiseTaskLists>
    4a50:	e015      	b.n	4a7e <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4a52:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a5a:	681b      	ldr	r3, [r3, #0]
    4a5c:	2b00      	cmp	r3, #0
    4a5e:	d10e      	bne.n	4a7e <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4a60:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a68:	681b      	ldr	r3, [r3, #0]
    4a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4a6e:	429a      	cmp	r2, r3
    4a70:	d805      	bhi.n	4a7e <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4a72:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a7a:	69ba      	ldr	r2, [r7, #24]
    4a7c:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4a7e:	69bb      	ldr	r3, [r7, #24]
    4a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a82:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	429a      	cmp	r2, r3
    4a8e:	d906      	bls.n	4a9e <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4a90:	69bb      	ldr	r3, [r7, #24]
    4a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a94:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a9c:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4a9e:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aa6:	681b      	ldr	r3, [r3, #0]
    4aa8:	1c5a      	adds	r2, r3, #1
    4aaa:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab2:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4ab4:	69bb      	ldr	r3, [r7, #24]
    4ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ab8:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac0:	681b      	ldr	r3, [r3, #0]
    4ac2:	429a      	cmp	r2, r3
    4ac4:	d906      	bls.n	4ad4 <xTaskGenericCreate+0x134>
    4ac6:	69bb      	ldr	r3, [r7, #24]
    4ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4aca:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ad2:	601a      	str	r2, [r3, #0]
    4ad4:	69bb      	ldr	r3, [r7, #24]
    4ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ad8:	4613      	mov	r3, r2
    4ada:	009b      	lsls	r3, r3, #2
    4adc:	4413      	add	r3, r2
    4ade:	009b      	lsls	r3, r3, #2
    4ae0:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4ae4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ae8:	441a      	add	r2, r3
    4aea:	69bb      	ldr	r3, [r7, #24]
    4aec:	3304      	adds	r3, #4
    4aee:	4610      	mov	r0, r2
    4af0:	4619      	mov	r1, r3
    4af2:	f7ff fadf 	bl	40b4 <vListInsertEnd>

			xReturn = pdPASS;
    4af6:	2301      	movs	r3, #1
    4af8:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4afa:	69b8      	ldr	r0, [r7, #24]
    4afc:	f012 fe8a 	bl	17814 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4b00:	f001 f900 	bl	5d04 <vPortExitCritical>
    4b04:	e002      	b.n	4b0c <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4b06:	f04f 33ff 	mov.w	r3, #4294967295
    4b0a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4b0c:	69fb      	ldr	r3, [r7, #28]
    4b0e:	2b01      	cmp	r3, #1
    4b10:	d111      	bne.n	4b36 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4b12:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b1a:	681b      	ldr	r3, [r3, #0]
    4b1c:	2b00      	cmp	r3, #0
    4b1e:	d00a      	beq.n	4b36 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4b20:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b28:	681b      	ldr	r3, [r3, #0]
    4b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b2e:	429a      	cmp	r2, r3
    4b30:	d201      	bcs.n	4b36 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4b32:	f001 f8c3 	bl	5cbc <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4b36:	69fb      	ldr	r3, [r7, #28]
}
    4b38:	4618      	mov	r0, r3
    4b3a:	3720      	adds	r7, #32
    4b3c:	46bd      	mov	sp, r7
    4b3e:	bd80      	pop	{r7, pc}

00004b40 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4b40:	b580      	push	{r7, lr}
    4b42:	b084      	sub	sp, #16
    4b44:	af00      	add	r7, sp, #0
    4b46:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4b48:	f001 f8c6 	bl	5cd8 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4b4c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b54:	681b      	ldr	r3, [r3, #0]
    4b56:	687a      	ldr	r2, [r7, #4]
    4b58:	429a      	cmp	r2, r3
    4b5a:	d101      	bne.n	4b60 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4b5c:	2300      	movs	r3, #0
    4b5e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	2b00      	cmp	r3, #0
    4b64:	d105      	bne.n	4b72 <vTaskDelete+0x32>
    4b66:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b6e:	681b      	ldr	r3, [r3, #0]
    4b70:	e000      	b.n	4b74 <vTaskDelete+0x34>
    4b72:	687b      	ldr	r3, [r7, #4]
    4b74:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4b76:	68fb      	ldr	r3, [r7, #12]
    4b78:	3304      	adds	r3, #4
    4b7a:	4618      	mov	r0, r3
    4b7c:	f7ff fafa 	bl	4174 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4b80:	68fb      	ldr	r3, [r7, #12]
    4b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b84:	2b00      	cmp	r3, #0
    4b86:	d004      	beq.n	4b92 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4b88:	68fb      	ldr	r3, [r7, #12]
    4b8a:	3318      	adds	r3, #24
    4b8c:	4618      	mov	r0, r3
    4b8e:	f7ff faf1 	bl	4174 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4b92:	68fb      	ldr	r3, [r7, #12]
    4b94:	3304      	adds	r3, #4
    4b96:	f241 2088 	movw	r0, #4744	; 0x1288
    4b9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4b9e:	4619      	mov	r1, r3
    4ba0:	f7ff fa88 	bl	40b4 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4ba4:	f241 239c 	movw	r3, #4764	; 0x129c
    4ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bac:	681b      	ldr	r3, [r3, #0]
    4bae:	1c5a      	adds	r2, r3, #1
    4bb0:	f241 239c 	movw	r3, #4764	; 0x129c
    4bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb8:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4bba:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	1c5a      	adds	r2, r3, #1
    4bc6:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bce:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4bd0:	f001 f898 	bl	5d04 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4bd4:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bdc:	681b      	ldr	r3, [r3, #0]
    4bde:	2b00      	cmp	r3, #0
    4be0:	d004      	beq.n	4bec <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4be2:	687b      	ldr	r3, [r7, #4]
    4be4:	2b00      	cmp	r3, #0
    4be6:	d101      	bne.n	4bec <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4be8:	f001 f868 	bl	5cbc <vPortYieldFromISR>
			}
		}
	}
    4bec:	3710      	adds	r7, #16
    4bee:	46bd      	mov	sp, r7
    4bf0:	bd80      	pop	{r7, pc}
    4bf2:	bf00      	nop

00004bf4 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4bf4:	b580      	push	{r7, lr}
    4bf6:	b086      	sub	sp, #24
    4bf8:	af00      	add	r7, sp, #0
    4bfa:	6078      	str	r0, [r7, #4]
    4bfc:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4bfe:	2300      	movs	r3, #0
    4c00:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4c02:	f000 fa8b 	bl	511c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4c06:	687b      	ldr	r3, [r7, #4]
    4c08:	681a      	ldr	r2, [r3, #0]
    4c0a:	683b      	ldr	r3, [r7, #0]
    4c0c:	4413      	add	r3, r2
    4c0e:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4c10:	687b      	ldr	r3, [r7, #4]
    4c12:	681a      	ldr	r2, [r3, #0]
    4c14:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c1c:	681b      	ldr	r3, [r3, #0]
    4c1e:	429a      	cmp	r2, r3
    4c20:	d90f      	bls.n	4c42 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4c22:	687b      	ldr	r3, [r7, #4]
    4c24:	681a      	ldr	r2, [r3, #0]
    4c26:	693b      	ldr	r3, [r7, #16]
    4c28:	429a      	cmp	r2, r3
    4c2a:	d919      	bls.n	4c60 <vTaskDelayUntil+0x6c>
    4c2c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c34:	681b      	ldr	r3, [r3, #0]
    4c36:	693a      	ldr	r2, [r7, #16]
    4c38:	429a      	cmp	r2, r3
    4c3a:	d911      	bls.n	4c60 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4c3c:	2301      	movs	r3, #1
    4c3e:	617b      	str	r3, [r7, #20]
    4c40:	e00e      	b.n	4c60 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	681a      	ldr	r2, [r3, #0]
    4c46:	693b      	ldr	r3, [r7, #16]
    4c48:	429a      	cmp	r2, r3
    4c4a:	d807      	bhi.n	4c5c <vTaskDelayUntil+0x68>
    4c4c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c54:	681b      	ldr	r3, [r3, #0]
    4c56:	693a      	ldr	r2, [r7, #16]
    4c58:	429a      	cmp	r2, r3
    4c5a:	d901      	bls.n	4c60 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4c5c:	2301      	movs	r3, #1
    4c5e:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4c60:	687b      	ldr	r3, [r7, #4]
    4c62:	693a      	ldr	r2, [r7, #16]
    4c64:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4c66:	697b      	ldr	r3, [r7, #20]
    4c68:	2b00      	cmp	r3, #0
    4c6a:	d00b      	beq.n	4c84 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4c6c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c74:	681b      	ldr	r3, [r3, #0]
    4c76:	3304      	adds	r3, #4
    4c78:	4618      	mov	r0, r3
    4c7a:	f7ff fa7b 	bl	4174 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4c7e:	6938      	ldr	r0, [r7, #16]
    4c80:	f000 fe3c 	bl	58fc <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4c84:	f000 fa5c 	bl	5140 <xTaskResumeAll>
    4c88:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4c8a:	68fb      	ldr	r3, [r7, #12]
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d101      	bne.n	4c94 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4c90:	f001 f814 	bl	5cbc <vPortYieldFromISR>
		}
	}
    4c94:	3718      	adds	r7, #24
    4c96:	46bd      	mov	sp, r7
    4c98:	bd80      	pop	{r7, pc}
    4c9a:	bf00      	nop

00004c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4c9c:	b580      	push	{r7, lr}
    4c9e:	b084      	sub	sp, #16
    4ca0:	af00      	add	r7, sp, #0
    4ca2:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4ca4:	2300      	movs	r3, #0
    4ca6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4ca8:	687b      	ldr	r3, [r7, #4]
    4caa:	2b00      	cmp	r3, #0
    4cac:	d018      	beq.n	4ce0 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4cae:	f000 fa35 	bl	511c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4cb2:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cba:	681a      	ldr	r2, [r3, #0]
    4cbc:	687b      	ldr	r3, [r7, #4]
    4cbe:	4413      	add	r3, r2
    4cc0:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4cc2:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cca:	681b      	ldr	r3, [r3, #0]
    4ccc:	3304      	adds	r3, #4
    4cce:	4618      	mov	r0, r3
    4cd0:	f7ff fa50 	bl	4174 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4cd4:	68b8      	ldr	r0, [r7, #8]
    4cd6:	f000 fe11 	bl	58fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4cda:	f000 fa31 	bl	5140 <xTaskResumeAll>
    4cde:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4ce0:	68fb      	ldr	r3, [r7, #12]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d101      	bne.n	4cea <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4ce6:	f000 ffe9 	bl	5cbc <vPortYieldFromISR>
		}
	}
    4cea:	3710      	adds	r7, #16
    4cec:	46bd      	mov	sp, r7
    4cee:	bd80      	pop	{r7, pc}

00004cf0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4cf0:	b580      	push	{r7, lr}
    4cf2:	b084      	sub	sp, #16
    4cf4:	af00      	add	r7, sp, #0
    4cf6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4cf8:	f000 ffee 	bl	5cd8 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4cfc:	687b      	ldr	r3, [r7, #4]
    4cfe:	2b00      	cmp	r3, #0
    4d00:	d105      	bne.n	4d0e <uxTaskPriorityGet+0x1e>
    4d02:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d0a:	681b      	ldr	r3, [r3, #0]
    4d0c:	e000      	b.n	4d10 <uxTaskPriorityGet+0x20>
    4d0e:	687b      	ldr	r3, [r7, #4]
    4d10:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4d12:	68fb      	ldr	r3, [r7, #12]
    4d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d16:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4d18:	f000 fff4 	bl	5d04 <vPortExitCritical>

		return uxReturn;
    4d1c:	68bb      	ldr	r3, [r7, #8]
	}
    4d1e:	4618      	mov	r0, r3
    4d20:	3710      	adds	r7, #16
    4d22:	46bd      	mov	sp, r7
    4d24:	bd80      	pop	{r7, pc}
    4d26:	bf00      	nop

00004d28 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4d28:	b580      	push	{r7, lr}
    4d2a:	b086      	sub	sp, #24
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	6078      	str	r0, [r7, #4]
    4d30:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4d32:	2300      	movs	r3, #0
    4d34:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4d36:	683b      	ldr	r3, [r7, #0]
    4d38:	2b04      	cmp	r3, #4
    4d3a:	d901      	bls.n	4d40 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4d3c:	2304      	movs	r3, #4
    4d3e:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4d40:	f000 ffca 	bl	5cd8 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4d44:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d4c:	681b      	ldr	r3, [r3, #0]
    4d4e:	687a      	ldr	r2, [r7, #4]
    4d50:	429a      	cmp	r2, r3
    4d52:	d101      	bne.n	4d58 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4d54:	2300      	movs	r3, #0
    4d56:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4d58:	687b      	ldr	r3, [r7, #4]
    4d5a:	2b00      	cmp	r3, #0
    4d5c:	d105      	bne.n	4d6a <vTaskPrioritySet+0x42>
    4d5e:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d66:	681b      	ldr	r3, [r3, #0]
    4d68:	e000      	b.n	4d6c <vTaskPrioritySet+0x44>
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4d6e:	693b      	ldr	r3, [r7, #16]
    4d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4d72:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4d74:	68fa      	ldr	r2, [r7, #12]
    4d76:	683b      	ldr	r3, [r7, #0]
    4d78:	429a      	cmp	r2, r3
    4d7a:	d058      	beq.n	4e2e <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4d7c:	683a      	ldr	r2, [r7, #0]
    4d7e:	68fb      	ldr	r3, [r7, #12]
    4d80:	429a      	cmp	r2, r3
    4d82:	d905      	bls.n	4d90 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4d84:	687b      	ldr	r3, [r7, #4]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d007      	beq.n	4d9a <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4d8a:	2301      	movs	r3, #1
    4d8c:	617b      	str	r3, [r7, #20]
    4d8e:	e004      	b.n	4d9a <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4d90:	687b      	ldr	r3, [r7, #4]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d101      	bne.n	4d9a <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4d96:	2301      	movs	r3, #1
    4d98:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4d9a:	693b      	ldr	r3, [r7, #16]
    4d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4d9e:	693b      	ldr	r3, [r7, #16]
    4da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4da2:	429a      	cmp	r2, r3
    4da4:	d102      	bne.n	4dac <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4da6:	693b      	ldr	r3, [r7, #16]
    4da8:	683a      	ldr	r2, [r7, #0]
    4daa:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4dac:	693b      	ldr	r3, [r7, #16]
    4dae:	683a      	ldr	r2, [r7, #0]
    4db0:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4db2:	683b      	ldr	r3, [r7, #0]
    4db4:	f1c3 0205 	rsb	r2, r3, #5
    4db8:	693b      	ldr	r3, [r7, #16]
    4dba:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4dbc:	693b      	ldr	r3, [r7, #16]
    4dbe:	6959      	ldr	r1, [r3, #20]
    4dc0:	68fa      	ldr	r2, [r7, #12]
    4dc2:	4613      	mov	r3, r2
    4dc4:	009b      	lsls	r3, r3, #2
    4dc6:	4413      	add	r3, r2
    4dc8:	009b      	lsls	r3, r3, #2
    4dca:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4dce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4dd2:	4413      	add	r3, r2
    4dd4:	4299      	cmp	r1, r3
    4dd6:	d125      	bne.n	4e24 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4dd8:	693b      	ldr	r3, [r7, #16]
    4dda:	3304      	adds	r3, #4
    4ddc:	4618      	mov	r0, r3
    4dde:	f7ff f9c9 	bl	4174 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4de2:	693b      	ldr	r3, [r7, #16]
    4de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4de6:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dee:	681b      	ldr	r3, [r3, #0]
    4df0:	429a      	cmp	r2, r3
    4df2:	d906      	bls.n	4e02 <vTaskPrioritySet+0xda>
    4df4:	693b      	ldr	r3, [r7, #16]
    4df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4df8:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e00:	601a      	str	r2, [r3, #0]
    4e02:	693b      	ldr	r3, [r7, #16]
    4e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e06:	4613      	mov	r3, r2
    4e08:	009b      	lsls	r3, r3, #2
    4e0a:	4413      	add	r3, r2
    4e0c:	009b      	lsls	r3, r3, #2
    4e0e:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4e12:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e16:	441a      	add	r2, r3
    4e18:	693b      	ldr	r3, [r7, #16]
    4e1a:	3304      	adds	r3, #4
    4e1c:	4610      	mov	r0, r2
    4e1e:	4619      	mov	r1, r3
    4e20:	f7ff f948 	bl	40b4 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4e24:	697b      	ldr	r3, [r7, #20]
    4e26:	2b01      	cmp	r3, #1
    4e28:	d101      	bne.n	4e2e <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4e2a:	f000 ff47 	bl	5cbc <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4e2e:	f000 ff69 	bl	5d04 <vPortExitCritical>
	}
    4e32:	3718      	adds	r7, #24
    4e34:	46bd      	mov	sp, r7
    4e36:	bd80      	pop	{r7, pc}

00004e38 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4e38:	b580      	push	{r7, lr}
    4e3a:	b084      	sub	sp, #16
    4e3c:	af00      	add	r7, sp, #0
    4e3e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4e40:	f000 ff4a 	bl	5cd8 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4e44:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e4c:	681b      	ldr	r3, [r3, #0]
    4e4e:	687a      	ldr	r2, [r7, #4]
    4e50:	429a      	cmp	r2, r3
    4e52:	d101      	bne.n	4e58 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4e54:	2300      	movs	r3, #0
    4e56:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4e58:	687b      	ldr	r3, [r7, #4]
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	d105      	bne.n	4e6a <vTaskSuspend+0x32>
    4e5e:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e66:	681b      	ldr	r3, [r3, #0]
    4e68:	e000      	b.n	4e6c <vTaskSuspend+0x34>
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4e6e:	68fb      	ldr	r3, [r7, #12]
    4e70:	3304      	adds	r3, #4
    4e72:	4618      	mov	r0, r3
    4e74:	f7ff f97e 	bl	4174 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4e78:	68fb      	ldr	r3, [r7, #12]
    4e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d004      	beq.n	4e8a <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4e80:	68fb      	ldr	r3, [r7, #12]
    4e82:	3318      	adds	r3, #24
    4e84:	4618      	mov	r0, r3
    4e86:	f7ff f975 	bl	4174 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4e8a:	68fb      	ldr	r3, [r7, #12]
    4e8c:	3304      	adds	r3, #4
    4e8e:	f241 20a0 	movw	r0, #4768	; 0x12a0
    4e92:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4e96:	4619      	mov	r1, r3
    4e98:	f7ff f90c 	bl	40b4 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4e9c:	f000 ff32 	bl	5d04 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4ea0:	687b      	ldr	r3, [r7, #4]
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d11e      	bne.n	4ee4 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4ea6:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eae:	681b      	ldr	r3, [r3, #0]
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	d002      	beq.n	4eba <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4eb4:	f000 ff02 	bl	5cbc <vPortYieldFromISR>
    4eb8:	e014      	b.n	4ee4 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4eba:	f241 23a0 	movw	r3, #4768	; 0x12a0
    4ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ec2:	681a      	ldr	r2, [r3, #0]
    4ec4:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ecc:	681b      	ldr	r3, [r3, #0]
    4ece:	429a      	cmp	r2, r3
    4ed0:	d106      	bne.n	4ee0 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4ed2:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eda:	2200      	movs	r2, #0
    4edc:	601a      	str	r2, [r3, #0]
    4ede:	e001      	b.n	4ee4 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4ee0:	f000 fadc 	bl	549c <vTaskSwitchContext>
				}
			}
		}
	}
    4ee4:	3710      	adds	r7, #16
    4ee6:	46bd      	mov	sp, r7
    4ee8:	bd80      	pop	{r7, pc}
    4eea:	bf00      	nop

00004eec <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4eec:	b480      	push	{r7}
    4eee:	b085      	sub	sp, #20
    4ef0:	af00      	add	r7, sp, #0
    4ef2:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4ef4:	2300      	movs	r3, #0
    4ef6:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4ef8:	687b      	ldr	r3, [r7, #4]
    4efa:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4efc:	68bb      	ldr	r3, [r7, #8]
    4efe:	695a      	ldr	r2, [r3, #20]
    4f00:	f241 23a0 	movw	r3, #4768	; 0x12a0
    4f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f08:	429a      	cmp	r2, r3
    4f0a:	d10d      	bne.n	4f28 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4f0c:	68bb      	ldr	r3, [r7, #8]
    4f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f10:	f241 2374 	movw	r3, #4724	; 0x1274
    4f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f18:	429a      	cmp	r2, r3
    4f1a:	d005      	beq.n	4f28 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4f1c:	68bb      	ldr	r3, [r7, #8]
    4f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f20:	2b00      	cmp	r3, #0
    4f22:	d101      	bne.n	4f28 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4f24:	2301      	movs	r3, #1
    4f26:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4f28:	68fb      	ldr	r3, [r7, #12]
	}
    4f2a:	4618      	mov	r0, r3
    4f2c:	3714      	adds	r7, #20
    4f2e:	46bd      	mov	sp, r7
    4f30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f34:	4770      	bx	lr
    4f36:	bf00      	nop

00004f38 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4f38:	b580      	push	{r7, lr}
    4f3a:	b084      	sub	sp, #16
    4f3c:	af00      	add	r7, sp, #0
    4f3e:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4f40:	687b      	ldr	r3, [r7, #4]
    4f42:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4f44:	68fb      	ldr	r3, [r7, #12]
    4f46:	2b00      	cmp	r3, #0
    4f48:	d043      	beq.n	4fd2 <vTaskResume+0x9a>
    4f4a:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f52:	681b      	ldr	r3, [r3, #0]
    4f54:	68fa      	ldr	r2, [r7, #12]
    4f56:	429a      	cmp	r2, r3
    4f58:	d03b      	beq.n	4fd2 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4f5a:	f000 febd 	bl	5cd8 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4f5e:	68f8      	ldr	r0, [r7, #12]
    4f60:	f7ff ffc4 	bl	4eec <xTaskIsTaskSuspended>
    4f64:	4603      	mov	r3, r0
    4f66:	2b01      	cmp	r3, #1
    4f68:	d131      	bne.n	4fce <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4f6a:	68fb      	ldr	r3, [r7, #12]
    4f6c:	3304      	adds	r3, #4
    4f6e:	4618      	mov	r0, r3
    4f70:	f7ff f900 	bl	4174 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4f74:	68fb      	ldr	r3, [r7, #12]
    4f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f78:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f80:	681b      	ldr	r3, [r3, #0]
    4f82:	429a      	cmp	r2, r3
    4f84:	d906      	bls.n	4f94 <vTaskResume+0x5c>
    4f86:	68fb      	ldr	r3, [r7, #12]
    4f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f8a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f92:	601a      	str	r2, [r3, #0]
    4f94:	68fb      	ldr	r3, [r7, #12]
    4f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f98:	4613      	mov	r3, r2
    4f9a:	009b      	lsls	r3, r3, #2
    4f9c:	4413      	add	r3, r2
    4f9e:	009b      	lsls	r3, r3, #2
    4fa0:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4fa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4fa8:	441a      	add	r2, r3
    4faa:	68fb      	ldr	r3, [r7, #12]
    4fac:	3304      	adds	r3, #4
    4fae:	4610      	mov	r0, r2
    4fb0:	4619      	mov	r1, r3
    4fb2:	f7ff f87f 	bl	40b4 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4fb6:	68fb      	ldr	r3, [r7, #12]
    4fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fba:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc2:	681b      	ldr	r3, [r3, #0]
    4fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4fc6:	429a      	cmp	r2, r3
    4fc8:	d301      	bcc.n	4fce <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4fca:	f000 fe77 	bl	5cbc <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4fce:	f000 fe99 	bl	5d04 <vPortExitCritical>
		}
	}
    4fd2:	3710      	adds	r7, #16
    4fd4:	46bd      	mov	sp, r7
    4fd6:	bd80      	pop	{r7, pc}

00004fd8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4fd8:	b580      	push	{r7, lr}
    4fda:	b086      	sub	sp, #24
    4fdc:	af00      	add	r7, sp, #0
    4fde:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4fe0:	2300      	movs	r3, #0
    4fe2:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4fe4:	687b      	ldr	r3, [r7, #4]
    4fe6:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4fe8:	2300      	movs	r3, #0
    4fea:	60fb      	str	r3, [r7, #12]
    4fec:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4ff0:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4ff4:	6938      	ldr	r0, [r7, #16]
    4ff6:	f7ff ff79 	bl	4eec <xTaskIsTaskSuspended>
    4ffa:	4603      	mov	r3, r0
    4ffc:	2b01      	cmp	r3, #1
    4ffe:	d144      	bne.n	508a <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5000:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5008:	681b      	ldr	r3, [r3, #0]
    500a:	2b00      	cmp	r3, #0
    500c:	d134      	bne.n	5078 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    500e:	693b      	ldr	r3, [r7, #16]
    5010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5012:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501a:	681b      	ldr	r3, [r3, #0]
    501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    501e:	429a      	cmp	r2, r3
    5020:	bf34      	ite	cc
    5022:	2300      	movcc	r3, #0
    5024:	2301      	movcs	r3, #1
    5026:	b2db      	uxtb	r3, r3
    5028:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    502a:	693b      	ldr	r3, [r7, #16]
    502c:	3304      	adds	r3, #4
    502e:	4618      	mov	r0, r3
    5030:	f7ff f8a0 	bl	4174 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5034:	693b      	ldr	r3, [r7, #16]
    5036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5038:	f241 23c0 	movw	r3, #4800	; 0x12c0
    503c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5040:	681b      	ldr	r3, [r3, #0]
    5042:	429a      	cmp	r2, r3
    5044:	d906      	bls.n	5054 <xTaskResumeFromISR+0x7c>
    5046:	693b      	ldr	r3, [r7, #16]
    5048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    504a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    504e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5052:	601a      	str	r2, [r3, #0]
    5054:	693b      	ldr	r3, [r7, #16]
    5056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5058:	4613      	mov	r3, r2
    505a:	009b      	lsls	r3, r3, #2
    505c:	4413      	add	r3, r2
    505e:	009b      	lsls	r3, r3, #2
    5060:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5064:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5068:	441a      	add	r2, r3
    506a:	693b      	ldr	r3, [r7, #16]
    506c:	3304      	adds	r3, #4
    506e:	4610      	mov	r0, r2
    5070:	4619      	mov	r1, r3
    5072:	f7ff f81f 	bl	40b4 <vListInsertEnd>
    5076:	e008      	b.n	508a <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5078:	693b      	ldr	r3, [r7, #16]
    507a:	3318      	adds	r3, #24
    507c:	f241 2074 	movw	r0, #4724	; 0x1274
    5080:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5084:	4619      	mov	r1, r3
    5086:	f7ff f815 	bl	40b4 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    508a:	f04f 0000 	mov.w	r0, #0
    508e:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    5092:	697b      	ldr	r3, [r7, #20]
	}
    5094:	4618      	mov	r0, r3
    5096:	3718      	adds	r7, #24
    5098:	46bd      	mov	sp, r7
    509a:	bd80      	pop	{r7, pc}

0000509c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    509c:	b580      	push	{r7, lr}
    509e:	b086      	sub	sp, #24
    50a0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    50a2:	2300      	movs	r3, #0
    50a4:	9300      	str	r3, [sp, #0]
    50a6:	2300      	movs	r3, #0
    50a8:	9301      	str	r3, [sp, #4]
    50aa:	2300      	movs	r3, #0
    50ac:	9302      	str	r3, [sp, #8]
    50ae:	2300      	movs	r3, #0
    50b0:	9303      	str	r3, [sp, #12]
    50b2:	f245 7055 	movw	r0, #22357	; 0x5755
    50b6:	f2c0 0000 	movt	r0, #0
    50ba:	f648 212c 	movw	r1, #35372	; 0x8a2c
    50be:	f2c0 0101 	movt	r1, #1
    50c2:	2280      	movs	r2, #128	; 0x80
    50c4:	2300      	movs	r3, #0
    50c6:	f7ff fc6b 	bl	49a0 <xTaskGenericCreate>
    50ca:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    50cc:	687b      	ldr	r3, [r7, #4]
    50ce:	2b01      	cmp	r3, #1
    50d0:	d111      	bne.n	50f6 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    50d2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    50d6:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    50da:	f241 23c4 	movw	r3, #4804	; 0x12c4
    50de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50e2:	2201      	movs	r2, #1
    50e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    50e6:	f241 23b8 	movw	r3, #4792	; 0x12b8
    50ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ee:	2200      	movs	r2, #0
    50f0:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    50f2:	f000 fdb5 	bl	5c60 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    50f6:	3708      	adds	r7, #8
    50f8:	46bd      	mov	sp, r7
    50fa:	bd80      	pop	{r7, pc}

000050fc <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    50fc:	b580      	push	{r7, lr}
    50fe:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    5100:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5104:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    5108:	f241 23c4 	movw	r3, #4804	; 0x12c4
    510c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5110:	2200      	movs	r2, #0
    5112:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    5114:	f000 fdcc 	bl	5cb0 <vPortEndScheduler>
}
    5118:	bd80      	pop	{r7, pc}
    511a:	bf00      	nop

0000511c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    511c:	b480      	push	{r7}
    511e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    5120:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5128:	681b      	ldr	r3, [r3, #0]
    512a:	1c5a      	adds	r2, r3, #1
    512c:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5134:	601a      	str	r2, [r3, #0]
}
    5136:	46bd      	mov	sp, r7
    5138:	f85d 7b04 	ldr.w	r7, [sp], #4
    513c:	4770      	bx	lr
    513e:	bf00      	nop

00005140 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    5140:	b590      	push	{r4, r7, lr}
    5142:	b083      	sub	sp, #12
    5144:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    5146:	2300      	movs	r3, #0
    5148:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    514a:	f000 fdc5 	bl	5cd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    514e:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5156:	681b      	ldr	r3, [r3, #0]
    5158:	1e5a      	subs	r2, r3, #1
    515a:	f241 23c8 	movw	r3, #4808	; 0x12c8
    515e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5162:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5164:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    516c:	681b      	ldr	r3, [r3, #0]
    516e:	2b00      	cmp	r3, #0
    5170:	d177      	bne.n	5262 <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    5172:	f241 23b4 	movw	r3, #4788	; 0x12b4
    5176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    517a:	681b      	ldr	r3, [r3, #0]
    517c:	2b00      	cmp	r3, #0
    517e:	d070      	beq.n	5262 <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    5180:	2300      	movs	r3, #0
    5182:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5184:	e036      	b.n	51f4 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    5186:	f241 2374 	movw	r3, #4724	; 0x1274
    518a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518e:	68db      	ldr	r3, [r3, #12]
    5190:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    5192:	f104 0318 	add.w	r3, r4, #24
    5196:	4618      	mov	r0, r3
    5198:	f7fe ffec 	bl	4174 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    519c:	1d23      	adds	r3, r4, #4
    519e:	4618      	mov	r0, r3
    51a0:	f7fe ffe8 	bl	4174 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    51a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    51a6:	f241 23c0 	movw	r3, #4800	; 0x12c0
    51aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ae:	681b      	ldr	r3, [r3, #0]
    51b0:	429a      	cmp	r2, r3
    51b2:	d905      	bls.n	51c0 <xTaskResumeAll+0x80>
    51b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    51b6:	f241 23c0 	movw	r3, #4800	; 0x12c0
    51ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51be:	601a      	str	r2, [r3, #0]
    51c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    51c2:	4613      	mov	r3, r2
    51c4:	009b      	lsls	r3, r3, #2
    51c6:	4413      	add	r3, r2
    51c8:	009b      	lsls	r3, r3, #2
    51ca:	f241 12e0 	movw	r2, #4576	; 0x11e0
    51ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    51d2:	441a      	add	r2, r3
    51d4:	1d23      	adds	r3, r4, #4
    51d6:	4610      	mov	r0, r2
    51d8:	4619      	mov	r1, r3
    51da:	f7fe ff6b 	bl	40b4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    51de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    51e0:	f241 13dc 	movw	r3, #4572	; 0x11dc
    51e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e8:	681b      	ldr	r3, [r3, #0]
    51ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51ec:	429a      	cmp	r2, r3
    51ee:	d301      	bcc.n	51f4 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    51f0:	2301      	movs	r3, #1
    51f2:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    51f4:	f241 2374 	movw	r3, #4724	; 0x1274
    51f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51fc:	681b      	ldr	r3, [r3, #0]
    51fe:	2b00      	cmp	r3, #0
    5200:	d1c1      	bne.n	5186 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5202:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    520a:	681b      	ldr	r3, [r3, #0]
    520c:	2b00      	cmp	r3, #0
    520e:	d014      	beq.n	523a <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5210:	e00c      	b.n	522c <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    5212:	f000 f865 	bl	52e0 <vTaskIncrementTick>
						--uxMissedTicks;
    5216:	f241 23cc 	movw	r3, #4812	; 0x12cc
    521a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    521e:	681b      	ldr	r3, [r3, #0]
    5220:	1e5a      	subs	r2, r3, #1
    5222:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    522a:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    522c:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5234:	681b      	ldr	r3, [r3, #0]
    5236:	2b00      	cmp	r3, #0
    5238:	d1eb      	bne.n	5212 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    523a:	683b      	ldr	r3, [r7, #0]
    523c:	2b01      	cmp	r3, #1
    523e:	d006      	beq.n	524e <xTaskResumeAll+0x10e>
    5240:	f241 23d0 	movw	r3, #4816	; 0x12d0
    5244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	2b01      	cmp	r3, #1
    524c:	d109      	bne.n	5262 <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    524e:	2301      	movs	r3, #1
    5250:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    5252:	f241 23d0 	movw	r3, #4816	; 0x12d0
    5256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    525a:	2200      	movs	r2, #0
    525c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    525e:	f000 fd2d 	bl	5cbc <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    5262:	f000 fd4f 	bl	5d04 <vPortExitCritical>

	return xAlreadyYielded;
    5266:	687b      	ldr	r3, [r7, #4]
}
    5268:	4618      	mov	r0, r3
    526a:	370c      	adds	r7, #12
    526c:	46bd      	mov	sp, r7
    526e:	bd90      	pop	{r4, r7, pc}

00005270 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    5270:	b580      	push	{r7, lr}
    5272:	b082      	sub	sp, #8
    5274:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    5276:	f000 fd2f 	bl	5cd8 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    527a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    527e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5282:	681b      	ldr	r3, [r3, #0]
    5284:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    5286:	f000 fd3d 	bl	5d04 <vPortExitCritical>

	return xTicks;
    528a:	687b      	ldr	r3, [r7, #4]
}
    528c:	4618      	mov	r0, r3
    528e:	3708      	adds	r7, #8
    5290:	46bd      	mov	sp, r7
    5292:	bd80      	pop	{r7, pc}

00005294 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    5294:	b480      	push	{r7}
    5296:	b083      	sub	sp, #12
    5298:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    529a:	2300      	movs	r3, #0
    529c:	607b      	str	r3, [r7, #4]
    529e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    52a2:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    52a6:	f241 23b8 	movw	r3, #4792	; 0x12b8
    52aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ae:	681b      	ldr	r3, [r3, #0]
    52b0:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    52b2:	f04f 0000 	mov.w	r0, #0
    52b6:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    52ba:	683b      	ldr	r3, [r7, #0]
}
    52bc:	4618      	mov	r0, r3
    52be:	370c      	adds	r7, #12
    52c0:	46bd      	mov	sp, r7
    52c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    52c6:	4770      	bx	lr

000052c8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    52c8:	b480      	push	{r7}
    52ca:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    52cc:	f241 23b4 	movw	r3, #4788	; 0x12b4
    52d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d4:	681b      	ldr	r3, [r3, #0]
}
    52d6:	4618      	mov	r0, r3
    52d8:	46bd      	mov	sp, r7
    52da:	f85d 7b04 	ldr.w	r7, [sp], #4
    52de:	4770      	bx	lr

000052e0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    52e0:	b580      	push	{r7, lr}
    52e2:	b084      	sub	sp, #16
    52e4:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    52e6:	f241 23c8 	movw	r3, #4808	; 0x12c8
    52ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ee:	681b      	ldr	r3, [r3, #0]
    52f0:	2b00      	cmp	r3, #0
    52f2:	f040 80b9 	bne.w	5468 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    52f6:	f241 23b8 	movw	r3, #4792	; 0x12b8
    52fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52fe:	681b      	ldr	r3, [r3, #0]
    5300:	1c5a      	adds	r2, r3, #1
    5302:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    530a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    530c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5314:	681b      	ldr	r3, [r3, #0]
    5316:	2b00      	cmp	r3, #0
    5318:	d13f      	bne.n	539a <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    531a:	f241 236c 	movw	r3, #4716	; 0x126c
    531e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5322:	681b      	ldr	r3, [r3, #0]
    5324:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    5326:	f241 2370 	movw	r3, #4720	; 0x1270
    532a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    532e:	681a      	ldr	r2, [r3, #0]
    5330:	f241 236c 	movw	r3, #4716	; 0x126c
    5334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5338:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    533a:	f241 2370 	movw	r3, #4720	; 0x1270
    533e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5342:	68fa      	ldr	r2, [r7, #12]
    5344:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    5346:	f241 23d4 	movw	r3, #4820	; 0x12d4
    534a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    534e:	681b      	ldr	r3, [r3, #0]
    5350:	1c5a      	adds	r2, r3, #1
    5352:	f241 23d4 	movw	r3, #4820	; 0x12d4
    5356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535a:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    535c:	f241 236c 	movw	r3, #4716	; 0x126c
    5360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5364:	681b      	ldr	r3, [r3, #0]
    5366:	681b      	ldr	r3, [r3, #0]
    5368:	2b00      	cmp	r3, #0
    536a:	d107      	bne.n	537c <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    536c:	f240 5330 	movw	r3, #1328	; 0x530
    5370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5374:	f04f 32ff 	mov.w	r2, #4294967295
    5378:	601a      	str	r2, [r3, #0]
    537a:	e00e      	b.n	539a <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    537c:	f241 236c 	movw	r3, #4716	; 0x126c
    5380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5384:	681b      	ldr	r3, [r3, #0]
    5386:	68db      	ldr	r3, [r3, #12]
    5388:	68db      	ldr	r3, [r3, #12]
    538a:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    538c:	68bb      	ldr	r3, [r7, #8]
    538e:	685a      	ldr	r2, [r3, #4]
    5390:	f240 5330 	movw	r3, #1328	; 0x530
    5394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5398:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    539a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    539e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a2:	681a      	ldr	r2, [r3, #0]
    53a4:	f240 5330 	movw	r3, #1328	; 0x530
    53a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ac:	681b      	ldr	r3, [r3, #0]
    53ae:	429a      	cmp	r2, r3
    53b0:	d359      	bcc.n	5466 <vTaskIncrementTick+0x186>
    53b2:	f241 236c 	movw	r3, #4716	; 0x126c
    53b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ba:	681b      	ldr	r3, [r3, #0]
    53bc:	681b      	ldr	r3, [r3, #0]
    53be:	2b00      	cmp	r3, #0
    53c0:	d107      	bne.n	53d2 <vTaskIncrementTick+0xf2>
    53c2:	f240 5330 	movw	r3, #1328	; 0x530
    53c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ca:	f04f 32ff 	mov.w	r2, #4294967295
    53ce:	601a      	str	r2, [r3, #0]
    53d0:	e049      	b.n	5466 <vTaskIncrementTick+0x186>
    53d2:	f241 236c 	movw	r3, #4716	; 0x126c
    53d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53da:	681b      	ldr	r3, [r3, #0]
    53dc:	68db      	ldr	r3, [r3, #12]
    53de:	68db      	ldr	r3, [r3, #12]
    53e0:	60bb      	str	r3, [r7, #8]
    53e2:	68bb      	ldr	r3, [r7, #8]
    53e4:	685b      	ldr	r3, [r3, #4]
    53e6:	607b      	str	r3, [r7, #4]
    53e8:	f241 23b8 	movw	r3, #4792	; 0x12b8
    53ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53f0:	681a      	ldr	r2, [r3, #0]
    53f2:	687b      	ldr	r3, [r7, #4]
    53f4:	429a      	cmp	r2, r3
    53f6:	d206      	bcs.n	5406 <vTaskIncrementTick+0x126>
    53f8:	f240 5330 	movw	r3, #1328	; 0x530
    53fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5400:	687a      	ldr	r2, [r7, #4]
    5402:	601a      	str	r2, [r3, #0]
    5404:	e02f      	b.n	5466 <vTaskIncrementTick+0x186>
    5406:	68bb      	ldr	r3, [r7, #8]
    5408:	3304      	adds	r3, #4
    540a:	4618      	mov	r0, r3
    540c:	f7fe feb2 	bl	4174 <vListRemove>
    5410:	68bb      	ldr	r3, [r7, #8]
    5412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5414:	2b00      	cmp	r3, #0
    5416:	d004      	beq.n	5422 <vTaskIncrementTick+0x142>
    5418:	68bb      	ldr	r3, [r7, #8]
    541a:	3318      	adds	r3, #24
    541c:	4618      	mov	r0, r3
    541e:	f7fe fea9 	bl	4174 <vListRemove>
    5422:	68bb      	ldr	r3, [r7, #8]
    5424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5426:	f241 23c0 	movw	r3, #4800	; 0x12c0
    542a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542e:	681b      	ldr	r3, [r3, #0]
    5430:	429a      	cmp	r2, r3
    5432:	d906      	bls.n	5442 <vTaskIncrementTick+0x162>
    5434:	68bb      	ldr	r3, [r7, #8]
    5436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5438:	f241 23c0 	movw	r3, #4800	; 0x12c0
    543c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5440:	601a      	str	r2, [r3, #0]
    5442:	68bb      	ldr	r3, [r7, #8]
    5444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5446:	4613      	mov	r3, r2
    5448:	009b      	lsls	r3, r3, #2
    544a:	4413      	add	r3, r2
    544c:	009b      	lsls	r3, r3, #2
    544e:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5452:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5456:	441a      	add	r2, r3
    5458:	68bb      	ldr	r3, [r7, #8]
    545a:	3304      	adds	r3, #4
    545c:	4610      	mov	r0, r2
    545e:	4619      	mov	r1, r3
    5460:	f7fe fe28 	bl	40b4 <vListInsertEnd>
    5464:	e7a5      	b.n	53b2 <vTaskIncrementTick+0xd2>
    5466:	e00c      	b.n	5482 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    5468:	f241 23cc 	movw	r3, #4812	; 0x12cc
    546c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5470:	681b      	ldr	r3, [r3, #0]
    5472:	1c5a      	adds	r2, r3, #1
    5474:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    547c:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    547e:	f012 f9db 	bl	17838 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    5482:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    548a:	681b      	ldr	r3, [r3, #0]
    548c:	2b00      	cmp	r3, #0
    548e:	d101      	bne.n	5494 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    5490:	f012 f9d2 	bl	17838 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    5494:	3710      	adds	r7, #16
    5496:	46bd      	mov	sp, r7
    5498:	bd80      	pop	{r7, pc}
    549a:	bf00      	nop

0000549c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    549c:	b580      	push	{r7, lr}
    549e:	b082      	sub	sp, #8
    54a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    54a2:	f241 23c8 	movw	r3, #4808	; 0x12c8
    54a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54aa:	681b      	ldr	r3, [r3, #0]
    54ac:	2b00      	cmp	r3, #0
    54ae:	d006      	beq.n	54be <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    54b0:	f241 23d0 	movw	r3, #4816	; 0x12d0
    54b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54b8:	2201      	movs	r2, #1
    54ba:	601a      	str	r2, [r3, #0]
    54bc:	e047      	b.n	554e <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    54be:	f012 f9b5 	bl	1782c <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    54c2:	e00a      	b.n	54da <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    54c4:	f241 23c0 	movw	r3, #4800	; 0x12c0
    54c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54cc:	681b      	ldr	r3, [r3, #0]
    54ce:	1e5a      	subs	r2, r3, #1
    54d0:	f241 23c0 	movw	r3, #4800	; 0x12c0
    54d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d8:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    54da:	f241 23c0 	movw	r3, #4800	; 0x12c0
    54de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54e2:	6819      	ldr	r1, [r3, #0]
    54e4:	f241 12e0 	movw	r2, #4576	; 0x11e0
    54e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54ec:	460b      	mov	r3, r1
    54ee:	009b      	lsls	r3, r3, #2
    54f0:	440b      	add	r3, r1
    54f2:	009b      	lsls	r3, r3, #2
    54f4:	4413      	add	r3, r2
    54f6:	681b      	ldr	r3, [r3, #0]
    54f8:	2b00      	cmp	r3, #0
    54fa:	d0e3      	beq.n	54c4 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    54fc:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5504:	681a      	ldr	r2, [r3, #0]
    5506:	4613      	mov	r3, r2
    5508:	009b      	lsls	r3, r3, #2
    550a:	4413      	add	r3, r2
    550c:	009b      	lsls	r3, r3, #2
    550e:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5512:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5516:	4413      	add	r3, r2
    5518:	607b      	str	r3, [r7, #4]
    551a:	687b      	ldr	r3, [r7, #4]
    551c:	685b      	ldr	r3, [r3, #4]
    551e:	685a      	ldr	r2, [r3, #4]
    5520:	687b      	ldr	r3, [r7, #4]
    5522:	605a      	str	r2, [r3, #4]
    5524:	687b      	ldr	r3, [r7, #4]
    5526:	685a      	ldr	r2, [r3, #4]
    5528:	687b      	ldr	r3, [r7, #4]
    552a:	3308      	adds	r3, #8
    552c:	429a      	cmp	r2, r3
    552e:	d104      	bne.n	553a <vTaskSwitchContext+0x9e>
    5530:	687b      	ldr	r3, [r7, #4]
    5532:	685b      	ldr	r3, [r3, #4]
    5534:	685a      	ldr	r2, [r3, #4]
    5536:	687b      	ldr	r3, [r7, #4]
    5538:	605a      	str	r2, [r3, #4]
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	685b      	ldr	r3, [r3, #4]
    553e:	68da      	ldr	r2, [r3, #12]
    5540:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5548:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    554a:	f012 f969 	bl	17820 <myTraceSwitchedIn>
	}
}
    554e:	3708      	adds	r7, #8
    5550:	46bd      	mov	sp, r7
    5552:	bd80      	pop	{r7, pc}

00005554 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    5554:	b580      	push	{r7, lr}
    5556:	b084      	sub	sp, #16
    5558:	af00      	add	r7, sp, #0
    555a:	6078      	str	r0, [r7, #4]
    555c:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    555e:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5566:	681b      	ldr	r3, [r3, #0]
    5568:	3318      	adds	r3, #24
    556a:	6878      	ldr	r0, [r7, #4]
    556c:	4619      	mov	r1, r3
    556e:	f7fe fdc9 	bl	4104 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5572:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	3304      	adds	r3, #4
    557e:	4618      	mov	r0, r3
    5580:	f7fe fdf8 	bl	4174 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    5584:	683b      	ldr	r3, [r7, #0]
    5586:	f1b3 3fff 	cmp.w	r3, #4294967295
    558a:	d10d      	bne.n	55a8 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    558c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	3304      	adds	r3, #4
    5598:	f241 20a0 	movw	r0, #4768	; 0x12a0
    559c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55a0:	4619      	mov	r1, r3
    55a2:	f7fe fd87 	bl	40b4 <vListInsertEnd>
    55a6:	e00a      	b.n	55be <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    55a8:	f241 23b8 	movw	r3, #4792	; 0x12b8
    55ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b0:	681a      	ldr	r2, [r3, #0]
    55b2:	683b      	ldr	r3, [r7, #0]
    55b4:	4413      	add	r3, r2
    55b6:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    55b8:	68f8      	ldr	r0, [r7, #12]
    55ba:	f000 f99f 	bl	58fc <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    55be:	3710      	adds	r7, #16
    55c0:	46bd      	mov	sp, r7
    55c2:	bd80      	pop	{r7, pc}

000055c4 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    55c4:	b580      	push	{r7, lr}
    55c6:	b084      	sub	sp, #16
    55c8:	af00      	add	r7, sp, #0
    55ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    55cc:	687b      	ldr	r3, [r7, #4]
    55ce:	68db      	ldr	r3, [r3, #12]
    55d0:	68db      	ldr	r3, [r3, #12]
    55d2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    55d4:	68bb      	ldr	r3, [r7, #8]
    55d6:	3318      	adds	r3, #24
    55d8:	4618      	mov	r0, r3
    55da:	f7fe fdcb 	bl	4174 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    55de:	f241 23c8 	movw	r3, #4808	; 0x12c8
    55e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e6:	681b      	ldr	r3, [r3, #0]
    55e8:	2b00      	cmp	r3, #0
    55ea:	d126      	bne.n	563a <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    55ec:	68bb      	ldr	r3, [r7, #8]
    55ee:	3304      	adds	r3, #4
    55f0:	4618      	mov	r0, r3
    55f2:	f7fe fdbf 	bl	4174 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    55f6:	68bb      	ldr	r3, [r7, #8]
    55f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55fa:	f241 23c0 	movw	r3, #4800	; 0x12c0
    55fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5602:	681b      	ldr	r3, [r3, #0]
    5604:	429a      	cmp	r2, r3
    5606:	d906      	bls.n	5616 <xTaskRemoveFromEventList+0x52>
    5608:	68bb      	ldr	r3, [r7, #8]
    560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    560c:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5614:	601a      	str	r2, [r3, #0]
    5616:	68bb      	ldr	r3, [r7, #8]
    5618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    561a:	4613      	mov	r3, r2
    561c:	009b      	lsls	r3, r3, #2
    561e:	4413      	add	r3, r2
    5620:	009b      	lsls	r3, r3, #2
    5622:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5626:	f2c2 0200 	movt	r2, #8192	; 0x2000
    562a:	441a      	add	r2, r3
    562c:	68bb      	ldr	r3, [r7, #8]
    562e:	3304      	adds	r3, #4
    5630:	4610      	mov	r0, r2
    5632:	4619      	mov	r1, r3
    5634:	f7fe fd3e 	bl	40b4 <vListInsertEnd>
    5638:	e008      	b.n	564c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    563a:	68bb      	ldr	r3, [r7, #8]
    563c:	3318      	adds	r3, #24
    563e:	f241 2074 	movw	r0, #4724	; 0x1274
    5642:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5646:	4619      	mov	r1, r3
    5648:	f7fe fd34 	bl	40b4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    564c:	68bb      	ldr	r3, [r7, #8]
    564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5650:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5658:	681b      	ldr	r3, [r3, #0]
    565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    565c:	429a      	cmp	r2, r3
    565e:	d302      	bcc.n	5666 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    5660:	2301      	movs	r3, #1
    5662:	60fb      	str	r3, [r7, #12]
    5664:	e001      	b.n	566a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    5666:	2300      	movs	r3, #0
    5668:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    566a:	68fb      	ldr	r3, [r7, #12]
}
    566c:	4618      	mov	r0, r3
    566e:	3710      	adds	r7, #16
    5670:	46bd      	mov	sp, r7
    5672:	bd80      	pop	{r7, pc}

00005674 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    5674:	b480      	push	{r7}
    5676:	b083      	sub	sp, #12
    5678:	af00      	add	r7, sp, #0
    567a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    567c:	f241 23d4 	movw	r3, #4820	; 0x12d4
    5680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5684:	681a      	ldr	r2, [r3, #0]
    5686:	687b      	ldr	r3, [r7, #4]
    5688:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    568a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    568e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5692:	681a      	ldr	r2, [r3, #0]
    5694:	687b      	ldr	r3, [r7, #4]
    5696:	605a      	str	r2, [r3, #4]
}
    5698:	370c      	adds	r7, #12
    569a:	46bd      	mov	sp, r7
    569c:	f85d 7b04 	ldr.w	r7, [sp], #4
    56a0:	4770      	bx	lr
    56a2:	bf00      	nop

000056a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    56a4:	b580      	push	{r7, lr}
    56a6:	b084      	sub	sp, #16
    56a8:	af00      	add	r7, sp, #0
    56aa:	6078      	str	r0, [r7, #4]
    56ac:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    56ae:	f000 fb13 	bl	5cd8 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    56b2:	683b      	ldr	r3, [r7, #0]
    56b4:	681b      	ldr	r3, [r3, #0]
    56b6:	f1b3 3fff 	cmp.w	r3, #4294967295
    56ba:	d102      	bne.n	56c2 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    56bc:	2300      	movs	r3, #0
    56be:	60fb      	str	r3, [r7, #12]
    56c0:	e035      	b.n	572e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    56c2:	687b      	ldr	r3, [r7, #4]
    56c4:	681a      	ldr	r2, [r3, #0]
    56c6:	f241 23d4 	movw	r3, #4820	; 0x12d4
    56ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ce:	681b      	ldr	r3, [r3, #0]
    56d0:	429a      	cmp	r2, r3
    56d2:	d00b      	beq.n	56ec <xTaskCheckForTimeOut+0x48>
    56d4:	687b      	ldr	r3, [r7, #4]
    56d6:	685a      	ldr	r2, [r3, #4]
    56d8:	f241 23b8 	movw	r3, #4792	; 0x12b8
    56dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e0:	681b      	ldr	r3, [r3, #0]
    56e2:	429a      	cmp	r2, r3
    56e4:	d802      	bhi.n	56ec <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    56e6:	2301      	movs	r3, #1
    56e8:	60fb      	str	r3, [r7, #12]
    56ea:	e020      	b.n	572e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    56ec:	f241 23b8 	movw	r3, #4792	; 0x12b8
    56f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f4:	681a      	ldr	r2, [r3, #0]
    56f6:	687b      	ldr	r3, [r7, #4]
    56f8:	685b      	ldr	r3, [r3, #4]
    56fa:	1ad2      	subs	r2, r2, r3
    56fc:	683b      	ldr	r3, [r7, #0]
    56fe:	681b      	ldr	r3, [r3, #0]
    5700:	429a      	cmp	r2, r3
    5702:	d212      	bcs.n	572a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5704:	683b      	ldr	r3, [r7, #0]
    5706:	681a      	ldr	r2, [r3, #0]
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	6859      	ldr	r1, [r3, #4]
    570c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5714:	681b      	ldr	r3, [r3, #0]
    5716:	1acb      	subs	r3, r1, r3
    5718:	441a      	add	r2, r3
    571a:	683b      	ldr	r3, [r7, #0]
    571c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    571e:	6878      	ldr	r0, [r7, #4]
    5720:	f7ff ffa8 	bl	5674 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5724:	2300      	movs	r3, #0
    5726:	60fb      	str	r3, [r7, #12]
    5728:	e001      	b.n	572e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    572a:	2301      	movs	r3, #1
    572c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    572e:	f000 fae9 	bl	5d04 <vPortExitCritical>

	return xReturn;
    5732:	68fb      	ldr	r3, [r7, #12]
}
    5734:	4618      	mov	r0, r3
    5736:	3710      	adds	r7, #16
    5738:	46bd      	mov	sp, r7
    573a:	bd80      	pop	{r7, pc}

0000573c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    573c:	b480      	push	{r7}
    573e:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    5740:	f241 23d0 	movw	r3, #4816	; 0x12d0
    5744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5748:	2201      	movs	r2, #1
    574a:	601a      	str	r2, [r3, #0]
}
    574c:	46bd      	mov	sp, r7
    574e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5752:	4770      	bx	lr

00005754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5754:	b580      	push	{r7, lr}
    5756:	b082      	sub	sp, #8
    5758:	af00      	add	r7, sp, #0
    575a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    575c:	f000 f886 	bl	586c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    5760:	f000 faac 	bl	5cbc <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    5764:	e7fa      	b.n	575c <prvIdleTask+0x8>
    5766:	bf00      	nop

00005768 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    5768:	b580      	push	{r7, lr}
    576a:	b084      	sub	sp, #16
    576c:	af00      	add	r7, sp, #0
    576e:	60f8      	str	r0, [r7, #12]
    5770:	60b9      	str	r1, [r7, #8]
    5772:	607a      	str	r2, [r7, #4]
    5774:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    5776:	68fb      	ldr	r3, [r7, #12]
    5778:	3334      	adds	r3, #52	; 0x34
    577a:	4618      	mov	r0, r3
    577c:	68b9      	ldr	r1, [r7, #8]
    577e:	2210      	movs	r2, #16
    5780:	f013 f8f6 	bl	18970 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    5784:	68fb      	ldr	r3, [r7, #12]
    5786:	2200      	movs	r2, #0
    5788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    578c:	687b      	ldr	r3, [r7, #4]
    578e:	2b04      	cmp	r3, #4
    5790:	d901      	bls.n	5796 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    5792:	2304      	movs	r3, #4
    5794:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    5796:	68fb      	ldr	r3, [r7, #12]
    5798:	687a      	ldr	r2, [r7, #4]
    579a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    579c:	68fb      	ldr	r3, [r7, #12]
    579e:	687a      	ldr	r2, [r7, #4]
    57a0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    57a2:	68fb      	ldr	r3, [r7, #12]
    57a4:	3304      	adds	r3, #4
    57a6:	4618      	mov	r0, r3
    57a8:	f7fe fc78 	bl	409c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    57ac:	68fb      	ldr	r3, [r7, #12]
    57ae:	3318      	adds	r3, #24
    57b0:	4618      	mov	r0, r3
    57b2:	f7fe fc73 	bl	409c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    57b6:	68fb      	ldr	r3, [r7, #12]
    57b8:	68fa      	ldr	r2, [r7, #12]
    57ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    57bc:	687b      	ldr	r3, [r7, #4]
    57be:	f1c3 0205 	rsb	r2, r3, #5
    57c2:	68fb      	ldr	r3, [r7, #12]
    57c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    57c6:	68fb      	ldr	r3, [r7, #12]
    57c8:	68fa      	ldr	r2, [r7, #12]
    57ca:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    57cc:	3710      	adds	r7, #16
    57ce:	46bd      	mov	sp, r7
    57d0:	bd80      	pop	{r7, pc}
    57d2:	bf00      	nop

000057d4 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    57d4:	b580      	push	{r7, lr}
    57d6:	b082      	sub	sp, #8
    57d8:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    57da:	2300      	movs	r3, #0
    57dc:	607b      	str	r3, [r7, #4]
    57de:	e00f      	b.n	5800 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    57e0:	687a      	ldr	r2, [r7, #4]
    57e2:	4613      	mov	r3, r2
    57e4:	009b      	lsls	r3, r3, #2
    57e6:	4413      	add	r3, r2
    57e8:	009b      	lsls	r3, r3, #2
    57ea:	f241 12e0 	movw	r2, #4576	; 0x11e0
    57ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57f2:	4413      	add	r3, r2
    57f4:	4618      	mov	r0, r3
    57f6:	f7fe fc31 	bl	405c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	3301      	adds	r3, #1
    57fe:	607b      	str	r3, [r7, #4]
    5800:	687b      	ldr	r3, [r7, #4]
    5802:	2b04      	cmp	r3, #4
    5804:	d9ec      	bls.n	57e0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5806:	f241 2044 	movw	r0, #4676	; 0x1244
    580a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    580e:	f7fe fc25 	bl	405c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    5812:	f241 2058 	movw	r0, #4696	; 0x1258
    5816:	f2c2 0000 	movt	r0, #8192	; 0x2000
    581a:	f7fe fc1f 	bl	405c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    581e:	f241 2074 	movw	r0, #4724	; 0x1274
    5822:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5826:	f7fe fc19 	bl	405c <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    582a:	f241 2088 	movw	r0, #4744	; 0x1288
    582e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5832:	f7fe fc13 	bl	405c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    5836:	f241 20a0 	movw	r0, #4768	; 0x12a0
    583a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    583e:	f7fe fc0d 	bl	405c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5842:	f241 236c 	movw	r3, #4716	; 0x126c
    5846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    584a:	f241 2244 	movw	r2, #4676	; 0x1244
    584e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5854:	f241 2370 	movw	r3, #4720	; 0x1270
    5858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    585c:	f241 2258 	movw	r2, #4696	; 0x1258
    5860:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5864:	601a      	str	r2, [r3, #0]
}
    5866:	3708      	adds	r7, #8
    5868:	46bd      	mov	sp, r7
    586a:	bd80      	pop	{r7, pc}

0000586c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    586c:	b580      	push	{r7, lr}
    586e:	b082      	sub	sp, #8
    5870:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    5872:	f241 239c 	movw	r3, #4764	; 0x129c
    5876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    587a:	681b      	ldr	r3, [r3, #0]
    587c:	2b00      	cmp	r3, #0
    587e:	d03a      	beq.n	58f6 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    5880:	f7ff fc4c 	bl	511c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5884:	f241 2388 	movw	r3, #4744	; 0x1288
    5888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    588c:	681b      	ldr	r3, [r3, #0]
    588e:	2b00      	cmp	r3, #0
    5890:	bf14      	ite	ne
    5892:	2300      	movne	r3, #0
    5894:	2301      	moveq	r3, #1
    5896:	b2db      	uxtb	r3, r3
    5898:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    589a:	f7ff fc51 	bl	5140 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    589e:	687b      	ldr	r3, [r7, #4]
    58a0:	2b00      	cmp	r3, #0
    58a2:	d128      	bne.n	58f6 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    58a4:	f000 fa18 	bl	5cd8 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    58a8:	f241 2388 	movw	r3, #4744	; 0x1288
    58ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58b0:	68db      	ldr	r3, [r3, #12]
    58b2:	68db      	ldr	r3, [r3, #12]
    58b4:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    58b6:	683b      	ldr	r3, [r7, #0]
    58b8:	3304      	adds	r3, #4
    58ba:	4618      	mov	r0, r3
    58bc:	f7fe fc5a 	bl	4174 <vListRemove>
					--uxCurrentNumberOfTasks;
    58c0:	f241 23b4 	movw	r3, #4788	; 0x12b4
    58c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c8:	681b      	ldr	r3, [r3, #0]
    58ca:	1e5a      	subs	r2, r3, #1
    58cc:	f241 23b4 	movw	r3, #4788	; 0x12b4
    58d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d4:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    58d6:	f241 239c 	movw	r3, #4764	; 0x129c
    58da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58de:	681b      	ldr	r3, [r3, #0]
    58e0:	1e5a      	subs	r2, r3, #1
    58e2:	f241 239c 	movw	r3, #4764	; 0x129c
    58e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ea:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    58ec:	f000 fa0a 	bl	5d04 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    58f0:	6838      	ldr	r0, [r7, #0]
    58f2:	f000 f879 	bl	59e8 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    58f6:	3708      	adds	r7, #8
    58f8:	46bd      	mov	sp, r7
    58fa:	bd80      	pop	{r7, pc}

000058fc <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    58fc:	b580      	push	{r7, lr}
    58fe:	b082      	sub	sp, #8
    5900:	af00      	add	r7, sp, #0
    5902:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5904:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    590c:	681b      	ldr	r3, [r3, #0]
    590e:	687a      	ldr	r2, [r7, #4]
    5910:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    5912:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    591a:	681b      	ldr	r3, [r3, #0]
    591c:	687a      	ldr	r2, [r7, #4]
    591e:	429a      	cmp	r2, r3
    5920:	d20f      	bcs.n	5942 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5922:	f241 2370 	movw	r3, #4720	; 0x1270
    5926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    592a:	681a      	ldr	r2, [r3, #0]
    592c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5934:	681b      	ldr	r3, [r3, #0]
    5936:	3304      	adds	r3, #4
    5938:	4610      	mov	r0, r2
    593a:	4619      	mov	r1, r3
    593c:	f7fe fbe2 	bl	4104 <vListInsert>
    5940:	e01c      	b.n	597c <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5942:	f241 236c 	movw	r3, #4716	; 0x126c
    5946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    594a:	681a      	ldr	r2, [r3, #0]
    594c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	3304      	adds	r3, #4
    5958:	4610      	mov	r0, r2
    595a:	4619      	mov	r1, r3
    595c:	f7fe fbd2 	bl	4104 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    5960:	f240 5330 	movw	r3, #1328	; 0x530
    5964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5968:	681b      	ldr	r3, [r3, #0]
    596a:	687a      	ldr	r2, [r7, #4]
    596c:	429a      	cmp	r2, r3
    596e:	d205      	bcs.n	597c <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    5970:	f240 5330 	movw	r3, #1328	; 0x530
    5974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5978:	687a      	ldr	r2, [r7, #4]
    597a:	601a      	str	r2, [r3, #0]
		}
	}
}
    597c:	3708      	adds	r7, #8
    597e:	46bd      	mov	sp, r7
    5980:	bd80      	pop	{r7, pc}
    5982:	bf00      	nop

00005984 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5984:	b580      	push	{r7, lr}
    5986:	b084      	sub	sp, #16
    5988:	af00      	add	r7, sp, #0
    598a:	4603      	mov	r3, r0
    598c:	6039      	str	r1, [r7, #0]
    598e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5990:	2050      	movs	r0, #80	; 0x50
    5992:	f000 fa1b 	bl	5dcc <pvPortMalloc>
    5996:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5998:	68fb      	ldr	r3, [r7, #12]
    599a:	2b00      	cmp	r3, #0
    599c:	d01f      	beq.n	59de <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    599e:	683b      	ldr	r3, [r7, #0]
    59a0:	2b00      	cmp	r3, #0
    59a2:	d106      	bne.n	59b2 <prvAllocateTCBAndStack+0x2e>
    59a4:	88fb      	ldrh	r3, [r7, #6]
    59a6:	009b      	lsls	r3, r3, #2
    59a8:	4618      	mov	r0, r3
    59aa:	f000 fa0f 	bl	5dcc <pvPortMalloc>
    59ae:	4603      	mov	r3, r0
    59b0:	e000      	b.n	59b4 <prvAllocateTCBAndStack+0x30>
    59b2:	683b      	ldr	r3, [r7, #0]
    59b4:	68fa      	ldr	r2, [r7, #12]
    59b6:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    59b8:	68fb      	ldr	r3, [r7, #12]
    59ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    59bc:	2b00      	cmp	r3, #0
    59be:	d105      	bne.n	59cc <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    59c0:	68f8      	ldr	r0, [r7, #12]
    59c2:	f000 fac7 	bl	5f54 <vPortFree>
			pxNewTCB = NULL;
    59c6:	2300      	movs	r3, #0
    59c8:	60fb      	str	r3, [r7, #12]
    59ca:	e008      	b.n	59de <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    59cc:	68fb      	ldr	r3, [r7, #12]
    59ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    59d0:	88fb      	ldrh	r3, [r7, #6]
    59d2:	009b      	lsls	r3, r3, #2
    59d4:	4610      	mov	r0, r2
    59d6:	21a5      	movs	r1, #165	; 0xa5
    59d8:	461a      	mov	r2, r3
    59da:	f012 ff79 	bl	188d0 <memset>
		}
	}

	return pxNewTCB;
    59de:	68fb      	ldr	r3, [r7, #12]
}
    59e0:	4618      	mov	r0, r3
    59e2:	3710      	adds	r7, #16
    59e4:	46bd      	mov	sp, r7
    59e6:	bd80      	pop	{r7, pc}

000059e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    59e8:	b580      	push	{r7, lr}
    59ea:	b082      	sub	sp, #8
    59ec:	af00      	add	r7, sp, #0
    59ee:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    59f4:	4618      	mov	r0, r3
    59f6:	f000 faad 	bl	5f54 <vPortFree>
		vPortFree( pxTCB );
    59fa:	6878      	ldr	r0, [r7, #4]
    59fc:	f000 faaa 	bl	5f54 <vPortFree>
	}
    5a00:	3708      	adds	r7, #8
    5a02:	46bd      	mov	sp, r7
    5a04:	bd80      	pop	{r7, pc}
    5a06:	bf00      	nop

00005a08 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5a08:	b480      	push	{r7}
    5a0a:	b083      	sub	sp, #12
    5a0c:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5a0e:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a16:	681b      	ldr	r3, [r3, #0]
    5a18:	607b      	str	r3, [r7, #4]

		return xReturn;
    5a1a:	687b      	ldr	r3, [r7, #4]
	}
    5a1c:	4618      	mov	r0, r3
    5a1e:	370c      	adds	r7, #12
    5a20:	46bd      	mov	sp, r7
    5a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a26:	4770      	bx	lr

00005a28 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5a28:	b580      	push	{r7, lr}
    5a2a:	b084      	sub	sp, #16
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5a34:	68fb      	ldr	r3, [r7, #12]
    5a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a38:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a40:	681b      	ldr	r3, [r3, #0]
    5a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a44:	429a      	cmp	r2, r3
    5a46:	d24f      	bcs.n	5ae8 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5a48:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a50:	681b      	ldr	r3, [r3, #0]
    5a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a54:	f1c3 0205 	rsb	r2, r3, #5
    5a58:	68fb      	ldr	r3, [r7, #12]
    5a5a:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5a5c:	68fb      	ldr	r3, [r7, #12]
    5a5e:	6959      	ldr	r1, [r3, #20]
    5a60:	68fb      	ldr	r3, [r7, #12]
    5a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a64:	4613      	mov	r3, r2
    5a66:	009b      	lsls	r3, r3, #2
    5a68:	4413      	add	r3, r2
    5a6a:	009b      	lsls	r3, r3, #2
    5a6c:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5a70:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a74:	4413      	add	r3, r2
    5a76:	4299      	cmp	r1, r3
    5a78:	d12e      	bne.n	5ad8 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5a7a:	68fb      	ldr	r3, [r7, #12]
    5a7c:	3304      	adds	r3, #4
    5a7e:	4618      	mov	r0, r3
    5a80:	f7fe fb78 	bl	4174 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5a84:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a8c:	681b      	ldr	r3, [r3, #0]
    5a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a90:	68fb      	ldr	r3, [r7, #12]
    5a92:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5a94:	68fb      	ldr	r3, [r7, #12]
    5a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a98:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa0:	681b      	ldr	r3, [r3, #0]
    5aa2:	429a      	cmp	r2, r3
    5aa4:	d906      	bls.n	5ab4 <vTaskPriorityInherit+0x8c>
    5aa6:	68fb      	ldr	r3, [r7, #12]
    5aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5aaa:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab2:	601a      	str	r2, [r3, #0]
    5ab4:	68fb      	ldr	r3, [r7, #12]
    5ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ab8:	4613      	mov	r3, r2
    5aba:	009b      	lsls	r3, r3, #2
    5abc:	4413      	add	r3, r2
    5abe:	009b      	lsls	r3, r3, #2
    5ac0:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5ac4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ac8:	441a      	add	r2, r3
    5aca:	68fb      	ldr	r3, [r7, #12]
    5acc:	3304      	adds	r3, #4
    5ace:	4610      	mov	r0, r2
    5ad0:	4619      	mov	r1, r3
    5ad2:	f7fe faef 	bl	40b4 <vListInsertEnd>
    5ad6:	e007      	b.n	5ae8 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5ad8:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ae0:	681b      	ldr	r3, [r3, #0]
    5ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ae4:	68fb      	ldr	r3, [r7, #12]
    5ae6:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5ae8:	3710      	adds	r7, #16
    5aea:	46bd      	mov	sp, r7
    5aec:	bd80      	pop	{r7, pc}
    5aee:	bf00      	nop

00005af0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5af0:	b580      	push	{r7, lr}
    5af2:	b084      	sub	sp, #16
    5af4:	af00      	add	r7, sp, #0
    5af6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5af8:	687b      	ldr	r3, [r7, #4]
    5afa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	2b00      	cmp	r3, #0
    5b00:	d035      	beq.n	5b6e <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5b02:	68fb      	ldr	r3, [r7, #12]
    5b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b06:	68fb      	ldr	r3, [r7, #12]
    5b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5b0a:	429a      	cmp	r2, r3
    5b0c:	d02f      	beq.n	5b6e <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5b0e:	68fb      	ldr	r3, [r7, #12]
    5b10:	3304      	adds	r3, #4
    5b12:	4618      	mov	r0, r3
    5b14:	f7fe fb2e 	bl	4174 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5b18:	68fb      	ldr	r3, [r7, #12]
    5b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5b1c:	68fb      	ldr	r3, [r7, #12]
    5b1e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5b20:	68fb      	ldr	r3, [r7, #12]
    5b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b24:	f1c3 0205 	rsb	r2, r3, #5
    5b28:	68fb      	ldr	r3, [r7, #12]
    5b2a:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5b2c:	68fb      	ldr	r3, [r7, #12]
    5b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b30:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b38:	681b      	ldr	r3, [r3, #0]
    5b3a:	429a      	cmp	r2, r3
    5b3c:	d906      	bls.n	5b4c <vTaskPriorityDisinherit+0x5c>
    5b3e:	68fb      	ldr	r3, [r7, #12]
    5b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b42:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b4a:	601a      	str	r2, [r3, #0]
    5b4c:	68fb      	ldr	r3, [r7, #12]
    5b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b50:	4613      	mov	r3, r2
    5b52:	009b      	lsls	r3, r3, #2
    5b54:	4413      	add	r3, r2
    5b56:	009b      	lsls	r3, r3, #2
    5b58:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5b5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b60:	441a      	add	r2, r3
    5b62:	68fb      	ldr	r3, [r7, #12]
    5b64:	3304      	adds	r3, #4
    5b66:	4610      	mov	r0, r2
    5b68:	4619      	mov	r1, r3
    5b6a:	f7fe faa3 	bl	40b4 <vListInsertEnd>
			}
		}
	}
    5b6e:	3710      	adds	r7, #16
    5b70:	46bd      	mov	sp, r7
    5b72:	bd80      	pop	{r7, pc}

00005b74 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5b74:	b480      	push	{r7}
    5b76:	b083      	sub	sp, #12
    5b78:	af00      	add	r7, sp, #0
    5b7a:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5b7c:	687b      	ldr	r3, [r7, #4]
    5b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5b80:	4618      	mov	r0, r3
    5b82:	370c      	adds	r7, #12
    5b84:	46bd      	mov	sp, r7
    5b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b8a:	4770      	bx	lr

00005b8c <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5b8c:	b480      	push	{r7}
    5b8e:	b083      	sub	sp, #12
    5b90:	af00      	add	r7, sp, #0
    5b92:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5b94:	687b      	ldr	r3, [r7, #4]
    5b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5b98:	4618      	mov	r0, r3
    5b9a:	370c      	adds	r7, #12
    5b9c:	46bd      	mov	sp, r7
    5b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ba2:	4770      	bx	lr

00005ba4 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5ba4:	b480      	push	{r7}
    5ba6:	b083      	sub	sp, #12
    5ba8:	af00      	add	r7, sp, #0
    5baa:	6078      	str	r0, [r7, #4]
    5bac:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5bae:	687b      	ldr	r3, [r7, #4]
    5bb0:	683a      	ldr	r2, [r7, #0]
    5bb2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5bb4:	370c      	adds	r7, #12
    5bb6:	46bd      	mov	sp, r7
    5bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bbc:	4770      	bx	lr
    5bbe:	bf00      	nop

00005bc0 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5bc0:	b480      	push	{r7}
    5bc2:	b083      	sub	sp, #12
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	6078      	str	r0, [r7, #4]
    5bc8:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5bca:	687b      	ldr	r3, [r7, #4]
    5bcc:	683a      	ldr	r2, [r7, #0]
    5bce:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5bd0:	370c      	adds	r7, #12
    5bd2:	46bd      	mov	sp, r7
    5bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bd8:	4770      	bx	lr
    5bda:	bf00      	nop

00005bdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5bdc:	b480      	push	{r7}
    5bde:	b085      	sub	sp, #20
    5be0:	af00      	add	r7, sp, #0
    5be2:	60f8      	str	r0, [r7, #12]
    5be4:	60b9      	str	r1, [r7, #8]
    5be6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5be8:	68fb      	ldr	r3, [r7, #12]
    5bea:	3b04      	subs	r3, #4
    5bec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5bee:	68fb      	ldr	r3, [r7, #12]
    5bf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5bf6:	68fb      	ldr	r3, [r7, #12]
    5bf8:	3b04      	subs	r3, #4
    5bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5bfc:	68ba      	ldr	r2, [r7, #8]
    5bfe:	68fb      	ldr	r3, [r7, #12]
    5c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5c02:	68fb      	ldr	r3, [r7, #12]
    5c04:	3b04      	subs	r3, #4
    5c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5c08:	68fb      	ldr	r3, [r7, #12]
    5c0a:	2200      	movs	r2, #0
    5c0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5c0e:	68fb      	ldr	r3, [r7, #12]
    5c10:	3b14      	subs	r3, #20
    5c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5c14:	687a      	ldr	r2, [r7, #4]
    5c16:	68fb      	ldr	r3, [r7, #12]
    5c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5c1a:	68fb      	ldr	r3, [r7, #12]
    5c1c:	3b20      	subs	r3, #32
    5c1e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5c20:	68fb      	ldr	r3, [r7, #12]
}
    5c22:	4618      	mov	r0, r3
    5c24:	3714      	adds	r7, #20
    5c26:	46bd      	mov	sp, r7
    5c28:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c2c:	4770      	bx	lr
    5c2e:	bf00      	nop

00005c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5c30:	4b06      	ldr	r3, [pc, #24]	; (5c4c <pxCurrentTCBConst2>)
    5c32:	6819      	ldr	r1, [r3, #0]
    5c34:	6808      	ldr	r0, [r1, #0]
    5c36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5c3a:	f380 8809 	msr	PSP, r0
    5c3e:	f04f 0000 	mov.w	r0, #0
    5c42:	f380 8811 	msr	BASEPRI, r0
    5c46:	f04e 0e0d 	orr.w	lr, lr, #13
    5c4a:	4770      	bx	lr

00005c4c <pxCurrentTCBConst2>:
    5c4c:	200011dc 	.word	0x200011dc

00005c50 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5c50:	485d      	ldr	r0, [pc, #372]	; (5dc8 <prvSetupTimerInterrupt+0x2c>)
    5c52:	6800      	ldr	r0, [r0, #0]
    5c54:	6800      	ldr	r0, [r0, #0]
    5c56:	f380 8808 	msr	MSP, r0
    5c5a:	b662      	cpsie	i
    5c5c:	df00      	svc	0
    5c5e:	bf00      	nop

00005c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5c60:	b580      	push	{r7, lr}
    5c62:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5c64:	f64e 5320 	movw	r3, #60704	; 0xed20
    5c68:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c6c:	f64e 5220 	movw	r2, #60704	; 0xed20
    5c70:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5c74:	6812      	ldr	r2, [r2, #0]
    5c76:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5c7a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5c7c:	f64e 5320 	movw	r3, #60704	; 0xed20
    5c80:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c84:	f64e 5220 	movw	r2, #60704	; 0xed20
    5c88:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5c8c:	6812      	ldr	r2, [r2, #0]
    5c8e:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5c92:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5c94:	f000 f882 	bl	5d9c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5c98:	f240 5334 	movw	r3, #1332	; 0x534
    5c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca0:	2200      	movs	r2, #0
    5ca2:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5ca4:	f7ff ffd4 	bl	5c50 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5ca8:	2300      	movs	r3, #0
}
    5caa:	4618      	mov	r0, r3
    5cac:	bd80      	pop	{r7, pc}
    5cae:	bf00      	nop

00005cb0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5cb0:	b480      	push	{r7}
    5cb2:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5cb4:	46bd      	mov	sp, r7
    5cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cba:	4770      	bx	lr

00005cbc <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5cbc:	b480      	push	{r7}
    5cbe:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5cc0:	f64e 5304 	movw	r3, #60676	; 0xed04
    5cc4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5ccc:	601a      	str	r2, [r3, #0]
}
    5cce:	46bd      	mov	sp, r7
    5cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cd4:	4770      	bx	lr
    5cd6:	bf00      	nop

00005cd8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5cd8:	b480      	push	{r7}
    5cda:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5cdc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5ce0:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5ce4:	f240 5334 	movw	r3, #1332	; 0x534
    5ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cec:	681b      	ldr	r3, [r3, #0]
    5cee:	1c5a      	adds	r2, r3, #1
    5cf0:	f240 5334 	movw	r3, #1332	; 0x534
    5cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cf8:	601a      	str	r2, [r3, #0]
}
    5cfa:	46bd      	mov	sp, r7
    5cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d00:	4770      	bx	lr
    5d02:	bf00      	nop

00005d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5d04:	b480      	push	{r7}
    5d06:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5d08:	f240 5334 	movw	r3, #1332	; 0x534
    5d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d10:	681b      	ldr	r3, [r3, #0]
    5d12:	1e5a      	subs	r2, r3, #1
    5d14:	f240 5334 	movw	r3, #1332	; 0x534
    5d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d1c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5d1e:	f240 5334 	movw	r3, #1332	; 0x534
    5d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d26:	681b      	ldr	r3, [r3, #0]
    5d28:	2b00      	cmp	r3, #0
    5d2a:	d103      	bne.n	5d34 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5d2c:	f04f 0000 	mov.w	r0, #0
    5d30:	f380 8811 	msr	BASEPRI, r0
	}
}
    5d34:	46bd      	mov	sp, r7
    5d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d3a:	4770      	bx	lr

00005d3c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5d3c:	f3ef 8009 	mrs	r0, PSP
    5d40:	4b0c      	ldr	r3, [pc, #48]	; (5d74 <pxCurrentTCBConst>)
    5d42:	681a      	ldr	r2, [r3, #0]
    5d44:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5d48:	6010      	str	r0, [r2, #0]
    5d4a:	e92d 4008 	stmdb	sp!, {r3, lr}
    5d4e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5d52:	f380 8811 	msr	BASEPRI, r0
    5d56:	f7ff fba1 	bl	549c <vTaskSwitchContext>
    5d5a:	f04f 0000 	mov.w	r0, #0
    5d5e:	f380 8811 	msr	BASEPRI, r0
    5d62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5d66:	6819      	ldr	r1, [r3, #0]
    5d68:	6808      	ldr	r0, [r1, #0]
    5d6a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5d6e:	f380 8809 	msr	PSP, r0
    5d72:	4770      	bx	lr

00005d74 <pxCurrentTCBConst>:
    5d74:	200011dc 	.word	0x200011dc

00005d78 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5d78:	b580      	push	{r7, lr}
    5d7a:	b082      	sub	sp, #8
    5d7c:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5d7e:	2300      	movs	r3, #0
    5d80:	607b      	str	r3, [r7, #4]
    5d82:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5d86:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5d8a:	f7ff faa9 	bl	52e0 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5d8e:	f04f 0000 	mov.w	r0, #0
    5d92:	f380 8811 	msr	BASEPRI, r0
}
    5d96:	3708      	adds	r7, #8
    5d98:	46bd      	mov	sp, r7
    5d9a:	bd80      	pop	{r7, pc}

00005d9c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5d9c:	b480      	push	{r7}
    5d9e:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5da0:	f24e 0314 	movw	r3, #57364	; 0xe014
    5da4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5da8:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5dac:	f2c0 0203 	movt	r2, #3
    5db0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5db2:	f24e 0310 	movw	r3, #57360	; 0xe010
    5db6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5dba:	2207      	movs	r2, #7
    5dbc:	601a      	str	r2, [r3, #0]
}
    5dbe:	46bd      	mov	sp, r7
    5dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dc4:	4770      	bx	lr
    5dc6:	0000      	.short	0x0000
    5dc8:	e000ed08 	.word	0xe000ed08

00005dcc <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5dcc:	b580      	push	{r7, lr}
    5dce:	b08a      	sub	sp, #40	; 0x28
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5dd4:	2300      	movs	r3, #0
    5dd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5dd8:	f7ff f9a0 	bl	511c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5ddc:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5de4:	681b      	ldr	r3, [r3, #0]
    5de6:	2b00      	cmp	r3, #0
    5de8:	d130      	bne.n	5e4c <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5dea:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5df2:	f241 22e0 	movw	r2, #4832	; 0x12e0
    5df6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5dfa:	601a      	str	r2, [r3, #0]
    5dfc:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e04:	2200      	movs	r2, #0
    5e06:	605a      	str	r2, [r3, #4]
    5e08:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e10:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5e14:	605a      	str	r2, [r3, #4]
    5e16:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e1e:	2200      	movs	r2, #0
    5e20:	601a      	str	r2, [r3, #0]
    5e22:	f241 23e0 	movw	r3, #4832	; 0x12e0
    5e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e2a:	617b      	str	r3, [r7, #20]
    5e2c:	697b      	ldr	r3, [r7, #20]
    5e2e:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5e32:	605a      	str	r2, [r3, #4]
    5e34:	697a      	ldr	r2, [r7, #20]
    5e36:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e3e:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5e40:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e48:	2201      	movs	r2, #1
    5e4a:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5e4c:	687b      	ldr	r3, [r7, #4]
    5e4e:	2b00      	cmp	r3, #0
    5e50:	d00d      	beq.n	5e6e <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5e52:	2310      	movs	r3, #16
    5e54:	687a      	ldr	r2, [r7, #4]
    5e56:	4413      	add	r3, r2
    5e58:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5e5a:	687b      	ldr	r3, [r7, #4]
    5e5c:	f003 0307 	and.w	r3, r3, #7
    5e60:	2b00      	cmp	r3, #0
    5e62:	d004      	beq.n	5e6e <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5e64:	687b      	ldr	r3, [r7, #4]
    5e66:	f023 0307 	bic.w	r3, r3, #7
    5e6a:	3308      	adds	r3, #8
    5e6c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5e6e:	687b      	ldr	r3, [r7, #4]
    5e70:	2b00      	cmp	r3, #0
    5e72:	d068      	beq.n	5f46 <pvPortMalloc+0x17a>
    5e74:	687b      	ldr	r3, [r7, #4]
    5e76:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5e7a:	d264      	bcs.n	5f46 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5e7c:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e84:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5e86:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e8e:	681b      	ldr	r3, [r3, #0]
    5e90:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5e92:	e004      	b.n	5e9e <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e96:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e9a:	681b      	ldr	r3, [r3, #0]
    5e9c:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ea0:	685a      	ldr	r2, [r3, #4]
    5ea2:	687b      	ldr	r3, [r7, #4]
    5ea4:	429a      	cmp	r2, r3
    5ea6:	d203      	bcs.n	5eb0 <pvPortMalloc+0xe4>
    5ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5eaa:	681b      	ldr	r3, [r3, #0]
    5eac:	2b00      	cmp	r3, #0
    5eae:	d1f1      	bne.n	5e94 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5eb2:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eba:	429a      	cmp	r2, r3
    5ebc:	d043      	beq.n	5f46 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5ebe:	6a3b      	ldr	r3, [r7, #32]
    5ec0:	681a      	ldr	r2, [r3, #0]
    5ec2:	2310      	movs	r3, #16
    5ec4:	4413      	add	r3, r2
    5ec6:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5eca:	681a      	ldr	r2, [r3, #0]
    5ecc:	6a3b      	ldr	r3, [r7, #32]
    5ece:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ed2:	685a      	ldr	r2, [r3, #4]
    5ed4:	687b      	ldr	r3, [r7, #4]
    5ed6:	1ad2      	subs	r2, r2, r3
    5ed8:	2310      	movs	r3, #16
    5eda:	005b      	lsls	r3, r3, #1
    5edc:	429a      	cmp	r2, r3
    5ede:	d925      	bls.n	5f2c <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5ee2:	687b      	ldr	r3, [r7, #4]
    5ee4:	4413      	add	r3, r2
    5ee6:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5eea:	685a      	ldr	r2, [r3, #4]
    5eec:	687b      	ldr	r3, [r7, #4]
    5eee:	1ad2      	subs	r2, r2, r3
    5ef0:	693b      	ldr	r3, [r7, #16]
    5ef2:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ef6:	687a      	ldr	r2, [r7, #4]
    5ef8:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5efa:	693b      	ldr	r3, [r7, #16]
    5efc:	685b      	ldr	r3, [r3, #4]
    5efe:	60fb      	str	r3, [r7, #12]
    5f00:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f08:	61bb      	str	r3, [r7, #24]
    5f0a:	e002      	b.n	5f12 <pvPortMalloc+0x146>
    5f0c:	69bb      	ldr	r3, [r7, #24]
    5f0e:	681b      	ldr	r3, [r3, #0]
    5f10:	61bb      	str	r3, [r7, #24]
    5f12:	69bb      	ldr	r3, [r7, #24]
    5f14:	681b      	ldr	r3, [r3, #0]
    5f16:	685a      	ldr	r2, [r3, #4]
    5f18:	68fb      	ldr	r3, [r7, #12]
    5f1a:	429a      	cmp	r2, r3
    5f1c:	d3f6      	bcc.n	5f0c <pvPortMalloc+0x140>
    5f1e:	69bb      	ldr	r3, [r7, #24]
    5f20:	681a      	ldr	r2, [r3, #0]
    5f22:	693b      	ldr	r3, [r7, #16]
    5f24:	601a      	str	r2, [r3, #0]
    5f26:	69bb      	ldr	r3, [r7, #24]
    5f28:	693a      	ldr	r2, [r7, #16]
    5f2a:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5f2c:	f240 5338 	movw	r3, #1336	; 0x538
    5f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f34:	681a      	ldr	r2, [r3, #0]
    5f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f38:	685b      	ldr	r3, [r3, #4]
    5f3a:	1ad2      	subs	r2, r2, r3
    5f3c:	f240 5338 	movw	r3, #1336	; 0x538
    5f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f44:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5f46:	f7ff f8fb 	bl	5140 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5f4a:	69fb      	ldr	r3, [r7, #28]
}
    5f4c:	4618      	mov	r0, r3
    5f4e:	3728      	adds	r7, #40	; 0x28
    5f50:	46bd      	mov	sp, r7
    5f52:	bd80      	pop	{r7, pc}

00005f54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5f54:	b580      	push	{r7, lr}
    5f56:	b086      	sub	sp, #24
    5f58:	af00      	add	r7, sp, #0
    5f5a:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5f5c:	687b      	ldr	r3, [r7, #4]
    5f5e:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5f60:	687b      	ldr	r3, [r7, #4]
    5f62:	2b00      	cmp	r3, #0
    5f64:	d030      	beq.n	5fc8 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5f66:	2310      	movs	r3, #16
    5f68:	425b      	negs	r3, r3
    5f6a:	693a      	ldr	r2, [r7, #16]
    5f6c:	4413      	add	r3, r2
    5f6e:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5f70:	693b      	ldr	r3, [r7, #16]
    5f72:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5f74:	f7ff f8d2 	bl	511c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5f78:	68fb      	ldr	r3, [r7, #12]
    5f7a:	685b      	ldr	r3, [r3, #4]
    5f7c:	60bb      	str	r3, [r7, #8]
    5f7e:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f86:	617b      	str	r3, [r7, #20]
    5f88:	e002      	b.n	5f90 <vPortFree+0x3c>
    5f8a:	697b      	ldr	r3, [r7, #20]
    5f8c:	681b      	ldr	r3, [r3, #0]
    5f8e:	617b      	str	r3, [r7, #20]
    5f90:	697b      	ldr	r3, [r7, #20]
    5f92:	681b      	ldr	r3, [r3, #0]
    5f94:	685a      	ldr	r2, [r3, #4]
    5f96:	68bb      	ldr	r3, [r7, #8]
    5f98:	429a      	cmp	r2, r3
    5f9a:	d3f6      	bcc.n	5f8a <vPortFree+0x36>
    5f9c:	697b      	ldr	r3, [r7, #20]
    5f9e:	681a      	ldr	r2, [r3, #0]
    5fa0:	68fb      	ldr	r3, [r7, #12]
    5fa2:	601a      	str	r2, [r3, #0]
    5fa4:	697b      	ldr	r3, [r7, #20]
    5fa6:	68fa      	ldr	r2, [r7, #12]
    5fa8:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5faa:	68fb      	ldr	r3, [r7, #12]
    5fac:	685a      	ldr	r2, [r3, #4]
    5fae:	f240 5338 	movw	r3, #1336	; 0x538
    5fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fb6:	681b      	ldr	r3, [r3, #0]
    5fb8:	441a      	add	r2, r3
    5fba:	f240 5338 	movw	r3, #1336	; 0x538
    5fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc2:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5fc4:	f7ff f8bc 	bl	5140 <xTaskResumeAll>
	}
}
    5fc8:	3718      	adds	r7, #24
    5fca:	46bd      	mov	sp, r7
    5fcc:	bd80      	pop	{r7, pc}
    5fce:	bf00      	nop

00005fd0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5fd0:	b480      	push	{r7}
    5fd2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5fd4:	f240 5338 	movw	r3, #1336	; 0x538
    5fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fdc:	681b      	ldr	r3, [r3, #0]
}
    5fde:	4618      	mov	r0, r3
    5fe0:	46bd      	mov	sp, r7
    5fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fe6:	4770      	bx	lr

00005fe8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5fe8:	b480      	push	{r7}
    5fea:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5fec:	46bd      	mov	sp, r7
    5fee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ff2:	4770      	bx	lr
    5ff4:	0000      	movs	r0, r0
	...

00005ff8 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5ff8:	b580      	push	{r7, lr}
    5ffa:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5ffc:	f24c 3312 	movw	r3, #49938	; 0xc312
    6000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6004:	781b      	ldrb	r3, [r3, #0]
    6006:	2b00      	cmp	r3, #0
    6008:	f040 815d 	bne.w	62c6 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    600c:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
    6010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6014:	881b      	ldrh	r3, [r3, #0]
    6016:	2b09      	cmp	r3, #9
    6018:	f201 8145 	bhi.w	72a6 <ground_calibrate+0x12ae>
    601c:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    6020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6024:	781b      	ldrb	r3, [r3, #0]
    6026:	2b01      	cmp	r3, #1
    6028:	f041 813d 	bne.w	72a6 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    602c:	f24c 3312 	movw	r3, #49938	; 0xc312
    6030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6034:	2201      	movs	r2, #1
    6036:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    6038:	f24c 3319 	movw	r3, #49945	; 0xc319
    603c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6040:	781a      	ldrb	r2, [r3, #0]
    6042:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    604a:	781b      	ldrb	r3, [r3, #0]
    604c:	b2db      	uxtb	r3, r3
    604e:	429a      	cmp	r2, r3
    6050:	d313      	bcc.n	607a <ground_calibrate+0x82>
    6052:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    605a:	781b      	ldrb	r3, [r3, #0]
    605c:	b2db      	uxtb	r3, r3
    605e:	461a      	mov	r2, r3
    6060:	f24c 3319 	movw	r3, #49945	; 0xc319
    6064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6068:	781b      	ldrb	r3, [r3, #0]
    606a:	1ad3      	subs	r3, r2, r3
    606c:	33ff      	adds	r3, #255	; 0xff
    606e:	2b04      	cmp	r3, #4
    6070:	bfd4      	ite	le
    6072:	2300      	movle	r3, #0
    6074:	2301      	movgt	r3, #1
    6076:	b2db      	uxtb	r3, r3
    6078:	e011      	b.n	609e <ground_calibrate+0xa6>
    607a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    607e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6082:	781b      	ldrb	r3, [r3, #0]
    6084:	b2db      	uxtb	r3, r3
    6086:	461a      	mov	r2, r3
    6088:	f24c 3319 	movw	r3, #49945	; 0xc319
    608c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6090:	781b      	ldrb	r3, [r3, #0]
    6092:	1ad3      	subs	r3, r2, r3
    6094:	2b04      	cmp	r3, #4
    6096:	bfd4      	ite	le
    6098:	2300      	movle	r3, #0
    609a:	2301      	movgt	r3, #1
    609c:	b2db      	uxtb	r3, r3
    609e:	2b00      	cmp	r3, #0
    60a0:	f000 8103 	beq.w	62aa <ground_calibrate+0x2b2>
    60a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    60a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ac:	781b      	ldrb	r3, [r3, #0]
    60ae:	461a      	mov	r2, r3
    60b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    60b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60b8:	2105      	movs	r1, #5
    60ba:	5499      	strb	r1, [r3, r2]
    60bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    60c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c4:	781b      	ldrb	r3, [r3, #0]
    60c6:	3301      	adds	r3, #1
    60c8:	b2da      	uxtb	r2, r3
    60ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    60ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d2:	701a      	strb	r2, [r3, #0]
    60d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    60d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60dc:	781b      	ldrb	r3, [r3, #0]
    60de:	2bff      	cmp	r3, #255	; 0xff
    60e0:	d105      	bne.n	60ee <ground_calibrate+0xf6>
    60e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    60e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ea:	2200      	movs	r2, #0
    60ec:	701a      	strb	r2, [r3, #0]
    60ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    60f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f6:	781b      	ldrb	r3, [r3, #0]
    60f8:	461a      	mov	r2, r3
    60fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    60fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6102:	2102      	movs	r1, #2
    6104:	5499      	strb	r1, [r3, r2]
    6106:	f24c 3319 	movw	r3, #49945	; 0xc319
    610a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610e:	781b      	ldrb	r3, [r3, #0]
    6110:	3301      	adds	r3, #1
    6112:	b2da      	uxtb	r2, r3
    6114:	f24c 3319 	movw	r3, #49945	; 0xc319
    6118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    611c:	701a      	strb	r2, [r3, #0]
    611e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6126:	781b      	ldrb	r3, [r3, #0]
    6128:	2bff      	cmp	r3, #255	; 0xff
    612a:	d105      	bne.n	6138 <ground_calibrate+0x140>
    612c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6134:	2200      	movs	r2, #0
    6136:	701a      	strb	r2, [r3, #0]
    6138:	f24c 431d 	movw	r3, #50205	; 0xc41d
    613c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6140:	2202      	movs	r2, #2
    6142:	701a      	strb	r2, [r3, #0]
    6144:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614c:	2202      	movs	r2, #2
    614e:	701a      	strb	r2, [r3, #0]
    6150:	f24c 3319 	movw	r3, #49945	; 0xc319
    6154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6158:	781b      	ldrb	r3, [r3, #0]
    615a:	461a      	mov	r2, r3
    615c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6164:	7819      	ldrb	r1, [r3, #0]
    6166:	f24c 331c 	movw	r3, #49948	; 0xc31c
    616a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    616e:	5499      	strb	r1, [r3, r2]
    6170:	f24c 3319 	movw	r3, #49945	; 0xc319
    6174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6178:	781b      	ldrb	r3, [r3, #0]
    617a:	3301      	adds	r3, #1
    617c:	b2da      	uxtb	r2, r3
    617e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6186:	701a      	strb	r2, [r3, #0]
    6188:	f24c 3319 	movw	r3, #49945	; 0xc319
    618c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6190:	781b      	ldrb	r3, [r3, #0]
    6192:	2bff      	cmp	r3, #255	; 0xff
    6194:	d105      	bne.n	61a2 <ground_calibrate+0x1aa>
    6196:	f24c 3319 	movw	r3, #49945	; 0xc319
    619a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    619e:	2200      	movs	r2, #0
    61a0:	701a      	strb	r2, [r3, #0]
    61a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    61a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61aa:	781b      	ldrb	r3, [r3, #0]
    61ac:	461a      	mov	r2, r3
    61ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    61b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b6:	7819      	ldrb	r1, [r3, #0]
    61b8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    61bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c0:	5499      	strb	r1, [r3, r2]
    61c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    61c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ca:	781b      	ldrb	r3, [r3, #0]
    61cc:	3301      	adds	r3, #1
    61ce:	b2da      	uxtb	r2, r3
    61d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    61d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d8:	701a      	strb	r2, [r3, #0]
    61da:	f24c 3319 	movw	r3, #49945	; 0xc319
    61de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e2:	781b      	ldrb	r3, [r3, #0]
    61e4:	2bff      	cmp	r3, #255	; 0xff
    61e6:	d105      	bne.n	61f4 <ground_calibrate+0x1fc>
    61e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    61ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f0:	2200      	movs	r2, #0
    61f2:	701a      	strb	r2, [r3, #0]
    61f4:	f242 0339 	movw	r3, #8249	; 0x2039
    61f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61fc:	781b      	ldrb	r3, [r3, #0]
    61fe:	b2db      	uxtb	r3, r3
    6200:	f003 0310 	and.w	r3, r3, #16
    6204:	2b00      	cmp	r3, #0
    6206:	f041 804e 	bne.w	72a6 <ground_calibrate+0x12ae>
    620a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    620e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6212:	781b      	ldrb	r3, [r3, #0]
    6214:	b2db      	uxtb	r3, r3
    6216:	461a      	mov	r2, r3
    6218:	f24c 331c 	movw	r3, #49948	; 0xc31c
    621c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6220:	5c9a      	ldrb	r2, [r3, r2]
    6222:	f24c 431b 	movw	r3, #50203	; 0xc41b
    6226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    622a:	701a      	strb	r2, [r3, #0]
    622c:	f24c 431c 	movw	r3, #50204	; 0xc41c
    6230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6234:	2200      	movs	r2, #0
    6236:	701a      	strb	r2, [r3, #0]
    6238:	f24c 331a 	movw	r3, #49946	; 0xc31a
    623c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6240:	781b      	ldrb	r3, [r3, #0]
    6242:	b2db      	uxtb	r3, r3
    6244:	3301      	adds	r3, #1
    6246:	b2da      	uxtb	r2, r3
    6248:	f24c 331a 	movw	r3, #49946	; 0xc31a
    624c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6250:	701a      	strb	r2, [r3, #0]
    6252:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    625a:	781b      	ldrb	r3, [r3, #0]
    625c:	b2db      	uxtb	r3, r3
    625e:	2bff      	cmp	r3, #255	; 0xff
    6260:	d105      	bne.n	626e <ground_calibrate+0x276>
    6262:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    626a:	2200      	movs	r2, #0
    626c:	701a      	strb	r2, [r3, #0]
    626e:	f242 0338 	movw	r3, #8248	; 0x2038
    6272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6276:	f242 0238 	movw	r2, #8248	; 0x2038
    627a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    627e:	7812      	ldrb	r2, [r2, #0]
    6280:	b2d2      	uxtb	r2, r2
    6282:	f042 0201 	orr.w	r2, r2, #1
    6286:	b2d2      	uxtb	r2, r2
    6288:	701a      	strb	r2, [r3, #0]
    628a:	f242 0339 	movw	r3, #8249	; 0x2039
    628e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6292:	f242 0239 	movw	r2, #8249	; 0x2039
    6296:	f2c2 0200 	movt	r2, #8192	; 0x2000
    629a:	7812      	ldrb	r2, [r2, #0]
    629c:	b2d2      	uxtb	r2, r2
    629e:	f042 0210 	orr.w	r2, r2, #16
    62a2:	b2d2      	uxtb	r2, r2
    62a4:	701a      	strb	r2, [r3, #0]
    62a6:	f000 bffe 	b.w	72a6 <ground_calibrate+0x12ae>
    62aa:	f24c 3318 	movw	r3, #49944	; 0xc318
    62ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b2:	781b      	ldrb	r3, [r3, #0]
    62b4:	3301      	adds	r3, #1
    62b6:	b2da      	uxtb	r2, r3
    62b8:	f24c 3318 	movw	r3, #49944	; 0xc318
    62bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c0:	701a      	strb	r2, [r3, #0]
    62c2:	f000 bff0 	b.w	72a6 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    62c6:	f24c 3312 	movw	r3, #49938	; 0xc312
    62ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ce:	781b      	ldrb	r3, [r3, #0]
    62d0:	2b01      	cmp	r3, #1
    62d2:	f040 87e8 	bne.w	72a6 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    62d6:	f24c 4320 	movw	r3, #50208	; 0xc420
    62da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62de:	885b      	ldrh	r3, [r3, #2]
    62e0:	b21b      	sxth	r3, r3
    62e2:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    62e6:	db09      	blt.n	62fc <ground_calibrate+0x304>
    62e8:	f24c 4320 	movw	r3, #50208	; 0xc420
    62ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f0:	885b      	ldrh	r3, [r3, #2]
    62f2:	b21b      	sxth	r3, r3
    62f4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    62f8:	f340 87d5 	ble.w	72a6 <ground_calibrate+0x12ae>
      ir_gain_calib();
    62fc:	f00b fd54 	bl	11da8 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6300:	f240 5348 	movw	r3, #1352	; 0x548
    6304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6308:	681a      	ldr	r2, [r3, #0]
    630a:	f64c 130c 	movw	r3, #51468	; 0xc90c
    630e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6312:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    6314:	f24c 3319 	movw	r3, #49945	; 0xc319
    6318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    631c:	781a      	ldrb	r2, [r3, #0]
    631e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6326:	781b      	ldrb	r3, [r3, #0]
    6328:	b2db      	uxtb	r3, r3
    632a:	429a      	cmp	r2, r3
    632c:	d313      	bcc.n	6356 <ground_calibrate+0x35e>
    632e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6336:	781b      	ldrb	r3, [r3, #0]
    6338:	b2db      	uxtb	r3, r3
    633a:	461a      	mov	r2, r3
    633c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6344:	781b      	ldrb	r3, [r3, #0]
    6346:	1ad3      	subs	r3, r2, r3
    6348:	33ff      	adds	r3, #255	; 0xff
    634a:	2b14      	cmp	r3, #20
    634c:	bfd4      	ite	le
    634e:	2300      	movle	r3, #0
    6350:	2301      	movgt	r3, #1
    6352:	b2db      	uxtb	r3, r3
    6354:	e011      	b.n	637a <ground_calibrate+0x382>
    6356:	f24c 331a 	movw	r3, #49946	; 0xc31a
    635a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    635e:	781b      	ldrb	r3, [r3, #0]
    6360:	b2db      	uxtb	r3, r3
    6362:	461a      	mov	r2, r3
    6364:	f24c 3319 	movw	r3, #49945	; 0xc319
    6368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    636c:	781b      	ldrb	r3, [r3, #0]
    636e:	1ad3      	subs	r3, r2, r3
    6370:	2b14      	cmp	r3, #20
    6372:	bfd4      	ite	le
    6374:	2300      	movle	r3, #0
    6376:	2301      	movgt	r3, #1
    6378:	b2db      	uxtb	r3, r3
    637a:	2b00      	cmp	r3, #0
    637c:	f000 85a6 	beq.w	6ecc <ground_calibrate+0xed4>
    6380:	f24c 3319 	movw	r3, #49945	; 0xc319
    6384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6388:	781b      	ldrb	r3, [r3, #0]
    638a:	461a      	mov	r2, r3
    638c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6394:	2105      	movs	r1, #5
    6396:	5499      	strb	r1, [r3, r2]
    6398:	f24c 3319 	movw	r3, #49945	; 0xc319
    639c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a0:	781b      	ldrb	r3, [r3, #0]
    63a2:	3301      	adds	r3, #1
    63a4:	b2da      	uxtb	r2, r3
    63a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    63aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ae:	701a      	strb	r2, [r3, #0]
    63b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    63b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b8:	781b      	ldrb	r3, [r3, #0]
    63ba:	2bff      	cmp	r3, #255	; 0xff
    63bc:	d105      	bne.n	63ca <ground_calibrate+0x3d2>
    63be:	f24c 3319 	movw	r3, #49945	; 0xc319
    63c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c6:	2200      	movs	r2, #0
    63c8:	701a      	strb	r2, [r3, #0]
    63ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    63ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63d2:	781b      	ldrb	r3, [r3, #0]
    63d4:	461a      	mov	r2, r3
    63d6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    63da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63de:	2105      	movs	r1, #5
    63e0:	5499      	strb	r1, [r3, r2]
    63e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    63e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ea:	781b      	ldrb	r3, [r3, #0]
    63ec:	3301      	adds	r3, #1
    63ee:	b2da      	uxtb	r2, r3
    63f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    63f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f8:	701a      	strb	r2, [r3, #0]
    63fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    63fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6402:	781b      	ldrb	r3, [r3, #0]
    6404:	2bff      	cmp	r3, #255	; 0xff
    6406:	d105      	bne.n	6414 <ground_calibrate+0x41c>
    6408:	f24c 3319 	movw	r3, #49945	; 0xc319
    640c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6410:	2200      	movs	r2, #0
    6412:	701a      	strb	r2, [r3, #0]
    6414:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    641c:	2205      	movs	r2, #5
    641e:	701a      	strb	r2, [r3, #0]
    6420:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6428:	2205      	movs	r2, #5
    642a:	701a      	strb	r2, [r3, #0]
    642c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6434:	781b      	ldrb	r3, [r3, #0]
    6436:	461a      	mov	r2, r3
    6438:	f64c 1310 	movw	r3, #51472	; 0xc910
    643c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6440:	7819      	ldrb	r1, [r3, #0]
    6442:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    644a:	5499      	strb	r1, [r3, r2]
    644c:	f64c 1310 	movw	r3, #51472	; 0xc910
    6450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6454:	781a      	ldrb	r2, [r3, #0]
    6456:	f24c 431d 	movw	r3, #50205	; 0xc41d
    645a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645e:	781b      	ldrb	r3, [r3, #0]
    6460:	4413      	add	r3, r2
    6462:	b2da      	uxtb	r2, r3
    6464:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    646c:	701a      	strb	r2, [r3, #0]
    646e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6476:	781a      	ldrb	r2, [r3, #0]
    6478:	f24c 431d 	movw	r3, #50205	; 0xc41d
    647c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6480:	781b      	ldrb	r3, [r3, #0]
    6482:	4413      	add	r3, r2
    6484:	b2da      	uxtb	r2, r3
    6486:	f24c 431e 	movw	r3, #50206	; 0xc41e
    648a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648e:	701a      	strb	r2, [r3, #0]
    6490:	f24c 3319 	movw	r3, #49945	; 0xc319
    6494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6498:	781b      	ldrb	r3, [r3, #0]
    649a:	3301      	adds	r3, #1
    649c:	b2da      	uxtb	r2, r3
    649e:	f24c 3319 	movw	r3, #49945	; 0xc319
    64a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a6:	701a      	strb	r2, [r3, #0]
    64a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    64ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b0:	781b      	ldrb	r3, [r3, #0]
    64b2:	2bff      	cmp	r3, #255	; 0xff
    64b4:	d105      	bne.n	64c2 <ground_calibrate+0x4ca>
    64b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    64ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64be:	2200      	movs	r2, #0
    64c0:	701a      	strb	r2, [r3, #0]
    64c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    64c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ca:	781b      	ldrb	r3, [r3, #0]
    64cc:	461a      	mov	r2, r3
    64ce:	f64c 1310 	movw	r3, #51472	; 0xc910
    64d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d6:	7859      	ldrb	r1, [r3, #1]
    64d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    64dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e0:	5499      	strb	r1, [r3, r2]
    64e2:	4bd2      	ldr	r3, [pc, #840]	; (682c <ground_calibrate+0x834>)
    64e4:	781a      	ldrb	r2, [r3, #0]
    64e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    64ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ee:	781b      	ldrb	r3, [r3, #0]
    64f0:	4413      	add	r3, r2
    64f2:	b2da      	uxtb	r2, r3
    64f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    64f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64fc:	701a      	strb	r2, [r3, #0]
    64fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6506:	781a      	ldrb	r2, [r3, #0]
    6508:	f24c 431d 	movw	r3, #50205	; 0xc41d
    650c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6510:	781b      	ldrb	r3, [r3, #0]
    6512:	4413      	add	r3, r2
    6514:	b2da      	uxtb	r2, r3
    6516:	f24c 431e 	movw	r3, #50206	; 0xc41e
    651a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    651e:	701a      	strb	r2, [r3, #0]
    6520:	f24c 3319 	movw	r3, #49945	; 0xc319
    6524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6528:	781b      	ldrb	r3, [r3, #0]
    652a:	3301      	adds	r3, #1
    652c:	b2da      	uxtb	r2, r3
    652e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6536:	701a      	strb	r2, [r3, #0]
    6538:	f24c 3319 	movw	r3, #49945	; 0xc319
    653c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6540:	781b      	ldrb	r3, [r3, #0]
    6542:	2bff      	cmp	r3, #255	; 0xff
    6544:	d105      	bne.n	6552 <ground_calibrate+0x55a>
    6546:	f24c 3319 	movw	r3, #49945	; 0xc319
    654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654e:	2200      	movs	r2, #0
    6550:	701a      	strb	r2, [r3, #0]
    6552:	f24c 3319 	movw	r3, #49945	; 0xc319
    6556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655a:	781b      	ldrb	r3, [r3, #0]
    655c:	461a      	mov	r2, r3
    655e:	f64c 1310 	movw	r3, #51472	; 0xc910
    6562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6566:	7899      	ldrb	r1, [r3, #2]
    6568:	f24c 331c 	movw	r3, #49948	; 0xc31c
    656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6570:	5499      	strb	r1, [r3, r2]
    6572:	4baf      	ldr	r3, [pc, #700]	; (6830 <ground_calibrate+0x838>)
    6574:	781a      	ldrb	r2, [r3, #0]
    6576:	f24c 431d 	movw	r3, #50205	; 0xc41d
    657a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657e:	781b      	ldrb	r3, [r3, #0]
    6580:	4413      	add	r3, r2
    6582:	b2da      	uxtb	r2, r3
    6584:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    658c:	701a      	strb	r2, [r3, #0]
    658e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	781a      	ldrb	r2, [r3, #0]
    6598:	f24c 431d 	movw	r3, #50205	; 0xc41d
    659c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	4413      	add	r3, r2
    65a4:	b2da      	uxtb	r2, r3
    65a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	701a      	strb	r2, [r3, #0]
    65b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    65b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b8:	781b      	ldrb	r3, [r3, #0]
    65ba:	3301      	adds	r3, #1
    65bc:	b2da      	uxtb	r2, r3
    65be:	f24c 3319 	movw	r3, #49945	; 0xc319
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	701a      	strb	r2, [r3, #0]
    65c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    65cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d0:	781b      	ldrb	r3, [r3, #0]
    65d2:	2bff      	cmp	r3, #255	; 0xff
    65d4:	d105      	bne.n	65e2 <ground_calibrate+0x5ea>
    65d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	2200      	movs	r2, #0
    65e0:	701a      	strb	r2, [r3, #0]
    65e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    65e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ea:	781b      	ldrb	r3, [r3, #0]
    65ec:	461a      	mov	r2, r3
    65ee:	f64c 1310 	movw	r3, #51472	; 0xc910
    65f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f6:	78d9      	ldrb	r1, [r3, #3]
    65f8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    65fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6600:	5499      	strb	r1, [r3, r2]
    6602:	4b8c      	ldr	r3, [pc, #560]	; (6834 <ground_calibrate+0x83c>)
    6604:	781a      	ldrb	r2, [r3, #0]
    6606:	f24c 431d 	movw	r3, #50205	; 0xc41d
    660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    660e:	781b      	ldrb	r3, [r3, #0]
    6610:	4413      	add	r3, r2
    6612:	b2da      	uxtb	r2, r3
    6614:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    661c:	701a      	strb	r2, [r3, #0]
    661e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6626:	781a      	ldrb	r2, [r3, #0]
    6628:	f24c 431d 	movw	r3, #50205	; 0xc41d
    662c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6630:	781b      	ldrb	r3, [r3, #0]
    6632:	4413      	add	r3, r2
    6634:	b2da      	uxtb	r2, r3
    6636:	f24c 431e 	movw	r3, #50206	; 0xc41e
    663a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    663e:	701a      	strb	r2, [r3, #0]
    6640:	f24c 3319 	movw	r3, #49945	; 0xc319
    6644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6648:	781b      	ldrb	r3, [r3, #0]
    664a:	3301      	adds	r3, #1
    664c:	b2da      	uxtb	r2, r3
    664e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6656:	701a      	strb	r2, [r3, #0]
    6658:	f24c 3319 	movw	r3, #49945	; 0xc319
    665c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6660:	781b      	ldrb	r3, [r3, #0]
    6662:	2bff      	cmp	r3, #255	; 0xff
    6664:	d105      	bne.n	6672 <ground_calibrate+0x67a>
    6666:	f24c 3319 	movw	r3, #49945	; 0xc319
    666a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    666e:	2200      	movs	r2, #0
    6670:	701a      	strb	r2, [r3, #0]
    6672:	f24c 3319 	movw	r3, #49945	; 0xc319
    6676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667a:	781b      	ldrb	r3, [r3, #0]
    667c:	461a      	mov	r2, r3
    667e:	f64c 1314 	movw	r3, #51476	; 0xc914
    6682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6686:	7819      	ldrb	r1, [r3, #0]
    6688:	f24c 331c 	movw	r3, #49948	; 0xc31c
    668c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6690:	5499      	strb	r1, [r3, r2]
    6692:	f64c 1314 	movw	r3, #51476	; 0xc914
    6696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    669a:	781a      	ldrb	r2, [r3, #0]
    669c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a4:	781b      	ldrb	r3, [r3, #0]
    66a6:	4413      	add	r3, r2
    66a8:	b2da      	uxtb	r2, r3
    66aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b2:	701a      	strb	r2, [r3, #0]
    66b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    66b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66bc:	781a      	ldrb	r2, [r3, #0]
    66be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c6:	781b      	ldrb	r3, [r3, #0]
    66c8:	4413      	add	r3, r2
    66ca:	b2da      	uxtb	r2, r3
    66cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    66d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d4:	701a      	strb	r2, [r3, #0]
    66d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    66da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66de:	781b      	ldrb	r3, [r3, #0]
    66e0:	3301      	adds	r3, #1
    66e2:	b2da      	uxtb	r2, r3
    66e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    66e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ec:	701a      	strb	r2, [r3, #0]
    66ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    66f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f6:	781b      	ldrb	r3, [r3, #0]
    66f8:	2bff      	cmp	r3, #255	; 0xff
    66fa:	d105      	bne.n	6708 <ground_calibrate+0x710>
    66fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6704:	2200      	movs	r2, #0
    6706:	701a      	strb	r2, [r3, #0]
    6708:	f24c 3319 	movw	r3, #49945	; 0xc319
    670c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6710:	781b      	ldrb	r3, [r3, #0]
    6712:	461a      	mov	r2, r3
    6714:	f64c 1314 	movw	r3, #51476	; 0xc914
    6718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    671c:	7859      	ldrb	r1, [r3, #1]
    671e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6726:	5499      	strb	r1, [r3, r2]
    6728:	4b43      	ldr	r3, [pc, #268]	; (6838 <ground_calibrate+0x840>)
    672a:	781a      	ldrb	r2, [r3, #0]
    672c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6734:	781b      	ldrb	r3, [r3, #0]
    6736:	4413      	add	r3, r2
    6738:	b2da      	uxtb	r2, r3
    673a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    673e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6742:	701a      	strb	r2, [r3, #0]
    6744:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674c:	781a      	ldrb	r2, [r3, #0]
    674e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6756:	781b      	ldrb	r3, [r3, #0]
    6758:	4413      	add	r3, r2
    675a:	b2da      	uxtb	r2, r3
    675c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6764:	701a      	strb	r2, [r3, #0]
    6766:	f24c 3319 	movw	r3, #49945	; 0xc319
    676a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    676e:	781b      	ldrb	r3, [r3, #0]
    6770:	3301      	adds	r3, #1
    6772:	b2da      	uxtb	r2, r3
    6774:	f24c 3319 	movw	r3, #49945	; 0xc319
    6778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677c:	701a      	strb	r2, [r3, #0]
    677e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6786:	781b      	ldrb	r3, [r3, #0]
    6788:	2bff      	cmp	r3, #255	; 0xff
    678a:	d105      	bne.n	6798 <ground_calibrate+0x7a0>
    678c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6794:	2200      	movs	r2, #0
    6796:	701a      	strb	r2, [r3, #0]
    6798:	f24c 3319 	movw	r3, #49945	; 0xc319
    679c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a0:	781b      	ldrb	r3, [r3, #0]
    67a2:	461a      	mov	r2, r3
    67a4:	f64c 1314 	movw	r3, #51476	; 0xc914
    67a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ac:	7899      	ldrb	r1, [r3, #2]
    67ae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    67b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b6:	5499      	strb	r1, [r3, r2]
    67b8:	4b20      	ldr	r3, [pc, #128]	; (683c <ground_calibrate+0x844>)
    67ba:	781a      	ldrb	r2, [r3, #0]
    67bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c4:	781b      	ldrb	r3, [r3, #0]
    67c6:	4413      	add	r3, r2
    67c8:	b2da      	uxtb	r2, r3
    67ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d2:	701a      	strb	r2, [r3, #0]
    67d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    67d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67dc:	781a      	ldrb	r2, [r3, #0]
    67de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e6:	781b      	ldrb	r3, [r3, #0]
    67e8:	4413      	add	r3, r2
    67ea:	b2da      	uxtb	r2, r3
    67ec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	701a      	strb	r2, [r3, #0]
    67f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    67fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	3301      	adds	r3, #1
    6802:	b2da      	uxtb	r2, r3
    6804:	f24c 3319 	movw	r3, #49945	; 0xc319
    6808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680c:	701a      	strb	r2, [r3, #0]
    680e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	2bff      	cmp	r3, #255	; 0xff
    681a:	d111      	bne.n	6840 <ground_calibrate+0x848>
    681c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	2200      	movs	r2, #0
    6826:	701a      	strb	r2, [r3, #0]
    6828:	e00a      	b.n	6840 <ground_calibrate+0x848>
    682a:	bf00      	nop
    682c:	2004c911 	.word	0x2004c911
    6830:	2004c912 	.word	0x2004c912
    6834:	2004c913 	.word	0x2004c913
    6838:	2004c915 	.word	0x2004c915
    683c:	2004c916 	.word	0x2004c916
    6840:	f24c 3319 	movw	r3, #49945	; 0xc319
    6844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6848:	781b      	ldrb	r3, [r3, #0]
    684a:	461a      	mov	r2, r3
    684c:	f64c 1314 	movw	r3, #51476	; 0xc914
    6850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6854:	78d9      	ldrb	r1, [r3, #3]
    6856:	f24c 331c 	movw	r3, #49948	; 0xc31c
    685a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685e:	5499      	strb	r1, [r3, r2]
    6860:	4bd3      	ldr	r3, [pc, #844]	; (6bb0 <ground_calibrate+0xbb8>)
    6862:	781a      	ldrb	r2, [r3, #0]
    6864:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686c:	781b      	ldrb	r3, [r3, #0]
    686e:	4413      	add	r3, r2
    6870:	b2da      	uxtb	r2, r3
    6872:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687a:	701a      	strb	r2, [r3, #0]
    687c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6884:	781a      	ldrb	r2, [r3, #0]
    6886:	f24c 431d 	movw	r3, #50205	; 0xc41d
    688a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688e:	781b      	ldrb	r3, [r3, #0]
    6890:	4413      	add	r3, r2
    6892:	b2da      	uxtb	r2, r3
    6894:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    689c:	701a      	strb	r2, [r3, #0]
    689e:	f24c 3319 	movw	r3, #49945	; 0xc319
    68a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a6:	781b      	ldrb	r3, [r3, #0]
    68a8:	3301      	adds	r3, #1
    68aa:	b2da      	uxtb	r2, r3
    68ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    68b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b4:	701a      	strb	r2, [r3, #0]
    68b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    68ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68be:	781b      	ldrb	r3, [r3, #0]
    68c0:	2bff      	cmp	r3, #255	; 0xff
    68c2:	d105      	bne.n	68d0 <ground_calibrate+0x8d8>
    68c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    68c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68cc:	2200      	movs	r2, #0
    68ce:	701a      	strb	r2, [r3, #0]
    68d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    68d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d8:	781b      	ldrb	r3, [r3, #0]
    68da:	461a      	mov	r2, r3
    68dc:	f64c 130c 	movw	r3, #51468	; 0xc90c
    68e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e4:	7819      	ldrb	r1, [r3, #0]
    68e6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    68ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ee:	5499      	strb	r1, [r3, r2]
    68f0:	f64c 130c 	movw	r3, #51468	; 0xc90c
    68f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f8:	781a      	ldrb	r2, [r3, #0]
    68fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    68fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6902:	781b      	ldrb	r3, [r3, #0]
    6904:	4413      	add	r3, r2
    6906:	b2da      	uxtb	r2, r3
    6908:	f24c 431d 	movw	r3, #50205	; 0xc41d
    690c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6910:	701a      	strb	r2, [r3, #0]
    6912:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691a:	781a      	ldrb	r2, [r3, #0]
    691c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6924:	781b      	ldrb	r3, [r3, #0]
    6926:	4413      	add	r3, r2
    6928:	b2da      	uxtb	r2, r3
    692a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    692e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6932:	701a      	strb	r2, [r3, #0]
    6934:	f24c 3319 	movw	r3, #49945	; 0xc319
    6938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693c:	781b      	ldrb	r3, [r3, #0]
    693e:	3301      	adds	r3, #1
    6940:	b2da      	uxtb	r2, r3
    6942:	f24c 3319 	movw	r3, #49945	; 0xc319
    6946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694a:	701a      	strb	r2, [r3, #0]
    694c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6954:	781b      	ldrb	r3, [r3, #0]
    6956:	2bff      	cmp	r3, #255	; 0xff
    6958:	d105      	bne.n	6966 <ground_calibrate+0x96e>
    695a:	f24c 3319 	movw	r3, #49945	; 0xc319
    695e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6962:	2200      	movs	r2, #0
    6964:	701a      	strb	r2, [r3, #0]
    6966:	f24c 3319 	movw	r3, #49945	; 0xc319
    696a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    696e:	781b      	ldrb	r3, [r3, #0]
    6970:	461a      	mov	r2, r3
    6972:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697a:	7859      	ldrb	r1, [r3, #1]
    697c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6984:	5499      	strb	r1, [r3, r2]
    6986:	4b8b      	ldr	r3, [pc, #556]	; (6bb4 <ground_calibrate+0xbbc>)
    6988:	781a      	ldrb	r2, [r3, #0]
    698a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    698e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6992:	781b      	ldrb	r3, [r3, #0]
    6994:	4413      	add	r3, r2
    6996:	b2da      	uxtb	r2, r3
    6998:	f24c 431d 	movw	r3, #50205	; 0xc41d
    699c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a0:	701a      	strb	r2, [r3, #0]
    69a2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    69a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69aa:	781a      	ldrb	r2, [r3, #0]
    69ac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	4413      	add	r3, r2
    69b8:	b2da      	uxtb	r2, r3
    69ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    69be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c2:	701a      	strb	r2, [r3, #0]
    69c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    69c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69cc:	781b      	ldrb	r3, [r3, #0]
    69ce:	3301      	adds	r3, #1
    69d0:	b2da      	uxtb	r2, r3
    69d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	701a      	strb	r2, [r3, #0]
    69dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    69e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e4:	781b      	ldrb	r3, [r3, #0]
    69e6:	2bff      	cmp	r3, #255	; 0xff
    69e8:	d105      	bne.n	69f6 <ground_calibrate+0x9fe>
    69ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    69ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f2:	2200      	movs	r2, #0
    69f4:	701a      	strb	r2, [r3, #0]
    69f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    69fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69fe:	781b      	ldrb	r3, [r3, #0]
    6a00:	461a      	mov	r2, r3
    6a02:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0a:	7899      	ldrb	r1, [r3, #2]
    6a0c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a14:	5499      	strb	r1, [r3, r2]
    6a16:	4b68      	ldr	r3, [pc, #416]	; (6bb8 <ground_calibrate+0xbc0>)
    6a18:	781a      	ldrb	r2, [r3, #0]
    6a1a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a22:	781b      	ldrb	r3, [r3, #0]
    6a24:	4413      	add	r3, r2
    6a26:	b2da      	uxtb	r2, r3
    6a28:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a30:	701a      	strb	r2, [r3, #0]
    6a32:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3a:	781a      	ldrb	r2, [r3, #0]
    6a3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	4413      	add	r3, r2
    6a48:	b2da      	uxtb	r2, r3
    6a4a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a52:	701a      	strb	r2, [r3, #0]
    6a54:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	3301      	adds	r3, #1
    6a60:	b2da      	uxtb	r2, r3
    6a62:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6a:	701a      	strb	r2, [r3, #0]
    6a6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	2bff      	cmp	r3, #255	; 0xff
    6a78:	d105      	bne.n	6a86 <ground_calibrate+0xa8e>
    6a7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a82:	2200      	movs	r2, #0
    6a84:	701a      	strb	r2, [r3, #0]
    6a86:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8e:	781b      	ldrb	r3, [r3, #0]
    6a90:	461a      	mov	r2, r3
    6a92:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9a:	78d9      	ldrb	r1, [r3, #3]
    6a9c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa4:	5499      	strb	r1, [r3, r2]
    6aa6:	4b45      	ldr	r3, [pc, #276]	; (6bbc <ground_calibrate+0xbc4>)
    6aa8:	781a      	ldrb	r2, [r3, #0]
    6aaa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab2:	781b      	ldrb	r3, [r3, #0]
    6ab4:	4413      	add	r3, r2
    6ab6:	b2da      	uxtb	r2, r3
    6ab8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac0:	701a      	strb	r2, [r3, #0]
    6ac2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aca:	781a      	ldrb	r2, [r3, #0]
    6acc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad4:	781b      	ldrb	r3, [r3, #0]
    6ad6:	4413      	add	r3, r2
    6ad8:	b2da      	uxtb	r2, r3
    6ada:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae2:	701a      	strb	r2, [r3, #0]
    6ae4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aec:	781b      	ldrb	r3, [r3, #0]
    6aee:	3301      	adds	r3, #1
    6af0:	b2da      	uxtb	r2, r3
    6af2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6afa:	701a      	strb	r2, [r3, #0]
    6afc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b04:	781b      	ldrb	r3, [r3, #0]
    6b06:	2bff      	cmp	r3, #255	; 0xff
    6b08:	d105      	bne.n	6b16 <ground_calibrate+0xb1e>
    6b0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b12:	2200      	movs	r2, #0
    6b14:	701a      	strb	r2, [r3, #0]
    6b16:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b1e:	781b      	ldrb	r3, [r3, #0]
    6b20:	461a      	mov	r2, r3
    6b22:	f240 5342 	movw	r3, #1346	; 0x542
    6b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b2a:	7819      	ldrb	r1, [r3, #0]
    6b2c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b34:	5499      	strb	r1, [r3, r2]
    6b36:	f240 5342 	movw	r3, #1346	; 0x542
    6b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b3e:	781a      	ldrb	r2, [r3, #0]
    6b40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b48:	781b      	ldrb	r3, [r3, #0]
    6b4a:	4413      	add	r3, r2
    6b4c:	b2da      	uxtb	r2, r3
    6b4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b56:	701a      	strb	r2, [r3, #0]
    6b58:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b60:	781a      	ldrb	r2, [r3, #0]
    6b62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b6a:	781b      	ldrb	r3, [r3, #0]
    6b6c:	4413      	add	r3, r2
    6b6e:	b2da      	uxtb	r2, r3
    6b70:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b78:	701a      	strb	r2, [r3, #0]
    6b7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b82:	781b      	ldrb	r3, [r3, #0]
    6b84:	3301      	adds	r3, #1
    6b86:	b2da      	uxtb	r2, r3
    6b88:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b90:	701a      	strb	r2, [r3, #0]
    6b92:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b9a:	781b      	ldrb	r3, [r3, #0]
    6b9c:	2bff      	cmp	r3, #255	; 0xff
    6b9e:	d10f      	bne.n	6bc0 <ground_calibrate+0xbc8>
    6ba0:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba8:	2200      	movs	r2, #0
    6baa:	701a      	strb	r2, [r3, #0]
    6bac:	e008      	b.n	6bc0 <ground_calibrate+0xbc8>
    6bae:	bf00      	nop
    6bb0:	2004c917 	.word	0x2004c917
    6bb4:	2004c90d 	.word	0x2004c90d
    6bb8:	2004c90e 	.word	0x2004c90e
    6bbc:	2004c90f 	.word	0x2004c90f
    6bc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc8:	781b      	ldrb	r3, [r3, #0]
    6bca:	461a      	mov	r2, r3
    6bcc:	f240 5342 	movw	r3, #1346	; 0x542
    6bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bd4:	7859      	ldrb	r1, [r3, #1]
    6bd6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bde:	5499      	strb	r1, [r3, r2]
    6be0:	4bd4      	ldr	r3, [pc, #848]	; (6f34 <ground_calibrate+0xf3c>)
    6be2:	781a      	ldrb	r2, [r3, #0]
    6be4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bec:	781b      	ldrb	r3, [r3, #0]
    6bee:	4413      	add	r3, r2
    6bf0:	b2da      	uxtb	r2, r3
    6bf2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfa:	701a      	strb	r2, [r3, #0]
    6bfc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c04:	781a      	ldrb	r2, [r3, #0]
    6c06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0e:	781b      	ldrb	r3, [r3, #0]
    6c10:	4413      	add	r3, r2
    6c12:	b2da      	uxtb	r2, r3
    6c14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c1c:	701a      	strb	r2, [r3, #0]
    6c1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c26:	781b      	ldrb	r3, [r3, #0]
    6c28:	3301      	adds	r3, #1
    6c2a:	b2da      	uxtb	r2, r3
    6c2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c34:	701a      	strb	r2, [r3, #0]
    6c36:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c3e:	781b      	ldrb	r3, [r3, #0]
    6c40:	2bff      	cmp	r3, #255	; 0xff
    6c42:	d105      	bne.n	6c50 <ground_calibrate+0xc58>
    6c44:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4c:	2200      	movs	r2, #0
    6c4e:	701a      	strb	r2, [r3, #0]
    6c50:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	461a      	mov	r2, r3
    6c5c:	f240 5344 	movw	r3, #1348	; 0x544
    6c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c64:	7819      	ldrb	r1, [r3, #0]
    6c66:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c6e:	5499      	strb	r1, [r3, r2]
    6c70:	f240 5344 	movw	r3, #1348	; 0x544
    6c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c78:	781a      	ldrb	r2, [r3, #0]
    6c7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c82:	781b      	ldrb	r3, [r3, #0]
    6c84:	4413      	add	r3, r2
    6c86:	b2da      	uxtb	r2, r3
    6c88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c90:	701a      	strb	r2, [r3, #0]
    6c92:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c9a:	781a      	ldrb	r2, [r3, #0]
    6c9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca4:	781b      	ldrb	r3, [r3, #0]
    6ca6:	4413      	add	r3, r2
    6ca8:	b2da      	uxtb	r2, r3
    6caa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb2:	701a      	strb	r2, [r3, #0]
    6cb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cbc:	781b      	ldrb	r3, [r3, #0]
    6cbe:	3301      	adds	r3, #1
    6cc0:	b2da      	uxtb	r2, r3
    6cc2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cca:	701a      	strb	r2, [r3, #0]
    6ccc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd4:	781b      	ldrb	r3, [r3, #0]
    6cd6:	2bff      	cmp	r3, #255	; 0xff
    6cd8:	d105      	bne.n	6ce6 <ground_calibrate+0xcee>
    6cda:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce2:	2200      	movs	r2, #0
    6ce4:	701a      	strb	r2, [r3, #0]
    6ce6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cee:	781b      	ldrb	r3, [r3, #0]
    6cf0:	461a      	mov	r2, r3
    6cf2:	f240 5344 	movw	r3, #1348	; 0x544
    6cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cfa:	7859      	ldrb	r1, [r3, #1]
    6cfc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d04:	5499      	strb	r1, [r3, r2]
    6d06:	4b8c      	ldr	r3, [pc, #560]	; (6f38 <ground_calibrate+0xf40>)
    6d08:	781a      	ldrb	r2, [r3, #0]
    6d0a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d12:	781b      	ldrb	r3, [r3, #0]
    6d14:	4413      	add	r3, r2
    6d16:	b2da      	uxtb	r2, r3
    6d18:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d20:	701a      	strb	r2, [r3, #0]
    6d22:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d2a:	781a      	ldrb	r2, [r3, #0]
    6d2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d34:	781b      	ldrb	r3, [r3, #0]
    6d36:	4413      	add	r3, r2
    6d38:	b2da      	uxtb	r2, r3
    6d3a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d42:	701a      	strb	r2, [r3, #0]
    6d44:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d4c:	781b      	ldrb	r3, [r3, #0]
    6d4e:	3301      	adds	r3, #1
    6d50:	b2da      	uxtb	r2, r3
    6d52:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5a:	701a      	strb	r2, [r3, #0]
    6d5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d64:	781b      	ldrb	r3, [r3, #0]
    6d66:	2bff      	cmp	r3, #255	; 0xff
    6d68:	d105      	bne.n	6d76 <ground_calibrate+0xd7e>
    6d6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d72:	2200      	movs	r2, #0
    6d74:	701a      	strb	r2, [r3, #0]
    6d76:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d7e:	781b      	ldrb	r3, [r3, #0]
    6d80:	461a      	mov	r2, r3
    6d82:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d8a:	7819      	ldrb	r1, [r3, #0]
    6d8c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d94:	5499      	strb	r1, [r3, r2]
    6d96:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d9e:	781b      	ldrb	r3, [r3, #0]
    6da0:	3301      	adds	r3, #1
    6da2:	b2da      	uxtb	r2, r3
    6da4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dac:	701a      	strb	r2, [r3, #0]
    6dae:	f24c 3319 	movw	r3, #49945	; 0xc319
    6db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db6:	781b      	ldrb	r3, [r3, #0]
    6db8:	2bff      	cmp	r3, #255	; 0xff
    6dba:	d105      	bne.n	6dc8 <ground_calibrate+0xdd0>
    6dbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc4:	2200      	movs	r2, #0
    6dc6:	701a      	strb	r2, [r3, #0]
    6dc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd0:	781b      	ldrb	r3, [r3, #0]
    6dd2:	461a      	mov	r2, r3
    6dd4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ddc:	7819      	ldrb	r1, [r3, #0]
    6dde:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de6:	5499      	strb	r1, [r3, r2]
    6de8:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df0:	781b      	ldrb	r3, [r3, #0]
    6df2:	3301      	adds	r3, #1
    6df4:	b2da      	uxtb	r2, r3
    6df6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfe:	701a      	strb	r2, [r3, #0]
    6e00:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e08:	781b      	ldrb	r3, [r3, #0]
    6e0a:	2bff      	cmp	r3, #255	; 0xff
    6e0c:	d105      	bne.n	6e1a <ground_calibrate+0xe22>
    6e0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e16:	2200      	movs	r2, #0
    6e18:	701a      	strb	r2, [r3, #0]
    6e1a:	f242 0339 	movw	r3, #8249	; 0x2039
    6e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e22:	781b      	ldrb	r3, [r3, #0]
    6e24:	b2db      	uxtb	r3, r3
    6e26:	f003 0310 	and.w	r3, r3, #16
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	d15a      	bne.n	6ee4 <ground_calibrate+0xeec>
    6e2e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e36:	781b      	ldrb	r3, [r3, #0]
    6e38:	b2db      	uxtb	r3, r3
    6e3a:	461a      	mov	r2, r3
    6e3c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e44:	5c9a      	ldrb	r2, [r3, r2]
    6e46:	f24c 431b 	movw	r3, #50203	; 0xc41b
    6e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e4e:	701a      	strb	r2, [r3, #0]
    6e50:	f24c 431c 	movw	r3, #50204	; 0xc41c
    6e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e58:	2200      	movs	r2, #0
    6e5a:	701a      	strb	r2, [r3, #0]
    6e5c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e64:	781b      	ldrb	r3, [r3, #0]
    6e66:	b2db      	uxtb	r3, r3
    6e68:	3301      	adds	r3, #1
    6e6a:	b2da      	uxtb	r2, r3
    6e6c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e74:	701a      	strb	r2, [r3, #0]
    6e76:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e7e:	781b      	ldrb	r3, [r3, #0]
    6e80:	b2db      	uxtb	r3, r3
    6e82:	2bff      	cmp	r3, #255	; 0xff
    6e84:	d105      	bne.n	6e92 <ground_calibrate+0xe9a>
    6e86:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e8e:	2200      	movs	r2, #0
    6e90:	701a      	strb	r2, [r3, #0]
    6e92:	f242 0338 	movw	r3, #8248	; 0x2038
    6e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e9a:	f242 0238 	movw	r2, #8248	; 0x2038
    6e9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ea2:	7812      	ldrb	r2, [r2, #0]
    6ea4:	b2d2      	uxtb	r2, r2
    6ea6:	f042 0201 	orr.w	r2, r2, #1
    6eaa:	b2d2      	uxtb	r2, r2
    6eac:	701a      	strb	r2, [r3, #0]
    6eae:	f242 0339 	movw	r3, #8249	; 0x2039
    6eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eb6:	f242 0239 	movw	r2, #8249	; 0x2039
    6eba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ebe:	7812      	ldrb	r2, [r2, #0]
    6ec0:	b2d2      	uxtb	r2, r2
    6ec2:	f042 0210 	orr.w	r2, r2, #16
    6ec6:	b2d2      	uxtb	r2, r2
    6ec8:	701a      	strb	r2, [r3, #0]
    6eca:	e00b      	b.n	6ee4 <ground_calibrate+0xeec>
    6ecc:	f24c 3318 	movw	r3, #49944	; 0xc318
    6ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed4:	781b      	ldrb	r3, [r3, #0]
    6ed6:	3301      	adds	r3, #1
    6ed8:	b2da      	uxtb	r2, r3
    6eda:	f24c 3318 	movw	r3, #49944	; 0xc318
    6ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee2:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6ee4:	f24c 3312 	movw	r3, #49938	; 0xc312
    6ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eec:	2202      	movs	r2, #2
    6eee:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6ef0:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef8:	781a      	ldrb	r2, [r3, #0]
    6efa:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f02:	781b      	ldrb	r3, [r3, #0]
    6f04:	b2db      	uxtb	r3, r3
    6f06:	429a      	cmp	r2, r3
    6f08:	d318      	bcc.n	6f3c <ground_calibrate+0xf44>
    6f0a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f12:	781b      	ldrb	r3, [r3, #0]
    6f14:	b2db      	uxtb	r3, r3
    6f16:	461a      	mov	r2, r3
    6f18:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f20:	781b      	ldrb	r3, [r3, #0]
    6f22:	1ad3      	subs	r3, r2, r3
    6f24:	33ff      	adds	r3, #255	; 0xff
    6f26:	2b06      	cmp	r3, #6
    6f28:	bfd4      	ite	le
    6f2a:	2300      	movle	r3, #0
    6f2c:	2301      	movgt	r3, #1
    6f2e:	b2db      	uxtb	r3, r3
    6f30:	e016      	b.n	6f60 <ground_calibrate+0xf68>
    6f32:	bf00      	nop
    6f34:	20000543 	.word	0x20000543
    6f38:	20000545 	.word	0x20000545
    6f3c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f44:	781b      	ldrb	r3, [r3, #0]
    6f46:	b2db      	uxtb	r3, r3
    6f48:	461a      	mov	r2, r3
    6f4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f52:	781b      	ldrb	r3, [r3, #0]
    6f54:	1ad3      	subs	r3, r2, r3
    6f56:	2b06      	cmp	r3, #6
    6f58:	bfd4      	ite	le
    6f5a:	2300      	movle	r3, #0
    6f5c:	2301      	movgt	r3, #1
    6f5e:	b2db      	uxtb	r3, r3
    6f60:	2b00      	cmp	r3, #0
    6f62:	f000 8194 	beq.w	728e <ground_calibrate+0x1296>
    6f66:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f6e:	781b      	ldrb	r3, [r3, #0]
    6f70:	461a      	mov	r2, r3
    6f72:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f7a:	2105      	movs	r1, #5
    6f7c:	5499      	strb	r1, [r3, r2]
    6f7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f86:	781b      	ldrb	r3, [r3, #0]
    6f88:	3301      	adds	r3, #1
    6f8a:	b2da      	uxtb	r2, r3
    6f8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f94:	701a      	strb	r2, [r3, #0]
    6f96:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f9e:	781b      	ldrb	r3, [r3, #0]
    6fa0:	2bff      	cmp	r3, #255	; 0xff
    6fa2:	d105      	bne.n	6fb0 <ground_calibrate+0xfb8>
    6fa4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fac:	2200      	movs	r2, #0
    6fae:	701a      	strb	r2, [r3, #0]
    6fb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    6fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb8:	781b      	ldrb	r3, [r3, #0]
    6fba:	461a      	mov	r2, r3
    6fbc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc4:	2103      	movs	r1, #3
    6fc6:	5499      	strb	r1, [r3, r2]
    6fc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    6fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd0:	781b      	ldrb	r3, [r3, #0]
    6fd2:	3301      	adds	r3, #1
    6fd4:	b2da      	uxtb	r2, r3
    6fd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fde:	701a      	strb	r2, [r3, #0]
    6fe0:	f24c 3319 	movw	r3, #49945	; 0xc319
    6fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe8:	781b      	ldrb	r3, [r3, #0]
    6fea:	2bff      	cmp	r3, #255	; 0xff
    6fec:	d105      	bne.n	6ffa <ground_calibrate+0x1002>
    6fee:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff6:	2200      	movs	r2, #0
    6ff8:	701a      	strb	r2, [r3, #0]
    6ffa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7002:	2203      	movs	r2, #3
    7004:	701a      	strb	r2, [r3, #0]
    7006:	f24c 431e 	movw	r3, #50206	; 0xc41e
    700a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700e:	2203      	movs	r2, #3
    7010:	701a      	strb	r2, [r3, #0]
    7012:	f24c 3319 	movw	r3, #49945	; 0xc319
    7016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701a:	781b      	ldrb	r3, [r3, #0]
    701c:	461a      	mov	r2, r3
    701e:	f240 5340 	movw	r3, #1344	; 0x540
    7022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7026:	7819      	ldrb	r1, [r3, #0]
    7028:	f24c 331c 	movw	r3, #49948	; 0xc31c
    702c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7030:	5499      	strb	r1, [r3, r2]
    7032:	f240 5340 	movw	r3, #1344	; 0x540
    7036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    703a:	781a      	ldrb	r2, [r3, #0]
    703c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7044:	781b      	ldrb	r3, [r3, #0]
    7046:	4413      	add	r3, r2
    7048:	b2da      	uxtb	r2, r3
    704a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    704e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7052:	701a      	strb	r2, [r3, #0]
    7054:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    705c:	781a      	ldrb	r2, [r3, #0]
    705e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	4413      	add	r3, r2
    706a:	b2da      	uxtb	r2, r3
    706c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7074:	701a      	strb	r2, [r3, #0]
    7076:	f24c 3319 	movw	r3, #49945	; 0xc319
    707a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707e:	781b      	ldrb	r3, [r3, #0]
    7080:	3301      	adds	r3, #1
    7082:	b2da      	uxtb	r2, r3
    7084:	f24c 3319 	movw	r3, #49945	; 0xc319
    7088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708c:	701a      	strb	r2, [r3, #0]
    708e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7096:	781b      	ldrb	r3, [r3, #0]
    7098:	2bff      	cmp	r3, #255	; 0xff
    709a:	d105      	bne.n	70a8 <ground_calibrate+0x10b0>
    709c:	f24c 3319 	movw	r3, #49945	; 0xc319
    70a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a4:	2200      	movs	r2, #0
    70a6:	701a      	strb	r2, [r3, #0]
    70a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    70ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b0:	781b      	ldrb	r3, [r3, #0]
    70b2:	461a      	mov	r2, r3
    70b4:	f240 5340 	movw	r3, #1344	; 0x540
    70b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70bc:	7859      	ldrb	r1, [r3, #1]
    70be:	f24c 331c 	movw	r3, #49948	; 0xc31c
    70c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c6:	5499      	strb	r1, [r3, r2]
    70c8:	4b77      	ldr	r3, [pc, #476]	; (72a8 <ground_calibrate+0x12b0>)
    70ca:	781a      	ldrb	r2, [r3, #0]
    70cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    70d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d4:	781b      	ldrb	r3, [r3, #0]
    70d6:	4413      	add	r3, r2
    70d8:	b2da      	uxtb	r2, r3
    70da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    70de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e2:	701a      	strb	r2, [r3, #0]
    70e4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    70e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ec:	781a      	ldrb	r2, [r3, #0]
    70ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    70f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f6:	781b      	ldrb	r3, [r3, #0]
    70f8:	4413      	add	r3, r2
    70fa:	b2da      	uxtb	r2, r3
    70fc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7104:	701a      	strb	r2, [r3, #0]
    7106:	f24c 3319 	movw	r3, #49945	; 0xc319
    710a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    710e:	781b      	ldrb	r3, [r3, #0]
    7110:	3301      	adds	r3, #1
    7112:	b2da      	uxtb	r2, r3
    7114:	f24c 3319 	movw	r3, #49945	; 0xc319
    7118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    711c:	701a      	strb	r2, [r3, #0]
    711e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7126:	781b      	ldrb	r3, [r3, #0]
    7128:	2bff      	cmp	r3, #255	; 0xff
    712a:	d105      	bne.n	7138 <ground_calibrate+0x1140>
    712c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7134:	2200      	movs	r2, #0
    7136:	701a      	strb	r2, [r3, #0]
    7138:	f24c 3319 	movw	r3, #49945	; 0xc319
    713c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7140:	781b      	ldrb	r3, [r3, #0]
    7142:	461a      	mov	r2, r3
    7144:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    714c:	7819      	ldrb	r1, [r3, #0]
    714e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7156:	5499      	strb	r1, [r3, r2]
    7158:	f24c 3319 	movw	r3, #49945	; 0xc319
    715c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7160:	781b      	ldrb	r3, [r3, #0]
    7162:	3301      	adds	r3, #1
    7164:	b2da      	uxtb	r2, r3
    7166:	f24c 3319 	movw	r3, #49945	; 0xc319
    716a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716e:	701a      	strb	r2, [r3, #0]
    7170:	f24c 3319 	movw	r3, #49945	; 0xc319
    7174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7178:	781b      	ldrb	r3, [r3, #0]
    717a:	2bff      	cmp	r3, #255	; 0xff
    717c:	d105      	bne.n	718a <ground_calibrate+0x1192>
    717e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7186:	2200      	movs	r2, #0
    7188:	701a      	strb	r2, [r3, #0]
    718a:	f24c 3319 	movw	r3, #49945	; 0xc319
    718e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7192:	781b      	ldrb	r3, [r3, #0]
    7194:	461a      	mov	r2, r3
    7196:	f24c 431e 	movw	r3, #50206	; 0xc41e
    719a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    719e:	7819      	ldrb	r1, [r3, #0]
    71a0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    71a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a8:	5499      	strb	r1, [r3, r2]
    71aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    71ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b2:	781b      	ldrb	r3, [r3, #0]
    71b4:	3301      	adds	r3, #1
    71b6:	b2da      	uxtb	r2, r3
    71b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    71bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c0:	701a      	strb	r2, [r3, #0]
    71c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    71c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ca:	781b      	ldrb	r3, [r3, #0]
    71cc:	2bff      	cmp	r3, #255	; 0xff
    71ce:	d105      	bne.n	71dc <ground_calibrate+0x11e4>
    71d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    71d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d8:	2200      	movs	r2, #0
    71da:	701a      	strb	r2, [r3, #0]
    71dc:	f242 0339 	movw	r3, #8249	; 0x2039
    71e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e4:	781b      	ldrb	r3, [r3, #0]
    71e6:	b2db      	uxtb	r3, r3
    71e8:	f003 0310 	and.w	r3, r3, #16
    71ec:	2b00      	cmp	r3, #0
    71ee:	d15a      	bne.n	72a6 <ground_calibrate+0x12ae>
    71f0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    71f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71f8:	781b      	ldrb	r3, [r3, #0]
    71fa:	b2db      	uxtb	r3, r3
    71fc:	461a      	mov	r2, r3
    71fe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7206:	5c9a      	ldrb	r2, [r3, r2]
    7208:	f24c 431b 	movw	r3, #50203	; 0xc41b
    720c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7210:	701a      	strb	r2, [r3, #0]
    7212:	f24c 431c 	movw	r3, #50204	; 0xc41c
    7216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    721a:	2200      	movs	r2, #0
    721c:	701a      	strb	r2, [r3, #0]
    721e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7226:	781b      	ldrb	r3, [r3, #0]
    7228:	b2db      	uxtb	r3, r3
    722a:	3301      	adds	r3, #1
    722c:	b2da      	uxtb	r2, r3
    722e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7236:	701a      	strb	r2, [r3, #0]
    7238:	f24c 331a 	movw	r3, #49946	; 0xc31a
    723c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7240:	781b      	ldrb	r3, [r3, #0]
    7242:	b2db      	uxtb	r3, r3
    7244:	2bff      	cmp	r3, #255	; 0xff
    7246:	d105      	bne.n	7254 <ground_calibrate+0x125c>
    7248:	f24c 331a 	movw	r3, #49946	; 0xc31a
    724c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7250:	2200      	movs	r2, #0
    7252:	701a      	strb	r2, [r3, #0]
    7254:	f242 0338 	movw	r3, #8248	; 0x2038
    7258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    725c:	f242 0238 	movw	r2, #8248	; 0x2038
    7260:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7264:	7812      	ldrb	r2, [r2, #0]
    7266:	b2d2      	uxtb	r2, r2
    7268:	f042 0201 	orr.w	r2, r2, #1
    726c:	b2d2      	uxtb	r2, r2
    726e:	701a      	strb	r2, [r3, #0]
    7270:	f242 0339 	movw	r3, #8249	; 0x2039
    7274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7278:	f242 0239 	movw	r2, #8249	; 0x2039
    727c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7280:	7812      	ldrb	r2, [r2, #0]
    7282:	b2d2      	uxtb	r2, r2
    7284:	f042 0210 	orr.w	r2, r2, #16
    7288:	b2d2      	uxtb	r2, r2
    728a:	701a      	strb	r2, [r3, #0]
    728c:	e00b      	b.n	72a6 <ground_calibrate+0x12ae>
    728e:	f24c 3318 	movw	r3, #49944	; 0xc318
    7292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7296:	781b      	ldrb	r3, [r3, #0]
    7298:	3301      	adds	r3, #1
    729a:	b2da      	uxtb	r2, r3
    729c:	f24c 3318 	movw	r3, #49944	; 0xc318
    72a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a4:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    72a6:	bd80      	pop	{r7, pc}
    72a8:	20000541 	.word	0x20000541

000072ac <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    72ac:	b480      	push	{r7}
    72ae:	b083      	sub	sp, #12
    72b0:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    72b2:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    72b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ba:	781b      	ldrb	r3, [r3, #0]
    72bc:	2b03      	cmp	r3, #3
    72be:	d10c      	bne.n	72da <pprz_mode_update+0x2e>
    72c0:	f24c 3300 	movw	r3, #49920	; 0xc300
    72c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72c8:	781b      	ldrb	r3, [r3, #0]
    72ca:	2b00      	cmp	r3, #0
    72cc:	d032      	beq.n	7334 <pprz_mode_update+0x88>
    72ce:	f24c 3300 	movw	r3, #49920	; 0xc300
    72d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d6:	2200      	movs	r2, #0
    72d8:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    72da:	f24c 4320 	movw	r3, #50208	; 0xc420
    72de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e2:	891b      	ldrh	r3, [r3, #8]
    72e4:	b21b      	sxth	r3, r3
    72e6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    72ea:	dc0f      	bgt.n	730c <pprz_mode_update+0x60>
    72ec:	f24c 4320 	movw	r3, #50208	; 0xc420
    72f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f4:	891b      	ldrh	r3, [r3, #8]
    72f6:	b21a      	sxth	r2, r3
    72f8:	f64e 5341 	movw	r3, #60737	; 0xed41
    72fc:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7300:	429a      	cmp	r2, r3
    7302:	bfb4      	ite	lt
    7304:	2300      	movlt	r3, #0
    7306:	2301      	movge	r3, #1
    7308:	b2db      	uxtb	r3, r3
    730a:	e000      	b.n	730e <pprz_mode_update+0x62>
    730c:	2302      	movs	r3, #2
    730e:	71fb      	strb	r3, [r7, #7]
    7310:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    7314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7318:	781b      	ldrb	r3, [r3, #0]
    731a:	79fa      	ldrb	r2, [r7, #7]
    731c:	429a      	cmp	r2, r3
    731e:	d007      	beq.n	7330 <pprz_mode_update+0x84>
    7320:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    7324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7328:	79fa      	ldrb	r2, [r7, #7]
    732a:	701a      	strb	r2, [r3, #0]
    732c:	2301      	movs	r3, #1
    732e:	e002      	b.n	7336 <pprz_mode_update+0x8a>
    7330:	2300      	movs	r3, #0
    7332:	e000      	b.n	7336 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    7334:	2300      	movs	r3, #0
}
    7336:	4618      	mov	r0, r3
    7338:	370c      	adds	r7, #12
    733a:	46bd      	mov	sp, r7
    733c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7340:	4770      	bx	lr
    7342:	bf00      	nop

00007344 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    7344:	b480      	push	{r7}
    7346:	b083      	sub	sp, #12
    7348:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    734a:	f24c 4320 	movw	r3, #50208	; 0xc420
    734e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7352:	89db      	ldrh	r3, [r3, #14]
    7354:	b21a      	sxth	r2, r3
    7356:	f640 437f 	movw	r3, #3199	; 0xc7f
    735a:	429a      	cmp	r2, r3
    735c:	bfd4      	ite	le
    735e:	2300      	movle	r3, #0
    7360:	2301      	movgt	r3, #1
    7362:	b2db      	uxtb	r3, r3
    7364:	71fb      	strb	r3, [r7, #7]
    7366:	f240 533c 	movw	r3, #1340	; 0x53c
    736a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    736e:	781b      	ldrb	r3, [r3, #0]
    7370:	79fa      	ldrb	r2, [r7, #7]
    7372:	429a      	cmp	r2, r3
    7374:	d007      	beq.n	7386 <ir_estim_mode_update+0x42>
    7376:	f240 533c 	movw	r3, #1340	; 0x53c
    737a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    737e:	79fa      	ldrb	r2, [r7, #7]
    7380:	701a      	strb	r2, [r3, #0]
    7382:	2301      	movs	r3, #1
    7384:	e000      	b.n	7388 <ir_estim_mode_update+0x44>
    7386:	2300      	movs	r3, #0
}
    7388:	4618      	mov	r0, r3
    738a:	370c      	adds	r7, #12
    738c:	46bd      	mov	sp, r7
    738e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7392:	4770      	bx	lr

00007394 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    7394:	b480      	push	{r7}
    7396:	b083      	sub	sp, #12
    7398:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    739a:	f24c 4320 	movw	r3, #50208	; 0xc420
    739e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a2:	7cdb      	ldrb	r3, [r3, #19]
    73a4:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    73a6:	f24c 3303 	movw	r3, #49923	; 0xc303
    73aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ae:	781b      	ldrb	r3, [r3, #0]
    73b0:	79fa      	ldrb	r2, [r7, #7]
    73b2:	429a      	cmp	r2, r3
    73b4:	d017      	beq.n	73e6 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    73b6:	f24c 3303 	movw	r3, #49923	; 0xc303
    73ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73be:	781b      	ldrb	r3, [r3, #0]
    73c0:	461a      	mov	r2, r3
    73c2:	79fb      	ldrb	r3, [r7, #7]
    73c4:	4053      	eors	r3, r2
    73c6:	f003 0303 	and.w	r3, r3, #3
    73ca:	2b00      	cmp	r3, #0
    73cc:	bf0c      	ite	eq
    73ce:	2300      	moveq	r3, #0
    73d0:	2301      	movne	r3, #1
    73d2:	b2db      	uxtb	r3, r3
    73d4:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    73d6:	f24c 3303 	movw	r3, #49923	; 0xc303
    73da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73de:	79fa      	ldrb	r2, [r7, #7]
    73e0:	701a      	strb	r2, [r3, #0]
    return changed;
    73e2:	79bb      	ldrb	r3, [r7, #6]
    73e4:	e000      	b.n	73e8 <mcu1_status_update+0x54>
  }
  return FALSE;
    73e6:	2300      	movs	r3, #0
}
    73e8:	4618      	mov	r0, r3
    73ea:	370c      	adds	r7, #12
    73ec:	46bd      	mov	sp, r7
    73ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    73f2:	4770      	bx	lr

000073f4 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    73f4:	b480      	push	{r7}
    73f6:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    73f8:	f64c 132c 	movw	r3, #51500	; 0xc92c
    73fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7400:	781b      	ldrb	r3, [r3, #0]
    7402:	2b00      	cmp	r3, #0
    7404:	d12a      	bne.n	745c <events_update+0x68>
    7406:	f24c 4320 	movw	r3, #50208	; 0xc420
    740a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    740e:	895b      	ldrh	r3, [r3, #10]
    7410:	b21b      	sxth	r3, r3
    7412:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    7416:	dd21      	ble.n	745c <events_update+0x68>
    7418:	f24c 3314 	movw	r3, #49940	; 0xc314
    741c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7420:	881b      	ldrh	r3, [r3, #0]
    7422:	2b13      	cmp	r3, #19
    7424:	d819      	bhi.n	745a <events_update+0x66>
    7426:	f24c 3314 	movw	r3, #49940	; 0xc314
    742a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    742e:	881b      	ldrh	r3, [r3, #0]
    7430:	3301      	adds	r3, #1
    7432:	b29a      	uxth	r2, r3
    7434:	f24c 3314 	movw	r3, #49940	; 0xc314
    7438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    743c:	801a      	strh	r2, [r3, #0]
    743e:	f24c 3314 	movw	r3, #49940	; 0xc314
    7442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7446:	881b      	ldrh	r3, [r3, #0]
    7448:	2b14      	cmp	r3, #20
    744a:	d106      	bne.n	745a <events_update+0x66>
    744c:	f24c 3300 	movw	r3, #49920	; 0xc300
    7450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7454:	2201      	movs	r2, #1
    7456:	701a      	strb	r2, [r3, #0]
    7458:	e00c      	b.n	7474 <events_update+0x80>
    745a:	e00b      	b.n	7474 <events_update+0x80>
    745c:	f24c 3314 	movw	r3, #49940	; 0xc314
    7460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7464:	2200      	movs	r2, #0
    7466:	801a      	strh	r2, [r3, #0]
    7468:	f24c 3300 	movw	r3, #49920	; 0xc300
    746c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7470:	2200      	movs	r2, #0
    7472:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    7474:	f64c 132c 	movw	r3, #51500	; 0xc92c
    7478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    747c:	781b      	ldrb	r3, [r3, #0]
    747e:	2b00      	cmp	r3, #0
    7480:	d12a      	bne.n	74d8 <events_update+0xe4>
    7482:	f24c 4320 	movw	r3, #50208	; 0xc420
    7486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748a:	895b      	ldrh	r3, [r3, #10]
    748c:	b21b      	sxth	r3, r3
    748e:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    7492:	da21      	bge.n	74d8 <events_update+0xe4>
    7494:	f24c 3316 	movw	r3, #49942	; 0xc316
    7498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    749c:	881b      	ldrh	r3, [r3, #0]
    749e:	2b13      	cmp	r3, #19
    74a0:	d819      	bhi.n	74d6 <events_update+0xe2>
    74a2:	f24c 3316 	movw	r3, #49942	; 0xc316
    74a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74aa:	881b      	ldrh	r3, [r3, #0]
    74ac:	3301      	adds	r3, #1
    74ae:	b29a      	uxth	r2, r3
    74b0:	f24c 3316 	movw	r3, #49942	; 0xc316
    74b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b8:	801a      	strh	r2, [r3, #0]
    74ba:	f24c 3316 	movw	r3, #49942	; 0xc316
    74be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c2:	881b      	ldrh	r3, [r3, #0]
    74c4:	2b14      	cmp	r3, #20
    74c6:	d106      	bne.n	74d6 <events_update+0xe2>
    74c8:	f24c 3301 	movw	r3, #49921	; 0xc301
    74cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d0:	2201      	movs	r2, #1
    74d2:	701a      	strb	r2, [r3, #0]
    74d4:	e00c      	b.n	74f0 <events_update+0xfc>
    74d6:	e00b      	b.n	74f0 <events_update+0xfc>
    74d8:	f24c 3316 	movw	r3, #49942	; 0xc316
    74dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e0:	2200      	movs	r2, #0
    74e2:	801a      	strh	r2, [r3, #0]
    74e4:	f24c 3301 	movw	r3, #49921	; 0xc301
    74e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ec:	2200      	movs	r2, #0
    74ee:	701a      	strb	r2, [r3, #0]
}  
    74f0:	46bd      	mov	sp, r7
    74f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    74f6:	4770      	bx	lr

000074f8 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    74f8:	b480      	push	{r7}
    74fa:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    74fc:	f24c 4320 	movw	r3, #50208	; 0xc420
    7500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7504:	88da      	ldrh	r2, [r3, #6]
    7506:	f24c 4338 	movw	r3, #50232	; 0xc438
    750a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    750e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7510:	f24c 4338 	movw	r3, #50232	; 0xc438
    7514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7518:	2200      	movs	r2, #0
    751a:	74da      	strb	r2, [r3, #19]
}
    751c:	46bd      	mov	sp, r7
    751e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7522:	4770      	bx	lr

00007524 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7524:	b480      	push	{r7}
    7526:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  if (boot) 
    7528:	f240 533d 	movw	r3, #1341	; 0x53d
    752c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7530:	781b      	ldrb	r3, [r3, #0]
    7532:	2b00      	cmp	r3, #0
    7534:	f000 87c6 	beq.w	84c4 <send_boot+0xfa0>
  {
      DOWNLINK_SEND_BOOT(&version);
    7538:	f24c 3319 	movw	r3, #49945	; 0xc319
    753c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7540:	781a      	ldrb	r2, [r3, #0]
    7542:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754a:	781b      	ldrb	r3, [r3, #0]
    754c:	b2db      	uxtb	r3, r3
    754e:	429a      	cmp	r2, r3
    7550:	d313      	bcc.n	757a <send_boot+0x56>
    7552:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    755a:	781b      	ldrb	r3, [r3, #0]
    755c:	b2db      	uxtb	r3, r3
    755e:	461a      	mov	r2, r3
    7560:	f24c 3319 	movw	r3, #49945	; 0xc319
    7564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7568:	781b      	ldrb	r3, [r3, #0]
    756a:	1ad3      	subs	r3, r2, r3
    756c:	33ff      	adds	r3, #255	; 0xff
    756e:	2b06      	cmp	r3, #6
    7570:	bfd4      	ite	le
    7572:	2300      	movle	r3, #0
    7574:	2301      	movgt	r3, #1
    7576:	b2db      	uxtb	r3, r3
    7578:	e011      	b.n	759e <send_boot+0x7a>
    757a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    757e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7582:	781b      	ldrb	r3, [r3, #0]
    7584:	b2db      	uxtb	r3, r3
    7586:	461a      	mov	r2, r3
    7588:	f24c 3319 	movw	r3, #49945	; 0xc319
    758c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7590:	781b      	ldrb	r3, [r3, #0]
    7592:	1ad3      	subs	r3, r2, r3
    7594:	2b06      	cmp	r3, #6
    7596:	bfd4      	ite	le
    7598:	2300      	movle	r3, #0
    759a:	2301      	movgt	r3, #1
    759c:	b2db      	uxtb	r3, r3
    759e:	2b00      	cmp	r3, #0
    75a0:	f000 8194 	beq.w	78cc <send_boot+0x3a8>
    75a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    75a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ac:	781b      	ldrb	r3, [r3, #0]
    75ae:	461a      	mov	r2, r3
    75b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    75b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b8:	2105      	movs	r1, #5
    75ba:	5499      	strb	r1, [r3, r2]
    75bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    75c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c4:	781b      	ldrb	r3, [r3, #0]
    75c6:	3301      	adds	r3, #1
    75c8:	b2da      	uxtb	r2, r3
    75ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    75ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d2:	701a      	strb	r2, [r3, #0]
    75d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    75d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75dc:	781b      	ldrb	r3, [r3, #0]
    75de:	2bff      	cmp	r3, #255	; 0xff
    75e0:	d105      	bne.n	75ee <send_boot+0xca>
    75e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    75e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ea:	2200      	movs	r2, #0
    75ec:	701a      	strb	r2, [r3, #0]
    75ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    75f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f6:	781b      	ldrb	r3, [r3, #0]
    75f8:	461a      	mov	r2, r3
    75fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    75fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7602:	2101      	movs	r1, #1
    7604:	5499      	strb	r1, [r3, r2]
    7606:	f24c 3319 	movw	r3, #49945	; 0xc319
    760a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    760e:	781b      	ldrb	r3, [r3, #0]
    7610:	3301      	adds	r3, #1
    7612:	b2da      	uxtb	r2, r3
    7614:	f24c 3319 	movw	r3, #49945	; 0xc319
    7618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    761c:	701a      	strb	r2, [r3, #0]
    761e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7626:	781b      	ldrb	r3, [r3, #0]
    7628:	2bff      	cmp	r3, #255	; 0xff
    762a:	d105      	bne.n	7638 <send_boot+0x114>
    762c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7634:	2200      	movs	r2, #0
    7636:	701a      	strb	r2, [r3, #0]
    7638:	f24c 431d 	movw	r3, #50205	; 0xc41d
    763c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7640:	2201      	movs	r2, #1
    7642:	701a      	strb	r2, [r3, #0]
    7644:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764c:	2201      	movs	r2, #1
    764e:	701a      	strb	r2, [r3, #0]
    7650:	f24c 3319 	movw	r3, #49945	; 0xc319
    7654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7658:	781b      	ldrb	r3, [r3, #0]
    765a:	461a      	mov	r2, r3
    765c:	f648 233a 	movw	r3, #35386	; 0x8a3a
    7660:	f2c0 0301 	movt	r3, #1
    7664:	7819      	ldrb	r1, [r3, #0]
    7666:	f24c 331c 	movw	r3, #49948	; 0xc31c
    766a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    766e:	5499      	strb	r1, [r3, r2]
    7670:	f648 233a 	movw	r3, #35386	; 0x8a3a
    7674:	f2c0 0301 	movt	r3, #1
    7678:	781a      	ldrb	r2, [r3, #0]
    767a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    767e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7682:	781b      	ldrb	r3, [r3, #0]
    7684:	4413      	add	r3, r2
    7686:	b2da      	uxtb	r2, r3
    7688:	f24c 431d 	movw	r3, #50205	; 0xc41d
    768c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7690:	701a      	strb	r2, [r3, #0]
    7692:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    769a:	781a      	ldrb	r2, [r3, #0]
    769c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    76a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a4:	781b      	ldrb	r3, [r3, #0]
    76a6:	4413      	add	r3, r2
    76a8:	b2da      	uxtb	r2, r3
    76aa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    76ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b2:	701a      	strb	r2, [r3, #0]
    76b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    76b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76bc:	781b      	ldrb	r3, [r3, #0]
    76be:	3301      	adds	r3, #1
    76c0:	b2da      	uxtb	r2, r3
    76c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    76c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ca:	701a      	strb	r2, [r3, #0]
    76cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    76d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d4:	781b      	ldrb	r3, [r3, #0]
    76d6:	2bff      	cmp	r3, #255	; 0xff
    76d8:	d105      	bne.n	76e6 <send_boot+0x1c2>
    76da:	f24c 3319 	movw	r3, #49945	; 0xc319
    76de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e2:	2200      	movs	r2, #0
    76e4:	701a      	strb	r2, [r3, #0]
    76e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    76ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ee:	781b      	ldrb	r3, [r3, #0]
    76f0:	461a      	mov	r2, r3
    76f2:	f648 233a 	movw	r3, #35386	; 0x8a3a
    76f6:	f2c0 0301 	movt	r3, #1
    76fa:	7859      	ldrb	r1, [r3, #1]
    76fc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7704:	5499      	strb	r1, [r3, r2]
    7706:	4b88      	ldr	r3, [pc, #544]	; (7928 <send_boot+0x404>)
    7708:	781a      	ldrb	r2, [r3, #0]
    770a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    770e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7712:	781b      	ldrb	r3, [r3, #0]
    7714:	4413      	add	r3, r2
    7716:	b2da      	uxtb	r2, r3
    7718:	f24c 431d 	movw	r3, #50205	; 0xc41d
    771c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7720:	701a      	strb	r2, [r3, #0]
    7722:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    772a:	781a      	ldrb	r2, [r3, #0]
    772c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7734:	781b      	ldrb	r3, [r3, #0]
    7736:	4413      	add	r3, r2
    7738:	b2da      	uxtb	r2, r3
    773a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    773e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7742:	701a      	strb	r2, [r3, #0]
    7744:	f24c 3319 	movw	r3, #49945	; 0xc319
    7748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774c:	781b      	ldrb	r3, [r3, #0]
    774e:	3301      	adds	r3, #1
    7750:	b2da      	uxtb	r2, r3
    7752:	f24c 3319 	movw	r3, #49945	; 0xc319
    7756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    775a:	701a      	strb	r2, [r3, #0]
    775c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7764:	781b      	ldrb	r3, [r3, #0]
    7766:	2bff      	cmp	r3, #255	; 0xff
    7768:	d105      	bne.n	7776 <send_boot+0x252>
    776a:	f24c 3319 	movw	r3, #49945	; 0xc319
    776e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7772:	2200      	movs	r2, #0
    7774:	701a      	strb	r2, [r3, #0]
    7776:	f24c 3319 	movw	r3, #49945	; 0xc319
    777a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777e:	781b      	ldrb	r3, [r3, #0]
    7780:	461a      	mov	r2, r3
    7782:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    778a:	7819      	ldrb	r1, [r3, #0]
    778c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7794:	5499      	strb	r1, [r3, r2]
    7796:	f24c 3319 	movw	r3, #49945	; 0xc319
    779a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    779e:	781b      	ldrb	r3, [r3, #0]
    77a0:	3301      	adds	r3, #1
    77a2:	b2da      	uxtb	r2, r3
    77a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    77a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ac:	701a      	strb	r2, [r3, #0]
    77ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    77b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b6:	781b      	ldrb	r3, [r3, #0]
    77b8:	2bff      	cmp	r3, #255	; 0xff
    77ba:	d105      	bne.n	77c8 <send_boot+0x2a4>
    77bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    77c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c4:	2200      	movs	r2, #0
    77c6:	701a      	strb	r2, [r3, #0]
    77c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    77cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d0:	781b      	ldrb	r3, [r3, #0]
    77d2:	461a      	mov	r2, r3
    77d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    77d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77dc:	7819      	ldrb	r1, [r3, #0]
    77de:	f24c 331c 	movw	r3, #49948	; 0xc31c
    77e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e6:	5499      	strb	r1, [r3, r2]
    77e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    77ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f0:	781b      	ldrb	r3, [r3, #0]
    77f2:	3301      	adds	r3, #1
    77f4:	b2da      	uxtb	r2, r3
    77f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    77fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fe:	701a      	strb	r2, [r3, #0]
    7800:	f24c 3319 	movw	r3, #49945	; 0xc319
    7804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7808:	781b      	ldrb	r3, [r3, #0]
    780a:	2bff      	cmp	r3, #255	; 0xff
    780c:	d105      	bne.n	781a <send_boot+0x2f6>
    780e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7816:	2200      	movs	r2, #0
    7818:	701a      	strb	r2, [r3, #0]
    781a:	f242 0339 	movw	r3, #8249	; 0x2039
    781e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7822:	781b      	ldrb	r3, [r3, #0]
    7824:	b2db      	uxtb	r3, r3
    7826:	f003 0310 	and.w	r3, r3, #16
    782a:	2b00      	cmp	r3, #0
    782c:	d15a      	bne.n	78e4 <send_boot+0x3c0>
    782e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7836:	781b      	ldrb	r3, [r3, #0]
    7838:	b2db      	uxtb	r3, r3
    783a:	461a      	mov	r2, r3
    783c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7844:	5c9a      	ldrb	r2, [r3, r2]
    7846:	f24c 431b 	movw	r3, #50203	; 0xc41b
    784a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    784e:	701a      	strb	r2, [r3, #0]
    7850:	f24c 431c 	movw	r3, #50204	; 0xc41c
    7854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7858:	2200      	movs	r2, #0
    785a:	701a      	strb	r2, [r3, #0]
    785c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7864:	781b      	ldrb	r3, [r3, #0]
    7866:	b2db      	uxtb	r3, r3
    7868:	3301      	adds	r3, #1
    786a:	b2da      	uxtb	r2, r3
    786c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7874:	701a      	strb	r2, [r3, #0]
    7876:	f24c 331a 	movw	r3, #49946	; 0xc31a
    787a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    787e:	781b      	ldrb	r3, [r3, #0]
    7880:	b2db      	uxtb	r3, r3
    7882:	2bff      	cmp	r3, #255	; 0xff
    7884:	d105      	bne.n	7892 <send_boot+0x36e>
    7886:	f24c 331a 	movw	r3, #49946	; 0xc31a
    788a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788e:	2200      	movs	r2, #0
    7890:	701a      	strb	r2, [r3, #0]
    7892:	f242 0338 	movw	r3, #8248	; 0x2038
    7896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    789a:	f242 0238 	movw	r2, #8248	; 0x2038
    789e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    78a2:	7812      	ldrb	r2, [r2, #0]
    78a4:	b2d2      	uxtb	r2, r2
    78a6:	f042 0201 	orr.w	r2, r2, #1
    78aa:	b2d2      	uxtb	r2, r2
    78ac:	701a      	strb	r2, [r3, #0]
    78ae:	f242 0339 	movw	r3, #8249	; 0x2039
    78b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78b6:	f242 0239 	movw	r2, #8249	; 0x2039
    78ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    78be:	7812      	ldrb	r2, [r2, #0]
    78c0:	b2d2      	uxtb	r2, r2
    78c2:	f042 0210 	orr.w	r2, r2, #16
    78c6:	b2d2      	uxtb	r2, r2
    78c8:	701a      	strb	r2, [r3, #0]
    78ca:	e00b      	b.n	78e4 <send_boot+0x3c0>
    78cc:	f24c 3318 	movw	r3, #49944	; 0xc318
    78d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d4:	781b      	ldrb	r3, [r3, #0]
    78d6:	3301      	adds	r3, #1
    78d8:	b2da      	uxtb	r2, r3
    78da:	f24c 3318 	movw	r3, #49944	; 0xc318
    78de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e2:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    78e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    78e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ec:	781a      	ldrb	r2, [r3, #0]
    78ee:	f24c 331a 	movw	r3, #49946	; 0xc31a
    78f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f6:	781b      	ldrb	r3, [r3, #0]
    78f8:	b2db      	uxtb	r3, r3
    78fa:	429a      	cmp	r2, r3
    78fc:	d316      	bcc.n	792c <send_boot+0x408>
    78fe:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7906:	781b      	ldrb	r3, [r3, #0]
    7908:	b2db      	uxtb	r3, r3
    790a:	461a      	mov	r2, r3
    790c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7914:	781b      	ldrb	r3, [r3, #0]
    7916:	1ad3      	subs	r3, r2, r3
    7918:	33ff      	adds	r3, #255	; 0xff
    791a:	2b14      	cmp	r3, #20
    791c:	bfd4      	ite	le
    791e:	2300      	movle	r3, #0
    7920:	2301      	movgt	r3, #1
    7922:	b2db      	uxtb	r3, r3
    7924:	e014      	b.n	7950 <send_boot+0x42c>
    7926:	bf00      	nop
    7928:	00018a3b 	.word	0x00018a3b
    792c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7934:	781b      	ldrb	r3, [r3, #0]
    7936:	b2db      	uxtb	r3, r3
    7938:	461a      	mov	r2, r3
    793a:	f24c 3319 	movw	r3, #49945	; 0xc319
    793e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7942:	781b      	ldrb	r3, [r3, #0]
    7944:	1ad3      	subs	r3, r2, r3
    7946:	2b14      	cmp	r3, #20
    7948:	bfd4      	ite	le
    794a:	2300      	movle	r3, #0
    794c:	2301      	movgt	r3, #1
    794e:	b2db      	uxtb	r3, r3
    7950:	2b00      	cmp	r3, #0
    7952:	f000 85a5 	beq.w	84a0 <send_boot+0xf7c>
    7956:	f24c 3319 	movw	r3, #49945	; 0xc319
    795a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    795e:	781b      	ldrb	r3, [r3, #0]
    7960:	461a      	mov	r2, r3
    7962:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    796a:	2105      	movs	r1, #5
    796c:	5499      	strb	r1, [r3, r2]
    796e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7976:	781b      	ldrb	r3, [r3, #0]
    7978:	3301      	adds	r3, #1
    797a:	b2da      	uxtb	r2, r3
    797c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7984:	701a      	strb	r2, [r3, #0]
    7986:	f24c 3319 	movw	r3, #49945	; 0xc319
    798a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    798e:	781b      	ldrb	r3, [r3, #0]
    7990:	2bff      	cmp	r3, #255	; 0xff
    7992:	d105      	bne.n	79a0 <send_boot+0x47c>
    7994:	f24c 3319 	movw	r3, #49945	; 0xc319
    7998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799c:	2200      	movs	r2, #0
    799e:	701a      	strb	r2, [r3, #0]
    79a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    79a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a8:	781b      	ldrb	r3, [r3, #0]
    79aa:	461a      	mov	r2, r3
    79ac:	f24c 331c 	movw	r3, #49948	; 0xc31c
    79b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b4:	2105      	movs	r1, #5
    79b6:	5499      	strb	r1, [r3, r2]
    79b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    79bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c0:	781b      	ldrb	r3, [r3, #0]
    79c2:	3301      	adds	r3, #1
    79c4:	b2da      	uxtb	r2, r3
    79c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    79ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ce:	701a      	strb	r2, [r3, #0]
    79d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    79d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d8:	781b      	ldrb	r3, [r3, #0]
    79da:	2bff      	cmp	r3, #255	; 0xff
    79dc:	d105      	bne.n	79ea <send_boot+0x4c6>
    79de:	f24c 3319 	movw	r3, #49945	; 0xc319
    79e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e6:	2200      	movs	r2, #0
    79e8:	701a      	strb	r2, [r3, #0]
    79ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    79ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f2:	2205      	movs	r2, #5
    79f4:	701a      	strb	r2, [r3, #0]
    79f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    79fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79fe:	2205      	movs	r2, #5
    7a00:	701a      	strb	r2, [r3, #0]
    7a02:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0a:	781b      	ldrb	r3, [r3, #0]
    7a0c:	461a      	mov	r2, r3
    7a0e:	f64c 1310 	movw	r3, #51472	; 0xc910
    7a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a16:	7819      	ldrb	r1, [r3, #0]
    7a18:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a20:	5499      	strb	r1, [r3, r2]
    7a22:	f64c 1310 	movw	r3, #51472	; 0xc910
    7a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2a:	781a      	ldrb	r2, [r3, #0]
    7a2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a34:	781b      	ldrb	r3, [r3, #0]
    7a36:	4413      	add	r3, r2
    7a38:	b2da      	uxtb	r2, r3
    7a3a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a42:	701a      	strb	r2, [r3, #0]
    7a44:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a4c:	781a      	ldrb	r2, [r3, #0]
    7a4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a56:	781b      	ldrb	r3, [r3, #0]
    7a58:	4413      	add	r3, r2
    7a5a:	b2da      	uxtb	r2, r3
    7a5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a64:	701a      	strb	r2, [r3, #0]
    7a66:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6e:	781b      	ldrb	r3, [r3, #0]
    7a70:	3301      	adds	r3, #1
    7a72:	b2da      	uxtb	r2, r3
    7a74:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7c:	701a      	strb	r2, [r3, #0]
    7a7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a86:	781b      	ldrb	r3, [r3, #0]
    7a88:	2bff      	cmp	r3, #255	; 0xff
    7a8a:	d105      	bne.n	7a98 <send_boot+0x574>
    7a8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a94:	2200      	movs	r2, #0
    7a96:	701a      	strb	r2, [r3, #0]
    7a98:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa0:	781b      	ldrb	r3, [r3, #0]
    7aa2:	461a      	mov	r2, r3
    7aa4:	f64c 1310 	movw	r3, #51472	; 0xc910
    7aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aac:	7859      	ldrb	r1, [r3, #1]
    7aae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab6:	5499      	strb	r1, [r3, r2]
    7ab8:	4bd1      	ldr	r3, [pc, #836]	; (7e00 <send_boot+0x8dc>)
    7aba:	781a      	ldrb	r2, [r3, #0]
    7abc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac4:	781b      	ldrb	r3, [r3, #0]
    7ac6:	4413      	add	r3, r2
    7ac8:	b2da      	uxtb	r2, r3
    7aca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad2:	701a      	strb	r2, [r3, #0]
    7ad4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7adc:	781a      	ldrb	r2, [r3, #0]
    7ade:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae6:	781b      	ldrb	r3, [r3, #0]
    7ae8:	4413      	add	r3, r2
    7aea:	b2da      	uxtb	r2, r3
    7aec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af4:	701a      	strb	r2, [r3, #0]
    7af6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afe:	781b      	ldrb	r3, [r3, #0]
    7b00:	3301      	adds	r3, #1
    7b02:	b2da      	uxtb	r2, r3
    7b04:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0c:	701a      	strb	r2, [r3, #0]
    7b0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b16:	781b      	ldrb	r3, [r3, #0]
    7b18:	2bff      	cmp	r3, #255	; 0xff
    7b1a:	d105      	bne.n	7b28 <send_boot+0x604>
    7b1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b24:	2200      	movs	r2, #0
    7b26:	701a      	strb	r2, [r3, #0]
    7b28:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b30:	781b      	ldrb	r3, [r3, #0]
    7b32:	461a      	mov	r2, r3
    7b34:	f64c 1310 	movw	r3, #51472	; 0xc910
    7b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3c:	7899      	ldrb	r1, [r3, #2]
    7b3e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b46:	5499      	strb	r1, [r3, r2]
    7b48:	4bae      	ldr	r3, [pc, #696]	; (7e04 <send_boot+0x8e0>)
    7b4a:	781a      	ldrb	r2, [r3, #0]
    7b4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b54:	781b      	ldrb	r3, [r3, #0]
    7b56:	4413      	add	r3, r2
    7b58:	b2da      	uxtb	r2, r3
    7b5a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b62:	701a      	strb	r2, [r3, #0]
    7b64:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6c:	781a      	ldrb	r2, [r3, #0]
    7b6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b76:	781b      	ldrb	r3, [r3, #0]
    7b78:	4413      	add	r3, r2
    7b7a:	b2da      	uxtb	r2, r3
    7b7c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b84:	701a      	strb	r2, [r3, #0]
    7b86:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8e:	781b      	ldrb	r3, [r3, #0]
    7b90:	3301      	adds	r3, #1
    7b92:	b2da      	uxtb	r2, r3
    7b94:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9c:	701a      	strb	r2, [r3, #0]
    7b9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba6:	781b      	ldrb	r3, [r3, #0]
    7ba8:	2bff      	cmp	r3, #255	; 0xff
    7baa:	d105      	bne.n	7bb8 <send_boot+0x694>
    7bac:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb4:	2200      	movs	r2, #0
    7bb6:	701a      	strb	r2, [r3, #0]
    7bb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc0:	781b      	ldrb	r3, [r3, #0]
    7bc2:	461a      	mov	r2, r3
    7bc4:	f64c 1310 	movw	r3, #51472	; 0xc910
    7bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bcc:	78d9      	ldrb	r1, [r3, #3]
    7bce:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd6:	5499      	strb	r1, [r3, r2]
    7bd8:	4b8b      	ldr	r3, [pc, #556]	; (7e08 <send_boot+0x8e4>)
    7bda:	781a      	ldrb	r2, [r3, #0]
    7bdc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be4:	781b      	ldrb	r3, [r3, #0]
    7be6:	4413      	add	r3, r2
    7be8:	b2da      	uxtb	r2, r3
    7bea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf2:	701a      	strb	r2, [r3, #0]
    7bf4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfc:	781a      	ldrb	r2, [r3, #0]
    7bfe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c06:	781b      	ldrb	r3, [r3, #0]
    7c08:	4413      	add	r3, r2
    7c0a:	b2da      	uxtb	r2, r3
    7c0c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c14:	701a      	strb	r2, [r3, #0]
    7c16:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1e:	781b      	ldrb	r3, [r3, #0]
    7c20:	3301      	adds	r3, #1
    7c22:	b2da      	uxtb	r2, r3
    7c24:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2c:	701a      	strb	r2, [r3, #0]
    7c2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c36:	781b      	ldrb	r3, [r3, #0]
    7c38:	2bff      	cmp	r3, #255	; 0xff
    7c3a:	d105      	bne.n	7c48 <send_boot+0x724>
    7c3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c44:	2200      	movs	r2, #0
    7c46:	701a      	strb	r2, [r3, #0]
    7c48:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c50:	781b      	ldrb	r3, [r3, #0]
    7c52:	461a      	mov	r2, r3
    7c54:	f64c 1314 	movw	r3, #51476	; 0xc914
    7c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5c:	7819      	ldrb	r1, [r3, #0]
    7c5e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c66:	5499      	strb	r1, [r3, r2]
    7c68:	f64c 1314 	movw	r3, #51476	; 0xc914
    7c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c70:	781a      	ldrb	r2, [r3, #0]
    7c72:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7a:	781b      	ldrb	r3, [r3, #0]
    7c7c:	4413      	add	r3, r2
    7c7e:	b2da      	uxtb	r2, r3
    7c80:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c88:	701a      	strb	r2, [r3, #0]
    7c8a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c92:	781a      	ldrb	r2, [r3, #0]
    7c94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c9c:	781b      	ldrb	r3, [r3, #0]
    7c9e:	4413      	add	r3, r2
    7ca0:	b2da      	uxtb	r2, r3
    7ca2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7caa:	701a      	strb	r2, [r3, #0]
    7cac:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb4:	781b      	ldrb	r3, [r3, #0]
    7cb6:	3301      	adds	r3, #1
    7cb8:	b2da      	uxtb	r2, r3
    7cba:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc2:	701a      	strb	r2, [r3, #0]
    7cc4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ccc:	781b      	ldrb	r3, [r3, #0]
    7cce:	2bff      	cmp	r3, #255	; 0xff
    7cd0:	d105      	bne.n	7cde <send_boot+0x7ba>
    7cd2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cda:	2200      	movs	r2, #0
    7cdc:	701a      	strb	r2, [r3, #0]
    7cde:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce6:	781b      	ldrb	r3, [r3, #0]
    7ce8:	461a      	mov	r2, r3
    7cea:	f64c 1314 	movw	r3, #51476	; 0xc914
    7cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf2:	7859      	ldrb	r1, [r3, #1]
    7cf4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfc:	5499      	strb	r1, [r3, r2]
    7cfe:	4b43      	ldr	r3, [pc, #268]	; (7e0c <send_boot+0x8e8>)
    7d00:	781a      	ldrb	r2, [r3, #0]
    7d02:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0a:	781b      	ldrb	r3, [r3, #0]
    7d0c:	4413      	add	r3, r2
    7d0e:	b2da      	uxtb	r2, r3
    7d10:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d18:	701a      	strb	r2, [r3, #0]
    7d1a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d22:	781a      	ldrb	r2, [r3, #0]
    7d24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	4413      	add	r3, r2
    7d30:	b2da      	uxtb	r2, r3
    7d32:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3a:	701a      	strb	r2, [r3, #0]
    7d3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d44:	781b      	ldrb	r3, [r3, #0]
    7d46:	3301      	adds	r3, #1
    7d48:	b2da      	uxtb	r2, r3
    7d4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d52:	701a      	strb	r2, [r3, #0]
    7d54:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5c:	781b      	ldrb	r3, [r3, #0]
    7d5e:	2bff      	cmp	r3, #255	; 0xff
    7d60:	d105      	bne.n	7d6e <send_boot+0x84a>
    7d62:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d6a:	2200      	movs	r2, #0
    7d6c:	701a      	strb	r2, [r3, #0]
    7d6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d76:	781b      	ldrb	r3, [r3, #0]
    7d78:	461a      	mov	r2, r3
    7d7a:	f64c 1314 	movw	r3, #51476	; 0xc914
    7d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d82:	7899      	ldrb	r1, [r3, #2]
    7d84:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d8c:	5499      	strb	r1, [r3, r2]
    7d8e:	4b20      	ldr	r3, [pc, #128]	; (7e10 <send_boot+0x8ec>)
    7d90:	781a      	ldrb	r2, [r3, #0]
    7d92:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d9a:	781b      	ldrb	r3, [r3, #0]
    7d9c:	4413      	add	r3, r2
    7d9e:	b2da      	uxtb	r2, r3
    7da0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da8:	701a      	strb	r2, [r3, #0]
    7daa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db2:	781a      	ldrb	r2, [r3, #0]
    7db4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dbc:	781b      	ldrb	r3, [r3, #0]
    7dbe:	4413      	add	r3, r2
    7dc0:	b2da      	uxtb	r2, r3
    7dc2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dca:	701a      	strb	r2, [r3, #0]
    7dcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd4:	781b      	ldrb	r3, [r3, #0]
    7dd6:	3301      	adds	r3, #1
    7dd8:	b2da      	uxtb	r2, r3
    7dda:	f24c 3319 	movw	r3, #49945	; 0xc319
    7dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de2:	701a      	strb	r2, [r3, #0]
    7de4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dec:	781b      	ldrb	r3, [r3, #0]
    7dee:	2bff      	cmp	r3, #255	; 0xff
    7df0:	d110      	bne.n	7e14 <send_boot+0x8f0>
    7df2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dfa:	2200      	movs	r2, #0
    7dfc:	701a      	strb	r2, [r3, #0]
    7dfe:	e009      	b.n	7e14 <send_boot+0x8f0>
    7e00:	2004c911 	.word	0x2004c911
    7e04:	2004c912 	.word	0x2004c912
    7e08:	2004c913 	.word	0x2004c913
    7e0c:	2004c915 	.word	0x2004c915
    7e10:	2004c916 	.word	0x2004c916
    7e14:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1c:	781b      	ldrb	r3, [r3, #0]
    7e1e:	461a      	mov	r2, r3
    7e20:	f64c 1314 	movw	r3, #51476	; 0xc914
    7e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e28:	78d9      	ldrb	r1, [r3, #3]
    7e2a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e32:	5499      	strb	r1, [r3, r2]
    7e34:	4bd3      	ldr	r3, [pc, #844]	; (8184 <send_boot+0xc60>)
    7e36:	781a      	ldrb	r2, [r3, #0]
    7e38:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e40:	781b      	ldrb	r3, [r3, #0]
    7e42:	4413      	add	r3, r2
    7e44:	b2da      	uxtb	r2, r3
    7e46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4e:	701a      	strb	r2, [r3, #0]
    7e50:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e58:	781a      	ldrb	r2, [r3, #0]
    7e5a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e62:	781b      	ldrb	r3, [r3, #0]
    7e64:	4413      	add	r3, r2
    7e66:	b2da      	uxtb	r2, r3
    7e68:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e70:	701a      	strb	r2, [r3, #0]
    7e72:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e7a:	781b      	ldrb	r3, [r3, #0]
    7e7c:	3301      	adds	r3, #1
    7e7e:	b2da      	uxtb	r2, r3
    7e80:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e88:	701a      	strb	r2, [r3, #0]
    7e8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e92:	781b      	ldrb	r3, [r3, #0]
    7e94:	2bff      	cmp	r3, #255	; 0xff
    7e96:	d105      	bne.n	7ea4 <send_boot+0x980>
    7e98:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea0:	2200      	movs	r2, #0
    7ea2:	701a      	strb	r2, [r3, #0]
    7ea4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eac:	781b      	ldrb	r3, [r3, #0]
    7eae:	461a      	mov	r2, r3
    7eb0:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb8:	7819      	ldrb	r1, [r3, #0]
    7eba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec2:	5499      	strb	r1, [r3, r2]
    7ec4:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ecc:	781a      	ldrb	r2, [r3, #0]
    7ece:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed6:	781b      	ldrb	r3, [r3, #0]
    7ed8:	4413      	add	r3, r2
    7eda:	b2da      	uxtb	r2, r3
    7edc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee4:	701a      	strb	r2, [r3, #0]
    7ee6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eee:	781a      	ldrb	r2, [r3, #0]
    7ef0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef8:	781b      	ldrb	r3, [r3, #0]
    7efa:	4413      	add	r3, r2
    7efc:	b2da      	uxtb	r2, r3
    7efe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f06:	701a      	strb	r2, [r3, #0]
    7f08:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f10:	781b      	ldrb	r3, [r3, #0]
    7f12:	3301      	adds	r3, #1
    7f14:	b2da      	uxtb	r2, r3
    7f16:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f1e:	701a      	strb	r2, [r3, #0]
    7f20:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f28:	781b      	ldrb	r3, [r3, #0]
    7f2a:	2bff      	cmp	r3, #255	; 0xff
    7f2c:	d105      	bne.n	7f3a <send_boot+0xa16>
    7f2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f36:	2200      	movs	r2, #0
    7f38:	701a      	strb	r2, [r3, #0]
    7f3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f42:	781b      	ldrb	r3, [r3, #0]
    7f44:	461a      	mov	r2, r3
    7f46:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f4e:	7859      	ldrb	r1, [r3, #1]
    7f50:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f58:	5499      	strb	r1, [r3, r2]
    7f5a:	4b8b      	ldr	r3, [pc, #556]	; (8188 <send_boot+0xc64>)
    7f5c:	781a      	ldrb	r2, [r3, #0]
    7f5e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f66:	781b      	ldrb	r3, [r3, #0]
    7f68:	4413      	add	r3, r2
    7f6a:	b2da      	uxtb	r2, r3
    7f6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f74:	701a      	strb	r2, [r3, #0]
    7f76:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f7e:	781a      	ldrb	r2, [r3, #0]
    7f80:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f88:	781b      	ldrb	r3, [r3, #0]
    7f8a:	4413      	add	r3, r2
    7f8c:	b2da      	uxtb	r2, r3
    7f8e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f96:	701a      	strb	r2, [r3, #0]
    7f98:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa0:	781b      	ldrb	r3, [r3, #0]
    7fa2:	3301      	adds	r3, #1
    7fa4:	b2da      	uxtb	r2, r3
    7fa6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fae:	701a      	strb	r2, [r3, #0]
    7fb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb8:	781b      	ldrb	r3, [r3, #0]
    7fba:	2bff      	cmp	r3, #255	; 0xff
    7fbc:	d105      	bne.n	7fca <send_boot+0xaa6>
    7fbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc6:	2200      	movs	r2, #0
    7fc8:	701a      	strb	r2, [r3, #0]
    7fca:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd2:	781b      	ldrb	r3, [r3, #0]
    7fd4:	461a      	mov	r2, r3
    7fd6:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fde:	7899      	ldrb	r1, [r3, #2]
    7fe0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe8:	5499      	strb	r1, [r3, r2]
    7fea:	4b68      	ldr	r3, [pc, #416]	; (818c <send_boot+0xc68>)
    7fec:	781a      	ldrb	r2, [r3, #0]
    7fee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff6:	781b      	ldrb	r3, [r3, #0]
    7ff8:	4413      	add	r3, r2
    7ffa:	b2da      	uxtb	r2, r3
    7ffc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8004:	701a      	strb	r2, [r3, #0]
    8006:	f24c 431e 	movw	r3, #50206	; 0xc41e
    800a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    800e:	781a      	ldrb	r2, [r3, #0]
    8010:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8018:	781b      	ldrb	r3, [r3, #0]
    801a:	4413      	add	r3, r2
    801c:	b2da      	uxtb	r2, r3
    801e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8026:	701a      	strb	r2, [r3, #0]
    8028:	f24c 3319 	movw	r3, #49945	; 0xc319
    802c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8030:	781b      	ldrb	r3, [r3, #0]
    8032:	3301      	adds	r3, #1
    8034:	b2da      	uxtb	r2, r3
    8036:	f24c 3319 	movw	r3, #49945	; 0xc319
    803a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    803e:	701a      	strb	r2, [r3, #0]
    8040:	f24c 3319 	movw	r3, #49945	; 0xc319
    8044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8048:	781b      	ldrb	r3, [r3, #0]
    804a:	2bff      	cmp	r3, #255	; 0xff
    804c:	d105      	bne.n	805a <send_boot+0xb36>
    804e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8056:	2200      	movs	r2, #0
    8058:	701a      	strb	r2, [r3, #0]
    805a:	f24c 3319 	movw	r3, #49945	; 0xc319
    805e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8062:	781b      	ldrb	r3, [r3, #0]
    8064:	461a      	mov	r2, r3
    8066:	f64c 130c 	movw	r3, #51468	; 0xc90c
    806a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    806e:	78d9      	ldrb	r1, [r3, #3]
    8070:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8078:	5499      	strb	r1, [r3, r2]
    807a:	4b45      	ldr	r3, [pc, #276]	; (8190 <send_boot+0xc6c>)
    807c:	781a      	ldrb	r2, [r3, #0]
    807e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8086:	781b      	ldrb	r3, [r3, #0]
    8088:	4413      	add	r3, r2
    808a:	b2da      	uxtb	r2, r3
    808c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8094:	701a      	strb	r2, [r3, #0]
    8096:	f24c 431e 	movw	r3, #50206	; 0xc41e
    809a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    809e:	781a      	ldrb	r2, [r3, #0]
    80a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    80a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a8:	781b      	ldrb	r3, [r3, #0]
    80aa:	4413      	add	r3, r2
    80ac:	b2da      	uxtb	r2, r3
    80ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    80b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b6:	701a      	strb	r2, [r3, #0]
    80b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    80bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c0:	781b      	ldrb	r3, [r3, #0]
    80c2:	3301      	adds	r3, #1
    80c4:	b2da      	uxtb	r2, r3
    80c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    80ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ce:	701a      	strb	r2, [r3, #0]
    80d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    80d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d8:	781b      	ldrb	r3, [r3, #0]
    80da:	2bff      	cmp	r3, #255	; 0xff
    80dc:	d105      	bne.n	80ea <send_boot+0xbc6>
    80de:	f24c 3319 	movw	r3, #49945	; 0xc319
    80e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e6:	2200      	movs	r2, #0
    80e8:	701a      	strb	r2, [r3, #0]
    80ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    80ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f2:	781b      	ldrb	r3, [r3, #0]
    80f4:	461a      	mov	r2, r3
    80f6:	f240 5342 	movw	r3, #1346	; 0x542
    80fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80fe:	7819      	ldrb	r1, [r3, #0]
    8100:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8108:	5499      	strb	r1, [r3, r2]
    810a:	f240 5342 	movw	r3, #1346	; 0x542
    810e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8112:	781a      	ldrb	r2, [r3, #0]
    8114:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    811c:	781b      	ldrb	r3, [r3, #0]
    811e:	4413      	add	r3, r2
    8120:	b2da      	uxtb	r2, r3
    8122:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812a:	701a      	strb	r2, [r3, #0]
    812c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8134:	781a      	ldrb	r2, [r3, #0]
    8136:	f24c 431d 	movw	r3, #50205	; 0xc41d
    813a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    813e:	781b      	ldrb	r3, [r3, #0]
    8140:	4413      	add	r3, r2
    8142:	b2da      	uxtb	r2, r3
    8144:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    814c:	701a      	strb	r2, [r3, #0]
    814e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8156:	781b      	ldrb	r3, [r3, #0]
    8158:	3301      	adds	r3, #1
    815a:	b2da      	uxtb	r2, r3
    815c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8164:	701a      	strb	r2, [r3, #0]
    8166:	f24c 3319 	movw	r3, #49945	; 0xc319
    816a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    816e:	781b      	ldrb	r3, [r3, #0]
    8170:	2bff      	cmp	r3, #255	; 0xff
    8172:	d10f      	bne.n	8194 <send_boot+0xc70>
    8174:	f24c 3319 	movw	r3, #49945	; 0xc319
    8178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    817c:	2200      	movs	r2, #0
    817e:	701a      	strb	r2, [r3, #0]
    8180:	e008      	b.n	8194 <send_boot+0xc70>
    8182:	bf00      	nop
    8184:	2004c917 	.word	0x2004c917
    8188:	2004c90d 	.word	0x2004c90d
    818c:	2004c90e 	.word	0x2004c90e
    8190:	2004c90f 	.word	0x2004c90f
    8194:	f24c 3319 	movw	r3, #49945	; 0xc319
    8198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    819c:	781b      	ldrb	r3, [r3, #0]
    819e:	461a      	mov	r2, r3
    81a0:	f240 5342 	movw	r3, #1346	; 0x542
    81a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81a8:	7859      	ldrb	r1, [r3, #1]
    81aa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    81ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b2:	5499      	strb	r1, [r3, r2]
    81b4:	4bc5      	ldr	r3, [pc, #788]	; (84cc <send_boot+0xfa8>)
    81b6:	781a      	ldrb	r2, [r3, #0]
    81b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c0:	781b      	ldrb	r3, [r3, #0]
    81c2:	4413      	add	r3, r2
    81c4:	b2da      	uxtb	r2, r3
    81c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ce:	701a      	strb	r2, [r3, #0]
    81d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    81d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d8:	781a      	ldrb	r2, [r3, #0]
    81da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e2:	781b      	ldrb	r3, [r3, #0]
    81e4:	4413      	add	r3, r2
    81e6:	b2da      	uxtb	r2, r3
    81e8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    81ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f0:	701a      	strb	r2, [r3, #0]
    81f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    81f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81fa:	781b      	ldrb	r3, [r3, #0]
    81fc:	3301      	adds	r3, #1
    81fe:	b2da      	uxtb	r2, r3
    8200:	f24c 3319 	movw	r3, #49945	; 0xc319
    8204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8208:	701a      	strb	r2, [r3, #0]
    820a:	f24c 3319 	movw	r3, #49945	; 0xc319
    820e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8212:	781b      	ldrb	r3, [r3, #0]
    8214:	2bff      	cmp	r3, #255	; 0xff
    8216:	d105      	bne.n	8224 <send_boot+0xd00>
    8218:	f24c 3319 	movw	r3, #49945	; 0xc319
    821c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8220:	2200      	movs	r2, #0
    8222:	701a      	strb	r2, [r3, #0]
    8224:	f24c 3319 	movw	r3, #49945	; 0xc319
    8228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822c:	781b      	ldrb	r3, [r3, #0]
    822e:	461a      	mov	r2, r3
    8230:	f240 5344 	movw	r3, #1348	; 0x544
    8234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8238:	7819      	ldrb	r1, [r3, #0]
    823a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    823e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8242:	5499      	strb	r1, [r3, r2]
    8244:	f240 5344 	movw	r3, #1348	; 0x544
    8248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    824c:	781a      	ldrb	r2, [r3, #0]
    824e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8256:	781b      	ldrb	r3, [r3, #0]
    8258:	4413      	add	r3, r2
    825a:	b2da      	uxtb	r2, r3
    825c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8264:	701a      	strb	r2, [r3, #0]
    8266:	f24c 431e 	movw	r3, #50206	; 0xc41e
    826a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    826e:	781a      	ldrb	r2, [r3, #0]
    8270:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8278:	781b      	ldrb	r3, [r3, #0]
    827a:	4413      	add	r3, r2
    827c:	b2da      	uxtb	r2, r3
    827e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8286:	701a      	strb	r2, [r3, #0]
    8288:	f24c 3319 	movw	r3, #49945	; 0xc319
    828c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8290:	781b      	ldrb	r3, [r3, #0]
    8292:	3301      	adds	r3, #1
    8294:	b2da      	uxtb	r2, r3
    8296:	f24c 3319 	movw	r3, #49945	; 0xc319
    829a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    829e:	701a      	strb	r2, [r3, #0]
    82a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    82a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a8:	781b      	ldrb	r3, [r3, #0]
    82aa:	2bff      	cmp	r3, #255	; 0xff
    82ac:	d105      	bne.n	82ba <send_boot+0xd96>
    82ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    82b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b6:	2200      	movs	r2, #0
    82b8:	701a      	strb	r2, [r3, #0]
    82ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    82be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c2:	781b      	ldrb	r3, [r3, #0]
    82c4:	461a      	mov	r2, r3
    82c6:	f240 5344 	movw	r3, #1348	; 0x544
    82ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ce:	7859      	ldrb	r1, [r3, #1]
    82d0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    82d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d8:	5499      	strb	r1, [r3, r2]
    82da:	4b7d      	ldr	r3, [pc, #500]	; (84d0 <send_boot+0xfac>)
    82dc:	781a      	ldrb	r2, [r3, #0]
    82de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    82e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e6:	781b      	ldrb	r3, [r3, #0]
    82e8:	4413      	add	r3, r2
    82ea:	b2da      	uxtb	r2, r3
    82ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    82f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f4:	701a      	strb	r2, [r3, #0]
    82f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    82fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82fe:	781a      	ldrb	r2, [r3, #0]
    8300:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8308:	781b      	ldrb	r3, [r3, #0]
    830a:	4413      	add	r3, r2
    830c:	b2da      	uxtb	r2, r3
    830e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8316:	701a      	strb	r2, [r3, #0]
    8318:	f24c 3319 	movw	r3, #49945	; 0xc319
    831c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8320:	781b      	ldrb	r3, [r3, #0]
    8322:	3301      	adds	r3, #1
    8324:	b2da      	uxtb	r2, r3
    8326:	f24c 3319 	movw	r3, #49945	; 0xc319
    832a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    832e:	701a      	strb	r2, [r3, #0]
    8330:	f24c 3319 	movw	r3, #49945	; 0xc319
    8334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8338:	781b      	ldrb	r3, [r3, #0]
    833a:	2bff      	cmp	r3, #255	; 0xff
    833c:	d105      	bne.n	834a <send_boot+0xe26>
    833e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8346:	2200      	movs	r2, #0
    8348:	701a      	strb	r2, [r3, #0]
    834a:	f24c 3319 	movw	r3, #49945	; 0xc319
    834e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8352:	781b      	ldrb	r3, [r3, #0]
    8354:	461a      	mov	r2, r3
    8356:	f24c 431d 	movw	r3, #50205	; 0xc41d
    835a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    835e:	7819      	ldrb	r1, [r3, #0]
    8360:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8368:	5499      	strb	r1, [r3, r2]
    836a:	f24c 3319 	movw	r3, #49945	; 0xc319
    836e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8372:	781b      	ldrb	r3, [r3, #0]
    8374:	3301      	adds	r3, #1
    8376:	b2da      	uxtb	r2, r3
    8378:	f24c 3319 	movw	r3, #49945	; 0xc319
    837c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8380:	701a      	strb	r2, [r3, #0]
    8382:	f24c 3319 	movw	r3, #49945	; 0xc319
    8386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838a:	781b      	ldrb	r3, [r3, #0]
    838c:	2bff      	cmp	r3, #255	; 0xff
    838e:	d105      	bne.n	839c <send_boot+0xe78>
    8390:	f24c 3319 	movw	r3, #49945	; 0xc319
    8394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8398:	2200      	movs	r2, #0
    839a:	701a      	strb	r2, [r3, #0]
    839c:	f24c 3319 	movw	r3, #49945	; 0xc319
    83a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a4:	781b      	ldrb	r3, [r3, #0]
    83a6:	461a      	mov	r2, r3
    83a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    83ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b0:	7819      	ldrb	r1, [r3, #0]
    83b2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    83b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ba:	5499      	strb	r1, [r3, r2]
    83bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    83c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c4:	781b      	ldrb	r3, [r3, #0]
    83c6:	3301      	adds	r3, #1
    83c8:	b2da      	uxtb	r2, r3
    83ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    83ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d2:	701a      	strb	r2, [r3, #0]
    83d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    83d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83dc:	781b      	ldrb	r3, [r3, #0]
    83de:	2bff      	cmp	r3, #255	; 0xff
    83e0:	d105      	bne.n	83ee <send_boot+0xeca>
    83e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    83e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ea:	2200      	movs	r2, #0
    83ec:	701a      	strb	r2, [r3, #0]
    83ee:	f242 0339 	movw	r3, #8249	; 0x2039
    83f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f6:	781b      	ldrb	r3, [r3, #0]
    83f8:	b2db      	uxtb	r3, r3
    83fa:	f003 0310 	and.w	r3, r3, #16
    83fe:	2b00      	cmp	r3, #0
    8400:	d15a      	bne.n	84b8 <send_boot+0xf94>
    8402:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    840a:	781b      	ldrb	r3, [r3, #0]
    840c:	b2db      	uxtb	r3, r3
    840e:	461a      	mov	r2, r3
    8410:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8418:	5c9a      	ldrb	r2, [r3, r2]
    841a:	f24c 431b 	movw	r3, #50203	; 0xc41b
    841e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8422:	701a      	strb	r2, [r3, #0]
    8424:	f24c 431c 	movw	r3, #50204	; 0xc41c
    8428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    842c:	2200      	movs	r2, #0
    842e:	701a      	strb	r2, [r3, #0]
    8430:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	b2db      	uxtb	r3, r3
    843c:	3301      	adds	r3, #1
    843e:	b2da      	uxtb	r2, r3
    8440:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8448:	701a      	strb	r2, [r3, #0]
    844a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    844e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8452:	781b      	ldrb	r3, [r3, #0]
    8454:	b2db      	uxtb	r3, r3
    8456:	2bff      	cmp	r3, #255	; 0xff
    8458:	d105      	bne.n	8466 <send_boot+0xf42>
    845a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    845e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8462:	2200      	movs	r2, #0
    8464:	701a      	strb	r2, [r3, #0]
    8466:	f242 0338 	movw	r3, #8248	; 0x2038
    846a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846e:	f242 0238 	movw	r2, #8248	; 0x2038
    8472:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8476:	7812      	ldrb	r2, [r2, #0]
    8478:	b2d2      	uxtb	r2, r2
    847a:	f042 0201 	orr.w	r2, r2, #1
    847e:	b2d2      	uxtb	r2, r2
    8480:	701a      	strb	r2, [r3, #0]
    8482:	f242 0339 	movw	r3, #8249	; 0x2039
    8486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    848a:	f242 0239 	movw	r2, #8249	; 0x2039
    848e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8492:	7812      	ldrb	r2, [r2, #0]
    8494:	b2d2      	uxtb	r2, r2
    8496:	f042 0210 	orr.w	r2, r2, #16
    849a:	b2d2      	uxtb	r2, r2
    849c:	701a      	strb	r2, [r3, #0]
    849e:	e00b      	b.n	84b8 <send_boot+0xf94>
    84a0:	f24c 3318 	movw	r3, #49944	; 0xc318
    84a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a8:	781b      	ldrb	r3, [r3, #0]
    84aa:	3301      	adds	r3, #1
    84ac:	b2da      	uxtb	r2, r3
    84ae:	f24c 3318 	movw	r3, #49944	; 0xc318
    84b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b6:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    84b8:	f240 533d 	movw	r3, #1341	; 0x53d
    84bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84c0:	2200      	movs	r2, #0
    84c2:	701a      	strb	r2, [r3, #0]
  }
}
    84c4:	46bd      	mov	sp, r7
    84c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ca:	4770      	bx	lr
    84cc:	20000543 	.word	0x20000543
    84d0:	20000545 	.word	0x20000545

000084d4 <send_attitude>:
void send_attitude(void){ //499ms
    84d4:	b480      	push	{r7}
    84d6:	af00      	add	r7, sp, #0
    // add by wanbo
  if(!boot)
    84d8:	f240 533d 	movw	r3, #1341	; 0x53d
    84dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e0:	781b      	ldrb	r3, [r3, #0]
    84e2:	2b00      	cmp	r3, #0
    84e4:	f040 84ee 	bne.w	8ec4 <send_attitude+0x9f0>
  {
    count++;
    84e8:	f24c 3311 	movw	r3, #49937	; 0xc311
    84ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f0:	781b      	ldrb	r3, [r3, #0]
    84f2:	3301      	adds	r3, #1
    84f4:	b2da      	uxtb	r2, r3
    84f6:	f24c 3311 	movw	r3, #49937	; 0xc311
    84fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84fe:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8500:	f24c 3311 	movw	r3, #49937	; 0xc311
    8504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8508:	781b      	ldrb	r3, [r3, #0]
    850a:	2bfa      	cmp	r3, #250	; 0xfa
    850c:	d105      	bne.n	851a <send_attitude+0x46>
    850e:	f24c 3311 	movw	r3, #49937	; 0xc311
    8512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8516:	2200      	movs	r2, #0
    8518:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    851a:	f24c 3311 	movw	r3, #49937	; 0xc311
    851e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8522:	781a      	ldrb	r2, [r3, #0]
    8524:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8528:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    852c:	fba3 1302 	umull	r1, r3, r3, r2
    8530:	0899      	lsrs	r1, r3, #2
    8532:	460b      	mov	r3, r1
    8534:	009b      	lsls	r3, r3, #2
    8536:	440b      	add	r3, r1
    8538:	1ad3      	subs	r3, r2, r3
    853a:	b2db      	uxtb	r3, r3
    853c:	2b00      	cmp	r3, #0
    853e:	f040 84c1 	bne.w	8ec4 <send_attitude+0x9f0>
       PERIODIC_SEND_ATTITUDE(); 
    8542:	f24c 3319 	movw	r3, #49945	; 0xc319
    8546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    854a:	781a      	ldrb	r2, [r3, #0]
    854c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8554:	781b      	ldrb	r3, [r3, #0]
    8556:	b2db      	uxtb	r3, r3
    8558:	429a      	cmp	r2, r3
    855a:	d313      	bcc.n	8584 <send_attitude+0xb0>
    855c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8564:	781b      	ldrb	r3, [r3, #0]
    8566:	b2db      	uxtb	r3, r3
    8568:	461a      	mov	r2, r3
    856a:	f24c 3319 	movw	r3, #49945	; 0xc319
    856e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8572:	781b      	ldrb	r3, [r3, #0]
    8574:	1ad3      	subs	r3, r2, r3
    8576:	33ff      	adds	r3, #255	; 0xff
    8578:	2b10      	cmp	r3, #16
    857a:	bfd4      	ite	le
    857c:	2300      	movle	r3, #0
    857e:	2301      	movgt	r3, #1
    8580:	b2db      	uxtb	r3, r3
    8582:	e011      	b.n	85a8 <send_attitude+0xd4>
    8584:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858c:	781b      	ldrb	r3, [r3, #0]
    858e:	b2db      	uxtb	r3, r3
    8590:	461a      	mov	r2, r3
    8592:	f24c 3319 	movw	r3, #49945	; 0xc319
    8596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    859a:	781b      	ldrb	r3, [r3, #0]
    859c:	1ad3      	subs	r3, r2, r3
    859e:	2b10      	cmp	r3, #16
    85a0:	bfd4      	ite	le
    85a2:	2300      	movle	r3, #0
    85a4:	2301      	movgt	r3, #1
    85a6:	b2db      	uxtb	r3, r3
    85a8:	2b00      	cmp	r3, #0
    85aa:	f000 847f 	beq.w	8eac <send_attitude+0x9d8>
    85ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    85b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b6:	781b      	ldrb	r3, [r3, #0]
    85b8:	461a      	mov	r2, r3
    85ba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    85be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c2:	2105      	movs	r1, #5
    85c4:	5499      	strb	r1, [r3, r2]
    85c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    85ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ce:	781b      	ldrb	r3, [r3, #0]
    85d0:	3301      	adds	r3, #1
    85d2:	b2da      	uxtb	r2, r3
    85d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    85d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85dc:	701a      	strb	r2, [r3, #0]
    85de:	f24c 3319 	movw	r3, #49945	; 0xc319
    85e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e6:	781b      	ldrb	r3, [r3, #0]
    85e8:	2bff      	cmp	r3, #255	; 0xff
    85ea:	d105      	bne.n	85f8 <send_attitude+0x124>
    85ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    85f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f4:	2200      	movs	r2, #0
    85f6:	701a      	strb	r2, [r3, #0]
    85f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    85fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8600:	781b      	ldrb	r3, [r3, #0]
    8602:	461a      	mov	r2, r3
    8604:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    860c:	2106      	movs	r1, #6
    860e:	5499      	strb	r1, [r3, r2]
    8610:	f24c 3319 	movw	r3, #49945	; 0xc319
    8614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	3301      	adds	r3, #1
    861c:	b2da      	uxtb	r2, r3
    861e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8626:	701a      	strb	r2, [r3, #0]
    8628:	f24c 3319 	movw	r3, #49945	; 0xc319
    862c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8630:	781b      	ldrb	r3, [r3, #0]
    8632:	2bff      	cmp	r3, #255	; 0xff
    8634:	d105      	bne.n	8642 <send_attitude+0x16e>
    8636:	f24c 3319 	movw	r3, #49945	; 0xc319
    863a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    863e:	2200      	movs	r2, #0
    8640:	701a      	strb	r2, [r3, #0]
    8642:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864a:	2206      	movs	r2, #6
    864c:	701a      	strb	r2, [r3, #0]
    864e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8656:	2206      	movs	r2, #6
    8658:	701a      	strb	r2, [r3, #0]
    865a:	f24c 3319 	movw	r3, #49945	; 0xc319
    865e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8662:	781b      	ldrb	r3, [r3, #0]
    8664:	461a      	mov	r2, r3
    8666:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    866a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    866e:	7819      	ldrb	r1, [r3, #0]
    8670:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8678:	5499      	strb	r1, [r3, r2]
    867a:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    867e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8682:	781a      	ldrb	r2, [r3, #0]
    8684:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868c:	781b      	ldrb	r3, [r3, #0]
    868e:	4413      	add	r3, r2
    8690:	b2da      	uxtb	r2, r3
    8692:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869a:	701a      	strb	r2, [r3, #0]
    869c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    86a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a4:	781a      	ldrb	r2, [r3, #0]
    86a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    86aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ae:	781b      	ldrb	r3, [r3, #0]
    86b0:	4413      	add	r3, r2
    86b2:	b2da      	uxtb	r2, r3
    86b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    86b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86bc:	701a      	strb	r2, [r3, #0]
    86be:	f24c 3319 	movw	r3, #49945	; 0xc319
    86c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c6:	781b      	ldrb	r3, [r3, #0]
    86c8:	3301      	adds	r3, #1
    86ca:	b2da      	uxtb	r2, r3
    86cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    86d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d4:	701a      	strb	r2, [r3, #0]
    86d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    86da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86de:	781b      	ldrb	r3, [r3, #0]
    86e0:	2bff      	cmp	r3, #255	; 0xff
    86e2:	d105      	bne.n	86f0 <send_attitude+0x21c>
    86e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    86e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ec:	2200      	movs	r2, #0
    86ee:	701a      	strb	r2, [r3, #0]
    86f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    86f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f8:	781b      	ldrb	r3, [r3, #0]
    86fa:	461a      	mov	r2, r3
    86fc:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8704:	7859      	ldrb	r1, [r3, #1]
    8706:	f24c 331c 	movw	r3, #49948	; 0xc31c
    870a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    870e:	5499      	strb	r1, [r3, r2]
    8710:	4bd1      	ldr	r3, [pc, #836]	; (8a58 <send_attitude+0x584>)
    8712:	781a      	ldrb	r2, [r3, #0]
    8714:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871c:	781b      	ldrb	r3, [r3, #0]
    871e:	4413      	add	r3, r2
    8720:	b2da      	uxtb	r2, r3
    8722:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872a:	701a      	strb	r2, [r3, #0]
    872c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8734:	781a      	ldrb	r2, [r3, #0]
    8736:	f24c 431d 	movw	r3, #50205	; 0xc41d
    873a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873e:	781b      	ldrb	r3, [r3, #0]
    8740:	4413      	add	r3, r2
    8742:	b2da      	uxtb	r2, r3
    8744:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    874c:	701a      	strb	r2, [r3, #0]
    874e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8756:	781b      	ldrb	r3, [r3, #0]
    8758:	3301      	adds	r3, #1
    875a:	b2da      	uxtb	r2, r3
    875c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8764:	701a      	strb	r2, [r3, #0]
    8766:	f24c 3319 	movw	r3, #49945	; 0xc319
    876a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876e:	781b      	ldrb	r3, [r3, #0]
    8770:	2bff      	cmp	r3, #255	; 0xff
    8772:	d105      	bne.n	8780 <send_attitude+0x2ac>
    8774:	f24c 3319 	movw	r3, #49945	; 0xc319
    8778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    877c:	2200      	movs	r2, #0
    877e:	701a      	strb	r2, [r3, #0]
    8780:	f24c 3319 	movw	r3, #49945	; 0xc319
    8784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8788:	781b      	ldrb	r3, [r3, #0]
    878a:	461a      	mov	r2, r3
    878c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8794:	7899      	ldrb	r1, [r3, #2]
    8796:	f24c 331c 	movw	r3, #49948	; 0xc31c
    879a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879e:	5499      	strb	r1, [r3, r2]
    87a0:	4bae      	ldr	r3, [pc, #696]	; (8a5c <send_attitude+0x588>)
    87a2:	781a      	ldrb	r2, [r3, #0]
    87a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ac:	781b      	ldrb	r3, [r3, #0]
    87ae:	4413      	add	r3, r2
    87b0:	b2da      	uxtb	r2, r3
    87b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ba:	701a      	strb	r2, [r3, #0]
    87bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    87c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c4:	781a      	ldrb	r2, [r3, #0]
    87c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ce:	781b      	ldrb	r3, [r3, #0]
    87d0:	4413      	add	r3, r2
    87d2:	b2da      	uxtb	r2, r3
    87d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    87d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87dc:	701a      	strb	r2, [r3, #0]
    87de:	f24c 3319 	movw	r3, #49945	; 0xc319
    87e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e6:	781b      	ldrb	r3, [r3, #0]
    87e8:	3301      	adds	r3, #1
    87ea:	b2da      	uxtb	r2, r3
    87ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    87f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f4:	701a      	strb	r2, [r3, #0]
    87f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    87fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fe:	781b      	ldrb	r3, [r3, #0]
    8800:	2bff      	cmp	r3, #255	; 0xff
    8802:	d105      	bne.n	8810 <send_attitude+0x33c>
    8804:	f24c 3319 	movw	r3, #49945	; 0xc319
    8808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880c:	2200      	movs	r2, #0
    880e:	701a      	strb	r2, [r3, #0]
    8810:	f24c 3319 	movw	r3, #49945	; 0xc319
    8814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8818:	781b      	ldrb	r3, [r3, #0]
    881a:	461a      	mov	r2, r3
    881c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8824:	78d9      	ldrb	r1, [r3, #3]
    8826:	f24c 331c 	movw	r3, #49948	; 0xc31c
    882a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    882e:	5499      	strb	r1, [r3, r2]
    8830:	4b8b      	ldr	r3, [pc, #556]	; (8a60 <send_attitude+0x58c>)
    8832:	781a      	ldrb	r2, [r3, #0]
    8834:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883c:	781b      	ldrb	r3, [r3, #0]
    883e:	4413      	add	r3, r2
    8840:	b2da      	uxtb	r2, r3
    8842:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    884a:	701a      	strb	r2, [r3, #0]
    884c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8854:	781a      	ldrb	r2, [r3, #0]
    8856:	f24c 431d 	movw	r3, #50205	; 0xc41d
    885a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885e:	781b      	ldrb	r3, [r3, #0]
    8860:	4413      	add	r3, r2
    8862:	b2da      	uxtb	r2, r3
    8864:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886c:	701a      	strb	r2, [r3, #0]
    886e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8876:	781b      	ldrb	r3, [r3, #0]
    8878:	3301      	adds	r3, #1
    887a:	b2da      	uxtb	r2, r3
    887c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8884:	701a      	strb	r2, [r3, #0]
    8886:	f24c 3319 	movw	r3, #49945	; 0xc319
    888a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888e:	781b      	ldrb	r3, [r3, #0]
    8890:	2bff      	cmp	r3, #255	; 0xff
    8892:	d105      	bne.n	88a0 <send_attitude+0x3cc>
    8894:	f24c 3319 	movw	r3, #49945	; 0xc319
    8898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889c:	2200      	movs	r2, #0
    889e:	701a      	strb	r2, [r3, #0]
    88a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    88a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	461a      	mov	r2, r3
    88ac:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    88b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b4:	7819      	ldrb	r1, [r3, #0]
    88b6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    88ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88be:	5499      	strb	r1, [r3, r2]
    88c0:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    88c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c8:	781a      	ldrb	r2, [r3, #0]
    88ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    88ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d2:	781b      	ldrb	r3, [r3, #0]
    88d4:	4413      	add	r3, r2
    88d6:	b2da      	uxtb	r2, r3
    88d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    88dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e0:	701a      	strb	r2, [r3, #0]
    88e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    88e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ea:	781a      	ldrb	r2, [r3, #0]
    88ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    88f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f4:	781b      	ldrb	r3, [r3, #0]
    88f6:	4413      	add	r3, r2
    88f8:	b2da      	uxtb	r2, r3
    88fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    88fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8902:	701a      	strb	r2, [r3, #0]
    8904:	f24c 3319 	movw	r3, #49945	; 0xc319
    8908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    890c:	781b      	ldrb	r3, [r3, #0]
    890e:	3301      	adds	r3, #1
    8910:	b2da      	uxtb	r2, r3
    8912:	f24c 3319 	movw	r3, #49945	; 0xc319
    8916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891a:	701a      	strb	r2, [r3, #0]
    891c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8924:	781b      	ldrb	r3, [r3, #0]
    8926:	2bff      	cmp	r3, #255	; 0xff
    8928:	d105      	bne.n	8936 <send_attitude+0x462>
    892a:	f24c 3319 	movw	r3, #49945	; 0xc319
    892e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8932:	2200      	movs	r2, #0
    8934:	701a      	strb	r2, [r3, #0]
    8936:	f24c 3319 	movw	r3, #49945	; 0xc319
    893a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893e:	781b      	ldrb	r3, [r3, #0]
    8940:	461a      	mov	r2, r3
    8942:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    894a:	7859      	ldrb	r1, [r3, #1]
    894c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8954:	5499      	strb	r1, [r3, r2]
    8956:	4b43      	ldr	r3, [pc, #268]	; (8a64 <send_attitude+0x590>)
    8958:	781a      	ldrb	r2, [r3, #0]
    895a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    895e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8962:	781b      	ldrb	r3, [r3, #0]
    8964:	4413      	add	r3, r2
    8966:	b2da      	uxtb	r2, r3
    8968:	f24c 431d 	movw	r3, #50205	; 0xc41d
    896c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8970:	701a      	strb	r2, [r3, #0]
    8972:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    897a:	781a      	ldrb	r2, [r3, #0]
    897c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8984:	781b      	ldrb	r3, [r3, #0]
    8986:	4413      	add	r3, r2
    8988:	b2da      	uxtb	r2, r3
    898a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    898e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8992:	701a      	strb	r2, [r3, #0]
    8994:	f24c 3319 	movw	r3, #49945	; 0xc319
    8998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    899c:	781b      	ldrb	r3, [r3, #0]
    899e:	3301      	adds	r3, #1
    89a0:	b2da      	uxtb	r2, r3
    89a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    89a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89aa:	701a      	strb	r2, [r3, #0]
    89ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    89b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b4:	781b      	ldrb	r3, [r3, #0]
    89b6:	2bff      	cmp	r3, #255	; 0xff
    89b8:	d105      	bne.n	89c6 <send_attitude+0x4f2>
    89ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    89be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c2:	2200      	movs	r2, #0
    89c4:	701a      	strb	r2, [r3, #0]
    89c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    89ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ce:	781b      	ldrb	r3, [r3, #0]
    89d0:	461a      	mov	r2, r3
    89d2:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    89d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89da:	7899      	ldrb	r1, [r3, #2]
    89dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    89e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e4:	5499      	strb	r1, [r3, r2]
    89e6:	4b20      	ldr	r3, [pc, #128]	; (8a68 <send_attitude+0x594>)
    89e8:	781a      	ldrb	r2, [r3, #0]
    89ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    89ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f2:	781b      	ldrb	r3, [r3, #0]
    89f4:	4413      	add	r3, r2
    89f6:	b2da      	uxtb	r2, r3
    89f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    89fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a00:	701a      	strb	r2, [r3, #0]
    8a02:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0a:	781a      	ldrb	r2, [r3, #0]
    8a0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a14:	781b      	ldrb	r3, [r3, #0]
    8a16:	4413      	add	r3, r2
    8a18:	b2da      	uxtb	r2, r3
    8a1a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a22:	701a      	strb	r2, [r3, #0]
    8a24:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a2c:	781b      	ldrb	r3, [r3, #0]
    8a2e:	3301      	adds	r3, #1
    8a30:	b2da      	uxtb	r2, r3
    8a32:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3a:	701a      	strb	r2, [r3, #0]
    8a3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a44:	781b      	ldrb	r3, [r3, #0]
    8a46:	2bff      	cmp	r3, #255	; 0xff
    8a48:	d110      	bne.n	8a6c <send_attitude+0x598>
    8a4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a52:	2200      	movs	r2, #0
    8a54:	701a      	strb	r2, [r3, #0]
    8a56:	e009      	b.n	8a6c <send_attitude+0x598>
    8a58:	2004c8d9 	.word	0x2004c8d9
    8a5c:	2004c8da 	.word	0x2004c8da
    8a60:	2004c8db 	.word	0x2004c8db
    8a64:	2004c8dd 	.word	0x2004c8dd
    8a68:	2004c8de 	.word	0x2004c8de
    8a6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a74:	781b      	ldrb	r3, [r3, #0]
    8a76:	461a      	mov	r2, r3
    8a78:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a80:	78d9      	ldrb	r1, [r3, #3]
    8a82:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a8a:	5499      	strb	r1, [r3, r2]
    8a8c:	4bc2      	ldr	r3, [pc, #776]	; (8d98 <send_attitude+0x8c4>)
    8a8e:	781a      	ldrb	r2, [r3, #0]
    8a90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a98:	781b      	ldrb	r3, [r3, #0]
    8a9a:	4413      	add	r3, r2
    8a9c:	b2da      	uxtb	r2, r3
    8a9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa6:	701a      	strb	r2, [r3, #0]
    8aa8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab0:	781a      	ldrb	r2, [r3, #0]
    8ab2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aba:	781b      	ldrb	r3, [r3, #0]
    8abc:	4413      	add	r3, r2
    8abe:	b2da      	uxtb	r2, r3
    8ac0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac8:	701a      	strb	r2, [r3, #0]
    8aca:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad2:	781b      	ldrb	r3, [r3, #0]
    8ad4:	3301      	adds	r3, #1
    8ad6:	b2da      	uxtb	r2, r3
    8ad8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae0:	701a      	strb	r2, [r3, #0]
    8ae2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aea:	781b      	ldrb	r3, [r3, #0]
    8aec:	2bff      	cmp	r3, #255	; 0xff
    8aee:	d105      	bne.n	8afc <send_attitude+0x628>
    8af0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af8:	2200      	movs	r2, #0
    8afa:	701a      	strb	r2, [r3, #0]
    8afc:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b04:	781b      	ldrb	r3, [r3, #0]
    8b06:	461a      	mov	r2, r3
    8b08:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b10:	7819      	ldrb	r1, [r3, #0]
    8b12:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b1a:	5499      	strb	r1, [r3, r2]
    8b1c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b24:	781a      	ldrb	r2, [r3, #0]
    8b26:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2e:	781b      	ldrb	r3, [r3, #0]
    8b30:	4413      	add	r3, r2
    8b32:	b2da      	uxtb	r2, r3
    8b34:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3c:	701a      	strb	r2, [r3, #0]
    8b3e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b46:	781a      	ldrb	r2, [r3, #0]
    8b48:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b50:	781b      	ldrb	r3, [r3, #0]
    8b52:	4413      	add	r3, r2
    8b54:	b2da      	uxtb	r2, r3
    8b56:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b5e:	701a      	strb	r2, [r3, #0]
    8b60:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b68:	781b      	ldrb	r3, [r3, #0]
    8b6a:	3301      	adds	r3, #1
    8b6c:	b2da      	uxtb	r2, r3
    8b6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b76:	701a      	strb	r2, [r3, #0]
    8b78:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b80:	781b      	ldrb	r3, [r3, #0]
    8b82:	2bff      	cmp	r3, #255	; 0xff
    8b84:	d105      	bne.n	8b92 <send_attitude+0x6be>
    8b86:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8e:	2200      	movs	r2, #0
    8b90:	701a      	strb	r2, [r3, #0]
    8b92:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9a:	781b      	ldrb	r3, [r3, #0]
    8b9c:	461a      	mov	r2, r3
    8b9e:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba6:	7859      	ldrb	r1, [r3, #1]
    8ba8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb0:	5499      	strb	r1, [r3, r2]
    8bb2:	4b7a      	ldr	r3, [pc, #488]	; (8d9c <send_attitude+0x8c8>)
    8bb4:	781a      	ldrb	r2, [r3, #0]
    8bb6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bbe:	781b      	ldrb	r3, [r3, #0]
    8bc0:	4413      	add	r3, r2
    8bc2:	b2da      	uxtb	r2, r3
    8bc4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bcc:	701a      	strb	r2, [r3, #0]
    8bce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd6:	781a      	ldrb	r2, [r3, #0]
    8bd8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be0:	781b      	ldrb	r3, [r3, #0]
    8be2:	4413      	add	r3, r2
    8be4:	b2da      	uxtb	r2, r3
    8be6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bee:	701a      	strb	r2, [r3, #0]
    8bf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf8:	781b      	ldrb	r3, [r3, #0]
    8bfa:	3301      	adds	r3, #1
    8bfc:	b2da      	uxtb	r2, r3
    8bfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c06:	701a      	strb	r2, [r3, #0]
    8c08:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c10:	781b      	ldrb	r3, [r3, #0]
    8c12:	2bff      	cmp	r3, #255	; 0xff
    8c14:	d105      	bne.n	8c22 <send_attitude+0x74e>
    8c16:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c1e:	2200      	movs	r2, #0
    8c20:	701a      	strb	r2, [r3, #0]
    8c22:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2a:	781b      	ldrb	r3, [r3, #0]
    8c2c:	461a      	mov	r2, r3
    8c2e:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c36:	7899      	ldrb	r1, [r3, #2]
    8c38:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c40:	5499      	strb	r1, [r3, r2]
    8c42:	4b57      	ldr	r3, [pc, #348]	; (8da0 <send_attitude+0x8cc>)
    8c44:	781a      	ldrb	r2, [r3, #0]
    8c46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c4e:	781b      	ldrb	r3, [r3, #0]
    8c50:	4413      	add	r3, r2
    8c52:	b2da      	uxtb	r2, r3
    8c54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5c:	701a      	strb	r2, [r3, #0]
    8c5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c66:	781a      	ldrb	r2, [r3, #0]
    8c68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c70:	781b      	ldrb	r3, [r3, #0]
    8c72:	4413      	add	r3, r2
    8c74:	b2da      	uxtb	r2, r3
    8c76:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c7e:	701a      	strb	r2, [r3, #0]
    8c80:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c88:	781b      	ldrb	r3, [r3, #0]
    8c8a:	3301      	adds	r3, #1
    8c8c:	b2da      	uxtb	r2, r3
    8c8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c96:	701a      	strb	r2, [r3, #0]
    8c98:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca0:	781b      	ldrb	r3, [r3, #0]
    8ca2:	2bff      	cmp	r3, #255	; 0xff
    8ca4:	d105      	bne.n	8cb2 <send_attitude+0x7de>
    8ca6:	f24c 3319 	movw	r3, #49945	; 0xc319
    8caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cae:	2200      	movs	r2, #0
    8cb0:	701a      	strb	r2, [r3, #0]
    8cb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cba:	781b      	ldrb	r3, [r3, #0]
    8cbc:	461a      	mov	r2, r3
    8cbe:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc6:	78d9      	ldrb	r1, [r3, #3]
    8cc8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd0:	5499      	strb	r1, [r3, r2]
    8cd2:	4b34      	ldr	r3, [pc, #208]	; (8da4 <send_attitude+0x8d0>)
    8cd4:	781a      	ldrb	r2, [r3, #0]
    8cd6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cde:	781b      	ldrb	r3, [r3, #0]
    8ce0:	4413      	add	r3, r2
    8ce2:	b2da      	uxtb	r2, r3
    8ce4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cec:	701a      	strb	r2, [r3, #0]
    8cee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf6:	781a      	ldrb	r2, [r3, #0]
    8cf8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d00:	781b      	ldrb	r3, [r3, #0]
    8d02:	4413      	add	r3, r2
    8d04:	b2da      	uxtb	r2, r3
    8d06:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d0e:	701a      	strb	r2, [r3, #0]
    8d10:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d18:	781b      	ldrb	r3, [r3, #0]
    8d1a:	3301      	adds	r3, #1
    8d1c:	b2da      	uxtb	r2, r3
    8d1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d26:	701a      	strb	r2, [r3, #0]
    8d28:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d30:	781b      	ldrb	r3, [r3, #0]
    8d32:	2bff      	cmp	r3, #255	; 0xff
    8d34:	d105      	bne.n	8d42 <send_attitude+0x86e>
    8d36:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d3e:	2200      	movs	r2, #0
    8d40:	701a      	strb	r2, [r3, #0]
    8d42:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4a:	781b      	ldrb	r3, [r3, #0]
    8d4c:	461a      	mov	r2, r3
    8d4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d56:	7819      	ldrb	r1, [r3, #0]
    8d58:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d60:	5499      	strb	r1, [r3, r2]
    8d62:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d6a:	781b      	ldrb	r3, [r3, #0]
    8d6c:	3301      	adds	r3, #1
    8d6e:	b2da      	uxtb	r2, r3
    8d70:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d78:	701a      	strb	r2, [r3, #0]
    8d7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d82:	781b      	ldrb	r3, [r3, #0]
    8d84:	2bff      	cmp	r3, #255	; 0xff
    8d86:	d10f      	bne.n	8da8 <send_attitude+0x8d4>
    8d88:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d90:	2200      	movs	r2, #0
    8d92:	701a      	strb	r2, [r3, #0]
    8d94:	e008      	b.n	8da8 <send_attitude+0x8d4>
    8d96:	bf00      	nop
    8d98:	2004c8df 	.word	0x2004c8df
    8d9c:	2004c8e1 	.word	0x2004c8e1
    8da0:	2004c8e2 	.word	0x2004c8e2
    8da4:	2004c8e3 	.word	0x2004c8e3
    8da8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db0:	781b      	ldrb	r3, [r3, #0]
    8db2:	461a      	mov	r2, r3
    8db4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dbc:	7819      	ldrb	r1, [r3, #0]
    8dbe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc6:	5499      	strb	r1, [r3, r2]
    8dc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd0:	781b      	ldrb	r3, [r3, #0]
    8dd2:	3301      	adds	r3, #1
    8dd4:	b2da      	uxtb	r2, r3
    8dd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dde:	701a      	strb	r2, [r3, #0]
    8de0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de8:	781b      	ldrb	r3, [r3, #0]
    8dea:	2bff      	cmp	r3, #255	; 0xff
    8dec:	d105      	bne.n	8dfa <send_attitude+0x926>
    8dee:	f24c 3319 	movw	r3, #49945	; 0xc319
    8df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df6:	2200      	movs	r2, #0
    8df8:	701a      	strb	r2, [r3, #0]
    8dfa:	f242 0339 	movw	r3, #8249	; 0x2039
    8dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e02:	781b      	ldrb	r3, [r3, #0]
    8e04:	b2db      	uxtb	r3, r3
    8e06:	f003 0310 	and.w	r3, r3, #16
    8e0a:	2b00      	cmp	r3, #0
    8e0c:	d15a      	bne.n	8ec4 <send_attitude+0x9f0>
    8e0e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e16:	781b      	ldrb	r3, [r3, #0]
    8e18:	b2db      	uxtb	r3, r3
    8e1a:	461a      	mov	r2, r3
    8e1c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e24:	5c9a      	ldrb	r2, [r3, r2]
    8e26:	f24c 431b 	movw	r3, #50203	; 0xc41b
    8e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e2e:	701a      	strb	r2, [r3, #0]
    8e30:	f24c 431c 	movw	r3, #50204	; 0xc41c
    8e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e38:	2200      	movs	r2, #0
    8e3a:	701a      	strb	r2, [r3, #0]
    8e3c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e44:	781b      	ldrb	r3, [r3, #0]
    8e46:	b2db      	uxtb	r3, r3
    8e48:	3301      	adds	r3, #1
    8e4a:	b2da      	uxtb	r2, r3
    8e4c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e54:	701a      	strb	r2, [r3, #0]
    8e56:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e5e:	781b      	ldrb	r3, [r3, #0]
    8e60:	b2db      	uxtb	r3, r3
    8e62:	2bff      	cmp	r3, #255	; 0xff
    8e64:	d105      	bne.n	8e72 <send_attitude+0x99e>
    8e66:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e6e:	2200      	movs	r2, #0
    8e70:	701a      	strb	r2, [r3, #0]
    8e72:	f242 0338 	movw	r3, #8248	; 0x2038
    8e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e7a:	f242 0238 	movw	r2, #8248	; 0x2038
    8e7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8e82:	7812      	ldrb	r2, [r2, #0]
    8e84:	b2d2      	uxtb	r2, r2
    8e86:	f042 0201 	orr.w	r2, r2, #1
    8e8a:	b2d2      	uxtb	r2, r2
    8e8c:	701a      	strb	r2, [r3, #0]
    8e8e:	f242 0339 	movw	r3, #8249	; 0x2039
    8e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e96:	f242 0239 	movw	r2, #8249	; 0x2039
    8e9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8e9e:	7812      	ldrb	r2, [r2, #0]
    8ea0:	b2d2      	uxtb	r2, r2
    8ea2:	f042 0210 	orr.w	r2, r2, #16
    8ea6:	b2d2      	uxtb	r2, r2
    8ea8:	701a      	strb	r2, [r3, #0]
    8eaa:	e00b      	b.n	8ec4 <send_attitude+0x9f0>
    8eac:	f24c 3318 	movw	r3, #49944	; 0xc318
    8eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb4:	781b      	ldrb	r3, [r3, #0]
    8eb6:	3301      	adds	r3, #1
    8eb8:	b2da      	uxtb	r2, r3
    8eba:	f24c 3318 	movw	r3, #49944	; 0xc318
    8ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec2:	701a      	strb	r2, [r3, #0]
  }
}
    8ec4:	46bd      	mov	sp, r7
    8ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eca:	4770      	bx	lr

00008ecc <send_adc>:
  
void send_adc(void){  //500ms
    8ecc:	b480      	push	{r7}
    8ece:	af00      	add	r7, sp, #0
  if(!boot)
    8ed0:	f240 533d 	movw	r3, #1341	; 0x53d
    8ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ed8:	781b      	ldrb	r3, [r3, #0]
    8eda:	2b00      	cmp	r3, #0
    8edc:	f040 827d 	bne.w	93da <send_adc+0x50e>
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8ee0:	f24c 3311 	movw	r3, #49937	; 0xc311
    8ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee8:	781a      	ldrb	r2, [r3, #0]
    8eea:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8eee:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8ef2:	fba3 1302 	umull	r1, r3, r3, r2
    8ef6:	0899      	lsrs	r1, r3, #2
    8ef8:	460b      	mov	r3, r1
    8efa:	009b      	lsls	r3, r3, #2
    8efc:	440b      	add	r3, r1
    8efe:	1ad3      	subs	r3, r2, r3
    8f00:	b2db      	uxtb	r3, r3
    8f02:	2b01      	cmp	r3, #1
    8f04:	f040 8269 	bne.w	93da <send_adc+0x50e>
    8f08:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f10:	781a      	ldrb	r2, [r3, #0]
    8f12:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	b2db      	uxtb	r3, r3
    8f1e:	429a      	cmp	r2, r3
    8f20:	d313      	bcc.n	8f4a <send_adc+0x7e>
    8f22:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f2a:	781b      	ldrb	r3, [r3, #0]
    8f2c:	b2db      	uxtb	r3, r3
    8f2e:	461a      	mov	r2, r3
    8f30:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f38:	781b      	ldrb	r3, [r3, #0]
    8f3a:	1ad3      	subs	r3, r2, r3
    8f3c:	33ff      	adds	r3, #255	; 0xff
    8f3e:	2b08      	cmp	r3, #8
    8f40:	bfd4      	ite	le
    8f42:	2300      	movle	r3, #0
    8f44:	2301      	movgt	r3, #1
    8f46:	b2db      	uxtb	r3, r3
    8f48:	e011      	b.n	8f6e <send_adc+0xa2>
    8f4a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f52:	781b      	ldrb	r3, [r3, #0]
    8f54:	b2db      	uxtb	r3, r3
    8f56:	461a      	mov	r2, r3
    8f58:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f60:	781b      	ldrb	r3, [r3, #0]
    8f62:	1ad3      	subs	r3, r2, r3
    8f64:	2b08      	cmp	r3, #8
    8f66:	bfd4      	ite	le
    8f68:	2300      	movle	r3, #0
    8f6a:	2301      	movgt	r3, #1
    8f6c:	b2db      	uxtb	r3, r3
    8f6e:	2b00      	cmp	r3, #0
    8f70:	f000 8227 	beq.w	93c2 <send_adc+0x4f6>
    8f74:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f7c:	781b      	ldrb	r3, [r3, #0]
    8f7e:	461a      	mov	r2, r3
    8f80:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f88:	2105      	movs	r1, #5
    8f8a:	5499      	strb	r1, [r3, r2]
    8f8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f94:	781b      	ldrb	r3, [r3, #0]
    8f96:	3301      	adds	r3, #1
    8f98:	b2da      	uxtb	r2, r3
    8f9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa2:	701a      	strb	r2, [r3, #0]
    8fa4:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fac:	781b      	ldrb	r3, [r3, #0]
    8fae:	2bff      	cmp	r3, #255	; 0xff
    8fb0:	d105      	bne.n	8fbe <send_adc+0xf2>
    8fb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fba:	2200      	movs	r2, #0
    8fbc:	701a      	strb	r2, [r3, #0]
    8fbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc6:	781b      	ldrb	r3, [r3, #0]
    8fc8:	461a      	mov	r2, r3
    8fca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd2:	2107      	movs	r1, #7
    8fd4:	5499      	strb	r1, [r3, r2]
    8fd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fde:	781b      	ldrb	r3, [r3, #0]
    8fe0:	3301      	adds	r3, #1
    8fe2:	b2da      	uxtb	r2, r3
    8fe4:	f24c 3319 	movw	r3, #49945	; 0xc319
    8fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fec:	701a      	strb	r2, [r3, #0]
    8fee:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff6:	781b      	ldrb	r3, [r3, #0]
    8ff8:	2bff      	cmp	r3, #255	; 0xff
    8ffa:	d105      	bne.n	9008 <send_adc+0x13c>
    8ffc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9004:	2200      	movs	r2, #0
    9006:	701a      	strb	r2, [r3, #0]
    9008:	f24c 431d 	movw	r3, #50205	; 0xc41d
    900c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9010:	2207      	movs	r2, #7
    9012:	701a      	strb	r2, [r3, #0]
    9014:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    901c:	2207      	movs	r2, #7
    901e:	701a      	strb	r2, [r3, #0]
    9020:	f24c 3319 	movw	r3, #49945	; 0xc319
    9024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9028:	781b      	ldrb	r3, [r3, #0]
    902a:	461a      	mov	r2, r3
    902c:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    9030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9034:	7819      	ldrb	r1, [r3, #0]
    9036:	f24c 331c 	movw	r3, #49948	; 0xc31c
    903a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    903e:	5499      	strb	r1, [r3, r2]
    9040:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    9044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9048:	781a      	ldrb	r2, [r3, #0]
    904a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    904e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9052:	781b      	ldrb	r3, [r3, #0]
    9054:	4413      	add	r3, r2
    9056:	b2da      	uxtb	r2, r3
    9058:	f24c 431d 	movw	r3, #50205	; 0xc41d
    905c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9060:	701a      	strb	r2, [r3, #0]
    9062:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906a:	781a      	ldrb	r2, [r3, #0]
    906c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9074:	781b      	ldrb	r3, [r3, #0]
    9076:	4413      	add	r3, r2
    9078:	b2da      	uxtb	r2, r3
    907a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    907e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9082:	701a      	strb	r2, [r3, #0]
    9084:	f24c 3319 	movw	r3, #49945	; 0xc319
    9088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    908c:	781b      	ldrb	r3, [r3, #0]
    908e:	3301      	adds	r3, #1
    9090:	b2da      	uxtb	r2, r3
    9092:	f24c 3319 	movw	r3, #49945	; 0xc319
    9096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909a:	701a      	strb	r2, [r3, #0]
    909c:	f24c 3319 	movw	r3, #49945	; 0xc319
    90a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a4:	781b      	ldrb	r3, [r3, #0]
    90a6:	2bff      	cmp	r3, #255	; 0xff
    90a8:	d105      	bne.n	90b6 <send_adc+0x1ea>
    90aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    90ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b2:	2200      	movs	r2, #0
    90b4:	701a      	strb	r2, [r3, #0]
    90b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    90ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90be:	781b      	ldrb	r3, [r3, #0]
    90c0:	461a      	mov	r2, r3
    90c2:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    90c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ca:	7859      	ldrb	r1, [r3, #1]
    90cc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    90d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d4:	5499      	strb	r1, [r3, r2]
    90d6:	4bc3      	ldr	r3, [pc, #780]	; (93e4 <send_adc+0x518>)
    90d8:	781a      	ldrb	r2, [r3, #0]
    90da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    90de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e2:	781b      	ldrb	r3, [r3, #0]
    90e4:	4413      	add	r3, r2
    90e6:	b2da      	uxtb	r2, r3
    90e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    90ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f0:	701a      	strb	r2, [r3, #0]
    90f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    90f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fa:	781a      	ldrb	r2, [r3, #0]
    90fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9104:	781b      	ldrb	r3, [r3, #0]
    9106:	4413      	add	r3, r2
    9108:	b2da      	uxtb	r2, r3
    910a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    910e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9112:	701a      	strb	r2, [r3, #0]
    9114:	f24c 3319 	movw	r3, #49945	; 0xc319
    9118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    911c:	781b      	ldrb	r3, [r3, #0]
    911e:	3301      	adds	r3, #1
    9120:	b2da      	uxtb	r2, r3
    9122:	f24c 3319 	movw	r3, #49945	; 0xc319
    9126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    912a:	701a      	strb	r2, [r3, #0]
    912c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9134:	781b      	ldrb	r3, [r3, #0]
    9136:	2bff      	cmp	r3, #255	; 0xff
    9138:	d105      	bne.n	9146 <send_adc+0x27a>
    913a:	f24c 3319 	movw	r3, #49945	; 0xc319
    913e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9142:	2200      	movs	r2, #0
    9144:	701a      	strb	r2, [r3, #0]
    9146:	f24c 3319 	movw	r3, #49945	; 0xc319
    914a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    914e:	781b      	ldrb	r3, [r3, #0]
    9150:	461a      	mov	r2, r3
    9152:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    9156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    915a:	7819      	ldrb	r1, [r3, #0]
    915c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9164:	5499      	strb	r1, [r3, r2]
    9166:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    916a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916e:	781a      	ldrb	r2, [r3, #0]
    9170:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9178:	781b      	ldrb	r3, [r3, #0]
    917a:	4413      	add	r3, r2
    917c:	b2da      	uxtb	r2, r3
    917e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9186:	701a      	strb	r2, [r3, #0]
    9188:	f24c 431e 	movw	r3, #50206	; 0xc41e
    918c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9190:	781a      	ldrb	r2, [r3, #0]
    9192:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919a:	781b      	ldrb	r3, [r3, #0]
    919c:	4413      	add	r3, r2
    919e:	b2da      	uxtb	r2, r3
    91a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    91a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a8:	701a      	strb	r2, [r3, #0]
    91aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    91ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b2:	781b      	ldrb	r3, [r3, #0]
    91b4:	3301      	adds	r3, #1
    91b6:	b2da      	uxtb	r2, r3
    91b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    91bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c0:	701a      	strb	r2, [r3, #0]
    91c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    91c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ca:	781b      	ldrb	r3, [r3, #0]
    91cc:	2bff      	cmp	r3, #255	; 0xff
    91ce:	d105      	bne.n	91dc <send_adc+0x310>
    91d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    91d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d8:	2200      	movs	r2, #0
    91da:	701a      	strb	r2, [r3, #0]
    91dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    91e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e4:	781b      	ldrb	r3, [r3, #0]
    91e6:	461a      	mov	r2, r3
    91e8:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    91ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f0:	7859      	ldrb	r1, [r3, #1]
    91f2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    91f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91fa:	5499      	strb	r1, [r3, r2]
    91fc:	4b7a      	ldr	r3, [pc, #488]	; (93e8 <send_adc+0x51c>)
    91fe:	781a      	ldrb	r2, [r3, #0]
    9200:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9208:	781b      	ldrb	r3, [r3, #0]
    920a:	4413      	add	r3, r2
    920c:	b2da      	uxtb	r2, r3
    920e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9216:	701a      	strb	r2, [r3, #0]
    9218:	f24c 431e 	movw	r3, #50206	; 0xc41e
    921c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9220:	781a      	ldrb	r2, [r3, #0]
    9222:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    922a:	781b      	ldrb	r3, [r3, #0]
    922c:	4413      	add	r3, r2
    922e:	b2da      	uxtb	r2, r3
    9230:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9238:	701a      	strb	r2, [r3, #0]
    923a:	f24c 3319 	movw	r3, #49945	; 0xc319
    923e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9242:	781b      	ldrb	r3, [r3, #0]
    9244:	3301      	adds	r3, #1
    9246:	b2da      	uxtb	r2, r3
    9248:	f24c 3319 	movw	r3, #49945	; 0xc319
    924c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9250:	701a      	strb	r2, [r3, #0]
    9252:	f24c 3319 	movw	r3, #49945	; 0xc319
    9256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    925a:	781b      	ldrb	r3, [r3, #0]
    925c:	2bff      	cmp	r3, #255	; 0xff
    925e:	d105      	bne.n	926c <send_adc+0x3a0>
    9260:	f24c 3319 	movw	r3, #49945	; 0xc319
    9264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9268:	2200      	movs	r2, #0
    926a:	701a      	strb	r2, [r3, #0]
    926c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9274:	781b      	ldrb	r3, [r3, #0]
    9276:	461a      	mov	r2, r3
    9278:	f24c 431d 	movw	r3, #50205	; 0xc41d
    927c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9280:	7819      	ldrb	r1, [r3, #0]
    9282:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    928a:	5499      	strb	r1, [r3, r2]
    928c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9294:	781b      	ldrb	r3, [r3, #0]
    9296:	3301      	adds	r3, #1
    9298:	b2da      	uxtb	r2, r3
    929a:	f24c 3319 	movw	r3, #49945	; 0xc319
    929e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a2:	701a      	strb	r2, [r3, #0]
    92a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    92a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ac:	781b      	ldrb	r3, [r3, #0]
    92ae:	2bff      	cmp	r3, #255	; 0xff
    92b0:	d105      	bne.n	92be <send_adc+0x3f2>
    92b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    92b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ba:	2200      	movs	r2, #0
    92bc:	701a      	strb	r2, [r3, #0]
    92be:	f24c 3319 	movw	r3, #49945	; 0xc319
    92c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c6:	781b      	ldrb	r3, [r3, #0]
    92c8:	461a      	mov	r2, r3
    92ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    92ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d2:	7819      	ldrb	r1, [r3, #0]
    92d4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    92d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92dc:	5499      	strb	r1, [r3, r2]
    92de:	f24c 3319 	movw	r3, #49945	; 0xc319
    92e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e6:	781b      	ldrb	r3, [r3, #0]
    92e8:	3301      	adds	r3, #1
    92ea:	b2da      	uxtb	r2, r3
    92ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    92f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f4:	701a      	strb	r2, [r3, #0]
    92f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    92fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92fe:	781b      	ldrb	r3, [r3, #0]
    9300:	2bff      	cmp	r3, #255	; 0xff
    9302:	d105      	bne.n	9310 <send_adc+0x444>
    9304:	f24c 3319 	movw	r3, #49945	; 0xc319
    9308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    930c:	2200      	movs	r2, #0
    930e:	701a      	strb	r2, [r3, #0]
    9310:	f242 0339 	movw	r3, #8249	; 0x2039
    9314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9318:	781b      	ldrb	r3, [r3, #0]
    931a:	b2db      	uxtb	r3, r3
    931c:	f003 0310 	and.w	r3, r3, #16
    9320:	2b00      	cmp	r3, #0
    9322:	d15a      	bne.n	93da <send_adc+0x50e>
    9324:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    932c:	781b      	ldrb	r3, [r3, #0]
    932e:	b2db      	uxtb	r3, r3
    9330:	461a      	mov	r2, r3
    9332:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933a:	5c9a      	ldrb	r2, [r3, r2]
    933c:	f24c 431b 	movw	r3, #50203	; 0xc41b
    9340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9344:	701a      	strb	r2, [r3, #0]
    9346:	f24c 431c 	movw	r3, #50204	; 0xc41c
    934a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    934e:	2200      	movs	r2, #0
    9350:	701a      	strb	r2, [r3, #0]
    9352:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    935a:	781b      	ldrb	r3, [r3, #0]
    935c:	b2db      	uxtb	r3, r3
    935e:	3301      	adds	r3, #1
    9360:	b2da      	uxtb	r2, r3
    9362:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    936a:	701a      	strb	r2, [r3, #0]
    936c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9374:	781b      	ldrb	r3, [r3, #0]
    9376:	b2db      	uxtb	r3, r3
    9378:	2bff      	cmp	r3, #255	; 0xff
    937a:	d105      	bne.n	9388 <send_adc+0x4bc>
    937c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9384:	2200      	movs	r2, #0
    9386:	701a      	strb	r2, [r3, #0]
    9388:	f242 0338 	movw	r3, #8248	; 0x2038
    938c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9390:	f242 0238 	movw	r2, #8248	; 0x2038
    9394:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9398:	7812      	ldrb	r2, [r2, #0]
    939a:	b2d2      	uxtb	r2, r2
    939c:	f042 0201 	orr.w	r2, r2, #1
    93a0:	b2d2      	uxtb	r2, r2
    93a2:	701a      	strb	r2, [r3, #0]
    93a4:	f242 0339 	movw	r3, #8249	; 0x2039
    93a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ac:	f242 0239 	movw	r2, #8249	; 0x2039
    93b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93b4:	7812      	ldrb	r2, [r2, #0]
    93b6:	b2d2      	uxtb	r2, r2
    93b8:	f042 0210 	orr.w	r2, r2, #16
    93bc:	b2d2      	uxtb	r2, r2
    93be:	701a      	strb	r2, [r3, #0]
    93c0:	e00b      	b.n	93da <send_adc+0x50e>
    93c2:	f24c 3318 	movw	r3, #49944	; 0xc318
    93c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ca:	781b      	ldrb	r3, [r3, #0]
    93cc:	3301      	adds	r3, #1
    93ce:	b2da      	uxtb	r2, r3
    93d0:	f24c 3318 	movw	r3, #49944	; 0xc318
    93d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d8:	701a      	strb	r2, [r3, #0]
}
    93da:	46bd      	mov	sp, r7
    93dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    93e0:	4770      	bx	lr
    93e2:	bf00      	nop
    93e4:	2004c5b9 	.word	0x2004c5b9
    93e8:	2004c5bb 	.word	0x2004c5bb

000093ec <send_settings>:
void send_settings(void){ //500ms
    93ec:	b480      	push	{r7}
    93ee:	af00      	add	r7, sp, #0
  if(!boot)
    93f0:	f240 533d 	movw	r3, #1341	; 0x53d
    93f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93f8:	781b      	ldrb	r3, [r3, #0]
    93fa:	2b00      	cmp	r3, #0
    93fc:	f040 83fb 	bne.w	9bf6 <send_settings+0x80a>
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9400:	f24c 3311 	movw	r3, #49937	; 0xc311
    9404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9408:	781a      	ldrb	r2, [r3, #0]
    940a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    940e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9412:	fba3 1302 	umull	r1, r3, r3, r2
    9416:	0899      	lsrs	r1, r3, #2
    9418:	460b      	mov	r3, r1
    941a:	009b      	lsls	r3, r3, #2
    941c:	440b      	add	r3, r1
    941e:	1ad3      	subs	r3, r2, r3
    9420:	b2db      	uxtb	r3, r3
    9422:	2b02      	cmp	r3, #2
    9424:	f040 83e7 	bne.w	9bf6 <send_settings+0x80a>
    9428:	f64c 132c 	movw	r3, #51500	; 0xc92c
    942c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9430:	781b      	ldrb	r3, [r3, #0]
    9432:	2b00      	cmp	r3, #0
    9434:	f000 83df 	beq.w	9bf6 <send_settings+0x80a>
    9438:	f24c 3319 	movw	r3, #49945	; 0xc319
    943c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9440:	781a      	ldrb	r2, [r3, #0]
    9442:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    944a:	781b      	ldrb	r3, [r3, #0]
    944c:	b2db      	uxtb	r3, r3
    944e:	429a      	cmp	r2, r3
    9450:	d313      	bcc.n	947a <send_settings+0x8e>
    9452:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    945a:	781b      	ldrb	r3, [r3, #0]
    945c:	b2db      	uxtb	r3, r3
    945e:	461a      	mov	r2, r3
    9460:	f24c 3319 	movw	r3, #49945	; 0xc319
    9464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9468:	781b      	ldrb	r3, [r3, #0]
    946a:	1ad3      	subs	r3, r2, r3
    946c:	33ff      	adds	r3, #255	; 0xff
    946e:	2b0d      	cmp	r3, #13
    9470:	bfd4      	ite	le
    9472:	2300      	movle	r3, #0
    9474:	2301      	movgt	r3, #1
    9476:	b2db      	uxtb	r3, r3
    9478:	e011      	b.n	949e <send_settings+0xb2>
    947a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    947e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9482:	781b      	ldrb	r3, [r3, #0]
    9484:	b2db      	uxtb	r3, r3
    9486:	461a      	mov	r2, r3
    9488:	f24c 3319 	movw	r3, #49945	; 0xc319
    948c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9490:	781b      	ldrb	r3, [r3, #0]
    9492:	1ad3      	subs	r3, r2, r3
    9494:	2b0d      	cmp	r3, #13
    9496:	bfd4      	ite	le
    9498:	2300      	movle	r3, #0
    949a:	2301      	movgt	r3, #1
    949c:	b2db      	uxtb	r3, r3
    949e:	2b00      	cmp	r3, #0
    94a0:	f000 839d 	beq.w	9bde <send_settings+0x7f2>
    94a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    94a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ac:	781b      	ldrb	r3, [r3, #0]
    94ae:	461a      	mov	r2, r3
    94b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    94b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b8:	2105      	movs	r1, #5
    94ba:	5499      	strb	r1, [r3, r2]
    94bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    94c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94c4:	781b      	ldrb	r3, [r3, #0]
    94c6:	3301      	adds	r3, #1
    94c8:	b2da      	uxtb	r2, r3
    94ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    94ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d2:	701a      	strb	r2, [r3, #0]
    94d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    94d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94dc:	781b      	ldrb	r3, [r3, #0]
    94de:	2bff      	cmp	r3, #255	; 0xff
    94e0:	d105      	bne.n	94ee <send_settings+0x102>
    94e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    94e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ea:	2200      	movs	r2, #0
    94ec:	701a      	strb	r2, [r3, #0]
    94ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    94f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f6:	781b      	ldrb	r3, [r3, #0]
    94f8:	461a      	mov	r2, r3
    94fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    94fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9502:	2111      	movs	r1, #17
    9504:	5499      	strb	r1, [r3, r2]
    9506:	f24c 3319 	movw	r3, #49945	; 0xc319
    950a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    950e:	781b      	ldrb	r3, [r3, #0]
    9510:	3301      	adds	r3, #1
    9512:	b2da      	uxtb	r2, r3
    9514:	f24c 3319 	movw	r3, #49945	; 0xc319
    9518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    951c:	701a      	strb	r2, [r3, #0]
    951e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9526:	781b      	ldrb	r3, [r3, #0]
    9528:	2bff      	cmp	r3, #255	; 0xff
    952a:	d105      	bne.n	9538 <send_settings+0x14c>
    952c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9534:	2200      	movs	r2, #0
    9536:	701a      	strb	r2, [r3, #0]
    9538:	f24c 431d 	movw	r3, #50205	; 0xc41d
    953c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9540:	2211      	movs	r2, #17
    9542:	701a      	strb	r2, [r3, #0]
    9544:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    954c:	2211      	movs	r2, #17
    954e:	701a      	strb	r2, [r3, #0]
    9550:	f24c 3319 	movw	r3, #49945	; 0xc319
    9554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9558:	781b      	ldrb	r3, [r3, #0]
    955a:	461a      	mov	r2, r3
    955c:	f64c 132c 	movw	r3, #51500	; 0xc92c
    9560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9564:	7819      	ldrb	r1, [r3, #0]
    9566:	f24c 331c 	movw	r3, #49948	; 0xc31c
    956a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956e:	5499      	strb	r1, [r3, r2]
    9570:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9578:	781a      	ldrb	r2, [r3, #0]
    957a:	f64c 132c 	movw	r3, #51500	; 0xc92c
    957e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9582:	781b      	ldrb	r3, [r3, #0]
    9584:	4413      	add	r3, r2
    9586:	b2da      	uxtb	r2, r3
    9588:	f24c 431d 	movw	r3, #50205	; 0xc41d
    958c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9590:	701a      	strb	r2, [r3, #0]
    9592:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    959a:	781a      	ldrb	r2, [r3, #0]
    959c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    95a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a4:	781b      	ldrb	r3, [r3, #0]
    95a6:	4413      	add	r3, r2
    95a8:	b2da      	uxtb	r2, r3
    95aa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    95ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b2:	701a      	strb	r2, [r3, #0]
    95b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    95b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95bc:	781b      	ldrb	r3, [r3, #0]
    95be:	3301      	adds	r3, #1
    95c0:	b2da      	uxtb	r2, r3
    95c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    95c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ca:	701a      	strb	r2, [r3, #0]
    95cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    95d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d4:	781b      	ldrb	r3, [r3, #0]
    95d6:	2bff      	cmp	r3, #255	; 0xff
    95d8:	d105      	bne.n	95e6 <send_settings+0x1fa>
    95da:	f24c 3319 	movw	r3, #49945	; 0xc319
    95de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e2:	2200      	movs	r2, #0
    95e4:	701a      	strb	r2, [r3, #0]
    95e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    95ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ee:	781b      	ldrb	r3, [r3, #0]
    95f0:	461a      	mov	r2, r3
    95f2:	f24c 3308 	movw	r3, #49928	; 0xc308
    95f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fa:	7819      	ldrb	r1, [r3, #0]
    95fc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9604:	5499      	strb	r1, [r3, r2]
    9606:	f24c 3308 	movw	r3, #49928	; 0xc308
    960a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    960e:	781a      	ldrb	r2, [r3, #0]
    9610:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9618:	781b      	ldrb	r3, [r3, #0]
    961a:	4413      	add	r3, r2
    961c:	b2da      	uxtb	r2, r3
    961e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9626:	701a      	strb	r2, [r3, #0]
    9628:	f24c 431e 	movw	r3, #50206	; 0xc41e
    962c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9630:	781a      	ldrb	r2, [r3, #0]
    9632:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    963a:	781b      	ldrb	r3, [r3, #0]
    963c:	4413      	add	r3, r2
    963e:	b2da      	uxtb	r2, r3
    9640:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9648:	701a      	strb	r2, [r3, #0]
    964a:	f24c 3319 	movw	r3, #49945	; 0xc319
    964e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9652:	781b      	ldrb	r3, [r3, #0]
    9654:	3301      	adds	r3, #1
    9656:	b2da      	uxtb	r2, r3
    9658:	f24c 3319 	movw	r3, #49945	; 0xc319
    965c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9660:	701a      	strb	r2, [r3, #0]
    9662:	f24c 3319 	movw	r3, #49945	; 0xc319
    9666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    966a:	781b      	ldrb	r3, [r3, #0]
    966c:	2bff      	cmp	r3, #255	; 0xff
    966e:	d105      	bne.n	967c <send_settings+0x290>
    9670:	f24c 3319 	movw	r3, #49945	; 0xc319
    9674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9678:	2200      	movs	r2, #0
    967a:	701a      	strb	r2, [r3, #0]
    967c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9684:	781b      	ldrb	r3, [r3, #0]
    9686:	461a      	mov	r2, r3
    9688:	f24c 3308 	movw	r3, #49928	; 0xc308
    968c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9690:	7859      	ldrb	r1, [r3, #1]
    9692:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    969a:	5499      	strb	r1, [r3, r2]
    969c:	4bd1      	ldr	r3, [pc, #836]	; (99e4 <send_settings+0x5f8>)
    969e:	781a      	ldrb	r2, [r3, #0]
    96a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a8:	781b      	ldrb	r3, [r3, #0]
    96aa:	4413      	add	r3, r2
    96ac:	b2da      	uxtb	r2, r3
    96ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b6:	701a      	strb	r2, [r3, #0]
    96b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    96bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c0:	781a      	ldrb	r2, [r3, #0]
    96c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ca:	781b      	ldrb	r3, [r3, #0]
    96cc:	4413      	add	r3, r2
    96ce:	b2da      	uxtb	r2, r3
    96d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    96d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d8:	701a      	strb	r2, [r3, #0]
    96da:	f24c 3319 	movw	r3, #49945	; 0xc319
    96de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e2:	781b      	ldrb	r3, [r3, #0]
    96e4:	3301      	adds	r3, #1
    96e6:	b2da      	uxtb	r2, r3
    96e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    96ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f0:	701a      	strb	r2, [r3, #0]
    96f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    96f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fa:	781b      	ldrb	r3, [r3, #0]
    96fc:	2bff      	cmp	r3, #255	; 0xff
    96fe:	d105      	bne.n	970c <send_settings+0x320>
    9700:	f24c 3319 	movw	r3, #49945	; 0xc319
    9704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9708:	2200      	movs	r2, #0
    970a:	701a      	strb	r2, [r3, #0]
    970c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9714:	781b      	ldrb	r3, [r3, #0]
    9716:	461a      	mov	r2, r3
    9718:	f24c 3308 	movw	r3, #49928	; 0xc308
    971c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9720:	7899      	ldrb	r1, [r3, #2]
    9722:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    972a:	5499      	strb	r1, [r3, r2]
    972c:	4bae      	ldr	r3, [pc, #696]	; (99e8 <send_settings+0x5fc>)
    972e:	781a      	ldrb	r2, [r3, #0]
    9730:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9738:	781b      	ldrb	r3, [r3, #0]
    973a:	4413      	add	r3, r2
    973c:	b2da      	uxtb	r2, r3
    973e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9746:	701a      	strb	r2, [r3, #0]
    9748:	f24c 431e 	movw	r3, #50206	; 0xc41e
    974c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9750:	781a      	ldrb	r2, [r3, #0]
    9752:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975a:	781b      	ldrb	r3, [r3, #0]
    975c:	4413      	add	r3, r2
    975e:	b2da      	uxtb	r2, r3
    9760:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9768:	701a      	strb	r2, [r3, #0]
    976a:	f24c 3319 	movw	r3, #49945	; 0xc319
    976e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9772:	781b      	ldrb	r3, [r3, #0]
    9774:	3301      	adds	r3, #1
    9776:	b2da      	uxtb	r2, r3
    9778:	f24c 3319 	movw	r3, #49945	; 0xc319
    977c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9780:	701a      	strb	r2, [r3, #0]
    9782:	f24c 3319 	movw	r3, #49945	; 0xc319
    9786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978a:	781b      	ldrb	r3, [r3, #0]
    978c:	2bff      	cmp	r3, #255	; 0xff
    978e:	d105      	bne.n	979c <send_settings+0x3b0>
    9790:	f24c 3319 	movw	r3, #49945	; 0xc319
    9794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9798:	2200      	movs	r2, #0
    979a:	701a      	strb	r2, [r3, #0]
    979c:	f24c 3319 	movw	r3, #49945	; 0xc319
    97a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a4:	781b      	ldrb	r3, [r3, #0]
    97a6:	461a      	mov	r2, r3
    97a8:	f24c 3308 	movw	r3, #49928	; 0xc308
    97ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b0:	78d9      	ldrb	r1, [r3, #3]
    97b2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    97b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ba:	5499      	strb	r1, [r3, r2]
    97bc:	4b8b      	ldr	r3, [pc, #556]	; (99ec <send_settings+0x600>)
    97be:	781a      	ldrb	r2, [r3, #0]
    97c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    97c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c8:	781b      	ldrb	r3, [r3, #0]
    97ca:	4413      	add	r3, r2
    97cc:	b2da      	uxtb	r2, r3
    97ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    97d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d6:	701a      	strb	r2, [r3, #0]
    97d8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    97dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e0:	781a      	ldrb	r2, [r3, #0]
    97e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    97e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ea:	781b      	ldrb	r3, [r3, #0]
    97ec:	4413      	add	r3, r2
    97ee:	b2da      	uxtb	r2, r3
    97f0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    97f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f8:	701a      	strb	r2, [r3, #0]
    97fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    97fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9802:	781b      	ldrb	r3, [r3, #0]
    9804:	3301      	adds	r3, #1
    9806:	b2da      	uxtb	r2, r3
    9808:	f24c 3319 	movw	r3, #49945	; 0xc319
    980c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9810:	701a      	strb	r2, [r3, #0]
    9812:	f24c 3319 	movw	r3, #49945	; 0xc319
    9816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    981a:	781b      	ldrb	r3, [r3, #0]
    981c:	2bff      	cmp	r3, #255	; 0xff
    981e:	d105      	bne.n	982c <send_settings+0x440>
    9820:	f24c 3319 	movw	r3, #49945	; 0xc319
    9824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9828:	2200      	movs	r2, #0
    982a:	701a      	strb	r2, [r3, #0]
    982c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9834:	781b      	ldrb	r3, [r3, #0]
    9836:	461a      	mov	r2, r3
    9838:	f24c 330c 	movw	r3, #49932	; 0xc30c
    983c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9840:	7819      	ldrb	r1, [r3, #0]
    9842:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    984a:	5499      	strb	r1, [r3, r2]
    984c:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9854:	781a      	ldrb	r2, [r3, #0]
    9856:	f24c 431d 	movw	r3, #50205	; 0xc41d
    985a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    985e:	781b      	ldrb	r3, [r3, #0]
    9860:	4413      	add	r3, r2
    9862:	b2da      	uxtb	r2, r3
    9864:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    986c:	701a      	strb	r2, [r3, #0]
    986e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9876:	781a      	ldrb	r2, [r3, #0]
    9878:	f24c 431d 	movw	r3, #50205	; 0xc41d
    987c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9880:	781b      	ldrb	r3, [r3, #0]
    9882:	4413      	add	r3, r2
    9884:	b2da      	uxtb	r2, r3
    9886:	f24c 431e 	movw	r3, #50206	; 0xc41e
    988a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    988e:	701a      	strb	r2, [r3, #0]
    9890:	f24c 3319 	movw	r3, #49945	; 0xc319
    9894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9898:	781b      	ldrb	r3, [r3, #0]
    989a:	3301      	adds	r3, #1
    989c:	b2da      	uxtb	r2, r3
    989e:	f24c 3319 	movw	r3, #49945	; 0xc319
    98a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a6:	701a      	strb	r2, [r3, #0]
    98a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    98ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b0:	781b      	ldrb	r3, [r3, #0]
    98b2:	2bff      	cmp	r3, #255	; 0xff
    98b4:	d105      	bne.n	98c2 <send_settings+0x4d6>
    98b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    98ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98be:	2200      	movs	r2, #0
    98c0:	701a      	strb	r2, [r3, #0]
    98c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    98c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ca:	781b      	ldrb	r3, [r3, #0]
    98cc:	461a      	mov	r2, r3
    98ce:	f24c 330c 	movw	r3, #49932	; 0xc30c
    98d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d6:	7859      	ldrb	r1, [r3, #1]
    98d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    98dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e0:	5499      	strb	r1, [r3, r2]
    98e2:	4b43      	ldr	r3, [pc, #268]	; (99f0 <send_settings+0x604>)
    98e4:	781a      	ldrb	r2, [r3, #0]
    98e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    98ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ee:	781b      	ldrb	r3, [r3, #0]
    98f0:	4413      	add	r3, r2
    98f2:	b2da      	uxtb	r2, r3
    98f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    98f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98fc:	701a      	strb	r2, [r3, #0]
    98fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9906:	781a      	ldrb	r2, [r3, #0]
    9908:	f24c 431d 	movw	r3, #50205	; 0xc41d
    990c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9910:	781b      	ldrb	r3, [r3, #0]
    9912:	4413      	add	r3, r2
    9914:	b2da      	uxtb	r2, r3
    9916:	f24c 431e 	movw	r3, #50206	; 0xc41e
    991a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    991e:	701a      	strb	r2, [r3, #0]
    9920:	f24c 3319 	movw	r3, #49945	; 0xc319
    9924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9928:	781b      	ldrb	r3, [r3, #0]
    992a:	3301      	adds	r3, #1
    992c:	b2da      	uxtb	r2, r3
    992e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9936:	701a      	strb	r2, [r3, #0]
    9938:	f24c 3319 	movw	r3, #49945	; 0xc319
    993c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9940:	781b      	ldrb	r3, [r3, #0]
    9942:	2bff      	cmp	r3, #255	; 0xff
    9944:	d105      	bne.n	9952 <send_settings+0x566>
    9946:	f24c 3319 	movw	r3, #49945	; 0xc319
    994a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    994e:	2200      	movs	r2, #0
    9950:	701a      	strb	r2, [r3, #0]
    9952:	f24c 3319 	movw	r3, #49945	; 0xc319
    9956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    995a:	781b      	ldrb	r3, [r3, #0]
    995c:	461a      	mov	r2, r3
    995e:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9966:	7899      	ldrb	r1, [r3, #2]
    9968:	f24c 331c 	movw	r3, #49948	; 0xc31c
    996c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9970:	5499      	strb	r1, [r3, r2]
    9972:	4b20      	ldr	r3, [pc, #128]	; (99f4 <send_settings+0x608>)
    9974:	781a      	ldrb	r2, [r3, #0]
    9976:	f24c 431d 	movw	r3, #50205	; 0xc41d
    997a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    997e:	781b      	ldrb	r3, [r3, #0]
    9980:	4413      	add	r3, r2
    9982:	b2da      	uxtb	r2, r3
    9984:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    998c:	701a      	strb	r2, [r3, #0]
    998e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9996:	781a      	ldrb	r2, [r3, #0]
    9998:	f24c 431d 	movw	r3, #50205	; 0xc41d
    999c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a0:	781b      	ldrb	r3, [r3, #0]
    99a2:	4413      	add	r3, r2
    99a4:	b2da      	uxtb	r2, r3
    99a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    99aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ae:	701a      	strb	r2, [r3, #0]
    99b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    99b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b8:	781b      	ldrb	r3, [r3, #0]
    99ba:	3301      	adds	r3, #1
    99bc:	b2da      	uxtb	r2, r3
    99be:	f24c 3319 	movw	r3, #49945	; 0xc319
    99c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c6:	701a      	strb	r2, [r3, #0]
    99c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    99cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d0:	781b      	ldrb	r3, [r3, #0]
    99d2:	2bff      	cmp	r3, #255	; 0xff
    99d4:	d110      	bne.n	99f8 <send_settings+0x60c>
    99d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    99da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99de:	2200      	movs	r2, #0
    99e0:	701a      	strb	r2, [r3, #0]
    99e2:	e009      	b.n	99f8 <send_settings+0x60c>
    99e4:	2004c309 	.word	0x2004c309
    99e8:	2004c30a 	.word	0x2004c30a
    99ec:	2004c30b 	.word	0x2004c30b
    99f0:	2004c30d 	.word	0x2004c30d
    99f4:	2004c30e 	.word	0x2004c30e
    99f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    99fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a00:	781b      	ldrb	r3, [r3, #0]
    9a02:	461a      	mov	r2, r3
    9a04:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a0c:	78d9      	ldrb	r1, [r3, #3]
    9a0e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a16:	5499      	strb	r1, [r3, r2]
    9a18:	4b79      	ldr	r3, [pc, #484]	; (9c00 <send_settings+0x814>)
    9a1a:	781a      	ldrb	r2, [r3, #0]
    9a1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a24:	781b      	ldrb	r3, [r3, #0]
    9a26:	4413      	add	r3, r2
    9a28:	b2da      	uxtb	r2, r3
    9a2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a32:	701a      	strb	r2, [r3, #0]
    9a34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a3c:	781a      	ldrb	r2, [r3, #0]
    9a3e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a46:	781b      	ldrb	r3, [r3, #0]
    9a48:	4413      	add	r3, r2
    9a4a:	b2da      	uxtb	r2, r3
    9a4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a54:	701a      	strb	r2, [r3, #0]
    9a56:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a5e:	781b      	ldrb	r3, [r3, #0]
    9a60:	3301      	adds	r3, #1
    9a62:	b2da      	uxtb	r2, r3
    9a64:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6c:	701a      	strb	r2, [r3, #0]
    9a6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a76:	781b      	ldrb	r3, [r3, #0]
    9a78:	2bff      	cmp	r3, #255	; 0xff
    9a7a:	d105      	bne.n	9a88 <send_settings+0x69c>
    9a7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a84:	2200      	movs	r2, #0
    9a86:	701a      	strb	r2, [r3, #0]
    9a88:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a90:	781b      	ldrb	r3, [r3, #0]
    9a92:	461a      	mov	r2, r3
    9a94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9c:	7819      	ldrb	r1, [r3, #0]
    9a9e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa6:	5499      	strb	r1, [r3, r2]
    9aa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab0:	781b      	ldrb	r3, [r3, #0]
    9ab2:	3301      	adds	r3, #1
    9ab4:	b2da      	uxtb	r2, r3
    9ab6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9abe:	701a      	strb	r2, [r3, #0]
    9ac0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac8:	781b      	ldrb	r3, [r3, #0]
    9aca:	2bff      	cmp	r3, #255	; 0xff
    9acc:	d105      	bne.n	9ada <send_settings+0x6ee>
    9ace:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad6:	2200      	movs	r2, #0
    9ad8:	701a      	strb	r2, [r3, #0]
    9ada:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae2:	781b      	ldrb	r3, [r3, #0]
    9ae4:	461a      	mov	r2, r3
    9ae6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aee:	7819      	ldrb	r1, [r3, #0]
    9af0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af8:	5499      	strb	r1, [r3, r2]
    9afa:	f24c 3319 	movw	r3, #49945	; 0xc319
    9afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b02:	781b      	ldrb	r3, [r3, #0]
    9b04:	3301      	adds	r3, #1
    9b06:	b2da      	uxtb	r2, r3
    9b08:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b10:	701a      	strb	r2, [r3, #0]
    9b12:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b1a:	781b      	ldrb	r3, [r3, #0]
    9b1c:	2bff      	cmp	r3, #255	; 0xff
    9b1e:	d105      	bne.n	9b2c <send_settings+0x740>
    9b20:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b28:	2200      	movs	r2, #0
    9b2a:	701a      	strb	r2, [r3, #0]
    9b2c:	f242 0339 	movw	r3, #8249	; 0x2039
    9b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b34:	781b      	ldrb	r3, [r3, #0]
    9b36:	b2db      	uxtb	r3, r3
    9b38:	f003 0310 	and.w	r3, r3, #16
    9b3c:	2b00      	cmp	r3, #0
    9b3e:	d15a      	bne.n	9bf6 <send_settings+0x80a>
    9b40:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b48:	781b      	ldrb	r3, [r3, #0]
    9b4a:	b2db      	uxtb	r3, r3
    9b4c:	461a      	mov	r2, r3
    9b4e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b56:	5c9a      	ldrb	r2, [r3, r2]
    9b58:	f24c 431b 	movw	r3, #50203	; 0xc41b
    9b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b60:	701a      	strb	r2, [r3, #0]
    9b62:	f24c 431c 	movw	r3, #50204	; 0xc41c
    9b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6a:	2200      	movs	r2, #0
    9b6c:	701a      	strb	r2, [r3, #0]
    9b6e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b76:	781b      	ldrb	r3, [r3, #0]
    9b78:	b2db      	uxtb	r3, r3
    9b7a:	3301      	adds	r3, #1
    9b7c:	b2da      	uxtb	r2, r3
    9b7e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b86:	701a      	strb	r2, [r3, #0]
    9b88:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b90:	781b      	ldrb	r3, [r3, #0]
    9b92:	b2db      	uxtb	r3, r3
    9b94:	2bff      	cmp	r3, #255	; 0xff
    9b96:	d105      	bne.n	9ba4 <send_settings+0x7b8>
    9b98:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba0:	2200      	movs	r2, #0
    9ba2:	701a      	strb	r2, [r3, #0]
    9ba4:	f242 0338 	movw	r3, #8248	; 0x2038
    9ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bac:	f242 0238 	movw	r2, #8248	; 0x2038
    9bb0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9bb4:	7812      	ldrb	r2, [r2, #0]
    9bb6:	b2d2      	uxtb	r2, r2
    9bb8:	f042 0201 	orr.w	r2, r2, #1
    9bbc:	b2d2      	uxtb	r2, r2
    9bbe:	701a      	strb	r2, [r3, #0]
    9bc0:	f242 0339 	movw	r3, #8249	; 0x2039
    9bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bc8:	f242 0239 	movw	r2, #8249	; 0x2039
    9bcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9bd0:	7812      	ldrb	r2, [r2, #0]
    9bd2:	b2d2      	uxtb	r2, r2
    9bd4:	f042 0210 	orr.w	r2, r2, #16
    9bd8:	b2d2      	uxtb	r2, r2
    9bda:	701a      	strb	r2, [r3, #0]
    9bdc:	e00b      	b.n	9bf6 <send_settings+0x80a>
    9bde:	f24c 3318 	movw	r3, #49944	; 0xc318
    9be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be6:	781b      	ldrb	r3, [r3, #0]
    9be8:	3301      	adds	r3, #1
    9bea:	b2da      	uxtb	r2, r3
    9bec:	f24c 3318 	movw	r3, #49944	; 0xc318
    9bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf4:	701a      	strb	r2, [r3, #0]
}
    9bf6:	46bd      	mov	sp, r7
    9bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bfc:	4770      	bx	lr
    9bfe:	bf00      	nop
    9c00:	2004c30f 	.word	0x2004c30f

00009c04 <send_desired>:
void send_desired(void){  //1000ms
    9c04:	b480      	push	{r7}
    9c06:	af00      	add	r7, sp, #0
  if(!boot)
    9c08:	f240 533d 	movw	r3, #1341	; 0x53d
    9c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c10:	781b      	ldrb	r3, [r3, #0]
    9c12:	2b00      	cmp	r3, #0
    9c14:	f040 8727 	bne.w	aa66 <send_desired+0xe62>
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9c18:	f24c 3311 	movw	r3, #49937	; 0xc311
    9c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c20:	781a      	ldrb	r2, [r3, #0]
    9c22:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9c26:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9c2a:	fba3 1302 	umull	r1, r3, r3, r2
    9c2e:	08d9      	lsrs	r1, r3, #3
    9c30:	460b      	mov	r3, r1
    9c32:	009b      	lsls	r3, r3, #2
    9c34:	440b      	add	r3, r1
    9c36:	005b      	lsls	r3, r3, #1
    9c38:	1ad3      	subs	r3, r2, r3
    9c3a:	b2db      	uxtb	r3, r3
    9c3c:	2b03      	cmp	r3, #3
    9c3e:	f040 8712 	bne.w	aa66 <send_desired+0xe62>
    9c42:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c4a:	781a      	ldrb	r2, [r3, #0]
    9c4c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c54:	781b      	ldrb	r3, [r3, #0]
    9c56:	b2db      	uxtb	r3, r3
    9c58:	429a      	cmp	r2, r3
    9c5a:	d313      	bcc.n	9c84 <send_desired+0x80>
    9c5c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c64:	781b      	ldrb	r3, [r3, #0]
    9c66:	b2db      	uxtb	r3, r3
    9c68:	461a      	mov	r2, r3
    9c6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c72:	781b      	ldrb	r3, [r3, #0]
    9c74:	1ad3      	subs	r3, r2, r3
    9c76:	33ff      	adds	r3, #255	; 0xff
    9c78:	2b18      	cmp	r3, #24
    9c7a:	bfd4      	ite	le
    9c7c:	2300      	movle	r3, #0
    9c7e:	2301      	movgt	r3, #1
    9c80:	b2db      	uxtb	r3, r3
    9c82:	e011      	b.n	9ca8 <send_desired+0xa4>
    9c84:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c8c:	781b      	ldrb	r3, [r3, #0]
    9c8e:	b2db      	uxtb	r3, r3
    9c90:	461a      	mov	r2, r3
    9c92:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c9a:	781b      	ldrb	r3, [r3, #0]
    9c9c:	1ad3      	subs	r3, r2, r3
    9c9e:	2b18      	cmp	r3, #24
    9ca0:	bfd4      	ite	le
    9ca2:	2300      	movle	r3, #0
    9ca4:	2301      	movgt	r3, #1
    9ca6:	b2db      	uxtb	r3, r3
    9ca8:	2b00      	cmp	r3, #0
    9caa:	f000 86d0 	beq.w	aa4e <send_desired+0xe4a>
    9cae:	f24c 3319 	movw	r3, #49945	; 0xc319
    9cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cb6:	781b      	ldrb	r3, [r3, #0]
    9cb8:	461a      	mov	r2, r3
    9cba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc2:	2105      	movs	r1, #5
    9cc4:	5499      	strb	r1, [r3, r2]
    9cc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cce:	781b      	ldrb	r3, [r3, #0]
    9cd0:	3301      	adds	r3, #1
    9cd2:	b2da      	uxtb	r2, r3
    9cd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cdc:	701a      	strb	r2, [r3, #0]
    9cde:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce6:	781b      	ldrb	r3, [r3, #0]
    9ce8:	2bff      	cmp	r3, #255	; 0xff
    9cea:	d105      	bne.n	9cf8 <send_desired+0xf4>
    9cec:	f24c 3319 	movw	r3, #49945	; 0xc319
    9cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf4:	2200      	movs	r2, #0
    9cf6:	701a      	strb	r2, [r3, #0]
    9cf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d00:	781b      	ldrb	r3, [r3, #0]
    9d02:	461a      	mov	r2, r3
    9d04:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d0c:	2112      	movs	r1, #18
    9d0e:	5499      	strb	r1, [r3, r2]
    9d10:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d18:	781b      	ldrb	r3, [r3, #0]
    9d1a:	3301      	adds	r3, #1
    9d1c:	b2da      	uxtb	r2, r3
    9d1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d26:	701a      	strb	r2, [r3, #0]
    9d28:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d30:	781b      	ldrb	r3, [r3, #0]
    9d32:	2bff      	cmp	r3, #255	; 0xff
    9d34:	d105      	bne.n	9d42 <send_desired+0x13e>
    9d36:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d3e:	2200      	movs	r2, #0
    9d40:	701a      	strb	r2, [r3, #0]
    9d42:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4a:	2212      	movs	r2, #18
    9d4c:	701a      	strb	r2, [r3, #0]
    9d4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d56:	2212      	movs	r2, #18
    9d58:	701a      	strb	r2, [r3, #0]
    9d5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d62:	781b      	ldrb	r3, [r3, #0]
    9d64:	461a      	mov	r2, r3
    9d66:	f24c 6344 	movw	r3, #50756	; 0xc644
    9d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d6e:	7819      	ldrb	r1, [r3, #0]
    9d70:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d78:	5499      	strb	r1, [r3, r2]
    9d7a:	f24c 6344 	movw	r3, #50756	; 0xc644
    9d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d82:	781a      	ldrb	r2, [r3, #0]
    9d84:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8c:	781b      	ldrb	r3, [r3, #0]
    9d8e:	4413      	add	r3, r2
    9d90:	b2da      	uxtb	r2, r3
    9d92:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9a:	701a      	strb	r2, [r3, #0]
    9d9c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da4:	781a      	ldrb	r2, [r3, #0]
    9da6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dae:	781b      	ldrb	r3, [r3, #0]
    9db0:	4413      	add	r3, r2
    9db2:	b2da      	uxtb	r2, r3
    9db4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbc:	701a      	strb	r2, [r3, #0]
    9dbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc6:	781b      	ldrb	r3, [r3, #0]
    9dc8:	3301      	adds	r3, #1
    9dca:	b2da      	uxtb	r2, r3
    9dcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd4:	701a      	strb	r2, [r3, #0]
    9dd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dde:	781b      	ldrb	r3, [r3, #0]
    9de0:	2bff      	cmp	r3, #255	; 0xff
    9de2:	d105      	bne.n	9df0 <send_desired+0x1ec>
    9de4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dec:	2200      	movs	r2, #0
    9dee:	701a      	strb	r2, [r3, #0]
    9df0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df8:	781b      	ldrb	r3, [r3, #0]
    9dfa:	461a      	mov	r2, r3
    9dfc:	f24c 6344 	movw	r3, #50756	; 0xc644
    9e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e04:	7859      	ldrb	r1, [r3, #1]
    9e06:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e0e:	5499      	strb	r1, [r3, r2]
    9e10:	4bd1      	ldr	r3, [pc, #836]	; (a158 <send_desired+0x554>)
    9e12:	781a      	ldrb	r2, [r3, #0]
    9e14:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1c:	781b      	ldrb	r3, [r3, #0]
    9e1e:	4413      	add	r3, r2
    9e20:	b2da      	uxtb	r2, r3
    9e22:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2a:	701a      	strb	r2, [r3, #0]
    9e2c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e34:	781a      	ldrb	r2, [r3, #0]
    9e36:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3e:	781b      	ldrb	r3, [r3, #0]
    9e40:	4413      	add	r3, r2
    9e42:	b2da      	uxtb	r2, r3
    9e44:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4c:	701a      	strb	r2, [r3, #0]
    9e4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e56:	781b      	ldrb	r3, [r3, #0]
    9e58:	3301      	adds	r3, #1
    9e5a:	b2da      	uxtb	r2, r3
    9e5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e64:	701a      	strb	r2, [r3, #0]
    9e66:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e6e:	781b      	ldrb	r3, [r3, #0]
    9e70:	2bff      	cmp	r3, #255	; 0xff
    9e72:	d105      	bne.n	9e80 <send_desired+0x27c>
    9e74:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e7c:	2200      	movs	r2, #0
    9e7e:	701a      	strb	r2, [r3, #0]
    9e80:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e88:	781b      	ldrb	r3, [r3, #0]
    9e8a:	461a      	mov	r2, r3
    9e8c:	f24c 6344 	movw	r3, #50756	; 0xc644
    9e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e94:	7899      	ldrb	r1, [r3, #2]
    9e96:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e9e:	5499      	strb	r1, [r3, r2]
    9ea0:	4bae      	ldr	r3, [pc, #696]	; (a15c <send_desired+0x558>)
    9ea2:	781a      	ldrb	r2, [r3, #0]
    9ea4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eac:	781b      	ldrb	r3, [r3, #0]
    9eae:	4413      	add	r3, r2
    9eb0:	b2da      	uxtb	r2, r3
    9eb2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eba:	701a      	strb	r2, [r3, #0]
    9ebc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec4:	781a      	ldrb	r2, [r3, #0]
    9ec6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ece:	781b      	ldrb	r3, [r3, #0]
    9ed0:	4413      	add	r3, r2
    9ed2:	b2da      	uxtb	r2, r3
    9ed4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9edc:	701a      	strb	r2, [r3, #0]
    9ede:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee6:	781b      	ldrb	r3, [r3, #0]
    9ee8:	3301      	adds	r3, #1
    9eea:	b2da      	uxtb	r2, r3
    9eec:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef4:	701a      	strb	r2, [r3, #0]
    9ef6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efe:	781b      	ldrb	r3, [r3, #0]
    9f00:	2bff      	cmp	r3, #255	; 0xff
    9f02:	d105      	bne.n	9f10 <send_desired+0x30c>
    9f04:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0c:	2200      	movs	r2, #0
    9f0e:	701a      	strb	r2, [r3, #0]
    9f10:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f18:	781b      	ldrb	r3, [r3, #0]
    9f1a:	461a      	mov	r2, r3
    9f1c:	f24c 6344 	movw	r3, #50756	; 0xc644
    9f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f24:	78d9      	ldrb	r1, [r3, #3]
    9f26:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f2e:	5499      	strb	r1, [r3, r2]
    9f30:	4b8b      	ldr	r3, [pc, #556]	; (a160 <send_desired+0x55c>)
    9f32:	781a      	ldrb	r2, [r3, #0]
    9f34:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3c:	781b      	ldrb	r3, [r3, #0]
    9f3e:	4413      	add	r3, r2
    9f40:	b2da      	uxtb	r2, r3
    9f42:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f4a:	701a      	strb	r2, [r3, #0]
    9f4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f54:	781a      	ldrb	r2, [r3, #0]
    9f56:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5e:	781b      	ldrb	r3, [r3, #0]
    9f60:	4413      	add	r3, r2
    9f62:	b2da      	uxtb	r2, r3
    9f64:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6c:	701a      	strb	r2, [r3, #0]
    9f6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f76:	781b      	ldrb	r3, [r3, #0]
    9f78:	3301      	adds	r3, #1
    9f7a:	b2da      	uxtb	r2, r3
    9f7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f84:	701a      	strb	r2, [r3, #0]
    9f86:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8e:	781b      	ldrb	r3, [r3, #0]
    9f90:	2bff      	cmp	r3, #255	; 0xff
    9f92:	d105      	bne.n	9fa0 <send_desired+0x39c>
    9f94:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9c:	2200      	movs	r2, #0
    9f9e:	701a      	strb	r2, [r3, #0]
    9fa0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa8:	781b      	ldrb	r3, [r3, #0]
    9faa:	461a      	mov	r2, r3
    9fac:	f24c 6348 	movw	r3, #50760	; 0xc648
    9fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb4:	7819      	ldrb	r1, [r3, #0]
    9fb6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fbe:	5499      	strb	r1, [r3, r2]
    9fc0:	f24c 6348 	movw	r3, #50760	; 0xc648
    9fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc8:	781a      	ldrb	r2, [r3, #0]
    9fca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd2:	781b      	ldrb	r3, [r3, #0]
    9fd4:	4413      	add	r3, r2
    9fd6:	b2da      	uxtb	r2, r3
    9fd8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe0:	701a      	strb	r2, [r3, #0]
    9fe2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fea:	781a      	ldrb	r2, [r3, #0]
    9fec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff4:	781b      	ldrb	r3, [r3, #0]
    9ff6:	4413      	add	r3, r2
    9ff8:	b2da      	uxtb	r2, r3
    9ffa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a002:	701a      	strb	r2, [r3, #0]
    a004:	f24c 3319 	movw	r3, #49945	; 0xc319
    a008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a00c:	781b      	ldrb	r3, [r3, #0]
    a00e:	3301      	adds	r3, #1
    a010:	b2da      	uxtb	r2, r3
    a012:	f24c 3319 	movw	r3, #49945	; 0xc319
    a016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01a:	701a      	strb	r2, [r3, #0]
    a01c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a024:	781b      	ldrb	r3, [r3, #0]
    a026:	2bff      	cmp	r3, #255	; 0xff
    a028:	d105      	bne.n	a036 <send_desired+0x432>
    a02a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a032:	2200      	movs	r2, #0
    a034:	701a      	strb	r2, [r3, #0]
    a036:	f24c 3319 	movw	r3, #49945	; 0xc319
    a03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a03e:	781b      	ldrb	r3, [r3, #0]
    a040:	461a      	mov	r2, r3
    a042:	f24c 6348 	movw	r3, #50760	; 0xc648
    a046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04a:	7859      	ldrb	r1, [r3, #1]
    a04c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a054:	5499      	strb	r1, [r3, r2]
    a056:	4b43      	ldr	r3, [pc, #268]	; (a164 <send_desired+0x560>)
    a058:	781a      	ldrb	r2, [r3, #0]
    a05a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a062:	781b      	ldrb	r3, [r3, #0]
    a064:	4413      	add	r3, r2
    a066:	b2da      	uxtb	r2, r3
    a068:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a070:	701a      	strb	r2, [r3, #0]
    a072:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a07a:	781a      	ldrb	r2, [r3, #0]
    a07c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a084:	781b      	ldrb	r3, [r3, #0]
    a086:	4413      	add	r3, r2
    a088:	b2da      	uxtb	r2, r3
    a08a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a092:	701a      	strb	r2, [r3, #0]
    a094:	f24c 3319 	movw	r3, #49945	; 0xc319
    a098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a09c:	781b      	ldrb	r3, [r3, #0]
    a09e:	3301      	adds	r3, #1
    a0a0:	b2da      	uxtb	r2, r3
    a0a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0aa:	701a      	strb	r2, [r3, #0]
    a0ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b4:	781b      	ldrb	r3, [r3, #0]
    a0b6:	2bff      	cmp	r3, #255	; 0xff
    a0b8:	d105      	bne.n	a0c6 <send_desired+0x4c2>
    a0ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c2:	2200      	movs	r2, #0
    a0c4:	701a      	strb	r2, [r3, #0]
    a0c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ce:	781b      	ldrb	r3, [r3, #0]
    a0d0:	461a      	mov	r2, r3
    a0d2:	f24c 6348 	movw	r3, #50760	; 0xc648
    a0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0da:	7899      	ldrb	r1, [r3, #2]
    a0dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e4:	5499      	strb	r1, [r3, r2]
    a0e6:	4b20      	ldr	r3, [pc, #128]	; (a168 <send_desired+0x564>)
    a0e8:	781a      	ldrb	r2, [r3, #0]
    a0ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f2:	781b      	ldrb	r3, [r3, #0]
    a0f4:	4413      	add	r3, r2
    a0f6:	b2da      	uxtb	r2, r3
    a0f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a100:	701a      	strb	r2, [r3, #0]
    a102:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10a:	781a      	ldrb	r2, [r3, #0]
    a10c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a114:	781b      	ldrb	r3, [r3, #0]
    a116:	4413      	add	r3, r2
    a118:	b2da      	uxtb	r2, r3
    a11a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a122:	701a      	strb	r2, [r3, #0]
    a124:	f24c 3319 	movw	r3, #49945	; 0xc319
    a128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12c:	781b      	ldrb	r3, [r3, #0]
    a12e:	3301      	adds	r3, #1
    a130:	b2da      	uxtb	r2, r3
    a132:	f24c 3319 	movw	r3, #49945	; 0xc319
    a136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13a:	701a      	strb	r2, [r3, #0]
    a13c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a144:	781b      	ldrb	r3, [r3, #0]
    a146:	2bff      	cmp	r3, #255	; 0xff
    a148:	d110      	bne.n	a16c <send_desired+0x568>
    a14a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a152:	2200      	movs	r2, #0
    a154:	701a      	strb	r2, [r3, #0]
    a156:	e009      	b.n	a16c <send_desired+0x568>
    a158:	2004c645 	.word	0x2004c645
    a15c:	2004c646 	.word	0x2004c646
    a160:	2004c647 	.word	0x2004c647
    a164:	2004c649 	.word	0x2004c649
    a168:	2004c64a 	.word	0x2004c64a
    a16c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a174:	781b      	ldrb	r3, [r3, #0]
    a176:	461a      	mov	r2, r3
    a178:	f24c 6348 	movw	r3, #50760	; 0xc648
    a17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a180:	78d9      	ldrb	r1, [r3, #3]
    a182:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a18a:	5499      	strb	r1, [r3, r2]
    a18c:	4bd3      	ldr	r3, [pc, #844]	; (a4dc <send_desired+0x8d8>)
    a18e:	781a      	ldrb	r2, [r3, #0]
    a190:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a198:	781b      	ldrb	r3, [r3, #0]
    a19a:	4413      	add	r3, r2
    a19c:	b2da      	uxtb	r2, r3
    a19e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a6:	701a      	strb	r2, [r3, #0]
    a1a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b0:	781a      	ldrb	r2, [r3, #0]
    a1b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ba:	781b      	ldrb	r3, [r3, #0]
    a1bc:	4413      	add	r3, r2
    a1be:	b2da      	uxtb	r2, r3
    a1c0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c8:	701a      	strb	r2, [r3, #0]
    a1ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d2:	781b      	ldrb	r3, [r3, #0]
    a1d4:	3301      	adds	r3, #1
    a1d6:	b2da      	uxtb	r2, r3
    a1d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e0:	701a      	strb	r2, [r3, #0]
    a1e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ea:	781b      	ldrb	r3, [r3, #0]
    a1ec:	2bff      	cmp	r3, #255	; 0xff
    a1ee:	d105      	bne.n	a1fc <send_desired+0x5f8>
    a1f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f8:	2200      	movs	r2, #0
    a1fa:	701a      	strb	r2, [r3, #0]
    a1fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a204:	781b      	ldrb	r3, [r3, #0]
    a206:	461a      	mov	r2, r3
    a208:	f24c 6390 	movw	r3, #50832	; 0xc690
    a20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a210:	7819      	ldrb	r1, [r3, #0]
    a212:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a21a:	5499      	strb	r1, [r3, r2]
    a21c:	f24c 6390 	movw	r3, #50832	; 0xc690
    a220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a224:	781a      	ldrb	r2, [r3, #0]
    a226:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22e:	781b      	ldrb	r3, [r3, #0]
    a230:	4413      	add	r3, r2
    a232:	b2da      	uxtb	r2, r3
    a234:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23c:	701a      	strb	r2, [r3, #0]
    a23e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a246:	781a      	ldrb	r2, [r3, #0]
    a248:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a250:	781b      	ldrb	r3, [r3, #0]
    a252:	4413      	add	r3, r2
    a254:	b2da      	uxtb	r2, r3
    a256:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a25e:	701a      	strb	r2, [r3, #0]
    a260:	f24c 3319 	movw	r3, #49945	; 0xc319
    a264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a268:	781b      	ldrb	r3, [r3, #0]
    a26a:	3301      	adds	r3, #1
    a26c:	b2da      	uxtb	r2, r3
    a26e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a276:	701a      	strb	r2, [r3, #0]
    a278:	f24c 3319 	movw	r3, #49945	; 0xc319
    a27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a280:	781b      	ldrb	r3, [r3, #0]
    a282:	2bff      	cmp	r3, #255	; 0xff
    a284:	d105      	bne.n	a292 <send_desired+0x68e>
    a286:	f24c 3319 	movw	r3, #49945	; 0xc319
    a28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28e:	2200      	movs	r2, #0
    a290:	701a      	strb	r2, [r3, #0]
    a292:	f24c 3319 	movw	r3, #49945	; 0xc319
    a296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29a:	781b      	ldrb	r3, [r3, #0]
    a29c:	461a      	mov	r2, r3
    a29e:	f24c 6390 	movw	r3, #50832	; 0xc690
    a2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a6:	7859      	ldrb	r1, [r3, #1]
    a2a8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b0:	5499      	strb	r1, [r3, r2]
    a2b2:	4b8b      	ldr	r3, [pc, #556]	; (a4e0 <send_desired+0x8dc>)
    a2b4:	781a      	ldrb	r2, [r3, #0]
    a2b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2be:	781b      	ldrb	r3, [r3, #0]
    a2c0:	4413      	add	r3, r2
    a2c2:	b2da      	uxtb	r2, r3
    a2c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2cc:	701a      	strb	r2, [r3, #0]
    a2ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d6:	781a      	ldrb	r2, [r3, #0]
    a2d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e0:	781b      	ldrb	r3, [r3, #0]
    a2e2:	4413      	add	r3, r2
    a2e4:	b2da      	uxtb	r2, r3
    a2e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a2ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ee:	701a      	strb	r2, [r3, #0]
    a2f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f8:	781b      	ldrb	r3, [r3, #0]
    a2fa:	3301      	adds	r3, #1
    a2fc:	b2da      	uxtb	r2, r3
    a2fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    a302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a306:	701a      	strb	r2, [r3, #0]
    a308:	f24c 3319 	movw	r3, #49945	; 0xc319
    a30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a310:	781b      	ldrb	r3, [r3, #0]
    a312:	2bff      	cmp	r3, #255	; 0xff
    a314:	d105      	bne.n	a322 <send_desired+0x71e>
    a316:	f24c 3319 	movw	r3, #49945	; 0xc319
    a31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a31e:	2200      	movs	r2, #0
    a320:	701a      	strb	r2, [r3, #0]
    a322:	f24c 3319 	movw	r3, #49945	; 0xc319
    a326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32a:	781b      	ldrb	r3, [r3, #0]
    a32c:	461a      	mov	r2, r3
    a32e:	f24c 6390 	movw	r3, #50832	; 0xc690
    a332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a336:	7899      	ldrb	r1, [r3, #2]
    a338:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a340:	5499      	strb	r1, [r3, r2]
    a342:	4b68      	ldr	r3, [pc, #416]	; (a4e4 <send_desired+0x8e0>)
    a344:	781a      	ldrb	r2, [r3, #0]
    a346:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a34e:	781b      	ldrb	r3, [r3, #0]
    a350:	4413      	add	r3, r2
    a352:	b2da      	uxtb	r2, r3
    a354:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35c:	701a      	strb	r2, [r3, #0]
    a35e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a366:	781a      	ldrb	r2, [r3, #0]
    a368:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a370:	781b      	ldrb	r3, [r3, #0]
    a372:	4413      	add	r3, r2
    a374:	b2da      	uxtb	r2, r3
    a376:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37e:	701a      	strb	r2, [r3, #0]
    a380:	f24c 3319 	movw	r3, #49945	; 0xc319
    a384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a388:	781b      	ldrb	r3, [r3, #0]
    a38a:	3301      	adds	r3, #1
    a38c:	b2da      	uxtb	r2, r3
    a38e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a396:	701a      	strb	r2, [r3, #0]
    a398:	f24c 3319 	movw	r3, #49945	; 0xc319
    a39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a0:	781b      	ldrb	r3, [r3, #0]
    a3a2:	2bff      	cmp	r3, #255	; 0xff
    a3a4:	d105      	bne.n	a3b2 <send_desired+0x7ae>
    a3a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ae:	2200      	movs	r2, #0
    a3b0:	701a      	strb	r2, [r3, #0]
    a3b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ba:	781b      	ldrb	r3, [r3, #0]
    a3bc:	461a      	mov	r2, r3
    a3be:	f24c 6390 	movw	r3, #50832	; 0xc690
    a3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c6:	78d9      	ldrb	r1, [r3, #3]
    a3c8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d0:	5499      	strb	r1, [r3, r2]
    a3d2:	4b45      	ldr	r3, [pc, #276]	; (a4e8 <send_desired+0x8e4>)
    a3d4:	781a      	ldrb	r2, [r3, #0]
    a3d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3de:	781b      	ldrb	r3, [r3, #0]
    a3e0:	4413      	add	r3, r2
    a3e2:	b2da      	uxtb	r2, r3
    a3e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ec:	701a      	strb	r2, [r3, #0]
    a3ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f6:	781a      	ldrb	r2, [r3, #0]
    a3f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a400:	781b      	ldrb	r3, [r3, #0]
    a402:	4413      	add	r3, r2
    a404:	b2da      	uxtb	r2, r3
    a406:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a40e:	701a      	strb	r2, [r3, #0]
    a410:	f24c 3319 	movw	r3, #49945	; 0xc319
    a414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a418:	781b      	ldrb	r3, [r3, #0]
    a41a:	3301      	adds	r3, #1
    a41c:	b2da      	uxtb	r2, r3
    a41e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a426:	701a      	strb	r2, [r3, #0]
    a428:	f24c 3319 	movw	r3, #49945	; 0xc319
    a42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a430:	781b      	ldrb	r3, [r3, #0]
    a432:	2bff      	cmp	r3, #255	; 0xff
    a434:	d105      	bne.n	a442 <send_desired+0x83e>
    a436:	f24c 3319 	movw	r3, #49945	; 0xc319
    a43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a43e:	2200      	movs	r2, #0
    a440:	701a      	strb	r2, [r3, #0]
    a442:	f24c 3319 	movw	r3, #49945	; 0xc319
    a446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a44a:	781b      	ldrb	r3, [r3, #0]
    a44c:	461a      	mov	r2, r3
    a44e:	f24c 6394 	movw	r3, #50836	; 0xc694
    a452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a456:	7819      	ldrb	r1, [r3, #0]
    a458:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a460:	5499      	strb	r1, [r3, r2]
    a462:	f24c 6394 	movw	r3, #50836	; 0xc694
    a466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a46a:	781a      	ldrb	r2, [r3, #0]
    a46c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a474:	781b      	ldrb	r3, [r3, #0]
    a476:	4413      	add	r3, r2
    a478:	b2da      	uxtb	r2, r3
    a47a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a482:	701a      	strb	r2, [r3, #0]
    a484:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a48c:	781a      	ldrb	r2, [r3, #0]
    a48e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a496:	781b      	ldrb	r3, [r3, #0]
    a498:	4413      	add	r3, r2
    a49a:	b2da      	uxtb	r2, r3
    a49c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a4:	701a      	strb	r2, [r3, #0]
    a4a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ae:	781b      	ldrb	r3, [r3, #0]
    a4b0:	3301      	adds	r3, #1
    a4b2:	b2da      	uxtb	r2, r3
    a4b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4bc:	701a      	strb	r2, [r3, #0]
    a4be:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c6:	781b      	ldrb	r3, [r3, #0]
    a4c8:	2bff      	cmp	r3, #255	; 0xff
    a4ca:	d10f      	bne.n	a4ec <send_desired+0x8e8>
    a4cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d4:	2200      	movs	r2, #0
    a4d6:	701a      	strb	r2, [r3, #0]
    a4d8:	e008      	b.n	a4ec <send_desired+0x8e8>
    a4da:	bf00      	nop
    a4dc:	2004c64b 	.word	0x2004c64b
    a4e0:	2004c691 	.word	0x2004c691
    a4e4:	2004c692 	.word	0x2004c692
    a4e8:	2004c693 	.word	0x2004c693
    a4ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f4:	781b      	ldrb	r3, [r3, #0]
    a4f6:	461a      	mov	r2, r3
    a4f8:	f24c 6394 	movw	r3, #50836	; 0xc694
    a4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a500:	7859      	ldrb	r1, [r3, #1]
    a502:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a50a:	5499      	strb	r1, [r3, r2]
    a50c:	4bd1      	ldr	r3, [pc, #836]	; (a854 <send_desired+0xc50>)
    a50e:	781a      	ldrb	r2, [r3, #0]
    a510:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a518:	781b      	ldrb	r3, [r3, #0]
    a51a:	4413      	add	r3, r2
    a51c:	b2da      	uxtb	r2, r3
    a51e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a526:	701a      	strb	r2, [r3, #0]
    a528:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a530:	781a      	ldrb	r2, [r3, #0]
    a532:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a53a:	781b      	ldrb	r3, [r3, #0]
    a53c:	4413      	add	r3, r2
    a53e:	b2da      	uxtb	r2, r3
    a540:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a548:	701a      	strb	r2, [r3, #0]
    a54a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a552:	781b      	ldrb	r3, [r3, #0]
    a554:	3301      	adds	r3, #1
    a556:	b2da      	uxtb	r2, r3
    a558:	f24c 3319 	movw	r3, #49945	; 0xc319
    a55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a560:	701a      	strb	r2, [r3, #0]
    a562:	f24c 3319 	movw	r3, #49945	; 0xc319
    a566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a56a:	781b      	ldrb	r3, [r3, #0]
    a56c:	2bff      	cmp	r3, #255	; 0xff
    a56e:	d105      	bne.n	a57c <send_desired+0x978>
    a570:	f24c 3319 	movw	r3, #49945	; 0xc319
    a574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a578:	2200      	movs	r2, #0
    a57a:	701a      	strb	r2, [r3, #0]
    a57c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a584:	781b      	ldrb	r3, [r3, #0]
    a586:	461a      	mov	r2, r3
    a588:	f24c 6394 	movw	r3, #50836	; 0xc694
    a58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a590:	7899      	ldrb	r1, [r3, #2]
    a592:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a59a:	5499      	strb	r1, [r3, r2]
    a59c:	4bae      	ldr	r3, [pc, #696]	; (a858 <send_desired+0xc54>)
    a59e:	781a      	ldrb	r2, [r3, #0]
    a5a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a8:	781b      	ldrb	r3, [r3, #0]
    a5aa:	4413      	add	r3, r2
    a5ac:	b2da      	uxtb	r2, r3
    a5ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b6:	701a      	strb	r2, [r3, #0]
    a5b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c0:	781a      	ldrb	r2, [r3, #0]
    a5c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ca:	781b      	ldrb	r3, [r3, #0]
    a5cc:	4413      	add	r3, r2
    a5ce:	b2da      	uxtb	r2, r3
    a5d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d8:	701a      	strb	r2, [r3, #0]
    a5da:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e2:	781b      	ldrb	r3, [r3, #0]
    a5e4:	3301      	adds	r3, #1
    a5e6:	b2da      	uxtb	r2, r3
    a5e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f0:	701a      	strb	r2, [r3, #0]
    a5f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5fa:	781b      	ldrb	r3, [r3, #0]
    a5fc:	2bff      	cmp	r3, #255	; 0xff
    a5fe:	d105      	bne.n	a60c <send_desired+0xa08>
    a600:	f24c 3319 	movw	r3, #49945	; 0xc319
    a604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a608:	2200      	movs	r2, #0
    a60a:	701a      	strb	r2, [r3, #0]
    a60c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a614:	781b      	ldrb	r3, [r3, #0]
    a616:	461a      	mov	r2, r3
    a618:	f24c 6394 	movw	r3, #50836	; 0xc694
    a61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a620:	78d9      	ldrb	r1, [r3, #3]
    a622:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a62a:	5499      	strb	r1, [r3, r2]
    a62c:	4b8b      	ldr	r3, [pc, #556]	; (a85c <send_desired+0xc58>)
    a62e:	781a      	ldrb	r2, [r3, #0]
    a630:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a638:	781b      	ldrb	r3, [r3, #0]
    a63a:	4413      	add	r3, r2
    a63c:	b2da      	uxtb	r2, r3
    a63e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a646:	701a      	strb	r2, [r3, #0]
    a648:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a650:	781a      	ldrb	r2, [r3, #0]
    a652:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a65a:	781b      	ldrb	r3, [r3, #0]
    a65c:	4413      	add	r3, r2
    a65e:	b2da      	uxtb	r2, r3
    a660:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a668:	701a      	strb	r2, [r3, #0]
    a66a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a672:	781b      	ldrb	r3, [r3, #0]
    a674:	3301      	adds	r3, #1
    a676:	b2da      	uxtb	r2, r3
    a678:	f24c 3319 	movw	r3, #49945	; 0xc319
    a67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a680:	701a      	strb	r2, [r3, #0]
    a682:	f24c 3319 	movw	r3, #49945	; 0xc319
    a686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a68a:	781b      	ldrb	r3, [r3, #0]
    a68c:	2bff      	cmp	r3, #255	; 0xff
    a68e:	d105      	bne.n	a69c <send_desired+0xa98>
    a690:	f24c 3319 	movw	r3, #49945	; 0xc319
    a694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a698:	2200      	movs	r2, #0
    a69a:	701a      	strb	r2, [r3, #0]
    a69c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a4:	781b      	ldrb	r3, [r3, #0]
    a6a6:	461a      	mov	r2, r3
    a6a8:	f240 5374 	movw	r3, #1396	; 0x574
    a6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b0:	7819      	ldrb	r1, [r3, #0]
    a6b2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ba:	5499      	strb	r1, [r3, r2]
    a6bc:	f240 5374 	movw	r3, #1396	; 0x574
    a6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c4:	781a      	ldrb	r2, [r3, #0]
    a6c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ce:	781b      	ldrb	r3, [r3, #0]
    a6d0:	4413      	add	r3, r2
    a6d2:	b2da      	uxtb	r2, r3
    a6d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6dc:	701a      	strb	r2, [r3, #0]
    a6de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e6:	781a      	ldrb	r2, [r3, #0]
    a6e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f0:	781b      	ldrb	r3, [r3, #0]
    a6f2:	4413      	add	r3, r2
    a6f4:	b2da      	uxtb	r2, r3
    a6f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6fe:	701a      	strb	r2, [r3, #0]
    a700:	f24c 3319 	movw	r3, #49945	; 0xc319
    a704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a708:	781b      	ldrb	r3, [r3, #0]
    a70a:	3301      	adds	r3, #1
    a70c:	b2da      	uxtb	r2, r3
    a70e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a716:	701a      	strb	r2, [r3, #0]
    a718:	f24c 3319 	movw	r3, #49945	; 0xc319
    a71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a720:	781b      	ldrb	r3, [r3, #0]
    a722:	2bff      	cmp	r3, #255	; 0xff
    a724:	d105      	bne.n	a732 <send_desired+0xb2e>
    a726:	f24c 3319 	movw	r3, #49945	; 0xc319
    a72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a72e:	2200      	movs	r2, #0
    a730:	701a      	strb	r2, [r3, #0]
    a732:	f24c 3319 	movw	r3, #49945	; 0xc319
    a736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a73a:	781b      	ldrb	r3, [r3, #0]
    a73c:	461a      	mov	r2, r3
    a73e:	f240 5374 	movw	r3, #1396	; 0x574
    a742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a746:	7859      	ldrb	r1, [r3, #1]
    a748:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a750:	5499      	strb	r1, [r3, r2]
    a752:	4b43      	ldr	r3, [pc, #268]	; (a860 <send_desired+0xc5c>)
    a754:	781a      	ldrb	r2, [r3, #0]
    a756:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a75e:	781b      	ldrb	r3, [r3, #0]
    a760:	4413      	add	r3, r2
    a762:	b2da      	uxtb	r2, r3
    a764:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a76c:	701a      	strb	r2, [r3, #0]
    a76e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a776:	781a      	ldrb	r2, [r3, #0]
    a778:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a780:	781b      	ldrb	r3, [r3, #0]
    a782:	4413      	add	r3, r2
    a784:	b2da      	uxtb	r2, r3
    a786:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a78e:	701a      	strb	r2, [r3, #0]
    a790:	f24c 3319 	movw	r3, #49945	; 0xc319
    a794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a798:	781b      	ldrb	r3, [r3, #0]
    a79a:	3301      	adds	r3, #1
    a79c:	b2da      	uxtb	r2, r3
    a79e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a6:	701a      	strb	r2, [r3, #0]
    a7a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b0:	781b      	ldrb	r3, [r3, #0]
    a7b2:	2bff      	cmp	r3, #255	; 0xff
    a7b4:	d105      	bne.n	a7c2 <send_desired+0xbbe>
    a7b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7be:	2200      	movs	r2, #0
    a7c0:	701a      	strb	r2, [r3, #0]
    a7c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ca:	781b      	ldrb	r3, [r3, #0]
    a7cc:	461a      	mov	r2, r3
    a7ce:	f240 5374 	movw	r3, #1396	; 0x574
    a7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7d6:	7899      	ldrb	r1, [r3, #2]
    a7d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e0:	5499      	strb	r1, [r3, r2]
    a7e2:	4b20      	ldr	r3, [pc, #128]	; (a864 <send_desired+0xc60>)
    a7e4:	781a      	ldrb	r2, [r3, #0]
    a7e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ee:	781b      	ldrb	r3, [r3, #0]
    a7f0:	4413      	add	r3, r2
    a7f2:	b2da      	uxtb	r2, r3
    a7f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7fc:	701a      	strb	r2, [r3, #0]
    a7fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a806:	781a      	ldrb	r2, [r3, #0]
    a808:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a810:	781b      	ldrb	r3, [r3, #0]
    a812:	4413      	add	r3, r2
    a814:	b2da      	uxtb	r2, r3
    a816:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a81e:	701a      	strb	r2, [r3, #0]
    a820:	f24c 3319 	movw	r3, #49945	; 0xc319
    a824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a828:	781b      	ldrb	r3, [r3, #0]
    a82a:	3301      	adds	r3, #1
    a82c:	b2da      	uxtb	r2, r3
    a82e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a836:	701a      	strb	r2, [r3, #0]
    a838:	f24c 3319 	movw	r3, #49945	; 0xc319
    a83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a840:	781b      	ldrb	r3, [r3, #0]
    a842:	2bff      	cmp	r3, #255	; 0xff
    a844:	d110      	bne.n	a868 <send_desired+0xc64>
    a846:	f24c 3319 	movw	r3, #49945	; 0xc319
    a84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a84e:	2200      	movs	r2, #0
    a850:	701a      	strb	r2, [r3, #0]
    a852:	e009      	b.n	a868 <send_desired+0xc64>
    a854:	2004c695 	.word	0x2004c695
    a858:	2004c696 	.word	0x2004c696
    a85c:	2004c697 	.word	0x2004c697
    a860:	20000575 	.word	0x20000575
    a864:	20000576 	.word	0x20000576
    a868:	f24c 3319 	movw	r3, #49945	; 0xc319
    a86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a870:	781b      	ldrb	r3, [r3, #0]
    a872:	461a      	mov	r2, r3
    a874:	f240 5374 	movw	r3, #1396	; 0x574
    a878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a87c:	78d9      	ldrb	r1, [r3, #3]
    a87e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a886:	5499      	strb	r1, [r3, r2]
    a888:	4b79      	ldr	r3, [pc, #484]	; (aa70 <send_desired+0xe6c>)
    a88a:	781a      	ldrb	r2, [r3, #0]
    a88c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a894:	781b      	ldrb	r3, [r3, #0]
    a896:	4413      	add	r3, r2
    a898:	b2da      	uxtb	r2, r3
    a89a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a2:	701a      	strb	r2, [r3, #0]
    a8a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ac:	781a      	ldrb	r2, [r3, #0]
    a8ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b6:	781b      	ldrb	r3, [r3, #0]
    a8b8:	4413      	add	r3, r2
    a8ba:	b2da      	uxtb	r2, r3
    a8bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c4:	701a      	strb	r2, [r3, #0]
    a8c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ce:	781b      	ldrb	r3, [r3, #0]
    a8d0:	3301      	adds	r3, #1
    a8d2:	b2da      	uxtb	r2, r3
    a8d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8dc:	701a      	strb	r2, [r3, #0]
    a8de:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e6:	781b      	ldrb	r3, [r3, #0]
    a8e8:	2bff      	cmp	r3, #255	; 0xff
    a8ea:	d105      	bne.n	a8f8 <send_desired+0xcf4>
    a8ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f4:	2200      	movs	r2, #0
    a8f6:	701a      	strb	r2, [r3, #0]
    a8f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a900:	781b      	ldrb	r3, [r3, #0]
    a902:	461a      	mov	r2, r3
    a904:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a90c:	7819      	ldrb	r1, [r3, #0]
    a90e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a916:	5499      	strb	r1, [r3, r2]
    a918:	f24c 3319 	movw	r3, #49945	; 0xc319
    a91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a920:	781b      	ldrb	r3, [r3, #0]
    a922:	3301      	adds	r3, #1
    a924:	b2da      	uxtb	r2, r3
    a926:	f24c 3319 	movw	r3, #49945	; 0xc319
    a92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a92e:	701a      	strb	r2, [r3, #0]
    a930:	f24c 3319 	movw	r3, #49945	; 0xc319
    a934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a938:	781b      	ldrb	r3, [r3, #0]
    a93a:	2bff      	cmp	r3, #255	; 0xff
    a93c:	d105      	bne.n	a94a <send_desired+0xd46>
    a93e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a946:	2200      	movs	r2, #0
    a948:	701a      	strb	r2, [r3, #0]
    a94a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a952:	781b      	ldrb	r3, [r3, #0]
    a954:	461a      	mov	r2, r3
    a956:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a95e:	7819      	ldrb	r1, [r3, #0]
    a960:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a968:	5499      	strb	r1, [r3, r2]
    a96a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a972:	781b      	ldrb	r3, [r3, #0]
    a974:	3301      	adds	r3, #1
    a976:	b2da      	uxtb	r2, r3
    a978:	f24c 3319 	movw	r3, #49945	; 0xc319
    a97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a980:	701a      	strb	r2, [r3, #0]
    a982:	f24c 3319 	movw	r3, #49945	; 0xc319
    a986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a98a:	781b      	ldrb	r3, [r3, #0]
    a98c:	2bff      	cmp	r3, #255	; 0xff
    a98e:	d105      	bne.n	a99c <send_desired+0xd98>
    a990:	f24c 3319 	movw	r3, #49945	; 0xc319
    a994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a998:	2200      	movs	r2, #0
    a99a:	701a      	strb	r2, [r3, #0]
    a99c:	f242 0339 	movw	r3, #8249	; 0x2039
    a9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a4:	781b      	ldrb	r3, [r3, #0]
    a9a6:	b2db      	uxtb	r3, r3
    a9a8:	f003 0310 	and.w	r3, r3, #16
    a9ac:	2b00      	cmp	r3, #0
    a9ae:	d15a      	bne.n	aa66 <send_desired+0xe62>
    a9b0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    a9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b8:	781b      	ldrb	r3, [r3, #0]
    a9ba:	b2db      	uxtb	r3, r3
    a9bc:	461a      	mov	r2, r3
    a9be:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c6:	5c9a      	ldrb	r2, [r3, r2]
    a9c8:	f24c 431b 	movw	r3, #50203	; 0xc41b
    a9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d0:	701a      	strb	r2, [r3, #0]
    a9d2:	f24c 431c 	movw	r3, #50204	; 0xc41c
    a9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9da:	2200      	movs	r2, #0
    a9dc:	701a      	strb	r2, [r3, #0]
    a9de:	f24c 331a 	movw	r3, #49946	; 0xc31a
    a9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e6:	781b      	ldrb	r3, [r3, #0]
    a9e8:	b2db      	uxtb	r3, r3
    a9ea:	3301      	adds	r3, #1
    a9ec:	b2da      	uxtb	r2, r3
    a9ee:	f24c 331a 	movw	r3, #49946	; 0xc31a
    a9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f6:	701a      	strb	r2, [r3, #0]
    a9f8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    a9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa00:	781b      	ldrb	r3, [r3, #0]
    aa02:	b2db      	uxtb	r3, r3
    aa04:	2bff      	cmp	r3, #255	; 0xff
    aa06:	d105      	bne.n	aa14 <send_desired+0xe10>
    aa08:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aa0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa10:	2200      	movs	r2, #0
    aa12:	701a      	strb	r2, [r3, #0]
    aa14:	f242 0338 	movw	r3, #8248	; 0x2038
    aa18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa1c:	f242 0238 	movw	r2, #8248	; 0x2038
    aa20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aa24:	7812      	ldrb	r2, [r2, #0]
    aa26:	b2d2      	uxtb	r2, r2
    aa28:	f042 0201 	orr.w	r2, r2, #1
    aa2c:	b2d2      	uxtb	r2, r2
    aa2e:	701a      	strb	r2, [r3, #0]
    aa30:	f242 0339 	movw	r3, #8249	; 0x2039
    aa34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa38:	f242 0239 	movw	r2, #8249	; 0x2039
    aa3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aa40:	7812      	ldrb	r2, [r2, #0]
    aa42:	b2d2      	uxtb	r2, r2
    aa44:	f042 0210 	orr.w	r2, r2, #16
    aa48:	b2d2      	uxtb	r2, r2
    aa4a:	701a      	strb	r2, [r3, #0]
    aa4c:	e00b      	b.n	aa66 <send_desired+0xe62>
    aa4e:	f24c 3318 	movw	r3, #49944	; 0xc318
    aa52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa56:	781b      	ldrb	r3, [r3, #0]
    aa58:	3301      	adds	r3, #1
    aa5a:	b2da      	uxtb	r2, r3
    aa5c:	f24c 3318 	movw	r3, #49944	; 0xc318
    aa60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa64:	701a      	strb	r2, [r3, #0]
}
    aa66:	46bd      	mov	sp, r7
    aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa6c:	4770      	bx	lr
    aa6e:	bf00      	nop
    aa70:	20000577 	.word	0x20000577

0000aa74 <send_bat>:
void send_bat(void){  //2000ms
    aa74:	b480      	push	{r7}
    aa76:	af00      	add	r7, sp, #0
  if(!boot)
    aa78:	f240 533d 	movw	r3, #1341	; 0x53d
    aa7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa80:	781b      	ldrb	r3, [r3, #0]
    aa82:	2b00      	cmp	r3, #0
    aa84:	f040 83af 	bne.w	b1e6 <send_bat+0x772>
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    aa88:	f24c 3311 	movw	r3, #49937	; 0xc311
    aa8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa90:	781a      	ldrb	r2, [r3, #0]
    aa92:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    aa96:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    aa9a:	fba3 1302 	umull	r1, r3, r3, r2
    aa9e:	0919      	lsrs	r1, r3, #4
    aaa0:	460b      	mov	r3, r1
    aaa2:	009b      	lsls	r3, r3, #2
    aaa4:	440b      	add	r3, r1
    aaa6:	009b      	lsls	r3, r3, #2
    aaa8:	1ad3      	subs	r3, r2, r3
    aaaa:	b2db      	uxtb	r3, r3
    aaac:	2b08      	cmp	r3, #8
    aaae:	f040 839a 	bne.w	b1e6 <send_bat+0x772>
    aab2:	f24c 3319 	movw	r3, #49945	; 0xc319
    aab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaba:	781a      	ldrb	r2, [r3, #0]
    aabc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac4:	781b      	ldrb	r3, [r3, #0]
    aac6:	b2db      	uxtb	r3, r3
    aac8:	429a      	cmp	r2, r3
    aaca:	d313      	bcc.n	aaf4 <send_bat+0x80>
    aacc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad4:	781b      	ldrb	r3, [r3, #0]
    aad6:	b2db      	uxtb	r3, r3
    aad8:	461a      	mov	r2, r3
    aada:	f24c 3319 	movw	r3, #49945	; 0xc319
    aade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae2:	781b      	ldrb	r3, [r3, #0]
    aae4:	1ad3      	subs	r3, r2, r3
    aae6:	33ff      	adds	r3, #255	; 0xff
    aae8:	2b0c      	cmp	r3, #12
    aaea:	bfd4      	ite	le
    aaec:	2300      	movle	r3, #0
    aaee:	2301      	movgt	r3, #1
    aaf0:	b2db      	uxtb	r3, r3
    aaf2:	e011      	b.n	ab18 <send_bat+0xa4>
    aaf4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aaf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aafc:	781b      	ldrb	r3, [r3, #0]
    aafe:	b2db      	uxtb	r3, r3
    ab00:	461a      	mov	r2, r3
    ab02:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab0a:	781b      	ldrb	r3, [r3, #0]
    ab0c:	1ad3      	subs	r3, r2, r3
    ab0e:	2b0c      	cmp	r3, #12
    ab10:	bfd4      	ite	le
    ab12:	2300      	movle	r3, #0
    ab14:	2301      	movgt	r3, #1
    ab16:	b2db      	uxtb	r3, r3
    ab18:	2b00      	cmp	r3, #0
    ab1a:	f000 8358 	beq.w	b1ce <send_bat+0x75a>
    ab1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab26:	781b      	ldrb	r3, [r3, #0]
    ab28:	461a      	mov	r2, r3
    ab2a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ab2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab32:	2105      	movs	r1, #5
    ab34:	5499      	strb	r1, [r3, r2]
    ab36:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab3e:	781b      	ldrb	r3, [r3, #0]
    ab40:	3301      	adds	r3, #1
    ab42:	b2da      	uxtb	r2, r3
    ab44:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab4c:	701a      	strb	r2, [r3, #0]
    ab4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab56:	781b      	ldrb	r3, [r3, #0]
    ab58:	2bff      	cmp	r3, #255	; 0xff
    ab5a:	d105      	bne.n	ab68 <send_bat+0xf4>
    ab5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab64:	2200      	movs	r2, #0
    ab66:	701a      	strb	r2, [r3, #0]
    ab68:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab70:	781b      	ldrb	r3, [r3, #0]
    ab72:	461a      	mov	r2, r3
    ab74:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ab78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab7c:	210c      	movs	r1, #12
    ab7e:	5499      	strb	r1, [r3, r2]
    ab80:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab88:	781b      	ldrb	r3, [r3, #0]
    ab8a:	3301      	adds	r3, #1
    ab8c:	b2da      	uxtb	r2, r3
    ab8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab96:	701a      	strb	r2, [r3, #0]
    ab98:	f24c 3319 	movw	r3, #49945	; 0xc319
    ab9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba0:	781b      	ldrb	r3, [r3, #0]
    aba2:	2bff      	cmp	r3, #255	; 0xff
    aba4:	d105      	bne.n	abb2 <send_bat+0x13e>
    aba6:	f24c 3319 	movw	r3, #49945	; 0xc319
    abaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abae:	2200      	movs	r2, #0
    abb0:	701a      	strb	r2, [r3, #0]
    abb2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    abb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abba:	220c      	movs	r2, #12
    abbc:	701a      	strb	r2, [r3, #0]
    abbe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    abc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc6:	220c      	movs	r2, #12
    abc8:	701a      	strb	r2, [r3, #0]
    abca:	f24c 3319 	movw	r3, #49945	; 0xc319
    abce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd2:	781b      	ldrb	r3, [r3, #0]
    abd4:	461a      	mov	r2, r3
    abd6:	f24c 3302 	movw	r3, #49922	; 0xc302
    abda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abde:	7819      	ldrb	r1, [r3, #0]
    abe0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    abe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe8:	5499      	strb	r1, [r3, r2]
    abea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    abee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf2:	781a      	ldrb	r2, [r3, #0]
    abf4:	f24c 3302 	movw	r3, #49922	; 0xc302
    abf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfc:	781b      	ldrb	r3, [r3, #0]
    abfe:	4413      	add	r3, r2
    ac00:	b2da      	uxtb	r2, r3
    ac02:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0a:	701a      	strb	r2, [r3, #0]
    ac0c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ac10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac14:	781a      	ldrb	r2, [r3, #0]
    ac16:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1e:	781b      	ldrb	r3, [r3, #0]
    ac20:	4413      	add	r3, r2
    ac22:	b2da      	uxtb	r2, r3
    ac24:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ac28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac2c:	701a      	strb	r2, [r3, #0]
    ac2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac36:	781b      	ldrb	r3, [r3, #0]
    ac38:	3301      	adds	r3, #1
    ac3a:	b2da      	uxtb	r2, r3
    ac3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac44:	701a      	strb	r2, [r3, #0]
    ac46:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac4e:	781b      	ldrb	r3, [r3, #0]
    ac50:	2bff      	cmp	r3, #255	; 0xff
    ac52:	d105      	bne.n	ac60 <send_bat+0x1ec>
    ac54:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5c:	2200      	movs	r2, #0
    ac5e:	701a      	strb	r2, [r3, #0]
    ac60:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac68:	781b      	ldrb	r3, [r3, #0]
    ac6a:	461a      	mov	r2, r3
    ac6c:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ac70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac74:	7819      	ldrb	r1, [r3, #0]
    ac76:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ac7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac7e:	5499      	strb	r1, [r3, r2]
    ac80:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ac84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac88:	781a      	ldrb	r2, [r3, #0]
    ac8a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac92:	781b      	ldrb	r3, [r3, #0]
    ac94:	4413      	add	r3, r2
    ac96:	b2da      	uxtb	r2, r3
    ac98:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ac9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca0:	701a      	strb	r2, [r3, #0]
    aca2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acaa:	781a      	ldrb	r2, [r3, #0]
    acac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    acb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb4:	781b      	ldrb	r3, [r3, #0]
    acb6:	4413      	add	r3, r2
    acb8:	b2da      	uxtb	r2, r3
    acba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    acbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc2:	701a      	strb	r2, [r3, #0]
    acc4:	f24c 3319 	movw	r3, #49945	; 0xc319
    acc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    accc:	781b      	ldrb	r3, [r3, #0]
    acce:	3301      	adds	r3, #1
    acd0:	b2da      	uxtb	r2, r3
    acd2:	f24c 3319 	movw	r3, #49945	; 0xc319
    acd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acda:	701a      	strb	r2, [r3, #0]
    acdc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ace0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace4:	781b      	ldrb	r3, [r3, #0]
    ace6:	2bff      	cmp	r3, #255	; 0xff
    ace8:	d105      	bne.n	acf6 <send_bat+0x282>
    acea:	f24c 3319 	movw	r3, #49945	; 0xc319
    acee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf2:	2200      	movs	r2, #0
    acf4:	701a      	strb	r2, [r3, #0]
    acf6:	f24c 3319 	movw	r3, #49945	; 0xc319
    acfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acfe:	781b      	ldrb	r3, [r3, #0]
    ad00:	461a      	mov	r2, r3
    ad02:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ad06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0a:	7859      	ldrb	r1, [r3, #1]
    ad0c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ad10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad14:	5499      	strb	r1, [r3, r2]
    ad16:	4bd5      	ldr	r3, [pc, #852]	; (b06c <send_bat+0x5f8>)
    ad18:	781a      	ldrb	r2, [r3, #0]
    ad1a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad22:	781b      	ldrb	r3, [r3, #0]
    ad24:	4413      	add	r3, r2
    ad26:	b2da      	uxtb	r2, r3
    ad28:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad30:	701a      	strb	r2, [r3, #0]
    ad32:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3a:	781a      	ldrb	r2, [r3, #0]
    ad3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad44:	781b      	ldrb	r3, [r3, #0]
    ad46:	4413      	add	r3, r2
    ad48:	b2da      	uxtb	r2, r3
    ad4a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad52:	701a      	strb	r2, [r3, #0]
    ad54:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad5c:	781b      	ldrb	r3, [r3, #0]
    ad5e:	3301      	adds	r3, #1
    ad60:	b2da      	uxtb	r2, r3
    ad62:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6a:	701a      	strb	r2, [r3, #0]
    ad6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad74:	781b      	ldrb	r3, [r3, #0]
    ad76:	2bff      	cmp	r3, #255	; 0xff
    ad78:	d105      	bne.n	ad86 <send_bat+0x312>
    ad7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad82:	2200      	movs	r2, #0
    ad84:	701a      	strb	r2, [r3, #0]
    ad86:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8e:	781b      	ldrb	r3, [r3, #0]
    ad90:	461a      	mov	r2, r3
    ad92:	f24c 3305 	movw	r3, #49925	; 0xc305
    ad96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad9a:	7819      	ldrb	r1, [r3, #0]
    ad9c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ada0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada4:	5499      	strb	r1, [r3, r2]
    ada6:	f24c 3305 	movw	r3, #49925	; 0xc305
    adaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adae:	781a      	ldrb	r2, [r3, #0]
    adb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    adb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb8:	781b      	ldrb	r3, [r3, #0]
    adba:	4413      	add	r3, r2
    adbc:	b2da      	uxtb	r2, r3
    adbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    adc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc6:	701a      	strb	r2, [r3, #0]
    adc8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    adcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add0:	781a      	ldrb	r2, [r3, #0]
    add2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    add6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adda:	781b      	ldrb	r3, [r3, #0]
    addc:	4413      	add	r3, r2
    adde:	b2da      	uxtb	r2, r3
    ade0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ade4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade8:	701a      	strb	r2, [r3, #0]
    adea:	f24c 3319 	movw	r3, #49945	; 0xc319
    adee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf2:	781b      	ldrb	r3, [r3, #0]
    adf4:	3301      	adds	r3, #1
    adf6:	b2da      	uxtb	r2, r3
    adf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    adfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae00:	701a      	strb	r2, [r3, #0]
    ae02:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae0a:	781b      	ldrb	r3, [r3, #0]
    ae0c:	2bff      	cmp	r3, #255	; 0xff
    ae0e:	d105      	bne.n	ae1c <send_bat+0x3a8>
    ae10:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae18:	2200      	movs	r2, #0
    ae1a:	701a      	strb	r2, [r3, #0]
    ae1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae24:	781b      	ldrb	r3, [r3, #0]
    ae26:	461a      	mov	r2, r3
    ae28:	f24c 6386 	movw	r3, #50822	; 0xc686
    ae2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae30:	7819      	ldrb	r1, [r3, #0]
    ae32:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ae36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae3a:	5499      	strb	r1, [r3, r2]
    ae3c:	f24c 6386 	movw	r3, #50822	; 0xc686
    ae40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae44:	781a      	ldrb	r2, [r3, #0]
    ae46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4e:	781b      	ldrb	r3, [r3, #0]
    ae50:	4413      	add	r3, r2
    ae52:	b2da      	uxtb	r2, r3
    ae54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5c:	701a      	strb	r2, [r3, #0]
    ae5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae66:	781a      	ldrb	r2, [r3, #0]
    ae68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae70:	781b      	ldrb	r3, [r3, #0]
    ae72:	4413      	add	r3, r2
    ae74:	b2da      	uxtb	r2, r3
    ae76:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7e:	701a      	strb	r2, [r3, #0]
    ae80:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae88:	781b      	ldrb	r3, [r3, #0]
    ae8a:	3301      	adds	r3, #1
    ae8c:	b2da      	uxtb	r2, r3
    ae8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae96:	701a      	strb	r2, [r3, #0]
    ae98:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea0:	781b      	ldrb	r3, [r3, #0]
    aea2:	2bff      	cmp	r3, #255	; 0xff
    aea4:	d105      	bne.n	aeb2 <send_bat+0x43e>
    aea6:	f24c 3319 	movw	r3, #49945	; 0xc319
    aeaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeae:	2200      	movs	r2, #0
    aeb0:	701a      	strb	r2, [r3, #0]
    aeb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    aeb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeba:	781b      	ldrb	r3, [r3, #0]
    aebc:	461a      	mov	r2, r3
    aebe:	f24c 6386 	movw	r3, #50822	; 0xc686
    aec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec6:	7859      	ldrb	r1, [r3, #1]
    aec8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed0:	5499      	strb	r1, [r3, r2]
    aed2:	4b67      	ldr	r3, [pc, #412]	; (b070 <send_bat+0x5fc>)
    aed4:	781a      	ldrb	r2, [r3, #0]
    aed6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aeda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aede:	781b      	ldrb	r3, [r3, #0]
    aee0:	4413      	add	r3, r2
    aee2:	b2da      	uxtb	r2, r3
    aee4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeec:	701a      	strb	r2, [r3, #0]
    aeee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef6:	781a      	ldrb	r2, [r3, #0]
    aef8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af00:	781b      	ldrb	r3, [r3, #0]
    af02:	4413      	add	r3, r2
    af04:	b2da      	uxtb	r2, r3
    af06:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af0e:	701a      	strb	r2, [r3, #0]
    af10:	f24c 3319 	movw	r3, #49945	; 0xc319
    af14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af18:	781b      	ldrb	r3, [r3, #0]
    af1a:	3301      	adds	r3, #1
    af1c:	b2da      	uxtb	r2, r3
    af1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    af22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af26:	701a      	strb	r2, [r3, #0]
    af28:	f24c 3319 	movw	r3, #49945	; 0xc319
    af2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af30:	781b      	ldrb	r3, [r3, #0]
    af32:	2bff      	cmp	r3, #255	; 0xff
    af34:	d105      	bne.n	af42 <send_bat+0x4ce>
    af36:	f24c 3319 	movw	r3, #49945	; 0xc319
    af3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af3e:	2200      	movs	r2, #0
    af40:	701a      	strb	r2, [r3, #0]
    af42:	f24c 3319 	movw	r3, #49945	; 0xc319
    af46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4a:	781b      	ldrb	r3, [r3, #0]
    af4c:	461a      	mov	r2, r3
    af4e:	f24c 6384 	movw	r3, #50820	; 0xc684
    af52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af56:	7819      	ldrb	r1, [r3, #0]
    af58:	f24c 331c 	movw	r3, #49948	; 0xc31c
    af5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af60:	5499      	strb	r1, [r3, r2]
    af62:	f24c 6384 	movw	r3, #50820	; 0xc684
    af66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af6a:	781a      	ldrb	r2, [r3, #0]
    af6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af74:	781b      	ldrb	r3, [r3, #0]
    af76:	4413      	add	r3, r2
    af78:	b2da      	uxtb	r2, r3
    af7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af82:	701a      	strb	r2, [r3, #0]
    af84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af8c:	781a      	ldrb	r2, [r3, #0]
    af8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af96:	781b      	ldrb	r3, [r3, #0]
    af98:	4413      	add	r3, r2
    af9a:	b2da      	uxtb	r2, r3
    af9c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    afa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa4:	701a      	strb	r2, [r3, #0]
    afa6:	f24c 3319 	movw	r3, #49945	; 0xc319
    afaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afae:	781b      	ldrb	r3, [r3, #0]
    afb0:	3301      	adds	r3, #1
    afb2:	b2da      	uxtb	r2, r3
    afb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    afb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbc:	701a      	strb	r2, [r3, #0]
    afbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    afc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc6:	781b      	ldrb	r3, [r3, #0]
    afc8:	2bff      	cmp	r3, #255	; 0xff
    afca:	d105      	bne.n	afd8 <send_bat+0x564>
    afcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    afd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd4:	2200      	movs	r2, #0
    afd6:	701a      	strb	r2, [r3, #0]
    afd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    afdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe0:	781b      	ldrb	r3, [r3, #0]
    afe2:	461a      	mov	r2, r3
    afe4:	f24c 6384 	movw	r3, #50820	; 0xc684
    afe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afec:	7859      	ldrb	r1, [r3, #1]
    afee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff6:	5499      	strb	r1, [r3, r2]
    aff8:	4b1e      	ldr	r3, [pc, #120]	; (b074 <send_bat+0x600>)
    affa:	781a      	ldrb	r2, [r3, #0]
    affc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b004:	781b      	ldrb	r3, [r3, #0]
    b006:	4413      	add	r3, r2
    b008:	b2da      	uxtb	r2, r3
    b00a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b012:	701a      	strb	r2, [r3, #0]
    b014:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01c:	781a      	ldrb	r2, [r3, #0]
    b01e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b026:	781b      	ldrb	r3, [r3, #0]
    b028:	4413      	add	r3, r2
    b02a:	b2da      	uxtb	r2, r3
    b02c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b034:	701a      	strb	r2, [r3, #0]
    b036:	f24c 3319 	movw	r3, #49945	; 0xc319
    b03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b03e:	781b      	ldrb	r3, [r3, #0]
    b040:	3301      	adds	r3, #1
    b042:	b2da      	uxtb	r2, r3
    b044:	f24c 3319 	movw	r3, #49945	; 0xc319
    b048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04c:	701a      	strb	r2, [r3, #0]
    b04e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b056:	781b      	ldrb	r3, [r3, #0]
    b058:	2bff      	cmp	r3, #255	; 0xff
    b05a:	d10d      	bne.n	b078 <send_bat+0x604>
    b05c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b064:	2200      	movs	r2, #0
    b066:	701a      	strb	r2, [r3, #0]
    b068:	e006      	b.n	b078 <send_bat+0x604>
    b06a:	bf00      	nop
    b06c:	2004c8fd 	.word	0x2004c8fd
    b070:	2004c687 	.word	0x2004c687
    b074:	2004c685 	.word	0x2004c685
    b078:	f24c 3319 	movw	r3, #49945	; 0xc319
    b07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b080:	781b      	ldrb	r3, [r3, #0]
    b082:	461a      	mov	r2, r3
    b084:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b08c:	7819      	ldrb	r1, [r3, #0]
    b08e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b096:	5499      	strb	r1, [r3, r2]
    b098:	f24c 3319 	movw	r3, #49945	; 0xc319
    b09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a0:	781b      	ldrb	r3, [r3, #0]
    b0a2:	3301      	adds	r3, #1
    b0a4:	b2da      	uxtb	r2, r3
    b0a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ae:	701a      	strb	r2, [r3, #0]
    b0b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b8:	781b      	ldrb	r3, [r3, #0]
    b0ba:	2bff      	cmp	r3, #255	; 0xff
    b0bc:	d105      	bne.n	b0ca <send_bat+0x656>
    b0be:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c6:	2200      	movs	r2, #0
    b0c8:	701a      	strb	r2, [r3, #0]
    b0ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d2:	781b      	ldrb	r3, [r3, #0]
    b0d4:	461a      	mov	r2, r3
    b0d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0de:	7819      	ldrb	r1, [r3, #0]
    b0e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e8:	5499      	strb	r1, [r3, r2]
    b0ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f2:	781b      	ldrb	r3, [r3, #0]
    b0f4:	3301      	adds	r3, #1
    b0f6:	b2da      	uxtb	r2, r3
    b0f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b100:	701a      	strb	r2, [r3, #0]
    b102:	f24c 3319 	movw	r3, #49945	; 0xc319
    b106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b10a:	781b      	ldrb	r3, [r3, #0]
    b10c:	2bff      	cmp	r3, #255	; 0xff
    b10e:	d105      	bne.n	b11c <send_bat+0x6a8>
    b110:	f24c 3319 	movw	r3, #49945	; 0xc319
    b114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b118:	2200      	movs	r2, #0
    b11a:	701a      	strb	r2, [r3, #0]
    b11c:	f242 0339 	movw	r3, #8249	; 0x2039
    b120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b124:	781b      	ldrb	r3, [r3, #0]
    b126:	b2db      	uxtb	r3, r3
    b128:	f003 0310 	and.w	r3, r3, #16
    b12c:	2b00      	cmp	r3, #0
    b12e:	d15a      	bne.n	b1e6 <send_bat+0x772>
    b130:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b138:	781b      	ldrb	r3, [r3, #0]
    b13a:	b2db      	uxtb	r3, r3
    b13c:	461a      	mov	r2, r3
    b13e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b146:	5c9a      	ldrb	r2, [r3, r2]
    b148:	f24c 431b 	movw	r3, #50203	; 0xc41b
    b14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b150:	701a      	strb	r2, [r3, #0]
    b152:	f24c 431c 	movw	r3, #50204	; 0xc41c
    b156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b15a:	2200      	movs	r2, #0
    b15c:	701a      	strb	r2, [r3, #0]
    b15e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b166:	781b      	ldrb	r3, [r3, #0]
    b168:	b2db      	uxtb	r3, r3
    b16a:	3301      	adds	r3, #1
    b16c:	b2da      	uxtb	r2, r3
    b16e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b176:	701a      	strb	r2, [r3, #0]
    b178:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b180:	781b      	ldrb	r3, [r3, #0]
    b182:	b2db      	uxtb	r3, r3
    b184:	2bff      	cmp	r3, #255	; 0xff
    b186:	d105      	bne.n	b194 <send_bat+0x720>
    b188:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b190:	2200      	movs	r2, #0
    b192:	701a      	strb	r2, [r3, #0]
    b194:	f242 0338 	movw	r3, #8248	; 0x2038
    b198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b19c:	f242 0238 	movw	r2, #8248	; 0x2038
    b1a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b1a4:	7812      	ldrb	r2, [r2, #0]
    b1a6:	b2d2      	uxtb	r2, r2
    b1a8:	f042 0201 	orr.w	r2, r2, #1
    b1ac:	b2d2      	uxtb	r2, r2
    b1ae:	701a      	strb	r2, [r3, #0]
    b1b0:	f242 0339 	movw	r3, #8249	; 0x2039
    b1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b8:	f242 0239 	movw	r2, #8249	; 0x2039
    b1bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b1c0:	7812      	ldrb	r2, [r2, #0]
    b1c2:	b2d2      	uxtb	r2, r2
    b1c4:	f042 0210 	orr.w	r2, r2, #16
    b1c8:	b2d2      	uxtb	r2, r2
    b1ca:	701a      	strb	r2, [r3, #0]
    b1cc:	e00b      	b.n	b1e6 <send_bat+0x772>
    b1ce:	f24c 3318 	movw	r3, #49944	; 0xc318
    b1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d6:	781b      	ldrb	r3, [r3, #0]
    b1d8:	3301      	adds	r3, #1
    b1da:	b2da      	uxtb	r2, r3
    b1dc:	f24c 3318 	movw	r3, #49944	; 0xc318
    b1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e4:	701a      	strb	r2, [r3, #0]
}
    b1e6:	46bd      	mov	sp, r7
    b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1ec:	4770      	bx	lr
    b1ee:	bf00      	nop

0000b1f0 <send_climb>:
void send_climb(void){  //2000ms
    b1f0:	b480      	push	{r7}
    b1f2:	af00      	add	r7, sp, #0
  if(!boot)
    b1f4:	f240 533d 	movw	r3, #1341	; 0x53d
    b1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1fc:	781b      	ldrb	r3, [r3, #0]
    b1fe:	2b00      	cmp	r3, #0
    b200:	f040 8569 	bne.w	bcd6 <send_climb+0xae6>
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b204:	f24c 3311 	movw	r3, #49937	; 0xc311
    b208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b20c:	781a      	ldrb	r2, [r3, #0]
    b20e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b212:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b216:	fba3 1302 	umull	r1, r3, r3, r2
    b21a:	0919      	lsrs	r1, r3, #4
    b21c:	460b      	mov	r3, r1
    b21e:	009b      	lsls	r3, r3, #2
    b220:	440b      	add	r3, r1
    b222:	009b      	lsls	r3, r3, #2
    b224:	1ad3      	subs	r3, r2, r3
    b226:	b2db      	uxtb	r3, r3
    b228:	2b12      	cmp	r3, #18
    b22a:	f040 8554 	bne.w	bcd6 <send_climb+0xae6>
    b22e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b236:	781a      	ldrb	r2, [r3, #0]
    b238:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b240:	781b      	ldrb	r3, [r3, #0]
    b242:	b2db      	uxtb	r3, r3
    b244:	429a      	cmp	r2, r3
    b246:	d313      	bcc.n	b270 <send_climb+0x80>
    b248:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b250:	781b      	ldrb	r3, [r3, #0]
    b252:	b2db      	uxtb	r3, r3
    b254:	461a      	mov	r2, r3
    b256:	f24c 3319 	movw	r3, #49945	; 0xc319
    b25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b25e:	781b      	ldrb	r3, [r3, #0]
    b260:	1ad3      	subs	r3, r2, r3
    b262:	33ff      	adds	r3, #255	; 0xff
    b264:	2b12      	cmp	r3, #18
    b266:	bfd4      	ite	le
    b268:	2300      	movle	r3, #0
    b26a:	2301      	movgt	r3, #1
    b26c:	b2db      	uxtb	r3, r3
    b26e:	e011      	b.n	b294 <send_climb+0xa4>
    b270:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b278:	781b      	ldrb	r3, [r3, #0]
    b27a:	b2db      	uxtb	r3, r3
    b27c:	461a      	mov	r2, r3
    b27e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b286:	781b      	ldrb	r3, [r3, #0]
    b288:	1ad3      	subs	r3, r2, r3
    b28a:	2b12      	cmp	r3, #18
    b28c:	bfd4      	ite	le
    b28e:	2300      	movle	r3, #0
    b290:	2301      	movgt	r3, #1
    b292:	b2db      	uxtb	r3, r3
    b294:	2b00      	cmp	r3, #0
    b296:	f000 8512 	beq.w	bcbe <send_climb+0xace>
    b29a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a2:	781b      	ldrb	r3, [r3, #0]
    b2a4:	461a      	mov	r2, r3
    b2a6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ae:	2105      	movs	r1, #5
    b2b0:	5499      	strb	r1, [r3, r2]
    b2b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ba:	781b      	ldrb	r3, [r3, #0]
    b2bc:	3301      	adds	r3, #1
    b2be:	b2da      	uxtb	r2, r3
    b2c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c8:	701a      	strb	r2, [r3, #0]
    b2ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d2:	781b      	ldrb	r3, [r3, #0]
    b2d4:	2bff      	cmp	r3, #255	; 0xff
    b2d6:	d105      	bne.n	b2e4 <send_climb+0xf4>
    b2d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e0:	2200      	movs	r2, #0
    b2e2:	701a      	strb	r2, [r3, #0]
    b2e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    b2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ec:	781b      	ldrb	r3, [r3, #0]
    b2ee:	461a      	mov	r2, r3
    b2f0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f8:	210e      	movs	r1, #14
    b2fa:	5499      	strb	r1, [r3, r2]
    b2fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    b300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b304:	781b      	ldrb	r3, [r3, #0]
    b306:	3301      	adds	r3, #1
    b308:	b2da      	uxtb	r2, r3
    b30a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b312:	701a      	strb	r2, [r3, #0]
    b314:	f24c 3319 	movw	r3, #49945	; 0xc319
    b318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b31c:	781b      	ldrb	r3, [r3, #0]
    b31e:	2bff      	cmp	r3, #255	; 0xff
    b320:	d105      	bne.n	b32e <send_climb+0x13e>
    b322:	f24c 3319 	movw	r3, #49945	; 0xc319
    b326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b32a:	2200      	movs	r2, #0
    b32c:	701a      	strb	r2, [r3, #0]
    b32e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b336:	220e      	movs	r2, #14
    b338:	701a      	strb	r2, [r3, #0]
    b33a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b342:	220e      	movs	r2, #14
    b344:	701a      	strb	r2, [r3, #0]
    b346:	f24c 3319 	movw	r3, #49945	; 0xc319
    b34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b34e:	781b      	ldrb	r3, [r3, #0]
    b350:	461a      	mov	r2, r3
    b352:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35a:	7819      	ldrb	r1, [r3, #0]
    b35c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b364:	5499      	strb	r1, [r3, r2]
    b366:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b36e:	781a      	ldrb	r2, [r3, #0]
    b370:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b378:	781b      	ldrb	r3, [r3, #0]
    b37a:	4413      	add	r3, r2
    b37c:	b2da      	uxtb	r2, r3
    b37e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b386:	701a      	strb	r2, [r3, #0]
    b388:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b390:	781a      	ldrb	r2, [r3, #0]
    b392:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39a:	781b      	ldrb	r3, [r3, #0]
    b39c:	4413      	add	r3, r2
    b39e:	b2da      	uxtb	r2, r3
    b3a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a8:	701a      	strb	r2, [r3, #0]
    b3aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b2:	781b      	ldrb	r3, [r3, #0]
    b3b4:	3301      	adds	r3, #1
    b3b6:	b2da      	uxtb	r2, r3
    b3b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c0:	701a      	strb	r2, [r3, #0]
    b3c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ca:	781b      	ldrb	r3, [r3, #0]
    b3cc:	2bff      	cmp	r3, #255	; 0xff
    b3ce:	d105      	bne.n	b3dc <send_climb+0x1ec>
    b3d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d8:	2200      	movs	r2, #0
    b3da:	701a      	strb	r2, [r3, #0]
    b3dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e4:	781b      	ldrb	r3, [r3, #0]
    b3e6:	461a      	mov	r2, r3
    b3e8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f0:	7859      	ldrb	r1, [r3, #1]
    b3f2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3fa:	5499      	strb	r1, [r3, r2]
    b3fc:	4bd3      	ldr	r3, [pc, #844]	; (b74c <send_climb+0x55c>)
    b3fe:	781a      	ldrb	r2, [r3, #0]
    b400:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b408:	781b      	ldrb	r3, [r3, #0]
    b40a:	4413      	add	r3, r2
    b40c:	b2da      	uxtb	r2, r3
    b40e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b416:	701a      	strb	r2, [r3, #0]
    b418:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b420:	781a      	ldrb	r2, [r3, #0]
    b422:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b42a:	781b      	ldrb	r3, [r3, #0]
    b42c:	4413      	add	r3, r2
    b42e:	b2da      	uxtb	r2, r3
    b430:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b438:	701a      	strb	r2, [r3, #0]
    b43a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b442:	781b      	ldrb	r3, [r3, #0]
    b444:	3301      	adds	r3, #1
    b446:	b2da      	uxtb	r2, r3
    b448:	f24c 3319 	movw	r3, #49945	; 0xc319
    b44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b450:	701a      	strb	r2, [r3, #0]
    b452:	f24c 3319 	movw	r3, #49945	; 0xc319
    b456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b45a:	781b      	ldrb	r3, [r3, #0]
    b45c:	2bff      	cmp	r3, #255	; 0xff
    b45e:	d105      	bne.n	b46c <send_climb+0x27c>
    b460:	f24c 3319 	movw	r3, #49945	; 0xc319
    b464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b468:	2200      	movs	r2, #0
    b46a:	701a      	strb	r2, [r3, #0]
    b46c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b474:	781b      	ldrb	r3, [r3, #0]
    b476:	461a      	mov	r2, r3
    b478:	f24c 6360 	movw	r3, #50784	; 0xc660
    b47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b480:	7819      	ldrb	r1, [r3, #0]
    b482:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b48a:	5499      	strb	r1, [r3, r2]
    b48c:	f24c 6360 	movw	r3, #50784	; 0xc660
    b490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b494:	781a      	ldrb	r2, [r3, #0]
    b496:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b49e:	781b      	ldrb	r3, [r3, #0]
    b4a0:	4413      	add	r3, r2
    b4a2:	b2da      	uxtb	r2, r3
    b4a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ac:	701a      	strb	r2, [r3, #0]
    b4ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b6:	781a      	ldrb	r2, [r3, #0]
    b4b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c0:	781b      	ldrb	r3, [r3, #0]
    b4c2:	4413      	add	r3, r2
    b4c4:	b2da      	uxtb	r2, r3
    b4c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ce:	701a      	strb	r2, [r3, #0]
    b4d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d8:	781b      	ldrb	r3, [r3, #0]
    b4da:	3301      	adds	r3, #1
    b4dc:	b2da      	uxtb	r2, r3
    b4de:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e6:	701a      	strb	r2, [r3, #0]
    b4e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f0:	781b      	ldrb	r3, [r3, #0]
    b4f2:	2bff      	cmp	r3, #255	; 0xff
    b4f4:	d105      	bne.n	b502 <send_climb+0x312>
    b4f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fe:	2200      	movs	r2, #0
    b500:	701a      	strb	r2, [r3, #0]
    b502:	f24c 3319 	movw	r3, #49945	; 0xc319
    b506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b50a:	781b      	ldrb	r3, [r3, #0]
    b50c:	461a      	mov	r2, r3
    b50e:	f24c 6360 	movw	r3, #50784	; 0xc660
    b512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b516:	7859      	ldrb	r1, [r3, #1]
    b518:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b520:	5499      	strb	r1, [r3, r2]
    b522:	4b8b      	ldr	r3, [pc, #556]	; (b750 <send_climb+0x560>)
    b524:	781a      	ldrb	r2, [r3, #0]
    b526:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52e:	781b      	ldrb	r3, [r3, #0]
    b530:	4413      	add	r3, r2
    b532:	b2da      	uxtb	r2, r3
    b534:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b53c:	701a      	strb	r2, [r3, #0]
    b53e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b546:	781a      	ldrb	r2, [r3, #0]
    b548:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b550:	781b      	ldrb	r3, [r3, #0]
    b552:	4413      	add	r3, r2
    b554:	b2da      	uxtb	r2, r3
    b556:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55e:	701a      	strb	r2, [r3, #0]
    b560:	f24c 3319 	movw	r3, #49945	; 0xc319
    b564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b568:	781b      	ldrb	r3, [r3, #0]
    b56a:	3301      	adds	r3, #1
    b56c:	b2da      	uxtb	r2, r3
    b56e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b576:	701a      	strb	r2, [r3, #0]
    b578:	f24c 3319 	movw	r3, #49945	; 0xc319
    b57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b580:	781b      	ldrb	r3, [r3, #0]
    b582:	2bff      	cmp	r3, #255	; 0xff
    b584:	d105      	bne.n	b592 <send_climb+0x3a2>
    b586:	f24c 3319 	movw	r3, #49945	; 0xc319
    b58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b58e:	2200      	movs	r2, #0
    b590:	701a      	strb	r2, [r3, #0]
    b592:	f24c 3319 	movw	r3, #49945	; 0xc319
    b596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b59a:	781b      	ldrb	r3, [r3, #0]
    b59c:	461a      	mov	r2, r3
    b59e:	f24c 6360 	movw	r3, #50784	; 0xc660
    b5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a6:	7899      	ldrb	r1, [r3, #2]
    b5a8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b0:	5499      	strb	r1, [r3, r2]
    b5b2:	4b68      	ldr	r3, [pc, #416]	; (b754 <send_climb+0x564>)
    b5b4:	781a      	ldrb	r2, [r3, #0]
    b5b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5be:	781b      	ldrb	r3, [r3, #0]
    b5c0:	4413      	add	r3, r2
    b5c2:	b2da      	uxtb	r2, r3
    b5c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5cc:	701a      	strb	r2, [r3, #0]
    b5ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d6:	781a      	ldrb	r2, [r3, #0]
    b5d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e0:	781b      	ldrb	r3, [r3, #0]
    b5e2:	4413      	add	r3, r2
    b5e4:	b2da      	uxtb	r2, r3
    b5e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	701a      	strb	r2, [r3, #0]
    b5f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f8:	781b      	ldrb	r3, [r3, #0]
    b5fa:	3301      	adds	r3, #1
    b5fc:	b2da      	uxtb	r2, r3
    b5fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    b602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b606:	701a      	strb	r2, [r3, #0]
    b608:	f24c 3319 	movw	r3, #49945	; 0xc319
    b60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b610:	781b      	ldrb	r3, [r3, #0]
    b612:	2bff      	cmp	r3, #255	; 0xff
    b614:	d105      	bne.n	b622 <send_climb+0x432>
    b616:	f24c 3319 	movw	r3, #49945	; 0xc319
    b61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b61e:	2200      	movs	r2, #0
    b620:	701a      	strb	r2, [r3, #0]
    b622:	f24c 3319 	movw	r3, #49945	; 0xc319
    b626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b62a:	781b      	ldrb	r3, [r3, #0]
    b62c:	461a      	mov	r2, r3
    b62e:	f24c 6360 	movw	r3, #50784	; 0xc660
    b632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b636:	78d9      	ldrb	r1, [r3, #3]
    b638:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b640:	5499      	strb	r1, [r3, r2]
    b642:	4b45      	ldr	r3, [pc, #276]	; (b758 <send_climb+0x568>)
    b644:	781a      	ldrb	r2, [r3, #0]
    b646:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64e:	781b      	ldrb	r3, [r3, #0]
    b650:	4413      	add	r3, r2
    b652:	b2da      	uxtb	r2, r3
    b654:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b65c:	701a      	strb	r2, [r3, #0]
    b65e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b666:	781a      	ldrb	r2, [r3, #0]
    b668:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b670:	781b      	ldrb	r3, [r3, #0]
    b672:	4413      	add	r3, r2
    b674:	b2da      	uxtb	r2, r3
    b676:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b67e:	701a      	strb	r2, [r3, #0]
    b680:	f24c 3319 	movw	r3, #49945	; 0xc319
    b684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b688:	781b      	ldrb	r3, [r3, #0]
    b68a:	3301      	adds	r3, #1
    b68c:	b2da      	uxtb	r2, r3
    b68e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b696:	701a      	strb	r2, [r3, #0]
    b698:	f24c 3319 	movw	r3, #49945	; 0xc319
    b69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a0:	781b      	ldrb	r3, [r3, #0]
    b6a2:	2bff      	cmp	r3, #255	; 0xff
    b6a4:	d105      	bne.n	b6b2 <send_climb+0x4c2>
    b6a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ae:	2200      	movs	r2, #0
    b6b0:	701a      	strb	r2, [r3, #0]
    b6b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ba:	781b      	ldrb	r3, [r3, #0]
    b6bc:	461a      	mov	r2, r3
    b6be:	f24c 6368 	movw	r3, #50792	; 0xc668
    b6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c6:	7819      	ldrb	r1, [r3, #0]
    b6c8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d0:	5499      	strb	r1, [r3, r2]
    b6d2:	f24c 6368 	movw	r3, #50792	; 0xc668
    b6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6da:	781a      	ldrb	r2, [r3, #0]
    b6dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e4:	781b      	ldrb	r3, [r3, #0]
    b6e6:	4413      	add	r3, r2
    b6e8:	b2da      	uxtb	r2, r3
    b6ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f2:	701a      	strb	r2, [r3, #0]
    b6f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6fc:	781a      	ldrb	r2, [r3, #0]
    b6fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b706:	781b      	ldrb	r3, [r3, #0]
    b708:	4413      	add	r3, r2
    b70a:	b2da      	uxtb	r2, r3
    b70c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b714:	701a      	strb	r2, [r3, #0]
    b716:	f24c 3319 	movw	r3, #49945	; 0xc319
    b71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b71e:	781b      	ldrb	r3, [r3, #0]
    b720:	3301      	adds	r3, #1
    b722:	b2da      	uxtb	r2, r3
    b724:	f24c 3319 	movw	r3, #49945	; 0xc319
    b728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b72c:	701a      	strb	r2, [r3, #0]
    b72e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b736:	781b      	ldrb	r3, [r3, #0]
    b738:	2bff      	cmp	r3, #255	; 0xff
    b73a:	d10f      	bne.n	b75c <send_climb+0x56c>
    b73c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b744:	2200      	movs	r2, #0
    b746:	701a      	strb	r2, [r3, #0]
    b748:	e008      	b.n	b75c <send_climb+0x56c>
    b74a:	bf00      	nop
    b74c:	2004c64d 	.word	0x2004c64d
    b750:	2004c661 	.word	0x2004c661
    b754:	2004c662 	.word	0x2004c662
    b758:	2004c663 	.word	0x2004c663
    b75c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b764:	781b      	ldrb	r3, [r3, #0]
    b766:	461a      	mov	r2, r3
    b768:	f24c 6368 	movw	r3, #50792	; 0xc668
    b76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b770:	7859      	ldrb	r1, [r3, #1]
    b772:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b77a:	5499      	strb	r1, [r3, r2]
    b77c:	4bd1      	ldr	r3, [pc, #836]	; (bac4 <send_climb+0x8d4>)
    b77e:	781a      	ldrb	r2, [r3, #0]
    b780:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b788:	781b      	ldrb	r3, [r3, #0]
    b78a:	4413      	add	r3, r2
    b78c:	b2da      	uxtb	r2, r3
    b78e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b796:	701a      	strb	r2, [r3, #0]
    b798:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a0:	781a      	ldrb	r2, [r3, #0]
    b7a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b7a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7aa:	781b      	ldrb	r3, [r3, #0]
    b7ac:	4413      	add	r3, r2
    b7ae:	b2da      	uxtb	r2, r3
    b7b0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b8:	701a      	strb	r2, [r3, #0]
    b7ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c2:	781b      	ldrb	r3, [r3, #0]
    b7c4:	3301      	adds	r3, #1
    b7c6:	b2da      	uxtb	r2, r3
    b7c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d0:	701a      	strb	r2, [r3, #0]
    b7d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7da:	781b      	ldrb	r3, [r3, #0]
    b7dc:	2bff      	cmp	r3, #255	; 0xff
    b7de:	d105      	bne.n	b7ec <send_climb+0x5fc>
    b7e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e8:	2200      	movs	r2, #0
    b7ea:	701a      	strb	r2, [r3, #0]
    b7ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f4:	781b      	ldrb	r3, [r3, #0]
    b7f6:	461a      	mov	r2, r3
    b7f8:	f24c 6368 	movw	r3, #50792	; 0xc668
    b7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b800:	7899      	ldrb	r1, [r3, #2]
    b802:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80a:	5499      	strb	r1, [r3, r2]
    b80c:	4bae      	ldr	r3, [pc, #696]	; (bac8 <send_climb+0x8d8>)
    b80e:	781a      	ldrb	r2, [r3, #0]
    b810:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b818:	781b      	ldrb	r3, [r3, #0]
    b81a:	4413      	add	r3, r2
    b81c:	b2da      	uxtb	r2, r3
    b81e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b826:	701a      	strb	r2, [r3, #0]
    b828:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b830:	781a      	ldrb	r2, [r3, #0]
    b832:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83a:	781b      	ldrb	r3, [r3, #0]
    b83c:	4413      	add	r3, r2
    b83e:	b2da      	uxtb	r2, r3
    b840:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b848:	701a      	strb	r2, [r3, #0]
    b84a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b852:	781b      	ldrb	r3, [r3, #0]
    b854:	3301      	adds	r3, #1
    b856:	b2da      	uxtb	r2, r3
    b858:	f24c 3319 	movw	r3, #49945	; 0xc319
    b85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b860:	701a      	strb	r2, [r3, #0]
    b862:	f24c 3319 	movw	r3, #49945	; 0xc319
    b866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86a:	781b      	ldrb	r3, [r3, #0]
    b86c:	2bff      	cmp	r3, #255	; 0xff
    b86e:	d105      	bne.n	b87c <send_climb+0x68c>
    b870:	f24c 3319 	movw	r3, #49945	; 0xc319
    b874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b878:	2200      	movs	r2, #0
    b87a:	701a      	strb	r2, [r3, #0]
    b87c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b884:	781b      	ldrb	r3, [r3, #0]
    b886:	461a      	mov	r2, r3
    b888:	f24c 6368 	movw	r3, #50792	; 0xc668
    b88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b890:	78d9      	ldrb	r1, [r3, #3]
    b892:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b89a:	5499      	strb	r1, [r3, r2]
    b89c:	4b8b      	ldr	r3, [pc, #556]	; (bacc <send_climb+0x8dc>)
    b89e:	781a      	ldrb	r2, [r3, #0]
    b8a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a8:	781b      	ldrb	r3, [r3, #0]
    b8aa:	4413      	add	r3, r2
    b8ac:	b2da      	uxtb	r2, r3
    b8ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b6:	701a      	strb	r2, [r3, #0]
    b8b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c0:	781a      	ldrb	r2, [r3, #0]
    b8c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ca:	781b      	ldrb	r3, [r3, #0]
    b8cc:	4413      	add	r3, r2
    b8ce:	b2da      	uxtb	r2, r3
    b8d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d8:	701a      	strb	r2, [r3, #0]
    b8da:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e2:	781b      	ldrb	r3, [r3, #0]
    b8e4:	3301      	adds	r3, #1
    b8e6:	b2da      	uxtb	r2, r3
    b8e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f0:	701a      	strb	r2, [r3, #0]
    b8f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8fa:	781b      	ldrb	r3, [r3, #0]
    b8fc:	2bff      	cmp	r3, #255	; 0xff
    b8fe:	d105      	bne.n	b90c <send_climb+0x71c>
    b900:	f24c 3319 	movw	r3, #49945	; 0xc319
    b904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b908:	2200      	movs	r2, #0
    b90a:	701a      	strb	r2, [r3, #0]
    b90c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b914:	781b      	ldrb	r3, [r3, #0]
    b916:	461a      	mov	r2, r3
    b918:	f648 2344 	movw	r3, #35396	; 0x8a44
    b91c:	f2c0 0301 	movt	r3, #1
    b920:	7819      	ldrb	r1, [r3, #0]
    b922:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b92a:	5499      	strb	r1, [r3, r2]
    b92c:	f648 2344 	movw	r3, #35396	; 0x8a44
    b930:	f2c0 0301 	movt	r3, #1
    b934:	781a      	ldrb	r2, [r3, #0]
    b936:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b93e:	781b      	ldrb	r3, [r3, #0]
    b940:	4413      	add	r3, r2
    b942:	b2da      	uxtb	r2, r3
    b944:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b94c:	701a      	strb	r2, [r3, #0]
    b94e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b956:	781a      	ldrb	r2, [r3, #0]
    b958:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b960:	781b      	ldrb	r3, [r3, #0]
    b962:	4413      	add	r3, r2
    b964:	b2da      	uxtb	r2, r3
    b966:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b96e:	701a      	strb	r2, [r3, #0]
    b970:	f24c 3319 	movw	r3, #49945	; 0xc319
    b974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b978:	781b      	ldrb	r3, [r3, #0]
    b97a:	3301      	adds	r3, #1
    b97c:	b2da      	uxtb	r2, r3
    b97e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b986:	701a      	strb	r2, [r3, #0]
    b988:	f24c 3319 	movw	r3, #49945	; 0xc319
    b98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b990:	781b      	ldrb	r3, [r3, #0]
    b992:	2bff      	cmp	r3, #255	; 0xff
    b994:	d105      	bne.n	b9a2 <send_climb+0x7b2>
    b996:	f24c 3319 	movw	r3, #49945	; 0xc319
    b99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b99e:	2200      	movs	r2, #0
    b9a0:	701a      	strb	r2, [r3, #0]
    b9a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9aa:	781b      	ldrb	r3, [r3, #0]
    b9ac:	461a      	mov	r2, r3
    b9ae:	f648 2344 	movw	r3, #35396	; 0x8a44
    b9b2:	f2c0 0301 	movt	r3, #1
    b9b6:	7859      	ldrb	r1, [r3, #1]
    b9b8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c0:	5499      	strb	r1, [r3, r2]
    b9c2:	4b43      	ldr	r3, [pc, #268]	; (bad0 <send_climb+0x8e0>)
    b9c4:	781a      	ldrb	r2, [r3, #0]
    b9c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ce:	781b      	ldrb	r3, [r3, #0]
    b9d0:	4413      	add	r3, r2
    b9d2:	b2da      	uxtb	r2, r3
    b9d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9dc:	701a      	strb	r2, [r3, #0]
    b9de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e6:	781a      	ldrb	r2, [r3, #0]
    b9e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f0:	781b      	ldrb	r3, [r3, #0]
    b9f2:	4413      	add	r3, r2
    b9f4:	b2da      	uxtb	r2, r3
    b9f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9fe:	701a      	strb	r2, [r3, #0]
    ba00:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba08:	781b      	ldrb	r3, [r3, #0]
    ba0a:	3301      	adds	r3, #1
    ba0c:	b2da      	uxtb	r2, r3
    ba0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba16:	701a      	strb	r2, [r3, #0]
    ba18:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba20:	781b      	ldrb	r3, [r3, #0]
    ba22:	2bff      	cmp	r3, #255	; 0xff
    ba24:	d105      	bne.n	ba32 <send_climb+0x842>
    ba26:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba2e:	2200      	movs	r2, #0
    ba30:	701a      	strb	r2, [r3, #0]
    ba32:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba3a:	781b      	ldrb	r3, [r3, #0]
    ba3c:	461a      	mov	r2, r3
    ba3e:	f648 2344 	movw	r3, #35396	; 0x8a44
    ba42:	f2c0 0301 	movt	r3, #1
    ba46:	7899      	ldrb	r1, [r3, #2]
    ba48:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ba4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba50:	5499      	strb	r1, [r3, r2]
    ba52:	4b20      	ldr	r3, [pc, #128]	; (bad4 <send_climb+0x8e4>)
    ba54:	781a      	ldrb	r2, [r3, #0]
    ba56:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba5e:	781b      	ldrb	r3, [r3, #0]
    ba60:	4413      	add	r3, r2
    ba62:	b2da      	uxtb	r2, r3
    ba64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba6c:	701a      	strb	r2, [r3, #0]
    ba6e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba76:	781a      	ldrb	r2, [r3, #0]
    ba78:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba80:	781b      	ldrb	r3, [r3, #0]
    ba82:	4413      	add	r3, r2
    ba84:	b2da      	uxtb	r2, r3
    ba86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba8e:	701a      	strb	r2, [r3, #0]
    ba90:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba98:	781b      	ldrb	r3, [r3, #0]
    ba9a:	3301      	adds	r3, #1
    ba9c:	b2da      	uxtb	r2, r3
    ba9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    baa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa6:	701a      	strb	r2, [r3, #0]
    baa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    baac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab0:	781b      	ldrb	r3, [r3, #0]
    bab2:	2bff      	cmp	r3, #255	; 0xff
    bab4:	d110      	bne.n	bad8 <send_climb+0x8e8>
    bab6:	f24c 3319 	movw	r3, #49945	; 0xc319
    baba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    babe:	2200      	movs	r2, #0
    bac0:	701a      	strb	r2, [r3, #0]
    bac2:	e009      	b.n	bad8 <send_climb+0x8e8>
    bac4:	2004c669 	.word	0x2004c669
    bac8:	2004c66a 	.word	0x2004c66a
    bacc:	2004c66b 	.word	0x2004c66b
    bad0:	00018a45 	.word	0x00018a45
    bad4:	00018a46 	.word	0x00018a46
    bad8:	f24c 3319 	movw	r3, #49945	; 0xc319
    badc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae0:	781b      	ldrb	r3, [r3, #0]
    bae2:	461a      	mov	r2, r3
    bae4:	f648 2344 	movw	r3, #35396	; 0x8a44
    bae8:	f2c0 0301 	movt	r3, #1
    baec:	78d9      	ldrb	r1, [r3, #3]
    baee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    baf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf6:	5499      	strb	r1, [r3, r2]
    baf8:	4b79      	ldr	r3, [pc, #484]	; (bce0 <send_climb+0xaf0>)
    bafa:	781a      	ldrb	r2, [r3, #0]
    bafc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb04:	781b      	ldrb	r3, [r3, #0]
    bb06:	4413      	add	r3, r2
    bb08:	b2da      	uxtb	r2, r3
    bb0a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb12:	701a      	strb	r2, [r3, #0]
    bb14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb1c:	781a      	ldrb	r2, [r3, #0]
    bb1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb26:	781b      	ldrb	r3, [r3, #0]
    bb28:	4413      	add	r3, r2
    bb2a:	b2da      	uxtb	r2, r3
    bb2c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb34:	701a      	strb	r2, [r3, #0]
    bb36:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb3e:	781b      	ldrb	r3, [r3, #0]
    bb40:	3301      	adds	r3, #1
    bb42:	b2da      	uxtb	r2, r3
    bb44:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb4c:	701a      	strb	r2, [r3, #0]
    bb4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb56:	781b      	ldrb	r3, [r3, #0]
    bb58:	2bff      	cmp	r3, #255	; 0xff
    bb5a:	d105      	bne.n	bb68 <send_climb+0x978>
    bb5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb64:	2200      	movs	r2, #0
    bb66:	701a      	strb	r2, [r3, #0]
    bb68:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb70:	781b      	ldrb	r3, [r3, #0]
    bb72:	461a      	mov	r2, r3
    bb74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb7c:	7819      	ldrb	r1, [r3, #0]
    bb7e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb86:	5499      	strb	r1, [r3, r2]
    bb88:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb90:	781b      	ldrb	r3, [r3, #0]
    bb92:	3301      	adds	r3, #1
    bb94:	b2da      	uxtb	r2, r3
    bb96:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb9e:	701a      	strb	r2, [r3, #0]
    bba0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba8:	781b      	ldrb	r3, [r3, #0]
    bbaa:	2bff      	cmp	r3, #255	; 0xff
    bbac:	d105      	bne.n	bbba <send_climb+0x9ca>
    bbae:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb6:	2200      	movs	r2, #0
    bbb8:	701a      	strb	r2, [r3, #0]
    bbba:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc2:	781b      	ldrb	r3, [r3, #0]
    bbc4:	461a      	mov	r2, r3
    bbc6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbce:	7819      	ldrb	r1, [r3, #0]
    bbd0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd8:	5499      	strb	r1, [r3, r2]
    bbda:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe2:	781b      	ldrb	r3, [r3, #0]
    bbe4:	3301      	adds	r3, #1
    bbe6:	b2da      	uxtb	r2, r3
    bbe8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf0:	701a      	strb	r2, [r3, #0]
    bbf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbfa:	781b      	ldrb	r3, [r3, #0]
    bbfc:	2bff      	cmp	r3, #255	; 0xff
    bbfe:	d105      	bne.n	bc0c <send_climb+0xa1c>
    bc00:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc08:	2200      	movs	r2, #0
    bc0a:	701a      	strb	r2, [r3, #0]
    bc0c:	f242 0339 	movw	r3, #8249	; 0x2039
    bc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc14:	781b      	ldrb	r3, [r3, #0]
    bc16:	b2db      	uxtb	r3, r3
    bc18:	f003 0310 	and.w	r3, r3, #16
    bc1c:	2b00      	cmp	r3, #0
    bc1e:	d15a      	bne.n	bcd6 <send_climb+0xae6>
    bc20:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc28:	781b      	ldrb	r3, [r3, #0]
    bc2a:	b2db      	uxtb	r3, r3
    bc2c:	461a      	mov	r2, r3
    bc2e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc36:	5c9a      	ldrb	r2, [r3, r2]
    bc38:	f24c 431b 	movw	r3, #50203	; 0xc41b
    bc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc40:	701a      	strb	r2, [r3, #0]
    bc42:	f24c 431c 	movw	r3, #50204	; 0xc41c
    bc46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc4a:	2200      	movs	r2, #0
    bc4c:	701a      	strb	r2, [r3, #0]
    bc4e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc56:	781b      	ldrb	r3, [r3, #0]
    bc58:	b2db      	uxtb	r3, r3
    bc5a:	3301      	adds	r3, #1
    bc5c:	b2da      	uxtb	r2, r3
    bc5e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc66:	701a      	strb	r2, [r3, #0]
    bc68:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc70:	781b      	ldrb	r3, [r3, #0]
    bc72:	b2db      	uxtb	r3, r3
    bc74:	2bff      	cmp	r3, #255	; 0xff
    bc76:	d105      	bne.n	bc84 <send_climb+0xa94>
    bc78:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bc7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc80:	2200      	movs	r2, #0
    bc82:	701a      	strb	r2, [r3, #0]
    bc84:	f242 0338 	movw	r3, #8248	; 0x2038
    bc88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc8c:	f242 0238 	movw	r2, #8248	; 0x2038
    bc90:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bc94:	7812      	ldrb	r2, [r2, #0]
    bc96:	b2d2      	uxtb	r2, r2
    bc98:	f042 0201 	orr.w	r2, r2, #1
    bc9c:	b2d2      	uxtb	r2, r2
    bc9e:	701a      	strb	r2, [r3, #0]
    bca0:	f242 0339 	movw	r3, #8249	; 0x2039
    bca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca8:	f242 0239 	movw	r2, #8249	; 0x2039
    bcac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bcb0:	7812      	ldrb	r2, [r2, #0]
    bcb2:	b2d2      	uxtb	r2, r2
    bcb4:	f042 0210 	orr.w	r2, r2, #16
    bcb8:	b2d2      	uxtb	r2, r2
    bcba:	701a      	strb	r2, [r3, #0]
    bcbc:	e00b      	b.n	bcd6 <send_climb+0xae6>
    bcbe:	f24c 3318 	movw	r3, #49944	; 0xc318
    bcc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc6:	781b      	ldrb	r3, [r3, #0]
    bcc8:	3301      	adds	r3, #1
    bcca:	b2da      	uxtb	r2, r3
    bccc:	f24c 3318 	movw	r3, #49944	; 0xc318
    bcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd4:	701a      	strb	r2, [r3, #0]
}
    bcd6:	46bd      	mov	sp, r7
    bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcdc:	4770      	bx	lr
    bcde:	bf00      	nop
    bce0:	00018a47 	.word	0x00018a47

0000bce4 <send_mode>:
void send_mode(void){  //5000ms
    bce4:	b480      	push	{r7}
    bce6:	af00      	add	r7, sp, #0
  if(!boot)
    bce8:	f240 533d 	movw	r3, #1341	; 0x53d
    bcec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcf0:	781b      	ldrb	r3, [r3, #0]
    bcf2:	2b00      	cmp	r3, #0
    bcf4:	f040 82ce 	bne.w	c294 <send_mode+0x5b0>
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bcf8:	f24c 3311 	movw	r3, #49937	; 0xc311
    bcfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd00:	781a      	ldrb	r2, [r3, #0]
    bd02:	f248 531f 	movw	r3, #34079	; 0x851f
    bd06:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bd0a:	fba3 1302 	umull	r1, r3, r3, r2
    bd0e:	091b      	lsrs	r3, r3, #4
    bd10:	2132      	movs	r1, #50	; 0x32
    bd12:	fb01 f303 	mul.w	r3, r1, r3
    bd16:	1ad3      	subs	r3, r2, r3
    bd18:	b2db      	uxtb	r3, r3
    bd1a:	2b09      	cmp	r3, #9
    bd1c:	f040 82ba 	bne.w	c294 <send_mode+0x5b0>
    bd20:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd28:	781a      	ldrb	r2, [r3, #0]
    bd2a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd32:	781b      	ldrb	r3, [r3, #0]
    bd34:	b2db      	uxtb	r3, r3
    bd36:	429a      	cmp	r2, r3
    bd38:	d313      	bcc.n	bd62 <send_mode+0x7e>
    bd3a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd42:	781b      	ldrb	r3, [r3, #0]
    bd44:	b2db      	uxtb	r3, r3
    bd46:	461a      	mov	r2, r3
    bd48:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd50:	781b      	ldrb	r3, [r3, #0]
    bd52:	1ad3      	subs	r3, r2, r3
    bd54:	33ff      	adds	r3, #255	; 0xff
    bd56:	2b09      	cmp	r3, #9
    bd58:	bfd4      	ite	le
    bd5a:	2300      	movle	r3, #0
    bd5c:	2301      	movgt	r3, #1
    bd5e:	b2db      	uxtb	r3, r3
    bd60:	e011      	b.n	bd86 <send_mode+0xa2>
    bd62:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd6a:	781b      	ldrb	r3, [r3, #0]
    bd6c:	b2db      	uxtb	r3, r3
    bd6e:	461a      	mov	r2, r3
    bd70:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd78:	781b      	ldrb	r3, [r3, #0]
    bd7a:	1ad3      	subs	r3, r2, r3
    bd7c:	2b09      	cmp	r3, #9
    bd7e:	bfd4      	ite	le
    bd80:	2300      	movle	r3, #0
    bd82:	2301      	movgt	r3, #1
    bd84:	b2db      	uxtb	r3, r3
    bd86:	2b00      	cmp	r3, #0
    bd88:	f000 8278 	beq.w	c27c <send_mode+0x598>
    bd8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd94:	781b      	ldrb	r3, [r3, #0]
    bd96:	461a      	mov	r2, r3
    bd98:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bd9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda0:	2105      	movs	r1, #5
    bda2:	5499      	strb	r1, [r3, r2]
    bda4:	f24c 3319 	movw	r3, #49945	; 0xc319
    bda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdac:	781b      	ldrb	r3, [r3, #0]
    bdae:	3301      	adds	r3, #1
    bdb0:	b2da      	uxtb	r2, r3
    bdb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdba:	701a      	strb	r2, [r3, #0]
    bdbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdc4:	781b      	ldrb	r3, [r3, #0]
    bdc6:	2bff      	cmp	r3, #255	; 0xff
    bdc8:	d105      	bne.n	bdd6 <send_mode+0xf2>
    bdca:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd2:	2200      	movs	r2, #0
    bdd4:	701a      	strb	r2, [r3, #0]
    bdd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdde:	781b      	ldrb	r3, [r3, #0]
    bde0:	461a      	mov	r2, r3
    bde2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bde6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdea:	210b      	movs	r1, #11
    bdec:	5499      	strb	r1, [r3, r2]
    bdee:	f24c 3319 	movw	r3, #49945	; 0xc319
    bdf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf6:	781b      	ldrb	r3, [r3, #0]
    bdf8:	3301      	adds	r3, #1
    bdfa:	b2da      	uxtb	r2, r3
    bdfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    be00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be04:	701a      	strb	r2, [r3, #0]
    be06:	f24c 3319 	movw	r3, #49945	; 0xc319
    be0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be0e:	781b      	ldrb	r3, [r3, #0]
    be10:	2bff      	cmp	r3, #255	; 0xff
    be12:	d105      	bne.n	be20 <send_mode+0x13c>
    be14:	f24c 3319 	movw	r3, #49945	; 0xc319
    be18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be1c:	2200      	movs	r2, #0
    be1e:	701a      	strb	r2, [r3, #0]
    be20:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be28:	220b      	movs	r2, #11
    be2a:	701a      	strb	r2, [r3, #0]
    be2c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    be30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be34:	220b      	movs	r2, #11
    be36:	701a      	strb	r2, [r3, #0]
    be38:	f24c 3319 	movw	r3, #49945	; 0xc319
    be3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be40:	781b      	ldrb	r3, [r3, #0]
    be42:	461a      	mov	r2, r3
    be44:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    be48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be4c:	7819      	ldrb	r1, [r3, #0]
    be4e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    be52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be56:	5499      	strb	r1, [r3, r2]
    be58:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be60:	781a      	ldrb	r2, [r3, #0]
    be62:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    be66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be6a:	781b      	ldrb	r3, [r3, #0]
    be6c:	4413      	add	r3, r2
    be6e:	b2da      	uxtb	r2, r3
    be70:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be78:	701a      	strb	r2, [r3, #0]
    be7a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    be7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be82:	781a      	ldrb	r2, [r3, #0]
    be84:	f24c 431d 	movw	r3, #50205	; 0xc41d
    be88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be8c:	781b      	ldrb	r3, [r3, #0]
    be8e:	4413      	add	r3, r2
    be90:	b2da      	uxtb	r2, r3
    be92:	f24c 431e 	movw	r3, #50206	; 0xc41e
    be96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be9a:	701a      	strb	r2, [r3, #0]
    be9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea4:	781b      	ldrb	r3, [r3, #0]
    bea6:	3301      	adds	r3, #1
    bea8:	b2da      	uxtb	r2, r3
    beaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    beae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb2:	701a      	strb	r2, [r3, #0]
    beb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    beb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bebc:	781b      	ldrb	r3, [r3, #0]
    bebe:	2bff      	cmp	r3, #255	; 0xff
    bec0:	d105      	bne.n	bece <send_mode+0x1ea>
    bec2:	f24c 3319 	movw	r3, #49945	; 0xc319
    bec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beca:	2200      	movs	r2, #0
    becc:	701a      	strb	r2, [r3, #0]
    bece:	f24c 3319 	movw	r3, #49945	; 0xc319
    bed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed6:	781b      	ldrb	r3, [r3, #0]
    bed8:	461a      	mov	r2, r3
    beda:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    bede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee2:	7819      	ldrb	r1, [r3, #0]
    bee4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beec:	5499      	strb	r1, [r3, r2]
    beee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef6:	781a      	ldrb	r2, [r3, #0]
    bef8:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    befc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf00:	781b      	ldrb	r3, [r3, #0]
    bf02:	4413      	add	r3, r2
    bf04:	b2da      	uxtb	r2, r3
    bf06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf0e:	701a      	strb	r2, [r3, #0]
    bf10:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bf14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf18:	781a      	ldrb	r2, [r3, #0]
    bf1a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf22:	781b      	ldrb	r3, [r3, #0]
    bf24:	4413      	add	r3, r2
    bf26:	b2da      	uxtb	r2, r3
    bf28:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bf2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf30:	701a      	strb	r2, [r3, #0]
    bf32:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf3a:	781b      	ldrb	r3, [r3, #0]
    bf3c:	3301      	adds	r3, #1
    bf3e:	b2da      	uxtb	r2, r3
    bf40:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf48:	701a      	strb	r2, [r3, #0]
    bf4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf52:	781b      	ldrb	r3, [r3, #0]
    bf54:	2bff      	cmp	r3, #255	; 0xff
    bf56:	d105      	bne.n	bf64 <send_mode+0x280>
    bf58:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf60:	2200      	movs	r2, #0
    bf62:	701a      	strb	r2, [r3, #0]
    bf64:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf6c:	781b      	ldrb	r3, [r3, #0]
    bf6e:	461a      	mov	r2, r3
    bf70:	f64c 132c 	movw	r3, #51500	; 0xc92c
    bf74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf78:	7819      	ldrb	r1, [r3, #0]
    bf7a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bf7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf82:	5499      	strb	r1, [r3, r2]
    bf84:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf8c:	781a      	ldrb	r2, [r3, #0]
    bf8e:	f64c 132c 	movw	r3, #51500	; 0xc92c
    bf92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf96:	781b      	ldrb	r3, [r3, #0]
    bf98:	4413      	add	r3, r2
    bf9a:	b2da      	uxtb	r2, r3
    bf9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa4:	701a      	strb	r2, [r3, #0]
    bfa6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bfaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfae:	781a      	ldrb	r2, [r3, #0]
    bfb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb8:	781b      	ldrb	r3, [r3, #0]
    bfba:	4413      	add	r3, r2
    bfbc:	b2da      	uxtb	r2, r3
    bfbe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bfc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc6:	701a      	strb	r2, [r3, #0]
    bfc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd0:	781b      	ldrb	r3, [r3, #0]
    bfd2:	3301      	adds	r3, #1
    bfd4:	b2da      	uxtb	r2, r3
    bfd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfde:	701a      	strb	r2, [r3, #0]
    bfe0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe8:	781b      	ldrb	r3, [r3, #0]
    bfea:	2bff      	cmp	r3, #255	; 0xff
    bfec:	d105      	bne.n	bffa <send_mode+0x316>
    bfee:	f24c 3319 	movw	r3, #49945	; 0xc319
    bff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff6:	2200      	movs	r2, #0
    bff8:	701a      	strb	r2, [r3, #0]
    bffa:	f24c 3319 	movw	r3, #49945	; 0xc319
    bffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c002:	781b      	ldrb	r3, [r3, #0]
    c004:	461a      	mov	r2, r3
    c006:	f24c 3303 	movw	r3, #49923	; 0xc303
    c00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c00e:	7819      	ldrb	r1, [r3, #0]
    c010:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c018:	5499      	strb	r1, [r3, r2]
    c01a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c022:	781a      	ldrb	r2, [r3, #0]
    c024:	f24c 3303 	movw	r3, #49923	; 0xc303
    c028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c02c:	781b      	ldrb	r3, [r3, #0]
    c02e:	4413      	add	r3, r2
    c030:	b2da      	uxtb	r2, r3
    c032:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c03a:	701a      	strb	r2, [r3, #0]
    c03c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c044:	781a      	ldrb	r2, [r3, #0]
    c046:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c04e:	781b      	ldrb	r3, [r3, #0]
    c050:	4413      	add	r3, r2
    c052:	b2da      	uxtb	r2, r3
    c054:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c05c:	701a      	strb	r2, [r3, #0]
    c05e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c066:	781b      	ldrb	r3, [r3, #0]
    c068:	3301      	adds	r3, #1
    c06a:	b2da      	uxtb	r2, r3
    c06c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c074:	701a      	strb	r2, [r3, #0]
    c076:	f24c 3319 	movw	r3, #49945	; 0xc319
    c07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c07e:	781b      	ldrb	r3, [r3, #0]
    c080:	2bff      	cmp	r3, #255	; 0xff
    c082:	d105      	bne.n	c090 <send_mode+0x3ac>
    c084:	f24c 3319 	movw	r3, #49945	; 0xc319
    c088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c08c:	2200      	movs	r2, #0
    c08e:	701a      	strb	r2, [r3, #0]
    c090:	f24c 3319 	movw	r3, #49945	; 0xc319
    c094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c098:	781b      	ldrb	r3, [r3, #0]
    c09a:	461a      	mov	r2, r3
    c09c:	f240 533c 	movw	r3, #1340	; 0x53c
    c0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0a4:	7819      	ldrb	r1, [r3, #0]
    c0a6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ae:	5499      	strb	r1, [r3, r2]
    c0b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b8:	781a      	ldrb	r2, [r3, #0]
    c0ba:	f240 533c 	movw	r3, #1340	; 0x53c
    c0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c2:	781b      	ldrb	r3, [r3, #0]
    c0c4:	4413      	add	r3, r2
    c0c6:	b2da      	uxtb	r2, r3
    c0c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d0:	701a      	strb	r2, [r3, #0]
    c0d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0da:	781a      	ldrb	r2, [r3, #0]
    c0dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e4:	781b      	ldrb	r3, [r3, #0]
    c0e6:	4413      	add	r3, r2
    c0e8:	b2da      	uxtb	r2, r3
    c0ea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f2:	701a      	strb	r2, [r3, #0]
    c0f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0fc:	781b      	ldrb	r3, [r3, #0]
    c0fe:	3301      	adds	r3, #1
    c100:	b2da      	uxtb	r2, r3
    c102:	f24c 3319 	movw	r3, #49945	; 0xc319
    c106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c10a:	701a      	strb	r2, [r3, #0]
    c10c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c114:	781b      	ldrb	r3, [r3, #0]
    c116:	2bff      	cmp	r3, #255	; 0xff
    c118:	d105      	bne.n	c126 <send_mode+0x442>
    c11a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c122:	2200      	movs	r2, #0
    c124:	701a      	strb	r2, [r3, #0]
    c126:	f24c 3319 	movw	r3, #49945	; 0xc319
    c12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c12e:	781b      	ldrb	r3, [r3, #0]
    c130:	461a      	mov	r2, r3
    c132:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c13a:	7819      	ldrb	r1, [r3, #0]
    c13c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c144:	5499      	strb	r1, [r3, r2]
    c146:	f24c 3319 	movw	r3, #49945	; 0xc319
    c14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c14e:	781b      	ldrb	r3, [r3, #0]
    c150:	3301      	adds	r3, #1
    c152:	b2da      	uxtb	r2, r3
    c154:	f24c 3319 	movw	r3, #49945	; 0xc319
    c158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c15c:	701a      	strb	r2, [r3, #0]
    c15e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c166:	781b      	ldrb	r3, [r3, #0]
    c168:	2bff      	cmp	r3, #255	; 0xff
    c16a:	d105      	bne.n	c178 <send_mode+0x494>
    c16c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c174:	2200      	movs	r2, #0
    c176:	701a      	strb	r2, [r3, #0]
    c178:	f24c 3319 	movw	r3, #49945	; 0xc319
    c17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c180:	781b      	ldrb	r3, [r3, #0]
    c182:	461a      	mov	r2, r3
    c184:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c18c:	7819      	ldrb	r1, [r3, #0]
    c18e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c196:	5499      	strb	r1, [r3, r2]
    c198:	f24c 3319 	movw	r3, #49945	; 0xc319
    c19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a0:	781b      	ldrb	r3, [r3, #0]
    c1a2:	3301      	adds	r3, #1
    c1a4:	b2da      	uxtb	r2, r3
    c1a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ae:	701a      	strb	r2, [r3, #0]
    c1b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b8:	781b      	ldrb	r3, [r3, #0]
    c1ba:	2bff      	cmp	r3, #255	; 0xff
    c1bc:	d105      	bne.n	c1ca <send_mode+0x4e6>
    c1be:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c6:	2200      	movs	r2, #0
    c1c8:	701a      	strb	r2, [r3, #0]
    c1ca:	f242 0339 	movw	r3, #8249	; 0x2039
    c1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d2:	781b      	ldrb	r3, [r3, #0]
    c1d4:	b2db      	uxtb	r3, r3
    c1d6:	f003 0310 	and.w	r3, r3, #16
    c1da:	2b00      	cmp	r3, #0
    c1dc:	d15a      	bne.n	c294 <send_mode+0x5b0>
    c1de:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1e6:	781b      	ldrb	r3, [r3, #0]
    c1e8:	b2db      	uxtb	r3, r3
    c1ea:	461a      	mov	r2, r3
    c1ec:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f4:	5c9a      	ldrb	r2, [r3, r2]
    c1f6:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1fe:	701a      	strb	r2, [r3, #0]
    c200:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c208:	2200      	movs	r2, #0
    c20a:	701a      	strb	r2, [r3, #0]
    c20c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c214:	781b      	ldrb	r3, [r3, #0]
    c216:	b2db      	uxtb	r3, r3
    c218:	3301      	adds	r3, #1
    c21a:	b2da      	uxtb	r2, r3
    c21c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c224:	701a      	strb	r2, [r3, #0]
    c226:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c22e:	781b      	ldrb	r3, [r3, #0]
    c230:	b2db      	uxtb	r3, r3
    c232:	2bff      	cmp	r3, #255	; 0xff
    c234:	d105      	bne.n	c242 <send_mode+0x55e>
    c236:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c23e:	2200      	movs	r2, #0
    c240:	701a      	strb	r2, [r3, #0]
    c242:	f242 0338 	movw	r3, #8248	; 0x2038
    c246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c24a:	f242 0238 	movw	r2, #8248	; 0x2038
    c24e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c252:	7812      	ldrb	r2, [r2, #0]
    c254:	b2d2      	uxtb	r2, r2
    c256:	f042 0201 	orr.w	r2, r2, #1
    c25a:	b2d2      	uxtb	r2, r2
    c25c:	701a      	strb	r2, [r3, #0]
    c25e:	f242 0339 	movw	r3, #8249	; 0x2039
    c262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c266:	f242 0239 	movw	r2, #8249	; 0x2039
    c26a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c26e:	7812      	ldrb	r2, [r2, #0]
    c270:	b2d2      	uxtb	r2, r2
    c272:	f042 0210 	orr.w	r2, r2, #16
    c276:	b2d2      	uxtb	r2, r2
    c278:	701a      	strb	r2, [r3, #0]
    c27a:	e00b      	b.n	c294 <send_mode+0x5b0>
    c27c:	f24c 3318 	movw	r3, #49944	; 0xc318
    c280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c284:	781b      	ldrb	r3, [r3, #0]
    c286:	3301      	adds	r3, #1
    c288:	b2da      	uxtb	r2, r3
    c28a:	f24c 3318 	movw	r3, #49944	; 0xc318
    c28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c292:	701a      	strb	r2, [r3, #0]
}
    c294:	46bd      	mov	sp, r7
    c296:	f85d 7b04 	ldr.w	r7, [sp], #4
    c29a:	4770      	bx	lr

0000c29c <send_debug>:
void send_debug(void){  //5000ms
    c29c:	b480      	push	{r7}
    c29e:	af00      	add	r7, sp, #0
  if(!boot)
    c2a0:	f240 533d 	movw	r3, #1341	; 0x53d
    c2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a8:	781b      	ldrb	r3, [r3, #0]
    c2aa:	2b00      	cmp	r3, #0
    c2ac:	f040 82cf 	bne.w	c84e <send_debug+0x5b2>
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c2b0:	f24c 3311 	movw	r3, #49937	; 0xc311
    c2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b8:	781a      	ldrb	r2, [r3, #0]
    c2ba:	f248 531f 	movw	r3, #34079	; 0x851f
    c2be:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c2c2:	fba3 1302 	umull	r1, r3, r3, r2
    c2c6:	091b      	lsrs	r3, r3, #4
    c2c8:	2132      	movs	r1, #50	; 0x32
    c2ca:	fb01 f303 	mul.w	r3, r1, r3
    c2ce:	1ad3      	subs	r3, r2, r3
    c2d0:	b2db      	uxtb	r3, r3
    c2d2:	2b1d      	cmp	r3, #29
    c2d4:	f040 82bb 	bne.w	c84e <send_debug+0x5b2>
    c2d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e0:	781a      	ldrb	r2, [r3, #0]
    c2e2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ea:	781b      	ldrb	r3, [r3, #0]
    c2ec:	b2db      	uxtb	r3, r3
    c2ee:	429a      	cmp	r2, r3
    c2f0:	d313      	bcc.n	c31a <send_debug+0x7e>
    c2f2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2fa:	781b      	ldrb	r3, [r3, #0]
    c2fc:	b2db      	uxtb	r3, r3
    c2fe:	461a      	mov	r2, r3
    c300:	f24c 3319 	movw	r3, #49945	; 0xc319
    c304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c308:	781b      	ldrb	r3, [r3, #0]
    c30a:	1ad3      	subs	r3, r2, r3
    c30c:	33ff      	adds	r3, #255	; 0xff
    c30e:	2b09      	cmp	r3, #9
    c310:	bfd4      	ite	le
    c312:	2300      	movle	r3, #0
    c314:	2301      	movgt	r3, #1
    c316:	b2db      	uxtb	r3, r3
    c318:	e011      	b.n	c33e <send_debug+0xa2>
    c31a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c322:	781b      	ldrb	r3, [r3, #0]
    c324:	b2db      	uxtb	r3, r3
    c326:	461a      	mov	r2, r3
    c328:	f24c 3319 	movw	r3, #49945	; 0xc319
    c32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c330:	781b      	ldrb	r3, [r3, #0]
    c332:	1ad3      	subs	r3, r2, r3
    c334:	2b09      	cmp	r3, #9
    c336:	bfd4      	ite	le
    c338:	2300      	movle	r3, #0
    c33a:	2301      	movgt	r3, #1
    c33c:	b2db      	uxtb	r3, r3
    c33e:	2b00      	cmp	r3, #0
    c340:	f000 8279 	beq.w	c836 <send_debug+0x59a>
    c344:	f24c 3319 	movw	r3, #49945	; 0xc319
    c348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c34c:	781b      	ldrb	r3, [r3, #0]
    c34e:	461a      	mov	r2, r3
    c350:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c358:	2105      	movs	r1, #5
    c35a:	5499      	strb	r1, [r3, r2]
    c35c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c364:	781b      	ldrb	r3, [r3, #0]
    c366:	3301      	adds	r3, #1
    c368:	b2da      	uxtb	r2, r3
    c36a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c372:	701a      	strb	r2, [r3, #0]
    c374:	f24c 3319 	movw	r3, #49945	; 0xc319
    c378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c37c:	781b      	ldrb	r3, [r3, #0]
    c37e:	2bff      	cmp	r3, #255	; 0xff
    c380:	d105      	bne.n	c38e <send_debug+0xf2>
    c382:	f24c 3319 	movw	r3, #49945	; 0xc319
    c386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c38a:	2200      	movs	r2, #0
    c38c:	701a      	strb	r2, [r3, #0]
    c38e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c396:	781b      	ldrb	r3, [r3, #0]
    c398:	461a      	mov	r2, r3
    c39a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a2:	210d      	movs	r1, #13
    c3a4:	5499      	strb	r1, [r3, r2]
    c3a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ae:	781b      	ldrb	r3, [r3, #0]
    c3b0:	3301      	adds	r3, #1
    c3b2:	b2da      	uxtb	r2, r3
    c3b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3bc:	701a      	strb	r2, [r3, #0]
    c3be:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3c6:	781b      	ldrb	r3, [r3, #0]
    c3c8:	2bff      	cmp	r3, #255	; 0xff
    c3ca:	d105      	bne.n	c3d8 <send_debug+0x13c>
    c3cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d4:	2200      	movs	r2, #0
    c3d6:	701a      	strb	r2, [r3, #0]
    c3d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e0:	220d      	movs	r2, #13
    c3e2:	701a      	strb	r2, [r3, #0]
    c3e4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ec:	220d      	movs	r2, #13
    c3ee:	701a      	strb	r2, [r3, #0]
    c3f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f8:	781b      	ldrb	r3, [r3, #0]
    c3fa:	461a      	mov	r2, r3
    c3fc:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c404:	781b      	ldrb	r3, [r3, #0]
    c406:	b2d9      	uxtb	r1, r3
    c408:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c410:	5499      	strb	r1, [r3, r2]
    c412:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c41a:	781a      	ldrb	r2, [r3, #0]
    c41c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c424:	781b      	ldrb	r3, [r3, #0]
    c426:	4413      	add	r3, r2
    c428:	b2da      	uxtb	r2, r3
    c42a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c432:	701a      	strb	r2, [r3, #0]
    c434:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c43c:	781a      	ldrb	r2, [r3, #0]
    c43e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c446:	781b      	ldrb	r3, [r3, #0]
    c448:	4413      	add	r3, r2
    c44a:	b2da      	uxtb	r2, r3
    c44c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c454:	701a      	strb	r2, [r3, #0]
    c456:	f24c 3319 	movw	r3, #49945	; 0xc319
    c45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c45e:	781b      	ldrb	r3, [r3, #0]
    c460:	3301      	adds	r3, #1
    c462:	b2da      	uxtb	r2, r3
    c464:	f24c 3319 	movw	r3, #49945	; 0xc319
    c468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c46c:	701a      	strb	r2, [r3, #0]
    c46e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c476:	781b      	ldrb	r3, [r3, #0]
    c478:	2bff      	cmp	r3, #255	; 0xff
    c47a:	d105      	bne.n	c488 <send_debug+0x1ec>
    c47c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c484:	2200      	movs	r2, #0
    c486:	701a      	strb	r2, [r3, #0]
    c488:	f24c 3319 	movw	r3, #49945	; 0xc319
    c48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c490:	781b      	ldrb	r3, [r3, #0]
    c492:	461a      	mov	r2, r3
    c494:	f24c 4350 	movw	r3, #50256	; 0xc450
    c498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c49c:	7819      	ldrb	r1, [r3, #0]
    c49e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a6:	5499      	strb	r1, [r3, r2]
    c4a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b0:	781a      	ldrb	r2, [r3, #0]
    c4b2:	f24c 4350 	movw	r3, #50256	; 0xc450
    c4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ba:	781b      	ldrb	r3, [r3, #0]
    c4bc:	4413      	add	r3, r2
    c4be:	b2da      	uxtb	r2, r3
    c4c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c8:	701a      	strb	r2, [r3, #0]
    c4ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d2:	781a      	ldrb	r2, [r3, #0]
    c4d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4dc:	781b      	ldrb	r3, [r3, #0]
    c4de:	4413      	add	r3, r2
    c4e0:	b2da      	uxtb	r2, r3
    c4e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ea:	701a      	strb	r2, [r3, #0]
    c4ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f4:	781b      	ldrb	r3, [r3, #0]
    c4f6:	3301      	adds	r3, #1
    c4f8:	b2da      	uxtb	r2, r3
    c4fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c502:	701a      	strb	r2, [r3, #0]
    c504:	f24c 3319 	movw	r3, #49945	; 0xc319
    c508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50c:	781b      	ldrb	r3, [r3, #0]
    c50e:	2bff      	cmp	r3, #255	; 0xff
    c510:	d105      	bne.n	c51e <send_debug+0x282>
    c512:	f24c 3319 	movw	r3, #49945	; 0xc319
    c516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c51a:	2200      	movs	r2, #0
    c51c:	701a      	strb	r2, [r3, #0]
    c51e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c526:	781b      	ldrb	r3, [r3, #0]
    c528:	461a      	mov	r2, r3
    c52a:	f24c 3318 	movw	r3, #49944	; 0xc318
    c52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c532:	7819      	ldrb	r1, [r3, #0]
    c534:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c53c:	5499      	strb	r1, [r3, r2]
    c53e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c546:	781a      	ldrb	r2, [r3, #0]
    c548:	f24c 3318 	movw	r3, #49944	; 0xc318
    c54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c550:	781b      	ldrb	r3, [r3, #0]
    c552:	4413      	add	r3, r2
    c554:	b2da      	uxtb	r2, r3
    c556:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c55e:	701a      	strb	r2, [r3, #0]
    c560:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c568:	781a      	ldrb	r2, [r3, #0]
    c56a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c572:	781b      	ldrb	r3, [r3, #0]
    c574:	4413      	add	r3, r2
    c576:	b2da      	uxtb	r2, r3
    c578:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c580:	701a      	strb	r2, [r3, #0]
    c582:	f24c 3319 	movw	r3, #49945	; 0xc319
    c586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c58a:	781b      	ldrb	r3, [r3, #0]
    c58c:	3301      	adds	r3, #1
    c58e:	b2da      	uxtb	r2, r3
    c590:	f24c 3319 	movw	r3, #49945	; 0xc319
    c594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c598:	701a      	strb	r2, [r3, #0]
    c59a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a2:	781b      	ldrb	r3, [r3, #0]
    c5a4:	2bff      	cmp	r3, #255	; 0xff
    c5a6:	d105      	bne.n	c5b4 <send_debug+0x318>
    c5a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b0:	2200      	movs	r2, #0
    c5b2:	701a      	strb	r2, [r3, #0]
    c5b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5bc:	781b      	ldrb	r3, [r3, #0]
    c5be:	461a      	mov	r2, r3
    c5c0:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c8:	7819      	ldrb	r1, [r3, #0]
    c5ca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d2:	5499      	strb	r1, [r3, r2]
    c5d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5dc:	781a      	ldrb	r2, [r3, #0]
    c5de:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e6:	781b      	ldrb	r3, [r3, #0]
    c5e8:	4413      	add	r3, r2
    c5ea:	b2da      	uxtb	r2, r3
    c5ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f4:	701a      	strb	r2, [r3, #0]
    c5f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5fe:	781a      	ldrb	r2, [r3, #0]
    c600:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c608:	781b      	ldrb	r3, [r3, #0]
    c60a:	4413      	add	r3, r2
    c60c:	b2da      	uxtb	r2, r3
    c60e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c616:	701a      	strb	r2, [r3, #0]
    c618:	f24c 3319 	movw	r3, #49945	; 0xc319
    c61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c620:	781b      	ldrb	r3, [r3, #0]
    c622:	3301      	adds	r3, #1
    c624:	b2da      	uxtb	r2, r3
    c626:	f24c 3319 	movw	r3, #49945	; 0xc319
    c62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c62e:	701a      	strb	r2, [r3, #0]
    c630:	f24c 3319 	movw	r3, #49945	; 0xc319
    c634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c638:	781b      	ldrb	r3, [r3, #0]
    c63a:	2bff      	cmp	r3, #255	; 0xff
    c63c:	d105      	bne.n	c64a <send_debug+0x3ae>
    c63e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c646:	2200      	movs	r2, #0
    c648:	701a      	strb	r2, [r3, #0]
    c64a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c652:	781b      	ldrb	r3, [r3, #0]
    c654:	461a      	mov	r2, r3
    c656:	f24c 3304 	movw	r3, #49924	; 0xc304
    c65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c65e:	7819      	ldrb	r1, [r3, #0]
    c660:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c668:	5499      	strb	r1, [r3, r2]
    c66a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c672:	781a      	ldrb	r2, [r3, #0]
    c674:	f24c 3304 	movw	r3, #49924	; 0xc304
    c678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c67c:	781b      	ldrb	r3, [r3, #0]
    c67e:	4413      	add	r3, r2
    c680:	b2da      	uxtb	r2, r3
    c682:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c68a:	701a      	strb	r2, [r3, #0]
    c68c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c694:	781a      	ldrb	r2, [r3, #0]
    c696:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c69e:	781b      	ldrb	r3, [r3, #0]
    c6a0:	4413      	add	r3, r2
    c6a2:	b2da      	uxtb	r2, r3
    c6a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ac:	701a      	strb	r2, [r3, #0]
    c6ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b6:	781b      	ldrb	r3, [r3, #0]
    c6b8:	3301      	adds	r3, #1
    c6ba:	b2da      	uxtb	r2, r3
    c6bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c4:	701a      	strb	r2, [r3, #0]
    c6c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ce:	781b      	ldrb	r3, [r3, #0]
    c6d0:	2bff      	cmp	r3, #255	; 0xff
    c6d2:	d105      	bne.n	c6e0 <send_debug+0x444>
    c6d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6dc:	2200      	movs	r2, #0
    c6de:	701a      	strb	r2, [r3, #0]
    c6e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e8:	781b      	ldrb	r3, [r3, #0]
    c6ea:	461a      	mov	r2, r3
    c6ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f4:	7819      	ldrb	r1, [r3, #0]
    c6f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6fe:	5499      	strb	r1, [r3, r2]
    c700:	f24c 3319 	movw	r3, #49945	; 0xc319
    c704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c708:	781b      	ldrb	r3, [r3, #0]
    c70a:	3301      	adds	r3, #1
    c70c:	b2da      	uxtb	r2, r3
    c70e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c716:	701a      	strb	r2, [r3, #0]
    c718:	f24c 3319 	movw	r3, #49945	; 0xc319
    c71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c720:	781b      	ldrb	r3, [r3, #0]
    c722:	2bff      	cmp	r3, #255	; 0xff
    c724:	d105      	bne.n	c732 <send_debug+0x496>
    c726:	f24c 3319 	movw	r3, #49945	; 0xc319
    c72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c72e:	2200      	movs	r2, #0
    c730:	701a      	strb	r2, [r3, #0]
    c732:	f24c 3319 	movw	r3, #49945	; 0xc319
    c736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73a:	781b      	ldrb	r3, [r3, #0]
    c73c:	461a      	mov	r2, r3
    c73e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c746:	7819      	ldrb	r1, [r3, #0]
    c748:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c750:	5499      	strb	r1, [r3, r2]
    c752:	f24c 3319 	movw	r3, #49945	; 0xc319
    c756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c75a:	781b      	ldrb	r3, [r3, #0]
    c75c:	3301      	adds	r3, #1
    c75e:	b2da      	uxtb	r2, r3
    c760:	f24c 3319 	movw	r3, #49945	; 0xc319
    c764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c768:	701a      	strb	r2, [r3, #0]
    c76a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c772:	781b      	ldrb	r3, [r3, #0]
    c774:	2bff      	cmp	r3, #255	; 0xff
    c776:	d105      	bne.n	c784 <send_debug+0x4e8>
    c778:	f24c 3319 	movw	r3, #49945	; 0xc319
    c77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c780:	2200      	movs	r2, #0
    c782:	701a      	strb	r2, [r3, #0]
    c784:	f242 0339 	movw	r3, #8249	; 0x2039
    c788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c78c:	781b      	ldrb	r3, [r3, #0]
    c78e:	b2db      	uxtb	r3, r3
    c790:	f003 0310 	and.w	r3, r3, #16
    c794:	2b00      	cmp	r3, #0
    c796:	d15a      	bne.n	c84e <send_debug+0x5b2>
    c798:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a0:	781b      	ldrb	r3, [r3, #0]
    c7a2:	b2db      	uxtb	r3, r3
    c7a4:	461a      	mov	r2, r3
    c7a6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ae:	5c9a      	ldrb	r2, [r3, r2]
    c7b0:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b8:	701a      	strb	r2, [r3, #0]
    c7ba:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c2:	2200      	movs	r2, #0
    c7c4:	701a      	strb	r2, [r3, #0]
    c7c6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ce:	781b      	ldrb	r3, [r3, #0]
    c7d0:	b2db      	uxtb	r3, r3
    c7d2:	3301      	adds	r3, #1
    c7d4:	b2da      	uxtb	r2, r3
    c7d6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7de:	701a      	strb	r2, [r3, #0]
    c7e0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e8:	781b      	ldrb	r3, [r3, #0]
    c7ea:	b2db      	uxtb	r3, r3
    c7ec:	2bff      	cmp	r3, #255	; 0xff
    c7ee:	d105      	bne.n	c7fc <send_debug+0x560>
    c7f0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f8:	2200      	movs	r2, #0
    c7fa:	701a      	strb	r2, [r3, #0]
    c7fc:	f242 0338 	movw	r3, #8248	; 0x2038
    c800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c804:	f242 0238 	movw	r2, #8248	; 0x2038
    c808:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c80c:	7812      	ldrb	r2, [r2, #0]
    c80e:	b2d2      	uxtb	r2, r2
    c810:	f042 0201 	orr.w	r2, r2, #1
    c814:	b2d2      	uxtb	r2, r2
    c816:	701a      	strb	r2, [r3, #0]
    c818:	f242 0339 	movw	r3, #8249	; 0x2039
    c81c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c820:	f242 0239 	movw	r2, #8249	; 0x2039
    c824:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c828:	7812      	ldrb	r2, [r2, #0]
    c82a:	b2d2      	uxtb	r2, r2
    c82c:	f042 0210 	orr.w	r2, r2, #16
    c830:	b2d2      	uxtb	r2, r2
    c832:	701a      	strb	r2, [r3, #0]
    c834:	e00b      	b.n	c84e <send_debug+0x5b2>
    c836:	f24c 3318 	movw	r3, #49944	; 0xc318
    c83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c83e:	781b      	ldrb	r3, [r3, #0]
    c840:	3301      	adds	r3, #1
    c842:	b2da      	uxtb	r2, r3
    c844:	f24c 3318 	movw	r3, #49944	; 0xc318
    c848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c84c:	701a      	strb	r2, [r3, #0]
}
    c84e:	46bd      	mov	sp, r7
    c850:	f85d 7b04 	ldr.w	r7, [sp], #4
    c854:	4770      	bx	lr
    c856:	bf00      	nop

0000c858 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c858:	b480      	push	{r7}
    c85a:	af00      	add	r7, sp, #0
  if(!boot)
    c85c:	f240 533d 	movw	r3, #1341	; 0x53d
    c860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c864:	781b      	ldrb	r3, [r3, #0]
    c866:	2b00      	cmp	r3, #0
    c868:	f040 83a9 	bne.w	cfbe <send_nav_ref+0x766>
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c86c:	f24c 3311 	movw	r3, #49937	; 0xc311
    c870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c874:	781a      	ldrb	r2, [r3, #0]
    c876:	f248 531f 	movw	r3, #34079	; 0x851f
    c87a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c87e:	fba3 1302 	umull	r1, r3, r3, r2
    c882:	095b      	lsrs	r3, r3, #5
    c884:	2164      	movs	r1, #100	; 0x64
    c886:	fb01 f303 	mul.w	r3, r1, r3
    c88a:	1ad3      	subs	r3, r2, r3
    c88c:	b2db      	uxtb	r3, r3
    c88e:	2b31      	cmp	r3, #49	; 0x31
    c890:	f040 8395 	bne.w	cfbe <send_nav_ref+0x766>
    c894:	f24c 3319 	movw	r3, #49945	; 0xc319
    c898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c89c:	781a      	ldrb	r2, [r3, #0]
    c89e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a6:	781b      	ldrb	r3, [r3, #0]
    c8a8:	b2db      	uxtb	r3, r3
    c8aa:	429a      	cmp	r2, r3
    c8ac:	d313      	bcc.n	c8d6 <send_nav_ref+0x7e>
    c8ae:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b6:	781b      	ldrb	r3, [r3, #0]
    c8b8:	b2db      	uxtb	r3, r3
    c8ba:	461a      	mov	r2, r3
    c8bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c4:	781b      	ldrb	r3, [r3, #0]
    c8c6:	1ad3      	subs	r3, r2, r3
    c8c8:	33ff      	adds	r3, #255	; 0xff
    c8ca:	2b0c      	cmp	r3, #12
    c8cc:	bfd4      	ite	le
    c8ce:	2300      	movle	r3, #0
    c8d0:	2301      	movgt	r3, #1
    c8d2:	b2db      	uxtb	r3, r3
    c8d4:	e011      	b.n	c8fa <send_nav_ref+0xa2>
    c8d6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8de:	781b      	ldrb	r3, [r3, #0]
    c8e0:	b2db      	uxtb	r3, r3
    c8e2:	461a      	mov	r2, r3
    c8e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ec:	781b      	ldrb	r3, [r3, #0]
    c8ee:	1ad3      	subs	r3, r2, r3
    c8f0:	2b0c      	cmp	r3, #12
    c8f2:	bfd4      	ite	le
    c8f4:	2300      	movle	r3, #0
    c8f6:	2301      	movgt	r3, #1
    c8f8:	b2db      	uxtb	r3, r3
    c8fa:	2b00      	cmp	r3, #0
    c8fc:	f000 8353 	beq.w	cfa6 <send_nav_ref+0x74e>
    c900:	f24c 3319 	movw	r3, #49945	; 0xc319
    c904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c908:	781b      	ldrb	r3, [r3, #0]
    c90a:	461a      	mov	r2, r3
    c90c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c914:	2105      	movs	r1, #5
    c916:	5499      	strb	r1, [r3, r2]
    c918:	f24c 3319 	movw	r3, #49945	; 0xc319
    c91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c920:	781b      	ldrb	r3, [r3, #0]
    c922:	3301      	adds	r3, #1
    c924:	b2da      	uxtb	r2, r3
    c926:	f24c 3319 	movw	r3, #49945	; 0xc319
    c92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c92e:	701a      	strb	r2, [r3, #0]
    c930:	f24c 3319 	movw	r3, #49945	; 0xc319
    c934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c938:	781b      	ldrb	r3, [r3, #0]
    c93a:	2bff      	cmp	r3, #255	; 0xff
    c93c:	d105      	bne.n	c94a <send_nav_ref+0xf2>
    c93e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c946:	2200      	movs	r2, #0
    c948:	701a      	strb	r2, [r3, #0]
    c94a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c952:	781b      	ldrb	r3, [r3, #0]
    c954:	461a      	mov	r2, r3
    c956:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c95e:	2109      	movs	r1, #9
    c960:	5499      	strb	r1, [r3, r2]
    c962:	f24c 3319 	movw	r3, #49945	; 0xc319
    c966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c96a:	781b      	ldrb	r3, [r3, #0]
    c96c:	3301      	adds	r3, #1
    c96e:	b2da      	uxtb	r2, r3
    c970:	f24c 3319 	movw	r3, #49945	; 0xc319
    c974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c978:	701a      	strb	r2, [r3, #0]
    c97a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c97e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c982:	781b      	ldrb	r3, [r3, #0]
    c984:	2bff      	cmp	r3, #255	; 0xff
    c986:	d105      	bne.n	c994 <send_nav_ref+0x13c>
    c988:	f24c 3319 	movw	r3, #49945	; 0xc319
    c98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c990:	2200      	movs	r2, #0
    c992:	701a      	strb	r2, [r3, #0]
    c994:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c99c:	2209      	movs	r2, #9
    c99e:	701a      	strb	r2, [r3, #0]
    c9a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a8:	2209      	movs	r2, #9
    c9aa:	701a      	strb	r2, [r3, #0]
    c9ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b4:	781b      	ldrb	r3, [r3, #0]
    c9b6:	461a      	mov	r2, r3
    c9b8:	f648 233c 	movw	r3, #35388	; 0x8a3c
    c9bc:	f2c0 0301 	movt	r3, #1
    c9c0:	7819      	ldrb	r1, [r3, #0]
    c9c2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ca:	5499      	strb	r1, [r3, r2]
    c9cc:	f648 233c 	movw	r3, #35388	; 0x8a3c
    c9d0:	f2c0 0301 	movt	r3, #1
    c9d4:	781a      	ldrb	r2, [r3, #0]
    c9d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9de:	781b      	ldrb	r3, [r3, #0]
    c9e0:	4413      	add	r3, r2
    c9e2:	b2da      	uxtb	r2, r3
    c9e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ec:	701a      	strb	r2, [r3, #0]
    c9ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f6:	781a      	ldrb	r2, [r3, #0]
    c9f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca00:	781b      	ldrb	r3, [r3, #0]
    ca02:	4413      	add	r3, r2
    ca04:	b2da      	uxtb	r2, r3
    ca06:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ca0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0e:	701a      	strb	r2, [r3, #0]
    ca10:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca18:	781b      	ldrb	r3, [r3, #0]
    ca1a:	3301      	adds	r3, #1
    ca1c:	b2da      	uxtb	r2, r3
    ca1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca26:	701a      	strb	r2, [r3, #0]
    ca28:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca30:	781b      	ldrb	r3, [r3, #0]
    ca32:	2bff      	cmp	r3, #255	; 0xff
    ca34:	d105      	bne.n	ca42 <send_nav_ref+0x1ea>
    ca36:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3e:	2200      	movs	r2, #0
    ca40:	701a      	strb	r2, [r3, #0]
    ca42:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4a:	781b      	ldrb	r3, [r3, #0]
    ca4c:	461a      	mov	r2, r3
    ca4e:	f648 233c 	movw	r3, #35388	; 0x8a3c
    ca52:	f2c0 0301 	movt	r3, #1
    ca56:	7859      	ldrb	r1, [r3, #1]
    ca58:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ca5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca60:	5499      	strb	r1, [r3, r2]
    ca62:	4bd2      	ldr	r3, [pc, #840]	; (cdac <send_nav_ref+0x554>)
    ca64:	781a      	ldrb	r2, [r3, #0]
    ca66:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca6e:	781b      	ldrb	r3, [r3, #0]
    ca70:	4413      	add	r3, r2
    ca72:	b2da      	uxtb	r2, r3
    ca74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca7c:	701a      	strb	r2, [r3, #0]
    ca7e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ca82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca86:	781a      	ldrb	r2, [r3, #0]
    ca88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ca8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca90:	781b      	ldrb	r3, [r3, #0]
    ca92:	4413      	add	r3, r2
    ca94:	b2da      	uxtb	r2, r3
    ca96:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ca9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca9e:	701a      	strb	r2, [r3, #0]
    caa0:	f24c 3319 	movw	r3, #49945	; 0xc319
    caa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa8:	781b      	ldrb	r3, [r3, #0]
    caaa:	3301      	adds	r3, #1
    caac:	b2da      	uxtb	r2, r3
    caae:	f24c 3319 	movw	r3, #49945	; 0xc319
    cab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab6:	701a      	strb	r2, [r3, #0]
    cab8:	f24c 3319 	movw	r3, #49945	; 0xc319
    cabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac0:	781b      	ldrb	r3, [r3, #0]
    cac2:	2bff      	cmp	r3, #255	; 0xff
    cac4:	d105      	bne.n	cad2 <send_nav_ref+0x27a>
    cac6:	f24c 3319 	movw	r3, #49945	; 0xc319
    caca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cace:	2200      	movs	r2, #0
    cad0:	701a      	strb	r2, [r3, #0]
    cad2:	f24c 3319 	movw	r3, #49945	; 0xc319
    cad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cada:	781b      	ldrb	r3, [r3, #0]
    cadc:	461a      	mov	r2, r3
    cade:	f648 233c 	movw	r3, #35388	; 0x8a3c
    cae2:	f2c0 0301 	movt	r3, #1
    cae6:	7899      	ldrb	r1, [r3, #2]
    cae8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    caec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf0:	5499      	strb	r1, [r3, r2]
    caf2:	4baf      	ldr	r3, [pc, #700]	; (cdb0 <send_nav_ref+0x558>)
    caf4:	781a      	ldrb	r2, [r3, #0]
    caf6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cafe:	781b      	ldrb	r3, [r3, #0]
    cb00:	4413      	add	r3, r2
    cb02:	b2da      	uxtb	r2, r3
    cb04:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb0c:	701a      	strb	r2, [r3, #0]
    cb0e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb16:	781a      	ldrb	r2, [r3, #0]
    cb18:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb20:	781b      	ldrb	r3, [r3, #0]
    cb22:	4413      	add	r3, r2
    cb24:	b2da      	uxtb	r2, r3
    cb26:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2e:	701a      	strb	r2, [r3, #0]
    cb30:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb38:	781b      	ldrb	r3, [r3, #0]
    cb3a:	3301      	adds	r3, #1
    cb3c:	b2da      	uxtb	r2, r3
    cb3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb46:	701a      	strb	r2, [r3, #0]
    cb48:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	2bff      	cmp	r3, #255	; 0xff
    cb54:	d105      	bne.n	cb62 <send_nav_ref+0x30a>
    cb56:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb5e:	2200      	movs	r2, #0
    cb60:	701a      	strb	r2, [r3, #0]
    cb62:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb6a:	781b      	ldrb	r3, [r3, #0]
    cb6c:	461a      	mov	r2, r3
    cb6e:	f648 233c 	movw	r3, #35388	; 0x8a3c
    cb72:	f2c0 0301 	movt	r3, #1
    cb76:	78d9      	ldrb	r1, [r3, #3]
    cb78:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb80:	5499      	strb	r1, [r3, r2]
    cb82:	4b8c      	ldr	r3, [pc, #560]	; (cdb4 <send_nav_ref+0x55c>)
    cb84:	781a      	ldrb	r2, [r3, #0]
    cb86:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb8e:	781b      	ldrb	r3, [r3, #0]
    cb90:	4413      	add	r3, r2
    cb92:	b2da      	uxtb	r2, r3
    cb94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb9c:	701a      	strb	r2, [r3, #0]
    cb9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba6:	781a      	ldrb	r2, [r3, #0]
    cba8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb0:	781b      	ldrb	r3, [r3, #0]
    cbb2:	4413      	add	r3, r2
    cbb4:	b2da      	uxtb	r2, r3
    cbb6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbbe:	701a      	strb	r2, [r3, #0]
    cbc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc8:	781b      	ldrb	r3, [r3, #0]
    cbca:	3301      	adds	r3, #1
    cbcc:	b2da      	uxtb	r2, r3
    cbce:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd6:	701a      	strb	r2, [r3, #0]
    cbd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe0:	781b      	ldrb	r3, [r3, #0]
    cbe2:	2bff      	cmp	r3, #255	; 0xff
    cbe4:	d105      	bne.n	cbf2 <send_nav_ref+0x39a>
    cbe6:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbee:	2200      	movs	r2, #0
    cbf0:	701a      	strb	r2, [r3, #0]
    cbf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbfa:	781b      	ldrb	r3, [r3, #0]
    cbfc:	461a      	mov	r2, r3
    cbfe:	f648 2340 	movw	r3, #35392	; 0x8a40
    cc02:	f2c0 0301 	movt	r3, #1
    cc06:	7819      	ldrb	r1, [r3, #0]
    cc08:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc10:	5499      	strb	r1, [r3, r2]
    cc12:	f648 2340 	movw	r3, #35392	; 0x8a40
    cc16:	f2c0 0301 	movt	r3, #1
    cc1a:	781a      	ldrb	r2, [r3, #0]
    cc1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc24:	781b      	ldrb	r3, [r3, #0]
    cc26:	4413      	add	r3, r2
    cc28:	b2da      	uxtb	r2, r3
    cc2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc32:	701a      	strb	r2, [r3, #0]
    cc34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc3c:	781a      	ldrb	r2, [r3, #0]
    cc3e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc46:	781b      	ldrb	r3, [r3, #0]
    cc48:	4413      	add	r3, r2
    cc4a:	b2da      	uxtb	r2, r3
    cc4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc54:	701a      	strb	r2, [r3, #0]
    cc56:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc5e:	781b      	ldrb	r3, [r3, #0]
    cc60:	3301      	adds	r3, #1
    cc62:	b2da      	uxtb	r2, r3
    cc64:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc6c:	701a      	strb	r2, [r3, #0]
    cc6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc76:	781b      	ldrb	r3, [r3, #0]
    cc78:	2bff      	cmp	r3, #255	; 0xff
    cc7a:	d105      	bne.n	cc88 <send_nav_ref+0x430>
    cc7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc84:	2200      	movs	r2, #0
    cc86:	701a      	strb	r2, [r3, #0]
    cc88:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc90:	781b      	ldrb	r3, [r3, #0]
    cc92:	461a      	mov	r2, r3
    cc94:	f648 2340 	movw	r3, #35392	; 0x8a40
    cc98:	f2c0 0301 	movt	r3, #1
    cc9c:	7859      	ldrb	r1, [r3, #1]
    cc9e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca6:	5499      	strb	r1, [r3, r2]
    cca8:	4b43      	ldr	r3, [pc, #268]	; (cdb8 <send_nav_ref+0x560>)
    ccaa:	781a      	ldrb	r2, [r3, #0]
    ccac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ccb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb4:	781b      	ldrb	r3, [r3, #0]
    ccb6:	4413      	add	r3, r2
    ccb8:	b2da      	uxtb	r2, r3
    ccba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ccbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc2:	701a      	strb	r2, [r3, #0]
    ccc4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ccc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cccc:	781a      	ldrb	r2, [r3, #0]
    ccce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ccd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd6:	781b      	ldrb	r3, [r3, #0]
    ccd8:	4413      	add	r3, r2
    ccda:	b2da      	uxtb	r2, r3
    ccdc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce4:	701a      	strb	r2, [r3, #0]
    cce6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccee:	781b      	ldrb	r3, [r3, #0]
    ccf0:	3301      	adds	r3, #1
    ccf2:	b2da      	uxtb	r2, r3
    ccf4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccfc:	701a      	strb	r2, [r3, #0]
    ccfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd06:	781b      	ldrb	r3, [r3, #0]
    cd08:	2bff      	cmp	r3, #255	; 0xff
    cd0a:	d105      	bne.n	cd18 <send_nav_ref+0x4c0>
    cd0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd14:	2200      	movs	r2, #0
    cd16:	701a      	strb	r2, [r3, #0]
    cd18:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd20:	781b      	ldrb	r3, [r3, #0]
    cd22:	461a      	mov	r2, r3
    cd24:	f648 2340 	movw	r3, #35392	; 0x8a40
    cd28:	f2c0 0301 	movt	r3, #1
    cd2c:	7899      	ldrb	r1, [r3, #2]
    cd2e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd36:	5499      	strb	r1, [r3, r2]
    cd38:	4b20      	ldr	r3, [pc, #128]	; (cdbc <send_nav_ref+0x564>)
    cd3a:	781a      	ldrb	r2, [r3, #0]
    cd3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd44:	781b      	ldrb	r3, [r3, #0]
    cd46:	4413      	add	r3, r2
    cd48:	b2da      	uxtb	r2, r3
    cd4a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd52:	701a      	strb	r2, [r3, #0]
    cd54:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5c:	781a      	ldrb	r2, [r3, #0]
    cd5e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd66:	781b      	ldrb	r3, [r3, #0]
    cd68:	4413      	add	r3, r2
    cd6a:	b2da      	uxtb	r2, r3
    cd6c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd74:	701a      	strb	r2, [r3, #0]
    cd76:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	3301      	adds	r3, #1
    cd82:	b2da      	uxtb	r2, r3
    cd84:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8c:	701a      	strb	r2, [r3, #0]
    cd8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd96:	781b      	ldrb	r3, [r3, #0]
    cd98:	2bff      	cmp	r3, #255	; 0xff
    cd9a:	d111      	bne.n	cdc0 <send_nav_ref+0x568>
    cd9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda4:	2200      	movs	r2, #0
    cda6:	701a      	strb	r2, [r3, #0]
    cda8:	e00a      	b.n	cdc0 <send_nav_ref+0x568>
    cdaa:	bf00      	nop
    cdac:	00018a3d 	.word	0x00018a3d
    cdb0:	00018a3e 	.word	0x00018a3e
    cdb4:	00018a3f 	.word	0x00018a3f
    cdb8:	00018a41 	.word	0x00018a41
    cdbc:	00018a42 	.word	0x00018a42
    cdc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc8:	781b      	ldrb	r3, [r3, #0]
    cdca:	461a      	mov	r2, r3
    cdcc:	f648 2340 	movw	r3, #35392	; 0x8a40
    cdd0:	f2c0 0301 	movt	r3, #1
    cdd4:	78d9      	ldrb	r1, [r3, #3]
    cdd6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cdda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdde:	5499      	strb	r1, [r3, r2]
    cde0:	4b79      	ldr	r3, [pc, #484]	; (cfc8 <send_nav_ref+0x770>)
    cde2:	781a      	ldrb	r2, [r3, #0]
    cde4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdec:	781b      	ldrb	r3, [r3, #0]
    cdee:	4413      	add	r3, r2
    cdf0:	b2da      	uxtb	r2, r3
    cdf2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cdf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdfa:	701a      	strb	r2, [r3, #0]
    cdfc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce04:	781a      	ldrb	r2, [r3, #0]
    ce06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce0e:	781b      	ldrb	r3, [r3, #0]
    ce10:	4413      	add	r3, r2
    ce12:	b2da      	uxtb	r2, r3
    ce14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce1c:	701a      	strb	r2, [r3, #0]
    ce1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce26:	781b      	ldrb	r3, [r3, #0]
    ce28:	3301      	adds	r3, #1
    ce2a:	b2da      	uxtb	r2, r3
    ce2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce34:	701a      	strb	r2, [r3, #0]
    ce36:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce3e:	781b      	ldrb	r3, [r3, #0]
    ce40:	2bff      	cmp	r3, #255	; 0xff
    ce42:	d105      	bne.n	ce50 <send_nav_ref+0x5f8>
    ce44:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce4c:	2200      	movs	r2, #0
    ce4e:	701a      	strb	r2, [r3, #0]
    ce50:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce58:	781b      	ldrb	r3, [r3, #0]
    ce5a:	461a      	mov	r2, r3
    ce5c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce64:	7819      	ldrb	r1, [r3, #0]
    ce66:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ce6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce6e:	5499      	strb	r1, [r3, r2]
    ce70:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce78:	781b      	ldrb	r3, [r3, #0]
    ce7a:	3301      	adds	r3, #1
    ce7c:	b2da      	uxtb	r2, r3
    ce7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce86:	701a      	strb	r2, [r3, #0]
    ce88:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce90:	781b      	ldrb	r3, [r3, #0]
    ce92:	2bff      	cmp	r3, #255	; 0xff
    ce94:	d105      	bne.n	cea2 <send_nav_ref+0x64a>
    ce96:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce9e:	2200      	movs	r2, #0
    cea0:	701a      	strb	r2, [r3, #0]
    cea2:	f24c 3319 	movw	r3, #49945	; 0xc319
    cea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceaa:	781b      	ldrb	r3, [r3, #0]
    ceac:	461a      	mov	r2, r3
    ceae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ceb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceb6:	7819      	ldrb	r1, [r3, #0]
    ceb8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec0:	5499      	strb	r1, [r3, r2]
    cec2:	f24c 3319 	movw	r3, #49945	; 0xc319
    cec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceca:	781b      	ldrb	r3, [r3, #0]
    cecc:	3301      	adds	r3, #1
    cece:	b2da      	uxtb	r2, r3
    ced0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ced4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced8:	701a      	strb	r2, [r3, #0]
    ceda:	f24c 3319 	movw	r3, #49945	; 0xc319
    cede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee2:	781b      	ldrb	r3, [r3, #0]
    cee4:	2bff      	cmp	r3, #255	; 0xff
    cee6:	d105      	bne.n	cef4 <send_nav_ref+0x69c>
    cee8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ceec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef0:	2200      	movs	r2, #0
    cef2:	701a      	strb	r2, [r3, #0]
    cef4:	f242 0339 	movw	r3, #8249	; 0x2039
    cef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cefc:	781b      	ldrb	r3, [r3, #0]
    cefe:	b2db      	uxtb	r3, r3
    cf00:	f003 0310 	and.w	r3, r3, #16
    cf04:	2b00      	cmp	r3, #0
    cf06:	d15a      	bne.n	cfbe <send_nav_ref+0x766>
    cf08:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf10:	781b      	ldrb	r3, [r3, #0]
    cf12:	b2db      	uxtb	r3, r3
    cf14:	461a      	mov	r2, r3
    cf16:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cf1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf1e:	5c9a      	ldrb	r2, [r3, r2]
    cf20:	f24c 431b 	movw	r3, #50203	; 0xc41b
    cf24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf28:	701a      	strb	r2, [r3, #0]
    cf2a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    cf2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf32:	2200      	movs	r2, #0
    cf34:	701a      	strb	r2, [r3, #0]
    cf36:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf3e:	781b      	ldrb	r3, [r3, #0]
    cf40:	b2db      	uxtb	r3, r3
    cf42:	3301      	adds	r3, #1
    cf44:	b2da      	uxtb	r2, r3
    cf46:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf4e:	701a      	strb	r2, [r3, #0]
    cf50:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf58:	781b      	ldrb	r3, [r3, #0]
    cf5a:	b2db      	uxtb	r3, r3
    cf5c:	2bff      	cmp	r3, #255	; 0xff
    cf5e:	d105      	bne.n	cf6c <send_nav_ref+0x714>
    cf60:	f24c 331a 	movw	r3, #49946	; 0xc31a
    cf64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf68:	2200      	movs	r2, #0
    cf6a:	701a      	strb	r2, [r3, #0]
    cf6c:	f242 0338 	movw	r3, #8248	; 0x2038
    cf70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf74:	f242 0238 	movw	r2, #8248	; 0x2038
    cf78:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf7c:	7812      	ldrb	r2, [r2, #0]
    cf7e:	b2d2      	uxtb	r2, r2
    cf80:	f042 0201 	orr.w	r2, r2, #1
    cf84:	b2d2      	uxtb	r2, r2
    cf86:	701a      	strb	r2, [r3, #0]
    cf88:	f242 0339 	movw	r3, #8249	; 0x2039
    cf8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf90:	f242 0239 	movw	r2, #8249	; 0x2039
    cf94:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf98:	7812      	ldrb	r2, [r2, #0]
    cf9a:	b2d2      	uxtb	r2, r2
    cf9c:	f042 0210 	orr.w	r2, r2, #16
    cfa0:	b2d2      	uxtb	r2, r2
    cfa2:	701a      	strb	r2, [r3, #0]
    cfa4:	e00b      	b.n	cfbe <send_nav_ref+0x766>
    cfa6:	f24c 3318 	movw	r3, #49944	; 0xc318
    cfaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfae:	781b      	ldrb	r3, [r3, #0]
    cfb0:	3301      	adds	r3, #1
    cfb2:	b2da      	uxtb	r2, r3
    cfb4:	f24c 3318 	movw	r3, #49944	; 0xc318
    cfb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfbc:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cfbe:	46bd      	mov	sp, r7
    cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfc4:	4770      	bx	lr
    cfc6:	bf00      	nop
    cfc8:	00018a43 	.word	0x00018a43

0000cfcc <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cfcc:	b480      	push	{r7}
    cfce:	b083      	sub	sp, #12
    cfd0:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cfd2:	f24c 4320 	movw	r3, #50208	; 0xc420
    cfd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfda:	8a1b      	ldrh	r3, [r3, #16]
    cfdc:	b21b      	sxth	r3, r3
    cfde:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cfe2:	db0d      	blt.n	d000 <inflight_calib_mode_update+0x34>
    cfe4:	f24c 4320 	movw	r3, #50208	; 0xc420
    cfe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfec:	8a1b      	ldrh	r3, [r3, #16]
    cfee:	b21a      	sxth	r2, r3
    cff0:	f640 437f 	movw	r3, #3199	; 0xc7f
    cff4:	429a      	cmp	r2, r3
    cff6:	bfd4      	ite	le
    cff8:	2300      	movle	r3, #0
    cffa:	2301      	movgt	r3, #1
    cffc:	b2db      	uxtb	r3, r3
    cffe:	e000      	b.n	d002 <inflight_calib_mode_update+0x36>
    d000:	2302      	movs	r3, #2
    d002:	71fb      	strb	r3, [r7, #7]
    d004:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d00c:	781b      	ldrb	r3, [r3, #0]
    d00e:	79fa      	ldrb	r2, [r7, #7]
    d010:	429a      	cmp	r2, r3
    d012:	d007      	beq.n	d024 <inflight_calib_mode_update+0x58>
    d014:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d01c:	79fa      	ldrb	r2, [r7, #7]
    d01e:	701a      	strb	r2, [r3, #0]
    d020:	2301      	movs	r3, #1
    d022:	e000      	b.n	d026 <inflight_calib_mode_update+0x5a>
    d024:	2300      	movs	r3, #0
}
    d026:	4618      	mov	r0, r3
    d028:	370c      	adds	r7, #12
    d02a:	46bd      	mov	sp, r7
    d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d030:	4770      	bx	lr
    d032:	bf00      	nop

0000d034 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    d034:	b580      	push	{r7, lr}
    d036:	b082      	sub	sp, #8
    d038:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    d03a:	f24c 434e 	movw	r3, #50254	; 0xc44e
    d03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d042:	2201      	movs	r2, #1
    d044:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d046:	f24c 434e 	movw	r3, #50254	; 0xc44e
    d04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d04e:	781b      	ldrb	r3, [r3, #0]
    d050:	b2db      	uxtb	r3, r3
    d052:	2b00      	cmp	r3, #0
    d054:	f000 83c0 	beq.w	d7d8 <radio_control_task+0x7a4>
    uint8_t mode_changed = FALSE;
    d058:	2300      	movs	r3, #0
    d05a:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d05c:	f7fa fa4c 	bl	74f8 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d060:	4b3e      	ldr	r3, [pc, #248]	; (d15c <radio_control_task+0x128>)
    d062:	781b      	ldrb	r3, [r3, #0]
    d064:	b2db      	uxtb	r3, r3
    d066:	f003 0302 	and.w	r3, r3, #2
    d06a:	2b00      	cmp	r3, #0
    d06c:	d00d      	beq.n	d08a <radio_control_task+0x56>
    d06e:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d076:	781b      	ldrb	r3, [r3, #0]
    d078:	2b01      	cmp	r3, #1
    d07a:	d00d      	beq.n	d098 <radio_control_task+0x64>
    d07c:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d084:	781b      	ldrb	r3, [r3, #0]
    d086:	2b00      	cmp	r3, #0
    d088:	d006      	beq.n	d098 <radio_control_task+0x64>
    d08a:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
    d08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d092:	781b      	ldrb	r3, [r3, #0]
    d094:	2b00      	cmp	r3, #0
    d096:	d007      	beq.n	d0a8 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d098:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0a0:	2203      	movs	r2, #3
    d0a2:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d0a4:	2301      	movs	r3, #1
    d0a6:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    d0a8:	4b2c      	ldr	r3, [pc, #176]	; (d15c <radio_control_task+0x128>)
    d0aa:	781b      	ldrb	r3, [r3, #0]
    d0ac:	b2db      	uxtb	r3, r3
    d0ae:	f003 0304 	and.w	r3, r3, #4
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	d023      	beq.n	d0fe <radio_control_task+0xca>
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d0b6:	f7fa f8f9 	bl	72ac <pprz_mode_update>
    d0ba:	4603      	mov	r3, r0
    d0bc:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d0be:	79fa      	ldrb	r2, [r7, #7]
    d0c0:	79bb      	ldrb	r3, [r7, #6]
    d0c2:	4313      	orrs	r3, r2
    d0c4:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d0c6:	f7fa f93d 	bl	7344 <ir_estim_mode_update>
    d0ca:	4603      	mov	r3, r0
    d0cc:	461a      	mov	r2, r3
    d0ce:	79fb      	ldrb	r3, [r7, #7]
    d0d0:	4313      	orrs	r3, r2
    d0d2:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d0d4:	f7ff ff7a 	bl	cfcc <inflight_calib_mode_update>
    d0d8:	4603      	mov	r3, r0
    d0da:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d0dc:	797b      	ldrb	r3, [r7, #5]
    d0de:	2b00      	cmp	r3, #0
    d0e0:	d102      	bne.n	d0e8 <radio_control_task+0xb4>
    d0e2:	79bb      	ldrb	r3, [r7, #6]
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d001      	beq.n	d0ec <radio_control_task+0xb8>
    d0e8:	2301      	movs	r3, #1
    d0ea:	e000      	b.n	d0ee <radio_control_task+0xba>
    d0ec:	2300      	movs	r3, #0
    d0ee:	b2db      	uxtb	r3, r3
    d0f0:	4618      	mov	r0, r3
    d0f2:	f008 fba1 	bl	15838 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d0f6:	79fa      	ldrb	r2, [r7, #7]
    d0f8:	797b      	ldrb	r3, [r7, #5]
    d0fa:	4313      	orrs	r3, r2
    d0fc:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d0fe:	f7fa f949 	bl	7394 <mcu1_status_update>
    d102:	4603      	mov	r3, r0
    d104:	461a      	mov	r2, r3
    d106:	79fb      	ldrb	r3, [r7, #7]
    d108:	4313      	orrs	r3, r2
    d10a:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d10c:	2301      	movs	r3, #1
    d10e:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d110:	79fb      	ldrb	r3, [r7, #7]
    d112:	2b00      	cmp	r3, #0
    d114:	f000 82bd 	beq.w	d692 <radio_control_task+0x65e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d118:	f24c 3319 	movw	r3, #49945	; 0xc319
    d11c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d120:	781a      	ldrb	r2, [r3, #0]
    d122:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d12a:	781b      	ldrb	r3, [r3, #0]
    d12c:	b2db      	uxtb	r3, r3
    d12e:	429a      	cmp	r2, r3
    d130:	d316      	bcc.n	d160 <radio_control_task+0x12c>
    d132:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d13a:	781b      	ldrb	r3, [r3, #0]
    d13c:	b2db      	uxtb	r3, r3
    d13e:	461a      	mov	r2, r3
    d140:	f24c 3319 	movw	r3, #49945	; 0xc319
    d144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d148:	781b      	ldrb	r3, [r3, #0]
    d14a:	1ad3      	subs	r3, r2, r3
    d14c:	33ff      	adds	r3, #255	; 0xff
    d14e:	2b09      	cmp	r3, #9
    d150:	bfd4      	ite	le
    d152:	2300      	movle	r3, #0
    d154:	2301      	movgt	r3, #1
    d156:	b2db      	uxtb	r3, r3
    d158:	e014      	b.n	d184 <radio_control_task+0x150>
    d15a:	bf00      	nop
    d15c:	2004c433 	.word	0x2004c433
    d160:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d168:	781b      	ldrb	r3, [r3, #0]
    d16a:	b2db      	uxtb	r3, r3
    d16c:	461a      	mov	r2, r3
    d16e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d176:	781b      	ldrb	r3, [r3, #0]
    d178:	1ad3      	subs	r3, r2, r3
    d17a:	2b09      	cmp	r3, #9
    d17c:	bfd4      	ite	le
    d17e:	2300      	movle	r3, #0
    d180:	2301      	movgt	r3, #1
    d182:	b2db      	uxtb	r3, r3
    d184:	2b00      	cmp	r3, #0
    d186:	f000 8278 	beq.w	d67a <radio_control_task+0x646>
    d18a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d192:	781b      	ldrb	r3, [r3, #0]
    d194:	461a      	mov	r2, r3
    d196:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d19e:	2105      	movs	r1, #5
    d1a0:	5499      	strb	r1, [r3, r2]
    d1a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1aa:	781b      	ldrb	r3, [r3, #0]
    d1ac:	3301      	adds	r3, #1
    d1ae:	b2da      	uxtb	r2, r3
    d1b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1b8:	701a      	strb	r2, [r3, #0]
    d1ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c2:	781b      	ldrb	r3, [r3, #0]
    d1c4:	2bff      	cmp	r3, #255	; 0xff
    d1c6:	d105      	bne.n	d1d4 <radio_control_task+0x1a0>
    d1c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d0:	2200      	movs	r2, #0
    d1d2:	701a      	strb	r2, [r3, #0]
    d1d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1dc:	781b      	ldrb	r3, [r3, #0]
    d1de:	461a      	mov	r2, r3
    d1e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e8:	210b      	movs	r1, #11
    d1ea:	5499      	strb	r1, [r3, r2]
    d1ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f4:	781b      	ldrb	r3, [r3, #0]
    d1f6:	3301      	adds	r3, #1
    d1f8:	b2da      	uxtb	r2, r3
    d1fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    d1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d202:	701a      	strb	r2, [r3, #0]
    d204:	f24c 3319 	movw	r3, #49945	; 0xc319
    d208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d20c:	781b      	ldrb	r3, [r3, #0]
    d20e:	2bff      	cmp	r3, #255	; 0xff
    d210:	d105      	bne.n	d21e <radio_control_task+0x1ea>
    d212:	f24c 3319 	movw	r3, #49945	; 0xc319
    d216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d21a:	2200      	movs	r2, #0
    d21c:	701a      	strb	r2, [r3, #0]
    d21e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d226:	220b      	movs	r2, #11
    d228:	701a      	strb	r2, [r3, #0]
    d22a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d232:	220b      	movs	r2, #11
    d234:	701a      	strb	r2, [r3, #0]
    d236:	f24c 3319 	movw	r3, #49945	; 0xc319
    d23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d23e:	781b      	ldrb	r3, [r3, #0]
    d240:	461a      	mov	r2, r3
    d242:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d24a:	7819      	ldrb	r1, [r3, #0]
    d24c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d254:	5499      	strb	r1, [r3, r2]
    d256:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d25e:	781a      	ldrb	r2, [r3, #0]
    d260:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d268:	781b      	ldrb	r3, [r3, #0]
    d26a:	4413      	add	r3, r2
    d26c:	b2da      	uxtb	r2, r3
    d26e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d276:	701a      	strb	r2, [r3, #0]
    d278:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d280:	781a      	ldrb	r2, [r3, #0]
    d282:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d28a:	781b      	ldrb	r3, [r3, #0]
    d28c:	4413      	add	r3, r2
    d28e:	b2da      	uxtb	r2, r3
    d290:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d298:	701a      	strb	r2, [r3, #0]
    d29a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a2:	781b      	ldrb	r3, [r3, #0]
    d2a4:	3301      	adds	r3, #1
    d2a6:	b2da      	uxtb	r2, r3
    d2a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b0:	701a      	strb	r2, [r3, #0]
    d2b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ba:	781b      	ldrb	r3, [r3, #0]
    d2bc:	2bff      	cmp	r3, #255	; 0xff
    d2be:	d105      	bne.n	d2cc <radio_control_task+0x298>
    d2c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c8:	2200      	movs	r2, #0
    d2ca:	701a      	strb	r2, [r3, #0]
    d2cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d4:	781b      	ldrb	r3, [r3, #0]
    d2d6:	461a      	mov	r2, r3
    d2d8:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e0:	7819      	ldrb	r1, [r3, #0]
    d2e2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ea:	5499      	strb	r1, [r3, r2]
    d2ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f4:	781a      	ldrb	r2, [r3, #0]
    d2f6:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2fe:	781b      	ldrb	r3, [r3, #0]
    d300:	4413      	add	r3, r2
    d302:	b2da      	uxtb	r2, r3
    d304:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d30c:	701a      	strb	r2, [r3, #0]
    d30e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d316:	781a      	ldrb	r2, [r3, #0]
    d318:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d320:	781b      	ldrb	r3, [r3, #0]
    d322:	4413      	add	r3, r2
    d324:	b2da      	uxtb	r2, r3
    d326:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d32e:	701a      	strb	r2, [r3, #0]
    d330:	f24c 3319 	movw	r3, #49945	; 0xc319
    d334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d338:	781b      	ldrb	r3, [r3, #0]
    d33a:	3301      	adds	r3, #1
    d33c:	b2da      	uxtb	r2, r3
    d33e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d346:	701a      	strb	r2, [r3, #0]
    d348:	f24c 3319 	movw	r3, #49945	; 0xc319
    d34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d350:	781b      	ldrb	r3, [r3, #0]
    d352:	2bff      	cmp	r3, #255	; 0xff
    d354:	d105      	bne.n	d362 <radio_control_task+0x32e>
    d356:	f24c 3319 	movw	r3, #49945	; 0xc319
    d35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35e:	2200      	movs	r2, #0
    d360:	701a      	strb	r2, [r3, #0]
    d362:	f24c 3319 	movw	r3, #49945	; 0xc319
    d366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d36a:	781b      	ldrb	r3, [r3, #0]
    d36c:	461a      	mov	r2, r3
    d36e:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d376:	7819      	ldrb	r1, [r3, #0]
    d378:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d380:	5499      	strb	r1, [r3, r2]
    d382:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d38a:	781a      	ldrb	r2, [r3, #0]
    d38c:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d394:	781b      	ldrb	r3, [r3, #0]
    d396:	4413      	add	r3, r2
    d398:	b2da      	uxtb	r2, r3
    d39a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a2:	701a      	strb	r2, [r3, #0]
    d3a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ac:	781a      	ldrb	r2, [r3, #0]
    d3ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b6:	781b      	ldrb	r3, [r3, #0]
    d3b8:	4413      	add	r3, r2
    d3ba:	b2da      	uxtb	r2, r3
    d3bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c4:	701a      	strb	r2, [r3, #0]
    d3c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ce:	781b      	ldrb	r3, [r3, #0]
    d3d0:	3301      	adds	r3, #1
    d3d2:	b2da      	uxtb	r2, r3
    d3d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3dc:	701a      	strb	r2, [r3, #0]
    d3de:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e6:	781b      	ldrb	r3, [r3, #0]
    d3e8:	2bff      	cmp	r3, #255	; 0xff
    d3ea:	d105      	bne.n	d3f8 <radio_control_task+0x3c4>
    d3ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f4:	2200      	movs	r2, #0
    d3f6:	701a      	strb	r2, [r3, #0]
    d3f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d400:	781b      	ldrb	r3, [r3, #0]
    d402:	461a      	mov	r2, r3
    d404:	f24c 3303 	movw	r3, #49923	; 0xc303
    d408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d40c:	7819      	ldrb	r1, [r3, #0]
    d40e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d416:	5499      	strb	r1, [r3, r2]
    d418:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d420:	781a      	ldrb	r2, [r3, #0]
    d422:	f24c 3303 	movw	r3, #49923	; 0xc303
    d426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d42a:	781b      	ldrb	r3, [r3, #0]
    d42c:	4413      	add	r3, r2
    d42e:	b2da      	uxtb	r2, r3
    d430:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d438:	701a      	strb	r2, [r3, #0]
    d43a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d442:	781a      	ldrb	r2, [r3, #0]
    d444:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d44c:	781b      	ldrb	r3, [r3, #0]
    d44e:	4413      	add	r3, r2
    d450:	b2da      	uxtb	r2, r3
    d452:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d45a:	701a      	strb	r2, [r3, #0]
    d45c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d464:	781b      	ldrb	r3, [r3, #0]
    d466:	3301      	adds	r3, #1
    d468:	b2da      	uxtb	r2, r3
    d46a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d472:	701a      	strb	r2, [r3, #0]
    d474:	f24c 3319 	movw	r3, #49945	; 0xc319
    d478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d47c:	781b      	ldrb	r3, [r3, #0]
    d47e:	2bff      	cmp	r3, #255	; 0xff
    d480:	d105      	bne.n	d48e <radio_control_task+0x45a>
    d482:	f24c 3319 	movw	r3, #49945	; 0xc319
    d486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d48a:	2200      	movs	r2, #0
    d48c:	701a      	strb	r2, [r3, #0]
    d48e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d496:	781b      	ldrb	r3, [r3, #0]
    d498:	461a      	mov	r2, r3
    d49a:	f240 533c 	movw	r3, #1340	; 0x53c
    d49e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4a2:	7819      	ldrb	r1, [r3, #0]
    d4a4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ac:	5499      	strb	r1, [r3, r2]
    d4ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b6:	781a      	ldrb	r2, [r3, #0]
    d4b8:	f240 533c 	movw	r3, #1340	; 0x53c
    d4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4c0:	781b      	ldrb	r3, [r3, #0]
    d4c2:	4413      	add	r3, r2
    d4c4:	b2da      	uxtb	r2, r3
    d4c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ce:	701a      	strb	r2, [r3, #0]
    d4d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d8:	781a      	ldrb	r2, [r3, #0]
    d4da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e2:	781b      	ldrb	r3, [r3, #0]
    d4e4:	4413      	add	r3, r2
    d4e6:	b2da      	uxtb	r2, r3
    d4e8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f0:	701a      	strb	r2, [r3, #0]
    d4f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4fa:	781b      	ldrb	r3, [r3, #0]
    d4fc:	3301      	adds	r3, #1
    d4fe:	b2da      	uxtb	r2, r3
    d500:	f24c 3319 	movw	r3, #49945	; 0xc319
    d504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d508:	701a      	strb	r2, [r3, #0]
    d50a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d512:	781b      	ldrb	r3, [r3, #0]
    d514:	2bff      	cmp	r3, #255	; 0xff
    d516:	d105      	bne.n	d524 <radio_control_task+0x4f0>
    d518:	f24c 3319 	movw	r3, #49945	; 0xc319
    d51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d520:	2200      	movs	r2, #0
    d522:	701a      	strb	r2, [r3, #0]
    d524:	f24c 3319 	movw	r3, #49945	; 0xc319
    d528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d52c:	781b      	ldrb	r3, [r3, #0]
    d52e:	461a      	mov	r2, r3
    d530:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d538:	7819      	ldrb	r1, [r3, #0]
    d53a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d542:	5499      	strb	r1, [r3, r2]
    d544:	f24c 3319 	movw	r3, #49945	; 0xc319
    d548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d54c:	781b      	ldrb	r3, [r3, #0]
    d54e:	3301      	adds	r3, #1
    d550:	b2da      	uxtb	r2, r3
    d552:	f24c 3319 	movw	r3, #49945	; 0xc319
    d556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d55a:	701a      	strb	r2, [r3, #0]
    d55c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d564:	781b      	ldrb	r3, [r3, #0]
    d566:	2bff      	cmp	r3, #255	; 0xff
    d568:	d105      	bne.n	d576 <radio_control_task+0x542>
    d56a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d572:	2200      	movs	r2, #0
    d574:	701a      	strb	r2, [r3, #0]
    d576:	f24c 3319 	movw	r3, #49945	; 0xc319
    d57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d57e:	781b      	ldrb	r3, [r3, #0]
    d580:	461a      	mov	r2, r3
    d582:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d58a:	7819      	ldrb	r1, [r3, #0]
    d58c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d594:	5499      	strb	r1, [r3, r2]
    d596:	f24c 3319 	movw	r3, #49945	; 0xc319
    d59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d59e:	781b      	ldrb	r3, [r3, #0]
    d5a0:	3301      	adds	r3, #1
    d5a2:	b2da      	uxtb	r2, r3
    d5a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ac:	701a      	strb	r2, [r3, #0]
    d5ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b6:	781b      	ldrb	r3, [r3, #0]
    d5b8:	2bff      	cmp	r3, #255	; 0xff
    d5ba:	d105      	bne.n	d5c8 <radio_control_task+0x594>
    d5bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c4:	2200      	movs	r2, #0
    d5c6:	701a      	strb	r2, [r3, #0]
    d5c8:	f242 0339 	movw	r3, #8249	; 0x2039
    d5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d0:	781b      	ldrb	r3, [r3, #0]
    d5d2:	b2db      	uxtb	r3, r3
    d5d4:	f003 0310 	and.w	r3, r3, #16
    d5d8:	2b00      	cmp	r3, #0
    d5da:	d15a      	bne.n	d692 <radio_control_task+0x65e>
    d5dc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5e4:	781b      	ldrb	r3, [r3, #0]
    d5e6:	b2db      	uxtb	r3, r3
    d5e8:	461a      	mov	r2, r3
    d5ea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f2:	5c9a      	ldrb	r2, [r3, r2]
    d5f4:	f24c 431b 	movw	r3, #50203	; 0xc41b
    d5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5fc:	701a      	strb	r2, [r3, #0]
    d5fe:	f24c 431c 	movw	r3, #50204	; 0xc41c
    d602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d606:	2200      	movs	r2, #0
    d608:	701a      	strb	r2, [r3, #0]
    d60a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d612:	781b      	ldrb	r3, [r3, #0]
    d614:	b2db      	uxtb	r3, r3
    d616:	3301      	adds	r3, #1
    d618:	b2da      	uxtb	r2, r3
    d61a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d622:	701a      	strb	r2, [r3, #0]
    d624:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d62c:	781b      	ldrb	r3, [r3, #0]
    d62e:	b2db      	uxtb	r3, r3
    d630:	2bff      	cmp	r3, #255	; 0xff
    d632:	d105      	bne.n	d640 <radio_control_task+0x60c>
    d634:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d63c:	2200      	movs	r2, #0
    d63e:	701a      	strb	r2, [r3, #0]
    d640:	f242 0338 	movw	r3, #8248	; 0x2038
    d644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d648:	f242 0238 	movw	r2, #8248	; 0x2038
    d64c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d650:	7812      	ldrb	r2, [r2, #0]
    d652:	b2d2      	uxtb	r2, r2
    d654:	f042 0201 	orr.w	r2, r2, #1
    d658:	b2d2      	uxtb	r2, r2
    d65a:	701a      	strb	r2, [r3, #0]
    d65c:	f242 0339 	movw	r3, #8249	; 0x2039
    d660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d664:	f242 0239 	movw	r2, #8249	; 0x2039
    d668:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d66c:	7812      	ldrb	r2, [r2, #0]
    d66e:	b2d2      	uxtb	r2, r2
    d670:	f042 0210 	orr.w	r2, r2, #16
    d674:	b2d2      	uxtb	r2, r2
    d676:	701a      	strb	r2, [r3, #0]
    d678:	e00b      	b.n	d692 <radio_control_task+0x65e>
    d67a:	f24c 3318 	movw	r3, #49944	; 0xc318
    d67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d682:	781b      	ldrb	r3, [r3, #0]
    d684:	3301      	adds	r3, #1
    d686:	b2da      	uxtb	r2, r3
    d688:	f24c 3318 	movw	r3, #49944	; 0xc318
    d68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d690:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d692:	f24c 4320 	movw	r3, #50208	; 0xc420
    d696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d69a:	885b      	ldrh	r3, [r3, #2]
    d69c:	b21b      	sxth	r3, r3
    d69e:	4618      	mov	r0, r3
    d6a0:	f00a fe82 	bl	183a8 <__aeabi_i2f>
    d6a4:	4603      	mov	r3, r0
    d6a6:	4618      	mov	r0, r3
    d6a8:	f04f 0100 	mov.w	r1, #0
    d6ac:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d6b0:	f00a ff82 	bl	185b8 <__aeabi_fdiv>
    d6b4:	4603      	mov	r3, r0
    d6b6:	4618      	mov	r0, r3
    d6b8:	f00a fa36 	bl	17b28 <__aeabi_f2d>
    d6bc:	4602      	mov	r2, r0
    d6be:	460b      	mov	r3, r1
    d6c0:	4610      	mov	r0, r2
    d6c2:	4619      	mov	r1, r3
    d6c4:	a346      	add	r3, pc, #280	; (adr r3, d7e0 <radio_control_task+0x7ac>)
    d6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d6ca:	f00a fa81 	bl	17bd0 <__aeabi_dmul>
    d6ce:	4602      	mov	r2, r0
    d6d0:	460b      	mov	r3, r1
    d6d2:	4610      	mov	r0, r2
    d6d4:	4619      	mov	r1, r3
    d6d6:	f04f 0200 	mov.w	r2, #0
    d6da:	f04f 0300 	mov.w	r3, #0
    d6de:	f00a f8c5 	bl	1786c <__adddf3>
    d6e2:	4602      	mov	r2, r0
    d6e4:	460b      	mov	r3, r1
    d6e6:	4610      	mov	r0, r2
    d6e8:	4619      	mov	r1, r3
    d6ea:	f00a fd53 	bl	18194 <__aeabi_d2f>
    d6ee:	4602      	mov	r2, r0
    d6f0:	f24c 6344 	movw	r3, #50756	; 0xc644
    d6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f8:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d6fa:	f24c 4320 	movw	r3, #50208	; 0xc420
    d6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d702:	889b      	ldrh	r3, [r3, #4]
    d704:	b21b      	sxth	r3, r3
    d706:	4618      	mov	r0, r3
    d708:	f00a fe4e 	bl	183a8 <__aeabi_i2f>
    d70c:	4603      	mov	r3, r0
    d70e:	4618      	mov	r0, r3
    d710:	f04f 0100 	mov.w	r1, #0
    d714:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d718:	f00a ff4e 	bl	185b8 <__aeabi_fdiv>
    d71c:	4603      	mov	r3, r0
    d71e:	4618      	mov	r0, r3
    d720:	f00a fa02 	bl	17b28 <__aeabi_f2d>
    d724:	4602      	mov	r2, r0
    d726:	460b      	mov	r3, r1
    d728:	4610      	mov	r0, r2
    d72a:	4619      	mov	r1, r3
    d72c:	f04f 0200 	mov.w	r2, #0
    d730:	f04f 0300 	mov.w	r3, #0
    d734:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d738:	f00a fa4a 	bl	17bd0 <__aeabi_dmul>
    d73c:	4602      	mov	r2, r0
    d73e:	460b      	mov	r3, r1
    d740:	4610      	mov	r0, r2
    d742:	4619      	mov	r1, r3
    d744:	f04f 0200 	mov.w	r2, #0
    d748:	f04f 0300 	mov.w	r3, #0
    d74c:	f00a f88e 	bl	1786c <__adddf3>
    d750:	4602      	mov	r2, r0
    d752:	460b      	mov	r3, r1
    d754:	4610      	mov	r0, r2
    d756:	4619      	mov	r1, r3
    d758:	f00a fd1c 	bl	18194 <__aeabi_d2f>
    d75c:	4602      	mov	r2, r0
    d75e:	f24c 6348 	movw	r3, #50760	; 0xc648
    d762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d766:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d768:	f24c 4320 	movw	r3, #50208	; 0xc420
    d76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d770:	881a      	ldrh	r2, [r3, #0]
    d772:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d77a:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d77c:	f24c 4320 	movw	r3, #50208	; 0xc420
    d780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d784:	7c9a      	ldrb	r2, [r3, #18]
    d786:	f24c 3304 	movw	r3, #49924	; 0xc304
    d78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d78e:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d790:	f24c 4320 	movw	r3, #50208	; 0xc420
    d794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d798:	7d5a      	ldrb	r2, [r3, #21]
    d79a:	f24c 3302 	movw	r3, #49922	; 0xc302
    d79e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7a2:	701a      	strb	r2, [r3, #0]

    events_update();
    d7a4:	f7f9 fe26 	bl	73f4 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d7a8:	f7f8 fc26 	bl	5ff8 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d7ac:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b4:	781b      	ldrb	r3, [r3, #0]
    d7b6:	2b02      	cmp	r3, #2
    d7b8:	d10e      	bne.n	d7d8 <radio_control_task+0x7a4>
    d7ba:	f24c 4320 	movw	r3, #50208	; 0xc420
    d7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c2:	881b      	ldrh	r3, [r3, #0]
    d7c4:	b21b      	sxth	r3, r3
    d7c6:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d7ca:	dd05      	ble.n	d7d8 <radio_control_task+0x7a4>
	launch = TRUE;
    d7cc:	f24c 3310 	movw	r3, #49936	; 0xc310
    d7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d4:	2201      	movs	r2, #1
    d7d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d7d8:	3708      	adds	r7, #8
    d7da:	46bd      	mov	sp, r7
    d7dc:	bd80      	pop	{r7, pc}
    d7de:	bf00      	nop
    d7e0:	33333333 	.word	0x33333333
    d7e4:	bfe33333 	.word	0xbfe33333

0000d7e8 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d7e8:	b580      	push	{r7, lr}
    d7ea:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d7ec:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    d7f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f4:	2203      	movs	r2, #3
    d7f6:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d7f8:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d800:	781b      	ldrb	r3, [r3, #0]
    d802:	2b03      	cmp	r3, #3
    d804:	d102      	bne.n	d80c <navigation_update+0x24>
    nav_home();
    d806:	f007 fa9b 	bl	14d40 <nav_home>
    d80a:	e001      	b.n	d810 <navigation_update+0x28>
  else
    nav_update();
    d80c:	f007 fabe 	bl	14d8c <nav_update>
}
    d810:	bd80      	pop	{r7, pc}
    d812:	bf00      	nop

0000d814 <send_nav_values>:

void send_nav_values(void){
    d814:	b480      	push	{r7}
    d816:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d818:	f24c 3319 	movw	r3, #49945	; 0xc319
    d81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d820:	781a      	ldrb	r2, [r3, #0]
    d822:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d82a:	781b      	ldrb	r3, [r3, #0]
    d82c:	b2db      	uxtb	r3, r3
    d82e:	429a      	cmp	r2, r3
    d830:	d313      	bcc.n	d85a <send_nav_values+0x46>
    d832:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83a:	781b      	ldrb	r3, [r3, #0]
    d83c:	b2db      	uxtb	r3, r3
    d83e:	461a      	mov	r2, r3
    d840:	f24c 3319 	movw	r3, #49945	; 0xc319
    d844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d848:	781b      	ldrb	r3, [r3, #0]
    d84a:	1ad3      	subs	r3, r2, r3
    d84c:	33ff      	adds	r3, #255	; 0xff
    d84e:	2b1e      	cmp	r3, #30
    d850:	bfd4      	ite	le
    d852:	2300      	movle	r3, #0
    d854:	2301      	movgt	r3, #1
    d856:	b2db      	uxtb	r3, r3
    d858:	e011      	b.n	d87e <send_nav_values+0x6a>
    d85a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d862:	781b      	ldrb	r3, [r3, #0]
    d864:	b2db      	uxtb	r3, r3
    d866:	461a      	mov	r2, r3
    d868:	f24c 3319 	movw	r3, #49945	; 0xc319
    d86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d870:	781b      	ldrb	r3, [r3, #0]
    d872:	1ad3      	subs	r3, r2, r3
    d874:	2b1e      	cmp	r3, #30
    d876:	bfd4      	ite	le
    d878:	2300      	movle	r3, #0
    d87a:	2301      	movgt	r3, #1
    d87c:	b2db      	uxtb	r3, r3
    d87e:	2b00      	cmp	r3, #0
    d880:	f001 8094 	beq.w	e9ac <send_nav_values+0x1198>
    d884:	f24c 3319 	movw	r3, #49945	; 0xc319
    d888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d88c:	781b      	ldrb	r3, [r3, #0]
    d88e:	461a      	mov	r2, r3
    d890:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d898:	2105      	movs	r1, #5
    d89a:	5499      	strb	r1, [r3, r2]
    d89c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a4:	781b      	ldrb	r3, [r3, #0]
    d8a6:	3301      	adds	r3, #1
    d8a8:	b2da      	uxtb	r2, r3
    d8aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b2:	701a      	strb	r2, [r3, #0]
    d8b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8bc:	781b      	ldrb	r3, [r3, #0]
    d8be:	2bff      	cmp	r3, #255	; 0xff
    d8c0:	d105      	bne.n	d8ce <send_nav_values+0xba>
    d8c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ca:	2200      	movs	r2, #0
    d8cc:	701a      	strb	r2, [r3, #0]
    d8ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d6:	781b      	ldrb	r3, [r3, #0]
    d8d8:	461a      	mov	r2, r3
    d8da:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e2:	210a      	movs	r1, #10
    d8e4:	5499      	strb	r1, [r3, r2]
    d8e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ee:	781b      	ldrb	r3, [r3, #0]
    d8f0:	3301      	adds	r3, #1
    d8f2:	b2da      	uxtb	r2, r3
    d8f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8fc:	701a      	strb	r2, [r3, #0]
    d8fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    d902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d906:	781b      	ldrb	r3, [r3, #0]
    d908:	2bff      	cmp	r3, #255	; 0xff
    d90a:	d105      	bne.n	d918 <send_nav_values+0x104>
    d90c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d914:	2200      	movs	r2, #0
    d916:	701a      	strb	r2, [r3, #0]
    d918:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d920:	220a      	movs	r2, #10
    d922:	701a      	strb	r2, [r3, #0]
    d924:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92c:	220a      	movs	r2, #10
    d92e:	701a      	strb	r2, [r3, #0]
    d930:	f24c 3319 	movw	r3, #49945	; 0xc319
    d934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d938:	781b      	ldrb	r3, [r3, #0]
    d93a:	461a      	mov	r2, r3
    d93c:	f24c 6371 	movw	r3, #50801	; 0xc671
    d940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d944:	7819      	ldrb	r1, [r3, #0]
    d946:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94e:	5499      	strb	r1, [r3, r2]
    d950:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d958:	781a      	ldrb	r2, [r3, #0]
    d95a:	f24c 6371 	movw	r3, #50801	; 0xc671
    d95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d962:	781b      	ldrb	r3, [r3, #0]
    d964:	4413      	add	r3, r2
    d966:	b2da      	uxtb	r2, r3
    d968:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d970:	701a      	strb	r2, [r3, #0]
    d972:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d97a:	781a      	ldrb	r2, [r3, #0]
    d97c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d984:	781b      	ldrb	r3, [r3, #0]
    d986:	4413      	add	r3, r2
    d988:	b2da      	uxtb	r2, r3
    d98a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d992:	701a      	strb	r2, [r3, #0]
    d994:	f24c 3319 	movw	r3, #49945	; 0xc319
    d998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d99c:	781b      	ldrb	r3, [r3, #0]
    d99e:	3301      	adds	r3, #1
    d9a0:	b2da      	uxtb	r2, r3
    d9a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9aa:	701a      	strb	r2, [r3, #0]
    d9ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b4:	781b      	ldrb	r3, [r3, #0]
    d9b6:	2bff      	cmp	r3, #255	; 0xff
    d9b8:	d105      	bne.n	d9c6 <send_nav_values+0x1b2>
    d9ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c2:	2200      	movs	r2, #0
    d9c4:	701a      	strb	r2, [r3, #0]
    d9c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ce:	781b      	ldrb	r3, [r3, #0]
    d9d0:	461a      	mov	r2, r3
    d9d2:	f24c 6370 	movw	r3, #50800	; 0xc670
    d9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9da:	7819      	ldrb	r1, [r3, #0]
    d9dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d9e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e4:	5499      	strb	r1, [r3, r2]
    d9e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ee:	781a      	ldrb	r2, [r3, #0]
    d9f0:	f24c 6370 	movw	r3, #50800	; 0xc670
    d9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f8:	781b      	ldrb	r3, [r3, #0]
    d9fa:	4413      	add	r3, r2
    d9fc:	b2da      	uxtb	r2, r3
    d9fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da06:	701a      	strb	r2, [r3, #0]
    da08:	f24c 431e 	movw	r3, #50206	; 0xc41e
    da0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da10:	781a      	ldrb	r2, [r3, #0]
    da12:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da1a:	781b      	ldrb	r3, [r3, #0]
    da1c:	4413      	add	r3, r2
    da1e:	b2da      	uxtb	r2, r3
    da20:	f24c 431e 	movw	r3, #50206	; 0xc41e
    da24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da28:	701a      	strb	r2, [r3, #0]
    da2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    da2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da32:	781b      	ldrb	r3, [r3, #0]
    da34:	3301      	adds	r3, #1
    da36:	b2da      	uxtb	r2, r3
    da38:	f24c 3319 	movw	r3, #49945	; 0xc319
    da3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da40:	701a      	strb	r2, [r3, #0]
    da42:	f24c 3319 	movw	r3, #49945	; 0xc319
    da46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4a:	781b      	ldrb	r3, [r3, #0]
    da4c:	2bff      	cmp	r3, #255	; 0xff
    da4e:	d105      	bne.n	da5c <send_nav_values+0x248>
    da50:	f24c 3319 	movw	r3, #49945	; 0xc319
    da54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da58:	2200      	movs	r2, #0
    da5a:	701a      	strb	r2, [r3, #0]
    da5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    da60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da64:	781b      	ldrb	r3, [r3, #0]
    da66:	461a      	mov	r2, r3
    da68:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    da6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da70:	7819      	ldrb	r1, [r3, #0]
    da72:	f24c 331c 	movw	r3, #49948	; 0xc31c
    da76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da7a:	5499      	strb	r1, [r3, r2]
    da7c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    da80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da84:	781a      	ldrb	r2, [r3, #0]
    da86:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8e:	781b      	ldrb	r3, [r3, #0]
    da90:	4413      	add	r3, r2
    da92:	b2da      	uxtb	r2, r3
    da94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9c:	701a      	strb	r2, [r3, #0]
    da9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    daa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa6:	781a      	ldrb	r2, [r3, #0]
    daa8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    daac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab0:	781b      	ldrb	r3, [r3, #0]
    dab2:	4413      	add	r3, r2
    dab4:	b2da      	uxtb	r2, r3
    dab6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    daba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dabe:	701a      	strb	r2, [r3, #0]
    dac0:	f24c 3319 	movw	r3, #49945	; 0xc319
    dac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac8:	781b      	ldrb	r3, [r3, #0]
    daca:	3301      	adds	r3, #1
    dacc:	b2da      	uxtb	r2, r3
    dace:	f24c 3319 	movw	r3, #49945	; 0xc319
    dad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad6:	701a      	strb	r2, [r3, #0]
    dad8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae0:	781b      	ldrb	r3, [r3, #0]
    dae2:	2bff      	cmp	r3, #255	; 0xff
    dae4:	d105      	bne.n	daf2 <send_nav_values+0x2de>
    dae6:	f24c 3319 	movw	r3, #49945	; 0xc319
    daea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daee:	2200      	movs	r2, #0
    daf0:	701a      	strb	r2, [r3, #0]
    daf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    daf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafa:	781b      	ldrb	r3, [r3, #0]
    dafc:	461a      	mov	r2, r3
    dafe:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    db02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db06:	7859      	ldrb	r1, [r3, #1]
    db08:	f24c 331c 	movw	r3, #49948	; 0xc31c
    db0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db10:	5499      	strb	r1, [r3, r2]
    db12:	4bd2      	ldr	r3, [pc, #840]	; (de5c <send_nav_values+0x648>)
    db14:	781a      	ldrb	r2, [r3, #0]
    db16:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db1e:	781b      	ldrb	r3, [r3, #0]
    db20:	4413      	add	r3, r2
    db22:	b2da      	uxtb	r2, r3
    db24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2c:	701a      	strb	r2, [r3, #0]
    db2e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db36:	781a      	ldrb	r2, [r3, #0]
    db38:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db40:	781b      	ldrb	r3, [r3, #0]
    db42:	4413      	add	r3, r2
    db44:	b2da      	uxtb	r2, r3
    db46:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db4e:	701a      	strb	r2, [r3, #0]
    db50:	f24c 3319 	movw	r3, #49945	; 0xc319
    db54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db58:	781b      	ldrb	r3, [r3, #0]
    db5a:	3301      	adds	r3, #1
    db5c:	b2da      	uxtb	r2, r3
    db5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    db62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db66:	701a      	strb	r2, [r3, #0]
    db68:	f24c 3319 	movw	r3, #49945	; 0xc319
    db6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db70:	781b      	ldrb	r3, [r3, #0]
    db72:	2bff      	cmp	r3, #255	; 0xff
    db74:	d105      	bne.n	db82 <send_nav_values+0x36e>
    db76:	f24c 3319 	movw	r3, #49945	; 0xc319
    db7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7e:	2200      	movs	r2, #0
    db80:	701a      	strb	r2, [r3, #0]
    db82:	f24c 3319 	movw	r3, #49945	; 0xc319
    db86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db8a:	781b      	ldrb	r3, [r3, #0]
    db8c:	461a      	mov	r2, r3
    db8e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    db92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db96:	7899      	ldrb	r1, [r3, #2]
    db98:	f24c 331c 	movw	r3, #49948	; 0xc31c
    db9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba0:	5499      	strb	r1, [r3, r2]
    dba2:	4baf      	ldr	r3, [pc, #700]	; (de60 <send_nav_values+0x64c>)
    dba4:	781a      	ldrb	r2, [r3, #0]
    dba6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbae:	781b      	ldrb	r3, [r3, #0]
    dbb0:	4413      	add	r3, r2
    dbb2:	b2da      	uxtb	r2, r3
    dbb4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbbc:	701a      	strb	r2, [r3, #0]
    dbbe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc6:	781a      	ldrb	r2, [r3, #0]
    dbc8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd0:	781b      	ldrb	r3, [r3, #0]
    dbd2:	4413      	add	r3, r2
    dbd4:	b2da      	uxtb	r2, r3
    dbd6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbde:	701a      	strb	r2, [r3, #0]
    dbe0:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe8:	781b      	ldrb	r3, [r3, #0]
    dbea:	3301      	adds	r3, #1
    dbec:	b2da      	uxtb	r2, r3
    dbee:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf6:	701a      	strb	r2, [r3, #0]
    dbf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc00:	781b      	ldrb	r3, [r3, #0]
    dc02:	2bff      	cmp	r3, #255	; 0xff
    dc04:	d105      	bne.n	dc12 <send_nav_values+0x3fe>
    dc06:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0e:	2200      	movs	r2, #0
    dc10:	701a      	strb	r2, [r3, #0]
    dc12:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc1a:	781b      	ldrb	r3, [r3, #0]
    dc1c:	461a      	mov	r2, r3
    dc1e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc26:	78d9      	ldrb	r1, [r3, #3]
    dc28:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dc2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc30:	5499      	strb	r1, [r3, r2]
    dc32:	4b8c      	ldr	r3, [pc, #560]	; (de64 <send_nav_values+0x650>)
    dc34:	781a      	ldrb	r2, [r3, #0]
    dc36:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc3e:	781b      	ldrb	r3, [r3, #0]
    dc40:	4413      	add	r3, r2
    dc42:	b2da      	uxtb	r2, r3
    dc44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc4c:	701a      	strb	r2, [r3, #0]
    dc4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc56:	781a      	ldrb	r2, [r3, #0]
    dc58:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc60:	781b      	ldrb	r3, [r3, #0]
    dc62:	4413      	add	r3, r2
    dc64:	b2da      	uxtb	r2, r3
    dc66:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc6e:	701a      	strb	r2, [r3, #0]
    dc70:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc78:	781b      	ldrb	r3, [r3, #0]
    dc7a:	3301      	adds	r3, #1
    dc7c:	b2da      	uxtb	r2, r3
    dc7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc86:	701a      	strb	r2, [r3, #0]
    dc88:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc90:	781b      	ldrb	r3, [r3, #0]
    dc92:	2bff      	cmp	r3, #255	; 0xff
    dc94:	d105      	bne.n	dca2 <send_nav_values+0x48e>
    dc96:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc9e:	2200      	movs	r2, #0
    dca0:	701a      	strb	r2, [r3, #0]
    dca2:	f24c 3319 	movw	r3, #49945	; 0xc319
    dca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcaa:	781b      	ldrb	r3, [r3, #0]
    dcac:	461a      	mov	r2, r3
    dcae:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb6:	7819      	ldrb	r1, [r3, #0]
    dcb8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dcbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc0:	5499      	strb	r1, [r3, r2]
    dcc2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dcc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcca:	781a      	ldrb	r2, [r3, #0]
    dccc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd4:	781b      	ldrb	r3, [r3, #0]
    dcd6:	4413      	add	r3, r2
    dcd8:	b2da      	uxtb	r2, r3
    dcda:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dcde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce2:	701a      	strb	r2, [r3, #0]
    dce4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcec:	781a      	ldrb	r2, [r3, #0]
    dcee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dcf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf6:	781b      	ldrb	r3, [r3, #0]
    dcf8:	4413      	add	r3, r2
    dcfa:	b2da      	uxtb	r2, r3
    dcfc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd04:	701a      	strb	r2, [r3, #0]
    dd06:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd0e:	781b      	ldrb	r3, [r3, #0]
    dd10:	3301      	adds	r3, #1
    dd12:	b2da      	uxtb	r2, r3
    dd14:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd1c:	701a      	strb	r2, [r3, #0]
    dd1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd26:	781b      	ldrb	r3, [r3, #0]
    dd28:	2bff      	cmp	r3, #255	; 0xff
    dd2a:	d105      	bne.n	dd38 <send_nav_values+0x524>
    dd2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd34:	2200      	movs	r2, #0
    dd36:	701a      	strb	r2, [r3, #0]
    dd38:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd40:	781b      	ldrb	r3, [r3, #0]
    dd42:	461a      	mov	r2, r3
    dd44:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd4c:	7859      	ldrb	r1, [r3, #1]
    dd4e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dd52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd56:	5499      	strb	r1, [r3, r2]
    dd58:	4b43      	ldr	r3, [pc, #268]	; (de68 <send_nav_values+0x654>)
    dd5a:	781a      	ldrb	r2, [r3, #0]
    dd5c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd64:	781b      	ldrb	r3, [r3, #0]
    dd66:	4413      	add	r3, r2
    dd68:	b2da      	uxtb	r2, r3
    dd6a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd72:	701a      	strb	r2, [r3, #0]
    dd74:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7c:	781a      	ldrb	r2, [r3, #0]
    dd7e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd86:	781b      	ldrb	r3, [r3, #0]
    dd88:	4413      	add	r3, r2
    dd8a:	b2da      	uxtb	r2, r3
    dd8c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd94:	701a      	strb	r2, [r3, #0]
    dd96:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd9e:	781b      	ldrb	r3, [r3, #0]
    dda0:	3301      	adds	r3, #1
    dda2:	b2da      	uxtb	r2, r3
    dda4:	f24c 3319 	movw	r3, #49945	; 0xc319
    dda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddac:	701a      	strb	r2, [r3, #0]
    ddae:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb6:	781b      	ldrb	r3, [r3, #0]
    ddb8:	2bff      	cmp	r3, #255	; 0xff
    ddba:	d105      	bne.n	ddc8 <send_nav_values+0x5b4>
    ddbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc4:	2200      	movs	r2, #0
    ddc6:	701a      	strb	r2, [r3, #0]
    ddc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd0:	781b      	ldrb	r3, [r3, #0]
    ddd2:	461a      	mov	r2, r3
    ddd4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    ddd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dddc:	7899      	ldrb	r1, [r3, #2]
    ddde:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dde2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde6:	5499      	strb	r1, [r3, r2]
    dde8:	4b20      	ldr	r3, [pc, #128]	; (de6c <send_nav_values+0x658>)
    ddea:	781a      	ldrb	r2, [r3, #0]
    ddec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ddf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf4:	781b      	ldrb	r3, [r3, #0]
    ddf6:	4413      	add	r3, r2
    ddf8:	b2da      	uxtb	r2, r3
    ddfa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ddfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de02:	701a      	strb	r2, [r3, #0]
    de04:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0c:	781a      	ldrb	r2, [r3, #0]
    de0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de16:	781b      	ldrb	r3, [r3, #0]
    de18:	4413      	add	r3, r2
    de1a:	b2da      	uxtb	r2, r3
    de1c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de24:	701a      	strb	r2, [r3, #0]
    de26:	f24c 3319 	movw	r3, #49945	; 0xc319
    de2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2e:	781b      	ldrb	r3, [r3, #0]
    de30:	3301      	adds	r3, #1
    de32:	b2da      	uxtb	r2, r3
    de34:	f24c 3319 	movw	r3, #49945	; 0xc319
    de38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3c:	701a      	strb	r2, [r3, #0]
    de3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    de42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de46:	781b      	ldrb	r3, [r3, #0]
    de48:	2bff      	cmp	r3, #255	; 0xff
    de4a:	d111      	bne.n	de70 <send_nav_values+0x65c>
    de4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    de50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de54:	2200      	movs	r2, #0
    de56:	701a      	strb	r2, [r3, #0]
    de58:	e00a      	b.n	de70 <send_nav_values+0x65c>
    de5a:	bf00      	nop
    de5c:	2004c8cd 	.word	0x2004c8cd
    de60:	2004c8ce 	.word	0x2004c8ce
    de64:	2004c8cf 	.word	0x2004c8cf
    de68:	2004c8d1 	.word	0x2004c8d1
    de6c:	2004c8d2 	.word	0x2004c8d2
    de70:	f24c 3319 	movw	r3, #49945	; 0xc319
    de74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de78:	781b      	ldrb	r3, [r3, #0]
    de7a:	461a      	mov	r2, r3
    de7c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    de80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de84:	78d9      	ldrb	r1, [r3, #3]
    de86:	f24c 331c 	movw	r3, #49948	; 0xc31c
    de8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8e:	5499      	strb	r1, [r3, r2]
    de90:	4bd3      	ldr	r3, [pc, #844]	; (e1e0 <send_nav_values+0x9cc>)
    de92:	781a      	ldrb	r2, [r3, #0]
    de94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9c:	781b      	ldrb	r3, [r3, #0]
    de9e:	4413      	add	r3, r2
    dea0:	b2da      	uxtb	r2, r3
    dea2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deaa:	701a      	strb	r2, [r3, #0]
    deac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    deb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb4:	781a      	ldrb	r2, [r3, #0]
    deb6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    deba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    debe:	781b      	ldrb	r3, [r3, #0]
    dec0:	4413      	add	r3, r2
    dec2:	b2da      	uxtb	r2, r3
    dec4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    decc:	701a      	strb	r2, [r3, #0]
    dece:	f24c 3319 	movw	r3, #49945	; 0xc319
    ded2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded6:	781b      	ldrb	r3, [r3, #0]
    ded8:	3301      	adds	r3, #1
    deda:	b2da      	uxtb	r2, r3
    dedc:	f24c 3319 	movw	r3, #49945	; 0xc319
    dee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee4:	701a      	strb	r2, [r3, #0]
    dee6:	f24c 3319 	movw	r3, #49945	; 0xc319
    deea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deee:	781b      	ldrb	r3, [r3, #0]
    def0:	2bff      	cmp	r3, #255	; 0xff
    def2:	d105      	bne.n	df00 <send_nav_values+0x6ec>
    def4:	f24c 3319 	movw	r3, #49945	; 0xc319
    def8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    defc:	2200      	movs	r2, #0
    defe:	701a      	strb	r2, [r3, #0]
    df00:	f24c 3319 	movw	r3, #49945	; 0xc319
    df04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df08:	781b      	ldrb	r3, [r3, #0]
    df0a:	461a      	mov	r2, r3
    df0c:	f24c 635c 	movw	r3, #50780	; 0xc65c
    df10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df14:	7819      	ldrb	r1, [r3, #0]
    df16:	f24c 331c 	movw	r3, #49948	; 0xc31c
    df1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1e:	5499      	strb	r1, [r3, r2]
    df20:	f24c 635c 	movw	r3, #50780	; 0xc65c
    df24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df28:	781a      	ldrb	r2, [r3, #0]
    df2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df32:	781b      	ldrb	r3, [r3, #0]
    df34:	4413      	add	r3, r2
    df36:	b2da      	uxtb	r2, r3
    df38:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df40:	701a      	strb	r2, [r3, #0]
    df42:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4a:	781a      	ldrb	r2, [r3, #0]
    df4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df54:	781b      	ldrb	r3, [r3, #0]
    df56:	4413      	add	r3, r2
    df58:	b2da      	uxtb	r2, r3
    df5a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df62:	701a      	strb	r2, [r3, #0]
    df64:	f24c 3319 	movw	r3, #49945	; 0xc319
    df68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df6c:	781b      	ldrb	r3, [r3, #0]
    df6e:	3301      	adds	r3, #1
    df70:	b2da      	uxtb	r2, r3
    df72:	f24c 3319 	movw	r3, #49945	; 0xc319
    df76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df7a:	701a      	strb	r2, [r3, #0]
    df7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    df80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df84:	781b      	ldrb	r3, [r3, #0]
    df86:	2bff      	cmp	r3, #255	; 0xff
    df88:	d105      	bne.n	df96 <send_nav_values+0x782>
    df8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    df8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df92:	2200      	movs	r2, #0
    df94:	701a      	strb	r2, [r3, #0]
    df96:	f24c 3319 	movw	r3, #49945	; 0xc319
    df9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df9e:	781b      	ldrb	r3, [r3, #0]
    dfa0:	461a      	mov	r2, r3
    dfa2:	f24c 635c 	movw	r3, #50780	; 0xc65c
    dfa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfaa:	7859      	ldrb	r1, [r3, #1]
    dfac:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb4:	5499      	strb	r1, [r3, r2]
    dfb6:	4b8b      	ldr	r3, [pc, #556]	; (e1e4 <send_nav_values+0x9d0>)
    dfb8:	781a      	ldrb	r2, [r3, #0]
    dfba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dfbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc2:	781b      	ldrb	r3, [r3, #0]
    dfc4:	4413      	add	r3, r2
    dfc6:	b2da      	uxtb	r2, r3
    dfc8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dfcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd0:	701a      	strb	r2, [r3, #0]
    dfd2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dfd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfda:	781a      	ldrb	r2, [r3, #0]
    dfdc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dfe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe4:	781b      	ldrb	r3, [r3, #0]
    dfe6:	4413      	add	r3, r2
    dfe8:	b2da      	uxtb	r2, r3
    dfea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dfee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff2:	701a      	strb	r2, [r3, #0]
    dff4:	f24c 3319 	movw	r3, #49945	; 0xc319
    dff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dffc:	781b      	ldrb	r3, [r3, #0]
    dffe:	3301      	adds	r3, #1
    e000:	b2da      	uxtb	r2, r3
    e002:	f24c 3319 	movw	r3, #49945	; 0xc319
    e006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00a:	701a      	strb	r2, [r3, #0]
    e00c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e014:	781b      	ldrb	r3, [r3, #0]
    e016:	2bff      	cmp	r3, #255	; 0xff
    e018:	d105      	bne.n	e026 <send_nav_values+0x812>
    e01a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e022:	2200      	movs	r2, #0
    e024:	701a      	strb	r2, [r3, #0]
    e026:	f24c 3319 	movw	r3, #49945	; 0xc319
    e02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02e:	781b      	ldrb	r3, [r3, #0]
    e030:	461a      	mov	r2, r3
    e032:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03a:	7899      	ldrb	r1, [r3, #2]
    e03c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e044:	5499      	strb	r1, [r3, r2]
    e046:	4b68      	ldr	r3, [pc, #416]	; (e1e8 <send_nav_values+0x9d4>)
    e048:	781a      	ldrb	r2, [r3, #0]
    e04a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e052:	781b      	ldrb	r3, [r3, #0]
    e054:	4413      	add	r3, r2
    e056:	b2da      	uxtb	r2, r3
    e058:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e060:	701a      	strb	r2, [r3, #0]
    e062:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06a:	781a      	ldrb	r2, [r3, #0]
    e06c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e074:	781b      	ldrb	r3, [r3, #0]
    e076:	4413      	add	r3, r2
    e078:	b2da      	uxtb	r2, r3
    e07a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e082:	701a      	strb	r2, [r3, #0]
    e084:	f24c 3319 	movw	r3, #49945	; 0xc319
    e088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08c:	781b      	ldrb	r3, [r3, #0]
    e08e:	3301      	adds	r3, #1
    e090:	b2da      	uxtb	r2, r3
    e092:	f24c 3319 	movw	r3, #49945	; 0xc319
    e096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09a:	701a      	strb	r2, [r3, #0]
    e09c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a4:	781b      	ldrb	r3, [r3, #0]
    e0a6:	2bff      	cmp	r3, #255	; 0xff
    e0a8:	d105      	bne.n	e0b6 <send_nav_values+0x8a2>
    e0aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b2:	2200      	movs	r2, #0
    e0b4:	701a      	strb	r2, [r3, #0]
    e0b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0be:	781b      	ldrb	r3, [r3, #0]
    e0c0:	461a      	mov	r2, r3
    e0c2:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ca:	78d9      	ldrb	r1, [r3, #3]
    e0cc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d4:	5499      	strb	r1, [r3, r2]
    e0d6:	4b45      	ldr	r3, [pc, #276]	; (e1ec <send_nav_values+0x9d8>)
    e0d8:	781a      	ldrb	r2, [r3, #0]
    e0da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e2:	781b      	ldrb	r3, [r3, #0]
    e0e4:	4413      	add	r3, r2
    e0e6:	b2da      	uxtb	r2, r3
    e0e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f0:	701a      	strb	r2, [r3, #0]
    e0f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fa:	781a      	ldrb	r2, [r3, #0]
    e0fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e104:	781b      	ldrb	r3, [r3, #0]
    e106:	4413      	add	r3, r2
    e108:	b2da      	uxtb	r2, r3
    e10a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e112:	701a      	strb	r2, [r3, #0]
    e114:	f24c 3319 	movw	r3, #49945	; 0xc319
    e118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e11c:	781b      	ldrb	r3, [r3, #0]
    e11e:	3301      	adds	r3, #1
    e120:	b2da      	uxtb	r2, r3
    e122:	f24c 3319 	movw	r3, #49945	; 0xc319
    e126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12a:	701a      	strb	r2, [r3, #0]
    e12c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e134:	781b      	ldrb	r3, [r3, #0]
    e136:	2bff      	cmp	r3, #255	; 0xff
    e138:	d105      	bne.n	e146 <send_nav_values+0x932>
    e13a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e142:	2200      	movs	r2, #0
    e144:	701a      	strb	r2, [r3, #0]
    e146:	f24c 3319 	movw	r3, #49945	; 0xc319
    e14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e14e:	781b      	ldrb	r3, [r3, #0]
    e150:	461a      	mov	r2, r3
    e152:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15a:	7819      	ldrb	r1, [r3, #0]
    e15c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e164:	5499      	strb	r1, [r3, r2]
    e166:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e16e:	781a      	ldrb	r2, [r3, #0]
    e170:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e178:	781b      	ldrb	r3, [r3, #0]
    e17a:	4413      	add	r3, r2
    e17c:	b2da      	uxtb	r2, r3
    e17e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e186:	701a      	strb	r2, [r3, #0]
    e188:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e190:	781a      	ldrb	r2, [r3, #0]
    e192:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e19a:	781b      	ldrb	r3, [r3, #0]
    e19c:	4413      	add	r3, r2
    e19e:	b2da      	uxtb	r2, r3
    e1a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a8:	701a      	strb	r2, [r3, #0]
    e1aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b2:	781b      	ldrb	r3, [r3, #0]
    e1b4:	3301      	adds	r3, #1
    e1b6:	b2da      	uxtb	r2, r3
    e1b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c0:	701a      	strb	r2, [r3, #0]
    e1c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ca:	781b      	ldrb	r3, [r3, #0]
    e1cc:	2bff      	cmp	r3, #255	; 0xff
    e1ce:	d10f      	bne.n	e1f0 <send_nav_values+0x9dc>
    e1d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d8:	2200      	movs	r2, #0
    e1da:	701a      	strb	r2, [r3, #0]
    e1dc:	e008      	b.n	e1f0 <send_nav_values+0x9dc>
    e1de:	bf00      	nop
    e1e0:	2004c8d3 	.word	0x2004c8d3
    e1e4:	2004c65d 	.word	0x2004c65d
    e1e8:	2004c65e 	.word	0x2004c65e
    e1ec:	2004c65f 	.word	0x2004c65f
    e1f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f8:	781b      	ldrb	r3, [r3, #0]
    e1fa:	461a      	mov	r2, r3
    e1fc:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e204:	7859      	ldrb	r1, [r3, #1]
    e206:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e20e:	5499      	strb	r1, [r3, r2]
    e210:	4bd1      	ldr	r3, [pc, #836]	; (e558 <send_nav_values+0xd44>)
    e212:	781a      	ldrb	r2, [r3, #0]
    e214:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21c:	781b      	ldrb	r3, [r3, #0]
    e21e:	4413      	add	r3, r2
    e220:	b2da      	uxtb	r2, r3
    e222:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22a:	701a      	strb	r2, [r3, #0]
    e22c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e234:	781a      	ldrb	r2, [r3, #0]
    e236:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e23e:	781b      	ldrb	r3, [r3, #0]
    e240:	4413      	add	r3, r2
    e242:	b2da      	uxtb	r2, r3
    e244:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e24c:	701a      	strb	r2, [r3, #0]
    e24e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e256:	781b      	ldrb	r3, [r3, #0]
    e258:	3301      	adds	r3, #1
    e25a:	b2da      	uxtb	r2, r3
    e25c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e264:	701a      	strb	r2, [r3, #0]
    e266:	f24c 3319 	movw	r3, #49945	; 0xc319
    e26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e26e:	781b      	ldrb	r3, [r3, #0]
    e270:	2bff      	cmp	r3, #255	; 0xff
    e272:	d105      	bne.n	e280 <send_nav_values+0xa6c>
    e274:	f24c 3319 	movw	r3, #49945	; 0xc319
    e278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27c:	2200      	movs	r2, #0
    e27e:	701a      	strb	r2, [r3, #0]
    e280:	f24c 3319 	movw	r3, #49945	; 0xc319
    e284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e288:	781b      	ldrb	r3, [r3, #0]
    e28a:	461a      	mov	r2, r3
    e28c:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e294:	7899      	ldrb	r1, [r3, #2]
    e296:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e29e:	5499      	strb	r1, [r3, r2]
    e2a0:	4bae      	ldr	r3, [pc, #696]	; (e55c <send_nav_values+0xd48>)
    e2a2:	781a      	ldrb	r2, [r3, #0]
    e2a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ac:	781b      	ldrb	r3, [r3, #0]
    e2ae:	4413      	add	r3, r2
    e2b0:	b2da      	uxtb	r2, r3
    e2b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ba:	701a      	strb	r2, [r3, #0]
    e2bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e2c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c4:	781a      	ldrb	r2, [r3, #0]
    e2c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ce:	781b      	ldrb	r3, [r3, #0]
    e2d0:	4413      	add	r3, r2
    e2d2:	b2da      	uxtb	r2, r3
    e2d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2dc:	701a      	strb	r2, [r3, #0]
    e2de:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e6:	781b      	ldrb	r3, [r3, #0]
    e2e8:	3301      	adds	r3, #1
    e2ea:	b2da      	uxtb	r2, r3
    e2ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f4:	701a      	strb	r2, [r3, #0]
    e2f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fe:	781b      	ldrb	r3, [r3, #0]
    e300:	2bff      	cmp	r3, #255	; 0xff
    e302:	d105      	bne.n	e310 <send_nav_values+0xafc>
    e304:	f24c 3319 	movw	r3, #49945	; 0xc319
    e308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e30c:	2200      	movs	r2, #0
    e30e:	701a      	strb	r2, [r3, #0]
    e310:	f24c 3319 	movw	r3, #49945	; 0xc319
    e314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e318:	781b      	ldrb	r3, [r3, #0]
    e31a:	461a      	mov	r2, r3
    e31c:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e324:	78d9      	ldrb	r1, [r3, #3]
    e326:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e32e:	5499      	strb	r1, [r3, r2]
    e330:	4b8b      	ldr	r3, [pc, #556]	; (e560 <send_nav_values+0xd4c>)
    e332:	781a      	ldrb	r2, [r3, #0]
    e334:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e33c:	781b      	ldrb	r3, [r3, #0]
    e33e:	4413      	add	r3, r2
    e340:	b2da      	uxtb	r2, r3
    e342:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e34a:	701a      	strb	r2, [r3, #0]
    e34c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e354:	781a      	ldrb	r2, [r3, #0]
    e356:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e35e:	781b      	ldrb	r3, [r3, #0]
    e360:	4413      	add	r3, r2
    e362:	b2da      	uxtb	r2, r3
    e364:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36c:	701a      	strb	r2, [r3, #0]
    e36e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e376:	781b      	ldrb	r3, [r3, #0]
    e378:	3301      	adds	r3, #1
    e37a:	b2da      	uxtb	r2, r3
    e37c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e384:	701a      	strb	r2, [r3, #0]
    e386:	f24c 3319 	movw	r3, #49945	; 0xc319
    e38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e38e:	781b      	ldrb	r3, [r3, #0]
    e390:	2bff      	cmp	r3, #255	; 0xff
    e392:	d105      	bne.n	e3a0 <send_nav_values+0xb8c>
    e394:	f24c 3319 	movw	r3, #49945	; 0xc319
    e398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39c:	2200      	movs	r2, #0
    e39e:	701a      	strb	r2, [r3, #0]
    e3a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a8:	781b      	ldrb	r3, [r3, #0]
    e3aa:	461a      	mov	r2, r3
    e3ac:	f240 5358 	movw	r3, #1368	; 0x558
    e3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3b4:	7819      	ldrb	r1, [r3, #0]
    e3b6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3be:	5499      	strb	r1, [r3, r2]
    e3c0:	f240 5358 	movw	r3, #1368	; 0x558
    e3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c8:	781a      	ldrb	r2, [r3, #0]
    e3ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d2:	781b      	ldrb	r3, [r3, #0]
    e3d4:	4413      	add	r3, r2
    e3d6:	b2da      	uxtb	r2, r3
    e3d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e0:	701a      	strb	r2, [r3, #0]
    e3e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ea:	781a      	ldrb	r2, [r3, #0]
    e3ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f4:	781b      	ldrb	r3, [r3, #0]
    e3f6:	4413      	add	r3, r2
    e3f8:	b2da      	uxtb	r2, r3
    e3fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e402:	701a      	strb	r2, [r3, #0]
    e404:	f24c 3319 	movw	r3, #49945	; 0xc319
    e408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e40c:	781b      	ldrb	r3, [r3, #0]
    e40e:	3301      	adds	r3, #1
    e410:	b2da      	uxtb	r2, r3
    e412:	f24c 3319 	movw	r3, #49945	; 0xc319
    e416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41a:	701a      	strb	r2, [r3, #0]
    e41c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e424:	781b      	ldrb	r3, [r3, #0]
    e426:	2bff      	cmp	r3, #255	; 0xff
    e428:	d105      	bne.n	e436 <send_nav_values+0xc22>
    e42a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e432:	2200      	movs	r2, #0
    e434:	701a      	strb	r2, [r3, #0]
    e436:	f24c 3319 	movw	r3, #49945	; 0xc319
    e43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e43e:	781b      	ldrb	r3, [r3, #0]
    e440:	461a      	mov	r2, r3
    e442:	f240 5358 	movw	r3, #1368	; 0x558
    e446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e44a:	7859      	ldrb	r1, [r3, #1]
    e44c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e454:	5499      	strb	r1, [r3, r2]
    e456:	4b43      	ldr	r3, [pc, #268]	; (e564 <send_nav_values+0xd50>)
    e458:	781a      	ldrb	r2, [r3, #0]
    e45a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e462:	781b      	ldrb	r3, [r3, #0]
    e464:	4413      	add	r3, r2
    e466:	b2da      	uxtb	r2, r3
    e468:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e470:	701a      	strb	r2, [r3, #0]
    e472:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e47a:	781a      	ldrb	r2, [r3, #0]
    e47c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e484:	781b      	ldrb	r3, [r3, #0]
    e486:	4413      	add	r3, r2
    e488:	b2da      	uxtb	r2, r3
    e48a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e492:	701a      	strb	r2, [r3, #0]
    e494:	f24c 3319 	movw	r3, #49945	; 0xc319
    e498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e49c:	781b      	ldrb	r3, [r3, #0]
    e49e:	3301      	adds	r3, #1
    e4a0:	b2da      	uxtb	r2, r3
    e4a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4aa:	701a      	strb	r2, [r3, #0]
    e4ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4b4:	781b      	ldrb	r3, [r3, #0]
    e4b6:	2bff      	cmp	r3, #255	; 0xff
    e4b8:	d105      	bne.n	e4c6 <send_nav_values+0xcb2>
    e4ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c2:	2200      	movs	r2, #0
    e4c4:	701a      	strb	r2, [r3, #0]
    e4c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ce:	781b      	ldrb	r3, [r3, #0]
    e4d0:	461a      	mov	r2, r3
    e4d2:	f240 5358 	movw	r3, #1368	; 0x558
    e4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4da:	7899      	ldrb	r1, [r3, #2]
    e4dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4e4:	5499      	strb	r1, [r3, r2]
    e4e6:	4b20      	ldr	r3, [pc, #128]	; (e568 <send_nav_values+0xd54>)
    e4e8:	781a      	ldrb	r2, [r3, #0]
    e4ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f2:	781b      	ldrb	r3, [r3, #0]
    e4f4:	4413      	add	r3, r2
    e4f6:	b2da      	uxtb	r2, r3
    e4f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e500:	701a      	strb	r2, [r3, #0]
    e502:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e50a:	781a      	ldrb	r2, [r3, #0]
    e50c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e514:	781b      	ldrb	r3, [r3, #0]
    e516:	4413      	add	r3, r2
    e518:	b2da      	uxtb	r2, r3
    e51a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e522:	701a      	strb	r2, [r3, #0]
    e524:	f24c 3319 	movw	r3, #49945	; 0xc319
    e528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e52c:	781b      	ldrb	r3, [r3, #0]
    e52e:	3301      	adds	r3, #1
    e530:	b2da      	uxtb	r2, r3
    e532:	f24c 3319 	movw	r3, #49945	; 0xc319
    e536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e53a:	701a      	strb	r2, [r3, #0]
    e53c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e544:	781b      	ldrb	r3, [r3, #0]
    e546:	2bff      	cmp	r3, #255	; 0xff
    e548:	d110      	bne.n	e56c <send_nav_values+0xd58>
    e54a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e552:	2200      	movs	r2, #0
    e554:	701a      	strb	r2, [r3, #0]
    e556:	e009      	b.n	e56c <send_nav_values+0xd58>
    e558:	2004c6a5 	.word	0x2004c6a5
    e55c:	2004c6a6 	.word	0x2004c6a6
    e560:	2004c6a7 	.word	0x2004c6a7
    e564:	20000559 	.word	0x20000559
    e568:	2000055a 	.word	0x2000055a
    e56c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e574:	781b      	ldrb	r3, [r3, #0]
    e576:	461a      	mov	r2, r3
    e578:	f240 5358 	movw	r3, #1368	; 0x558
    e57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e580:	78d9      	ldrb	r1, [r3, #3]
    e582:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e58a:	5499      	strb	r1, [r3, r2]
    e58c:	4bc2      	ldr	r3, [pc, #776]	; (e898 <send_nav_values+0x1084>)
    e58e:	781a      	ldrb	r2, [r3, #0]
    e590:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e598:	781b      	ldrb	r3, [r3, #0]
    e59a:	4413      	add	r3, r2
    e59c:	b2da      	uxtb	r2, r3
    e59e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5a6:	701a      	strb	r2, [r3, #0]
    e5a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b0:	781a      	ldrb	r2, [r3, #0]
    e5b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ba:	781b      	ldrb	r3, [r3, #0]
    e5bc:	4413      	add	r3, r2
    e5be:	b2da      	uxtb	r2, r3
    e5c0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c8:	701a      	strb	r2, [r3, #0]
    e5ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d2:	781b      	ldrb	r3, [r3, #0]
    e5d4:	3301      	adds	r3, #1
    e5d6:	b2da      	uxtb	r2, r3
    e5d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5e0:	701a      	strb	r2, [r3, #0]
    e5e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ea:	781b      	ldrb	r3, [r3, #0]
    e5ec:	2bff      	cmp	r3, #255	; 0xff
    e5ee:	d105      	bne.n	e5fc <send_nav_values+0xde8>
    e5f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f8:	2200      	movs	r2, #0
    e5fa:	701a      	strb	r2, [r3, #0]
    e5fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e604:	781b      	ldrb	r3, [r3, #0]
    e606:	461a      	mov	r2, r3
    e608:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e610:	7819      	ldrb	r1, [r3, #0]
    e612:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e61a:	5499      	strb	r1, [r3, r2]
    e61c:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e624:	781a      	ldrb	r2, [r3, #0]
    e626:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62e:	781b      	ldrb	r3, [r3, #0]
    e630:	4413      	add	r3, r2
    e632:	b2da      	uxtb	r2, r3
    e634:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e63c:	701a      	strb	r2, [r3, #0]
    e63e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e646:	781a      	ldrb	r2, [r3, #0]
    e648:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e650:	781b      	ldrb	r3, [r3, #0]
    e652:	4413      	add	r3, r2
    e654:	b2da      	uxtb	r2, r3
    e656:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e65e:	701a      	strb	r2, [r3, #0]
    e660:	f24c 3319 	movw	r3, #49945	; 0xc319
    e664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e668:	781b      	ldrb	r3, [r3, #0]
    e66a:	3301      	adds	r3, #1
    e66c:	b2da      	uxtb	r2, r3
    e66e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e676:	701a      	strb	r2, [r3, #0]
    e678:	f24c 3319 	movw	r3, #49945	; 0xc319
    e67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e680:	781b      	ldrb	r3, [r3, #0]
    e682:	2bff      	cmp	r3, #255	; 0xff
    e684:	d105      	bne.n	e692 <send_nav_values+0xe7e>
    e686:	f24c 3319 	movw	r3, #49945	; 0xc319
    e68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e68e:	2200      	movs	r2, #0
    e690:	701a      	strb	r2, [r3, #0]
    e692:	f24c 3319 	movw	r3, #49945	; 0xc319
    e696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e69a:	781b      	ldrb	r3, [r3, #0]
    e69c:	461a      	mov	r2, r3
    e69e:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a6:	7859      	ldrb	r1, [r3, #1]
    e6a8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b0:	5499      	strb	r1, [r3, r2]
    e6b2:	4b7a      	ldr	r3, [pc, #488]	; (e89c <send_nav_values+0x1088>)
    e6b4:	781a      	ldrb	r2, [r3, #0]
    e6b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6be:	781b      	ldrb	r3, [r3, #0]
    e6c0:	4413      	add	r3, r2
    e6c2:	b2da      	uxtb	r2, r3
    e6c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6cc:	701a      	strb	r2, [r3, #0]
    e6ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d6:	781a      	ldrb	r2, [r3, #0]
    e6d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e0:	781b      	ldrb	r3, [r3, #0]
    e6e2:	4413      	add	r3, r2
    e6e4:	b2da      	uxtb	r2, r3
    e6e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ee:	701a      	strb	r2, [r3, #0]
    e6f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f8:	781b      	ldrb	r3, [r3, #0]
    e6fa:	3301      	adds	r3, #1
    e6fc:	b2da      	uxtb	r2, r3
    e6fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    e702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e706:	701a      	strb	r2, [r3, #0]
    e708:	f24c 3319 	movw	r3, #49945	; 0xc319
    e70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e710:	781b      	ldrb	r3, [r3, #0]
    e712:	2bff      	cmp	r3, #255	; 0xff
    e714:	d105      	bne.n	e722 <send_nav_values+0xf0e>
    e716:	f24c 3319 	movw	r3, #49945	; 0xc319
    e71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e71e:	2200      	movs	r2, #0
    e720:	701a      	strb	r2, [r3, #0]
    e722:	f24c 3319 	movw	r3, #49945	; 0xc319
    e726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e72a:	781b      	ldrb	r3, [r3, #0]
    e72c:	461a      	mov	r2, r3
    e72e:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e736:	7899      	ldrb	r1, [r3, #2]
    e738:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e740:	5499      	strb	r1, [r3, r2]
    e742:	4b57      	ldr	r3, [pc, #348]	; (e8a0 <send_nav_values+0x108c>)
    e744:	781a      	ldrb	r2, [r3, #0]
    e746:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e74e:	781b      	ldrb	r3, [r3, #0]
    e750:	4413      	add	r3, r2
    e752:	b2da      	uxtb	r2, r3
    e754:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e75c:	701a      	strb	r2, [r3, #0]
    e75e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e766:	781a      	ldrb	r2, [r3, #0]
    e768:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e770:	781b      	ldrb	r3, [r3, #0]
    e772:	4413      	add	r3, r2
    e774:	b2da      	uxtb	r2, r3
    e776:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e77e:	701a      	strb	r2, [r3, #0]
    e780:	f24c 3319 	movw	r3, #49945	; 0xc319
    e784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e788:	781b      	ldrb	r3, [r3, #0]
    e78a:	3301      	adds	r3, #1
    e78c:	b2da      	uxtb	r2, r3
    e78e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e796:	701a      	strb	r2, [r3, #0]
    e798:	f24c 3319 	movw	r3, #49945	; 0xc319
    e79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a0:	781b      	ldrb	r3, [r3, #0]
    e7a2:	2bff      	cmp	r3, #255	; 0xff
    e7a4:	d105      	bne.n	e7b2 <send_nav_values+0xf9e>
    e7a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ae:	2200      	movs	r2, #0
    e7b0:	701a      	strb	r2, [r3, #0]
    e7b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ba:	781b      	ldrb	r3, [r3, #0]
    e7bc:	461a      	mov	r2, r3
    e7be:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c6:	78d9      	ldrb	r1, [r3, #3]
    e7c8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d0:	5499      	strb	r1, [r3, r2]
    e7d2:	4b34      	ldr	r3, [pc, #208]	; (e8a4 <send_nav_values+0x1090>)
    e7d4:	781a      	ldrb	r2, [r3, #0]
    e7d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7de:	781b      	ldrb	r3, [r3, #0]
    e7e0:	4413      	add	r3, r2
    e7e2:	b2da      	uxtb	r2, r3
    e7e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ec:	701a      	strb	r2, [r3, #0]
    e7ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f6:	781a      	ldrb	r2, [r3, #0]
    e7f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e800:	781b      	ldrb	r3, [r3, #0]
    e802:	4413      	add	r3, r2
    e804:	b2da      	uxtb	r2, r3
    e806:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e80e:	701a      	strb	r2, [r3, #0]
    e810:	f24c 3319 	movw	r3, #49945	; 0xc319
    e814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e818:	781b      	ldrb	r3, [r3, #0]
    e81a:	3301      	adds	r3, #1
    e81c:	b2da      	uxtb	r2, r3
    e81e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e826:	701a      	strb	r2, [r3, #0]
    e828:	f24c 3319 	movw	r3, #49945	; 0xc319
    e82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e830:	781b      	ldrb	r3, [r3, #0]
    e832:	2bff      	cmp	r3, #255	; 0xff
    e834:	d105      	bne.n	e842 <send_nav_values+0x102e>
    e836:	f24c 3319 	movw	r3, #49945	; 0xc319
    e83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e83e:	2200      	movs	r2, #0
    e840:	701a      	strb	r2, [r3, #0]
    e842:	f24c 3319 	movw	r3, #49945	; 0xc319
    e846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e84a:	781b      	ldrb	r3, [r3, #0]
    e84c:	461a      	mov	r2, r3
    e84e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e856:	7819      	ldrb	r1, [r3, #0]
    e858:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e860:	5499      	strb	r1, [r3, r2]
    e862:	f24c 3319 	movw	r3, #49945	; 0xc319
    e866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e86a:	781b      	ldrb	r3, [r3, #0]
    e86c:	3301      	adds	r3, #1
    e86e:	b2da      	uxtb	r2, r3
    e870:	f24c 3319 	movw	r3, #49945	; 0xc319
    e874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e878:	701a      	strb	r2, [r3, #0]
    e87a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e882:	781b      	ldrb	r3, [r3, #0]
    e884:	2bff      	cmp	r3, #255	; 0xff
    e886:	d10f      	bne.n	e8a8 <send_nav_values+0x1094>
    e888:	f24c 3319 	movw	r3, #49945	; 0xc319
    e88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e890:	2200      	movs	r2, #0
    e892:	701a      	strb	r2, [r3, #0]
    e894:	e008      	b.n	e8a8 <send_nav_values+0x1094>
    e896:	bf00      	nop
    e898:	2000055b 	.word	0x2000055b
    e89c:	2004c6a9 	.word	0x2004c6a9
    e8a0:	2004c6aa 	.word	0x2004c6aa
    e8a4:	2004c6ab 	.word	0x2004c6ab
    e8a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b0:	781b      	ldrb	r3, [r3, #0]
    e8b2:	461a      	mov	r2, r3
    e8b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8bc:	7819      	ldrb	r1, [r3, #0]
    e8be:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c6:	5499      	strb	r1, [r3, r2]
    e8c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d0:	781b      	ldrb	r3, [r3, #0]
    e8d2:	3301      	adds	r3, #1
    e8d4:	b2da      	uxtb	r2, r3
    e8d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8de:	701a      	strb	r2, [r3, #0]
    e8e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e8:	781b      	ldrb	r3, [r3, #0]
    e8ea:	2bff      	cmp	r3, #255	; 0xff
    e8ec:	d105      	bne.n	e8fa <send_nav_values+0x10e6>
    e8ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f6:	2200      	movs	r2, #0
    e8f8:	701a      	strb	r2, [r3, #0]
    e8fa:	f242 0339 	movw	r3, #8249	; 0x2039
    e8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e902:	781b      	ldrb	r3, [r3, #0]
    e904:	b2db      	uxtb	r3, r3
    e906:	f003 0310 	and.w	r3, r3, #16
    e90a:	2b00      	cmp	r3, #0
    e90c:	d15a      	bne.n	e9c4 <send_nav_values+0x11b0>
    e90e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e916:	781b      	ldrb	r3, [r3, #0]
    e918:	b2db      	uxtb	r3, r3
    e91a:	461a      	mov	r2, r3
    e91c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e924:	5c9a      	ldrb	r2, [r3, r2]
    e926:	f24c 431b 	movw	r3, #50203	; 0xc41b
    e92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e92e:	701a      	strb	r2, [r3, #0]
    e930:	f24c 431c 	movw	r3, #50204	; 0xc41c
    e934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e938:	2200      	movs	r2, #0
    e93a:	701a      	strb	r2, [r3, #0]
    e93c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e944:	781b      	ldrb	r3, [r3, #0]
    e946:	b2db      	uxtb	r3, r3
    e948:	3301      	adds	r3, #1
    e94a:	b2da      	uxtb	r2, r3
    e94c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e954:	701a      	strb	r2, [r3, #0]
    e956:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e95e:	781b      	ldrb	r3, [r3, #0]
    e960:	b2db      	uxtb	r3, r3
    e962:	2bff      	cmp	r3, #255	; 0xff
    e964:	d105      	bne.n	e972 <send_nav_values+0x115e>
    e966:	f24c 331a 	movw	r3, #49946	; 0xc31a
    e96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e96e:	2200      	movs	r2, #0
    e970:	701a      	strb	r2, [r3, #0]
    e972:	f242 0338 	movw	r3, #8248	; 0x2038
    e976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e97a:	f242 0238 	movw	r2, #8248	; 0x2038
    e97e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e982:	7812      	ldrb	r2, [r2, #0]
    e984:	b2d2      	uxtb	r2, r2
    e986:	f042 0201 	orr.w	r2, r2, #1
    e98a:	b2d2      	uxtb	r2, r2
    e98c:	701a      	strb	r2, [r3, #0]
    e98e:	f242 0339 	movw	r3, #8249	; 0x2039
    e992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e996:	f242 0239 	movw	r2, #8249	; 0x2039
    e99a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e99e:	7812      	ldrb	r2, [r2, #0]
    e9a0:	b2d2      	uxtb	r2, r2
    e9a2:	f042 0210 	orr.w	r2, r2, #16
    e9a6:	b2d2      	uxtb	r2, r2
    e9a8:	701a      	strb	r2, [r3, #0]
    e9aa:	e00b      	b.n	e9c4 <send_nav_values+0x11b0>
    e9ac:	f24c 3318 	movw	r3, #49944	; 0xc318
    e9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b4:	781b      	ldrb	r3, [r3, #0]
    e9b6:	3301      	adds	r3, #1
    e9b8:	b2da      	uxtb	r2, r3
    e9ba:	f24c 3318 	movw	r3, #49944	; 0xc318
    e9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c2:	701a      	strb	r2, [r3, #0]
}
    e9c4:	46bd      	mov	sp, r7
    e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e9ca:	4770      	bx	lr

0000e9cc <course_run>:

void course_run(void){
    e9cc:	b580      	push	{r7, lr}
    e9ce:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e9d0:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    e9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9d8:	781b      	ldrb	r3, [r3, #0]
    e9da:	2b02      	cmp	r3, #2
    e9dc:	d006      	beq.n	e9ec <course_run+0x20>
    e9de:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    e9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e6:	781b      	ldrb	r3, [r3, #0]
    e9e8:	2b03      	cmp	r3, #3
    e9ea:	d112      	bne.n	ea12 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e9ec:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    e9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f4:	781b      	ldrb	r3, [r3, #0]
    e9f6:	2b02      	cmp	r3, #2
    e9f8:	d901      	bls.n	e9fe <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e9fa:	f003 faf1 	bl	11fe0 <course_pid_run>
    desired_roll = nav_desired_roll;
    e9fe:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
    ea02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea06:	681a      	ldr	r2, [r3, #0]
    ea08:	f24c 6344 	movw	r3, #50756	; 0xc644
    ea0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea10:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    ea12:	bd80      	pop	{r7, pc}

0000ea14 <altitude_control_task>:

void altitude_control_task(void)
{
    ea14:	b580      	push	{r7, lr}
    ea16:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    ea18:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ea1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea20:	781b      	ldrb	r3, [r3, #0]
    ea22:	2b02      	cmp	r3, #2
    ea24:	d006      	beq.n	ea34 <altitude_control_task+0x20>
    ea26:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ea2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea2e:	781b      	ldrb	r3, [r3, #0]
    ea30:	2b03      	cmp	r3, #3
    ea32:	d108      	bne.n	ea46 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    ea34:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    ea38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea3c:	781b      	ldrb	r3, [r3, #0]
    ea3e:	2b03      	cmp	r3, #3
    ea40:	d101      	bne.n	ea46 <altitude_control_task+0x32>
      			altitude_pid_run();
    ea42:	f003 fd55 	bl	124f0 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    ea46:	bd80      	pop	{r7, pc}

0000ea48 <climb_control_task>:
void climb_control_task(void)
{
    ea48:	b580      	push	{r7, lr}
    ea4a:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    ea4c:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ea50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea54:	781b      	ldrb	r3, [r3, #0]
    ea56:	2b02      	cmp	r3, #2
    ea58:	d006      	beq.n	ea68 <climb_control_task+0x20>
    ea5a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ea5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea62:	781b      	ldrb	r3, [r3, #0]
    ea64:	2b03      	cmp	r3, #3
    ea66:	d135      	bne.n	ead4 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    ea68:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    ea6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea70:	781b      	ldrb	r3, [r3, #0]
    ea72:	2b01      	cmp	r3, #1
    ea74:	d901      	bls.n	ea7a <climb_control_task+0x32>
        	climb_pid_run();
    ea76:	f003 fb6b 	bl	12150 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    ea7a:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    ea7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea82:	781b      	ldrb	r3, [r3, #0]
    ea84:	2b01      	cmp	r3, #1
    ea86:	d10a      	bne.n	ea9e <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    ea88:	f24c 6398 	movw	r3, #50840	; 0xc698
    ea8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea90:	881b      	ldrh	r3, [r3, #0]
    ea92:	b29a      	uxth	r2, r3
    ea94:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ea98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea9c:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    ea9e:	f24c 3305 	movw	r3, #49925	; 0xc305
    eaa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaa6:	781b      	ldrb	r3, [r3, #0]
    eaa8:	2b00      	cmp	r3, #0
    eaaa:	d10d      	bne.n	eac8 <climb_control_task+0x80>
    eaac:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    eab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab4:	881b      	ldrh	r3, [r3, #0]
    eab6:	2b00      	cmp	r3, #0
    eab8:	d10c      	bne.n	ead4 <climb_control_task+0x8c>
    eaba:	f24c 3310 	movw	r3, #49936	; 0xc310
    eabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eac2:	781b      	ldrb	r3, [r3, #0]
    eac4:	2b00      	cmp	r3, #0
    eac6:	d105      	bne.n	ead4 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    eac8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    eacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ead0:	2200      	movs	r2, #0
    ead2:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    ead4:	bd80      	pop	{r7, pc}
    ead6:	bf00      	nop

0000ead8 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    ead8:	b580      	push	{r7, lr}
    eada:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    eadc:	f003 f926 	bl	11d2c <ir_update>
    estimator_update_state_infrared();
    eae0:	f006 fbac 	bl	1523c <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    eae4:	f003 f990 	bl	11e08 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    eae8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    eaec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaf0:	881a      	ldrh	r2, [r3, #0]
    eaf2:	f24c 4338 	movw	r3, #50232	; 0xc438
    eaf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eafa:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    eafc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb04:	881a      	ldrh	r2, [r3, #0]
    eb06:	f24c 4338 	movw	r3, #50232	; 0xc438
    eb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb0e:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    eb10:	f24c 6350 	movw	r3, #50768	; 0xc650
    eb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb18:	881a      	ldrh	r2, [r3, #0]
    eb1a:	f24c 4338 	movw	r3, #50232	; 0xc438
    eb1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb22:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    eb24:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    eb28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb2c:	681b      	ldr	r3, [r3, #0]
    eb2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb32:	4618      	mov	r0, r3
    eb34:	f008 fff8 	bl	17b28 <__aeabi_f2d>
    eb38:	4602      	mov	r2, r0
    eb3a:	460b      	mov	r3, r1
    eb3c:	4610      	mov	r0, r2
    eb3e:	4619      	mov	r1, r3
    eb40:	f04f 0200 	mov.w	r2, #0
    eb44:	f04f 0300 	mov.w	r3, #0
    eb48:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb4c:	f009 f840 	bl	17bd0 <__aeabi_dmul>
    eb50:	4602      	mov	r2, r0
    eb52:	460b      	mov	r3, r1
    eb54:	4610      	mov	r0, r2
    eb56:	4619      	mov	r1, r3
    eb58:	f04f 0200 	mov.w	r2, #0
    eb5c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    eb60:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    eb64:	f009 faa6 	bl	180b4 <__aeabi_dcmplt>
    eb68:	4603      	mov	r3, r0
    eb6a:	2b00      	cmp	r3, #0
    eb6c:	d002      	beq.n	eb74 <stabilisation_task+0x9c>
    eb6e:	f64d 2280 	movw	r2, #55936	; 0xda80
    eb72:	e046      	b.n	ec02 <stabilisation_task+0x12a>
    eb74:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    eb78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb7c:	681b      	ldr	r3, [r3, #0]
    eb7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb82:	4618      	mov	r0, r3
    eb84:	f008 ffd0 	bl	17b28 <__aeabi_f2d>
    eb88:	4602      	mov	r2, r0
    eb8a:	460b      	mov	r3, r1
    eb8c:	4610      	mov	r0, r2
    eb8e:	4619      	mov	r1, r3
    eb90:	f04f 0200 	mov.w	r2, #0
    eb94:	f04f 0300 	mov.w	r3, #0
    eb98:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb9c:	f009 f818 	bl	17bd0 <__aeabi_dmul>
    eba0:	4602      	mov	r2, r0
    eba2:	460b      	mov	r3, r1
    eba4:	4610      	mov	r0, r2
    eba6:	4619      	mov	r1, r3
    eba8:	f04f 0200 	mov.w	r2, #0
    ebac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ebb0:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    ebb4:	f009 fa9c 	bl	180f0 <__aeabi_dcmpgt>
    ebb8:	4603      	mov	r3, r0
    ebba:	2b00      	cmp	r3, #0
    ebbc:	d002      	beq.n	ebc4 <stabilisation_task+0xec>
    ebbe:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ebc2:	e01d      	b.n	ec00 <stabilisation_task+0x128>
    ebc4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    ebc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebcc:	681b      	ldr	r3, [r3, #0]
    ebce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ebd2:	4618      	mov	r0, r3
    ebd4:	f008 ffa8 	bl	17b28 <__aeabi_f2d>
    ebd8:	4602      	mov	r2, r0
    ebda:	460b      	mov	r3, r1
    ebdc:	4610      	mov	r0, r2
    ebde:	4619      	mov	r1, r3
    ebe0:	f04f 0200 	mov.w	r2, #0
    ebe4:	f04f 0300 	mov.w	r3, #0
    ebe8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ebec:	f008 fff0 	bl	17bd0 <__aeabi_dmul>
    ebf0:	4602      	mov	r2, r0
    ebf2:	460b      	mov	r3, r1
    ebf4:	4610      	mov	r0, r2
    ebf6:	4619      	mov	r1, r3
    ebf8:	f009 fa84 	bl	18104 <__aeabi_d2iz>
    ebfc:	4603      	mov	r3, r0
    ebfe:	b29b      	uxth	r3, r3
    ec00:	b29a      	uxth	r2, r3
    ec02:	f24c 4338 	movw	r3, #50232	; 0xc438
    ec06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec0a:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ec0c:	bd80      	pop	{r7, pc}
    ec0e:	bf00      	nop

0000ec10 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ec10:	b580      	push	{r7, lr}
    ec12:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ec14:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
    ec18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec1c:	2200      	movs	r2, #0
    ec1e:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    ec20:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
    ec24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec28:	781b      	ldrb	r3, [r3, #0]
    ec2a:	2b00      	cmp	r3, #0
    ec2c:	f001 81af 	beq.w	ff8e <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ec30:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec38:	781a      	ldrb	r2, [r3, #0]
    ec3a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ec3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec42:	781b      	ldrb	r3, [r3, #0]
    ec44:	b2db      	uxtb	r3, r3
    ec46:	429a      	cmp	r2, r3
    ec48:	d313      	bcc.n	ec72 <send_gps_pos+0x62>
    ec4a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ec4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec52:	781b      	ldrb	r3, [r3, #0]
    ec54:	b2db      	uxtb	r3, r3
    ec56:	461a      	mov	r2, r3
    ec58:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec60:	781b      	ldrb	r3, [r3, #0]
    ec62:	1ad3      	subs	r3, r2, r3
    ec64:	33ff      	adds	r3, #255	; 0xff
    ec66:	2b21      	cmp	r3, #33	; 0x21
    ec68:	bfd4      	ite	le
    ec6a:	2300      	movle	r3, #0
    ec6c:	2301      	movgt	r3, #1
    ec6e:	b2db      	uxtb	r3, r3
    ec70:	e011      	b.n	ec96 <send_gps_pos+0x86>
    ec72:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ec76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec7a:	781b      	ldrb	r3, [r3, #0]
    ec7c:	b2db      	uxtb	r3, r3
    ec7e:	461a      	mov	r2, r3
    ec80:	f24c 3319 	movw	r3, #49945	; 0xc319
    ec84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec88:	781b      	ldrb	r3, [r3, #0]
    ec8a:	1ad3      	subs	r3, r2, r3
    ec8c:	2b21      	cmp	r3, #33	; 0x21
    ec8e:	bfd4      	ite	le
    ec90:	2300      	movle	r3, #0
    ec92:	2301      	movgt	r3, #1
    ec94:	b2db      	uxtb	r3, r3
    ec96:	2b00      	cmp	r3, #0
    ec98:	f001 816b 	beq.w	ff72 <send_gps_pos+0x1362>
    ec9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    eca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca4:	781b      	ldrb	r3, [r3, #0]
    eca6:	461a      	mov	r2, r3
    eca8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ecac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb0:	2105      	movs	r1, #5
    ecb2:	5499      	strb	r1, [r3, r2]
    ecb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecbc:	781b      	ldrb	r3, [r3, #0]
    ecbe:	3301      	adds	r3, #1
    ecc0:	b2da      	uxtb	r2, r3
    ecc2:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecca:	701a      	strb	r2, [r3, #0]
    eccc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecd4:	781b      	ldrb	r3, [r3, #0]
    ecd6:	2bff      	cmp	r3, #255	; 0xff
    ecd8:	d105      	bne.n	ece6 <send_gps_pos+0xd6>
    ecda:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece2:	2200      	movs	r2, #0
    ece4:	701a      	strb	r2, [r3, #0]
    ece6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ecea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecee:	781b      	ldrb	r3, [r3, #0]
    ecf0:	461a      	mov	r2, r3
    ecf2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ecf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecfa:	2108      	movs	r1, #8
    ecfc:	5499      	strb	r1, [r3, r2]
    ecfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed06:	781b      	ldrb	r3, [r3, #0]
    ed08:	3301      	adds	r3, #1
    ed0a:	b2da      	uxtb	r2, r3
    ed0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed14:	701a      	strb	r2, [r3, #0]
    ed16:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed1e:	781b      	ldrb	r3, [r3, #0]
    ed20:	2bff      	cmp	r3, #255	; 0xff
    ed22:	d105      	bne.n	ed30 <send_gps_pos+0x120>
    ed24:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed2c:	2200      	movs	r2, #0
    ed2e:	701a      	strb	r2, [r3, #0]
    ed30:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ed34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed38:	2208      	movs	r2, #8
    ed3a:	701a      	strb	r2, [r3, #0]
    ed3c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ed40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed44:	2208      	movs	r2, #8
    ed46:	701a      	strb	r2, [r3, #0]
    ed48:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed50:	781b      	ldrb	r3, [r3, #0]
    ed52:	461a      	mov	r2, r3
    ed54:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    ed58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed5c:	7819      	ldrb	r1, [r3, #0]
    ed5e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ed62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed66:	5499      	strb	r1, [r3, r2]
    ed68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ed6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed70:	781a      	ldrb	r2, [r3, #0]
    ed72:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    ed76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed7a:	781b      	ldrb	r3, [r3, #0]
    ed7c:	4413      	add	r3, r2
    ed7e:	b2da      	uxtb	r2, r3
    ed80:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ed84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed88:	701a      	strb	r2, [r3, #0]
    ed8a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ed8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed92:	781a      	ldrb	r2, [r3, #0]
    ed94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ed98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed9c:	781b      	ldrb	r3, [r3, #0]
    ed9e:	4413      	add	r3, r2
    eda0:	b2da      	uxtb	r2, r3
    eda2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    eda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edaa:	701a      	strb	r2, [r3, #0]
    edac:	f24c 3319 	movw	r3, #49945	; 0xc319
    edb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb4:	781b      	ldrb	r3, [r3, #0]
    edb6:	3301      	adds	r3, #1
    edb8:	b2da      	uxtb	r2, r3
    edba:	f24c 3319 	movw	r3, #49945	; 0xc319
    edbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc2:	701a      	strb	r2, [r3, #0]
    edc4:	f24c 3319 	movw	r3, #49945	; 0xc319
    edc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edcc:	781b      	ldrb	r3, [r3, #0]
    edce:	2bff      	cmp	r3, #255	; 0xff
    edd0:	d105      	bne.n	edde <send_gps_pos+0x1ce>
    edd2:	f24c 3319 	movw	r3, #49945	; 0xc319
    edd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edda:	2200      	movs	r2, #0
    eddc:	701a      	strb	r2, [r3, #0]
    edde:	f24c 3319 	movw	r3, #49945	; 0xc319
    ede2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede6:	781b      	ldrb	r3, [r3, #0]
    ede8:	461a      	mov	r2, r3
    edea:	f24c 439c 	movw	r3, #50332	; 0xc49c
    edee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf2:	7819      	ldrb	r1, [r3, #0]
    edf4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    edf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edfc:	5499      	strb	r1, [r3, r2]
    edfe:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ee02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee06:	781a      	ldrb	r2, [r3, #0]
    ee08:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee10:	781b      	ldrb	r3, [r3, #0]
    ee12:	4413      	add	r3, r2
    ee14:	b2da      	uxtb	r2, r3
    ee16:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee1e:	701a      	strb	r2, [r3, #0]
    ee20:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ee24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee28:	781a      	ldrb	r2, [r3, #0]
    ee2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee32:	781b      	ldrb	r3, [r3, #0]
    ee34:	4413      	add	r3, r2
    ee36:	b2da      	uxtb	r2, r3
    ee38:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ee3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee40:	701a      	strb	r2, [r3, #0]
    ee42:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee4a:	781b      	ldrb	r3, [r3, #0]
    ee4c:	3301      	adds	r3, #1
    ee4e:	b2da      	uxtb	r2, r3
    ee50:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee58:	701a      	strb	r2, [r3, #0]
    ee5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee62:	781b      	ldrb	r3, [r3, #0]
    ee64:	2bff      	cmp	r3, #255	; 0xff
    ee66:	d105      	bne.n	ee74 <send_gps_pos+0x264>
    ee68:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee70:	2200      	movs	r2, #0
    ee72:	701a      	strb	r2, [r3, #0]
    ee74:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7c:	781b      	ldrb	r3, [r3, #0]
    ee7e:	461a      	mov	r2, r3
    ee80:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ee84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee88:	7859      	ldrb	r1, [r3, #1]
    ee8a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ee8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee92:	5499      	strb	r1, [r3, r2]
    ee94:	4bd1      	ldr	r3, [pc, #836]	; (f1dc <send_gps_pos+0x5cc>)
    ee96:	781a      	ldrb	r2, [r3, #0]
    ee98:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea0:	781b      	ldrb	r3, [r3, #0]
    eea2:	4413      	add	r3, r2
    eea4:	b2da      	uxtb	r2, r3
    eea6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eeaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeae:	701a      	strb	r2, [r3, #0]
    eeb0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    eeb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb8:	781a      	ldrb	r2, [r3, #0]
    eeba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec2:	781b      	ldrb	r3, [r3, #0]
    eec4:	4413      	add	r3, r2
    eec6:	b2da      	uxtb	r2, r3
    eec8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    eecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed0:	701a      	strb	r2, [r3, #0]
    eed2:	f24c 3319 	movw	r3, #49945	; 0xc319
    eed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeda:	781b      	ldrb	r3, [r3, #0]
    eedc:	3301      	adds	r3, #1
    eede:	b2da      	uxtb	r2, r3
    eee0:	f24c 3319 	movw	r3, #49945	; 0xc319
    eee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee8:	701a      	strb	r2, [r3, #0]
    eeea:	f24c 3319 	movw	r3, #49945	; 0xc319
    eeee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef2:	781b      	ldrb	r3, [r3, #0]
    eef4:	2bff      	cmp	r3, #255	; 0xff
    eef6:	d105      	bne.n	ef04 <send_gps_pos+0x2f4>
    eef8:	f24c 3319 	movw	r3, #49945	; 0xc319
    eefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef00:	2200      	movs	r2, #0
    ef02:	701a      	strb	r2, [r3, #0]
    ef04:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef0c:	781b      	ldrb	r3, [r3, #0]
    ef0e:	461a      	mov	r2, r3
    ef10:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ef14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef18:	7899      	ldrb	r1, [r3, #2]
    ef1a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ef1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef22:	5499      	strb	r1, [r3, r2]
    ef24:	4bae      	ldr	r3, [pc, #696]	; (f1e0 <send_gps_pos+0x5d0>)
    ef26:	781a      	ldrb	r2, [r3, #0]
    ef28:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef30:	781b      	ldrb	r3, [r3, #0]
    ef32:	4413      	add	r3, r2
    ef34:	b2da      	uxtb	r2, r3
    ef36:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef3e:	701a      	strb	r2, [r3, #0]
    ef40:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef48:	781a      	ldrb	r2, [r3, #0]
    ef4a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef52:	781b      	ldrb	r3, [r3, #0]
    ef54:	4413      	add	r3, r2
    ef56:	b2da      	uxtb	r2, r3
    ef58:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef60:	701a      	strb	r2, [r3, #0]
    ef62:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef6a:	781b      	ldrb	r3, [r3, #0]
    ef6c:	3301      	adds	r3, #1
    ef6e:	b2da      	uxtb	r2, r3
    ef70:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef78:	701a      	strb	r2, [r3, #0]
    ef7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef82:	781b      	ldrb	r3, [r3, #0]
    ef84:	2bff      	cmp	r3, #255	; 0xff
    ef86:	d105      	bne.n	ef94 <send_gps_pos+0x384>
    ef88:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef90:	2200      	movs	r2, #0
    ef92:	701a      	strb	r2, [r3, #0]
    ef94:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef9c:	781b      	ldrb	r3, [r3, #0]
    ef9e:	461a      	mov	r2, r3
    efa0:	f24c 439c 	movw	r3, #50332	; 0xc49c
    efa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa8:	78d9      	ldrb	r1, [r3, #3]
    efaa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    efae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb2:	5499      	strb	r1, [r3, r2]
    efb4:	4b8b      	ldr	r3, [pc, #556]	; (f1e4 <send_gps_pos+0x5d4>)
    efb6:	781a      	ldrb	r2, [r3, #0]
    efb8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    efbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc0:	781b      	ldrb	r3, [r3, #0]
    efc2:	4413      	add	r3, r2
    efc4:	b2da      	uxtb	r2, r3
    efc6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    efca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efce:	701a      	strb	r2, [r3, #0]
    efd0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    efd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd8:	781a      	ldrb	r2, [r3, #0]
    efda:	f24c 431d 	movw	r3, #50205	; 0xc41d
    efde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe2:	781b      	ldrb	r3, [r3, #0]
    efe4:	4413      	add	r3, r2
    efe6:	b2da      	uxtb	r2, r3
    efe8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    efec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff0:	701a      	strb	r2, [r3, #0]
    eff2:	f24c 3319 	movw	r3, #49945	; 0xc319
    eff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    effa:	781b      	ldrb	r3, [r3, #0]
    effc:	3301      	adds	r3, #1
    effe:	b2da      	uxtb	r2, r3
    f000:	f24c 3319 	movw	r3, #49945	; 0xc319
    f004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f008:	701a      	strb	r2, [r3, #0]
    f00a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f012:	781b      	ldrb	r3, [r3, #0]
    f014:	2bff      	cmp	r3, #255	; 0xff
    f016:	d105      	bne.n	f024 <send_gps_pos+0x414>
    f018:	f24c 3319 	movw	r3, #49945	; 0xc319
    f01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f020:	2200      	movs	r2, #0
    f022:	701a      	strb	r2, [r3, #0]
    f024:	f24c 3319 	movw	r3, #49945	; 0xc319
    f028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f02c:	781b      	ldrb	r3, [r3, #0]
    f02e:	461a      	mov	r2, r3
    f030:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f038:	7819      	ldrb	r1, [r3, #0]
    f03a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f042:	5499      	strb	r1, [r3, r2]
    f044:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f04c:	781a      	ldrb	r2, [r3, #0]
    f04e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f056:	781b      	ldrb	r3, [r3, #0]
    f058:	4413      	add	r3, r2
    f05a:	b2da      	uxtb	r2, r3
    f05c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f064:	701a      	strb	r2, [r3, #0]
    f066:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f06e:	781a      	ldrb	r2, [r3, #0]
    f070:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f078:	781b      	ldrb	r3, [r3, #0]
    f07a:	4413      	add	r3, r2
    f07c:	b2da      	uxtb	r2, r3
    f07e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f086:	701a      	strb	r2, [r3, #0]
    f088:	f24c 3319 	movw	r3, #49945	; 0xc319
    f08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f090:	781b      	ldrb	r3, [r3, #0]
    f092:	3301      	adds	r3, #1
    f094:	b2da      	uxtb	r2, r3
    f096:	f24c 3319 	movw	r3, #49945	; 0xc319
    f09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f09e:	701a      	strb	r2, [r3, #0]
    f0a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a8:	781b      	ldrb	r3, [r3, #0]
    f0aa:	2bff      	cmp	r3, #255	; 0xff
    f0ac:	d105      	bne.n	f0ba <send_gps_pos+0x4aa>
    f0ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b6:	2200      	movs	r2, #0
    f0b8:	701a      	strb	r2, [r3, #0]
    f0ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c2:	781b      	ldrb	r3, [r3, #0]
    f0c4:	461a      	mov	r2, r3
    f0c6:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ce:	7859      	ldrb	r1, [r3, #1]
    f0d0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d8:	5499      	strb	r1, [r3, r2]
    f0da:	4b43      	ldr	r3, [pc, #268]	; (f1e8 <send_gps_pos+0x5d8>)
    f0dc:	781a      	ldrb	r2, [r3, #0]
    f0de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e6:	781b      	ldrb	r3, [r3, #0]
    f0e8:	4413      	add	r3, r2
    f0ea:	b2da      	uxtb	r2, r3
    f0ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f4:	701a      	strb	r2, [r3, #0]
    f0f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0fe:	781a      	ldrb	r2, [r3, #0]
    f100:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f108:	781b      	ldrb	r3, [r3, #0]
    f10a:	4413      	add	r3, r2
    f10c:	b2da      	uxtb	r2, r3
    f10e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f116:	701a      	strb	r2, [r3, #0]
    f118:	f24c 3319 	movw	r3, #49945	; 0xc319
    f11c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f120:	781b      	ldrb	r3, [r3, #0]
    f122:	3301      	adds	r3, #1
    f124:	b2da      	uxtb	r2, r3
    f126:	f24c 3319 	movw	r3, #49945	; 0xc319
    f12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f12e:	701a      	strb	r2, [r3, #0]
    f130:	f24c 3319 	movw	r3, #49945	; 0xc319
    f134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f138:	781b      	ldrb	r3, [r3, #0]
    f13a:	2bff      	cmp	r3, #255	; 0xff
    f13c:	d105      	bne.n	f14a <send_gps_pos+0x53a>
    f13e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f146:	2200      	movs	r2, #0
    f148:	701a      	strb	r2, [r3, #0]
    f14a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f152:	781b      	ldrb	r3, [r3, #0]
    f154:	461a      	mov	r2, r3
    f156:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f15e:	7899      	ldrb	r1, [r3, #2]
    f160:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f168:	5499      	strb	r1, [r3, r2]
    f16a:	4b20      	ldr	r3, [pc, #128]	; (f1ec <send_gps_pos+0x5dc>)
    f16c:	781a      	ldrb	r2, [r3, #0]
    f16e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f176:	781b      	ldrb	r3, [r3, #0]
    f178:	4413      	add	r3, r2
    f17a:	b2da      	uxtb	r2, r3
    f17c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f184:	701a      	strb	r2, [r3, #0]
    f186:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18e:	781a      	ldrb	r2, [r3, #0]
    f190:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f198:	781b      	ldrb	r3, [r3, #0]
    f19a:	4413      	add	r3, r2
    f19c:	b2da      	uxtb	r2, r3
    f19e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a6:	701a      	strb	r2, [r3, #0]
    f1a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b0:	781b      	ldrb	r3, [r3, #0]
    f1b2:	3301      	adds	r3, #1
    f1b4:	b2da      	uxtb	r2, r3
    f1b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1be:	701a      	strb	r2, [r3, #0]
    f1c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c8:	781b      	ldrb	r3, [r3, #0]
    f1ca:	2bff      	cmp	r3, #255	; 0xff
    f1cc:	d110      	bne.n	f1f0 <send_gps_pos+0x5e0>
    f1ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d6:	2200      	movs	r2, #0
    f1d8:	701a      	strb	r2, [r3, #0]
    f1da:	e009      	b.n	f1f0 <send_gps_pos+0x5e0>
    f1dc:	2004c49d 	.word	0x2004c49d
    f1e0:	2004c49e 	.word	0x2004c49e
    f1e4:	2004c49f 	.word	0x2004c49f
    f1e8:	2004c4a1 	.word	0x2004c4a1
    f1ec:	2004c4a2 	.word	0x2004c4a2
    f1f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f8:	781b      	ldrb	r3, [r3, #0]
    f1fa:	461a      	mov	r2, r3
    f1fc:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f204:	78d9      	ldrb	r1, [r3, #3]
    f206:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20e:	5499      	strb	r1, [r3, r2]
    f210:	4bd3      	ldr	r3, [pc, #844]	; (f560 <send_gps_pos+0x950>)
    f212:	781a      	ldrb	r2, [r3, #0]
    f214:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f21c:	781b      	ldrb	r3, [r3, #0]
    f21e:	4413      	add	r3, r2
    f220:	b2da      	uxtb	r2, r3
    f222:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f22a:	701a      	strb	r2, [r3, #0]
    f22c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f234:	781a      	ldrb	r2, [r3, #0]
    f236:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f23e:	781b      	ldrb	r3, [r3, #0]
    f240:	4413      	add	r3, r2
    f242:	b2da      	uxtb	r2, r3
    f244:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f24c:	701a      	strb	r2, [r3, #0]
    f24e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f256:	781b      	ldrb	r3, [r3, #0]
    f258:	3301      	adds	r3, #1
    f25a:	b2da      	uxtb	r2, r3
    f25c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f264:	701a      	strb	r2, [r3, #0]
    f266:	f24c 3319 	movw	r3, #49945	; 0xc319
    f26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f26e:	781b      	ldrb	r3, [r3, #0]
    f270:	2bff      	cmp	r3, #255	; 0xff
    f272:	d105      	bne.n	f280 <send_gps_pos+0x670>
    f274:	f24c 3319 	movw	r3, #49945	; 0xc319
    f278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f27c:	2200      	movs	r2, #0
    f27e:	701a      	strb	r2, [r3, #0]
    f280:	f24c 3319 	movw	r3, #49945	; 0xc319
    f284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f288:	781b      	ldrb	r3, [r3, #0]
    f28a:	461a      	mov	r2, r3
    f28c:	f24c 4398 	movw	r3, #50328	; 0xc498
    f290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f294:	7819      	ldrb	r1, [r3, #0]
    f296:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f29e:	5499      	strb	r1, [r3, r2]
    f2a0:	f24c 4398 	movw	r3, #50328	; 0xc498
    f2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2a8:	781a      	ldrb	r2, [r3, #0]
    f2aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b2:	781b      	ldrb	r3, [r3, #0]
    f2b4:	4413      	add	r3, r2
    f2b6:	b2da      	uxtb	r2, r3
    f2b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c0:	701a      	strb	r2, [r3, #0]
    f2c2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ca:	781a      	ldrb	r2, [r3, #0]
    f2cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d4:	781b      	ldrb	r3, [r3, #0]
    f2d6:	4413      	add	r3, r2
    f2d8:	b2da      	uxtb	r2, r3
    f2da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e2:	701a      	strb	r2, [r3, #0]
    f2e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ec:	781b      	ldrb	r3, [r3, #0]
    f2ee:	3301      	adds	r3, #1
    f2f0:	b2da      	uxtb	r2, r3
    f2f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2fa:	701a      	strb	r2, [r3, #0]
    f2fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f304:	781b      	ldrb	r3, [r3, #0]
    f306:	2bff      	cmp	r3, #255	; 0xff
    f308:	d105      	bne.n	f316 <send_gps_pos+0x706>
    f30a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f312:	2200      	movs	r2, #0
    f314:	701a      	strb	r2, [r3, #0]
    f316:	f24c 3319 	movw	r3, #49945	; 0xc319
    f31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f31e:	781b      	ldrb	r3, [r3, #0]
    f320:	461a      	mov	r2, r3
    f322:	f24c 4398 	movw	r3, #50328	; 0xc498
    f326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f32a:	7859      	ldrb	r1, [r3, #1]
    f32c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f334:	5499      	strb	r1, [r3, r2]
    f336:	4b8b      	ldr	r3, [pc, #556]	; (f564 <send_gps_pos+0x954>)
    f338:	781a      	ldrb	r2, [r3, #0]
    f33a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f342:	781b      	ldrb	r3, [r3, #0]
    f344:	4413      	add	r3, r2
    f346:	b2da      	uxtb	r2, r3
    f348:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f350:	701a      	strb	r2, [r3, #0]
    f352:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35a:	781a      	ldrb	r2, [r3, #0]
    f35c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f364:	781b      	ldrb	r3, [r3, #0]
    f366:	4413      	add	r3, r2
    f368:	b2da      	uxtb	r2, r3
    f36a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f372:	701a      	strb	r2, [r3, #0]
    f374:	f24c 3319 	movw	r3, #49945	; 0xc319
    f378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f37c:	781b      	ldrb	r3, [r3, #0]
    f37e:	3301      	adds	r3, #1
    f380:	b2da      	uxtb	r2, r3
    f382:	f24c 3319 	movw	r3, #49945	; 0xc319
    f386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38a:	701a      	strb	r2, [r3, #0]
    f38c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f394:	781b      	ldrb	r3, [r3, #0]
    f396:	2bff      	cmp	r3, #255	; 0xff
    f398:	d105      	bne.n	f3a6 <send_gps_pos+0x796>
    f39a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a2:	2200      	movs	r2, #0
    f3a4:	701a      	strb	r2, [r3, #0]
    f3a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ae:	781b      	ldrb	r3, [r3, #0]
    f3b0:	461a      	mov	r2, r3
    f3b2:	f24c 4398 	movw	r3, #50328	; 0xc498
    f3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ba:	7899      	ldrb	r1, [r3, #2]
    f3bc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c4:	5499      	strb	r1, [r3, r2]
    f3c6:	4b68      	ldr	r3, [pc, #416]	; (f568 <send_gps_pos+0x958>)
    f3c8:	781a      	ldrb	r2, [r3, #0]
    f3ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d2:	781b      	ldrb	r3, [r3, #0]
    f3d4:	4413      	add	r3, r2
    f3d6:	b2da      	uxtb	r2, r3
    f3d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e0:	701a      	strb	r2, [r3, #0]
    f3e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ea:	781a      	ldrb	r2, [r3, #0]
    f3ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3f4:	781b      	ldrb	r3, [r3, #0]
    f3f6:	4413      	add	r3, r2
    f3f8:	b2da      	uxtb	r2, r3
    f3fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f402:	701a      	strb	r2, [r3, #0]
    f404:	f24c 3319 	movw	r3, #49945	; 0xc319
    f408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f40c:	781b      	ldrb	r3, [r3, #0]
    f40e:	3301      	adds	r3, #1
    f410:	b2da      	uxtb	r2, r3
    f412:	f24c 3319 	movw	r3, #49945	; 0xc319
    f416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41a:	701a      	strb	r2, [r3, #0]
    f41c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f424:	781b      	ldrb	r3, [r3, #0]
    f426:	2bff      	cmp	r3, #255	; 0xff
    f428:	d105      	bne.n	f436 <send_gps_pos+0x826>
    f42a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f432:	2200      	movs	r2, #0
    f434:	701a      	strb	r2, [r3, #0]
    f436:	f24c 3319 	movw	r3, #49945	; 0xc319
    f43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f43e:	781b      	ldrb	r3, [r3, #0]
    f440:	461a      	mov	r2, r3
    f442:	f24c 4398 	movw	r3, #50328	; 0xc498
    f446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44a:	78d9      	ldrb	r1, [r3, #3]
    f44c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f454:	5499      	strb	r1, [r3, r2]
    f456:	4b45      	ldr	r3, [pc, #276]	; (f56c <send_gps_pos+0x95c>)
    f458:	781a      	ldrb	r2, [r3, #0]
    f45a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f462:	781b      	ldrb	r3, [r3, #0]
    f464:	4413      	add	r3, r2
    f466:	b2da      	uxtb	r2, r3
    f468:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f470:	701a      	strb	r2, [r3, #0]
    f472:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47a:	781a      	ldrb	r2, [r3, #0]
    f47c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f484:	781b      	ldrb	r3, [r3, #0]
    f486:	4413      	add	r3, r2
    f488:	b2da      	uxtb	r2, r3
    f48a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f492:	701a      	strb	r2, [r3, #0]
    f494:	f24c 3319 	movw	r3, #49945	; 0xc319
    f498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f49c:	781b      	ldrb	r3, [r3, #0]
    f49e:	3301      	adds	r3, #1
    f4a0:	b2da      	uxtb	r2, r3
    f4a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4aa:	701a      	strb	r2, [r3, #0]
    f4ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b4:	781b      	ldrb	r3, [r3, #0]
    f4b6:	2bff      	cmp	r3, #255	; 0xff
    f4b8:	d105      	bne.n	f4c6 <send_gps_pos+0x8b6>
    f4ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c2:	2200      	movs	r2, #0
    f4c4:	701a      	strb	r2, [r3, #0]
    f4c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ce:	781b      	ldrb	r3, [r3, #0]
    f4d0:	461a      	mov	r2, r3
    f4d2:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4da:	7819      	ldrb	r1, [r3, #0]
    f4dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e4:	5499      	strb	r1, [r3, r2]
    f4e6:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ee:	781a      	ldrb	r2, [r3, #0]
    f4f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f8:	781b      	ldrb	r3, [r3, #0]
    f4fa:	4413      	add	r3, r2
    f4fc:	b2da      	uxtb	r2, r3
    f4fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f506:	701a      	strb	r2, [r3, #0]
    f508:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f510:	781a      	ldrb	r2, [r3, #0]
    f512:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f51a:	781b      	ldrb	r3, [r3, #0]
    f51c:	4413      	add	r3, r2
    f51e:	b2da      	uxtb	r2, r3
    f520:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f528:	701a      	strb	r2, [r3, #0]
    f52a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f532:	781b      	ldrb	r3, [r3, #0]
    f534:	3301      	adds	r3, #1
    f536:	b2da      	uxtb	r2, r3
    f538:	f24c 3319 	movw	r3, #49945	; 0xc319
    f53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f540:	701a      	strb	r2, [r3, #0]
    f542:	f24c 3319 	movw	r3, #49945	; 0xc319
    f546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54a:	781b      	ldrb	r3, [r3, #0]
    f54c:	2bff      	cmp	r3, #255	; 0xff
    f54e:	d10f      	bne.n	f570 <send_gps_pos+0x960>
    f550:	f24c 3319 	movw	r3, #49945	; 0xc319
    f554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f558:	2200      	movs	r2, #0
    f55a:	701a      	strb	r2, [r3, #0]
    f55c:	e008      	b.n	f570 <send_gps_pos+0x960>
    f55e:	bf00      	nop
    f560:	2004c4a3 	.word	0x2004c4a3
    f564:	2004c499 	.word	0x2004c499
    f568:	2004c49a 	.word	0x2004c49a
    f56c:	2004c49b 	.word	0x2004c49b
    f570:	f24c 3319 	movw	r3, #49945	; 0xc319
    f574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f578:	781b      	ldrb	r3, [r3, #0]
    f57a:	461a      	mov	r2, r3
    f57c:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f584:	7859      	ldrb	r1, [r3, #1]
    f586:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f58e:	5499      	strb	r1, [r3, r2]
    f590:	4bd1      	ldr	r3, [pc, #836]	; (f8d8 <send_gps_pos+0xcc8>)
    f592:	781a      	ldrb	r2, [r3, #0]
    f594:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59c:	781b      	ldrb	r3, [r3, #0]
    f59e:	4413      	add	r3, r2
    f5a0:	b2da      	uxtb	r2, r3
    f5a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5aa:	701a      	strb	r2, [r3, #0]
    f5ac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b4:	781a      	ldrb	r2, [r3, #0]
    f5b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5be:	781b      	ldrb	r3, [r3, #0]
    f5c0:	4413      	add	r3, r2
    f5c2:	b2da      	uxtb	r2, r3
    f5c4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5cc:	701a      	strb	r2, [r3, #0]
    f5ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d6:	781b      	ldrb	r3, [r3, #0]
    f5d8:	3301      	adds	r3, #1
    f5da:	b2da      	uxtb	r2, r3
    f5dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e4:	701a      	strb	r2, [r3, #0]
    f5e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ee:	781b      	ldrb	r3, [r3, #0]
    f5f0:	2bff      	cmp	r3, #255	; 0xff
    f5f2:	d105      	bne.n	f600 <send_gps_pos+0x9f0>
    f5f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5fc:	2200      	movs	r2, #0
    f5fe:	701a      	strb	r2, [r3, #0]
    f600:	f24c 3319 	movw	r3, #49945	; 0xc319
    f604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f608:	781b      	ldrb	r3, [r3, #0]
    f60a:	461a      	mov	r2, r3
    f60c:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f614:	7899      	ldrb	r1, [r3, #2]
    f616:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f61e:	5499      	strb	r1, [r3, r2]
    f620:	4bae      	ldr	r3, [pc, #696]	; (f8dc <send_gps_pos+0xccc>)
    f622:	781a      	ldrb	r2, [r3, #0]
    f624:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f62c:	781b      	ldrb	r3, [r3, #0]
    f62e:	4413      	add	r3, r2
    f630:	b2da      	uxtb	r2, r3
    f632:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f63a:	701a      	strb	r2, [r3, #0]
    f63c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f644:	781a      	ldrb	r2, [r3, #0]
    f646:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f64e:	781b      	ldrb	r3, [r3, #0]
    f650:	4413      	add	r3, r2
    f652:	b2da      	uxtb	r2, r3
    f654:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65c:	701a      	strb	r2, [r3, #0]
    f65e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f666:	781b      	ldrb	r3, [r3, #0]
    f668:	3301      	adds	r3, #1
    f66a:	b2da      	uxtb	r2, r3
    f66c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f674:	701a      	strb	r2, [r3, #0]
    f676:	f24c 3319 	movw	r3, #49945	; 0xc319
    f67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67e:	781b      	ldrb	r3, [r3, #0]
    f680:	2bff      	cmp	r3, #255	; 0xff
    f682:	d105      	bne.n	f690 <send_gps_pos+0xa80>
    f684:	f24c 3319 	movw	r3, #49945	; 0xc319
    f688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f68c:	2200      	movs	r2, #0
    f68e:	701a      	strb	r2, [r3, #0]
    f690:	f24c 3319 	movw	r3, #49945	; 0xc319
    f694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f698:	781b      	ldrb	r3, [r3, #0]
    f69a:	461a      	mov	r2, r3
    f69c:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a4:	78d9      	ldrb	r1, [r3, #3]
    f6a6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ae:	5499      	strb	r1, [r3, r2]
    f6b0:	4b8b      	ldr	r3, [pc, #556]	; (f8e0 <send_gps_pos+0xcd0>)
    f6b2:	781a      	ldrb	r2, [r3, #0]
    f6b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6bc:	781b      	ldrb	r3, [r3, #0]
    f6be:	4413      	add	r3, r2
    f6c0:	b2da      	uxtb	r2, r3
    f6c2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ca:	701a      	strb	r2, [r3, #0]
    f6cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d4:	781a      	ldrb	r2, [r3, #0]
    f6d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6de:	781b      	ldrb	r3, [r3, #0]
    f6e0:	4413      	add	r3, r2
    f6e2:	b2da      	uxtb	r2, r3
    f6e4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ec:	701a      	strb	r2, [r3, #0]
    f6ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f6:	781b      	ldrb	r3, [r3, #0]
    f6f8:	3301      	adds	r3, #1
    f6fa:	b2da      	uxtb	r2, r3
    f6fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f704:	701a      	strb	r2, [r3, #0]
    f706:	f24c 3319 	movw	r3, #49945	; 0xc319
    f70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f70e:	781b      	ldrb	r3, [r3, #0]
    f710:	2bff      	cmp	r3, #255	; 0xff
    f712:	d105      	bne.n	f720 <send_gps_pos+0xb10>
    f714:	f24c 3319 	movw	r3, #49945	; 0xc319
    f718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71c:	2200      	movs	r2, #0
    f71e:	701a      	strb	r2, [r3, #0]
    f720:	f24c 3319 	movw	r3, #49945	; 0xc319
    f724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f728:	781b      	ldrb	r3, [r3, #0]
    f72a:	461a      	mov	r2, r3
    f72c:	f24c 4390 	movw	r3, #50320	; 0xc490
    f730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f734:	7819      	ldrb	r1, [r3, #0]
    f736:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73e:	5499      	strb	r1, [r3, r2]
    f740:	f24c 4390 	movw	r3, #50320	; 0xc490
    f744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f748:	781a      	ldrb	r2, [r3, #0]
    f74a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f752:	781b      	ldrb	r3, [r3, #0]
    f754:	4413      	add	r3, r2
    f756:	b2da      	uxtb	r2, r3
    f758:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f760:	701a      	strb	r2, [r3, #0]
    f762:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f76a:	781a      	ldrb	r2, [r3, #0]
    f76c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f774:	781b      	ldrb	r3, [r3, #0]
    f776:	4413      	add	r3, r2
    f778:	b2da      	uxtb	r2, r3
    f77a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f782:	701a      	strb	r2, [r3, #0]
    f784:	f24c 3319 	movw	r3, #49945	; 0xc319
    f788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f78c:	781b      	ldrb	r3, [r3, #0]
    f78e:	3301      	adds	r3, #1
    f790:	b2da      	uxtb	r2, r3
    f792:	f24c 3319 	movw	r3, #49945	; 0xc319
    f796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79a:	701a      	strb	r2, [r3, #0]
    f79c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a4:	781b      	ldrb	r3, [r3, #0]
    f7a6:	2bff      	cmp	r3, #255	; 0xff
    f7a8:	d105      	bne.n	f7b6 <send_gps_pos+0xba6>
    f7aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b2:	2200      	movs	r2, #0
    f7b4:	701a      	strb	r2, [r3, #0]
    f7b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7be:	781b      	ldrb	r3, [r3, #0]
    f7c0:	461a      	mov	r2, r3
    f7c2:	f24c 4390 	movw	r3, #50320	; 0xc490
    f7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ca:	7859      	ldrb	r1, [r3, #1]
    f7cc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d4:	5499      	strb	r1, [r3, r2]
    f7d6:	4b43      	ldr	r3, [pc, #268]	; (f8e4 <send_gps_pos+0xcd4>)
    f7d8:	781a      	ldrb	r2, [r3, #0]
    f7da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e2:	781b      	ldrb	r3, [r3, #0]
    f7e4:	4413      	add	r3, r2
    f7e6:	b2da      	uxtb	r2, r3
    f7e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f0:	701a      	strb	r2, [r3, #0]
    f7f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fa:	781a      	ldrb	r2, [r3, #0]
    f7fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f804:	781b      	ldrb	r3, [r3, #0]
    f806:	4413      	add	r3, r2
    f808:	b2da      	uxtb	r2, r3
    f80a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f812:	701a      	strb	r2, [r3, #0]
    f814:	f24c 3319 	movw	r3, #49945	; 0xc319
    f818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f81c:	781b      	ldrb	r3, [r3, #0]
    f81e:	3301      	adds	r3, #1
    f820:	b2da      	uxtb	r2, r3
    f822:	f24c 3319 	movw	r3, #49945	; 0xc319
    f826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82a:	701a      	strb	r2, [r3, #0]
    f82c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f834:	781b      	ldrb	r3, [r3, #0]
    f836:	2bff      	cmp	r3, #255	; 0xff
    f838:	d105      	bne.n	f846 <send_gps_pos+0xc36>
    f83a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f842:	2200      	movs	r2, #0
    f844:	701a      	strb	r2, [r3, #0]
    f846:	f24c 3319 	movw	r3, #49945	; 0xc319
    f84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f84e:	781b      	ldrb	r3, [r3, #0]
    f850:	461a      	mov	r2, r3
    f852:	f24c 4390 	movw	r3, #50320	; 0xc490
    f856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f85a:	7899      	ldrb	r1, [r3, #2]
    f85c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f864:	5499      	strb	r1, [r3, r2]
    f866:	4b20      	ldr	r3, [pc, #128]	; (f8e8 <send_gps_pos+0xcd8>)
    f868:	781a      	ldrb	r2, [r3, #0]
    f86a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f86e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f872:	781b      	ldrb	r3, [r3, #0]
    f874:	4413      	add	r3, r2
    f876:	b2da      	uxtb	r2, r3
    f878:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f880:	701a      	strb	r2, [r3, #0]
    f882:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f88a:	781a      	ldrb	r2, [r3, #0]
    f88c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f894:	781b      	ldrb	r3, [r3, #0]
    f896:	4413      	add	r3, r2
    f898:	b2da      	uxtb	r2, r3
    f89a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a2:	701a      	strb	r2, [r3, #0]
    f8a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ac:	781b      	ldrb	r3, [r3, #0]
    f8ae:	3301      	adds	r3, #1
    f8b0:	b2da      	uxtb	r2, r3
    f8b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ba:	701a      	strb	r2, [r3, #0]
    f8bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c4:	781b      	ldrb	r3, [r3, #0]
    f8c6:	2bff      	cmp	r3, #255	; 0xff
    f8c8:	d110      	bne.n	f8ec <send_gps_pos+0xcdc>
    f8ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d2:	2200      	movs	r2, #0
    f8d4:	701a      	strb	r2, [r3, #0]
    f8d6:	e009      	b.n	f8ec <send_gps_pos+0xcdc>
    f8d8:	2004c48d 	.word	0x2004c48d
    f8dc:	2004c48e 	.word	0x2004c48e
    f8e0:	2004c48f 	.word	0x2004c48f
    f8e4:	2004c491 	.word	0x2004c491
    f8e8:	2004c492 	.word	0x2004c492
    f8ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f4:	781b      	ldrb	r3, [r3, #0]
    f8f6:	461a      	mov	r2, r3
    f8f8:	f24c 4390 	movw	r3, #50320	; 0xc490
    f8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f900:	78d9      	ldrb	r1, [r3, #3]
    f902:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f90a:	5499      	strb	r1, [r3, r2]
    f90c:	4bd3      	ldr	r3, [pc, #844]	; (fc5c <send_gps_pos+0x104c>)
    f90e:	781a      	ldrb	r2, [r3, #0]
    f910:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f918:	781b      	ldrb	r3, [r3, #0]
    f91a:	4413      	add	r3, r2
    f91c:	b2da      	uxtb	r2, r3
    f91e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f926:	701a      	strb	r2, [r3, #0]
    f928:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f930:	781a      	ldrb	r2, [r3, #0]
    f932:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f93a:	781b      	ldrb	r3, [r3, #0]
    f93c:	4413      	add	r3, r2
    f93e:	b2da      	uxtb	r2, r3
    f940:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f948:	701a      	strb	r2, [r3, #0]
    f94a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f952:	781b      	ldrb	r3, [r3, #0]
    f954:	3301      	adds	r3, #1
    f956:	b2da      	uxtb	r2, r3
    f958:	f24c 3319 	movw	r3, #49945	; 0xc319
    f95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f960:	701a      	strb	r2, [r3, #0]
    f962:	f24c 3319 	movw	r3, #49945	; 0xc319
    f966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f96a:	781b      	ldrb	r3, [r3, #0]
    f96c:	2bff      	cmp	r3, #255	; 0xff
    f96e:	d105      	bne.n	f97c <send_gps_pos+0xd6c>
    f970:	f24c 3319 	movw	r3, #49945	; 0xc319
    f974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f978:	2200      	movs	r2, #0
    f97a:	701a      	strb	r2, [r3, #0]
    f97c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f984:	781b      	ldrb	r3, [r3, #0]
    f986:	461a      	mov	r2, r3
    f988:	f24c 4394 	movw	r3, #50324	; 0xc494
    f98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f990:	7819      	ldrb	r1, [r3, #0]
    f992:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f99a:	5499      	strb	r1, [r3, r2]
    f99c:	f24c 4394 	movw	r3, #50324	; 0xc494
    f9a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a4:	781a      	ldrb	r2, [r3, #0]
    f9a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ae:	781b      	ldrb	r3, [r3, #0]
    f9b0:	4413      	add	r3, r2
    f9b2:	b2da      	uxtb	r2, r3
    f9b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9bc:	701a      	strb	r2, [r3, #0]
    f9be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c6:	781a      	ldrb	r2, [r3, #0]
    f9c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d0:	781b      	ldrb	r3, [r3, #0]
    f9d2:	4413      	add	r3, r2
    f9d4:	b2da      	uxtb	r2, r3
    f9d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9de:	701a      	strb	r2, [r3, #0]
    f9e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e8:	781b      	ldrb	r3, [r3, #0]
    f9ea:	3301      	adds	r3, #1
    f9ec:	b2da      	uxtb	r2, r3
    f9ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f6:	701a      	strb	r2, [r3, #0]
    f9f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa00:	781b      	ldrb	r3, [r3, #0]
    fa02:	2bff      	cmp	r3, #255	; 0xff
    fa04:	d105      	bne.n	fa12 <send_gps_pos+0xe02>
    fa06:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa0e:	2200      	movs	r2, #0
    fa10:	701a      	strb	r2, [r3, #0]
    fa12:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa1a:	781b      	ldrb	r3, [r3, #0]
    fa1c:	461a      	mov	r2, r3
    fa1e:	f24c 4394 	movw	r3, #50324	; 0xc494
    fa22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa26:	7859      	ldrb	r1, [r3, #1]
    fa28:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fa2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa30:	5499      	strb	r1, [r3, r2]
    fa32:	4b8b      	ldr	r3, [pc, #556]	; (fc60 <send_gps_pos+0x1050>)
    fa34:	781a      	ldrb	r2, [r3, #0]
    fa36:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa3e:	781b      	ldrb	r3, [r3, #0]
    fa40:	4413      	add	r3, r2
    fa42:	b2da      	uxtb	r2, r3
    fa44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4c:	701a      	strb	r2, [r3, #0]
    fa4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa56:	781a      	ldrb	r2, [r3, #0]
    fa58:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa60:	781b      	ldrb	r3, [r3, #0]
    fa62:	4413      	add	r3, r2
    fa64:	b2da      	uxtb	r2, r3
    fa66:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa6e:	701a      	strb	r2, [r3, #0]
    fa70:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa78:	781b      	ldrb	r3, [r3, #0]
    fa7a:	3301      	adds	r3, #1
    fa7c:	b2da      	uxtb	r2, r3
    fa7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa86:	701a      	strb	r2, [r3, #0]
    fa88:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa90:	781b      	ldrb	r3, [r3, #0]
    fa92:	2bff      	cmp	r3, #255	; 0xff
    fa94:	d105      	bne.n	faa2 <send_gps_pos+0xe92>
    fa96:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa9e:	2200      	movs	r2, #0
    faa0:	701a      	strb	r2, [r3, #0]
    faa2:	f24c 3319 	movw	r3, #49945	; 0xc319
    faa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faaa:	781b      	ldrb	r3, [r3, #0]
    faac:	461a      	mov	r2, r3
    faae:	f24c 4394 	movw	r3, #50324	; 0xc494
    fab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab6:	7899      	ldrb	r1, [r3, #2]
    fab8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac0:	5499      	strb	r1, [r3, r2]
    fac2:	4b68      	ldr	r3, [pc, #416]	; (fc64 <send_gps_pos+0x1054>)
    fac4:	781a      	ldrb	r2, [r3, #0]
    fac6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    faca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    face:	781b      	ldrb	r3, [r3, #0]
    fad0:	4413      	add	r3, r2
    fad2:	b2da      	uxtb	r2, r3
    fad4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fadc:	701a      	strb	r2, [r3, #0]
    fade:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae6:	781a      	ldrb	r2, [r3, #0]
    fae8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    faec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf0:	781b      	ldrb	r3, [r3, #0]
    faf2:	4413      	add	r3, r2
    faf4:	b2da      	uxtb	r2, r3
    faf6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fafe:	701a      	strb	r2, [r3, #0]
    fb00:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb08:	781b      	ldrb	r3, [r3, #0]
    fb0a:	3301      	adds	r3, #1
    fb0c:	b2da      	uxtb	r2, r3
    fb0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb16:	701a      	strb	r2, [r3, #0]
    fb18:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb20:	781b      	ldrb	r3, [r3, #0]
    fb22:	2bff      	cmp	r3, #255	; 0xff
    fb24:	d105      	bne.n	fb32 <send_gps_pos+0xf22>
    fb26:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb2e:	2200      	movs	r2, #0
    fb30:	701a      	strb	r2, [r3, #0]
    fb32:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb3a:	781b      	ldrb	r3, [r3, #0]
    fb3c:	461a      	mov	r2, r3
    fb3e:	f24c 4394 	movw	r3, #50324	; 0xc494
    fb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb46:	78d9      	ldrb	r1, [r3, #3]
    fb48:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb50:	5499      	strb	r1, [r3, r2]
    fb52:	4b45      	ldr	r3, [pc, #276]	; (fc68 <send_gps_pos+0x1058>)
    fb54:	781a      	ldrb	r2, [r3, #0]
    fb56:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb5e:	781b      	ldrb	r3, [r3, #0]
    fb60:	4413      	add	r3, r2
    fb62:	b2da      	uxtb	r2, r3
    fb64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb6c:	701a      	strb	r2, [r3, #0]
    fb6e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb76:	781a      	ldrb	r2, [r3, #0]
    fb78:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb80:	781b      	ldrb	r3, [r3, #0]
    fb82:	4413      	add	r3, r2
    fb84:	b2da      	uxtb	r2, r3
    fb86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb8e:	701a      	strb	r2, [r3, #0]
    fb90:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb98:	781b      	ldrb	r3, [r3, #0]
    fb9a:	3301      	adds	r3, #1
    fb9c:	b2da      	uxtb	r2, r3
    fb9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba6:	701a      	strb	r2, [r3, #0]
    fba8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb0:	781b      	ldrb	r3, [r3, #0]
    fbb2:	2bff      	cmp	r3, #255	; 0xff
    fbb4:	d105      	bne.n	fbc2 <send_gps_pos+0xfb2>
    fbb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbbe:	2200      	movs	r2, #0
    fbc0:	701a      	strb	r2, [r3, #0]
    fbc2:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbca:	781b      	ldrb	r3, [r3, #0]
    fbcc:	461a      	mov	r2, r3
    fbce:	f24c 4388 	movw	r3, #50312	; 0xc488
    fbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd6:	7819      	ldrb	r1, [r3, #0]
    fbd8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe0:	5499      	strb	r1, [r3, r2]
    fbe2:	f24c 4388 	movw	r3, #50312	; 0xc488
    fbe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbea:	781a      	ldrb	r2, [r3, #0]
    fbec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf4:	781b      	ldrb	r3, [r3, #0]
    fbf6:	4413      	add	r3, r2
    fbf8:	b2da      	uxtb	r2, r3
    fbfa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fbfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc02:	701a      	strb	r2, [r3, #0]
    fc04:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc0c:	781a      	ldrb	r2, [r3, #0]
    fc0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc16:	781b      	ldrb	r3, [r3, #0]
    fc18:	4413      	add	r3, r2
    fc1a:	b2da      	uxtb	r2, r3
    fc1c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc24:	701a      	strb	r2, [r3, #0]
    fc26:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc2e:	781b      	ldrb	r3, [r3, #0]
    fc30:	3301      	adds	r3, #1
    fc32:	b2da      	uxtb	r2, r3
    fc34:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc3c:	701a      	strb	r2, [r3, #0]
    fc3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc46:	781b      	ldrb	r3, [r3, #0]
    fc48:	2bff      	cmp	r3, #255	; 0xff
    fc4a:	d10f      	bne.n	fc6c <send_gps_pos+0x105c>
    fc4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc54:	2200      	movs	r2, #0
    fc56:	701a      	strb	r2, [r3, #0]
    fc58:	e008      	b.n	fc6c <send_gps_pos+0x105c>
    fc5a:	bf00      	nop
    fc5c:	2004c493 	.word	0x2004c493
    fc60:	2004c495 	.word	0x2004c495
    fc64:	2004c496 	.word	0x2004c496
    fc68:	2004c497 	.word	0x2004c497
    fc6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc74:	781b      	ldrb	r3, [r3, #0]
    fc76:	461a      	mov	r2, r3
    fc78:	f24c 4388 	movw	r3, #50312	; 0xc488
    fc7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc80:	7859      	ldrb	r1, [r3, #1]
    fc82:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fc86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc8a:	5499      	strb	r1, [r3, r2]
    fc8c:	4bc0      	ldr	r3, [pc, #768]	; (ff90 <send_gps_pos+0x1380>)
    fc8e:	781a      	ldrb	r2, [r3, #0]
    fc90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc98:	781b      	ldrb	r3, [r3, #0]
    fc9a:	4413      	add	r3, r2
    fc9c:	b2da      	uxtb	r2, r3
    fc9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca6:	701a      	strb	r2, [r3, #0]
    fca8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fcac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb0:	781a      	ldrb	r2, [r3, #0]
    fcb2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fcb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcba:	781b      	ldrb	r3, [r3, #0]
    fcbc:	4413      	add	r3, r2
    fcbe:	b2da      	uxtb	r2, r3
    fcc0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc8:	701a      	strb	r2, [r3, #0]
    fcca:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd2:	781b      	ldrb	r3, [r3, #0]
    fcd4:	3301      	adds	r3, #1
    fcd6:	b2da      	uxtb	r2, r3
    fcd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce0:	701a      	strb	r2, [r3, #0]
    fce2:	f24c 3319 	movw	r3, #49945	; 0xc319
    fce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcea:	781b      	ldrb	r3, [r3, #0]
    fcec:	2bff      	cmp	r3, #255	; 0xff
    fcee:	d105      	bne.n	fcfc <send_gps_pos+0x10ec>
    fcf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf8:	2200      	movs	r2, #0
    fcfa:	701a      	strb	r2, [r3, #0]
    fcfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd04:	781b      	ldrb	r3, [r3, #0]
    fd06:	461a      	mov	r2, r3
    fd08:	f24c 4388 	movw	r3, #50312	; 0xc488
    fd0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd10:	7899      	ldrb	r1, [r3, #2]
    fd12:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fd16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd1a:	5499      	strb	r1, [r3, r2]
    fd1c:	4b9d      	ldr	r3, [pc, #628]	; (ff94 <send_gps_pos+0x1384>)
    fd1e:	781a      	ldrb	r2, [r3, #0]
    fd20:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd28:	781b      	ldrb	r3, [r3, #0]
    fd2a:	4413      	add	r3, r2
    fd2c:	b2da      	uxtb	r2, r3
    fd2e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd36:	701a      	strb	r2, [r3, #0]
    fd38:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd40:	781a      	ldrb	r2, [r3, #0]
    fd42:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd4a:	781b      	ldrb	r3, [r3, #0]
    fd4c:	4413      	add	r3, r2
    fd4e:	b2da      	uxtb	r2, r3
    fd50:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd58:	701a      	strb	r2, [r3, #0]
    fd5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd62:	781b      	ldrb	r3, [r3, #0]
    fd64:	3301      	adds	r3, #1
    fd66:	b2da      	uxtb	r2, r3
    fd68:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd70:	701a      	strb	r2, [r3, #0]
    fd72:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd7a:	781b      	ldrb	r3, [r3, #0]
    fd7c:	2bff      	cmp	r3, #255	; 0xff
    fd7e:	d105      	bne.n	fd8c <send_gps_pos+0x117c>
    fd80:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd88:	2200      	movs	r2, #0
    fd8a:	701a      	strb	r2, [r3, #0]
    fd8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd94:	781b      	ldrb	r3, [r3, #0]
    fd96:	461a      	mov	r2, r3
    fd98:	f24c 4388 	movw	r3, #50312	; 0xc488
    fd9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda0:	78d9      	ldrb	r1, [r3, #3]
    fda2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdaa:	5499      	strb	r1, [r3, r2]
    fdac:	4b7a      	ldr	r3, [pc, #488]	; (ff98 <send_gps_pos+0x1388>)
    fdae:	781a      	ldrb	r2, [r3, #0]
    fdb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fdb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb8:	781b      	ldrb	r3, [r3, #0]
    fdba:	4413      	add	r3, r2
    fdbc:	b2da      	uxtb	r2, r3
    fdbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fdc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc6:	701a      	strb	r2, [r3, #0]
    fdc8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fdcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd0:	781a      	ldrb	r2, [r3, #0]
    fdd2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fdd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdda:	781b      	ldrb	r3, [r3, #0]
    fddc:	4413      	add	r3, r2
    fdde:	b2da      	uxtb	r2, r3
    fde0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde8:	701a      	strb	r2, [r3, #0]
    fdea:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf2:	781b      	ldrb	r3, [r3, #0]
    fdf4:	3301      	adds	r3, #1
    fdf6:	b2da      	uxtb	r2, r3
    fdf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe00:	701a      	strb	r2, [r3, #0]
    fe02:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe0a:	781b      	ldrb	r3, [r3, #0]
    fe0c:	2bff      	cmp	r3, #255	; 0xff
    fe0e:	d105      	bne.n	fe1c <send_gps_pos+0x120c>
    fe10:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe18:	2200      	movs	r2, #0
    fe1a:	701a      	strb	r2, [r3, #0]
    fe1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe24:	781b      	ldrb	r3, [r3, #0]
    fe26:	461a      	mov	r2, r3
    fe28:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe30:	7819      	ldrb	r1, [r3, #0]
    fe32:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fe36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe3a:	5499      	strb	r1, [r3, r2]
    fe3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe44:	781b      	ldrb	r3, [r3, #0]
    fe46:	3301      	adds	r3, #1
    fe48:	b2da      	uxtb	r2, r3
    fe4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe52:	701a      	strb	r2, [r3, #0]
    fe54:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe5c:	781b      	ldrb	r3, [r3, #0]
    fe5e:	2bff      	cmp	r3, #255	; 0xff
    fe60:	d105      	bne.n	fe6e <send_gps_pos+0x125e>
    fe62:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6a:	2200      	movs	r2, #0
    fe6c:	701a      	strb	r2, [r3, #0]
    fe6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe76:	781b      	ldrb	r3, [r3, #0]
    fe78:	461a      	mov	r2, r3
    fe7a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fe7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe82:	7819      	ldrb	r1, [r3, #0]
    fe84:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fe88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe8c:	5499      	strb	r1, [r3, r2]
    fe8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe96:	781b      	ldrb	r3, [r3, #0]
    fe98:	3301      	adds	r3, #1
    fe9a:	b2da      	uxtb	r2, r3
    fe9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea4:	701a      	strb	r2, [r3, #0]
    fea6:	f24c 3319 	movw	r3, #49945	; 0xc319
    feaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feae:	781b      	ldrb	r3, [r3, #0]
    feb0:	2bff      	cmp	r3, #255	; 0xff
    feb2:	d105      	bne.n	fec0 <send_gps_pos+0x12b0>
    feb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    feb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    febc:	2200      	movs	r2, #0
    febe:	701a      	strb	r2, [r3, #0]
    fec0:	f242 0339 	movw	r3, #8249	; 0x2039
    fec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec8:	781b      	ldrb	r3, [r3, #0]
    feca:	b2db      	uxtb	r3, r3
    fecc:	f003 0310 	and.w	r3, r3, #16
    fed0:	2b00      	cmp	r3, #0
    fed2:	d15a      	bne.n	ff8a <send_gps_pos+0x137a>
    fed4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    fed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fedc:	781b      	ldrb	r3, [r3, #0]
    fede:	b2db      	uxtb	r3, r3
    fee0:	461a      	mov	r2, r3
    fee2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feea:	5c9a      	ldrb	r2, [r3, r2]
    feec:	f24c 431b 	movw	r3, #50203	; 0xc41b
    fef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef4:	701a      	strb	r2, [r3, #0]
    fef6:	f24c 431c 	movw	r3, #50204	; 0xc41c
    fefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fefe:	2200      	movs	r2, #0
    ff00:	701a      	strb	r2, [r3, #0]
    ff02:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ff06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff0a:	781b      	ldrb	r3, [r3, #0]
    ff0c:	b2db      	uxtb	r3, r3
    ff0e:	3301      	adds	r3, #1
    ff10:	b2da      	uxtb	r2, r3
    ff12:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ff16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff1a:	701a      	strb	r2, [r3, #0]
    ff1c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ff20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff24:	781b      	ldrb	r3, [r3, #0]
    ff26:	b2db      	uxtb	r3, r3
    ff28:	2bff      	cmp	r3, #255	; 0xff
    ff2a:	d105      	bne.n	ff38 <send_gps_pos+0x1328>
    ff2c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ff30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff34:	2200      	movs	r2, #0
    ff36:	701a      	strb	r2, [r3, #0]
    ff38:	f242 0338 	movw	r3, #8248	; 0x2038
    ff3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff40:	f242 0238 	movw	r2, #8248	; 0x2038
    ff44:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff48:	7812      	ldrb	r2, [r2, #0]
    ff4a:	b2d2      	uxtb	r2, r2
    ff4c:	f042 0201 	orr.w	r2, r2, #1
    ff50:	b2d2      	uxtb	r2, r2
    ff52:	701a      	strb	r2, [r3, #0]
    ff54:	f242 0339 	movw	r3, #8249	; 0x2039
    ff58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff5c:	f242 0239 	movw	r2, #8249	; 0x2039
    ff60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ff64:	7812      	ldrb	r2, [r2, #0]
    ff66:	b2d2      	uxtb	r2, r2
    ff68:	f042 0210 	orr.w	r2, r2, #16
    ff6c:	b2d2      	uxtb	r2, r2
    ff6e:	701a      	strb	r2, [r3, #0]
    ff70:	e00b      	b.n	ff8a <send_gps_pos+0x137a>
    ff72:	f24c 3318 	movw	r3, #49944	; 0xc318
    ff76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff7a:	781b      	ldrb	r3, [r3, #0]
    ff7c:	3301      	adds	r3, #1
    ff7e:	b2da      	uxtb	r2, r3
    ff80:	f24c 3318 	movw	r3, #49944	; 0xc318
    ff84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff88:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    ff8a:	f005 fbfd 	bl	15788 <estimator_update_state_gps>
  }
}
    ff8e:	bd80      	pop	{r7, pc}
    ff90:	2004c489 	.word	0x2004c489
    ff94:	2004c48a 	.word	0x2004c48a
    ff98:	2004c48b 	.word	0x2004c48b

0000ff9c <send_radIR>:

void send_radIR(void){
    ff9c:	b480      	push	{r7}
    ff9e:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    ffa0:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
    ffa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffa8:	781b      	ldrb	r3, [r3, #0]
    ffaa:	2b00      	cmp	r3, #0
    ffac:	f000 85e8 	beq.w	10b80 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    ffb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffb8:	781a      	ldrb	r2, [r3, #0]
    ffba:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ffbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc2:	781b      	ldrb	r3, [r3, #0]
    ffc4:	b2db      	uxtb	r3, r3
    ffc6:	429a      	cmp	r2, r3
    ffc8:	d313      	bcc.n	fff2 <send_radIR+0x56>
    ffca:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ffce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd2:	781b      	ldrb	r3, [r3, #0]
    ffd4:	b2db      	uxtb	r3, r3
    ffd6:	461a      	mov	r2, r3
    ffd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe0:	781b      	ldrb	r3, [r3, #0]
    ffe2:	1ad3      	subs	r3, r2, r3
    ffe4:	33ff      	adds	r3, #255	; 0xff
    ffe6:	2b14      	cmp	r3, #20
    ffe8:	bfd4      	ite	le
    ffea:	2300      	movle	r3, #0
    ffec:	2301      	movgt	r3, #1
    ffee:	b2db      	uxtb	r3, r3
    fff0:	e011      	b.n	10016 <send_radIR+0x7a>
    fff2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    fff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fffa:	781b      	ldrb	r3, [r3, #0]
    fffc:	b2db      	uxtb	r3, r3
    fffe:	461a      	mov	r2, r3
   10000:	f24c 3319 	movw	r3, #49945	; 0xc319
   10004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10008:	781b      	ldrb	r3, [r3, #0]
   1000a:	1ad3      	subs	r3, r2, r3
   1000c:	2b14      	cmp	r3, #20
   1000e:	bfd4      	ite	le
   10010:	2300      	movle	r3, #0
   10012:	2301      	movgt	r3, #1
   10014:	b2db      	uxtb	r3, r3
   10016:	2b00      	cmp	r3, #0
   10018:	f000 85a6 	beq.w	10b68 <send_radIR+0xbcc>
   1001c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10020:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10024:	781b      	ldrb	r3, [r3, #0]
   10026:	461a      	mov	r2, r3
   10028:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1002c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10030:	2105      	movs	r1, #5
   10032:	5499      	strb	r1, [r3, r2]
   10034:	f24c 3319 	movw	r3, #49945	; 0xc319
   10038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1003c:	781b      	ldrb	r3, [r3, #0]
   1003e:	3301      	adds	r3, #1
   10040:	b2da      	uxtb	r2, r3
   10042:	f24c 3319 	movw	r3, #49945	; 0xc319
   10046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004a:	701a      	strb	r2, [r3, #0]
   1004c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10054:	781b      	ldrb	r3, [r3, #0]
   10056:	2bff      	cmp	r3, #255	; 0xff
   10058:	d105      	bne.n	10066 <send_radIR+0xca>
   1005a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1005e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10062:	2200      	movs	r2, #0
   10064:	701a      	strb	r2, [r3, #0]
   10066:	f24c 3319 	movw	r3, #49945	; 0xc319
   1006a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1006e:	781b      	ldrb	r3, [r3, #0]
   10070:	461a      	mov	r2, r3
   10072:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1007a:	2105      	movs	r1, #5
   1007c:	5499      	strb	r1, [r3, r2]
   1007e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10082:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10086:	781b      	ldrb	r3, [r3, #0]
   10088:	3301      	adds	r3, #1
   1008a:	b2da      	uxtb	r2, r3
   1008c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10090:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10094:	701a      	strb	r2, [r3, #0]
   10096:	f24c 3319 	movw	r3, #49945	; 0xc319
   1009a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1009e:	781b      	ldrb	r3, [r3, #0]
   100a0:	2bff      	cmp	r3, #255	; 0xff
   100a2:	d105      	bne.n	100b0 <send_radIR+0x114>
   100a4:	f24c 3319 	movw	r3, #49945	; 0xc319
   100a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ac:	2200      	movs	r2, #0
   100ae:	701a      	strb	r2, [r3, #0]
   100b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   100b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b8:	2205      	movs	r2, #5
   100ba:	701a      	strb	r2, [r3, #0]
   100bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
   100c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c4:	2205      	movs	r2, #5
   100c6:	701a      	strb	r2, [r3, #0]
   100c8:	f24c 3319 	movw	r3, #49945	; 0xc319
   100cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d0:	781b      	ldrb	r3, [r3, #0]
   100d2:	461a      	mov	r2, r3
   100d4:	f64c 1310 	movw	r3, #51472	; 0xc910
   100d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100dc:	7819      	ldrb	r1, [r3, #0]
   100de:	f24c 331c 	movw	r3, #49948	; 0xc31c
   100e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e6:	5499      	strb	r1, [r3, r2]
   100e8:	f64c 1310 	movw	r3, #51472	; 0xc910
   100ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f0:	781a      	ldrb	r2, [r3, #0]
   100f2:	f24c 431d 	movw	r3, #50205	; 0xc41d
   100f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100fa:	781b      	ldrb	r3, [r3, #0]
   100fc:	4413      	add	r3, r2
   100fe:	b2da      	uxtb	r2, r3
   10100:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10108:	701a      	strb	r2, [r3, #0]
   1010a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1010e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10112:	781a      	ldrb	r2, [r3, #0]
   10114:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1011c:	781b      	ldrb	r3, [r3, #0]
   1011e:	4413      	add	r3, r2
   10120:	b2da      	uxtb	r2, r3
   10122:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10126:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1012a:	701a      	strb	r2, [r3, #0]
   1012c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10134:	781b      	ldrb	r3, [r3, #0]
   10136:	3301      	adds	r3, #1
   10138:	b2da      	uxtb	r2, r3
   1013a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1013e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10142:	701a      	strb	r2, [r3, #0]
   10144:	f24c 3319 	movw	r3, #49945	; 0xc319
   10148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1014c:	781b      	ldrb	r3, [r3, #0]
   1014e:	2bff      	cmp	r3, #255	; 0xff
   10150:	d105      	bne.n	1015e <send_radIR+0x1c2>
   10152:	f24c 3319 	movw	r3, #49945	; 0xc319
   10156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1015a:	2200      	movs	r2, #0
   1015c:	701a      	strb	r2, [r3, #0]
   1015e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10166:	781b      	ldrb	r3, [r3, #0]
   10168:	461a      	mov	r2, r3
   1016a:	f64c 1310 	movw	r3, #51472	; 0xc910
   1016e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10172:	7859      	ldrb	r1, [r3, #1]
   10174:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10178:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1017c:	5499      	strb	r1, [r3, r2]
   1017e:	4bd2      	ldr	r3, [pc, #840]	; (104c8 <send_radIR+0x52c>)
   10180:	781a      	ldrb	r2, [r3, #0]
   10182:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018a:	781b      	ldrb	r3, [r3, #0]
   1018c:	4413      	add	r3, r2
   1018e:	b2da      	uxtb	r2, r3
   10190:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10194:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10198:	701a      	strb	r2, [r3, #0]
   1019a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1019e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a2:	781a      	ldrb	r2, [r3, #0]
   101a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   101a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ac:	781b      	ldrb	r3, [r3, #0]
   101ae:	4413      	add	r3, r2
   101b0:	b2da      	uxtb	r2, r3
   101b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
   101b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ba:	701a      	strb	r2, [r3, #0]
   101bc:	f24c 3319 	movw	r3, #49945	; 0xc319
   101c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101c4:	781b      	ldrb	r3, [r3, #0]
   101c6:	3301      	adds	r3, #1
   101c8:	b2da      	uxtb	r2, r3
   101ca:	f24c 3319 	movw	r3, #49945	; 0xc319
   101ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d2:	701a      	strb	r2, [r3, #0]
   101d4:	f24c 3319 	movw	r3, #49945	; 0xc319
   101d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101dc:	781b      	ldrb	r3, [r3, #0]
   101de:	2bff      	cmp	r3, #255	; 0xff
   101e0:	d105      	bne.n	101ee <send_radIR+0x252>
   101e2:	f24c 3319 	movw	r3, #49945	; 0xc319
   101e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ea:	2200      	movs	r2, #0
   101ec:	701a      	strb	r2, [r3, #0]
   101ee:	f24c 3319 	movw	r3, #49945	; 0xc319
   101f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f6:	781b      	ldrb	r3, [r3, #0]
   101f8:	461a      	mov	r2, r3
   101fa:	f64c 1310 	movw	r3, #51472	; 0xc910
   101fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10202:	7899      	ldrb	r1, [r3, #2]
   10204:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1020c:	5499      	strb	r1, [r3, r2]
   1020e:	4baf      	ldr	r3, [pc, #700]	; (104cc <send_radIR+0x530>)
   10210:	781a      	ldrb	r2, [r3, #0]
   10212:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10216:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1021a:	781b      	ldrb	r3, [r3, #0]
   1021c:	4413      	add	r3, r2
   1021e:	b2da      	uxtb	r2, r3
   10220:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10228:	701a      	strb	r2, [r3, #0]
   1022a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1022e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10232:	781a      	ldrb	r2, [r3, #0]
   10234:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1023c:	781b      	ldrb	r3, [r3, #0]
   1023e:	4413      	add	r3, r2
   10240:	b2da      	uxtb	r2, r3
   10242:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024a:	701a      	strb	r2, [r3, #0]
   1024c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10250:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10254:	781b      	ldrb	r3, [r3, #0]
   10256:	3301      	adds	r3, #1
   10258:	b2da      	uxtb	r2, r3
   1025a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1025e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10262:	701a      	strb	r2, [r3, #0]
   10264:	f24c 3319 	movw	r3, #49945	; 0xc319
   10268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1026c:	781b      	ldrb	r3, [r3, #0]
   1026e:	2bff      	cmp	r3, #255	; 0xff
   10270:	d105      	bne.n	1027e <send_radIR+0x2e2>
   10272:	f24c 3319 	movw	r3, #49945	; 0xc319
   10276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1027a:	2200      	movs	r2, #0
   1027c:	701a      	strb	r2, [r3, #0]
   1027e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10286:	781b      	ldrb	r3, [r3, #0]
   10288:	461a      	mov	r2, r3
   1028a:	f64c 1310 	movw	r3, #51472	; 0xc910
   1028e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10292:	78d9      	ldrb	r1, [r3, #3]
   10294:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1029c:	5499      	strb	r1, [r3, r2]
   1029e:	4b8c      	ldr	r3, [pc, #560]	; (104d0 <send_radIR+0x534>)
   102a0:	781a      	ldrb	r2, [r3, #0]
   102a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102aa:	781b      	ldrb	r3, [r3, #0]
   102ac:	4413      	add	r3, r2
   102ae:	b2da      	uxtb	r2, r3
   102b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b8:	701a      	strb	r2, [r3, #0]
   102ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
   102be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c2:	781a      	ldrb	r2, [r3, #0]
   102c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102cc:	781b      	ldrb	r3, [r3, #0]
   102ce:	4413      	add	r3, r2
   102d0:	b2da      	uxtb	r2, r3
   102d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
   102d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102da:	701a      	strb	r2, [r3, #0]
   102dc:	f24c 3319 	movw	r3, #49945	; 0xc319
   102e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e4:	781b      	ldrb	r3, [r3, #0]
   102e6:	3301      	adds	r3, #1
   102e8:	b2da      	uxtb	r2, r3
   102ea:	f24c 3319 	movw	r3, #49945	; 0xc319
   102ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f2:	701a      	strb	r2, [r3, #0]
   102f4:	f24c 3319 	movw	r3, #49945	; 0xc319
   102f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102fc:	781b      	ldrb	r3, [r3, #0]
   102fe:	2bff      	cmp	r3, #255	; 0xff
   10300:	d105      	bne.n	1030e <send_radIR+0x372>
   10302:	f24c 3319 	movw	r3, #49945	; 0xc319
   10306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1030a:	2200      	movs	r2, #0
   1030c:	701a      	strb	r2, [r3, #0]
   1030e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10316:	781b      	ldrb	r3, [r3, #0]
   10318:	461a      	mov	r2, r3
   1031a:	f64c 1314 	movw	r3, #51476	; 0xc914
   1031e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10322:	7819      	ldrb	r1, [r3, #0]
   10324:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10328:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1032c:	5499      	strb	r1, [r3, r2]
   1032e:	f64c 1314 	movw	r3, #51476	; 0xc914
   10332:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10336:	781a      	ldrb	r2, [r3, #0]
   10338:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1033c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10340:	781b      	ldrb	r3, [r3, #0]
   10342:	4413      	add	r3, r2
   10344:	b2da      	uxtb	r2, r3
   10346:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1034a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1034e:	701a      	strb	r2, [r3, #0]
   10350:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10358:	781a      	ldrb	r2, [r3, #0]
   1035a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1035e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10362:	781b      	ldrb	r3, [r3, #0]
   10364:	4413      	add	r3, r2
   10366:	b2da      	uxtb	r2, r3
   10368:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1036c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10370:	701a      	strb	r2, [r3, #0]
   10372:	f24c 3319 	movw	r3, #49945	; 0xc319
   10376:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1037a:	781b      	ldrb	r3, [r3, #0]
   1037c:	3301      	adds	r3, #1
   1037e:	b2da      	uxtb	r2, r3
   10380:	f24c 3319 	movw	r3, #49945	; 0xc319
   10384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10388:	701a      	strb	r2, [r3, #0]
   1038a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1038e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10392:	781b      	ldrb	r3, [r3, #0]
   10394:	2bff      	cmp	r3, #255	; 0xff
   10396:	d105      	bne.n	103a4 <send_radIR+0x408>
   10398:	f24c 3319 	movw	r3, #49945	; 0xc319
   1039c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a0:	2200      	movs	r2, #0
   103a2:	701a      	strb	r2, [r3, #0]
   103a4:	f24c 3319 	movw	r3, #49945	; 0xc319
   103a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ac:	781b      	ldrb	r3, [r3, #0]
   103ae:	461a      	mov	r2, r3
   103b0:	f64c 1314 	movw	r3, #51476	; 0xc914
   103b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b8:	7859      	ldrb	r1, [r3, #1]
   103ba:	f24c 331c 	movw	r3, #49948	; 0xc31c
   103be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c2:	5499      	strb	r1, [r3, r2]
   103c4:	4b43      	ldr	r3, [pc, #268]	; (104d4 <send_radIR+0x538>)
   103c6:	781a      	ldrb	r2, [r3, #0]
   103c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   103cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d0:	781b      	ldrb	r3, [r3, #0]
   103d2:	4413      	add	r3, r2
   103d4:	b2da      	uxtb	r2, r3
   103d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   103da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103de:	701a      	strb	r2, [r3, #0]
   103e0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   103e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e8:	781a      	ldrb	r2, [r3, #0]
   103ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
   103ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f2:	781b      	ldrb	r3, [r3, #0]
   103f4:	4413      	add	r3, r2
   103f6:	b2da      	uxtb	r2, r3
   103f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   103fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10400:	701a      	strb	r2, [r3, #0]
   10402:	f24c 3319 	movw	r3, #49945	; 0xc319
   10406:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1040a:	781b      	ldrb	r3, [r3, #0]
   1040c:	3301      	adds	r3, #1
   1040e:	b2da      	uxtb	r2, r3
   10410:	f24c 3319 	movw	r3, #49945	; 0xc319
   10414:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10418:	701a      	strb	r2, [r3, #0]
   1041a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1041e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10422:	781b      	ldrb	r3, [r3, #0]
   10424:	2bff      	cmp	r3, #255	; 0xff
   10426:	d105      	bne.n	10434 <send_radIR+0x498>
   10428:	f24c 3319 	movw	r3, #49945	; 0xc319
   1042c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10430:	2200      	movs	r2, #0
   10432:	701a      	strb	r2, [r3, #0]
   10434:	f24c 3319 	movw	r3, #49945	; 0xc319
   10438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1043c:	781b      	ldrb	r3, [r3, #0]
   1043e:	461a      	mov	r2, r3
   10440:	f64c 1314 	movw	r3, #51476	; 0xc914
   10444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10448:	7899      	ldrb	r1, [r3, #2]
   1044a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1044e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10452:	5499      	strb	r1, [r3, r2]
   10454:	4b20      	ldr	r3, [pc, #128]	; (104d8 <send_radIR+0x53c>)
   10456:	781a      	ldrb	r2, [r3, #0]
   10458:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1045c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10460:	781b      	ldrb	r3, [r3, #0]
   10462:	4413      	add	r3, r2
   10464:	b2da      	uxtb	r2, r3
   10466:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1046a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1046e:	701a      	strb	r2, [r3, #0]
   10470:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10478:	781a      	ldrb	r2, [r3, #0]
   1047a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1047e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10482:	781b      	ldrb	r3, [r3, #0]
   10484:	4413      	add	r3, r2
   10486:	b2da      	uxtb	r2, r3
   10488:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1048c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10490:	701a      	strb	r2, [r3, #0]
   10492:	f24c 3319 	movw	r3, #49945	; 0xc319
   10496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1049a:	781b      	ldrb	r3, [r3, #0]
   1049c:	3301      	adds	r3, #1
   1049e:	b2da      	uxtb	r2, r3
   104a0:	f24c 3319 	movw	r3, #49945	; 0xc319
   104a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a8:	701a      	strb	r2, [r3, #0]
   104aa:	f24c 3319 	movw	r3, #49945	; 0xc319
   104ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b2:	781b      	ldrb	r3, [r3, #0]
   104b4:	2bff      	cmp	r3, #255	; 0xff
   104b6:	d111      	bne.n	104dc <send_radIR+0x540>
   104b8:	f24c 3319 	movw	r3, #49945	; 0xc319
   104bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c0:	2200      	movs	r2, #0
   104c2:	701a      	strb	r2, [r3, #0]
   104c4:	e00a      	b.n	104dc <send_radIR+0x540>
   104c6:	bf00      	nop
   104c8:	2004c911 	.word	0x2004c911
   104cc:	2004c912 	.word	0x2004c912
   104d0:	2004c913 	.word	0x2004c913
   104d4:	2004c915 	.word	0x2004c915
   104d8:	2004c916 	.word	0x2004c916
   104dc:	f24c 3319 	movw	r3, #49945	; 0xc319
   104e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e4:	781b      	ldrb	r3, [r3, #0]
   104e6:	461a      	mov	r2, r3
   104e8:	f64c 1314 	movw	r3, #51476	; 0xc914
   104ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f0:	78d9      	ldrb	r1, [r3, #3]
   104f2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   104f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104fa:	5499      	strb	r1, [r3, r2]
   104fc:	4bd3      	ldr	r3, [pc, #844]	; (1084c <send_radIR+0x8b0>)
   104fe:	781a      	ldrb	r2, [r3, #0]
   10500:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10508:	781b      	ldrb	r3, [r3, #0]
   1050a:	4413      	add	r3, r2
   1050c:	b2da      	uxtb	r2, r3
   1050e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10512:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10516:	701a      	strb	r2, [r3, #0]
   10518:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1051c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10520:	781a      	ldrb	r2, [r3, #0]
   10522:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1052a:	781b      	ldrb	r3, [r3, #0]
   1052c:	4413      	add	r3, r2
   1052e:	b2da      	uxtb	r2, r3
   10530:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10534:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10538:	701a      	strb	r2, [r3, #0]
   1053a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1053e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10542:	781b      	ldrb	r3, [r3, #0]
   10544:	3301      	adds	r3, #1
   10546:	b2da      	uxtb	r2, r3
   10548:	f24c 3319 	movw	r3, #49945	; 0xc319
   1054c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10550:	701a      	strb	r2, [r3, #0]
   10552:	f24c 3319 	movw	r3, #49945	; 0xc319
   10556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1055a:	781b      	ldrb	r3, [r3, #0]
   1055c:	2bff      	cmp	r3, #255	; 0xff
   1055e:	d105      	bne.n	1056c <send_radIR+0x5d0>
   10560:	f24c 3319 	movw	r3, #49945	; 0xc319
   10564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10568:	2200      	movs	r2, #0
   1056a:	701a      	strb	r2, [r3, #0]
   1056c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10574:	781b      	ldrb	r3, [r3, #0]
   10576:	461a      	mov	r2, r3
   10578:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1057c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10580:	7819      	ldrb	r1, [r3, #0]
   10582:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10586:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1058a:	5499      	strb	r1, [r3, r2]
   1058c:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10590:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10594:	781a      	ldrb	r2, [r3, #0]
   10596:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1059a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1059e:	781b      	ldrb	r3, [r3, #0]
   105a0:	4413      	add	r3, r2
   105a2:	b2da      	uxtb	r2, r3
   105a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   105a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ac:	701a      	strb	r2, [r3, #0]
   105ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
   105b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b6:	781a      	ldrb	r2, [r3, #0]
   105b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   105bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c0:	781b      	ldrb	r3, [r3, #0]
   105c2:	4413      	add	r3, r2
   105c4:	b2da      	uxtb	r2, r3
   105c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   105ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ce:	701a      	strb	r2, [r3, #0]
   105d0:	f24c 3319 	movw	r3, #49945	; 0xc319
   105d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d8:	781b      	ldrb	r3, [r3, #0]
   105da:	3301      	adds	r3, #1
   105dc:	b2da      	uxtb	r2, r3
   105de:	f24c 3319 	movw	r3, #49945	; 0xc319
   105e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e6:	701a      	strb	r2, [r3, #0]
   105e8:	f24c 3319 	movw	r3, #49945	; 0xc319
   105ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f0:	781b      	ldrb	r3, [r3, #0]
   105f2:	2bff      	cmp	r3, #255	; 0xff
   105f4:	d105      	bne.n	10602 <send_radIR+0x666>
   105f6:	f24c 3319 	movw	r3, #49945	; 0xc319
   105fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105fe:	2200      	movs	r2, #0
   10600:	701a      	strb	r2, [r3, #0]
   10602:	f24c 3319 	movw	r3, #49945	; 0xc319
   10606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1060a:	781b      	ldrb	r3, [r3, #0]
   1060c:	461a      	mov	r2, r3
   1060e:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10616:	7859      	ldrb	r1, [r3, #1]
   10618:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1061c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10620:	5499      	strb	r1, [r3, r2]
   10622:	4b8b      	ldr	r3, [pc, #556]	; (10850 <send_radIR+0x8b4>)
   10624:	781a      	ldrb	r2, [r3, #0]
   10626:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1062a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1062e:	781b      	ldrb	r3, [r3, #0]
   10630:	4413      	add	r3, r2
   10632:	b2da      	uxtb	r2, r3
   10634:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063c:	701a      	strb	r2, [r3, #0]
   1063e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10646:	781a      	ldrb	r2, [r3, #0]
   10648:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1064c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10650:	781b      	ldrb	r3, [r3, #0]
   10652:	4413      	add	r3, r2
   10654:	b2da      	uxtb	r2, r3
   10656:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1065a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1065e:	701a      	strb	r2, [r3, #0]
   10660:	f24c 3319 	movw	r3, #49945	; 0xc319
   10664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10668:	781b      	ldrb	r3, [r3, #0]
   1066a:	3301      	adds	r3, #1
   1066c:	b2da      	uxtb	r2, r3
   1066e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10676:	701a      	strb	r2, [r3, #0]
   10678:	f24c 3319 	movw	r3, #49945	; 0xc319
   1067c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10680:	781b      	ldrb	r3, [r3, #0]
   10682:	2bff      	cmp	r3, #255	; 0xff
   10684:	d105      	bne.n	10692 <send_radIR+0x6f6>
   10686:	f24c 3319 	movw	r3, #49945	; 0xc319
   1068a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1068e:	2200      	movs	r2, #0
   10690:	701a      	strb	r2, [r3, #0]
   10692:	f24c 3319 	movw	r3, #49945	; 0xc319
   10696:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1069a:	781b      	ldrb	r3, [r3, #0]
   1069c:	461a      	mov	r2, r3
   1069e:	f64c 130c 	movw	r3, #51468	; 0xc90c
   106a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a6:	7899      	ldrb	r1, [r3, #2]
   106a8:	f24c 331c 	movw	r3, #49948	; 0xc31c
   106ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b0:	5499      	strb	r1, [r3, r2]
   106b2:	4b68      	ldr	r3, [pc, #416]	; (10854 <send_radIR+0x8b8>)
   106b4:	781a      	ldrb	r2, [r3, #0]
   106b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106be:	781b      	ldrb	r3, [r3, #0]
   106c0:	4413      	add	r3, r2
   106c2:	b2da      	uxtb	r2, r3
   106c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106cc:	701a      	strb	r2, [r3, #0]
   106ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
   106d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d6:	781a      	ldrb	r2, [r3, #0]
   106d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e0:	781b      	ldrb	r3, [r3, #0]
   106e2:	4413      	add	r3, r2
   106e4:	b2da      	uxtb	r2, r3
   106e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   106ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ee:	701a      	strb	r2, [r3, #0]
   106f0:	f24c 3319 	movw	r3, #49945	; 0xc319
   106f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f8:	781b      	ldrb	r3, [r3, #0]
   106fa:	3301      	adds	r3, #1
   106fc:	b2da      	uxtb	r2, r3
   106fe:	f24c 3319 	movw	r3, #49945	; 0xc319
   10702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10706:	701a      	strb	r2, [r3, #0]
   10708:	f24c 3319 	movw	r3, #49945	; 0xc319
   1070c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10710:	781b      	ldrb	r3, [r3, #0]
   10712:	2bff      	cmp	r3, #255	; 0xff
   10714:	d105      	bne.n	10722 <send_radIR+0x786>
   10716:	f24c 3319 	movw	r3, #49945	; 0xc319
   1071a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1071e:	2200      	movs	r2, #0
   10720:	701a      	strb	r2, [r3, #0]
   10722:	f24c 3319 	movw	r3, #49945	; 0xc319
   10726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1072a:	781b      	ldrb	r3, [r3, #0]
   1072c:	461a      	mov	r2, r3
   1072e:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10736:	78d9      	ldrb	r1, [r3, #3]
   10738:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1073c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10740:	5499      	strb	r1, [r3, r2]
   10742:	4b45      	ldr	r3, [pc, #276]	; (10858 <send_radIR+0x8bc>)
   10744:	781a      	ldrb	r2, [r3, #0]
   10746:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1074a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1074e:	781b      	ldrb	r3, [r3, #0]
   10750:	4413      	add	r3, r2
   10752:	b2da      	uxtb	r2, r3
   10754:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1075c:	701a      	strb	r2, [r3, #0]
   1075e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10766:	781a      	ldrb	r2, [r3, #0]
   10768:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1076c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10770:	781b      	ldrb	r3, [r3, #0]
   10772:	4413      	add	r3, r2
   10774:	b2da      	uxtb	r2, r3
   10776:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1077a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1077e:	701a      	strb	r2, [r3, #0]
   10780:	f24c 3319 	movw	r3, #49945	; 0xc319
   10784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10788:	781b      	ldrb	r3, [r3, #0]
   1078a:	3301      	adds	r3, #1
   1078c:	b2da      	uxtb	r2, r3
   1078e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10796:	701a      	strb	r2, [r3, #0]
   10798:	f24c 3319 	movw	r3, #49945	; 0xc319
   1079c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a0:	781b      	ldrb	r3, [r3, #0]
   107a2:	2bff      	cmp	r3, #255	; 0xff
   107a4:	d105      	bne.n	107b2 <send_radIR+0x816>
   107a6:	f24c 3319 	movw	r3, #49945	; 0xc319
   107aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ae:	2200      	movs	r2, #0
   107b0:	701a      	strb	r2, [r3, #0]
   107b2:	f24c 3319 	movw	r3, #49945	; 0xc319
   107b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ba:	781b      	ldrb	r3, [r3, #0]
   107bc:	461a      	mov	r2, r3
   107be:	f240 5342 	movw	r3, #1346	; 0x542
   107c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107c6:	7819      	ldrb	r1, [r3, #0]
   107c8:	f24c 331c 	movw	r3, #49948	; 0xc31c
   107cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d0:	5499      	strb	r1, [r3, r2]
   107d2:	f240 5342 	movw	r3, #1346	; 0x542
   107d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107da:	781a      	ldrb	r2, [r3, #0]
   107dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
   107e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e4:	781b      	ldrb	r3, [r3, #0]
   107e6:	4413      	add	r3, r2
   107e8:	b2da      	uxtb	r2, r3
   107ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
   107ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f2:	701a      	strb	r2, [r3, #0]
   107f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
   107f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107fc:	781a      	ldrb	r2, [r3, #0]
   107fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10806:	781b      	ldrb	r3, [r3, #0]
   10808:	4413      	add	r3, r2
   1080a:	b2da      	uxtb	r2, r3
   1080c:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10814:	701a      	strb	r2, [r3, #0]
   10816:	f24c 3319 	movw	r3, #49945	; 0xc319
   1081a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1081e:	781b      	ldrb	r3, [r3, #0]
   10820:	3301      	adds	r3, #1
   10822:	b2da      	uxtb	r2, r3
   10824:	f24c 3319 	movw	r3, #49945	; 0xc319
   10828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1082c:	701a      	strb	r2, [r3, #0]
   1082e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10832:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10836:	781b      	ldrb	r3, [r3, #0]
   10838:	2bff      	cmp	r3, #255	; 0xff
   1083a:	d10f      	bne.n	1085c <send_radIR+0x8c0>
   1083c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10840:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10844:	2200      	movs	r2, #0
   10846:	701a      	strb	r2, [r3, #0]
   10848:	e008      	b.n	1085c <send_radIR+0x8c0>
   1084a:	bf00      	nop
   1084c:	2004c917 	.word	0x2004c917
   10850:	2004c90d 	.word	0x2004c90d
   10854:	2004c90e 	.word	0x2004c90e
   10858:	2004c90f 	.word	0x2004c90f
   1085c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10864:	781b      	ldrb	r3, [r3, #0]
   10866:	461a      	mov	r2, r3
   10868:	f240 5342 	movw	r3, #1346	; 0x542
   1086c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10870:	7859      	ldrb	r1, [r3, #1]
   10872:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10876:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1087a:	5499      	strb	r1, [r3, r2]
   1087c:	4bc2      	ldr	r3, [pc, #776]	; (10b88 <send_radIR+0xbec>)
   1087e:	781a      	ldrb	r2, [r3, #0]
   10880:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10888:	781b      	ldrb	r3, [r3, #0]
   1088a:	4413      	add	r3, r2
   1088c:	b2da      	uxtb	r2, r3
   1088e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10896:	701a      	strb	r2, [r3, #0]
   10898:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1089c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a0:	781a      	ldrb	r2, [r3, #0]
   108a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
   108a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108aa:	781b      	ldrb	r3, [r3, #0]
   108ac:	4413      	add	r3, r2
   108ae:	b2da      	uxtb	r2, r3
   108b0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   108b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b8:	701a      	strb	r2, [r3, #0]
   108ba:	f24c 3319 	movw	r3, #49945	; 0xc319
   108be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c2:	781b      	ldrb	r3, [r3, #0]
   108c4:	3301      	adds	r3, #1
   108c6:	b2da      	uxtb	r2, r3
   108c8:	f24c 3319 	movw	r3, #49945	; 0xc319
   108cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d0:	701a      	strb	r2, [r3, #0]
   108d2:	f24c 3319 	movw	r3, #49945	; 0xc319
   108d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108da:	781b      	ldrb	r3, [r3, #0]
   108dc:	2bff      	cmp	r3, #255	; 0xff
   108de:	d105      	bne.n	108ec <send_radIR+0x950>
   108e0:	f24c 3319 	movw	r3, #49945	; 0xc319
   108e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e8:	2200      	movs	r2, #0
   108ea:	701a      	strb	r2, [r3, #0]
   108ec:	f24c 3319 	movw	r3, #49945	; 0xc319
   108f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f4:	781b      	ldrb	r3, [r3, #0]
   108f6:	461a      	mov	r2, r3
   108f8:	f240 5344 	movw	r3, #1348	; 0x544
   108fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10900:	7819      	ldrb	r1, [r3, #0]
   10902:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10906:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1090a:	5499      	strb	r1, [r3, r2]
   1090c:	f240 5344 	movw	r3, #1348	; 0x544
   10910:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10914:	781a      	ldrb	r2, [r3, #0]
   10916:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1091a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1091e:	781b      	ldrb	r3, [r3, #0]
   10920:	4413      	add	r3, r2
   10922:	b2da      	uxtb	r2, r3
   10924:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1092c:	701a      	strb	r2, [r3, #0]
   1092e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10932:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10936:	781a      	ldrb	r2, [r3, #0]
   10938:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1093c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10940:	781b      	ldrb	r3, [r3, #0]
   10942:	4413      	add	r3, r2
   10944:	b2da      	uxtb	r2, r3
   10946:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1094a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1094e:	701a      	strb	r2, [r3, #0]
   10950:	f24c 3319 	movw	r3, #49945	; 0xc319
   10954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10958:	781b      	ldrb	r3, [r3, #0]
   1095a:	3301      	adds	r3, #1
   1095c:	b2da      	uxtb	r2, r3
   1095e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10966:	701a      	strb	r2, [r3, #0]
   10968:	f24c 3319 	movw	r3, #49945	; 0xc319
   1096c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10970:	781b      	ldrb	r3, [r3, #0]
   10972:	2bff      	cmp	r3, #255	; 0xff
   10974:	d105      	bne.n	10982 <send_radIR+0x9e6>
   10976:	f24c 3319 	movw	r3, #49945	; 0xc319
   1097a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097e:	2200      	movs	r2, #0
   10980:	701a      	strb	r2, [r3, #0]
   10982:	f24c 3319 	movw	r3, #49945	; 0xc319
   10986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1098a:	781b      	ldrb	r3, [r3, #0]
   1098c:	461a      	mov	r2, r3
   1098e:	f240 5344 	movw	r3, #1348	; 0x544
   10992:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10996:	7859      	ldrb	r1, [r3, #1]
   10998:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1099c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a0:	5499      	strb	r1, [r3, r2]
   109a2:	4b7a      	ldr	r3, [pc, #488]	; (10b8c <send_radIR+0xbf0>)
   109a4:	781a      	ldrb	r2, [r3, #0]
   109a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ae:	781b      	ldrb	r3, [r3, #0]
   109b0:	4413      	add	r3, r2
   109b2:	b2da      	uxtb	r2, r3
   109b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109bc:	701a      	strb	r2, [r3, #0]
   109be:	f24c 431e 	movw	r3, #50206	; 0xc41e
   109c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c6:	781a      	ldrb	r2, [r3, #0]
   109c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d0:	781b      	ldrb	r3, [r3, #0]
   109d2:	4413      	add	r3, r2
   109d4:	b2da      	uxtb	r2, r3
   109d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   109da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109de:	701a      	strb	r2, [r3, #0]
   109e0:	f24c 3319 	movw	r3, #49945	; 0xc319
   109e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e8:	781b      	ldrb	r3, [r3, #0]
   109ea:	3301      	adds	r3, #1
   109ec:	b2da      	uxtb	r2, r3
   109ee:	f24c 3319 	movw	r3, #49945	; 0xc319
   109f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f6:	701a      	strb	r2, [r3, #0]
   109f8:	f24c 3319 	movw	r3, #49945	; 0xc319
   109fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a00:	781b      	ldrb	r3, [r3, #0]
   10a02:	2bff      	cmp	r3, #255	; 0xff
   10a04:	d105      	bne.n	10a12 <send_radIR+0xa76>
   10a06:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a0e:	2200      	movs	r2, #0
   10a10:	701a      	strb	r2, [r3, #0]
   10a12:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a1a:	781b      	ldrb	r3, [r3, #0]
   10a1c:	461a      	mov	r2, r3
   10a1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a26:	7819      	ldrb	r1, [r3, #0]
   10a28:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a30:	5499      	strb	r1, [r3, r2]
   10a32:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a3a:	781b      	ldrb	r3, [r3, #0]
   10a3c:	3301      	adds	r3, #1
   10a3e:	b2da      	uxtb	r2, r3
   10a40:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a48:	701a      	strb	r2, [r3, #0]
   10a4a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a52:	781b      	ldrb	r3, [r3, #0]
   10a54:	2bff      	cmp	r3, #255	; 0xff
   10a56:	d105      	bne.n	10a64 <send_radIR+0xac8>
   10a58:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a60:	2200      	movs	r2, #0
   10a62:	701a      	strb	r2, [r3, #0]
   10a64:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a6c:	781b      	ldrb	r3, [r3, #0]
   10a6e:	461a      	mov	r2, r3
   10a70:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a78:	7819      	ldrb	r1, [r3, #0]
   10a7a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a82:	5499      	strb	r1, [r3, r2]
   10a84:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a8c:	781b      	ldrb	r3, [r3, #0]
   10a8e:	3301      	adds	r3, #1
   10a90:	b2da      	uxtb	r2, r3
   10a92:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9a:	701a      	strb	r2, [r3, #0]
   10a9c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa4:	781b      	ldrb	r3, [r3, #0]
   10aa6:	2bff      	cmp	r3, #255	; 0xff
   10aa8:	d105      	bne.n	10ab6 <send_radIR+0xb1a>
   10aaa:	f24c 3319 	movw	r3, #49945	; 0xc319
   10aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab2:	2200      	movs	r2, #0
   10ab4:	701a      	strb	r2, [r3, #0]
   10ab6:	f242 0339 	movw	r3, #8249	; 0x2039
   10aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10abe:	781b      	ldrb	r3, [r3, #0]
   10ac0:	b2db      	uxtb	r3, r3
   10ac2:	f003 0310 	and.w	r3, r3, #16
   10ac6:	2b00      	cmp	r3, #0
   10ac8:	d15a      	bne.n	10b80 <send_radIR+0xbe4>
   10aca:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad2:	781b      	ldrb	r3, [r3, #0]
   10ad4:	b2db      	uxtb	r3, r3
   10ad6:	461a      	mov	r2, r3
   10ad8:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae0:	5c9a      	ldrb	r2, [r3, r2]
   10ae2:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aea:	701a      	strb	r2, [r3, #0]
   10aec:	f24c 431c 	movw	r3, #50204	; 0xc41c
   10af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af4:	2200      	movs	r2, #0
   10af6:	701a      	strb	r2, [r3, #0]
   10af8:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b00:	781b      	ldrb	r3, [r3, #0]
   10b02:	b2db      	uxtb	r3, r3
   10b04:	3301      	adds	r3, #1
   10b06:	b2da      	uxtb	r2, r3
   10b08:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b10:	701a      	strb	r2, [r3, #0]
   10b12:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b1a:	781b      	ldrb	r3, [r3, #0]
   10b1c:	b2db      	uxtb	r3, r3
   10b1e:	2bff      	cmp	r3, #255	; 0xff
   10b20:	d105      	bne.n	10b2e <send_radIR+0xb92>
   10b22:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b2a:	2200      	movs	r2, #0
   10b2c:	701a      	strb	r2, [r3, #0]
   10b2e:	f242 0338 	movw	r3, #8248	; 0x2038
   10b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b36:	f242 0238 	movw	r2, #8248	; 0x2038
   10b3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b3e:	7812      	ldrb	r2, [r2, #0]
   10b40:	b2d2      	uxtb	r2, r2
   10b42:	f042 0201 	orr.w	r2, r2, #1
   10b46:	b2d2      	uxtb	r2, r2
   10b48:	701a      	strb	r2, [r3, #0]
   10b4a:	f242 0339 	movw	r3, #8249	; 0x2039
   10b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b52:	f242 0239 	movw	r2, #8249	; 0x2039
   10b56:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b5a:	7812      	ldrb	r2, [r2, #0]
   10b5c:	b2d2      	uxtb	r2, r2
   10b5e:	f042 0210 	orr.w	r2, r2, #16
   10b62:	b2d2      	uxtb	r2, r2
   10b64:	701a      	strb	r2, [r3, #0]
   10b66:	e00b      	b.n	10b80 <send_radIR+0xbe4>
   10b68:	f24c 3318 	movw	r3, #49944	; 0xc318
   10b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b70:	781b      	ldrb	r3, [r3, #0]
   10b72:	3301      	adds	r3, #1
   10b74:	b2da      	uxtb	r2, r3
   10b76:	f24c 3318 	movw	r3, #49944	; 0xc318
   10b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b7e:	701a      	strb	r2, [r3, #0]
}
   10b80:	46bd      	mov	sp, r7
   10b82:	f85d 7b04 	ldr.w	r7, [sp], #4
   10b86:	4770      	bx	lr
   10b88:	20000543 	.word	0x20000543
   10b8c:	20000545 	.word	0x20000545

00010b90 <send_takeOff>:

void send_takeOff(void){
   10b90:	b580      	push	{r7, lr}
   10b92:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10b94:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   10b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b9c:	781b      	ldrb	r3, [r3, #0]
   10b9e:	2b00      	cmp	r3, #0
   10ba0:	f000 8200 	beq.w	10fa4 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10ba4:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bac:	881b      	ldrh	r3, [r3, #0]
   10bae:	2b00      	cmp	r3, #0
   10bb0:	f040 81f2 	bne.w	10f98 <send_takeOff+0x408>
   10bb4:	f64c 1304 	movw	r3, #51460	; 0xc904
   10bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bbc:	681b      	ldr	r3, [r3, #0]
   10bbe:	4618      	mov	r0, r3
   10bc0:	f04f 0100 	mov.w	r1, #0
   10bc4:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10bc8:	f007 fdfe 	bl	187c8 <__aeabi_fcmpgt>
   10bcc:	4603      	mov	r3, r0
   10bce:	2b00      	cmp	r3, #0
   10bd0:	f000 81e2 	beq.w	10f98 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10bd4:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bdc:	2201      	movs	r2, #1
   10bde:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10be0:	f24c 3310 	movw	r3, #49936	; 0xc310
   10be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10be8:	2201      	movs	r2, #1
   10bea:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10bec:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf4:	781a      	ldrb	r2, [r3, #0]
   10bf6:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bfe:	781b      	ldrb	r3, [r3, #0]
   10c00:	b2db      	uxtb	r3, r3
   10c02:	429a      	cmp	r2, r3
   10c04:	d313      	bcc.n	10c2e <send_takeOff+0x9e>
   10c06:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c0e:	781b      	ldrb	r3, [r3, #0]
   10c10:	b2db      	uxtb	r3, r3
   10c12:	461a      	mov	r2, r3
   10c14:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c1c:	781b      	ldrb	r3, [r3, #0]
   10c1e:	1ad3      	subs	r3, r2, r3
   10c20:	33ff      	adds	r3, #255	; 0xff
   10c22:	2b06      	cmp	r3, #6
   10c24:	bfd4      	ite	le
   10c26:	2300      	movle	r3, #0
   10c28:	2301      	movgt	r3, #1
   10c2a:	b2db      	uxtb	r3, r3
   10c2c:	e011      	b.n	10c52 <send_takeOff+0xc2>
   10c2e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c36:	781b      	ldrb	r3, [r3, #0]
   10c38:	b2db      	uxtb	r3, r3
   10c3a:	461a      	mov	r2, r3
   10c3c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c44:	781b      	ldrb	r3, [r3, #0]
   10c46:	1ad3      	subs	r3, r2, r3
   10c48:	2b06      	cmp	r3, #6
   10c4a:	bfd4      	ite	le
   10c4c:	2300      	movle	r3, #0
   10c4e:	2301      	movgt	r3, #1
   10c50:	b2db      	uxtb	r3, r3
   10c52:	2b00      	cmp	r3, #0
   10c54:	f000 8194 	beq.w	10f80 <send_takeOff+0x3f0>
   10c58:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c60:	781b      	ldrb	r3, [r3, #0]
   10c62:	461a      	mov	r2, r3
   10c64:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c6c:	2105      	movs	r1, #5
   10c6e:	5499      	strb	r1, [r3, r2]
   10c70:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c78:	781b      	ldrb	r3, [r3, #0]
   10c7a:	3301      	adds	r3, #1
   10c7c:	b2da      	uxtb	r2, r3
   10c7e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c86:	701a      	strb	r2, [r3, #0]
   10c88:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c90:	781b      	ldrb	r3, [r3, #0]
   10c92:	2bff      	cmp	r3, #255	; 0xff
   10c94:	d105      	bne.n	10ca2 <send_takeOff+0x112>
   10c96:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c9e:	2200      	movs	r2, #0
   10ca0:	701a      	strb	r2, [r3, #0]
   10ca2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10caa:	781b      	ldrb	r3, [r3, #0]
   10cac:	461a      	mov	r2, r3
   10cae:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb6:	2104      	movs	r1, #4
   10cb8:	5499      	strb	r1, [r3, r2]
   10cba:	f24c 3319 	movw	r3, #49945	; 0xc319
   10cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc2:	781b      	ldrb	r3, [r3, #0]
   10cc4:	3301      	adds	r3, #1
   10cc6:	b2da      	uxtb	r2, r3
   10cc8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd0:	701a      	strb	r2, [r3, #0]
   10cd2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cda:	781b      	ldrb	r3, [r3, #0]
   10cdc:	2bff      	cmp	r3, #255	; 0xff
   10cde:	d105      	bne.n	10cec <send_takeOff+0x15c>
   10ce0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce8:	2200      	movs	r2, #0
   10cea:	701a      	strb	r2, [r3, #0]
   10cec:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf4:	2204      	movs	r2, #4
   10cf6:	701a      	strb	r2, [r3, #0]
   10cf8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d00:	2204      	movs	r2, #4
   10d02:	701a      	strb	r2, [r3, #0]
   10d04:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d0c:	781b      	ldrb	r3, [r3, #0]
   10d0e:	461a      	mov	r2, r3
   10d10:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d18:	7819      	ldrb	r1, [r3, #0]
   10d1a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d22:	5499      	strb	r1, [r3, r2]
   10d24:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d2c:	781a      	ldrb	r2, [r3, #0]
   10d2e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d36:	781b      	ldrb	r3, [r3, #0]
   10d38:	4413      	add	r3, r2
   10d3a:	b2da      	uxtb	r2, r3
   10d3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d44:	701a      	strb	r2, [r3, #0]
   10d46:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d4e:	781a      	ldrb	r2, [r3, #0]
   10d50:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d58:	781b      	ldrb	r3, [r3, #0]
   10d5a:	4413      	add	r3, r2
   10d5c:	b2da      	uxtb	r2, r3
   10d5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d66:	701a      	strb	r2, [r3, #0]
   10d68:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d70:	781b      	ldrb	r3, [r3, #0]
   10d72:	3301      	adds	r3, #1
   10d74:	b2da      	uxtb	r2, r3
   10d76:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d7e:	701a      	strb	r2, [r3, #0]
   10d80:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d88:	781b      	ldrb	r3, [r3, #0]
   10d8a:	2bff      	cmp	r3, #255	; 0xff
   10d8c:	d105      	bne.n	10d9a <send_takeOff+0x20a>
   10d8e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d96:	2200      	movs	r2, #0
   10d98:	701a      	strb	r2, [r3, #0]
   10d9a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da2:	781b      	ldrb	r3, [r3, #0]
   10da4:	461a      	mov	r2, r3
   10da6:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dae:	7859      	ldrb	r1, [r3, #1]
   10db0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db8:	5499      	strb	r1, [r3, r2]
   10dba:	4b7b      	ldr	r3, [pc, #492]	; (10fa8 <send_takeOff+0x418>)
   10dbc:	781a      	ldrb	r2, [r3, #0]
   10dbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc6:	781b      	ldrb	r3, [r3, #0]
   10dc8:	4413      	add	r3, r2
   10dca:	b2da      	uxtb	r2, r3
   10dcc:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd4:	701a      	strb	r2, [r3, #0]
   10dd6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dde:	781a      	ldrb	r2, [r3, #0]
   10de0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de8:	781b      	ldrb	r3, [r3, #0]
   10dea:	4413      	add	r3, r2
   10dec:	b2da      	uxtb	r2, r3
   10dee:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df6:	701a      	strb	r2, [r3, #0]
   10df8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e00:	781b      	ldrb	r3, [r3, #0]
   10e02:	3301      	adds	r3, #1
   10e04:	b2da      	uxtb	r2, r3
   10e06:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e0e:	701a      	strb	r2, [r3, #0]
   10e10:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e18:	781b      	ldrb	r3, [r3, #0]
   10e1a:	2bff      	cmp	r3, #255	; 0xff
   10e1c:	d105      	bne.n	10e2a <send_takeOff+0x29a>
   10e1e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e26:	2200      	movs	r2, #0
   10e28:	701a      	strb	r2, [r3, #0]
   10e2a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e32:	781b      	ldrb	r3, [r3, #0]
   10e34:	461a      	mov	r2, r3
   10e36:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e3e:	7819      	ldrb	r1, [r3, #0]
   10e40:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e48:	5499      	strb	r1, [r3, r2]
   10e4a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e52:	781b      	ldrb	r3, [r3, #0]
   10e54:	3301      	adds	r3, #1
   10e56:	b2da      	uxtb	r2, r3
   10e58:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e60:	701a      	strb	r2, [r3, #0]
   10e62:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e6a:	781b      	ldrb	r3, [r3, #0]
   10e6c:	2bff      	cmp	r3, #255	; 0xff
   10e6e:	d105      	bne.n	10e7c <send_takeOff+0x2ec>
   10e70:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e78:	2200      	movs	r2, #0
   10e7a:	701a      	strb	r2, [r3, #0]
   10e7c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e84:	781b      	ldrb	r3, [r3, #0]
   10e86:	461a      	mov	r2, r3
   10e88:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e90:	7819      	ldrb	r1, [r3, #0]
   10e92:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e9a:	5499      	strb	r1, [r3, r2]
   10e9c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea4:	781b      	ldrb	r3, [r3, #0]
   10ea6:	3301      	adds	r3, #1
   10ea8:	b2da      	uxtb	r2, r3
   10eaa:	f24c 3319 	movw	r3, #49945	; 0xc319
   10eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb2:	701a      	strb	r2, [r3, #0]
   10eb4:	f24c 3319 	movw	r3, #49945	; 0xc319
   10eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ebc:	781b      	ldrb	r3, [r3, #0]
   10ebe:	2bff      	cmp	r3, #255	; 0xff
   10ec0:	d105      	bne.n	10ece <send_takeOff+0x33e>
   10ec2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eca:	2200      	movs	r2, #0
   10ecc:	701a      	strb	r2, [r3, #0]
   10ece:	f242 0339 	movw	r3, #8249	; 0x2039
   10ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ed6:	781b      	ldrb	r3, [r3, #0]
   10ed8:	b2db      	uxtb	r3, r3
   10eda:	f003 0310 	and.w	r3, r3, #16
   10ede:	2b00      	cmp	r3, #0
   10ee0:	d15a      	bne.n	10f98 <send_takeOff+0x408>
   10ee2:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eea:	781b      	ldrb	r3, [r3, #0]
   10eec:	b2db      	uxtb	r3, r3
   10eee:	461a      	mov	r2, r3
   10ef0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef8:	5c9a      	ldrb	r2, [r3, r2]
   10efa:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f02:	701a      	strb	r2, [r3, #0]
   10f04:	f24c 431c 	movw	r3, #50204	; 0xc41c
   10f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f0c:	2200      	movs	r2, #0
   10f0e:	701a      	strb	r2, [r3, #0]
   10f10:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f18:	781b      	ldrb	r3, [r3, #0]
   10f1a:	b2db      	uxtb	r3, r3
   10f1c:	3301      	adds	r3, #1
   10f1e:	b2da      	uxtb	r2, r3
   10f20:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f28:	701a      	strb	r2, [r3, #0]
   10f2a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f32:	781b      	ldrb	r3, [r3, #0]
   10f34:	b2db      	uxtb	r3, r3
   10f36:	2bff      	cmp	r3, #255	; 0xff
   10f38:	d105      	bne.n	10f46 <send_takeOff+0x3b6>
   10f3a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f42:	2200      	movs	r2, #0
   10f44:	701a      	strb	r2, [r3, #0]
   10f46:	f242 0338 	movw	r3, #8248	; 0x2038
   10f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f4e:	f242 0238 	movw	r2, #8248	; 0x2038
   10f52:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f56:	7812      	ldrb	r2, [r2, #0]
   10f58:	b2d2      	uxtb	r2, r2
   10f5a:	f042 0201 	orr.w	r2, r2, #1
   10f5e:	b2d2      	uxtb	r2, r2
   10f60:	701a      	strb	r2, [r3, #0]
   10f62:	f242 0339 	movw	r3, #8249	; 0x2039
   10f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f6a:	f242 0239 	movw	r2, #8249	; 0x2039
   10f6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f72:	7812      	ldrb	r2, [r2, #0]
   10f74:	b2d2      	uxtb	r2, r2
   10f76:	f042 0210 	orr.w	r2, r2, #16
   10f7a:	b2d2      	uxtb	r2, r2
   10f7c:	701a      	strb	r2, [r3, #0]
   10f7e:	e00b      	b.n	10f98 <send_takeOff+0x408>
   10f80:	f24c 3318 	movw	r3, #49944	; 0xc318
   10f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f88:	781b      	ldrb	r3, [r3, #0]
   10f8a:	3301      	adds	r3, #1
   10f8c:	b2da      	uxtb	r2, r3
   10f8e:	f24c 3318 	movw	r3, #49944	; 0xc318
   10f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f96:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10f98:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   10f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fa0:	2200      	movs	r2, #0
   10fa2:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10fa4:	bd80      	pop	{r7, pc}
   10fa6:	bf00      	nop
   10fa8:	2004c2fb 	.word	0x2004c2fb
   10fac:	f3af 8000 	nop.w

00010fb0 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10fb0:	b480      	push	{r7}
   10fb2:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10fb4:	f242 0317 	movw	r3, #8215	; 0x2017
   10fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fbc:	f242 0217 	movw	r2, #8215	; 0x2017
   10fc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fc4:	7812      	ldrb	r2, [r2, #0]
   10fc6:	b2d2      	uxtb	r2, r2
   10fc8:	f042 0210 	orr.w	r2, r2, #16
   10fcc:	b2d2      	uxtb	r2, r2
   10fce:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10fd0:	f242 0331 	movw	r3, #8241	; 0x2031
   10fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd8:	2201      	movs	r2, #1
   10fda:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10fdc:	f242 0333 	movw	r3, #8243	; 0x2033
   10fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe4:	2219      	movs	r2, #25
   10fe6:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10fe8:	f242 0311 	movw	r3, #8209	; 0x2011
   10fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff0:	f242 0211 	movw	r2, #8209	; 0x2011
   10ff4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ff8:	7812      	ldrb	r2, [r2, #0]
   10ffa:	b2d2      	uxtb	r2, r2
   10ffc:	f062 023f 	orn	r2, r2, #63	; 0x3f
   11000:	b2d2      	uxtb	r2, r2
   11002:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11004:	f242 0312 	movw	r3, #8210	; 0x2012
   11008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1100c:	f242 0212 	movw	r2, #8210	; 0x2012
   11010:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11014:	7812      	ldrb	r2, [r2, #0]
   11016:	b2d2      	uxtb	r2, r2
   11018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1101c:	b2d2      	uxtb	r2, r2
   1101e:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   11020:	f242 0312 	movw	r3, #8210	; 0x2012
   11024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11028:	f242 0212 	movw	r2, #8210	; 0x2012
   1102c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11030:	7812      	ldrb	r2, [r2, #0]
   11032:	b2d2      	uxtb	r2, r2
   11034:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11038:	b2d2      	uxtb	r2, r2
   1103a:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   1103c:	f242 033a 	movw	r3, #8250	; 0x203a
   11040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11044:	f242 023a 	movw	r2, #8250	; 0x203a
   11048:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1104c:	7812      	ldrb	r2, [r2, #0]
   1104e:	b2d2      	uxtb	r2, r2
   11050:	f042 0202 	orr.w	r2, r2, #2
   11054:	b2d2      	uxtb	r2, r2
   11056:	701a      	strb	r2, [r3, #0]
}
   11058:	46bd      	mov	sp, r7
   1105a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1105e:	4770      	bx	lr

00011060 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   11060:	b480      	push	{r7}
   11062:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   11064:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11068:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1106c:	781b      	ldrb	r3, [r3, #0]
   1106e:	2b00      	cmp	r3, #0
   11070:	d10e      	bne.n	11090 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11072:	f242 0312 	movw	r3, #8210	; 0x2012
   11076:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1107a:	f242 0212 	movw	r2, #8210	; 0x2012
   1107e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11082:	7812      	ldrb	r2, [r2, #0]
   11084:	b2d2      	uxtb	r2, r2
   11086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1108a:	b2d2      	uxtb	r2, r2
   1108c:	701a      	strb	r2, [r3, #0]
   1108e:	e047      	b.n	11120 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   11090:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11094:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11098:	781b      	ldrb	r3, [r3, #0]
   1109a:	2b08      	cmp	r3, #8
   1109c:	d832      	bhi.n	11104 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   1109e:	f24c 431b 	movw	r3, #50203	; 0xc41b
   110a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110a6:	781b      	ldrb	r3, [r3, #0]
   110a8:	f003 0301 	and.w	r3, r3, #1
   110ac:	2b00      	cmp	r3, #0
   110ae:	d00e      	beq.n	110ce <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   110b0:	f242 0312 	movw	r3, #8210	; 0x2012
   110b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b8:	f242 0212 	movw	r2, #8210	; 0x2012
   110bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110c0:	7812      	ldrb	r2, [r2, #0]
   110c2:	b2d2      	uxtb	r2, r2
   110c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110c8:	b2d2      	uxtb	r2, r2
   110ca:	701a      	strb	r2, [r3, #0]
   110cc:	e00d      	b.n	110ea <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   110ce:	f242 0312 	movw	r3, #8210	; 0x2012
   110d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d6:	f242 0212 	movw	r2, #8210	; 0x2012
   110da:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110de:	7812      	ldrb	r2, [r2, #0]
   110e0:	b2d2      	uxtb	r2, r2
   110e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   110e6:	b2d2      	uxtb	r2, r2
   110e8:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   110ea:	f24c 431b 	movw	r3, #50203	; 0xc41b
   110ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f2:	781b      	ldrb	r3, [r3, #0]
   110f4:	085b      	lsrs	r3, r3, #1
   110f6:	b2da      	uxtb	r2, r3
   110f8:	f24c 431b 	movw	r3, #50203	; 0xc41b
   110fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11100:	701a      	strb	r2, [r3, #0]
   11102:	e00d      	b.n	11120 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   11104:	f242 0312 	movw	r3, #8210	; 0x2012
   11108:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1110c:	f242 0212 	movw	r2, #8210	; 0x2012
   11110:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11114:	7812      	ldrb	r2, [r2, #0]
   11116:	b2d2      	uxtb	r2, r2
   11118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1111c:	b2d2      	uxtb	r2, r2
   1111e:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   11120:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11124:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11128:	781b      	ldrb	r3, [r3, #0]
   1112a:	3301      	adds	r3, #1
   1112c:	b2da      	uxtb	r2, r3
   1112e:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11132:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11136:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   11138:	f24c 431c 	movw	r3, #50204	; 0xc41c
   1113c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11140:	781b      	ldrb	r3, [r3, #0]
   11142:	2b09      	cmp	r3, #9
   11144:	d94d      	bls.n	111e2 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   11146:	f24c 3319 	movw	r3, #49945	; 0xc319
   1114a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1114e:	781a      	ldrb	r2, [r3, #0]
   11150:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11154:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11158:	781b      	ldrb	r3, [r3, #0]
   1115a:	b2db      	uxtb	r3, r3
   1115c:	429a      	cmp	r2, r3
   1115e:	d10e      	bne.n	1117e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   11160:	f242 0339 	movw	r3, #8249	; 0x2039
   11164:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11168:	f242 0239 	movw	r2, #8249	; 0x2039
   1116c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11170:	7812      	ldrb	r2, [r2, #0]
   11172:	b2d2      	uxtb	r2, r2
   11174:	f022 0210 	bic.w	r2, r2, #16
   11178:	b2d2      	uxtb	r2, r2
   1117a:	701a      	strb	r2, [r3, #0]
   1117c:	e031      	b.n	111e2 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   1117e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11182:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11186:	781b      	ldrb	r3, [r3, #0]
   11188:	b2db      	uxtb	r3, r3
   1118a:	461a      	mov	r2, r3
   1118c:	f24c 331c 	movw	r3, #49948	; 0xc31c
   11190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11194:	5c9a      	ldrb	r2, [r3, r2]
   11196:	f24c 431b 	movw	r3, #50203	; 0xc41b
   1119a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1119e:	701a      	strb	r2, [r3, #0]
   111a0:	f24c 431c 	movw	r3, #50204	; 0xc41c
   111a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a8:	2200      	movs	r2, #0
   111aa:	701a      	strb	r2, [r3, #0]
   111ac:	f24c 331a 	movw	r3, #49946	; 0xc31a
   111b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111b4:	781b      	ldrb	r3, [r3, #0]
   111b6:	b2db      	uxtb	r3, r3
   111b8:	3301      	adds	r3, #1
   111ba:	b2da      	uxtb	r2, r3
   111bc:	f24c 331a 	movw	r3, #49946	; 0xc31a
   111c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111c4:	701a      	strb	r2, [r3, #0]
   111c6:	f24c 331a 	movw	r3, #49946	; 0xc31a
   111ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ce:	781b      	ldrb	r3, [r3, #0]
   111d0:	b2db      	uxtb	r3, r3
   111d2:	2bff      	cmp	r3, #255	; 0xff
   111d4:	d105      	bne.n	111e2 <__vector_5+0x182>
   111d6:	f24c 331a 	movw	r3, #49946	; 0xc31a
   111da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111de:	2200      	movs	r2, #0
   111e0:	701a      	strb	r2, [r3, #0]
    }
  }
}
   111e2:	46bd      	mov	sp, r7
   111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   111e8:	4770      	bx	lr
   111ea:	bf00      	nop

000111ec <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   111ec:	b480      	push	{r7}
   111ee:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   111f0:	f24c 434f 	movw	r3, #50255	; 0xc44f
   111f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111f8:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   111fa:	f240 533e 	movw	r3, #1342	; 0x53e
   111fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11202:	2200      	movs	r2, #0
   11204:	701a      	strb	r2, [r3, #0]
}
   11206:	46bd      	mov	sp, r7
   11208:	f85d 7b04 	ldr.w	r7, [sp], #4
   1120c:	4770      	bx	lr
   1120e:	bf00      	nop

00011210 <link_fbw_send>:

void link_fbw_send(void) {
   11210:	b480      	push	{r7}
   11212:	b083      	sub	sp, #12
   11214:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   11216:	f24c 4354 	movw	r3, #50260	; 0xc454
   1121a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1121e:	781b      	ldrb	r3, [r3, #0]
   11220:	b2db      	uxtb	r3, r3
   11222:	2b00      	cmp	r3, #0
   11224:	d00c      	beq.n	11240 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   11226:	f24c 4355 	movw	r3, #50261	; 0xc455
   1122a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1122e:	781b      	ldrb	r3, [r3, #0]
   11230:	3301      	adds	r3, #1
   11232:	b2da      	uxtb	r2, r3
   11234:	f24c 4355 	movw	r3, #50261	; 0xc455
   11238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1123c:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   1123e:	e064      	b.n	1130a <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   11240:	f242 030d 	movw	r3, #8205	; 0x200d
   11244:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11248:	2251      	movs	r2, #81	; 0x51
   1124a:	701a      	strb	r2, [r3, #0]
   1124c:	f242 030e 	movw	r3, #8206	; 0x200e
   11250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11254:	781b      	ldrb	r3, [r3, #0]
   11256:	b2db      	uxtb	r3, r3
   11258:	b2db      	uxtb	r3, r3
   1125a:	b25b      	sxtb	r3, r3
   1125c:	2b00      	cmp	r3, #0
   1125e:	da05      	bge.n	1126c <link_fbw_send+0x5c>
   11260:	f242 030f 	movw	r3, #8207	; 0x200f
   11264:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11268:	781b      	ldrb	r3, [r3, #0]
   1126a:	71fb      	strb	r3, [r7, #7]
   1126c:	f242 030d 	movw	r3, #8205	; 0x200d
   11270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11274:	f242 020d 	movw	r2, #8205	; 0x200d
   11278:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1127c:	7812      	ldrb	r2, [r2, #0]
   1127e:	b2d2      	uxtb	r2, r2
   11280:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11284:	b2d2      	uxtb	r2, r2
   11286:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11288:	f24c 4354 	movw	r3, #50260	; 0xc454
   1128c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11290:	2201      	movs	r2, #1
   11292:	701a      	strb	r2, [r3, #0]
   11294:	f242 0318 	movw	r3, #8216	; 0x2018
   11298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1129c:	f242 0218 	movw	r2, #8216	; 0x2018
   112a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112a4:	7812      	ldrb	r2, [r2, #0]
   112a6:	b2d2      	uxtb	r2, r2
   112a8:	f022 0201 	bic.w	r2, r2, #1
   112ac:	b2d2      	uxtb	r2, r2
   112ae:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   112b0:	f24c 4351 	movw	r3, #50257	; 0xc451
   112b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112b8:	2200      	movs	r2, #0
   112ba:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   112bc:	f24c 4352 	movw	r3, #50258	; 0xc452
   112c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112c4:	2200      	movs	r2, #0
   112c6:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   112c8:	f24c 4351 	movw	r3, #50257	; 0xc451
   112cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112d0:	781b      	ldrb	r3, [r3, #0]
   112d2:	461a      	mov	r2, r3
   112d4:	f24c 4338 	movw	r3, #50232	; 0xc438
   112d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112dc:	4413      	add	r3, r2
   112de:	781a      	ldrb	r2, [r3, #0]
   112e0:	f24c 4353 	movw	r3, #50259	; 0xc453
   112e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112e8:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   112ea:	f242 030f 	movw	r3, #8207	; 0x200f
   112ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f2:	f24c 4253 	movw	r2, #50259	; 0xc453
   112f6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   112fa:	7812      	ldrb	r2, [r2, #0]
   112fc:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   112fe:	f24c 434e 	movw	r3, #50254	; 0xc44e
   11302:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11306:	2200      	movs	r2, #0
   11308:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   1130a:	370c      	adds	r7, #12
   1130c:	46bd      	mov	sp, r7
   1130e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11312:	4770      	bx	lr

00011314 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   11314:	b480      	push	{r7}
   11316:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   11318:	f242 032a 	movw	r3, #8234	; 0x202a
   1131c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11320:	f242 022c 	movw	r2, #8236	; 0x202c
   11324:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11328:	8812      	ldrh	r2, [r2, #0]
   1132a:	b292      	uxth	r2, r2
   1132c:	32c8      	adds	r2, #200	; 0xc8
   1132e:	b292      	uxth	r2, r2
   11330:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   11332:	f242 0336 	movw	r3, #8246	; 0x2036
   11336:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1133a:	f242 0236 	movw	r2, #8246	; 0x2036
   1133e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11342:	7812      	ldrb	r2, [r2, #0]
   11344:	b2d2      	uxtb	r2, r2
   11346:	f042 0210 	orr.w	r2, r2, #16
   1134a:	b2d2      	uxtb	r2, r2
   1134c:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   1134e:	f242 0337 	movw	r3, #8247	; 0x2037
   11352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11356:	f242 0237 	movw	r2, #8247	; 0x2037
   1135a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1135e:	7812      	ldrb	r2, [r2, #0]
   11360:	b2d2      	uxtb	r2, r2
   11362:	f042 0210 	orr.w	r2, r2, #16
   11366:	b2d2      	uxtb	r2, r2
   11368:	701a      	strb	r2, [r3, #0]
}
   1136a:	46bd      	mov	sp, r7
   1136c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11370:	4770      	bx	lr
   11372:	bf00      	nop

00011374 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   11374:	b480      	push	{r7}
   11376:	b083      	sub	sp, #12
   11378:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   1137a:	f242 0337 	movw	r3, #8247	; 0x2037
   1137e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11382:	f242 0237 	movw	r2, #8247	; 0x2037
   11386:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1138a:	7812      	ldrb	r2, [r2, #0]
   1138c:	b2d2      	uxtb	r2, r2
   1138e:	f022 0210 	bic.w	r2, r2, #16
   11392:	b2d2      	uxtb	r2, r2
   11394:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   11396:	f24c 4351 	movw	r3, #50257	; 0xc451
   1139a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1139e:	781b      	ldrb	r3, [r3, #0]
   113a0:	3301      	adds	r3, #1
   113a2:	b2da      	uxtb	r2, r3
   113a4:	f24c 4351 	movw	r3, #50257	; 0xc451
   113a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ac:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   113ae:	f24c 4351 	movw	r3, #50257	; 0xc451
   113b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b6:	781b      	ldrb	r3, [r3, #0]
   113b8:	2b17      	cmp	r3, #23
   113ba:	d162      	bne.n	11482 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   113bc:	f242 030f 	movw	r3, #8207	; 0x200f
   113c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113c4:	781b      	ldrb	r3, [r3, #0]
   113c6:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   113c8:	f24c 4352 	movw	r3, #50258	; 0xc452
   113cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113d0:	781b      	ldrb	r3, [r3, #0]
   113d2:	79fa      	ldrb	r2, [r7, #7]
   113d4:	429a      	cmp	r2, r3
   113d6:	d110      	bne.n	113fa <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   113d8:	f24c 434e 	movw	r3, #50254	; 0xc44e
   113dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113e0:	2201      	movs	r2, #1
   113e2:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   113e4:	f24c 4320 	movw	r3, #50208	; 0xc420
   113e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ec:	7d1a      	ldrb	r2, [r3, #20]
   113ee:	f24c 4350 	movw	r3, #50256	; 0xc450
   113f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113f6:	701a      	strb	r2, [r3, #0]
   113f8:	e00c      	b.n	11414 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   113fa:	f24c 434f 	movw	r3, #50255	; 0xc44f
   113fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11402:	781b      	ldrb	r3, [r3, #0]
   11404:	b2db      	uxtb	r3, r3
   11406:	3301      	adds	r3, #1
   11408:	b2da      	uxtb	r2, r3
   1140a:	f24c 434f 	movw	r3, #50255	; 0xc44f
   1140e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11412:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   11414:	f240 533e 	movw	r3, #1342	; 0x53e
   11418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1141c:	2201      	movs	r2, #1
   1141e:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   11420:	f24c 4354 	movw	r3, #50260	; 0xc454
   11424:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11428:	2200      	movs	r2, #0
   1142a:	701a      	strb	r2, [r3, #0]
   1142c:	f242 0318 	movw	r3, #8216	; 0x2018
   11430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11434:	f242 0218 	movw	r2, #8216	; 0x2018
   11438:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1143c:	7812      	ldrb	r2, [r2, #0]
   1143e:	b2d2      	uxtb	r2, r2
   11440:	f042 0201 	orr.w	r2, r2, #1
   11444:	b2d2      	uxtb	r2, r2
   11446:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   11448:	f242 030d 	movw	r3, #8205	; 0x200d
   1144c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11450:	f242 020d 	movw	r2, #8205	; 0x200d
   11454:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11458:	7812      	ldrb	r2, [r2, #0]
   1145a:	b2d2      	uxtb	r2, r2
   1145c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11460:	b2d2      	uxtb	r2, r2
   11462:	701a      	strb	r2, [r3, #0]
   11464:	f242 030d 	movw	r3, #8205	; 0x200d
   11468:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1146c:	f242 020d 	movw	r2, #8205	; 0x200d
   11470:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11474:	7812      	ldrb	r2, [r2, #0]
   11476:	b2d2      	uxtb	r2, r2
   11478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1147c:	b2d2      	uxtb	r2, r2
   1147e:	701a      	strb	r2, [r3, #0]
    return;
   11480:	e051      	b.n	11526 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   11482:	f24c 4351 	movw	r3, #50257	; 0xc451
   11486:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1148a:	781b      	ldrb	r3, [r3, #0]
   1148c:	2b15      	cmp	r3, #21
   1148e:	d820      	bhi.n	114d2 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11490:	f24c 4351 	movw	r3, #50257	; 0xc451
   11494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11498:	781b      	ldrb	r3, [r3, #0]
   1149a:	461a      	mov	r2, r3
   1149c:	f24c 4338 	movw	r3, #50232	; 0xc438
   114a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114a4:	4413      	add	r3, r2
   114a6:	781b      	ldrb	r3, [r3, #0]
   114a8:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   114aa:	f242 030f 	movw	r3, #8207	; 0x200f
   114ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b2:	79fa      	ldrb	r2, [r7, #7]
   114b4:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   114b6:	f24c 4353 	movw	r3, #50259	; 0xc453
   114ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114be:	781a      	ldrb	r2, [r3, #0]
   114c0:	79fb      	ldrb	r3, [r7, #7]
   114c2:	4053      	eors	r3, r2
   114c4:	b2da      	uxtb	r2, r3
   114c6:	f24c 4353 	movw	r3, #50259	; 0xc453
   114ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ce:	701a      	strb	r2, [r3, #0]
   114d0:	e009      	b.n	114e6 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   114d2:	f242 030f 	movw	r3, #8207	; 0x200f
   114d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114da:	f24c 4253 	movw	r2, #50259	; 0xc453
   114de:	f2c2 0204 	movt	r2, #8196	; 0x2004
   114e2:	7812      	ldrb	r2, [r2, #0]
   114e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   114e6:	f242 030f 	movw	r3, #8207	; 0x200f
   114ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ee:	781b      	ldrb	r3, [r3, #0]
   114f0:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   114f2:	f24c 4351 	movw	r3, #50257	; 0xc451
   114f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114fa:	781b      	ldrb	r3, [r3, #0]
   114fc:	1e5a      	subs	r2, r3, #1
   114fe:	f24c 4320 	movw	r3, #50208	; 0xc420
   11502:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11506:	4413      	add	r3, r2
   11508:	79fa      	ldrb	r2, [r7, #7]
   1150a:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   1150c:	f24c 4352 	movw	r3, #50258	; 0xc452
   11510:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11514:	781a      	ldrb	r2, [r3, #0]
   11516:	79fb      	ldrb	r3, [r7, #7]
   11518:	4053      	eors	r3, r2
   1151a:	b2da      	uxtb	r2, r3
   1151c:	f24c 4352 	movw	r3, #50258	; 0xc452
   11520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11524:	701a      	strb	r2, [r3, #0]
}
   11526:	370c      	adds	r7, #12
   11528:	46bd      	mov	sp, r7
   1152a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1152e:	4770      	bx	lr

00011530 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   11530:	b480      	push	{r7}
   11532:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   11534:	f242 0317 	movw	r3, #8215	; 0x2017
   11538:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1153c:	f242 0217 	movw	r2, #8215	; 0x2017
   11540:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11544:	7812      	ldrb	r2, [r2, #0]
   11546:	b2d2      	uxtb	r2, r2
   11548:	f042 0206 	orr.w	r2, r2, #6
   1154c:	b2d2      	uxtb	r2, r2
   1154e:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11550:	f242 0317 	movw	r3, #8215	; 0x2017
   11554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11558:	f242 0217 	movw	r2, #8215	; 0x2017
   1155c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11560:	7812      	ldrb	r2, [r2, #0]
   11562:	b2d2      	uxtb	r2, r2
   11564:	f042 0201 	orr.w	r2, r2, #1
   11568:	b2d2      	uxtb	r2, r2
   1156a:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   1156c:	f24c 4354 	movw	r3, #50260	; 0xc454
   11570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11574:	2200      	movs	r2, #0
   11576:	701a      	strb	r2, [r3, #0]
   11578:	f242 0318 	movw	r3, #8216	; 0x2018
   1157c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11580:	f242 0218 	movw	r2, #8216	; 0x2018
   11584:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11588:	7812      	ldrb	r2, [r2, #0]
   1158a:	b2d2      	uxtb	r2, r2
   1158c:	f042 0201 	orr.w	r2, r2, #1
   11590:	b2d2      	uxtb	r2, r2
   11592:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   11594:	f242 0302 	movw	r3, #8194	; 0x2002
   11598:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1159c:	f242 0202 	movw	r2, #8194	; 0x2002
   115a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115a4:	7812      	ldrb	r2, [r2, #0]
   115a6:	b2d2      	uxtb	r2, r2
   115a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   115ac:	b2d2      	uxtb	r2, r2
   115ae:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   115b0:	f24c 4354 	movw	r3, #50260	; 0xc454
   115b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115b8:	2200      	movs	r2, #0
   115ba:	701a      	strb	r2, [r3, #0]
   115bc:	f242 0303 	movw	r3, #8195	; 0x2003
   115c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c4:	f242 0203 	movw	r2, #8195	; 0x2003
   115c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115cc:	7812      	ldrb	r2, [r2, #0]
   115ce:	b2d2      	uxtb	r2, r2
   115d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   115d4:	b2d2      	uxtb	r2, r2
   115d6:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   115d8:	f24c 4354 	movw	r3, #50260	; 0xc454
   115dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115e0:	2200      	movs	r2, #0
   115e2:	701a      	strb	r2, [r3, #0]
}
   115e4:	46bd      	mov	sp, r7
   115e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   115ea:	4770      	bx	lr

000115ec <__vector_17>:


SIGNAL(SIG_SPI) {
   115ec:	b580      	push	{r7, lr}
   115ee:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   115f0:	f24c 4354 	movw	r3, #50260	; 0xc454
   115f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115f8:	781b      	ldrb	r3, [r3, #0]
   115fa:	b2db      	uxtb	r3, r3
   115fc:	2b01      	cmp	r3, #1
   115fe:	d102      	bne.n	11606 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11600:	f7ff fe88 	bl	11314 <link_fbw_on_spi_it>
   11604:	e00b      	b.n	1161e <__vector_17+0x32>
  else
    fatal_error_nb++;
   11606:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   1160a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1160e:	781b      	ldrb	r3, [r3, #0]
   11610:	3301      	adds	r3, #1
   11612:	b2da      	uxtb	r2, r3
   11614:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   11618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1161c:	701a      	strb	r2, [r3, #0]
}
   1161e:	bd80      	pop	{r7, pc}

00011620 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   11620:	b480      	push	{r7}
   11622:	b083      	sub	sp, #12
   11624:	af00      	add	r7, sp, #0
   11626:	4603      	mov	r3, r0
   11628:	6039      	str	r1, [r7, #0]
   1162a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   1162c:	79fa      	ldrb	r2, [r7, #7]
   1162e:	f24c 4368 	movw	r3, #50280	; 0xc468
   11632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11636:	6839      	ldr	r1, [r7, #0]
   11638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1163c:	370c      	adds	r7, #12
   1163e:	46bd      	mov	sp, r7
   11640:	f85d 7b04 	ldr.w	r7, [sp], #4
   11644:	4770      	bx	lr
   11646:	bf00      	nop

00011648 <adc_init>:

void 
adc_init( void )
{
   11648:	b480      	push	{r7}
   1164a:	b083      	sub	sp, #12
   1164c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   1164e:	f242 0362 	movw	r3, #8290	; 0x2062
   11652:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11656:	2200      	movs	r2, #0
   11658:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1165a:	f242 0361 	movw	r3, #8289	; 0x2061
   1165e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11662:	2200      	movs	r2, #0
   11664:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   11666:	f242 0307 	movw	r3, #8199	; 0x2007
   1166a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1166e:	2240      	movs	r2, #64	; 0x40
   11670:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   11672:	f242 0308 	movw	r3, #8200	; 0x2008
   11676:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1167a:	f242 0208 	movw	r2, #8200	; 0x2008
   1167e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11682:	7812      	ldrb	r2, [r2, #0]
   11684:	b2d2      	uxtb	r2, r2
   11686:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1168a:	b2d2      	uxtb	r2, r2
   1168c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   1168e:	f242 0306 	movw	r3, #8198	; 0x2006
   11692:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11696:	22cf      	movs	r2, #207	; 0xcf
   11698:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   1169a:	2300      	movs	r3, #0
   1169c:	71fb      	strb	r3, [r7, #7]
   1169e:	e00a      	b.n	116b6 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   116a0:	79fa      	ldrb	r2, [r7, #7]
   116a2:	f24c 4368 	movw	r3, #50280	; 0xc468
   116a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116aa:	2100      	movs	r1, #0
   116ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   116b0:	79fb      	ldrb	r3, [r7, #7]
   116b2:	3301      	adds	r3, #1
   116b4:	71fb      	strb	r3, [r7, #7]
   116b6:	79fb      	ldrb	r3, [r7, #7]
   116b8:	2b07      	cmp	r3, #7
   116ba:	d9f1      	bls.n	116a0 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   116bc:	370c      	adds	r7, #12
   116be:	46bd      	mov	sp, r7
   116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   116c4:	4770      	bx	lr
   116c6:	bf00      	nop

000116c8 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   116c8:	b480      	push	{r7}
   116ca:	b085      	sub	sp, #20
   116cc:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   116ce:	f242 0307 	movw	r3, #8199	; 0x2007
   116d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116d6:	781b      	ldrb	r3, [r3, #0]
   116d8:	b2db      	uxtb	r3, r3
   116da:	f003 0307 	and.w	r3, r3, #7
   116de:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   116e0:	7bfa      	ldrb	r2, [r7, #15]
   116e2:	f24c 4368 	movw	r3, #50280	; 0xc468
   116e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   116ee:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   116f0:	f242 0304 	movw	r3, #8196	; 0x2004
   116f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f8:	881b      	ldrh	r3, [r3, #0]
   116fa:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   116fc:	7bfa      	ldrb	r2, [r7, #15]
   116fe:	f24c 4358 	movw	r3, #50264	; 0xc458
   11702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11706:	88f9      	ldrh	r1, [r7, #6]
   11708:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   1170c:	68bb      	ldr	r3, [r7, #8]
   1170e:	2b00      	cmp	r3, #0
   11710:	d025      	beq.n	1175e <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   11712:	68bb      	ldr	r3, [r7, #8]
   11714:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   11718:	3301      	adds	r3, #1
   1171a:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   1171c:	7bbb      	ldrb	r3, [r7, #14]
   1171e:	2b1f      	cmp	r3, #31
   11720:	d901      	bls.n	11726 <__vector_21+0x5e>
   11722:	2300      	movs	r3, #0
   11724:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   11726:	68bb      	ldr	r3, [r7, #8]
   11728:	881a      	ldrh	r2, [r3, #0]
   1172a:	7bbb      	ldrb	r3, [r7, #14]
   1172c:	68b9      	ldr	r1, [r7, #8]
   1172e:	005b      	lsls	r3, r3, #1
   11730:	440b      	add	r3, r1
   11732:	885b      	ldrh	r3, [r3, #2]
   11734:	1ad3      	subs	r3, r2, r3
   11736:	b29a      	uxth	r2, r3
   11738:	68bb      	ldr	r3, [r7, #8]
   1173a:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   1173c:	7bbb      	ldrb	r3, [r7, #14]
   1173e:	68ba      	ldr	r2, [r7, #8]
   11740:	005b      	lsls	r3, r3, #1
   11742:	4413      	add	r3, r2
   11744:	88fa      	ldrh	r2, [r7, #6]
   11746:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11748:	68bb      	ldr	r3, [r7, #8]
   1174a:	881a      	ldrh	r2, [r3, #0]
   1174c:	88fb      	ldrh	r3, [r7, #6]
   1174e:	4413      	add	r3, r2
   11750:	b29a      	uxth	r2, r3
   11752:	68bb      	ldr	r3, [r7, #8]
   11754:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   11756:	68bb      	ldr	r3, [r7, #8]
   11758:	7bba      	ldrb	r2, [r7, #14]
   1175a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   1175e:	7bfb      	ldrb	r3, [r7, #15]
   11760:	3301      	adds	r3, #1
   11762:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   11764:	7bfb      	ldrb	r3, [r7, #15]
   11766:	2b07      	cmp	r3, #7
   11768:	d901      	bls.n	1176e <__vector_21+0xa6>
    adc_input = 0;
   1176a:	2300      	movs	r3, #0
   1176c:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   1176e:	f242 0307 	movw	r3, #8199	; 0x2007
   11772:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11776:	7bfa      	ldrb	r2, [r7, #15]
   11778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1177c:	b2d2      	uxtb	r2, r2
   1177e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11780:	f242 0306 	movw	r3, #8198	; 0x2006
   11784:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11788:	f242 0206 	movw	r2, #8198	; 0x2006
   1178c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11790:	7812      	ldrb	r2, [r2, #0]
   11792:	b2d2      	uxtb	r2, r2
   11794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11798:	b2d2      	uxtb	r2, r2
   1179a:	701a      	strb	r2, [r3, #0]
  
}
   1179c:	3714      	adds	r7, #20
   1179e:	46bd      	mov	sp, r7
   117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   117a4:	4770      	bx	lr
   117a6:	bf00      	nop

000117a8 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   117a8:	b580      	push	{r7, lr}
   117aa:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   117ac:	f003 fca8 	bl	15100 <uart1_init>
#endif
  ubx_status = UNINIT;
   117b0:	f24c 53af 	movw	r3, #50607	; 0xc5af
   117b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117b8:	2200      	movs	r2, #0
   117ba:	701a      	strb	r2, [r3, #0]
}
   117bc:	bd80      	pop	{r7, pc}
   117be:	bf00      	nop

000117c0 <parse_gps_msg>:

void parse_gps_msg( void ) {
   117c0:	b580      	push	{r7, lr}
   117c2:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   117c4:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   117c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117cc:	781b      	ldrb	r3, [r3, #0]
   117ce:	2b01      	cmp	r3, #1
   117d0:	f040 80f9 	bne.w	119c6 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   117d4:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   117d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117dc:	781b      	ldrb	r3, [r3, #0]
   117de:	2b08      	cmp	r3, #8
   117e0:	d128      	bne.n	11834 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   117e2:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   117e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ea:	685a      	ldr	r2, [r3, #4]
   117ec:	f24c 439c 	movw	r3, #50332	; 0xc49c
   117f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117f4:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   117f6:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   117fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117fe:	689a      	ldr	r2, [r3, #8]
   11800:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   11804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11808:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   1180a:	4b73      	ldr	r3, [pc, #460]	; (119d8 <parse_gps_msg+0x218>)
   1180c:	681b      	ldr	r3, [r3, #0]
   1180e:	4618      	mov	r0, r3
   11810:	f006 fdca 	bl	183a8 <__aeabi_i2f>
   11814:	4603      	mov	r3, r0
   11816:	4618      	mov	r0, r3
   11818:	f04f 0100 	mov.w	r1, #0
   1181c:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11820:	f006 feca 	bl	185b8 <__aeabi_fdiv>
   11824:	4603      	mov	r3, r0
   11826:	461a      	mov	r2, r3
   11828:	f24c 438c 	movw	r3, #50316	; 0xc48c
   1182c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11830:	601a      	str	r2, [r3, #0]
   11832:	e0c8      	b.n	119c6 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   11834:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1183c:	781b      	ldrb	r3, [r3, #0]
   1183e:	2b03      	cmp	r3, #3
   11840:	d10a      	bne.n	11858 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   11842:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1184a:	791a      	ldrb	r2, [r3, #4]
   1184c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   11850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11854:	701a      	strb	r2, [r3, #0]
   11856:	e0b6      	b.n	119c6 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11858:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   1185c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11860:	781b      	ldrb	r3, [r3, #0]
   11862:	2b12      	cmp	r3, #18
   11864:	f040 80af 	bne.w	119c6 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11868:	4b5c      	ldr	r3, [pc, #368]	; (119dc <parse_gps_msg+0x21c>)
   1186a:	681b      	ldr	r3, [r3, #0]
   1186c:	4618      	mov	r0, r3
   1186e:	f006 fd97 	bl	183a0 <__aeabi_ui2f>
   11872:	4603      	mov	r3, r0
   11874:	4618      	mov	r0, r3
   11876:	f04f 0100 	mov.w	r1, #0
   1187a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1187e:	f006 fe9b 	bl	185b8 <__aeabi_fdiv>
   11882:	4603      	mov	r3, r0
   11884:	461a      	mov	r2, r3
   11886:	f24c 4390 	movw	r3, #50320	; 0xc490
   1188a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1188e:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11890:	4b51      	ldr	r3, [pc, #324]	; (119d8 <parse_gps_msg+0x218>)
   11892:	681b      	ldr	r3, [r3, #0]
   11894:	4618      	mov	r0, r3
   11896:	f006 fd87 	bl	183a8 <__aeabi_i2f>
   1189a:	4603      	mov	r3, r0
   1189c:	4618      	mov	r0, r3
   1189e:	f04f 0100 	mov.w	r1, #0
   118a2:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   118a6:	f006 fe87 	bl	185b8 <__aeabi_fdiv>
   118aa:	4603      	mov	r3, r0
   118ac:	461a      	mov	r2, r3
   118ae:	f24c 4394 	movw	r3, #50324	; 0xc494
   118b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118b6:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   118b8:	4b49      	ldr	r3, [pc, #292]	; (119e0 <parse_gps_msg+0x220>)
   118ba:	681b      	ldr	r3, [r3, #0]
   118bc:	4618      	mov	r0, r3
   118be:	f006 fd73 	bl	183a8 <__aeabi_i2f>
   118c2:	4603      	mov	r3, r0
   118c4:	4618      	mov	r0, r3
   118c6:	f006 f92f 	bl	17b28 <__aeabi_f2d>
   118ca:	4602      	mov	r2, r0
   118cc:	460b      	mov	r3, r1
   118ce:	4610      	mov	r0, r2
   118d0:	4619      	mov	r1, r3
   118d2:	a33d      	add	r3, pc, #244	; (adr r3, 119c8 <parse_gps_msg+0x208>)
   118d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   118d8:	f006 faa4 	bl	17e24 <__aeabi_ddiv>
   118dc:	4602      	mov	r2, r0
   118de:	460b      	mov	r3, r1
   118e0:	4610      	mov	r0, r2
   118e2:	4619      	mov	r1, r3
   118e4:	f04f 0200 	mov.w	r2, #0
   118e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   118ec:	f2c4 0366 	movt	r3, #16486	; 0x4066
   118f0:	f006 fa98 	bl	17e24 <__aeabi_ddiv>
   118f4:	4602      	mov	r2, r0
   118f6:	460b      	mov	r3, r1
   118f8:	4610      	mov	r0, r2
   118fa:	4619      	mov	r1, r3
   118fc:	a334      	add	r3, pc, #208	; (adr r3, 119d0 <parse_gps_msg+0x210>)
   118fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   11902:	f006 f965 	bl	17bd0 <__aeabi_dmul>
   11906:	4602      	mov	r2, r0
   11908:	460b      	mov	r3, r1
   1190a:	4610      	mov	r0, r2
   1190c:	4619      	mov	r1, r3
   1190e:	f006 fc41 	bl	18194 <__aeabi_d2f>
   11912:	4602      	mov	r2, r0
   11914:	f24c 4398 	movw	r3, #50328	; 0xc498
   11918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1191c:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   1191e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11926:	681b      	ldr	r3, [r3, #0]
   11928:	4618      	mov	r0, r3
   1192a:	f006 fd39 	bl	183a0 <__aeabi_ui2f>
   1192e:	4603      	mov	r3, r0
   11930:	4618      	mov	r0, r3
   11932:	f04f 0100 	mov.w	r1, #0
   11936:	f2c4 417a 	movt	r1, #17530	; 0x447a
   1193a:	f006 fe3d 	bl	185b8 <__aeabi_fdiv>
   1193e:	4603      	mov	r3, r0
   11940:	461a      	mov	r2, r3
   11942:	f24c 4388 	movw	r3, #50312	; 0xc488
   11946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1194a:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   1194c:	f24c 439c 	movw	r3, #50332	; 0xc49c
   11950:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11954:	681a      	ldr	r2, [r3, #0]
   11956:	f248 531f 	movw	r3, #34079	; 0x851f
   1195a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1195e:	fb83 1302 	smull	r1, r3, r3, r2
   11962:	1159      	asrs	r1, r3, #5
   11964:	17d3      	asrs	r3, r2, #31
   11966:	1acb      	subs	r3, r1, r3
   11968:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   1196c:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11970:	4618      	mov	r0, r3
   11972:	f006 fd19 	bl	183a8 <__aeabi_i2f>
   11976:	4602      	mov	r2, r0
   11978:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   1197c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11980:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11982:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   11986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1198a:	681a      	ldr	r2, [r3, #0]
   1198c:	f248 531f 	movw	r3, #34079	; 0x851f
   11990:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11994:	fb83 1302 	smull	r1, r3, r3, r2
   11998:	1159      	asrs	r1, r3, #5
   1199a:	17d3      	asrs	r3, r2, #31
   1199c:	1aca      	subs	r2, r1, r3
   1199e:	f648 231a 	movw	r3, #35354	; 0x8a1a
   119a2:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   119a6:	4413      	add	r3, r2
   119a8:	4618      	mov	r0, r3
   119aa:	f006 fcfd 	bl	183a8 <__aeabi_i2f>
   119ae:	4602      	mov	r2, r0
   119b0:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   119b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119b8:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   119ba:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   119be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119c2:	2201      	movs	r2, #1
   119c4:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   119c6:	bd80      	pop	{r7, pc}
   119c8:	00000000 	.word	0x00000000
   119cc:	40f86a00 	.word	0x40f86a00
   119d0:	5a7ed197 	.word	0x5a7ed197
   119d4:	400921fb 	.word	0x400921fb
   119d8:	2004c4bc 	.word	0x2004c4bc
   119dc:	2004c4c4 	.word	0x2004c4c4
   119e0:	2004c4c8 	.word	0x2004c4c8

000119e4 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   119e4:	b480      	push	{r7}
   119e6:	b083      	sub	sp, #12
   119e8:	af00      	add	r7, sp, #0
   119ea:	4603      	mov	r3, r0
   119ec:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   119ee:	f24c 53af 	movw	r3, #50607	; 0xc5af
   119f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f6:	781b      	ldrb	r3, [r3, #0]
   119f8:	2b06      	cmp	r3, #6
   119fa:	d81d      	bhi.n	11a38 <parse_ubx+0x54>
    ck_a += c;
   119fc:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a04:	781a      	ldrb	r2, [r3, #0]
   11a06:	79fb      	ldrb	r3, [r7, #7]
   11a08:	4413      	add	r3, r2
   11a0a:	b2da      	uxtb	r2, r3
   11a0c:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a14:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   11a16:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a1e:	781a      	ldrb	r2, [r3, #0]
   11a20:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a28:	781b      	ldrb	r3, [r3, #0]
   11a2a:	4413      	add	r3, r2
   11a2c:	b2da      	uxtb	r2, r3
   11a2e:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a36:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11a38:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a40:	781b      	ldrb	r3, [r3, #0]
   11a42:	2b00      	cmp	r3, #0
   11a44:	d110      	bne.n	11a68 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11a46:	79fb      	ldrb	r3, [r7, #7]
   11a48:	2bb5      	cmp	r3, #181	; 0xb5
   11a4a:	f040 8135 	bne.w	11cb8 <parse_ubx+0x2d4>
      ubx_status++;
   11a4e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a56:	781b      	ldrb	r3, [r3, #0]
   11a58:	3301      	adds	r3, #1
   11a5a:	b2da      	uxtb	r2, r3
   11a5c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a64:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11a66:	e12f      	b.n	11cc8 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11a68:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a70:	781b      	ldrb	r3, [r3, #0]
   11a72:	2b01      	cmp	r3, #1
   11a74:	d11c      	bne.n	11ab0 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11a76:	79fb      	ldrb	r3, [r7, #7]
   11a78:	2b62      	cmp	r3, #98	; 0x62
   11a7a:	d000      	beq.n	11a7e <parse_ubx+0x9a>
      goto error;
   11a7c:	e11d      	b.n	11cba <parse_ubx+0x2d6>
    ck_a = 0;
   11a7e:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a86:	2200      	movs	r2, #0
   11a88:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11a8a:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a92:	2200      	movs	r2, #0
   11a94:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11a96:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a9e:	781b      	ldrb	r3, [r3, #0]
   11aa0:	3301      	adds	r3, #1
   11aa2:	b2da      	uxtb	r2, r3
   11aa4:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aac:	701a      	strb	r2, [r3, #0]
   11aae:	e103      	b.n	11cb8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11ab0:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab8:	781b      	ldrb	r3, [r3, #0]
   11aba:	2b02      	cmp	r3, #2
   11abc:	d127      	bne.n	11b0e <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11abe:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac6:	781b      	ldrb	r3, [r3, #0]
   11ac8:	b2db      	uxtb	r3, r3
   11aca:	2b00      	cmp	r3, #0
   11acc:	d00c      	beq.n	11ae8 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11ace:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ad6:	781b      	ldrb	r3, [r3, #0]
   11ad8:	3301      	adds	r3, #1
   11ada:	b2da      	uxtb	r2, r3
   11adc:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae4:	701a      	strb	r2, [r3, #0]
      goto error;
   11ae6:	e0e8      	b.n	11cba <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11ae8:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   11aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af0:	79fa      	ldrb	r2, [r7, #7]
   11af2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11af4:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11afc:	781b      	ldrb	r3, [r3, #0]
   11afe:	3301      	adds	r3, #1
   11b00:	b2da      	uxtb	r2, r3
   11b02:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b0a:	701a      	strb	r2, [r3, #0]
   11b0c:	e0d4      	b.n	11cb8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11b0e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b16:	781b      	ldrb	r3, [r3, #0]
   11b18:	2b03      	cmp	r3, #3
   11b1a:	d112      	bne.n	11b42 <parse_ubx+0x15e>
  {
    ubx_id = c;
   11b1c:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b24:	79fa      	ldrb	r2, [r7, #7]
   11b26:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b28:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b30:	781b      	ldrb	r3, [r3, #0]
   11b32:	3301      	adds	r3, #1
   11b34:	b2da      	uxtb	r2, r3
   11b36:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b3e:	701a      	strb	r2, [r3, #0]
   11b40:	e0ba      	b.n	11cb8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11b42:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b4a:	781b      	ldrb	r3, [r3, #0]
   11b4c:	2b04      	cmp	r3, #4
   11b4e:	d113      	bne.n	11b78 <parse_ubx+0x194>
  {
    ubx_len = c;
   11b50:	79fb      	ldrb	r3, [r7, #7]
   11b52:	b29a      	uxth	r2, r3
   11b54:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b5c:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11b5e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b66:	781b      	ldrb	r3, [r3, #0]
   11b68:	3301      	adds	r3, #1
   11b6a:	b2da      	uxtb	r2, r3
   11b6c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b74:	701a      	strb	r2, [r3, #0]
   11b76:	e09f      	b.n	11cb8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11b78:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b80:	781b      	ldrb	r3, [r3, #0]
   11b82:	2b05      	cmp	r3, #5
   11b84:	d12b      	bne.n	11bde <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11b86:	79fb      	ldrb	r3, [r7, #7]
   11b88:	021b      	lsls	r3, r3, #8
   11b8a:	b29a      	uxth	r2, r3
   11b8c:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b94:	881b      	ldrh	r3, [r3, #0]
   11b96:	b29b      	uxth	r3, r3
   11b98:	4313      	orrs	r3, r2
   11b9a:	b29b      	uxth	r3, r3
   11b9c:	b29a      	uxth	r2, r3
   11b9e:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ba6:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11ba8:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bb0:	881b      	ldrh	r3, [r3, #0]
   11bb2:	2bff      	cmp	r3, #255	; 0xff
   11bb4:	d900      	bls.n	11bb8 <parse_ubx+0x1d4>
      goto error;
   11bb6:	e080      	b.n	11cba <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11bb8:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc0:	2200      	movs	r2, #0
   11bc2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11bc4:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bcc:	781b      	ldrb	r3, [r3, #0]
   11bce:	3301      	adds	r3, #1
   11bd0:	b2da      	uxtb	r2, r3
   11bd2:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bda:	701a      	strb	r2, [r3, #0]
   11bdc:	e06c      	b.n	11cb8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11bde:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be6:	781b      	ldrb	r3, [r3, #0]
   11be8:	2b06      	cmp	r3, #6
   11bea:	d131      	bne.n	11c50 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11bec:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bf4:	781b      	ldrb	r3, [r3, #0]
   11bf6:	461a      	mov	r2, r3
   11bf8:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c00:	79f9      	ldrb	r1, [r7, #7]
   11c02:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11c04:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c0c:	781b      	ldrb	r3, [r3, #0]
   11c0e:	3301      	adds	r3, #1
   11c10:	b2da      	uxtb	r2, r3
   11c12:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c1a:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11c1c:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c24:	781b      	ldrb	r3, [r3, #0]
   11c26:	461a      	mov	r2, r3
   11c28:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c30:	881b      	ldrh	r3, [r3, #0]
   11c32:	429a      	cmp	r2, r3
   11c34:	d340      	bcc.n	11cb8 <parse_ubx+0x2d4>
      ubx_status++;
   11c36:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c3e:	781b      	ldrb	r3, [r3, #0]
   11c40:	3301      	adds	r3, #1
   11c42:	b2da      	uxtb	r2, r3
   11c44:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c4c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11c4e:	e03b      	b.n	11cc8 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11c50:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c58:	781b      	ldrb	r3, [r3, #0]
   11c5a:	2b07      	cmp	r3, #7
   11c5c:	d115      	bne.n	11c8a <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11c5e:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c66:	781b      	ldrb	r3, [r3, #0]
   11c68:	79fa      	ldrb	r2, [r7, #7]
   11c6a:	429a      	cmp	r2, r3
   11c6c:	d000      	beq.n	11c70 <parse_ubx+0x28c>
      goto error;
   11c6e:	e024      	b.n	11cba <parse_ubx+0x2d6>
    ubx_status++;
   11c70:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c78:	781b      	ldrb	r3, [r3, #0]
   11c7a:	3301      	adds	r3, #1
   11c7c:	b2da      	uxtb	r2, r3
   11c7e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c86:	701a      	strb	r2, [r3, #0]
   11c88:	e016      	b.n	11cb8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11c8a:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c92:	781b      	ldrb	r3, [r3, #0]
   11c94:	2b08      	cmp	r3, #8
   11c96:	d10f      	bne.n	11cb8 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11c98:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ca0:	781b      	ldrb	r3, [r3, #0]
   11ca2:	79fa      	ldrb	r2, [r7, #7]
   11ca4:	429a      	cmp	r2, r3
   11ca6:	d000      	beq.n	11caa <parse_ubx+0x2c6>
      goto error;
   11ca8:	e007      	b.n	11cba <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11caa:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cb2:	2201      	movs	r2, #1
   11cb4:	701a      	strb	r2, [r3, #0]
    goto restart;
   11cb6:	e000      	b.n	11cba <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11cb8:	e006      	b.n	11cc8 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11cba:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cc2:	2200      	movs	r2, #0
   11cc4:	701a      	strb	r2, [r3, #0]
  return;
   11cc6:	bf00      	nop
}
   11cc8:	370c      	adds	r7, #12
   11cca:	46bd      	mov	sp, r7
   11ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
   11cd0:	4770      	bx	lr
   11cd2:	bf00      	nop

00011cd4 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11cd4:	b580      	push	{r7, lr}
   11cd6:	b082      	sub	sp, #8
   11cd8:	af00      	add	r7, sp, #0
   11cda:	f242 039c 	movw	r3, #8348	; 0x209c
   11cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ce2:	781b      	ldrb	r3, [r3, #0]
   11ce4:	71fb      	strb	r3, [r7, #7]
   11ce6:	79fb      	ldrb	r3, [r7, #7]
   11ce8:	4618      	mov	r0, r3
   11cea:	f7ff fe7b 	bl	119e4 <parse_ubx>
   11cee:	3708      	adds	r7, #8
   11cf0:	46bd      	mov	sp, r7
   11cf2:	bd80      	pop	{r7, pc}
   11cf4:	f3af 8000 	nop.w

00011cf8 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11cf8:	b580      	push	{r7, lr}
   11cfa:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11cfc:	f240 5348 	movw	r3, #1352	; 0x548
   11d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d04:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11d08:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11d0c:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11d0e:	2001      	movs	r0, #1
   11d10:	f24c 51bc 	movw	r1, #50620	; 0xc5bc
   11d14:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11d18:	f7ff fc82 	bl	11620 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11d1c:	2002      	movs	r0, #2
   11d1e:	f24c 6100 	movw	r1, #50688	; 0xc600
   11d22:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11d26:	f7ff fc7b 	bl	11620 <adc_buf_channel>
}
   11d2a:	bd80      	pop	{r7, pc}

00011d2c <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11d2c:	b480      	push	{r7}
   11d2e:	b083      	sub	sp, #12
   11d30:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11d32:	f24c 53bc 	movw	r3, #50620	; 0xc5bc
   11d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d3a:	881b      	ldrh	r3, [r3, #0]
   11d3c:	095b      	lsrs	r3, r3, #5
   11d3e:	b29b      	uxth	r3, r3
   11d40:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11d42:	f24c 6300 	movw	r3, #50688	; 0xc600
   11d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d4a:	881b      	ldrh	r3, [r3, #0]
   11d4c:	095b      	lsrs	r3, r3, #5
   11d4e:	b29b      	uxth	r3, r3
   11d50:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11d52:	88fb      	ldrh	r3, [r7, #6]
   11d54:	425b      	negs	r3, r3
   11d56:	b29a      	uxth	r2, r3
   11d58:	88bb      	ldrh	r3, [r7, #4]
   11d5a:	1ad3      	subs	r3, r2, r3
   11d5c:	b29a      	uxth	r2, r3
   11d5e:	f240 5342 	movw	r3, #1346	; 0x542
   11d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d66:	881b      	ldrh	r3, [r3, #0]
   11d68:	b29b      	uxth	r3, r3
   11d6a:	1ad3      	subs	r3, r2, r3
   11d6c:	b29b      	uxth	r3, r3
   11d6e:	b29a      	uxth	r2, r3
   11d70:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   11d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d78:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11d7a:	88ba      	ldrh	r2, [r7, #4]
   11d7c:	88fb      	ldrh	r3, [r7, #6]
   11d7e:	1ad3      	subs	r3, r2, r3
   11d80:	b29a      	uxth	r2, r3
   11d82:	f240 5344 	movw	r3, #1348	; 0x544
   11d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d8a:	881b      	ldrh	r3, [r3, #0]
   11d8c:	b29b      	uxth	r3, r3
   11d8e:	1ad3      	subs	r3, r2, r3
   11d90:	b29b      	uxth	r3, r3
   11d92:	b29a      	uxth	r2, r3
   11d94:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d9c:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11d9e:	370c      	adds	r7, #12
   11da0:	46bd      	mov	sp, r7
   11da2:	f85d 7b04 	ldr.w	r7, [sp], #4
   11da6:	4770      	bx	lr

00011da8 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11da8:	b580      	push	{r7, lr}
   11daa:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11dac:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11db4:	881b      	ldrh	r3, [r3, #0]
   11db6:	b29b      	uxth	r3, r3
   11db8:	425b      	negs	r3, r3
   11dba:	b29b      	uxth	r3, r3
   11dbc:	b29a      	uxth	r2, r3
   11dbe:	f240 5340 	movw	r3, #1344	; 0x540
   11dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dc6:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11dc8:	f240 5340 	movw	r3, #1344	; 0x540
   11dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dd0:	881b      	ldrh	r3, [r3, #0]
   11dd2:	b21b      	sxth	r3, r3
   11dd4:	4618      	mov	r0, r3
   11dd6:	f005 fe95 	bl	17b04 <__aeabi_i2d>
   11dda:	4602      	mov	r2, r0
   11ddc:	460b      	mov	r3, r1
   11dde:	f04f 0000 	mov.w	r0, #0
   11de2:	f04f 0100 	mov.w	r1, #0
   11de6:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11dea:	f006 f81b 	bl	17e24 <__aeabi_ddiv>
   11dee:	4602      	mov	r2, r0
   11df0:	460b      	mov	r3, r1
   11df2:	4610      	mov	r0, r2
   11df4:	4619      	mov	r1, r3
   11df6:	f006 f9cd 	bl	18194 <__aeabi_d2f>
   11dfa:	4602      	mov	r2, r0
   11dfc:	f240 5348 	movw	r3, #1352	; 0x548
   11e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e04:	601a      	str	r2, [r3, #0]
}
   11e06:	bd80      	pop	{r7, pc}

00011e08 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11e08:	b590      	push	{r4, r7, lr}
   11e0a:	b083      	sub	sp, #12
   11e0c:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11e0e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e16:	681a      	ldr	r2, [r3, #0]
   11e18:	f24c 6344 	movw	r3, #50756	; 0xc644
   11e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e20:	681b      	ldr	r3, [r3, #0]
   11e22:	4610      	mov	r0, r2
   11e24:	4619      	mov	r1, r3
   11e26:	f006 fa09 	bl	1823c <__aeabi_fsub>
   11e2a:	4603      	mov	r3, r0
   11e2c:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11e2e:	f240 534c 	movw	r3, #1356	; 0x54c
   11e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e36:	681b      	ldr	r3, [r3, #0]
   11e38:	4618      	mov	r0, r3
   11e3a:	6879      	ldr	r1, [r7, #4]
   11e3c:	f006 fb08 	bl	18450 <__aeabi_fmul>
   11e40:	4603      	mov	r3, r0
   11e42:	4618      	mov	r0, r3
   11e44:	f04f 0100 	mov.w	r1, #0
   11e48:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11e4c:	f006 fc9e 	bl	1878c <__aeabi_fcmplt>
   11e50:	4603      	mov	r3, r0
   11e52:	2b00      	cmp	r3, #0
   11e54:	d002      	beq.n	11e5c <roll_pitch_pid_run+0x54>
   11e56:	f64d 2280 	movw	r2, #55936	; 0xda80
   11e5a:	e026      	b.n	11eaa <roll_pitch_pid_run+0xa2>
   11e5c:	f240 534c 	movw	r3, #1356	; 0x54c
   11e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e64:	681b      	ldr	r3, [r3, #0]
   11e66:	4618      	mov	r0, r3
   11e68:	6879      	ldr	r1, [r7, #4]
   11e6a:	f006 faf1 	bl	18450 <__aeabi_fmul>
   11e6e:	4603      	mov	r3, r0
   11e70:	4618      	mov	r0, r3
   11e72:	f04f 0100 	mov.w	r1, #0
   11e76:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e7a:	f006 fca5 	bl	187c8 <__aeabi_fcmpgt>
   11e7e:	4603      	mov	r3, r0
   11e80:	2b00      	cmp	r3, #0
   11e82:	d002      	beq.n	11e8a <roll_pitch_pid_run+0x82>
   11e84:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11e88:	e00e      	b.n	11ea8 <roll_pitch_pid_run+0xa0>
   11e8a:	f240 534c 	movw	r3, #1356	; 0x54c
   11e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e92:	681b      	ldr	r3, [r3, #0]
   11e94:	4618      	mov	r0, r3
   11e96:	6879      	ldr	r1, [r7, #4]
   11e98:	f006 fada 	bl	18450 <__aeabi_fmul>
   11e9c:	4603      	mov	r3, r0
   11e9e:	4618      	mov	r0, r3
   11ea0:	f006 fc9c 	bl	187dc <__aeabi_f2iz>
   11ea4:	4603      	mov	r3, r0
   11ea6:	b29b      	uxth	r3, r3
   11ea8:	b29a      	uxth	r2, r3
   11eaa:	f24c 634e 	movw	r3, #50766	; 0xc64e
   11eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eb2:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11eb4:	f24c 6354 	movw	r3, #50772	; 0xc654
   11eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ebc:	681b      	ldr	r3, [r3, #0]
   11ebe:	4618      	mov	r0, r3
   11ec0:	f04f 0100 	mov.w	r1, #0
   11ec4:	f006 fc62 	bl	1878c <__aeabi_fcmplt>
   11ec8:	4603      	mov	r3, r0
   11eca:	2b00      	cmp	r3, #0
   11ecc:	d006      	beq.n	11edc <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11ece:	f24c 6354 	movw	r3, #50772	; 0xc654
   11ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ed6:	f04f 0200 	mov.w	r2, #0
   11eda:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11edc:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   11ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ee4:	681a      	ldr	r2, [r3, #0]
   11ee6:	f24c 6348 	movw	r3, #50760	; 0xc648
   11eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eee:	681b      	ldr	r3, [r3, #0]
   11ef0:	4610      	mov	r0, r2
   11ef2:	4619      	mov	r1, r3
   11ef4:	f006 f9a2 	bl	1823c <__aeabi_fsub>
   11ef8:	4603      	mov	r3, r0
   11efa:	461c      	mov	r4, r3
   11efc:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f04:	681b      	ldr	r3, [r3, #0]
   11f06:	4618      	mov	r0, r3
   11f08:	f04f 0100 	mov.w	r1, #0
   11f0c:	f006 fc3e 	bl	1878c <__aeabi_fcmplt>
   11f10:	4603      	mov	r3, r0
   11f12:	2b00      	cmp	r3, #0
   11f14:	d007      	beq.n	11f26 <roll_pitch_pid_run+0x11e>
   11f16:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f1e:	681b      	ldr	r3, [r3, #0]
   11f20:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11f24:	e004      	b.n	11f30 <roll_pitch_pid_run+0x128>
   11f26:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f2e:	681a      	ldr	r2, [r3, #0]
   11f30:	f24c 6354 	movw	r3, #50772	; 0xc654
   11f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f38:	681b      	ldr	r3, [r3, #0]
   11f3a:	4610      	mov	r0, r2
   11f3c:	4619      	mov	r1, r3
   11f3e:	f006 fa87 	bl	18450 <__aeabi_fmul>
   11f42:	4603      	mov	r3, r0
   11f44:	4620      	mov	r0, r4
   11f46:	4619      	mov	r1, r3
   11f48:	f006 f978 	bl	1823c <__aeabi_fsub>
   11f4c:	4603      	mov	r3, r0
   11f4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11f52:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11f54:	f240 5350 	movw	r3, #1360	; 0x550
   11f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f5c:	681b      	ldr	r3, [r3, #0]
   11f5e:	4618      	mov	r0, r3
   11f60:	6879      	ldr	r1, [r7, #4]
   11f62:	f006 fa75 	bl	18450 <__aeabi_fmul>
   11f66:	4603      	mov	r3, r0
   11f68:	4618      	mov	r0, r3
   11f6a:	f04f 0100 	mov.w	r1, #0
   11f6e:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11f72:	f006 fc0b 	bl	1878c <__aeabi_fcmplt>
   11f76:	4603      	mov	r3, r0
   11f78:	2b00      	cmp	r3, #0
   11f7a:	d002      	beq.n	11f82 <roll_pitch_pid_run+0x17a>
   11f7c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11f80:	e026      	b.n	11fd0 <roll_pitch_pid_run+0x1c8>
   11f82:	f240 5350 	movw	r3, #1360	; 0x550
   11f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f8a:	681b      	ldr	r3, [r3, #0]
   11f8c:	4618      	mov	r0, r3
   11f8e:	6879      	ldr	r1, [r7, #4]
   11f90:	f006 fa5e 	bl	18450 <__aeabi_fmul>
   11f94:	4603      	mov	r3, r0
   11f96:	4618      	mov	r0, r3
   11f98:	f04f 0100 	mov.w	r1, #0
   11f9c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11fa0:	f006 fc12 	bl	187c8 <__aeabi_fcmpgt>
   11fa4:	4603      	mov	r3, r0
   11fa6:	2b00      	cmp	r3, #0
   11fa8:	d002      	beq.n	11fb0 <roll_pitch_pid_run+0x1a8>
   11faa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11fae:	e00e      	b.n	11fce <roll_pitch_pid_run+0x1c6>
   11fb0:	f240 5350 	movw	r3, #1360	; 0x550
   11fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fb8:	681b      	ldr	r3, [r3, #0]
   11fba:	4618      	mov	r0, r3
   11fbc:	6879      	ldr	r1, [r7, #4]
   11fbe:	f006 fa47 	bl	18450 <__aeabi_fmul>
   11fc2:	4603      	mov	r3, r0
   11fc4:	4618      	mov	r0, r3
   11fc6:	f006 fc09 	bl	187dc <__aeabi_f2iz>
   11fca:	4603      	mov	r3, r0
   11fcc:	b29b      	uxth	r3, r3
   11fce:	b29a      	uxth	r2, r3
   11fd0:	f24c 6350 	movw	r3, #50768	; 0xc650
   11fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fd8:	801a      	strh	r2, [r3, #0]
}
   11fda:	370c      	adds	r7, #12
   11fdc:	46bd      	mov	sp, r7
   11fde:	bd90      	pop	{r4, r7, pc}

00011fe0 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11fe0:	b580      	push	{r7, lr}
   11fe2:	b082      	sub	sp, #8
   11fe4:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11fe6:	f64c 1308 	movw	r3, #51464	; 0xc908
   11fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fee:	681a      	ldr	r2, [r3, #0]
   11ff0:	f24c 635c 	movw	r3, #50780	; 0xc65c
   11ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ff8:	681b      	ldr	r3, [r3, #0]
   11ffa:	4610      	mov	r0, r2
   11ffc:	4619      	mov	r1, r3
   11ffe:	f006 f91d 	bl	1823c <__aeabi_fsub>
   12002:	4603      	mov	r3, r0
   12004:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   12006:	e013      	b.n	12030 <course_pid_run+0x50>
   12008:	6878      	ldr	r0, [r7, #4]
   1200a:	f005 fd8d 	bl	17b28 <__aeabi_f2d>
   1200e:	4602      	mov	r2, r0
   12010:	460b      	mov	r3, r1
   12012:	4610      	mov	r0, r2
   12014:	4619      	mov	r1, r3
   12016:	a348      	add	r3, pc, #288	; (adr r3, 12138 <course_pid_run+0x158>)
   12018:	e9d3 2300 	ldrd	r2, r3, [r3]
   1201c:	f005 fc24 	bl	17868 <__aeabi_dsub>
   12020:	4602      	mov	r2, r0
   12022:	460b      	mov	r3, r1
   12024:	4610      	mov	r0, r2
   12026:	4619      	mov	r1, r3
   12028:	f006 f8b4 	bl	18194 <__aeabi_d2f>
   1202c:	4603      	mov	r3, r0
   1202e:	607b      	str	r3, [r7, #4]
   12030:	6878      	ldr	r0, [r7, #4]
   12032:	f005 fd79 	bl	17b28 <__aeabi_f2d>
   12036:	4602      	mov	r2, r0
   12038:	460b      	mov	r3, r1
   1203a:	4610      	mov	r0, r2
   1203c:	4619      	mov	r1, r3
   1203e:	a340      	add	r3, pc, #256	; (adr r3, 12140 <course_pid_run+0x160>)
   12040:	e9d3 2300 	ldrd	r2, r3, [r3]
   12044:	f006 f854 	bl	180f0 <__aeabi_dcmpgt>
   12048:	4603      	mov	r3, r0
   1204a:	2b00      	cmp	r3, #0
   1204c:	d1dc      	bne.n	12008 <course_pid_run+0x28>
   1204e:	e013      	b.n	12078 <course_pid_run+0x98>
   12050:	6878      	ldr	r0, [r7, #4]
   12052:	f005 fd69 	bl	17b28 <__aeabi_f2d>
   12056:	4602      	mov	r2, r0
   12058:	460b      	mov	r3, r1
   1205a:	4610      	mov	r0, r2
   1205c:	4619      	mov	r1, r3
   1205e:	a336      	add	r3, pc, #216	; (adr r3, 12138 <course_pid_run+0x158>)
   12060:	e9d3 2300 	ldrd	r2, r3, [r3]
   12064:	f005 fc02 	bl	1786c <__adddf3>
   12068:	4602      	mov	r2, r0
   1206a:	460b      	mov	r3, r1
   1206c:	4610      	mov	r0, r2
   1206e:	4619      	mov	r1, r3
   12070:	f006 f890 	bl	18194 <__aeabi_d2f>
   12074:	4603      	mov	r3, r0
   12076:	607b      	str	r3, [r7, #4]
   12078:	6878      	ldr	r0, [r7, #4]
   1207a:	f005 fd55 	bl	17b28 <__aeabi_f2d>
   1207e:	4602      	mov	r2, r0
   12080:	460b      	mov	r3, r1
   12082:	4610      	mov	r0, r2
   12084:	4619      	mov	r1, r3
   12086:	a330      	add	r3, pc, #192	; (adr r3, 12148 <course_pid_run+0x168>)
   12088:	e9d3 2300 	ldrd	r2, r3, [r3]
   1208c:	f006 f812 	bl	180b4 <__aeabi_dcmplt>
   12090:	4603      	mov	r3, r0
   12092:	2b00      	cmp	r3, #0
   12094:	d1dc      	bne.n	12050 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   12096:	f240 5358 	movw	r3, #1368	; 0x558
   1209a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1209e:	681b      	ldr	r3, [r3, #0]
   120a0:	4618      	mov	r0, r3
   120a2:	6879      	ldr	r1, [r7, #4]
   120a4:	f006 f9d4 	bl	18450 <__aeabi_fmul>
   120a8:	4603      	mov	r3, r0
   120aa:	461a      	mov	r2, r3
   120ac:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   120b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120b4:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   120b6:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   120ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120be:	681a      	ldr	r2, [r3, #0]
   120c0:	f240 535c 	movw	r3, #1372	; 0x55c
   120c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120c8:	681b      	ldr	r3, [r3, #0]
   120ca:	4610      	mov	r0, r2
   120cc:	4619      	mov	r1, r3
   120ce:	f006 fb7b 	bl	187c8 <__aeabi_fcmpgt>
   120d2:	4603      	mov	r3, r0
   120d4:	2b00      	cmp	r3, #0
   120d6:	d00a      	beq.n	120ee <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   120d8:	f240 535c 	movw	r3, #1372	; 0x55c
   120dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120e0:	681a      	ldr	r2, [r3, #0]
   120e2:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   120e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120ea:	601a      	str	r2, [r3, #0]
   120ec:	e01e      	b.n	1212c <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   120ee:	f240 535c 	movw	r3, #1372	; 0x55c
   120f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120f6:	681b      	ldr	r3, [r3, #0]
   120f8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   120fc:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12100:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12104:	681b      	ldr	r3, [r3, #0]
   12106:	4610      	mov	r0, r2
   12108:	4619      	mov	r1, r3
   1210a:	f006 fb5d 	bl	187c8 <__aeabi_fcmpgt>
   1210e:	4603      	mov	r3, r0
   12110:	2b00      	cmp	r3, #0
   12112:	d00b      	beq.n	1212c <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   12114:	f240 535c 	movw	r3, #1372	; 0x55c
   12118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1211c:	681b      	ldr	r3, [r3, #0]
   1211e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12122:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12126:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1212a:	601a      	str	r2, [r3, #0]
}
   1212c:	3708      	adds	r7, #8
   1212e:	46bd      	mov	sp, r7
   12130:	bd80      	pop	{r7, pc}
   12132:	bf00      	nop
   12134:	f3af 8000 	nop.w
   12138:	54442d18 	.word	0x54442d18
   1213c:	401921fb 	.word	0x401921fb
   12140:	54442d18 	.word	0x54442d18
   12144:	400921fb 	.word	0x400921fb
   12148:	54442d18 	.word	0x54442d18
   1214c:	c00921fb 	.word	0xc00921fb

00012150 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   12150:	b5b0      	push	{r4, r5, r7, lr}
   12152:	b082      	sub	sp, #8
   12154:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   12156:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1215a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1215e:	681a      	ldr	r2, [r3, #0]
   12160:	f24c 6360 	movw	r3, #50784	; 0xc660
   12164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12168:	681b      	ldr	r3, [r3, #0]
   1216a:	4610      	mov	r0, r2
   1216c:	4619      	mov	r1, r3
   1216e:	f006 f865 	bl	1823c <__aeabi_fsub>
   12172:	4603      	mov	r3, r0
   12174:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   12176:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1217a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1217e:	781b      	ldrb	r3, [r3, #0]
   12180:	2b00      	cmp	r3, #0
   12182:	f000 80a8 	beq.w	122d6 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   12186:	f24c 6398 	movw	r3, #50840	; 0xc698
   1218a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1218e:	881b      	ldrh	r3, [r3, #0]
   12190:	b29a      	uxth	r2, r3
   12192:	f24c 634c 	movw	r3, #50764	; 0xc64c
   12196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1219a:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   1219c:	f240 5364 	movw	r3, #1380	; 0x564
   121a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a4:	681a      	ldr	r2, [r3, #0]
   121a6:	f24c 636c 	movw	r3, #50796	; 0xc66c
   121aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ae:	681b      	ldr	r3, [r3, #0]
   121b0:	4610      	mov	r0, r2
   121b2:	4619      	mov	r1, r3
   121b4:	f006 f94c 	bl	18450 <__aeabi_fmul>
   121b8:	4603      	mov	r3, r0
   121ba:	4618      	mov	r0, r3
   121bc:	6879      	ldr	r1, [r7, #4]
   121be:	f006 f83f 	bl	18240 <__addsf3>
   121c2:	4603      	mov	r3, r0
   121c4:	461a      	mov	r2, r3
   121c6:	f240 5360 	movw	r3, #1376	; 0x560
   121ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ce:	681b      	ldr	r3, [r3, #0]
   121d0:	4610      	mov	r0, r2
   121d2:	4619      	mov	r1, r3
   121d4:	f006 f93c 	bl	18450 <__aeabi_fmul>
   121d8:	4603      	mov	r3, r0
   121da:	461a      	mov	r2, r3
   121dc:	f24c 6348 	movw	r3, #50760	; 0xc648
   121e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121e4:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   121e6:	f24c 6348 	movw	r3, #50760	; 0xc648
   121ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ee:	681a      	ldr	r2, [r3, #0]
   121f0:	f240 5368 	movw	r3, #1384	; 0x568
   121f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121f8:	681b      	ldr	r3, [r3, #0]
   121fa:	4610      	mov	r0, r2
   121fc:	4619      	mov	r1, r3
   121fe:	f006 fae3 	bl	187c8 <__aeabi_fcmpgt>
   12202:	4603      	mov	r3, r0
   12204:	2b00      	cmp	r3, #0
   12206:	d009      	beq.n	1221c <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   12208:	f240 5368 	movw	r3, #1384	; 0x568
   1220c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12210:	681a      	ldr	r2, [r3, #0]
   12212:	f24c 6348 	movw	r3, #50760	; 0xc648
   12216:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1221a:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   1221c:	f24c 6348 	movw	r3, #50760	; 0xc648
   12220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12224:	681a      	ldr	r2, [r3, #0]
   12226:	f240 536c 	movw	r3, #1388	; 0x56c
   1222a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1222e:	681b      	ldr	r3, [r3, #0]
   12230:	4610      	mov	r0, r2
   12232:	4619      	mov	r1, r3
   12234:	f006 faaa 	bl	1878c <__aeabi_fcmplt>
   12238:	4603      	mov	r3, r0
   1223a:	2b00      	cmp	r3, #0
   1223c:	d009      	beq.n	12252 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   1223e:	f240 536c 	movw	r3, #1388	; 0x56c
   12242:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12246:	681a      	ldr	r2, [r3, #0]
   12248:	f24c 6348 	movw	r3, #50760	; 0xc648
   1224c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12250:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   12252:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1225a:	681b      	ldr	r3, [r3, #0]
   1225c:	4618      	mov	r0, r3
   1225e:	6879      	ldr	r1, [r7, #4]
   12260:	f005 ffee 	bl	18240 <__addsf3>
   12264:	4603      	mov	r3, r0
   12266:	461a      	mov	r2, r3
   12268:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1226c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12270:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   12272:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1227a:	681b      	ldr	r3, [r3, #0]
   1227c:	4618      	mov	r0, r3
   1227e:	f04f 0100 	mov.w	r1, #0
   12282:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12286:	f006 fa9f 	bl	187c8 <__aeabi_fcmpgt>
   1228a:	4603      	mov	r3, r0
   1228c:	2b00      	cmp	r3, #0
   1228e:	d008      	beq.n	122a2 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12290:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12294:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12298:	f04f 0200 	mov.w	r2, #0
   1229c:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   122a0:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   122a2:	f24c 636c 	movw	r3, #50796	; 0xc66c
   122a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122aa:	681b      	ldr	r3, [r3, #0]
   122ac:	4618      	mov	r0, r3
   122ae:	f04f 0100 	mov.w	r1, #0
   122b2:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   122b6:	f006 fa69 	bl	1878c <__aeabi_fcmplt>
   122ba:	4603      	mov	r3, r0
   122bc:	2b00      	cmp	r3, #0
   122be:	d100      	bne.n	122c2 <climb_pid_run+0x172>
   122c0:	e109      	b.n	124d6 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   122c2:	f24c 636c 	movw	r3, #50796	; 0xc66c
   122c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122ca:	f04f 0200 	mov.w	r2, #0
   122ce:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   122d2:	601a      	str	r2, [r3, #0]
   122d4:	e0ff      	b.n	124d6 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   122d6:	f24c 6360 	movw	r3, #50784	; 0xc660
   122da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122de:	681b      	ldr	r3, [r3, #0]
   122e0:	4618      	mov	r0, r3
   122e2:	f04f 0100 	mov.w	r1, #0
   122e6:	f006 fa6f 	bl	187c8 <__aeabi_fcmpgt>
   122ea:	4603      	mov	r3, r0
   122ec:	2b00      	cmp	r3, #0
   122ee:	d010      	beq.n	12312 <climb_pid_run+0x1c2>
   122f0:	f24c 6360 	movw	r3, #50784	; 0xc660
   122f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122f8:	681a      	ldr	r2, [r3, #0]
   122fa:	f240 5354 	movw	r3, #1364	; 0x554
   122fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12302:	681b      	ldr	r3, [r3, #0]
   12304:	4610      	mov	r0, r2
   12306:	4619      	mov	r1, r3
   12308:	f006 f8a2 	bl	18450 <__aeabi_fmul>
   1230c:	4603      	mov	r3, r0
   1230e:	461a      	mov	r2, r3
   12310:	e001      	b.n	12316 <climb_pid_run+0x1c6>
   12312:	f04f 0200 	mov.w	r2, #0
   12316:	f24c 6358 	movw	r3, #50776	; 0xc658
   1231a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1231e:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   12320:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   12324:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   12328:	f24c 6368 	movw	r3, #50792	; 0xc668
   1232c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12330:	681b      	ldr	r3, [r3, #0]
   12332:	4610      	mov	r0, r2
   12334:	4619      	mov	r1, r3
   12336:	f006 f88b 	bl	18450 <__aeabi_fmul>
   1233a:	4603      	mov	r3, r0
   1233c:	4618      	mov	r0, r3
   1233e:	6879      	ldr	r1, [r7, #4]
   12340:	f005 ff7e 	bl	18240 <__addsf3>
   12344:	4603      	mov	r3, r0
   12346:	461a      	mov	r2, r3
   12348:	f24c 238f 	movw	r3, #49807	; 0xc28f
   1234c:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12350:	4610      	mov	r0, r2
   12352:	4619      	mov	r1, r3
   12354:	f006 f87c 	bl	18450 <__aeabi_fmul>
   12358:	4603      	mov	r3, r0
   1235a:	4618      	mov	r0, r3
   1235c:	f005 fbe4 	bl	17b28 <__aeabi_f2d>
   12360:	4602      	mov	r2, r0
   12362:	460b      	mov	r3, r1
   12364:	4610      	mov	r0, r2
   12366:	4619      	mov	r1, r3
   12368:	a35d      	add	r3, pc, #372	; (adr r3, 124e0 <climb_pid_run+0x390>)
   1236a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1236e:	f005 fa7d 	bl	1786c <__adddf3>
   12372:	4602      	mov	r2, r0
   12374:	460b      	mov	r3, r1
   12376:	4614      	mov	r4, r2
   12378:	461d      	mov	r5, r3
   1237a:	f24c 6360 	movw	r3, #50784	; 0xc660
   1237e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12382:	681b      	ldr	r3, [r3, #0]
   12384:	4618      	mov	r0, r3
   12386:	f005 fbcf 	bl	17b28 <__aeabi_f2d>
   1238a:	4602      	mov	r2, r0
   1238c:	460b      	mov	r3, r1
   1238e:	4610      	mov	r0, r2
   12390:	4619      	mov	r1, r3
   12392:	a355      	add	r3, pc, #340	; (adr r3, 124e8 <climb_pid_run+0x398>)
   12394:	e9d3 2300 	ldrd	r2, r3, [r3]
   12398:	f005 fc1a 	bl	17bd0 <__aeabi_dmul>
   1239c:	4602      	mov	r2, r0
   1239e:	460b      	mov	r3, r1
   123a0:	4620      	mov	r0, r4
   123a2:	4629      	mov	r1, r5
   123a4:	f005 fa62 	bl	1786c <__adddf3>
   123a8:	4602      	mov	r2, r0
   123aa:	460b      	mov	r3, r1
   123ac:	4610      	mov	r0, r2
   123ae:	4619      	mov	r1, r3
   123b0:	f005 fef0 	bl	18194 <__aeabi_d2f>
   123b4:	4603      	mov	r3, r0
   123b6:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   123b8:	f24c 6368 	movw	r3, #50792	; 0xc668
   123bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123c0:	681b      	ldr	r3, [r3, #0]
   123c2:	4618      	mov	r0, r3
   123c4:	6879      	ldr	r1, [r7, #4]
   123c6:	f005 ff3b 	bl	18240 <__addsf3>
   123ca:	4603      	mov	r3, r0
   123cc:	461a      	mov	r2, r3
   123ce:	f24c 6368 	movw	r3, #50792	; 0xc668
   123d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123d6:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   123d8:	f24c 6368 	movw	r3, #50792	; 0xc668
   123dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123e0:	681b      	ldr	r3, [r3, #0]
   123e2:	4618      	mov	r0, r3
   123e4:	f04f 0100 	mov.w	r1, #0
   123e8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   123ec:	f006 f9ec 	bl	187c8 <__aeabi_fcmpgt>
   123f0:	4603      	mov	r3, r0
   123f2:	2b00      	cmp	r3, #0
   123f4:	d008      	beq.n	12408 <climb_pid_run+0x2b8>
   123f6:	f24c 6368 	movw	r3, #50792	; 0xc668
   123fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123fe:	f04f 0200 	mov.w	r2, #0
   12402:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12406:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12408:	f24c 6368 	movw	r3, #50792	; 0xc668
   1240c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12410:	681b      	ldr	r3, [r3, #0]
   12412:	4618      	mov	r0, r3
   12414:	f04f 0100 	mov.w	r1, #0
   12418:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1241c:	f006 f9b6 	bl	1878c <__aeabi_fcmplt>
   12420:	4603      	mov	r3, r0
   12422:	2b00      	cmp	r3, #0
   12424:	d008      	beq.n	12438 <climb_pid_run+0x2e8>
   12426:	f24c 6368 	movw	r3, #50792	; 0xc668
   1242a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1242e:	f04f 0200 	mov.w	r2, #0
   12432:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   12436:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   12438:	6838      	ldr	r0, [r7, #0]
   1243a:	f04f 0100 	mov.w	r1, #0
   1243e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12442:	f006 f805 	bl	18450 <__aeabi_fmul>
   12446:	4603      	mov	r3, r0
   12448:	4618      	mov	r0, r3
   1244a:	f04f 0100 	mov.w	r1, #0
   1244e:	f006 f99d 	bl	1878c <__aeabi_fcmplt>
   12452:	4603      	mov	r3, r0
   12454:	2b00      	cmp	r3, #0
   12456:	d001      	beq.n	1245c <climb_pid_run+0x30c>
   12458:	2200      	movs	r2, #0
   1245a:	e022      	b.n	124a2 <climb_pid_run+0x352>
   1245c:	6838      	ldr	r0, [r7, #0]
   1245e:	f04f 0100 	mov.w	r1, #0
   12462:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12466:	f005 fff3 	bl	18450 <__aeabi_fmul>
   1246a:	4603      	mov	r3, r0
   1246c:	4618      	mov	r0, r3
   1246e:	f04f 0100 	mov.w	r1, #0
   12472:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12476:	f006 f9a7 	bl	187c8 <__aeabi_fcmpgt>
   1247a:	4603      	mov	r3, r0
   1247c:	2b00      	cmp	r3, #0
   1247e:	d002      	beq.n	12486 <climb_pid_run+0x336>
   12480:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12484:	e00c      	b.n	124a0 <climb_pid_run+0x350>
   12486:	6838      	ldr	r0, [r7, #0]
   12488:	f04f 0100 	mov.w	r1, #0
   1248c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12490:	f005 ffde 	bl	18450 <__aeabi_fmul>
   12494:	4603      	mov	r3, r0
   12496:	4618      	mov	r0, r3
   12498:	f006 f9a0 	bl	187dc <__aeabi_f2iz>
   1249c:	4603      	mov	r3, r0
   1249e:	b29b      	uxth	r3, r3
   124a0:	b29a      	uxth	r2, r3
   124a2:	f24c 634c 	movw	r3, #50764	; 0xc64c
   124a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124aa:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   124ac:	f24c 639c 	movw	r3, #50844	; 0xc69c
   124b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124b4:	681a      	ldr	r2, [r3, #0]
   124b6:	f24c 6358 	movw	r3, #50776	; 0xc658
   124ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124be:	681b      	ldr	r3, [r3, #0]
   124c0:	4610      	mov	r0, r2
   124c2:	4619      	mov	r1, r3
   124c4:	f005 febc 	bl	18240 <__addsf3>
   124c8:	4603      	mov	r3, r0
   124ca:	461a      	mov	r2, r3
   124cc:	f24c 6348 	movw	r3, #50760	; 0xc648
   124d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124d4:	601a      	str	r2, [r3, #0]
  }
}
   124d6:	3708      	adds	r7, #8
   124d8:	46bd      	mov	sp, r7
   124da:	bdb0      	pop	{r4, r5, r7, pc}
   124dc:	f3af 8000 	nop.w
   124e0:	3d70a3d7 	.word	0x3d70a3d7
   124e4:	3fd3d70a 	.word	0x3fd3d70a
   124e8:	9999999a 	.word	0x9999999a
   124ec:	3fc99999 	.word	0x3fc99999

000124f0 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   124f0:	b580      	push	{r7, lr}
   124f2:	b082      	sub	sp, #8
   124f4:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   124f6:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   124fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124fe:	681a      	ldr	r2, [r3, #0]
   12500:	f240 5374 	movw	r3, #1396	; 0x574
   12504:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12508:	681b      	ldr	r3, [r3, #0]
   1250a:	4610      	mov	r0, r2
   1250c:	4619      	mov	r1, r3
   1250e:	f005 fe95 	bl	1823c <__aeabi_fsub>
   12512:	4603      	mov	r3, r0
   12514:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   12516:	f240 5370 	movw	r3, #1392	; 0x570
   1251a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1251e:	681b      	ldr	r3, [r3, #0]
   12520:	4618      	mov	r0, r3
   12522:	6879      	ldr	r1, [r7, #4]
   12524:	f005 ff94 	bl	18450 <__aeabi_fmul>
   12528:	4603      	mov	r3, r0
   1252a:	461a      	mov	r2, r3
   1252c:	f24c 6364 	movw	r3, #50788	; 0xc664
   12530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12534:	681b      	ldr	r3, [r3, #0]
   12536:	4610      	mov	r0, r2
   12538:	4619      	mov	r1, r3
   1253a:	f005 fe81 	bl	18240 <__addsf3>
   1253e:	4603      	mov	r3, r0
   12540:	461a      	mov	r2, r3
   12542:	f24c 6360 	movw	r3, #50784	; 0xc660
   12546:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1254a:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   1254c:	f24c 6360 	movw	r3, #50784	; 0xc660
   12550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12554:	681b      	ldr	r3, [r3, #0]
   12556:	4618      	mov	r0, r3
   12558:	f04f 0100 	mov.w	r1, #0
   1255c:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12560:	f006 f914 	bl	1878c <__aeabi_fcmplt>
   12564:	4603      	mov	r3, r0
   12566:	2b00      	cmp	r3, #0
   12568:	d008      	beq.n	1257c <altitude_pid_run+0x8c>
   1256a:	f24c 6360 	movw	r3, #50784	; 0xc660
   1256e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12572:	f04f 0200 	mov.w	r2, #0
   12576:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   1257a:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   1257c:	f24c 6360 	movw	r3, #50784	; 0xc660
   12580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12584:	681b      	ldr	r3, [r3, #0]
   12586:	4618      	mov	r0, r3
   12588:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1258c:	f006 f91c 	bl	187c8 <__aeabi_fcmpgt>
   12590:	4603      	mov	r3, r0
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <altitude_pid_run+0xb4>
   12596:	f24c 6360 	movw	r3, #50784	; 0xc660
   1259a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1259e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   125a2:	601a      	str	r2, [r3, #0]
}
   125a4:	3708      	adds	r7, #8
   125a6:	46bd      	mov	sp, r7
   125a8:	bd80      	pop	{r7, pc}
   125aa:	bf00      	nop
   125ac:	f3af 8000 	nop.w

000125b0 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   125b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   125b2:	b08b      	sub	sp, #44	; 0x2c
   125b4:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   125b6:	f24c 6371 	movw	r3, #50801	; 0xc671
   125ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125be:	781b      	ldrb	r3, [r3, #0]
   125c0:	2b00      	cmp	r3, #0
   125c2:	f040 8169 	bne.w	12898 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   125c6:	f24c 6370 	movw	r3, #50800	; 0xc670
   125ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ce:	781b      	ldrb	r3, [r3, #0]
   125d0:	2b00      	cmp	r3, #0
   125d2:	d13c      	bne.n	1264e <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   125d4:	f24c 6370 	movw	r3, #50800	; 0xc670
   125d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125dc:	2200      	movs	r2, #0
   125de:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   125e0:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   125e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125e8:	881b      	ldrh	r3, [r3, #0]
   125ea:	2b00      	cmp	r3, #0
   125ec:	d000      	beq.n	125f0 <auto_nav+0x40>
   125ee:	e03d      	b.n	1266c <auto_nav+0xbc>
	else NextStage(); 
   125f0:	f24c 6370 	movw	r3, #50800	; 0xc670
   125f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125f8:	781b      	ldrb	r3, [r3, #0]
   125fa:	3301      	adds	r3, #1
   125fc:	b2da      	uxtb	r2, r3
   125fe:	f24c 6370 	movw	r3, #50800	; 0xc670
   12602:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12606:	701a      	strb	r2, [r3, #0]
   12608:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1260c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12610:	681a      	ldr	r2, [r3, #0]
   12612:	f24c 6374 	movw	r3, #50804	; 0xc674
   12616:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1261a:	601a      	str	r2, [r3, #0]
   1261c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12624:	681a      	ldr	r2, [r3, #0]
   12626:	f24c 6378 	movw	r3, #50808	; 0xc678
   1262a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1262e:	601a      	str	r2, [r3, #0]
   12630:	f24c 6384 	movw	r3, #50820	; 0xc684
   12634:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12638:	2200      	movs	r2, #0
   1263a:	801a      	strh	r2, [r3, #0]
   1263c:	f24c 6388 	movw	r3, #50824	; 0xc688
   12640:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12644:	f04f 0200 	mov.w	r2, #0
   12648:	601a      	str	r2, [r3, #0]
   1264a:	f002 b883 	b.w	14754 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1264e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12656:	781b      	ldrb	r3, [r3, #0]
   12658:	2b01      	cmp	r3, #1
   1265a:	d100      	bne.n	1265e <auto_nav+0xae>
    {   Goto(while_1)}
   1265c:	e7ba      	b.n	125d4 <auto_nav+0x24>
    else if (nav_stage == 2)
   1265e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12666:	781b      	ldrb	r3, [r3, #0]
   12668:	2b02      	cmp	r3, #2
   1266a:	d162      	bne.n	12732 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   1266c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12674:	2202      	movs	r2, #2
   12676:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12678:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   1267c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12680:	881b      	ldrh	r3, [r3, #0]
   12682:	2b08      	cmp	r3, #8
   12684:	d92e      	bls.n	126e4 <auto_nav+0x134>
   12686:	f24c 6370 	movw	r3, #50800	; 0xc670
   1268a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1268e:	781b      	ldrb	r3, [r3, #0]
   12690:	3301      	adds	r3, #1
   12692:	b2da      	uxtb	r2, r3
   12694:	f24c 6370 	movw	r3, #50800	; 0xc670
   12698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1269c:	701a      	strb	r2, [r3, #0]
   1269e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   126a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a6:	681a      	ldr	r2, [r3, #0]
   126a8:	f24c 6374 	movw	r3, #50804	; 0xc674
   126ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b0:	601a      	str	r2, [r3, #0]
   126b2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   126b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ba:	681a      	ldr	r2, [r3, #0]
   126bc:	f24c 6378 	movw	r3, #50808	; 0xc678
   126c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c4:	601a      	str	r2, [r3, #0]
   126c6:	f24c 6384 	movw	r3, #50820	; 0xc684
   126ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ce:	2200      	movs	r2, #0
   126d0:	801a      	strh	r2, [r3, #0]
   126d2:	f24c 6388 	movw	r3, #50824	; 0xc688
   126d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126da:	f04f 0200 	mov.w	r2, #0
   126de:	601a      	str	r2, [r3, #0]
   126e0:	f002 b838 	b.w	14754 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   126e4:	f24c 635c 	movw	r3, #50780	; 0xc65c
   126e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ec:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   126f0:	f2c4 0296 	movt	r2, #16534	; 0x4096
   126f4:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   126f6:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   126fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126fe:	2200      	movs	r2, #0
   12700:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   12702:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1270a:	f649 129a 	movw	r2, #39322	; 0x999a
   1270e:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   12712:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   12714:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1271c:	2201      	movs	r2, #1
   1271e:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   12720:	f24c 6398 	movw	r3, #50840	; 0xc698
   12724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12728:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   1272c:	801a      	strh	r2, [r3, #0]
        }
        return;
   1272e:	f002 b811 	b.w	14754 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   12732:	f24c 6370 	movw	r3, #50800	; 0xc670
   12736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1273a:	781b      	ldrb	r3, [r3, #0]
   1273c:	2b03      	cmp	r3, #3
   1273e:	d168      	bne.n	12812 <auto_nav+0x262>
     {
	nav_stage = 3;	
   12740:	f24c 6370 	movw	r3, #50800	; 0xc670
   12744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12748:	2203      	movs	r2, #3
   1274a:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   1274c:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   12750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12754:	681b      	ldr	r3, [r3, #0]
   12756:	4618      	mov	r0, r3
   12758:	f04f 0100 	mov.w	r1, #0
   1275c:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12760:	f006 f832 	bl	187c8 <__aeabi_fcmpgt>
   12764:	4603      	mov	r3, r0
   12766:	2b00      	cmp	r3, #0
   12768:	d02e      	beq.n	127c8 <auto_nav+0x218>
   1276a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1276e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12772:	781b      	ldrb	r3, [r3, #0]
   12774:	3301      	adds	r3, #1
   12776:	b2da      	uxtb	r2, r3
   12778:	f24c 6370 	movw	r3, #50800	; 0xc670
   1277c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12780:	701a      	strb	r2, [r3, #0]
   12782:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12786:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1278a:	681a      	ldr	r2, [r3, #0]
   1278c:	f24c 6374 	movw	r3, #50804	; 0xc674
   12790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12794:	601a      	str	r2, [r3, #0]
   12796:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1279a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1279e:	681a      	ldr	r2, [r3, #0]
   127a0:	f24c 6378 	movw	r3, #50808	; 0xc678
   127a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a8:	601a      	str	r2, [r3, #0]
   127aa:	f24c 6384 	movw	r3, #50820	; 0xc684
   127ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b2:	2200      	movs	r2, #0
   127b4:	801a      	strh	r2, [r3, #0]
   127b6:	f24c 6388 	movw	r3, #50824	; 0xc688
   127ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127be:	f04f 0200 	mov.w	r2, #0
   127c2:	601a      	str	r2, [r3, #0]
   127c4:	f001 bfc6 	b.w	14754 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   127c8:	f24c 635c 	movw	r3, #50780	; 0xc65c
   127cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d0:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   127d4:	f2c4 0296 	movt	r2, #16534	; 0x4096
   127d8:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   127da:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   127de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e2:	2200      	movs	r2, #0
   127e4:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   127e6:	f24c 639c 	movw	r3, #50844	; 0xc69c
   127ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ee:	f04f 0200 	mov.w	r2, #0
   127f2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   127f4:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   127f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127fc:	2202      	movs	r2, #2
   127fe:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12800:	f24c 6360 	movw	r3, #50784	; 0xc660
   12804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12808:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1280c:	601a      	str	r2, [r3, #0]
        }
        return;
   1280e:	f001 bfa1 	b.w	14754 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   12812:	f24c 6370 	movw	r3, #50800	; 0xc670
   12816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1281a:	781b      	ldrb	r3, [r3, #0]
   1281c:	2b04      	cmp	r3, #4
   1281e:	f041 8799 	bne.w	14754 <auto_nav+0x21a4>
        NextBlock()
   12822:	f24c 6371 	movw	r3, #50801	; 0xc671
   12826:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1282a:	781b      	ldrb	r3, [r3, #0]
   1282c:	3301      	adds	r3, #1
   1282e:	b2da      	uxtb	r2, r3
   12830:	f24c 6371 	movw	r3, #50801	; 0xc671
   12834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12838:	701a      	strb	r2, [r3, #0]
   1283a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1283e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12842:	2200      	movs	r2, #0
   12844:	701a      	strb	r2, [r3, #0]
   12846:	f24c 6386 	movw	r3, #50822	; 0xc686
   1284a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1284e:	2200      	movs	r2, #0
   12850:	801a      	strh	r2, [r3, #0]
   12852:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12856:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1285a:	681a      	ldr	r2, [r3, #0]
   1285c:	f24c 6374 	movw	r3, #50804	; 0xc674
   12860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12864:	601a      	str	r2, [r3, #0]
   12866:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1286a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1286e:	681a      	ldr	r2, [r3, #0]
   12870:	f24c 6378 	movw	r3, #50808	; 0xc678
   12874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12878:	601a      	str	r2, [r3, #0]
   1287a:	f24c 6384 	movw	r3, #50820	; 0xc684
   1287e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12882:	2200      	movs	r2, #0
   12884:	801a      	strh	r2, [r3, #0]
   12886:	f24c 6388 	movw	r3, #50824	; 0xc688
   1288a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1288e:	f04f 0200 	mov.w	r2, #0
   12892:	601a      	str	r2, [r3, #0]
   12894:	f001 bf5e 	b.w	14754 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12898:	f24c 6371 	movw	r3, #50801	; 0xc671
   1289c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a0:	781b      	ldrb	r3, [r3, #0]
   128a2:	2b01      	cmp	r3, #1
   128a4:	f040 81bc 	bne.w	12c20 <auto_nav+0x670>
{
    nav_block = 1;
   128a8:	f24c 6371 	movw	r3, #50801	; 0xc671
   128ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b0:	2201      	movs	r2, #1
   128b2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   128b4:	f24c 3300 	movw	r3, #49920	; 0xc300
   128b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128bc:	781b      	ldrb	r3, [r3, #0]
   128be:	2b00      	cmp	r3, #0
   128c0:	d007      	beq.n	128d2 <auto_nav+0x322>
   128c2:	f24c 3300 	movw	r3, #49920	; 0xc300
   128c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ca:	2200      	movs	r2, #0
   128cc:	701a      	strb	r2, [r3, #0]
   128ce:	2301      	movs	r3, #1
   128d0:	e000      	b.n	128d4 <auto_nav+0x324>
   128d2:	2300      	movs	r3, #0
   128d4:	2b00      	cmp	r3, #0
   128d6:	d034      	beq.n	12942 <auto_nav+0x392>
	{ GotoBlock(2) }
   128d8:	f24c 6371 	movw	r3, #50801	; 0xc671
   128dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e0:	2202      	movs	r2, #2
   128e2:	701a      	strb	r2, [r3, #0]
   128e4:	f24c 6370 	movw	r3, #50800	; 0xc670
   128e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ec:	2200      	movs	r2, #0
   128ee:	701a      	strb	r2, [r3, #0]
   128f0:	f24c 6386 	movw	r3, #50822	; 0xc686
   128f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f8:	2200      	movs	r2, #0
   128fa:	801a      	strh	r2, [r3, #0]
   128fc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12904:	681a      	ldr	r2, [r3, #0]
   12906:	f24c 6374 	movw	r3, #50804	; 0xc674
   1290a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1290e:	601a      	str	r2, [r3, #0]
   12910:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12914:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12918:	681a      	ldr	r2, [r3, #0]
   1291a:	f24c 6378 	movw	r3, #50808	; 0xc678
   1291e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12922:	601a      	str	r2, [r3, #0]
   12924:	f24c 6384 	movw	r3, #50820	; 0xc684
   12928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1292c:	2200      	movs	r2, #0
   1292e:	801a      	strh	r2, [r3, #0]
   12930:	f24c 6388 	movw	r3, #50824	; 0xc688
   12934:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12938:	f04f 0200 	mov.w	r2, #0
   1293c:	601a      	str	r2, [r3, #0]
   1293e:	f001 bf09 	b.w	14754 <auto_nav+0x21a4>
    if(nav_stage == 0)
   12942:	f24c 6370 	movw	r3, #50800	; 0xc670
   12946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1294a:	781b      	ldrb	r3, [r3, #0]
   1294c:	2b00      	cmp	r3, #0
   1294e:	d12e      	bne.n	129ae <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12950:	f24c 6370 	movw	r3, #50800	; 0xc670
   12954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12958:	781b      	ldrb	r3, [r3, #0]
   1295a:	3301      	adds	r3, #1
   1295c:	b2da      	uxtb	r2, r3
   1295e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12966:	701a      	strb	r2, [r3, #0]
   12968:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1296c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12970:	681a      	ldr	r2, [r3, #0]
   12972:	f24c 6374 	movw	r3, #50804	; 0xc674
   12976:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1297a:	601a      	str	r2, [r3, #0]
   1297c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12984:	681a      	ldr	r2, [r3, #0]
   12986:	f24c 6378 	movw	r3, #50808	; 0xc678
   1298a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298e:	601a      	str	r2, [r3, #0]
   12990:	f24c 6384 	movw	r3, #50820	; 0xc684
   12994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12998:	2200      	movs	r2, #0
   1299a:	801a      	strh	r2, [r3, #0]
   1299c:	f24c 6388 	movw	r3, #50824	; 0xc688
   129a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a4:	f04f 0200 	mov.w	r2, #0
   129a8:	601a      	str	r2, [r3, #0]
   129aa:	f001 bed3 	b.w	14754 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   129ae:	f24c 6370 	movw	r3, #50800	; 0xc670
   129b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b6:	781b      	ldrb	r3, [r3, #0]
   129b8:	2b01      	cmp	r3, #1
   129ba:	d169      	bne.n	12a90 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   129bc:	f24c 6370 	movw	r3, #50800	; 0xc670
   129c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c4:	2201      	movs	r2, #1
   129c6:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   129c8:	2001      	movs	r0, #1
   129ca:	f001 fed1 	bl	14770 <approaching>
   129ce:	4603      	mov	r3, r0
   129d0:	2b00      	cmp	r3, #0
   129d2:	d034      	beq.n	12a3e <auto_nav+0x48e>
   129d4:	f24c 637c 	movw	r3, #50812	; 0xc67c
   129d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129dc:	2201      	movs	r2, #1
   129de:	701a      	strb	r2, [r3, #0]
   129e0:	f24c 6370 	movw	r3, #50800	; 0xc670
   129e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e8:	781b      	ldrb	r3, [r3, #0]
   129ea:	3301      	adds	r3, #1
   129ec:	b2da      	uxtb	r2, r3
   129ee:	f24c 6370 	movw	r3, #50800	; 0xc670
   129f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f6:	701a      	strb	r2, [r3, #0]
   129f8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   129fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a00:	681a      	ldr	r2, [r3, #0]
   12a02:	f24c 6374 	movw	r3, #50804	; 0xc674
   12a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a0a:	601a      	str	r2, [r3, #0]
   12a0c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a14:	681a      	ldr	r2, [r3, #0]
   12a16:	f24c 6378 	movw	r3, #50808	; 0xc678
   12a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a1e:	601a      	str	r2, [r3, #0]
   12a20:	f24c 6384 	movw	r3, #50820	; 0xc684
   12a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a28:	2200      	movs	r2, #0
   12a2a:	801a      	strh	r2, [r3, #0]
   12a2c:	f24c 6388 	movw	r3, #50824	; 0xc688
   12a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a34:	f04f 0200 	mov.w	r2, #0
   12a38:	601a      	str	r2, [r3, #0]
   12a3a:	f001 be8b 	b.w	14754 <auto_nav+0x21a4>
            fly_to(1);
   12a3e:	2001      	movs	r0, #1
   12a40:	f001 ffca 	bl	149d8 <fly_to>
            auto_pitch = FALSE;
   12a44:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a4c:	2200      	movs	r2, #0
   12a4e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12a50:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a58:	f04f 0200 	mov.w	r2, #0
   12a5c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12a5e:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a66:	2203      	movs	r2, #3
   12a68:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12a6a:	f240 5378 	movw	r3, #1400	; 0x578
   12a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a72:	695a      	ldr	r2, [r3, #20]
   12a74:	f240 5374 	movw	r3, #1396	; 0x574
   12a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a7c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a7e:	f24c 6364 	movw	r3, #50788	; 0xc664
   12a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a86:	f04f 0200 	mov.w	r2, #0
   12a8a:	601a      	str	r2, [r3, #0]
          }
          return;
   12a8c:	f001 be62 	b.w	14754 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12a90:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a98:	781b      	ldrb	r3, [r3, #0]
   12a9a:	2b02      	cmp	r3, #2
   12a9c:	d169      	bne.n	12b72 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12a9e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa6:	2202      	movs	r2, #2
   12aa8:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12aaa:	2004      	movs	r0, #4
   12aac:	f001 fe60 	bl	14770 <approaching>
   12ab0:	4603      	mov	r3, r0
   12ab2:	2b00      	cmp	r3, #0
   12ab4:	d034      	beq.n	12b20 <auto_nav+0x570>
   12ab6:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12abe:	2204      	movs	r2, #4
   12ac0:	701a      	strb	r2, [r3, #0]
   12ac2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aca:	781b      	ldrb	r3, [r3, #0]
   12acc:	3301      	adds	r3, #1
   12ace:	b2da      	uxtb	r2, r3
   12ad0:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad8:	701a      	strb	r2, [r3, #0]
   12ada:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae2:	681a      	ldr	r2, [r3, #0]
   12ae4:	f24c 6374 	movw	r3, #50804	; 0xc674
   12ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aec:	601a      	str	r2, [r3, #0]
   12aee:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af6:	681a      	ldr	r2, [r3, #0]
   12af8:	f24c 6378 	movw	r3, #50808	; 0xc678
   12afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b00:	601a      	str	r2, [r3, #0]
   12b02:	f24c 6384 	movw	r3, #50820	; 0xc684
   12b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b0a:	2200      	movs	r2, #0
   12b0c:	801a      	strh	r2, [r3, #0]
   12b0e:	f24c 6388 	movw	r3, #50824	; 0xc688
   12b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b16:	f04f 0200 	mov.w	r2, #0
   12b1a:	601a      	str	r2, [r3, #0]
   12b1c:	f001 be1a 	b.w	14754 <auto_nav+0x21a4>
            fly_to(4);
   12b20:	2004      	movs	r0, #4
   12b22:	f001 ff59 	bl	149d8 <fly_to>
            auto_pitch = FALSE;
   12b26:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b2e:	2200      	movs	r2, #0
   12b30:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b32:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b3a:	f04f 0200 	mov.w	r2, #0
   12b3e:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b40:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b48:	2203      	movs	r2, #3
   12b4a:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12b4c:	f240 5378 	movw	r3, #1400	; 0x578
   12b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12b56:	f240 5374 	movw	r3, #1396	; 0x574
   12b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b5e:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b60:	f24c 6364 	movw	r3, #50788	; 0xc664
   12b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b68:	f04f 0200 	mov.w	r2, #0
   12b6c:	601a      	str	r2, [r3, #0]
          }
          return;
   12b6e:	f001 bdf1 	b.w	14754 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12b72:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7a:	781b      	ldrb	r3, [r3, #0]
   12b7c:	2b03      	cmp	r3, #3
   12b7e:	d106      	bne.n	12b8e <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12b80:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b88:	2203      	movs	r2, #3
   12b8a:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12b8c:	e6e0      	b.n	12950 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12b8e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b96:	781b      	ldrb	r3, [r3, #0]
   12b98:	2b04      	cmp	r3, #4
   12b9a:	f041 85db 	bne.w	14754 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12b9e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ba6:	2204      	movs	r2, #4
   12ba8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12baa:	f24c 6371 	movw	r3, #50801	; 0xc671
   12bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb2:	781b      	ldrb	r3, [r3, #0]
   12bb4:	3301      	adds	r3, #1
   12bb6:	b2da      	uxtb	r2, r3
   12bb8:	f24c 6371 	movw	r3, #50801	; 0xc671
   12bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc0:	701a      	strb	r2, [r3, #0]
   12bc2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bca:	2200      	movs	r2, #0
   12bcc:	701a      	strb	r2, [r3, #0]
   12bce:	f24c 6386 	movw	r3, #50822	; 0xc686
   12bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd6:	2200      	movs	r2, #0
   12bd8:	801a      	strh	r2, [r3, #0]
   12bda:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12be2:	681a      	ldr	r2, [r3, #0]
   12be4:	f24c 6374 	movw	r3, #50804	; 0xc674
   12be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bec:	601a      	str	r2, [r3, #0]
   12bee:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf6:	681a      	ldr	r2, [r3, #0]
   12bf8:	f24c 6378 	movw	r3, #50808	; 0xc678
   12bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c00:	601a      	str	r2, [r3, #0]
   12c02:	f24c 6384 	movw	r3, #50820	; 0xc684
   12c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c0a:	2200      	movs	r2, #0
   12c0c:	801a      	strh	r2, [r3, #0]
   12c0e:	f24c 6388 	movw	r3, #50824	; 0xc688
   12c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c16:	f04f 0200 	mov.w	r2, #0
   12c1a:	601a      	str	r2, [r3, #0]
   12c1c:	f001 bd9a 	b.w	14754 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12c20:	f24c 6371 	movw	r3, #50801	; 0xc671
   12c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c28:	781b      	ldrb	r3, [r3, #0]
   12c2a:	2b02      	cmp	r3, #2
   12c2c:	f040 8392 	bne.w	13354 <auto_nav+0xda4>
{
	nav_block = 2;
   12c30:	f24c 6371 	movw	r3, #50801	; 0xc671
   12c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c38:	2202      	movs	r2, #2
   12c3a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12c3c:	f24c 3300 	movw	r3, #49920	; 0xc300
   12c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c44:	781b      	ldrb	r3, [r3, #0]
   12c46:	2b00      	cmp	r3, #0
   12c48:	d007      	beq.n	12c5a <auto_nav+0x6aa>
   12c4a:	f24c 3300 	movw	r3, #49920	; 0xc300
   12c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c52:	2200      	movs	r2, #0
   12c54:	701a      	strb	r2, [r3, #0]
   12c56:	2301      	movs	r3, #1
   12c58:	e000      	b.n	12c5c <auto_nav+0x6ac>
   12c5a:	2300      	movs	r3, #0
   12c5c:	2b00      	cmp	r3, #0
   12c5e:	d034      	beq.n	12cca <auto_nav+0x71a>
   12c60:	f24c 6371 	movw	r3, #50801	; 0xc671
   12c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c68:	2203      	movs	r2, #3
   12c6a:	701a      	strb	r2, [r3, #0]
   12c6c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c74:	2200      	movs	r2, #0
   12c76:	701a      	strb	r2, [r3, #0]
   12c78:	f24c 6386 	movw	r3, #50822	; 0xc686
   12c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c80:	2200      	movs	r2, #0
   12c82:	801a      	strh	r2, [r3, #0]
   12c84:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c8c:	681a      	ldr	r2, [r3, #0]
   12c8e:	f24c 6374 	movw	r3, #50804	; 0xc674
   12c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c96:	601a      	str	r2, [r3, #0]
   12c98:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ca0:	681a      	ldr	r2, [r3, #0]
   12ca2:	f24c 6378 	movw	r3, #50808	; 0xc678
   12ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12caa:	601a      	str	r2, [r3, #0]
   12cac:	f24c 6384 	movw	r3, #50820	; 0xc684
   12cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cb4:	2200      	movs	r2, #0
   12cb6:	801a      	strh	r2, [r3, #0]
   12cb8:	f24c 6388 	movw	r3, #50824	; 0xc688
   12cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc0:	f04f 0200 	mov.w	r2, #0
   12cc4:	601a      	str	r2, [r3, #0]
   12cc6:	f001 bd45 	b.w	14754 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12cca:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cd2:	781b      	ldrb	r3, [r3, #0]
   12cd4:	2b00      	cmp	r3, #0
   12cd6:	d134      	bne.n	12d42 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12cd8:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce0:	2200      	movs	r2, #0
   12ce2:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12ce4:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cec:	781b      	ldrb	r3, [r3, #0]
   12cee:	3301      	adds	r3, #1
   12cf0:	b2da      	uxtb	r2, r3
   12cf2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cfa:	701a      	strb	r2, [r3, #0]
   12cfc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d04:	681a      	ldr	r2, [r3, #0]
   12d06:	f24c 6374 	movw	r3, #50804	; 0xc674
   12d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d0e:	601a      	str	r2, [r3, #0]
   12d10:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d18:	681a      	ldr	r2, [r3, #0]
   12d1a:	f24c 6378 	movw	r3, #50808	; 0xc678
   12d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d22:	601a      	str	r2, [r3, #0]
   12d24:	f24c 6384 	movw	r3, #50820	; 0xc684
   12d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d2c:	2200      	movs	r2, #0
   12d2e:	801a      	strh	r2, [r3, #0]
   12d30:	f24c 6388 	movw	r3, #50824	; 0xc688
   12d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d38:	f04f 0200 	mov.w	r2, #0
   12d3c:	601a      	str	r2, [r3, #0]
   12d3e:	f001 bd09 	b.w	14754 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12d42:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d4a:	781b      	ldrb	r3, [r3, #0]
   12d4c:	2b01      	cmp	r3, #1
   12d4e:	d169      	bne.n	12e24 <auto_nav+0x874>
    {
         nav_stage =1;
   12d50:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d58:	2201      	movs	r2, #1
   12d5a:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12d5c:	2006      	movs	r0, #6
   12d5e:	f001 fd07 	bl	14770 <approaching>
   12d62:	4603      	mov	r3, r0
   12d64:	2b00      	cmp	r3, #0
   12d66:	d034      	beq.n	12dd2 <auto_nav+0x822>
   12d68:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d70:	2206      	movs	r2, #6
   12d72:	701a      	strb	r2, [r3, #0]
   12d74:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d7c:	781b      	ldrb	r3, [r3, #0]
   12d7e:	3301      	adds	r3, #1
   12d80:	b2da      	uxtb	r2, r3
   12d82:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d8a:	701a      	strb	r2, [r3, #0]
   12d8c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d94:	681a      	ldr	r2, [r3, #0]
   12d96:	f24c 6374 	movw	r3, #50804	; 0xc674
   12d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d9e:	601a      	str	r2, [r3, #0]
   12da0:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12da8:	681a      	ldr	r2, [r3, #0]
   12daa:	f24c 6378 	movw	r3, #50808	; 0xc678
   12dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db2:	601a      	str	r2, [r3, #0]
   12db4:	f24c 6384 	movw	r3, #50820	; 0xc684
   12db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dbc:	2200      	movs	r2, #0
   12dbe:	801a      	strh	r2, [r3, #0]
   12dc0:	f24c 6388 	movw	r3, #50824	; 0xc688
   12dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc8:	f04f 0200 	mov.w	r2, #0
   12dcc:	601a      	str	r2, [r3, #0]
   12dce:	f001 bcc1 	b.w	14754 <auto_nav+0x21a4>
            fly_to(6);
   12dd2:	2006      	movs	r0, #6
   12dd4:	f001 fe00 	bl	149d8 <fly_to>
            auto_pitch = FALSE;
   12dd8:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de0:	2200      	movs	r2, #0
   12de2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12de4:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dec:	f04f 0200 	mov.w	r2, #0
   12df0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12df2:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dfa:	2203      	movs	r2, #3
   12dfc:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12dfe:	f240 5378 	movw	r3, #1400	; 0x578
   12e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12e08:	f240 5374 	movw	r3, #1396	; 0x574
   12e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e10:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e12:	f24c 6364 	movw	r3, #50788	; 0xc664
   12e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e1a:	f04f 0200 	mov.w	r2, #0
   12e1e:	601a      	str	r2, [r3, #0]
          }
          return;
   12e20:	f001 bc98 	b.w	14754 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12e24:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e2c:	781b      	ldrb	r3, [r3, #0]
   12e2e:	2b02      	cmp	r3, #2
   12e30:	d169      	bne.n	12f06 <auto_nav+0x956>
     {
         nav_stage =2; 
   12e32:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e3a:	2202      	movs	r2, #2
   12e3c:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12e3e:	2001      	movs	r0, #1
   12e40:	f001 fc96 	bl	14770 <approaching>
   12e44:	4603      	mov	r3, r0
   12e46:	2b00      	cmp	r3, #0
   12e48:	d034      	beq.n	12eb4 <auto_nav+0x904>
   12e4a:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e52:	2201      	movs	r2, #1
   12e54:	701a      	strb	r2, [r3, #0]
   12e56:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e5e:	781b      	ldrb	r3, [r3, #0]
   12e60:	3301      	adds	r3, #1
   12e62:	b2da      	uxtb	r2, r3
   12e64:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e6c:	701a      	strb	r2, [r3, #0]
   12e6e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e76:	681a      	ldr	r2, [r3, #0]
   12e78:	f24c 6374 	movw	r3, #50804	; 0xc674
   12e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e80:	601a      	str	r2, [r3, #0]
   12e82:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e8a:	681a      	ldr	r2, [r3, #0]
   12e8c:	f24c 6378 	movw	r3, #50808	; 0xc678
   12e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e94:	601a      	str	r2, [r3, #0]
   12e96:	f24c 6384 	movw	r3, #50820	; 0xc684
   12e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e9e:	2200      	movs	r2, #0
   12ea0:	801a      	strh	r2, [r3, #0]
   12ea2:	f24c 6388 	movw	r3, #50824	; 0xc688
   12ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eaa:	f04f 0200 	mov.w	r2, #0
   12eae:	601a      	str	r2, [r3, #0]
   12eb0:	f001 bc50 	b.w	14754 <auto_nav+0x21a4>
            fly_to(1);
   12eb4:	2001      	movs	r0, #1
   12eb6:	f001 fd8f 	bl	149d8 <fly_to>
            auto_pitch = FALSE;
   12eba:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ec2:	2200      	movs	r2, #0
   12ec4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ec6:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ece:	f04f 0200 	mov.w	r2, #0
   12ed2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12ed4:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12edc:	2203      	movs	r2, #3
   12ede:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12ee0:	f240 5378 	movw	r3, #1400	; 0x578
   12ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ee8:	695a      	ldr	r2, [r3, #20]
   12eea:	f240 5374 	movw	r3, #1396	; 0x574
   12eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ef2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ef4:	f24c 6364 	movw	r3, #50788	; 0xc664
   12ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12efc:	f04f 0200 	mov.w	r2, #0
   12f00:	601a      	str	r2, [r3, #0]
          }
          return;
   12f02:	f001 bc27 	b.w	14754 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12f06:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f0e:	781b      	ldrb	r3, [r3, #0]
   12f10:	2b03      	cmp	r3, #3
   12f12:	d16f      	bne.n	12ff4 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12f14:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f1c:	2203      	movs	r2, #3
   12f1e:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12f20:	2002      	movs	r0, #2
   12f22:	f001 fc25 	bl	14770 <approaching>
   12f26:	4603      	mov	r3, r0
   12f28:	2b00      	cmp	r3, #0
   12f2a:	d034      	beq.n	12f96 <auto_nav+0x9e6>
   12f2c:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f34:	2202      	movs	r2, #2
   12f36:	701a      	strb	r2, [r3, #0]
   12f38:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f40:	781b      	ldrb	r3, [r3, #0]
   12f42:	3301      	adds	r3, #1
   12f44:	b2da      	uxtb	r2, r3
   12f46:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f4e:	701a      	strb	r2, [r3, #0]
   12f50:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f58:	681a      	ldr	r2, [r3, #0]
   12f5a:	f24c 6374 	movw	r3, #50804	; 0xc674
   12f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f62:	601a      	str	r2, [r3, #0]
   12f64:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f6c:	681a      	ldr	r2, [r3, #0]
   12f6e:	f24c 6378 	movw	r3, #50808	; 0xc678
   12f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f76:	601a      	str	r2, [r3, #0]
   12f78:	f24c 6384 	movw	r3, #50820	; 0xc684
   12f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f80:	2200      	movs	r2, #0
   12f82:	801a      	strh	r2, [r3, #0]
   12f84:	f24c 6388 	movw	r3, #50824	; 0xc688
   12f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f8c:	f04f 0200 	mov.w	r2, #0
   12f90:	601a      	str	r2, [r3, #0]
   12f92:	f001 bbdf 	b.w	14754 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12f96:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f9e:	781b      	ldrb	r3, [r3, #0]
   12fa0:	4618      	mov	r0, r3
   12fa2:	2102      	movs	r1, #2
   12fa4:	f001 fd3a 	bl	14a1c <route_to>
            auto_pitch = FALSE;
   12fa8:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fb0:	2200      	movs	r2, #0
   12fb2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12fb4:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fbc:	f04f 0200 	mov.w	r2, #0
   12fc0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12fc2:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fca:	2203      	movs	r2, #3
   12fcc:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12fce:	f240 5378 	movw	r3, #1400	; 0x578
   12fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fd6:	6a1a      	ldr	r2, [r3, #32]
   12fd8:	f240 5374 	movw	r3, #1396	; 0x574
   12fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fe0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12fe2:	f24c 6364 	movw	r3, #50788	; 0xc664
   12fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fea:	f04f 0200 	mov.w	r2, #0
   12fee:	601a      	str	r2, [r3, #0]
          }
          return;
   12ff0:	f001 bbb0 	b.w	14754 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12ff4:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ffc:	781b      	ldrb	r3, [r3, #0]
   12ffe:	2b04      	cmp	r3, #4
   13000:	d169      	bne.n	130d6 <auto_nav+0xb26>
       {
          nav_stage = 4;
   13002:	f24c 6370 	movw	r3, #50800	; 0xc670
   13006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1300a:	2204      	movs	r2, #4
   1300c:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   1300e:	2003      	movs	r0, #3
   13010:	f001 fbae 	bl	14770 <approaching>
   13014:	4603      	mov	r3, r0
   13016:	2b00      	cmp	r3, #0
   13018:	d034      	beq.n	13084 <auto_nav+0xad4>
   1301a:	f24c 637c 	movw	r3, #50812	; 0xc67c
   1301e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13022:	2203      	movs	r2, #3
   13024:	701a      	strb	r2, [r3, #0]
   13026:	f24c 6370 	movw	r3, #50800	; 0xc670
   1302a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1302e:	781b      	ldrb	r3, [r3, #0]
   13030:	3301      	adds	r3, #1
   13032:	b2da      	uxtb	r2, r3
   13034:	f24c 6370 	movw	r3, #50800	; 0xc670
   13038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1303c:	701a      	strb	r2, [r3, #0]
   1303e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13046:	681a      	ldr	r2, [r3, #0]
   13048:	f24c 6374 	movw	r3, #50804	; 0xc674
   1304c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13050:	601a      	str	r2, [r3, #0]
   13052:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1305a:	681a      	ldr	r2, [r3, #0]
   1305c:	f24c 6378 	movw	r3, #50808	; 0xc678
   13060:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13064:	601a      	str	r2, [r3, #0]
   13066:	f24c 6384 	movw	r3, #50820	; 0xc684
   1306a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1306e:	2200      	movs	r2, #0
   13070:	801a      	strh	r2, [r3, #0]
   13072:	f24c 6388 	movw	r3, #50824	; 0xc688
   13076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1307a:	f04f 0200 	mov.w	r2, #0
   1307e:	601a      	str	r2, [r3, #0]
   13080:	f001 bb68 	b.w	14754 <auto_nav+0x21a4>
            fly_to(3);
   13084:	2003      	movs	r0, #3
   13086:	f001 fca7 	bl	149d8 <fly_to>
            auto_pitch = FALSE;
   1308a:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1308e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13092:	2200      	movs	r2, #0
   13094:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13096:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1309a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1309e:	f04f 0200 	mov.w	r2, #0
   130a2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   130a4:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   130a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ac:	2203      	movs	r2, #3
   130ae:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   130b0:	f240 5378 	movw	r3, #1400	; 0x578
   130b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   130ba:	f240 5374 	movw	r3, #1396	; 0x574
   130be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130c2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   130c4:	f24c 6364 	movw	r3, #50788	; 0xc664
   130c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130cc:	f04f 0200 	mov.w	r2, #0
   130d0:	601a      	str	r2, [r3, #0]
          }
          return;
   130d2:	f001 bb3f 	b.w	14754 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   130d6:	f24c 6370 	movw	r3, #50800	; 0xc670
   130da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130de:	781b      	ldrb	r3, [r3, #0]
   130e0:	2b05      	cmp	r3, #5
   130e2:	d169      	bne.n	131b8 <auto_nav+0xc08>
       {
          nav_stage =5;
   130e4:	f24c 6370 	movw	r3, #50800	; 0xc670
   130e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ec:	2205      	movs	r2, #5
   130ee:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   130f0:	2004      	movs	r0, #4
   130f2:	f001 fb3d 	bl	14770 <approaching>
   130f6:	4603      	mov	r3, r0
   130f8:	2b00      	cmp	r3, #0
   130fa:	d034      	beq.n	13166 <auto_nav+0xbb6>
   130fc:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13100:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13104:	2204      	movs	r2, #4
   13106:	701a      	strb	r2, [r3, #0]
   13108:	f24c 6370 	movw	r3, #50800	; 0xc670
   1310c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13110:	781b      	ldrb	r3, [r3, #0]
   13112:	3301      	adds	r3, #1
   13114:	b2da      	uxtb	r2, r3
   13116:	f24c 6370 	movw	r3, #50800	; 0xc670
   1311a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1311e:	701a      	strb	r2, [r3, #0]
   13120:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13124:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13128:	681a      	ldr	r2, [r3, #0]
   1312a:	f24c 6374 	movw	r3, #50804	; 0xc674
   1312e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13132:	601a      	str	r2, [r3, #0]
   13134:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13138:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1313c:	681a      	ldr	r2, [r3, #0]
   1313e:	f24c 6378 	movw	r3, #50808	; 0xc678
   13142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13146:	601a      	str	r2, [r3, #0]
   13148:	f24c 6384 	movw	r3, #50820	; 0xc684
   1314c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13150:	2200      	movs	r2, #0
   13152:	801a      	strh	r2, [r3, #0]
   13154:	f24c 6388 	movw	r3, #50824	; 0xc688
   13158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1315c:	f04f 0200 	mov.w	r2, #0
   13160:	601a      	str	r2, [r3, #0]
   13162:	f001 baf7 	b.w	14754 <auto_nav+0x21a4>
            fly_to(4);
   13166:	2004      	movs	r0, #4
   13168:	f001 fc36 	bl	149d8 <fly_to>
            auto_pitch = FALSE;
   1316c:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13174:	2200      	movs	r2, #0
   13176:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13178:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1317c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13180:	f04f 0200 	mov.w	r2, #0
   13184:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13186:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   1318a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1318e:	2203      	movs	r2, #3
   13190:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   13192:	f240 5378 	movw	r3, #1400	; 0x578
   13196:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1319a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1319c:	f240 5374 	movw	r3, #1396	; 0x574
   131a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131a4:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   131a6:	f24c 6364 	movw	r3, #50788	; 0xc664
   131aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ae:	f04f 0200 	mov.w	r2, #0
   131b2:	601a      	str	r2, [r3, #0]
          }
          return;
   131b4:	f001 bace 	b.w	14754 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   131b8:	f24c 6370 	movw	r3, #50800	; 0xc670
   131bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c0:	781b      	ldrb	r3, [r3, #0]
   131c2:	2b06      	cmp	r3, #6
   131c4:	d16f      	bne.n	132a6 <auto_nav+0xcf6>
       {
          nav_stage =6;
   131c6:	f24c 6370 	movw	r3, #50800	; 0xc670
   131ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ce:	2206      	movs	r2, #6
   131d0:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   131d2:	2005      	movs	r0, #5
   131d4:	f001 facc 	bl	14770 <approaching>
   131d8:	4603      	mov	r3, r0
   131da:	2b00      	cmp	r3, #0
   131dc:	d034      	beq.n	13248 <auto_nav+0xc98>
   131de:	f24c 637c 	movw	r3, #50812	; 0xc67c
   131e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e6:	2205      	movs	r2, #5
   131e8:	701a      	strb	r2, [r3, #0]
   131ea:	f24c 6370 	movw	r3, #50800	; 0xc670
   131ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131f2:	781b      	ldrb	r3, [r3, #0]
   131f4:	3301      	adds	r3, #1
   131f6:	b2da      	uxtb	r2, r3
   131f8:	f24c 6370 	movw	r3, #50800	; 0xc670
   131fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13200:	701a      	strb	r2, [r3, #0]
   13202:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1320a:	681a      	ldr	r2, [r3, #0]
   1320c:	f24c 6374 	movw	r3, #50804	; 0xc674
   13210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13214:	601a      	str	r2, [r3, #0]
   13216:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1321a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1321e:	681a      	ldr	r2, [r3, #0]
   13220:	f24c 6378 	movw	r3, #50808	; 0xc678
   13224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13228:	601a      	str	r2, [r3, #0]
   1322a:	f24c 6384 	movw	r3, #50820	; 0xc684
   1322e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13232:	2200      	movs	r2, #0
   13234:	801a      	strh	r2, [r3, #0]
   13236:	f24c 6388 	movw	r3, #50824	; 0xc688
   1323a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1323e:	f04f 0200 	mov.w	r2, #0
   13242:	601a      	str	r2, [r3, #0]
   13244:	f001 ba86 	b.w	14754 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   13248:	f24c 637c 	movw	r3, #50812	; 0xc67c
   1324c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13250:	781b      	ldrb	r3, [r3, #0]
   13252:	4618      	mov	r0, r3
   13254:	2105      	movs	r1, #5
   13256:	f001 fbe1 	bl	14a1c <route_to>
            auto_pitch = FALSE;
   1325a:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1325e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13262:	2200      	movs	r2, #0
   13264:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13266:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1326a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1326e:	f04f 0200 	mov.w	r2, #0
   13272:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13274:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13278:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1327c:	2203      	movs	r2, #3
   1327e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13280:	f240 5378 	movw	r3, #1400	; 0x578
   13284:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1328a:	f240 5374 	movw	r3, #1396	; 0x574
   1328e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13292:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13294:	f24c 6364 	movw	r3, #50788	; 0xc664
   13298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1329c:	f04f 0200 	mov.w	r2, #0
   132a0:	601a      	str	r2, [r3, #0]
          }
          return;
   132a2:	f001 ba57 	b.w	14754 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   132a6:	f24c 6370 	movw	r3, #50800	; 0xc670
   132aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ae:	781b      	ldrb	r3, [r3, #0]
   132b0:	2b07      	cmp	r3, #7
   132b2:	d106      	bne.n	132c2 <auto_nav+0xd12>
       {
	   nav_stage =7;
   132b4:	f24c 6370 	movw	r3, #50800	; 0xc670
   132b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132bc:	2207      	movs	r2, #7
   132be:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   132c0:	e50a      	b.n	12cd8 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   132c2:	f24c 6370 	movw	r3, #50800	; 0xc670
   132c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ca:	781b      	ldrb	r3, [r3, #0]
   132cc:	2b08      	cmp	r3, #8
   132ce:	f041 8241 	bne.w	14754 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   132d2:	f24c 6370 	movw	r3, #50800	; 0xc670
   132d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132da:	2208      	movs	r2, #8
   132dc:	701a      	strb	r2, [r3, #0]
          NextBlock();
   132de:	f24c 6371 	movw	r3, #50801	; 0xc671
   132e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132e6:	781b      	ldrb	r3, [r3, #0]
   132e8:	3301      	adds	r3, #1
   132ea:	b2da      	uxtb	r2, r3
   132ec:	f24c 6371 	movw	r3, #50801	; 0xc671
   132f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f4:	701a      	strb	r2, [r3, #0]
   132f6:	f24c 6370 	movw	r3, #50800	; 0xc670
   132fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132fe:	2200      	movs	r2, #0
   13300:	701a      	strb	r2, [r3, #0]
   13302:	f24c 6386 	movw	r3, #50822	; 0xc686
   13306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1330a:	2200      	movs	r2, #0
   1330c:	801a      	strh	r2, [r3, #0]
   1330e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13316:	681a      	ldr	r2, [r3, #0]
   13318:	f24c 6374 	movw	r3, #50804	; 0xc674
   1331c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13320:	601a      	str	r2, [r3, #0]
   13322:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1332a:	681a      	ldr	r2, [r3, #0]
   1332c:	f24c 6378 	movw	r3, #50808	; 0xc678
   13330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13334:	601a      	str	r2, [r3, #0]
   13336:	f24c 6384 	movw	r3, #50820	; 0xc684
   1333a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1333e:	2200      	movs	r2, #0
   13340:	801a      	strh	r2, [r3, #0]
   13342:	f24c 6388 	movw	r3, #50824	; 0xc688
   13346:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1334a:	f04f 0200 	mov.w	r2, #0
   1334e:	601a      	str	r2, [r3, #0]
   13350:	f001 ba00 	b.w	14754 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   13354:	f24c 6371 	movw	r3, #50801	; 0xc671
   13358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1335c:	781b      	ldrb	r3, [r3, #0]
   1335e:	2b03      	cmp	r3, #3
   13360:	f040 8388 	bne.w	13a74 <auto_nav+0x14c4>
{
    nav_block = 3;
   13364:	f24c 6371 	movw	r3, #50801	; 0xc671
   13368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1336c:	2203      	movs	r2, #3
   1336e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13370:	f24c 3300 	movw	r3, #49920	; 0xc300
   13374:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13378:	781b      	ldrb	r3, [r3, #0]
   1337a:	2b00      	cmp	r3, #0
   1337c:	d007      	beq.n	1338e <auto_nav+0xdde>
   1337e:	f24c 3300 	movw	r3, #49920	; 0xc300
   13382:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13386:	2200      	movs	r2, #0
   13388:	701a      	strb	r2, [r3, #0]
   1338a:	2301      	movs	r3, #1
   1338c:	e000      	b.n	13390 <auto_nav+0xde0>
   1338e:	2300      	movs	r3, #0
   13390:	2b00      	cmp	r3, #0
   13392:	d034      	beq.n	133fe <auto_nav+0xe4e>
   13394:	f24c 6371 	movw	r3, #50801	; 0xc671
   13398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1339c:	2204      	movs	r2, #4
   1339e:	701a      	strb	r2, [r3, #0]
   133a0:	f24c 6370 	movw	r3, #50800	; 0xc670
   133a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133a8:	2200      	movs	r2, #0
   133aa:	701a      	strb	r2, [r3, #0]
   133ac:	f24c 6386 	movw	r3, #50822	; 0xc686
   133b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b4:	2200      	movs	r2, #0
   133b6:	801a      	strh	r2, [r3, #0]
   133b8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   133bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133c0:	681a      	ldr	r2, [r3, #0]
   133c2:	f24c 6374 	movw	r3, #50804	; 0xc674
   133c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ca:	601a      	str	r2, [r3, #0]
   133cc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   133d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133d4:	681a      	ldr	r2, [r3, #0]
   133d6:	f24c 6378 	movw	r3, #50808	; 0xc678
   133da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133de:	601a      	str	r2, [r3, #0]
   133e0:	f24c 6384 	movw	r3, #50820	; 0xc684
   133e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133e8:	2200      	movs	r2, #0
   133ea:	801a      	strh	r2, [r3, #0]
   133ec:	f24c 6388 	movw	r3, #50824	; 0xc688
   133f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133f4:	f04f 0200 	mov.w	r2, #0
   133f8:	601a      	str	r2, [r3, #0]
   133fa:	f001 b9ab 	b.w	14754 <auto_nav+0x21a4>
    if(nav_stage == 0)
   133fe:	f24c 6370 	movw	r3, #50800	; 0xc670
   13402:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13406:	781b      	ldrb	r3, [r3, #0]
   13408:	2b00      	cmp	r3, #0
   1340a:	f040 82ea 	bne.w	139e2 <auto_nav+0x1432>
    {
        nav_stage = 0;
   1340e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13416:	2200      	movs	r2, #0
   13418:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   1341a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   1341e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13422:	781b      	ldrb	r3, [r3, #0]
   13424:	2b02      	cmp	r3, #2
   13426:	f040 81a5 	bne.w	13774 <auto_nav+0x11c4>
   1342a:	f24c 4320 	movw	r3, #50208	; 0xc420
   1342e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13432:	88db      	ldrh	r3, [r3, #6]
   13434:	84fb      	strh	r3, [r7, #38]	; 0x26
   13436:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1343a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1343e:	dc04      	bgt.n	1344a <auto_nav+0xe9a>
   13440:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13444:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13448:	da7e      	bge.n	13548 <auto_nav+0xf98>
   1344a:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1344e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13452:	681b      	ldr	r3, [r3, #0]
   13454:	4618      	mov	r0, r3
   13456:	f004 fb67 	bl	17b28 <__aeabi_f2d>
   1345a:	4604      	mov	r4, r0
   1345c:	460d      	mov	r5, r1
   1345e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13462:	4618      	mov	r0, r3
   13464:	f004 ffa0 	bl	183a8 <__aeabi_i2f>
   13468:	4603      	mov	r3, r0
   1346a:	4618      	mov	r0, r3
   1346c:	f04f 0100 	mov.w	r1, #0
   13470:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13474:	f005 f8a0 	bl	185b8 <__aeabi_fdiv>
   13478:	4603      	mov	r3, r0
   1347a:	4618      	mov	r0, r3
   1347c:	f004 fb54 	bl	17b28 <__aeabi_f2d>
   13480:	4602      	mov	r2, r0
   13482:	460b      	mov	r3, r1
   13484:	4610      	mov	r0, r2
   13486:	4619      	mov	r1, r3
   13488:	f04f 0200 	mov.w	r2, #0
   1348c:	f04f 0300 	mov.w	r3, #0
   13490:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13494:	f004 fb9c 	bl	17bd0 <__aeabi_dmul>
   13498:	4602      	mov	r2, r0
   1349a:	460b      	mov	r3, r1
   1349c:	4610      	mov	r0, r2
   1349e:	4619      	mov	r1, r3
   134a0:	f04f 0200 	mov.w	r2, #0
   134a4:	f04f 0300 	mov.w	r3, #0
   134a8:	f004 f9e0 	bl	1786c <__adddf3>
   134ac:	4602      	mov	r2, r0
   134ae:	460b      	mov	r3, r1
   134b0:	4620      	mov	r0, r4
   134b2:	4629      	mov	r1, r5
   134b4:	f004 f9da 	bl	1786c <__adddf3>
   134b8:	4602      	mov	r2, r0
   134ba:	460b      	mov	r3, r1
   134bc:	4610      	mov	r0, r2
   134be:	4619      	mov	r1, r3
   134c0:	f004 fe68 	bl	18194 <__aeabi_d2f>
   134c4:	4602      	mov	r2, r0
   134c6:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ce:	601a      	str	r2, [r3, #0]
   134d0:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134d8:	681b      	ldr	r3, [r3, #0]
   134da:	4618      	mov	r0, r3
   134dc:	f04f 0100 	mov.w	r1, #0
   134e0:	f2c4 317a 	movt	r1, #17274	; 0x437a
   134e4:	f005 f95c 	bl	187a0 <__aeabi_fcmple>
   134e8:	4603      	mov	r3, r0
   134ea:	2b00      	cmp	r3, #0
   134ec:	d005      	beq.n	134fa <auto_nav+0xf4a>
   134ee:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   134f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134f6:	681a      	ldr	r2, [r3, #0]
   134f8:	e003      	b.n	13502 <auto_nav+0xf52>
   134fa:	f04f 0200 	mov.w	r2, #0
   134fe:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13502:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1350a:	601a      	str	r2, [r3, #0]
   1350c:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13510:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13514:	681b      	ldr	r3, [r3, #0]
   13516:	4618      	mov	r0, r3
   13518:	f04f 0100 	mov.w	r1, #0
   1351c:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13520:	f005 f948 	bl	187b4 <__aeabi_fcmpge>
   13524:	4603      	mov	r3, r0
   13526:	2b00      	cmp	r3, #0
   13528:	d005      	beq.n	13536 <auto_nav+0xf86>
   1352a:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1352e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13532:	681a      	ldr	r2, [r3, #0]
   13534:	e003      	b.n	1353e <auto_nav+0xf8e>
   13536:	f04f 0200 	mov.w	r2, #0
   1353a:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   1353e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13546:	601a      	str	r2, [r3, #0]
   13548:	f24c 4320 	movw	r3, #50208	; 0xc420
   1354c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13550:	889b      	ldrh	r3, [r3, #4]
   13552:	84bb      	strh	r3, [r7, #36]	; 0x24
   13554:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13558:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1355c:	dc04      	bgt.n	13568 <auto_nav+0xfb8>
   1355e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13562:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13566:	da7e      	bge.n	13666 <auto_nav+0x10b6>
   13568:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1356c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13570:	681b      	ldr	r3, [r3, #0]
   13572:	4618      	mov	r0, r3
   13574:	f004 fad8 	bl	17b28 <__aeabi_f2d>
   13578:	4604      	mov	r4, r0
   1357a:	460d      	mov	r5, r1
   1357c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13580:	4618      	mov	r0, r3
   13582:	f004 ff11 	bl	183a8 <__aeabi_i2f>
   13586:	4603      	mov	r3, r0
   13588:	4618      	mov	r0, r3
   1358a:	f04f 0100 	mov.w	r1, #0
   1358e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13592:	f005 f811 	bl	185b8 <__aeabi_fdiv>
   13596:	4603      	mov	r3, r0
   13598:	4618      	mov	r0, r3
   1359a:	f004 fac5 	bl	17b28 <__aeabi_f2d>
   1359e:	4602      	mov	r2, r0
   135a0:	460b      	mov	r3, r1
   135a2:	4610      	mov	r0, r2
   135a4:	4619      	mov	r1, r3
   135a6:	f04f 0200 	mov.w	r2, #0
   135aa:	f04f 0300 	mov.w	r3, #0
   135ae:	f2cc 0334 	movt	r3, #49204	; 0xc034
   135b2:	f004 fb0d 	bl	17bd0 <__aeabi_dmul>
   135b6:	4602      	mov	r2, r0
   135b8:	460b      	mov	r3, r1
   135ba:	4610      	mov	r0, r2
   135bc:	4619      	mov	r1, r3
   135be:	f04f 0200 	mov.w	r2, #0
   135c2:	f04f 0300 	mov.w	r3, #0
   135c6:	f004 f951 	bl	1786c <__adddf3>
   135ca:	4602      	mov	r2, r0
   135cc:	460b      	mov	r3, r1
   135ce:	4620      	mov	r0, r4
   135d0:	4629      	mov	r1, r5
   135d2:	f004 f94b 	bl	1786c <__adddf3>
   135d6:	4602      	mov	r2, r0
   135d8:	460b      	mov	r3, r1
   135da:	4610      	mov	r0, r2
   135dc:	4619      	mov	r1, r3
   135de:	f004 fdd9 	bl	18194 <__aeabi_d2f>
   135e2:	4602      	mov	r2, r0
   135e4:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ec:	601a      	str	r2, [r3, #0]
   135ee:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   135f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135f6:	681b      	ldr	r3, [r3, #0]
   135f8:	4618      	mov	r0, r3
   135fa:	f04f 0100 	mov.w	r1, #0
   135fe:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13602:	f005 f8cd 	bl	187a0 <__aeabi_fcmple>
   13606:	4603      	mov	r3, r0
   13608:	2b00      	cmp	r3, #0
   1360a:	d005      	beq.n	13618 <auto_nav+0x1068>
   1360c:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13610:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13614:	681a      	ldr	r2, [r3, #0]
   13616:	e003      	b.n	13620 <auto_nav+0x1070>
   13618:	f04f 0200 	mov.w	r2, #0
   1361c:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13620:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13624:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13628:	601a      	str	r2, [r3, #0]
   1362a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1362e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13632:	681b      	ldr	r3, [r3, #0]
   13634:	4618      	mov	r0, r3
   13636:	f04f 0100 	mov.w	r1, #0
   1363a:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   1363e:	f005 f8b9 	bl	187b4 <__aeabi_fcmpge>
   13642:	4603      	mov	r3, r0
   13644:	2b00      	cmp	r3, #0
   13646:	d005      	beq.n	13654 <auto_nav+0x10a4>
   13648:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1364c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13650:	681a      	ldr	r2, [r3, #0]
   13652:	e003      	b.n	1365c <auto_nav+0x10ac>
   13654:	f04f 0200 	mov.w	r2, #0
   13658:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   1365c:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13660:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13664:	601a      	str	r2, [r3, #0]
   13666:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   1366a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1366e:	2203      	movs	r2, #3
   13670:	701a      	strb	r2, [r3, #0]
   13672:	f24c 4320 	movw	r3, #50208	; 0xc420
   13676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1367a:	885b      	ldrh	r3, [r3, #2]
   1367c:	847b      	strh	r3, [r7, #34]	; 0x22
   1367e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13682:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13686:	dc04      	bgt.n	13692 <auto_nav+0x10e2>
   13688:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1368c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13690:	da70      	bge.n	13774 <auto_nav+0x11c4>
   13692:	f240 5374 	movw	r3, #1396	; 0x574
   13696:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1369a:	681b      	ldr	r3, [r3, #0]
   1369c:	4618      	mov	r0, r3
   1369e:	f004 fa43 	bl	17b28 <__aeabi_f2d>
   136a2:	4604      	mov	r4, r0
   136a4:	460d      	mov	r5, r1
   136a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   136aa:	4618      	mov	r0, r3
   136ac:	f004 fe7c 	bl	183a8 <__aeabi_i2f>
   136b0:	4603      	mov	r3, r0
   136b2:	4618      	mov	r0, r3
   136b4:	f04f 0100 	mov.w	r1, #0
   136b8:	f2c4 6116 	movt	r1, #17942	; 0x4616
   136bc:	f004 ff7c 	bl	185b8 <__aeabi_fdiv>
   136c0:	4603      	mov	r3, r0
   136c2:	4618      	mov	r0, r3
   136c4:	f004 fa30 	bl	17b28 <__aeabi_f2d>
   136c8:	4602      	mov	r2, r0
   136ca:	460b      	mov	r3, r1
   136cc:	f04f 0000 	mov.w	r0, #0
   136d0:	f04f 0100 	mov.w	r1, #0
   136d4:	f004 f8c8 	bl	17868 <__aeabi_dsub>
   136d8:	4602      	mov	r2, r0
   136da:	460b      	mov	r3, r1
   136dc:	4620      	mov	r0, r4
   136de:	4629      	mov	r1, r5
   136e0:	f004 f8c4 	bl	1786c <__adddf3>
   136e4:	4602      	mov	r2, r0
   136e6:	460b      	mov	r3, r1
   136e8:	4610      	mov	r0, r2
   136ea:	4619      	mov	r1, r3
   136ec:	f004 fd52 	bl	18194 <__aeabi_d2f>
   136f0:	4602      	mov	r2, r0
   136f2:	f240 5374 	movw	r3, #1396	; 0x574
   136f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136fa:	601a      	str	r2, [r3, #0]
   136fc:	f240 5374 	movw	r3, #1396	; 0x574
   13700:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13704:	681b      	ldr	r3, [r3, #0]
   13706:	4618      	mov	r0, r3
   13708:	f04f 0100 	mov.w	r1, #0
   1370c:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13710:	f005 f850 	bl	187b4 <__aeabi_fcmpge>
   13714:	4603      	mov	r3, r0
   13716:	2b00      	cmp	r3, #0
   13718:	d005      	beq.n	13726 <auto_nav+0x1176>
   1371a:	f240 5374 	movw	r3, #1396	; 0x574
   1371e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13722:	681a      	ldr	r2, [r3, #0]
   13724:	e003      	b.n	1372e <auto_nav+0x117e>
   13726:	f04f 0200 	mov.w	r2, #0
   1372a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   1372e:	f240 5374 	movw	r3, #1396	; 0x574
   13732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13736:	601a      	str	r2, [r3, #0]
   13738:	f240 5374 	movw	r3, #1396	; 0x574
   1373c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13740:	681b      	ldr	r3, [r3, #0]
   13742:	4618      	mov	r0, r3
   13744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13748:	f2c4 3189 	movt	r1, #17289	; 0x4389
   1374c:	f005 f828 	bl	187a0 <__aeabi_fcmple>
   13750:	4603      	mov	r3, r0
   13752:	2b00      	cmp	r3, #0
   13754:	d005      	beq.n	13762 <auto_nav+0x11b2>
   13756:	f240 5374 	movw	r3, #1396	; 0x574
   1375a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1375e:	681a      	ldr	r2, [r3, #0]
   13760:	e003      	b.n	1376a <auto_nav+0x11ba>
   13762:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13766:	f2c4 3289 	movt	r2, #17289	; 0x4389
   1376a:	f240 5374 	movw	r3, #1396	; 0x574
   1376e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13772:	601a      	str	r2, [r3, #0]
   13774:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13778:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1377c:	681a      	ldr	r2, [r3, #0]
   1377e:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13782:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13786:	681b      	ldr	r3, [r3, #0]
   13788:	4610      	mov	r0, r2
   1378a:	4619      	mov	r1, r3
   1378c:	f004 fd56 	bl	1823c <__aeabi_fsub>
   13790:	4603      	mov	r3, r0
   13792:	4618      	mov	r0, r3
   13794:	f004 f9c8 	bl	17b28 <__aeabi_f2d>
   13798:	4604      	mov	r4, r0
   1379a:	460d      	mov	r5, r1
   1379c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   137a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137a4:	681a      	ldr	r2, [r3, #0]
   137a6:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   137aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137ae:	681b      	ldr	r3, [r3, #0]
   137b0:	4610      	mov	r0, r2
   137b2:	4619      	mov	r1, r3
   137b4:	f004 fd42 	bl	1823c <__aeabi_fsub>
   137b8:	4603      	mov	r3, r0
   137ba:	4618      	mov	r0, r3
   137bc:	f004 f9b4 	bl	17b28 <__aeabi_f2d>
   137c0:	4602      	mov	r2, r0
   137c2:	460b      	mov	r3, r1
   137c4:	4620      	mov	r0, r4
   137c6:	4629      	mov	r1, r5
   137c8:	f002 fa12 	bl	15bf0 <pp_atan2>
   137cc:	4602      	mov	r2, r0
   137ce:	460b      	mov	r3, r1
   137d0:	4610      	mov	r0, r2
   137d2:	4619      	mov	r1, r3
   137d4:	f004 fcde 	bl	18194 <__aeabi_d2f>
   137d8:	4603      	mov	r3, r0
   137da:	61fb      	str	r3, [r7, #28]
   137dc:	69f8      	ldr	r0, [r7, #28]
   137de:	f004 f9a3 	bl	17b28 <__aeabi_f2d>
   137e2:	4604      	mov	r4, r0
   137e4:	460d      	mov	r5, r1
   137e6:	f64c 1304 	movw	r3, #51460	; 0xc904
   137ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137ee:	681b      	ldr	r3, [r3, #0]
   137f0:	4618      	mov	r0, r3
   137f2:	f04f 0100 	mov.w	r1, #0
   137f6:	f2cc 2148 	movt	r1, #49736	; 0xc248
   137fa:	f004 fe29 	bl	18450 <__aeabi_fmul>
   137fe:	4603      	mov	r3, r0
   13800:	4618      	mov	r0, r3
   13802:	f004 f991 	bl	17b28 <__aeabi_f2d>
   13806:	4602      	mov	r2, r0
   13808:	460b      	mov	r3, r1
   1380a:	f04f 0000 	mov.w	r0, #0
   1380e:	f04f 0100 	mov.w	r1, #0
   13812:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13816:	f004 fb05 	bl	17e24 <__aeabi_ddiv>
   1381a:	4602      	mov	r2, r0
   1381c:	460b      	mov	r3, r1
   1381e:	4620      	mov	r0, r4
   13820:	4629      	mov	r1, r5
   13822:	f004 f823 	bl	1786c <__adddf3>
   13826:	4602      	mov	r2, r0
   13828:	460b      	mov	r3, r1
   1382a:	4610      	mov	r0, r2
   1382c:	4619      	mov	r1, r3
   1382e:	f004 fcb1 	bl	18194 <__aeabi_d2f>
   13832:	4603      	mov	r3, r0
   13834:	61bb      	str	r3, [r7, #24]
   13836:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1383a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1383e:	681b      	ldr	r3, [r3, #0]
   13840:	4618      	mov	r0, r3
   13842:	f004 f971 	bl	17b28 <__aeabi_f2d>
   13846:	4604      	mov	r4, r0
   13848:	460d      	mov	r5, r1
   1384a:	69b8      	ldr	r0, [r7, #24]
   1384c:	f004 f96c 	bl	17b28 <__aeabi_f2d>
   13850:	4602      	mov	r2, r0
   13852:	460b      	mov	r3, r1
   13854:	4610      	mov	r0, r2
   13856:	4619      	mov	r1, r3
   13858:	a3b1      	add	r3, pc, #708	; (adr r3, 13b20 <auto_nav+0x1570>)
   1385a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1385e:	f004 f805 	bl	1786c <__adddf3>
   13862:	4602      	mov	r2, r0
   13864:	460b      	mov	r3, r1
   13866:	4610      	mov	r0, r2
   13868:	4619      	mov	r1, r3
   1386a:	f002 fa81 	bl	15d70 <pp_sin>
   1386e:	4602      	mov	r2, r0
   13870:	460b      	mov	r3, r1
   13872:	4610      	mov	r0, r2
   13874:	4619      	mov	r1, r3
   13876:	f04f 0200 	mov.w	r2, #0
   1387a:	f04f 0300 	mov.w	r3, #0
   1387e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13882:	f004 f9a5 	bl	17bd0 <__aeabi_dmul>
   13886:	4602      	mov	r2, r0
   13888:	460b      	mov	r3, r1
   1388a:	4620      	mov	r0, r4
   1388c:	4629      	mov	r1, r5
   1388e:	f003 ffed 	bl	1786c <__adddf3>
   13892:	4602      	mov	r2, r0
   13894:	460b      	mov	r3, r1
   13896:	4610      	mov	r0, r2
   13898:	4619      	mov	r1, r3
   1389a:	f004 fc7b 	bl	18194 <__aeabi_d2f>
   1389e:	4606      	mov	r6, r0
   138a0:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   138a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138a8:	681b      	ldr	r3, [r3, #0]
   138aa:	4618      	mov	r0, r3
   138ac:	f004 f93c 	bl	17b28 <__aeabi_f2d>
   138b0:	4604      	mov	r4, r0
   138b2:	460d      	mov	r5, r1
   138b4:	69b8      	ldr	r0, [r7, #24]
   138b6:	f004 f937 	bl	17b28 <__aeabi_f2d>
   138ba:	4602      	mov	r2, r0
   138bc:	460b      	mov	r3, r1
   138be:	4610      	mov	r0, r2
   138c0:	4619      	mov	r1, r3
   138c2:	f002 fa55 	bl	15d70 <pp_sin>
   138c6:	4602      	mov	r2, r0
   138c8:	460b      	mov	r3, r1
   138ca:	4610      	mov	r0, r2
   138cc:	4619      	mov	r1, r3
   138ce:	f04f 0200 	mov.w	r2, #0
   138d2:	f04f 0300 	mov.w	r3, #0
   138d6:	f2c4 0349 	movt	r3, #16457	; 0x4049
   138da:	f004 f979 	bl	17bd0 <__aeabi_dmul>
   138de:	4602      	mov	r2, r0
   138e0:	460b      	mov	r3, r1
   138e2:	4620      	mov	r0, r4
   138e4:	4629      	mov	r1, r5
   138e6:	f003 ffc1 	bl	1786c <__adddf3>
   138ea:	4602      	mov	r2, r0
   138ec:	460b      	mov	r3, r1
   138ee:	4610      	mov	r0, r2
   138f0:	4619      	mov	r1, r3
   138f2:	f004 fc4f 	bl	18194 <__aeabi_d2f>
   138f6:	4603      	mov	r3, r0
   138f8:	4630      	mov	r0, r6
   138fa:	4619      	mov	r1, r3
   138fc:	f001 f81c 	bl	14938 <fly_to_xy>
   13900:	69b8      	ldr	r0, [r7, #24]
   13902:	f004 f911 	bl	17b28 <__aeabi_f2d>
   13906:	4602      	mov	r2, r0
   13908:	460b      	mov	r3, r1
   1390a:	a185      	add	r1, pc, #532	; (adr r1, 13b20 <auto_nav+0x1570>)
   1390c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13910:	f003 ffaa 	bl	17868 <__aeabi_dsub>
   13914:	4602      	mov	r2, r0
   13916:	460b      	mov	r3, r1
   13918:	4610      	mov	r0, r2
   1391a:	4619      	mov	r1, r3
   1391c:	a382      	add	r3, pc, #520	; (adr r3, 13b28 <auto_nav+0x1578>)
   1391e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13922:	f004 fa7f 	bl	17e24 <__aeabi_ddiv>
   13926:	4602      	mov	r2, r0
   13928:	460b      	mov	r3, r1
   1392a:	4610      	mov	r0, r2
   1392c:	4619      	mov	r1, r3
   1392e:	f04f 0200 	mov.w	r2, #0
   13932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13936:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1393a:	f004 f949 	bl	17bd0 <__aeabi_dmul>
   1393e:	4602      	mov	r2, r0
   13940:	460b      	mov	r3, r1
   13942:	4610      	mov	r0, r2
   13944:	4619      	mov	r1, r3
   13946:	f004 fc25 	bl	18194 <__aeabi_d2f>
   1394a:	4602      	mov	r2, r0
   1394c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13950:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13954:	601a      	str	r2, [r3, #0]
   13956:	e012      	b.n	1397e <auto_nav+0x13ce>
   13958:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1395c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13960:	681b      	ldr	r3, [r3, #0]
   13962:	4618      	mov	r0, r3
   13964:	f04f 0100 	mov.w	r1, #0
   13968:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1396c:	f004 fc68 	bl	18240 <__addsf3>
   13970:	4603      	mov	r3, r0
   13972:	461a      	mov	r2, r3
   13974:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1397c:	601a      	str	r2, [r3, #0]
   1397e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13982:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13986:	681b      	ldr	r3, [r3, #0]
   13988:	4618      	mov	r0, r3
   1398a:	f04f 0100 	mov.w	r1, #0
   1398e:	f004 fefd 	bl	1878c <__aeabi_fcmplt>
   13992:	4603      	mov	r3, r0
   13994:	2b00      	cmp	r3, #0
   13996:	d1df      	bne.n	13958 <auto_nav+0x13a8>
   13998:	e012      	b.n	139c0 <auto_nav+0x1410>
   1399a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1399e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139a2:	681b      	ldr	r3, [r3, #0]
   139a4:	4618      	mov	r0, r3
   139a6:	f04f 0100 	mov.w	r1, #0
   139aa:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   139ae:	f004 fc45 	bl	1823c <__aeabi_fsub>
   139b2:	4603      	mov	r3, r0
   139b4:	461a      	mov	r2, r3
   139b6:	f24c 638c 	movw	r3, #50828	; 0xc68c
   139ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139be:	601a      	str	r2, [r3, #0]
   139c0:	f24c 638c 	movw	r3, #50828	; 0xc68c
   139c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139c8:	681b      	ldr	r3, [r3, #0]
   139ca:	4618      	mov	r0, r3
   139cc:	f04f 0100 	mov.w	r1, #0
   139d0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   139d4:	f004 feee 	bl	187b4 <__aeabi_fcmpge>
   139d8:	4603      	mov	r3, r0
   139da:	2b00      	cmp	r3, #0
   139dc:	d1dd      	bne.n	1399a <auto_nav+0x13ea>
        return;
   139de:	f000 beb9 	b.w	14754 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   139e2:	f24c 6370 	movw	r3, #50800	; 0xc670
   139e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139ea:	781b      	ldrb	r3, [r3, #0]
   139ec:	2b01      	cmp	r3, #1
   139ee:	f040 86b1 	bne.w	14754 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   139f2:	f24c 6370 	movw	r3, #50800	; 0xc670
   139f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139fa:	2201      	movs	r2, #1
   139fc:	701a      	strb	r2, [r3, #0]
        NextBlock()
   139fe:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a06:	781b      	ldrb	r3, [r3, #0]
   13a08:	3301      	adds	r3, #1
   13a0a:	b2da      	uxtb	r2, r3
   13a0c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a14:	701a      	strb	r2, [r3, #0]
   13a16:	f24c 6370 	movw	r3, #50800	; 0xc670
   13a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a1e:	2200      	movs	r2, #0
   13a20:	701a      	strb	r2, [r3, #0]
   13a22:	f24c 6386 	movw	r3, #50822	; 0xc686
   13a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a2a:	2200      	movs	r2, #0
   13a2c:	801a      	strh	r2, [r3, #0]
   13a2e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a36:	681a      	ldr	r2, [r3, #0]
   13a38:	f24c 6374 	movw	r3, #50804	; 0xc674
   13a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a40:	601a      	str	r2, [r3, #0]
   13a42:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a4a:	681a      	ldr	r2, [r3, #0]
   13a4c:	f24c 6378 	movw	r3, #50808	; 0xc678
   13a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a54:	601a      	str	r2, [r3, #0]
   13a56:	f24c 6384 	movw	r3, #50820	; 0xc684
   13a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a5e:	2200      	movs	r2, #0
   13a60:	801a      	strh	r2, [r3, #0]
   13a62:	f24c 6388 	movw	r3, #50824	; 0xc688
   13a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a6a:	f04f 0200 	mov.w	r2, #0
   13a6e:	601a      	str	r2, [r3, #0]
   13a70:	f000 be70 	b.w	14754 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13a74:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a7c:	781b      	ldrb	r3, [r3, #0]
   13a7e:	2b04      	cmp	r3, #4
   13a80:	f040 8202 	bne.w	13e88 <auto_nav+0x18d8>
{
    nav_block = 4;
   13a84:	f24c 6371 	movw	r3, #50801	; 0xc671
   13a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a8c:	2204      	movs	r2, #4
   13a8e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13a90:	f24c 3300 	movw	r3, #49920	; 0xc300
   13a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a98:	781b      	ldrb	r3, [r3, #0]
   13a9a:	2b00      	cmp	r3, #0
   13a9c:	d007      	beq.n	13aae <auto_nav+0x14fe>
   13a9e:	f24c 3300 	movw	r3, #49920	; 0xc300
   13aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aa6:	2200      	movs	r2, #0
   13aa8:	701a      	strb	r2, [r3, #0]
   13aaa:	2301      	movs	r3, #1
   13aac:	e000      	b.n	13ab0 <auto_nav+0x1500>
   13aae:	2300      	movs	r3, #0
   13ab0:	2b00      	cmp	r3, #0
   13ab2:	d03d      	beq.n	13b30 <auto_nav+0x1580>
   13ab4:	f24c 6371 	movw	r3, #50801	; 0xc671
   13ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13abc:	2205      	movs	r2, #5
   13abe:	701a      	strb	r2, [r3, #0]
   13ac0:	f24c 6370 	movw	r3, #50800	; 0xc670
   13ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ac8:	2200      	movs	r2, #0
   13aca:	701a      	strb	r2, [r3, #0]
   13acc:	f24c 6386 	movw	r3, #50822	; 0xc686
   13ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ad4:	2200      	movs	r2, #0
   13ad6:	801a      	strh	r2, [r3, #0]
   13ad8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ae0:	681a      	ldr	r2, [r3, #0]
   13ae2:	f24c 6374 	movw	r3, #50804	; 0xc674
   13ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aea:	601a      	str	r2, [r3, #0]
   13aec:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13af4:	681a      	ldr	r2, [r3, #0]
   13af6:	f24c 6378 	movw	r3, #50808	; 0xc678
   13afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13afe:	601a      	str	r2, [r3, #0]
   13b00:	f24c 6384 	movw	r3, #50820	; 0xc684
   13b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b08:	2200      	movs	r2, #0
   13b0a:	801a      	strh	r2, [r3, #0]
   13b0c:	f24c 6388 	movw	r3, #50824	; 0xc688
   13b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b14:	f04f 0200 	mov.w	r2, #0
   13b18:	601a      	str	r2, [r3, #0]
   13b1a:	f000 be1b 	b.w	14754 <auto_nav+0x21a4>
   13b1e:	bf00      	nop
   13b20:	54442d18 	.word	0x54442d18
   13b24:	3ff921fb 	.word	0x3ff921fb
   13b28:	54442d18 	.word	0x54442d18
   13b2c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13b30:	f24c 6370 	movw	r3, #50800	; 0xc670
   13b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b38:	781b      	ldrb	r3, [r3, #0]
   13b3a:	2b00      	cmp	r3, #0
   13b3c:	f040 815b 	bne.w	13df6 <auto_nav+0x1846>
    {
        nav_stage = 0;
   13b40:	f24c 6370 	movw	r3, #50800	; 0xc670
   13b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b48:	2200      	movs	r2, #0
   13b4a:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13b4c:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b54:	2200      	movs	r2, #0
   13b56:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13b58:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b60:	f04f 0200 	mov.w	r2, #0
   13b64:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13b66:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b6e:	2203      	movs	r2, #3
   13b70:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13b72:	f240 5378 	movw	r3, #1400	; 0x578
   13b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b7a:	689a      	ldr	r2, [r3, #8]
   13b7c:	f240 5374 	movw	r3, #1396	; 0x574
   13b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b84:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13b86:	f24c 6364 	movw	r3, #50788	; 0xc664
   13b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b8e:	f04f 0200 	mov.w	r2, #0
   13b92:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13b94:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b9c:	681a      	ldr	r2, [r3, #0]
   13b9e:	f240 5378 	movw	r3, #1400	; 0x578
   13ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ba6:	685b      	ldr	r3, [r3, #4]
   13ba8:	4610      	mov	r0, r2
   13baa:	4619      	mov	r1, r3
   13bac:	f004 fb46 	bl	1823c <__aeabi_fsub>
   13bb0:	4603      	mov	r3, r0
   13bb2:	4618      	mov	r0, r3
   13bb4:	f003 ffb8 	bl	17b28 <__aeabi_f2d>
   13bb8:	4604      	mov	r4, r0
   13bba:	460d      	mov	r5, r1
   13bbc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bc4:	681a      	ldr	r2, [r3, #0]
   13bc6:	f240 5378 	movw	r3, #1400	; 0x578
   13bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bce:	681b      	ldr	r3, [r3, #0]
   13bd0:	4610      	mov	r0, r2
   13bd2:	4619      	mov	r1, r3
   13bd4:	f004 fb32 	bl	1823c <__aeabi_fsub>
   13bd8:	4603      	mov	r3, r0
   13bda:	4618      	mov	r0, r3
   13bdc:	f003 ffa4 	bl	17b28 <__aeabi_f2d>
   13be0:	4602      	mov	r2, r0
   13be2:	460b      	mov	r3, r1
   13be4:	4620      	mov	r0, r4
   13be6:	4629      	mov	r1, r5
   13be8:	f002 f802 	bl	15bf0 <pp_atan2>
   13bec:	4602      	mov	r2, r0
   13bee:	460b      	mov	r3, r1
   13bf0:	4610      	mov	r0, r2
   13bf2:	4619      	mov	r1, r3
   13bf4:	f004 face 	bl	18194 <__aeabi_d2f>
   13bf8:	4603      	mov	r3, r0
   13bfa:	617b      	str	r3, [r7, #20]
   13bfc:	6978      	ldr	r0, [r7, #20]
   13bfe:	f003 ff93 	bl	17b28 <__aeabi_f2d>
   13c02:	4604      	mov	r4, r0
   13c04:	460d      	mov	r5, r1
   13c06:	f64c 1304 	movw	r3, #51460	; 0xc904
   13c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c0e:	681b      	ldr	r3, [r3, #0]
   13c10:	4618      	mov	r0, r3
   13c12:	f04f 0100 	mov.w	r1, #0
   13c16:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13c1a:	f004 fc19 	bl	18450 <__aeabi_fmul>
   13c1e:	4603      	mov	r3, r0
   13c20:	4618      	mov	r0, r3
   13c22:	f003 ff81 	bl	17b28 <__aeabi_f2d>
   13c26:	4602      	mov	r2, r0
   13c28:	460b      	mov	r3, r1
   13c2a:	f04f 0000 	mov.w	r0, #0
   13c2e:	f04f 0100 	mov.w	r1, #0
   13c32:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13c36:	f004 f8f5 	bl	17e24 <__aeabi_ddiv>
   13c3a:	4602      	mov	r2, r0
   13c3c:	460b      	mov	r3, r1
   13c3e:	4620      	mov	r0, r4
   13c40:	4629      	mov	r1, r5
   13c42:	f003 fe13 	bl	1786c <__adddf3>
   13c46:	4602      	mov	r2, r0
   13c48:	460b      	mov	r3, r1
   13c4a:	4610      	mov	r0, r2
   13c4c:	4619      	mov	r1, r3
   13c4e:	f004 faa1 	bl	18194 <__aeabi_d2f>
   13c52:	4603      	mov	r3, r0
   13c54:	613b      	str	r3, [r7, #16]
   13c56:	f240 5378 	movw	r3, #1400	; 0x578
   13c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c5e:	681b      	ldr	r3, [r3, #0]
   13c60:	4618      	mov	r0, r3
   13c62:	f003 ff61 	bl	17b28 <__aeabi_f2d>
   13c66:	4604      	mov	r4, r0
   13c68:	460d      	mov	r5, r1
   13c6a:	6938      	ldr	r0, [r7, #16]
   13c6c:	f003 ff5c 	bl	17b28 <__aeabi_f2d>
   13c70:	4602      	mov	r2, r0
   13c72:	460b      	mov	r3, r1
   13c74:	4610      	mov	r0, r2
   13c76:	4619      	mov	r1, r3
   13c78:	a3af      	add	r3, pc, #700	; (adr r3, 13f38 <auto_nav+0x1988>)
   13c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c7e:	f003 fdf5 	bl	1786c <__adddf3>
   13c82:	4602      	mov	r2, r0
   13c84:	460b      	mov	r3, r1
   13c86:	4610      	mov	r0, r2
   13c88:	4619      	mov	r1, r3
   13c8a:	f002 f871 	bl	15d70 <pp_sin>
   13c8e:	4602      	mov	r2, r0
   13c90:	460b      	mov	r3, r1
   13c92:	4610      	mov	r0, r2
   13c94:	4619      	mov	r1, r3
   13c96:	a3aa      	add	r3, pc, #680	; (adr r3, 13f40 <auto_nav+0x1990>)
   13c98:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c9c:	f003 ff98 	bl	17bd0 <__aeabi_dmul>
   13ca0:	4602      	mov	r2, r0
   13ca2:	460b      	mov	r3, r1
   13ca4:	4620      	mov	r0, r4
   13ca6:	4629      	mov	r1, r5
   13ca8:	f003 fde0 	bl	1786c <__adddf3>
   13cac:	4602      	mov	r2, r0
   13cae:	460b      	mov	r3, r1
   13cb0:	4610      	mov	r0, r2
   13cb2:	4619      	mov	r1, r3
   13cb4:	f004 fa6e 	bl	18194 <__aeabi_d2f>
   13cb8:	4606      	mov	r6, r0
   13cba:	f240 5378 	movw	r3, #1400	; 0x578
   13cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cc2:	685b      	ldr	r3, [r3, #4]
   13cc4:	4618      	mov	r0, r3
   13cc6:	f003 ff2f 	bl	17b28 <__aeabi_f2d>
   13cca:	4604      	mov	r4, r0
   13ccc:	460d      	mov	r5, r1
   13cce:	6938      	ldr	r0, [r7, #16]
   13cd0:	f003 ff2a 	bl	17b28 <__aeabi_f2d>
   13cd4:	4602      	mov	r2, r0
   13cd6:	460b      	mov	r3, r1
   13cd8:	4610      	mov	r0, r2
   13cda:	4619      	mov	r1, r3
   13cdc:	f002 f848 	bl	15d70 <pp_sin>
   13ce0:	4602      	mov	r2, r0
   13ce2:	460b      	mov	r3, r1
   13ce4:	4610      	mov	r0, r2
   13ce6:	4619      	mov	r1, r3
   13ce8:	a395      	add	r3, pc, #596	; (adr r3, 13f40 <auto_nav+0x1990>)
   13cea:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cee:	f003 ff6f 	bl	17bd0 <__aeabi_dmul>
   13cf2:	4602      	mov	r2, r0
   13cf4:	460b      	mov	r3, r1
   13cf6:	4620      	mov	r0, r4
   13cf8:	4629      	mov	r1, r5
   13cfa:	f003 fdb7 	bl	1786c <__adddf3>
   13cfe:	4602      	mov	r2, r0
   13d00:	460b      	mov	r3, r1
   13d02:	4610      	mov	r0, r2
   13d04:	4619      	mov	r1, r3
   13d06:	f004 fa45 	bl	18194 <__aeabi_d2f>
   13d0a:	4603      	mov	r3, r0
   13d0c:	4630      	mov	r0, r6
   13d0e:	4619      	mov	r1, r3
   13d10:	f000 fe12 	bl	14938 <fly_to_xy>
   13d14:	6938      	ldr	r0, [r7, #16]
   13d16:	f003 ff07 	bl	17b28 <__aeabi_f2d>
   13d1a:	4602      	mov	r2, r0
   13d1c:	460b      	mov	r3, r1
   13d1e:	a186      	add	r1, pc, #536	; (adr r1, 13f38 <auto_nav+0x1988>)
   13d20:	e9d1 0100 	ldrd	r0, r1, [r1]
   13d24:	f003 fda0 	bl	17868 <__aeabi_dsub>
   13d28:	4602      	mov	r2, r0
   13d2a:	460b      	mov	r3, r1
   13d2c:	4610      	mov	r0, r2
   13d2e:	4619      	mov	r1, r3
   13d30:	a385      	add	r3, pc, #532	; (adr r3, 13f48 <auto_nav+0x1998>)
   13d32:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d36:	f004 f875 	bl	17e24 <__aeabi_ddiv>
   13d3a:	4602      	mov	r2, r0
   13d3c:	460b      	mov	r3, r1
   13d3e:	4610      	mov	r0, r2
   13d40:	4619      	mov	r1, r3
   13d42:	f04f 0200 	mov.w	r2, #0
   13d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13d4a:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13d4e:	f003 ff3f 	bl	17bd0 <__aeabi_dmul>
   13d52:	4602      	mov	r2, r0
   13d54:	460b      	mov	r3, r1
   13d56:	4610      	mov	r0, r2
   13d58:	4619      	mov	r1, r3
   13d5a:	f004 fa1b 	bl	18194 <__aeabi_d2f>
   13d5e:	4602      	mov	r2, r0
   13d60:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d68:	601a      	str	r2, [r3, #0]
   13d6a:	e012      	b.n	13d92 <auto_nav+0x17e2>
   13d6c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d74:	681b      	ldr	r3, [r3, #0]
   13d76:	4618      	mov	r0, r3
   13d78:	f04f 0100 	mov.w	r1, #0
   13d7c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d80:	f004 fa5e 	bl	18240 <__addsf3>
   13d84:	4603      	mov	r3, r0
   13d86:	461a      	mov	r2, r3
   13d88:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d90:	601a      	str	r2, [r3, #0]
   13d92:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d9a:	681b      	ldr	r3, [r3, #0]
   13d9c:	4618      	mov	r0, r3
   13d9e:	f04f 0100 	mov.w	r1, #0
   13da2:	f004 fcf3 	bl	1878c <__aeabi_fcmplt>
   13da6:	4603      	mov	r3, r0
   13da8:	2b00      	cmp	r3, #0
   13daa:	d1df      	bne.n	13d6c <auto_nav+0x17bc>
   13dac:	e012      	b.n	13dd4 <auto_nav+0x1824>
   13dae:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13db6:	681b      	ldr	r3, [r3, #0]
   13db8:	4618      	mov	r0, r3
   13dba:	f04f 0100 	mov.w	r1, #0
   13dbe:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13dc2:	f004 fa3b 	bl	1823c <__aeabi_fsub>
   13dc6:	4603      	mov	r3, r0
   13dc8:	461a      	mov	r2, r3
   13dca:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dd2:	601a      	str	r2, [r3, #0]
   13dd4:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ddc:	681b      	ldr	r3, [r3, #0]
   13dde:	4618      	mov	r0, r3
   13de0:	f04f 0100 	mov.w	r1, #0
   13de4:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13de8:	f004 fce4 	bl	187b4 <__aeabi_fcmpge>
   13dec:	4603      	mov	r3, r0
   13dee:	2b00      	cmp	r3, #0
   13df0:	d1dd      	bne.n	13dae <auto_nav+0x17fe>
        return;
   13df2:	f000 bcaf 	b.w	14754 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13df6:	f24c 6370 	movw	r3, #50800	; 0xc670
   13dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dfe:	781b      	ldrb	r3, [r3, #0]
   13e00:	2b01      	cmp	r3, #1
   13e02:	f040 84a7 	bne.w	14754 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13e06:	f24c 6370 	movw	r3, #50800	; 0xc670
   13e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e0e:	2201      	movs	r2, #1
   13e10:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13e12:	f24c 6371 	movw	r3, #50801	; 0xc671
   13e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e1a:	781b      	ldrb	r3, [r3, #0]
   13e1c:	3301      	adds	r3, #1
   13e1e:	b2da      	uxtb	r2, r3
   13e20:	f24c 6371 	movw	r3, #50801	; 0xc671
   13e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e28:	701a      	strb	r2, [r3, #0]
   13e2a:	f24c 6370 	movw	r3, #50800	; 0xc670
   13e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e32:	2200      	movs	r2, #0
   13e34:	701a      	strb	r2, [r3, #0]
   13e36:	f24c 6386 	movw	r3, #50822	; 0xc686
   13e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e3e:	2200      	movs	r2, #0
   13e40:	801a      	strh	r2, [r3, #0]
   13e42:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e4a:	681a      	ldr	r2, [r3, #0]
   13e4c:	f24c 6374 	movw	r3, #50804	; 0xc674
   13e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e54:	601a      	str	r2, [r3, #0]
   13e56:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e5e:	681a      	ldr	r2, [r3, #0]
   13e60:	f24c 6378 	movw	r3, #50808	; 0xc678
   13e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e68:	601a      	str	r2, [r3, #0]
   13e6a:	f24c 6384 	movw	r3, #50820	; 0xc684
   13e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e72:	2200      	movs	r2, #0
   13e74:	801a      	strh	r2, [r3, #0]
   13e76:	f24c 6388 	movw	r3, #50824	; 0xc688
   13e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e7e:	f04f 0200 	mov.w	r2, #0
   13e82:	601a      	str	r2, [r3, #0]
   13e84:	f000 bc66 	b.w	14754 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13e88:	f24c 6371 	movw	r3, #50801	; 0xc671
   13e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e90:	781b      	ldrb	r3, [r3, #0]
   13e92:	2b05      	cmp	r3, #5
   13e94:	f040 845e 	bne.w	14754 <auto_nav+0x21a4>
{
    nav_block = 5;
   13e98:	f24c 6371 	movw	r3, #50801	; 0xc671
   13e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ea0:	2205      	movs	r2, #5
   13ea2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13ea4:	f24c 3300 	movw	r3, #49920	; 0xc300
   13ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eac:	781b      	ldrb	r3, [r3, #0]
   13eae:	2b00      	cmp	r3, #0
   13eb0:	d007      	beq.n	13ec2 <auto_nav+0x1912>
   13eb2:	f24c 3300 	movw	r3, #49920	; 0xc300
   13eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eba:	2200      	movs	r2, #0
   13ebc:	701a      	strb	r2, [r3, #0]
   13ebe:	2301      	movs	r3, #1
   13ec0:	e000      	b.n	13ec4 <auto_nav+0x1914>
   13ec2:	2300      	movs	r3, #0
   13ec4:	2b00      	cmp	r3, #0
   13ec6:	d043      	beq.n	13f50 <auto_nav+0x19a0>
   13ec8:	f24c 6371 	movw	r3, #50801	; 0xc671
   13ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed0:	2201      	movs	r2, #1
   13ed2:	701a      	strb	r2, [r3, #0]
   13ed4:	f24c 6370 	movw	r3, #50800	; 0xc670
   13ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13edc:	2200      	movs	r2, #0
   13ede:	701a      	strb	r2, [r3, #0]
   13ee0:	f24c 6386 	movw	r3, #50822	; 0xc686
   13ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ee8:	2200      	movs	r2, #0
   13eea:	801a      	strh	r2, [r3, #0]
   13eec:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ef4:	681a      	ldr	r2, [r3, #0]
   13ef6:	f24c 6374 	movw	r3, #50804	; 0xc674
   13efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13efe:	601a      	str	r2, [r3, #0]
   13f00:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f08:	681a      	ldr	r2, [r3, #0]
   13f0a:	f24c 6378 	movw	r3, #50808	; 0xc678
   13f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f12:	601a      	str	r2, [r3, #0]
   13f14:	f24c 6384 	movw	r3, #50820	; 0xc684
   13f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f1c:	2200      	movs	r2, #0
   13f1e:	801a      	strh	r2, [r3, #0]
   13f20:	f24c 6388 	movw	r3, #50824	; 0xc688
   13f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f28:	f04f 0200 	mov.w	r2, #0
   13f2c:	601a      	str	r2, [r3, #0]
   13f2e:	f000 bc11 	b.w	14754 <auto_nav+0x21a4>
   13f32:	bf00      	nop
   13f34:	f3af 8000 	nop.w
   13f38:	54442d18 	.word	0x54442d18
   13f3c:	3ff921fb 	.word	0x3ff921fb
   13f40:	00000000 	.word	0x00000000
   13f44:	4062c000 	.word	0x4062c000
   13f48:	54442d18 	.word	0x54442d18
   13f4c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13f50:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f58:	781b      	ldrb	r3, [r3, #0]
   13f5a:	2b00      	cmp	r3, #0
   13f5c:	d133      	bne.n	13fc6 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13f5e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f66:	2200      	movs	r2, #0
   13f68:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13f6a:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f72:	781b      	ldrb	r3, [r3, #0]
   13f74:	3301      	adds	r3, #1
   13f76:	b2da      	uxtb	r2, r3
   13f78:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f80:	701a      	strb	r2, [r3, #0]
   13f82:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f8a:	681a      	ldr	r2, [r3, #0]
   13f8c:	f24c 6374 	movw	r3, #50804	; 0xc674
   13f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f94:	601a      	str	r2, [r3, #0]
   13f96:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f9e:	681a      	ldr	r2, [r3, #0]
   13fa0:	f24c 6378 	movw	r3, #50808	; 0xc678
   13fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fa8:	601a      	str	r2, [r3, #0]
   13faa:	f24c 6384 	movw	r3, #50820	; 0xc684
   13fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb2:	2200      	movs	r2, #0
   13fb4:	801a      	strh	r2, [r3, #0]
   13fb6:	f24c 6388 	movw	r3, #50824	; 0xc688
   13fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fbe:	f04f 0200 	mov.w	r2, #0
   13fc2:	601a      	str	r2, [r3, #0]
   13fc4:	e3c6      	b.n	14754 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13fc6:	f24c 6370 	movw	r3, #50800	; 0xc670
   13fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fce:	781b      	ldrb	r3, [r3, #0]
   13fd0:	2b01      	cmp	r3, #1
   13fd2:	f040 81b5 	bne.w	14340 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13fd6:	f24c 6370 	movw	r3, #50800	; 0xc670
   13fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fde:	2201      	movs	r2, #1
   13fe0:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13fe2:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fea:	2200      	movs	r2, #0
   13fec:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13fee:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ff6:	f04f 0200 	mov.w	r2, #0
   13ffa:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13ffc:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14004:	2203      	movs	r2, #3
   14006:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   14008:	f240 5378 	movw	r3, #1400	; 0x578
   1400c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14010:	695a      	ldr	r2, [r3, #20]
   14012:	f240 5374 	movw	r3, #1396	; 0x574
   14016:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1401a:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   1401c:	f24c 6364 	movw	r3, #50788	; 0xc664
   14020:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14024:	f04f 0200 	mov.w	r2, #0
   14028:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   1402a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1402e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14032:	681a      	ldr	r2, [r3, #0]
   14034:	f240 5378 	movw	r3, #1400	; 0x578
   14038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1403c:	691b      	ldr	r3, [r3, #16]
   1403e:	4610      	mov	r0, r2
   14040:	4619      	mov	r1, r3
   14042:	f004 f8fb 	bl	1823c <__aeabi_fsub>
   14046:	4603      	mov	r3, r0
   14048:	4618      	mov	r0, r3
   1404a:	f003 fd6d 	bl	17b28 <__aeabi_f2d>
   1404e:	4604      	mov	r4, r0
   14050:	460d      	mov	r5, r1
   14052:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1405a:	681a      	ldr	r2, [r3, #0]
   1405c:	f240 5378 	movw	r3, #1400	; 0x578
   14060:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14064:	68db      	ldr	r3, [r3, #12]
   14066:	4610      	mov	r0, r2
   14068:	4619      	mov	r1, r3
   1406a:	f004 f8e7 	bl	1823c <__aeabi_fsub>
   1406e:	4603      	mov	r3, r0
   14070:	4618      	mov	r0, r3
   14072:	f003 fd59 	bl	17b28 <__aeabi_f2d>
   14076:	4602      	mov	r2, r0
   14078:	460b      	mov	r3, r1
   1407a:	4620      	mov	r0, r4
   1407c:	4629      	mov	r1, r5
   1407e:	f001 fdb7 	bl	15bf0 <pp_atan2>
   14082:	4602      	mov	r2, r0
   14084:	460b      	mov	r3, r1
   14086:	4610      	mov	r0, r2
   14088:	4619      	mov	r1, r3
   1408a:	f004 f883 	bl	18194 <__aeabi_d2f>
   1408e:	4603      	mov	r3, r0
   14090:	60fb      	str	r3, [r7, #12]
   14092:	68f8      	ldr	r0, [r7, #12]
   14094:	f003 fd48 	bl	17b28 <__aeabi_f2d>
   14098:	4604      	mov	r4, r0
   1409a:	460d      	mov	r5, r1
   1409c:	f64c 1304 	movw	r3, #51460	; 0xc904
   140a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140a4:	681b      	ldr	r3, [r3, #0]
   140a6:	4618      	mov	r0, r3
   140a8:	f04f 0100 	mov.w	r1, #0
   140ac:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   140b0:	f004 f9ce 	bl	18450 <__aeabi_fmul>
   140b4:	4603      	mov	r3, r0
   140b6:	4618      	mov	r0, r3
   140b8:	f003 fd36 	bl	17b28 <__aeabi_f2d>
   140bc:	4602      	mov	r2, r0
   140be:	460b      	mov	r3, r1
   140c0:	f04f 0000 	mov.w	r0, #0
   140c4:	f04f 0100 	mov.w	r1, #0
   140c8:	f2c4 0114 	movt	r1, #16404	; 0x4014
   140cc:	f003 feaa 	bl	17e24 <__aeabi_ddiv>
   140d0:	4602      	mov	r2, r0
   140d2:	460b      	mov	r3, r1
   140d4:	4620      	mov	r0, r4
   140d6:	4629      	mov	r1, r5
   140d8:	f003 fbc8 	bl	1786c <__adddf3>
   140dc:	4602      	mov	r2, r0
   140de:	460b      	mov	r3, r1
   140e0:	4610      	mov	r0, r2
   140e2:	4619      	mov	r1, r3
   140e4:	f004 f856 	bl	18194 <__aeabi_d2f>
   140e8:	4603      	mov	r3, r0
   140ea:	60bb      	str	r3, [r7, #8]
   140ec:	f240 5378 	movw	r3, #1400	; 0x578
   140f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140f4:	68db      	ldr	r3, [r3, #12]
   140f6:	4618      	mov	r0, r3
   140f8:	f003 fd16 	bl	17b28 <__aeabi_f2d>
   140fc:	4604      	mov	r4, r0
   140fe:	460d      	mov	r5, r1
   14100:	68b8      	ldr	r0, [r7, #8]
   14102:	f003 fd11 	bl	17b28 <__aeabi_f2d>
   14106:	4602      	mov	r2, r0
   14108:	460b      	mov	r3, r1
   1410a:	4610      	mov	r0, r2
   1410c:	4619      	mov	r1, r3
   1410e:	a388      	add	r3, pc, #544	; (adr r3, 14330 <auto_nav+0x1d80>)
   14110:	e9d3 2300 	ldrd	r2, r3, [r3]
   14114:	f003 fbaa 	bl	1786c <__adddf3>
   14118:	4602      	mov	r2, r0
   1411a:	460b      	mov	r3, r1
   1411c:	4610      	mov	r0, r2
   1411e:	4619      	mov	r1, r3
   14120:	f001 fe26 	bl	15d70 <pp_sin>
   14124:	4602      	mov	r2, r0
   14126:	460b      	mov	r3, r1
   14128:	4610      	mov	r0, r2
   1412a:	4619      	mov	r1, r3
   1412c:	f04f 0200 	mov.w	r2, #0
   14130:	f04f 0300 	mov.w	r3, #0
   14134:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14138:	f003 fd4a 	bl	17bd0 <__aeabi_dmul>
   1413c:	4602      	mov	r2, r0
   1413e:	460b      	mov	r3, r1
   14140:	4620      	mov	r0, r4
   14142:	4629      	mov	r1, r5
   14144:	f003 fb92 	bl	1786c <__adddf3>
   14148:	4602      	mov	r2, r0
   1414a:	460b      	mov	r3, r1
   1414c:	4610      	mov	r0, r2
   1414e:	4619      	mov	r1, r3
   14150:	f004 f820 	bl	18194 <__aeabi_d2f>
   14154:	4606      	mov	r6, r0
   14156:	f240 5378 	movw	r3, #1400	; 0x578
   1415a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1415e:	691b      	ldr	r3, [r3, #16]
   14160:	4618      	mov	r0, r3
   14162:	f003 fce1 	bl	17b28 <__aeabi_f2d>
   14166:	4604      	mov	r4, r0
   14168:	460d      	mov	r5, r1
   1416a:	68b8      	ldr	r0, [r7, #8]
   1416c:	f003 fcdc 	bl	17b28 <__aeabi_f2d>
   14170:	4602      	mov	r2, r0
   14172:	460b      	mov	r3, r1
   14174:	4610      	mov	r0, r2
   14176:	4619      	mov	r1, r3
   14178:	f001 fdfa 	bl	15d70 <pp_sin>
   1417c:	4602      	mov	r2, r0
   1417e:	460b      	mov	r3, r1
   14180:	4610      	mov	r0, r2
   14182:	4619      	mov	r1, r3
   14184:	f04f 0200 	mov.w	r2, #0
   14188:	f04f 0300 	mov.w	r3, #0
   1418c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14190:	f003 fd1e 	bl	17bd0 <__aeabi_dmul>
   14194:	4602      	mov	r2, r0
   14196:	460b      	mov	r3, r1
   14198:	4620      	mov	r0, r4
   1419a:	4629      	mov	r1, r5
   1419c:	f003 fb66 	bl	1786c <__adddf3>
   141a0:	4602      	mov	r2, r0
   141a2:	460b      	mov	r3, r1
   141a4:	4610      	mov	r0, r2
   141a6:	4619      	mov	r1, r3
   141a8:	f003 fff4 	bl	18194 <__aeabi_d2f>
   141ac:	4603      	mov	r3, r0
   141ae:	4630      	mov	r0, r6
   141b0:	4619      	mov	r1, r3
   141b2:	f000 fbc1 	bl	14938 <fly_to_xy>
   141b6:	68b8      	ldr	r0, [r7, #8]
   141b8:	f003 fcb6 	bl	17b28 <__aeabi_f2d>
   141bc:	4602      	mov	r2, r0
   141be:	460b      	mov	r3, r1
   141c0:	a15b      	add	r1, pc, #364	; (adr r1, 14330 <auto_nav+0x1d80>)
   141c2:	e9d1 0100 	ldrd	r0, r1, [r1]
   141c6:	f003 fb4f 	bl	17868 <__aeabi_dsub>
   141ca:	4602      	mov	r2, r0
   141cc:	460b      	mov	r3, r1
   141ce:	4610      	mov	r0, r2
   141d0:	4619      	mov	r1, r3
   141d2:	a359      	add	r3, pc, #356	; (adr r3, 14338 <auto_nav+0x1d88>)
   141d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   141d8:	f003 fe24 	bl	17e24 <__aeabi_ddiv>
   141dc:	4602      	mov	r2, r0
   141de:	460b      	mov	r3, r1
   141e0:	4610      	mov	r0, r2
   141e2:	4619      	mov	r1, r3
   141e4:	f04f 0200 	mov.w	r2, #0
   141e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   141ec:	f2c4 0366 	movt	r3, #16486	; 0x4066
   141f0:	f003 fcee 	bl	17bd0 <__aeabi_dmul>
   141f4:	4602      	mov	r2, r0
   141f6:	460b      	mov	r3, r1
   141f8:	4610      	mov	r0, r2
   141fa:	4619      	mov	r1, r3
   141fc:	f003 ffca 	bl	18194 <__aeabi_d2f>
   14200:	4602      	mov	r2, r0
   14202:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1420a:	601a      	str	r2, [r3, #0]
   1420c:	e012      	b.n	14234 <auto_nav+0x1c84>
   1420e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14216:	681b      	ldr	r3, [r3, #0]
   14218:	4618      	mov	r0, r3
   1421a:	f04f 0100 	mov.w	r1, #0
   1421e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14222:	f004 f80d 	bl	18240 <__addsf3>
   14226:	4603      	mov	r3, r0
   14228:	461a      	mov	r2, r3
   1422a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1422e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14232:	601a      	str	r2, [r3, #0]
   14234:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1423c:	681b      	ldr	r3, [r3, #0]
   1423e:	4618      	mov	r0, r3
   14240:	f04f 0100 	mov.w	r1, #0
   14244:	f004 faa2 	bl	1878c <__aeabi_fcmplt>
   14248:	4603      	mov	r3, r0
   1424a:	2b00      	cmp	r3, #0
   1424c:	d1df      	bne.n	1420e <auto_nav+0x1c5e>
   1424e:	e012      	b.n	14276 <auto_nav+0x1cc6>
   14250:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14258:	681b      	ldr	r3, [r3, #0]
   1425a:	4618      	mov	r0, r3
   1425c:	f04f 0100 	mov.w	r1, #0
   14260:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14264:	f003 ffea 	bl	1823c <__aeabi_fsub>
   14268:	4603      	mov	r3, r0
   1426a:	461a      	mov	r2, r3
   1426c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14274:	601a      	str	r2, [r3, #0]
   14276:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1427a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1427e:	681b      	ldr	r3, [r3, #0]
   14280:	4618      	mov	r0, r3
   14282:	f04f 0100 	mov.w	r1, #0
   14286:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1428a:	f004 fa93 	bl	187b4 <__aeabi_fcmpge>
   1428e:	4603      	mov	r3, r0
   14290:	2b00      	cmp	r3, #0
   14292:	d1dd      	bne.n	14250 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   14294:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1429c:	681b      	ldr	r3, [r3, #0]
   1429e:	4618      	mov	r0, r3
   142a0:	f04f 0100 	mov.w	r1, #0
   142a4:	f004 fa90 	bl	187c8 <__aeabi_fcmpgt>
   142a8:	4603      	mov	r3, r0
   142aa:	2b00      	cmp	r3, #0
   142ac:	d100      	bne.n	142b0 <auto_nav+0x1d00>
        return;
   142ae:	e251      	b.n	14754 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   142b0:	f24c 638c 	movw	r3, #50828	; 0xc68c
   142b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142b8:	681b      	ldr	r3, [r3, #0]
   142ba:	4618      	mov	r0, r3
   142bc:	f04f 0100 	mov.w	r1, #0
   142c0:	f2c4 1120 	movt	r1, #16672	; 0x4120
   142c4:	f004 fa62 	bl	1878c <__aeabi_fcmplt>
   142c8:	4603      	mov	r3, r0
   142ca:	2b00      	cmp	r3, #0
   142cc:	d100      	bne.n	142d0 <auto_nav+0x1d20>
        return;
   142ce:	e241      	b.n	14754 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   142d0:	f24c 6370 	movw	r3, #50800	; 0xc670
   142d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142d8:	781b      	ldrb	r3, [r3, #0]
   142da:	3301      	adds	r3, #1
   142dc:	b2da      	uxtb	r2, r3
   142de:	f24c 6370 	movw	r3, #50800	; 0xc670
   142e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142e6:	701a      	strb	r2, [r3, #0]
   142e8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   142ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142f0:	681a      	ldr	r2, [r3, #0]
   142f2:	f24c 6374 	movw	r3, #50804	; 0xc674
   142f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142fa:	601a      	str	r2, [r3, #0]
   142fc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14304:	681a      	ldr	r2, [r3, #0]
   14306:	f24c 6378 	movw	r3, #50808	; 0xc678
   1430a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1430e:	601a      	str	r2, [r3, #0]
   14310:	f24c 6384 	movw	r3, #50820	; 0xc684
   14314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14318:	2200      	movs	r2, #0
   1431a:	801a      	strh	r2, [r3, #0]
   1431c:	f24c 6388 	movw	r3, #50824	; 0xc688
   14320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14324:	f04f 0200 	mov.w	r2, #0
   14328:	601a      	str	r2, [r3, #0]
   1432a:	e213      	b.n	14754 <auto_nav+0x21a4>
   1432c:	f3af 8000 	nop.w
   14330:	54442d18 	.word	0x54442d18
   14334:	3ff921fb 	.word	0x3ff921fb
   14338:	54442d18 	.word	0x54442d18
   1433c:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   14340:	f24c 6370 	movw	r3, #50800	; 0xc670
   14344:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14348:	781b      	ldrb	r3, [r3, #0]
   1434a:	2b02      	cmp	r3, #2
   1434c:	f040 81ad 	bne.w	146aa <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14350:	f24c 6370 	movw	r3, #50800	; 0xc670
   14354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14358:	2202      	movs	r2, #2
   1435a:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   1435c:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   14360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14364:	2200      	movs	r2, #0
   14366:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14368:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1436c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14370:	f04f 0200 	mov.w	r2, #0
   14374:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14376:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   1437a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1437e:	2203      	movs	r2, #3
   14380:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   14382:	f240 5378 	movw	r3, #1400	; 0x578
   14386:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1438a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1438c:	f240 5374 	movw	r3, #1396	; 0x574
   14390:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14394:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   14396:	f24c 6364 	movw	r3, #50788	; 0xc664
   1439a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1439e:	f04f 0200 	mov.w	r2, #0
   143a2:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   143a4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   143a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ac:	681a      	ldr	r2, [r3, #0]
   143ae:	f240 5378 	movw	r3, #1400	; 0x578
   143b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   143b8:	4610      	mov	r0, r2
   143ba:	4619      	mov	r1, r3
   143bc:	f003 ff3e 	bl	1823c <__aeabi_fsub>
   143c0:	4603      	mov	r3, r0
   143c2:	4618      	mov	r0, r3
   143c4:	f003 fbb0 	bl	17b28 <__aeabi_f2d>
   143c8:	4604      	mov	r4, r0
   143ca:	460d      	mov	r5, r1
   143cc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   143d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143d4:	681a      	ldr	r2, [r3, #0]
   143d6:	f240 5378 	movw	r3, #1400	; 0x578
   143da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   143e0:	4610      	mov	r0, r2
   143e2:	4619      	mov	r1, r3
   143e4:	f003 ff2a 	bl	1823c <__aeabi_fsub>
   143e8:	4603      	mov	r3, r0
   143ea:	4618      	mov	r0, r3
   143ec:	f003 fb9c 	bl	17b28 <__aeabi_f2d>
   143f0:	4602      	mov	r2, r0
   143f2:	460b      	mov	r3, r1
   143f4:	4620      	mov	r0, r4
   143f6:	4629      	mov	r1, r5
   143f8:	f001 fbfa 	bl	15bf0 <pp_atan2>
   143fc:	4602      	mov	r2, r0
   143fe:	460b      	mov	r3, r1
   14400:	4610      	mov	r0, r2
   14402:	4619      	mov	r1, r3
   14404:	f003 fec6 	bl	18194 <__aeabi_d2f>
   14408:	4603      	mov	r3, r0
   1440a:	607b      	str	r3, [r7, #4]
   1440c:	6878      	ldr	r0, [r7, #4]
   1440e:	f003 fb8b 	bl	17b28 <__aeabi_f2d>
   14412:	4604      	mov	r4, r0
   14414:	460d      	mov	r5, r1
   14416:	f64c 1304 	movw	r3, #51460	; 0xc904
   1441a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1441e:	681b      	ldr	r3, [r3, #0]
   14420:	4618      	mov	r0, r3
   14422:	f04f 0100 	mov.w	r1, #0
   14426:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1442a:	f004 f811 	bl	18450 <__aeabi_fmul>
   1442e:	4603      	mov	r3, r0
   14430:	4618      	mov	r0, r3
   14432:	f003 fb79 	bl	17b28 <__aeabi_f2d>
   14436:	4602      	mov	r2, r0
   14438:	460b      	mov	r3, r1
   1443a:	f04f 0000 	mov.w	r0, #0
   1443e:	f04f 0100 	mov.w	r1, #0
   14442:	f2c4 0114 	movt	r1, #16404	; 0x4014
   14446:	f003 fced 	bl	17e24 <__aeabi_ddiv>
   1444a:	4602      	mov	r2, r0
   1444c:	460b      	mov	r3, r1
   1444e:	4620      	mov	r0, r4
   14450:	4629      	mov	r1, r5
   14452:	f003 fa0b 	bl	1786c <__adddf3>
   14456:	4602      	mov	r2, r0
   14458:	460b      	mov	r3, r1
   1445a:	4610      	mov	r0, r2
   1445c:	4619      	mov	r1, r3
   1445e:	f003 fe99 	bl	18194 <__aeabi_d2f>
   14462:	4603      	mov	r3, r0
   14464:	603b      	str	r3, [r7, #0]
   14466:	f240 5378 	movw	r3, #1400	; 0x578
   1446a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14470:	4618      	mov	r0, r3
   14472:	f003 fb59 	bl	17b28 <__aeabi_f2d>
   14476:	4604      	mov	r4, r0
   14478:	460d      	mov	r5, r1
   1447a:	6838      	ldr	r0, [r7, #0]
   1447c:	f003 fb54 	bl	17b28 <__aeabi_f2d>
   14480:	4602      	mov	r2, r0
   14482:	460b      	mov	r3, r1
   14484:	4610      	mov	r0, r2
   14486:	4619      	mov	r1, r3
   14488:	a3b5      	add	r3, pc, #724	; (adr r3, 14760 <auto_nav+0x21b0>)
   1448a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1448e:	f003 f9ed 	bl	1786c <__adddf3>
   14492:	4602      	mov	r2, r0
   14494:	460b      	mov	r3, r1
   14496:	4610      	mov	r0, r2
   14498:	4619      	mov	r1, r3
   1449a:	f001 fc69 	bl	15d70 <pp_sin>
   1449e:	4602      	mov	r2, r0
   144a0:	460b      	mov	r3, r1
   144a2:	4610      	mov	r0, r2
   144a4:	4619      	mov	r1, r3
   144a6:	f04f 0200 	mov.w	r2, #0
   144aa:	f04f 0300 	mov.w	r3, #0
   144ae:	f2c4 0359 	movt	r3, #16473	; 0x4059
   144b2:	f003 fb8d 	bl	17bd0 <__aeabi_dmul>
   144b6:	4602      	mov	r2, r0
   144b8:	460b      	mov	r3, r1
   144ba:	4620      	mov	r0, r4
   144bc:	4629      	mov	r1, r5
   144be:	f003 f9d5 	bl	1786c <__adddf3>
   144c2:	4602      	mov	r2, r0
   144c4:	460b      	mov	r3, r1
   144c6:	4610      	mov	r0, r2
   144c8:	4619      	mov	r1, r3
   144ca:	f003 fe63 	bl	18194 <__aeabi_d2f>
   144ce:	4606      	mov	r6, r0
   144d0:	f240 5378 	movw	r3, #1400	; 0x578
   144d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   144da:	4618      	mov	r0, r3
   144dc:	f003 fb24 	bl	17b28 <__aeabi_f2d>
   144e0:	4604      	mov	r4, r0
   144e2:	460d      	mov	r5, r1
   144e4:	6838      	ldr	r0, [r7, #0]
   144e6:	f003 fb1f 	bl	17b28 <__aeabi_f2d>
   144ea:	4602      	mov	r2, r0
   144ec:	460b      	mov	r3, r1
   144ee:	4610      	mov	r0, r2
   144f0:	4619      	mov	r1, r3
   144f2:	f001 fc3d 	bl	15d70 <pp_sin>
   144f6:	4602      	mov	r2, r0
   144f8:	460b      	mov	r3, r1
   144fa:	4610      	mov	r0, r2
   144fc:	4619      	mov	r1, r3
   144fe:	f04f 0200 	mov.w	r2, #0
   14502:	f04f 0300 	mov.w	r3, #0
   14506:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1450a:	f003 fb61 	bl	17bd0 <__aeabi_dmul>
   1450e:	4602      	mov	r2, r0
   14510:	460b      	mov	r3, r1
   14512:	4620      	mov	r0, r4
   14514:	4629      	mov	r1, r5
   14516:	f003 f9a9 	bl	1786c <__adddf3>
   1451a:	4602      	mov	r2, r0
   1451c:	460b      	mov	r3, r1
   1451e:	4610      	mov	r0, r2
   14520:	4619      	mov	r1, r3
   14522:	f003 fe37 	bl	18194 <__aeabi_d2f>
   14526:	4603      	mov	r3, r0
   14528:	4630      	mov	r0, r6
   1452a:	4619      	mov	r1, r3
   1452c:	f000 fa04 	bl	14938 <fly_to_xy>
   14530:	6838      	ldr	r0, [r7, #0]
   14532:	f003 faf9 	bl	17b28 <__aeabi_f2d>
   14536:	4602      	mov	r2, r0
   14538:	460b      	mov	r3, r1
   1453a:	a189      	add	r1, pc, #548	; (adr r1, 14760 <auto_nav+0x21b0>)
   1453c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14540:	f003 f992 	bl	17868 <__aeabi_dsub>
   14544:	4602      	mov	r2, r0
   14546:	460b      	mov	r3, r1
   14548:	4610      	mov	r0, r2
   1454a:	4619      	mov	r1, r3
   1454c:	a386      	add	r3, pc, #536	; (adr r3, 14768 <auto_nav+0x21b8>)
   1454e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14552:	f003 fc67 	bl	17e24 <__aeabi_ddiv>
   14556:	4602      	mov	r2, r0
   14558:	460b      	mov	r3, r1
   1455a:	4610      	mov	r0, r2
   1455c:	4619      	mov	r1, r3
   1455e:	f04f 0200 	mov.w	r2, #0
   14562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14566:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1456a:	f003 fb31 	bl	17bd0 <__aeabi_dmul>
   1456e:	4602      	mov	r2, r0
   14570:	460b      	mov	r3, r1
   14572:	4610      	mov	r0, r2
   14574:	4619      	mov	r1, r3
   14576:	f003 fe0d 	bl	18194 <__aeabi_d2f>
   1457a:	4602      	mov	r2, r0
   1457c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14584:	601a      	str	r2, [r3, #0]
   14586:	e012      	b.n	145ae <auto_nav+0x1ffe>
   14588:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1458c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14590:	681b      	ldr	r3, [r3, #0]
   14592:	4618      	mov	r0, r3
   14594:	f04f 0100 	mov.w	r1, #0
   14598:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1459c:	f003 fe50 	bl	18240 <__addsf3>
   145a0:	4603      	mov	r3, r0
   145a2:	461a      	mov	r2, r3
   145a4:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145ac:	601a      	str	r2, [r3, #0]
   145ae:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145b6:	681b      	ldr	r3, [r3, #0]
   145b8:	4618      	mov	r0, r3
   145ba:	f04f 0100 	mov.w	r1, #0
   145be:	f004 f8e5 	bl	1878c <__aeabi_fcmplt>
   145c2:	4603      	mov	r3, r0
   145c4:	2b00      	cmp	r3, #0
   145c6:	d1df      	bne.n	14588 <auto_nav+0x1fd8>
   145c8:	e012      	b.n	145f0 <auto_nav+0x2040>
   145ca:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145d2:	681b      	ldr	r3, [r3, #0]
   145d4:	4618      	mov	r0, r3
   145d6:	f04f 0100 	mov.w	r1, #0
   145da:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   145de:	f003 fe2d 	bl	1823c <__aeabi_fsub>
   145e2:	4603      	mov	r3, r0
   145e4:	461a      	mov	r2, r3
   145e6:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145ee:	601a      	str	r2, [r3, #0]
   145f0:	f24c 638c 	movw	r3, #50828	; 0xc68c
   145f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145f8:	681b      	ldr	r3, [r3, #0]
   145fa:	4618      	mov	r0, r3
   145fc:	f04f 0100 	mov.w	r1, #0
   14600:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14604:	f004 f8d6 	bl	187b4 <__aeabi_fcmpge>
   14608:	4603      	mov	r3, r0
   1460a:	2b00      	cmp	r3, #0
   1460c:	d1dd      	bne.n	145ca <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   1460e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14616:	681b      	ldr	r3, [r3, #0]
   14618:	4618      	mov	r0, r3
   1461a:	f04f 0100 	mov.w	r1, #0
   1461e:	f2c4 3134 	movt	r1, #17204	; 0x4334
   14622:	f004 f8d1 	bl	187c8 <__aeabi_fcmpgt>
   14626:	4603      	mov	r3, r0
   14628:	2b00      	cmp	r3, #0
   1462a:	d100      	bne.n	1462e <auto_nav+0x207e>
          return;
   1462c:	e092      	b.n	14754 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   1462e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14636:	681b      	ldr	r3, [r3, #0]
   14638:	4618      	mov	r0, r3
   1463a:	f04f 0100 	mov.w	r1, #0
   1463e:	f2c4 313e 	movt	r1, #17214	; 0x433e
   14642:	f004 f8a3 	bl	1878c <__aeabi_fcmplt>
   14646:	4603      	mov	r3, r0
   14648:	2b00      	cmp	r3, #0
   1464a:	d100      	bne.n	1464e <auto_nav+0x209e>
          return;
   1464c:	e082      	b.n	14754 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   1464e:	f24c 6370 	movw	r3, #50800	; 0xc670
   14652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14656:	781b      	ldrb	r3, [r3, #0]
   14658:	3301      	adds	r3, #1
   1465a:	b2da      	uxtb	r2, r3
   1465c:	f24c 6370 	movw	r3, #50800	; 0xc670
   14660:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14664:	701a      	strb	r2, [r3, #0]
   14666:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1466a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1466e:	681a      	ldr	r2, [r3, #0]
   14670:	f24c 6374 	movw	r3, #50804	; 0xc674
   14674:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14678:	601a      	str	r2, [r3, #0]
   1467a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1467e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14682:	681a      	ldr	r2, [r3, #0]
   14684:	f24c 6378 	movw	r3, #50808	; 0xc678
   14688:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1468c:	601a      	str	r2, [r3, #0]
   1468e:	f24c 6384 	movw	r3, #50820	; 0xc684
   14692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14696:	2200      	movs	r2, #0
   14698:	801a      	strh	r2, [r3, #0]
   1469a:	f24c 6388 	movw	r3, #50824	; 0xc688
   1469e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146a2:	f04f 0200 	mov.w	r2, #0
   146a6:	601a      	str	r2, [r3, #0]
   146a8:	e054      	b.n	14754 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   146aa:	f24c 6370 	movw	r3, #50800	; 0xc670
   146ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b2:	781b      	ldrb	r3, [r3, #0]
   146b4:	2b03      	cmp	r3, #3
   146b6:	d106      	bne.n	146c6 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   146b8:	f24c 6370 	movw	r3, #50800	; 0xc670
   146bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146c0:	2203      	movs	r2, #3
   146c2:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   146c4:	e44b      	b.n	13f5e <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   146c6:	f24c 6370 	movw	r3, #50800	; 0xc670
   146ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146ce:	781b      	ldrb	r3, [r3, #0]
   146d0:	2b04      	cmp	r3, #4
   146d2:	d13f      	bne.n	14754 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   146d4:	f24c 6370 	movw	r3, #50800	; 0xc670
   146d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146dc:	2204      	movs	r2, #4
   146de:	701a      	strb	r2, [r3, #0]
        NextBlock()
   146e0:	f24c 6371 	movw	r3, #50801	; 0xc671
   146e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146e8:	781b      	ldrb	r3, [r3, #0]
   146ea:	3301      	adds	r3, #1
   146ec:	b2da      	uxtb	r2, r3
   146ee:	f24c 6371 	movw	r3, #50801	; 0xc671
   146f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146f6:	701a      	strb	r2, [r3, #0]
   146f8:	f24c 6370 	movw	r3, #50800	; 0xc670
   146fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14700:	2200      	movs	r2, #0
   14702:	701a      	strb	r2, [r3, #0]
   14704:	f24c 6386 	movw	r3, #50822	; 0xc686
   14708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1470c:	2200      	movs	r2, #0
   1470e:	801a      	strh	r2, [r3, #0]
   14710:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14718:	681a      	ldr	r2, [r3, #0]
   1471a:	f24c 6374 	movw	r3, #50804	; 0xc674
   1471e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14722:	601a      	str	r2, [r3, #0]
   14724:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1472c:	681a      	ldr	r2, [r3, #0]
   1472e:	f24c 6378 	movw	r3, #50808	; 0xc678
   14732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14736:	601a      	str	r2, [r3, #0]
   14738:	f24c 6384 	movw	r3, #50820	; 0xc684
   1473c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14740:	2200      	movs	r2, #0
   14742:	801a      	strh	r2, [r3, #0]
   14744:	f24c 6388 	movw	r3, #50824	; 0xc688
   14748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1474c:	f04f 0200 	mov.w	r2, #0
   14750:	601a      	str	r2, [r3, #0]
   14752:	bf00      	nop
    else { }
}
else { }

//#endif
}
   14754:	372c      	adds	r7, #44	; 0x2c
   14756:	46bd      	mov	sp, r7
   14758:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1475a:	bf00      	nop
   1475c:	f3af 8000 	nop.w
   14760:	54442d18 	.word	0x54442d18
   14764:	3ff921fb 	.word	0x3ff921fb
   14768:	54442d18 	.word	0x54442d18
   1476c:	400921fb 	.word	0x400921fb

00014770 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14770:	b590      	push	{r4, r7, lr}
   14772:	b087      	sub	sp, #28
   14774:	af00      	add	r7, sp, #0
   14776:	4603      	mov	r3, r0
   14778:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   1477a:	79f9      	ldrb	r1, [r7, #7]
   1477c:	f240 5278 	movw	r2, #1400	; 0x578
   14780:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14784:	460b      	mov	r3, r1
   14786:	005b      	lsls	r3, r3, #1
   14788:	440b      	add	r3, r1
   1478a:	009b      	lsls	r3, r3, #2
   1478c:	4413      	add	r3, r2
   1478e:	681a      	ldr	r2, [r3, #0]
   14790:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14798:	681b      	ldr	r3, [r3, #0]
   1479a:	4610      	mov	r0, r2
   1479c:	4619      	mov	r1, r3
   1479e:	f003 fd4d 	bl	1823c <__aeabi_fsub>
   147a2:	4603      	mov	r3, r0
   147a4:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   147a6:	79f9      	ldrb	r1, [r7, #7]
   147a8:	f240 5278 	movw	r2, #1400	; 0x578
   147ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147b0:	460b      	mov	r3, r1
   147b2:	005b      	lsls	r3, r3, #1
   147b4:	440b      	add	r3, r1
   147b6:	009b      	lsls	r3, r3, #2
   147b8:	4413      	add	r3, r2
   147ba:	3304      	adds	r3, #4
   147bc:	681a      	ldr	r2, [r3, #0]
   147be:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   147c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147c6:	681b      	ldr	r3, [r3, #0]
   147c8:	4610      	mov	r0, r2
   147ca:	4619      	mov	r1, r3
   147cc:	f003 fd36 	bl	1823c <__aeabi_fsub>
   147d0:	4603      	mov	r3, r0
   147d2:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   147d4:	6978      	ldr	r0, [r7, #20]
   147d6:	6979      	ldr	r1, [r7, #20]
   147d8:	f003 fe3a 	bl	18450 <__aeabi_fmul>
   147dc:	4603      	mov	r3, r0
   147de:	461c      	mov	r4, r3
   147e0:	6938      	ldr	r0, [r7, #16]
   147e2:	6939      	ldr	r1, [r7, #16]
   147e4:	f003 fe34 	bl	18450 <__aeabi_fmul>
   147e8:	4603      	mov	r3, r0
   147ea:	4620      	mov	r0, r4
   147ec:	4619      	mov	r1, r3
   147ee:	f003 fd27 	bl	18240 <__addsf3>
   147f2:	4603      	mov	r3, r0
   147f4:	461a      	mov	r2, r3
   147f6:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   147fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147fe:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14800:	f64c 1304 	movw	r3, #51460	; 0xc904
   14804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14808:	681b      	ldr	r3, [r3, #0]
   1480a:	4618      	mov	r0, r3
   1480c:	f04f 0100 	mov.w	r1, #0
   14810:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   14814:	f003 fe1c 	bl	18450 <__aeabi_fmul>
   14818:	4603      	mov	r3, r0
   1481a:	461a      	mov	r2, r3
   1481c:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14824:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   14826:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   1482a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1482e:	681b      	ldr	r3, [r3, #0]
   14830:	4618      	mov	r0, r3
   14832:	f04f 0100 	mov.w	r1, #0
   14836:	f2c4 2120 	movt	r1, #16928	; 0x4220
   1483a:	f003 ffa7 	bl	1878c <__aeabi_fcmplt>
   1483e:	4603      	mov	r3, r0
   14840:	2b00      	cmp	r3, #0
   14842:	d004      	beq.n	1484e <approaching+0xde>
   14844:	f04f 0200 	mov.w	r2, #0
   14848:	f2c4 2220 	movt	r2, #16928	; 0x4220
   1484c:	e004      	b.n	14858 <approaching+0xe8>
   1484e:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14856:	681a      	ldr	r2, [r3, #0]
   14858:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   1485c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14860:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   14862:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1486a:	681a      	ldr	r2, [r3, #0]
   1486c:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14870:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14874:	681b      	ldr	r3, [r3, #0]
   14876:	4610      	mov	r0, r2
   14878:	4619      	mov	r1, r3
   1487a:	f003 fde9 	bl	18450 <__aeabi_fmul>
   1487e:	4603      	mov	r3, r0
   14880:	461a      	mov	r2, r3
   14882:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   14886:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1488a:	681b      	ldr	r3, [r3, #0]
   1488c:	4610      	mov	r0, r2
   1488e:	4619      	mov	r1, r3
   14890:	f003 ff9a 	bl	187c8 <__aeabi_fcmpgt>
   14894:	4603      	mov	r3, r0
   14896:	2b00      	cmp	r3, #0
   14898:	d001      	beq.n	1489e <approaching+0x12e>
    return TRUE;
   1489a:	2301      	movs	r3, #1
   1489c:	e048      	b.n	14930 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   1489e:	79f9      	ldrb	r1, [r7, #7]
   148a0:	f240 5278 	movw	r2, #1400	; 0x578
   148a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148a8:	460b      	mov	r3, r1
   148aa:	005b      	lsls	r3, r3, #1
   148ac:	440b      	add	r3, r1
   148ae:	009b      	lsls	r3, r3, #2
   148b0:	4413      	add	r3, r2
   148b2:	681a      	ldr	r2, [r3, #0]
   148b4:	f24c 6374 	movw	r3, #50804	; 0xc674
   148b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148bc:	681b      	ldr	r3, [r3, #0]
   148be:	4610      	mov	r0, r2
   148c0:	4619      	mov	r1, r3
   148c2:	f003 fcbb 	bl	1823c <__aeabi_fsub>
   148c6:	4603      	mov	r3, r0
   148c8:	4618      	mov	r0, r3
   148ca:	6979      	ldr	r1, [r7, #20]
   148cc:	f003 fdc0 	bl	18450 <__aeabi_fmul>
   148d0:	4603      	mov	r3, r0
   148d2:	461c      	mov	r4, r3
   148d4:	79f9      	ldrb	r1, [r7, #7]
   148d6:	f240 5278 	movw	r2, #1400	; 0x578
   148da:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148de:	460b      	mov	r3, r1
   148e0:	005b      	lsls	r3, r3, #1
   148e2:	440b      	add	r3, r1
   148e4:	009b      	lsls	r3, r3, #2
   148e6:	4413      	add	r3, r2
   148e8:	3304      	adds	r3, #4
   148ea:	681a      	ldr	r2, [r3, #0]
   148ec:	f24c 6378 	movw	r3, #50808	; 0xc678
   148f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148f4:	681b      	ldr	r3, [r3, #0]
   148f6:	4610      	mov	r0, r2
   148f8:	4619      	mov	r1, r3
   148fa:	f003 fc9f 	bl	1823c <__aeabi_fsub>
   148fe:	4603      	mov	r3, r0
   14900:	4618      	mov	r0, r3
   14902:	6939      	ldr	r1, [r7, #16]
   14904:	f003 fda4 	bl	18450 <__aeabi_fmul>
   14908:	4603      	mov	r3, r0
   1490a:	4620      	mov	r0, r4
   1490c:	4619      	mov	r1, r3
   1490e:	f003 fc97 	bl	18240 <__addsf3>
   14912:	4603      	mov	r3, r0
   14914:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   14916:	2301      	movs	r3, #1
   14918:	461c      	mov	r4, r3
   1491a:	68f8      	ldr	r0, [r7, #12]
   1491c:	f04f 0100 	mov.w	r1, #0
   14920:	f003 ff34 	bl	1878c <__aeabi_fcmplt>
   14924:	4603      	mov	r3, r0
   14926:	2b00      	cmp	r3, #0
   14928:	d101      	bne.n	1492e <approaching+0x1be>
   1492a:	2300      	movs	r3, #0
   1492c:	461c      	mov	r4, r3
   1492e:	b2e3      	uxtb	r3, r4
}
   14930:	4618      	mov	r0, r3
   14932:	371c      	adds	r7, #28
   14934:	46bd      	mov	sp, r7
   14936:	bd90      	pop	{r4, r7, pc}

00014938 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14938:	b5b0      	push	{r4, r5, r7, lr}
   1493a:	b082      	sub	sp, #8
   1493c:	af00      	add	r7, sp, #0
   1493e:	6078      	str	r0, [r7, #4]
   14940:	6039      	str	r1, [r7, #0]
  desired_x = x;
   14942:	f24c 6390 	movw	r3, #50832	; 0xc690
   14946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1494a:	687a      	ldr	r2, [r7, #4]
   1494c:	601a      	str	r2, [r3, #0]
  desired_y = y;
   1494e:	f24c 6394 	movw	r3, #50836	; 0xc694
   14952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14956:	683a      	ldr	r2, [r7, #0]
   14958:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   1495a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1495e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14962:	681b      	ldr	r3, [r3, #0]
   14964:	6838      	ldr	r0, [r7, #0]
   14966:	4619      	mov	r1, r3
   14968:	f003 fc68 	bl	1823c <__aeabi_fsub>
   1496c:	4603      	mov	r3, r0
   1496e:	4618      	mov	r0, r3
   14970:	f003 f8da 	bl	17b28 <__aeabi_f2d>
   14974:	4604      	mov	r4, r0
   14976:	460d      	mov	r5, r1
   14978:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1497c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14980:	681b      	ldr	r3, [r3, #0]
   14982:	6878      	ldr	r0, [r7, #4]
   14984:	4619      	mov	r1, r3
   14986:	f003 fc59 	bl	1823c <__aeabi_fsub>
   1498a:	4603      	mov	r3, r0
   1498c:	4618      	mov	r0, r3
   1498e:	f003 f8cb 	bl	17b28 <__aeabi_f2d>
   14992:	4602      	mov	r2, r0
   14994:	460b      	mov	r3, r1
   14996:	4620      	mov	r0, r4
   14998:	4629      	mov	r1, r5
   1499a:	f001 f929 	bl	15bf0 <pp_atan2>
   1499e:	4602      	mov	r2, r0
   149a0:	460b      	mov	r3, r1
   149a2:	a10b      	add	r1, pc, #44	; (adr r1, 149d0 <fly_to_xy+0x98>)
   149a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   149a8:	f002 ff5e 	bl	17868 <__aeabi_dsub>
   149ac:	4602      	mov	r2, r0
   149ae:	460b      	mov	r3, r1
   149b0:	4610      	mov	r0, r2
   149b2:	4619      	mov	r1, r3
   149b4:	f003 fbee 	bl	18194 <__aeabi_d2f>
   149b8:	4602      	mov	r2, r0
   149ba:	f24c 635c 	movw	r3, #50780	; 0xc65c
   149be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149c2:	601a      	str	r2, [r3, #0]
}
   149c4:	3708      	adds	r7, #8
   149c6:	46bd      	mov	sp, r7
   149c8:	bdb0      	pop	{r4, r5, r7, pc}
   149ca:	bf00      	nop
   149cc:	f3af 8000 	nop.w
   149d0:	54442d18 	.word	0x54442d18
   149d4:	3ff921fb 	.word	0x3ff921fb

000149d8 <fly_to>:

static void fly_to(uint8_t wp) { 
   149d8:	b580      	push	{r7, lr}
   149da:	b082      	sub	sp, #8
   149dc:	af00      	add	r7, sp, #0
   149de:	4603      	mov	r3, r0
   149e0:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   149e2:	79f9      	ldrb	r1, [r7, #7]
   149e4:	f240 5278 	movw	r2, #1400	; 0x578
   149e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149ec:	460b      	mov	r3, r1
   149ee:	005b      	lsls	r3, r3, #1
   149f0:	440b      	add	r3, r1
   149f2:	009b      	lsls	r3, r3, #2
   149f4:	4413      	add	r3, r2
   149f6:	6818      	ldr	r0, [r3, #0]
   149f8:	79f9      	ldrb	r1, [r7, #7]
   149fa:	f240 5278 	movw	r2, #1400	; 0x578
   149fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a02:	460b      	mov	r3, r1
   14a04:	005b      	lsls	r3, r3, #1
   14a06:	440b      	add	r3, r1
   14a08:	009b      	lsls	r3, r3, #2
   14a0a:	4413      	add	r3, r2
   14a0c:	3304      	adds	r3, #4
   14a0e:	681b      	ldr	r3, [r3, #0]
   14a10:	4619      	mov	r1, r3
   14a12:	f7ff ff91 	bl	14938 <fly_to_xy>
}
   14a16:	3708      	adds	r7, #8
   14a18:	46bd      	mov	sp, r7
   14a1a:	bd80      	pop	{r7, pc}

00014a1c <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   14a1c:	b5b0      	push	{r4, r5, r7, lr}
   14a1e:	b088      	sub	sp, #32
   14a20:	af00      	add	r7, sp, #0
   14a22:	4602      	mov	r2, r0
   14a24:	460b      	mov	r3, r1
   14a26:	71fa      	strb	r2, [r7, #7]
   14a28:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14a2a:	79f9      	ldrb	r1, [r7, #7]
   14a2c:	f240 5278 	movw	r2, #1400	; 0x578
   14a30:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a34:	460b      	mov	r3, r1
   14a36:	005b      	lsls	r3, r3, #1
   14a38:	440b      	add	r3, r1
   14a3a:	009b      	lsls	r3, r3, #2
   14a3c:	4413      	add	r3, r2
   14a3e:	681b      	ldr	r3, [r3, #0]
   14a40:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14a42:	79f9      	ldrb	r1, [r7, #7]
   14a44:	f240 5278 	movw	r2, #1400	; 0x578
   14a48:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a4c:	460b      	mov	r3, r1
   14a4e:	005b      	lsls	r3, r3, #1
   14a50:	440b      	add	r3, r1
   14a52:	009b      	lsls	r3, r3, #2
   14a54:	4413      	add	r3, r2
   14a56:	3304      	adds	r3, #4
   14a58:	681b      	ldr	r3, [r3, #0]
   14a5a:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14a5c:	79b9      	ldrb	r1, [r7, #6]
   14a5e:	f240 5278 	movw	r2, #1400	; 0x578
   14a62:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a66:	460b      	mov	r3, r1
   14a68:	005b      	lsls	r3, r3, #1
   14a6a:	440b      	add	r3, r1
   14a6c:	009b      	lsls	r3, r3, #2
   14a6e:	4413      	add	r3, r2
   14a70:	681b      	ldr	r3, [r3, #0]
   14a72:	4618      	mov	r0, r3
   14a74:	69f9      	ldr	r1, [r7, #28]
   14a76:	f003 fbe1 	bl	1823c <__aeabi_fsub>
   14a7a:	4603      	mov	r3, r0
   14a7c:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14a7e:	79b9      	ldrb	r1, [r7, #6]
   14a80:	f240 5278 	movw	r2, #1400	; 0x578
   14a84:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a88:	460b      	mov	r3, r1
   14a8a:	005b      	lsls	r3, r3, #1
   14a8c:	440b      	add	r3, r1
   14a8e:	009b      	lsls	r3, r3, #2
   14a90:	4413      	add	r3, r2
   14a92:	3304      	adds	r3, #4
   14a94:	681b      	ldr	r3, [r3, #0]
   14a96:	4618      	mov	r0, r3
   14a98:	69b9      	ldr	r1, [r7, #24]
   14a9a:	f003 fbcf 	bl	1823c <__aeabi_fsub>
   14a9e:	4603      	mov	r3, r0
   14aa0:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14aa2:	6978      	ldr	r0, [r7, #20]
   14aa4:	6979      	ldr	r1, [r7, #20]
   14aa6:	f003 fcd3 	bl	18450 <__aeabi_fmul>
   14aaa:	4603      	mov	r3, r0
   14aac:	461c      	mov	r4, r3
   14aae:	6938      	ldr	r0, [r7, #16]
   14ab0:	6939      	ldr	r1, [r7, #16]
   14ab2:	f003 fccd 	bl	18450 <__aeabi_fmul>
   14ab6:	4603      	mov	r3, r0
   14ab8:	4620      	mov	r0, r4
   14aba:	4619      	mov	r1, r3
   14abc:	f003 fbc0 	bl	18240 <__addsf3>
   14ac0:	4603      	mov	r3, r0
   14ac2:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14ac4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14acc:	681b      	ldr	r3, [r3, #0]
   14ace:	4618      	mov	r0, r3
   14ad0:	69f9      	ldr	r1, [r7, #28]
   14ad2:	f003 fbb3 	bl	1823c <__aeabi_fsub>
   14ad6:	4603      	mov	r3, r0
   14ad8:	4618      	mov	r0, r3
   14ada:	6979      	ldr	r1, [r7, #20]
   14adc:	f003 fcb8 	bl	18450 <__aeabi_fmul>
   14ae0:	4603      	mov	r3, r0
   14ae2:	461c      	mov	r4, r3
   14ae4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14aec:	681b      	ldr	r3, [r3, #0]
   14aee:	4618      	mov	r0, r3
   14af0:	69b9      	ldr	r1, [r7, #24]
   14af2:	f003 fba3 	bl	1823c <__aeabi_fsub>
   14af6:	4603      	mov	r3, r0
   14af8:	4618      	mov	r0, r3
   14afa:	6939      	ldr	r1, [r7, #16]
   14afc:	f003 fca8 	bl	18450 <__aeabi_fmul>
   14b00:	4603      	mov	r3, r0
   14b02:	4620      	mov	r0, r4
   14b04:	4619      	mov	r1, r3
   14b06:	f003 fb9b 	bl	18240 <__addsf3>
   14b0a:	4603      	mov	r3, r0
   14b0c:	4618      	mov	r0, r3
   14b0e:	68f9      	ldr	r1, [r7, #12]
   14b10:	f003 fd52 	bl	185b8 <__aeabi_fdiv>
   14b14:	4603      	mov	r3, r0
   14b16:	461a      	mov	r2, r3
   14b18:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b20:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14b22:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b2a:	681b      	ldr	r3, [r3, #0]
   14b2c:	4618      	mov	r0, r3
   14b2e:	f04f 0100 	mov.w	r1, #0
   14b32:	f003 fe3f 	bl	187b4 <__aeabi_fcmpge>
   14b36:	4603      	mov	r3, r0
   14b38:	2b00      	cmp	r3, #0
   14b3a:	d005      	beq.n	14b48 <route_to+0x12c>
   14b3c:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b44:	681a      	ldr	r2, [r3, #0]
   14b46:	e001      	b.n	14b4c <route_to+0x130>
   14b48:	f04f 0200 	mov.w	r2, #0
   14b4c:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b54:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14b56:	68f8      	ldr	r0, [r7, #12]
   14b58:	f002 ffe6 	bl	17b28 <__aeabi_f2d>
   14b5c:	4602      	mov	r2, r0
   14b5e:	460b      	mov	r3, r1
   14b60:	4610      	mov	r0, r2
   14b62:	4619      	mov	r1, r3
   14b64:	f001 f9f4 	bl	15f50 <pp_sqrt>
   14b68:	4602      	mov	r2, r0
   14b6a:	460b      	mov	r3, r1
   14b6c:	4610      	mov	r0, r2
   14b6e:	4619      	mov	r1, r3
   14b70:	f003 fb10 	bl	18194 <__aeabi_d2f>
   14b74:	4602      	mov	r2, r0
   14b76:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b7e:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14b80:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b88:	681b      	ldr	r3, [r3, #0]
   14b8a:	4618      	mov	r0, r3
   14b8c:	f002 ffcc 	bl	17b28 <__aeabi_f2d>
   14b90:	4604      	mov	r4, r0
   14b92:	460d      	mov	r5, r1
   14b94:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b9c:	681a      	ldr	r2, [r3, #0]
   14b9e:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ba6:	681b      	ldr	r3, [r3, #0]
   14ba8:	4610      	mov	r0, r2
   14baa:	4619      	mov	r1, r3
   14bac:	f003 fd04 	bl	185b8 <__aeabi_fdiv>
   14bb0:	4603      	mov	r3, r0
   14bb2:	4618      	mov	r0, r3
   14bb4:	f04f 0100 	mov.w	r1, #0
   14bb8:	f003 fdfc 	bl	187b4 <__aeabi_fcmpge>
   14bbc:	4603      	mov	r3, r0
   14bbe:	2b00      	cmp	r3, #0
   14bc0:	d014      	beq.n	14bec <route_to+0x1d0>
   14bc2:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bca:	681a      	ldr	r2, [r3, #0]
   14bcc:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bd4:	681b      	ldr	r3, [r3, #0]
   14bd6:	4610      	mov	r0, r2
   14bd8:	4619      	mov	r1, r3
   14bda:	f003 fced 	bl	185b8 <__aeabi_fdiv>
   14bde:	4603      	mov	r3, r0
   14be0:	4618      	mov	r0, r3
   14be2:	f002 ffa1 	bl	17b28 <__aeabi_f2d>
   14be6:	4602      	mov	r2, r0
   14be8:	460b      	mov	r3, r1
   14bea:	e003      	b.n	14bf4 <route_to+0x1d8>
   14bec:	f04f 0200 	mov.w	r2, #0
   14bf0:	f04f 0300 	mov.w	r3, #0
   14bf4:	4620      	mov	r0, r4
   14bf6:	4629      	mov	r1, r5
   14bf8:	f002 fe38 	bl	1786c <__adddf3>
   14bfc:	4602      	mov	r2, r0
   14bfe:	460b      	mov	r3, r1
   14c00:	4610      	mov	r0, r2
   14c02:	4619      	mov	r1, r3
   14c04:	f003 fac6 	bl	18194 <__aeabi_d2f>
   14c08:	4602      	mov	r2, r0
   14c0a:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c12:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14c14:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c1c:	681b      	ldr	r3, [r3, #0]
   14c1e:	4618      	mov	r0, r3
   14c20:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14c24:	f003 fdc6 	bl	187b4 <__aeabi_fcmpge>
   14c28:	4603      	mov	r3, r0
   14c2a:	2b00      	cmp	r3, #0
   14c2c:	d002      	beq.n	14c34 <route_to+0x218>
   14c2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14c32:	e004      	b.n	14c3e <route_to+0x222>
   14c34:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c3c:	681a      	ldr	r2, [r3, #0]
   14c3e:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c46:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14c48:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c50:	681b      	ldr	r3, [r3, #0]
   14c52:	4618      	mov	r0, r3
   14c54:	6979      	ldr	r1, [r7, #20]
   14c56:	f003 fbfb 	bl	18450 <__aeabi_fmul>
   14c5a:	4603      	mov	r3, r0
   14c5c:	4618      	mov	r0, r3
   14c5e:	69f9      	ldr	r1, [r7, #28]
   14c60:	f003 faee 	bl	18240 <__addsf3>
   14c64:	4603      	mov	r3, r0
   14c66:	461c      	mov	r4, r3
   14c68:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c70:	681b      	ldr	r3, [r3, #0]
   14c72:	4618      	mov	r0, r3
   14c74:	6939      	ldr	r1, [r7, #16]
   14c76:	f003 fbeb 	bl	18450 <__aeabi_fmul>
   14c7a:	4603      	mov	r3, r0
   14c7c:	4618      	mov	r0, r3
   14c7e:	69b9      	ldr	r1, [r7, #24]
   14c80:	f003 fade 	bl	18240 <__addsf3>
   14c84:	4603      	mov	r3, r0
   14c86:	4620      	mov	r0, r4
   14c88:	4619      	mov	r1, r3
   14c8a:	f7ff fe55 	bl	14938 <fly_to_xy>
}
   14c8e:	3720      	adds	r7, #32
   14c90:	46bd      	mov	sp, r7
   14c92:	bdb0      	pop	{r4, r5, r7, pc}

00014c94 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14c94:	b590      	push	{r4, r7, lr}
   14c96:	b083      	sub	sp, #12
   14c98:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14c9a:	f240 5378 	movw	r3, #1400	; 0x578
   14c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ca2:	681a      	ldr	r2, [r3, #0]
   14ca4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cac:	681b      	ldr	r3, [r3, #0]
   14cae:	4610      	mov	r0, r2
   14cb0:	4619      	mov	r1, r3
   14cb2:	f003 fac3 	bl	1823c <__aeabi_fsub>
   14cb6:	4603      	mov	r3, r0
   14cb8:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14cba:	f240 5378 	movw	r3, #1400	; 0x578
   14cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cc2:	685a      	ldr	r2, [r3, #4]
   14cc4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ccc:	681b      	ldr	r3, [r3, #0]
   14cce:	4610      	mov	r0, r2
   14cd0:	4619      	mov	r1, r3
   14cd2:	f003 fab3 	bl	1823c <__aeabi_fsub>
   14cd6:	4603      	mov	r3, r0
   14cd8:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14cda:	6878      	ldr	r0, [r7, #4]
   14cdc:	6879      	ldr	r1, [r7, #4]
   14cde:	f003 fbb7 	bl	18450 <__aeabi_fmul>
   14ce2:	4603      	mov	r3, r0
   14ce4:	461c      	mov	r4, r3
   14ce6:	6838      	ldr	r0, [r7, #0]
   14ce8:	6839      	ldr	r1, [r7, #0]
   14cea:	f003 fbb1 	bl	18450 <__aeabi_fmul>
   14cee:	4603      	mov	r3, r0
   14cf0:	4620      	mov	r0, r4
   14cf2:	4619      	mov	r1, r3
   14cf4:	f003 faa4 	bl	18240 <__addsf3>
   14cf8:	4603      	mov	r3, r0
   14cfa:	461a      	mov	r2, r3
   14cfc:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d04:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14d06:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d0e:	681b      	ldr	r3, [r3, #0]
   14d10:	2201      	movs	r2, #1
   14d12:	4614      	mov	r4, r2
   14d14:	4618      	mov	r0, r3
   14d16:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14d1a:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14d1e:	f003 fd53 	bl	187c8 <__aeabi_fcmpgt>
   14d22:	4603      	mov	r3, r0
   14d24:	2b00      	cmp	r3, #0
   14d26:	d101      	bne.n	14d2c <compute_dist2_to_home+0x98>
   14d28:	2300      	movs	r3, #0
   14d2a:	461c      	mov	r4, r3
   14d2c:	b2e3      	uxtb	r3, r4
   14d2e:	461a      	mov	r2, r3
   14d30:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
   14d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d38:	701a      	strb	r2, [r3, #0]
}
   14d3a:	370c      	adds	r7, #12
   14d3c:	46bd      	mov	sp, r7
   14d3e:	bd90      	pop	{r4, r7, pc}

00014d40 <nav_home>:

void nav_home(void) {
   14d40:	b580      	push	{r7, lr}
   14d42:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14d44:	f24c 639c 	movw	r3, #50844	; 0xc69c
   14d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d4c:	f04f 0200 	mov.w	r2, #0
   14d50:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14d52:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d5a:	2203      	movs	r2, #3
   14d5c:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14d5e:	f240 5374 	movw	r3, #1396	; 0x574
   14d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d66:	f04f 0200 	mov.w	r2, #0
   14d6a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14d6e:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14d70:	f7ff ff90 	bl	14c94 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14d74:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d7c:	681a      	ldr	r2, [r3, #0]
   14d7e:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   14d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d86:	601a      	str	r2, [r3, #0]
}
   14d88:	bd80      	pop	{r7, pc}
   14d8a:	bf00      	nop

00014d8c <nav_update>:

void nav_update(void) {
   14d8c:	b580      	push	{r7, lr}
   14d8e:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14d90:	f7ff ff80 	bl	14c94 <compute_dist2_to_home>

  auto_nav();
   14d94:	f7fd fc0c 	bl	125b0 <auto_nav>
}
   14d98:	bd80      	pop	{r7, pc}
   14d9a:	bf00      	nop

00014d9c <nav_init>:


void nav_init(void) {
   14d9c:	b480      	push	{r7}
   14d9e:	af00      	add	r7, sp, #0
  nav_block = 0;
   14da0:	f24c 6371 	movw	r3, #50801	; 0xc671
   14da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14da8:	2200      	movs	r2, #0
   14daa:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14dac:	f24c 6370 	movw	r3, #50800	; 0xc670
   14db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14db4:	2200      	movs	r2, #0
   14db6:	701a      	strb	r2, [r3, #0]
}
   14db8:	46bd      	mov	sp, r7
   14dba:	f85d 7b04 	ldr.w	r7, [sp], #4
   14dbe:	4770      	bx	lr

00014dc0 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14dc0:	b480      	push	{r7}
   14dc2:	b083      	sub	sp, #12
   14dc4:	af00      	add	r7, sp, #0
   14dc6:	4603      	mov	r3, r0
   14dc8:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14dca:	f242 030a 	movw	r3, #8202	; 0x200a
   14dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dd2:	781b      	ldrb	r3, [r3, #0]
   14dd4:	b2db      	uxtb	r3, r3
   14dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14dda:	2b00      	cmp	r3, #0
   14ddc:	d028      	beq.n	14e30 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14dde:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14de6:	781b      	ldrb	r3, [r3, #0]
   14de8:	b2db      	uxtb	r3, r3
   14dea:	461a      	mov	r2, r3
   14dec:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14df4:	781b      	ldrb	r3, [r3, #0]
   14df6:	3301      	adds	r3, #1
   14df8:	429a      	cmp	r2, r3
   14dfa:	d100      	bne.n	14dfe <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14dfc:	e02c      	b.n	14e58 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14dfe:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e06:	781b      	ldrb	r3, [r3, #0]
   14e08:	461a      	mov	r2, r3
   14e0a:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   14e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e12:	79f9      	ldrb	r1, [r7, #7]
   14e14:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14e16:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e1e:	781b      	ldrb	r3, [r3, #0]
   14e20:	3301      	adds	r3, #1
   14e22:	b2da      	uxtb	r2, r3
   14e24:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e2c:	701a      	strb	r2, [r3, #0]
   14e2e:	e013      	b.n	14e58 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14e30:	f242 030c 	movw	r3, #8204	; 0x200c
   14e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e38:	79fa      	ldrb	r2, [r7, #7]
   14e3a:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14e3c:	f242 030a 	movw	r3, #8202	; 0x200a
   14e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e44:	f242 020a 	movw	r2, #8202	; 0x200a
   14e48:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e4c:	7812      	ldrb	r2, [r2, #0]
   14e4e:	b2d2      	uxtb	r2, r2
   14e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14e54:	b2d2      	uxtb	r2, r2
   14e56:	701a      	strb	r2, [r3, #0]
  }
}
   14e58:	370c      	adds	r7, #12
   14e5a:	46bd      	mov	sp, r7
   14e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e60:	4770      	bx	lr
   14e62:	bf00      	nop

00014e64 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14e64:	b480      	push	{r7}
   14e66:	b083      	sub	sp, #12
   14e68:	af00      	add	r7, sp, #0
   14e6a:	4603      	mov	r3, r0
   14e6c:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14e6e:	f242 039a 	movw	r3, #8346	; 0x209a
   14e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e76:	781b      	ldrb	r3, [r3, #0]
   14e78:	b2db      	uxtb	r3, r3
   14e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14e7e:	2b00      	cmp	r3, #0
   14e80:	d028      	beq.n	14ed4 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14e82:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   14e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e8a:	781b      	ldrb	r3, [r3, #0]
   14e8c:	b2db      	uxtb	r3, r3
   14e8e:	461a      	mov	r2, r3
   14e90:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e98:	781b      	ldrb	r3, [r3, #0]
   14e9a:	3301      	adds	r3, #1
   14e9c:	429a      	cmp	r2, r3
   14e9e:	d100      	bne.n	14ea2 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14ea0:	e02c      	b.n	14efc <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14ea2:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eaa:	781b      	ldrb	r3, [r3, #0]
   14eac:	461a      	mov	r2, r3
   14eae:	f24c 73cc 	movw	r3, #51148	; 0xc7cc
   14eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eb6:	79f9      	ldrb	r1, [r7, #7]
   14eb8:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14eba:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ec2:	781b      	ldrb	r3, [r3, #0]
   14ec4:	3301      	adds	r3, #1
   14ec6:	b2da      	uxtb	r2, r3
   14ec8:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ed0:	701a      	strb	r2, [r3, #0]
   14ed2:	e013      	b.n	14efc <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14ed4:	f242 039c 	movw	r3, #8348	; 0x209c
   14ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14edc:	79fa      	ldrb	r2, [r7, #7]
   14ede:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14ee0:	f242 039a 	movw	r3, #8346	; 0x209a
   14ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ee8:	f242 029a 	movw	r2, #8346	; 0x209a
   14eec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ef0:	7812      	ldrb	r2, [r2, #0]
   14ef2:	b2d2      	uxtb	r2, r2
   14ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14ef8:	b2d2      	uxtb	r2, r2
   14efa:	701a      	strb	r2, [r3, #0]
  }
}
   14efc:	370c      	adds	r7, #12
   14efe:	46bd      	mov	sp, r7
   14f00:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f04:	4770      	bx	lr
   14f06:	bf00      	nop

00014f08 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14f08:	b580      	push	{r7, lr}
   14f0a:	b084      	sub	sp, #16
   14f0c:	af00      	add	r7, sp, #0
   14f0e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14f10:	2300      	movs	r3, #0
   14f12:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14f14:	e009      	b.n	14f2a <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14f16:	7bfb      	ldrb	r3, [r7, #15]
   14f18:	687a      	ldr	r2, [r7, #4]
   14f1a:	4413      	add	r3, r2
   14f1c:	781b      	ldrb	r3, [r3, #0]
   14f1e:	4618      	mov	r0, r3
   14f20:	f7ff ff4e 	bl	14dc0 <uart0_transmit>
    i++;
   14f24:	7bfb      	ldrb	r3, [r7, #15]
   14f26:	3301      	adds	r3, #1
   14f28:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14f2a:	7bfb      	ldrb	r3, [r7, #15]
   14f2c:	687a      	ldr	r2, [r7, #4]
   14f2e:	4413      	add	r3, r2
   14f30:	781b      	ldrb	r3, [r3, #0]
   14f32:	2b00      	cmp	r3, #0
   14f34:	d1ef      	bne.n	14f16 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14f36:	3710      	adds	r7, #16
   14f38:	46bd      	mov	sp, r7
   14f3a:	bd80      	pop	{r7, pc}

00014f3c <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14f3c:	b590      	push	{r4, r7, lr}
   14f3e:	b089      	sub	sp, #36	; 0x24
   14f40:	af00      	add	r7, sp, #0
   14f42:	4603      	mov	r3, r0
   14f44:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14f46:	f648 235c 	movw	r3, #35420	; 0x8a5c
   14f4a:	f2c0 0301 	movt	r3, #1
   14f4e:	f107 040c 	add.w	r4, r7, #12
   14f52:	6818      	ldr	r0, [r3, #0]
   14f54:	6859      	ldr	r1, [r3, #4]
   14f56:	689a      	ldr	r2, [r3, #8]
   14f58:	68db      	ldr	r3, [r3, #12]
   14f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14f5c:	79fb      	ldrb	r3, [r7, #7]
   14f5e:	091b      	lsrs	r3, r3, #4
   14f60:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14f62:	79fb      	ldrb	r3, [r7, #7]
   14f64:	f003 030f 	and.w	r3, r3, #15
   14f68:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14f6a:	230f      	movs	r3, #15
   14f6c:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14f6e:	230f      	movs	r3, #15
   14f70:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14f72:	7ffb      	ldrb	r3, [r7, #31]
   14f74:	f107 0220 	add.w	r2, r7, #32
   14f78:	4413      	add	r3, r2
   14f7a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f7e:	4618      	mov	r0, r3
   14f80:	f7ff ff1e 	bl	14dc0 <uart0_transmit>
  uart0_transmit(hex[low]);
   14f84:	7fbb      	ldrb	r3, [r7, #30]
   14f86:	f107 0220 	add.w	r2, r7, #32
   14f8a:	4413      	add	r3, r2
   14f8c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f90:	4618      	mov	r0, r3
   14f92:	f7ff ff15 	bl	14dc0 <uart0_transmit>
}
   14f96:	3724      	adds	r7, #36	; 0x24
   14f98:	46bd      	mov	sp, r7
   14f9a:	bd90      	pop	{r4, r7, pc}

00014f9c <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14f9c:	b480      	push	{r7}
   14f9e:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14fa0:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fa8:	781a      	ldrb	r2, [r3, #0]
   14faa:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fb2:	781b      	ldrb	r3, [r3, #0]
   14fb4:	b2db      	uxtb	r3, r3
   14fb6:	429a      	cmp	r2, r3
   14fb8:	d10e      	bne.n	14fd8 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14fba:	f242 030a 	movw	r3, #8202	; 0x200a
   14fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fc2:	f242 020a 	movw	r2, #8202	; 0x200a
   14fc6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14fca:	7812      	ldrb	r2, [r2, #0]
   14fcc:	b2d2      	uxtb	r2, r2
   14fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14fd2:	b2d2      	uxtb	r2, r2
   14fd4:	701a      	strb	r2, [r3, #0]
   14fd6:	e01d      	b.n	15014 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14fd8:	f242 030c 	movw	r3, #8204	; 0x200c
   14fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fe0:	f24c 62c5 	movw	r2, #50885	; 0xc6c5
   14fe4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14fe8:	7812      	ldrb	r2, [r2, #0]
   14fea:	b2d2      	uxtb	r2, r2
   14fec:	4611      	mov	r1, r2
   14fee:	f24c 62c8 	movw	r2, #50888	; 0xc6c8
   14ff2:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14ff6:	5c52      	ldrb	r2, [r2, r1]
   14ff8:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14ffa:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15002:	781b      	ldrb	r3, [r3, #0]
   15004:	b2db      	uxtb	r3, r3
   15006:	3301      	adds	r3, #1
   15008:	b2da      	uxtb	r2, r3
   1500a:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   1500e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15012:	701a      	strb	r2, [r3, #0]
  }
}
   15014:	46bd      	mov	sp, r7
   15016:	f85d 7b04 	ldr.w	r7, [sp], #4
   1501a:	4770      	bx	lr

0001501c <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   1501c:	b480      	push	{r7}
   1501e:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   15020:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   15024:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15028:	781a      	ldrb	r2, [r3, #0]
   1502a:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   1502e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15032:	781b      	ldrb	r3, [r3, #0]
   15034:	b2db      	uxtb	r3, r3
   15036:	429a      	cmp	r2, r3
   15038:	d10e      	bne.n	15058 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   1503a:	f242 039a 	movw	r3, #8346	; 0x209a
   1503e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15042:	f242 029a 	movw	r2, #8346	; 0x209a
   15046:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1504a:	7812      	ldrb	r2, [r2, #0]
   1504c:	b2d2      	uxtb	r2, r2
   1504e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15052:	b2d2      	uxtb	r2, r2
   15054:	701a      	strb	r2, [r3, #0]
   15056:	e01d      	b.n	15094 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   15058:	f242 039c 	movw	r3, #8348	; 0x209c
   1505c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15060:	f24c 72c9 	movw	r2, #51145	; 0xc7c9
   15064:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15068:	7812      	ldrb	r2, [r2, #0]
   1506a:	b2d2      	uxtb	r2, r2
   1506c:	4611      	mov	r1, r2
   1506e:	f24c 72cc 	movw	r2, #51148	; 0xc7cc
   15072:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15076:	5c52      	ldrb	r2, [r2, r1]
   15078:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   1507a:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   1507e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15082:	781b      	ldrb	r3, [r3, #0]
   15084:	b2db      	uxtb	r3, r3
   15086:	3301      	adds	r3, #1
   15088:	b2da      	uxtb	r2, r3
   1508a:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   1508e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15092:	701a      	strb	r2, [r3, #0]
  }
}
   15094:	46bd      	mov	sp, r7
   15096:	f85d 7b04 	ldr.w	r7, [sp], #4
   1509a:	4770      	bx	lr

0001509c <uart0_init>:

void uart0_init( void ) {
   1509c:	b480      	push	{r7}
   1509e:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   150a0:	f242 0390 	movw	r3, #8336	; 0x2090
   150a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a8:	2200      	movs	r2, #0
   150aa:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   150ac:	f242 0309 	movw	r3, #8201	; 0x2009
   150b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150b4:	2219      	movs	r2, #25
   150b6:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   150b8:	f242 030b 	movw	r3, #8203	; 0x200b
   150bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150c0:	2200      	movs	r2, #0
   150c2:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   150c4:	f242 030a 	movw	r3, #8202	; 0x200a
   150c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150cc:	2218      	movs	r2, #24
   150ce:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   150d0:	f242 0395 	movw	r3, #8341	; 0x2095
   150d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150d8:	2206      	movs	r2, #6
   150da:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   150dc:	f242 030a 	movw	r3, #8202	; 0x200a
   150e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e4:	f242 020a 	movw	r2, #8202	; 0x200a
   150e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150ec:	7812      	ldrb	r2, [r2, #0]
   150ee:	b2d2      	uxtb	r2, r2
   150f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   150f4:	b2d2      	uxtb	r2, r2
   150f6:	701a      	strb	r2, [r3, #0]
}
   150f8:	46bd      	mov	sp, r7
   150fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   150fe:	4770      	bx	lr

00015100 <uart1_init>:

void uart1_init( void ) {
   15100:	b480      	push	{r7}
   15102:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   15104:	f242 0398 	movw	r3, #8344	; 0x2098
   15108:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1510c:	2200      	movs	r2, #0
   1510e:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   15110:	f242 0399 	movw	r3, #8345	; 0x2099
   15114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15118:	2219      	movs	r2, #25
   1511a:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   1511c:	f242 039b 	movw	r3, #8347	; 0x209b
   15120:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15124:	2200      	movs	r2, #0
   15126:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   15128:	f242 039a 	movw	r3, #8346	; 0x209a
   1512c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15130:	2218      	movs	r2, #24
   15132:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   15134:	f242 039d 	movw	r3, #8349	; 0x209d
   15138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1513c:	2206      	movs	r2, #6
   1513e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   15140:	f242 039a 	movw	r3, #8346	; 0x209a
   15144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15148:	f242 029a 	movw	r2, #8346	; 0x209a
   1514c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15150:	7812      	ldrb	r2, [r2, #0]
   15152:	b2d2      	uxtb	r2, r2
   15154:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15158:	b2d2      	uxtb	r2, r2
   1515a:	701a      	strb	r2, [r3, #0]
}
   1515c:	46bd      	mov	sp, r7
   1515e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15162:	4770      	bx	lr
   15164:	0000      	movs	r0, r0
	...

00015168 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   15168:	b480      	push	{r7}
   1516a:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   1516c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   15170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15174:	f04f 0200 	mov.w	r2, #0
   15178:	601a      	str	r2, [r3, #0]
   1517a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1517e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15182:	f04f 0200 	mov.w	r2, #0
   15186:	601a      	str	r2, [r3, #0]
   15188:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1518c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15190:	f04f 0200 	mov.w	r2, #0
   15194:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   15196:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   1519a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1519e:	f04f 0200 	mov.w	r2, #0
   151a2:	601a      	str	r2, [r3, #0]
   151a4:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   151a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ac:	f04f 0200 	mov.w	r2, #0
   151b0:	601a      	str	r2, [r3, #0]
   151b2:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   151b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ba:	f04f 0200 	mov.w	r2, #0
   151be:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   151c0:	f64c 1304 	movw	r3, #51460	; 0xc904
   151c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151c8:	f04f 0200 	mov.w	r2, #0
   151cc:	601a      	str	r2, [r3, #0]
   151ce:	f64c 1308 	movw	r3, #51464	; 0xc908
   151d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151d6:	f04f 0200 	mov.w	r2, #0
   151da:	601a      	str	r2, [r3, #0]
   151dc:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   151e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151e4:	f04f 0200 	mov.w	r2, #0
   151e8:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   151ea:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   151ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151f2:	f04f 0200 	mov.w	r2, #0
   151f6:	601a      	str	r2, [r3, #0]
   151f8:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   151fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15200:	f04f 0200 	mov.w	r2, #0
   15204:	601a      	str	r2, [r3, #0]
   15206:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   1520a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1520e:	f04f 0200 	mov.w	r2, #0
   15212:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   15214:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   15218:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1521c:	2200      	movs	r2, #0
   1521e:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   15220:	f240 5348 	movw	r3, #1352	; 0x548
   15224:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15228:	681a      	ldr	r2, [r3, #0]
   1522a:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1522e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15232:	601a      	str	r2, [r3, #0]
}
   15234:	46bd      	mov	sp, r7
   15236:	f85d 7b04 	ldr.w	r7, [sp], #4
   1523a:	4770      	bx	lr

0001523c <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   1523c:	b580      	push	{r7, lr}
   1523e:	b082      	sub	sp, #8
   15240:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   15242:	f240 533c 	movw	r3, #1340	; 0x53c
   15246:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1524a:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   1524c:	2b01      	cmp	r3, #1
   1524e:	d105      	bne.n	1525c <estimator_update_state_infrared+0x20>
   15250:	f64c 130c 	movw	r3, #51468	; 0xc90c
   15254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15258:	681b      	ldr	r3, [r3, #0]
   1525a:	e004      	b.n	15266 <estimator_update_state_infrared+0x2a>
   1525c:	f240 5348 	movw	r3, #1352	; 0x548
   15260:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15264:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   15266:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   15268:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   1526c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15270:	881b      	ldrh	r3, [r3, #0]
   15272:	b21b      	sxth	r3, r3
   15274:	4618      	mov	r0, r3
   15276:	f003 f897 	bl	183a8 <__aeabi_i2f>
   1527a:	4603      	mov	r3, r0
   1527c:	4618      	mov	r0, r3
   1527e:	6879      	ldr	r1, [r7, #4]
   15280:	f003 f8e6 	bl	18450 <__aeabi_fmul>
   15284:	4603      	mov	r3, r0
   15286:	461a      	mov	r2, r3
   15288:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   1528c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15290:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   15292:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   15296:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1529a:	881b      	ldrh	r3, [r3, #0]
   1529c:	b21b      	sxth	r3, r3
   1529e:	4618      	mov	r0, r3
   152a0:	f003 f882 	bl	183a8 <__aeabi_i2f>
   152a4:	4603      	mov	r3, r0
   152a6:	4618      	mov	r0, r3
   152a8:	6879      	ldr	r1, [r7, #4]
   152aa:	f003 f8d1 	bl	18450 <__aeabi_fmul>
   152ae:	4603      	mov	r3, r0
   152b0:	461a      	mov	r2, r3
   152b2:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   152b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ba:	601a      	str	r2, [r3, #0]
}
   152bc:	3708      	adds	r7, #8
   152be:	46bd      	mov	sp, r7
   152c0:	bd80      	pop	{r7, pc}
   152c2:	bf00      	nop

000152c4 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   152c4:	b5b0      	push	{r4, r5, r7, lr}
   152c6:	b084      	sub	sp, #16
   152c8:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   152ca:	f64c 1318 	movw	r3, #51480	; 0xc918
   152ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152d2:	781b      	ldrb	r3, [r3, #0]
   152d4:	2b00      	cmp	r3, #0
   152d6:	f000 81e8 	beq.w	156aa <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   152da:	f24c 4388 	movw	r3, #50312	; 0xc488
   152de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152e2:	681a      	ldr	r2, [r3, #0]
   152e4:	f64c 131c 	movw	r3, #51484	; 0xc91c
   152e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ec:	681b      	ldr	r3, [r3, #0]
   152ee:	4610      	mov	r0, r2
   152f0:	4619      	mov	r1, r3
   152f2:	f002 ffa3 	bl	1823c <__aeabi_fsub>
   152f6:	4603      	mov	r3, r0
   152f8:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   152fa:	68b8      	ldr	r0, [r7, #8]
   152fc:	f002 fc14 	bl	17b28 <__aeabi_f2d>
   15300:	4602      	mov	r2, r0
   15302:	460b      	mov	r3, r1
   15304:	4610      	mov	r0, r2
   15306:	4619      	mov	r1, r3
   15308:	a385      	add	r3, pc, #532	; (adr r3, 15520 <estimator_update_ir_estim+0x25c>)
   1530a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1530e:	f002 feef 	bl	180f0 <__aeabi_dcmpgt>
   15312:	4603      	mov	r3, r0
   15314:	2b00      	cmp	r3, #0
   15316:	d100      	bne.n	1531a <estimator_update_ir_estim+0x56>
   15318:	e219      	b.n	1574e <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   1531a:	f64c 1308 	movw	r3, #51464	; 0xc908
   1531e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15322:	681a      	ldr	r2, [r3, #0]
   15324:	f64c 1320 	movw	r3, #51488	; 0xc920
   15328:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1532c:	681b      	ldr	r3, [r3, #0]
   1532e:	4610      	mov	r0, r2
   15330:	4619      	mov	r1, r3
   15332:	f002 ff83 	bl	1823c <__aeabi_fsub>
   15336:	4603      	mov	r3, r0
   15338:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1533a:	e013      	b.n	15364 <estimator_update_ir_estim+0xa0>
   1533c:	68f8      	ldr	r0, [r7, #12]
   1533e:	f002 fbf3 	bl	17b28 <__aeabi_f2d>
   15342:	4602      	mov	r2, r0
   15344:	460b      	mov	r3, r1
   15346:	4610      	mov	r0, r2
   15348:	4619      	mov	r1, r3
   1534a:	a377      	add	r3, pc, #476	; (adr r3, 15528 <estimator_update_ir_estim+0x264>)
   1534c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15350:	f002 fa8a 	bl	17868 <__aeabi_dsub>
   15354:	4602      	mov	r2, r0
   15356:	460b      	mov	r3, r1
   15358:	4610      	mov	r0, r2
   1535a:	4619      	mov	r1, r3
   1535c:	f002 ff1a 	bl	18194 <__aeabi_d2f>
   15360:	4603      	mov	r3, r0
   15362:	60fb      	str	r3, [r7, #12]
   15364:	68f8      	ldr	r0, [r7, #12]
   15366:	f002 fbdf 	bl	17b28 <__aeabi_f2d>
   1536a:	4602      	mov	r2, r0
   1536c:	460b      	mov	r3, r1
   1536e:	4610      	mov	r0, r2
   15370:	4619      	mov	r1, r3
   15372:	a36f      	add	r3, pc, #444	; (adr r3, 15530 <estimator_update_ir_estim+0x26c>)
   15374:	e9d3 2300 	ldrd	r2, r3, [r3]
   15378:	f002 feba 	bl	180f0 <__aeabi_dcmpgt>
   1537c:	4603      	mov	r3, r0
   1537e:	2b00      	cmp	r3, #0
   15380:	d1dc      	bne.n	1533c <estimator_update_ir_estim+0x78>
   15382:	e013      	b.n	153ac <estimator_update_ir_estim+0xe8>
   15384:	68f8      	ldr	r0, [r7, #12]
   15386:	f002 fbcf 	bl	17b28 <__aeabi_f2d>
   1538a:	4602      	mov	r2, r0
   1538c:	460b      	mov	r3, r1
   1538e:	4610      	mov	r0, r2
   15390:	4619      	mov	r1, r3
   15392:	a365      	add	r3, pc, #404	; (adr r3, 15528 <estimator_update_ir_estim+0x264>)
   15394:	e9d3 2300 	ldrd	r2, r3, [r3]
   15398:	f002 fa68 	bl	1786c <__adddf3>
   1539c:	4602      	mov	r2, r0
   1539e:	460b      	mov	r3, r1
   153a0:	4610      	mov	r0, r2
   153a2:	4619      	mov	r1, r3
   153a4:	f002 fef6 	bl	18194 <__aeabi_d2f>
   153a8:	4603      	mov	r3, r0
   153aa:	60fb      	str	r3, [r7, #12]
   153ac:	68f8      	ldr	r0, [r7, #12]
   153ae:	f002 fbbb 	bl	17b28 <__aeabi_f2d>
   153b2:	4602      	mov	r2, r0
   153b4:	460b      	mov	r3, r1
   153b6:	4610      	mov	r0, r2
   153b8:	4619      	mov	r1, r3
   153ba:	a35f      	add	r3, pc, #380	; (adr r3, 15538 <estimator_update_ir_estim+0x274>)
   153bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   153c0:	f002 fe78 	bl	180b4 <__aeabi_dcmplt>
   153c4:	4603      	mov	r3, r0
   153c6:	2b00      	cmp	r3, #0
   153c8:	d1dc      	bne.n	15384 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   153ca:	68f8      	ldr	r0, [r7, #12]
   153cc:	68b9      	ldr	r1, [r7, #8]
   153ce:	f003 f8f3 	bl	185b8 <__aeabi_fdiv>
   153d2:	4603      	mov	r3, r0
   153d4:	4618      	mov	r0, r3
   153d6:	f002 fba7 	bl	17b28 <__aeabi_f2d>
   153da:	4602      	mov	r2, r0
   153dc:	460b      	mov	r3, r1
   153de:	4610      	mov	r0, r2
   153e0:	4619      	mov	r1, r3
   153e2:	f04f 0200 	mov.w	r2, #0
   153e6:	f04f 0300 	mov.w	r3, #0
   153ea:	f2c4 0324 	movt	r3, #16420	; 0x4024
   153ee:	f002 fbef 	bl	17bd0 <__aeabi_dmul>
   153f2:	4602      	mov	r2, r0
   153f4:	460b      	mov	r3, r1
   153f6:	4610      	mov	r0, r2
   153f8:	4619      	mov	r1, r3
   153fa:	a351      	add	r3, pc, #324	; (adr r3, 15540 <estimator_update_ir_estim+0x27c>)
   153fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15400:	f002 fd10 	bl	17e24 <__aeabi_ddiv>
   15404:	4602      	mov	r2, r0
   15406:	460b      	mov	r3, r1
   15408:	4610      	mov	r0, r2
   1540a:	4619      	mov	r1, r3
   1540c:	f002 fec2 	bl	18194 <__aeabi_d2f>
   15410:	4603      	mov	r3, r0
   15412:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   15414:	e013      	b.n	1543e <estimator_update_ir_estim+0x17a>
   15416:	68f8      	ldr	r0, [r7, #12]
   15418:	f002 fb86 	bl	17b28 <__aeabi_f2d>
   1541c:	4602      	mov	r2, r0
   1541e:	460b      	mov	r3, r1
   15420:	4610      	mov	r0, r2
   15422:	4619      	mov	r1, r3
   15424:	a340      	add	r3, pc, #256	; (adr r3, 15528 <estimator_update_ir_estim+0x264>)
   15426:	e9d3 2300 	ldrd	r2, r3, [r3]
   1542a:	f002 fa1d 	bl	17868 <__aeabi_dsub>
   1542e:	4602      	mov	r2, r0
   15430:	460b      	mov	r3, r1
   15432:	4610      	mov	r0, r2
   15434:	4619      	mov	r1, r3
   15436:	f002 fead 	bl	18194 <__aeabi_d2f>
   1543a:	4603      	mov	r3, r0
   1543c:	60fb      	str	r3, [r7, #12]
   1543e:	68f8      	ldr	r0, [r7, #12]
   15440:	f002 fb72 	bl	17b28 <__aeabi_f2d>
   15444:	4602      	mov	r2, r0
   15446:	460b      	mov	r3, r1
   15448:	4610      	mov	r0, r2
   1544a:	4619      	mov	r1, r3
   1544c:	a338      	add	r3, pc, #224	; (adr r3, 15530 <estimator_update_ir_estim+0x26c>)
   1544e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15452:	f002 fe4d 	bl	180f0 <__aeabi_dcmpgt>
   15456:	4603      	mov	r3, r0
   15458:	2b00      	cmp	r3, #0
   1545a:	d1dc      	bne.n	15416 <estimator_update_ir_estim+0x152>
   1545c:	e013      	b.n	15486 <estimator_update_ir_estim+0x1c2>
   1545e:	68f8      	ldr	r0, [r7, #12]
   15460:	f002 fb62 	bl	17b28 <__aeabi_f2d>
   15464:	4602      	mov	r2, r0
   15466:	460b      	mov	r3, r1
   15468:	4610      	mov	r0, r2
   1546a:	4619      	mov	r1, r3
   1546c:	a32e      	add	r3, pc, #184	; (adr r3, 15528 <estimator_update_ir_estim+0x264>)
   1546e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15472:	f002 f9fb 	bl	1786c <__adddf3>
   15476:	4602      	mov	r2, r0
   15478:	460b      	mov	r3, r1
   1547a:	4610      	mov	r0, r2
   1547c:	4619      	mov	r1, r3
   1547e:	f002 fe89 	bl	18194 <__aeabi_d2f>
   15482:	4603      	mov	r3, r0
   15484:	60fb      	str	r3, [r7, #12]
   15486:	68f8      	ldr	r0, [r7, #12]
   15488:	f002 fb4e 	bl	17b28 <__aeabi_f2d>
   1548c:	4602      	mov	r2, r0
   1548e:	460b      	mov	r3, r1
   15490:	4610      	mov	r0, r2
   15492:	4619      	mov	r1, r3
   15494:	a328      	add	r3, pc, #160	; (adr r3, 15538 <estimator_update_ir_estim+0x274>)
   15496:	e9d3 2300 	ldrd	r2, r3, [r3]
   1549a:	f002 fe0b 	bl	180b4 <__aeabi_dcmplt>
   1549e:	4603      	mov	r3, r0
   154a0:	2b00      	cmp	r3, #0
   154a2:	d1dc      	bne.n	1545e <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   154a4:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   154a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154ac:	881b      	ldrh	r3, [r3, #0]
   154ae:	b21b      	sxth	r3, r3
   154b0:	4618      	mov	r0, r3
   154b2:	f002 ff79 	bl	183a8 <__aeabi_i2f>
   154b6:	4602      	mov	r2, r0
   154b8:	f64c 1310 	movw	r3, #51472	; 0xc910
   154bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154c0:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   154c2:	f64c 1314 	movw	r3, #51476	; 0xc914
   154c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154ca:	68fa      	ldr	r2, [r7, #12]
   154cc:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   154ce:	68f8      	ldr	r0, [r7, #12]
   154d0:	f04f 0100 	mov.w	r1, #0
   154d4:	f003 f95a 	bl	1878c <__aeabi_fcmplt>
   154d8:	4603      	mov	r3, r0
   154da:	2b00      	cmp	r3, #0
   154dc:	d003      	beq.n	154e6 <estimator_update_ir_estim+0x222>
   154de:	68fb      	ldr	r3, [r7, #12]
   154e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   154e4:	e000      	b.n	154e8 <estimator_update_ir_estim+0x224>
   154e6:	68fb      	ldr	r3, [r7, #12]
   154e8:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   154ea:	6878      	ldr	r0, [r7, #4]
   154ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   154f0:	f003 f94c 	bl	1878c <__aeabi_fcmplt>
   154f4:	4603      	mov	r3, r0
   154f6:	2b00      	cmp	r3, #0
   154f8:	d100      	bne.n	154fc <estimator_update_ir_estim+0x238>
   154fa:	e128      	b.n	1574e <estimator_update_ir_estim+0x48a>
   154fc:	6878      	ldr	r0, [r7, #4]
   154fe:	f002 fb13 	bl	17b28 <__aeabi_f2d>
   15502:	4602      	mov	r2, r0
   15504:	460b      	mov	r3, r1
   15506:	4610      	mov	r0, r2
   15508:	4619      	mov	r1, r3
   1550a:	a30f      	add	r3, pc, #60	; (adr r3, 15548 <estimator_update_ir_estim+0x284>)
   1550c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15510:	f002 fdee 	bl	180f0 <__aeabi_dcmpgt>
   15514:	4603      	mov	r3, r0
   15516:	2b00      	cmp	r3, #0
   15518:	d11a      	bne.n	15550 <estimator_update_ir_estim+0x28c>
   1551a:	e118      	b.n	1574e <estimator_update_ir_estim+0x48a>
   1551c:	f3af 8000 	nop.w
   15520:	9999999a 	.word	0x9999999a
   15524:	3fb99999 	.word	0x3fb99999
   15528:	54442d18 	.word	0x54442d18
   1552c:	401921fb 	.word	0x401921fb
   15530:	54442d18 	.word	0x54442d18
   15534:	400921fb 	.word	0x400921fb
   15538:	54442d18 	.word	0x54442d18
   1553c:	c00921fb 	.word	0xc00921fb
   15540:	51eb851f 	.word	0x51eb851f
   15544:	40239eb8 	.word	0x40239eb8
   15548:	9999999a 	.word	0x9999999a
   1554c:	3fa99999 	.word	0x3fa99999
   15550:	f240 5340 	movw	r3, #1344	; 0x540
   15554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15558:	881b      	ldrh	r3, [r3, #0]
   1555a:	b21b      	sxth	r3, r3
   1555c:	425b      	negs	r3, r3
   1555e:	0fda      	lsrs	r2, r3, #31
   15560:	4413      	add	r3, r2
   15562:	105b      	asrs	r3, r3, #1
   15564:	461a      	mov	r2, r3
   15566:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   1556a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1556e:	881b      	ldrh	r3, [r3, #0]
   15570:	b21b      	sxth	r3, r3
   15572:	429a      	cmp	r2, r3
   15574:	f280 8098 	bge.w	156a8 <estimator_update_ir_estim+0x3e4>
   15578:	f240 5340 	movw	r3, #1344	; 0x540
   1557c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15580:	881b      	ldrh	r3, [r3, #0]
   15582:	b21b      	sxth	r3, r3
   15584:	0fda      	lsrs	r2, r3, #31
   15586:	4413      	add	r3, r2
   15588:	105b      	asrs	r3, r3, #1
   1558a:	b29a      	uxth	r2, r3
   1558c:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   15590:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15594:	881b      	ldrh	r3, [r3, #0]
   15596:	b212      	sxth	r2, r2
   15598:	b21b      	sxth	r3, r3
   1559a:	429a      	cmp	r2, r3
   1559c:	f340 8084 	ble.w	156a8 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   155a0:	f64c 1314 	movw	r3, #51476	; 0xc914
   155a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155a8:	681a      	ldr	r2, [r3, #0]
   155aa:	f64c 1310 	movw	r3, #51472	; 0xc910
   155ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155b2:	681b      	ldr	r3, [r3, #0]
   155b4:	4610      	mov	r0, r2
   155b6:	4619      	mov	r1, r3
   155b8:	f002 ff4a 	bl	18450 <__aeabi_fmul>
   155bc:	4603      	mov	r3, r0
   155be:	4618      	mov	r0, r3
   155c0:	f002 fab2 	bl	17b28 <__aeabi_f2d>
   155c4:	4604      	mov	r4, r0
   155c6:	460d      	mov	r5, r1
   155c8:	f64c 1324 	movw	r3, #51492	; 0xc924
   155cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155d0:	681b      	ldr	r3, [r3, #0]
   155d2:	4618      	mov	r0, r3
   155d4:	f002 faa8 	bl	17b28 <__aeabi_f2d>
   155d8:	4602      	mov	r2, r0
   155da:	460b      	mov	r3, r1
   155dc:	4610      	mov	r0, r2
   155de:	4619      	mov	r1, r3
   155e0:	a367      	add	r3, pc, #412	; (adr r3, 15780 <estimator_update_ir_estim+0x4bc>)
   155e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   155e6:	f002 faf3 	bl	17bd0 <__aeabi_dmul>
   155ea:	4602      	mov	r2, r0
   155ec:	460b      	mov	r3, r1
   155ee:	4620      	mov	r0, r4
   155f0:	4629      	mov	r1, r5
   155f2:	f002 f93b 	bl	1786c <__adddf3>
   155f6:	4602      	mov	r2, r0
   155f8:	460b      	mov	r3, r1
   155fa:	4610      	mov	r0, r2
   155fc:	4619      	mov	r1, r3
   155fe:	f002 fdc9 	bl	18194 <__aeabi_d2f>
   15602:	4602      	mov	r2, r0
   15604:	f64c 1324 	movw	r3, #51492	; 0xc924
   15608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1560c:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   1560e:	f64c 1310 	movw	r3, #51472	; 0xc910
   15612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15616:	681a      	ldr	r2, [r3, #0]
   15618:	f64c 1310 	movw	r3, #51472	; 0xc910
   1561c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15620:	681b      	ldr	r3, [r3, #0]
   15622:	4610      	mov	r0, r2
   15624:	4619      	mov	r1, r3
   15626:	f002 ff13 	bl	18450 <__aeabi_fmul>
   1562a:	4603      	mov	r3, r0
   1562c:	4618      	mov	r0, r3
   1562e:	f002 fa7b 	bl	17b28 <__aeabi_f2d>
   15632:	4604      	mov	r4, r0
   15634:	460d      	mov	r5, r1
   15636:	f64c 1328 	movw	r3, #51496	; 0xc928
   1563a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1563e:	681b      	ldr	r3, [r3, #0]
   15640:	4618      	mov	r0, r3
   15642:	f002 fa71 	bl	17b28 <__aeabi_f2d>
   15646:	4602      	mov	r2, r0
   15648:	460b      	mov	r3, r1
   1564a:	4610      	mov	r0, r2
   1564c:	4619      	mov	r1, r3
   1564e:	a34c      	add	r3, pc, #304	; (adr r3, 15780 <estimator_update_ir_estim+0x4bc>)
   15650:	e9d3 2300 	ldrd	r2, r3, [r3]
   15654:	f002 fabc 	bl	17bd0 <__aeabi_dmul>
   15658:	4602      	mov	r2, r0
   1565a:	460b      	mov	r3, r1
   1565c:	4620      	mov	r0, r4
   1565e:	4629      	mov	r1, r5
   15660:	f002 f904 	bl	1786c <__adddf3>
   15664:	4602      	mov	r2, r0
   15666:	460b      	mov	r3, r1
   15668:	4610      	mov	r0, r2
   1566a:	4619      	mov	r1, r3
   1566c:	f002 fd92 	bl	18194 <__aeabi_d2f>
   15670:	4602      	mov	r2, r0
   15672:	f64c 1328 	movw	r3, #51496	; 0xc928
   15676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1567a:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   1567c:	f64c 1324 	movw	r3, #51492	; 0xc924
   15680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15684:	681a      	ldr	r2, [r3, #0]
   15686:	f64c 1328 	movw	r3, #51496	; 0xc928
   1568a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1568e:	681b      	ldr	r3, [r3, #0]
   15690:	4610      	mov	r0, r2
   15692:	4619      	mov	r1, r3
   15694:	f002 ff90 	bl	185b8 <__aeabi_fdiv>
   15698:	4603      	mov	r3, r0
   1569a:	461a      	mov	r2, r3
   1569c:	f64c 130c 	movw	r3, #51468	; 0xc90c
   156a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156a4:	601a      	str	r2, [r3, #0]
   156a6:	e052      	b.n	1574e <estimator_update_ir_estim+0x48a>
   156a8:	e051      	b.n	1574e <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   156aa:	f64c 1318 	movw	r3, #51480	; 0xc918
   156ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156b2:	2201      	movs	r2, #1
   156b4:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   156b6:	f240 5340 	movw	r3, #1344	; 0x540
   156ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156be:	881b      	ldrh	r3, [r3, #0]
   156c0:	b21b      	sxth	r3, r3
   156c2:	4618      	mov	r0, r3
   156c4:	f002 fe70 	bl	183a8 <__aeabi_i2f>
   156c8:	4603      	mov	r3, r0
   156ca:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   156cc:	6838      	ldr	r0, [r7, #0]
   156ce:	6839      	ldr	r1, [r7, #0]
   156d0:	f002 febe 	bl	18450 <__aeabi_fmul>
   156d4:	4603      	mov	r3, r0
   156d6:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   156d8:	f64c 130c 	movw	r3, #51468	; 0xc90c
   156dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156e0:	681b      	ldr	r3, [r3, #0]
   156e2:	4618      	mov	r0, r3
   156e4:	f002 fa20 	bl	17b28 <__aeabi_f2d>
   156e8:	4602      	mov	r2, r0
   156ea:	460b      	mov	r3, r1
   156ec:	4610      	mov	r0, r2
   156ee:	4619      	mov	r1, r3
   156f0:	f04f 0200 	mov.w	r2, #0
   156f4:	f04f 0300 	mov.w	r3, #0
   156f8:	f2c4 0359 	movt	r3, #16473	; 0x4059
   156fc:	f002 fa68 	bl	17bd0 <__aeabi_dmul>
   15700:	4602      	mov	r2, r0
   15702:	460b      	mov	r3, r1
   15704:	4614      	mov	r4, r2
   15706:	461d      	mov	r5, r3
   15708:	6838      	ldr	r0, [r7, #0]
   1570a:	f002 fa0d 	bl	17b28 <__aeabi_f2d>
   1570e:	4602      	mov	r2, r0
   15710:	460b      	mov	r3, r1
   15712:	4620      	mov	r0, r4
   15714:	4629      	mov	r1, r5
   15716:	f002 fa5b 	bl	17bd0 <__aeabi_dmul>
   1571a:	4602      	mov	r2, r0
   1571c:	460b      	mov	r3, r1
   1571e:	4610      	mov	r0, r2
   15720:	4619      	mov	r1, r3
   15722:	f002 fd37 	bl	18194 <__aeabi_d2f>
   15726:	4602      	mov	r2, r0
   15728:	f64c 1324 	movw	r3, #51492	; 0xc924
   1572c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15730:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   15732:	6838      	ldr	r0, [r7, #0]
   15734:	f04f 0100 	mov.w	r1, #0
   15738:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1573c:	f002 fe88 	bl	18450 <__aeabi_fmul>
   15740:	4603      	mov	r3, r0
   15742:	461a      	mov	r2, r3
   15744:	f64c 1328 	movw	r3, #51496	; 0xc928
   15748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1574c:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   1574e:	f64c 1308 	movw	r3, #51464	; 0xc908
   15752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15756:	681a      	ldr	r2, [r3, #0]
   15758:	f64c 1320 	movw	r3, #51488	; 0xc920
   1575c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15760:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   15762:	f24c 4388 	movw	r3, #50312	; 0xc488
   15766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1576a:	681a      	ldr	r2, [r3, #0]
   1576c:	f64c 131c 	movw	r3, #51484	; 0xc91c
   15770:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15774:	601a      	str	r2, [r3, #0]
}
   15776:	3710      	adds	r7, #16
   15778:	46bd      	mov	sp, r7
   1577a:	bdb0      	pop	{r4, r5, r7, pc}
   1577c:	f3af 8000 	nop.w
   15780:	d916872b 	.word	0xd916872b
   15784:	3feff7ce 	.word	0x3feff7ce

00015788 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15788:	b580      	push	{r7, lr}
   1578a:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   1578c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   15790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15794:	781b      	ldrb	r3, [r3, #0]
   15796:	f003 0320 	and.w	r3, r3, #32
   1579a:	2b00      	cmp	r3, #0
   1579c:	d044      	beq.n	15828 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   1579e:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   157a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157a6:	681a      	ldr	r2, [r3, #0]
   157a8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   157ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157b0:	601a      	str	r2, [r3, #0]
   157b2:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   157b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ba:	681a      	ldr	r2, [r3, #0]
   157bc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   157c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157c4:	601a      	str	r2, [r3, #0]
   157c6:	f24c 438c 	movw	r3, #50316	; 0xc48c
   157ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ce:	681a      	ldr	r2, [r3, #0]
   157d0:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   157d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157d8:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   157da:	f24c 4390 	movw	r3, #50320	; 0xc490
   157de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157e2:	681a      	ldr	r2, [r3, #0]
   157e4:	f64c 1304 	movw	r3, #51460	; 0xc904
   157e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ec:	601a      	str	r2, [r3, #0]
   157ee:	f24c 4398 	movw	r3, #50328	; 0xc498
   157f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157f6:	681a      	ldr	r2, [r3, #0]
   157f8:	f64c 1308 	movw	r3, #51464	; 0xc908
   157fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15800:	601a      	str	r2, [r3, #0]
   15802:	f24c 4394 	movw	r3, #50324	; 0xc494
   15806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1580a:	681a      	ldr	r2, [r3, #0]
   1580c:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   15810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15814:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   15816:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   1581a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1581e:	881b      	ldrh	r3, [r3, #0]
   15820:	2b00      	cmp	r3, #0
   15822:	d001      	beq.n	15828 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   15824:	f7ff fd4e 	bl	152c4 <estimator_update_ir_estim>
  }
}
   15828:	bd80      	pop	{r7, pc}
   1582a:	bf00      	nop

0001582c <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   1582c:	b480      	push	{r7}
   1582e:	af00      	add	r7, sp, #0
  
}
   15830:	46bd      	mov	sp, r7
   15832:	f85d 7b04 	ldr.w	r7, [sp], #4
   15836:	4770      	bx	lr

00015838 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15838:	b5b0      	push	{r4, r5, r7, lr}
   1583a:	b082      	sub	sp, #8
   1583c:	af00      	add	r7, sp, #0
   1583e:	4603      	mov	r3, r0
   15840:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   15842:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   15846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1584a:	781b      	ldrb	r3, [r3, #0]
   1584c:	2b01      	cmp	r3, #1
   1584e:	f040 80e0 	bne.w	15a12 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15852:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15856:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1585a:	781b      	ldrb	r3, [r3, #0]
   1585c:	2b02      	cmp	r3, #2
   1585e:	d168      	bne.n	15932 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15860:	79fb      	ldrb	r3, [r7, #7]
   15862:	2b00      	cmp	r3, #0
   15864:	d013      	beq.n	1588e <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   15866:	f240 5344 	movw	r3, #1348	; 0x544
   1586a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1586e:	881a      	ldrh	r2, [r3, #0]
   15870:	f64c 1332 	movw	r3, #51506	; 0xc932
   15874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15878:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1587a:	f24c 4320 	movw	r3, #50208	; 0xc420
   1587e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15882:	895a      	ldrh	r2, [r3, #10]
   15884:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15888:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1588c:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1588e:	f24c 4320 	movw	r3, #50208	; 0xc420
   15892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15896:	895b      	ldrh	r3, [r3, #10]
   15898:	b21a      	sxth	r2, r3
   1589a:	f64c 132e 	movw	r3, #51502	; 0xc92e
   1589e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158a2:	881b      	ldrh	r3, [r3, #0]
   158a4:	b21b      	sxth	r3, r3
   158a6:	1ad3      	subs	r3, r2, r3
   158a8:	4618      	mov	r0, r3
   158aa:	f002 fd7d 	bl	183a8 <__aeabi_i2f>
   158ae:	4603      	mov	r3, r0
   158b0:	4618      	mov	r0, r3
   158b2:	f002 f939 	bl	17b28 <__aeabi_f2d>
   158b6:	4602      	mov	r2, r0
   158b8:	460b      	mov	r3, r1
   158ba:	4610      	mov	r0, r2
   158bc:	4619      	mov	r1, r3
   158be:	f04f 0200 	mov.w	r2, #0
   158c2:	f04f 0300 	mov.w	r3, #0
   158c6:	f2c4 034e 	movt	r3, #16462	; 0x404e
   158ca:	f002 f981 	bl	17bd0 <__aeabi_dmul>
   158ce:	4602      	mov	r2, r0
   158d0:	460b      	mov	r3, r1
   158d2:	4610      	mov	r0, r2
   158d4:	4619      	mov	r1, r3
   158d6:	f04f 0200 	mov.w	r2, #0
   158da:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   158de:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   158e2:	f002 fa9f 	bl	17e24 <__aeabi_ddiv>
   158e6:	4602      	mov	r2, r0
   158e8:	460b      	mov	r3, r1
   158ea:	4610      	mov	r0, r2
   158ec:	4619      	mov	r1, r3
   158ee:	f002 fc09 	bl	18104 <__aeabi_d2iz>
   158f2:	4603      	mov	r3, r0
   158f4:	b29b      	uxth	r3, r3
   158f6:	b29a      	uxth	r2, r3
   158f8:	f64c 1332 	movw	r3, #51506	; 0xc932
   158fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15900:	881b      	ldrh	r3, [r3, #0]
   15902:	b29b      	uxth	r3, r3
   15904:	4413      	add	r3, r2
   15906:	b29b      	uxth	r3, r3
   15908:	b29a      	uxth	r2, r3
   1590a:	f240 5344 	movw	r3, #1348	; 0x544
   1590e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15912:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   15914:	f240 5344 	movw	r3, #1348	; 0x544
   15918:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1591c:	881b      	ldrh	r3, [r3, #0]
   1591e:	b21b      	sxth	r3, r3
   15920:	4618      	mov	r0, r3
   15922:	f002 fd41 	bl	183a8 <__aeabi_i2f>
   15926:	4602      	mov	r2, r0
   15928:	f24c 3308 	movw	r3, #49928	; 0xc308
   1592c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15930:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15932:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15936:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1593a:	781b      	ldrb	r3, [r3, #0]
   1593c:	2b02      	cmp	r3, #2
   1593e:	d168      	bne.n	15a12 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15940:	79fb      	ldrb	r3, [r7, #7]
   15942:	2b00      	cmp	r3, #0
   15944:	d013      	beq.n	1596e <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   15946:	f240 5342 	movw	r3, #1346	; 0x542
   1594a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1594e:	881a      	ldrh	r2, [r3, #0]
   15950:	f64c 1334 	movw	r3, #51508	; 0xc934
   15954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15958:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1595a:	f24c 4320 	movw	r3, #50208	; 0xc420
   1595e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15962:	899a      	ldrh	r2, [r3, #12]
   15964:	f64c 1330 	movw	r3, #51504	; 0xc930
   15968:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1596c:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   1596e:	f24c 4320 	movw	r3, #50208	; 0xc420
   15972:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15976:	899b      	ldrh	r3, [r3, #12]
   15978:	b21a      	sxth	r2, r3
   1597a:	f64c 1330 	movw	r3, #51504	; 0xc930
   1597e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15982:	881b      	ldrh	r3, [r3, #0]
   15984:	b21b      	sxth	r3, r3
   15986:	1ad3      	subs	r3, r2, r3
   15988:	4618      	mov	r0, r3
   1598a:	f002 fd0d 	bl	183a8 <__aeabi_i2f>
   1598e:	4603      	mov	r3, r0
   15990:	4618      	mov	r0, r3
   15992:	f002 f8c9 	bl	17b28 <__aeabi_f2d>
   15996:	4602      	mov	r2, r0
   15998:	460b      	mov	r3, r1
   1599a:	4610      	mov	r0, r2
   1599c:	4619      	mov	r1, r3
   1599e:	f04f 0200 	mov.w	r2, #0
   159a2:	f04f 0300 	mov.w	r3, #0
   159a6:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   159aa:	f002 f911 	bl	17bd0 <__aeabi_dmul>
   159ae:	4602      	mov	r2, r0
   159b0:	460b      	mov	r3, r1
   159b2:	4610      	mov	r0, r2
   159b4:	4619      	mov	r1, r3
   159b6:	f04f 0200 	mov.w	r2, #0
   159ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   159be:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   159c2:	f002 fa2f 	bl	17e24 <__aeabi_ddiv>
   159c6:	4602      	mov	r2, r0
   159c8:	460b      	mov	r3, r1
   159ca:	4610      	mov	r0, r2
   159cc:	4619      	mov	r1, r3
   159ce:	f002 fb99 	bl	18104 <__aeabi_d2iz>
   159d2:	4603      	mov	r3, r0
   159d4:	b29b      	uxth	r3, r3
   159d6:	b29a      	uxth	r2, r3
   159d8:	f64c 1334 	movw	r3, #51508	; 0xc934
   159dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159e0:	881b      	ldrh	r3, [r3, #0]
   159e2:	b29b      	uxth	r3, r3
   159e4:	4413      	add	r3, r2
   159e6:	b29b      	uxth	r3, r3
   159e8:	b29a      	uxth	r2, r3
   159ea:	f240 5342 	movw	r3, #1346	; 0x542
   159ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159f2:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   159f4:	f240 5342 	movw	r3, #1346	; 0x542
   159f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159fc:	881b      	ldrh	r3, [r3, #0]
   159fe:	b21b      	sxth	r3, r3
   15a00:	4618      	mov	r0, r3
   15a02:	f002 fcd1 	bl	183a8 <__aeabi_i2f>
   15a06:	4602      	mov	r2, r0
   15a08:	f24c 330c 	movw	r3, #49932	; 0xc30c
   15a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a10:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   15a12:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   15a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a1a:	781b      	ldrb	r3, [r3, #0]
   15a1c:	2b02      	cmp	r3, #2
   15a1e:	f040 80da 	bne.w	15bd6 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15a22:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a2a:	781b      	ldrb	r3, [r3, #0]
   15a2c:	2b02      	cmp	r3, #2
   15a2e:	d165      	bne.n	15afc <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15a30:	79fb      	ldrb	r3, [r7, #7]
   15a32:	2b00      	cmp	r3, #0
   15a34:	d013      	beq.n	15a5e <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15a36:	f240 5358 	movw	r3, #1368	; 0x558
   15a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a3e:	681a      	ldr	r2, [r3, #0]
   15a40:	f64c 1338 	movw	r3, #51512	; 0xc938
   15a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a48:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15a4a:	f24c 4320 	movw	r3, #50208	; 0xc420
   15a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a52:	895a      	ldrh	r2, [r3, #10]
   15a54:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a5c:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15a5e:	f64c 1338 	movw	r3, #51512	; 0xc938
   15a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a66:	681b      	ldr	r3, [r3, #0]
   15a68:	4618      	mov	r0, r3
   15a6a:	f002 f85d 	bl	17b28 <__aeabi_f2d>
   15a6e:	4604      	mov	r4, r0
   15a70:	460d      	mov	r5, r1
   15a72:	f24c 4320 	movw	r3, #50208	; 0xc420
   15a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a7a:	895b      	ldrh	r3, [r3, #10]
   15a7c:	b21a      	sxth	r2, r3
   15a7e:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a86:	881b      	ldrh	r3, [r3, #0]
   15a88:	b21b      	sxth	r3, r3
   15a8a:	1ad3      	subs	r3, r2, r3
   15a8c:	4618      	mov	r0, r3
   15a8e:	f002 fc8b 	bl	183a8 <__aeabi_i2f>
   15a92:	4603      	mov	r3, r0
   15a94:	4618      	mov	r0, r3
   15a96:	f002 f847 	bl	17b28 <__aeabi_f2d>
   15a9a:	4602      	mov	r2, r0
   15a9c:	460b      	mov	r3, r1
   15a9e:	4610      	mov	r0, r2
   15aa0:	4619      	mov	r1, r3
   15aa2:	a34f      	add	r3, pc, #316	; (adr r3, 15be0 <inflight_calib+0x3a8>)
   15aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15aa8:	f002 f892 	bl	17bd0 <__aeabi_dmul>
   15aac:	4602      	mov	r2, r0
   15aae:	460b      	mov	r3, r1
   15ab0:	4610      	mov	r0, r2
   15ab2:	4619      	mov	r1, r3
   15ab4:	f04f 0200 	mov.w	r2, #0
   15ab8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15abc:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15ac0:	f002 f9b0 	bl	17e24 <__aeabi_ddiv>
   15ac4:	4602      	mov	r2, r0
   15ac6:	460b      	mov	r3, r1
   15ac8:	4620      	mov	r0, r4
   15aca:	4629      	mov	r1, r5
   15acc:	f001 fece 	bl	1786c <__adddf3>
   15ad0:	4602      	mov	r2, r0
   15ad2:	460b      	mov	r3, r1
   15ad4:	4610      	mov	r0, r2
   15ad6:	4619      	mov	r1, r3
   15ad8:	f002 fb5c 	bl	18194 <__aeabi_d2f>
   15adc:	4602      	mov	r2, r0
   15ade:	f240 5358 	movw	r3, #1368	; 0x558
   15ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ae6:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15ae8:	f240 5358 	movw	r3, #1368	; 0x558
   15aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15af0:	681a      	ldr	r2, [r3, #0]
   15af2:	f24c 3308 	movw	r3, #49928	; 0xc308
   15af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15afa:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15afc:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b04:	781b      	ldrb	r3, [r3, #0]
   15b06:	2b02      	cmp	r3, #2
   15b08:	d165      	bne.n	15bd6 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15b0a:	79fb      	ldrb	r3, [r7, #7]
   15b0c:	2b00      	cmp	r3, #0
   15b0e:	d013      	beq.n	15b38 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15b10:	f240 535c 	movw	r3, #1372	; 0x55c
   15b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b18:	681a      	ldr	r2, [r3, #0]
   15b1a:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b22:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15b24:	f24c 4320 	movw	r3, #50208	; 0xc420
   15b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b2c:	899a      	ldrh	r2, [r3, #12]
   15b2e:	f64c 1330 	movw	r3, #51504	; 0xc930
   15b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b36:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15b38:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b40:	681b      	ldr	r3, [r3, #0]
   15b42:	4618      	mov	r0, r3
   15b44:	f001 fff0 	bl	17b28 <__aeabi_f2d>
   15b48:	4604      	mov	r4, r0
   15b4a:	460d      	mov	r5, r1
   15b4c:	f24c 4320 	movw	r3, #50208	; 0xc420
   15b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b54:	899b      	ldrh	r3, [r3, #12]
   15b56:	b21a      	sxth	r2, r3
   15b58:	f64c 1330 	movw	r3, #51504	; 0xc930
   15b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b60:	881b      	ldrh	r3, [r3, #0]
   15b62:	b21b      	sxth	r3, r3
   15b64:	1ad3      	subs	r3, r2, r3
   15b66:	4618      	mov	r0, r3
   15b68:	f002 fc1e 	bl	183a8 <__aeabi_i2f>
   15b6c:	4603      	mov	r3, r0
   15b6e:	4618      	mov	r0, r3
   15b70:	f001 ffda 	bl	17b28 <__aeabi_f2d>
   15b74:	4602      	mov	r2, r0
   15b76:	460b      	mov	r3, r1
   15b78:	4610      	mov	r0, r2
   15b7a:	4619      	mov	r1, r3
   15b7c:	a31a      	add	r3, pc, #104	; (adr r3, 15be8 <inflight_calib+0x3b0>)
   15b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b82:	f002 f825 	bl	17bd0 <__aeabi_dmul>
   15b86:	4602      	mov	r2, r0
   15b88:	460b      	mov	r3, r1
   15b8a:	4610      	mov	r0, r2
   15b8c:	4619      	mov	r1, r3
   15b8e:	f04f 0200 	mov.w	r2, #0
   15b92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b96:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b9a:	f002 f943 	bl	17e24 <__aeabi_ddiv>
   15b9e:	4602      	mov	r2, r0
   15ba0:	460b      	mov	r3, r1
   15ba2:	4620      	mov	r0, r4
   15ba4:	4629      	mov	r1, r5
   15ba6:	f001 fe61 	bl	1786c <__adddf3>
   15baa:	4602      	mov	r2, r0
   15bac:	460b      	mov	r3, r1
   15bae:	4610      	mov	r0, r2
   15bb0:	4619      	mov	r1, r3
   15bb2:	f002 faef 	bl	18194 <__aeabi_d2f>
   15bb6:	4602      	mov	r2, r0
   15bb8:	f240 535c 	movw	r3, #1372	; 0x55c
   15bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bc0:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15bc2:	f240 535c 	movw	r3, #1372	; 0x55c
   15bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bca:	681a      	ldr	r2, [r3, #0]
   15bcc:	f24c 330c 	movw	r3, #49932	; 0xc30c
   15bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bd4:	601a      	str	r2, [r3, #0]
    }
  }
}
   15bd6:	3708      	adds	r7, #8
   15bd8:	46bd      	mov	sp, r7
   15bda:	bdb0      	pop	{r4, r5, r7, pc}
   15bdc:	f3af 8000 	nop.w
   15be0:	9999999a 	.word	0x9999999a
   15be4:	3fb99999 	.word	0x3fb99999
   15be8:	9999999a 	.word	0x9999999a
   15bec:	bfc99999 	.word	0xbfc99999

00015bf0 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15bf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15bf4:	b08e      	sub	sp, #56	; 0x38
   15bf6:	af00      	add	r7, sp, #0
   15bf8:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15bfc:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15c00:	a357      	add	r3, pc, #348	; (adr r3, 15d60 <pp_atan2+0x170>)
   15c02:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15c0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c0e:	f04f 0200 	mov.w	r2, #0
   15c12:	f04f 0300 	mov.w	r3, #0
   15c16:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15c1a:	f001 ffd9 	bl	17bd0 <__aeabi_dmul>
   15c1e:	4602      	mov	r2, r0
   15c20:	460b      	mov	r3, r1
   15c22:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15c26:	e9d7 0100 	ldrd	r0, r1, [r7]
   15c2a:	f04f 0200 	mov.w	r2, #0
   15c2e:	f04f 0300 	mov.w	r3, #0
   15c32:	f002 fa3f 	bl	180b4 <__aeabi_dcmplt>
   15c36:	4603      	mov	r3, r0
   15c38:	2b00      	cmp	r3, #0
   15c3a:	d009      	beq.n	15c50 <pp_atan2+0x60>
   15c3c:	a14a      	add	r1, pc, #296	; (adr r1, 15d68 <pp_atan2+0x178>)
   15c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
   15c42:	e9d7 2300 	ldrd	r2, r3, [r7]
   15c46:	f001 fe0f 	bl	17868 <__aeabi_dsub>
   15c4a:	4602      	mov	r2, r0
   15c4c:	460b      	mov	r3, r1
   15c4e:	e008      	b.n	15c62 <pp_atan2+0x72>
   15c50:	e9d7 0100 	ldrd	r0, r1, [r7]
   15c54:	a344      	add	r3, pc, #272	; (adr r3, 15d68 <pp_atan2+0x178>)
   15c56:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c5a:	f001 fe07 	bl	1786c <__adddf3>
   15c5e:	4602      	mov	r2, r0
   15c60:	460b      	mov	r3, r1
   15c62:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15c66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c6a:	f04f 0200 	mov.w	r2, #0
   15c6e:	f04f 0300 	mov.w	r3, #0
   15c72:	f002 fa3d 	bl	180f0 <__aeabi_dcmpgt>
   15c76:	4603      	mov	r3, r0
   15c78:	2b00      	cmp	r3, #0
   15c7a:	d02a      	beq.n	15cd2 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c84:	f001 fdf0 	bl	17868 <__aeabi_dsub>
   15c88:	4602      	mov	r2, r0
   15c8a:	460b      	mov	r3, r1
   15c8c:	4690      	mov	r8, r2
   15c8e:	4699      	mov	r9, r3
   15c90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c98:	f001 fde8 	bl	1786c <__adddf3>
   15c9c:	4602      	mov	r2, r0
   15c9e:	460b      	mov	r3, r1
   15ca0:	4640      	mov	r0, r8
   15ca2:	4649      	mov	r1, r9
   15ca4:	f002 f8be 	bl	17e24 <__aeabi_ddiv>
   15ca8:	4602      	mov	r2, r0
   15caa:	460b      	mov	r3, r1
   15cac:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15cb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15cb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15cb8:	f001 ff8a 	bl	17bd0 <__aeabi_dmul>
   15cbc:	4602      	mov	r2, r0
   15cbe:	460b      	mov	r3, r1
   15cc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15cc4:	f001 fdd0 	bl	17868 <__aeabi_dsub>
   15cc8:	4602      	mov	r2, r0
   15cca:	460b      	mov	r3, r1
   15ccc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15cd0:	e029      	b.n	15d26 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15cd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15cda:	f001 fdc7 	bl	1786c <__adddf3>
   15cde:	4602      	mov	r2, r0
   15ce0:	460b      	mov	r3, r1
   15ce2:	4690      	mov	r8, r2
   15ce4:	4699      	mov	r9, r3
   15ce6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15cee:	f001 fdbb 	bl	17868 <__aeabi_dsub>
   15cf2:	4602      	mov	r2, r0
   15cf4:	460b      	mov	r3, r1
   15cf6:	4640      	mov	r0, r8
   15cf8:	4649      	mov	r1, r9
   15cfa:	f002 f893 	bl	17e24 <__aeabi_ddiv>
   15cfe:	4602      	mov	r2, r0
   15d00:	460b      	mov	r3, r1
   15d02:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15d06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d0e:	f001 ff5f 	bl	17bd0 <__aeabi_dmul>
   15d12:	4602      	mov	r2, r0
   15d14:	460b      	mov	r3, r1
   15d16:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15d1a:	f001 fda5 	bl	17868 <__aeabi_dsub>
   15d1e:	4602      	mov	r2, r0
   15d20:	460b      	mov	r3, r1
   15d22:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15d26:	e9d7 0100 	ldrd	r0, r1, [r7]
   15d2a:	f04f 0200 	mov.w	r2, #0
   15d2e:	f04f 0300 	mov.w	r3, #0
   15d32:	f002 f9bf 	bl	180b4 <__aeabi_dcmplt>
   15d36:	4603      	mov	r3, r0
   15d38:	2b00      	cmp	r3, #0
   15d3a:	d004      	beq.n	15d46 <pp_atan2+0x156>
		return (-angle);
   15d3c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15d40:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15d44:	e001      	b.n	15d4a <pp_atan2+0x15a>
	else
		return angle;
   15d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15d4a:	4622      	mov	r2, r4
   15d4c:	462b      	mov	r3, r5
}
   15d4e:	4610      	mov	r0, r2
   15d50:	4619      	mov	r1, r3
   15d52:	3738      	adds	r7, #56	; 0x38
   15d54:	46bd      	mov	sp, r7
   15d56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15d5a:	bf00      	nop
   15d5c:	f3af 8000 	nop.w
   15d60:	54442d18 	.word	0x54442d18
   15d64:	3fe921fb 	.word	0x3fe921fb
   15d68:	d9d7bdbb 	.word	0xd9d7bdbb
   15d6c:	3ddb7cdf 	.word	0x3ddb7cdf

00015d70 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15d70:	b5b0      	push	{r4, r5, r7, lr}
   15d72:	b08c      	sub	sp, #48	; 0x30
   15d74:	af00      	add	r7, sp, #0
   15d76:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15d7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d82:	2301      	movs	r3, #1
   15d84:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15d86:	e00a      	b.n	15d9e <pp_sin+0x2e>
   15d88:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d8c:	a35a      	add	r3, pc, #360	; (adr r3, 15ef8 <pp_sin+0x188>)
   15d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d92:	f001 fd6b 	bl	1786c <__adddf3>
   15d96:	4602      	mov	r2, r0
   15d98:	460b      	mov	r3, r1
   15d9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15da2:	a357      	add	r3, pc, #348	; (adr r3, 15f00 <pp_sin+0x190>)
   15da4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15da8:	f002 f984 	bl	180b4 <__aeabi_dcmplt>
   15dac:	4603      	mov	r3, r0
   15dae:	2b00      	cmp	r3, #0
   15db0:	d1ea      	bne.n	15d88 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15db2:	e00a      	b.n	15dca <pp_sin+0x5a>
   15db4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15db8:	a34f      	add	r3, pc, #316	; (adr r3, 15ef8 <pp_sin+0x188>)
   15dba:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dbe:	f001 fd53 	bl	17868 <__aeabi_dsub>
   15dc2:	4602      	mov	r2, r0
   15dc4:	460b      	mov	r3, r1
   15dc6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15dca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dce:	a34e      	add	r3, pc, #312	; (adr r3, 15f08 <pp_sin+0x198>)
   15dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dd4:	f002 f98c 	bl	180f0 <__aeabi_dcmpgt>
   15dd8:	4603      	mov	r3, r0
   15dda:	2b00      	cmp	r3, #0
   15ddc:	d1ea      	bne.n	15db4 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15dde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15de2:	a34b      	add	r3, pc, #300	; (adr r3, 15f10 <pp_sin+0x1a0>)
   15de4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15de8:	f002 f982 	bl	180f0 <__aeabi_dcmpgt>
   15dec:	4603      	mov	r3, r0
   15dee:	2b00      	cmp	r3, #0
   15df0:	d00d      	beq.n	15e0e <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15df2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15df6:	a348      	add	r3, pc, #288	; (adr r3, 15f18 <pp_sin+0x1a8>)
   15df8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dfc:	f001 fd34 	bl	17868 <__aeabi_dsub>
   15e00:	4602      	mov	r2, r0
   15e02:	460b      	mov	r3, r1
   15e04:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15e08:	f04f 33ff 	mov.w	r3, #4294967295
   15e0c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15e0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e12:	a343      	add	r3, pc, #268	; (adr r3, 15f20 <pp_sin+0x1b0>)
   15e14:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e18:	f002 f804 	bl	17e24 <__aeabi_ddiv>
   15e1c:	4602      	mov	r2, r0
   15e1e:	460b      	mov	r3, r1
   15e20:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15e24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15e2c:	f001 fed0 	bl	17bd0 <__aeabi_dmul>
   15e30:	4602      	mov	r2, r0
   15e32:	460b      	mov	r3, r1
   15e34:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15e38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15e3c:	a33a      	add	r3, pc, #232	; (adr r3, 15f28 <pp_sin+0x1b8>)
   15e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e42:	f001 fec5 	bl	17bd0 <__aeabi_dmul>
   15e46:	4602      	mov	r2, r0
   15e48:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15e4a:	4610      	mov	r0, r2
   15e4c:	4619      	mov	r1, r3
   15e4e:	a338      	add	r3, pc, #224	; (adr r3, 15f30 <pp_sin+0x1c0>)
   15e50:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e54:	f001 fd08 	bl	17868 <__aeabi_dsub>
   15e58:	4602      	mov	r2, r0
   15e5a:	460b      	mov	r3, r1
   15e5c:	4610      	mov	r0, r2
   15e5e:	4619      	mov	r1, r3
   15e60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e64:	f001 feb4 	bl	17bd0 <__aeabi_dmul>
   15e68:	4602      	mov	r2, r0
   15e6a:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15e6c:	4610      	mov	r0, r2
   15e6e:	4619      	mov	r1, r3
   15e70:	a331      	add	r3, pc, #196	; (adr r3, 15f38 <pp_sin+0x1c8>)
   15e72:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e76:	f001 fcf9 	bl	1786c <__adddf3>
   15e7a:	4602      	mov	r2, r0
   15e7c:	460b      	mov	r3, r1
   15e7e:	4610      	mov	r0, r2
   15e80:	4619      	mov	r1, r3
   15e82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e86:	f001 fea3 	bl	17bd0 <__aeabi_dmul>
   15e8a:	4602      	mov	r2, r0
   15e8c:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15e8e:	4610      	mov	r0, r2
   15e90:	4619      	mov	r1, r3
   15e92:	a32b      	add	r3, pc, #172	; (adr r3, 15f40 <pp_sin+0x1d0>)
   15e94:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e98:	f001 fce6 	bl	17868 <__aeabi_dsub>
   15e9c:	4602      	mov	r2, r0
   15e9e:	460b      	mov	r3, r1
   15ea0:	4610      	mov	r0, r2
   15ea2:	4619      	mov	r1, r3
   15ea4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15ea8:	f001 fe92 	bl	17bd0 <__aeabi_dmul>
   15eac:	4602      	mov	r2, r0
   15eae:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15eb0:	4610      	mov	r0, r2
   15eb2:	4619      	mov	r1, r3
   15eb4:	a324      	add	r3, pc, #144	; (adr r3, 15f48 <pp_sin+0x1d8>)
   15eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15eba:	f001 fcd7 	bl	1786c <__adddf3>
   15ebe:	4602      	mov	r2, r0
   15ec0:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15ec2:	4610      	mov	r0, r2
   15ec4:	4619      	mov	r1, r3
   15ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15eca:	f001 fe81 	bl	17bd0 <__aeabi_dmul>
   15ece:	4602      	mov	r2, r0
   15ed0:	460b      	mov	r3, r1
   15ed2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ed8:	2b00      	cmp	r3, #0
   15eda:	da04      	bge.n	15ee6 <pp_sin+0x176>
   15edc:	68bc      	ldr	r4, [r7, #8]
   15ede:	68fb      	ldr	r3, [r7, #12]
   15ee0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15ee4:	e001      	b.n	15eea <pp_sin+0x17a>
   15ee6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15eea:	4622      	mov	r2, r4
   15eec:	462b      	mov	r3, r5
}
   15eee:	4610      	mov	r0, r2
   15ef0:	4619      	mov	r1, r3
   15ef2:	3730      	adds	r7, #48	; 0x30
   15ef4:	46bd      	mov	sp, r7
   15ef6:	bdb0      	pop	{r4, r5, r7, pc}
   15ef8:	54442d18 	.word	0x54442d18
   15efc:	401921fb 	.word	0x401921fb
   15f00:	54442d18 	.word	0x54442d18
   15f04:	bff921fb 	.word	0xbff921fb
   15f08:	7f3321d2 	.word	0x7f3321d2
   15f0c:	4012d97c 	.word	0x4012d97c
   15f10:	54442d18 	.word	0x54442d18
   15f14:	3ff921fb 	.word	0x3ff921fb
   15f18:	54442d18 	.word	0x54442d18
   15f1c:	400921fb 	.word	0x400921fb
   15f20:	5443d6f4 	.word	0x5443d6f4
   15f24:	3ff921fb 	.word	0x3ff921fb
   15f28:	48a890af 	.word	0x48a890af
   15f2c:	3f23daf7 	.word	0x3f23daf7
   15f30:	645b6d0e 	.word	0x645b6d0e
   15f34:	3f7324cc 	.word	0x3f7324cc
   15f38:	f65619a5 	.word	0xf65619a5
   15f3c:	3fb4668a 	.word	0x3fb4668a
   15f40:	16acf9cd 	.word	0x16acf9cd
   15f44:	3fe4abbc 	.word	0x3fe4abbc
   15f48:	520817f7 	.word	0x520817f7
   15f4c:	3ff921fb 	.word	0x3ff921fb

00015f50 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15f50:	b480      	push	{r7}
   15f52:	b083      	sub	sp, #12
   15f54:	af00      	add	r7, sp, #0
   15f56:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15f5a:	4610      	mov	r0, r2
   15f5c:	4619      	mov	r1, r3
   15f5e:	370c      	adds	r7, #12
   15f60:	46bd      	mov	sp, r7
   15f62:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f66:	4770      	bx	lr

00015f68 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15f68:	b480      	push	{r7}
   15f6a:	b083      	sub	sp, #12
   15f6c:	af00      	add	r7, sp, #0
   15f6e:	4603      	mov	r3, r0
   15f70:	6039      	str	r1, [r7, #0]
   15f72:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15f74:	79fa      	ldrb	r2, [r7, #7]
   15f76:	f64c 1350 	movw	r3, #51536	; 0xc950
   15f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f7e:	6839      	ldr	r1, [r7, #0]
   15f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15f84:	370c      	adds	r7, #12
   15f86:	46bd      	mov	sp, r7
   15f88:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f8c:	4770      	bx	lr
   15f8e:	bf00      	nop

00015f90 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15f90:	b480      	push	{r7}
   15f92:	b083      	sub	sp, #12
   15f94:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15f96:	f242 0315 	movw	r3, #8213	; 0x2015
   15f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f9e:	2200      	movs	r2, #0
   15fa0:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15fa2:	f242 0314 	movw	r3, #8212	; 0x2014
   15fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15faa:	2200      	movs	r2, #0
   15fac:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15fae:	f242 0307 	movw	r3, #8199	; 0x2007
   15fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fb6:	22c0      	movs	r2, #192	; 0xc0
   15fb8:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15fba:	f242 0306 	movw	r3, #8198	; 0x2006
   15fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fc2:	22cf      	movs	r2, #207	; 0xcf
   15fc4:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15fc6:	2300      	movs	r3, #0
   15fc8:	71fb      	strb	r3, [r7, #7]
   15fca:	e00a      	b.n	15fe2 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15fcc:	79fa      	ldrb	r2, [r7, #7]
   15fce:	f64c 1350 	movw	r3, #51536	; 0xc950
   15fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fd6:	2100      	movs	r1, #0
   15fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15fdc:	79fb      	ldrb	r3, [r7, #7]
   15fde:	3301      	adds	r3, #1
   15fe0:	71fb      	strb	r3, [r7, #7]
   15fe2:	79fb      	ldrb	r3, [r7, #7]
   15fe4:	2b07      	cmp	r3, #7
   15fe6:	d9f1      	bls.n	15fcc <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15fe8:	370c      	adds	r7, #12
   15fea:	46bd      	mov	sp, r7
   15fec:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ff0:	4770      	bx	lr
   15ff2:	bf00      	nop

00015ff4 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15ff4:	b480      	push	{r7}
   15ff6:	b083      	sub	sp, #12
   15ff8:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15ffa:	f242 0326 	movw	r3, #8230	; 0x2026
   15ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16002:	881b      	ldrh	r3, [r3, #0]
   16004:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   16006:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   1600a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1600e:	881b      	ldrh	r3, [r3, #0]
   16010:	88fa      	ldrh	r2, [r7, #6]
   16012:	1ad3      	subs	r3, r2, r3
   16014:	80bb      	strh	r3, [r7, #4]
  last		= this;
   16016:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   1601a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1601e:	88fa      	ldrh	r2, [r7, #6]
   16020:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   16022:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16026:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1602a:	781b      	ldrb	r3, [r3, #0]
   1602c:	2b00      	cmp	r3, #0
   1602e:	d11e      	bne.n	1606e <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   16030:	f242 0324 	movw	r3, #8228	; 0x2024
   16034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16038:	781b      	ldrb	r3, [r3, #0]
   1603a:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   1603c:	f64c 13af 	movw	r3, #51631	; 0xc9af
   16040:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16044:	781b      	ldrb	r3, [r3, #0]
   16046:	78fa      	ldrb	r2, [r7, #3]
   16048:	1ad3      	subs	r3, r2, r3
   1604a:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   1604c:	f64c 13af 	movw	r3, #51631	; 0xc9af
   16050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16054:	78fa      	ldrb	r2, [r7, #3]
   16056:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   16058:	78bb      	ldrb	r3, [r7, #2]
   1605a:	2b6d      	cmp	r3, #109	; 0x6d
   1605c:	d906      	bls.n	1606c <__vector_34+0x78>
      state = 1;
   1605e:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16066:	2201      	movs	r2, #1
   16068:	701a      	strb	r2, [r3, #0]
   1606a:	e053      	b.n	16114 <__vector_34+0x120>
   1606c:	e052      	b.n	16114 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   1606e:	88bb      	ldrh	r3, [r7, #4]
   16070:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   16074:	d304      	bcc.n	16080 <__vector_34+0x8c>
   16076:	88ba      	ldrh	r2, [r7, #4]
   16078:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   1607c:	429a      	cmp	r2, r3
   1607e:	d911      	bls.n	160a4 <__vector_34+0xb0>
      RestartPpmCycle();
   16080:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16084:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16088:	2200      	movs	r2, #0
   1608a:	701a      	strb	r2, [r3, #0]
   1608c:	f242 0324 	movw	r3, #8228	; 0x2024
   16090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16094:	781b      	ldrb	r3, [r3, #0]
   16096:	b2da      	uxtb	r2, r3
   16098:	f64c 13af 	movw	r3, #51631	; 0xc9af
   1609c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160a0:	701a      	strb	r2, [r3, #0]
   160a2:	e038      	b.n	16116 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   160a4:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   160a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160ac:	781b      	ldrb	r3, [r3, #0]
   160ae:	1e5a      	subs	r2, r3, #1
   160b0:	f64c 1370 	movw	r3, #51568	; 0xc970
   160b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160b8:	88b9      	ldrh	r1, [r7, #4]
   160ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   160be:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   160c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160c6:	781b      	ldrb	r3, [r3, #0]
   160c8:	2b08      	cmp	r3, #8
   160ca:	d917      	bls.n	160fc <__vector_34+0x108>
      ppm_valid	= 1;
   160cc:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   160d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160d4:	2201      	movs	r2, #1
   160d6:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   160d8:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   160dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160e0:	2200      	movs	r2, #0
   160e2:	701a      	strb	r2, [r3, #0]
   160e4:	f242 0324 	movw	r3, #8228	; 0x2024
   160e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160ec:	781b      	ldrb	r3, [r3, #0]
   160ee:	b2da      	uxtb	r2, r3
   160f0:	f64c 13af 	movw	r3, #51631	; 0xc9af
   160f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160f8:	701a      	strb	r2, [r3, #0]
   160fa:	e00c      	b.n	16116 <__vector_34+0x122>
    } else 
      state++;
   160fc:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16100:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16104:	781b      	ldrb	r3, [r3, #0]
   16106:	3301      	adds	r3, #1
   16108:	b2da      	uxtb	r2, r3
   1610a:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   1610e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16112:	701a      	strb	r2, [r3, #0]
  }
  return;
   16114:	bf00      	nop
}
   16116:	370c      	adds	r7, #12
   16118:	46bd      	mov	sp, r7
   1611a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1611e:	4770      	bx	lr

00016120 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   16120:	b590      	push	{r4, r7, lr}
   16122:	b083      	sub	sp, #12
   16124:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   16126:	f64c 1370 	movw	r3, #51568	; 0xc970
   1612a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1612e:	881b      	ldrh	r3, [r3, #0]
   16130:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   16134:	b29b      	uxth	r3, r3
   16136:	80fb      	strh	r3, [r7, #6]
   16138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1613c:	4618      	mov	r0, r3
   1613e:	f002 f933 	bl	183a8 <__aeabi_i2f>
   16142:	4603      	mov	r3, r0
   16144:	4618      	mov	r0, r3
   16146:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   1614a:	f002 f981 	bl	18450 <__aeabi_fmul>
   1614e:	4603      	mov	r3, r0
   16150:	4618      	mov	r0, r3
   16152:	f002 fb43 	bl	187dc <__aeabi_f2iz>
   16156:	4603      	mov	r3, r0
   16158:	b29a      	uxth	r2, r3
   1615a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1615e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16162:	801a      	strh	r2, [r3, #0]
   16164:	f64c 1384 	movw	r3, #51588	; 0xc984
   16168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1616c:	881b      	ldrh	r3, [r3, #0]
   1616e:	b21b      	sxth	r3, r3
   16170:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16174:	dd07      	ble.n	16186 <last_radio_from_ppm+0x66>
   16176:	f64c 1384 	movw	r3, #51588	; 0xc984
   1617a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1617e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16182:	801a      	strh	r2, [r3, #0]
   16184:	e00d      	b.n	161a2 <last_radio_from_ppm+0x82>
   16186:	f64c 1384 	movw	r3, #51588	; 0xc984
   1618a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1618e:	881b      	ldrh	r3, [r3, #0]
   16190:	b21b      	sxth	r3, r3
   16192:	2b00      	cmp	r3, #0
   16194:	da05      	bge.n	161a2 <last_radio_from_ppm+0x82>
   16196:	f64c 1384 	movw	r3, #51588	; 0xc984
   1619a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1619e:	2200      	movs	r2, #0
   161a0:	801a      	strh	r2, [r3, #0]
   161a2:	f64c 1370 	movw	r3, #51568	; 0xc970
   161a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161aa:	885b      	ldrh	r3, [r3, #2]
   161ac:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161b0:	b29b      	uxth	r3, r3
   161b2:	80fb      	strh	r3, [r7, #6]
   161b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161b8:	4618      	mov	r0, r3
   161ba:	f002 f8f5 	bl	183a8 <__aeabi_i2f>
   161be:	4603      	mov	r3, r0
   161c0:	4618      	mov	r0, r3
   161c2:	f002 fb0b 	bl	187dc <__aeabi_f2iz>
   161c6:	4603      	mov	r3, r0
   161c8:	b29a      	uxth	r2, r3
   161ca:	f64c 1384 	movw	r3, #51588	; 0xc984
   161ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161d2:	805a      	strh	r2, [r3, #2]
   161d4:	f64c 1384 	movw	r3, #51588	; 0xc984
   161d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161dc:	885b      	ldrh	r3, [r3, #2]
   161de:	b21b      	sxth	r3, r3
   161e0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161e4:	dd07      	ble.n	161f6 <last_radio_from_ppm+0xd6>
   161e6:	f64c 1384 	movw	r3, #51588	; 0xc984
   161ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ee:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   161f2:	805a      	strh	r2, [r3, #2]
   161f4:	e00f      	b.n	16216 <last_radio_from_ppm+0xf6>
   161f6:	f64c 1384 	movw	r3, #51588	; 0xc984
   161fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161fe:	885b      	ldrh	r3, [r3, #2]
   16200:	b21b      	sxth	r3, r3
   16202:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16206:	da06      	bge.n	16216 <last_radio_from_ppm+0xf6>
   16208:	f64c 1384 	movw	r3, #51588	; 0xc984
   1620c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16210:	f64d 2280 	movw	r2, #55936	; 0xda80
   16214:	805a      	strh	r2, [r3, #2]
   16216:	f64c 1370 	movw	r3, #51568	; 0xc970
   1621a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1621e:	889b      	ldrh	r3, [r3, #4]
   16220:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16224:	b29b      	uxth	r3, r3
   16226:	80fb      	strh	r3, [r7, #6]
   16228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1622c:	4618      	mov	r0, r3
   1622e:	f002 f8bb 	bl	183a8 <__aeabi_i2f>
   16232:	4603      	mov	r3, r0
   16234:	4618      	mov	r0, r3
   16236:	f002 fad1 	bl	187dc <__aeabi_f2iz>
   1623a:	4603      	mov	r3, r0
   1623c:	b29a      	uxth	r2, r3
   1623e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16246:	809a      	strh	r2, [r3, #4]
   16248:	f64c 1384 	movw	r3, #51588	; 0xc984
   1624c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16250:	889b      	ldrh	r3, [r3, #4]
   16252:	b21b      	sxth	r3, r3
   16254:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16258:	dd07      	ble.n	1626a <last_radio_from_ppm+0x14a>
   1625a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1625e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16262:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16266:	809a      	strh	r2, [r3, #4]
   16268:	e00f      	b.n	1628a <last_radio_from_ppm+0x16a>
   1626a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1626e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16272:	889b      	ldrh	r3, [r3, #4]
   16274:	b21b      	sxth	r3, r3
   16276:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1627a:	da06      	bge.n	1628a <last_radio_from_ppm+0x16a>
   1627c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16280:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16284:	f64d 2280 	movw	r2, #55936	; 0xda80
   16288:	809a      	strh	r2, [r3, #4]
   1628a:	f64c 1370 	movw	r3, #51568	; 0xc970
   1628e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16292:	88db      	ldrh	r3, [r3, #6]
   16294:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16298:	b29b      	uxth	r3, r3
   1629a:	80fb      	strh	r3, [r7, #6]
   1629c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162a0:	4618      	mov	r0, r3
   162a2:	f002 f881 	bl	183a8 <__aeabi_i2f>
   162a6:	4603      	mov	r3, r0
   162a8:	4618      	mov	r0, r3
   162aa:	f002 fa97 	bl	187dc <__aeabi_f2iz>
   162ae:	4603      	mov	r3, r0
   162b0:	b29a      	uxth	r2, r3
   162b2:	f64c 1384 	movw	r3, #51588	; 0xc984
   162b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ba:	80da      	strh	r2, [r3, #6]
   162bc:	f64c 1384 	movw	r3, #51588	; 0xc984
   162c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162c4:	88db      	ldrh	r3, [r3, #6]
   162c6:	b21b      	sxth	r3, r3
   162c8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162cc:	dd07      	ble.n	162de <last_radio_from_ppm+0x1be>
   162ce:	f64c 1384 	movw	r3, #51588	; 0xc984
   162d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162d6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162da:	80da      	strh	r2, [r3, #6]
   162dc:	e00f      	b.n	162fe <last_radio_from_ppm+0x1de>
   162de:	f64c 1384 	movw	r3, #51588	; 0xc984
   162e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162e6:	88db      	ldrh	r3, [r3, #6]
   162e8:	b21b      	sxth	r3, r3
   162ea:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   162ee:	da06      	bge.n	162fe <last_radio_from_ppm+0x1de>
   162f0:	f64c 1384 	movw	r3, #51588	; 0xc984
   162f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162f8:	f64d 2280 	movw	r2, #55936	; 0xda80
   162fc:	80da      	strh	r2, [r3, #6]
   162fe:	f64c 1370 	movw	r3, #51568	; 0xc970
   16302:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16306:	891b      	ldrh	r3, [r3, #8]
   16308:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1630c:	b29b      	uxth	r3, r3
   1630e:	80fb      	strh	r3, [r7, #6]
   16310:	f64c 1398 	movw	r3, #51608	; 0xc998
   16314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16318:	891b      	ldrh	r3, [r3, #8]
   1631a:	b21b      	sxth	r3, r3
   1631c:	4618      	mov	r0, r3
   1631e:	f002 f843 	bl	183a8 <__aeabi_i2f>
   16322:	4604      	mov	r4, r0
   16324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16328:	4618      	mov	r0, r3
   1632a:	f002 f83d 	bl	183a8 <__aeabi_i2f>
   1632e:	4603      	mov	r3, r0
   16330:	4618      	mov	r0, r3
   16332:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16336:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1633a:	f002 f889 	bl	18450 <__aeabi_fmul>
   1633e:	4603      	mov	r3, r0
   16340:	4620      	mov	r0, r4
   16342:	4619      	mov	r1, r3
   16344:	f001 ff7c 	bl	18240 <__addsf3>
   16348:	4603      	mov	r3, r0
   1634a:	4618      	mov	r0, r3
   1634c:	f002 fa46 	bl	187dc <__aeabi_f2iz>
   16350:	4603      	mov	r3, r0
   16352:	b29a      	uxth	r2, r3
   16354:	f64c 1398 	movw	r3, #51608	; 0xc998
   16358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1635c:	811a      	strh	r2, [r3, #8]
   1635e:	f64c 1370 	movw	r3, #51568	; 0xc970
   16362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16366:	895b      	ldrh	r3, [r3, #10]
   16368:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1636c:	b29b      	uxth	r3, r3
   1636e:	80fb      	strh	r3, [r7, #6]
   16370:	f64c 1398 	movw	r3, #51608	; 0xc998
   16374:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16378:	895b      	ldrh	r3, [r3, #10]
   1637a:	b21b      	sxth	r3, r3
   1637c:	4618      	mov	r0, r3
   1637e:	f002 f813 	bl	183a8 <__aeabi_i2f>
   16382:	4604      	mov	r4, r0
   16384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16388:	4618      	mov	r0, r3
   1638a:	f002 f80d 	bl	183a8 <__aeabi_i2f>
   1638e:	4603      	mov	r3, r0
   16390:	4618      	mov	r0, r3
   16392:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16396:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1639a:	f002 f859 	bl	18450 <__aeabi_fmul>
   1639e:	4603      	mov	r3, r0
   163a0:	4620      	mov	r0, r4
   163a2:	4619      	mov	r1, r3
   163a4:	f001 ff4c 	bl	18240 <__addsf3>
   163a8:	4603      	mov	r3, r0
   163aa:	4618      	mov	r0, r3
   163ac:	f002 fa16 	bl	187dc <__aeabi_f2iz>
   163b0:	4603      	mov	r3, r0
   163b2:	b29a      	uxth	r2, r3
   163b4:	f64c 1398 	movw	r3, #51608	; 0xc998
   163b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163bc:	815a      	strh	r2, [r3, #10]
   163be:	f64c 1370 	movw	r3, #51568	; 0xc970
   163c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163c6:	899b      	ldrh	r3, [r3, #12]
   163c8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163cc:	b29b      	uxth	r3, r3
   163ce:	80fb      	strh	r3, [r7, #6]
   163d0:	f64c 1398 	movw	r3, #51608	; 0xc998
   163d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163d8:	899b      	ldrh	r3, [r3, #12]
   163da:	b21b      	sxth	r3, r3
   163dc:	4618      	mov	r0, r3
   163de:	f001 ffe3 	bl	183a8 <__aeabi_i2f>
   163e2:	4604      	mov	r4, r0
   163e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163e8:	4618      	mov	r0, r3
   163ea:	f001 ffdd 	bl	183a8 <__aeabi_i2f>
   163ee:	4603      	mov	r3, r0
   163f0:	4618      	mov	r0, r3
   163f2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   163f6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   163fa:	f002 f829 	bl	18450 <__aeabi_fmul>
   163fe:	4603      	mov	r3, r0
   16400:	4620      	mov	r0, r4
   16402:	4619      	mov	r1, r3
   16404:	f001 ff1c 	bl	18240 <__addsf3>
   16408:	4603      	mov	r3, r0
   1640a:	4618      	mov	r0, r3
   1640c:	f002 f9e6 	bl	187dc <__aeabi_f2iz>
   16410:	4603      	mov	r3, r0
   16412:	b29a      	uxth	r2, r3
   16414:	f64c 1398 	movw	r3, #51608	; 0xc998
   16418:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1641c:	819a      	strh	r2, [r3, #12]
   1641e:	f64c 1370 	movw	r3, #51568	; 0xc970
   16422:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16426:	89db      	ldrh	r3, [r3, #14]
   16428:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1642c:	b29b      	uxth	r3, r3
   1642e:	80fb      	strh	r3, [r7, #6]
   16430:	f64c 1398 	movw	r3, #51608	; 0xc998
   16434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16438:	89db      	ldrh	r3, [r3, #14]
   1643a:	b21b      	sxth	r3, r3
   1643c:	4618      	mov	r0, r3
   1643e:	f001 ffb3 	bl	183a8 <__aeabi_i2f>
   16442:	4604      	mov	r4, r0
   16444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16448:	4618      	mov	r0, r3
   1644a:	f001 ffad 	bl	183a8 <__aeabi_i2f>
   1644e:	4603      	mov	r3, r0
   16450:	4618      	mov	r0, r3
   16452:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16456:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1645a:	f001 fff9 	bl	18450 <__aeabi_fmul>
   1645e:	4603      	mov	r3, r0
   16460:	4620      	mov	r0, r4
   16462:	4619      	mov	r1, r3
   16464:	f001 feec 	bl	18240 <__addsf3>
   16468:	4603      	mov	r3, r0
   1646a:	4618      	mov	r0, r3
   1646c:	f002 f9b6 	bl	187dc <__aeabi_f2iz>
   16470:	4603      	mov	r3, r0
   16472:	b29a      	uxth	r2, r3
   16474:	f64c 1398 	movw	r3, #51608	; 0xc998
   16478:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1647c:	81da      	strh	r2, [r3, #14]
   1647e:	f64c 1370 	movw	r3, #51568	; 0xc970
   16482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16486:	8a1b      	ldrh	r3, [r3, #16]
   16488:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1648c:	b29b      	uxth	r3, r3
   1648e:	80fb      	strh	r3, [r7, #6]
   16490:	f64c 1398 	movw	r3, #51608	; 0xc998
   16494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16498:	8a1b      	ldrh	r3, [r3, #16]
   1649a:	b21b      	sxth	r3, r3
   1649c:	4618      	mov	r0, r3
   1649e:	f001 ff83 	bl	183a8 <__aeabi_i2f>
   164a2:	4604      	mov	r4, r0
   164a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   164a8:	4618      	mov	r0, r3
   164aa:	f001 ff7d 	bl	183a8 <__aeabi_i2f>
   164ae:	4603      	mov	r3, r0
   164b0:	4618      	mov	r0, r3
   164b2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   164b6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   164ba:	f001 ffc9 	bl	18450 <__aeabi_fmul>
   164be:	4603      	mov	r3, r0
   164c0:	4620      	mov	r0, r4
   164c2:	4619      	mov	r1, r3
   164c4:	f001 febc 	bl	18240 <__addsf3>
   164c8:	4603      	mov	r3, r0
   164ca:	4618      	mov	r0, r3
   164cc:	f002 f986 	bl	187dc <__aeabi_f2iz>
   164d0:	4603      	mov	r3, r0
   164d2:	b29a      	uxth	r2, r3
   164d4:	f64c 1398 	movw	r3, #51608	; 0xc998
   164d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164dc:	821a      	strh	r2, [r3, #16]
   164de:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   164e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164e6:	781b      	ldrb	r3, [r3, #0]
   164e8:	3301      	adds	r3, #1
   164ea:	b2da      	uxtb	r2, r3
   164ec:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   164f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f4:	701a      	strb	r2, [r3, #0]
   164f6:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   164fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164fe:	781b      	ldrb	r3, [r3, #0]
   16500:	2b0a      	cmp	r3, #10
   16502:	f040 8101 	bne.w	16708 <last_radio_from_ppm+0x5e8>
   16506:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   1650a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1650e:	2200      	movs	r2, #0
   16510:	701a      	strb	r2, [r3, #0]
   16512:	f64c 1398 	movw	r3, #51608	; 0xc998
   16516:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1651a:	891a      	ldrh	r2, [r3, #8]
   1651c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16524:	811a      	strh	r2, [r3, #8]
   16526:	f64c 1398 	movw	r3, #51608	; 0xc998
   1652a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1652e:	2200      	movs	r2, #0
   16530:	811a      	strh	r2, [r3, #8]
   16532:	f64c 1384 	movw	r3, #51588	; 0xc984
   16536:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1653a:	891b      	ldrh	r3, [r3, #8]
   1653c:	b21b      	sxth	r3, r3
   1653e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16542:	dd07      	ble.n	16554 <last_radio_from_ppm+0x434>
   16544:	f64c 1384 	movw	r3, #51588	; 0xc984
   16548:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1654c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16550:	811a      	strh	r2, [r3, #8]
   16552:	e00f      	b.n	16574 <last_radio_from_ppm+0x454>
   16554:	f64c 1384 	movw	r3, #51588	; 0xc984
   16558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1655c:	891b      	ldrh	r3, [r3, #8]
   1655e:	b21b      	sxth	r3, r3
   16560:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16564:	da06      	bge.n	16574 <last_radio_from_ppm+0x454>
   16566:	f64c 1384 	movw	r3, #51588	; 0xc984
   1656a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1656e:	f64d 2280 	movw	r2, #55936	; 0xda80
   16572:	811a      	strh	r2, [r3, #8]
   16574:	f64c 1398 	movw	r3, #51608	; 0xc998
   16578:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1657c:	895a      	ldrh	r2, [r3, #10]
   1657e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16586:	815a      	strh	r2, [r3, #10]
   16588:	f64c 1398 	movw	r3, #51608	; 0xc998
   1658c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16590:	2200      	movs	r2, #0
   16592:	815a      	strh	r2, [r3, #10]
   16594:	f64c 1384 	movw	r3, #51588	; 0xc984
   16598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1659c:	895b      	ldrh	r3, [r3, #10]
   1659e:	b21b      	sxth	r3, r3
   165a0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   165a4:	dd07      	ble.n	165b6 <last_radio_from_ppm+0x496>
   165a6:	f64c 1384 	movw	r3, #51588	; 0xc984
   165aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ae:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   165b2:	815a      	strh	r2, [r3, #10]
   165b4:	e00f      	b.n	165d6 <last_radio_from_ppm+0x4b6>
   165b6:	f64c 1384 	movw	r3, #51588	; 0xc984
   165ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165be:	895b      	ldrh	r3, [r3, #10]
   165c0:	b21b      	sxth	r3, r3
   165c2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   165c6:	da06      	bge.n	165d6 <last_radio_from_ppm+0x4b6>
   165c8:	f64c 1384 	movw	r3, #51588	; 0xc984
   165cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d0:	f64d 2280 	movw	r2, #55936	; 0xda80
   165d4:	815a      	strh	r2, [r3, #10]
   165d6:	f64c 1398 	movw	r3, #51608	; 0xc998
   165da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165de:	899a      	ldrh	r2, [r3, #12]
   165e0:	f64c 1384 	movw	r3, #51588	; 0xc984
   165e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e8:	819a      	strh	r2, [r3, #12]
   165ea:	f64c 1398 	movw	r3, #51608	; 0xc998
   165ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f2:	2200      	movs	r2, #0
   165f4:	819a      	strh	r2, [r3, #12]
   165f6:	f64c 1384 	movw	r3, #51588	; 0xc984
   165fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165fe:	899b      	ldrh	r3, [r3, #12]
   16600:	b21b      	sxth	r3, r3
   16602:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16606:	dd07      	ble.n	16618 <last_radio_from_ppm+0x4f8>
   16608:	f64c 1384 	movw	r3, #51588	; 0xc984
   1660c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16610:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16614:	819a      	strh	r2, [r3, #12]
   16616:	e00f      	b.n	16638 <last_radio_from_ppm+0x518>
   16618:	f64c 1384 	movw	r3, #51588	; 0xc984
   1661c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16620:	899b      	ldrh	r3, [r3, #12]
   16622:	b21b      	sxth	r3, r3
   16624:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16628:	da06      	bge.n	16638 <last_radio_from_ppm+0x518>
   1662a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1662e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16632:	f64d 2280 	movw	r2, #55936	; 0xda80
   16636:	819a      	strh	r2, [r3, #12]
   16638:	f64c 1398 	movw	r3, #51608	; 0xc998
   1663c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16640:	89da      	ldrh	r2, [r3, #14]
   16642:	f64c 1384 	movw	r3, #51588	; 0xc984
   16646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1664a:	81da      	strh	r2, [r3, #14]
   1664c:	f64c 1398 	movw	r3, #51608	; 0xc998
   16650:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16654:	2200      	movs	r2, #0
   16656:	81da      	strh	r2, [r3, #14]
   16658:	f64c 1384 	movw	r3, #51588	; 0xc984
   1665c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16660:	89db      	ldrh	r3, [r3, #14]
   16662:	b21b      	sxth	r3, r3
   16664:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16668:	dd07      	ble.n	1667a <last_radio_from_ppm+0x55a>
   1666a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1666e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16672:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16676:	81da      	strh	r2, [r3, #14]
   16678:	e00f      	b.n	1669a <last_radio_from_ppm+0x57a>
   1667a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1667e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16682:	89db      	ldrh	r3, [r3, #14]
   16684:	b21b      	sxth	r3, r3
   16686:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1668a:	da06      	bge.n	1669a <last_radio_from_ppm+0x57a>
   1668c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16694:	f64d 2280 	movw	r2, #55936	; 0xda80
   16698:	81da      	strh	r2, [r3, #14]
   1669a:	f64c 1398 	movw	r3, #51608	; 0xc998
   1669e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a2:	8a1a      	ldrh	r2, [r3, #16]
   166a4:	f64c 1384 	movw	r3, #51588	; 0xc984
   166a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ac:	821a      	strh	r2, [r3, #16]
   166ae:	f64c 1398 	movw	r3, #51608	; 0xc998
   166b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166b6:	2200      	movs	r2, #0
   166b8:	821a      	strh	r2, [r3, #16]
   166ba:	f64c 1384 	movw	r3, #51588	; 0xc984
   166be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166c2:	8a1b      	ldrh	r3, [r3, #16]
   166c4:	b21b      	sxth	r3, r3
   166c6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   166ca:	dd07      	ble.n	166dc <last_radio_from_ppm+0x5bc>
   166cc:	f64c 1384 	movw	r3, #51588	; 0xc984
   166d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   166d8:	821a      	strh	r2, [r3, #16]
   166da:	e00f      	b.n	166fc <last_radio_from_ppm+0x5dc>
   166dc:	f64c 1384 	movw	r3, #51588	; 0xc984
   166e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e4:	8a1b      	ldrh	r3, [r3, #16]
   166e6:	b21b      	sxth	r3, r3
   166e8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   166ec:	da06      	bge.n	166fc <last_radio_from_ppm+0x5dc>
   166ee:	f64c 1384 	movw	r3, #51588	; 0xc984
   166f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166f6:	f64d 2280 	movw	r2, #55936	; 0xda80
   166fa:	821a      	strh	r2, [r3, #16]
   166fc:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16700:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16704:	2201      	movs	r2, #1
   16706:	701a      	strb	r2, [r3, #0]
}
   16708:	370c      	adds	r7, #12
   1670a:	46bd      	mov	sp, r7
   1670c:	bd90      	pop	{r4, r7, pc}
   1670e:	bf00      	nop

00016710 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16710:	b480      	push	{r7}
   16712:	af00      	add	r7, sp, #0
  idx_buf = 0;
   16714:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   16718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1671c:	2200      	movs	r2, #0
   1671e:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   16720:	f64c 13e5 	movw	r3, #51685	; 0xc9e5
   16724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16728:	2200      	movs	r2, #0
   1672a:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   1672c:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   16730:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16734:	781b      	ldrb	r3, [r3, #0]
   16736:	b2db      	uxtb	r3, r3
   16738:	461a      	mov	r2, r3
   1673a:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1673e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16742:	4413      	add	r3, r2
   16744:	781a      	ldrb	r2, [r3, #0]
   16746:	f64c 13e6 	movw	r3, #51686	; 0xc9e6
   1674a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1674e:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16750:	f242 030f 	movw	r3, #8207	; 0x200f
   16754:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16758:	f64c 12e6 	movw	r2, #51686	; 0xc9e6
   1675c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   16760:	7812      	ldrb	r2, [r2, #0]
   16762:	b2d2      	uxtb	r2, r2
   16764:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   16766:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   1676a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1676e:	2200      	movs	r2, #0
   16770:	701a      	strb	r2, [r3, #0]
}
   16772:	46bd      	mov	sp, r7
   16774:	f85d 7b04 	ldr.w	r7, [sp], #4
   16778:	4770      	bx	lr
   1677a:	bf00      	nop

0001677c <fbw_spi_init>:

void fbw_spi_init(void) {
   1677c:	b480      	push	{r7}
   1677e:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16780:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16788:	2200      	movs	r2, #0
   1678a:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   1678c:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16794:	2200      	movs	r2, #0
   16796:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16798:	f242 0317 	movw	r3, #8215	; 0x2017
   1679c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167a0:	f242 0217 	movw	r2, #8215	; 0x2017
   167a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167a8:	7812      	ldrb	r2, [r2, #0]
   167aa:	b2d2      	uxtb	r2, r2
   167ac:	f042 0210 	orr.w	r2, r2, #16
   167b0:	b2d2      	uxtb	r2, r2
   167b2:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   167b4:	f242 030d 	movw	r3, #8205	; 0x200d
   167b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167bc:	2240      	movs	r2, #64	; 0x40
   167be:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   167c0:	f242 030d 	movw	r3, #8205	; 0x200d
   167c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167c8:	f242 020d 	movw	r2, #8205	; 0x200d
   167cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167d0:	7812      	ldrb	r2, [r2, #0]
   167d2:	b2d2      	uxtb	r2, r2
   167d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   167d8:	b2d2      	uxtb	r2, r2
   167da:	701a      	strb	r2, [r3, #0]
}
   167dc:	46bd      	mov	sp, r7
   167de:	f85d 7b04 	ldr.w	r7, [sp], #4
   167e2:	4770      	bx	lr
   167e4:	0000      	movs	r0, r0
	...

000167e8 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   167e8:	b480      	push	{r7}
   167ea:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   167ec:	f242 032f 	movw	r3, #8239	; 0x202f
   167f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167f4:	2200      	movs	r2, #0
   167f6:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   167f8:	f242 032e 	movw	r3, #8238	; 0x202e
   167fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16800:	2201      	movs	r2, #1
   16802:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   16804:	f242 0325 	movw	r3, #8229	; 0x2025
   16808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1680c:	2207      	movs	r2, #7
   1680e:	701a      	strb	r2, [r3, #0]
}
   16810:	46bd      	mov	sp, r7
   16812:	f85d 7b04 	ldr.w	r7, [sp], #4
   16816:	4770      	bx	lr

00016818 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   16818:	b480      	push	{r7}
   1681a:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   1681c:	f242 032e 	movw	r3, #8238	; 0x202e
   16820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16824:	f242 022e 	movw	r2, #8238	; 0x202e
   16828:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1682c:	7812      	ldrb	r2, [r2, #0]
   1682e:	b2d2      	uxtb	r2, r2
   16830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16834:	b2d2      	uxtb	r2, r2
   16836:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16838:	f242 032e 	movw	r3, #8238	; 0x202e
   1683c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16840:	f242 022e 	movw	r2, #8238	; 0x202e
   16844:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16848:	7812      	ldrb	r2, [r2, #0]
   1684a:	b2d2      	uxtb	r2, r2
   1684c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16850:	b2d2      	uxtb	r2, r2
   16852:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   16854:	f242 0317 	movw	r3, #8215	; 0x2017
   16858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1685c:	f242 0217 	movw	r2, #8215	; 0x2017
   16860:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16864:	7812      	ldrb	r2, [r2, #0]
   16866:	b2d2      	uxtb	r2, r2
   16868:	f022 0201 	bic.w	r2, r2, #1
   1686c:	b2d2      	uxtb	r2, r2
   1686e:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16870:	f242 0337 	movw	r3, #8247	; 0x2037
   16874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16878:	f242 0237 	movw	r2, #8247	; 0x2037
   1687c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16880:	7812      	ldrb	r2, [r2, #0]
   16882:	b2d2      	uxtb	r2, r2
   16884:	f042 0220 	orr.w	r2, r2, #32
   16888:	b2d2      	uxtb	r2, r2
   1688a:	701a      	strb	r2, [r3, #0]
}
   1688c:	46bd      	mov	sp, r7
   1688e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16892:	4770      	bx	lr

00016894 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   16894:	b580      	push	{r7, lr}
   16896:	b082      	sub	sp, #8
   16898:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1689a:	2300      	movs	r3, #0
   1689c:	71fb      	strb	r3, [r7, #7]
   1689e:	e010      	b.n	168c2 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   168a0:	79fa      	ldrb	r2, [r7, #7]
   168a2:	79f9      	ldrb	r1, [r7, #7]
   168a4:	f64c 1384 	movw	r3, #51588	; 0xc984
   168a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168ac:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   168b0:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   168bc:	79fb      	ldrb	r3, [r7, #7]
   168be:	3301      	adds	r3, #1
   168c0:	71fb      	strb	r3, [r7, #7]
   168c2:	79fb      	ldrb	r3, [r7, #7]
   168c4:	2b08      	cmp	r3, #8
   168c6:	d9eb      	bls.n	168a0 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   168c8:	f64c 2374 	movw	r3, #51828	; 0xca74
   168cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168d0:	781b      	ldrb	r3, [r3, #0]
   168d2:	2b00      	cmp	r3, #0
   168d4:	bf0c      	ite	eq
   168d6:	2300      	moveq	r3, #0
   168d8:	2301      	movne	r3, #1
   168da:	b2db      	uxtb	r3, r3
   168dc:	461a      	mov	r2, r3
   168de:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168e6:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   168e8:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168f0:	7cdb      	ldrb	r3, [r3, #19]
   168f2:	b2da      	uxtb	r2, r3
   168f4:	f64c 2376 	movw	r3, #51830	; 0xca76
   168f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168fc:	781b      	ldrb	r3, [r3, #0]
   168fe:	2b00      	cmp	r3, #0
   16900:	d001      	beq.n	16906 <to_autopilot_from_last_radio+0x72>
   16902:	2302      	movs	r3, #2
   16904:	e000      	b.n	16908 <to_autopilot_from_last_radio+0x74>
   16906:	2300      	movs	r3, #0
   16908:	4313      	orrs	r3, r2
   1690a:	b2db      	uxtb	r3, r3
   1690c:	b2da      	uxtb	r2, r3
   1690e:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16916:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   16918:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   1691c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16920:	781b      	ldrb	r3, [r3, #0]
   16922:	2b00      	cmp	r3, #0
   16924:	d012      	beq.n	1694c <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   16926:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1692a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1692e:	7cdb      	ldrb	r3, [r3, #19]
   16930:	f043 0304 	orr.w	r3, r3, #4
   16934:	b2da      	uxtb	r2, r3
   16936:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1693a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1693e:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16940:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16948:	2200      	movs	r2, #0
   1694a:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   1694c:	f64c 2378 	movw	r3, #51832	; 0xca78
   16950:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16954:	781a      	ldrb	r2, [r3, #0]
   16956:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1695a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1695e:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16960:	f64c 13e8 	movw	r3, #51688	; 0xc9e8
   16964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16968:	881b      	ldrh	r3, [r3, #0]
   1696a:	4618      	mov	r0, r3
   1696c:	f001 f8ca 	bl	17b04 <__aeabi_i2d>
   16970:	4602      	mov	r2, r0
   16972:	460b      	mov	r3, r1
   16974:	4610      	mov	r0, r2
   16976:	4619      	mov	r1, r3
   16978:	a31b      	add	r3, pc, #108	; (adr r3, 169e8 <to_autopilot_from_last_radio+0x154>)
   1697a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1697e:	f001 f927 	bl	17bd0 <__aeabi_dmul>
   16982:	4602      	mov	r2, r0
   16984:	460b      	mov	r3, r1
   16986:	4610      	mov	r0, r2
   16988:	4619      	mov	r1, r3
   1698a:	f04f 0200 	mov.w	r2, #0
   1698e:	f04f 0300 	mov.w	r3, #0
   16992:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16996:	f001 fa45 	bl	17e24 <__aeabi_ddiv>
   1699a:	4602      	mov	r2, r0
   1699c:	460b      	mov	r3, r1
   1699e:	4610      	mov	r0, r2
   169a0:	4619      	mov	r1, r3
   169a2:	a313      	add	r3, pc, #76	; (adr r3, 169f0 <to_autopilot_from_last_radio+0x15c>)
   169a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   169a8:	f000 ff60 	bl	1786c <__adddf3>
   169ac:	4602      	mov	r2, r0
   169ae:	460b      	mov	r3, r1
   169b0:	4610      	mov	r0, r2
   169b2:	4619      	mov	r1, r3
   169b4:	f04f 0200 	mov.w	r2, #0
   169b8:	f04f 0300 	mov.w	r3, #0
   169bc:	f2c4 0324 	movt	r3, #16420	; 0x4024
   169c0:	f001 f906 	bl	17bd0 <__aeabi_dmul>
   169c4:	4602      	mov	r2, r0
   169c6:	460b      	mov	r3, r1
   169c8:	4610      	mov	r0, r2
   169ca:	4619      	mov	r1, r3
   169cc:	f001 fbc2 	bl	18154 <__aeabi_d2uiz>
   169d0:	4603      	mov	r3, r0
   169d2:	b2da      	uxtb	r2, r3
   169d4:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   169d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169dc:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   169de:	3708      	adds	r7, #8
   169e0:	46bd      	mov	sp, r7
   169e2:	bd80      	pop	{r7, pc}
   169e4:	f3af 8000 	nop.w
   169e8:	1eb851ec 	.word	0x1eb851ec
   169ec:	3f91eb85 	.word	0x3f91eb85
   169f0:	020c49ba 	.word	0x020c49ba
   169f4:	3fb6872b 	.word	0x3fb6872b

000169f8 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   169f8:	b580      	push	{r7, lr}
   169fa:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
   if ( !SpiIsSelected() && spi_was_interrupted ) 
   169fc:	f242 0316 	movw	r3, #8214	; 0x2016
   16a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a04:	781b      	ldrb	r3, [r3, #0]
   16a06:	b2db      	uxtb	r3, r3
   16a08:	f003 0304 	and.w	r3, r3, #4
   16a0c:	2b00      	cmp	r3, #0
   16a0e:	d011      	beq.n	16a34 <send_data_to_autopilot_task+0x3c>
   16a10:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   16a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a18:	781b      	ldrb	r3, [r3, #0]
   16a1a:	b2db      	uxtb	r3, r3
   16a1c:	2b00      	cmp	r3, #0
   16a1e:	d009      	beq.n	16a34 <send_data_to_autopilot_task+0x3c>
   {
      spi_was_interrupted = FALSE;
   16a20:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   16a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a28:	2200      	movs	r2, #0
   16a2a:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16a2c:	f7ff ff32 	bl	16894 <to_autopilot_from_last_radio>
      spi_reset();
   16a30:	f7ff fe6e 	bl	16710 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16a34:	bd80      	pop	{r7, pc}
   16a36:	bf00      	nop

00016a38 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   16a38:	b580      	push	{r7, lr}
   16a3a:	af00      	add	r7, sp, #0
  uart_init_tx();
   16a3c:	f000 fb68 	bl	17110 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16a40:	f648 2080 	movw	r0, #35456	; 0x8a80
   16a44:	f2c0 0001 	movt	r0, #1
   16a48:	f000 fc40 	bl	172cc <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16a4c:	f7ff faa0 	bl	15f90 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16a50:	2003      	movs	r0, #3
   16a52:	f64c 11e8 	movw	r1, #51688	; 0xc9e8
   16a56:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16a5a:	f7ff fa85 	bl	15f68 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16a5e:	2006      	movs	r0, #6
   16a60:	f64c 212c 	movw	r1, #51756	; 0xca2c
   16a64:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16a68:	f7ff fa7e 	bl	15f68 <fbw_adc_buf_channel>
#endif
  timer_init();
   16a6c:	f7ff febc 	bl	167e8 <timer_init>
  servo_init();
   16a70:	f000 f8fa 	bl	16c68 <servo_init>
  ppm_init();
   16a74:	f7ff fed0 	bl	16818 <ppm_init>
  fbw_spi_init();
   16a78:	f7ff fe80 	bl	1677c <fbw_spi_init>
  //sei(); //FN
}
   16a7c:	bd80      	pop	{r7, pc}
   16a7e:	bf00      	nop

00016a80 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16a80:	b580      	push	{r7, lr}
   16a82:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    if( ppm_valid ) 
   16a84:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a8c:	781b      	ldrb	r3, [r3, #0]
   16a8e:	b2db      	uxtb	r3, r3
   16a90:	2b00      	cmp	r3, #0
   16a92:	d04c      	beq.n	16b2e <test_ppm_task+0xae>
    {
      ppm_valid = FALSE;
   16a94:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a9c:	2200      	movs	r2, #0
   16a9e:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16aa0:	f64c 2377 	movw	r3, #51831	; 0xca77
   16aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aa8:	781b      	ldrb	r3, [r3, #0]
   16aaa:	3301      	adds	r3, #1
   16aac:	b2da      	uxtb	r2, r3
   16aae:	f64c 2377 	movw	r3, #51831	; 0xca77
   16ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ab6:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16ab8:	f64c 2374 	movw	r3, #51828	; 0xca74
   16abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ac0:	2201      	movs	r2, #1
   16ac2:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16ac4:	f64c 2376 	movw	r3, #51830	; 0xca76
   16ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16acc:	2200      	movs	r2, #0
   16ace:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16ad0:	f64c 2372 	movw	r3, #51826	; 0xca72
   16ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ad8:	2200      	movs	r2, #0
   16ada:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16adc:	f7ff fb20 	bl	16120 <last_radio_from_ppm>
      if (last_radio_contains_avg_channels) 
   16ae0:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ae8:	781b      	ldrb	r3, [r3, #0]
   16aea:	2b00      	cmp	r3, #0
   16aec:	d011      	beq.n	16b12 <test_ppm_task+0x92>
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16aee:	f64c 1384 	movw	r3, #51588	; 0xc984
   16af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16af6:	891b      	ldrh	r3, [r3, #8]
   16af8:	b21b      	sxth	r3, r3
   16afa:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16afe:	bfb4      	ite	lt
   16b00:	2300      	movlt	r3, #0
   16b02:	2301      	movge	r3, #1
   16b04:	b2db      	uxtb	r3, r3
   16b06:	461a      	mov	r2, r3
   16b08:	f64c 2370 	movw	r3, #51824	; 0xca70
   16b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b10:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16b12:	f64c 2370 	movw	r3, #51824	; 0xca70
   16b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b1a:	781b      	ldrb	r3, [r3, #0]
   16b1c:	2b00      	cmp	r3, #0
   16b1e:	d11a      	bne.n	16b56 <test_ppm_task+0xd6>
      {
	servo_set(last_radio);
   16b20:	f64c 1084 	movw	r0, #51588	; 0xc984
   16b24:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16b28:	f000 f97c 	bl	16e24 <servo_set>
   16b2c:	e013      	b.n	16b56 <test_ppm_task+0xd6>
      }
    } 
    else if (mode == MODE_MANUAL && radio_really_lost) 
   16b2e:	f64c 2370 	movw	r3, #51824	; 0xca70
   16b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b36:	781b      	ldrb	r3, [r3, #0]
   16b38:	2b00      	cmp	r3, #0
   16b3a:	d10c      	bne.n	16b56 <test_ppm_task+0xd6>
   16b3c:	f64c 2376 	movw	r3, #51830	; 0xca76
   16b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b44:	781b      	ldrb	r3, [r3, #0]
   16b46:	2b00      	cmp	r3, #0
   16b48:	d005      	beq.n	16b56 <test_ppm_task+0xd6>
    {
      mode = MODE_AUTO;
   16b4a:	f64c 2370 	movw	r3, #51824	; 0xca70
   16b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b52:	2201      	movs	r2, #1
   16b54:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= STALLED_TIME) 
   16b56:	f64c 2372 	movw	r3, #51826	; 0xca72
   16b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b5e:	881b      	ldrh	r3, [r3, #0]
   16b60:	2b1d      	cmp	r3, #29
   16b62:	d905      	bls.n	16b70 <test_ppm_task+0xf0>
    {
      radio_ok = FALSE;
   16b64:	f64c 2374 	movw	r3, #51828	; 0xca74
   16b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b6c:	2200      	movs	r2, #0
   16b6e:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= REALLY_STALLED_TIME) 
   16b70:	f64c 2372 	movw	r3, #51826	; 0xca72
   16b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b78:	881b      	ldrh	r3, [r3, #0]
   16b7a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16b7e:	d305      	bcc.n	16b8c <test_ppm_task+0x10c>
    {
      radio_really_lost = TRUE;
   16b80:	f64c 2376 	movw	r3, #51830	; 0xca76
   16b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b88:	2201      	movs	r2, #1
   16b8a:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16b8c:	bd80      	pop	{r7, pc}
   16b8e:	bf00      	nop

00016b90 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16b90:	b580      	push	{r7, lr}
   16b92:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   16b94:	f64c 2370 	movw	r3, #51824	; 0xca70
   16b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b9c:	781b      	ldrb	r3, [r3, #0]
   16b9e:	2b00      	cmp	r3, #0
   16ba0:	d106      	bne.n	16bb0 <check_failsafe_task+0x20>
   16ba2:	f64c 2374 	movw	r3, #51828	; 0xca74
   16ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16baa:	781b      	ldrb	r3, [r3, #0]
   16bac:	2b00      	cmp	r3, #0
   16bae:	d00d      	beq.n	16bcc <check_failsafe_task+0x3c>
   16bb0:	f64c 2370 	movw	r3, #51824	; 0xca70
   16bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bb8:	781b      	ldrb	r3, [r3, #0]
   16bba:	2b01      	cmp	r3, #1
   16bbc:	d10c      	bne.n	16bd8 <check_failsafe_task+0x48>
   16bbe:	f64c 2375 	movw	r3, #51829	; 0xca75
   16bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bc6:	781b      	ldrb	r3, [r3, #0]
   16bc8:	2b00      	cmp	r3, #0
   16bca:	d105      	bne.n	16bd8 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   16bcc:	f648 206c 	movw	r0, #35436	; 0x8a6c
   16bd0:	f2c0 0001 	movt	r0, #1
   16bd4:	f000 f926 	bl	16e24 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16bd8:	bd80      	pop	{r7, pc}
   16bda:	bf00      	nop

00016bdc <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16bdc:	b580      	push	{r7, lr}
   16bde:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     if ( !SpiIsSelected() && spi_was_interrupted ) 
   16be0:	f242 0316 	movw	r3, #8214	; 0x2016
   16be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16be8:	781b      	ldrb	r3, [r3, #0]
   16bea:	b2db      	uxtb	r3, r3
   16bec:	f003 0304 	and.w	r3, r3, #4
   16bf0:	2b00      	cmp	r3, #0
   16bf2:	d028      	beq.n	16c46 <check_mega128_values_task+0x6a>
   16bf4:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   16bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bfc:	781b      	ldrb	r3, [r3, #0]
   16bfe:	b2db      	uxtb	r3, r3
   16c00:	2b00      	cmp	r3, #0
   16c02:	d020      	beq.n	16c46 <check_mega128_values_task+0x6a>
     {
         if (mega128_receive_valid)
   16c04:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   16c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c0c:	781b      	ldrb	r3, [r3, #0]
   16c0e:	b2db      	uxtb	r3, r3
   16c10:	2b00      	cmp	r3, #0
   16c12:	d018      	beq.n	16c46 <check_mega128_values_task+0x6a>
         { 
             time_since_last_mega128 = 0;
   16c14:	f64c 2371 	movw	r3, #51825	; 0xca71
   16c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c1c:	2200      	movs	r2, #0
   16c1e:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16c20:	f64c 2375 	movw	r3, #51829	; 0xca75
   16c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c28:	2201      	movs	r2, #1
   16c2a:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16c2c:	f64c 2370 	movw	r3, #51824	; 0xca70
   16c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c34:	781b      	ldrb	r3, [r3, #0]
   16c36:	2b01      	cmp	r3, #1
   16c38:	d105      	bne.n	16c46 <check_mega128_values_task+0x6a>
                 servo_set(from_mega128.channels);
   16c3a:	f64c 10b4 	movw	r0, #51636	; 0xc9b4
   16c3e:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16c42:	f000 f8ef 	bl	16e24 <servo_set>
         }
     }
     if (time_since_last_mega128 == STALLED_TIME) 
   16c46:	f64c 2371 	movw	r3, #51825	; 0xca71
   16c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c4e:	781b      	ldrb	r3, [r3, #0]
   16c50:	2b1e      	cmp	r3, #30
   16c52:	d105      	bne.n	16c60 <check_mega128_values_task+0x84>
     {
         mega128_ok = FALSE;
   16c54:	f64c 2375 	movw	r3, #51829	; 0xca75
   16c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c5c:	2200      	movs	r2, #0
   16c5e:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16c60:	bd80      	pop	{r7, pc}
   16c62:	bf00      	nop
   16c64:	f3af 8000 	nop.w

00016c68 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16c68:	b480      	push	{r7}
   16c6a:	b083      	sub	sp, #12
   16c6c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16c6e:	f242 0311 	movw	r3, #8209	; 0x2011
   16c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c76:	f242 0211 	movw	r2, #8209	; 0x2011
   16c7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c7e:	7812      	ldrb	r2, [r2, #0]
   16c80:	b2d2      	uxtb	r2, r2
   16c82:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16c86:	b2d2      	uxtb	r2, r2
   16c88:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16c8a:	f242 0317 	movw	r3, #8215	; 0x2017
   16c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c92:	f242 0217 	movw	r2, #8215	; 0x2017
   16c96:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c9a:	7812      	ldrb	r2, [r2, #0]
   16c9c:	b2d2      	uxtb	r2, r2
   16c9e:	f042 0202 	orr.w	r2, r2, #2
   16ca2:	b2d2      	uxtb	r2, r2
   16ca4:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16ca6:	f242 0312 	movw	r3, #8210	; 0x2012
   16caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cae:	f242 0212 	movw	r2, #8210	; 0x2012
   16cb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cb6:	7812      	ldrb	r2, [r2, #0]
   16cb8:	b2d2      	uxtb	r2, r2
   16cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16cbe:	b2d2      	uxtb	r2, r2
   16cc0:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16cc2:	f242 0318 	movw	r3, #8216	; 0x2018
   16cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cca:	f242 0218 	movw	r2, #8216	; 0x2018
   16cce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cd2:	7812      	ldrb	r2, [r2, #0]
   16cd4:	b2d2      	uxtb	r2, r2
   16cd6:	f022 0202 	bic.w	r2, r2, #2
   16cda:	b2d2      	uxtb	r2, r2
   16cdc:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16cde:	2300      	movs	r3, #0
   16ce0:	71fb      	strb	r3, [r7, #7]
   16ce2:	e00b      	b.n	16cfc <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16ce4:	79fa      	ldrb	r2, [r7, #7]
   16ce6:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cee:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16cf2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16cf6:	79fb      	ldrb	r3, [r7, #7]
   16cf8:	3301      	adds	r3, #1
   16cfa:	71fb      	strb	r3, [r7, #7]
   16cfc:	79fb      	ldrb	r3, [r7, #7]
   16cfe:	2b09      	cmp	r3, #9
   16d00:	d9f0      	bls.n	16ce4 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16d02:	f242 032a 	movw	r3, #8234	; 0x202a
   16d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16d0e:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16d10:	f242 032f 	movw	r3, #8239	; 0x202f
   16d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d18:	f242 022f 	movw	r2, #8239	; 0x202f
   16d1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d20:	7812      	ldrb	r2, [r2, #0]
   16d22:	b2d2      	uxtb	r2, r2
   16d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16d28:	b2d2      	uxtb	r2, r2
   16d2a:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16d2c:	f242 0336 	movw	r3, #8246	; 0x2036
   16d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d34:	2210      	movs	r2, #16
   16d36:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16d38:	f242 0312 	movw	r3, #8210	; 0x2012
   16d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d40:	f242 0212 	movw	r2, #8210	; 0x2012
   16d44:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d48:	7812      	ldrb	r2, [r2, #0]
   16d4a:	b2d2      	uxtb	r2, r2
   16d4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16d50:	b2d2      	uxtb	r2, r2
   16d52:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16d54:	f242 0337 	movw	r3, #8247	; 0x2037
   16d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d5c:	f242 0237 	movw	r2, #8247	; 0x2037
   16d60:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d64:	7812      	ldrb	r2, [r2, #0]
   16d66:	b2d2      	uxtb	r2, r2
   16d68:	f042 0210 	orr.w	r2, r2, #16
   16d6c:	b2d2      	uxtb	r2, r2
   16d6e:	701a      	strb	r2, [r3, #0]
}
   16d70:	370c      	adds	r7, #12
   16d72:	46bd      	mov	sp, r7
   16d74:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d78:	4770      	bx	lr
   16d7a:	bf00      	nop

00016d7c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16d7c:	b480      	push	{r7}
   16d7e:	b083      	sub	sp, #12
   16d80:	af00      	add	r7, sp, #0
   16d82:	4602      	mov	r2, r0
   16d84:	460b      	mov	r3, r1
   16d86:	71fa      	strb	r2, [r7, #7]
   16d88:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16d8a:	79f9      	ldrb	r1, [r7, #7]
   16d8c:	88bb      	ldrh	r3, [r7, #4]
   16d8e:	011b      	lsls	r3, r3, #4
   16d90:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d94:	d308      	bcc.n	16da8 <servo_set_one+0x2c>
   16d96:	88bb      	ldrh	r3, [r7, #4]
   16d98:	011b      	lsls	r3, r3, #4
   16d9a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d9e:	bf28      	it	cs
   16da0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16da4:	b29a      	uxth	r2, r3
   16da6:	e001      	b.n	16dac <servo_set_one+0x30>
   16da8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16dac:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16db4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16db8:	370c      	adds	r7, #12
   16dba:	46bd      	mov	sp, r7
   16dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16dc0:	4770      	bx	lr
   16dc2:	bf00      	nop

00016dc4 <servo_transmit>:

void 
servo_transmit(void) {
   16dc4:	b580      	push	{r7, lr}
   16dc6:	b082      	sub	sp, #8
   16dc8:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16dca:	2000      	movs	r0, #0
   16dcc:	f000 f9e6 	bl	1719c <uart_transmit>
   16dd0:	2000      	movs	r0, #0
   16dd2:	f000 f9e3 	bl	1719c <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16dd6:	2300      	movs	r3, #0
   16dd8:	71fb      	strb	r3, [r7, #7]
   16dda:	e01a      	b.n	16e12 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16ddc:	79fa      	ldrb	r2, [r7, #7]
   16dde:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16de6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16dea:	0a1b      	lsrs	r3, r3, #8
   16dec:	b29b      	uxth	r3, r3
   16dee:	b2db      	uxtb	r3, r3
   16df0:	4618      	mov	r0, r3
   16df2:	f000 f9d3 	bl	1719c <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16df6:	79fa      	ldrb	r2, [r7, #7]
   16df8:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16e04:	b2db      	uxtb	r3, r3
   16e06:	4618      	mov	r0, r3
   16e08:	f000 f9c8 	bl	1719c <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16e0c:	79fb      	ldrb	r3, [r7, #7]
   16e0e:	3301      	adds	r3, #1
   16e10:	71fb      	strb	r3, [r7, #7]
   16e12:	79fb      	ldrb	r3, [r7, #7]
   16e14:	2b09      	cmp	r3, #9
   16e16:	d9e1      	bls.n	16ddc <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16e18:	200a      	movs	r0, #10
   16e1a:	f000 f9bf 	bl	1719c <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16e1e:	3708      	adds	r7, #8
   16e20:	46bd      	mov	sp, r7
   16e22:	bd80      	pop	{r7, pc}

00016e24 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16e24:	b5b0      	push	{r4, r5, r7, lr}
   16e26:	b084      	sub	sp, #16
   16e28:	af00      	add	r7, sp, #0
   16e2a:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16e2c:	687b      	ldr	r3, [r7, #4]
   16e2e:	330a      	adds	r3, #10
   16e30:	881b      	ldrh	r3, [r3, #0]
   16e32:	b21b      	sxth	r3, r3
   16e34:	005b      	lsls	r3, r3, #1
   16e36:	4618      	mov	r0, r3
   16e38:	f000 fe64 	bl	17b04 <__aeabi_i2d>
   16e3c:	4602      	mov	r2, r0
   16e3e:	460b      	mov	r3, r1
   16e40:	4610      	mov	r0, r2
   16e42:	4619      	mov	r1, r3
   16e44:	a3a6      	add	r3, pc, #664	; (adr r3, 170e0 <servo_set+0x2bc>)
   16e46:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e4a:	f000 fec1 	bl	17bd0 <__aeabi_dmul>
   16e4e:	4602      	mov	r2, r0
   16e50:	460b      	mov	r3, r1
   16e52:	4610      	mov	r0, r2
   16e54:	4619      	mov	r1, r3
   16e56:	f001 f955 	bl	18104 <__aeabi_d2iz>
   16e5a:	4603      	mov	r3, r0
   16e5c:	b29b      	uxth	r3, r3
   16e5e:	b29b      	uxth	r3, r3
   16e60:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16e64:	81fb      	strh	r3, [r7, #14]
   16e66:	89fb      	ldrh	r3, [r7, #14]
   16e68:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e6c:	d307      	bcc.n	16e7e <servo_set+0x5a>
   16e6e:	89fb      	ldrh	r3, [r7, #14]
   16e70:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e74:	bf28      	it	cs
   16e76:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e7a:	b29a      	uxth	r2, r3
   16e7c:	e001      	b.n	16e82 <servo_set+0x5e>
   16e7e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e82:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e8a:	80da      	strh	r2, [r3, #6]
   16e8c:	687b      	ldr	r3, [r7, #4]
   16e8e:	881b      	ldrh	r3, [r3, #0]
   16e90:	b21b      	sxth	r3, r3
   16e92:	005b      	lsls	r3, r3, #1
   16e94:	4618      	mov	r0, r3
   16e96:	f000 fe35 	bl	17b04 <__aeabi_i2d>
   16e9a:	4602      	mov	r2, r0
   16e9c:	460b      	mov	r3, r1
   16e9e:	4610      	mov	r0, r2
   16ea0:	4619      	mov	r1, r3
   16ea2:	a38f      	add	r3, pc, #572	; (adr r3, 170e0 <servo_set+0x2bc>)
   16ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ea8:	f000 fe92 	bl	17bd0 <__aeabi_dmul>
   16eac:	4602      	mov	r2, r0
   16eae:	460b      	mov	r3, r1
   16eb0:	4610      	mov	r0, r2
   16eb2:	4619      	mov	r1, r3
   16eb4:	f001 f926 	bl	18104 <__aeabi_d2iz>
   16eb8:	4603      	mov	r3, r0
   16eba:	b29b      	uxth	r3, r3
   16ebc:	b29b      	uxth	r3, r3
   16ebe:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16ec2:	81fb      	strh	r3, [r7, #14]
   16ec4:	89fb      	ldrh	r3, [r7, #14]
   16ec6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16eca:	d307      	bcc.n	16edc <servo_set+0xb8>
   16ecc:	89fb      	ldrh	r3, [r7, #14]
   16ece:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16ed2:	bf28      	it	cs
   16ed4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16ed8:	b29a      	uxth	r2, r3
   16eda:	e001      	b.n	16ee0 <servo_set+0xbc>
   16edc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16ee0:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ee8:	825a      	strh	r2, [r3, #18]
   16eea:	687b      	ldr	r3, [r7, #4]
   16eec:	3304      	adds	r3, #4
   16eee:	881b      	ldrh	r3, [r3, #0]
   16ef0:	b21b      	sxth	r3, r3
   16ef2:	4618      	mov	r0, r3
   16ef4:	f000 fe06 	bl	17b04 <__aeabi_i2d>
   16ef8:	4602      	mov	r2, r0
   16efa:	460b      	mov	r3, r1
   16efc:	4610      	mov	r0, r2
   16efe:	4619      	mov	r1, r3
   16f00:	a379      	add	r3, pc, #484	; (adr r3, 170e8 <servo_set+0x2c4>)
   16f02:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f06:	f000 fe63 	bl	17bd0 <__aeabi_dmul>
   16f0a:	4602      	mov	r2, r0
   16f0c:	460b      	mov	r3, r1
   16f0e:	4610      	mov	r0, r2
   16f10:	4619      	mov	r1, r3
   16f12:	f001 f8f7 	bl	18104 <__aeabi_d2iz>
   16f16:	4603      	mov	r3, r0
   16f18:	b29b      	uxth	r3, r3
   16f1a:	b29b      	uxth	r3, r3
   16f1c:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16f20:	3320      	adds	r3, #32
   16f22:	81fb      	strh	r3, [r7, #14]
   16f24:	89fb      	ldrh	r3, [r7, #14]
   16f26:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f2a:	d307      	bcc.n	16f3c <servo_set+0x118>
   16f2c:	89fb      	ldrh	r3, [r7, #14]
   16f2e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f32:	bf28      	it	cs
   16f34:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f38:	b29a      	uxth	r2, r3
   16f3a:	e001      	b.n	16f40 <servo_set+0x11c>
   16f3c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f40:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f48:	819a      	strh	r2, [r3, #12]
   16f4a:	687b      	ldr	r3, [r7, #4]
   16f4c:	885b      	ldrh	r3, [r3, #2]
   16f4e:	81bb      	strh	r3, [r7, #12]
   16f50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f54:	2b00      	cmp	r3, #0
   16f56:	dd06      	ble.n	16f66 <servo_set+0x142>
   16f58:	f04f 0400 	mov.w	r4, #0
   16f5c:	f04f 0500 	mov.w	r5, #0
   16f60:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16f64:	e002      	b.n	16f6c <servo_set+0x148>
   16f66:	a562      	add	r5, pc, #392	; (adr r5, 170f0 <servo_set+0x2cc>)
   16f68:	e9d5 4500 	ldrd	r4, r5, [r5]
   16f6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f70:	4618      	mov	r0, r3
   16f72:	f000 fdc7 	bl	17b04 <__aeabi_i2d>
   16f76:	4602      	mov	r2, r0
   16f78:	460b      	mov	r3, r1
   16f7a:	4620      	mov	r0, r4
   16f7c:	4629      	mov	r1, r5
   16f7e:	f000 fe27 	bl	17bd0 <__aeabi_dmul>
   16f82:	4602      	mov	r2, r0
   16f84:	460b      	mov	r3, r1
   16f86:	4610      	mov	r0, r2
   16f88:	4619      	mov	r1, r3
   16f8a:	a35b      	add	r3, pc, #364	; (adr r3, 170f8 <servo_set+0x2d4>)
   16f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f90:	f000 fe1e 	bl	17bd0 <__aeabi_dmul>
   16f94:	4602      	mov	r2, r0
   16f96:	460b      	mov	r3, r1
   16f98:	4610      	mov	r0, r2
   16f9a:	4619      	mov	r1, r3
   16f9c:	f001 f8b2 	bl	18104 <__aeabi_d2iz>
   16fa0:	4603      	mov	r3, r0
   16fa2:	b29b      	uxth	r3, r3
   16fa4:	b29b      	uxth	r3, r3
   16fa6:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16faa:	81fb      	strh	r3, [r7, #14]
   16fac:	89fb      	ldrh	r3, [r7, #14]
   16fae:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16fb2:	d307      	bcc.n	16fc4 <servo_set+0x1a0>
   16fb4:	89fb      	ldrh	r3, [r7, #14]
   16fb6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16fba:	bf28      	it	cs
   16fbc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16fc0:	b29a      	uxth	r2, r3
   16fc2:	e001      	b.n	16fc8 <servo_set+0x1a4>
   16fc4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fc8:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fd0:	801a      	strh	r2, [r3, #0]
   16fd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16fd6:	2b00      	cmp	r3, #0
   16fd8:	dd03      	ble.n	16fe2 <servo_set+0x1be>
   16fda:	a545      	add	r5, pc, #276	; (adr r5, 170f0 <servo_set+0x2cc>)
   16fdc:	e9d5 4500 	ldrd	r4, r5, [r5]
   16fe0:	e005      	b.n	16fee <servo_set+0x1ca>
   16fe2:	f04f 0400 	mov.w	r4, #0
   16fe6:	f04f 0500 	mov.w	r5, #0
   16fea:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16fee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16ff2:	4618      	mov	r0, r3
   16ff4:	f000 fd86 	bl	17b04 <__aeabi_i2d>
   16ff8:	4602      	mov	r2, r0
   16ffa:	460b      	mov	r3, r1
   16ffc:	4620      	mov	r0, r4
   16ffe:	4629      	mov	r1, r5
   17000:	f000 fde6 	bl	17bd0 <__aeabi_dmul>
   17004:	4602      	mov	r2, r0
   17006:	460b      	mov	r3, r1
   17008:	4610      	mov	r0, r2
   1700a:	4619      	mov	r1, r3
   1700c:	a33c      	add	r3, pc, #240	; (adr r3, 17100 <servo_set+0x2dc>)
   1700e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17012:	f000 fddd 	bl	17bd0 <__aeabi_dmul>
   17016:	4602      	mov	r2, r0
   17018:	460b      	mov	r3, r1
   1701a:	4610      	mov	r0, r2
   1701c:	4619      	mov	r1, r3
   1701e:	f001 f871 	bl	18104 <__aeabi_d2iz>
   17022:	4603      	mov	r3, r0
   17024:	b29b      	uxth	r3, r3
   17026:	b29b      	uxth	r3, r3
   17028:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   1702c:	3320      	adds	r3, #32
   1702e:	81fb      	strh	r3, [r7, #14]
   17030:	89fb      	ldrh	r3, [r7, #14]
   17032:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17036:	d307      	bcc.n	17048 <servo_set+0x224>
   17038:	89fb      	ldrh	r3, [r7, #14]
   1703a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1703e:	bf28      	it	cs
   17040:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17044:	b29a      	uxth	r2, r3
   17046:	e001      	b.n	1704c <servo_set+0x228>
   17048:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1704c:	f64c 237c 	movw	r3, #51836	; 0xca7c
   17050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17054:	809a      	strh	r2, [r3, #4]
   17056:	687b      	ldr	r3, [r7, #4]
   17058:	3306      	adds	r3, #6
   1705a:	881b      	ldrh	r3, [r3, #0]
   1705c:	b21b      	sxth	r3, r3
   1705e:	4618      	mov	r0, r3
   17060:	f000 fd50 	bl	17b04 <__aeabi_i2d>
   17064:	4604      	mov	r4, r0
   17066:	460d      	mov	r5, r1
   17068:	687b      	ldr	r3, [r7, #4]
   1706a:	3302      	adds	r3, #2
   1706c:	881b      	ldrh	r3, [r3, #0]
   1706e:	b21b      	sxth	r3, r3
   17070:	4618      	mov	r0, r3
   17072:	f000 fd47 	bl	17b04 <__aeabi_i2d>
   17076:	4602      	mov	r2, r0
   17078:	460b      	mov	r3, r1
   1707a:	4620      	mov	r0, r4
   1707c:	4629      	mov	r1, r5
   1707e:	f000 fbf5 	bl	1786c <__adddf3>
   17082:	4602      	mov	r2, r0
   17084:	460b      	mov	r3, r1
   17086:	4610      	mov	r0, r2
   17088:	4619      	mov	r1, r3
   1708a:	a31f      	add	r3, pc, #124	; (adr r3, 17108 <servo_set+0x2e4>)
   1708c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17090:	f000 fd9e 	bl	17bd0 <__aeabi_dmul>
   17094:	4602      	mov	r2, r0
   17096:	460b      	mov	r3, r1
   17098:	4610      	mov	r0, r2
   1709a:	4619      	mov	r1, r3
   1709c:	f001 f832 	bl	18104 <__aeabi_d2iz>
   170a0:	4603      	mov	r3, r0
   170a2:	b29b      	uxth	r3, r3
   170a4:	b29b      	uxth	r3, r3
   170a6:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   170aa:	3320      	adds	r3, #32
   170ac:	81fb      	strh	r3, [r7, #14]
   170ae:	89fb      	ldrh	r3, [r7, #14]
   170b0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   170b4:	d307      	bcc.n	170c6 <servo_set+0x2a2>
   170b6:	89fb      	ldrh	r3, [r7, #14]
   170b8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   170bc:	bf28      	it	cs
   170be:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   170c2:	b29a      	uxth	r2, r3
   170c4:	e001      	b.n	170ca <servo_set+0x2a6>
   170c6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   170ca:	f64c 237c 	movw	r3, #51836	; 0xca7c
   170ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170d2:	81da      	strh	r2, [r3, #14]
}
   170d4:	3710      	adds	r7, #16
   170d6:	46bd      	mov	sp, r7
   170d8:	bdb0      	pop	{r4, r5, r7, pc}
   170da:	bf00      	nop
   170dc:	f3af 8000 	nop.w
   170e0:	aaaa9ef0 	.word	0xaaaa9ef0
   170e4:	3feaaaaa 	.word	0x3feaaaaa
   170e8:	fc96473e 	.word	0xfc96473e
   170ec:	3fdfc962 	.word	0x3fdfc962
   170f0:	51eb851f 	.word	0x51eb851f
   170f4:	3fe51eb8 	.word	0x3fe51eb8
   170f8:	9999999a 	.word	0x9999999a
   170fc:	bfe19999 	.word	0xbfe19999
   17100:	aaaa9ef0 	.word	0xaaaa9ef0
   17104:	bfe0aaaa 	.word	0xbfe0aaaa
   17108:	eeeed77a 	.word	0xeeeed77a
   1710c:	bfdeeeee 	.word	0xbfdeeeee

00017110 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   17110:	b480      	push	{r7}
   17112:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   17114:	f242 0320 	movw	r3, #8224	; 0x2020
   17118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1711c:	2200      	movs	r2, #0
   1711e:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   17120:	f242 0309 	movw	r3, #8201	; 0x2009
   17124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17128:	2219      	movs	r2, #25
   1712a:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   1712c:	f242 030b 	movw	r3, #8203	; 0x200b
   17130:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17134:	2200      	movs	r2, #0
   17136:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   17138:	f242 030a 	movw	r3, #8202	; 0x200a
   1713c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17140:	2208      	movs	r2, #8
   17142:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   17144:	f242 0320 	movw	r3, #8224	; 0x2020
   17148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1714c:	2286      	movs	r2, #134	; 0x86
   1714e:	701a      	strb	r2, [r3, #0]
}
   17150:	46bd      	mov	sp, r7
   17152:	f85d 7b04 	ldr.w	r7, [sp], #4
   17156:	4770      	bx	lr

00017158 <uart_init_rx>:

void uart_init_rx() {
   17158:	b480      	push	{r7}
   1715a:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   1715c:	f242 030a 	movw	r3, #8202	; 0x200a
   17160:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17164:	f242 020a 	movw	r2, #8202	; 0x200a
   17168:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1716c:	7812      	ldrb	r2, [r2, #0]
   1716e:	b2d2      	uxtb	r2, r2
   17170:	f042 0210 	orr.w	r2, r2, #16
   17174:	b2d2      	uxtb	r2, r2
   17176:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   17178:	f242 030a 	movw	r3, #8202	; 0x200a
   1717c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17180:	f242 020a 	movw	r2, #8202	; 0x200a
   17184:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17188:	7812      	ldrb	r2, [r2, #0]
   1718a:	b2d2      	uxtb	r2, r2
   1718c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17190:	b2d2      	uxtb	r2, r2
   17192:	701a      	strb	r2, [r3, #0]
}
   17194:	46bd      	mov	sp, r7
   17196:	f85d 7b04 	ldr.w	r7, [sp], #4
   1719a:	4770      	bx	lr

0001719c <uart_transmit>:

void uart_transmit( unsigned char data ) {
   1719c:	b480      	push	{r7}
   1719e:	b083      	sub	sp, #12
   171a0:	af00      	add	r7, sp, #0
   171a2:	4603      	mov	r3, r0
   171a4:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   171a6:	f242 030a 	movw	r3, #8202	; 0x200a
   171aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171ae:	781b      	ldrb	r3, [r3, #0]
   171b0:	b2db      	uxtb	r3, r3
   171b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   171b6:	2b00      	cmp	r3, #0
   171b8:	d028      	beq.n	1720c <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   171ba:	f64c 2391 	movw	r3, #51857	; 0xca91
   171be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171c2:	781b      	ldrb	r3, [r3, #0]
   171c4:	b2db      	uxtb	r3, r3
   171c6:	461a      	mov	r2, r3
   171c8:	f64c 2390 	movw	r3, #51856	; 0xca90
   171cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171d0:	781b      	ldrb	r3, [r3, #0]
   171d2:	3301      	adds	r3, #1
   171d4:	429a      	cmp	r2, r3
   171d6:	d100      	bne.n	171da <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   171d8:	e02c      	b.n	17234 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   171da:	f64c 2390 	movw	r3, #51856	; 0xca90
   171de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171e2:	781b      	ldrb	r3, [r3, #0]
   171e4:	461a      	mov	r2, r3
   171e6:	f64c 2394 	movw	r3, #51860	; 0xca94
   171ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171ee:	79f9      	ldrb	r1, [r7, #7]
   171f0:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   171f2:	f64c 2390 	movw	r3, #51856	; 0xca90
   171f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171fa:	781b      	ldrb	r3, [r3, #0]
   171fc:	3301      	adds	r3, #1
   171fe:	b2da      	uxtb	r2, r3
   17200:	f64c 2390 	movw	r3, #51856	; 0xca90
   17204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17208:	701a      	strb	r2, [r3, #0]
   1720a:	e013      	b.n	17234 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   1720c:	f242 030c 	movw	r3, #8204	; 0x200c
   17210:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17214:	79fa      	ldrb	r2, [r7, #7]
   17216:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   17218:	f242 030a 	movw	r3, #8202	; 0x200a
   1721c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17220:	f242 020a 	movw	r2, #8202	; 0x200a
   17224:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17228:	7812      	ldrb	r2, [r2, #0]
   1722a:	b2d2      	uxtb	r2, r2
   1722c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17230:	b2d2      	uxtb	r2, r2
   17232:	701a      	strb	r2, [r3, #0]
  }
}
   17234:	370c      	adds	r7, #12
   17236:	46bd      	mov	sp, r7
   17238:	f85d 7b04 	ldr.w	r7, [sp], #4
   1723c:	4770      	bx	lr
   1723e:	bf00      	nop

00017240 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   17240:	b590      	push	{r4, r7, lr}
   17242:	b089      	sub	sp, #36	; 0x24
   17244:	af00      	add	r7, sp, #0
   17246:	4603      	mov	r3, r0
   17248:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   1724a:	f648 23c0 	movw	r3, #35520	; 0x8ac0
   1724e:	f2c0 0301 	movt	r3, #1
   17252:	f107 040c 	add.w	r4, r7, #12
   17256:	6818      	ldr	r0, [r3, #0]
   17258:	6859      	ldr	r1, [r3, #4]
   1725a:	689a      	ldr	r2, [r3, #8]
   1725c:	68db      	ldr	r3, [r3, #12]
   1725e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   17260:	79fb      	ldrb	r3, [r7, #7]
   17262:	091b      	lsrs	r3, r3, #4
   17264:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   17266:	79fb      	ldrb	r3, [r7, #7]
   17268:	f003 030f 	and.w	r3, r3, #15
   1726c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   1726e:	230f      	movs	r3, #15
   17270:	77fb      	strb	r3, [r7, #31]
        low = 15;
   17272:	230f      	movs	r3, #15
   17274:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   17276:	7ffb      	ldrb	r3, [r7, #31]
   17278:	f107 0220 	add.w	r2, r7, #32
   1727c:	4413      	add	r3, r2
   1727e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   17282:	4618      	mov	r0, r3
   17284:	f7ff ff8a 	bl	1719c <uart_transmit>
  uart_transmit(hex[low]);
   17288:	7fbb      	ldrb	r3, [r7, #30]
   1728a:	f107 0220 	add.w	r2, r7, #32
   1728e:	4413      	add	r3, r2
   17290:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   17294:	4618      	mov	r0, r3
   17296:	f7ff ff81 	bl	1719c <uart_transmit>
} 
   1729a:	3724      	adds	r7, #36	; 0x24
   1729c:	46bd      	mov	sp, r7
   1729e:	bd90      	pop	{r4, r7, pc}

000172a0 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   172a0:	b580      	push	{r7, lr}
   172a2:	b084      	sub	sp, #16
   172a4:	af00      	add	r7, sp, #0
   172a6:	4603      	mov	r3, r0
   172a8:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   172aa:	88fb      	ldrh	r3, [r7, #6]
   172ac:	0a1b      	lsrs	r3, r3, #8
   172ae:	b29b      	uxth	r3, r3
   172b0:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   172b2:	88fb      	ldrh	r3, [r7, #6]
   172b4:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   172b6:	7bfb      	ldrb	r3, [r7, #15]
   172b8:	4618      	mov	r0, r3
   172ba:	f7ff ffc1 	bl	17240 <uart_print_hex>
  uart_print_hex(low);
   172be:	7bbb      	ldrb	r3, [r7, #14]
   172c0:	4618      	mov	r0, r3
   172c2:	f7ff ffbd 	bl	17240 <uart_print_hex>
}
   172c6:	3710      	adds	r7, #16
   172c8:	46bd      	mov	sp, r7
   172ca:	bd80      	pop	{r7, pc}

000172cc <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   172cc:	b580      	push	{r7, lr}
   172ce:	b084      	sub	sp, #16
   172d0:	af00      	add	r7, sp, #0
   172d2:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   172d4:	2300      	movs	r3, #0
   172d6:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   172d8:	e009      	b.n	172ee <uart_print_string+0x22>
    uart_transmit(s[i]);
   172da:	7bfb      	ldrb	r3, [r7, #15]
   172dc:	687a      	ldr	r2, [r7, #4]
   172de:	4413      	add	r3, r2
   172e0:	781b      	ldrb	r3, [r3, #0]
   172e2:	4618      	mov	r0, r3
   172e4:	f7ff ff5a 	bl	1719c <uart_transmit>
    i++;
   172e8:	7bfb      	ldrb	r3, [r7, #15]
   172ea:	3301      	adds	r3, #1
   172ec:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   172ee:	7bfb      	ldrb	r3, [r7, #15]
   172f0:	687a      	ldr	r2, [r7, #4]
   172f2:	4413      	add	r3, r2
   172f4:	781b      	ldrb	r3, [r3, #0]
   172f6:	2b00      	cmp	r3, #0
   172f8:	d1ef      	bne.n	172da <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   172fa:	3710      	adds	r7, #16
   172fc:	46bd      	mov	sp, r7
   172fe:	bd80      	pop	{r7, pc}

00017300 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   17300:	b480      	push	{r7}
   17302:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   17304:	f64c 2390 	movw	r3, #51856	; 0xca90
   17308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1730c:	781a      	ldrb	r2, [r3, #0]
   1730e:	f64c 2391 	movw	r3, #51857	; 0xca91
   17312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17316:	781b      	ldrb	r3, [r3, #0]
   17318:	b2db      	uxtb	r3, r3
   1731a:	429a      	cmp	r2, r3
   1731c:	d10e      	bne.n	1733c <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   1731e:	f242 030a 	movw	r3, #8202	; 0x200a
   17322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17326:	f242 020a 	movw	r2, #8202	; 0x200a
   1732a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1732e:	7812      	ldrb	r2, [r2, #0]
   17330:	b2d2      	uxtb	r2, r2
   17332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   17336:	b2d2      	uxtb	r2, r2
   17338:	701a      	strb	r2, [r3, #0]
   1733a:	e01d      	b.n	17378 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   1733c:	f242 030c 	movw	r3, #8204	; 0x200c
   17340:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17344:	f64c 2291 	movw	r2, #51857	; 0xca91
   17348:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1734c:	7812      	ldrb	r2, [r2, #0]
   1734e:	b2d2      	uxtb	r2, r2
   17350:	4611      	mov	r1, r2
   17352:	f64c 2294 	movw	r2, #51860	; 0xca94
   17356:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1735a:	5c52      	ldrb	r2, [r2, r1]
   1735c:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   1735e:	f64c 2391 	movw	r3, #51857	; 0xca91
   17362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17366:	781b      	ldrb	r3, [r3, #0]
   17368:	b2db      	uxtb	r3, r3
   1736a:	3301      	adds	r3, #1
   1736c:	b2da      	uxtb	r2, r3
   1736e:	f64c 2391 	movw	r3, #51857	; 0xca91
   17372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17376:	701a      	strb	r2, [r3, #0]
  }
}
   17378:	46bd      	mov	sp, r7
   1737a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1737e:	4770      	bx	lr

00017380 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17380:	b580      	push	{r7, lr}
   17382:	b082      	sub	sp, #8
   17384:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   17386:	2010      	movs	r0, #16
   17388:	2101      	movs	r1, #1
   1738a:	f7e9 fd19 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   1738e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17392:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1739a:	2201      	movs	r2, #1
   1739c:	f7ea f820 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   173a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   173a4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   173a6:	2310      	movs	r3, #16
   173a8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   173aa:	2303      	movs	r3, #3
   173ac:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   173ae:	1d3b      	adds	r3, r7, #4
   173b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   173b4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   173b8:	4619      	mov	r1, r3
   173ba:	f7e9 fed5 	bl	1168 <GPIO_Init>
}
   173be:	3708      	adds	r7, #8
   173c0:	46bd      	mov	sp, r7
   173c2:	bd80      	pop	{r7, pc}

000173c4 <init_button>:

void init_button(void)
{
   173c4:	b580      	push	{r7, lr}
   173c6:	b082      	sub	sp, #8
   173c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   173ca:	2004      	movs	r0, #4
   173cc:	2101      	movs	r1, #1
   173ce:	f7e9 fcf7 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   173d2:	2301      	movs	r3, #1
   173d4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   173d6:	2304      	movs	r3, #4
   173d8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   173da:	2303      	movs	r3, #3
   173dc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   173de:	1d3b      	adds	r3, r7, #4
   173e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   173e4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   173e8:	4619      	mov	r1, r3
   173ea:	f7e9 febd 	bl	1168 <GPIO_Init>
}
   173ee:	3708      	adds	r7, #8
   173f0:	46bd      	mov	sp, r7
   173f2:	bd80      	pop	{r7, pc}

000173f4 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   173f4:	b580      	push	{r7, lr}
   173f6:	b084      	sub	sp, #16
   173f8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   173fa:	2001      	movs	r0, #1
   173fc:	2101      	movs	r1, #1
   173fe:	f7e9 fcdf 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   17402:	2000      	movs	r0, #0
   17404:	2100      	movs	r1, #0
   17406:	f7ea f8e3 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   1740a:	2301      	movs	r3, #1
   1740c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   1740e:	2300      	movs	r3, #0
   17410:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   17412:	2308      	movs	r3, #8
   17414:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   17416:	2301      	movs	r3, #1
   17418:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   1741a:	f107 0308 	add.w	r3, r7, #8
   1741e:	4618      	mov	r0, r3
   17420:	f7ea fddc 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   17424:	2306      	movs	r3, #6
   17426:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   17428:	230f      	movs	r3, #15
   1742a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   1742c:	230f      	movs	r3, #15
   1742e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17430:	2301      	movs	r3, #1
   17432:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   17434:	1d3b      	adds	r3, r7, #4
   17436:	4618      	mov	r0, r3
   17438:	f7ea ff0a 	bl	2250 <NVIC_Init>
}
   1743c:	3710      	adds	r7, #16
   1743e:	46bd      	mov	sp, r7
   17440:	bd80      	pop	{r7, pc}
   17442:	bf00      	nop

00017444 <init_rs232>:

void init_rs232(void)
{
   17444:	b580      	push	{r7, lr}
   17446:	b086      	sub	sp, #24
   17448:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   1744a:	2005      	movs	r0, #5
   1744c:	2101      	movs	r1, #1
   1744e:	f7e9 fcb7 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   17452:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17456:	2101      	movs	r1, #1
   17458:	f7e9 fcda 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   1745c:	2308      	movs	r3, #8
   1745e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17460:	2304      	movs	r3, #4
   17462:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17464:	1d3b      	adds	r3, r7, #4
   17466:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1746a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1746e:	4619      	mov	r1, r3
   17470:	f7e9 fe7a 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   17474:	2304      	movs	r3, #4
   17476:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17478:	2303      	movs	r3, #3
   1747a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   1747c:	2318      	movs	r3, #24
   1747e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17480:	1d3b      	adds	r3, r7, #4
   17482:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17486:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1748a:	4619      	mov	r1, r3
   1748c:	f7e9 fe6c 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17490:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   17494:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   17496:	2300      	movs	r3, #0
   17498:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   1749a:	2300      	movs	r3, #0
   1749c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   1749e:	2300      	movs	r3, #0
   174a0:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   174a2:	2300      	movs	r3, #0
   174a4:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   174a6:	230c      	movs	r3, #12
   174a8:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   174aa:	f107 0308 	add.w	r3, r7, #8
   174ae:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174b2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174b6:	4619      	mov	r1, r3
   174b8:	f7ea f93e 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   174bc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174c4:	2101      	movs	r1, #1
   174c6:	f7ea fa55 	bl	1974 <USART_Cmd>
}
   174ca:	3718      	adds	r7, #24
   174cc:	46bd      	mov	sp, r7
   174ce:	bd80      	pop	{r7, pc}

000174d0 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   174d0:	b580      	push	{r7, lr}
   174d2:	b082      	sub	sp, #8
   174d4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   174d6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174da:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174de:	f240 7127 	movw	r1, #1831	; 0x727
   174e2:	2200      	movs	r2, #0
   174e4:	f7ea fa66 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   174e8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174ec:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174f0:	f240 5125 	movw	r1, #1317	; 0x525
   174f4:	2201      	movs	r2, #1
   174f6:	f7ea fa5d 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   174fa:	2326      	movs	r3, #38	; 0x26
   174fc:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   174fe:	2300      	movs	r3, #0
   17500:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17502:	2301      	movs	r3, #1
   17504:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   17506:	1d3b      	adds	r3, r7, #4
   17508:	4618      	mov	r0, r3
   1750a:	f7ea fea1 	bl	2250 <NVIC_Init>
}
   1750e:	3708      	adds	r7, #8
   17510:	46bd      	mov	sp, r7
   17512:	bd80      	pop	{r7, pc}

00017514 <enable_rs232>:

void enable_rs232(void)
{
   17514:	b580      	push	{r7, lr}
   17516:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   17518:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1751c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17520:	2101      	movs	r1, #1
   17522:	f7ea fa27 	bl	1974 <USART_Cmd>
}
   17526:	bd80      	pop	{r7, pc}

00017528 <send_byte>:

void send_byte(uint8_t b)
{
   17528:	b580      	push	{r7, lr}
   1752a:	b082      	sub	sp, #8
   1752c:	af00      	add	r7, sp, #0
   1752e:	4603      	mov	r3, r0
   17530:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   17532:	bf00      	nop
   17534:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17538:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1753c:	2180      	movs	r1, #128	; 0x80
   1753e:	f7ea fc85 	bl	1e4c <USART_GetFlagStatus>
   17542:	4603      	mov	r3, r0
   17544:	2b00      	cmp	r3, #0
   17546:	d0f5      	beq.n	17534 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1754c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17550:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17554:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17558:	68d2      	ldr	r2, [r2, #12]
   1755a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   1755e:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17560:	79fb      	ldrb	r3, [r7, #7]
   17562:	b29b      	uxth	r3, r3
   17564:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17568:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1756c:	4619      	mov	r1, r3
   1756e:	f7ea fb21 	bl	1bb4 <USART_SendData>
}
   17572:	3708      	adds	r7, #8
   17574:	46bd      	mov	sp, r7
   17576:	bd80      	pop	{r7, pc}

00017578 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17578:	b580      	push	{r7, lr}
   1757a:	b082      	sub	sp, #8
   1757c:	af00      	add	r7, sp, #0
   1757e:	4603      	mov	r3, r0
   17580:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   17582:	79fb      	ldrb	r3, [r7, #7]
   17584:	3330      	adds	r3, #48	; 0x30
   17586:	b2db      	uxtb	r3, r3
   17588:	4618      	mov	r0, r3
   1758a:	f7ff ffcd 	bl	17528 <send_byte>
}
   1758e:	3708      	adds	r7, #8
   17590:	46bd      	mov	sp, r7
   17592:	bd80      	pop	{r7, pc}

00017594 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   17594:	b580      	push	{r7, lr}
   17596:	b084      	sub	sp, #16
   17598:	af00      	add	r7, sp, #0
   1759a:	6078      	str	r0, [r7, #4]
    int i = 0;
   1759c:	2300      	movs	r3, #0
   1759e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   175a0:	e009      	b.n	175b6 <vPrintString+0x22>
    {
        send_byte(string[i]);
   175a2:	68fb      	ldr	r3, [r7, #12]
   175a4:	687a      	ldr	r2, [r7, #4]
   175a6:	4413      	add	r3, r2
   175a8:	781b      	ldrb	r3, [r3, #0]
   175aa:	4618      	mov	r0, r3
   175ac:	f7ff ffbc 	bl	17528 <send_byte>
        i++;
   175b0:	68fb      	ldr	r3, [r7, #12]
   175b2:	3301      	adds	r3, #1
   175b4:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   175b6:	68fb      	ldr	r3, [r7, #12]
   175b8:	687a      	ldr	r2, [r7, #4]
   175ba:	4413      	add	r3, r2
   175bc:	781b      	ldrb	r3, [r3, #0]
   175be:	2b00      	cmp	r3, #0
   175c0:	d1ef      	bne.n	175a2 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   175c2:	3710      	adds	r7, #16
   175c4:	46bd      	mov	sp, r7
   175c6:	bd80      	pop	{r7, pc}

000175c8 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   175c8:	b580      	push	{r7, lr}
   175ca:	b08a      	sub	sp, #40	; 0x28
   175cc:	af00      	add	r7, sp, #0
   175ce:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   175d0:	2300      	movs	r3, #0
   175d2:	623b      	str	r3, [r7, #32]
    long num = c_num;
   175d4:	687b      	ldr	r3, [r7, #4]
   175d6:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   175d8:	69fb      	ldr	r3, [r7, #28]
   175da:	2b00      	cmp	r3, #0
   175dc:	d106      	bne.n	175ec <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   175de:	f648 20d0 	movw	r0, #35536	; 0x8ad0
   175e2:	f2c0 0001 	movt	r0, #1
   175e6:	f7ff ffd5 	bl	17594 <vPrintString>
   175ea:	e062      	b.n	176b2 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   175ec:	e024      	b.n	17638 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   175ee:	69f9      	ldr	r1, [r7, #28]
   175f0:	f246 6367 	movw	r3, #26215	; 0x6667
   175f4:	f2c6 6366 	movt	r3, #26214	; 0x6666
   175f8:	fb83 2301 	smull	r2, r3, r3, r1
   175fc:	109a      	asrs	r2, r3, #2
   175fe:	17cb      	asrs	r3, r1, #31
   17600:	1ad2      	subs	r2, r2, r3
   17602:	4613      	mov	r3, r2
   17604:	009b      	lsls	r3, r3, #2
   17606:	4413      	add	r3, r2
   17608:	005b      	lsls	r3, r3, #1
   1760a:	1aca      	subs	r2, r1, r3
   1760c:	b2d3      	uxtb	r3, r2
   1760e:	3330      	adds	r3, #48	; 0x30
   17610:	b2da      	uxtb	r2, r3
   17612:	f107 010c 	add.w	r1, r7, #12
   17616:	6a3b      	ldr	r3, [r7, #32]
   17618:	440b      	add	r3, r1
   1761a:	701a      	strb	r2, [r3, #0]
            count ++;
   1761c:	6a3b      	ldr	r3, [r7, #32]
   1761e:	3301      	adds	r3, #1
   17620:	623b      	str	r3, [r7, #32]
            num /= 10;
   17622:	69fa      	ldr	r2, [r7, #28]
   17624:	f246 6367 	movw	r3, #26215	; 0x6667
   17628:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1762c:	fb83 1302 	smull	r1, r3, r3, r2
   17630:	1099      	asrs	r1, r3, #2
   17632:	17d3      	asrs	r3, r2, #31
   17634:	1acb      	subs	r3, r1, r3
   17636:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17638:	69fb      	ldr	r3, [r7, #28]
   1763a:	2b00      	cmp	r3, #0
   1763c:	d1d7      	bne.n	175ee <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   1763e:	f107 020c 	add.w	r2, r7, #12
   17642:	6a3b      	ldr	r3, [r7, #32]
   17644:	4413      	add	r3, r2
   17646:	2200      	movs	r2, #0
   17648:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   1764a:	2300      	movs	r3, #0
   1764c:	627b      	str	r3, [r7, #36]	; 0x24
   1764e:	e020      	b.n	17692 <vPrintNumber+0xca>
        {
            tmp = time[i];
   17650:	f107 020c 	add.w	r2, r7, #12
   17654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17656:	4413      	add	r3, r2
   17658:	781b      	ldrb	r3, [r3, #0]
   1765a:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   1765c:	6a3a      	ldr	r2, [r7, #32]
   1765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17660:	1ad3      	subs	r3, r2, r3
   17662:	3b01      	subs	r3, #1
   17664:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17668:	4413      	add	r3, r2
   1766a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   1766e:	f107 010c 	add.w	r1, r7, #12
   17672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17674:	440b      	add	r3, r1
   17676:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17678:	6a3a      	ldr	r2, [r7, #32]
   1767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1767c:	1ad3      	subs	r3, r2, r3
   1767e:	3b01      	subs	r3, #1
   17680:	f107 0128 	add.w	r1, r7, #40	; 0x28
   17684:	440b      	add	r3, r1
   17686:	7efa      	ldrb	r2, [r7, #27]
   17688:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   1768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1768e:	3301      	adds	r3, #1
   17690:	627b      	str	r3, [r7, #36]	; 0x24
   17692:	6a3b      	ldr	r3, [r7, #32]
   17694:	085a      	lsrs	r2, r3, #1
   17696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17698:	429a      	cmp	r2, r3
   1769a:	d8d9      	bhi.n	17650 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   1769c:	f107 030c 	add.w	r3, r7, #12
   176a0:	4618      	mov	r0, r3
   176a2:	f7ff ff77 	bl	17594 <vPrintString>
        vPrintString("\n\r");
   176a6:	f648 20d4 	movw	r0, #35540	; 0x8ad4
   176aa:	f2c0 0001 	movt	r0, #1
   176ae:	f7ff ff71 	bl	17594 <vPrintString>
    }
}
   176b2:	3728      	adds	r7, #40	; 0x28
   176b4:	46bd      	mov	sp, r7
   176b6:	bd80      	pop	{r7, pc}

000176b8 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   176b8:	b580      	push	{r7, lr}
   176ba:	b084      	sub	sp, #16
   176bc:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   176be:	2300      	movs	r3, #0
   176c0:	60fb      	str	r3, [r7, #12]
   176c2:	e01e      	b.n	17702 <vStartTask+0x4a>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
   176c4:	f240 0390 	movw	r3, #144	; 0x90
   176c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176cc:	68fa      	ldr	r2, [r7, #12]
   176ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   176d2:	f240 0328 	movw	r3, #40	; 0x28
   176d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176da:	68fa      	ldr	r2, [r7, #12]
   176dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   176e0:	f240 0328 	movw	r3, #40	; 0x28
   176e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176e8:	68fa      	ldr	r2, [r7, #12]
   176ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   176ee:	463b      	mov	r3, r7
   176f0:	f7eb fb00 	bl	2cf4 <pxEventGenericCreate>
   176f4:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   176f6:	68b8      	ldr	r0, [r7, #8]
   176f8:	f7eb fe32 	bl	3360 <vEventGenericSend>
void vStartTask()
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   176fc:	68fb      	ldr	r3, [r7, #12]
   176fe:	3301      	adds	r3, #1
   17700:	60fb      	str	r3, [r7, #12]
   17702:	68fb      	ldr	r3, [r7, #12]
   17704:	2b0c      	cmp	r3, #12
   17706:	dddd      	ble.n	176c4 <vStartTask+0xc>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
        vEventSend( pxEvent );   
    }
}
   17708:	3710      	adds	r7, #16
   1770a:	46bd      	mov	sp, r7
   1770c:	bd80      	pop	{r7, pc}
   1770e:	bf00      	nop

00017710 <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   17710:	b580      	push	{r7, lr}
   17712:	b086      	sub	sp, #24
   17714:	af04      	add	r7, sp, #16
    init_led();
   17716:	f7ff fe33 	bl	17380 <init_led>
    init_rs232();
   1771a:	f7ff fe93 	bl	17444 <init_rs232>
    enable_rs232_interrupts();
   1771e:	f7ff fed7 	bl	174d0 <enable_rs232_interrupts>
    enable_rs232();
   17722:	f7ff fef7 	bl	17514 <enable_rs232>
    vSemaphoreInitialise();
   17726:	f7eb fe83 	bl	3430 <vSemaphoreInitialise>
    vContextInit();
   1772a:	f7eb fec1 	bl	34b0 <vContextInit>
    vInitialiseEventLists();  
   1772e:	f7eb f9a7 	bl	2a80 <vInitialiseEventLists>
    vStartTask();
   17732:	f7ff ffc1 	bl	176b8 <vStartTask>
    PapabenchInit();
   17736:	f7ec fa8f 	bl	3c58 <PapabenchInit>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   1773a:	2300      	movs	r3, #0
   1773c:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   1773e:	2301      	movs	r3, #1
   17740:	9300      	str	r3, [sp, #0]
   17742:	f64c 3394 	movw	r3, #52116	; 0xcb94
   17746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1774a:	9301      	str	r3, [sp, #4]
   1774c:	2300      	movs	r3, #0
   1774e:	9302      	str	r3, [sp, #8]
   17750:	2300      	movs	r3, #0
   17752:	9303      	str	r3, [sp, #12]
   17754:	f643 307d 	movw	r0, #15229	; 0x3b7d
   17758:	f2c0 0000 	movt	r0, #0
   1775c:	f648 21d8 	movw	r1, #35544	; 0x8ad8
   17760:	f2c0 0101 	movt	r1, #1
   17764:	2280      	movs	r2, #128	; 0x80
   17766:	2300      	movs	r3, #0
   17768:	f7ed f91a 	bl	49a0 <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 4, &xTaskOfHandle[1]);
   1776c:	2304      	movs	r3, #4
   1776e:	9300      	str	r3, [sp, #0]
   17770:	4b25      	ldr	r3, [pc, #148]	; (17808 <main+0xf8>)
   17772:	9301      	str	r3, [sp, #4]
   17774:	2300      	movs	r3, #0
   17776:	9302      	str	r3, [sp, #8]
   17778:	2300      	movs	r3, #0
   1777a:	9303      	str	r3, [sp, #12]
   1777c:	f243 7095 	movw	r0, #14229	; 0x3795
   17780:	f2c0 0000 	movt	r0, #0
   17784:	f648 21e4 	movw	r1, #35556	; 0x8ae4
   17788:	f2c0 0101 	movt	r1, #1
   1778c:	2280      	movs	r2, #128	; 0x80
   1778e:	2300      	movs	r3, #0
   17790:	f7ed f906 	bl	49a0 <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   17794:	2302      	movs	r3, #2
   17796:	9300      	str	r3, [sp, #0]
   17798:	4b1c      	ldr	r3, [pc, #112]	; (1780c <main+0xfc>)
   1779a:	9301      	str	r3, [sp, #4]
   1779c:	2300      	movs	r3, #0
   1779e:	9302      	str	r3, [sp, #8]
   177a0:	2300      	movs	r3, #0
   177a2:	9303      	str	r3, [sp, #12]
   177a4:	f643 00c1 	movw	r0, #14529	; 0x38c1
   177a8:	f2c0 0000 	movt	r0, #0
   177ac:	f648 21f0 	movw	r1, #35568	; 0x8af0
   177b0:	f2c0 0101 	movt	r1, #1
   177b4:	2280      	movs	r2, #128	; 0x80
   177b6:	2300      	movs	r3, #0
   177b8:	f7ed f8f2 	bl	49a0 <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 3, &xTaskOfHandle[3]);
   177bc:	2303      	movs	r3, #3
   177be:	9300      	str	r3, [sp, #0]
   177c0:	4b13      	ldr	r3, [pc, #76]	; (17810 <main+0x100>)
   177c2:	9301      	str	r3, [sp, #4]
   177c4:	2300      	movs	r3, #0
   177c6:	9302      	str	r3, [sp, #8]
   177c8:	2300      	movs	r3, #0
   177ca:	9303      	str	r3, [sp, #12]
   177cc:	f643 205d 	movw	r0, #14941	; 0x3a5d
   177d0:	f2c0 0000 	movt	r0, #0
   177d4:	f648 21fc 	movw	r1, #35580	; 0x8afc
   177d8:	f2c0 0101 	movt	r1, #1
   177dc:	2280      	movs	r2, #128	; 0x80
   177de:	2300      	movs	r3, #0
   177e0:	f7ed f8de 	bl	49a0 <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   177e4:	f241 1320 	movw	r3, #4384	; 0x1120
   177e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   177ec:	681b      	ldr	r3, [r3, #0]
   177ee:	4618      	mov	r0, r3
   177f0:	2100      	movs	r1, #0
   177f2:	2200      	movs	r2, #0
   177f4:	2300      	movs	r3, #0
   177f6:	f7ec fdc1 	bl	437c <xQueueGenericSend>
    vTaskStartScheduler();
   177fa:	f7ed fc4f 	bl	509c <vTaskStartScheduler>

    return 0;
   177fe:	2300      	movs	r3, #0
}
   17800:	4618      	mov	r0, r3
   17802:	3708      	adds	r7, #8
   17804:	46bd      	mov	sp, r7
   17806:	bd80      	pop	{r7, pc}
   17808:	2004cb98 	.word	0x2004cb98
   1780c:	2004cb9c 	.word	0x2004cb9c
   17810:	2004cba0 	.word	0x2004cba0

00017814 <myTraceCreate>:

void myTraceCreate      (){
   17814:	b480      	push	{r7}
   17816:	af00      	add	r7, sp, #0
}
   17818:	46bd      	mov	sp, r7
   1781a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1781e:	4770      	bx	lr

00017820 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   17820:	b480      	push	{r7}
   17822:	af00      	add	r7, sp, #0
}
   17824:	46bd      	mov	sp, r7
   17826:	f85d 7b04 	ldr.w	r7, [sp], #4
   1782a:	4770      	bx	lr

0001782c <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   1782c:	b480      	push	{r7}
   1782e:	af00      	add	r7, sp, #0
}
   17830:	46bd      	mov	sp, r7
   17832:	f85d 7b04 	ldr.w	r7, [sp], #4
   17836:	4770      	bx	lr

00017838 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17838:	b580      	push	{r7, lr}
   1783a:	af00      	add	r7, sp, #0
    if(xIsExecutableEventArrive())
   1783c:	f7eb f984 	bl	2b48 <xIsExecutableEventArrive>
   17840:	4603      	mov	r3, r0
   17842:	2b00      	cmp	r3, #0
   17844:	d00a      	beq.n	1785c <vApplicationTickHook+0x24>
       xSemaphoreGive( xBinarySemaphore[0] ); 
   17846:	f241 1320 	movw	r3, #4384	; 0x1120
   1784a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1784e:	681b      	ldr	r3, [r3, #0]
   17850:	4618      	mov	r0, r3
   17852:	2100      	movs	r1, #0
   17854:	2200      	movs	r2, #0
   17856:	2300      	movs	r3, #0
   17858:	f7ec fd90 	bl	437c <xQueueGenericSend>
}
   1785c:	bd80      	pop	{r7, pc}
   1785e:	bf00      	nop

00017860 <__aeabi_drsub>:
   17860:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   17864:	e002      	b.n	1786c <__adddf3>
   17866:	bf00      	nop

00017868 <__aeabi_dsub>:
   17868:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001786c <__adddf3>:
   1786c:	b530      	push	{r4, r5, lr}
   1786e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   17872:	ea4f 0543 	mov.w	r5, r3, lsl #1
   17876:	ea94 0f05 	teq	r4, r5
   1787a:	bf08      	it	eq
   1787c:	ea90 0f02 	teqeq	r0, r2
   17880:	bf1f      	itttt	ne
   17882:	ea54 0c00 	orrsne.w	ip, r4, r0
   17886:	ea55 0c02 	orrsne.w	ip, r5, r2
   1788a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1788e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17892:	f000 80e2 	beq.w	17a5a <__adddf3+0x1ee>
   17896:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1789a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1789e:	bfb8      	it	lt
   178a0:	426d      	neglt	r5, r5
   178a2:	dd0c      	ble.n	178be <__adddf3+0x52>
   178a4:	442c      	add	r4, r5
   178a6:	ea80 0202 	eor.w	r2, r0, r2
   178aa:	ea81 0303 	eor.w	r3, r1, r3
   178ae:	ea82 0000 	eor.w	r0, r2, r0
   178b2:	ea83 0101 	eor.w	r1, r3, r1
   178b6:	ea80 0202 	eor.w	r2, r0, r2
   178ba:	ea81 0303 	eor.w	r3, r1, r3
   178be:	2d36      	cmp	r5, #54	; 0x36
   178c0:	bf88      	it	hi
   178c2:	bd30      	pophi	{r4, r5, pc}
   178c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   178c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   178cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   178d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   178d4:	d002      	beq.n	178dc <__adddf3+0x70>
   178d6:	4240      	negs	r0, r0
   178d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   178dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   178e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   178e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   178e8:	d002      	beq.n	178f0 <__adddf3+0x84>
   178ea:	4252      	negs	r2, r2
   178ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   178f0:	ea94 0f05 	teq	r4, r5
   178f4:	f000 80a7 	beq.w	17a46 <__adddf3+0x1da>
   178f8:	f1a4 0401 	sub.w	r4, r4, #1
   178fc:	f1d5 0e20 	rsbs	lr, r5, #32
   17900:	db0d      	blt.n	1791e <__adddf3+0xb2>
   17902:	fa02 fc0e 	lsl.w	ip, r2, lr
   17906:	fa22 f205 	lsr.w	r2, r2, r5
   1790a:	1880      	adds	r0, r0, r2
   1790c:	f141 0100 	adc.w	r1, r1, #0
   17910:	fa03 f20e 	lsl.w	r2, r3, lr
   17914:	1880      	adds	r0, r0, r2
   17916:	fa43 f305 	asr.w	r3, r3, r5
   1791a:	4159      	adcs	r1, r3
   1791c:	e00e      	b.n	1793c <__adddf3+0xd0>
   1791e:	f1a5 0520 	sub.w	r5, r5, #32
   17922:	f10e 0e20 	add.w	lr, lr, #32
   17926:	2a01      	cmp	r2, #1
   17928:	fa03 fc0e 	lsl.w	ip, r3, lr
   1792c:	bf28      	it	cs
   1792e:	f04c 0c02 	orrcs.w	ip, ip, #2
   17932:	fa43 f305 	asr.w	r3, r3, r5
   17936:	18c0      	adds	r0, r0, r3
   17938:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1793c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17940:	d507      	bpl.n	17952 <__adddf3+0xe6>
   17942:	f04f 0e00 	mov.w	lr, #0
   17946:	f1dc 0c00 	rsbs	ip, ip, #0
   1794a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1794e:	eb6e 0101 	sbc.w	r1, lr, r1
   17952:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17956:	d31b      	bcc.n	17990 <__adddf3+0x124>
   17958:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1795c:	d30c      	bcc.n	17978 <__adddf3+0x10c>
   1795e:	0849      	lsrs	r1, r1, #1
   17960:	ea5f 0030 	movs.w	r0, r0, rrx
   17964:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17968:	f104 0401 	add.w	r4, r4, #1
   1796c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17970:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17974:	f080 809a 	bcs.w	17aac <__adddf3+0x240>
   17978:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1797c:	bf08      	it	eq
   1797e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17982:	f150 0000 	adcs.w	r0, r0, #0
   17986:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1798a:	ea41 0105 	orr.w	r1, r1, r5
   1798e:	bd30      	pop	{r4, r5, pc}
   17990:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17994:	4140      	adcs	r0, r0
   17996:	eb41 0101 	adc.w	r1, r1, r1
   1799a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1799e:	f1a4 0401 	sub.w	r4, r4, #1
   179a2:	d1e9      	bne.n	17978 <__adddf3+0x10c>
   179a4:	f091 0f00 	teq	r1, #0
   179a8:	bf04      	itt	eq
   179aa:	4601      	moveq	r1, r0
   179ac:	2000      	moveq	r0, #0
   179ae:	fab1 f381 	clz	r3, r1
   179b2:	bf08      	it	eq
   179b4:	3320      	addeq	r3, #32
   179b6:	f1a3 030b 	sub.w	r3, r3, #11
   179ba:	f1b3 0220 	subs.w	r2, r3, #32
   179be:	da0c      	bge.n	179da <__adddf3+0x16e>
   179c0:	320c      	adds	r2, #12
   179c2:	dd08      	ble.n	179d6 <__adddf3+0x16a>
   179c4:	f102 0c14 	add.w	ip, r2, #20
   179c8:	f1c2 020c 	rsb	r2, r2, #12
   179cc:	fa01 f00c 	lsl.w	r0, r1, ip
   179d0:	fa21 f102 	lsr.w	r1, r1, r2
   179d4:	e00c      	b.n	179f0 <__adddf3+0x184>
   179d6:	f102 0214 	add.w	r2, r2, #20
   179da:	bfd8      	it	le
   179dc:	f1c2 0c20 	rsble	ip, r2, #32
   179e0:	fa01 f102 	lsl.w	r1, r1, r2
   179e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   179e8:	bfdc      	itt	le
   179ea:	ea41 010c 	orrle.w	r1, r1, ip
   179ee:	4090      	lslle	r0, r2
   179f0:	1ae4      	subs	r4, r4, r3
   179f2:	bfa2      	ittt	ge
   179f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   179f8:	4329      	orrge	r1, r5
   179fa:	bd30      	popge	{r4, r5, pc}
   179fc:	ea6f 0404 	mvn.w	r4, r4
   17a00:	3c1f      	subs	r4, #31
   17a02:	da1c      	bge.n	17a3e <__adddf3+0x1d2>
   17a04:	340c      	adds	r4, #12
   17a06:	dc0e      	bgt.n	17a26 <__adddf3+0x1ba>
   17a08:	f104 0414 	add.w	r4, r4, #20
   17a0c:	f1c4 0220 	rsb	r2, r4, #32
   17a10:	fa20 f004 	lsr.w	r0, r0, r4
   17a14:	fa01 f302 	lsl.w	r3, r1, r2
   17a18:	ea40 0003 	orr.w	r0, r0, r3
   17a1c:	fa21 f304 	lsr.w	r3, r1, r4
   17a20:	ea45 0103 	orr.w	r1, r5, r3
   17a24:	bd30      	pop	{r4, r5, pc}
   17a26:	f1c4 040c 	rsb	r4, r4, #12
   17a2a:	f1c4 0220 	rsb	r2, r4, #32
   17a2e:	fa20 f002 	lsr.w	r0, r0, r2
   17a32:	fa01 f304 	lsl.w	r3, r1, r4
   17a36:	ea40 0003 	orr.w	r0, r0, r3
   17a3a:	4629      	mov	r1, r5
   17a3c:	bd30      	pop	{r4, r5, pc}
   17a3e:	fa21 f004 	lsr.w	r0, r1, r4
   17a42:	4629      	mov	r1, r5
   17a44:	bd30      	pop	{r4, r5, pc}
   17a46:	f094 0f00 	teq	r4, #0
   17a4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17a4e:	bf06      	itte	eq
   17a50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17a54:	3401      	addeq	r4, #1
   17a56:	3d01      	subne	r5, #1
   17a58:	e74e      	b.n	178f8 <__adddf3+0x8c>
   17a5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17a5e:	bf18      	it	ne
   17a60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17a64:	d029      	beq.n	17aba <__adddf3+0x24e>
   17a66:	ea94 0f05 	teq	r4, r5
   17a6a:	bf08      	it	eq
   17a6c:	ea90 0f02 	teqeq	r0, r2
   17a70:	d005      	beq.n	17a7e <__adddf3+0x212>
   17a72:	ea54 0c00 	orrs.w	ip, r4, r0
   17a76:	bf04      	itt	eq
   17a78:	4619      	moveq	r1, r3
   17a7a:	4610      	moveq	r0, r2
   17a7c:	bd30      	pop	{r4, r5, pc}
   17a7e:	ea91 0f03 	teq	r1, r3
   17a82:	bf1e      	ittt	ne
   17a84:	2100      	movne	r1, #0
   17a86:	2000      	movne	r0, #0
   17a88:	bd30      	popne	{r4, r5, pc}
   17a8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17a8e:	d105      	bne.n	17a9c <__adddf3+0x230>
   17a90:	0040      	lsls	r0, r0, #1
   17a92:	4149      	adcs	r1, r1
   17a94:	bf28      	it	cs
   17a96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17a9a:	bd30      	pop	{r4, r5, pc}
   17a9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17aa0:	bf3c      	itt	cc
   17aa2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17aa6:	bd30      	popcc	{r4, r5, pc}
   17aa8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17aac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17ab0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17ab4:	f04f 0000 	mov.w	r0, #0
   17ab8:	bd30      	pop	{r4, r5, pc}
   17aba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17abe:	bf1a      	itte	ne
   17ac0:	4619      	movne	r1, r3
   17ac2:	4610      	movne	r0, r2
   17ac4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17ac8:	bf1c      	itt	ne
   17aca:	460b      	movne	r3, r1
   17acc:	4602      	movne	r2, r0
   17ace:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17ad2:	bf06      	itte	eq
   17ad4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17ad8:	ea91 0f03 	teqeq	r1, r3
   17adc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17ae0:	bd30      	pop	{r4, r5, pc}
   17ae2:	bf00      	nop

00017ae4 <__aeabi_ui2d>:
   17ae4:	f090 0f00 	teq	r0, #0
   17ae8:	bf04      	itt	eq
   17aea:	2100      	moveq	r1, #0
   17aec:	4770      	bxeq	lr
   17aee:	b530      	push	{r4, r5, lr}
   17af0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17af4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17af8:	f04f 0500 	mov.w	r5, #0
   17afc:	f04f 0100 	mov.w	r1, #0
   17b00:	e750      	b.n	179a4 <__adddf3+0x138>
   17b02:	bf00      	nop

00017b04 <__aeabi_i2d>:
   17b04:	f090 0f00 	teq	r0, #0
   17b08:	bf04      	itt	eq
   17b0a:	2100      	moveq	r1, #0
   17b0c:	4770      	bxeq	lr
   17b0e:	b530      	push	{r4, r5, lr}
   17b10:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b14:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17b1c:	bf48      	it	mi
   17b1e:	4240      	negmi	r0, r0
   17b20:	f04f 0100 	mov.w	r1, #0
   17b24:	e73e      	b.n	179a4 <__adddf3+0x138>
   17b26:	bf00      	nop

00017b28 <__aeabi_f2d>:
   17b28:	0042      	lsls	r2, r0, #1
   17b2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17b2e:	ea4f 0131 	mov.w	r1, r1, rrx
   17b32:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17b36:	bf1f      	itttt	ne
   17b38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17b3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17b40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17b44:	4770      	bxne	lr
   17b46:	f092 0f00 	teq	r2, #0
   17b4a:	bf14      	ite	ne
   17b4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17b50:	4770      	bxeq	lr
   17b52:	b530      	push	{r4, r5, lr}
   17b54:	f44f 7460 	mov.w	r4, #896	; 0x380
   17b58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17b5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17b60:	e720      	b.n	179a4 <__adddf3+0x138>
   17b62:	bf00      	nop

00017b64 <__aeabi_ul2d>:
   17b64:	ea50 0201 	orrs.w	r2, r0, r1
   17b68:	bf08      	it	eq
   17b6a:	4770      	bxeq	lr
   17b6c:	b530      	push	{r4, r5, lr}
   17b6e:	f04f 0500 	mov.w	r5, #0
   17b72:	e00a      	b.n	17b8a <__aeabi_l2d+0x16>

00017b74 <__aeabi_l2d>:
   17b74:	ea50 0201 	orrs.w	r2, r0, r1
   17b78:	bf08      	it	eq
   17b7a:	4770      	bxeq	lr
   17b7c:	b530      	push	{r4, r5, lr}
   17b7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17b82:	d502      	bpl.n	17b8a <__aeabi_l2d+0x16>
   17b84:	4240      	negs	r0, r0
   17b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17b8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17b96:	f43f aedc 	beq.w	17952 <__adddf3+0xe6>
   17b9a:	f04f 0203 	mov.w	r2, #3
   17b9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17ba2:	bf18      	it	ne
   17ba4:	3203      	addne	r2, #3
   17ba6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17baa:	bf18      	it	ne
   17bac:	3203      	addne	r2, #3
   17bae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17bb2:	f1c2 0320 	rsb	r3, r2, #32
   17bb6:	fa00 fc03 	lsl.w	ip, r0, r3
   17bba:	fa20 f002 	lsr.w	r0, r0, r2
   17bbe:	fa01 fe03 	lsl.w	lr, r1, r3
   17bc2:	ea40 000e 	orr.w	r0, r0, lr
   17bc6:	fa21 f102 	lsr.w	r1, r1, r2
   17bca:	4414      	add	r4, r2
   17bcc:	e6c1      	b.n	17952 <__adddf3+0xe6>
   17bce:	bf00      	nop

00017bd0 <__aeabi_dmul>:
   17bd0:	b570      	push	{r4, r5, r6, lr}
   17bd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17bd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17bda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17bde:	bf1d      	ittte	ne
   17be0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17be4:	ea94 0f0c 	teqne	r4, ip
   17be8:	ea95 0f0c 	teqne	r5, ip
   17bec:	f000 f8de 	bleq	17dac <__aeabi_dmul+0x1dc>
   17bf0:	442c      	add	r4, r5
   17bf2:	ea81 0603 	eor.w	r6, r1, r3
   17bf6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17bfa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17bfe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17c02:	bf18      	it	ne
   17c04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17c10:	d038      	beq.n	17c84 <__aeabi_dmul+0xb4>
   17c12:	fba0 ce02 	umull	ip, lr, r0, r2
   17c16:	f04f 0500 	mov.w	r5, #0
   17c1a:	fbe1 e502 	umlal	lr, r5, r1, r2
   17c1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17c22:	fbe0 e503 	umlal	lr, r5, r0, r3
   17c26:	f04f 0600 	mov.w	r6, #0
   17c2a:	fbe1 5603 	umlal	r5, r6, r1, r3
   17c2e:	f09c 0f00 	teq	ip, #0
   17c32:	bf18      	it	ne
   17c34:	f04e 0e01 	orrne.w	lr, lr, #1
   17c38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17c3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17c40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17c44:	d204      	bcs.n	17c50 <__aeabi_dmul+0x80>
   17c46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17c4a:	416d      	adcs	r5, r5
   17c4c:	eb46 0606 	adc.w	r6, r6, r6
   17c50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17c54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17c58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17c5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17c60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17c64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17c68:	bf88      	it	hi
   17c6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17c6e:	d81e      	bhi.n	17cae <__aeabi_dmul+0xde>
   17c70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17c74:	bf08      	it	eq
   17c76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17c7a:	f150 0000 	adcs.w	r0, r0, #0
   17c7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17c82:	bd70      	pop	{r4, r5, r6, pc}
   17c84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17c88:	ea46 0101 	orr.w	r1, r6, r1
   17c8c:	ea40 0002 	orr.w	r0, r0, r2
   17c90:	ea81 0103 	eor.w	r1, r1, r3
   17c94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17c98:	bfc2      	ittt	gt
   17c9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   17c9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17ca2:	bd70      	popgt	{r4, r5, r6, pc}
   17ca4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17ca8:	f04f 0e00 	mov.w	lr, #0
   17cac:	3c01      	subs	r4, #1
   17cae:	f300 80ab 	bgt.w	17e08 <__aeabi_dmul+0x238>
   17cb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17cb6:	bfde      	ittt	le
   17cb8:	2000      	movle	r0, #0
   17cba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17cbe:	bd70      	pople	{r4, r5, r6, pc}
   17cc0:	f1c4 0400 	rsb	r4, r4, #0
   17cc4:	3c20      	subs	r4, #32
   17cc6:	da35      	bge.n	17d34 <__aeabi_dmul+0x164>
   17cc8:	340c      	adds	r4, #12
   17cca:	dc1b      	bgt.n	17d04 <__aeabi_dmul+0x134>
   17ccc:	f104 0414 	add.w	r4, r4, #20
   17cd0:	f1c4 0520 	rsb	r5, r4, #32
   17cd4:	fa00 f305 	lsl.w	r3, r0, r5
   17cd8:	fa20 f004 	lsr.w	r0, r0, r4
   17cdc:	fa01 f205 	lsl.w	r2, r1, r5
   17ce0:	ea40 0002 	orr.w	r0, r0, r2
   17ce4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17ce8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17cec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17cf0:	fa21 f604 	lsr.w	r6, r1, r4
   17cf4:	eb42 0106 	adc.w	r1, r2, r6
   17cf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17cfc:	bf08      	it	eq
   17cfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d02:	bd70      	pop	{r4, r5, r6, pc}
   17d04:	f1c4 040c 	rsb	r4, r4, #12
   17d08:	f1c4 0520 	rsb	r5, r4, #32
   17d0c:	fa00 f304 	lsl.w	r3, r0, r4
   17d10:	fa20 f005 	lsr.w	r0, r0, r5
   17d14:	fa01 f204 	lsl.w	r2, r1, r4
   17d18:	ea40 0002 	orr.w	r0, r0, r2
   17d1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17d20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17d24:	f141 0100 	adc.w	r1, r1, #0
   17d28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d2c:	bf08      	it	eq
   17d2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d32:	bd70      	pop	{r4, r5, r6, pc}
   17d34:	f1c4 0520 	rsb	r5, r4, #32
   17d38:	fa00 f205 	lsl.w	r2, r0, r5
   17d3c:	ea4e 0e02 	orr.w	lr, lr, r2
   17d40:	fa20 f304 	lsr.w	r3, r0, r4
   17d44:	fa01 f205 	lsl.w	r2, r1, r5
   17d48:	ea43 0302 	orr.w	r3, r3, r2
   17d4c:	fa21 f004 	lsr.w	r0, r1, r4
   17d50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17d54:	fa21 f204 	lsr.w	r2, r1, r4
   17d58:	ea20 0002 	bic.w	r0, r0, r2
   17d5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d64:	bf08      	it	eq
   17d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d6a:	bd70      	pop	{r4, r5, r6, pc}
   17d6c:	f094 0f00 	teq	r4, #0
   17d70:	d10f      	bne.n	17d92 <__aeabi_dmul+0x1c2>
   17d72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17d76:	0040      	lsls	r0, r0, #1
   17d78:	eb41 0101 	adc.w	r1, r1, r1
   17d7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17d80:	bf08      	it	eq
   17d82:	3c01      	subeq	r4, #1
   17d84:	d0f7      	beq.n	17d76 <__aeabi_dmul+0x1a6>
   17d86:	ea41 0106 	orr.w	r1, r1, r6
   17d8a:	f095 0f00 	teq	r5, #0
   17d8e:	bf18      	it	ne
   17d90:	4770      	bxne	lr
   17d92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17d96:	0052      	lsls	r2, r2, #1
   17d98:	eb43 0303 	adc.w	r3, r3, r3
   17d9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17da0:	bf08      	it	eq
   17da2:	3d01      	subeq	r5, #1
   17da4:	d0f7      	beq.n	17d96 <__aeabi_dmul+0x1c6>
   17da6:	ea43 0306 	orr.w	r3, r3, r6
   17daa:	4770      	bx	lr
   17dac:	ea94 0f0c 	teq	r4, ip
   17db0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17db4:	bf18      	it	ne
   17db6:	ea95 0f0c 	teqne	r5, ip
   17dba:	d00c      	beq.n	17dd6 <__aeabi_dmul+0x206>
   17dbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17dc0:	bf18      	it	ne
   17dc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17dc6:	d1d1      	bne.n	17d6c <__aeabi_dmul+0x19c>
   17dc8:	ea81 0103 	eor.w	r1, r1, r3
   17dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17dd0:	f04f 0000 	mov.w	r0, #0
   17dd4:	bd70      	pop	{r4, r5, r6, pc}
   17dd6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17dda:	bf06      	itte	eq
   17ddc:	4610      	moveq	r0, r2
   17dde:	4619      	moveq	r1, r3
   17de0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17de4:	d019      	beq.n	17e1a <__aeabi_dmul+0x24a>
   17de6:	ea94 0f0c 	teq	r4, ip
   17dea:	d102      	bne.n	17df2 <__aeabi_dmul+0x222>
   17dec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17df0:	d113      	bne.n	17e1a <__aeabi_dmul+0x24a>
   17df2:	ea95 0f0c 	teq	r5, ip
   17df6:	d105      	bne.n	17e04 <__aeabi_dmul+0x234>
   17df8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17dfc:	bf1c      	itt	ne
   17dfe:	4610      	movne	r0, r2
   17e00:	4619      	movne	r1, r3
   17e02:	d10a      	bne.n	17e1a <__aeabi_dmul+0x24a>
   17e04:	ea81 0103 	eor.w	r1, r1, r3
   17e08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17e10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17e14:	f04f 0000 	mov.w	r0, #0
   17e18:	bd70      	pop	{r4, r5, r6, pc}
   17e1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17e1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17e22:	bd70      	pop	{r4, r5, r6, pc}

00017e24 <__aeabi_ddiv>:
   17e24:	b570      	push	{r4, r5, r6, lr}
   17e26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17e2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17e2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17e32:	bf1d      	ittte	ne
   17e34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17e38:	ea94 0f0c 	teqne	r4, ip
   17e3c:	ea95 0f0c 	teqne	r5, ip
   17e40:	f000 f8a7 	bleq	17f92 <__aeabi_ddiv+0x16e>
   17e44:	eba4 0405 	sub.w	r4, r4, r5
   17e48:	ea81 0e03 	eor.w	lr, r1, r3
   17e4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17e50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17e54:	f000 8088 	beq.w	17f68 <__aeabi_ddiv+0x144>
   17e58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17e5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17e60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17e64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17e68:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17e6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17e70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17e74:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17e78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17e7c:	429d      	cmp	r5, r3
   17e7e:	bf08      	it	eq
   17e80:	4296      	cmpeq	r6, r2
   17e82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17e86:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17e8a:	d202      	bcs.n	17e92 <__aeabi_ddiv+0x6e>
   17e8c:	085b      	lsrs	r3, r3, #1
   17e8e:	ea4f 0232 	mov.w	r2, r2, rrx
   17e92:	1ab6      	subs	r6, r6, r2
   17e94:	eb65 0503 	sbc.w	r5, r5, r3
   17e98:	085b      	lsrs	r3, r3, #1
   17e9a:	ea4f 0232 	mov.w	r2, r2, rrx
   17e9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17ea2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17ea6:	ebb6 0e02 	subs.w	lr, r6, r2
   17eaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   17eae:	bf22      	ittt	cs
   17eb0:	1ab6      	subcs	r6, r6, r2
   17eb2:	4675      	movcs	r5, lr
   17eb4:	ea40 000c 	orrcs.w	r0, r0, ip
   17eb8:	085b      	lsrs	r3, r3, #1
   17eba:	ea4f 0232 	mov.w	r2, r2, rrx
   17ebe:	ebb6 0e02 	subs.w	lr, r6, r2
   17ec2:	eb75 0e03 	sbcs.w	lr, r5, r3
   17ec6:	bf22      	ittt	cs
   17ec8:	1ab6      	subcs	r6, r6, r2
   17eca:	4675      	movcs	r5, lr
   17ecc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17ed0:	085b      	lsrs	r3, r3, #1
   17ed2:	ea4f 0232 	mov.w	r2, r2, rrx
   17ed6:	ebb6 0e02 	subs.w	lr, r6, r2
   17eda:	eb75 0e03 	sbcs.w	lr, r5, r3
   17ede:	bf22      	ittt	cs
   17ee0:	1ab6      	subcs	r6, r6, r2
   17ee2:	4675      	movcs	r5, lr
   17ee4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17ee8:	085b      	lsrs	r3, r3, #1
   17eea:	ea4f 0232 	mov.w	r2, r2, rrx
   17eee:	ebb6 0e02 	subs.w	lr, r6, r2
   17ef2:	eb75 0e03 	sbcs.w	lr, r5, r3
   17ef6:	bf22      	ittt	cs
   17ef8:	1ab6      	subcs	r6, r6, r2
   17efa:	4675      	movcs	r5, lr
   17efc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17f00:	ea55 0e06 	orrs.w	lr, r5, r6
   17f04:	d018      	beq.n	17f38 <__aeabi_ddiv+0x114>
   17f06:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17f0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17f0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17f12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17f16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17f1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17f1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17f22:	d1c0      	bne.n	17ea6 <__aeabi_ddiv+0x82>
   17f24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f28:	d10b      	bne.n	17f42 <__aeabi_ddiv+0x11e>
   17f2a:	ea41 0100 	orr.w	r1, r1, r0
   17f2e:	f04f 0000 	mov.w	r0, #0
   17f32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17f36:	e7b6      	b.n	17ea6 <__aeabi_ddiv+0x82>
   17f38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f3c:	bf04      	itt	eq
   17f3e:	4301      	orreq	r1, r0
   17f40:	2000      	moveq	r0, #0
   17f42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17f46:	bf88      	it	hi
   17f48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17f4c:	f63f aeaf 	bhi.w	17cae <__aeabi_dmul+0xde>
   17f50:	ebb5 0c03 	subs.w	ip, r5, r3
   17f54:	bf04      	itt	eq
   17f56:	ebb6 0c02 	subseq.w	ip, r6, r2
   17f5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17f5e:	f150 0000 	adcs.w	r0, r0, #0
   17f62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17f66:	bd70      	pop	{r4, r5, r6, pc}
   17f68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17f6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17f70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17f74:	bfc2      	ittt	gt
   17f76:	ebd4 050c 	rsbsgt	r5, r4, ip
   17f7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17f7e:	bd70      	popgt	{r4, r5, r6, pc}
   17f80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17f84:	f04f 0e00 	mov.w	lr, #0
   17f88:	3c01      	subs	r4, #1
   17f8a:	e690      	b.n	17cae <__aeabi_dmul+0xde>
   17f8c:	ea45 0e06 	orr.w	lr, r5, r6
   17f90:	e68d      	b.n	17cae <__aeabi_dmul+0xde>
   17f92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17f96:	ea94 0f0c 	teq	r4, ip
   17f9a:	bf08      	it	eq
   17f9c:	ea95 0f0c 	teqeq	r5, ip
   17fa0:	f43f af3b 	beq.w	17e1a <__aeabi_dmul+0x24a>
   17fa4:	ea94 0f0c 	teq	r4, ip
   17fa8:	d10a      	bne.n	17fc0 <__aeabi_ddiv+0x19c>
   17faa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17fae:	f47f af34 	bne.w	17e1a <__aeabi_dmul+0x24a>
   17fb2:	ea95 0f0c 	teq	r5, ip
   17fb6:	f47f af25 	bne.w	17e04 <__aeabi_dmul+0x234>
   17fba:	4610      	mov	r0, r2
   17fbc:	4619      	mov	r1, r3
   17fbe:	e72c      	b.n	17e1a <__aeabi_dmul+0x24a>
   17fc0:	ea95 0f0c 	teq	r5, ip
   17fc4:	d106      	bne.n	17fd4 <__aeabi_ddiv+0x1b0>
   17fc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17fca:	f43f aefd 	beq.w	17dc8 <__aeabi_dmul+0x1f8>
   17fce:	4610      	mov	r0, r2
   17fd0:	4619      	mov	r1, r3
   17fd2:	e722      	b.n	17e1a <__aeabi_dmul+0x24a>
   17fd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17fd8:	bf18      	it	ne
   17fda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17fde:	f47f aec5 	bne.w	17d6c <__aeabi_dmul+0x19c>
   17fe2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17fe6:	f47f af0d 	bne.w	17e04 <__aeabi_dmul+0x234>
   17fea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17fee:	f47f aeeb 	bne.w	17dc8 <__aeabi_dmul+0x1f8>
   17ff2:	e712      	b.n	17e1a <__aeabi_dmul+0x24a>

00017ff4 <__gedf2>:
   17ff4:	f04f 3cff 	mov.w	ip, #4294967295
   17ff8:	e006      	b.n	18008 <__cmpdf2+0x4>
   17ffa:	bf00      	nop

00017ffc <__ledf2>:
   17ffc:	f04f 0c01 	mov.w	ip, #1
   18000:	e002      	b.n	18008 <__cmpdf2+0x4>
   18002:	bf00      	nop

00018004 <__cmpdf2>:
   18004:	f04f 0c01 	mov.w	ip, #1
   18008:	f84d cd04 	str.w	ip, [sp, #-4]!
   1800c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18010:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18014:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18018:	bf18      	it	ne
   1801a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1801e:	d01b      	beq.n	18058 <__cmpdf2+0x54>
   18020:	b001      	add	sp, #4
   18022:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18026:	bf0c      	ite	eq
   18028:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1802c:	ea91 0f03 	teqne	r1, r3
   18030:	bf02      	ittt	eq
   18032:	ea90 0f02 	teqeq	r0, r2
   18036:	2000      	moveq	r0, #0
   18038:	4770      	bxeq	lr
   1803a:	f110 0f00 	cmn.w	r0, #0
   1803e:	ea91 0f03 	teq	r1, r3
   18042:	bf58      	it	pl
   18044:	4299      	cmppl	r1, r3
   18046:	bf08      	it	eq
   18048:	4290      	cmpeq	r0, r2
   1804a:	bf2c      	ite	cs
   1804c:	17d8      	asrcs	r0, r3, #31
   1804e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18052:	f040 0001 	orr.w	r0, r0, #1
   18056:	4770      	bx	lr
   18058:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1805c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18060:	d102      	bne.n	18068 <__cmpdf2+0x64>
   18062:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18066:	d107      	bne.n	18078 <__cmpdf2+0x74>
   18068:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1806c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18070:	d1d6      	bne.n	18020 <__cmpdf2+0x1c>
   18072:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18076:	d0d3      	beq.n	18020 <__cmpdf2+0x1c>
   18078:	f85d 0b04 	ldr.w	r0, [sp], #4
   1807c:	4770      	bx	lr
   1807e:	bf00      	nop

00018080 <__aeabi_cdrcmple>:
   18080:	4684      	mov	ip, r0
   18082:	4610      	mov	r0, r2
   18084:	4662      	mov	r2, ip
   18086:	468c      	mov	ip, r1
   18088:	4619      	mov	r1, r3
   1808a:	4663      	mov	r3, ip
   1808c:	e000      	b.n	18090 <__aeabi_cdcmpeq>
   1808e:	bf00      	nop

00018090 <__aeabi_cdcmpeq>:
   18090:	b501      	push	{r0, lr}
   18092:	f7ff ffb7 	bl	18004 <__cmpdf2>
   18096:	2800      	cmp	r0, #0
   18098:	bf48      	it	mi
   1809a:	f110 0f00 	cmnmi.w	r0, #0
   1809e:	bd01      	pop	{r0, pc}

000180a0 <__aeabi_dcmpeq>:
   180a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   180a4:	f7ff fff4 	bl	18090 <__aeabi_cdcmpeq>
   180a8:	bf0c      	ite	eq
   180aa:	2001      	moveq	r0, #1
   180ac:	2000      	movne	r0, #0
   180ae:	f85d fb08 	ldr.w	pc, [sp], #8
   180b2:	bf00      	nop

000180b4 <__aeabi_dcmplt>:
   180b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   180b8:	f7ff ffea 	bl	18090 <__aeabi_cdcmpeq>
   180bc:	bf34      	ite	cc
   180be:	2001      	movcc	r0, #1
   180c0:	2000      	movcs	r0, #0
   180c2:	f85d fb08 	ldr.w	pc, [sp], #8
   180c6:	bf00      	nop

000180c8 <__aeabi_dcmple>:
   180c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   180cc:	f7ff ffe0 	bl	18090 <__aeabi_cdcmpeq>
   180d0:	bf94      	ite	ls
   180d2:	2001      	movls	r0, #1
   180d4:	2000      	movhi	r0, #0
   180d6:	f85d fb08 	ldr.w	pc, [sp], #8
   180da:	bf00      	nop

000180dc <__aeabi_dcmpge>:
   180dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   180e0:	f7ff ffce 	bl	18080 <__aeabi_cdrcmple>
   180e4:	bf94      	ite	ls
   180e6:	2001      	movls	r0, #1
   180e8:	2000      	movhi	r0, #0
   180ea:	f85d fb08 	ldr.w	pc, [sp], #8
   180ee:	bf00      	nop

000180f0 <__aeabi_dcmpgt>:
   180f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   180f4:	f7ff ffc4 	bl	18080 <__aeabi_cdrcmple>
   180f8:	bf34      	ite	cc
   180fa:	2001      	movcc	r0, #1
   180fc:	2000      	movcs	r0, #0
   180fe:	f85d fb08 	ldr.w	pc, [sp], #8
   18102:	bf00      	nop

00018104 <__aeabi_d2iz>:
   18104:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18108:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1810c:	d215      	bcs.n	1813a <__aeabi_d2iz+0x36>
   1810e:	d511      	bpl.n	18134 <__aeabi_d2iz+0x30>
   18110:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18114:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18118:	d912      	bls.n	18140 <__aeabi_d2iz+0x3c>
   1811a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1811e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18122:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18126:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1812a:	fa23 f002 	lsr.w	r0, r3, r2
   1812e:	bf18      	it	ne
   18130:	4240      	negne	r0, r0
   18132:	4770      	bx	lr
   18134:	f04f 0000 	mov.w	r0, #0
   18138:	4770      	bx	lr
   1813a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1813e:	d105      	bne.n	1814c <__aeabi_d2iz+0x48>
   18140:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   18144:	bf08      	it	eq
   18146:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1814a:	4770      	bx	lr
   1814c:	f04f 0000 	mov.w	r0, #0
   18150:	4770      	bx	lr
   18152:	bf00      	nop

00018154 <__aeabi_d2uiz>:
   18154:	004a      	lsls	r2, r1, #1
   18156:	d211      	bcs.n	1817c <__aeabi_d2uiz+0x28>
   18158:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1815c:	d211      	bcs.n	18182 <__aeabi_d2uiz+0x2e>
   1815e:	d50d      	bpl.n	1817c <__aeabi_d2uiz+0x28>
   18160:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18164:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18168:	d40e      	bmi.n	18188 <__aeabi_d2uiz+0x34>
   1816a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1816e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18172:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18176:	fa23 f002 	lsr.w	r0, r3, r2
   1817a:	4770      	bx	lr
   1817c:	f04f 0000 	mov.w	r0, #0
   18180:	4770      	bx	lr
   18182:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18186:	d102      	bne.n	1818e <__aeabi_d2uiz+0x3a>
   18188:	f04f 30ff 	mov.w	r0, #4294967295
   1818c:	4770      	bx	lr
   1818e:	f04f 0000 	mov.w	r0, #0
   18192:	4770      	bx	lr

00018194 <__aeabi_d2f>:
   18194:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18198:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1819c:	bf24      	itt	cs
   1819e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   181a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   181a6:	d90d      	bls.n	181c4 <__aeabi_d2f+0x30>
   181a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   181ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   181b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   181b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   181b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   181bc:	bf08      	it	eq
   181be:	f020 0001 	biceq.w	r0, r0, #1
   181c2:	4770      	bx	lr
   181c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   181c8:	d121      	bne.n	1820e <__aeabi_d2f+0x7a>
   181ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   181ce:	bfbc      	itt	lt
   181d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   181d4:	4770      	bxlt	lr
   181d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   181da:	ea4f 5252 	mov.w	r2, r2, lsr #21
   181de:	f1c2 0218 	rsb	r2, r2, #24
   181e2:	f1c2 0c20 	rsb	ip, r2, #32
   181e6:	fa10 f30c 	lsls.w	r3, r0, ip
   181ea:	fa20 f002 	lsr.w	r0, r0, r2
   181ee:	bf18      	it	ne
   181f0:	f040 0001 	orrne.w	r0, r0, #1
   181f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   181f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   181fc:	fa03 fc0c 	lsl.w	ip, r3, ip
   18200:	ea40 000c 	orr.w	r0, r0, ip
   18204:	fa23 f302 	lsr.w	r3, r3, r2
   18208:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1820c:	e7cc      	b.n	181a8 <__aeabi_d2f+0x14>
   1820e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18212:	d107      	bne.n	18224 <__aeabi_d2f+0x90>
   18214:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18218:	bf1e      	ittt	ne
   1821a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1821e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18222:	4770      	bxne	lr
   18224:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18228:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1822c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18230:	4770      	bx	lr
   18232:	bf00      	nop

00018234 <__aeabi_frsub>:
   18234:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18238:	e002      	b.n	18240 <__addsf3>
   1823a:	bf00      	nop

0001823c <__aeabi_fsub>:
   1823c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018240 <__addsf3>:
   18240:	0042      	lsls	r2, r0, #1
   18242:	bf1f      	itttt	ne
   18244:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18248:	ea92 0f03 	teqne	r2, r3
   1824c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18250:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18254:	d06a      	beq.n	1832c <__addsf3+0xec>
   18256:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1825a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1825e:	bfc1      	itttt	gt
   18260:	18d2      	addgt	r2, r2, r3
   18262:	4041      	eorgt	r1, r0
   18264:	4048      	eorgt	r0, r1
   18266:	4041      	eorgt	r1, r0
   18268:	bfb8      	it	lt
   1826a:	425b      	neglt	r3, r3
   1826c:	2b19      	cmp	r3, #25
   1826e:	bf88      	it	hi
   18270:	4770      	bxhi	lr
   18272:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1827a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1827e:	bf18      	it	ne
   18280:	4240      	negne	r0, r0
   18282:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18286:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1828a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1828e:	bf18      	it	ne
   18290:	4249      	negne	r1, r1
   18292:	ea92 0f03 	teq	r2, r3
   18296:	d03f      	beq.n	18318 <__addsf3+0xd8>
   18298:	f1a2 0201 	sub.w	r2, r2, #1
   1829c:	fa41 fc03 	asr.w	ip, r1, r3
   182a0:	eb10 000c 	adds.w	r0, r0, ip
   182a4:	f1c3 0320 	rsb	r3, r3, #32
   182a8:	fa01 f103 	lsl.w	r1, r1, r3
   182ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   182b0:	d502      	bpl.n	182b8 <__addsf3+0x78>
   182b2:	4249      	negs	r1, r1
   182b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   182b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   182bc:	d313      	bcc.n	182e6 <__addsf3+0xa6>
   182be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   182c2:	d306      	bcc.n	182d2 <__addsf3+0x92>
   182c4:	0840      	lsrs	r0, r0, #1
   182c6:	ea4f 0131 	mov.w	r1, r1, rrx
   182ca:	f102 0201 	add.w	r2, r2, #1
   182ce:	2afe      	cmp	r2, #254	; 0xfe
   182d0:	d251      	bcs.n	18376 <__addsf3+0x136>
   182d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   182d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   182da:	bf08      	it	eq
   182dc:	f020 0001 	biceq.w	r0, r0, #1
   182e0:	ea40 0003 	orr.w	r0, r0, r3
   182e4:	4770      	bx	lr
   182e6:	0049      	lsls	r1, r1, #1
   182e8:	eb40 0000 	adc.w	r0, r0, r0
   182ec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   182f0:	f1a2 0201 	sub.w	r2, r2, #1
   182f4:	d1ed      	bne.n	182d2 <__addsf3+0x92>
   182f6:	fab0 fc80 	clz	ip, r0
   182fa:	f1ac 0c08 	sub.w	ip, ip, #8
   182fe:	ebb2 020c 	subs.w	r2, r2, ip
   18302:	fa00 f00c 	lsl.w	r0, r0, ip
   18306:	bfaa      	itet	ge
   18308:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1830c:	4252      	neglt	r2, r2
   1830e:	4318      	orrge	r0, r3
   18310:	bfbc      	itt	lt
   18312:	40d0      	lsrlt	r0, r2
   18314:	4318      	orrlt	r0, r3
   18316:	4770      	bx	lr
   18318:	f092 0f00 	teq	r2, #0
   1831c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18320:	bf06      	itte	eq
   18322:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18326:	3201      	addeq	r2, #1
   18328:	3b01      	subne	r3, #1
   1832a:	e7b5      	b.n	18298 <__addsf3+0x58>
   1832c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18330:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18334:	bf18      	it	ne
   18336:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1833a:	d021      	beq.n	18380 <__addsf3+0x140>
   1833c:	ea92 0f03 	teq	r2, r3
   18340:	d004      	beq.n	1834c <__addsf3+0x10c>
   18342:	f092 0f00 	teq	r2, #0
   18346:	bf08      	it	eq
   18348:	4608      	moveq	r0, r1
   1834a:	4770      	bx	lr
   1834c:	ea90 0f01 	teq	r0, r1
   18350:	bf1c      	itt	ne
   18352:	2000      	movne	r0, #0
   18354:	4770      	bxne	lr
   18356:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1835a:	d104      	bne.n	18366 <__addsf3+0x126>
   1835c:	0040      	lsls	r0, r0, #1
   1835e:	bf28      	it	cs
   18360:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18364:	4770      	bx	lr
   18366:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1836a:	bf3c      	itt	cc
   1836c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18370:	4770      	bxcc	lr
   18372:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18376:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1837a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1837e:	4770      	bx	lr
   18380:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18384:	bf16      	itet	ne
   18386:	4608      	movne	r0, r1
   18388:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1838c:	4601      	movne	r1, r0
   1838e:	0242      	lsls	r2, r0, #9
   18390:	bf06      	itte	eq
   18392:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18396:	ea90 0f01 	teqeq	r0, r1
   1839a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1839e:	4770      	bx	lr

000183a0 <__aeabi_ui2f>:
   183a0:	f04f 0300 	mov.w	r3, #0
   183a4:	e004      	b.n	183b0 <__aeabi_i2f+0x8>
   183a6:	bf00      	nop

000183a8 <__aeabi_i2f>:
   183a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   183ac:	bf48      	it	mi
   183ae:	4240      	negmi	r0, r0
   183b0:	ea5f 0c00 	movs.w	ip, r0
   183b4:	bf08      	it	eq
   183b6:	4770      	bxeq	lr
   183b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   183bc:	4601      	mov	r1, r0
   183be:	f04f 0000 	mov.w	r0, #0
   183c2:	e01c      	b.n	183fe <__aeabi_l2f+0x2a>

000183c4 <__aeabi_ul2f>:
   183c4:	ea50 0201 	orrs.w	r2, r0, r1
   183c8:	bf08      	it	eq
   183ca:	4770      	bxeq	lr
   183cc:	f04f 0300 	mov.w	r3, #0
   183d0:	e00a      	b.n	183e8 <__aeabi_l2f+0x14>
   183d2:	bf00      	nop

000183d4 <__aeabi_l2f>:
   183d4:	ea50 0201 	orrs.w	r2, r0, r1
   183d8:	bf08      	it	eq
   183da:	4770      	bxeq	lr
   183dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   183e0:	d502      	bpl.n	183e8 <__aeabi_l2f+0x14>
   183e2:	4240      	negs	r0, r0
   183e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   183e8:	ea5f 0c01 	movs.w	ip, r1
   183ec:	bf02      	ittt	eq
   183ee:	4684      	moveq	ip, r0
   183f0:	4601      	moveq	r1, r0
   183f2:	2000      	moveq	r0, #0
   183f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   183f8:	bf08      	it	eq
   183fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   183fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18402:	fabc f28c 	clz	r2, ip
   18406:	3a08      	subs	r2, #8
   18408:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1840c:	db10      	blt.n	18430 <__aeabi_l2f+0x5c>
   1840e:	fa01 fc02 	lsl.w	ip, r1, r2
   18412:	4463      	add	r3, ip
   18414:	fa00 fc02 	lsl.w	ip, r0, r2
   18418:	f1c2 0220 	rsb	r2, r2, #32
   1841c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18420:	fa20 f202 	lsr.w	r2, r0, r2
   18424:	eb43 0002 	adc.w	r0, r3, r2
   18428:	bf08      	it	eq
   1842a:	f020 0001 	biceq.w	r0, r0, #1
   1842e:	4770      	bx	lr
   18430:	f102 0220 	add.w	r2, r2, #32
   18434:	fa01 fc02 	lsl.w	ip, r1, r2
   18438:	f1c2 0220 	rsb	r2, r2, #32
   1843c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18440:	fa21 f202 	lsr.w	r2, r1, r2
   18444:	eb43 0002 	adc.w	r0, r3, r2
   18448:	bf08      	it	eq
   1844a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1844e:	4770      	bx	lr

00018450 <__aeabi_fmul>:
   18450:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18458:	bf1e      	ittt	ne
   1845a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1845e:	ea92 0f0c 	teqne	r2, ip
   18462:	ea93 0f0c 	teqne	r3, ip
   18466:	d06f      	beq.n	18548 <__aeabi_fmul+0xf8>
   18468:	441a      	add	r2, r3
   1846a:	ea80 0c01 	eor.w	ip, r0, r1
   1846e:	0240      	lsls	r0, r0, #9
   18470:	bf18      	it	ne
   18472:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18476:	d01e      	beq.n	184b6 <__aeabi_fmul+0x66>
   18478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1847c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18480:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18484:	fba0 3101 	umull	r3, r1, r0, r1
   18488:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1848c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18490:	bf3e      	ittt	cc
   18492:	0049      	lslcc	r1, r1, #1
   18494:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18498:	005b      	lslcc	r3, r3, #1
   1849a:	ea40 0001 	orr.w	r0, r0, r1
   1849e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   184a2:	2afd      	cmp	r2, #253	; 0xfd
   184a4:	d81d      	bhi.n	184e2 <__aeabi_fmul+0x92>
   184a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   184aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   184ae:	bf08      	it	eq
   184b0:	f020 0001 	biceq.w	r0, r0, #1
   184b4:	4770      	bx	lr
   184b6:	f090 0f00 	teq	r0, #0
   184ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   184be:	bf08      	it	eq
   184c0:	0249      	lsleq	r1, r1, #9
   184c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   184c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   184ca:	3a7f      	subs	r2, #127	; 0x7f
   184cc:	bfc2      	ittt	gt
   184ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   184d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   184d6:	4770      	bxgt	lr
   184d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   184dc:	f04f 0300 	mov.w	r3, #0
   184e0:	3a01      	subs	r2, #1
   184e2:	dc5d      	bgt.n	185a0 <__aeabi_fmul+0x150>
   184e4:	f112 0f19 	cmn.w	r2, #25
   184e8:	bfdc      	itt	le
   184ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   184ee:	4770      	bxle	lr
   184f0:	f1c2 0200 	rsb	r2, r2, #0
   184f4:	0041      	lsls	r1, r0, #1
   184f6:	fa21 f102 	lsr.w	r1, r1, r2
   184fa:	f1c2 0220 	rsb	r2, r2, #32
   184fe:	fa00 fc02 	lsl.w	ip, r0, r2
   18502:	ea5f 0031 	movs.w	r0, r1, rrx
   18506:	f140 0000 	adc.w	r0, r0, #0
   1850a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1850e:	bf08      	it	eq
   18510:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18514:	4770      	bx	lr
   18516:	f092 0f00 	teq	r2, #0
   1851a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1851e:	bf02      	ittt	eq
   18520:	0040      	lsleq	r0, r0, #1
   18522:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18526:	3a01      	subeq	r2, #1
   18528:	d0f9      	beq.n	1851e <__aeabi_fmul+0xce>
   1852a:	ea40 000c 	orr.w	r0, r0, ip
   1852e:	f093 0f00 	teq	r3, #0
   18532:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18536:	bf02      	ittt	eq
   18538:	0049      	lsleq	r1, r1, #1
   1853a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1853e:	3b01      	subeq	r3, #1
   18540:	d0f9      	beq.n	18536 <__aeabi_fmul+0xe6>
   18542:	ea41 010c 	orr.w	r1, r1, ip
   18546:	e78f      	b.n	18468 <__aeabi_fmul+0x18>
   18548:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1854c:	ea92 0f0c 	teq	r2, ip
   18550:	bf18      	it	ne
   18552:	ea93 0f0c 	teqne	r3, ip
   18556:	d00a      	beq.n	1856e <__aeabi_fmul+0x11e>
   18558:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1855c:	bf18      	it	ne
   1855e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18562:	d1d8      	bne.n	18516 <__aeabi_fmul+0xc6>
   18564:	ea80 0001 	eor.w	r0, r0, r1
   18568:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1856c:	4770      	bx	lr
   1856e:	f090 0f00 	teq	r0, #0
   18572:	bf17      	itett	ne
   18574:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18578:	4608      	moveq	r0, r1
   1857a:	f091 0f00 	teqne	r1, #0
   1857e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   18582:	d014      	beq.n	185ae <__aeabi_fmul+0x15e>
   18584:	ea92 0f0c 	teq	r2, ip
   18588:	d101      	bne.n	1858e <__aeabi_fmul+0x13e>
   1858a:	0242      	lsls	r2, r0, #9
   1858c:	d10f      	bne.n	185ae <__aeabi_fmul+0x15e>
   1858e:	ea93 0f0c 	teq	r3, ip
   18592:	d103      	bne.n	1859c <__aeabi_fmul+0x14c>
   18594:	024b      	lsls	r3, r1, #9
   18596:	bf18      	it	ne
   18598:	4608      	movne	r0, r1
   1859a:	d108      	bne.n	185ae <__aeabi_fmul+0x15e>
   1859c:	ea80 0001 	eor.w	r0, r0, r1
   185a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   185a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   185a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   185ac:	4770      	bx	lr
   185ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   185b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   185b6:	4770      	bx	lr

000185b8 <__aeabi_fdiv>:
   185b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   185bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   185c0:	bf1e      	ittt	ne
   185c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   185c6:	ea92 0f0c 	teqne	r2, ip
   185ca:	ea93 0f0c 	teqne	r3, ip
   185ce:	d069      	beq.n	186a4 <__aeabi_fdiv+0xec>
   185d0:	eba2 0203 	sub.w	r2, r2, r3
   185d4:	ea80 0c01 	eor.w	ip, r0, r1
   185d8:	0249      	lsls	r1, r1, #9
   185da:	ea4f 2040 	mov.w	r0, r0, lsl #9
   185de:	d037      	beq.n	18650 <__aeabi_fdiv+0x98>
   185e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   185e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   185e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   185ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   185f0:	428b      	cmp	r3, r1
   185f2:	bf38      	it	cc
   185f4:	005b      	lslcc	r3, r3, #1
   185f6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   185fa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   185fe:	428b      	cmp	r3, r1
   18600:	bf24      	itt	cs
   18602:	1a5b      	subcs	r3, r3, r1
   18604:	ea40 000c 	orrcs.w	r0, r0, ip
   18608:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1860c:	bf24      	itt	cs
   1860e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   18612:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18616:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1861a:	bf24      	itt	cs
   1861c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18624:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18628:	bf24      	itt	cs
   1862a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1862e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18632:	011b      	lsls	r3, r3, #4
   18634:	bf18      	it	ne
   18636:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1863a:	d1e0      	bne.n	185fe <__aeabi_fdiv+0x46>
   1863c:	2afd      	cmp	r2, #253	; 0xfd
   1863e:	f63f af50 	bhi.w	184e2 <__aeabi_fmul+0x92>
   18642:	428b      	cmp	r3, r1
   18644:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18648:	bf08      	it	eq
   1864a:	f020 0001 	biceq.w	r0, r0, #1
   1864e:	4770      	bx	lr
   18650:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18654:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18658:	327f      	adds	r2, #127	; 0x7f
   1865a:	bfc2      	ittt	gt
   1865c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18660:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18664:	4770      	bxgt	lr
   18666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1866a:	f04f 0300 	mov.w	r3, #0
   1866e:	3a01      	subs	r2, #1
   18670:	e737      	b.n	184e2 <__aeabi_fmul+0x92>
   18672:	f092 0f00 	teq	r2, #0
   18676:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1867a:	bf02      	ittt	eq
   1867c:	0040      	lsleq	r0, r0, #1
   1867e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18682:	3a01      	subeq	r2, #1
   18684:	d0f9      	beq.n	1867a <__aeabi_fdiv+0xc2>
   18686:	ea40 000c 	orr.w	r0, r0, ip
   1868a:	f093 0f00 	teq	r3, #0
   1868e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18692:	bf02      	ittt	eq
   18694:	0049      	lsleq	r1, r1, #1
   18696:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1869a:	3b01      	subeq	r3, #1
   1869c:	d0f9      	beq.n	18692 <__aeabi_fdiv+0xda>
   1869e:	ea41 010c 	orr.w	r1, r1, ip
   186a2:	e795      	b.n	185d0 <__aeabi_fdiv+0x18>
   186a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   186a8:	ea92 0f0c 	teq	r2, ip
   186ac:	d108      	bne.n	186c0 <__aeabi_fdiv+0x108>
   186ae:	0242      	lsls	r2, r0, #9
   186b0:	f47f af7d 	bne.w	185ae <__aeabi_fmul+0x15e>
   186b4:	ea93 0f0c 	teq	r3, ip
   186b8:	f47f af70 	bne.w	1859c <__aeabi_fmul+0x14c>
   186bc:	4608      	mov	r0, r1
   186be:	e776      	b.n	185ae <__aeabi_fmul+0x15e>
   186c0:	ea93 0f0c 	teq	r3, ip
   186c4:	d104      	bne.n	186d0 <__aeabi_fdiv+0x118>
   186c6:	024b      	lsls	r3, r1, #9
   186c8:	f43f af4c 	beq.w	18564 <__aeabi_fmul+0x114>
   186cc:	4608      	mov	r0, r1
   186ce:	e76e      	b.n	185ae <__aeabi_fmul+0x15e>
   186d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   186d4:	bf18      	it	ne
   186d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   186da:	d1ca      	bne.n	18672 <__aeabi_fdiv+0xba>
   186dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   186e0:	f47f af5c 	bne.w	1859c <__aeabi_fmul+0x14c>
   186e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   186e8:	f47f af3c 	bne.w	18564 <__aeabi_fmul+0x114>
   186ec:	e75f      	b.n	185ae <__aeabi_fmul+0x15e>
   186ee:	bf00      	nop

000186f0 <__gesf2>:
   186f0:	f04f 3cff 	mov.w	ip, #4294967295
   186f4:	e006      	b.n	18704 <__cmpsf2+0x4>
   186f6:	bf00      	nop

000186f8 <__lesf2>:
   186f8:	f04f 0c01 	mov.w	ip, #1
   186fc:	e002      	b.n	18704 <__cmpsf2+0x4>
   186fe:	bf00      	nop

00018700 <__cmpsf2>:
   18700:	f04f 0c01 	mov.w	ip, #1
   18704:	f84d cd04 	str.w	ip, [sp, #-4]!
   18708:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1870c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18714:	bf18      	it	ne
   18716:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1871a:	d011      	beq.n	18740 <__cmpsf2+0x40>
   1871c:	b001      	add	sp, #4
   1871e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   18722:	bf18      	it	ne
   18724:	ea90 0f01 	teqne	r0, r1
   18728:	bf58      	it	pl
   1872a:	ebb2 0003 	subspl.w	r0, r2, r3
   1872e:	bf88      	it	hi
   18730:	17c8      	asrhi	r0, r1, #31
   18732:	bf38      	it	cc
   18734:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18738:	bf18      	it	ne
   1873a:	f040 0001 	orrne.w	r0, r0, #1
   1873e:	4770      	bx	lr
   18740:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18744:	d102      	bne.n	1874c <__cmpsf2+0x4c>
   18746:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1874a:	d105      	bne.n	18758 <__cmpsf2+0x58>
   1874c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18750:	d1e4      	bne.n	1871c <__cmpsf2+0x1c>
   18752:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   18756:	d0e1      	beq.n	1871c <__cmpsf2+0x1c>
   18758:	f85d 0b04 	ldr.w	r0, [sp], #4
   1875c:	4770      	bx	lr
   1875e:	bf00      	nop

00018760 <__aeabi_cfrcmple>:
   18760:	4684      	mov	ip, r0
   18762:	4608      	mov	r0, r1
   18764:	4661      	mov	r1, ip
   18766:	e7ff      	b.n	18768 <__aeabi_cfcmpeq>

00018768 <__aeabi_cfcmpeq>:
   18768:	b50f      	push	{r0, r1, r2, r3, lr}
   1876a:	f7ff ffc9 	bl	18700 <__cmpsf2>
   1876e:	2800      	cmp	r0, #0
   18770:	bf48      	it	mi
   18772:	f110 0f00 	cmnmi.w	r0, #0
   18776:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018778 <__aeabi_fcmpeq>:
   18778:	f84d ed08 	str.w	lr, [sp, #-8]!
   1877c:	f7ff fff4 	bl	18768 <__aeabi_cfcmpeq>
   18780:	bf0c      	ite	eq
   18782:	2001      	moveq	r0, #1
   18784:	2000      	movne	r0, #0
   18786:	f85d fb08 	ldr.w	pc, [sp], #8
   1878a:	bf00      	nop

0001878c <__aeabi_fcmplt>:
   1878c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18790:	f7ff ffea 	bl	18768 <__aeabi_cfcmpeq>
   18794:	bf34      	ite	cc
   18796:	2001      	movcc	r0, #1
   18798:	2000      	movcs	r0, #0
   1879a:	f85d fb08 	ldr.w	pc, [sp], #8
   1879e:	bf00      	nop

000187a0 <__aeabi_fcmple>:
   187a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   187a4:	f7ff ffe0 	bl	18768 <__aeabi_cfcmpeq>
   187a8:	bf94      	ite	ls
   187aa:	2001      	movls	r0, #1
   187ac:	2000      	movhi	r0, #0
   187ae:	f85d fb08 	ldr.w	pc, [sp], #8
   187b2:	bf00      	nop

000187b4 <__aeabi_fcmpge>:
   187b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   187b8:	f7ff ffd2 	bl	18760 <__aeabi_cfrcmple>
   187bc:	bf94      	ite	ls
   187be:	2001      	movls	r0, #1
   187c0:	2000      	movhi	r0, #0
   187c2:	f85d fb08 	ldr.w	pc, [sp], #8
   187c6:	bf00      	nop

000187c8 <__aeabi_fcmpgt>:
   187c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   187cc:	f7ff ffc8 	bl	18760 <__aeabi_cfrcmple>
   187d0:	bf34      	ite	cc
   187d2:	2001      	movcc	r0, #1
   187d4:	2000      	movcs	r0, #0
   187d6:	f85d fb08 	ldr.w	pc, [sp], #8
   187da:	bf00      	nop

000187dc <__aeabi_f2iz>:
   187dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   187e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   187e4:	d30f      	bcc.n	18806 <__aeabi_f2iz+0x2a>
   187e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   187ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   187ee:	d90d      	bls.n	1880c <__aeabi_f2iz+0x30>
   187f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   187f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   187f8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   187fc:	fa23 f002 	lsr.w	r0, r3, r2
   18800:	bf18      	it	ne
   18802:	4240      	negne	r0, r0
   18804:	4770      	bx	lr
   18806:	f04f 0000 	mov.w	r0, #0
   1880a:	4770      	bx	lr
   1880c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   18810:	d101      	bne.n	18816 <__aeabi_f2iz+0x3a>
   18812:	0242      	lsls	r2, r0, #9
   18814:	d105      	bne.n	18822 <__aeabi_f2iz+0x46>
   18816:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1881a:	bf08      	it	eq
   1881c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18820:	4770      	bx	lr
   18822:	f04f 0000 	mov.w	r0, #0
   18826:	4770      	bx	lr

00018828 <memcpy>:
   18828:	2a0f      	cmp	r2, #15
   1882a:	b4f0      	push	{r4, r5, r6, r7}
   1882c:	d945      	bls.n	188ba <memcpy+0x92>
   1882e:	ea40 0301 	orr.w	r3, r0, r1
   18832:	079b      	lsls	r3, r3, #30
   18834:	d145      	bne.n	188c2 <memcpy+0x9a>
   18836:	f1a2 0710 	sub.w	r7, r2, #16
   1883a:	460c      	mov	r4, r1
   1883c:	4603      	mov	r3, r0
   1883e:	093f      	lsrs	r7, r7, #4
   18840:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   18844:	3610      	adds	r6, #16
   18846:	6825      	ldr	r5, [r4, #0]
   18848:	3310      	adds	r3, #16
   1884a:	3410      	adds	r4, #16
   1884c:	f843 5c10 	str.w	r5, [r3, #-16]
   18850:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   18854:	f843 5c0c 	str.w	r5, [r3, #-12]
   18858:	f854 5c08 	ldr.w	r5, [r4, #-8]
   1885c:	f843 5c08 	str.w	r5, [r3, #-8]
   18860:	f854 5c04 	ldr.w	r5, [r4, #-4]
   18864:	f843 5c04 	str.w	r5, [r3, #-4]
   18868:	42b3      	cmp	r3, r6
   1886a:	d1ec      	bne.n	18846 <memcpy+0x1e>
   1886c:	1c7b      	adds	r3, r7, #1
   1886e:	f002 0c0f 	and.w	ip, r2, #15
   18872:	f1bc 0f03 	cmp.w	ip, #3
   18876:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1887a:	4419      	add	r1, r3
   1887c:	4403      	add	r3, r0
   1887e:	d922      	bls.n	188c6 <memcpy+0x9e>
   18880:	460e      	mov	r6, r1
   18882:	461d      	mov	r5, r3
   18884:	4664      	mov	r4, ip
   18886:	f856 7b04 	ldr.w	r7, [r6], #4
   1888a:	3c04      	subs	r4, #4
   1888c:	2c03      	cmp	r4, #3
   1888e:	f845 7b04 	str.w	r7, [r5], #4
   18892:	d8f8      	bhi.n	18886 <memcpy+0x5e>
   18894:	f1ac 0404 	sub.w	r4, ip, #4
   18898:	f002 0203 	and.w	r2, r2, #3
   1889c:	f024 0403 	bic.w	r4, r4, #3
   188a0:	3404      	adds	r4, #4
   188a2:	4423      	add	r3, r4
   188a4:	4421      	add	r1, r4
   188a6:	b132      	cbz	r2, 188b6 <memcpy+0x8e>
   188a8:	440a      	add	r2, r1
   188aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   188ae:	4291      	cmp	r1, r2
   188b0:	f803 4b01 	strb.w	r4, [r3], #1
   188b4:	d1f9      	bne.n	188aa <memcpy+0x82>
   188b6:	bcf0      	pop	{r4, r5, r6, r7}
   188b8:	4770      	bx	lr
   188ba:	4603      	mov	r3, r0
   188bc:	2a00      	cmp	r2, #0
   188be:	d1f3      	bne.n	188a8 <memcpy+0x80>
   188c0:	e7f9      	b.n	188b6 <memcpy+0x8e>
   188c2:	4603      	mov	r3, r0
   188c4:	e7f0      	b.n	188a8 <memcpy+0x80>
   188c6:	4662      	mov	r2, ip
   188c8:	2a00      	cmp	r2, #0
   188ca:	d1ed      	bne.n	188a8 <memcpy+0x80>
   188cc:	e7f3      	b.n	188b6 <memcpy+0x8e>
   188ce:	bf00      	nop

000188d0 <memset>:
   188d0:	0783      	lsls	r3, r0, #30
   188d2:	b4f0      	push	{r4, r5, r6, r7}
   188d4:	d048      	beq.n	18968 <memset+0x98>
   188d6:	1e54      	subs	r4, r2, #1
   188d8:	2a00      	cmp	r2, #0
   188da:	d043      	beq.n	18964 <memset+0x94>
   188dc:	b2cd      	uxtb	r5, r1
   188de:	4603      	mov	r3, r0
   188e0:	e002      	b.n	188e8 <memset+0x18>
   188e2:	2c00      	cmp	r4, #0
   188e4:	d03e      	beq.n	18964 <memset+0x94>
   188e6:	4614      	mov	r4, r2
   188e8:	f803 5b01 	strb.w	r5, [r3], #1
   188ec:	f013 0f03 	tst.w	r3, #3
   188f0:	f104 32ff 	add.w	r2, r4, #4294967295
   188f4:	d1f5      	bne.n	188e2 <memset+0x12>
   188f6:	2c03      	cmp	r4, #3
   188f8:	d92d      	bls.n	18956 <memset+0x86>
   188fa:	b2cd      	uxtb	r5, r1
   188fc:	2c0f      	cmp	r4, #15
   188fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   18902:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   18906:	d918      	bls.n	1893a <memset+0x6a>
   18908:	f1a4 0710 	sub.w	r7, r4, #16
   1890c:	f103 0610 	add.w	r6, r3, #16
   18910:	461a      	mov	r2, r3
   18912:	093f      	lsrs	r7, r7, #4
   18914:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   18918:	6015      	str	r5, [r2, #0]
   1891a:	3210      	adds	r2, #16
   1891c:	f842 5c0c 	str.w	r5, [r2, #-12]
   18920:	f842 5c08 	str.w	r5, [r2, #-8]
   18924:	f842 5c04 	str.w	r5, [r2, #-4]
   18928:	42b2      	cmp	r2, r6
   1892a:	d1f5      	bne.n	18918 <memset+0x48>
   1892c:	f004 040f 	and.w	r4, r4, #15
   18930:	3701      	adds	r7, #1
   18932:	2c03      	cmp	r4, #3
   18934:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18938:	d90d      	bls.n	18956 <memset+0x86>
   1893a:	461e      	mov	r6, r3
   1893c:	4622      	mov	r2, r4
   1893e:	3a04      	subs	r2, #4
   18940:	f846 5b04 	str.w	r5, [r6], #4
   18944:	2a03      	cmp	r2, #3
   18946:	d8fa      	bhi.n	1893e <memset+0x6e>
   18948:	1f22      	subs	r2, r4, #4
   1894a:	f004 0403 	and.w	r4, r4, #3
   1894e:	f022 0203 	bic.w	r2, r2, #3
   18952:	3204      	adds	r2, #4
   18954:	4413      	add	r3, r2
   18956:	b12c      	cbz	r4, 18964 <memset+0x94>
   18958:	b2c9      	uxtb	r1, r1
   1895a:	441c      	add	r4, r3
   1895c:	f803 1b01 	strb.w	r1, [r3], #1
   18960:	42a3      	cmp	r3, r4
   18962:	d1fb      	bne.n	1895c <memset+0x8c>
   18964:	bcf0      	pop	{r4, r5, r6, r7}
   18966:	4770      	bx	lr
   18968:	4614      	mov	r4, r2
   1896a:	4603      	mov	r3, r0
   1896c:	e7c3      	b.n	188f6 <memset+0x26>
   1896e:	bf00      	nop

00018970 <strncpy>:
   18970:	ea40 0301 	orr.w	r3, r0, r1
   18974:	079b      	lsls	r3, r3, #30
   18976:	b470      	push	{r4, r5, r6}
   18978:	d12b      	bne.n	189d2 <strncpy+0x62>
   1897a:	2a03      	cmp	r2, #3
   1897c:	bf84      	itt	hi
   1897e:	460b      	movhi	r3, r1
   18980:	4605      	movhi	r5, r0
   18982:	d926      	bls.n	189d2 <strncpy+0x62>
   18984:	4619      	mov	r1, r3
   18986:	f853 4b04 	ldr.w	r4, [r3], #4
   1898a:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1898e:	ea26 0604 	bic.w	r6, r6, r4
   18992:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18996:	d105      	bne.n	189a4 <strncpy+0x34>
   18998:	3a04      	subs	r2, #4
   1899a:	f845 4b04 	str.w	r4, [r5], #4
   1899e:	2a03      	cmp	r2, #3
   189a0:	4619      	mov	r1, r3
   189a2:	d8ef      	bhi.n	18984 <strncpy+0x14>
   189a4:	b19a      	cbz	r2, 189ce <strncpy+0x5e>
   189a6:	780c      	ldrb	r4, [r1, #0]
   189a8:	3a01      	subs	r2, #1
   189aa:	1c6b      	adds	r3, r5, #1
   189ac:	702c      	strb	r4, [r5, #0]
   189ae:	b13c      	cbz	r4, 189c0 <strncpy+0x50>
   189b0:	b16a      	cbz	r2, 189ce <strncpy+0x5e>
   189b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   189b6:	3a01      	subs	r2, #1
   189b8:	f803 4b01 	strb.w	r4, [r3], #1
   189bc:	2c00      	cmp	r4, #0
   189be:	d1f7      	bne.n	189b0 <strncpy+0x40>
   189c0:	b12a      	cbz	r2, 189ce <strncpy+0x5e>
   189c2:	441a      	add	r2, r3
   189c4:	2100      	movs	r1, #0
   189c6:	f803 1b01 	strb.w	r1, [r3], #1
   189ca:	4293      	cmp	r3, r2
   189cc:	d1fb      	bne.n	189c6 <strncpy+0x56>
   189ce:	bc70      	pop	{r4, r5, r6}
   189d0:	4770      	bx	lr
   189d2:	4605      	mov	r5, r0
   189d4:	e7e6      	b.n	189a4 <strncpy+0x34>
   189d6:	bf00      	nop

000189d8 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   189d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   189da:	e003      	b.n	189e4 <LoopCopyDataInit>

000189dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   189dc:	4b0a      	ldr	r3, [pc, #40]	; (18a08 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   189de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   189e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   189e2:	3104      	adds	r1, #4

000189e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   189e4:	4809      	ldr	r0, [pc, #36]	; (18a0c <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   189e6:	4b0a      	ldr	r3, [pc, #40]	; (18a10 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   189e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   189ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   189ec:	d3f6      	bcc.n	189dc <CopyDataInit>
	ldr	r2, =_sbss
   189ee:	4a09      	ldr	r2, [pc, #36]	; (18a14 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   189f0:	e002      	b.n	189f8 <LoopFillZerobss>

000189f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   189f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
   189f4:	f842 3b04 	str.w	r3, [r2], #4

000189f8 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   189f8:	4b07      	ldr	r3, [pc, #28]	; (18a18 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   189fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
   189fc:	d3f9      	bcc.n	189f2 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   189fe:	f7e7 fc9d 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18a02:	f7fe fe85 	bl	17710 <main>
	bx	lr    
   18a06:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18a08:	00018b08 	.word	0x00018b08
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18a0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18a10:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18a14:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18a18:	2004cba4 	.word	0x2004cba4

00018a1c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18a1c:	e7fe      	b.n	18a1c <ADC1_2_IRQHandler>
   18a1e:	0000      	movs	r0, r0
   18a20:	75746341 	.word	0x75746341
   18a24:	726f7461 	.word	0x726f7461
   18a28:	00000d0a 	.word	0x00000d0a
   18a2c:	454c4449 	.word	0x454c4449
   18a30:	00000000 	.word	0x00000000

00018a34 <ulKernelPriority>:
   18a34:	0000007f                                ....

00018a38 <heapSTRUCT_SIZE>:
   18a38:	00010010                                         ..

00018a3a <version>:
   18a3a:	3d5a0001                                         ..

00018a3c <utm_east0>:
   18a3c:	00093d5a                                Z=..

00018a40 <utm_north0>:
   18a40:	005875e6                                .uX.

00018a44 <climb_pgain>:
   18a44:	bcf5c28f                                ....

00018a48 <climb_igain>:
   18a48:	3dcccccd                                ...=

00018a4c <level_gaz>:
   18a4c:	3e9eb852                                R..>

00018a50 <nav_east0>:
   18a50:	00093d5a                                Z=..

00018a54 <nav_north0>:
   18a54:	005875e6                                .uX.

00018a58 <nb_waypoint>:
   18a58:	00000007 33323130 37363534 42413938     ....0123456789AB
   18a68:	46454443                                CDEF

00018a6c <failsafe>:
	...
   18a80:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18a90:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18aa0:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18ab0:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18ac0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18ad0:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18ae0:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18af0:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18b00:	6e617672 00000074                       rvant...
