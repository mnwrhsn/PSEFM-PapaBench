
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 61 8a 01 00 a5 8a 01 00 a5 8a 01 00     .P. a...........
      10:	a5 8a 01 00 a5 8a 01 00 a5 8a 01 00 00 00 00 00     ................
	...
      2c:	bd 5c 00 00 a5 8a 01 00 00 00 00 00 c9 5d 00 00     .\...........]..
      3c:	05 5e 00 00 a5 8a 01 00 a5 8a 01 00 a5 8a 01 00     .^..............
      4c:	a5 8a 01 00 a5 8a 01 00 a5 8a 01 00 a5 8a 01 00     ................
      5c:	a5 8a 01 00 a5 8a 01 00 a5 8a 01 00 a5 8a 01 00     ................
      6c:	a5 8a 01 00 a5 8a 01 00 a5 8a 01 00 a5 8a 01 00     ................
      7c:	a5 8a 01 00 a5 8a 01 00 a5 8a 01 00 a5 8a 01 00     ................
      8c:	a5 8a 01 00 a5 8a 01 00 a5 8a 01 00 a5 8a 01 00     ................
      9c:	a5 8a 01 00 a5 8a 01 00 a5 8a 01 00 a5 8a 01 00     ................
      ac:	a5 8a 01 00 a5 8a 01 00 a5 8a 01 00 a5 8a 01 00     ................
      bc:	a5 8a 01 00 a5 8a 01 00 a5 8a 01 00 a5 8a 01 00     ................
      cc:	a5 8a 01 00 a5 8a 01 00 a5 8a 01 00 a5 8a 01 00     ................
      dc:	a5 8a 01 00 a5 8a 01 00 a5 8a 01 00 a5 8a 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018b90 	.word	0x00018b90
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cdd4 	.word	0x2004cdd4

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fd2d 	bl	5e58 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fe6c 	bl	4128 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fe67 	bl	4128 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe47 	bl	4140 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fe86 	bl	4200 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe30 	bl	4190 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe20 	bl	4190 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fe13 	bl	4190 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe34 	bl	4200 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe2b 	bl	4200 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fdaa 	bl	4140 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fe79 	bl	52fc <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fd9e 	bl	4200 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fd95 	bl	4200 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fd10 	bl	4140 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc47 	bl	40e8 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc3b 	bl	40e8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc35 	bl	40e8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc2f 	bl	40e8 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fc99 	bl	4200 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc30 	bl	4140 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag * xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f833 	bl	2994 <xEventGetpxDestination>
    292e:	6078      	str	r0, [r7, #4]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	4618      	mov	r0, r3
    293e:	f000 f835 	bl	29ac <xEventGetxTag>
    2942:	6038      	str	r0, [r7, #0]
        if( xTaskGetTickCount() >= xTag->xTimestamp )
    2944:	f002 fcda 	bl	52fc <xTaskGetTickCount>
    2948:	4602      	mov	r2, r0
    294a:	683b      	ldr	r3, [r7, #0]
    294c:	685b      	ldr	r3, [r3, #4]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f640 120c 	movw	r2, #2316	; 0x90c
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6879      	ldr	r1, [r7, #4]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3708      	adds	r7, #8
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	681b      	ldr	r3, [r3, #0]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	685b      	ldr	r3, [r3, #4]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetxTag>:

struct tag * xEventGetxTag( xEventHandle pxEvent)
{
    29ac:	b480      	push	{r7}
    29ae:	b083      	sub	sp, #12
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    return (struct tag *)&((eveECB *) pxEvent)->xTag;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	3308      	adds	r3, #8
}
    29b8:	4618      	mov	r0, r3
    29ba:	370c      	adds	r7, #12
    29bc:	46bd      	mov	sp, r7
    29be:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c2:	4770      	bx	lr

000029c4 <xEventGetxData>:

struct eventData * xEventGetxData( xEventHandle pxEvent)
{
    29c4:	b480      	push	{r7}
    29c6:	b083      	sub	sp, #12
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
    return (struct eventData *)&((eveECB *) pxEvent)->xData;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	3318      	adds	r3, #24
}
    29d0:	4618      	mov	r0, r3
    29d2:	370c      	adds	r7, #12
    29d4:	46bd      	mov	sp, r7
    29d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29da:	4770      	bx	lr

000029dc <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29dc:	b580      	push	{r7, lr}
    29de:	b082      	sub	sp, #8
    29e0:	af00      	add	r7, sp, #0
    29e2:	6078      	str	r0, [r7, #4]
    29e4:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	683a      	ldr	r2, [r7, #0]
    29ea:	fbb3 f2f2 	udiv	r2, r3, r2
    29ee:	6839      	ldr	r1, [r7, #0]
    29f0:	fb01 f202 	mul.w	r2, r1, r2
    29f4:	1a9b      	subs	r3, r3, r2
    29f6:	2b00      	cmp	r3, #0
    29f8:	d00d      	beq.n	2a16 <getGCD+0x3a>
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	683a      	ldr	r2, [r7, #0]
    29fe:	fbb3 f2f2 	udiv	r2, r3, r2
    2a02:	6839      	ldr	r1, [r7, #0]
    2a04:	fb01 f202 	mul.w	r2, r1, r2
    2a08:	1a9b      	subs	r3, r3, r2
    2a0a:	6838      	ldr	r0, [r7, #0]
    2a0c:	4619      	mov	r1, r3
    2a0e:	f7ff ffe5 	bl	29dc <getGCD>
    2a12:	4603      	mov	r3, r0
    2a14:	e000      	b.n	2a18 <getGCD+0x3c>
    2a16:	683b      	ldr	r3, [r7, #0]
}
    2a18:	4618      	mov	r0, r3
    2a1a:	3708      	adds	r7, #8
    2a1c:	46bd      	mov	sp, r7
    2a1e:	bd80      	pop	{r7, pc}

00002a20 <GCDOfTaskPeriod>:

static portTickType GCDOfTaskPeriod()
{
    2a20:	b580      	push	{r7, lr}
    2a22:	b082      	sub	sp, #8
    2a24:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a26:	f240 0328 	movw	r3, #40	; 0x28
    2a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a32:	2301      	movs	r3, #1
    2a34:	607b      	str	r3, [r7, #4]
    2a36:	e00f      	b.n	2a58 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a38:	f240 0328 	movw	r3, #40	; 0x28
    2a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a40:	687a      	ldr	r2, [r7, #4]
    2a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a46:	6838      	ldr	r0, [r7, #0]
    2a48:	4619      	mov	r1, r3
    2a4a:	f7ff ffc7 	bl	29dc <getGCD>
    2a4e:	4603      	mov	r3, r0
    2a50:	603b      	str	r3, [r7, #0]
static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	3301      	adds	r3, #1
    2a56:	607b      	str	r3, [r7, #4]
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	2b0c      	cmp	r3, #12
    2a5c:	ddec      	ble.n	2a38 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a5e:	683b      	ldr	r3, [r7, #0]
}
    2a60:	4618      	mov	r0, r3
    2a62:	3708      	adds	r7, #8
    2a64:	46bd      	mov	sp, r7
    2a66:	bd80      	pop	{r7, pc}

00002a68 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a68:	b590      	push	{r4, r7, lr}
    2a6a:	b091      	sub	sp, #68	; 0x44
    2a6c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a6e:	f7ff ffd7 	bl	2a20 <GCDOfTaskPeriod>
    2a72:	4602      	mov	r2, r0
    2a74:	f240 6358 	movw	r3, #1624	; 0x658
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a7e:	f640 0094 	movw	r0, #2196	; 0x894
    2a82:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a86:	f001 fb2f 	bl	40e8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2a8a:	f640 00a8 	movw	r0, #2216	; 0x8a8
    2a8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a92:	f001 fb29 	bl	40e8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2a96:	f640 00bc 	movw	r0, #2236	; 0x8bc
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fb23 	bl	40e8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aa2:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fb1d 	bl	40e8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2aae:	f640 00e4 	movw	r0, #2276	; 0x8e4
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fb17 	bl	40e8 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2aba:	f640 00f8 	movw	r0, #2296	; 0x8f8
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 fb11 	bl	40e8 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ac6:	2300      	movs	r3, #0
    2ac8:	63bb      	str	r3, [r7, #56]	; 0x38
    2aca:	e02b      	b.n	2b24 <vInitialiseEventLists+0xbc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2acc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    2ace:	2034      	movs	r0, #52	; 0x34
    2ad0:	f003 f9c2 	bl	5e58 <pvPortMalloc>
    2ad4:	4602      	mov	r2, r0
    2ad6:	00a3      	lsls	r3, r4, #2
    2ad8:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2adc:	440b      	add	r3, r1
    2ade:	f843 2c3c 	str.w	r2, [r3, #-60]
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
    2ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2ae4:	009b      	lsls	r3, r3, #2
    2ae6:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2aea:	4413      	add	r3, r2
    2aec:	f853 2c3c 	ldr.w	r2, [r3, #-60]
    2af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2af2:	009b      	lsls	r3, r3, #2
    2af4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af8:	440b      	add	r3, r1
    2afa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2afe:	62d3      	str	r3, [r2, #44]	; 0x2c
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b02:	009b      	lsls	r3, r3, #2
    2b04:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b08:	4413      	add	r3, r2
    2b0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b0e:	3320      	adds	r3, #32
    2b10:	f640 0094 	movw	r0, #2196	; 0x894
    2b14:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b18:	4619      	mov	r1, r3
    2b1a:	f001 fb11 	bl	4140 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b20:	3301      	adds	r3, #1
    2b22:	63bb      	str	r3, [r7, #56]	; 0x38
    2b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b26:	2b0c      	cmp	r3, #12
    2b28:	ddd0      	ble.n	2acc <vInitialiseEventLists+0x64>
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
}
    2b2a:	3744      	adds	r7, #68	; 0x44
    2b2c:	46bd      	mov	sp, r7
    2b2e:	bd90      	pop	{r4, r7, pc}

00002b30 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2b30:	b580      	push	{r7, lr}
    2b32:	b086      	sub	sp, #24
    2b34:	af00      	add	r7, sp, #0
    volatile xListItem * pxIterator;
    portTickType xCurrentTime;
    portBASE_TYPE xLen, i;
    struct tag * xTag;
    
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    2b36:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	60fb      	str	r3, [r7, #12]
    2b42:	68fb      	ldr	r3, [r7, #12]
    2b44:	2b00      	cmp	r3, #0
    2b46:	dd22      	ble.n	2b8e <xIsExecutableEventArrive+0x5e>
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
    2b48:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b50:	68db      	ldr	r3, [r3, #12]
    2b52:	617b      	str	r3, [r7, #20]
        xCurrentTime = xTaskGetTickCount();
    2b54:	f002 fbd2 	bl	52fc <xTaskGetTickCount>
    2b58:	60b8      	str	r0, [r7, #8]
        for( i = 0; i < xLen ; i++ ) 
    2b5a:	2300      	movs	r3, #0
    2b5c:	613b      	str	r3, [r7, #16]
    2b5e:	e012      	b.n	2b86 <xIsExecutableEventArrive+0x56>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner );
    2b60:	697b      	ldr	r3, [r7, #20]
    2b62:	68db      	ldr	r3, [r3, #12]
    2b64:	4618      	mov	r0, r3
    2b66:	f7ff ff21 	bl	29ac <xEventGetxTag>
    2b6a:	6078      	str	r0, [r7, #4]
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	685a      	ldr	r2, [r3, #4]
    2b70:	68bb      	ldr	r3, [r7, #8]
    2b72:	429a      	cmp	r2, r3
    2b74:	d801      	bhi.n	2b7a <xIsExecutableEventArrive+0x4a>
    2b76:	2301      	movs	r3, #1
    2b78:	e00a      	b.n	2b90 <xIsExecutableEventArrive+0x60>
            pxIterator = pxIterator->pxNext;
    2b7a:	697b      	ldr	r3, [r7, #20]
    2b7c:	685b      	ldr	r3, [r3, #4]
    2b7e:	617b      	str	r3, [r7, #20]
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
        xCurrentTime = xTaskGetTickCount();
        for( i = 0; i < xLen ; i++ ) 
    2b80:	693b      	ldr	r3, [r7, #16]
    2b82:	3301      	adds	r3, #1
    2b84:	613b      	str	r3, [r7, #16]
    2b86:	693a      	ldr	r2, [r7, #16]
    2b88:	68fb      	ldr	r3, [r7, #12]
    2b8a:	429a      	cmp	r2, r3
    2b8c:	dbe8      	blt.n	2b60 <xIsExecutableEventArrive+0x30>
            xTag = xEventGetxTag( pxIterator->pvOwner );
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
            pxIterator = pxIterator->pxNext;
        }
    }
    return pdFALSE;
    2b8e:	2300      	movs	r3, #0
}
    2b90:	4618      	mov	r0, r3
    2b92:	3718      	adds	r7, #24
    2b94:	46bd      	mov	sp, r7
    2b96:	bd80      	pop	{r7, pc}

00002b98 <xCompareFunction>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction( const struct tag * t1, const struct tag * t2 )
{
    2b98:	b480      	push	{r7}
    2b9a:	b083      	sub	sp, #12
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	6039      	str	r1, [r7, #0]
    if( t1->xDeadline < t2->xDeadline)
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	681a      	ldr	r2, [r3, #0]
    2ba6:	683b      	ldr	r3, [r7, #0]
    2ba8:	681b      	ldr	r3, [r3, #0]
    2baa:	429a      	cmp	r2, r3
    2bac:	d201      	bcs.n	2bb2 <xCompareFunction+0x1a>
    {
        return pdTRUE;
    2bae:	2301      	movs	r3, #1
    2bb0:	e02a      	b.n	2c08 <xCompareFunction+0x70>
    }
    else if( t1->xDeadline == t2->xDeadline)
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	681a      	ldr	r2, [r3, #0]
    2bb6:	683b      	ldr	r3, [r7, #0]
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	429a      	cmp	r2, r3
    2bbc:	d123      	bne.n	2c06 <xCompareFunction+0x6e>
    {
        if( t1->xTimestamp < t2->xTimestamp)
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	685a      	ldr	r2, [r3, #4]
    2bc2:	683b      	ldr	r3, [r7, #0]
    2bc4:	685b      	ldr	r3, [r3, #4]
    2bc6:	429a      	cmp	r2, r3
    2bc8:	d201      	bcs.n	2bce <xCompareFunction+0x36>
        {
            return pdTRUE;
    2bca:	2301      	movs	r3, #1
    2bcc:	e01c      	b.n	2c08 <xCompareFunction+0x70>
        }
        else if( t1->xTimestamp == t2->xTimestamp )
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	685a      	ldr	r2, [r3, #4]
    2bd2:	683b      	ldr	r3, [r7, #0]
    2bd4:	685b      	ldr	r3, [r3, #4]
    2bd6:	429a      	cmp	r2, r3
    2bd8:	d115      	bne.n	2c06 <xCompareFunction+0x6e>
        {
            if( t1->xLevel < t2->xLevel )
    2bda:	687b      	ldr	r3, [r7, #4]
    2bdc:	689a      	ldr	r2, [r3, #8]
    2bde:	683b      	ldr	r3, [r7, #0]
    2be0:	689b      	ldr	r3, [r3, #8]
    2be2:	429a      	cmp	r2, r3
    2be4:	da01      	bge.n	2bea <xCompareFunction+0x52>
            {
                return pdTRUE;
    2be6:	2301      	movs	r3, #1
    2be8:	e00e      	b.n	2c08 <xCompareFunction+0x70>
            }
            else if( t1->xLevel == t2->xLevel && t1->xMicroStep < t2->xMicroStep )
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	689a      	ldr	r2, [r3, #8]
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	689b      	ldr	r3, [r3, #8]
    2bf2:	429a      	cmp	r2, r3
    2bf4:	d107      	bne.n	2c06 <xCompareFunction+0x6e>
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	68da      	ldr	r2, [r3, #12]
    2bfa:	683b      	ldr	r3, [r7, #0]
    2bfc:	68db      	ldr	r3, [r3, #12]
    2bfe:	429a      	cmp	r2, r3
    2c00:	da01      	bge.n	2c06 <xCompareFunction+0x6e>
            {
                return pdTRUE;
    2c02:	2301      	movs	r3, #1
    2c04:	e000      	b.n	2c08 <xCompareFunction+0x70>
            }
        }
    }

    return pdFALSE;
    2c06:	2300      	movs	r3, #0
}
    2c08:	4618      	mov	r0, r3
    2c0a:	370c      	adds	r7, #12
    2c0c:	46bd      	mov	sp, r7
    2c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c12:	4770      	bx	lr

00002c14 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2c14:	b480      	push	{r7}
    2c16:	b087      	sub	sp, #28
    2c18:	af00      	add	r7, sp, #0
    2c1a:	60f8      	str	r0, [r7, #12]
    2c1c:	60b9      	str	r1, [r7, #8]
    2c1e:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2c24:	697b      	ldr	r3, [r7, #20]
    2c26:	68fa      	ldr	r2, [r7, #12]
    2c28:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2c2a:	697b      	ldr	r3, [r7, #20]
    2c2c:	68ba      	ldr	r2, [r7, #8]
    2c2e:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2c30:	697b      	ldr	r3, [r7, #20]
    2c32:	2200      	movs	r2, #0
    2c34:	615a      	str	r2, [r3, #20]
}
    2c36:	371c      	adds	r7, #28
    2c38:	46bd      	mov	sp, r7
    2c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c3e:	4770      	bx	lr

00002c40 <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b088      	sub	sp, #32
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
    struct tag * xTagOfInsertion;
    xList * pxList = &xEventExecutableList; 
    2c48:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c50:	617b      	str	r3, [r7, #20]
    volatile xListItem *pxIterator;
    portBASE_TYPE xLen, i;

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	68db      	ldr	r3, [r3, #12]
    2c56:	4618      	mov	r0, r3
    2c58:	f7ff fea8 	bl	29ac <xEventGetxTag>
    2c5c:	6138      	str	r0, [r7, #16]

    taskENTER_CRITICAL();
    2c5e:	f003 f881 	bl	5d64 <vPortEnterCritical>
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    2c62:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c6a:	681b      	ldr	r3, [r3, #0]
    2c6c:	60fb      	str	r3, [r7, #12]
    pxIterator = (xListItem *)&(pxList->xListEnd);
    2c6e:	697b      	ldr	r3, [r7, #20]
    2c70:	3308      	adds	r3, #8
    2c72:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2c74:	2300      	movs	r3, #0
    2c76:	61bb      	str	r3, [r7, #24]
    2c78:	e005      	b.n	2c86 <prvEventListGenericInsert+0x46>
    { 
        pxIterator = pxIterator->pxPrevious;
    2c7a:	69fb      	ldr	r3, [r7, #28]
    2c7c:	689b      	ldr	r3, [r3, #8]
    2c7e:	61fb      	str	r3, [r7, #28]

    taskENTER_CRITICAL();
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    pxIterator = (xListItem *)&(pxList->xListEnd);
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2c80:	69bb      	ldr	r3, [r7, #24]
    2c82:	3301      	adds	r3, #1
    2c84:	61bb      	str	r3, [r7, #24]
    2c86:	69ba      	ldr	r2, [r7, #24]
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	429a      	cmp	r2, r3
    2c8c:	da0d      	bge.n	2caa <prvEventListGenericInsert+0x6a>
    2c8e:	69fb      	ldr	r3, [r7, #28]
    2c90:	689b      	ldr	r3, [r3, #8]
    2c92:	68db      	ldr	r3, [r3, #12]
    2c94:	4618      	mov	r0, r3
    2c96:	f7ff fe89 	bl	29ac <xEventGetxTag>
    2c9a:	4603      	mov	r3, r0
    2c9c:	6938      	ldr	r0, [r7, #16]
    2c9e:	4619      	mov	r1, r3
    2ca0:	f7ff ff7a 	bl	2b98 <xCompareFunction>
    2ca4:	4603      	mov	r3, r0
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d1e7      	bne.n	2c7a <prvEventListGenericInsert+0x3a>
    { 
        pxIterator = pxIterator->pxPrevious;
    } 
    //vPrintString("hello,world\n\r");

    taskEXIT_CRITICAL();
    2caa:	f003 f871 	bl	5d90 <vPortExitCritical>

    pxIterator = pxIterator->pxPrevious;
    2cae:	69fb      	ldr	r3, [r7, #28]
    2cb0:	689b      	ldr	r3, [r3, #8]
    2cb2:	61fb      	str	r3, [r7, #28]
    
    // insert the new event after a smaller one from the back of list
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cb4:	69fb      	ldr	r3, [r7, #28]
    2cb6:	685a      	ldr	r2, [r3, #4]
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	685b      	ldr	r3, [r3, #4]
    2cc0:	687a      	ldr	r2, [r7, #4]
    2cc2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	69fa      	ldr	r2, [r7, #28]
    2cc8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cca:	69fb      	ldr	r3, [r7, #28]
    2ccc:	687a      	ldr	r2, [r7, #4]
    2cce:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	697a      	ldr	r2, [r7, #20]
    2cd4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2cd6:	697b      	ldr	r3, [r7, #20]
    2cd8:	681b      	ldr	r3, [r3, #0]
    2cda:	1c5a      	adds	r2, r3, #1
    2cdc:	697b      	ldr	r3, [r7, #20]
    2cde:	601a      	str	r2, [r3, #0]
}
    2ce0:	3720      	adds	r7, #32
    2ce2:	46bd      	mov	sp, r7
    2ce4:	bd80      	pop	{r7, pc}
    2ce6:	bf00      	nop

00002ce8 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * pdData)
{
    2ce8:	b580      	push	{r7, lr}
    2cea:	b086      	sub	sp, #24
    2cec:	af00      	add	r7, sp, #0
    2cee:	60f8      	str	r0, [r7, #12]
    2cf0:	60b9      	str	r1, [r7, #8]
    2cf2:	607a      	str	r2, [r7, #4]
    2cf4:	603b      	str	r3, [r7, #0]
    eveECB * pxNewEvent = NULL;
    2cf6:	2300      	movs	r3, #0
    2cf8:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2cfa:	f003 f833 	bl	5d64 <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2cfe:	f640 0394 	movw	r3, #2196	; 0x894
    2d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d06:	68db      	ldr	r3, [r3, #12]
    2d08:	68db      	ldr	r3, [r3, #12]
    2d0a:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2d0c:	697b      	ldr	r3, [r7, #20]
    2d0e:	3320      	adds	r3, #32
    2d10:	4618      	mov	r0, r3
    2d12:	f001 fa75 	bl	4200 <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2d16:	697b      	ldr	r3, [r7, #20]
    2d18:	68fa      	ldr	r2, [r7, #12]
    2d1a:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2d1c:	68b8      	ldr	r0, [r7, #8]
    2d1e:	6879      	ldr	r1, [r7, #4]
    2d20:	697a      	ldr	r2, [r7, #20]
    2d22:	f7ff ff77 	bl	2c14 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = *pdData;
    2d26:	697b      	ldr	r3, [r7, #20]
    2d28:	683a      	ldr	r2, [r7, #0]
    2d2a:	3318      	adds	r3, #24
    2d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2d30:	e883 0003 	stmia.w	r3, {r0, r1}
    listSET_LIST_ITEM_OWNER( (xListItem *) &pxNewEvent->xEventListItem, pxNewEvent);
    2d34:	697b      	ldr	r3, [r7, #20]
    2d36:	697a      	ldr	r2, [r7, #20]
    2d38:	62da      	str	r2, [r3, #44]	; 0x2c

    taskEXIT_CRITICAL();
    2d3a:	f003 f829 	bl	5d90 <vPortExitCritical>

    return pxNewEvent;
    2d3e:	697b      	ldr	r3, [r7, #20]
}
    2d40:	4618      	mov	r0, r3
    2d42:	3718      	adds	r7, #24
    2d44:	46bd      	mov	sp, r7
    2d46:	bd80      	pop	{r7, pc}

00002d48 <vEventGenericScatter>:


// find the executable events from xEventNonExecutablePool.
// scatter the events and transit them into xEventExecutablePool
void vEventGenericScatter()
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b08c      	sub	sp, #48	; 0x30
    2d4c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxSource, pxDestination, outs;
    struct tag * xTag;
    eveECB * pxEvent , * pxCopyEvent; 
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    volatile xListItem * pxIterator = xEventNonExecutablePool.xListEnd.pxNext;
    2d4e:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d56:	68db      	ldr	r3, [r3, #12]
    2d58:	627b      	str	r3, [r7, #36]	; 0x24

    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    2d5a:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d62:	681b      	ldr	r3, [r3, #0]
    2d64:	623b      	str	r3, [r7, #32]
    2d66:	6a3b      	ldr	r3, [r7, #32]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	f340 80c8 	ble.w	2efe <vEventGenericScatter+0x1b6>
    {
        xCurrentTime = xTaskGetTickCount();
    2d6e:	f002 fac5 	bl	52fc <xTaskGetTickCount>
    2d72:	61f8      	str	r0, [r7, #28]
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2d74:	2300      	movs	r3, #0
    2d76:	62bb      	str	r3, [r7, #40]	; 0x28
    2d78:	e0bc      	b.n	2ef4 <vEventGenericScatter+0x1ac>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner ); 
    2d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d7c:	68db      	ldr	r3, [r3, #12]
    2d7e:	4618      	mov	r0, r3
    2d80:	f7ff fe14 	bl	29ac <xEventGetxTag>
    2d84:	61b8      	str	r0, [r7, #24]
            // find one
            if( xTag->xTimestamp <= xCurrentTime )
    2d86:	69bb      	ldr	r3, [r7, #24]
    2d88:	685a      	ldr	r2, [r3, #4]
    2d8a:	69fb      	ldr	r3, [r7, #28]
    2d8c:	429a      	cmp	r2, r3
    2d8e:	f200 80ab 	bhi.w	2ee8 <vEventGenericScatter+0x1a0>
            {
                pxEvent = (eveECB *) pxIterator->pvOwner;
    2d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d94:	68db      	ldr	r3, [r3, #12]
    2d96:	617b      	str	r3, [r7, #20]
                outs = xContexts[ pxEvent->pxSource ].xNumOfOut; // used for cloning
    2d98:	697b      	ldr	r3, [r7, #20]
    2d9a:	6819      	ldr	r1, [r3, #0]
    2d9c:	f640 120c 	movw	r2, #2316	; 0x90c
    2da0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2da4:	460b      	mov	r3, r1
    2da6:	00db      	lsls	r3, r3, #3
    2da8:	1a5b      	subs	r3, r3, r1
    2daa:	00db      	lsls	r3, r3, #3
    2dac:	4413      	add	r3, r2
    2dae:	3310      	adds	r3, #16
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	613b      	str	r3, [r7, #16]

                taskENTER_CRITICAL();
    2db4:	f002 ffd6 	bl	5d64 <vPortEnterCritical>
                temp_pxEventListItem = (xListItem *) pxIterator;
    2db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dba:	60fb      	str	r3, [r7, #12]
                pxIterator = pxIterator->pxNext;
    2dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dbe:	685b      	ldr	r3, [r3, #4]
    2dc0:	627b      	str	r3, [r7, #36]	; 0x24
                vListRemove(temp_pxEventListItem);
    2dc2:	68f8      	ldr	r0, [r7, #12]
    2dc4:	f001 fa1c 	bl	4200 <vListRemove>
                // complete the information of the origin event.
                pxEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[0];
    2dc8:	697b      	ldr	r3, [r7, #20]
    2dca:	6819      	ldr	r1, [r3, #0]
    2dcc:	f640 120c 	movw	r2, #2316	; 0x90c
    2dd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2dd4:	460b      	mov	r3, r1
    2dd6:	00db      	lsls	r3, r3, #3
    2dd8:	1a5b      	subs	r3, r3, r1
    2dda:	00db      	lsls	r3, r3, #3
    2ddc:	4413      	add	r3, r2
    2dde:	331c      	adds	r3, #28
    2de0:	681a      	ldr	r2, [r3, #0]
    2de2:	697b      	ldr	r3, [r7, #20]
    2de4:	605a      	str	r2, [r3, #4]
                xContexts[pxEvent->pxDestination].xInBoolCount++;
    2de6:	697b      	ldr	r3, [r7, #20]
    2de8:	685a      	ldr	r2, [r3, #4]
    2dea:	f640 110c 	movw	r1, #2316	; 0x90c
    2dee:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2df2:	4613      	mov	r3, r2
    2df4:	00db      	lsls	r3, r3, #3
    2df6:	1a9b      	subs	r3, r3, r2
    2df8:	00db      	lsls	r3, r3, #3
    2dfa:	440b      	add	r3, r1
    2dfc:	3334      	adds	r3, #52	; 0x34
    2dfe:	681b      	ldr	r3, [r3, #0]
    2e00:	1c58      	adds	r0, r3, #1
    2e02:	f640 110c 	movw	r1, #2316	; 0x90c
    2e06:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e0a:	4613      	mov	r3, r2
    2e0c:	00db      	lsls	r3, r3, #3
    2e0e:	1a9b      	subs	r3, r3, r2
    2e10:	00db      	lsls	r3, r3, #3
    2e12:	440b      	add	r3, r1
    2e14:	3334      	adds	r3, #52	; 0x34
    2e16:	6018      	str	r0, [r3, #0]
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxSource].xTaskId;
    2e18:	697b      	ldr	r3, [r7, #20]
    2e1a:	6819      	ldr	r1, [r3, #0]
    2e1c:	f640 120c 	movw	r2, #2316	; 0x90c
    2e20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e24:	460b      	mov	r3, r1
    2e26:	00db      	lsls	r3, r3, #3
    2e28:	1a5b      	subs	r3, r3, r1
    2e2a:	00db      	lsls	r3, r3, #3
    2e2c:	4413      	add	r3, r2
    2e2e:	3330      	adds	r3, #48	; 0x30
    2e30:	681a      	ldr	r2, [r3, #0]
    2e32:	697b      	ldr	r3, [r7, #20]
    2e34:	611a      	str	r2, [r3, #16]
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2e36:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2e3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e3e:	68f9      	ldr	r1, [r7, #12]
    2e40:	f001 f97e 	bl	4140 <vListInsertEnd>

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2e44:	2301      	movs	r3, #1
    2e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e48:	e047      	b.n	2eda <vEventGenericScatter+0x192>
                {
                    pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, &pxEvent->xData);
    2e4a:	697b      	ldr	r3, [r7, #20]
    2e4c:	6899      	ldr	r1, [r3, #8]
    2e4e:	697b      	ldr	r3, [r7, #20]
    2e50:	68da      	ldr	r2, [r3, #12]
    2e52:	697b      	ldr	r3, [r7, #20]
    2e54:	3318      	adds	r3, #24
    2e56:	68b8      	ldr	r0, [r7, #8]
    2e58:	f7ff ff46 	bl	2ce8 <pxEventGenericCreate>
    2e5c:	6078      	str	r0, [r7, #4]
                    // complete the information of the copied event.
                    pxCopyEvent->xTag.xMicroStep = i;
    2e5e:	687b      	ldr	r3, [r7, #4]
    2e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2e62:	615a      	str	r2, [r3, #20]
                    pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
    2e64:	697b      	ldr	r3, [r7, #20]
    2e66:	691a      	ldr	r2, [r3, #16]
    2e68:	687b      	ldr	r3, [r7, #4]
    2e6a:	611a      	str	r2, [r3, #16]
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
    2e6c:	697b      	ldr	r3, [r7, #20]
    2e6e:	6819      	ldr	r1, [r3, #0]
    2e70:	f640 120c 	movw	r2, #2316	; 0x90c
    2e74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e78:	460b      	mov	r3, r1
    2e7a:	00db      	lsls	r3, r3, #3
    2e7c:	1a5b      	subs	r3, r3, r1
    2e7e:	005b      	lsls	r3, r3, #1
    2e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2e82:	440b      	add	r3, r1
    2e84:	3306      	adds	r3, #6
    2e86:	009b      	lsls	r3, r3, #2
    2e88:	4413      	add	r3, r2
    2e8a:	685a      	ldr	r2, [r3, #4]
    2e8c:	687b      	ldr	r3, [r7, #4]
    2e8e:	605a      	str	r2, [r3, #4]
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
    2e90:	687b      	ldr	r3, [r7, #4]
    2e92:	685a      	ldr	r2, [r3, #4]
    2e94:	f640 110c 	movw	r1, #2316	; 0x90c
    2e98:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e9c:	4613      	mov	r3, r2
    2e9e:	00db      	lsls	r3, r3, #3
    2ea0:	1a9b      	subs	r3, r3, r2
    2ea2:	00db      	lsls	r3, r3, #3
    2ea4:	440b      	add	r3, r1
    2ea6:	3334      	adds	r3, #52	; 0x34
    2ea8:	681b      	ldr	r3, [r3, #0]
    2eaa:	1c58      	adds	r0, r3, #1
    2eac:	f640 110c 	movw	r1, #2316	; 0x90c
    2eb0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2eb4:	4613      	mov	r3, r2
    2eb6:	00db      	lsls	r3, r3, #3
    2eb8:	1a9b      	subs	r3, r3, r2
    2eba:	00db      	lsls	r3, r3, #3
    2ebc:	440b      	add	r3, r1
    2ebe:	3334      	adds	r3, #52	; 0x34
    2ec0:	6018      	str	r0, [r3, #0]
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
    2ec2:	687b      	ldr	r3, [r7, #4]
    2ec4:	3320      	adds	r3, #32
    2ec6:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2eca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ece:	4619      	mov	r1, r3
    2ed0:	f001 f936 	bl	4140 <vListInsertEnd>
                xContexts[pxEvent->pxDestination].xInBoolCount++;
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxSource].xTaskId;
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ed6:	3301      	adds	r3, #1
    2ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    2eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2edc:	693b      	ldr	r3, [r7, #16]
    2ede:	429a      	cmp	r2, r3
    2ee0:	dbb3      	blt.n	2e4a <vEventGenericScatter+0x102>
                    pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
                }
                taskEXIT_CRITICAL();
    2ee2:	f002 ff55 	bl	5d90 <vPortExitCritical>
    2ee6:	e002      	b.n	2eee <vEventGenericScatter+0x1a6>
            }
            else
            {
                pxIterator = pxIterator->pxNext;
    2ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2eea:	685b      	ldr	r3, [r3, #4]
    2eec:	627b      	str	r3, [r7, #36]	; 0x24
    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    {
        xCurrentTime = xTaskGetTickCount();
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ef0:	3301      	adds	r3, #1
    2ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    2ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2ef6:	6a3b      	ldr	r3, [r7, #32]
    2ef8:	429a      	cmp	r2, r3
    2efa:	f6ff af3e 	blt.w	2d7a <vEventGenericScatter+0x32>
            {
                pxIterator = pxIterator->pxNext;
            }
        }
    }
}
    2efe:	3730      	adds	r7, #48	; 0x30
    2f00:	46bd      	mov	sp, r7
    2f02:	bd80      	pop	{r7, pc}

00002f04 <clearEventReduceTrack>:
    }
}
*/

static void clearEventReduceTrack()
{
    2f04:	b480      	push	{r7}
    2f06:	b083      	sub	sp, #12
    2f08:	af00      	add	r7, sp, #0
    portBASE_TYPE i = NUMBEROFSERVANT;
    2f0a:	232f      	movs	r3, #47	; 0x2f
    2f0c:	607b      	str	r3, [r7, #4]
    while(i--)
    2f0e:	e030      	b.n	2f72 <clearEventReduceTrack+0x6e>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
    2f10:	f240 6260 	movw	r2, #1632	; 0x660
    2f14:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f18:	6879      	ldr	r1, [r7, #4]
    2f1a:	460b      	mov	r3, r1
    2f1c:	005b      	lsls	r3, r3, #1
    2f1e:	440b      	add	r3, r1
    2f20:	009b      	lsls	r3, r3, #2
    2f22:	4413      	add	r3, r2
    2f24:	2200      	movs	r2, #0
    2f26:	601a      	str	r2, [r3, #0]
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    2f28:	f240 6260 	movw	r2, #1632	; 0x660
    2f2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f30:	6879      	ldr	r1, [r7, #4]
    2f32:	460b      	mov	r3, r1
    2f34:	005b      	lsls	r3, r3, #1
    2f36:	440b      	add	r3, r1
    2f38:	009b      	lsls	r3, r3, #2
    2f3a:	4413      	add	r3, r2
    2f3c:	3308      	adds	r3, #8
    2f3e:	2200      	movs	r2, #0
    2f40:	601a      	str	r2, [r3, #0]
    2f42:	f240 6260 	movw	r2, #1632	; 0x660
    2f46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f4a:	6879      	ldr	r1, [r7, #4]
    2f4c:	460b      	mov	r3, r1
    2f4e:	005b      	lsls	r3, r3, #1
    2f50:	440b      	add	r3, r1
    2f52:	009b      	lsls	r3, r3, #2
    2f54:	4413      	add	r3, r2
    2f56:	3308      	adds	r3, #8
    2f58:	6818      	ldr	r0, [r3, #0]
    2f5a:	f240 6260 	movw	r2, #1632	; 0x660
    2f5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f62:	6879      	ldr	r1, [r7, #4]
    2f64:	460b      	mov	r3, r1
    2f66:	005b      	lsls	r3, r3, #1
    2f68:	440b      	add	r3, r1
    2f6a:	009b      	lsls	r3, r3, #2
    2f6c:	4413      	add	r3, r2
    2f6e:	3304      	adds	r3, #4
    2f70:	6018      	str	r0, [r3, #0]
*/

static void clearEventReduceTrack()
{
    portBASE_TYPE i = NUMBEROFSERVANT;
    while(i--)
    2f72:	687b      	ldr	r3, [r7, #4]
    2f74:	1e5a      	subs	r2, r3, #1
    2f76:	607a      	str	r2, [r7, #4]
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d1c9      	bne.n	2f10 <clearEventReduceTrack+0xc>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    }
}
    2f7c:	370c      	adds	r7, #12
    2f7e:	46bd      	mov	sp, r7
    2f80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f84:	4770      	bx	lr
    2f86:	bf00      	nop

00002f88 <vEventGenericReduce>:

void vEventGenericReduce()
{
    2f88:	b580      	push	{r7, lr}
    2f8a:	b08a      	sub	sp, #40	; 0x28
    2f8c:	af00      	add	r7, sp, #0
    struct tag * temp_tag;
    struct eventData * temp_data;
    volatile xListItem * pxIterator;
    eveRT * temp_RT;

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    2f8e:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	61fb      	str	r3, [r7, #28]
    2f9a:	69fb      	ldr	r3, [r7, #28]
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	f340 80ea 	ble.w	3176 <vEventGenericReduce+0x1ee>
    {
        clearEventReduceTrack();
    2fa2:	f7ff ffaf 	bl	2f04 <clearEventReduceTrack>
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
    2fa6:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fae:	68db      	ldr	r3, [r3, #12]
    2fb0:	623b      	str	r3, [r7, #32]
        for( i = 0; i < xLen; i++)
    2fb2:	2300      	movs	r3, #0
    2fb4:	627b      	str	r3, [r7, #36]	; 0x24
    2fb6:	e0a6      	b.n	3106 <vEventGenericReduce+0x17e>
        {
            pxDestination = xEventGetpxDestination( pxIterator->pvOwner );
    2fb8:	6a3b      	ldr	r3, [r7, #32]
    2fba:	68db      	ldr	r3, [r3, #12]
    2fbc:	4618      	mov	r0, r3
    2fbe:	f7ff fce9 	bl	2994 <xEventGetpxDestination>
    2fc2:	61b8      	str	r0, [r7, #24]
            if(xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    2fc4:	f640 120c 	movw	r2, #2316	; 0x90c
    2fc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fcc:	69b9      	ldr	r1, [r7, #24]
    2fce:	460b      	mov	r3, r1
    2fd0:	00db      	lsls	r3, r3, #3
    2fd2:	1a5b      	subs	r3, r3, r1
    2fd4:	00db      	lsls	r3, r3, #3
    2fd6:	4413      	add	r3, r2
    2fd8:	3334      	adds	r3, #52	; 0x34
    2fda:	6818      	ldr	r0, [r3, #0]
    2fdc:	f640 120c 	movw	r2, #2316	; 0x90c
    2fe0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fe4:	69b9      	ldr	r1, [r7, #24]
    2fe6:	460b      	mov	r3, r1
    2fe8:	00db      	lsls	r3, r3, #3
    2fea:	1a5b      	subs	r3, r3, r1
    2fec:	00db      	lsls	r3, r3, #3
    2fee:	4413      	add	r3, r2
    2ff0:	330c      	adds	r3, #12
    2ff2:	681b      	ldr	r3, [r3, #0]
    2ff4:	4298      	cmp	r0, r3
    2ff6:	f040 8083 	bne.w	3100 <vEventGenericReduce+0x178>
            {
                temp_RT = &xEventReduceTrack[pxDestination];
    2ffa:	69ba      	ldr	r2, [r7, #24]
    2ffc:	4613      	mov	r3, r2
    2ffe:	005b      	lsls	r3, r3, #1
    3000:	4413      	add	r3, r2
    3002:	009b      	lsls	r3, r3, #2
    3004:	f240 6260 	movw	r2, #1632	; 0x660
    3008:	f2c2 0200 	movt	r2, #8192	; 0x2000
    300c:	4413      	add	r3, r2
    300e:	617b      	str	r3, [r7, #20]
                if(xContexts[pxDestination].xInBoolCount > 1)
    3010:	f640 120c 	movw	r2, #2316	; 0x90c
    3014:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3018:	69b9      	ldr	r1, [r7, #24]
    301a:	460b      	mov	r3, r1
    301c:	00db      	lsls	r3, r3, #3
    301e:	1a5b      	subs	r3, r3, r1
    3020:	00db      	lsls	r3, r3, #3
    3022:	4413      	add	r3, r2
    3024:	3334      	adds	r3, #52	; 0x34
    3026:	681b      	ldr	r3, [r3, #0]
    3028:	2b01      	cmp	r3, #1
    302a:	dd57      	ble.n	30dc <vEventGenericReduce+0x154>
                {
                    if( (temp_count = temp_RT->xNumOfEvent) > 0 )
    302c:	697b      	ldr	r3, [r7, #20]
    302e:	685b      	ldr	r3, [r3, #4]
    3030:	613b      	str	r3, [r7, #16]
    3032:	693b      	ldr	r3, [r7, #16]
    3034:	2b00      	cmp	r3, #0
    3036:	dd41      	ble.n	30bc <vEventGenericReduce+0x134>
                    {
                        temp_data = xEventGetxData( pxIterator->pvOwner );  
    3038:	6a3b      	ldr	r3, [r7, #32]
    303a:	68db      	ldr	r3, [r3, #12]
    303c:	4618      	mov	r0, r3
    303e:	f7ff fcc1 	bl	29c4 <xEventGetxData>
    3042:	60f8      	str	r0, [r7, #12]
                        temp_tag = xEventGetxTag( pxIterator->pvOwner );
    3044:	6a3b      	ldr	r3, [r7, #32]
    3046:	68db      	ldr	r3, [r3, #12]
    3048:	4618      	mov	r0, r3
    304a:	f7ff fcaf 	bl	29ac <xEventGetxTag>
    304e:	60b8      	str	r0, [r7, #8]
                        ((eveECB *)temp_RT->pxEvent)->xData.xDataArray[temp_count] = temp_data->xDataArray[0];
    3050:	697b      	ldr	r3, [r7, #20]
    3052:	681b      	ldr	r3, [r3, #0]
    3054:	68fa      	ldr	r2, [r7, #12]
    3056:	6811      	ldr	r1, [r2, #0]
    3058:	693a      	ldr	r2, [r7, #16]
    305a:	3206      	adds	r2, #6
    305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                        if( temp_RT->xNumOfEvent++ == xContexts[pxDestination].xInBoolCount - 1)
    3060:	697b      	ldr	r3, [r7, #20]
    3062:	6859      	ldr	r1, [r3, #4]
    3064:	1c4a      	adds	r2, r1, #1
    3066:	697b      	ldr	r3, [r7, #20]
    3068:	605a      	str	r2, [r3, #4]
    306a:	f640 120c 	movw	r2, #2316	; 0x90c
    306e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3072:	69b8      	ldr	r0, [r7, #24]
    3074:	4603      	mov	r3, r0
    3076:	00db      	lsls	r3, r3, #3
    3078:	1a1b      	subs	r3, r3, r0
    307a:	00db      	lsls	r3, r3, #3
    307c:	4413      	add	r3, r2
    307e:	3334      	adds	r3, #52	; 0x34
    3080:	681b      	ldr	r3, [r3, #0]
    3082:	3b01      	subs	r3, #1
    3084:	4299      	cmp	r1, r3
    3086:	d102      	bne.n	308e <vEventGenericReduce+0x106>
                        {
                            temp_RT->AllArrive = 1;
    3088:	697b      	ldr	r3, [r7, #20]
    308a:	2201      	movs	r2, #1
    308c:	609a      	str	r2, [r3, #8]
                        }
                        if(((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp < temp_tag->xTimestamp)
    308e:	697b      	ldr	r3, [r7, #20]
    3090:	681b      	ldr	r3, [r3, #0]
    3092:	68da      	ldr	r2, [r3, #12]
    3094:	68bb      	ldr	r3, [r7, #8]
    3096:	685b      	ldr	r3, [r3, #4]
    3098:	429a      	cmp	r2, r3
    309a:	d204      	bcs.n	30a6 <vEventGenericReduce+0x11e>
                        {
                            ((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp = temp_tag->xTimestamp;
    309c:	697b      	ldr	r3, [r7, #20]
    309e:	681b      	ldr	r3, [r3, #0]
    30a0:	68ba      	ldr	r2, [r7, #8]
    30a2:	6852      	ldr	r2, [r2, #4]
    30a4:	60da      	str	r2, [r3, #12]
                        }

                        temp_pxEventListItem = (xListItem *) pxIterator;
    30a6:	6a3b      	ldr	r3, [r7, #32]
    30a8:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30aa:	6a3b      	ldr	r3, [r7, #32]
    30ac:	685b      	ldr	r3, [r3, #4]
    30ae:	623b      	str	r3, [r7, #32]
                        vEventGenericDelete(temp_pxEventListItem->pvOwner);  // delete the redundant events
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	68db      	ldr	r3, [r3, #12]
    30b4:	4618      	mov	r0, r3
    30b6:	f000 fa15 	bl	34e4 <vEventGenericDelete>
    30ba:	e021      	b.n	3100 <vEventGenericReduce+0x178>
                    }
                    else  // the fist one of reduce event
                    {
                        temp_RT->pxEvent = pxIterator->pvOwner; 
    30bc:	6a3b      	ldr	r3, [r7, #32]
    30be:	68da      	ldr	r2, [r3, #12]
    30c0:	697b      	ldr	r3, [r7, #20]
    30c2:	601a      	str	r2, [r3, #0]
                        temp_RT->xNumOfEvent = 1;
    30c4:	697b      	ldr	r3, [r7, #20]
    30c6:	2201      	movs	r2, #1
    30c8:	605a      	str	r2, [r3, #4]
                        
                        temp_pxEventListItem = (xListItem *) pxIterator;
    30ca:	6a3b      	ldr	r3, [r7, #32]
    30cc:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30ce:	6a3b      	ldr	r3, [r7, #32]
    30d0:	685b      	ldr	r3, [r3, #4]
    30d2:	623b      	str	r3, [r7, #32]
                        vListRemove(temp_pxEventListItem);
    30d4:	6878      	ldr	r0, [r7, #4]
    30d6:	f001 f893 	bl	4200 <vListRemove>
    30da:	e011      	b.n	3100 <vEventGenericReduce+0x178>
                    }
                }
                else // only one event for the target servant
                {
                    temp_RT->pxEvent = pxIterator->pvOwner; 
    30dc:	6a3b      	ldr	r3, [r7, #32]
    30de:	68da      	ldr	r2, [r3, #12]
    30e0:	697b      	ldr	r3, [r7, #20]
    30e2:	601a      	str	r2, [r3, #0]
                    temp_RT->xNumOfEvent = 1;
    30e4:	697b      	ldr	r3, [r7, #20]
    30e6:	2201      	movs	r2, #1
    30e8:	605a      	str	r2, [r3, #4]
                    temp_RT->AllArrive = 1;
    30ea:	697b      	ldr	r3, [r7, #20]
    30ec:	2201      	movs	r2, #1
    30ee:	609a      	str	r2, [r3, #8]
                 
                    temp_pxEventListItem = (xListItem *) pxIterator;
    30f0:	6a3b      	ldr	r3, [r7, #32]
    30f2:	607b      	str	r3, [r7, #4]
                    pxIterator = pxIterator->pxNext;
    30f4:	6a3b      	ldr	r3, [r7, #32]
    30f6:	685b      	ldr	r3, [r3, #4]
    30f8:	623b      	str	r3, [r7, #32]
                    vListRemove(temp_pxEventListItem);
    30fa:	6878      	ldr	r0, [r7, #4]
    30fc:	f001 f880 	bl	4200 <vListRemove>

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    {
        clearEventReduceTrack();
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
        for( i = 0; i < xLen; i++)
    3100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3102:	3301      	adds	r3, #1
    3104:	627b      	str	r3, [r7, #36]	; 0x24
    3106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3108:	69fb      	ldr	r3, [r7, #28]
    310a:	429a      	cmp	r2, r3
    310c:	f6ff af54 	blt.w	2fb8 <vEventGenericReduce+0x30>
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    3110:	2300      	movs	r3, #0
    3112:	627b      	str	r3, [r7, #36]	; 0x24
    3114:	e02c      	b.n	3170 <vEventGenericReduce+0x1e8>
        {
            if(xEventReduceTrack[i].AllArrive)
    3116:	f240 6260 	movw	r2, #1632	; 0x660
    311a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    311e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3120:	460b      	mov	r3, r1
    3122:	005b      	lsls	r3, r3, #1
    3124:	440b      	add	r3, r1
    3126:	009b      	lsls	r3, r3, #2
    3128:	4413      	add	r3, r2
    312a:	3308      	adds	r3, #8
    312c:	681b      	ldr	r3, [r3, #0]
    312e:	2b00      	cmp	r3, #0
    3130:	d01b      	beq.n	316a <vEventGenericReduce+0x1e2>
            {
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
    3132:	f240 6260 	movw	r2, #1632	; 0x660
    3136:	f2c2 0200 	movt	r2, #8192	; 0x2000
    313a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    313c:	460b      	mov	r3, r1
    313e:	005b      	lsls	r3, r3, #1
    3140:	440b      	add	r3, r1
    3142:	009b      	lsls	r3, r3, #2
    3144:	4413      	add	r3, r2
    3146:	681b      	ldr	r3, [r3, #0]
    3148:	3320      	adds	r3, #32
    314a:	4618      	mov	r0, r3
    314c:	f7ff fd78 	bl	2c40 <prvEventListGenericInsert>
                xContexts[i].xInBoolCount = 0;
    3150:	f640 120c 	movw	r2, #2316	; 0x90c
    3154:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3158:	6a79      	ldr	r1, [r7, #36]	; 0x24
    315a:	460b      	mov	r3, r1
    315c:	00db      	lsls	r3, r3, #3
    315e:	1a5b      	subs	r3, r3, r1
    3160:	00db      	lsls	r3, r3, #3
    3162:	4413      	add	r3, r2
    3164:	3334      	adds	r3, #52	; 0x34
    3166:	2200      	movs	r2, #0
    3168:	601a      	str	r2, [r3, #0]
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    316c:	3301      	adds	r3, #1
    316e:	627b      	str	r3, [r7, #36]	; 0x24
    3170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3172:	2b2e      	cmp	r3, #46	; 0x2e
    3174:	ddcf      	ble.n	3116 <vEventGenericReduce+0x18e>
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
                xContexts[i].xInBoolCount = 0;
            }
        } // end for
    } // end if
}
    3176:	3728      	adds	r7, #40	; 0x28
    3178:	46bd      	mov	sp, r7
    317a:	bd80      	pop	{r7, pc}

0000317c <pOverLap>:


static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    317c:	b480      	push	{r7}
    317e:	b087      	sub	sp, #28
    3180:	af00      	add	r7, sp, #0
    3182:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	68db      	ldr	r3, [r3, #12]
    3188:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    318a:	697b      	ldr	r3, [r7, #20]
    318c:	685b      	ldr	r3, [r3, #4]
    318e:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    3190:	697b      	ldr	r3, [r7, #20]
    3192:	68db      	ldr	r3, [r3, #12]
    3194:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    3196:	f640 120c 	movw	r2, #2316	; 0x90c
    319a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    319e:	6939      	ldr	r1, [r7, #16]
    31a0:	460b      	mov	r3, r1
    31a2:	00db      	lsls	r3, r3, #3
    31a4:	1a5b      	subs	r3, r3, r1
    31a6:	00db      	lsls	r3, r3, #3
    31a8:	4413      	add	r3, r2
    31aa:	3324      	adds	r3, #36	; 0x24
    31ac:	681a      	ldr	r2, [r3, #0]
    31ae:	68fb      	ldr	r3, [r7, #12]
    31b0:	4413      	add	r3, r2
    31b2:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    31b4:	f240 6358 	movw	r3, #1624	; 0x658
    31b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31bc:	681a      	ldr	r2, [r3, #0]
    31be:	68fb      	ldr	r3, [r7, #12]
    31c0:	fbb3 f1f2 	udiv	r1, r3, r2
    31c4:	fb02 f201 	mul.w	r2, r2, r1
    31c8:	1a9b      	subs	r3, r3, r2
    31ca:	2b02      	cmp	r3, #2
    31cc:	d932      	bls.n	3234 <pOverLap+0xb8>
    31ce:	f240 6358 	movw	r3, #1624	; 0x658
    31d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31d6:	681a      	ldr	r2, [r3, #0]
    31d8:	68fb      	ldr	r3, [r7, #12]
    31da:	fbb3 f1f2 	udiv	r1, r3, r2
    31de:	fb02 f201 	mul.w	r2, r2, r1
    31e2:	1a9a      	subs	r2, r3, r2
    31e4:	f240 6358 	movw	r3, #1624	; 0x658
    31e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ec:	681b      	ldr	r3, [r3, #0]
    31ee:	3b03      	subs	r3, #3
    31f0:	429a      	cmp	r2, r3
    31f2:	d81f      	bhi.n	3234 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    31f4:	f240 6358 	movw	r3, #1624	; 0x658
    31f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31fc:	681a      	ldr	r2, [r3, #0]
    31fe:	68bb      	ldr	r3, [r7, #8]
    3200:	fbb3 f1f2 	udiv	r1, r3, r2
    3204:	fb02 f201 	mul.w	r2, r2, r1
    3208:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    320a:	2b02      	cmp	r3, #2
    320c:	d912      	bls.n	3234 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    320e:	f240 6358 	movw	r3, #1624	; 0x658
    3212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3216:	681a      	ldr	r2, [r3, #0]
    3218:	68bb      	ldr	r3, [r7, #8]
    321a:	fbb3 f1f2 	udiv	r1, r3, r2
    321e:	fb02 f201 	mul.w	r2, r2, r1
    3222:	1a9a      	subs	r2, r3, r2
    3224:	f240 6358 	movw	r3, #1624	; 0x658
    3228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    322c:	681b      	ldr	r3, [r3, #0]
    322e:	3b03      	subs	r3, #3
    3230:	429a      	cmp	r2, r3
    3232:	d901      	bls.n	3238 <pOverLap+0xbc>
    {
        return 1;
    3234:	2301      	movs	r3, #1
    3236:	e000      	b.n	323a <pOverLap+0xbe>
    }
    return 0;
    3238:	2300      	movs	r3, #0
}
    323a:	4618      	mov	r0, r3
    323c:	371c      	adds	r7, #28
    323e:	46bd      	mov	sp, r7
    3240:	f85d 7b04 	ldr.w	r7, [sp], #4
    3244:	4770      	bx	lr
    3246:	bf00      	nop

00003248 <xSetTimestamp>:

static void xSetTimestamp( xListItem * pxEventListItem)
{
    3248:	b580      	push	{r7, lr}
    324a:	b084      	sub	sp, #16
    324c:	af00      	add	r7, sp, #0
    324e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    3250:	687b      	ldr	r3, [r7, #4]
    3252:	68db      	ldr	r3, [r3, #12]
    3254:	60fb      	str	r3, [r7, #12]
    pxEvent->xTag.xTimestamp = xFutureModelTime;
    3256:	f240 635c 	movw	r3, #1628	; 0x65c
    325a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    325e:	681a      	ldr	r2, [r3, #0]
    3260:	68fb      	ldr	r3, [r7, #12]
    3262:	60da      	str	r2, [r3, #12]

    if( pOverLap(pxEventListItem )== 0 ) // not overlaped
    3264:	6878      	ldr	r0, [r7, #4]
    3266:	f7ff ff89 	bl	317c <pOverLap>
    326a:	4603      	mov	r3, r0
    326c:	2b00      	cmp	r3, #0
    326e:	d122      	bne.n	32b6 <xSetTimestamp+0x6e>
    {
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet; // update future model time
    3270:	68fb      	ldr	r3, [r7, #12]
    3272:	6859      	ldr	r1, [r3, #4]
    3274:	f640 120c 	movw	r2, #2316	; 0x90c
    3278:	f2c2 0200 	movt	r2, #8192	; 0x2000
    327c:	460b      	mov	r3, r1
    327e:	00db      	lsls	r3, r3, #3
    3280:	1a5b      	subs	r3, r3, r1
    3282:	00db      	lsls	r3, r3, #3
    3284:	4413      	add	r3, r2
    3286:	3324      	adds	r3, #36	; 0x24
    3288:	681a      	ldr	r2, [r3, #0]
    328a:	f240 635c 	movw	r3, #1628	; 0x65c
    328e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3292:	681b      	ldr	r3, [r3, #0]
    3294:	441a      	add	r2, r3
    3296:	f240 635c 	movw	r3, #1628	; 0x65c
    329a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    329e:	601a      	str	r2, [r3, #0]
        vListRemove( pxEventListItem); 
    32a0:	6878      	ldr	r0, [r7, #4]
    32a2:	f000 ffad 	bl	4200 <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    32a6:	f640 00f8 	movw	r0, #2296	; 0x8f8
    32aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    32ae:	6879      	ldr	r1, [r7, #4]
    32b0:	f000 ff46 	bl	4140 <vListInsertEnd>
    32b4:	e042      	b.n	333c <xSetTimestamp+0xf4>
    }
    else  // overlaped
    {
        // set the future model time to start time of next LET
        xFutureModelTime = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;  
    32b6:	f240 635c 	movw	r3, #1628	; 0x65c
    32ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32be:	681a      	ldr	r2, [r3, #0]
    32c0:	f240 6358 	movw	r3, #1624	; 0x658
    32c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c8:	681b      	ldr	r3, [r3, #0]
    32ca:	fbb2 f3f3 	udiv	r3, r2, r3
    32ce:	1c5a      	adds	r2, r3, #1
    32d0:	f240 6358 	movw	r3, #1624	; 0x658
    32d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32d8:	681b      	ldr	r3, [r3, #0]
    32da:	fb03 f302 	mul.w	r3, r3, r2
    32de:	1cda      	adds	r2, r3, #3
    32e0:	f240 635c 	movw	r3, #1628	; 0x65c
    32e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32e8:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    32ea:	f240 635c 	movw	r3, #1628	; 0x65c
    32ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32f2:	681a      	ldr	r2, [r3, #0]
    32f4:	68fb      	ldr	r3, [r7, #12]
    32f6:	60da      	str	r2, [r3, #12]
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;
    32f8:	68fb      	ldr	r3, [r7, #12]
    32fa:	6859      	ldr	r1, [r3, #4]
    32fc:	f640 120c 	movw	r2, #2316	; 0x90c
    3300:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3304:	460b      	mov	r3, r1
    3306:	00db      	lsls	r3, r3, #3
    3308:	1a5b      	subs	r3, r3, r1
    330a:	00db      	lsls	r3, r3, #3
    330c:	4413      	add	r3, r2
    330e:	3324      	adds	r3, #36	; 0x24
    3310:	681a      	ldr	r2, [r3, #0]
    3312:	f240 635c 	movw	r3, #1628	; 0x65c
    3316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    331a:	681b      	ldr	r3, [r3, #0]
    331c:	441a      	add	r2, r3
    331e:	f240 635c 	movw	r3, #1628	; 0x65c
    3322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3326:	601a      	str	r2, [r3, #0]

        vListRemove( pxEventListItem); 
    3328:	6878      	ldr	r0, [r7, #4]
    332a:	f000 ff69 	bl	4200 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    332e:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3332:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3336:	6879      	ldr	r1, [r7, #4]
    3338:	f000 ff02 	bl	4140 <vListInsertEnd>
    }
}
    333c:	3710      	adds	r7, #16
    333e:	46bd      	mov	sp, r7
    3340:	bd80      	pop	{r7, pc}
    3342:	bf00      	nop

00003344 <pEqualxDeadline>:

static portBASE_TYPE pEqualxDeadline(struct tag * xTag1, struct tag * xTag2)
{
    3344:	b480      	push	{r7}
    3346:	b083      	sub	sp, #12
    3348:	af00      	add	r7, sp, #0
    334a:	6078      	str	r0, [r7, #4]
    334c:	6039      	str	r1, [r7, #0]
    return (xTag1->xDeadline == xTag2->xDeadline);
    334e:	687b      	ldr	r3, [r7, #4]
    3350:	681a      	ldr	r2, [r3, #0]
    3352:	683b      	ldr	r3, [r7, #0]
    3354:	681b      	ldr	r3, [r3, #0]
    3356:	429a      	cmp	r2, r3
    3358:	bf14      	ite	ne
    335a:	2300      	movne	r3, #0
    335c:	2301      	moveq	r3, #1
    335e:	b2db      	uxtb	r3, r3
}
    3360:	4618      	mov	r0, r3
    3362:	370c      	adds	r7, #12
    3364:	46bd      	mov	sp, r7
    3366:	f85d 7b04 	ldr.w	r7, [sp], #4
    336a:	4770      	bx	lr

0000336c <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    336c:	b580      	push	{r7, lr}
    336e:	b084      	sub	sp, #16
    3370:	af00      	add	r7, sp, #0
    xListItem * flag_pxEventListItem;
    struct tag * origin_tag;
    portBASE_TYPE count = 1;
    3372:	2301      	movs	r3, #1
    3374:	60bb      	str	r3, [r7, #8]

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    3376:	f640 03e4 	movw	r3, #2276	; 0x8e4
    337a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    337e:	681b      	ldr	r3, [r3, #0]
    3380:	2b00      	cmp	r3, #0
    3382:	d00a      	beq.n	339a <xEventGenericSerialize+0x2e>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    3384:	f640 03e4 	movw	r3, #2276	; 0x8e4
    3388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    338c:	68db      	ldr	r3, [r3, #12]
    338e:	68db      	ldr	r3, [r3, #12]
    3390:	4618      	mov	r0, r3
    3392:	f7ff fb0b 	bl	29ac <xEventGetxTag>
    3396:	60f8      	str	r0, [r7, #12]
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    3398:	e035      	b.n	3406 <xEventGenericSerialize+0x9a>
    339a:	e034      	b.n	3406 <xEventGenericSerialize+0x9a>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    339c:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a4:	68db      	ldr	r3, [r3, #12]
    33a6:	607b      	str	r3, [r7, #4]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	68db      	ldr	r3, [r3, #12]
    33ac:	4618      	mov	r0, r3
    33ae:	f7ff faf1 	bl	2994 <xEventGetpxDestination>
    33b2:	4601      	mov	r1, r0
    33b4:	f640 120c 	movw	r2, #2316	; 0x90c
    33b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33bc:	460b      	mov	r3, r1
    33be:	00db      	lsls	r3, r3, #3
    33c0:	1a5b      	subs	r3, r3, r1
    33c2:	00db      	lsls	r3, r3, #3
    33c4:	4413      	add	r3, r2
    33c6:	3304      	adds	r3, #4
    33c8:	681b      	ldr	r3, [r3, #0]
    33ca:	2b02      	cmp	r3, #2
    33cc:	d111      	bne.n	33f2 <xEventGenericSerialize+0x86>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    33ce:	687b      	ldr	r3, [r7, #4]
    33d0:	68db      	ldr	r3, [r3, #12]
    33d2:	4618      	mov	r0, r3
    33d4:	f7ff faea 	bl	29ac <xEventGetxTag>
    33d8:	4603      	mov	r3, r0
    33da:	4618      	mov	r0, r3
    33dc:	68f9      	ldr	r1, [r7, #12]
    33de:	f7ff ffb1 	bl	3344 <pEqualxDeadline>
    33e2:	4603      	mov	r3, r0
    33e4:	2b00      	cmp	r3, #0
    33e6:	d003      	beq.n	33f0 <xEventGenericSerialize+0x84>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                xSetTimestamp( flag_pxEventListItem);
    33e8:	6878      	ldr	r0, [r7, #4]
    33ea:	f7ff ff2d 	bl	3248 <xSetTimestamp>
    33ee:	e00a      	b.n	3406 <xEventGenericSerialize+0x9a>
            }
            else
            {
                break;
    33f0:	e010      	b.n	3414 <xEventGenericSerialize+0xa8>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    33f2:	6878      	ldr	r0, [r7, #4]
    33f4:	f000 ff04 	bl	4200 <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    33f8:	f640 00f8 	movw	r0, #2296	; 0x8f8
    33fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3400:	6879      	ldr	r1, [r7, #4]
    3402:	f000 fe9d 	bl	4140 <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    3406:	f640 03e4 	movw	r3, #2276	; 0x8e4
    340a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    340e:	681b      	ldr	r3, [r3, #0]
    3410:	2b00      	cmp	r3, #0
    3412:	d1c3      	bne.n	339c <xEventGenericSerialize+0x30>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    3414:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341c:	681b      	ldr	r3, [r3, #0]
    341e:	2b00      	cmp	r3, #0
    3420:	d00a      	beq.n	3438 <xEventGenericSerialize+0xcc>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    3422:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    342a:	68db      	ldr	r3, [r3, #12]
    342c:	68db      	ldr	r3, [r3, #12]
    342e:	4618      	mov	r0, r3
    3430:	f7ff fab0 	bl	2994 <xEventGetpxDestination>
    3434:	4603      	mov	r3, r0
    3436:	e001      	b.n	343c <xEventGenericSerialize+0xd0>
    }
    return -1; // no event avaliable
    3438:	f04f 33ff 	mov.w	r3, #4294967295
}
    343c:	4618      	mov	r0, r3
    343e:	3710      	adds	r7, #16
    3440:	46bd      	mov	sp, r7
    3442:	bd80      	pop	{r7, pc}

00003444 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    3444:	b580      	push	{r7, lr}
    3446:	b082      	sub	sp, #8
    3448:	af00      	add	r7, sp, #0
    344a:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	3320      	adds	r3, #32
    3450:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3454:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3458:	4619      	mov	r1, r3
    345a:	f000 fe71 	bl	4140 <vListInsertEnd>
}
    345e:	3708      	adds	r7, #8
    3460:	46bd      	mov	sp, r7
    3462:	bd80      	pop	{r7, pc}

00003464 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    3464:	b580      	push	{r7, lr}
    3466:	b082      	sub	sp, #8
    3468:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant
    xListItem * pxEventList;

    taskENTER_CRITICAL();
    346a:	f002 fc7b 	bl	5d64 <vPortEnterCritical>
    pxEventList= (xListItem *)xEventReadyList.xListEnd.pxNext;
    346e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3476:	68db      	ldr	r3, [r3, #12]
    3478:	607b      	str	r3, [r7, #4]
    vListRemove(pxEventList);
    347a:	6878      	ldr	r0, [r7, #4]
    347c:	f000 fec0 	bl	4200 <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxEventList);  // reuse event, which will be update by servant 
    3480:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3484:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3488:	6879      	ldr	r1, [r7, #4]
    348a:	f000 fe59 	bl	4140 <vListInsertEnd>
    taskEXIT_CRITICAL();
    348e:	f002 fc7f 	bl	5d90 <vPortExitCritical>

    return (xEventHandle) pxEventList->pvOwner;
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	68db      	ldr	r3, [r3, #12]
}
    3496:	4618      	mov	r0, r3
    3498:	3708      	adds	r7, #8
    349a:	46bd      	mov	sp, r7
    349c:	bd80      	pop	{r7, pc}
    349e:	bf00      	nop

000034a0 <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * xData)
{
    34a0:	b480      	push	{r7}
    34a2:	b087      	sub	sp, #28
    34a4:	af00      	add	r7, sp, #0
    34a6:	60f8      	str	r0, [r7, #12]
    34a8:	60b9      	str	r1, [r7, #8]
    34aa:	607a      	str	r2, [r7, #4]
    34ac:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    34ae:	68fb      	ldr	r3, [r7, #12]
    34b0:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    34b2:	697b      	ldr	r3, [r7, #20]
    34b4:	68ba      	ldr	r2, [r7, #8]
    34b6:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    34b8:	697b      	ldr	r3, [r7, #20]
    34ba:	687a      	ldr	r2, [r7, #4]
    34bc:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    34be:	697b      	ldr	r3, [r7, #20]
    34c0:	683a      	ldr	r2, [r7, #0]
    34c2:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    34c4:	697b      	ldr	r3, [r7, #20]
    34c6:	2200      	movs	r2, #0
    34c8:	615a      	str	r2, [r3, #20]
    pxEvent->xData = *xData;
    34ca:	697b      	ldr	r3, [r7, #20]
    34cc:	6a3a      	ldr	r2, [r7, #32]
    34ce:	3318      	adds	r3, #24
    34d0:	e892 0003 	ldmia.w	r2, {r0, r1}
    34d4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    34d8:	371c      	adds	r7, #28
    34da:	46bd      	mov	sp, r7
    34dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    34e0:	4770      	bx	lr
    34e2:	bf00      	nop

000034e4 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    34e4:	b580      	push	{r7, lr}
    34e6:	b084      	sub	sp, #16
    34e8:	af00      	add	r7, sp, #0
    34ea:	6078      	str	r0, [r7, #4]
    xListItem * pxEventItem;
    taskENTER_CRITICAL();
    34ec:	f002 fc3a 	bl	5d64 <vPortEnterCritical>

    pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	3320      	adds	r3, #32
    34f4:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    34f6:	68f8      	ldr	r0, [r7, #12]
    34f8:	f000 fe82 	bl	4200 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    34fc:	f640 0094 	movw	r0, #2196	; 0x894
    3500:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3504:	68f9      	ldr	r1, [r7, #12]
    3506:	f000 fe1b 	bl	4140 <vListInsertEnd>

    taskEXIT_CRITICAL();
    350a:	f002 fc41 	bl	5d90 <vPortExitCritical>
}
    350e:	3710      	adds	r7, #16
    3510:	46bd      	mov	sp, r7
    3512:	bd80      	pop	{r7, pc}

00003514 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3514:	b580      	push	{r7, lr}
    3516:	b082      	sub	sp, #8
    3518:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    351a:	2300      	movs	r3, #0
    351c:	607b      	str	r3, [r7, #4]
    351e:	e033      	b.n	3588 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    3520:	2001      	movs	r0, #1
    3522:	2100      	movs	r1, #0
    3524:	2203      	movs	r2, #3
    3526:	f000 fee1 	bl	42ec <xQueueGenericCreate>
    352a:	4601      	mov	r1, r0
    352c:	f241 3354 	movw	r3, #4948	; 0x1354
    3530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3534:	687a      	ldr	r2, [r7, #4]
    3536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    353a:	f241 3354 	movw	r3, #4948	; 0x1354
    353e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3542:	687a      	ldr	r2, [r7, #4]
    3544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3548:	2b00      	cmp	r3, #0
    354a:	d00c      	beq.n	3566 <vSemaphoreInitialise+0x52>
    354c:	f241 3354 	movw	r3, #4948	; 0x1354
    3550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3554:	687a      	ldr	r2, [r7, #4]
    3556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    355a:	4618      	mov	r0, r3
    355c:	2100      	movs	r1, #0
    355e:	2200      	movs	r2, #0
    3560:	2300      	movs	r3, #0
    3562:	f000 ff51 	bl	4408 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    3566:	f241 3354 	movw	r3, #4948	; 0x1354
    356a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356e:	687a      	ldr	r2, [r7, #4]
    3570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3574:	4618      	mov	r0, r3
    3576:	2100      	movs	r1, #0
    3578:	f04f 32ff 	mov.w	r2, #4294967295
    357c:	2300      	movs	r3, #0
    357e:	f001 f809 	bl	4594 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    3582:	687b      	ldr	r3, [r7, #4]
    3584:	3301      	adds	r3, #1
    3586:	607b      	str	r3, [r7, #4]
    3588:	687b      	ldr	r3, [r7, #4]
    358a:	2b03      	cmp	r3, #3
    358c:	ddc8      	ble.n	3520 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    358e:	3708      	adds	r7, #8
    3590:	46bd      	mov	sp, r7
    3592:	bd80      	pop	{r7, pc}

00003594 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    3594:	b480      	push	{r7}
    3596:	b085      	sub	sp, #20
    3598:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    359a:	2300      	movs	r3, #0
    359c:	60fb      	str	r3, [r7, #12]
    359e:	e0a1      	b.n	36e4 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    35a0:	f640 120c 	movw	r2, #2316	; 0x90c
    35a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35a8:	68f9      	ldr	r1, [r7, #12]
    35aa:	460b      	mov	r3, r1
    35ac:	00db      	lsls	r3, r3, #3
    35ae:	1a5b      	subs	r3, r3, r1
    35b0:	00db      	lsls	r3, r3, #3
    35b2:	4413      	add	r3, r2
    35b4:	68fa      	ldr	r2, [r7, #12]
    35b6:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    35b8:	f640 120c 	movw	r2, #2316	; 0x90c
    35bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35c0:	68f9      	ldr	r1, [r7, #12]
    35c2:	460b      	mov	r3, r1
    35c4:	00db      	lsls	r3, r3, #3
    35c6:	1a5b      	subs	r3, r3, r1
    35c8:	00db      	lsls	r3, r3, #3
    35ca:	4413      	add	r3, r2
    35cc:	3304      	adds	r3, #4
    35ce:	2202      	movs	r2, #2
    35d0:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    35d2:	f640 120c 	movw	r2, #2316	; 0x90c
    35d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35da:	68f9      	ldr	r1, [r7, #12]
    35dc:	460b      	mov	r3, r1
    35de:	00db      	lsls	r3, r3, #3
    35e0:	1a5b      	subs	r3, r3, r1
    35e2:	00db      	lsls	r3, r3, #3
    35e4:	4413      	add	r3, r2
    35e6:	3308      	adds	r3, #8
    35e8:	2201      	movs	r2, #1
    35ea:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    35ec:	f640 120c 	movw	r2, #2316	; 0x90c
    35f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35f4:	68f9      	ldr	r1, [r7, #12]
    35f6:	460b      	mov	r3, r1
    35f8:	00db      	lsls	r3, r3, #3
    35fa:	1a5b      	subs	r3, r3, r1
    35fc:	00db      	lsls	r3, r3, #3
    35fe:	4413      	add	r3, r2
    3600:	330c      	adds	r3, #12
    3602:	2200      	movs	r2, #0
    3604:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    3606:	f640 120c 	movw	r2, #2316	; 0x90c
    360a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    360e:	68f9      	ldr	r1, [r7, #12]
    3610:	460b      	mov	r3, r1
    3612:	00db      	lsls	r3, r3, #3
    3614:	1a5b      	subs	r3, r3, r1
    3616:	00db      	lsls	r3, r3, #3
    3618:	4413      	add	r3, r2
    361a:	3310      	adds	r3, #16
    361c:	2200      	movs	r2, #0
    361e:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    3620:	f240 03c4 	movw	r3, #196	; 0xc4
    3624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3628:	68fa      	ldr	r2, [r7, #12]
    362a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    362e:	f640 120c 	movw	r2, #2316	; 0x90c
    3632:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3636:	68f9      	ldr	r1, [r7, #12]
    3638:	460b      	mov	r3, r1
    363a:	00db      	lsls	r3, r3, #3
    363c:	1a5b      	subs	r3, r3, r1
    363e:	00db      	lsls	r3, r3, #3
    3640:	4413      	add	r3, r2
    3642:	3324      	adds	r3, #36	; 0x24
    3644:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    3646:	f240 4374 	movw	r3, #1140	; 0x474
    364a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    364e:	68fa      	ldr	r2, [r7, #12]
    3650:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3654:	f640 120c 	movw	r2, #2316	; 0x90c
    3658:	f2c2 0200 	movt	r2, #8192	; 0x2000
    365c:	68f9      	ldr	r1, [r7, #12]
    365e:	460b      	mov	r3, r1
    3660:	00db      	lsls	r3, r3, #3
    3662:	1a5b      	subs	r3, r3, r1
    3664:	00db      	lsls	r3, r3, #3
    3666:	4413      	add	r3, r2
    3668:	3328      	adds	r3, #40	; 0x28
    366a:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    366c:	f240 1380 	movw	r3, #384	; 0x180
    3670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3674:	68fa      	ldr	r2, [r7, #12]
    3676:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    367a:	f640 120c 	movw	r2, #2316	; 0x90c
    367e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3682:	68f9      	ldr	r1, [r7, #12]
    3684:	460b      	mov	r3, r1
    3686:	00db      	lsls	r3, r3, #3
    3688:	1a5b      	subs	r3, r3, r1
    368a:	00db      	lsls	r3, r3, #3
    368c:	4413      	add	r3, r2
    368e:	3330      	adds	r3, #48	; 0x30
    3690:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    3692:	f240 1380 	movw	r3, #384	; 0x180
    3696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    369a:	68fa      	ldr	r2, [r7, #12]
    369c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    36a0:	f240 0328 	movw	r3, #40	; 0x28
    36a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36ac:	f640 120c 	movw	r2, #2316	; 0x90c
    36b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36b4:	68f9      	ldr	r1, [r7, #12]
    36b6:	460b      	mov	r3, r1
    36b8:	00db      	lsls	r3, r3, #3
    36ba:	1a5b      	subs	r3, r3, r1
    36bc:	00db      	lsls	r3, r3, #3
    36be:	4413      	add	r3, r2
    36c0:	332c      	adds	r3, #44	; 0x2c
    36c2:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    36c4:	f640 120c 	movw	r2, #2316	; 0x90c
    36c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36cc:	68f9      	ldr	r1, [r7, #12]
    36ce:	460b      	mov	r3, r1
    36d0:	00db      	lsls	r3, r3, #3
    36d2:	1a5b      	subs	r3, r3, r1
    36d4:	00db      	lsls	r3, r3, #3
    36d6:	4413      	add	r3, r2
    36d8:	3334      	adds	r3, #52	; 0x34
    36da:	2200      	movs	r2, #0
    36dc:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    36de:	68fb      	ldr	r3, [r7, #12]
    36e0:	3301      	adds	r3, #1
    36e2:	60fb      	str	r3, [r7, #12]
    36e4:	68fb      	ldr	r3, [r7, #12]
    36e6:	2b2e      	cmp	r3, #46	; 0x2e
    36e8:	f77f af5a 	ble.w	35a0 <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    36ec:	2300      	movs	r3, #0
    36ee:	60fb      	str	r3, [r7, #12]
    36f0:	e028      	b.n	3744 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    36f2:	f240 035c 	movw	r3, #92	; 0x5c
    36f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36fa:	68fa      	ldr	r2, [r7, #12]
    36fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3700:	f640 120c 	movw	r2, #2316	; 0x90c
    3704:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3708:	460b      	mov	r3, r1
    370a:	00db      	lsls	r3, r3, #3
    370c:	1a5b      	subs	r3, r3, r1
    370e:	00db      	lsls	r3, r3, #3
    3710:	4413      	add	r3, r2
    3712:	3304      	adds	r3, #4
    3714:	2201      	movs	r2, #1
    3716:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    3718:	f240 0390 	movw	r3, #144	; 0x90
    371c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3720:	68fa      	ldr	r2, [r7, #12]
    3722:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3726:	f640 120c 	movw	r2, #2316	; 0x90c
    372a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    372e:	460b      	mov	r3, r1
    3730:	00db      	lsls	r3, r3, #3
    3732:	1a5b      	subs	r3, r3, r1
    3734:	00db      	lsls	r3, r3, #3
    3736:	4413      	add	r3, r2
    3738:	3304      	adds	r3, #4
    373a:	2203      	movs	r2, #3
    373c:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    373e:	68fb      	ldr	r3, [r7, #12]
    3740:	3301      	adds	r3, #1
    3742:	60fb      	str	r3, [r7, #12]
    3744:	68fb      	ldr	r3, [r7, #12]
    3746:	2b0c      	cmp	r3, #12
    3748:	ddd3      	ble.n	36f2 <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    374a:	2300      	movs	r3, #0
    374c:	60fb      	str	r3, [r7, #12]
    374e:	e084      	b.n	385a <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3750:	f240 223c 	movw	r2, #572	; 0x23c
    3754:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3758:	68f9      	ldr	r1, [r7, #12]
    375a:	460b      	mov	r3, r1
    375c:	005b      	lsls	r3, r3, #1
    375e:	440b      	add	r3, r1
    3760:	009b      	lsls	r3, r3, #2
    3762:	4413      	add	r3, r2
    3764:	3304      	adds	r3, #4
    3766:	681b      	ldr	r3, [r3, #0]
    3768:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    376a:	f240 223c 	movw	r2, #572	; 0x23c
    376e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3772:	68f9      	ldr	r1, [r7, #12]
    3774:	460b      	mov	r3, r1
    3776:	005b      	lsls	r3, r3, #1
    3778:	440b      	add	r3, r1
    377a:	009b      	lsls	r3, r3, #2
    377c:	4413      	add	r3, r2
    377e:	3308      	adds	r3, #8
    3780:	681b      	ldr	r3, [r3, #0]
    3782:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    3784:	f640 120c 	movw	r2, #2316	; 0x90c
    3788:	f2c2 0200 	movt	r2, #8192	; 0x2000
    378c:	68b9      	ldr	r1, [r7, #8]
    378e:	460b      	mov	r3, r1
    3790:	00db      	lsls	r3, r3, #3
    3792:	1a5b      	subs	r3, r3, r1
    3794:	00db      	lsls	r3, r3, #3
    3796:	4413      	add	r3, r2
    3798:	3310      	adds	r3, #16
    379a:	6818      	ldr	r0, [r3, #0]
    379c:	f640 120c 	movw	r2, #2316	; 0x90c
    37a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37a4:	68b9      	ldr	r1, [r7, #8]
    37a6:	460b      	mov	r3, r1
    37a8:	00db      	lsls	r3, r3, #3
    37aa:	1a5b      	subs	r3, r3, r1
    37ac:	005b      	lsls	r3, r3, #1
    37ae:	4403      	add	r3, r0
    37b0:	3306      	adds	r3, #6
    37b2:	009b      	lsls	r3, r3, #2
    37b4:	4413      	add	r3, r2
    37b6:	687a      	ldr	r2, [r7, #4]
    37b8:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    37ba:	f640 120c 	movw	r2, #2316	; 0x90c
    37be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37c2:	68b9      	ldr	r1, [r7, #8]
    37c4:	460b      	mov	r3, r1
    37c6:	00db      	lsls	r3, r3, #3
    37c8:	1a5b      	subs	r3, r3, r1
    37ca:	00db      	lsls	r3, r3, #3
    37cc:	4413      	add	r3, r2
    37ce:	3310      	adds	r3, #16
    37d0:	681b      	ldr	r3, [r3, #0]
    37d2:	1c58      	adds	r0, r3, #1
    37d4:	f640 120c 	movw	r2, #2316	; 0x90c
    37d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37dc:	68b9      	ldr	r1, [r7, #8]
    37de:	460b      	mov	r3, r1
    37e0:	00db      	lsls	r3, r3, #3
    37e2:	1a5b      	subs	r3, r3, r1
    37e4:	00db      	lsls	r3, r3, #3
    37e6:	4413      	add	r3, r2
    37e8:	3310      	adds	r3, #16
    37ea:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    37ec:	f640 120c 	movw	r2, #2316	; 0x90c
    37f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37f4:	6879      	ldr	r1, [r7, #4]
    37f6:	460b      	mov	r3, r1
    37f8:	00db      	lsls	r3, r3, #3
    37fa:	1a5b      	subs	r3, r3, r1
    37fc:	00db      	lsls	r3, r3, #3
    37fe:	4413      	add	r3, r2
    3800:	330c      	adds	r3, #12
    3802:	6818      	ldr	r0, [r3, #0]
    3804:	f640 120c 	movw	r2, #2316	; 0x90c
    3808:	f2c2 0200 	movt	r2, #8192	; 0x2000
    380c:	6879      	ldr	r1, [r7, #4]
    380e:	460b      	mov	r3, r1
    3810:	00db      	lsls	r3, r3, #3
    3812:	1a5b      	subs	r3, r3, r1
    3814:	005b      	lsls	r3, r3, #1
    3816:	4403      	add	r3, r0
    3818:	3304      	adds	r3, #4
    381a:	009b      	lsls	r3, r3, #2
    381c:	4413      	add	r3, r2
    381e:	68ba      	ldr	r2, [r7, #8]
    3820:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    3822:	f640 120c 	movw	r2, #2316	; 0x90c
    3826:	f2c2 0200 	movt	r2, #8192	; 0x2000
    382a:	6879      	ldr	r1, [r7, #4]
    382c:	460b      	mov	r3, r1
    382e:	00db      	lsls	r3, r3, #3
    3830:	1a5b      	subs	r3, r3, r1
    3832:	00db      	lsls	r3, r3, #3
    3834:	4413      	add	r3, r2
    3836:	330c      	adds	r3, #12
    3838:	681b      	ldr	r3, [r3, #0]
    383a:	1c58      	adds	r0, r3, #1
    383c:	f640 120c 	movw	r2, #2316	; 0x90c
    3840:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3844:	6879      	ldr	r1, [r7, #4]
    3846:	460b      	mov	r3, r1
    3848:	00db      	lsls	r3, r3, #3
    384a:	1a5b      	subs	r3, r3, r1
    384c:	00db      	lsls	r3, r3, #3
    384e:	4413      	add	r3, r2
    3850:	330c      	adds	r3, #12
    3852:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3854:	68fb      	ldr	r3, [r7, #12]
    3856:	3301      	adds	r3, #1
    3858:	60fb      	str	r3, [r7, #12]
    385a:	f240 233c 	movw	r3, #572	; 0x23c
    385e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3862:	681a      	ldr	r2, [r3, #0]
    3864:	68fb      	ldr	r3, [r7, #12]
    3866:	429a      	cmp	r2, r3
    3868:	f73f af72 	bgt.w	3750 <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    386c:	3714      	adds	r7, #20
    386e:	46bd      	mov	sp, r7
    3870:	f85d 7b04 	ldr.w	r7, [sp], #4
    3874:	4770      	bx	lr
    3876:	bf00      	nop

00003878 <vSensor>:

void vSensor( void * pvParameter )
{
    3878:	b580      	push	{r7, lr}
    387a:	b08c      	sub	sp, #48	; 0x30
    387c:	af02      	add	r7, sp, #8
    387e:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    3880:	f241 3354 	movw	r3, #4948	; 0x1354
    3884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3888:	685b      	ldr	r3, [r3, #4]
    388a:	4618      	mov	r0, r3
    388c:	2100      	movs	r1, #0
    388e:	f04f 32ff 	mov.w	r2, #4294967295
    3892:	2300      	movs	r3, #0
    3894:	f000 fe7e 	bl	4594 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3898:	e061      	b.n	395e <vSensor+0xe6>
        {
            if(boolFlag == 0)
    389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    389c:	2b00      	cmp	r3, #0
    389e:	d100      	bne.n	38a2 <vSensor+0x2a>
                continue;
    38a0:	e05d      	b.n	395e <vSensor+0xe6>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    38a2:	f7ff fddf 	bl	3464 <pxEventGenericReceive>
    38a6:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    38a8:	6a38      	ldr	r0, [r7, #32]
    38aa:	f7ff f873 	bl	2994 <xEventGetpxDestination>
    38ae:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    38b0:	6a38      	ldr	r0, [r7, #32]
    38b2:	f7ff f887 	bl	29c4 <xEventGetxData>
    38b6:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    38b8:	6a38      	ldr	r0, [r7, #32]
    38ba:	f7ff f877 	bl	29ac <xEventGetxTag>
    38be:	6178      	str	r0, [r7, #20]
            xPeriod= xContexts[xMyFlag].xPeriod;
    38c0:	f640 120c 	movw	r2, #2316	; 0x90c
    38c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38c8:	69f9      	ldr	r1, [r7, #28]
    38ca:	460b      	mov	r3, r1
    38cc:	00db      	lsls	r3, r3, #3
    38ce:	1a5b      	subs	r3, r3, r1
    38d0:	00db      	lsls	r3, r3, #3
    38d2:	4413      	add	r3, r2
    38d4:	332c      	adds	r3, #44	; 0x2c
    38d6:	681b      	ldr	r3, [r3, #0]
    38d8:	613b      	str	r3, [r7, #16]
            xContexts[xMyFlag].xCount ++;
    38da:	f640 120c 	movw	r2, #2316	; 0x90c
    38de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38e2:	69f9      	ldr	r1, [r7, #28]
    38e4:	460b      	mov	r3, r1
    38e6:	00db      	lsls	r3, r3, #3
    38e8:	1a5b      	subs	r3, r3, r1
    38ea:	00db      	lsls	r3, r3, #3
    38ec:	4413      	add	r3, r2
    38ee:	3308      	adds	r3, #8
    38f0:	681b      	ldr	r3, [r3, #0]
    38f2:	1c58      	adds	r0, r3, #1
    38f4:	f640 120c 	movw	r2, #2316	; 0x90c
    38f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38fc:	69f9      	ldr	r1, [r7, #28]
    38fe:	460b      	mov	r3, r1
    3900:	00db      	lsls	r3, r3, #3
    3902:	1a5b      	subs	r3, r3, r1
    3904:	00db      	lsls	r3, r3, #3
    3906:	4413      	add	r3, r2
    3908:	3308      	adds	r3, #8
    390a:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag->xTimestamp + INPUT;   
    390c:	697b      	ldr	r3, [r7, #20]
    390e:	685b      	ldr	r3, [r3, #4]
    3910:	3303      	adds	r3, #3
    3912:	60fb      	str	r3, [r7, #12]
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    3914:	f240 635c 	movw	r3, #1628	; 0x65c
    3918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    391c:	68fa      	ldr	r2, [r7, #12]
    391e:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    3920:	69f8      	ldr	r0, [r7, #28]
    3922:	f013 fe95 	bl	17650 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3926:	f001 fce9 	bl	52fc <xTaskGetTickCount>
    392a:	4603      	mov	r3, r0
    392c:	4618      	mov	r0, r3
    392e:	f013 fe8f 	bl	17650 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3932:	f640 120c 	movw	r2, #2316	; 0x90c
    3936:	f2c2 0200 	movt	r2, #8192	; 0x2000
    393a:	69f9      	ldr	r1, [r7, #28]
    393c:	460b      	mov	r3, r1
    393e:	00db      	lsls	r3, r3, #3
    3940:	1a5b      	subs	r3, r3, r1
    3942:	00db      	lsls	r3, r3, #3
    3944:	4413      	add	r3, r2
    3946:	3328      	adds	r3, #40	; 0x28
    3948:	681b      	ldr	r3, [r3, #0]
    394a:	69b8      	ldr	r0, [r7, #24]
    394c:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
    394e:	69bb      	ldr	r3, [r7, #24]
    3950:	9300      	str	r3, [sp, #0]
    3952:	6a38      	ldr	r0, [r7, #32]
    3954:	69f9      	ldr	r1, [r7, #28]
    3956:	693a      	ldr	r2, [r7, #16]
    3958:	68fb      	ldr	r3, [r7, #12]
    395a:	f7ff fda1 	bl	34a0 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    395e:	f7fe ffd3 	bl	2908 <xIsERLNull>
    3962:	6278      	str	r0, [r7, #36]	; 0x24
    3964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3966:	f1b3 3fff 	cmp.w	r3, #4294967295
    396a:	d196      	bne.n	389a <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    396c:	f241 3354 	movw	r3, #4948	; 0x1354
    3970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3974:	681b      	ldr	r3, [r3, #0]
    3976:	4618      	mov	r0, r3
    3978:	2100      	movs	r1, #0
    397a:	2200      	movs	r2, #0
    397c:	2300      	movs	r3, #0
    397e:	f000 fd43 	bl	4408 <xQueueGenericSend>
    }
    3982:	e77d      	b.n	3880 <vSensor+0x8>

00003984 <vServant>:
}

void vServant( void * pvParameter )
{
    3984:	b580      	push	{r7, lr}
    3986:	b08c      	sub	sp, #48	; 0x30
    3988:	af02      	add	r7, sp, #8
    398a:	6078      	str	r0, [r7, #4]
    struct eventData * xMyData;
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    398c:	f241 3354 	movw	r3, #4948	; 0x1354
    3990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3994:	689b      	ldr	r3, [r3, #8]
    3996:	4618      	mov	r0, r3
    3998:	2100      	movs	r1, #0
    399a:	f04f 32ff 	mov.w	r2, #4294967295
    399e:	2300      	movs	r3, #0
    39a0:	f000 fdf8 	bl	4594 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    39a4:	e098      	b.n	3ad8 <vServant+0x154>
        {
            if(boolFlag == 0)
    39a6:	6a3b      	ldr	r3, [r7, #32]
    39a8:	2b00      	cmp	r3, #0
    39aa:	d100      	bne.n	39ae <vServant+0x2a>
                continue;
    39ac:	e094      	b.n	3ad8 <vServant+0x154>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    39ae:	f7ff fd59 	bl	3464 <pxEventGenericReceive>
    39b2:	61f8      	str	r0, [r7, #28]
            xMyFlag = xEventGetpxDestination( pxEvent );
    39b4:	69f8      	ldr	r0, [r7, #28]
    39b6:	f7fe ffed 	bl	2994 <xEventGetpxDestination>
    39ba:	61b8      	str	r0, [r7, #24]
            xMyData = xEventGetxData( pxEvent );
    39bc:	69f8      	ldr	r0, [r7, #28]
    39be:	f7ff f801 	bl	29c4 <xEventGetxData>
    39c2:	6178      	str	r0, [r7, #20]
            xMyTag = xEventGetxTag( pxEvent );
    39c4:	69f8      	ldr	r0, [r7, #28]
    39c6:	f7fe fff1 	bl	29ac <xEventGetxTag>
    39ca:	6138      	str	r0, [r7, #16]
            xPeriod= xContexts[xMyFlag].xPeriod;
    39cc:	f640 120c 	movw	r2, #2316	; 0x90c
    39d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39d4:	69b9      	ldr	r1, [r7, #24]
    39d6:	460b      	mov	r3, r1
    39d8:	00db      	lsls	r3, r3, #3
    39da:	1a5b      	subs	r3, r3, r1
    39dc:	00db      	lsls	r3, r3, #3
    39de:	4413      	add	r3, r2
    39e0:	332c      	adds	r3, #44	; 0x2c
    39e2:	681b      	ldr	r3, [r3, #0]
    39e4:	60fb      	str	r3, [r7, #12]
            xContexts[xMyFlag].xCount ++;
    39e6:	f640 120c 	movw	r2, #2316	; 0x90c
    39ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39ee:	69b9      	ldr	r1, [r7, #24]
    39f0:	460b      	mov	r3, r1
    39f2:	00db      	lsls	r3, r3, #3
    39f4:	1a5b      	subs	r3, r3, r1
    39f6:	00db      	lsls	r3, r3, #3
    39f8:	4413      	add	r3, r2
    39fa:	3308      	adds	r3, #8
    39fc:	681b      	ldr	r3, [r3, #0]
    39fe:	1c58      	adds	r0, r3, #1
    3a00:	f640 120c 	movw	r2, #2316	; 0x90c
    3a04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a08:	69b9      	ldr	r1, [r7, #24]
    3a0a:	460b      	mov	r3, r1
    3a0c:	00db      	lsls	r3, r3, #3
    3a0e:	1a5b      	subs	r3, r3, r1
    3a10:	00db      	lsls	r3, r3, #3
    3a12:	4413      	add	r3, r2
    3a14:	3308      	adds	r3, #8
    3a16:	6018      	str	r0, [r3, #0]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    3a18:	f640 120c 	movw	r2, #2316	; 0x90c
    3a1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a20:	69b9      	ldr	r1, [r7, #24]
    3a22:	460b      	mov	r3, r1
    3a24:	00db      	lsls	r3, r3, #3
    3a26:	1a5b      	subs	r3, r3, r1
    3a28:	00db      	lsls	r3, r3, #3
    3a2a:	4413      	add	r3, r2
    3a2c:	331c      	adds	r3, #28
    3a2e:	681b      	ldr	r3, [r3, #0]
    3a30:	60bb      	str	r3, [r7, #8]
            switch(xContexts[pxDestination].xType)
    3a32:	f640 120c 	movw	r2, #2316	; 0x90c
    3a36:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a3a:	68b9      	ldr	r1, [r7, #8]
    3a3c:	460b      	mov	r3, r1
    3a3e:	00db      	lsls	r3, r3, #3
    3a40:	1a5b      	subs	r3, r3, r1
    3a42:	00db      	lsls	r3, r3, #3
    3a44:	4413      	add	r3, r2
    3a46:	3304      	adds	r3, #4
    3a48:	681b      	ldr	r3, [r3, #0]
    3a4a:	2b02      	cmp	r3, #2
    3a4c:	d002      	beq.n	3a54 <vServant+0xd0>
    3a4e:	2b03      	cmp	r3, #3
    3a50:	d011      	beq.n	3a76 <vServant+0xf2>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
                    break;
                default:
                    break;
    3a52:	e022      	b.n	3a9a <vServant+0x116>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag->xTimestamp + xContexts[xMyFlag].xLet;
    3a54:	693b      	ldr	r3, [r7, #16]
    3a56:	6858      	ldr	r0, [r3, #4]
    3a58:	f640 120c 	movw	r2, #2316	; 0x90c
    3a5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a60:	69b9      	ldr	r1, [r7, #24]
    3a62:	460b      	mov	r3, r1
    3a64:	00db      	lsls	r3, r3, #3
    3a66:	1a5b      	subs	r3, r3, r1
    3a68:	00db      	lsls	r3, r3, #3
    3a6a:	4413      	add	r3, r2
    3a6c:	3324      	adds	r3, #36	; 0x24
    3a6e:	681b      	ldr	r3, [r3, #0]
    3a70:	4403      	add	r3, r0
    3a72:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3a74:	e011      	b.n	3a9a <vServant+0x116>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
    3a76:	f640 120c 	movw	r2, #2316	; 0x90c
    3a7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a7e:	69b9      	ldr	r1, [r7, #24]
    3a80:	460b      	mov	r3, r1
    3a82:	00db      	lsls	r3, r3, #3
    3a84:	1a5b      	subs	r3, r3, r1
    3a86:	00db      	lsls	r3, r3, #3
    3a88:	4413      	add	r3, r2
    3a8a:	3308      	adds	r3, #8
    3a8c:	681b      	ldr	r3, [r3, #0]
    3a8e:	68fa      	ldr	r2, [r7, #12]
    3a90:	fb02 f303 	mul.w	r3, r2, r3
    3a94:	3b03      	subs	r3, #3
    3a96:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3a98:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3a9a:	69b8      	ldr	r0, [r7, #24]
    3a9c:	f013 fdd8 	bl	17650 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3aa0:	f001 fc2c 	bl	52fc <xTaskGetTickCount>
    3aa4:	4603      	mov	r3, r0
    3aa6:	4618      	mov	r0, r3
    3aa8:	f013 fdd2 	bl	17650 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3aac:	f640 120c 	movw	r2, #2316	; 0x90c
    3ab0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ab4:	69b9      	ldr	r1, [r7, #24]
    3ab6:	460b      	mov	r3, r1
    3ab8:	00db      	lsls	r3, r3, #3
    3aba:	1a5b      	subs	r3, r3, r1
    3abc:	00db      	lsls	r3, r3, #3
    3abe:	4413      	add	r3, r2
    3ac0:	3328      	adds	r3, #40	; 0x28
    3ac2:	681b      	ldr	r3, [r3, #0]
    3ac4:	6978      	ldr	r0, [r7, #20]
    3ac6:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
    3ac8:	697b      	ldr	r3, [r7, #20]
    3aca:	9300      	str	r3, [sp, #0]
    3acc:	69f8      	ldr	r0, [r7, #28]
    3ace:	69b9      	ldr	r1, [r7, #24]
    3ad0:	68fa      	ldr	r2, [r7, #12]
    3ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ad4:	f7ff fce4 	bl	34a0 <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3ad8:	f7fe ff16 	bl	2908 <xIsERLNull>
    3adc:	6238      	str	r0, [r7, #32]
    3ade:	6a3b      	ldr	r3, [r7, #32]
    3ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ae4:	f47f af5f 	bne.w	39a6 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3ae8:	f241 3354 	movw	r3, #4948	; 0x1354
    3aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3af0:	681b      	ldr	r3, [r3, #0]
    3af2:	4618      	mov	r0, r3
    3af4:	2100      	movs	r1, #0
    3af6:	2200      	movs	r2, #0
    3af8:	2300      	movs	r3, #0
    3afa:	f000 fc85 	bl	4408 <xQueueGenericSend>
    }
    3afe:	e745      	b.n	398c <vServant+0x8>

00003b00 <vActuator>:

}

void vActuator( void * pvParameter )
{
    3b00:	b580      	push	{r7, lr}
    3b02:	b08c      	sub	sp, #48	; 0x30
    3b04:	af02      	add	r7, sp, #8
    3b06:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3b08:	f241 3354 	movw	r3, #4948	; 0x1354
    3b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b10:	68db      	ldr	r3, [r3, #12]
    3b12:	4618      	mov	r0, r3
    3b14:	2100      	movs	r1, #0
    3b16:	f04f 32ff 	mov.w	r2, #4294967295
    3b1a:	2300      	movs	r3, #0
    3b1c:	f000 fd3a 	bl	4594 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3b20:	e05b      	b.n	3bda <vActuator+0xda>
        {
            if(boolFlag == 0)
    3b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b24:	2b00      	cmp	r3, #0
    3b26:	d100      	bne.n	3b2a <vActuator+0x2a>
                continue;
    3b28:	e057      	b.n	3bda <vActuator+0xda>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3b2a:	f7ff fc9b 	bl	3464 <pxEventGenericReceive>
    3b2e:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    3b30:	6a38      	ldr	r0, [r7, #32]
    3b32:	f7fe ff2f 	bl	2994 <xEventGetpxDestination>
    3b36:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    3b38:	6a38      	ldr	r0, [r7, #32]
    3b3a:	f7fe ff43 	bl	29c4 <xEventGetxData>
    3b3e:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    3b40:	6a38      	ldr	r0, [r7, #32]
    3b42:	f7fe ff33 	bl	29ac <xEventGetxTag>
    3b46:	6178      	str	r0, [r7, #20]
            xPeriod = xContexts[xMyFlag].xPeriod;
    3b48:	f640 120c 	movw	r2, #2316	; 0x90c
    3b4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b50:	69f9      	ldr	r1, [r7, #28]
    3b52:	460b      	mov	r3, r1
    3b54:	00db      	lsls	r3, r3, #3
    3b56:	1a5b      	subs	r3, r3, r1
    3b58:	00db      	lsls	r3, r3, #3
    3b5a:	4413      	add	r3, r2
    3b5c:	332c      	adds	r3, #44	; 0x2c
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	613b      	str	r3, [r7, #16]
            xContexts[xMyFlag].xCount ++;
    3b62:	f640 120c 	movw	r2, #2316	; 0x90c
    3b66:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b6a:	69f9      	ldr	r1, [r7, #28]
    3b6c:	460b      	mov	r3, r1
    3b6e:	00db      	lsls	r3, r3, #3
    3b70:	1a5b      	subs	r3, r3, r1
    3b72:	00db      	lsls	r3, r3, #3
    3b74:	4413      	add	r3, r2
    3b76:	3308      	adds	r3, #8
    3b78:	681b      	ldr	r3, [r3, #0]
    3b7a:	1c58      	adds	r0, r3, #1
    3b7c:	f640 120c 	movw	r2, #2316	; 0x90c
    3b80:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b84:	69f9      	ldr	r1, [r7, #28]
    3b86:	460b      	mov	r3, r1
    3b88:	00db      	lsls	r3, r3, #3
    3b8a:	1a5b      	subs	r3, r3, r1
    3b8c:	00db      	lsls	r3, r3, #3
    3b8e:	4413      	add	r3, r2
    3b90:	3308      	adds	r3, #8
    3b92:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag->xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3b94:	697b      	ldr	r3, [r7, #20]
    3b96:	685b      	ldr	r3, [r3, #4]
    3b98:	3303      	adds	r3, #3
    3b9a:	60fb      	str	r3, [r7, #12]
            vPrintNumber(xMyFlag);
    3b9c:	69f8      	ldr	r0, [r7, #28]
    3b9e:	f013 fd57 	bl	17650 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3ba2:	f001 fbab 	bl	52fc <xTaskGetTickCount>
    3ba6:	4603      	mov	r3, r0
    3ba8:	4618      	mov	r0, r3
    3baa:	f013 fd51 	bl	17650 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3bae:	f640 120c 	movw	r2, #2316	; 0x90c
    3bb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bb6:	69f9      	ldr	r1, [r7, #28]
    3bb8:	460b      	mov	r3, r1
    3bba:	00db      	lsls	r3, r3, #3
    3bbc:	1a5b      	subs	r3, r3, r1
    3bbe:	00db      	lsls	r3, r3, #3
    3bc0:	4413      	add	r3, r2
    3bc2:	3328      	adds	r3, #40	; 0x28
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	69b8      	ldr	r0, [r7, #24]
    3bc8:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
    3bca:	69bb      	ldr	r3, [r7, #24]
    3bcc:	9300      	str	r3, [sp, #0]
    3bce:	6a38      	ldr	r0, [r7, #32]
    3bd0:	69f9      	ldr	r1, [r7, #28]
    3bd2:	693a      	ldr	r2, [r7, #16]
    3bd4:	68fb      	ldr	r3, [r7, #12]
    3bd6:	f7ff fc63 	bl	34a0 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3bda:	f7fe fe95 	bl	2908 <xIsERLNull>
    3bde:	6278      	str	r0, [r7, #36]	; 0x24
    3be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3be2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3be6:	d19c      	bne.n	3b22 <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3be8:	f241 3354 	movw	r3, #4948	; 0x1354
    3bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bf0:	681b      	ldr	r3, [r3, #0]
    3bf2:	4618      	mov	r0, r3
    3bf4:	2100      	movs	r1, #0
    3bf6:	2200      	movs	r2, #0
    3bf8:	2300      	movs	r3, #0
    3bfa:	f000 fc05 	bl	4408 <xQueueGenericSend>
    }
    3bfe:	e783      	b.n	3b08 <vActuator+0x8>

00003c00 <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3c00:	b580      	push	{r7, lr}
    3c02:	b084      	sub	sp, #16
    3c04:	af00      	add	r7, sp, #0
    3c06:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3c08:	f241 3354 	movw	r3, #4948	; 0x1354
    3c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c10:	681b      	ldr	r3, [r3, #0]
    3c12:	4618      	mov	r0, r3
    3c14:	2100      	movs	r1, #0
    3c16:	f04f 32ff 	mov.w	r2, #4294967295
    3c1a:	2300      	movs	r3, #0
    3c1c:	f000 fcba 	bl	4594 <xQueueGenericReceive>
        vPrintString("Actuator\n\r");
    3c20:	f648 20a8 	movw	r0, #35496	; 0x8aa8
    3c24:	f2c0 0001 	movt	r0, #1
    3c28:	f013 fcf8 	bl	1761c <vPrintString>

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventScatter();
    3c2c:	f7ff f88c 	bl	2d48 <vEventGenericScatter>

        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3c30:	f7ff f9aa 	bl	2f88 <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3c34:	f7ff fb9a 	bl	336c <xEventGenericSerialize>
    3c38:	60f8      	str	r0, [r7, #12]
        if(pxDestination != -1)
    3c3a:	68fb      	ldr	r3, [r7, #12]
    3c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c40:	d036      	beq.n	3cb0 <vR_Servant+0xb0>
        {
            switch(xContexts[pxDestination].xType)
    3c42:	f640 120c 	movw	r2, #2316	; 0x90c
    3c46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c4a:	68f9      	ldr	r1, [r7, #12]
    3c4c:	460b      	mov	r3, r1
    3c4e:	00db      	lsls	r3, r3, #3
    3c50:	1a5b      	subs	r3, r3, r1
    3c52:	00db      	lsls	r3, r3, #3
    3c54:	4413      	add	r3, r2
    3c56:	3304      	adds	r3, #4
    3c58:	681b      	ldr	r3, [r3, #0]
    3c5a:	2b02      	cmp	r3, #2
    3c5c:	d010      	beq.n	3c80 <vR_Servant+0x80>
    3c5e:	2b03      	cmp	r3, #3
    3c60:	d01a      	beq.n	3c98 <vR_Servant+0x98>
    3c62:	2b01      	cmp	r3, #1
    3c64:	d000      	beq.n	3c68 <vR_Servant+0x68>
                    break;
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
                    break;
                default:
                    break;
    3c66:	e023      	b.n	3cb0 <vR_Servant+0xb0>
        if(pxDestination != -1)
        {
            switch(xContexts[pxDestination].xType)
            {
                case 1:
                    xSemaphoreGive( xBinarySemaphore[1] );
    3c68:	f241 3354 	movw	r3, #4948	; 0x1354
    3c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c70:	685b      	ldr	r3, [r3, #4]
    3c72:	4618      	mov	r0, r3
    3c74:	2100      	movs	r1, #0
    3c76:	2200      	movs	r2, #0
    3c78:	2300      	movs	r3, #0
    3c7a:	f000 fbc5 	bl	4408 <xQueueGenericSend>
                    break;
    3c7e:	e017      	b.n	3cb0 <vR_Servant+0xb0>
                case 2:
                    xSemaphoreGive( xBinarySemaphore[2] );
    3c80:	f241 3354 	movw	r3, #4948	; 0x1354
    3c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c88:	689b      	ldr	r3, [r3, #8]
    3c8a:	4618      	mov	r0, r3
    3c8c:	2100      	movs	r1, #0
    3c8e:	2200      	movs	r2, #0
    3c90:	2300      	movs	r3, #0
    3c92:	f000 fbb9 	bl	4408 <xQueueGenericSend>
                    break;
    3c96:	e00b      	b.n	3cb0 <vR_Servant+0xb0>
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
    3c98:	f241 3354 	movw	r3, #4948	; 0x1354
    3c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca0:	68db      	ldr	r3, [r3, #12]
    3ca2:	4618      	mov	r0, r3
    3ca4:	2100      	movs	r1, #0
    3ca6:	2200      	movs	r2, #0
    3ca8:	2300      	movs	r3, #0
    3caa:	f000 fbad 	bl	4408 <xQueueGenericSend>
                    break;
    3cae:	bf00      	nop
                default:
                    break;
                    // no event available 
            }
        }
    }
    3cb0:	e7aa      	b.n	3c08 <vR_Servant+0x8>
    3cb2:	bf00      	nop

00003cb4 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    3cb4:	b480      	push	{r7}
    3cb6:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    3cb8:	f242 032f 	movw	r3, #8239	; 0x202f
    3cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cc0:	2200      	movs	r2, #0
    3cc2:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    3cc4:	f242 032e 	movw	r3, #8238	; 0x202e
    3cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ccc:	2201      	movs	r2, #1
    3cce:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    3cd0:	f242 0325 	movw	r3, #8229	; 0x2025
    3cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd8:	2207      	movs	r2, #7
    3cda:	701a      	strb	r2, [r3, #0]
}
    3cdc:	46bd      	mov	sp, r7
    3cde:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ce2:	4770      	bx	lr

00003ce4 <PapabenchInit>:
extern void ir_init();
extern void estimator_init();
extern void fbw_init();

void PapabenchInit()
{
    3ce4:	b580      	push	{r7, lr}
    3ce6:	af00      	add	r7, sp, #0
    timer_init();
    3ce8:	f7ff ffe4 	bl	3cb4 <timer_init>
    modem_init();
    3cec:	f00d f9a4 	bl	11038 <modem_init>
    adc_init();
    3cf0:	f00d fcee 	bl	116d0 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(ADC_CHANNEL_BAT, &buf_bat);
#endif
    spi_init();
    3cf4:	f00d fc60 	bl	115b8 <spi_init>
    link_fbw_init();
    3cf8:	f00d fabc 	bl	11274 <link_fbw_init>
    gps_init();
    3cfc:	f00d fd98 	bl	11830 <gps_init>
    nav_init();
    3d00:	f011 f890 	bl	14e24 <nav_init>
    ir_init();
    3d04:	f00e f83c 	bl	11d80 <ir_init>
    estimator_init();
    3d08:	f011 fa72 	bl	151f0 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    3d0c:	bd80      	pop	{r7, pc}
    3d0e:	bf00      	nop

00003d10 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3d10:	b480      	push	{r7}
    3d12:	b083      	sub	sp, #12
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3d18:	370c      	adds	r7, #12
    3d1a:	46bd      	mov	sp, r7
    3d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d20:	4770      	bx	lr
    3d22:	bf00      	nop

00003d24 <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3d24:	b580      	push	{r7, lr}
    3d26:	b082      	sub	sp, #8
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3d2c:	f012 fa3c 	bl	161a8 <last_radio_from_ppm>
}
    3d30:	3708      	adds	r7, #8
    3d32:	46bd      	mov	sp, r7
    3d34:	bd80      	pop	{r7, pc}
    3d36:	bf00      	nop

00003d38 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3d38:	b480      	push	{r7}
    3d3a:	b083      	sub	sp, #12
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3d40:	370c      	adds	r7, #12
    3d42:	46bd      	mov	sp, r7
    3d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d48:	4770      	bx	lr
    3d4a:	bf00      	nop

00003d4c <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3d4c:	b480      	push	{r7}
    3d4e:	b083      	sub	sp, #12
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
}
    3d54:	370c      	adds	r7, #12
    3d56:	46bd      	mov	sp, r7
    3d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d5c:	4770      	bx	lr
    3d5e:	bf00      	nop

00003d60 <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3d60:	b480      	push	{r7}
    3d62:	b083      	sub	sp, #12
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
}
    3d68:	370c      	adds	r7, #12
    3d6a:	46bd      	mov	sp, r7
    3d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d70:	4770      	bx	lr
    3d72:	bf00      	nop

00003d74 <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3d74:	b580      	push	{r7, lr}
    3d76:	b082      	sub	sp, #8
    3d78:	af00      	add	r7, sp, #0
    3d7a:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3d7c:	f012 fdce 	bl	1691c <to_autopilot_from_last_radio>
}
    3d80:	3708      	adds	r7, #8
    3d82:	46bd      	mov	sp, r7
    3d84:	bd80      	pop	{r7, pc}
    3d86:	bf00      	nop

00003d88 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b082      	sub	sp, #8
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3d90:	f012 fd02 	bl	16798 <spi_reset>
}
    3d94:	3708      	adds	r7, #8
    3d96:	46bd      	mov	sp, r7
    3d98:	bd80      	pop	{r7, pc}
    3d9a:	bf00      	nop

00003d9c <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3d9c:	b480      	push	{r7}
    3d9e:	b083      	sub	sp, #12
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
}
    3da4:	370c      	adds	r7, #12
    3da6:	46bd      	mov	sp, r7
    3da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dac:	4770      	bx	lr
    3dae:	bf00      	nop

00003db0 <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3db0:	b480      	push	{r7}
    3db2:	b083      	sub	sp, #12
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
}
    3db8:	370c      	adds	r7, #12
    3dba:	46bd      	mov	sp, r7
    3dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc0:	4770      	bx	lr
    3dc2:	bf00      	nop

00003dc4 <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3dc4:	b580      	push	{r7, lr}
    3dc6:	b082      	sub	sp, #8
    3dc8:	af00      	add	r7, sp, #0
    3dca:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3dcc:	f012 ff4a 	bl	16c64 <check_mega128_values_task>
}
    3dd0:	3708      	adds	r7, #8
    3dd2:	46bd      	mov	sp, r7
    3dd4:	bd80      	pop	{r7, pc}
    3dd6:	bf00      	nop

00003dd8 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3dd8:	b480      	push	{r7}
    3dda:	b083      	sub	sp, #12
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
}
    3de0:	370c      	adds	r7, #12
    3de2:	46bd      	mov	sp, r7
    3de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3de8:	4770      	bx	lr
    3dea:	bf00      	nop

00003dec <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3dec:	b480      	push	{r7}
    3dee:	b083      	sub	sp, #12
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
}
    3df4:	370c      	adds	r7, #12
    3df6:	46bd      	mov	sp, r7
    3df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dfc:	4770      	bx	lr
    3dfe:	bf00      	nop

00003e00 <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3e00:	b580      	push	{r7, lr}
    3e02:	b082      	sub	sp, #8
    3e04:	af00      	add	r7, sp, #0
    3e06:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3e08:	f013 f820 	bl	16e4c <servo_transmit>
}
    3e0c:	3708      	adds	r7, #8
    3e0e:	46bd      	mov	sp, r7
    3e10:	bd80      	pop	{r7, pc}
    3e12:	bf00      	nop

00003e14 <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3e14:	b480      	push	{r7}
    3e16:	b083      	sub	sp, #12
    3e18:	af00      	add	r7, sp, #0
    3e1a:	6078      	str	r0, [r7, #4]
}
    3e1c:	370c      	adds	r7, #12
    3e1e:	46bd      	mov	sp, r7
    3e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e24:	4770      	bx	lr
    3e26:	bf00      	nop

00003e28 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3e28:	b480      	push	{r7}
    3e2a:	b083      	sub	sp, #12
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	6078      	str	r0, [r7, #4]
}
    3e30:	370c      	adds	r7, #12
    3e32:	46bd      	mov	sp, r7
    3e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop

00003e3c <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3e3c:	b580      	push	{r7, lr}
    3e3e:	b082      	sub	sp, #8
    3e40:	af00      	add	r7, sp, #0
    3e42:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3e44:	f012 fee8 	bl	16c18 <check_failsafe_task>
}
    3e48:	3708      	adds	r7, #8
    3e4a:	46bd      	mov	sp, r7
    3e4c:	bd80      	pop	{r7, pc}
    3e4e:	bf00      	nop

00003e50 <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3e50:	b480      	push	{r7}
    3e52:	b083      	sub	sp, #12
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
}
    3e58:	370c      	adds	r7, #12
    3e5a:	46bd      	mov	sp, r7
    3e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e60:	4770      	bx	lr
    3e62:	bf00      	nop

00003e64 <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3e64:	b480      	push	{r7}
    3e66:	b083      	sub	sp, #12
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
}
    3e6c:	370c      	adds	r7, #12
    3e6e:	46bd      	mov	sp, r7
    3e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e74:	4770      	bx	lr
    3e76:	bf00      	nop

00003e78 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3e78:	b580      	push	{r7, lr}
    3e7a:	b082      	sub	sp, #8
    3e7c:	af00      	add	r7, sp, #0
    3e7e:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3e80:	f009 f91c 	bl	d0bc <radio_control_task>
}
    3e84:	3708      	adds	r7, #8
    3e86:	46bd      	mov	sp, r7
    3e88:	bd80      	pop	{r7, pc}
    3e8a:	bf00      	nop

00003e8c <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3e8c:	b580      	push	{r7, lr}
    3e8e:	b082      	sub	sp, #8
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3e94:	f00d ffcc 	bl	11e30 <ir_gain_calib>
}
    3e98:	3708      	adds	r7, #8
    3e9a:	46bd      	mov	sp, r7
    3e9c:	bd80      	pop	{r7, pc}
    3e9e:	bf00      	nop

00003ea0 <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3ea0:	b480      	push	{r7}
    3ea2:	b083      	sub	sp, #12
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	6078      	str	r0, [r7, #4]
}
    3ea8:	370c      	adds	r7, #12
    3eaa:	46bd      	mov	sp, r7
    3eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eb0:	4770      	bx	lr
    3eb2:	bf00      	nop

00003eb4 <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3eb4:	b480      	push	{r7}
    3eb6:	b083      	sub	sp, #12
    3eb8:	af00      	add	r7, sp, #0
    3eba:	6078      	str	r0, [r7, #4]
}
    3ebc:	370c      	adds	r7, #12
    3ebe:	46bd      	mov	sp, r7
    3ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec4:	4770      	bx	lr
    3ec6:	bf00      	nop

00003ec8 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3ec8:	b580      	push	{r7, lr}
    3eca:	b082      	sub	sp, #8
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3ed0:	f00d ff70 	bl	11db4 <ir_update>
}
    3ed4:	3708      	adds	r7, #8
    3ed6:	46bd      	mov	sp, r7
    3ed8:	bd80      	pop	{r7, pc}
    3eda:	bf00      	nop

00003edc <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3ee4:	f011 f9ee 	bl	152c4 <estimator_update_state_infrared>
}
    3ee8:	3708      	adds	r7, #8
    3eea:	46bd      	mov	sp, r7
    3eec:	bd80      	pop	{r7, pc}
    3eee:	bf00      	nop

00003ef0 <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3ef0:	b580      	push	{r7, lr}
    3ef2:	b082      	sub	sp, #8
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3ef8:	f00d ffca 	bl	11e90 <roll_pitch_pid_run>
}
    3efc:	3708      	adds	r7, #8
    3efe:	46bd      	mov	sp, r7
    3f00:	bd80      	pop	{r7, pc}
    3f02:	bf00      	nop

00003f04 <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3f04:	b480      	push	{r7}
    3f06:	b083      	sub	sp, #12
    3f08:	af00      	add	r7, sp, #0
    3f0a:	6078      	str	r0, [r7, #4]
}
    3f0c:	370c      	adds	r7, #12
    3f0e:	46bd      	mov	sp, r7
    3f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f14:	4770      	bx	lr
    3f16:	bf00      	nop

00003f18 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3f18:	b480      	push	{r7}
    3f1a:	b083      	sub	sp, #12
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
}
    3f20:	370c      	adds	r7, #12
    3f22:	46bd      	mov	sp, r7
    3f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f28:	4770      	bx	lr
    3f2a:	bf00      	nop

00003f2c <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3f2c:	b580      	push	{r7, lr}
    3f2e:	b082      	sub	sp, #8
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3f34:	f00d f9b0 	bl	11298 <link_fbw_send>
}
    3f38:	3708      	adds	r7, #8
    3f3a:	46bd      	mov	sp, r7
    3f3c:	bd80      	pop	{r7, pc}
    3f3e:	bf00      	nop

00003f40 <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3f40:	b480      	push	{r7}
    3f42:	b083      	sub	sp, #12
    3f44:	af00      	add	r7, sp, #0
    3f46:	6078      	str	r0, [r7, #4]
    3f48:	370c      	adds	r7, #12
    3f4a:	46bd      	mov	sp, r7
    3f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f50:	4770      	bx	lr
    3f52:	bf00      	nop

00003f54 <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    3f54:	b480      	push	{r7}
    3f56:	b083      	sub	sp, #12
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
}
    3f5c:	370c      	adds	r7, #12
    3f5e:	46bd      	mov	sp, r7
    3f60:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f64:	4770      	bx	lr
    3f66:	bf00      	nop

00003f68 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	b082      	sub	sp, #8
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    3f70:	f00d fc6a 	bl	11848 <parse_gps_msg>
}
    3f74:	3708      	adds	r7, #8
    3f76:	46bd      	mov	sp, r7
    3f78:	bd80      	pop	{r7, pc}
    3f7a:	bf00      	nop

00003f7c <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    3f7c:	b580      	push	{r7, lr}
    3f7e:	b082      	sub	sp, #8
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3f84:	f00a fe88 	bl	ec98 <send_gps_pos>
    send_radIR();
    3f88:	f00c f84c 	bl	10024 <send_radIR>
    send_takeOff();
    3f8c:	f00c fe44 	bl	10c18 <send_takeOff>
}
    3f90:	3708      	adds	r7, #8
    3f92:	46bd      	mov	sp, r7
    3f94:	bd80      	pop	{r7, pc}
    3f96:	bf00      	nop

00003f98 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    3f98:	b480      	push	{r7}
    3f9a:	b083      	sub	sp, #12
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
    3fa0:	370c      	adds	r7, #12
    3fa2:	46bd      	mov	sp, r7
    3fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fa8:	4770      	bx	lr
    3faa:	bf00      	nop

00003fac <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    3fac:	b480      	push	{r7}
    3fae:	b083      	sub	sp, #12
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
}
    3fb4:	370c      	adds	r7, #12
    3fb6:	46bd      	mov	sp, r7
    3fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fbc:	4770      	bx	lr
    3fbe:	bf00      	nop

00003fc0 <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    3fc0:	b580      	push	{r7, lr}
    3fc2:	b082      	sub	sp, #8
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    3fc8:	f010 fefe 	bl	14dc8 <nav_home>
}
    3fcc:	3708      	adds	r7, #8
    3fce:	46bd      	mov	sp, r7
    3fd0:	bd80      	pop	{r7, pc}
    3fd2:	bf00      	nop

00003fd4 <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    3fd4:	b580      	push	{r7, lr}
    3fd6:	b082      	sub	sp, #8
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    3fdc:	f010 ff1a 	bl	14e14 <nav_update>
}
    3fe0:	3708      	adds	r7, #8
    3fe2:	46bd      	mov	sp, r7
    3fe4:	bd80      	pop	{r7, pc}
    3fe6:	bf00      	nop

00003fe8 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    3fe8:	b580      	push	{r7, lr}
    3fea:	b082      	sub	sp, #8
    3fec:	af00      	add	r7, sp, #0
    3fee:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    3ff0:	f00e f83a 	bl	12068 <course_pid_run>
}
    3ff4:	3708      	adds	r7, #8
    3ff6:	46bd      	mov	sp, r7
    3ff8:	bd80      	pop	{r7, pc}
    3ffa:	bf00      	nop

00003ffc <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    3ffc:	b480      	push	{r7}
    3ffe:	b083      	sub	sp, #12
    4000:	af00      	add	r7, sp, #0
    4002:	6078      	str	r0, [r7, #4]
    4004:	370c      	adds	r7, #12
    4006:	46bd      	mov	sp, r7
    4008:	f85d 7b04 	ldr.w	r7, [sp], #4
    400c:	4770      	bx	lr
    400e:	bf00      	nop

00004010 <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    4010:	b480      	push	{r7}
    4012:	b083      	sub	sp, #12
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
}
    4018:	370c      	adds	r7, #12
    401a:	46bd      	mov	sp, r7
    401c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4020:	4770      	bx	lr
    4022:	bf00      	nop

00004024 <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    4024:	b580      	push	{r7, lr}
    4026:	b082      	sub	sp, #8
    4028:	af00      	add	r7, sp, #0
    402a:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    402c:	f00e faa4 	bl	12578 <altitude_pid_run>
}
    4030:	3708      	adds	r7, #8
    4032:	46bd      	mov	sp, r7
    4034:	bd80      	pop	{r7, pc}
    4036:	bf00      	nop

00004038 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    4038:	b480      	push	{r7}
    403a:	b083      	sub	sp, #12
    403c:	af00      	add	r7, sp, #0
    403e:	6078      	str	r0, [r7, #4]
    4040:	370c      	adds	r7, #12
    4042:	46bd      	mov	sp, r7
    4044:	f85d 7b04 	ldr.w	r7, [sp], #4
    4048:	4770      	bx	lr
    404a:	bf00      	nop

0000404c <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    404c:	b480      	push	{r7}
    404e:	b083      	sub	sp, #12
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
}
    4054:	370c      	adds	r7, #12
    4056:	46bd      	mov	sp, r7
    4058:	f85d 7b04 	ldr.w	r7, [sp], #4
    405c:	4770      	bx	lr
    405e:	bf00      	nop

00004060 <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    4060:	b580      	push	{r7, lr}
    4062:	b082      	sub	sp, #8
    4064:	af00      	add	r7, sp, #0
    4066:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    4068:	f00e f8b6 	bl	121d8 <climb_pid_run>
}
    406c:	3708      	adds	r7, #8
    406e:	46bd      	mov	sp, r7
    4070:	bd80      	pop	{r7, pc}
    4072:	bf00      	nop

00004074 <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    4074:	b480      	push	{r7}
    4076:	b083      	sub	sp, #12
    4078:	af00      	add	r7, sp, #0
    407a:	6078      	str	r0, [r7, #4]
    407c:	370c      	adds	r7, #12
    407e:	46bd      	mov	sp, r7
    4080:	f85d 7b04 	ldr.w	r7, [sp], #4
    4084:	4770      	bx	lr
    4086:	bf00      	nop

00004088 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    4088:	b480      	push	{r7}
    408a:	b083      	sub	sp, #12
    408c:	af00      	add	r7, sp, #0
    408e:	6078      	str	r0, [r7, #4]
}
    4090:	370c      	adds	r7, #12
    4092:	46bd      	mov	sp, r7
    4094:	f85d 7b04 	ldr.w	r7, [sp], #4
    4098:	4770      	bx	lr
    409a:	bf00      	nop

0000409c <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    409c:	b580      	push	{r7, lr}
    409e:	b082      	sub	sp, #8
    40a0:	af00      	add	r7, sp, #0
    40a2:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    40a4:	f003 fa82 	bl	75ac <send_boot>
    send_attitude();
    40a8:	f004 fa58 	bl	855c <send_attitude>
    send_adc();
    40ac:	f004 ff52 	bl	8f54 <send_adc>
    send_settings();
    40b0:	f005 f9e0 	bl	9474 <send_settings>
    send_desired();
    40b4:	f005 fdea 	bl	9c8c <send_desired>
    send_bat();
    40b8:	f006 fd20 	bl	aafc <send_bat>
    send_climb();
    40bc:	f007 f8dc 	bl	b278 <send_climb>
    send_mode();
    40c0:	f007 fe54 	bl	bd6c <send_mode>
    send_debug();
    40c4:	f008 f92e 	bl	c324 <send_debug>
    send_nav_ref();
    40c8:	f008 fc0a 	bl	c8e0 <send_nav_ref>
}
    40cc:	3708      	adds	r7, #8
    40ce:	46bd      	mov	sp, r7
    40d0:	bd80      	pop	{r7, pc}
    40d2:	bf00      	nop

000040d4 <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    40d4:	b480      	push	{r7}
    40d6:	b083      	sub	sp, #12
    40d8:	af00      	add	r7, sp, #0
    40da:	6078      	str	r0, [r7, #4]
    40dc:	370c      	adds	r7, #12
    40de:	46bd      	mov	sp, r7
    40e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e4:	4770      	bx	lr
    40e6:	bf00      	nop

000040e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    40e8:	b480      	push	{r7}
    40ea:	b083      	sub	sp, #12
    40ec:	af00      	add	r7, sp, #0
    40ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	f103 0208 	add.w	r2, r3, #8
    40f6:	687b      	ldr	r3, [r7, #4]
    40f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	f04f 32ff 	mov.w	r2, #4294967295
    4100:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    4102:	687b      	ldr	r3, [r7, #4]
    4104:	f103 0208 	add.w	r2, r3, #8
    4108:	687b      	ldr	r3, [r7, #4]
    410a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    410c:	687b      	ldr	r3, [r7, #4]
    410e:	f103 0208 	add.w	r2, r3, #8
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    4116:	687b      	ldr	r3, [r7, #4]
    4118:	2200      	movs	r2, #0
    411a:	601a      	str	r2, [r3, #0]
}
    411c:	370c      	adds	r7, #12
    411e:	46bd      	mov	sp, r7
    4120:	f85d 7b04 	ldr.w	r7, [sp], #4
    4124:	4770      	bx	lr
    4126:	bf00      	nop

00004128 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    4128:	b480      	push	{r7}
    412a:	b083      	sub	sp, #12
    412c:	af00      	add	r7, sp, #0
    412e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	2200      	movs	r2, #0
    4134:	611a      	str	r2, [r3, #16]
}
    4136:	370c      	adds	r7, #12
    4138:	46bd      	mov	sp, r7
    413a:	f85d 7b04 	ldr.w	r7, [sp], #4
    413e:	4770      	bx	lr

00004140 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    4140:	b480      	push	{r7}
    4142:	b085      	sub	sp, #20
    4144:	af00      	add	r7, sp, #0
    4146:	6078      	str	r0, [r7, #4]
    4148:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	685b      	ldr	r3, [r3, #4]
    414e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    4150:	68fb      	ldr	r3, [r7, #12]
    4152:	685a      	ldr	r2, [r3, #4]
    4154:	683b      	ldr	r3, [r7, #0]
    4156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	685a      	ldr	r2, [r3, #4]
    415c:	683b      	ldr	r3, [r7, #0]
    415e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4160:	68fb      	ldr	r3, [r7, #12]
    4162:	685b      	ldr	r3, [r3, #4]
    4164:	683a      	ldr	r2, [r7, #0]
    4166:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4168:	68fb      	ldr	r3, [r7, #12]
    416a:	683a      	ldr	r2, [r7, #0]
    416c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	683a      	ldr	r2, [r7, #0]
    4172:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4174:	683b      	ldr	r3, [r7, #0]
    4176:	687a      	ldr	r2, [r7, #4]
    4178:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	681b      	ldr	r3, [r3, #0]
    417e:	1c5a      	adds	r2, r3, #1
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	601a      	str	r2, [r3, #0]
}
    4184:	3714      	adds	r7, #20
    4186:	46bd      	mov	sp, r7
    4188:	f85d 7b04 	ldr.w	r7, [sp], #4
    418c:	4770      	bx	lr
    418e:	bf00      	nop

00004190 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    4190:	b480      	push	{r7}
    4192:	b085      	sub	sp, #20
    4194:	af00      	add	r7, sp, #0
    4196:	6078      	str	r0, [r7, #4]
    4198:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    419a:	683b      	ldr	r3, [r7, #0]
    419c:	681b      	ldr	r3, [r3, #0]
    419e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    41a0:	68bb      	ldr	r3, [r7, #8]
    41a2:	f1b3 3fff 	cmp.w	r3, #4294967295
    41a6:	d103      	bne.n	41b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	691b      	ldr	r3, [r3, #16]
    41ac:	60fb      	str	r3, [r7, #12]
    41ae:	e00c      	b.n	41ca <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	3308      	adds	r3, #8
    41b4:	60fb      	str	r3, [r7, #12]
    41b6:	e002      	b.n	41be <vListInsert+0x2e>
    41b8:	68fb      	ldr	r3, [r7, #12]
    41ba:	685b      	ldr	r3, [r3, #4]
    41bc:	60fb      	str	r3, [r7, #12]
    41be:	68fb      	ldr	r3, [r7, #12]
    41c0:	685b      	ldr	r3, [r3, #4]
    41c2:	681a      	ldr	r2, [r3, #0]
    41c4:	68bb      	ldr	r3, [r7, #8]
    41c6:	429a      	cmp	r2, r3
    41c8:	d9f6      	bls.n	41b8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    41ca:	68fb      	ldr	r3, [r7, #12]
    41cc:	685a      	ldr	r2, [r3, #4]
    41ce:	683b      	ldr	r3, [r7, #0]
    41d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    41d2:	683b      	ldr	r3, [r7, #0]
    41d4:	685b      	ldr	r3, [r3, #4]
    41d6:	683a      	ldr	r2, [r7, #0]
    41d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    41da:	683b      	ldr	r3, [r7, #0]
    41dc:	68fa      	ldr	r2, [r7, #12]
    41de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	683a      	ldr	r2, [r7, #0]
    41e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    41e6:	683b      	ldr	r3, [r7, #0]
    41e8:	687a      	ldr	r2, [r7, #4]
    41ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	681b      	ldr	r3, [r3, #0]
    41f0:	1c5a      	adds	r2, r3, #1
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	601a      	str	r2, [r3, #0]
}
    41f6:	3714      	adds	r7, #20
    41f8:	46bd      	mov	sp, r7
    41fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    41fe:	4770      	bx	lr

00004200 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    4200:	b480      	push	{r7}
    4202:	b085      	sub	sp, #20
    4204:	af00      	add	r7, sp, #0
    4206:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	685b      	ldr	r3, [r3, #4]
    420c:	687a      	ldr	r2, [r7, #4]
    420e:	6892      	ldr	r2, [r2, #8]
    4210:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4212:	687b      	ldr	r3, [r7, #4]
    4214:	689b      	ldr	r3, [r3, #8]
    4216:	687a      	ldr	r2, [r7, #4]
    4218:	6852      	ldr	r2, [r2, #4]
    421a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	691b      	ldr	r3, [r3, #16]
    4220:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    4222:	68fb      	ldr	r3, [r7, #12]
    4224:	685a      	ldr	r2, [r3, #4]
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	429a      	cmp	r2, r3
    422a:	d103      	bne.n	4234 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    422c:	687b      	ldr	r3, [r7, #4]
    422e:	689a      	ldr	r2, [r3, #8]
    4230:	68fb      	ldr	r3, [r7, #12]
    4232:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    4234:	687b      	ldr	r3, [r7, #4]
    4236:	2200      	movs	r2, #0
    4238:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    423a:	68fb      	ldr	r3, [r7, #12]
    423c:	681b      	ldr	r3, [r3, #0]
    423e:	1e5a      	subs	r2, r3, #1
    4240:	68fb      	ldr	r3, [r7, #12]
    4242:	601a      	str	r2, [r3, #0]
}
    4244:	3714      	adds	r7, #20
    4246:	46bd      	mov	sp, r7
    4248:	f85d 7b04 	ldr.w	r7, [sp], #4
    424c:	4770      	bx	lr
    424e:	bf00      	nop

00004250 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    4250:	b580      	push	{r7, lr}
    4252:	b084      	sub	sp, #16
    4254:	af00      	add	r7, sp, #0
    4256:	6078      	str	r0, [r7, #4]
    4258:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    425a:	2301      	movs	r3, #1
    425c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    425e:	683b      	ldr	r3, [r7, #0]
    4260:	2b01      	cmp	r3, #1
    4262:	d00b      	beq.n	427c <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4264:	687b      	ldr	r3, [r7, #4]
    4266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4268:	2b00      	cmp	r3, #0
    426a:	d001      	beq.n	4270 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    426c:	2300      	movs	r3, #0
    426e:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	691b      	ldr	r3, [r3, #16]
    4274:	2b00      	cmp	r3, #0
    4276:	d001      	beq.n	427c <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4278:	2300      	movs	r3, #0
    427a:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    427c:	68fb      	ldr	r3, [r7, #12]
    427e:	2b01      	cmp	r3, #1
    4280:	d12f      	bne.n	42e2 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	681a      	ldr	r2, [r3, #0]
    4286:	687b      	ldr	r3, [r7, #4]
    4288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    428a:	6879      	ldr	r1, [r7, #4]
    428c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    428e:	fb01 f303 	mul.w	r3, r1, r3
    4292:	441a      	add	r2, r3
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4298:	687b      	ldr	r3, [r7, #4]
    429a:	2200      	movs	r2, #0
    429c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    429e:	687b      	ldr	r3, [r7, #4]
    42a0:	681a      	ldr	r2, [r3, #0]
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	681a      	ldr	r2, [r3, #0]
    42aa:	687b      	ldr	r3, [r7, #4]
    42ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42ae:	3b01      	subs	r3, #1
    42b0:	6879      	ldr	r1, [r7, #4]
    42b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
    42b4:	fb01 f303 	mul.w	r3, r1, r3
    42b8:	441a      	add	r2, r3
    42ba:	687b      	ldr	r3, [r7, #4]
    42bc:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    42be:	687b      	ldr	r3, [r7, #4]
    42c0:	f04f 32ff 	mov.w	r2, #4294967295
    42c4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    42c6:	687b      	ldr	r3, [r7, #4]
    42c8:	f04f 32ff 	mov.w	r2, #4294967295
    42cc:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    42ce:	687b      	ldr	r3, [r7, #4]
    42d0:	3310      	adds	r3, #16
    42d2:	4618      	mov	r0, r3
    42d4:	f7ff ff08 	bl	40e8 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    42d8:	687b      	ldr	r3, [r7, #4]
    42da:	3324      	adds	r3, #36	; 0x24
    42dc:	4618      	mov	r0, r3
    42de:	f7ff ff03 	bl	40e8 <vListInitialise>
	}

	return xReturn;
    42e2:	68fb      	ldr	r3, [r7, #12]
}
    42e4:	4618      	mov	r0, r3
    42e6:	3710      	adds	r7, #16
    42e8:	46bd      	mov	sp, r7
    42ea:	bd80      	pop	{r7, pc}

000042ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    42ec:	b580      	push	{r7, lr}
    42ee:	b088      	sub	sp, #32
    42f0:	af00      	add	r7, sp, #0
    42f2:	60f8      	str	r0, [r7, #12]
    42f4:	60b9      	str	r1, [r7, #8]
    42f6:	4613      	mov	r3, r2
    42f8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    42fa:	2300      	movs	r3, #0
    42fc:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    42fe:	68fb      	ldr	r3, [r7, #12]
    4300:	2b00      	cmp	r3, #0
    4302:	d026      	beq.n	4352 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4304:	204c      	movs	r0, #76	; 0x4c
    4306:	f001 fda7 	bl	5e58 <pvPortMalloc>
    430a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    430c:	69bb      	ldr	r3, [r7, #24]
    430e:	2b00      	cmp	r3, #0
    4310:	d01f      	beq.n	4352 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    4312:	68fb      	ldr	r3, [r7, #12]
    4314:	68ba      	ldr	r2, [r7, #8]
    4316:	fb02 f303 	mul.w	r3, r2, r3
    431a:	3301      	adds	r3, #1
    431c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    431e:	6978      	ldr	r0, [r7, #20]
    4320:	f001 fd9a 	bl	5e58 <pvPortMalloc>
    4324:	4602      	mov	r2, r0
    4326:	69bb      	ldr	r3, [r7, #24]
    4328:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    432a:	69bb      	ldr	r3, [r7, #24]
    432c:	681b      	ldr	r3, [r3, #0]
    432e:	2b00      	cmp	r3, #0
    4330:	d00c      	beq.n	434c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    4332:	69bb      	ldr	r3, [r7, #24]
    4334:	68fa      	ldr	r2, [r7, #12]
    4336:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4338:	69bb      	ldr	r3, [r7, #24]
    433a:	68ba      	ldr	r2, [r7, #8]
    433c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    433e:	69b8      	ldr	r0, [r7, #24]
    4340:	2101      	movs	r1, #1
    4342:	f7ff ff85 	bl	4250 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4346:	69bb      	ldr	r3, [r7, #24]
    4348:	61fb      	str	r3, [r7, #28]
    434a:	e002      	b.n	4352 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    434c:	69b8      	ldr	r0, [r7, #24]
    434e:	f001 fe47 	bl	5fe0 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    4352:	69fb      	ldr	r3, [r7, #28]
}
    4354:	4618      	mov	r0, r3
    4356:	3720      	adds	r7, #32
    4358:	46bd      	mov	sp, r7
    435a:	bd80      	pop	{r7, pc}

0000435c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    435c:	b580      	push	{r7, lr}
    435e:	b084      	sub	sp, #16
    4360:	af00      	add	r7, sp, #0
    4362:	4603      	mov	r3, r0
    4364:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4366:	204c      	movs	r0, #76	; 0x4c
    4368:	f001 fd76 	bl	5e58 <pvPortMalloc>
    436c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    436e:	68fb      	ldr	r3, [r7, #12]
    4370:	2b00      	cmp	r3, #0
    4372:	d02c      	beq.n	43ce <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4374:	68fb      	ldr	r3, [r7, #12]
    4376:	2200      	movs	r2, #0
    4378:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    437a:	68fb      	ldr	r3, [r7, #12]
    437c:	2200      	movs	r2, #0
    437e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    4380:	68fb      	ldr	r3, [r7, #12]
    4382:	2200      	movs	r2, #0
    4384:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	2200      	movs	r2, #0
    438a:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    438c:	68fb      	ldr	r3, [r7, #12]
    438e:	2200      	movs	r2, #0
    4390:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	2201      	movs	r2, #1
    4396:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4398:	68fb      	ldr	r3, [r7, #12]
    439a:	2200      	movs	r2, #0
    439c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    439e:	68fb      	ldr	r3, [r7, #12]
    43a0:	f04f 32ff 	mov.w	r2, #4294967295
    43a4:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    43a6:	68fb      	ldr	r3, [r7, #12]
    43a8:	f04f 32ff 	mov.w	r2, #4294967295
    43ac:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    43ae:	68fb      	ldr	r3, [r7, #12]
    43b0:	3310      	adds	r3, #16
    43b2:	4618      	mov	r0, r3
    43b4:	f7ff fe98 	bl	40e8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    43b8:	68fb      	ldr	r3, [r7, #12]
    43ba:	3324      	adds	r3, #36	; 0x24
    43bc:	4618      	mov	r0, r3
    43be:	f7ff fe93 	bl	40e8 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    43c2:	68f8      	ldr	r0, [r7, #12]
    43c4:	2100      	movs	r1, #0
    43c6:	2200      	movs	r2, #0
    43c8:	2300      	movs	r3, #0
    43ca:	f000 f81d 	bl	4408 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    43ce:	68fb      	ldr	r3, [r7, #12]
	}
    43d0:	4618      	mov	r0, r3
    43d2:	3710      	adds	r7, #16
    43d4:	46bd      	mov	sp, r7
    43d6:	bd80      	pop	{r7, pc}

000043d8 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    43d8:	b580      	push	{r7, lr}
    43da:	b084      	sub	sp, #16
    43dc:	af00      	add	r7, sp, #0
    43de:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    43e0:	f001 fcc0 	bl	5d64 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    43e4:	687b      	ldr	r3, [r7, #4]
    43e6:	681b      	ldr	r3, [r3, #0]
    43e8:	2b00      	cmp	r3, #0
    43ea:	d103      	bne.n	43f4 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	685b      	ldr	r3, [r3, #4]
    43f0:	60fb      	str	r3, [r7, #12]
    43f2:	e001      	b.n	43f8 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    43f4:	2300      	movs	r3, #0
    43f6:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    43f8:	f001 fcca 	bl	5d90 <vPortExitCritical>
		
		return pxReturn;
    43fc:	68fb      	ldr	r3, [r7, #12]
	}
    43fe:	4618      	mov	r0, r3
    4400:	3710      	adds	r7, #16
    4402:	46bd      	mov	sp, r7
    4404:	bd80      	pop	{r7, pc}
    4406:	bf00      	nop

00004408 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    4408:	b580      	push	{r7, lr}
    440a:	b088      	sub	sp, #32
    440c:	af00      	add	r7, sp, #0
    440e:	60f8      	str	r0, [r7, #12]
    4410:	60b9      	str	r1, [r7, #8]
    4412:	607a      	str	r2, [r7, #4]
    4414:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4416:	2300      	movs	r3, #0
    4418:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    441a:	f001 fca3 	bl	5d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    441e:	68fb      	ldr	r3, [r7, #12]
    4420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4422:	68fb      	ldr	r3, [r7, #12]
    4424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4426:	429a      	cmp	r2, r3
    4428:	d216      	bcs.n	4458 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    442a:	68f8      	ldr	r0, [r7, #12]
    442c:	68b9      	ldr	r1, [r7, #8]
    442e:	683a      	ldr	r2, [r7, #0]
    4430:	f000 f9d6 	bl	47e0 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4434:	68fb      	ldr	r3, [r7, #12]
    4436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4438:	2b00      	cmp	r3, #0
    443a:	d009      	beq.n	4450 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    443c:	68fb      	ldr	r3, [r7, #12]
    443e:	3324      	adds	r3, #36	; 0x24
    4440:	4618      	mov	r0, r3
    4442:	f001 f905 	bl	5650 <xTaskRemoveFromEventList>
    4446:	4603      	mov	r3, r0
    4448:	2b01      	cmp	r3, #1
    444a:	d101      	bne.n	4450 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    444c:	f001 fc7c 	bl	5d48 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4450:	f001 fc9e 	bl	5d90 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4454:	2301      	movs	r3, #1
    4456:	e059      	b.n	450c <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4458:	687b      	ldr	r3, [r7, #4]
    445a:	2b00      	cmp	r3, #0
    445c:	d103      	bne.n	4466 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    445e:	f001 fc97 	bl	5d90 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4462:	2300      	movs	r3, #0
    4464:	e052      	b.n	450c <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4466:	69fb      	ldr	r3, [r7, #28]
    4468:	2b00      	cmp	r3, #0
    446a:	d106      	bne.n	447a <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    446c:	f107 0314 	add.w	r3, r7, #20
    4470:	4618      	mov	r0, r3
    4472:	f001 f945 	bl	5700 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4476:	2301      	movs	r3, #1
    4478:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    447a:	f001 fc89 	bl	5d90 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    447e:	f000 fe93 	bl	51a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4482:	f001 fc6f 	bl	5d64 <vPortEnterCritical>
    4486:	68fb      	ldr	r3, [r7, #12]
    4488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    448a:	f1b3 3fff 	cmp.w	r3, #4294967295
    448e:	d102      	bne.n	4496 <xQueueGenericSend+0x8e>
    4490:	68fb      	ldr	r3, [r7, #12]
    4492:	2200      	movs	r2, #0
    4494:	645a      	str	r2, [r3, #68]	; 0x44
    4496:	68fb      	ldr	r3, [r7, #12]
    4498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    449a:	f1b3 3fff 	cmp.w	r3, #4294967295
    449e:	d102      	bne.n	44a6 <xQueueGenericSend+0x9e>
    44a0:	68fb      	ldr	r3, [r7, #12]
    44a2:	2200      	movs	r2, #0
    44a4:	649a      	str	r2, [r3, #72]	; 0x48
    44a6:	f001 fc73 	bl	5d90 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    44aa:	f107 0214 	add.w	r2, r7, #20
    44ae:	1d3b      	adds	r3, r7, #4
    44b0:	4610      	mov	r0, r2
    44b2:	4619      	mov	r1, r3
    44b4:	f001 f93c 	bl	5730 <xTaskCheckForTimeOut>
    44b8:	4603      	mov	r3, r0
    44ba:	2b00      	cmp	r3, #0
    44bc:	d11e      	bne.n	44fc <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    44be:	68f8      	ldr	r0, [r7, #12]
    44c0:	f000 fa86 	bl	49d0 <prvIsQueueFull>
    44c4:	4603      	mov	r3, r0
    44c6:	2b00      	cmp	r3, #0
    44c8:	d012      	beq.n	44f0 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    44ca:	68fb      	ldr	r3, [r7, #12]
    44cc:	f103 0210 	add.w	r2, r3, #16
    44d0:	687b      	ldr	r3, [r7, #4]
    44d2:	4610      	mov	r0, r2
    44d4:	4619      	mov	r1, r3
    44d6:	f001 f883 	bl	55e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    44da:	68f8      	ldr	r0, [r7, #12]
    44dc:	f000 fa02 	bl	48e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    44e0:	f000 fe74 	bl	51cc <xTaskResumeAll>
    44e4:	4603      	mov	r3, r0
    44e6:	2b00      	cmp	r3, #0
    44e8:	d10f      	bne.n	450a <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    44ea:	f001 fc2d 	bl	5d48 <vPortYieldFromISR>
    44ee:	e00c      	b.n	450a <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    44f0:	68f8      	ldr	r0, [r7, #12]
    44f2:	f000 f9f7 	bl	48e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    44f6:	f000 fe69 	bl	51cc <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    44fa:	e78e      	b.n	441a <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    44fc:	68f8      	ldr	r0, [r7, #12]
    44fe:	f000 f9f1 	bl	48e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4502:	f000 fe63 	bl	51cc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    4506:	2300      	movs	r3, #0
    4508:	e000      	b.n	450c <xQueueGenericSend+0x104>
		}
	}
    450a:	e786      	b.n	441a <xQueueGenericSend+0x12>
}
    450c:	4618      	mov	r0, r3
    450e:	3720      	adds	r7, #32
    4510:	46bd      	mov	sp, r7
    4512:	bd80      	pop	{r7, pc}

00004514 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    4514:	b580      	push	{r7, lr}
    4516:	b086      	sub	sp, #24
    4518:	af00      	add	r7, sp, #0
    451a:	60f8      	str	r0, [r7, #12]
    451c:	60b9      	str	r1, [r7, #8]
    451e:	607a      	str	r2, [r7, #4]
    4520:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4522:	2300      	movs	r3, #0
    4524:	613b      	str	r3, [r7, #16]
    4526:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    452a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    452e:	68fb      	ldr	r3, [r7, #12]
    4530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4532:	68fb      	ldr	r3, [r7, #12]
    4534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4536:	429a      	cmp	r2, r3
    4538:	d221      	bcs.n	457e <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    453a:	68f8      	ldr	r0, [r7, #12]
    453c:	68b9      	ldr	r1, [r7, #8]
    453e:	683a      	ldr	r2, [r7, #0]
    4540:	f000 f94e 	bl	47e0 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4544:	68fb      	ldr	r3, [r7, #12]
    4546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4548:	f1b3 3fff 	cmp.w	r3, #4294967295
    454c:	d10f      	bne.n	456e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    454e:	68fb      	ldr	r3, [r7, #12]
    4550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4552:	2b00      	cmp	r3, #0
    4554:	d010      	beq.n	4578 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4556:	68fb      	ldr	r3, [r7, #12]
    4558:	3324      	adds	r3, #36	; 0x24
    455a:	4618      	mov	r0, r3
    455c:	f001 f878 	bl	5650 <xTaskRemoveFromEventList>
    4560:	4603      	mov	r3, r0
    4562:	2b00      	cmp	r3, #0
    4564:	d008      	beq.n	4578 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4566:	687b      	ldr	r3, [r7, #4]
    4568:	2201      	movs	r2, #1
    456a:	601a      	str	r2, [r3, #0]
    456c:	e004      	b.n	4578 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    456e:	68fb      	ldr	r3, [r7, #12]
    4570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4572:	1c5a      	adds	r2, r3, #1
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4578:	2301      	movs	r3, #1
    457a:	617b      	str	r3, [r7, #20]
    457c:	e001      	b.n	4582 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    457e:	2300      	movs	r3, #0
    4580:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4582:	f04f 0000 	mov.w	r0, #0
    4586:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    458a:	697b      	ldr	r3, [r7, #20]
}
    458c:	4618      	mov	r0, r3
    458e:	3718      	adds	r7, #24
    4590:	46bd      	mov	sp, r7
    4592:	bd80      	pop	{r7, pc}

00004594 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4594:	b580      	push	{r7, lr}
    4596:	b088      	sub	sp, #32
    4598:	af00      	add	r7, sp, #0
    459a:	60f8      	str	r0, [r7, #12]
    459c:	60b9      	str	r1, [r7, #8]
    459e:	607a      	str	r2, [r7, #4]
    45a0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    45a2:	2300      	movs	r3, #0
    45a4:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    45a6:	f001 fbdd 	bl	5d64 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    45aa:	68fb      	ldr	r3, [r7, #12]
    45ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45ae:	2b00      	cmp	r3, #0
    45b0:	d03b      	beq.n	462a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    45b2:	68fb      	ldr	r3, [r7, #12]
    45b4:	68db      	ldr	r3, [r3, #12]
    45b6:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    45b8:	68f8      	ldr	r0, [r7, #12]
    45ba:	68b9      	ldr	r1, [r7, #8]
    45bc:	f000 f96c 	bl	4898 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    45c0:	683b      	ldr	r3, [r7, #0]
    45c2:	2b00      	cmp	r3, #0
    45c4:	d11c      	bne.n	4600 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    45c6:	68fb      	ldr	r3, [r7, #12]
    45c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45ca:	1e5a      	subs	r2, r3, #1
    45cc:	68fb      	ldr	r3, [r7, #12]
    45ce:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    45d0:	68fb      	ldr	r3, [r7, #12]
    45d2:	681b      	ldr	r3, [r3, #0]
    45d4:	2b00      	cmp	r3, #0
    45d6:	d104      	bne.n	45e2 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    45d8:	f001 fa5c 	bl	5a94 <xTaskGetCurrentTaskHandle>
    45dc:	4602      	mov	r2, r0
    45de:	68fb      	ldr	r3, [r7, #12]
    45e0:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    45e2:	68fb      	ldr	r3, [r7, #12]
    45e4:	691b      	ldr	r3, [r3, #16]
    45e6:	2b00      	cmp	r3, #0
    45e8:	d01b      	beq.n	4622 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    45ea:	68fb      	ldr	r3, [r7, #12]
    45ec:	3310      	adds	r3, #16
    45ee:	4618      	mov	r0, r3
    45f0:	f001 f82e 	bl	5650 <xTaskRemoveFromEventList>
    45f4:	4603      	mov	r3, r0
    45f6:	2b01      	cmp	r3, #1
    45f8:	d113      	bne.n	4622 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    45fa:	f001 fba5 	bl	5d48 <vPortYieldFromISR>
    45fe:	e010      	b.n	4622 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    4600:	68fb      	ldr	r3, [r7, #12]
    4602:	69ba      	ldr	r2, [r7, #24]
    4604:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4606:	68fb      	ldr	r3, [r7, #12]
    4608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    460a:	2b00      	cmp	r3, #0
    460c:	d009      	beq.n	4622 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    460e:	68fb      	ldr	r3, [r7, #12]
    4610:	3324      	adds	r3, #36	; 0x24
    4612:	4618      	mov	r0, r3
    4614:	f001 f81c 	bl	5650 <xTaskRemoveFromEventList>
    4618:	4603      	mov	r3, r0
    461a:	2b00      	cmp	r3, #0
    461c:	d001      	beq.n	4622 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    461e:	f001 fb93 	bl	5d48 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    4622:	f001 fbb5 	bl	5d90 <vPortExitCritical>
				return pdPASS;
    4626:	2301      	movs	r3, #1
    4628:	e066      	b.n	46f8 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	2b00      	cmp	r3, #0
    462e:	d103      	bne.n	4638 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4630:	f001 fbae 	bl	5d90 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4634:	2300      	movs	r3, #0
    4636:	e05f      	b.n	46f8 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4638:	69fb      	ldr	r3, [r7, #28]
    463a:	2b00      	cmp	r3, #0
    463c:	d106      	bne.n	464c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    463e:	f107 0310 	add.w	r3, r7, #16
    4642:	4618      	mov	r0, r3
    4644:	f001 f85c 	bl	5700 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4648:	2301      	movs	r3, #1
    464a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    464c:	f001 fba0 	bl	5d90 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4650:	f000 fdaa 	bl	51a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4654:	f001 fb86 	bl	5d64 <vPortEnterCritical>
    4658:	68fb      	ldr	r3, [r7, #12]
    465a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    465c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4660:	d102      	bne.n	4668 <xQueueGenericReceive+0xd4>
    4662:	68fb      	ldr	r3, [r7, #12]
    4664:	2200      	movs	r2, #0
    4666:	645a      	str	r2, [r3, #68]	; 0x44
    4668:	68fb      	ldr	r3, [r7, #12]
    466a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    466c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4670:	d102      	bne.n	4678 <xQueueGenericReceive+0xe4>
    4672:	68fb      	ldr	r3, [r7, #12]
    4674:	2200      	movs	r2, #0
    4676:	649a      	str	r2, [r3, #72]	; 0x48
    4678:	f001 fb8a 	bl	5d90 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    467c:	f107 0210 	add.w	r2, r7, #16
    4680:	1d3b      	adds	r3, r7, #4
    4682:	4610      	mov	r0, r2
    4684:	4619      	mov	r1, r3
    4686:	f001 f853 	bl	5730 <xTaskCheckForTimeOut>
    468a:	4603      	mov	r3, r0
    468c:	2b00      	cmp	r3, #0
    468e:	d12b      	bne.n	46e8 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4690:	68f8      	ldr	r0, [r7, #12]
    4692:	f000 f973 	bl	497c <prvIsQueueEmpty>
    4696:	4603      	mov	r3, r0
    4698:	2b00      	cmp	r3, #0
    469a:	d01f      	beq.n	46dc <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    469c:	68fb      	ldr	r3, [r7, #12]
    469e:	681b      	ldr	r3, [r3, #0]
    46a0:	2b00      	cmp	r3, #0
    46a2:	d108      	bne.n	46b6 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    46a4:	f001 fb5e 	bl	5d64 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    46a8:	68fb      	ldr	r3, [r7, #12]
    46aa:	685b      	ldr	r3, [r3, #4]
    46ac:	4618      	mov	r0, r3
    46ae:	f001 fa01 	bl	5ab4 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    46b2:	f001 fb6d 	bl	5d90 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    46b6:	68fb      	ldr	r3, [r7, #12]
    46b8:	f103 0224 	add.w	r2, r3, #36	; 0x24
    46bc:	687b      	ldr	r3, [r7, #4]
    46be:	4610      	mov	r0, r2
    46c0:	4619      	mov	r1, r3
    46c2:	f000 ff8d 	bl	55e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    46c6:	68f8      	ldr	r0, [r7, #12]
    46c8:	f000 f90c 	bl	48e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    46cc:	f000 fd7e 	bl	51cc <xTaskResumeAll>
    46d0:	4603      	mov	r3, r0
    46d2:	2b00      	cmp	r3, #0
    46d4:	d10f      	bne.n	46f6 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    46d6:	f001 fb37 	bl	5d48 <vPortYieldFromISR>
    46da:	e00c      	b.n	46f6 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    46dc:	68f8      	ldr	r0, [r7, #12]
    46de:	f000 f901 	bl	48e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    46e2:	f000 fd73 	bl	51cc <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    46e6:	e75e      	b.n	45a6 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    46e8:	68f8      	ldr	r0, [r7, #12]
    46ea:	f000 f8fb 	bl	48e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    46ee:	f000 fd6d 	bl	51cc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    46f2:	2300      	movs	r3, #0
    46f4:	e000      	b.n	46f8 <xQueueGenericReceive+0x164>
		}
	}
    46f6:	e756      	b.n	45a6 <xQueueGenericReceive+0x12>
}
    46f8:	4618      	mov	r0, r3
    46fa:	3720      	adds	r7, #32
    46fc:	46bd      	mov	sp, r7
    46fe:	bd80      	pop	{r7, pc}

00004700 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    4700:	b580      	push	{r7, lr}
    4702:	b086      	sub	sp, #24
    4704:	af00      	add	r7, sp, #0
    4706:	60f8      	str	r0, [r7, #12]
    4708:	60b9      	str	r1, [r7, #8]
    470a:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    470c:	2300      	movs	r3, #0
    470e:	613b      	str	r3, [r7, #16]
    4710:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4714:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4718:	68fb      	ldr	r3, [r7, #12]
    471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    471c:	2b00      	cmp	r3, #0
    471e:	d025      	beq.n	476c <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4720:	68f8      	ldr	r0, [r7, #12]
    4722:	68b9      	ldr	r1, [r7, #8]
    4724:	f000 f8b8 	bl	4898 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4728:	68fb      	ldr	r3, [r7, #12]
    472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    472c:	1e5a      	subs	r2, r3, #1
    472e:	68fb      	ldr	r3, [r7, #12]
    4730:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    4732:	68fb      	ldr	r3, [r7, #12]
    4734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4736:	f1b3 3fff 	cmp.w	r3, #4294967295
    473a:	d10f      	bne.n	475c <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    473c:	68fb      	ldr	r3, [r7, #12]
    473e:	691b      	ldr	r3, [r3, #16]
    4740:	2b00      	cmp	r3, #0
    4742:	d010      	beq.n	4766 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4744:	68fb      	ldr	r3, [r7, #12]
    4746:	3310      	adds	r3, #16
    4748:	4618      	mov	r0, r3
    474a:	f000 ff81 	bl	5650 <xTaskRemoveFromEventList>
    474e:	4603      	mov	r3, r0
    4750:	2b00      	cmp	r3, #0
    4752:	d008      	beq.n	4766 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	2201      	movs	r2, #1
    4758:	601a      	str	r2, [r3, #0]
    475a:	e004      	b.n	4766 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    475c:	68fb      	ldr	r3, [r7, #12]
    475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4760:	1c5a      	adds	r2, r3, #1
    4762:	68fb      	ldr	r3, [r7, #12]
    4764:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4766:	2301      	movs	r3, #1
    4768:	617b      	str	r3, [r7, #20]
    476a:	e001      	b.n	4770 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    476c:	2300      	movs	r3, #0
    476e:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4770:	f04f 0000 	mov.w	r0, #0
    4774:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4778:	697b      	ldr	r3, [r7, #20]
}
    477a:	4618      	mov	r0, r3
    477c:	3718      	adds	r7, #24
    477e:	46bd      	mov	sp, r7
    4780:	bd80      	pop	{r7, pc}
    4782:	bf00      	nop

00004784 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4784:	b580      	push	{r7, lr}
    4786:	b084      	sub	sp, #16
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    478c:	f001 faea 	bl	5d64 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4794:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4796:	f001 fafb 	bl	5d90 <vPortExitCritical>

	return uxReturn;
    479a:	68fb      	ldr	r3, [r7, #12]
}
    479c:	4618      	mov	r0, r3
    479e:	3710      	adds	r7, #16
    47a0:	46bd      	mov	sp, r7
    47a2:	bd80      	pop	{r7, pc}

000047a4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    47a4:	b480      	push	{r7}
    47a6:	b085      	sub	sp, #20
    47a8:	af00      	add	r7, sp, #0
    47aa:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    47ac:	687b      	ldr	r3, [r7, #4]
    47ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47b0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    47b2:	68fb      	ldr	r3, [r7, #12]
}
    47b4:	4618      	mov	r0, r3
    47b6:	3714      	adds	r7, #20
    47b8:	46bd      	mov	sp, r7
    47ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    47be:	4770      	bx	lr

000047c0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    47c0:	b580      	push	{r7, lr}
    47c2:	b082      	sub	sp, #8
    47c4:	af00      	add	r7, sp, #0
    47c6:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    47c8:	687b      	ldr	r3, [r7, #4]
    47ca:	681b      	ldr	r3, [r3, #0]
    47cc:	4618      	mov	r0, r3
    47ce:	f001 fc07 	bl	5fe0 <vPortFree>
	vPortFree( pxQueue );
    47d2:	6878      	ldr	r0, [r7, #4]
    47d4:	f001 fc04 	bl	5fe0 <vPortFree>
}
    47d8:	3708      	adds	r7, #8
    47da:	46bd      	mov	sp, r7
    47dc:	bd80      	pop	{r7, pc}
    47de:	bf00      	nop

000047e0 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    47e0:	b580      	push	{r7, lr}
    47e2:	b084      	sub	sp, #16
    47e4:	af00      	add	r7, sp, #0
    47e6:	60f8      	str	r0, [r7, #12]
    47e8:	60b9      	str	r1, [r7, #8]
    47ea:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    47ec:	68fb      	ldr	r3, [r7, #12]
    47ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47f0:	2b00      	cmp	r3, #0
    47f2:	d10c      	bne.n	480e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    47f4:	68fb      	ldr	r3, [r7, #12]
    47f6:	681b      	ldr	r3, [r3, #0]
    47f8:	2b00      	cmp	r3, #0
    47fa:	d145      	bne.n	4888 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    47fc:	68fb      	ldr	r3, [r7, #12]
    47fe:	685b      	ldr	r3, [r3, #4]
    4800:	4618      	mov	r0, r3
    4802:	f001 f9bb 	bl	5b7c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    4806:	68fb      	ldr	r3, [r7, #12]
    4808:	2200      	movs	r2, #0
    480a:	605a      	str	r2, [r3, #4]
    480c:	e03c      	b.n	4888 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    480e:	687b      	ldr	r3, [r7, #4]
    4810:	2b00      	cmp	r3, #0
    4812:	d11a      	bne.n	484a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4814:	68fb      	ldr	r3, [r7, #12]
    4816:	689a      	ldr	r2, [r3, #8]
    4818:	68fb      	ldr	r3, [r7, #12]
    481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    481c:	4610      	mov	r0, r2
    481e:	68b9      	ldr	r1, [r7, #8]
    4820:	461a      	mov	r2, r3
    4822:	f014 f845 	bl	188b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4826:	68fb      	ldr	r3, [r7, #12]
    4828:	689a      	ldr	r2, [r3, #8]
    482a:	68fb      	ldr	r3, [r7, #12]
    482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    482e:	441a      	add	r2, r3
    4830:	68fb      	ldr	r3, [r7, #12]
    4832:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	689a      	ldr	r2, [r3, #8]
    4838:	68fb      	ldr	r3, [r7, #12]
    483a:	685b      	ldr	r3, [r3, #4]
    483c:	429a      	cmp	r2, r3
    483e:	d323      	bcc.n	4888 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4840:	68fb      	ldr	r3, [r7, #12]
    4842:	681a      	ldr	r2, [r3, #0]
    4844:	68fb      	ldr	r3, [r7, #12]
    4846:	609a      	str	r2, [r3, #8]
    4848:	e01e      	b.n	4888 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    484a:	68fb      	ldr	r3, [r7, #12]
    484c:	68da      	ldr	r2, [r3, #12]
    484e:	68fb      	ldr	r3, [r7, #12]
    4850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4852:	4610      	mov	r0, r2
    4854:	68b9      	ldr	r1, [r7, #8]
    4856:	461a      	mov	r2, r3
    4858:	f014 f82a 	bl	188b0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    485c:	68fb      	ldr	r3, [r7, #12]
    485e:	68da      	ldr	r2, [r3, #12]
    4860:	68fb      	ldr	r3, [r7, #12]
    4862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4864:	425b      	negs	r3, r3
    4866:	441a      	add	r2, r3
    4868:	68fb      	ldr	r3, [r7, #12]
    486a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    486c:	68fb      	ldr	r3, [r7, #12]
    486e:	68da      	ldr	r2, [r3, #12]
    4870:	68fb      	ldr	r3, [r7, #12]
    4872:	681b      	ldr	r3, [r3, #0]
    4874:	429a      	cmp	r2, r3
    4876:	d207      	bcs.n	4888 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4878:	68fb      	ldr	r3, [r7, #12]
    487a:	685a      	ldr	r2, [r3, #4]
    487c:	68fb      	ldr	r3, [r7, #12]
    487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4880:	425b      	negs	r3, r3
    4882:	441a      	add	r2, r3
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4888:	68fb      	ldr	r3, [r7, #12]
    488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    488c:	1c5a      	adds	r2, r3, #1
    488e:	68fb      	ldr	r3, [r7, #12]
    4890:	639a      	str	r2, [r3, #56]	; 0x38
}
    4892:	3710      	adds	r7, #16
    4894:	46bd      	mov	sp, r7
    4896:	bd80      	pop	{r7, pc}

00004898 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4898:	b580      	push	{r7, lr}
    489a:	b082      	sub	sp, #8
    489c:	af00      	add	r7, sp, #0
    489e:	6078      	str	r0, [r7, #4]
    48a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	681b      	ldr	r3, [r3, #0]
    48a6:	2b00      	cmp	r3, #0
    48a8:	d019      	beq.n	48de <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	68da      	ldr	r2, [r3, #12]
    48ae:	687b      	ldr	r3, [r7, #4]
    48b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48b2:	441a      	add	r2, r3
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	68da      	ldr	r2, [r3, #12]
    48bc:	687b      	ldr	r3, [r7, #4]
    48be:	685b      	ldr	r3, [r3, #4]
    48c0:	429a      	cmp	r2, r3
    48c2:	d303      	bcc.n	48cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	681a      	ldr	r2, [r3, #0]
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	68da      	ldr	r2, [r3, #12]
    48d0:	687b      	ldr	r3, [r7, #4]
    48d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48d4:	6838      	ldr	r0, [r7, #0]
    48d6:	4611      	mov	r1, r2
    48d8:	461a      	mov	r2, r3
    48da:	f013 ffe9 	bl	188b0 <memcpy>
	}
}
    48de:	3708      	adds	r7, #8
    48e0:	46bd      	mov	sp, r7
    48e2:	bd80      	pop	{r7, pc}

000048e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    48e4:	b580      	push	{r7, lr}
    48e6:	b082      	sub	sp, #8
    48e8:	af00      	add	r7, sp, #0
    48ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    48ec:	f001 fa3a 	bl	5d64 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    48f0:	e014      	b.n	491c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48f6:	2b00      	cmp	r3, #0
    48f8:	d00f      	beq.n	491a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    48fa:	687b      	ldr	r3, [r7, #4]
    48fc:	3324      	adds	r3, #36	; 0x24
    48fe:	4618      	mov	r0, r3
    4900:	f000 fea6 	bl	5650 <xTaskRemoveFromEventList>
    4904:	4603      	mov	r3, r0
    4906:	2b00      	cmp	r3, #0
    4908:	d001      	beq.n	490e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    490a:	f000 ff5d 	bl	57c8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    490e:	687b      	ldr	r3, [r7, #4]
    4910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4912:	1e5a      	subs	r2, r3, #1
    4914:	687b      	ldr	r3, [r7, #4]
    4916:	649a      	str	r2, [r3, #72]	; 0x48
    4918:	e000      	b.n	491c <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    491a:	e003      	b.n	4924 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4920:	2b00      	cmp	r3, #0
    4922:	dce6      	bgt.n	48f2 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4924:	687b      	ldr	r3, [r7, #4]
    4926:	f04f 32ff 	mov.w	r2, #4294967295
    492a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    492c:	f001 fa30 	bl	5d90 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4930:	f001 fa18 	bl	5d64 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4934:	e014      	b.n	4960 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4936:	687b      	ldr	r3, [r7, #4]
    4938:	691b      	ldr	r3, [r3, #16]
    493a:	2b00      	cmp	r3, #0
    493c:	d00f      	beq.n	495e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    493e:	687b      	ldr	r3, [r7, #4]
    4940:	3310      	adds	r3, #16
    4942:	4618      	mov	r0, r3
    4944:	f000 fe84 	bl	5650 <xTaskRemoveFromEventList>
    4948:	4603      	mov	r3, r0
    494a:	2b00      	cmp	r3, #0
    494c:	d001      	beq.n	4952 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    494e:	f000 ff3b 	bl	57c8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4956:	1e5a      	subs	r2, r3, #1
    4958:	687b      	ldr	r3, [r7, #4]
    495a:	645a      	str	r2, [r3, #68]	; 0x44
    495c:	e000      	b.n	4960 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    495e:	e003      	b.n	4968 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4960:	687b      	ldr	r3, [r7, #4]
    4962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4964:	2b00      	cmp	r3, #0
    4966:	dce6      	bgt.n	4936 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4968:	687b      	ldr	r3, [r7, #4]
    496a:	f04f 32ff 	mov.w	r2, #4294967295
    496e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4970:	f001 fa0e 	bl	5d90 <vPortExitCritical>
}
    4974:	3708      	adds	r7, #8
    4976:	46bd      	mov	sp, r7
    4978:	bd80      	pop	{r7, pc}
    497a:	bf00      	nop

0000497c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    497c:	b580      	push	{r7, lr}
    497e:	b084      	sub	sp, #16
    4980:	af00      	add	r7, sp, #0
    4982:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4984:	f001 f9ee 	bl	5d64 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4988:	687b      	ldr	r3, [r7, #4]
    498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    498c:	2b00      	cmp	r3, #0
    498e:	bf14      	ite	ne
    4990:	2300      	movne	r3, #0
    4992:	2301      	moveq	r3, #1
    4994:	b2db      	uxtb	r3, r3
    4996:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4998:	f001 f9fa 	bl	5d90 <vPortExitCritical>

	return xReturn;
    499c:	68fb      	ldr	r3, [r7, #12]
}
    499e:	4618      	mov	r0, r3
    49a0:	3710      	adds	r7, #16
    49a2:	46bd      	mov	sp, r7
    49a4:	bd80      	pop	{r7, pc}
    49a6:	bf00      	nop

000049a8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    49a8:	b480      	push	{r7}
    49aa:	b085      	sub	sp, #20
    49ac:	af00      	add	r7, sp, #0
    49ae:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    49b0:	687b      	ldr	r3, [r7, #4]
    49b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    49b4:	2b00      	cmp	r3, #0
    49b6:	bf14      	ite	ne
    49b8:	2300      	movne	r3, #0
    49ba:	2301      	moveq	r3, #1
    49bc:	b2db      	uxtb	r3, r3
    49be:	60fb      	str	r3, [r7, #12]

	return xReturn;
    49c0:	68fb      	ldr	r3, [r7, #12]
}
    49c2:	4618      	mov	r0, r3
    49c4:	3714      	adds	r7, #20
    49c6:	46bd      	mov	sp, r7
    49c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    49cc:	4770      	bx	lr
    49ce:	bf00      	nop

000049d0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    49d0:	b580      	push	{r7, lr}
    49d2:	b084      	sub	sp, #16
    49d4:	af00      	add	r7, sp, #0
    49d6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    49d8:	f001 f9c4 	bl	5d64 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    49e4:	429a      	cmp	r2, r3
    49e6:	bf14      	ite	ne
    49e8:	2300      	movne	r3, #0
    49ea:	2301      	moveq	r3, #1
    49ec:	b2db      	uxtb	r3, r3
    49ee:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    49f0:	f001 f9ce 	bl	5d90 <vPortExitCritical>

	return xReturn;
    49f4:	68fb      	ldr	r3, [r7, #12]
}
    49f6:	4618      	mov	r0, r3
    49f8:	3710      	adds	r7, #16
    49fa:	46bd      	mov	sp, r7
    49fc:	bd80      	pop	{r7, pc}
    49fe:	bf00      	nop

00004a00 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4a00:	b480      	push	{r7}
    4a02:	b085      	sub	sp, #20
    4a04:	af00      	add	r7, sp, #0
    4a06:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a0c:	687b      	ldr	r3, [r7, #4]
    4a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a10:	429a      	cmp	r2, r3
    4a12:	bf14      	ite	ne
    4a14:	2300      	movne	r3, #0
    4a16:	2301      	moveq	r3, #1
    4a18:	b2db      	uxtb	r3, r3
    4a1a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a1c:	68fb      	ldr	r3, [r7, #12]
}
    4a1e:	4618      	mov	r0, r3
    4a20:	3714      	adds	r7, #20
    4a22:	46bd      	mov	sp, r7
    4a24:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a28:	4770      	bx	lr
    4a2a:	bf00      	nop

00004a2c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4a2c:	b580      	push	{r7, lr}
    4a2e:	b08a      	sub	sp, #40	; 0x28
    4a30:	af02      	add	r7, sp, #8
    4a32:	60f8      	str	r0, [r7, #12]
    4a34:	60b9      	str	r1, [r7, #8]
    4a36:	603b      	str	r3, [r7, #0]
    4a38:	4613      	mov	r3, r2
    4a3a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4a3c:	88fb      	ldrh	r3, [r7, #6]
    4a3e:	4618      	mov	r0, r3
    4a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4a42:	f000 ffe5 	bl	5a10 <prvAllocateTCBAndStack>
    4a46:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4a48:	69bb      	ldr	r3, [r7, #24]
    4a4a:	2b00      	cmp	r3, #0
    4a4c:	f000 80a1 	beq.w	4b92 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4a50:	69bb      	ldr	r3, [r7, #24]
    4a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4a54:	88fb      	ldrh	r3, [r7, #6]
    4a56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a5a:	3b01      	subs	r3, #1
    4a5c:	009b      	lsls	r3, r3, #2
    4a5e:	4413      	add	r3, r2
    4a60:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4a62:	697b      	ldr	r3, [r7, #20]
    4a64:	f023 0307 	bic.w	r3, r3, #7
    4a68:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4a6a:	88fb      	ldrh	r3, [r7, #6]
    4a6c:	9300      	str	r3, [sp, #0]
    4a6e:	69b8      	ldr	r0, [r7, #24]
    4a70:	68b9      	ldr	r1, [r7, #8]
    4a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a76:	f000 febd 	bl	57f4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4a7a:	6978      	ldr	r0, [r7, #20]
    4a7c:	68f9      	ldr	r1, [r7, #12]
    4a7e:	683a      	ldr	r2, [r7, #0]
    4a80:	f001 f8f2 	bl	5c68 <pxPortInitialiseStack>
    4a84:	4602      	mov	r2, r0
    4a86:	69bb      	ldr	r3, [r7, #24]
    4a88:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d002      	beq.n	4a96 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a92:	69ba      	ldr	r2, [r7, #24]
    4a94:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4a96:	f001 f965 	bl	5d64 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4a9a:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aa2:	681b      	ldr	r3, [r3, #0]
    4aa4:	1c5a      	adds	r2, r3, #1
    4aa6:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aae:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4ab0:	f241 4310 	movw	r3, #5136	; 0x1410
    4ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab8:	681b      	ldr	r3, [r3, #0]
    4aba:	2b00      	cmp	r3, #0
    4abc:	d10f      	bne.n	4ade <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4abe:	f241 4310 	movw	r3, #5136	; 0x1410
    4ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac6:	69ba      	ldr	r2, [r7, #24]
    4ac8:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4aca:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ad2:	681b      	ldr	r3, [r3, #0]
    4ad4:	2b01      	cmp	r3, #1
    4ad6:	d118      	bne.n	4b0a <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4ad8:	f000 fec2 	bl	5860 <prvInitialiseTaskLists>
    4adc:	e015      	b.n	4b0a <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4ade:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae6:	681b      	ldr	r3, [r3, #0]
    4ae8:	2b00      	cmp	r3, #0
    4aea:	d10e      	bne.n	4b0a <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4aec:	f241 4310 	movw	r3, #5136	; 0x1410
    4af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af4:	681b      	ldr	r3, [r3, #0]
    4af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4afa:	429a      	cmp	r2, r3
    4afc:	d805      	bhi.n	4b0a <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4afe:	f241 4310 	movw	r3, #5136	; 0x1410
    4b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b06:	69ba      	ldr	r2, [r7, #24]
    4b08:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4b0a:	69bb      	ldr	r3, [r7, #24]
    4b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b0e:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b16:	681b      	ldr	r3, [r3, #0]
    4b18:	429a      	cmp	r2, r3
    4b1a:	d906      	bls.n	4b2a <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4b1c:	69bb      	ldr	r3, [r7, #24]
    4b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b20:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b28:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4b2a:	f241 530c 	movw	r3, #5388	; 0x150c
    4b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b32:	681b      	ldr	r3, [r3, #0]
    4b34:	1c5a      	adds	r2, r3, #1
    4b36:	f241 530c 	movw	r3, #5388	; 0x150c
    4b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b3e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4b40:	69bb      	ldr	r3, [r7, #24]
    4b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b44:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b4c:	681b      	ldr	r3, [r3, #0]
    4b4e:	429a      	cmp	r2, r3
    4b50:	d906      	bls.n	4b60 <xTaskGenericCreate+0x134>
    4b52:	69bb      	ldr	r3, [r7, #24]
    4b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b56:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b5e:	601a      	str	r2, [r3, #0]
    4b60:	69bb      	ldr	r3, [r7, #24]
    4b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b64:	4613      	mov	r3, r2
    4b66:	009b      	lsls	r3, r3, #2
    4b68:	4413      	add	r3, r2
    4b6a:	009b      	lsls	r3, r3, #2
    4b6c:	f241 4214 	movw	r2, #5140	; 0x1414
    4b70:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b74:	441a      	add	r2, r3
    4b76:	69bb      	ldr	r3, [r7, #24]
    4b78:	3304      	adds	r3, #4
    4b7a:	4610      	mov	r0, r2
    4b7c:	4619      	mov	r1, r3
    4b7e:	f7ff fadf 	bl	4140 <vListInsertEnd>

			xReturn = pdPASS;
    4b82:	2301      	movs	r3, #1
    4b84:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4b86:	69b8      	ldr	r0, [r7, #24]
    4b88:	f012 fe88 	bl	1789c <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4b8c:	f001 f900 	bl	5d90 <vPortExitCritical>
    4b90:	e002      	b.n	4b98 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4b92:	f04f 33ff 	mov.w	r3, #4294967295
    4b96:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4b98:	69fb      	ldr	r3, [r7, #28]
    4b9a:	2b01      	cmp	r3, #1
    4b9c:	d111      	bne.n	4bc2 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4b9e:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ba6:	681b      	ldr	r3, [r3, #0]
    4ba8:	2b00      	cmp	r3, #0
    4baa:	d00a      	beq.n	4bc2 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4bac:	f241 4310 	movw	r3, #5136	; 0x1410
    4bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb4:	681b      	ldr	r3, [r3, #0]
    4bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4bba:	429a      	cmp	r2, r3
    4bbc:	d201      	bcs.n	4bc2 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4bbe:	f001 f8c3 	bl	5d48 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4bc2:	69fb      	ldr	r3, [r7, #28]
}
    4bc4:	4618      	mov	r0, r3
    4bc6:	3720      	adds	r7, #32
    4bc8:	46bd      	mov	sp, r7
    4bca:	bd80      	pop	{r7, pc}

00004bcc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4bcc:	b580      	push	{r7, lr}
    4bce:	b084      	sub	sp, #16
    4bd0:	af00      	add	r7, sp, #0
    4bd2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4bd4:	f001 f8c6 	bl	5d64 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4bd8:	f241 4310 	movw	r3, #5136	; 0x1410
    4bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be0:	681b      	ldr	r3, [r3, #0]
    4be2:	687a      	ldr	r2, [r7, #4]
    4be4:	429a      	cmp	r2, r3
    4be6:	d101      	bne.n	4bec <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4be8:	2300      	movs	r3, #0
    4bea:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4bec:	687b      	ldr	r3, [r7, #4]
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d105      	bne.n	4bfe <vTaskDelete+0x32>
    4bf2:	f241 4310 	movw	r3, #5136	; 0x1410
    4bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bfa:	681b      	ldr	r3, [r3, #0]
    4bfc:	e000      	b.n	4c00 <vTaskDelete+0x34>
    4bfe:	687b      	ldr	r3, [r7, #4]
    4c00:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4c02:	68fb      	ldr	r3, [r7, #12]
    4c04:	3304      	adds	r3, #4
    4c06:	4618      	mov	r0, r3
    4c08:	f7ff fafa 	bl	4200 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4c0c:	68fb      	ldr	r3, [r7, #12]
    4c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c10:	2b00      	cmp	r3, #0
    4c12:	d004      	beq.n	4c1e <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4c14:	68fb      	ldr	r3, [r7, #12]
    4c16:	3318      	adds	r3, #24
    4c18:	4618      	mov	r0, r3
    4c1a:	f7ff faf1 	bl	4200 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4c1e:	68fb      	ldr	r3, [r7, #12]
    4c20:	3304      	adds	r3, #4
    4c22:	f241 40bc 	movw	r0, #5308	; 0x14bc
    4c26:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4c2a:	4619      	mov	r1, r3
    4c2c:	f7ff fa88 	bl	4140 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4c30:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	1c5a      	adds	r2, r3, #1
    4c3c:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c44:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4c46:	f241 530c 	movw	r3, #5388	; 0x150c
    4c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c4e:	681b      	ldr	r3, [r3, #0]
    4c50:	1c5a      	adds	r2, r3, #1
    4c52:	f241 530c 	movw	r3, #5388	; 0x150c
    4c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c5a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4c5c:	f001 f898 	bl	5d90 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4c60:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c68:	681b      	ldr	r3, [r3, #0]
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d004      	beq.n	4c78 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4c6e:	687b      	ldr	r3, [r7, #4]
    4c70:	2b00      	cmp	r3, #0
    4c72:	d101      	bne.n	4c78 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4c74:	f001 f868 	bl	5d48 <vPortYieldFromISR>
			}
		}
	}
    4c78:	3710      	adds	r7, #16
    4c7a:	46bd      	mov	sp, r7
    4c7c:	bd80      	pop	{r7, pc}
    4c7e:	bf00      	nop

00004c80 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4c80:	b580      	push	{r7, lr}
    4c82:	b086      	sub	sp, #24
    4c84:	af00      	add	r7, sp, #0
    4c86:	6078      	str	r0, [r7, #4]
    4c88:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4c8a:	2300      	movs	r3, #0
    4c8c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4c8e:	f000 fa8b 	bl	51a8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4c92:	687b      	ldr	r3, [r7, #4]
    4c94:	681a      	ldr	r2, [r3, #0]
    4c96:	683b      	ldr	r3, [r7, #0]
    4c98:	4413      	add	r3, r2
    4c9a:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4c9c:	687b      	ldr	r3, [r7, #4]
    4c9e:	681a      	ldr	r2, [r3, #0]
    4ca0:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca8:	681b      	ldr	r3, [r3, #0]
    4caa:	429a      	cmp	r2, r3
    4cac:	d90f      	bls.n	4cce <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4cae:	687b      	ldr	r3, [r7, #4]
    4cb0:	681a      	ldr	r2, [r3, #0]
    4cb2:	693b      	ldr	r3, [r7, #16]
    4cb4:	429a      	cmp	r2, r3
    4cb6:	d919      	bls.n	4cec <vTaskDelayUntil+0x6c>
    4cb8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cc0:	681b      	ldr	r3, [r3, #0]
    4cc2:	693a      	ldr	r2, [r7, #16]
    4cc4:	429a      	cmp	r2, r3
    4cc6:	d911      	bls.n	4cec <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4cc8:	2301      	movs	r3, #1
    4cca:	617b      	str	r3, [r7, #20]
    4ccc:	e00e      	b.n	4cec <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4cce:	687b      	ldr	r3, [r7, #4]
    4cd0:	681a      	ldr	r2, [r3, #0]
    4cd2:	693b      	ldr	r3, [r7, #16]
    4cd4:	429a      	cmp	r2, r3
    4cd6:	d807      	bhi.n	4ce8 <vTaskDelayUntil+0x68>
    4cd8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ce0:	681b      	ldr	r3, [r3, #0]
    4ce2:	693a      	ldr	r2, [r7, #16]
    4ce4:	429a      	cmp	r2, r3
    4ce6:	d901      	bls.n	4cec <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4ce8:	2301      	movs	r3, #1
    4cea:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	693a      	ldr	r2, [r7, #16]
    4cf0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4cf2:	697b      	ldr	r3, [r7, #20]
    4cf4:	2b00      	cmp	r3, #0
    4cf6:	d00b      	beq.n	4d10 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4cf8:	f241 4310 	movw	r3, #5136	; 0x1410
    4cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d00:	681b      	ldr	r3, [r3, #0]
    4d02:	3304      	adds	r3, #4
    4d04:	4618      	mov	r0, r3
    4d06:	f7ff fa7b 	bl	4200 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d0a:	6938      	ldr	r0, [r7, #16]
    4d0c:	f000 fe3c 	bl	5988 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4d10:	f000 fa5c 	bl	51cc <xTaskResumeAll>
    4d14:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d16:	68fb      	ldr	r3, [r7, #12]
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d101      	bne.n	4d20 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4d1c:	f001 f814 	bl	5d48 <vPortYieldFromISR>
		}
	}
    4d20:	3718      	adds	r7, #24
    4d22:	46bd      	mov	sp, r7
    4d24:	bd80      	pop	{r7, pc}
    4d26:	bf00      	nop

00004d28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4d28:	b580      	push	{r7, lr}
    4d2a:	b084      	sub	sp, #16
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4d30:	2300      	movs	r3, #0
    4d32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	2b00      	cmp	r3, #0
    4d38:	d018      	beq.n	4d6c <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4d3a:	f000 fa35 	bl	51a8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4d3e:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d46:	681a      	ldr	r2, [r3, #0]
    4d48:	687b      	ldr	r3, [r7, #4]
    4d4a:	4413      	add	r3, r2
    4d4c:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d4e:	f241 4310 	movw	r3, #5136	; 0x1410
    4d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d56:	681b      	ldr	r3, [r3, #0]
    4d58:	3304      	adds	r3, #4
    4d5a:	4618      	mov	r0, r3
    4d5c:	f7ff fa50 	bl	4200 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d60:	68b8      	ldr	r0, [r7, #8]
    4d62:	f000 fe11 	bl	5988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4d66:	f000 fa31 	bl	51cc <xTaskResumeAll>
    4d6a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d6c:	68fb      	ldr	r3, [r7, #12]
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d101      	bne.n	4d76 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4d72:	f000 ffe9 	bl	5d48 <vPortYieldFromISR>
		}
	}
    4d76:	3710      	adds	r7, #16
    4d78:	46bd      	mov	sp, r7
    4d7a:	bd80      	pop	{r7, pc}

00004d7c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4d7c:	b580      	push	{r7, lr}
    4d7e:	b084      	sub	sp, #16
    4d80:	af00      	add	r7, sp, #0
    4d82:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4d84:	f000 ffee 	bl	5d64 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4d88:	687b      	ldr	r3, [r7, #4]
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d105      	bne.n	4d9a <uxTaskPriorityGet+0x1e>
    4d8e:	f241 4310 	movw	r3, #5136	; 0x1410
    4d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d96:	681b      	ldr	r3, [r3, #0]
    4d98:	e000      	b.n	4d9c <uxTaskPriorityGet+0x20>
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4d9e:	68fb      	ldr	r3, [r7, #12]
    4da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4da2:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4da4:	f000 fff4 	bl	5d90 <vPortExitCritical>

		return uxReturn;
    4da8:	68bb      	ldr	r3, [r7, #8]
	}
    4daa:	4618      	mov	r0, r3
    4dac:	3710      	adds	r7, #16
    4dae:	46bd      	mov	sp, r7
    4db0:	bd80      	pop	{r7, pc}
    4db2:	bf00      	nop

00004db4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4db4:	b580      	push	{r7, lr}
    4db6:	b086      	sub	sp, #24
    4db8:	af00      	add	r7, sp, #0
    4dba:	6078      	str	r0, [r7, #4]
    4dbc:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4dbe:	2300      	movs	r3, #0
    4dc0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4dc2:	683b      	ldr	r3, [r7, #0]
    4dc4:	2b04      	cmp	r3, #4
    4dc6:	d901      	bls.n	4dcc <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4dc8:	2304      	movs	r3, #4
    4dca:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4dcc:	f000 ffca 	bl	5d64 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4dd0:	f241 4310 	movw	r3, #5136	; 0x1410
    4dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd8:	681b      	ldr	r3, [r3, #0]
    4dda:	687a      	ldr	r2, [r7, #4]
    4ddc:	429a      	cmp	r2, r3
    4dde:	d101      	bne.n	4de4 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4de0:	2300      	movs	r3, #0
    4de2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4de4:	687b      	ldr	r3, [r7, #4]
    4de6:	2b00      	cmp	r3, #0
    4de8:	d105      	bne.n	4df6 <vTaskPrioritySet+0x42>
    4dea:	f241 4310 	movw	r3, #5136	; 0x1410
    4dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df2:	681b      	ldr	r3, [r3, #0]
    4df4:	e000      	b.n	4df8 <vTaskPrioritySet+0x44>
    4df6:	687b      	ldr	r3, [r7, #4]
    4df8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4dfa:	693b      	ldr	r3, [r7, #16]
    4dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4dfe:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4e00:	68fa      	ldr	r2, [r7, #12]
    4e02:	683b      	ldr	r3, [r7, #0]
    4e04:	429a      	cmp	r2, r3
    4e06:	d058      	beq.n	4eba <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4e08:	683a      	ldr	r2, [r7, #0]
    4e0a:	68fb      	ldr	r3, [r7, #12]
    4e0c:	429a      	cmp	r2, r3
    4e0e:	d905      	bls.n	4e1c <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d007      	beq.n	4e26 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4e16:	2301      	movs	r3, #1
    4e18:	617b      	str	r3, [r7, #20]
    4e1a:	e004      	b.n	4e26 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4e1c:	687b      	ldr	r3, [r7, #4]
    4e1e:	2b00      	cmp	r3, #0
    4e20:	d101      	bne.n	4e26 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4e22:	2301      	movs	r3, #1
    4e24:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4e26:	693b      	ldr	r3, [r7, #16]
    4e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4e2a:	693b      	ldr	r3, [r7, #16]
    4e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e2e:	429a      	cmp	r2, r3
    4e30:	d102      	bne.n	4e38 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4e32:	693b      	ldr	r3, [r7, #16]
    4e34:	683a      	ldr	r2, [r7, #0]
    4e36:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4e38:	693b      	ldr	r3, [r7, #16]
    4e3a:	683a      	ldr	r2, [r7, #0]
    4e3c:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4e3e:	683b      	ldr	r3, [r7, #0]
    4e40:	f1c3 0205 	rsb	r2, r3, #5
    4e44:	693b      	ldr	r3, [r7, #16]
    4e46:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4e48:	693b      	ldr	r3, [r7, #16]
    4e4a:	6959      	ldr	r1, [r3, #20]
    4e4c:	68fa      	ldr	r2, [r7, #12]
    4e4e:	4613      	mov	r3, r2
    4e50:	009b      	lsls	r3, r3, #2
    4e52:	4413      	add	r3, r2
    4e54:	009b      	lsls	r3, r3, #2
    4e56:	f241 4214 	movw	r2, #5140	; 0x1414
    4e5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e5e:	4413      	add	r3, r2
    4e60:	4299      	cmp	r1, r3
    4e62:	d125      	bne.n	4eb0 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4e64:	693b      	ldr	r3, [r7, #16]
    4e66:	3304      	adds	r3, #4
    4e68:	4618      	mov	r0, r3
    4e6a:	f7ff f9c9 	bl	4200 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4e6e:	693b      	ldr	r3, [r7, #16]
    4e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e72:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e7a:	681b      	ldr	r3, [r3, #0]
    4e7c:	429a      	cmp	r2, r3
    4e7e:	d906      	bls.n	4e8e <vTaskPrioritySet+0xda>
    4e80:	693b      	ldr	r3, [r7, #16]
    4e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e84:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e8c:	601a      	str	r2, [r3, #0]
    4e8e:	693b      	ldr	r3, [r7, #16]
    4e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e92:	4613      	mov	r3, r2
    4e94:	009b      	lsls	r3, r3, #2
    4e96:	4413      	add	r3, r2
    4e98:	009b      	lsls	r3, r3, #2
    4e9a:	f241 4214 	movw	r2, #5140	; 0x1414
    4e9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ea2:	441a      	add	r2, r3
    4ea4:	693b      	ldr	r3, [r7, #16]
    4ea6:	3304      	adds	r3, #4
    4ea8:	4610      	mov	r0, r2
    4eaa:	4619      	mov	r1, r3
    4eac:	f7ff f948 	bl	4140 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4eb0:	697b      	ldr	r3, [r7, #20]
    4eb2:	2b01      	cmp	r3, #1
    4eb4:	d101      	bne.n	4eba <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4eb6:	f000 ff47 	bl	5d48 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4eba:	f000 ff69 	bl	5d90 <vPortExitCritical>
	}
    4ebe:	3718      	adds	r7, #24
    4ec0:	46bd      	mov	sp, r7
    4ec2:	bd80      	pop	{r7, pc}

00004ec4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4ec4:	b580      	push	{r7, lr}
    4ec6:	b084      	sub	sp, #16
    4ec8:	af00      	add	r7, sp, #0
    4eca:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4ecc:	f000 ff4a 	bl	5d64 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4ed0:	f241 4310 	movw	r3, #5136	; 0x1410
    4ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ed8:	681b      	ldr	r3, [r3, #0]
    4eda:	687a      	ldr	r2, [r7, #4]
    4edc:	429a      	cmp	r2, r3
    4ede:	d101      	bne.n	4ee4 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4ee0:	2300      	movs	r3, #0
    4ee2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4ee4:	687b      	ldr	r3, [r7, #4]
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d105      	bne.n	4ef6 <vTaskSuspend+0x32>
    4eea:	f241 4310 	movw	r3, #5136	; 0x1410
    4eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ef2:	681b      	ldr	r3, [r3, #0]
    4ef4:	e000      	b.n	4ef8 <vTaskSuspend+0x34>
    4ef6:	687b      	ldr	r3, [r7, #4]
    4ef8:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4efa:	68fb      	ldr	r3, [r7, #12]
    4efc:	3304      	adds	r3, #4
    4efe:	4618      	mov	r0, r3
    4f00:	f7ff f97e 	bl	4200 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4f04:	68fb      	ldr	r3, [r7, #12]
    4f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d004      	beq.n	4f16 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4f0c:	68fb      	ldr	r3, [r7, #12]
    4f0e:	3318      	adds	r3, #24
    4f10:	4618      	mov	r0, r3
    4f12:	f7ff f975 	bl	4200 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4f16:	68fb      	ldr	r3, [r7, #12]
    4f18:	3304      	adds	r3, #4
    4f1a:	f241 40d4 	movw	r0, #5332	; 0x14d4
    4f1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4f22:	4619      	mov	r1, r3
    4f24:	f7ff f90c 	bl	4140 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4f28:	f000 ff32 	bl	5d90 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4f2c:	687b      	ldr	r3, [r7, #4]
    4f2e:	2b00      	cmp	r3, #0
    4f30:	d11e      	bne.n	4f70 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4f32:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f3a:	681b      	ldr	r3, [r3, #0]
    4f3c:	2b00      	cmp	r3, #0
    4f3e:	d002      	beq.n	4f46 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4f40:	f000 ff02 	bl	5d48 <vPortYieldFromISR>
    4f44:	e014      	b.n	4f70 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4f46:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f4e:	681a      	ldr	r2, [r3, #0]
    4f50:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f58:	681b      	ldr	r3, [r3, #0]
    4f5a:	429a      	cmp	r2, r3
    4f5c:	d106      	bne.n	4f6c <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4f5e:	f241 4310 	movw	r3, #5136	; 0x1410
    4f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f66:	2200      	movs	r2, #0
    4f68:	601a      	str	r2, [r3, #0]
    4f6a:	e001      	b.n	4f70 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4f6c:	f000 fadc 	bl	5528 <vTaskSwitchContext>
				}
			}
		}
	}
    4f70:	3710      	adds	r7, #16
    4f72:	46bd      	mov	sp, r7
    4f74:	bd80      	pop	{r7, pc}
    4f76:	bf00      	nop

00004f78 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4f78:	b480      	push	{r7}
    4f7a:	b085      	sub	sp, #20
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4f80:	2300      	movs	r3, #0
    4f82:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4f84:	687b      	ldr	r3, [r7, #4]
    4f86:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4f88:	68bb      	ldr	r3, [r7, #8]
    4f8a:	695a      	ldr	r2, [r3, #20]
    4f8c:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f94:	429a      	cmp	r2, r3
    4f96:	d10d      	bne.n	4fb4 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4f98:	68bb      	ldr	r3, [r7, #8]
    4f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f9c:	f241 43a8 	movw	r3, #5288	; 0x14a8
    4fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa4:	429a      	cmp	r2, r3
    4fa6:	d005      	beq.n	4fb4 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4fa8:	68bb      	ldr	r3, [r7, #8]
    4faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4fac:	2b00      	cmp	r3, #0
    4fae:	d101      	bne.n	4fb4 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4fb0:	2301      	movs	r3, #1
    4fb2:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4fb4:	68fb      	ldr	r3, [r7, #12]
	}
    4fb6:	4618      	mov	r0, r3
    4fb8:	3714      	adds	r7, #20
    4fba:	46bd      	mov	sp, r7
    4fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fc0:	4770      	bx	lr
    4fc2:	bf00      	nop

00004fc4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4fc4:	b580      	push	{r7, lr}
    4fc6:	b084      	sub	sp, #16
    4fc8:	af00      	add	r7, sp, #0
    4fca:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4fd0:	68fb      	ldr	r3, [r7, #12]
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d043      	beq.n	505e <vTaskResume+0x9a>
    4fd6:	f241 4310 	movw	r3, #5136	; 0x1410
    4fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fde:	681b      	ldr	r3, [r3, #0]
    4fe0:	68fa      	ldr	r2, [r7, #12]
    4fe2:	429a      	cmp	r2, r3
    4fe4:	d03b      	beq.n	505e <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4fe6:	f000 febd 	bl	5d64 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4fea:	68f8      	ldr	r0, [r7, #12]
    4fec:	f7ff ffc4 	bl	4f78 <xTaskIsTaskSuspended>
    4ff0:	4603      	mov	r3, r0
    4ff2:	2b01      	cmp	r3, #1
    4ff4:	d131      	bne.n	505a <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4ff6:	68fb      	ldr	r3, [r7, #12]
    4ff8:	3304      	adds	r3, #4
    4ffa:	4618      	mov	r0, r3
    4ffc:	f7ff f900 	bl	4200 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5000:	68fb      	ldr	r3, [r7, #12]
    5002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5004:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    500c:	681b      	ldr	r3, [r3, #0]
    500e:	429a      	cmp	r2, r3
    5010:	d906      	bls.n	5020 <vTaskResume+0x5c>
    5012:	68fb      	ldr	r3, [r7, #12]
    5014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5016:	f241 43f4 	movw	r3, #5364	; 0x14f4
    501a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501e:	601a      	str	r2, [r3, #0]
    5020:	68fb      	ldr	r3, [r7, #12]
    5022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5024:	4613      	mov	r3, r2
    5026:	009b      	lsls	r3, r3, #2
    5028:	4413      	add	r3, r2
    502a:	009b      	lsls	r3, r3, #2
    502c:	f241 4214 	movw	r2, #5140	; 0x1414
    5030:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5034:	441a      	add	r2, r3
    5036:	68fb      	ldr	r3, [r7, #12]
    5038:	3304      	adds	r3, #4
    503a:	4610      	mov	r0, r2
    503c:	4619      	mov	r1, r3
    503e:	f7ff f87f 	bl	4140 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5042:	68fb      	ldr	r3, [r7, #12]
    5044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5046:	f241 4310 	movw	r3, #5136	; 0x1410
    504a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    504e:	681b      	ldr	r3, [r3, #0]
    5050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5052:	429a      	cmp	r2, r3
    5054:	d301      	bcc.n	505a <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    5056:	f000 fe77 	bl	5d48 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    505a:	f000 fe99 	bl	5d90 <vPortExitCritical>
		}
	}
    505e:	3710      	adds	r7, #16
    5060:	46bd      	mov	sp, r7
    5062:	bd80      	pop	{r7, pc}

00005064 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    5064:	b580      	push	{r7, lr}
    5066:	b086      	sub	sp, #24
    5068:	af00      	add	r7, sp, #0
    506a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    506c:	2300      	movs	r3, #0
    506e:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    5070:	687b      	ldr	r3, [r7, #4]
    5072:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5074:	2300      	movs	r3, #0
    5076:	60fb      	str	r3, [r7, #12]
    5078:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    507c:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    5080:	6938      	ldr	r0, [r7, #16]
    5082:	f7ff ff79 	bl	4f78 <xTaskIsTaskSuspended>
    5086:	4603      	mov	r3, r0
    5088:	2b01      	cmp	r3, #1
    508a:	d144      	bne.n	5116 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    508c:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5094:	681b      	ldr	r3, [r3, #0]
    5096:	2b00      	cmp	r3, #0
    5098:	d134      	bne.n	5104 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    509a:	693b      	ldr	r3, [r7, #16]
    509c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    509e:	f241 4310 	movw	r3, #5136	; 0x1410
    50a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50a6:	681b      	ldr	r3, [r3, #0]
    50a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50aa:	429a      	cmp	r2, r3
    50ac:	bf34      	ite	cc
    50ae:	2300      	movcc	r3, #0
    50b0:	2301      	movcs	r3, #1
    50b2:	b2db      	uxtb	r3, r3
    50b4:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    50b6:	693b      	ldr	r3, [r7, #16]
    50b8:	3304      	adds	r3, #4
    50ba:	4618      	mov	r0, r3
    50bc:	f7ff f8a0 	bl	4200 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    50c0:	693b      	ldr	r3, [r7, #16]
    50c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50c4:	f241 43f4 	movw	r3, #5364	; 0x14f4
    50c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50cc:	681b      	ldr	r3, [r3, #0]
    50ce:	429a      	cmp	r2, r3
    50d0:	d906      	bls.n	50e0 <xTaskResumeFromISR+0x7c>
    50d2:	693b      	ldr	r3, [r7, #16]
    50d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50d6:	f241 43f4 	movw	r3, #5364	; 0x14f4
    50da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50de:	601a      	str	r2, [r3, #0]
    50e0:	693b      	ldr	r3, [r7, #16]
    50e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50e4:	4613      	mov	r3, r2
    50e6:	009b      	lsls	r3, r3, #2
    50e8:	4413      	add	r3, r2
    50ea:	009b      	lsls	r3, r3, #2
    50ec:	f241 4214 	movw	r2, #5140	; 0x1414
    50f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50f4:	441a      	add	r2, r3
    50f6:	693b      	ldr	r3, [r7, #16]
    50f8:	3304      	adds	r3, #4
    50fa:	4610      	mov	r0, r2
    50fc:	4619      	mov	r1, r3
    50fe:	f7ff f81f 	bl	4140 <vListInsertEnd>
    5102:	e008      	b.n	5116 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5104:	693b      	ldr	r3, [r7, #16]
    5106:	3318      	adds	r3, #24
    5108:	f241 40a8 	movw	r0, #5288	; 0x14a8
    510c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5110:	4619      	mov	r1, r3
    5112:	f7ff f815 	bl	4140 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    5116:	f04f 0000 	mov.w	r0, #0
    511a:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    511e:	697b      	ldr	r3, [r7, #20]
	}
    5120:	4618      	mov	r0, r3
    5122:	3718      	adds	r7, #24
    5124:	46bd      	mov	sp, r7
    5126:	bd80      	pop	{r7, pc}

00005128 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    5128:	b580      	push	{r7, lr}
    512a:	b086      	sub	sp, #24
    512c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    512e:	2300      	movs	r3, #0
    5130:	9300      	str	r3, [sp, #0]
    5132:	2300      	movs	r3, #0
    5134:	9301      	str	r3, [sp, #4]
    5136:	2300      	movs	r3, #0
    5138:	9302      	str	r3, [sp, #8]
    513a:	2300      	movs	r3, #0
    513c:	9303      	str	r3, [sp, #12]
    513e:	f245 70e1 	movw	r0, #22497	; 0x57e1
    5142:	f2c0 0000 	movt	r0, #0
    5146:	f648 21b4 	movw	r1, #35508	; 0x8ab4
    514a:	f2c0 0101 	movt	r1, #1
    514e:	2280      	movs	r2, #128	; 0x80
    5150:	2300      	movs	r3, #0
    5152:	f7ff fc6b 	bl	4a2c <xTaskGenericCreate>
    5156:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5158:	687b      	ldr	r3, [r7, #4]
    515a:	2b01      	cmp	r3, #1
    515c:	d111      	bne.n	5182 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    515e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5162:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    5166:	f241 43f8 	movw	r3, #5368	; 0x14f8
    516a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    516e:	2201      	movs	r2, #1
    5170:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    5172:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    517a:	2200      	movs	r2, #0
    517c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    517e:	f000 fdb5 	bl	5cec <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    5182:	3708      	adds	r7, #8
    5184:	46bd      	mov	sp, r7
    5186:	bd80      	pop	{r7, pc}

00005188 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5188:	b580      	push	{r7, lr}
    518a:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    518c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5190:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    5194:	f241 43f8 	movw	r3, #5368	; 0x14f8
    5198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    519c:	2200      	movs	r2, #0
    519e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    51a0:	f000 fdcc 	bl	5d3c <vPortEndScheduler>
}
    51a4:	bd80      	pop	{r7, pc}
    51a6:	bf00      	nop

000051a8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    51a8:	b480      	push	{r7}
    51aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    51ac:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b4:	681b      	ldr	r3, [r3, #0]
    51b6:	1c5a      	adds	r2, r3, #1
    51b8:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c0:	601a      	str	r2, [r3, #0]
}
    51c2:	46bd      	mov	sp, r7
    51c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51c8:	4770      	bx	lr
    51ca:	bf00      	nop

000051cc <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    51cc:	b590      	push	{r4, r7, lr}
    51ce:	b083      	sub	sp, #12
    51d0:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    51d2:	2300      	movs	r3, #0
    51d4:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    51d6:	f000 fdc5 	bl	5d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    51da:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e2:	681b      	ldr	r3, [r3, #0]
    51e4:	1e5a      	subs	r2, r3, #1
    51e6:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ee:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    51f0:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f8:	681b      	ldr	r3, [r3, #0]
    51fa:	2b00      	cmp	r3, #0
    51fc:	d177      	bne.n	52ee <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    51fe:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5206:	681b      	ldr	r3, [r3, #0]
    5208:	2b00      	cmp	r3, #0
    520a:	d070      	beq.n	52ee <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    520c:	2300      	movs	r3, #0
    520e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5210:	e036      	b.n	5280 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    5212:	f241 43a8 	movw	r3, #5288	; 0x14a8
    5216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    521a:	68db      	ldr	r3, [r3, #12]
    521c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    521e:	f104 0318 	add.w	r3, r4, #24
    5222:	4618      	mov	r0, r3
    5224:	f7fe ffec 	bl	4200 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5228:	1d23      	adds	r3, r4, #4
    522a:	4618      	mov	r0, r3
    522c:	f7fe ffe8 	bl	4200 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5230:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5232:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    523a:	681b      	ldr	r3, [r3, #0]
    523c:	429a      	cmp	r2, r3
    523e:	d905      	bls.n	524c <xTaskResumeAll+0x80>
    5240:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5242:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    524a:	601a      	str	r2, [r3, #0]
    524c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    524e:	4613      	mov	r3, r2
    5250:	009b      	lsls	r3, r3, #2
    5252:	4413      	add	r3, r2
    5254:	009b      	lsls	r3, r3, #2
    5256:	f241 4214 	movw	r2, #5140	; 0x1414
    525a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    525e:	441a      	add	r2, r3
    5260:	1d23      	adds	r3, r4, #4
    5262:	4610      	mov	r0, r2
    5264:	4619      	mov	r1, r3
    5266:	f7fe ff6b 	bl	4140 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    526a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    526c:	f241 4310 	movw	r3, #5136	; 0x1410
    5270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5274:	681b      	ldr	r3, [r3, #0]
    5276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5278:	429a      	cmp	r2, r3
    527a:	d301      	bcc.n	5280 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    527c:	2301      	movs	r3, #1
    527e:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5280:	f241 43a8 	movw	r3, #5288	; 0x14a8
    5284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5288:	681b      	ldr	r3, [r3, #0]
    528a:	2b00      	cmp	r3, #0
    528c:	d1c1      	bne.n	5212 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    528e:	f241 5300 	movw	r3, #5376	; 0x1500
    5292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5296:	681b      	ldr	r3, [r3, #0]
    5298:	2b00      	cmp	r3, #0
    529a:	d014      	beq.n	52c6 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    529c:	e00c      	b.n	52b8 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    529e:	f000 f865 	bl	536c <vTaskIncrementTick>
						--uxMissedTicks;
    52a2:	f241 5300 	movw	r3, #5376	; 0x1500
    52a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52aa:	681b      	ldr	r3, [r3, #0]
    52ac:	1e5a      	subs	r2, r3, #1
    52ae:	f241 5300 	movw	r3, #5376	; 0x1500
    52b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b6:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52b8:	f241 5300 	movw	r3, #5376	; 0x1500
    52bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c0:	681b      	ldr	r3, [r3, #0]
    52c2:	2b00      	cmp	r3, #0
    52c4:	d1eb      	bne.n	529e <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    52c6:	683b      	ldr	r3, [r7, #0]
    52c8:	2b01      	cmp	r3, #1
    52ca:	d006      	beq.n	52da <xTaskResumeAll+0x10e>
    52cc:	f241 5304 	movw	r3, #5380	; 0x1504
    52d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d4:	681b      	ldr	r3, [r3, #0]
    52d6:	2b01      	cmp	r3, #1
    52d8:	d109      	bne.n	52ee <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    52da:	2301      	movs	r3, #1
    52dc:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    52de:	f241 5304 	movw	r3, #5380	; 0x1504
    52e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e6:	2200      	movs	r2, #0
    52e8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    52ea:	f000 fd2d 	bl	5d48 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    52ee:	f000 fd4f 	bl	5d90 <vPortExitCritical>

	return xAlreadyYielded;
    52f2:	687b      	ldr	r3, [r7, #4]
}
    52f4:	4618      	mov	r0, r3
    52f6:	370c      	adds	r7, #12
    52f8:	46bd      	mov	sp, r7
    52fa:	bd90      	pop	{r4, r7, pc}

000052fc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    52fc:	b580      	push	{r7, lr}
    52fe:	b082      	sub	sp, #8
    5300:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    5302:	f000 fd2f 	bl	5d64 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    5306:	f241 43ec 	movw	r3, #5356	; 0x14ec
    530a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    530e:	681b      	ldr	r3, [r3, #0]
    5310:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    5312:	f000 fd3d 	bl	5d90 <vPortExitCritical>

	return xTicks;
    5316:	687b      	ldr	r3, [r7, #4]
}
    5318:	4618      	mov	r0, r3
    531a:	3708      	adds	r7, #8
    531c:	46bd      	mov	sp, r7
    531e:	bd80      	pop	{r7, pc}

00005320 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    5320:	b480      	push	{r7}
    5322:	b083      	sub	sp, #12
    5324:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5326:	2300      	movs	r3, #0
    5328:	607b      	str	r3, [r7, #4]
    532a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    532e:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    5332:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    533a:	681b      	ldr	r3, [r3, #0]
    533c:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    533e:	f04f 0000 	mov.w	r0, #0
    5342:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5346:	683b      	ldr	r3, [r7, #0]
}
    5348:	4618      	mov	r0, r3
    534a:	370c      	adds	r7, #12
    534c:	46bd      	mov	sp, r7
    534e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5352:	4770      	bx	lr

00005354 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5354:	b480      	push	{r7}
    5356:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5358:	f241 43e8 	movw	r3, #5352	; 0x14e8
    535c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5360:	681b      	ldr	r3, [r3, #0]
}
    5362:	4618      	mov	r0, r3
    5364:	46bd      	mov	sp, r7
    5366:	f85d 7b04 	ldr.w	r7, [sp], #4
    536a:	4770      	bx	lr

0000536c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    536c:	b580      	push	{r7, lr}
    536e:	b084      	sub	sp, #16
    5370:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5372:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    537a:	681b      	ldr	r3, [r3, #0]
    537c:	2b00      	cmp	r3, #0
    537e:	f040 80b9 	bne.w	54f4 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    5382:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    538a:	681b      	ldr	r3, [r3, #0]
    538c:	1c5a      	adds	r2, r3, #1
    538e:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5396:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5398:	f241 43ec 	movw	r3, #5356	; 0x14ec
    539c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a0:	681b      	ldr	r3, [r3, #0]
    53a2:	2b00      	cmp	r3, #0
    53a4:	d13f      	bne.n	5426 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    53a6:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ae:	681b      	ldr	r3, [r3, #0]
    53b0:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    53b2:	f241 43a4 	movw	r3, #5284	; 0x14a4
    53b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ba:	681a      	ldr	r2, [r3, #0]
    53bc:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c4:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    53c6:	f241 43a4 	movw	r3, #5284	; 0x14a4
    53ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ce:	68fa      	ldr	r2, [r7, #12]
    53d0:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    53d2:	f241 5308 	movw	r3, #5384	; 0x1508
    53d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53da:	681b      	ldr	r3, [r3, #0]
    53dc:	1c5a      	adds	r2, r3, #1
    53de:	f241 5308 	movw	r3, #5384	; 0x1508
    53e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e6:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    53e8:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53f0:	681b      	ldr	r3, [r3, #0]
    53f2:	681b      	ldr	r3, [r3, #0]
    53f4:	2b00      	cmp	r3, #0
    53f6:	d107      	bne.n	5408 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    53f8:	f240 5330 	movw	r3, #1328	; 0x530
    53fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5400:	f04f 32ff 	mov.w	r2, #4294967295
    5404:	601a      	str	r2, [r3, #0]
    5406:	e00e      	b.n	5426 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5408:	f241 43a0 	movw	r3, #5280	; 0x14a0
    540c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5410:	681b      	ldr	r3, [r3, #0]
    5412:	68db      	ldr	r3, [r3, #12]
    5414:	68db      	ldr	r3, [r3, #12]
    5416:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    5418:	68bb      	ldr	r3, [r7, #8]
    541a:	685a      	ldr	r2, [r3, #4]
    541c:	f240 5330 	movw	r3, #1328	; 0x530
    5420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5424:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    5426:	f241 43ec 	movw	r3, #5356	; 0x14ec
    542a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542e:	681a      	ldr	r2, [r3, #0]
    5430:	f240 5330 	movw	r3, #1328	; 0x530
    5434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5438:	681b      	ldr	r3, [r3, #0]
    543a:	429a      	cmp	r2, r3
    543c:	d359      	bcc.n	54f2 <vTaskIncrementTick+0x186>
    543e:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5446:	681b      	ldr	r3, [r3, #0]
    5448:	681b      	ldr	r3, [r3, #0]
    544a:	2b00      	cmp	r3, #0
    544c:	d107      	bne.n	545e <vTaskIncrementTick+0xf2>
    544e:	f240 5330 	movw	r3, #1328	; 0x530
    5452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5456:	f04f 32ff 	mov.w	r2, #4294967295
    545a:	601a      	str	r2, [r3, #0]
    545c:	e049      	b.n	54f2 <vTaskIncrementTick+0x186>
    545e:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	68db      	ldr	r3, [r3, #12]
    546a:	68db      	ldr	r3, [r3, #12]
    546c:	60bb      	str	r3, [r7, #8]
    546e:	68bb      	ldr	r3, [r7, #8]
    5470:	685b      	ldr	r3, [r3, #4]
    5472:	607b      	str	r3, [r7, #4]
    5474:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    547c:	681a      	ldr	r2, [r3, #0]
    547e:	687b      	ldr	r3, [r7, #4]
    5480:	429a      	cmp	r2, r3
    5482:	d206      	bcs.n	5492 <vTaskIncrementTick+0x126>
    5484:	f240 5330 	movw	r3, #1328	; 0x530
    5488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    548c:	687a      	ldr	r2, [r7, #4]
    548e:	601a      	str	r2, [r3, #0]
    5490:	e02f      	b.n	54f2 <vTaskIncrementTick+0x186>
    5492:	68bb      	ldr	r3, [r7, #8]
    5494:	3304      	adds	r3, #4
    5496:	4618      	mov	r0, r3
    5498:	f7fe feb2 	bl	4200 <vListRemove>
    549c:	68bb      	ldr	r3, [r7, #8]
    549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54a0:	2b00      	cmp	r3, #0
    54a2:	d004      	beq.n	54ae <vTaskIncrementTick+0x142>
    54a4:	68bb      	ldr	r3, [r7, #8]
    54a6:	3318      	adds	r3, #24
    54a8:	4618      	mov	r0, r3
    54aa:	f7fe fea9 	bl	4200 <vListRemove>
    54ae:	68bb      	ldr	r3, [r7, #8]
    54b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54b2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    54b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ba:	681b      	ldr	r3, [r3, #0]
    54bc:	429a      	cmp	r2, r3
    54be:	d906      	bls.n	54ce <vTaskIncrementTick+0x162>
    54c0:	68bb      	ldr	r3, [r7, #8]
    54c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54c4:	f241 43f4 	movw	r3, #5364	; 0x14f4
    54c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54cc:	601a      	str	r2, [r3, #0]
    54ce:	68bb      	ldr	r3, [r7, #8]
    54d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54d2:	4613      	mov	r3, r2
    54d4:	009b      	lsls	r3, r3, #2
    54d6:	4413      	add	r3, r2
    54d8:	009b      	lsls	r3, r3, #2
    54da:	f241 4214 	movw	r2, #5140	; 0x1414
    54de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54e2:	441a      	add	r2, r3
    54e4:	68bb      	ldr	r3, [r7, #8]
    54e6:	3304      	adds	r3, #4
    54e8:	4610      	mov	r0, r2
    54ea:	4619      	mov	r1, r3
    54ec:	f7fe fe28 	bl	4140 <vListInsertEnd>
    54f0:	e7a5      	b.n	543e <vTaskIncrementTick+0xd2>
    54f2:	e00c      	b.n	550e <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    54f4:	f241 5300 	movw	r3, #5376	; 0x1500
    54f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54fc:	681b      	ldr	r3, [r3, #0]
    54fe:	1c5a      	adds	r2, r3, #1
    5500:	f241 5300 	movw	r3, #5376	; 0x1500
    5504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5508:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    550a:	f012 f9d9 	bl	178c0 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    550e:	f241 5300 	movw	r3, #5376	; 0x1500
    5512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5516:	681b      	ldr	r3, [r3, #0]
    5518:	2b00      	cmp	r3, #0
    551a:	d101      	bne.n	5520 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    551c:	f012 f9d0 	bl	178c0 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    5520:	3710      	adds	r7, #16
    5522:	46bd      	mov	sp, r7
    5524:	bd80      	pop	{r7, pc}
    5526:	bf00      	nop

00005528 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5528:	b580      	push	{r7, lr}
    552a:	b082      	sub	sp, #8
    552c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    552e:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5536:	681b      	ldr	r3, [r3, #0]
    5538:	2b00      	cmp	r3, #0
    553a:	d006      	beq.n	554a <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    553c:	f241 5304 	movw	r3, #5380	; 0x1504
    5540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5544:	2201      	movs	r2, #1
    5546:	601a      	str	r2, [r3, #0]
    5548:	e047      	b.n	55da <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    554a:	f012 f9b3 	bl	178b4 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    554e:	e00a      	b.n	5566 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5550:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5558:	681b      	ldr	r3, [r3, #0]
    555a:	1e5a      	subs	r2, r3, #1
    555c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5564:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5566:	f241 43f4 	movw	r3, #5364	; 0x14f4
    556a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    556e:	6819      	ldr	r1, [r3, #0]
    5570:	f241 4214 	movw	r2, #5140	; 0x1414
    5574:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5578:	460b      	mov	r3, r1
    557a:	009b      	lsls	r3, r3, #2
    557c:	440b      	add	r3, r1
    557e:	009b      	lsls	r3, r3, #2
    5580:	4413      	add	r3, r2
    5582:	681b      	ldr	r3, [r3, #0]
    5584:	2b00      	cmp	r3, #0
    5586:	d0e3      	beq.n	5550 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5588:	f241 43f4 	movw	r3, #5364	; 0x14f4
    558c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5590:	681a      	ldr	r2, [r3, #0]
    5592:	4613      	mov	r3, r2
    5594:	009b      	lsls	r3, r3, #2
    5596:	4413      	add	r3, r2
    5598:	009b      	lsls	r3, r3, #2
    559a:	f241 4214 	movw	r2, #5140	; 0x1414
    559e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55a2:	4413      	add	r3, r2
    55a4:	607b      	str	r3, [r7, #4]
    55a6:	687b      	ldr	r3, [r7, #4]
    55a8:	685b      	ldr	r3, [r3, #4]
    55aa:	685a      	ldr	r2, [r3, #4]
    55ac:	687b      	ldr	r3, [r7, #4]
    55ae:	605a      	str	r2, [r3, #4]
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	685a      	ldr	r2, [r3, #4]
    55b4:	687b      	ldr	r3, [r7, #4]
    55b6:	3308      	adds	r3, #8
    55b8:	429a      	cmp	r2, r3
    55ba:	d104      	bne.n	55c6 <vTaskSwitchContext+0x9e>
    55bc:	687b      	ldr	r3, [r7, #4]
    55be:	685b      	ldr	r3, [r3, #4]
    55c0:	685a      	ldr	r2, [r3, #4]
    55c2:	687b      	ldr	r3, [r7, #4]
    55c4:	605a      	str	r2, [r3, #4]
    55c6:	687b      	ldr	r3, [r7, #4]
    55c8:	685b      	ldr	r3, [r3, #4]
    55ca:	68da      	ldr	r2, [r3, #12]
    55cc:	f241 4310 	movw	r3, #5136	; 0x1410
    55d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55d4:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    55d6:	f012 f967 	bl	178a8 <myTraceSwitchedIn>
	}
}
    55da:	3708      	adds	r7, #8
    55dc:	46bd      	mov	sp, r7
    55de:	bd80      	pop	{r7, pc}

000055e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    55e0:	b580      	push	{r7, lr}
    55e2:	b084      	sub	sp, #16
    55e4:	af00      	add	r7, sp, #0
    55e6:	6078      	str	r0, [r7, #4]
    55e8:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    55ea:	f241 4310 	movw	r3, #5136	; 0x1410
    55ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f2:	681b      	ldr	r3, [r3, #0]
    55f4:	3318      	adds	r3, #24
    55f6:	6878      	ldr	r0, [r7, #4]
    55f8:	4619      	mov	r1, r3
    55fa:	f7fe fdc9 	bl	4190 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    55fe:	f241 4310 	movw	r3, #5136	; 0x1410
    5602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5606:	681b      	ldr	r3, [r3, #0]
    5608:	3304      	adds	r3, #4
    560a:	4618      	mov	r0, r3
    560c:	f7fe fdf8 	bl	4200 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    5610:	683b      	ldr	r3, [r7, #0]
    5612:	f1b3 3fff 	cmp.w	r3, #4294967295
    5616:	d10d      	bne.n	5634 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5618:	f241 4310 	movw	r3, #5136	; 0x1410
    561c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5620:	681b      	ldr	r3, [r3, #0]
    5622:	3304      	adds	r3, #4
    5624:	f241 40d4 	movw	r0, #5332	; 0x14d4
    5628:	f2c2 0000 	movt	r0, #8192	; 0x2000
    562c:	4619      	mov	r1, r3
    562e:	f7fe fd87 	bl	4140 <vListInsertEnd>
    5632:	e00a      	b.n	564a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5634:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    563c:	681a      	ldr	r2, [r3, #0]
    563e:	683b      	ldr	r3, [r7, #0]
    5640:	4413      	add	r3, r2
    5642:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5644:	68f8      	ldr	r0, [r7, #12]
    5646:	f000 f99f 	bl	5988 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    564a:	3710      	adds	r7, #16
    564c:	46bd      	mov	sp, r7
    564e:	bd80      	pop	{r7, pc}

00005650 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5650:	b580      	push	{r7, lr}
    5652:	b084      	sub	sp, #16
    5654:	af00      	add	r7, sp, #0
    5656:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5658:	687b      	ldr	r3, [r7, #4]
    565a:	68db      	ldr	r3, [r3, #12]
    565c:	68db      	ldr	r3, [r3, #12]
    565e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5660:	68bb      	ldr	r3, [r7, #8]
    5662:	3318      	adds	r3, #24
    5664:	4618      	mov	r0, r3
    5666:	f7fe fdcb 	bl	4200 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    566a:	f241 43fc 	movw	r3, #5372	; 0x14fc
    566e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5672:	681b      	ldr	r3, [r3, #0]
    5674:	2b00      	cmp	r3, #0
    5676:	d126      	bne.n	56c6 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5678:	68bb      	ldr	r3, [r7, #8]
    567a:	3304      	adds	r3, #4
    567c:	4618      	mov	r0, r3
    567e:	f7fe fdbf 	bl	4200 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    5682:	68bb      	ldr	r3, [r7, #8]
    5684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5686:	f241 43f4 	movw	r3, #5364	; 0x14f4
    568a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    568e:	681b      	ldr	r3, [r3, #0]
    5690:	429a      	cmp	r2, r3
    5692:	d906      	bls.n	56a2 <xTaskRemoveFromEventList+0x52>
    5694:	68bb      	ldr	r3, [r7, #8]
    5696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5698:	f241 43f4 	movw	r3, #5364	; 0x14f4
    569c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56a0:	601a      	str	r2, [r3, #0]
    56a2:	68bb      	ldr	r3, [r7, #8]
    56a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56a6:	4613      	mov	r3, r2
    56a8:	009b      	lsls	r3, r3, #2
    56aa:	4413      	add	r3, r2
    56ac:	009b      	lsls	r3, r3, #2
    56ae:	f241 4214 	movw	r2, #5140	; 0x1414
    56b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    56b6:	441a      	add	r2, r3
    56b8:	68bb      	ldr	r3, [r7, #8]
    56ba:	3304      	adds	r3, #4
    56bc:	4610      	mov	r0, r2
    56be:	4619      	mov	r1, r3
    56c0:	f7fe fd3e 	bl	4140 <vListInsertEnd>
    56c4:	e008      	b.n	56d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    56c6:	68bb      	ldr	r3, [r7, #8]
    56c8:	3318      	adds	r3, #24
    56ca:	f241 40a8 	movw	r0, #5288	; 0x14a8
    56ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
    56d2:	4619      	mov	r1, r3
    56d4:	f7fe fd34 	bl	4140 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    56d8:	68bb      	ldr	r3, [r7, #8]
    56da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56dc:	f241 4310 	movw	r3, #5136	; 0x1410
    56e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e4:	681b      	ldr	r3, [r3, #0]
    56e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56e8:	429a      	cmp	r2, r3
    56ea:	d302      	bcc.n	56f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    56ec:	2301      	movs	r3, #1
    56ee:	60fb      	str	r3, [r7, #12]
    56f0:	e001      	b.n	56f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    56f2:	2300      	movs	r3, #0
    56f4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    56f6:	68fb      	ldr	r3, [r7, #12]
}
    56f8:	4618      	mov	r0, r3
    56fa:	3710      	adds	r7, #16
    56fc:	46bd      	mov	sp, r7
    56fe:	bd80      	pop	{r7, pc}

00005700 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    5700:	b480      	push	{r7}
    5702:	b083      	sub	sp, #12
    5704:	af00      	add	r7, sp, #0
    5706:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5708:	f241 5308 	movw	r3, #5384	; 0x1508
    570c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5710:	681a      	ldr	r2, [r3, #0]
    5712:	687b      	ldr	r3, [r7, #4]
    5714:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5716:	f241 43ec 	movw	r3, #5356	; 0x14ec
    571a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    571e:	681a      	ldr	r2, [r3, #0]
    5720:	687b      	ldr	r3, [r7, #4]
    5722:	605a      	str	r2, [r3, #4]
}
    5724:	370c      	adds	r7, #12
    5726:	46bd      	mov	sp, r7
    5728:	f85d 7b04 	ldr.w	r7, [sp], #4
    572c:	4770      	bx	lr
    572e:	bf00      	nop

00005730 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5730:	b580      	push	{r7, lr}
    5732:	b084      	sub	sp, #16
    5734:	af00      	add	r7, sp, #0
    5736:	6078      	str	r0, [r7, #4]
    5738:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    573a:	f000 fb13 	bl	5d64 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    573e:	683b      	ldr	r3, [r7, #0]
    5740:	681b      	ldr	r3, [r3, #0]
    5742:	f1b3 3fff 	cmp.w	r3, #4294967295
    5746:	d102      	bne.n	574e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5748:	2300      	movs	r3, #0
    574a:	60fb      	str	r3, [r7, #12]
    574c:	e035      	b.n	57ba <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    574e:	687b      	ldr	r3, [r7, #4]
    5750:	681a      	ldr	r2, [r3, #0]
    5752:	f241 5308 	movw	r3, #5384	; 0x1508
    5756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    575a:	681b      	ldr	r3, [r3, #0]
    575c:	429a      	cmp	r2, r3
    575e:	d00b      	beq.n	5778 <xTaskCheckForTimeOut+0x48>
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	685a      	ldr	r2, [r3, #4]
    5764:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    576c:	681b      	ldr	r3, [r3, #0]
    576e:	429a      	cmp	r2, r3
    5770:	d802      	bhi.n	5778 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    5772:	2301      	movs	r3, #1
    5774:	60fb      	str	r3, [r7, #12]
    5776:	e020      	b.n	57ba <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5778:	f241 43ec 	movw	r3, #5356	; 0x14ec
    577c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5780:	681a      	ldr	r2, [r3, #0]
    5782:	687b      	ldr	r3, [r7, #4]
    5784:	685b      	ldr	r3, [r3, #4]
    5786:	1ad2      	subs	r2, r2, r3
    5788:	683b      	ldr	r3, [r7, #0]
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	429a      	cmp	r2, r3
    578e:	d212      	bcs.n	57b6 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5790:	683b      	ldr	r3, [r7, #0]
    5792:	681a      	ldr	r2, [r3, #0]
    5794:	687b      	ldr	r3, [r7, #4]
    5796:	6859      	ldr	r1, [r3, #4]
    5798:	f241 43ec 	movw	r3, #5356	; 0x14ec
    579c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57a0:	681b      	ldr	r3, [r3, #0]
    57a2:	1acb      	subs	r3, r1, r3
    57a4:	441a      	add	r2, r3
    57a6:	683b      	ldr	r3, [r7, #0]
    57a8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    57aa:	6878      	ldr	r0, [r7, #4]
    57ac:	f7ff ffa8 	bl	5700 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    57b0:	2300      	movs	r3, #0
    57b2:	60fb      	str	r3, [r7, #12]
    57b4:	e001      	b.n	57ba <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    57b6:	2301      	movs	r3, #1
    57b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    57ba:	f000 fae9 	bl	5d90 <vPortExitCritical>

	return xReturn;
    57be:	68fb      	ldr	r3, [r7, #12]
}
    57c0:	4618      	mov	r0, r3
    57c2:	3710      	adds	r7, #16
    57c4:	46bd      	mov	sp, r7
    57c6:	bd80      	pop	{r7, pc}

000057c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    57c8:	b480      	push	{r7}
    57ca:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    57cc:	f241 5304 	movw	r3, #5380	; 0x1504
    57d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d4:	2201      	movs	r2, #1
    57d6:	601a      	str	r2, [r3, #0]
}
    57d8:	46bd      	mov	sp, r7
    57da:	f85d 7b04 	ldr.w	r7, [sp], #4
    57de:	4770      	bx	lr

000057e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    57e0:	b580      	push	{r7, lr}
    57e2:	b082      	sub	sp, #8
    57e4:	af00      	add	r7, sp, #0
    57e6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    57e8:	f000 f886 	bl	58f8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    57ec:	f000 faac 	bl	5d48 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    57f0:	e7fa      	b.n	57e8 <prvIdleTask+0x8>
    57f2:	bf00      	nop

000057f4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    57f4:	b580      	push	{r7, lr}
    57f6:	b084      	sub	sp, #16
    57f8:	af00      	add	r7, sp, #0
    57fa:	60f8      	str	r0, [r7, #12]
    57fc:	60b9      	str	r1, [r7, #8]
    57fe:	607a      	str	r2, [r7, #4]
    5800:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    5802:	68fb      	ldr	r3, [r7, #12]
    5804:	3334      	adds	r3, #52	; 0x34
    5806:	4618      	mov	r0, r3
    5808:	68b9      	ldr	r1, [r7, #8]
    580a:	2210      	movs	r2, #16
    580c:	f013 f8f4 	bl	189f8 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    5810:	68fb      	ldr	r3, [r7, #12]
    5812:	2200      	movs	r2, #0
    5814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5818:	687b      	ldr	r3, [r7, #4]
    581a:	2b04      	cmp	r3, #4
    581c:	d901      	bls.n	5822 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    581e:	2304      	movs	r3, #4
    5820:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    5822:	68fb      	ldr	r3, [r7, #12]
    5824:	687a      	ldr	r2, [r7, #4]
    5826:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5828:	68fb      	ldr	r3, [r7, #12]
    582a:	687a      	ldr	r2, [r7, #4]
    582c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    582e:	68fb      	ldr	r3, [r7, #12]
    5830:	3304      	adds	r3, #4
    5832:	4618      	mov	r0, r3
    5834:	f7fe fc78 	bl	4128 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5838:	68fb      	ldr	r3, [r7, #12]
    583a:	3318      	adds	r3, #24
    583c:	4618      	mov	r0, r3
    583e:	f7fe fc73 	bl	4128 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5842:	68fb      	ldr	r3, [r7, #12]
    5844:	68fa      	ldr	r2, [r7, #12]
    5846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5848:	687b      	ldr	r3, [r7, #4]
    584a:	f1c3 0205 	rsb	r2, r3, #5
    584e:	68fb      	ldr	r3, [r7, #12]
    5850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5852:	68fb      	ldr	r3, [r7, #12]
    5854:	68fa      	ldr	r2, [r7, #12]
    5856:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5858:	3710      	adds	r7, #16
    585a:	46bd      	mov	sp, r7
    585c:	bd80      	pop	{r7, pc}
    585e:	bf00      	nop

00005860 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5860:	b580      	push	{r7, lr}
    5862:	b082      	sub	sp, #8
    5864:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5866:	2300      	movs	r3, #0
    5868:	607b      	str	r3, [r7, #4]
    586a:	e00f      	b.n	588c <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    586c:	687a      	ldr	r2, [r7, #4]
    586e:	4613      	mov	r3, r2
    5870:	009b      	lsls	r3, r3, #2
    5872:	4413      	add	r3, r2
    5874:	009b      	lsls	r3, r3, #2
    5876:	f241 4214 	movw	r2, #5140	; 0x1414
    587a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    587e:	4413      	add	r3, r2
    5880:	4618      	mov	r0, r3
    5882:	f7fe fc31 	bl	40e8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5886:	687b      	ldr	r3, [r7, #4]
    5888:	3301      	adds	r3, #1
    588a:	607b      	str	r3, [r7, #4]
    588c:	687b      	ldr	r3, [r7, #4]
    588e:	2b04      	cmp	r3, #4
    5890:	d9ec      	bls.n	586c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5892:	f241 4078 	movw	r0, #5240	; 0x1478
    5896:	f2c2 0000 	movt	r0, #8192	; 0x2000
    589a:	f7fe fc25 	bl	40e8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    589e:	f241 408c 	movw	r0, #5260	; 0x148c
    58a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58a6:	f7fe fc1f 	bl	40e8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    58aa:	f241 40a8 	movw	r0, #5288	; 0x14a8
    58ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58b2:	f7fe fc19 	bl	40e8 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    58b6:	f241 40bc 	movw	r0, #5308	; 0x14bc
    58ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58be:	f7fe fc13 	bl	40e8 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    58c2:	f241 40d4 	movw	r0, #5332	; 0x14d4
    58c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58ca:	f7fe fc0d 	bl	40e8 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    58ce:	f241 43a0 	movw	r3, #5280	; 0x14a0
    58d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d6:	f241 4278 	movw	r2, #5240	; 0x1478
    58da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    58e0:	f241 43a4 	movw	r3, #5284	; 0x14a4
    58e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e8:	f241 428c 	movw	r2, #5260	; 0x148c
    58ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58f0:	601a      	str	r2, [r3, #0]
}
    58f2:	3708      	adds	r7, #8
    58f4:	46bd      	mov	sp, r7
    58f6:	bd80      	pop	{r7, pc}

000058f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    58f8:	b580      	push	{r7, lr}
    58fa:	b082      	sub	sp, #8
    58fc:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    58fe:	f241 43d0 	movw	r3, #5328	; 0x14d0
    5902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5906:	681b      	ldr	r3, [r3, #0]
    5908:	2b00      	cmp	r3, #0
    590a:	d03a      	beq.n	5982 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    590c:	f7ff fc4c 	bl	51a8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5910:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5918:	681b      	ldr	r3, [r3, #0]
    591a:	2b00      	cmp	r3, #0
    591c:	bf14      	ite	ne
    591e:	2300      	movne	r3, #0
    5920:	2301      	moveq	r3, #1
    5922:	b2db      	uxtb	r3, r3
    5924:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5926:	f7ff fc51 	bl	51cc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    592a:	687b      	ldr	r3, [r7, #4]
    592c:	2b00      	cmp	r3, #0
    592e:	d128      	bne.n	5982 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5930:	f000 fa18 	bl	5d64 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5934:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    593c:	68db      	ldr	r3, [r3, #12]
    593e:	68db      	ldr	r3, [r3, #12]
    5940:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5942:	683b      	ldr	r3, [r7, #0]
    5944:	3304      	adds	r3, #4
    5946:	4618      	mov	r0, r3
    5948:	f7fe fc5a 	bl	4200 <vListRemove>
					--uxCurrentNumberOfTasks;
    594c:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	1e5a      	subs	r2, r3, #1
    5958:	f241 43e8 	movw	r3, #5352	; 0x14e8
    595c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5960:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5962:	f241 43d0 	movw	r3, #5328	; 0x14d0
    5966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    596a:	681b      	ldr	r3, [r3, #0]
    596c:	1e5a      	subs	r2, r3, #1
    596e:	f241 43d0 	movw	r3, #5328	; 0x14d0
    5972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5976:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5978:	f000 fa0a 	bl	5d90 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    597c:	6838      	ldr	r0, [r7, #0]
    597e:	f000 f879 	bl	5a74 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5982:	3708      	adds	r7, #8
    5984:	46bd      	mov	sp, r7
    5986:	bd80      	pop	{r7, pc}

00005988 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5988:	b580      	push	{r7, lr}
    598a:	b082      	sub	sp, #8
    598c:	af00      	add	r7, sp, #0
    598e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5990:	f241 4310 	movw	r3, #5136	; 0x1410
    5994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	687a      	ldr	r2, [r7, #4]
    599c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    599e:	f241 43ec 	movw	r3, #5356	; 0x14ec
    59a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59a6:	681b      	ldr	r3, [r3, #0]
    59a8:	687a      	ldr	r2, [r7, #4]
    59aa:	429a      	cmp	r2, r3
    59ac:	d20f      	bcs.n	59ce <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    59ae:	f241 43a4 	movw	r3, #5284	; 0x14a4
    59b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b6:	681a      	ldr	r2, [r3, #0]
    59b8:	f241 4310 	movw	r3, #5136	; 0x1410
    59bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c0:	681b      	ldr	r3, [r3, #0]
    59c2:	3304      	adds	r3, #4
    59c4:	4610      	mov	r0, r2
    59c6:	4619      	mov	r1, r3
    59c8:	f7fe fbe2 	bl	4190 <vListInsert>
    59cc:	e01c      	b.n	5a08 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    59ce:	f241 43a0 	movw	r3, #5280	; 0x14a0
    59d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59d6:	681a      	ldr	r2, [r3, #0]
    59d8:	f241 4310 	movw	r3, #5136	; 0x1410
    59dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59e0:	681b      	ldr	r3, [r3, #0]
    59e2:	3304      	adds	r3, #4
    59e4:	4610      	mov	r0, r2
    59e6:	4619      	mov	r1, r3
    59e8:	f7fe fbd2 	bl	4190 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    59ec:	f240 5330 	movw	r3, #1328	; 0x530
    59f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59f4:	681b      	ldr	r3, [r3, #0]
    59f6:	687a      	ldr	r2, [r7, #4]
    59f8:	429a      	cmp	r2, r3
    59fa:	d205      	bcs.n	5a08 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    59fc:	f240 5330 	movw	r3, #1328	; 0x530
    5a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a04:	687a      	ldr	r2, [r7, #4]
    5a06:	601a      	str	r2, [r3, #0]
		}
	}
}
    5a08:	3708      	adds	r7, #8
    5a0a:	46bd      	mov	sp, r7
    5a0c:	bd80      	pop	{r7, pc}
    5a0e:	bf00      	nop

00005a10 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5a10:	b580      	push	{r7, lr}
    5a12:	b084      	sub	sp, #16
    5a14:	af00      	add	r7, sp, #0
    5a16:	4603      	mov	r3, r0
    5a18:	6039      	str	r1, [r7, #0]
    5a1a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5a1c:	2050      	movs	r0, #80	; 0x50
    5a1e:	f000 fa1b 	bl	5e58 <pvPortMalloc>
    5a22:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5a24:	68fb      	ldr	r3, [r7, #12]
    5a26:	2b00      	cmp	r3, #0
    5a28:	d01f      	beq.n	5a6a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5a2a:	683b      	ldr	r3, [r7, #0]
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d106      	bne.n	5a3e <prvAllocateTCBAndStack+0x2e>
    5a30:	88fb      	ldrh	r3, [r7, #6]
    5a32:	009b      	lsls	r3, r3, #2
    5a34:	4618      	mov	r0, r3
    5a36:	f000 fa0f 	bl	5e58 <pvPortMalloc>
    5a3a:	4603      	mov	r3, r0
    5a3c:	e000      	b.n	5a40 <prvAllocateTCBAndStack+0x30>
    5a3e:	683b      	ldr	r3, [r7, #0]
    5a40:	68fa      	ldr	r2, [r7, #12]
    5a42:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5a44:	68fb      	ldr	r3, [r7, #12]
    5a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a48:	2b00      	cmp	r3, #0
    5a4a:	d105      	bne.n	5a58 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5a4c:	68f8      	ldr	r0, [r7, #12]
    5a4e:	f000 fac7 	bl	5fe0 <vPortFree>
			pxNewTCB = NULL;
    5a52:	2300      	movs	r3, #0
    5a54:	60fb      	str	r3, [r7, #12]
    5a56:	e008      	b.n	5a6a <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5a58:	68fb      	ldr	r3, [r7, #12]
    5a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5a5c:	88fb      	ldrh	r3, [r7, #6]
    5a5e:	009b      	lsls	r3, r3, #2
    5a60:	4610      	mov	r0, r2
    5a62:	21a5      	movs	r1, #165	; 0xa5
    5a64:	461a      	mov	r2, r3
    5a66:	f012 ff77 	bl	18958 <memset>
		}
	}

	return pxNewTCB;
    5a6a:	68fb      	ldr	r3, [r7, #12]
}
    5a6c:	4618      	mov	r0, r3
    5a6e:	3710      	adds	r7, #16
    5a70:	46bd      	mov	sp, r7
    5a72:	bd80      	pop	{r7, pc}

00005a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5a74:	b580      	push	{r7, lr}
    5a76:	b082      	sub	sp, #8
    5a78:	af00      	add	r7, sp, #0
    5a7a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5a7c:	687b      	ldr	r3, [r7, #4]
    5a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a80:	4618      	mov	r0, r3
    5a82:	f000 faad 	bl	5fe0 <vPortFree>
		vPortFree( pxTCB );
    5a86:	6878      	ldr	r0, [r7, #4]
    5a88:	f000 faaa 	bl	5fe0 <vPortFree>
	}
    5a8c:	3708      	adds	r7, #8
    5a8e:	46bd      	mov	sp, r7
    5a90:	bd80      	pop	{r7, pc}
    5a92:	bf00      	nop

00005a94 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5a94:	b480      	push	{r7}
    5a96:	b083      	sub	sp, #12
    5a98:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5a9a:	f241 4310 	movw	r3, #5136	; 0x1410
    5a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa2:	681b      	ldr	r3, [r3, #0]
    5aa4:	607b      	str	r3, [r7, #4]

		return xReturn;
    5aa6:	687b      	ldr	r3, [r7, #4]
	}
    5aa8:	4618      	mov	r0, r3
    5aaa:	370c      	adds	r7, #12
    5aac:	46bd      	mov	sp, r7
    5aae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ab2:	4770      	bx	lr

00005ab4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5ab4:	b580      	push	{r7, lr}
    5ab6:	b084      	sub	sp, #16
    5ab8:	af00      	add	r7, sp, #0
    5aba:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5ac0:	68fb      	ldr	r3, [r7, #12]
    5ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ac4:	f241 4310 	movw	r3, #5136	; 0x1410
    5ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5acc:	681b      	ldr	r3, [r3, #0]
    5ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ad0:	429a      	cmp	r2, r3
    5ad2:	d24f      	bcs.n	5b74 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5ad4:	f241 4310 	movw	r3, #5136	; 0x1410
    5ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5adc:	681b      	ldr	r3, [r3, #0]
    5ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ae0:	f1c3 0205 	rsb	r2, r3, #5
    5ae4:	68fb      	ldr	r3, [r7, #12]
    5ae6:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5ae8:	68fb      	ldr	r3, [r7, #12]
    5aea:	6959      	ldr	r1, [r3, #20]
    5aec:	68fb      	ldr	r3, [r7, #12]
    5aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5af0:	4613      	mov	r3, r2
    5af2:	009b      	lsls	r3, r3, #2
    5af4:	4413      	add	r3, r2
    5af6:	009b      	lsls	r3, r3, #2
    5af8:	f241 4214 	movw	r2, #5140	; 0x1414
    5afc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b00:	4413      	add	r3, r2
    5b02:	4299      	cmp	r1, r3
    5b04:	d12e      	bne.n	5b64 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5b06:	68fb      	ldr	r3, [r7, #12]
    5b08:	3304      	adds	r3, #4
    5b0a:	4618      	mov	r0, r3
    5b0c:	f7fe fb78 	bl	4200 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5b10:	f241 4310 	movw	r3, #5136	; 0x1410
    5b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b18:	681b      	ldr	r3, [r3, #0]
    5b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b1c:	68fb      	ldr	r3, [r7, #12]
    5b1e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5b20:	68fb      	ldr	r3, [r7, #12]
    5b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b24:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b2c:	681b      	ldr	r3, [r3, #0]
    5b2e:	429a      	cmp	r2, r3
    5b30:	d906      	bls.n	5b40 <vTaskPriorityInherit+0x8c>
    5b32:	68fb      	ldr	r3, [r7, #12]
    5b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b36:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b3e:	601a      	str	r2, [r3, #0]
    5b40:	68fb      	ldr	r3, [r7, #12]
    5b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b44:	4613      	mov	r3, r2
    5b46:	009b      	lsls	r3, r3, #2
    5b48:	4413      	add	r3, r2
    5b4a:	009b      	lsls	r3, r3, #2
    5b4c:	f241 4214 	movw	r2, #5140	; 0x1414
    5b50:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b54:	441a      	add	r2, r3
    5b56:	68fb      	ldr	r3, [r7, #12]
    5b58:	3304      	adds	r3, #4
    5b5a:	4610      	mov	r0, r2
    5b5c:	4619      	mov	r1, r3
    5b5e:	f7fe faef 	bl	4140 <vListInsertEnd>
    5b62:	e007      	b.n	5b74 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5b64:	f241 4310 	movw	r3, #5136	; 0x1410
    5b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b6c:	681b      	ldr	r3, [r3, #0]
    5b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b70:	68fb      	ldr	r3, [r7, #12]
    5b72:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5b74:	3710      	adds	r7, #16
    5b76:	46bd      	mov	sp, r7
    5b78:	bd80      	pop	{r7, pc}
    5b7a:	bf00      	nop

00005b7c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5b7c:	b580      	push	{r7, lr}
    5b7e:	b084      	sub	sp, #16
    5b80:	af00      	add	r7, sp, #0
    5b82:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5b84:	687b      	ldr	r3, [r7, #4]
    5b86:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5b88:	687b      	ldr	r3, [r7, #4]
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d035      	beq.n	5bfa <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5b8e:	68fb      	ldr	r3, [r7, #12]
    5b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b92:	68fb      	ldr	r3, [r7, #12]
    5b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5b96:	429a      	cmp	r2, r3
    5b98:	d02f      	beq.n	5bfa <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5b9a:	68fb      	ldr	r3, [r7, #12]
    5b9c:	3304      	adds	r3, #4
    5b9e:	4618      	mov	r0, r3
    5ba0:	f7fe fb2e 	bl	4200 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5ba4:	68fb      	ldr	r3, [r7, #12]
    5ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5ba8:	68fb      	ldr	r3, [r7, #12]
    5baa:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5bac:	68fb      	ldr	r3, [r7, #12]
    5bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5bb0:	f1c3 0205 	rsb	r2, r3, #5
    5bb4:	68fb      	ldr	r3, [r7, #12]
    5bb6:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5bb8:	68fb      	ldr	r3, [r7, #12]
    5bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bbc:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bc4:	681b      	ldr	r3, [r3, #0]
    5bc6:	429a      	cmp	r2, r3
    5bc8:	d906      	bls.n	5bd8 <vTaskPriorityDisinherit+0x5c>
    5bca:	68fb      	ldr	r3, [r7, #12]
    5bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bce:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd6:	601a      	str	r2, [r3, #0]
    5bd8:	68fb      	ldr	r3, [r7, #12]
    5bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bdc:	4613      	mov	r3, r2
    5bde:	009b      	lsls	r3, r3, #2
    5be0:	4413      	add	r3, r2
    5be2:	009b      	lsls	r3, r3, #2
    5be4:	f241 4214 	movw	r2, #5140	; 0x1414
    5be8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bec:	441a      	add	r2, r3
    5bee:	68fb      	ldr	r3, [r7, #12]
    5bf0:	3304      	adds	r3, #4
    5bf2:	4610      	mov	r0, r2
    5bf4:	4619      	mov	r1, r3
    5bf6:	f7fe faa3 	bl	4140 <vListInsertEnd>
			}
		}
	}
    5bfa:	3710      	adds	r7, #16
    5bfc:	46bd      	mov	sp, r7
    5bfe:	bd80      	pop	{r7, pc}

00005c00 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5c00:	b480      	push	{r7}
    5c02:	b083      	sub	sp, #12
    5c04:	af00      	add	r7, sp, #0
    5c06:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5c08:	687b      	ldr	r3, [r7, #4]
    5c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5c0c:	4618      	mov	r0, r3
    5c0e:	370c      	adds	r7, #12
    5c10:	46bd      	mov	sp, r7
    5c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c16:	4770      	bx	lr

00005c18 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5c18:	b480      	push	{r7}
    5c1a:	b083      	sub	sp, #12
    5c1c:	af00      	add	r7, sp, #0
    5c1e:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5c20:	687b      	ldr	r3, [r7, #4]
    5c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5c24:	4618      	mov	r0, r3
    5c26:	370c      	adds	r7, #12
    5c28:	46bd      	mov	sp, r7
    5c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c2e:	4770      	bx	lr

00005c30 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5c30:	b480      	push	{r7}
    5c32:	b083      	sub	sp, #12
    5c34:	af00      	add	r7, sp, #0
    5c36:	6078      	str	r0, [r7, #4]
    5c38:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5c3a:	687b      	ldr	r3, [r7, #4]
    5c3c:	683a      	ldr	r2, [r7, #0]
    5c3e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5c40:	370c      	adds	r7, #12
    5c42:	46bd      	mov	sp, r7
    5c44:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c48:	4770      	bx	lr
    5c4a:	bf00      	nop

00005c4c <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5c4c:	b480      	push	{r7}
    5c4e:	b083      	sub	sp, #12
    5c50:	af00      	add	r7, sp, #0
    5c52:	6078      	str	r0, [r7, #4]
    5c54:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5c56:	687b      	ldr	r3, [r7, #4]
    5c58:	683a      	ldr	r2, [r7, #0]
    5c5a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5c5c:	370c      	adds	r7, #12
    5c5e:	46bd      	mov	sp, r7
    5c60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c64:	4770      	bx	lr
    5c66:	bf00      	nop

00005c68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5c68:	b480      	push	{r7}
    5c6a:	b085      	sub	sp, #20
    5c6c:	af00      	add	r7, sp, #0
    5c6e:	60f8      	str	r0, [r7, #12]
    5c70:	60b9      	str	r1, [r7, #8]
    5c72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5c74:	68fb      	ldr	r3, [r7, #12]
    5c76:	3b04      	subs	r3, #4
    5c78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5c7a:	68fb      	ldr	r3, [r7, #12]
    5c7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5c82:	68fb      	ldr	r3, [r7, #12]
    5c84:	3b04      	subs	r3, #4
    5c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5c88:	68ba      	ldr	r2, [r7, #8]
    5c8a:	68fb      	ldr	r3, [r7, #12]
    5c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5c8e:	68fb      	ldr	r3, [r7, #12]
    5c90:	3b04      	subs	r3, #4
    5c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5c94:	68fb      	ldr	r3, [r7, #12]
    5c96:	2200      	movs	r2, #0
    5c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5c9a:	68fb      	ldr	r3, [r7, #12]
    5c9c:	3b14      	subs	r3, #20
    5c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5ca0:	687a      	ldr	r2, [r7, #4]
    5ca2:	68fb      	ldr	r3, [r7, #12]
    5ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5ca6:	68fb      	ldr	r3, [r7, #12]
    5ca8:	3b20      	subs	r3, #32
    5caa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5cac:	68fb      	ldr	r3, [r7, #12]
}
    5cae:	4618      	mov	r0, r3
    5cb0:	3714      	adds	r7, #20
    5cb2:	46bd      	mov	sp, r7
    5cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cb8:	4770      	bx	lr
    5cba:	bf00      	nop

00005cbc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5cbc:	4b06      	ldr	r3, [pc, #24]	; (5cd8 <pxCurrentTCBConst2>)
    5cbe:	6819      	ldr	r1, [r3, #0]
    5cc0:	6808      	ldr	r0, [r1, #0]
    5cc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5cc6:	f380 8809 	msr	PSP, r0
    5cca:	f04f 0000 	mov.w	r0, #0
    5cce:	f380 8811 	msr	BASEPRI, r0
    5cd2:	f04e 0e0d 	orr.w	lr, lr, #13
    5cd6:	4770      	bx	lr

00005cd8 <pxCurrentTCBConst2>:
    5cd8:	20001410 	.word	0x20001410

00005cdc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5cdc:	485d      	ldr	r0, [pc, #372]	; (5e54 <prvSetupTimerInterrupt+0x2c>)
    5cde:	6800      	ldr	r0, [r0, #0]
    5ce0:	6800      	ldr	r0, [r0, #0]
    5ce2:	f380 8808 	msr	MSP, r0
    5ce6:	b662      	cpsie	i
    5ce8:	df00      	svc	0
    5cea:	bf00      	nop

00005cec <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5cec:	b580      	push	{r7, lr}
    5cee:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5cf0:	f64e 5320 	movw	r3, #60704	; 0xed20
    5cf4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5cf8:	f64e 5220 	movw	r2, #60704	; 0xed20
    5cfc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5d00:	6812      	ldr	r2, [r2, #0]
    5d02:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5d06:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5d08:	f64e 5320 	movw	r3, #60704	; 0xed20
    5d0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d10:	f64e 5220 	movw	r2, #60704	; 0xed20
    5d14:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5d18:	6812      	ldr	r2, [r2, #0]
    5d1a:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5d1e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5d20:	f000 f882 	bl	5e28 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5d24:	f240 5334 	movw	r3, #1332	; 0x534
    5d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d2c:	2200      	movs	r2, #0
    5d2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5d30:	f7ff ffd4 	bl	5cdc <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5d34:	2300      	movs	r3, #0
}
    5d36:	4618      	mov	r0, r3
    5d38:	bd80      	pop	{r7, pc}
    5d3a:	bf00      	nop

00005d3c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5d3c:	b480      	push	{r7}
    5d3e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5d40:	46bd      	mov	sp, r7
    5d42:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d46:	4770      	bx	lr

00005d48 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5d48:	b480      	push	{r7}
    5d4a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5d4c:	f64e 5304 	movw	r3, #60676	; 0xed04
    5d50:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5d58:	601a      	str	r2, [r3, #0]
}
    5d5a:	46bd      	mov	sp, r7
    5d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d60:	4770      	bx	lr
    5d62:	bf00      	nop

00005d64 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5d64:	b480      	push	{r7}
    5d66:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5d68:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5d6c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5d70:	f240 5334 	movw	r3, #1332	; 0x534
    5d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d78:	681b      	ldr	r3, [r3, #0]
    5d7a:	1c5a      	adds	r2, r3, #1
    5d7c:	f240 5334 	movw	r3, #1332	; 0x534
    5d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d84:	601a      	str	r2, [r3, #0]
}
    5d86:	46bd      	mov	sp, r7
    5d88:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d8c:	4770      	bx	lr
    5d8e:	bf00      	nop

00005d90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5d90:	b480      	push	{r7}
    5d92:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5d94:	f240 5334 	movw	r3, #1332	; 0x534
    5d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d9c:	681b      	ldr	r3, [r3, #0]
    5d9e:	1e5a      	subs	r2, r3, #1
    5da0:	f240 5334 	movw	r3, #1332	; 0x534
    5da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da8:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5daa:	f240 5334 	movw	r3, #1332	; 0x534
    5dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db2:	681b      	ldr	r3, [r3, #0]
    5db4:	2b00      	cmp	r3, #0
    5db6:	d103      	bne.n	5dc0 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5db8:	f04f 0000 	mov.w	r0, #0
    5dbc:	f380 8811 	msr	BASEPRI, r0
	}
}
    5dc0:	46bd      	mov	sp, r7
    5dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dc6:	4770      	bx	lr

00005dc8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5dc8:	f3ef 8009 	mrs	r0, PSP
    5dcc:	4b0c      	ldr	r3, [pc, #48]	; (5e00 <pxCurrentTCBConst>)
    5dce:	681a      	ldr	r2, [r3, #0]
    5dd0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5dd4:	6010      	str	r0, [r2, #0]
    5dd6:	e92d 4008 	stmdb	sp!, {r3, lr}
    5dda:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5dde:	f380 8811 	msr	BASEPRI, r0
    5de2:	f7ff fba1 	bl	5528 <vTaskSwitchContext>
    5de6:	f04f 0000 	mov.w	r0, #0
    5dea:	f380 8811 	msr	BASEPRI, r0
    5dee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5df2:	6819      	ldr	r1, [r3, #0]
    5df4:	6808      	ldr	r0, [r1, #0]
    5df6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5dfa:	f380 8809 	msr	PSP, r0
    5dfe:	4770      	bx	lr

00005e00 <pxCurrentTCBConst>:
    5e00:	20001410 	.word	0x20001410

00005e04 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5e04:	b580      	push	{r7, lr}
    5e06:	b082      	sub	sp, #8
    5e08:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5e0a:	2300      	movs	r3, #0
    5e0c:	607b      	str	r3, [r7, #4]
    5e0e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5e12:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5e16:	f7ff faa9 	bl	536c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5e1a:	f04f 0000 	mov.w	r0, #0
    5e1e:	f380 8811 	msr	BASEPRI, r0
}
    5e22:	3708      	adds	r7, #8
    5e24:	46bd      	mov	sp, r7
    5e26:	bd80      	pop	{r7, pc}

00005e28 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5e28:	b480      	push	{r7}
    5e2a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5e2c:	f24e 0314 	movw	r3, #57364	; 0xe014
    5e30:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e34:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5e38:	f2c0 0203 	movt	r2, #3
    5e3c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5e3e:	f24e 0310 	movw	r3, #57360	; 0xe010
    5e42:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e46:	2207      	movs	r2, #7
    5e48:	601a      	str	r2, [r3, #0]
}
    5e4a:	46bd      	mov	sp, r7
    5e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e50:	4770      	bx	lr
    5e52:	0000      	.short	0x0000
    5e54:	e000ed08 	.word	0xe000ed08

00005e58 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5e58:	b580      	push	{r7, lr}
    5e5a:	b08a      	sub	sp, #40	; 0x28
    5e5c:	af00      	add	r7, sp, #0
    5e5e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5e60:	2300      	movs	r3, #0
    5e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5e64:	f7ff f9a0 	bl	51a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5e68:	f24c 5320 	movw	r3, #50464	; 0xc520
    5e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e70:	681b      	ldr	r3, [r3, #0]
    5e72:	2b00      	cmp	r3, #0
    5e74:	d130      	bne.n	5ed8 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5e76:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e7e:	f241 5210 	movw	r2, #5392	; 0x1510
    5e82:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5e86:	601a      	str	r2, [r3, #0]
    5e88:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e90:	2200      	movs	r2, #0
    5e92:	605a      	str	r2, [r3, #4]
    5e94:	f24c 5318 	movw	r3, #50456	; 0xc518
    5e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e9c:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5ea0:	605a      	str	r2, [r3, #4]
    5ea2:	f24c 5318 	movw	r3, #50456	; 0xc518
    5ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eaa:	2200      	movs	r2, #0
    5eac:	601a      	str	r2, [r3, #0]
    5eae:	f241 5310 	movw	r3, #5392	; 0x1510
    5eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb6:	617b      	str	r3, [r7, #20]
    5eb8:	697b      	ldr	r3, [r7, #20]
    5eba:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5ebe:	605a      	str	r2, [r3, #4]
    5ec0:	697a      	ldr	r2, [r7, #20]
    5ec2:	f24c 5318 	movw	r3, #50456	; 0xc518
    5ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eca:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5ecc:	f24c 5320 	movw	r3, #50464	; 0xc520
    5ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ed4:	2201      	movs	r2, #1
    5ed6:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5ed8:	687b      	ldr	r3, [r7, #4]
    5eda:	2b00      	cmp	r3, #0
    5edc:	d00d      	beq.n	5efa <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5ede:	2310      	movs	r3, #16
    5ee0:	687a      	ldr	r2, [r7, #4]
    5ee2:	4413      	add	r3, r2
    5ee4:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5ee6:	687b      	ldr	r3, [r7, #4]
    5ee8:	f003 0307 	and.w	r3, r3, #7
    5eec:	2b00      	cmp	r3, #0
    5eee:	d004      	beq.n	5efa <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5ef0:	687b      	ldr	r3, [r7, #4]
    5ef2:	f023 0307 	bic.w	r3, r3, #7
    5ef6:	3308      	adds	r3, #8
    5ef8:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	2b00      	cmp	r3, #0
    5efe:	d068      	beq.n	5fd2 <pvPortMalloc+0x17a>
    5f00:	687b      	ldr	r3, [r7, #4]
    5f02:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5f06:	d264      	bcs.n	5fd2 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5f08:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f10:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5f12:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f1a:	681b      	ldr	r3, [r3, #0]
    5f1c:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5f1e:	e004      	b.n	5f2a <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f22:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f26:	681b      	ldr	r3, [r3, #0]
    5f28:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f2c:	685a      	ldr	r2, [r3, #4]
    5f2e:	687b      	ldr	r3, [r7, #4]
    5f30:	429a      	cmp	r2, r3
    5f32:	d203      	bcs.n	5f3c <pvPortMalloc+0xe4>
    5f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f36:	681b      	ldr	r3, [r3, #0]
    5f38:	2b00      	cmp	r3, #0
    5f3a:	d1f1      	bne.n	5f20 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5f3e:	f24c 5318 	movw	r3, #50456	; 0xc518
    5f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f46:	429a      	cmp	r2, r3
    5f48:	d043      	beq.n	5fd2 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5f4a:	6a3b      	ldr	r3, [r7, #32]
    5f4c:	681a      	ldr	r2, [r3, #0]
    5f4e:	2310      	movs	r3, #16
    5f50:	4413      	add	r3, r2
    5f52:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f56:	681a      	ldr	r2, [r3, #0]
    5f58:	6a3b      	ldr	r3, [r7, #32]
    5f5a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f5e:	685a      	ldr	r2, [r3, #4]
    5f60:	687b      	ldr	r3, [r7, #4]
    5f62:	1ad2      	subs	r2, r2, r3
    5f64:	2310      	movs	r3, #16
    5f66:	005b      	lsls	r3, r3, #1
    5f68:	429a      	cmp	r2, r3
    5f6a:	d925      	bls.n	5fb8 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5f6e:	687b      	ldr	r3, [r7, #4]
    5f70:	4413      	add	r3, r2
    5f72:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f76:	685a      	ldr	r2, [r3, #4]
    5f78:	687b      	ldr	r3, [r7, #4]
    5f7a:	1ad2      	subs	r2, r2, r3
    5f7c:	693b      	ldr	r3, [r7, #16]
    5f7e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f82:	687a      	ldr	r2, [r7, #4]
    5f84:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5f86:	693b      	ldr	r3, [r7, #16]
    5f88:	685b      	ldr	r3, [r3, #4]
    5f8a:	60fb      	str	r3, [r7, #12]
    5f8c:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f94:	61bb      	str	r3, [r7, #24]
    5f96:	e002      	b.n	5f9e <pvPortMalloc+0x146>
    5f98:	69bb      	ldr	r3, [r7, #24]
    5f9a:	681b      	ldr	r3, [r3, #0]
    5f9c:	61bb      	str	r3, [r7, #24]
    5f9e:	69bb      	ldr	r3, [r7, #24]
    5fa0:	681b      	ldr	r3, [r3, #0]
    5fa2:	685a      	ldr	r2, [r3, #4]
    5fa4:	68fb      	ldr	r3, [r7, #12]
    5fa6:	429a      	cmp	r2, r3
    5fa8:	d3f6      	bcc.n	5f98 <pvPortMalloc+0x140>
    5faa:	69bb      	ldr	r3, [r7, #24]
    5fac:	681a      	ldr	r2, [r3, #0]
    5fae:	693b      	ldr	r3, [r7, #16]
    5fb0:	601a      	str	r2, [r3, #0]
    5fb2:	69bb      	ldr	r3, [r7, #24]
    5fb4:	693a      	ldr	r2, [r7, #16]
    5fb6:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5fb8:	f240 5338 	movw	r3, #1336	; 0x538
    5fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc0:	681a      	ldr	r2, [r3, #0]
    5fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fc4:	685b      	ldr	r3, [r3, #4]
    5fc6:	1ad2      	subs	r2, r2, r3
    5fc8:	f240 5338 	movw	r3, #1336	; 0x538
    5fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fd0:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5fd2:	f7ff f8fb 	bl	51cc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5fd6:	69fb      	ldr	r3, [r7, #28]
}
    5fd8:	4618      	mov	r0, r3
    5fda:	3728      	adds	r7, #40	; 0x28
    5fdc:	46bd      	mov	sp, r7
    5fde:	bd80      	pop	{r7, pc}

00005fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5fe0:	b580      	push	{r7, lr}
    5fe2:	b086      	sub	sp, #24
    5fe4:	af00      	add	r7, sp, #0
    5fe6:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d030      	beq.n	6054 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5ff2:	2310      	movs	r3, #16
    5ff4:	425b      	negs	r3, r3
    5ff6:	693a      	ldr	r2, [r7, #16]
    5ff8:	4413      	add	r3, r2
    5ffa:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5ffc:	693b      	ldr	r3, [r7, #16]
    5ffe:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    6000:	f7ff f8d2 	bl	51a8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    6004:	68fb      	ldr	r3, [r7, #12]
    6006:	685b      	ldr	r3, [r3, #4]
    6008:	60bb      	str	r3, [r7, #8]
    600a:	f24c 5310 	movw	r3, #50448	; 0xc510
    600e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6012:	617b      	str	r3, [r7, #20]
    6014:	e002      	b.n	601c <vPortFree+0x3c>
    6016:	697b      	ldr	r3, [r7, #20]
    6018:	681b      	ldr	r3, [r3, #0]
    601a:	617b      	str	r3, [r7, #20]
    601c:	697b      	ldr	r3, [r7, #20]
    601e:	681b      	ldr	r3, [r3, #0]
    6020:	685a      	ldr	r2, [r3, #4]
    6022:	68bb      	ldr	r3, [r7, #8]
    6024:	429a      	cmp	r2, r3
    6026:	d3f6      	bcc.n	6016 <vPortFree+0x36>
    6028:	697b      	ldr	r3, [r7, #20]
    602a:	681a      	ldr	r2, [r3, #0]
    602c:	68fb      	ldr	r3, [r7, #12]
    602e:	601a      	str	r2, [r3, #0]
    6030:	697b      	ldr	r3, [r7, #20]
    6032:	68fa      	ldr	r2, [r7, #12]
    6034:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    6036:	68fb      	ldr	r3, [r7, #12]
    6038:	685a      	ldr	r2, [r3, #4]
    603a:	f240 5338 	movw	r3, #1336	; 0x538
    603e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6042:	681b      	ldr	r3, [r3, #0]
    6044:	441a      	add	r2, r3
    6046:	f240 5338 	movw	r3, #1336	; 0x538
    604a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    604e:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    6050:	f7ff f8bc 	bl	51cc <xTaskResumeAll>
	}
}
    6054:	3718      	adds	r7, #24
    6056:	46bd      	mov	sp, r7
    6058:	bd80      	pop	{r7, pc}
    605a:	bf00      	nop

0000605c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    605c:	b480      	push	{r7}
    605e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    6060:	f240 5338 	movw	r3, #1336	; 0x538
    6064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6068:	681b      	ldr	r3, [r3, #0]
}
    606a:	4618      	mov	r0, r3
    606c:	46bd      	mov	sp, r7
    606e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6072:	4770      	bx	lr

00006074 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    6074:	b480      	push	{r7}
    6076:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    6078:	46bd      	mov	sp, r7
    607a:	f85d 7b04 	ldr.w	r7, [sp], #4
    607e:	4770      	bx	lr

00006080 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    6080:	b580      	push	{r7, lr}
    6082:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    6084:	f24c 5342 	movw	r3, #50498	; 0xc542
    6088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    608c:	781b      	ldrb	r3, [r3, #0]
    608e:	2b00      	cmp	r3, #0
    6090:	f040 815d 	bne.w	634e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    6094:	f24c 532a 	movw	r3, #50474	; 0xc52a
    6098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    609c:	881b      	ldrh	r3, [r3, #0]
    609e:	2b09      	cmp	r3, #9
    60a0:	f201 8145 	bhi.w	732e <ground_calibrate+0x12ae>
    60a4:	f24c 532c 	movw	r3, #50476	; 0xc52c
    60a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ac:	781b      	ldrb	r3, [r3, #0]
    60ae:	2b01      	cmp	r3, #1
    60b0:	f041 813d 	bne.w	732e <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    60b4:	f24c 5342 	movw	r3, #50498	; 0xc542
    60b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60bc:	2201      	movs	r2, #1
    60be:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    60c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    60c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c8:	781a      	ldrb	r2, [r3, #0]
    60ca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    60ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d2:	781b      	ldrb	r3, [r3, #0]
    60d4:	b2db      	uxtb	r3, r3
    60d6:	429a      	cmp	r2, r3
    60d8:	d313      	bcc.n	6102 <ground_calibrate+0x82>
    60da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    60de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e2:	781b      	ldrb	r3, [r3, #0]
    60e4:	b2db      	uxtb	r3, r3
    60e6:	461a      	mov	r2, r3
    60e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    60ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f0:	781b      	ldrb	r3, [r3, #0]
    60f2:	1ad3      	subs	r3, r2, r3
    60f4:	33ff      	adds	r3, #255	; 0xff
    60f6:	2b04      	cmp	r3, #4
    60f8:	bfd4      	ite	le
    60fa:	2300      	movle	r3, #0
    60fc:	2301      	movgt	r3, #1
    60fe:	b2db      	uxtb	r3, r3
    6100:	e011      	b.n	6126 <ground_calibrate+0xa6>
    6102:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610a:	781b      	ldrb	r3, [r3, #0]
    610c:	b2db      	uxtb	r3, r3
    610e:	461a      	mov	r2, r3
    6110:	f24c 5349 	movw	r3, #50505	; 0xc549
    6114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6118:	781b      	ldrb	r3, [r3, #0]
    611a:	1ad3      	subs	r3, r2, r3
    611c:	2b04      	cmp	r3, #4
    611e:	bfd4      	ite	le
    6120:	2300      	movle	r3, #0
    6122:	2301      	movgt	r3, #1
    6124:	b2db      	uxtb	r3, r3
    6126:	2b00      	cmp	r3, #0
    6128:	f000 8103 	beq.w	6332 <ground_calibrate+0x2b2>
    612c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6134:	781b      	ldrb	r3, [r3, #0]
    6136:	461a      	mov	r2, r3
    6138:	f24c 534c 	movw	r3, #50508	; 0xc54c
    613c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6140:	2105      	movs	r1, #5
    6142:	5499      	strb	r1, [r3, r2]
    6144:	f24c 5349 	movw	r3, #50505	; 0xc549
    6148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614c:	781b      	ldrb	r3, [r3, #0]
    614e:	3301      	adds	r3, #1
    6150:	b2da      	uxtb	r2, r3
    6152:	f24c 5349 	movw	r3, #50505	; 0xc549
    6156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    615a:	701a      	strb	r2, [r3, #0]
    615c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6164:	781b      	ldrb	r3, [r3, #0]
    6166:	2bff      	cmp	r3, #255	; 0xff
    6168:	d105      	bne.n	6176 <ground_calibrate+0xf6>
    616a:	f24c 5349 	movw	r3, #50505	; 0xc549
    616e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6172:	2200      	movs	r2, #0
    6174:	701a      	strb	r2, [r3, #0]
    6176:	f24c 5349 	movw	r3, #50505	; 0xc549
    617a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    617e:	781b      	ldrb	r3, [r3, #0]
    6180:	461a      	mov	r2, r3
    6182:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    618a:	2102      	movs	r1, #2
    618c:	5499      	strb	r1, [r3, r2]
    618e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6196:	781b      	ldrb	r3, [r3, #0]
    6198:	3301      	adds	r3, #1
    619a:	b2da      	uxtb	r2, r3
    619c:	f24c 5349 	movw	r3, #50505	; 0xc549
    61a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a4:	701a      	strb	r2, [r3, #0]
    61a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    61aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ae:	781b      	ldrb	r3, [r3, #0]
    61b0:	2bff      	cmp	r3, #255	; 0xff
    61b2:	d105      	bne.n	61c0 <ground_calibrate+0x140>
    61b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    61b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61bc:	2200      	movs	r2, #0
    61be:	701a      	strb	r2, [r3, #0]
    61c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    61c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c8:	2202      	movs	r2, #2
    61ca:	701a      	strb	r2, [r3, #0]
    61cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    61d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d4:	2202      	movs	r2, #2
    61d6:	701a      	strb	r2, [r3, #0]
    61d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    61dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e0:	781b      	ldrb	r3, [r3, #0]
    61e2:	461a      	mov	r2, r3
    61e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    61e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ec:	7819      	ldrb	r1, [r3, #0]
    61ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    61f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f6:	5499      	strb	r1, [r3, r2]
    61f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    61fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6200:	781b      	ldrb	r3, [r3, #0]
    6202:	3301      	adds	r3, #1
    6204:	b2da      	uxtb	r2, r3
    6206:	f24c 5349 	movw	r3, #50505	; 0xc549
    620a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620e:	701a      	strb	r2, [r3, #0]
    6210:	f24c 5349 	movw	r3, #50505	; 0xc549
    6214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6218:	781b      	ldrb	r3, [r3, #0]
    621a:	2bff      	cmp	r3, #255	; 0xff
    621c:	d105      	bne.n	622a <ground_calibrate+0x1aa>
    621e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6226:	2200      	movs	r2, #0
    6228:	701a      	strb	r2, [r3, #0]
    622a:	f24c 5349 	movw	r3, #50505	; 0xc549
    622e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6232:	781b      	ldrb	r3, [r3, #0]
    6234:	461a      	mov	r2, r3
    6236:	f24c 634e 	movw	r3, #50766	; 0xc64e
    623a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623e:	7819      	ldrb	r1, [r3, #0]
    6240:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6248:	5499      	strb	r1, [r3, r2]
    624a:	f24c 5349 	movw	r3, #50505	; 0xc549
    624e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6252:	781b      	ldrb	r3, [r3, #0]
    6254:	3301      	adds	r3, #1
    6256:	b2da      	uxtb	r2, r3
    6258:	f24c 5349 	movw	r3, #50505	; 0xc549
    625c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6260:	701a      	strb	r2, [r3, #0]
    6262:	f24c 5349 	movw	r3, #50505	; 0xc549
    6266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    626a:	781b      	ldrb	r3, [r3, #0]
    626c:	2bff      	cmp	r3, #255	; 0xff
    626e:	d105      	bne.n	627c <ground_calibrate+0x1fc>
    6270:	f24c 5349 	movw	r3, #50505	; 0xc549
    6274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6278:	2200      	movs	r2, #0
    627a:	701a      	strb	r2, [r3, #0]
    627c:	f242 0339 	movw	r3, #8249	; 0x2039
    6280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	b2db      	uxtb	r3, r3
    6288:	f003 0310 	and.w	r3, r3, #16
    628c:	2b00      	cmp	r3, #0
    628e:	f041 804e 	bne.w	732e <ground_calibrate+0x12ae>
    6292:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    629a:	781b      	ldrb	r3, [r3, #0]
    629c:	b2db      	uxtb	r3, r3
    629e:	461a      	mov	r2, r3
    62a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    62a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a8:	5c9a      	ldrb	r2, [r3, r2]
    62aa:	f24c 634b 	movw	r3, #50763	; 0xc64b
    62ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b2:	701a      	strb	r2, [r3, #0]
    62b4:	f24c 634c 	movw	r3, #50764	; 0xc64c
    62b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62bc:	2200      	movs	r2, #0
    62be:	701a      	strb	r2, [r3, #0]
    62c0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c8:	781b      	ldrb	r3, [r3, #0]
    62ca:	b2db      	uxtb	r3, r3
    62cc:	3301      	adds	r3, #1
    62ce:	b2da      	uxtb	r2, r3
    62d0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62d8:	701a      	strb	r2, [r3, #0]
    62da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e2:	781b      	ldrb	r3, [r3, #0]
    62e4:	b2db      	uxtb	r3, r3
    62e6:	2bff      	cmp	r3, #255	; 0xff
    62e8:	d105      	bne.n	62f6 <ground_calibrate+0x276>
    62ea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f2:	2200      	movs	r2, #0
    62f4:	701a      	strb	r2, [r3, #0]
    62f6:	f242 0338 	movw	r3, #8248	; 0x2038
    62fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62fe:	f242 0238 	movw	r2, #8248	; 0x2038
    6302:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6306:	7812      	ldrb	r2, [r2, #0]
    6308:	b2d2      	uxtb	r2, r2
    630a:	f042 0201 	orr.w	r2, r2, #1
    630e:	b2d2      	uxtb	r2, r2
    6310:	701a      	strb	r2, [r3, #0]
    6312:	f242 0339 	movw	r3, #8249	; 0x2039
    6316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    631a:	f242 0239 	movw	r2, #8249	; 0x2039
    631e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6322:	7812      	ldrb	r2, [r2, #0]
    6324:	b2d2      	uxtb	r2, r2
    6326:	f042 0210 	orr.w	r2, r2, #16
    632a:	b2d2      	uxtb	r2, r2
    632c:	701a      	strb	r2, [r3, #0]
    632e:	f000 bffe 	b.w	732e <ground_calibrate+0x12ae>
    6332:	f24c 5348 	movw	r3, #50504	; 0xc548
    6336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    633a:	781b      	ldrb	r3, [r3, #0]
    633c:	3301      	adds	r3, #1
    633e:	b2da      	uxtb	r2, r3
    6340:	f24c 5348 	movw	r3, #50504	; 0xc548
    6344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6348:	701a      	strb	r2, [r3, #0]
    634a:	f000 bff0 	b.w	732e <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    634e:	f24c 5342 	movw	r3, #50498	; 0xc542
    6352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6356:	781b      	ldrb	r3, [r3, #0]
    6358:	2b01      	cmp	r3, #1
    635a:	f040 87e8 	bne.w	732e <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    635e:	f24c 6350 	movw	r3, #50768	; 0xc650
    6362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6366:	885b      	ldrh	r3, [r3, #2]
    6368:	b21b      	sxth	r3, r3
    636a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    636e:	db09      	blt.n	6384 <ground_calibrate+0x304>
    6370:	f24c 6350 	movw	r3, #50768	; 0xc650
    6374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6378:	885b      	ldrh	r3, [r3, #2]
    637a:	b21b      	sxth	r3, r3
    637c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6380:	f340 87d5 	ble.w	732e <ground_calibrate+0x12ae>
      ir_gain_calib();
    6384:	f00b fd54 	bl	11e30 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6388:	f240 5348 	movw	r3, #1352	; 0x548
    638c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6390:	681a      	ldr	r2, [r3, #0]
    6392:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    639a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    639c:	f24c 5349 	movw	r3, #50505	; 0xc549
    63a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a4:	781a      	ldrb	r2, [r3, #0]
    63a6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    63aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ae:	781b      	ldrb	r3, [r3, #0]
    63b0:	b2db      	uxtb	r3, r3
    63b2:	429a      	cmp	r2, r3
    63b4:	d313      	bcc.n	63de <ground_calibrate+0x35e>
    63b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    63ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63be:	781b      	ldrb	r3, [r3, #0]
    63c0:	b2db      	uxtb	r3, r3
    63c2:	461a      	mov	r2, r3
    63c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    63c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63cc:	781b      	ldrb	r3, [r3, #0]
    63ce:	1ad3      	subs	r3, r2, r3
    63d0:	33ff      	adds	r3, #255	; 0xff
    63d2:	2b14      	cmp	r3, #20
    63d4:	bfd4      	ite	le
    63d6:	2300      	movle	r3, #0
    63d8:	2301      	movgt	r3, #1
    63da:	b2db      	uxtb	r3, r3
    63dc:	e011      	b.n	6402 <ground_calibrate+0x382>
    63de:	f24c 534a 	movw	r3, #50506	; 0xc54a
    63e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e6:	781b      	ldrb	r3, [r3, #0]
    63e8:	b2db      	uxtb	r3, r3
    63ea:	461a      	mov	r2, r3
    63ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    63f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f4:	781b      	ldrb	r3, [r3, #0]
    63f6:	1ad3      	subs	r3, r2, r3
    63f8:	2b14      	cmp	r3, #20
    63fa:	bfd4      	ite	le
    63fc:	2300      	movle	r3, #0
    63fe:	2301      	movgt	r3, #1
    6400:	b2db      	uxtb	r3, r3
    6402:	2b00      	cmp	r3, #0
    6404:	f000 85a6 	beq.w	6f54 <ground_calibrate+0xed4>
    6408:	f24c 5349 	movw	r3, #50505	; 0xc549
    640c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6410:	781b      	ldrb	r3, [r3, #0]
    6412:	461a      	mov	r2, r3
    6414:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    641c:	2105      	movs	r1, #5
    641e:	5499      	strb	r1, [r3, r2]
    6420:	f24c 5349 	movw	r3, #50505	; 0xc549
    6424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6428:	781b      	ldrb	r3, [r3, #0]
    642a:	3301      	adds	r3, #1
    642c:	b2da      	uxtb	r2, r3
    642e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6436:	701a      	strb	r2, [r3, #0]
    6438:	f24c 5349 	movw	r3, #50505	; 0xc549
    643c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6440:	781b      	ldrb	r3, [r3, #0]
    6442:	2bff      	cmp	r3, #255	; 0xff
    6444:	d105      	bne.n	6452 <ground_calibrate+0x3d2>
    6446:	f24c 5349 	movw	r3, #50505	; 0xc549
    644a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    644e:	2200      	movs	r2, #0
    6450:	701a      	strb	r2, [r3, #0]
    6452:	f24c 5349 	movw	r3, #50505	; 0xc549
    6456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645a:	781b      	ldrb	r3, [r3, #0]
    645c:	461a      	mov	r2, r3
    645e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6466:	2105      	movs	r1, #5
    6468:	5499      	strb	r1, [r3, r2]
    646a:	f24c 5349 	movw	r3, #50505	; 0xc549
    646e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6472:	781b      	ldrb	r3, [r3, #0]
    6474:	3301      	adds	r3, #1
    6476:	b2da      	uxtb	r2, r3
    6478:	f24c 5349 	movw	r3, #50505	; 0xc549
    647c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6480:	701a      	strb	r2, [r3, #0]
    6482:	f24c 5349 	movw	r3, #50505	; 0xc549
    6486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648a:	781b      	ldrb	r3, [r3, #0]
    648c:	2bff      	cmp	r3, #255	; 0xff
    648e:	d105      	bne.n	649c <ground_calibrate+0x41c>
    6490:	f24c 5349 	movw	r3, #50505	; 0xc549
    6494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6498:	2200      	movs	r2, #0
    649a:	701a      	strb	r2, [r3, #0]
    649c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a4:	2205      	movs	r2, #5
    64a6:	701a      	strb	r2, [r3, #0]
    64a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    64ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b0:	2205      	movs	r2, #5
    64b2:	701a      	strb	r2, [r3, #0]
    64b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    64b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64bc:	781b      	ldrb	r3, [r3, #0]
    64be:	461a      	mov	r2, r3
    64c0:	f64c 3340 	movw	r3, #52032	; 0xcb40
    64c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c8:	7819      	ldrb	r1, [r3, #0]
    64ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    64ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d2:	5499      	strb	r1, [r3, r2]
    64d4:	f64c 3340 	movw	r3, #52032	; 0xcb40
    64d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64dc:	781a      	ldrb	r2, [r3, #0]
    64de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e6:	781b      	ldrb	r3, [r3, #0]
    64e8:	4413      	add	r3, r2
    64ea:	b2da      	uxtb	r2, r3
    64ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f4:	701a      	strb	r2, [r3, #0]
    64f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    64fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64fe:	781a      	ldrb	r2, [r3, #0]
    6500:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6508:	781b      	ldrb	r3, [r3, #0]
    650a:	4413      	add	r3, r2
    650c:	b2da      	uxtb	r2, r3
    650e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6516:	701a      	strb	r2, [r3, #0]
    6518:	f24c 5349 	movw	r3, #50505	; 0xc549
    651c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6520:	781b      	ldrb	r3, [r3, #0]
    6522:	3301      	adds	r3, #1
    6524:	b2da      	uxtb	r2, r3
    6526:	f24c 5349 	movw	r3, #50505	; 0xc549
    652a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    652e:	701a      	strb	r2, [r3, #0]
    6530:	f24c 5349 	movw	r3, #50505	; 0xc549
    6534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6538:	781b      	ldrb	r3, [r3, #0]
    653a:	2bff      	cmp	r3, #255	; 0xff
    653c:	d105      	bne.n	654a <ground_calibrate+0x4ca>
    653e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6546:	2200      	movs	r2, #0
    6548:	701a      	strb	r2, [r3, #0]
    654a:	f24c 5349 	movw	r3, #50505	; 0xc549
    654e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6552:	781b      	ldrb	r3, [r3, #0]
    6554:	461a      	mov	r2, r3
    6556:	f64c 3340 	movw	r3, #52032	; 0xcb40
    655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655e:	7859      	ldrb	r1, [r3, #1]
    6560:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6568:	5499      	strb	r1, [r3, r2]
    656a:	4bd2      	ldr	r3, [pc, #840]	; (68b4 <ground_calibrate+0x834>)
    656c:	781a      	ldrb	r2, [r3, #0]
    656e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6576:	781b      	ldrb	r3, [r3, #0]
    6578:	4413      	add	r3, r2
    657a:	b2da      	uxtb	r2, r3
    657c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6584:	701a      	strb	r2, [r3, #0]
    6586:	f24c 634e 	movw	r3, #50766	; 0xc64e
    658a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    658e:	781a      	ldrb	r2, [r3, #0]
    6590:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6598:	781b      	ldrb	r3, [r3, #0]
    659a:	4413      	add	r3, r2
    659c:	b2da      	uxtb	r2, r3
    659e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a6:	701a      	strb	r2, [r3, #0]
    65a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    65ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b0:	781b      	ldrb	r3, [r3, #0]
    65b2:	3301      	adds	r3, #1
    65b4:	b2da      	uxtb	r2, r3
    65b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    65ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65be:	701a      	strb	r2, [r3, #0]
    65c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    65c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c8:	781b      	ldrb	r3, [r3, #0]
    65ca:	2bff      	cmp	r3, #255	; 0xff
    65cc:	d105      	bne.n	65da <ground_calibrate+0x55a>
    65ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    65d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d6:	2200      	movs	r2, #0
    65d8:	701a      	strb	r2, [r3, #0]
    65da:	f24c 5349 	movw	r3, #50505	; 0xc549
    65de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e2:	781b      	ldrb	r3, [r3, #0]
    65e4:	461a      	mov	r2, r3
    65e6:	f64c 3340 	movw	r3, #52032	; 0xcb40
    65ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ee:	7899      	ldrb	r1, [r3, #2]
    65f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    65f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f8:	5499      	strb	r1, [r3, r2]
    65fa:	4baf      	ldr	r3, [pc, #700]	; (68b8 <ground_calibrate+0x838>)
    65fc:	781a      	ldrb	r2, [r3, #0]
    65fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6606:	781b      	ldrb	r3, [r3, #0]
    6608:	4413      	add	r3, r2
    660a:	b2da      	uxtb	r2, r3
    660c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6614:	701a      	strb	r2, [r3, #0]
    6616:	f24c 634e 	movw	r3, #50766	; 0xc64e
    661a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    661e:	781a      	ldrb	r2, [r3, #0]
    6620:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6628:	781b      	ldrb	r3, [r3, #0]
    662a:	4413      	add	r3, r2
    662c:	b2da      	uxtb	r2, r3
    662e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6636:	701a      	strb	r2, [r3, #0]
    6638:	f24c 5349 	movw	r3, #50505	; 0xc549
    663c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6640:	781b      	ldrb	r3, [r3, #0]
    6642:	3301      	adds	r3, #1
    6644:	b2da      	uxtb	r2, r3
    6646:	f24c 5349 	movw	r3, #50505	; 0xc549
    664a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664e:	701a      	strb	r2, [r3, #0]
    6650:	f24c 5349 	movw	r3, #50505	; 0xc549
    6654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6658:	781b      	ldrb	r3, [r3, #0]
    665a:	2bff      	cmp	r3, #255	; 0xff
    665c:	d105      	bne.n	666a <ground_calibrate+0x5ea>
    665e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6666:	2200      	movs	r2, #0
    6668:	701a      	strb	r2, [r3, #0]
    666a:	f24c 5349 	movw	r3, #50505	; 0xc549
    666e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6672:	781b      	ldrb	r3, [r3, #0]
    6674:	461a      	mov	r2, r3
    6676:	f64c 3340 	movw	r3, #52032	; 0xcb40
    667a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667e:	78d9      	ldrb	r1, [r3, #3]
    6680:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6688:	5499      	strb	r1, [r3, r2]
    668a:	4b8c      	ldr	r3, [pc, #560]	; (68bc <ground_calibrate+0x83c>)
    668c:	781a      	ldrb	r2, [r3, #0]
    668e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6696:	781b      	ldrb	r3, [r3, #0]
    6698:	4413      	add	r3, r2
    669a:	b2da      	uxtb	r2, r3
    669c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a4:	701a      	strb	r2, [r3, #0]
    66a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    66aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ae:	781a      	ldrb	r2, [r3, #0]
    66b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b8:	781b      	ldrb	r3, [r3, #0]
    66ba:	4413      	add	r3, r2
    66bc:	b2da      	uxtb	r2, r3
    66be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    66c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c6:	701a      	strb	r2, [r3, #0]
    66c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    66cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d0:	781b      	ldrb	r3, [r3, #0]
    66d2:	3301      	adds	r3, #1
    66d4:	b2da      	uxtb	r2, r3
    66d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    66da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66de:	701a      	strb	r2, [r3, #0]
    66e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    66e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e8:	781b      	ldrb	r3, [r3, #0]
    66ea:	2bff      	cmp	r3, #255	; 0xff
    66ec:	d105      	bne.n	66fa <ground_calibrate+0x67a>
    66ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    66f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f6:	2200      	movs	r2, #0
    66f8:	701a      	strb	r2, [r3, #0]
    66fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    66fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6702:	781b      	ldrb	r3, [r3, #0]
    6704:	461a      	mov	r2, r3
    6706:	f64c 3344 	movw	r3, #52036	; 0xcb44
    670a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    670e:	7819      	ldrb	r1, [r3, #0]
    6710:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6718:	5499      	strb	r1, [r3, r2]
    671a:	f64c 3344 	movw	r3, #52036	; 0xcb44
    671e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6722:	781a      	ldrb	r2, [r3, #0]
    6724:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672c:	781b      	ldrb	r3, [r3, #0]
    672e:	4413      	add	r3, r2
    6730:	b2da      	uxtb	r2, r3
    6732:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    673a:	701a      	strb	r2, [r3, #0]
    673c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6744:	781a      	ldrb	r2, [r3, #0]
    6746:	f24c 634d 	movw	r3, #50765	; 0xc64d
    674a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674e:	781b      	ldrb	r3, [r3, #0]
    6750:	4413      	add	r3, r2
    6752:	b2da      	uxtb	r2, r3
    6754:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675c:	701a      	strb	r2, [r3, #0]
    675e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6766:	781b      	ldrb	r3, [r3, #0]
    6768:	3301      	adds	r3, #1
    676a:	b2da      	uxtb	r2, r3
    676c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6774:	701a      	strb	r2, [r3, #0]
    6776:	f24c 5349 	movw	r3, #50505	; 0xc549
    677a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677e:	781b      	ldrb	r3, [r3, #0]
    6780:	2bff      	cmp	r3, #255	; 0xff
    6782:	d105      	bne.n	6790 <ground_calibrate+0x710>
    6784:	f24c 5349 	movw	r3, #50505	; 0xc549
    6788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678c:	2200      	movs	r2, #0
    678e:	701a      	strb	r2, [r3, #0]
    6790:	f24c 5349 	movw	r3, #50505	; 0xc549
    6794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	461a      	mov	r2, r3
    679c:	f64c 3344 	movw	r3, #52036	; 0xcb44
    67a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a4:	7859      	ldrb	r1, [r3, #1]
    67a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    67aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ae:	5499      	strb	r1, [r3, r2]
    67b0:	4b43      	ldr	r3, [pc, #268]	; (68c0 <ground_calibrate+0x840>)
    67b2:	781a      	ldrb	r2, [r3, #0]
    67b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67bc:	781b      	ldrb	r3, [r3, #0]
    67be:	4413      	add	r3, r2
    67c0:	b2da      	uxtb	r2, r3
    67c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ca:	701a      	strb	r2, [r3, #0]
    67cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    67d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d4:	781a      	ldrb	r2, [r3, #0]
    67d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67de:	781b      	ldrb	r3, [r3, #0]
    67e0:	4413      	add	r3, r2
    67e2:	b2da      	uxtb	r2, r3
    67e4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    67e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ec:	701a      	strb	r2, [r3, #0]
    67ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    67f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f6:	781b      	ldrb	r3, [r3, #0]
    67f8:	3301      	adds	r3, #1
    67fa:	b2da      	uxtb	r2, r3
    67fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6804:	701a      	strb	r2, [r3, #0]
    6806:	f24c 5349 	movw	r3, #50505	; 0xc549
    680a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680e:	781b      	ldrb	r3, [r3, #0]
    6810:	2bff      	cmp	r3, #255	; 0xff
    6812:	d105      	bne.n	6820 <ground_calibrate+0x7a0>
    6814:	f24c 5349 	movw	r3, #50505	; 0xc549
    6818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    681c:	2200      	movs	r2, #0
    681e:	701a      	strb	r2, [r3, #0]
    6820:	f24c 5349 	movw	r3, #50505	; 0xc549
    6824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6828:	781b      	ldrb	r3, [r3, #0]
    682a:	461a      	mov	r2, r3
    682c:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6834:	7899      	ldrb	r1, [r3, #2]
    6836:	f24c 534c 	movw	r3, #50508	; 0xc54c
    683a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683e:	5499      	strb	r1, [r3, r2]
    6840:	4b20      	ldr	r3, [pc, #128]	; (68c4 <ground_calibrate+0x844>)
    6842:	781a      	ldrb	r2, [r3, #0]
    6844:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    684c:	781b      	ldrb	r3, [r3, #0]
    684e:	4413      	add	r3, r2
    6850:	b2da      	uxtb	r2, r3
    6852:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685a:	701a      	strb	r2, [r3, #0]
    685c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6864:	781a      	ldrb	r2, [r3, #0]
    6866:	f24c 634d 	movw	r3, #50765	; 0xc64d
    686a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686e:	781b      	ldrb	r3, [r3, #0]
    6870:	4413      	add	r3, r2
    6872:	b2da      	uxtb	r2, r3
    6874:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687c:	701a      	strb	r2, [r3, #0]
    687e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6886:	781b      	ldrb	r3, [r3, #0]
    6888:	3301      	adds	r3, #1
    688a:	b2da      	uxtb	r2, r3
    688c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6894:	701a      	strb	r2, [r3, #0]
    6896:	f24c 5349 	movw	r3, #50505	; 0xc549
    689a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    689e:	781b      	ldrb	r3, [r3, #0]
    68a0:	2bff      	cmp	r3, #255	; 0xff
    68a2:	d111      	bne.n	68c8 <ground_calibrate+0x848>
    68a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    68a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ac:	2200      	movs	r2, #0
    68ae:	701a      	strb	r2, [r3, #0]
    68b0:	e00a      	b.n	68c8 <ground_calibrate+0x848>
    68b2:	bf00      	nop
    68b4:	2004cb41 	.word	0x2004cb41
    68b8:	2004cb42 	.word	0x2004cb42
    68bc:	2004cb43 	.word	0x2004cb43
    68c0:	2004cb45 	.word	0x2004cb45
    68c4:	2004cb46 	.word	0x2004cb46
    68c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    68cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d0:	781b      	ldrb	r3, [r3, #0]
    68d2:	461a      	mov	r2, r3
    68d4:	f64c 3344 	movw	r3, #52036	; 0xcb44
    68d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68dc:	78d9      	ldrb	r1, [r3, #3]
    68de:	f24c 534c 	movw	r3, #50508	; 0xc54c
    68e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e6:	5499      	strb	r1, [r3, r2]
    68e8:	4bd3      	ldr	r3, [pc, #844]	; (6c38 <ground_calibrate+0xbb8>)
    68ea:	781a      	ldrb	r2, [r3, #0]
    68ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f4:	781b      	ldrb	r3, [r3, #0]
    68f6:	4413      	add	r3, r2
    68f8:	b2da      	uxtb	r2, r3
    68fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6902:	701a      	strb	r2, [r3, #0]
    6904:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690c:	781a      	ldrb	r2, [r3, #0]
    690e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6916:	781b      	ldrb	r3, [r3, #0]
    6918:	4413      	add	r3, r2
    691a:	b2da      	uxtb	r2, r3
    691c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6924:	701a      	strb	r2, [r3, #0]
    6926:	f24c 5349 	movw	r3, #50505	; 0xc549
    692a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    692e:	781b      	ldrb	r3, [r3, #0]
    6930:	3301      	adds	r3, #1
    6932:	b2da      	uxtb	r2, r3
    6934:	f24c 5349 	movw	r3, #50505	; 0xc549
    6938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693c:	701a      	strb	r2, [r3, #0]
    693e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6946:	781b      	ldrb	r3, [r3, #0]
    6948:	2bff      	cmp	r3, #255	; 0xff
    694a:	d105      	bne.n	6958 <ground_calibrate+0x8d8>
    694c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6954:	2200      	movs	r2, #0
    6956:	701a      	strb	r2, [r3, #0]
    6958:	f24c 5349 	movw	r3, #50505	; 0xc549
    695c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6960:	781b      	ldrb	r3, [r3, #0]
    6962:	461a      	mov	r2, r3
    6964:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    696c:	7819      	ldrb	r1, [r3, #0]
    696e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6976:	5499      	strb	r1, [r3, r2]
    6978:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    697c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6980:	781a      	ldrb	r2, [r3, #0]
    6982:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    698a:	781b      	ldrb	r3, [r3, #0]
    698c:	4413      	add	r3, r2
    698e:	b2da      	uxtb	r2, r3
    6990:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6998:	701a      	strb	r2, [r3, #0]
    699a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    699e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a2:	781a      	ldrb	r2, [r3, #0]
    69a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ac:	781b      	ldrb	r3, [r3, #0]
    69ae:	4413      	add	r3, r2
    69b0:	b2da      	uxtb	r2, r3
    69b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    69b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ba:	701a      	strb	r2, [r3, #0]
    69bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    69c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c4:	781b      	ldrb	r3, [r3, #0]
    69c6:	3301      	adds	r3, #1
    69c8:	b2da      	uxtb	r2, r3
    69ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    69ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d2:	701a      	strb	r2, [r3, #0]
    69d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    69d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69dc:	781b      	ldrb	r3, [r3, #0]
    69de:	2bff      	cmp	r3, #255	; 0xff
    69e0:	d105      	bne.n	69ee <ground_calibrate+0x96e>
    69e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    69e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ea:	2200      	movs	r2, #0
    69ec:	701a      	strb	r2, [r3, #0]
    69ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    69f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f6:	781b      	ldrb	r3, [r3, #0]
    69f8:	461a      	mov	r2, r3
    69fa:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    69fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a02:	7859      	ldrb	r1, [r3, #1]
    6a04:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0c:	5499      	strb	r1, [r3, r2]
    6a0e:	4b8b      	ldr	r3, [pc, #556]	; (6c3c <ground_calibrate+0xbbc>)
    6a10:	781a      	ldrb	r2, [r3, #0]
    6a12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1a:	781b      	ldrb	r3, [r3, #0]
    6a1c:	4413      	add	r3, r2
    6a1e:	b2da      	uxtb	r2, r3
    6a20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a28:	701a      	strb	r2, [r3, #0]
    6a2a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a32:	781a      	ldrb	r2, [r3, #0]
    6a34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3c:	781b      	ldrb	r3, [r3, #0]
    6a3e:	4413      	add	r3, r2
    6a40:	b2da      	uxtb	r2, r3
    6a42:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a4a:	701a      	strb	r2, [r3, #0]
    6a4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	3301      	adds	r3, #1
    6a58:	b2da      	uxtb	r2, r3
    6a5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a62:	701a      	strb	r2, [r3, #0]
    6a64:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6c:	781b      	ldrb	r3, [r3, #0]
    6a6e:	2bff      	cmp	r3, #255	; 0xff
    6a70:	d105      	bne.n	6a7e <ground_calibrate+0x9fe>
    6a72:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a7a:	2200      	movs	r2, #0
    6a7c:	701a      	strb	r2, [r3, #0]
    6a7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a86:	781b      	ldrb	r3, [r3, #0]
    6a88:	461a      	mov	r2, r3
    6a8a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a92:	7899      	ldrb	r1, [r3, #2]
    6a94:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9c:	5499      	strb	r1, [r3, r2]
    6a9e:	4b68      	ldr	r3, [pc, #416]	; (6c40 <ground_calibrate+0xbc0>)
    6aa0:	781a      	ldrb	r2, [r3, #0]
    6aa2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aaa:	781b      	ldrb	r3, [r3, #0]
    6aac:	4413      	add	r3, r2
    6aae:	b2da      	uxtb	r2, r3
    6ab0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab8:	701a      	strb	r2, [r3, #0]
    6aba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac2:	781a      	ldrb	r2, [r3, #0]
    6ac4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6acc:	781b      	ldrb	r3, [r3, #0]
    6ace:	4413      	add	r3, r2
    6ad0:	b2da      	uxtb	r2, r3
    6ad2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ada:	701a      	strb	r2, [r3, #0]
    6adc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae4:	781b      	ldrb	r3, [r3, #0]
    6ae6:	3301      	adds	r3, #1
    6ae8:	b2da      	uxtb	r2, r3
    6aea:	f24c 5349 	movw	r3, #50505	; 0xc549
    6aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af2:	701a      	strb	r2, [r3, #0]
    6af4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6afc:	781b      	ldrb	r3, [r3, #0]
    6afe:	2bff      	cmp	r3, #255	; 0xff
    6b00:	d105      	bne.n	6b0e <ground_calibrate+0xa8e>
    6b02:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b0a:	2200      	movs	r2, #0
    6b0c:	701a      	strb	r2, [r3, #0]
    6b0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b16:	781b      	ldrb	r3, [r3, #0]
    6b18:	461a      	mov	r2, r3
    6b1a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b22:	78d9      	ldrb	r1, [r3, #3]
    6b24:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b2c:	5499      	strb	r1, [r3, r2]
    6b2e:	4b45      	ldr	r3, [pc, #276]	; (6c44 <ground_calibrate+0xbc4>)
    6b30:	781a      	ldrb	r2, [r3, #0]
    6b32:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b3a:	781b      	ldrb	r3, [r3, #0]
    6b3c:	4413      	add	r3, r2
    6b3e:	b2da      	uxtb	r2, r3
    6b40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b48:	701a      	strb	r2, [r3, #0]
    6b4a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b52:	781a      	ldrb	r2, [r3, #0]
    6b54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5c:	781b      	ldrb	r3, [r3, #0]
    6b5e:	4413      	add	r3, r2
    6b60:	b2da      	uxtb	r2, r3
    6b62:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b6a:	701a      	strb	r2, [r3, #0]
    6b6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b74:	781b      	ldrb	r3, [r3, #0]
    6b76:	3301      	adds	r3, #1
    6b78:	b2da      	uxtb	r2, r3
    6b7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b82:	701a      	strb	r2, [r3, #0]
    6b84:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b8c:	781b      	ldrb	r3, [r3, #0]
    6b8e:	2bff      	cmp	r3, #255	; 0xff
    6b90:	d105      	bne.n	6b9e <ground_calibrate+0xb1e>
    6b92:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b9a:	2200      	movs	r2, #0
    6b9c:	701a      	strb	r2, [r3, #0]
    6b9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba6:	781b      	ldrb	r3, [r3, #0]
    6ba8:	461a      	mov	r2, r3
    6baa:	f240 5342 	movw	r3, #1346	; 0x542
    6bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb2:	7819      	ldrb	r1, [r3, #0]
    6bb4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bbc:	5499      	strb	r1, [r3, r2]
    6bbe:	f240 5342 	movw	r3, #1346	; 0x542
    6bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bc6:	781a      	ldrb	r2, [r3, #0]
    6bc8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd0:	781b      	ldrb	r3, [r3, #0]
    6bd2:	4413      	add	r3, r2
    6bd4:	b2da      	uxtb	r2, r3
    6bd6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bde:	701a      	strb	r2, [r3, #0]
    6be0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be8:	781a      	ldrb	r2, [r3, #0]
    6bea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf2:	781b      	ldrb	r3, [r3, #0]
    6bf4:	4413      	add	r3, r2
    6bf6:	b2da      	uxtb	r2, r3
    6bf8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c00:	701a      	strb	r2, [r3, #0]
    6c02:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0a:	781b      	ldrb	r3, [r3, #0]
    6c0c:	3301      	adds	r3, #1
    6c0e:	b2da      	uxtb	r2, r3
    6c10:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c18:	701a      	strb	r2, [r3, #0]
    6c1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c22:	781b      	ldrb	r3, [r3, #0]
    6c24:	2bff      	cmp	r3, #255	; 0xff
    6c26:	d10f      	bne.n	6c48 <ground_calibrate+0xbc8>
    6c28:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c30:	2200      	movs	r2, #0
    6c32:	701a      	strb	r2, [r3, #0]
    6c34:	e008      	b.n	6c48 <ground_calibrate+0xbc8>
    6c36:	bf00      	nop
    6c38:	2004cb47 	.word	0x2004cb47
    6c3c:	2004cb3d 	.word	0x2004cb3d
    6c40:	2004cb3e 	.word	0x2004cb3e
    6c44:	2004cb3f 	.word	0x2004cb3f
    6c48:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c50:	781b      	ldrb	r3, [r3, #0]
    6c52:	461a      	mov	r2, r3
    6c54:	f240 5342 	movw	r3, #1346	; 0x542
    6c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c5c:	7859      	ldrb	r1, [r3, #1]
    6c5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c66:	5499      	strb	r1, [r3, r2]
    6c68:	4bd4      	ldr	r3, [pc, #848]	; (6fbc <ground_calibrate+0xf3c>)
    6c6a:	781a      	ldrb	r2, [r3, #0]
    6c6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c74:	781b      	ldrb	r3, [r3, #0]
    6c76:	4413      	add	r3, r2
    6c78:	b2da      	uxtb	r2, r3
    6c7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c82:	701a      	strb	r2, [r3, #0]
    6c84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c8c:	781a      	ldrb	r2, [r3, #0]
    6c8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c96:	781b      	ldrb	r3, [r3, #0]
    6c98:	4413      	add	r3, r2
    6c9a:	b2da      	uxtb	r2, r3
    6c9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca4:	701a      	strb	r2, [r3, #0]
    6ca6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cae:	781b      	ldrb	r3, [r3, #0]
    6cb0:	3301      	adds	r3, #1
    6cb2:	b2da      	uxtb	r2, r3
    6cb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cbc:	701a      	strb	r2, [r3, #0]
    6cbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc6:	781b      	ldrb	r3, [r3, #0]
    6cc8:	2bff      	cmp	r3, #255	; 0xff
    6cca:	d105      	bne.n	6cd8 <ground_calibrate+0xc58>
    6ccc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd4:	2200      	movs	r2, #0
    6cd6:	701a      	strb	r2, [r3, #0]
    6cd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce0:	781b      	ldrb	r3, [r3, #0]
    6ce2:	461a      	mov	r2, r3
    6ce4:	f240 5344 	movw	r3, #1348	; 0x544
    6ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cec:	7819      	ldrb	r1, [r3, #0]
    6cee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf6:	5499      	strb	r1, [r3, r2]
    6cf8:	f240 5344 	movw	r3, #1348	; 0x544
    6cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d00:	781a      	ldrb	r2, [r3, #0]
    6d02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d0a:	781b      	ldrb	r3, [r3, #0]
    6d0c:	4413      	add	r3, r2
    6d0e:	b2da      	uxtb	r2, r3
    6d10:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d18:	701a      	strb	r2, [r3, #0]
    6d1a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d22:	781a      	ldrb	r2, [r3, #0]
    6d24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d2c:	781b      	ldrb	r3, [r3, #0]
    6d2e:	4413      	add	r3, r2
    6d30:	b2da      	uxtb	r2, r3
    6d32:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3a:	701a      	strb	r2, [r3, #0]
    6d3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d44:	781b      	ldrb	r3, [r3, #0]
    6d46:	3301      	adds	r3, #1
    6d48:	b2da      	uxtb	r2, r3
    6d4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d52:	701a      	strb	r2, [r3, #0]
    6d54:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5c:	781b      	ldrb	r3, [r3, #0]
    6d5e:	2bff      	cmp	r3, #255	; 0xff
    6d60:	d105      	bne.n	6d6e <ground_calibrate+0xcee>
    6d62:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6a:	2200      	movs	r2, #0
    6d6c:	701a      	strb	r2, [r3, #0]
    6d6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d76:	781b      	ldrb	r3, [r3, #0]
    6d78:	461a      	mov	r2, r3
    6d7a:	f240 5344 	movw	r3, #1348	; 0x544
    6d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d82:	7859      	ldrb	r1, [r3, #1]
    6d84:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d8c:	5499      	strb	r1, [r3, r2]
    6d8e:	4b8c      	ldr	r3, [pc, #560]	; (6fc0 <ground_calibrate+0xf40>)
    6d90:	781a      	ldrb	r2, [r3, #0]
    6d92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d9a:	781b      	ldrb	r3, [r3, #0]
    6d9c:	4413      	add	r3, r2
    6d9e:	b2da      	uxtb	r2, r3
    6da0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da8:	701a      	strb	r2, [r3, #0]
    6daa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db2:	781a      	ldrb	r2, [r3, #0]
    6db4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dbc:	781b      	ldrb	r3, [r3, #0]
    6dbe:	4413      	add	r3, r2
    6dc0:	b2da      	uxtb	r2, r3
    6dc2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dca:	701a      	strb	r2, [r3, #0]
    6dcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd4:	781b      	ldrb	r3, [r3, #0]
    6dd6:	3301      	adds	r3, #1
    6dd8:	b2da      	uxtb	r2, r3
    6dda:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de2:	701a      	strb	r2, [r3, #0]
    6de4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dec:	781b      	ldrb	r3, [r3, #0]
    6dee:	2bff      	cmp	r3, #255	; 0xff
    6df0:	d105      	bne.n	6dfe <ground_calibrate+0xd7e>
    6df2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfa:	2200      	movs	r2, #0
    6dfc:	701a      	strb	r2, [r3, #0]
    6dfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e06:	781b      	ldrb	r3, [r3, #0]
    6e08:	461a      	mov	r2, r3
    6e0a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e12:	7819      	ldrb	r1, [r3, #0]
    6e14:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e1c:	5499      	strb	r1, [r3, r2]
    6e1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e26:	781b      	ldrb	r3, [r3, #0]
    6e28:	3301      	adds	r3, #1
    6e2a:	b2da      	uxtb	r2, r3
    6e2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e34:	701a      	strb	r2, [r3, #0]
    6e36:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3e:	781b      	ldrb	r3, [r3, #0]
    6e40:	2bff      	cmp	r3, #255	; 0xff
    6e42:	d105      	bne.n	6e50 <ground_calibrate+0xdd0>
    6e44:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e4c:	2200      	movs	r2, #0
    6e4e:	701a      	strb	r2, [r3, #0]
    6e50:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e58:	781b      	ldrb	r3, [r3, #0]
    6e5a:	461a      	mov	r2, r3
    6e5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e64:	7819      	ldrb	r1, [r3, #0]
    6e66:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e6e:	5499      	strb	r1, [r3, r2]
    6e70:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e78:	781b      	ldrb	r3, [r3, #0]
    6e7a:	3301      	adds	r3, #1
    6e7c:	b2da      	uxtb	r2, r3
    6e7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e86:	701a      	strb	r2, [r3, #0]
    6e88:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e90:	781b      	ldrb	r3, [r3, #0]
    6e92:	2bff      	cmp	r3, #255	; 0xff
    6e94:	d105      	bne.n	6ea2 <ground_calibrate+0xe22>
    6e96:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9e:	2200      	movs	r2, #0
    6ea0:	701a      	strb	r2, [r3, #0]
    6ea2:	f242 0339 	movw	r3, #8249	; 0x2039
    6ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eaa:	781b      	ldrb	r3, [r3, #0]
    6eac:	b2db      	uxtb	r3, r3
    6eae:	f003 0310 	and.w	r3, r3, #16
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	d15a      	bne.n	6f6c <ground_calibrate+0xeec>
    6eb6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ebe:	781b      	ldrb	r3, [r3, #0]
    6ec0:	b2db      	uxtb	r3, r3
    6ec2:	461a      	mov	r2, r3
    6ec4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ecc:	5c9a      	ldrb	r2, [r3, r2]
    6ece:	f24c 634b 	movw	r3, #50763	; 0xc64b
    6ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed6:	701a      	strb	r2, [r3, #0]
    6ed8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    6edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee0:	2200      	movs	r2, #0
    6ee2:	701a      	strb	r2, [r3, #0]
    6ee4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eec:	781b      	ldrb	r3, [r3, #0]
    6eee:	b2db      	uxtb	r3, r3
    6ef0:	3301      	adds	r3, #1
    6ef2:	b2da      	uxtb	r2, r3
    6ef4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6efc:	701a      	strb	r2, [r3, #0]
    6efe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f06:	781b      	ldrb	r3, [r3, #0]
    6f08:	b2db      	uxtb	r3, r3
    6f0a:	2bff      	cmp	r3, #255	; 0xff
    6f0c:	d105      	bne.n	6f1a <ground_calibrate+0xe9a>
    6f0e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f16:	2200      	movs	r2, #0
    6f18:	701a      	strb	r2, [r3, #0]
    6f1a:	f242 0338 	movw	r3, #8248	; 0x2038
    6f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f22:	f242 0238 	movw	r2, #8248	; 0x2038
    6f26:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f2a:	7812      	ldrb	r2, [r2, #0]
    6f2c:	b2d2      	uxtb	r2, r2
    6f2e:	f042 0201 	orr.w	r2, r2, #1
    6f32:	b2d2      	uxtb	r2, r2
    6f34:	701a      	strb	r2, [r3, #0]
    6f36:	f242 0339 	movw	r3, #8249	; 0x2039
    6f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f3e:	f242 0239 	movw	r2, #8249	; 0x2039
    6f42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f46:	7812      	ldrb	r2, [r2, #0]
    6f48:	b2d2      	uxtb	r2, r2
    6f4a:	f042 0210 	orr.w	r2, r2, #16
    6f4e:	b2d2      	uxtb	r2, r2
    6f50:	701a      	strb	r2, [r3, #0]
    6f52:	e00b      	b.n	6f6c <ground_calibrate+0xeec>
    6f54:	f24c 5348 	movw	r3, #50504	; 0xc548
    6f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f5c:	781b      	ldrb	r3, [r3, #0]
    6f5e:	3301      	adds	r3, #1
    6f60:	b2da      	uxtb	r2, r3
    6f62:	f24c 5348 	movw	r3, #50504	; 0xc548
    6f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f6a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6f6c:	f24c 5342 	movw	r3, #50498	; 0xc542
    6f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f74:	2202      	movs	r2, #2
    6f76:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6f78:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f80:	781a      	ldrb	r2, [r3, #0]
    6f82:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f8a:	781b      	ldrb	r3, [r3, #0]
    6f8c:	b2db      	uxtb	r3, r3
    6f8e:	429a      	cmp	r2, r3
    6f90:	d318      	bcc.n	6fc4 <ground_calibrate+0xf44>
    6f92:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f9a:	781b      	ldrb	r3, [r3, #0]
    6f9c:	b2db      	uxtb	r3, r3
    6f9e:	461a      	mov	r2, r3
    6fa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa8:	781b      	ldrb	r3, [r3, #0]
    6faa:	1ad3      	subs	r3, r2, r3
    6fac:	33ff      	adds	r3, #255	; 0xff
    6fae:	2b06      	cmp	r3, #6
    6fb0:	bfd4      	ite	le
    6fb2:	2300      	movle	r3, #0
    6fb4:	2301      	movgt	r3, #1
    6fb6:	b2db      	uxtb	r3, r3
    6fb8:	e016      	b.n	6fe8 <ground_calibrate+0xf68>
    6fba:	bf00      	nop
    6fbc:	20000543 	.word	0x20000543
    6fc0:	20000545 	.word	0x20000545
    6fc4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fcc:	781b      	ldrb	r3, [r3, #0]
    6fce:	b2db      	uxtb	r3, r3
    6fd0:	461a      	mov	r2, r3
    6fd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fda:	781b      	ldrb	r3, [r3, #0]
    6fdc:	1ad3      	subs	r3, r2, r3
    6fde:	2b06      	cmp	r3, #6
    6fe0:	bfd4      	ite	le
    6fe2:	2300      	movle	r3, #0
    6fe4:	2301      	movgt	r3, #1
    6fe6:	b2db      	uxtb	r3, r3
    6fe8:	2b00      	cmp	r3, #0
    6fea:	f000 8194 	beq.w	7316 <ground_calibrate+0x1296>
    6fee:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff6:	781b      	ldrb	r3, [r3, #0]
    6ff8:	461a      	mov	r2, r3
    6ffa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7002:	2105      	movs	r1, #5
    7004:	5499      	strb	r1, [r3, r2]
    7006:	f24c 5349 	movw	r3, #50505	; 0xc549
    700a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700e:	781b      	ldrb	r3, [r3, #0]
    7010:	3301      	adds	r3, #1
    7012:	b2da      	uxtb	r2, r3
    7014:	f24c 5349 	movw	r3, #50505	; 0xc549
    7018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701c:	701a      	strb	r2, [r3, #0]
    701e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7026:	781b      	ldrb	r3, [r3, #0]
    7028:	2bff      	cmp	r3, #255	; 0xff
    702a:	d105      	bne.n	7038 <ground_calibrate+0xfb8>
    702c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7034:	2200      	movs	r2, #0
    7036:	701a      	strb	r2, [r3, #0]
    7038:	f24c 5349 	movw	r3, #50505	; 0xc549
    703c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7040:	781b      	ldrb	r3, [r3, #0]
    7042:	461a      	mov	r2, r3
    7044:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    704c:	2103      	movs	r1, #3
    704e:	5499      	strb	r1, [r3, r2]
    7050:	f24c 5349 	movw	r3, #50505	; 0xc549
    7054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7058:	781b      	ldrb	r3, [r3, #0]
    705a:	3301      	adds	r3, #1
    705c:	b2da      	uxtb	r2, r3
    705e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7066:	701a      	strb	r2, [r3, #0]
    7068:	f24c 5349 	movw	r3, #50505	; 0xc549
    706c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7070:	781b      	ldrb	r3, [r3, #0]
    7072:	2bff      	cmp	r3, #255	; 0xff
    7074:	d105      	bne.n	7082 <ground_calibrate+0x1002>
    7076:	f24c 5349 	movw	r3, #50505	; 0xc549
    707a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707e:	2200      	movs	r2, #0
    7080:	701a      	strb	r2, [r3, #0]
    7082:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708a:	2203      	movs	r2, #3
    708c:	701a      	strb	r2, [r3, #0]
    708e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7096:	2203      	movs	r2, #3
    7098:	701a      	strb	r2, [r3, #0]
    709a:	f24c 5349 	movw	r3, #50505	; 0xc549
    709e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a2:	781b      	ldrb	r3, [r3, #0]
    70a4:	461a      	mov	r2, r3
    70a6:	f240 5340 	movw	r3, #1344	; 0x540
    70aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ae:	7819      	ldrb	r1, [r3, #0]
    70b0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    70b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b8:	5499      	strb	r1, [r3, r2]
    70ba:	f240 5340 	movw	r3, #1344	; 0x540
    70be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70c2:	781a      	ldrb	r2, [r3, #0]
    70c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70cc:	781b      	ldrb	r3, [r3, #0]
    70ce:	4413      	add	r3, r2
    70d0:	b2da      	uxtb	r2, r3
    70d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70da:	701a      	strb	r2, [r3, #0]
    70dc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    70e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e4:	781a      	ldrb	r2, [r3, #0]
    70e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ee:	781b      	ldrb	r3, [r3, #0]
    70f0:	4413      	add	r3, r2
    70f2:	b2da      	uxtb	r2, r3
    70f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    70f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70fc:	701a      	strb	r2, [r3, #0]
    70fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7106:	781b      	ldrb	r3, [r3, #0]
    7108:	3301      	adds	r3, #1
    710a:	b2da      	uxtb	r2, r3
    710c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7114:	701a      	strb	r2, [r3, #0]
    7116:	f24c 5349 	movw	r3, #50505	; 0xc549
    711a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    711e:	781b      	ldrb	r3, [r3, #0]
    7120:	2bff      	cmp	r3, #255	; 0xff
    7122:	d105      	bne.n	7130 <ground_calibrate+0x10b0>
    7124:	f24c 5349 	movw	r3, #50505	; 0xc549
    7128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    712c:	2200      	movs	r2, #0
    712e:	701a      	strb	r2, [r3, #0]
    7130:	f24c 5349 	movw	r3, #50505	; 0xc549
    7134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7138:	781b      	ldrb	r3, [r3, #0]
    713a:	461a      	mov	r2, r3
    713c:	f240 5340 	movw	r3, #1344	; 0x540
    7140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7144:	7859      	ldrb	r1, [r3, #1]
    7146:	f24c 534c 	movw	r3, #50508	; 0xc54c
    714a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    714e:	5499      	strb	r1, [r3, r2]
    7150:	4b77      	ldr	r3, [pc, #476]	; (7330 <ground_calibrate+0x12b0>)
    7152:	781a      	ldrb	r2, [r3, #0]
    7154:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    715c:	781b      	ldrb	r3, [r3, #0]
    715e:	4413      	add	r3, r2
    7160:	b2da      	uxtb	r2, r3
    7162:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716a:	701a      	strb	r2, [r3, #0]
    716c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7174:	781a      	ldrb	r2, [r3, #0]
    7176:	f24c 634d 	movw	r3, #50765	; 0xc64d
    717a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717e:	781b      	ldrb	r3, [r3, #0]
    7180:	4413      	add	r3, r2
    7182:	b2da      	uxtb	r2, r3
    7184:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    718c:	701a      	strb	r2, [r3, #0]
    718e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7196:	781b      	ldrb	r3, [r3, #0]
    7198:	3301      	adds	r3, #1
    719a:	b2da      	uxtb	r2, r3
    719c:	f24c 5349 	movw	r3, #50505	; 0xc549
    71a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a4:	701a      	strb	r2, [r3, #0]
    71a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    71aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ae:	781b      	ldrb	r3, [r3, #0]
    71b0:	2bff      	cmp	r3, #255	; 0xff
    71b2:	d105      	bne.n	71c0 <ground_calibrate+0x1140>
    71b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    71b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71bc:	2200      	movs	r2, #0
    71be:	701a      	strb	r2, [r3, #0]
    71c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    71c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c8:	781b      	ldrb	r3, [r3, #0]
    71ca:	461a      	mov	r2, r3
    71cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    71d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d4:	7819      	ldrb	r1, [r3, #0]
    71d6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    71da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71de:	5499      	strb	r1, [r3, r2]
    71e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    71e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e8:	781b      	ldrb	r3, [r3, #0]
    71ea:	3301      	adds	r3, #1
    71ec:	b2da      	uxtb	r2, r3
    71ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    71f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71f6:	701a      	strb	r2, [r3, #0]
    71f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    71fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7200:	781b      	ldrb	r3, [r3, #0]
    7202:	2bff      	cmp	r3, #255	; 0xff
    7204:	d105      	bne.n	7212 <ground_calibrate+0x1192>
    7206:	f24c 5349 	movw	r3, #50505	; 0xc549
    720a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    720e:	2200      	movs	r2, #0
    7210:	701a      	strb	r2, [r3, #0]
    7212:	f24c 5349 	movw	r3, #50505	; 0xc549
    7216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    721a:	781b      	ldrb	r3, [r3, #0]
    721c:	461a      	mov	r2, r3
    721e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7226:	7819      	ldrb	r1, [r3, #0]
    7228:	f24c 534c 	movw	r3, #50508	; 0xc54c
    722c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7230:	5499      	strb	r1, [r3, r2]
    7232:	f24c 5349 	movw	r3, #50505	; 0xc549
    7236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    723a:	781b      	ldrb	r3, [r3, #0]
    723c:	3301      	adds	r3, #1
    723e:	b2da      	uxtb	r2, r3
    7240:	f24c 5349 	movw	r3, #50505	; 0xc549
    7244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7248:	701a      	strb	r2, [r3, #0]
    724a:	f24c 5349 	movw	r3, #50505	; 0xc549
    724e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7252:	781b      	ldrb	r3, [r3, #0]
    7254:	2bff      	cmp	r3, #255	; 0xff
    7256:	d105      	bne.n	7264 <ground_calibrate+0x11e4>
    7258:	f24c 5349 	movw	r3, #50505	; 0xc549
    725c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7260:	2200      	movs	r2, #0
    7262:	701a      	strb	r2, [r3, #0]
    7264:	f242 0339 	movw	r3, #8249	; 0x2039
    7268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    726c:	781b      	ldrb	r3, [r3, #0]
    726e:	b2db      	uxtb	r3, r3
    7270:	f003 0310 	and.w	r3, r3, #16
    7274:	2b00      	cmp	r3, #0
    7276:	d15a      	bne.n	732e <ground_calibrate+0x12ae>
    7278:	f24c 534a 	movw	r3, #50506	; 0xc54a
    727c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7280:	781b      	ldrb	r3, [r3, #0]
    7282:	b2db      	uxtb	r3, r3
    7284:	461a      	mov	r2, r3
    7286:	f24c 534c 	movw	r3, #50508	; 0xc54c
    728a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    728e:	5c9a      	ldrb	r2, [r3, r2]
    7290:	f24c 634b 	movw	r3, #50763	; 0xc64b
    7294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7298:	701a      	strb	r2, [r3, #0]
    729a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    729e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a2:	2200      	movs	r2, #0
    72a4:	701a      	strb	r2, [r3, #0]
    72a6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    72aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	b2db      	uxtb	r3, r3
    72b2:	3301      	adds	r3, #1
    72b4:	b2da      	uxtb	r2, r3
    72b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    72ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72be:	701a      	strb	r2, [r3, #0]
    72c0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    72c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72c8:	781b      	ldrb	r3, [r3, #0]
    72ca:	b2db      	uxtb	r3, r3
    72cc:	2bff      	cmp	r3, #255	; 0xff
    72ce:	d105      	bne.n	72dc <ground_calibrate+0x125c>
    72d0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    72d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d8:	2200      	movs	r2, #0
    72da:	701a      	strb	r2, [r3, #0]
    72dc:	f242 0338 	movw	r3, #8248	; 0x2038
    72e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e4:	f242 0238 	movw	r2, #8248	; 0x2038
    72e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    72ec:	7812      	ldrb	r2, [r2, #0]
    72ee:	b2d2      	uxtb	r2, r2
    72f0:	f042 0201 	orr.w	r2, r2, #1
    72f4:	b2d2      	uxtb	r2, r2
    72f6:	701a      	strb	r2, [r3, #0]
    72f8:	f242 0339 	movw	r3, #8249	; 0x2039
    72fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7300:	f242 0239 	movw	r2, #8249	; 0x2039
    7304:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7308:	7812      	ldrb	r2, [r2, #0]
    730a:	b2d2      	uxtb	r2, r2
    730c:	f042 0210 	orr.w	r2, r2, #16
    7310:	b2d2      	uxtb	r2, r2
    7312:	701a      	strb	r2, [r3, #0]
    7314:	e00b      	b.n	732e <ground_calibrate+0x12ae>
    7316:	f24c 5348 	movw	r3, #50504	; 0xc548
    731a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    731e:	781b      	ldrb	r3, [r3, #0]
    7320:	3301      	adds	r3, #1
    7322:	b2da      	uxtb	r2, r3
    7324:	f24c 5348 	movw	r3, #50504	; 0xc548
    7328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    732c:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    732e:	bd80      	pop	{r7, pc}
    7330:	20000541 	.word	0x20000541

00007334 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    7334:	b480      	push	{r7}
    7336:	b083      	sub	sp, #12
    7338:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    733a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    733e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7342:	781b      	ldrb	r3, [r3, #0]
    7344:	2b03      	cmp	r3, #3
    7346:	d10c      	bne.n	7362 <pprz_mode_update+0x2e>
    7348:	f24c 5330 	movw	r3, #50480	; 0xc530
    734c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7350:	781b      	ldrb	r3, [r3, #0]
    7352:	2b00      	cmp	r3, #0
    7354:	d032      	beq.n	73bc <pprz_mode_update+0x88>
    7356:	f24c 5330 	movw	r3, #50480	; 0xc530
    735a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    735e:	2200      	movs	r2, #0
    7360:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    7362:	f24c 6350 	movw	r3, #50768	; 0xc650
    7366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    736a:	891b      	ldrh	r3, [r3, #8]
    736c:	b21b      	sxth	r3, r3
    736e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    7372:	dc0f      	bgt.n	7394 <pprz_mode_update+0x60>
    7374:	f24c 6350 	movw	r3, #50768	; 0xc650
    7378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    737c:	891b      	ldrh	r3, [r3, #8]
    737e:	b21a      	sxth	r2, r3
    7380:	f64e 5341 	movw	r3, #60737	; 0xed41
    7384:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7388:	429a      	cmp	r2, r3
    738a:	bfb4      	ite	lt
    738c:	2300      	movlt	r3, #0
    738e:	2301      	movge	r3, #1
    7390:	b2db      	uxtb	r3, r3
    7392:	e000      	b.n	7396 <pprz_mode_update+0x62>
    7394:	2302      	movs	r3, #2
    7396:	71fb      	strb	r3, [r7, #7]
    7398:	f24c 532c 	movw	r3, #50476	; 0xc52c
    739c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a0:	781b      	ldrb	r3, [r3, #0]
    73a2:	79fa      	ldrb	r2, [r7, #7]
    73a4:	429a      	cmp	r2, r3
    73a6:	d007      	beq.n	73b8 <pprz_mode_update+0x84>
    73a8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    73ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b0:	79fa      	ldrb	r2, [r7, #7]
    73b2:	701a      	strb	r2, [r3, #0]
    73b4:	2301      	movs	r3, #1
    73b6:	e002      	b.n	73be <pprz_mode_update+0x8a>
    73b8:	2300      	movs	r3, #0
    73ba:	e000      	b.n	73be <pprz_mode_update+0x8a>
  } else
    return FALSE;
    73bc:	2300      	movs	r3, #0
}
    73be:	4618      	mov	r0, r3
    73c0:	370c      	adds	r7, #12
    73c2:	46bd      	mov	sp, r7
    73c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73c8:	4770      	bx	lr
    73ca:	bf00      	nop

000073cc <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    73cc:	b480      	push	{r7}
    73ce:	b083      	sub	sp, #12
    73d0:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    73d2:	f24c 6350 	movw	r3, #50768	; 0xc650
    73d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73da:	89db      	ldrh	r3, [r3, #14]
    73dc:	b21a      	sxth	r2, r3
    73de:	f640 437f 	movw	r3, #3199	; 0xc7f
    73e2:	429a      	cmp	r2, r3
    73e4:	bfd4      	ite	le
    73e6:	2300      	movle	r3, #0
    73e8:	2301      	movgt	r3, #1
    73ea:	b2db      	uxtb	r3, r3
    73ec:	71fb      	strb	r3, [r7, #7]
    73ee:	f240 533c 	movw	r3, #1340	; 0x53c
    73f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73f6:	781b      	ldrb	r3, [r3, #0]
    73f8:	79fa      	ldrb	r2, [r7, #7]
    73fa:	429a      	cmp	r2, r3
    73fc:	d007      	beq.n	740e <ir_estim_mode_update+0x42>
    73fe:	f240 533c 	movw	r3, #1340	; 0x53c
    7402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7406:	79fa      	ldrb	r2, [r7, #7]
    7408:	701a      	strb	r2, [r3, #0]
    740a:	2301      	movs	r3, #1
    740c:	e000      	b.n	7410 <ir_estim_mode_update+0x44>
    740e:	2300      	movs	r3, #0
}
    7410:	4618      	mov	r0, r3
    7412:	370c      	adds	r7, #12
    7414:	46bd      	mov	sp, r7
    7416:	f85d 7b04 	ldr.w	r7, [sp], #4
    741a:	4770      	bx	lr

0000741c <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    741c:	b480      	push	{r7}
    741e:	b083      	sub	sp, #12
    7420:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    7422:	f24c 6350 	movw	r3, #50768	; 0xc650
    7426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    742a:	7cdb      	ldrb	r3, [r3, #19]
    742c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    742e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7436:	781b      	ldrb	r3, [r3, #0]
    7438:	79fa      	ldrb	r2, [r7, #7]
    743a:	429a      	cmp	r2, r3
    743c:	d017      	beq.n	746e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    743e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7446:	781b      	ldrb	r3, [r3, #0]
    7448:	461a      	mov	r2, r3
    744a:	79fb      	ldrb	r3, [r7, #7]
    744c:	4053      	eors	r3, r2
    744e:	f003 0303 	and.w	r3, r3, #3
    7452:	2b00      	cmp	r3, #0
    7454:	bf0c      	ite	eq
    7456:	2300      	moveq	r3, #0
    7458:	2301      	movne	r3, #1
    745a:	b2db      	uxtb	r3, r3
    745c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    745e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7466:	79fa      	ldrb	r2, [r7, #7]
    7468:	701a      	strb	r2, [r3, #0]
    return changed;
    746a:	79bb      	ldrb	r3, [r7, #6]
    746c:	e000      	b.n	7470 <mcu1_status_update+0x54>
  }
  return FALSE;
    746e:	2300      	movs	r3, #0
}
    7470:	4618      	mov	r0, r3
    7472:	370c      	adds	r7, #12
    7474:	46bd      	mov	sp, r7
    7476:	f85d 7b04 	ldr.w	r7, [sp], #4
    747a:	4770      	bx	lr

0000747c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    747c:	b480      	push	{r7}
    747e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7480:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    7484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7488:	781b      	ldrb	r3, [r3, #0]
    748a:	2b00      	cmp	r3, #0
    748c:	d12a      	bne.n	74e4 <events_update+0x68>
    748e:	f24c 6350 	movw	r3, #50768	; 0xc650
    7492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7496:	895b      	ldrh	r3, [r3, #10]
    7498:	b21b      	sxth	r3, r3
    749a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    749e:	dd21      	ble.n	74e4 <events_update+0x68>
    74a0:	f24c 5344 	movw	r3, #50500	; 0xc544
    74a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a8:	881b      	ldrh	r3, [r3, #0]
    74aa:	2b13      	cmp	r3, #19
    74ac:	d819      	bhi.n	74e2 <events_update+0x66>
    74ae:	f24c 5344 	movw	r3, #50500	; 0xc544
    74b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b6:	881b      	ldrh	r3, [r3, #0]
    74b8:	3301      	adds	r3, #1
    74ba:	b29a      	uxth	r2, r3
    74bc:	f24c 5344 	movw	r3, #50500	; 0xc544
    74c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c4:	801a      	strh	r2, [r3, #0]
    74c6:	f24c 5344 	movw	r3, #50500	; 0xc544
    74ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ce:	881b      	ldrh	r3, [r3, #0]
    74d0:	2b14      	cmp	r3, #20
    74d2:	d106      	bne.n	74e2 <events_update+0x66>
    74d4:	f24c 5330 	movw	r3, #50480	; 0xc530
    74d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74dc:	2201      	movs	r2, #1
    74de:	701a      	strb	r2, [r3, #0]
    74e0:	e00c      	b.n	74fc <events_update+0x80>
    74e2:	e00b      	b.n	74fc <events_update+0x80>
    74e4:	f24c 5344 	movw	r3, #50500	; 0xc544
    74e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ec:	2200      	movs	r2, #0
    74ee:	801a      	strh	r2, [r3, #0]
    74f0:	f24c 5330 	movw	r3, #50480	; 0xc530
    74f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f8:	2200      	movs	r2, #0
    74fa:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    74fc:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    7500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	2b00      	cmp	r3, #0
    7508:	d12a      	bne.n	7560 <events_update+0xe4>
    750a:	f24c 6350 	movw	r3, #50768	; 0xc650
    750e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7512:	895b      	ldrh	r3, [r3, #10]
    7514:	b21b      	sxth	r3, r3
    7516:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    751a:	da21      	bge.n	7560 <events_update+0xe4>
    751c:	f24c 5346 	movw	r3, #50502	; 0xc546
    7520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7524:	881b      	ldrh	r3, [r3, #0]
    7526:	2b13      	cmp	r3, #19
    7528:	d819      	bhi.n	755e <events_update+0xe2>
    752a:	f24c 5346 	movw	r3, #50502	; 0xc546
    752e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7532:	881b      	ldrh	r3, [r3, #0]
    7534:	3301      	adds	r3, #1
    7536:	b29a      	uxth	r2, r3
    7538:	f24c 5346 	movw	r3, #50502	; 0xc546
    753c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7540:	801a      	strh	r2, [r3, #0]
    7542:	f24c 5346 	movw	r3, #50502	; 0xc546
    7546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754a:	881b      	ldrh	r3, [r3, #0]
    754c:	2b14      	cmp	r3, #20
    754e:	d106      	bne.n	755e <events_update+0xe2>
    7550:	f24c 5331 	movw	r3, #50481	; 0xc531
    7554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7558:	2201      	movs	r2, #1
    755a:	701a      	strb	r2, [r3, #0]
    755c:	e00c      	b.n	7578 <events_update+0xfc>
    755e:	e00b      	b.n	7578 <events_update+0xfc>
    7560:	f24c 5346 	movw	r3, #50502	; 0xc546
    7564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7568:	2200      	movs	r2, #0
    756a:	801a      	strh	r2, [r3, #0]
    756c:	f24c 5331 	movw	r3, #50481	; 0xc531
    7570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7574:	2200      	movs	r2, #0
    7576:	701a      	strb	r2, [r3, #0]
}  
    7578:	46bd      	mov	sp, r7
    757a:	f85d 7b04 	ldr.w	r7, [sp], #4
    757e:	4770      	bx	lr

00007580 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7580:	b480      	push	{r7}
    7582:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    7584:	f24c 6350 	movw	r3, #50768	; 0xc650
    7588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    758c:	88da      	ldrh	r2, [r3, #6]
    758e:	f24c 6368 	movw	r3, #50792	; 0xc668
    7592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7596:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7598:	f24c 6368 	movw	r3, #50792	; 0xc668
    759c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a0:	2200      	movs	r2, #0
    75a2:	74da      	strb	r2, [r3, #19]
}
    75a4:	46bd      	mov	sp, r7
    75a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    75aa:	4770      	bx	lr

000075ac <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    75ac:	b480      	push	{r7}
    75ae:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  if (boot) 
    75b0:	f240 533d 	movw	r3, #1341	; 0x53d
    75b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75b8:	781b      	ldrb	r3, [r3, #0]
    75ba:	2b00      	cmp	r3, #0
    75bc:	f000 87c6 	beq.w	854c <send_boot+0xfa0>
  {
      DOWNLINK_SEND_BOOT(&version);
    75c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    75c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c8:	781a      	ldrb	r2, [r3, #0]
    75ca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    75ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d2:	781b      	ldrb	r3, [r3, #0]
    75d4:	b2db      	uxtb	r3, r3
    75d6:	429a      	cmp	r2, r3
    75d8:	d313      	bcc.n	7602 <send_boot+0x56>
    75da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    75de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e2:	781b      	ldrb	r3, [r3, #0]
    75e4:	b2db      	uxtb	r3, r3
    75e6:	461a      	mov	r2, r3
    75e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    75ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f0:	781b      	ldrb	r3, [r3, #0]
    75f2:	1ad3      	subs	r3, r2, r3
    75f4:	33ff      	adds	r3, #255	; 0xff
    75f6:	2b06      	cmp	r3, #6
    75f8:	bfd4      	ite	le
    75fa:	2300      	movle	r3, #0
    75fc:	2301      	movgt	r3, #1
    75fe:	b2db      	uxtb	r3, r3
    7600:	e011      	b.n	7626 <send_boot+0x7a>
    7602:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    760a:	781b      	ldrb	r3, [r3, #0]
    760c:	b2db      	uxtb	r3, r3
    760e:	461a      	mov	r2, r3
    7610:	f24c 5349 	movw	r3, #50505	; 0xc549
    7614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7618:	781b      	ldrb	r3, [r3, #0]
    761a:	1ad3      	subs	r3, r2, r3
    761c:	2b06      	cmp	r3, #6
    761e:	bfd4      	ite	le
    7620:	2300      	movle	r3, #0
    7622:	2301      	movgt	r3, #1
    7624:	b2db      	uxtb	r3, r3
    7626:	2b00      	cmp	r3, #0
    7628:	f000 8194 	beq.w	7954 <send_boot+0x3a8>
    762c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7634:	781b      	ldrb	r3, [r3, #0]
    7636:	461a      	mov	r2, r3
    7638:	f24c 534c 	movw	r3, #50508	; 0xc54c
    763c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7640:	2105      	movs	r1, #5
    7642:	5499      	strb	r1, [r3, r2]
    7644:	f24c 5349 	movw	r3, #50505	; 0xc549
    7648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764c:	781b      	ldrb	r3, [r3, #0]
    764e:	3301      	adds	r3, #1
    7650:	b2da      	uxtb	r2, r3
    7652:	f24c 5349 	movw	r3, #50505	; 0xc549
    7656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765a:	701a      	strb	r2, [r3, #0]
    765c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7664:	781b      	ldrb	r3, [r3, #0]
    7666:	2bff      	cmp	r3, #255	; 0xff
    7668:	d105      	bne.n	7676 <send_boot+0xca>
    766a:	f24c 5349 	movw	r3, #50505	; 0xc549
    766e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7672:	2200      	movs	r2, #0
    7674:	701a      	strb	r2, [r3, #0]
    7676:	f24c 5349 	movw	r3, #50505	; 0xc549
    767a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    767e:	781b      	ldrb	r3, [r3, #0]
    7680:	461a      	mov	r2, r3
    7682:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    768a:	2101      	movs	r1, #1
    768c:	5499      	strb	r1, [r3, r2]
    768e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7696:	781b      	ldrb	r3, [r3, #0]
    7698:	3301      	adds	r3, #1
    769a:	b2da      	uxtb	r2, r3
    769c:	f24c 5349 	movw	r3, #50505	; 0xc549
    76a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a4:	701a      	strb	r2, [r3, #0]
    76a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    76aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ae:	781b      	ldrb	r3, [r3, #0]
    76b0:	2bff      	cmp	r3, #255	; 0xff
    76b2:	d105      	bne.n	76c0 <send_boot+0x114>
    76b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    76b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76bc:	2200      	movs	r2, #0
    76be:	701a      	strb	r2, [r3, #0]
    76c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    76c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c8:	2201      	movs	r2, #1
    76ca:	701a      	strb	r2, [r3, #0]
    76cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    76d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d4:	2201      	movs	r2, #1
    76d6:	701a      	strb	r2, [r3, #0]
    76d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    76dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e0:	781b      	ldrb	r3, [r3, #0]
    76e2:	461a      	mov	r2, r3
    76e4:	f648 23c2 	movw	r3, #35522	; 0x8ac2
    76e8:	f2c0 0301 	movt	r3, #1
    76ec:	7819      	ldrb	r1, [r3, #0]
    76ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    76f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f6:	5499      	strb	r1, [r3, r2]
    76f8:	f648 23c2 	movw	r3, #35522	; 0x8ac2
    76fc:	f2c0 0301 	movt	r3, #1
    7700:	781a      	ldrb	r2, [r3, #0]
    7702:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770a:	781b      	ldrb	r3, [r3, #0]
    770c:	4413      	add	r3, r2
    770e:	b2da      	uxtb	r2, r3
    7710:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7718:	701a      	strb	r2, [r3, #0]
    771a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    771e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7722:	781a      	ldrb	r2, [r3, #0]
    7724:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    772c:	781b      	ldrb	r3, [r3, #0]
    772e:	4413      	add	r3, r2
    7730:	b2da      	uxtb	r2, r3
    7732:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    773a:	701a      	strb	r2, [r3, #0]
    773c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7744:	781b      	ldrb	r3, [r3, #0]
    7746:	3301      	adds	r3, #1
    7748:	b2da      	uxtb	r2, r3
    774a:	f24c 5349 	movw	r3, #50505	; 0xc549
    774e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7752:	701a      	strb	r2, [r3, #0]
    7754:	f24c 5349 	movw	r3, #50505	; 0xc549
    7758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    775c:	781b      	ldrb	r3, [r3, #0]
    775e:	2bff      	cmp	r3, #255	; 0xff
    7760:	d105      	bne.n	776e <send_boot+0x1c2>
    7762:	f24c 5349 	movw	r3, #50505	; 0xc549
    7766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    776a:	2200      	movs	r2, #0
    776c:	701a      	strb	r2, [r3, #0]
    776e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7776:	781b      	ldrb	r3, [r3, #0]
    7778:	461a      	mov	r2, r3
    777a:	f648 23c2 	movw	r3, #35522	; 0x8ac2
    777e:	f2c0 0301 	movt	r3, #1
    7782:	7859      	ldrb	r1, [r3, #1]
    7784:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    778c:	5499      	strb	r1, [r3, r2]
    778e:	4b88      	ldr	r3, [pc, #544]	; (79b0 <send_boot+0x404>)
    7790:	781a      	ldrb	r2, [r3, #0]
    7792:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    779a:	781b      	ldrb	r3, [r3, #0]
    779c:	4413      	add	r3, r2
    779e:	b2da      	uxtb	r2, r3
    77a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    77a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a8:	701a      	strb	r2, [r3, #0]
    77aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    77ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b2:	781a      	ldrb	r2, [r3, #0]
    77b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    77b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77bc:	781b      	ldrb	r3, [r3, #0]
    77be:	4413      	add	r3, r2
    77c0:	b2da      	uxtb	r2, r3
    77c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    77c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ca:	701a      	strb	r2, [r3, #0]
    77cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    77d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d4:	781b      	ldrb	r3, [r3, #0]
    77d6:	3301      	adds	r3, #1
    77d8:	b2da      	uxtb	r2, r3
    77da:	f24c 5349 	movw	r3, #50505	; 0xc549
    77de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e2:	701a      	strb	r2, [r3, #0]
    77e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    77e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ec:	781b      	ldrb	r3, [r3, #0]
    77ee:	2bff      	cmp	r3, #255	; 0xff
    77f0:	d105      	bne.n	77fe <send_boot+0x252>
    77f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    77f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fa:	2200      	movs	r2, #0
    77fc:	701a      	strb	r2, [r3, #0]
    77fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7806:	781b      	ldrb	r3, [r3, #0]
    7808:	461a      	mov	r2, r3
    780a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    780e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7812:	7819      	ldrb	r1, [r3, #0]
    7814:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    781c:	5499      	strb	r1, [r3, r2]
    781e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7826:	781b      	ldrb	r3, [r3, #0]
    7828:	3301      	adds	r3, #1
    782a:	b2da      	uxtb	r2, r3
    782c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7834:	701a      	strb	r2, [r3, #0]
    7836:	f24c 5349 	movw	r3, #50505	; 0xc549
    783a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783e:	781b      	ldrb	r3, [r3, #0]
    7840:	2bff      	cmp	r3, #255	; 0xff
    7842:	d105      	bne.n	7850 <send_boot+0x2a4>
    7844:	f24c 5349 	movw	r3, #50505	; 0xc549
    7848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    784c:	2200      	movs	r2, #0
    784e:	701a      	strb	r2, [r3, #0]
    7850:	f24c 5349 	movw	r3, #50505	; 0xc549
    7854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7858:	781b      	ldrb	r3, [r3, #0]
    785a:	461a      	mov	r2, r3
    785c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7864:	7819      	ldrb	r1, [r3, #0]
    7866:	f24c 534c 	movw	r3, #50508	; 0xc54c
    786a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    786e:	5499      	strb	r1, [r3, r2]
    7870:	f24c 5349 	movw	r3, #50505	; 0xc549
    7874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7878:	781b      	ldrb	r3, [r3, #0]
    787a:	3301      	adds	r3, #1
    787c:	b2da      	uxtb	r2, r3
    787e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7886:	701a      	strb	r2, [r3, #0]
    7888:	f24c 5349 	movw	r3, #50505	; 0xc549
    788c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7890:	781b      	ldrb	r3, [r3, #0]
    7892:	2bff      	cmp	r3, #255	; 0xff
    7894:	d105      	bne.n	78a2 <send_boot+0x2f6>
    7896:	f24c 5349 	movw	r3, #50505	; 0xc549
    789a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    789e:	2200      	movs	r2, #0
    78a0:	701a      	strb	r2, [r3, #0]
    78a2:	f242 0339 	movw	r3, #8249	; 0x2039
    78a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78aa:	781b      	ldrb	r3, [r3, #0]
    78ac:	b2db      	uxtb	r3, r3
    78ae:	f003 0310 	and.w	r3, r3, #16
    78b2:	2b00      	cmp	r3, #0
    78b4:	d15a      	bne.n	796c <send_boot+0x3c0>
    78b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78be:	781b      	ldrb	r3, [r3, #0]
    78c0:	b2db      	uxtb	r3, r3
    78c2:	461a      	mov	r2, r3
    78c4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    78c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78cc:	5c9a      	ldrb	r2, [r3, r2]
    78ce:	f24c 634b 	movw	r3, #50763	; 0xc64b
    78d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d6:	701a      	strb	r2, [r3, #0]
    78d8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    78dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e0:	2200      	movs	r2, #0
    78e2:	701a      	strb	r2, [r3, #0]
    78e4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ec:	781b      	ldrb	r3, [r3, #0]
    78ee:	b2db      	uxtb	r3, r3
    78f0:	3301      	adds	r3, #1
    78f2:	b2da      	uxtb	r2, r3
    78f4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78fc:	701a      	strb	r2, [r3, #0]
    78fe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7906:	781b      	ldrb	r3, [r3, #0]
    7908:	b2db      	uxtb	r3, r3
    790a:	2bff      	cmp	r3, #255	; 0xff
    790c:	d105      	bne.n	791a <send_boot+0x36e>
    790e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7916:	2200      	movs	r2, #0
    7918:	701a      	strb	r2, [r3, #0]
    791a:	f242 0338 	movw	r3, #8248	; 0x2038
    791e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7922:	f242 0238 	movw	r2, #8248	; 0x2038
    7926:	f2c2 0200 	movt	r2, #8192	; 0x2000
    792a:	7812      	ldrb	r2, [r2, #0]
    792c:	b2d2      	uxtb	r2, r2
    792e:	f042 0201 	orr.w	r2, r2, #1
    7932:	b2d2      	uxtb	r2, r2
    7934:	701a      	strb	r2, [r3, #0]
    7936:	f242 0339 	movw	r3, #8249	; 0x2039
    793a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    793e:	f242 0239 	movw	r2, #8249	; 0x2039
    7942:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7946:	7812      	ldrb	r2, [r2, #0]
    7948:	b2d2      	uxtb	r2, r2
    794a:	f042 0210 	orr.w	r2, r2, #16
    794e:	b2d2      	uxtb	r2, r2
    7950:	701a      	strb	r2, [r3, #0]
    7952:	e00b      	b.n	796c <send_boot+0x3c0>
    7954:	f24c 5348 	movw	r3, #50504	; 0xc548
    7958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    795c:	781b      	ldrb	r3, [r3, #0]
    795e:	3301      	adds	r3, #1
    7960:	b2da      	uxtb	r2, r3
    7962:	f24c 5348 	movw	r3, #50504	; 0xc548
    7966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    796a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    796c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7974:	781a      	ldrb	r2, [r3, #0]
    7976:	f24c 534a 	movw	r3, #50506	; 0xc54a
    797a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797e:	781b      	ldrb	r3, [r3, #0]
    7980:	b2db      	uxtb	r3, r3
    7982:	429a      	cmp	r2, r3
    7984:	d316      	bcc.n	79b4 <send_boot+0x408>
    7986:	f24c 534a 	movw	r3, #50506	; 0xc54a
    798a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    798e:	781b      	ldrb	r3, [r3, #0]
    7990:	b2db      	uxtb	r3, r3
    7992:	461a      	mov	r2, r3
    7994:	f24c 5349 	movw	r3, #50505	; 0xc549
    7998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799c:	781b      	ldrb	r3, [r3, #0]
    799e:	1ad3      	subs	r3, r2, r3
    79a0:	33ff      	adds	r3, #255	; 0xff
    79a2:	2b14      	cmp	r3, #20
    79a4:	bfd4      	ite	le
    79a6:	2300      	movle	r3, #0
    79a8:	2301      	movgt	r3, #1
    79aa:	b2db      	uxtb	r3, r3
    79ac:	e014      	b.n	79d8 <send_boot+0x42c>
    79ae:	bf00      	nop
    79b0:	00018ac3 	.word	0x00018ac3
    79b4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    79b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79bc:	781b      	ldrb	r3, [r3, #0]
    79be:	b2db      	uxtb	r3, r3
    79c0:	461a      	mov	r2, r3
    79c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    79c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ca:	781b      	ldrb	r3, [r3, #0]
    79cc:	1ad3      	subs	r3, r2, r3
    79ce:	2b14      	cmp	r3, #20
    79d0:	bfd4      	ite	le
    79d2:	2300      	movle	r3, #0
    79d4:	2301      	movgt	r3, #1
    79d6:	b2db      	uxtb	r3, r3
    79d8:	2b00      	cmp	r3, #0
    79da:	f000 85a5 	beq.w	8528 <send_boot+0xf7c>
    79de:	f24c 5349 	movw	r3, #50505	; 0xc549
    79e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e6:	781b      	ldrb	r3, [r3, #0]
    79e8:	461a      	mov	r2, r3
    79ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    79ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f2:	2105      	movs	r1, #5
    79f4:	5499      	strb	r1, [r3, r2]
    79f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    79fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79fe:	781b      	ldrb	r3, [r3, #0]
    7a00:	3301      	adds	r3, #1
    7a02:	b2da      	uxtb	r2, r3
    7a04:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0c:	701a      	strb	r2, [r3, #0]
    7a0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a16:	781b      	ldrb	r3, [r3, #0]
    7a18:	2bff      	cmp	r3, #255	; 0xff
    7a1a:	d105      	bne.n	7a28 <send_boot+0x47c>
    7a1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a24:	2200      	movs	r2, #0
    7a26:	701a      	strb	r2, [r3, #0]
    7a28:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a30:	781b      	ldrb	r3, [r3, #0]
    7a32:	461a      	mov	r2, r3
    7a34:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a3c:	2105      	movs	r1, #5
    7a3e:	5499      	strb	r1, [r3, r2]
    7a40:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a48:	781b      	ldrb	r3, [r3, #0]
    7a4a:	3301      	adds	r3, #1
    7a4c:	b2da      	uxtb	r2, r3
    7a4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a56:	701a      	strb	r2, [r3, #0]
    7a58:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a60:	781b      	ldrb	r3, [r3, #0]
    7a62:	2bff      	cmp	r3, #255	; 0xff
    7a64:	d105      	bne.n	7a72 <send_boot+0x4c6>
    7a66:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6e:	2200      	movs	r2, #0
    7a70:	701a      	strb	r2, [r3, #0]
    7a72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7a:	2205      	movs	r2, #5
    7a7c:	701a      	strb	r2, [r3, #0]
    7a7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a86:	2205      	movs	r2, #5
    7a88:	701a      	strb	r2, [r3, #0]
    7a8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a92:	781b      	ldrb	r3, [r3, #0]
    7a94:	461a      	mov	r2, r3
    7a96:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a9e:	7819      	ldrb	r1, [r3, #0]
    7aa0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa8:	5499      	strb	r1, [r3, r2]
    7aaa:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab2:	781a      	ldrb	r2, [r3, #0]
    7ab4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7abc:	781b      	ldrb	r3, [r3, #0]
    7abe:	4413      	add	r3, r2
    7ac0:	b2da      	uxtb	r2, r3
    7ac2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aca:	701a      	strb	r2, [r3, #0]
    7acc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad4:	781a      	ldrb	r2, [r3, #0]
    7ad6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ade:	781b      	ldrb	r3, [r3, #0]
    7ae0:	4413      	add	r3, r2
    7ae2:	b2da      	uxtb	r2, r3
    7ae4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aec:	701a      	strb	r2, [r3, #0]
    7aee:	f24c 5349 	movw	r3, #50505	; 0xc549
    7af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af6:	781b      	ldrb	r3, [r3, #0]
    7af8:	3301      	adds	r3, #1
    7afa:	b2da      	uxtb	r2, r3
    7afc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b04:	701a      	strb	r2, [r3, #0]
    7b06:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0e:	781b      	ldrb	r3, [r3, #0]
    7b10:	2bff      	cmp	r3, #255	; 0xff
    7b12:	d105      	bne.n	7b20 <send_boot+0x574>
    7b14:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b1c:	2200      	movs	r2, #0
    7b1e:	701a      	strb	r2, [r3, #0]
    7b20:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b28:	781b      	ldrb	r3, [r3, #0]
    7b2a:	461a      	mov	r2, r3
    7b2c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b34:	7859      	ldrb	r1, [r3, #1]
    7b36:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3e:	5499      	strb	r1, [r3, r2]
    7b40:	4bd1      	ldr	r3, [pc, #836]	; (7e88 <send_boot+0x8dc>)
    7b42:	781a      	ldrb	r2, [r3, #0]
    7b44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b4c:	781b      	ldrb	r3, [r3, #0]
    7b4e:	4413      	add	r3, r2
    7b50:	b2da      	uxtb	r2, r3
    7b52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5a:	701a      	strb	r2, [r3, #0]
    7b5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b64:	781a      	ldrb	r2, [r3, #0]
    7b66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6e:	781b      	ldrb	r3, [r3, #0]
    7b70:	4413      	add	r3, r2
    7b72:	b2da      	uxtb	r2, r3
    7b74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b7c:	701a      	strb	r2, [r3, #0]
    7b7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b86:	781b      	ldrb	r3, [r3, #0]
    7b88:	3301      	adds	r3, #1
    7b8a:	b2da      	uxtb	r2, r3
    7b8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b94:	701a      	strb	r2, [r3, #0]
    7b96:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9e:	781b      	ldrb	r3, [r3, #0]
    7ba0:	2bff      	cmp	r3, #255	; 0xff
    7ba2:	d105      	bne.n	7bb0 <send_boot+0x604>
    7ba4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bac:	2200      	movs	r2, #0
    7bae:	701a      	strb	r2, [r3, #0]
    7bb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb8:	781b      	ldrb	r3, [r3, #0]
    7bba:	461a      	mov	r2, r3
    7bbc:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc4:	7899      	ldrb	r1, [r3, #2]
    7bc6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bce:	5499      	strb	r1, [r3, r2]
    7bd0:	4bae      	ldr	r3, [pc, #696]	; (7e8c <send_boot+0x8e0>)
    7bd2:	781a      	ldrb	r2, [r3, #0]
    7bd4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bdc:	781b      	ldrb	r3, [r3, #0]
    7bde:	4413      	add	r3, r2
    7be0:	b2da      	uxtb	r2, r3
    7be2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bea:	701a      	strb	r2, [r3, #0]
    7bec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf4:	781a      	ldrb	r2, [r3, #0]
    7bf6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfe:	781b      	ldrb	r3, [r3, #0]
    7c00:	4413      	add	r3, r2
    7c02:	b2da      	uxtb	r2, r3
    7c04:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0c:	701a      	strb	r2, [r3, #0]
    7c0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c16:	781b      	ldrb	r3, [r3, #0]
    7c18:	3301      	adds	r3, #1
    7c1a:	b2da      	uxtb	r2, r3
    7c1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c24:	701a      	strb	r2, [r3, #0]
    7c26:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2e:	781b      	ldrb	r3, [r3, #0]
    7c30:	2bff      	cmp	r3, #255	; 0xff
    7c32:	d105      	bne.n	7c40 <send_boot+0x694>
    7c34:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3c:	2200      	movs	r2, #0
    7c3e:	701a      	strb	r2, [r3, #0]
    7c40:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c48:	781b      	ldrb	r3, [r3, #0]
    7c4a:	461a      	mov	r2, r3
    7c4c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c54:	78d9      	ldrb	r1, [r3, #3]
    7c56:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5e:	5499      	strb	r1, [r3, r2]
    7c60:	4b8b      	ldr	r3, [pc, #556]	; (7e90 <send_boot+0x8e4>)
    7c62:	781a      	ldrb	r2, [r3, #0]
    7c64:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6c:	781b      	ldrb	r3, [r3, #0]
    7c6e:	4413      	add	r3, r2
    7c70:	b2da      	uxtb	r2, r3
    7c72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7a:	701a      	strb	r2, [r3, #0]
    7c7c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c84:	781a      	ldrb	r2, [r3, #0]
    7c86:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8e:	781b      	ldrb	r3, [r3, #0]
    7c90:	4413      	add	r3, r2
    7c92:	b2da      	uxtb	r2, r3
    7c94:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c9c:	701a      	strb	r2, [r3, #0]
    7c9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca6:	781b      	ldrb	r3, [r3, #0]
    7ca8:	3301      	adds	r3, #1
    7caa:	b2da      	uxtb	r2, r3
    7cac:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb4:	701a      	strb	r2, [r3, #0]
    7cb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cbe:	781b      	ldrb	r3, [r3, #0]
    7cc0:	2bff      	cmp	r3, #255	; 0xff
    7cc2:	d105      	bne.n	7cd0 <send_boot+0x724>
    7cc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ccc:	2200      	movs	r2, #0
    7cce:	701a      	strb	r2, [r3, #0]
    7cd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd8:	781b      	ldrb	r3, [r3, #0]
    7cda:	461a      	mov	r2, r3
    7cdc:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce4:	7819      	ldrb	r1, [r3, #0]
    7ce6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cee:	5499      	strb	r1, [r3, r2]
    7cf0:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf8:	781a      	ldrb	r2, [r3, #0]
    7cfa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d02:	781b      	ldrb	r3, [r3, #0]
    7d04:	4413      	add	r3, r2
    7d06:	b2da      	uxtb	r2, r3
    7d08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d10:	701a      	strb	r2, [r3, #0]
    7d12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d1a:	781a      	ldrb	r2, [r3, #0]
    7d1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d24:	781b      	ldrb	r3, [r3, #0]
    7d26:	4413      	add	r3, r2
    7d28:	b2da      	uxtb	r2, r3
    7d2a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d32:	701a      	strb	r2, [r3, #0]
    7d34:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3c:	781b      	ldrb	r3, [r3, #0]
    7d3e:	3301      	adds	r3, #1
    7d40:	b2da      	uxtb	r2, r3
    7d42:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d4a:	701a      	strb	r2, [r3, #0]
    7d4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d54:	781b      	ldrb	r3, [r3, #0]
    7d56:	2bff      	cmp	r3, #255	; 0xff
    7d58:	d105      	bne.n	7d66 <send_boot+0x7ba>
    7d5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d62:	2200      	movs	r2, #0
    7d64:	701a      	strb	r2, [r3, #0]
    7d66:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d6e:	781b      	ldrb	r3, [r3, #0]
    7d70:	461a      	mov	r2, r3
    7d72:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7a:	7859      	ldrb	r1, [r3, #1]
    7d7c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d84:	5499      	strb	r1, [r3, r2]
    7d86:	4b43      	ldr	r3, [pc, #268]	; (7e94 <send_boot+0x8e8>)
    7d88:	781a      	ldrb	r2, [r3, #0]
    7d8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d92:	781b      	ldrb	r3, [r3, #0]
    7d94:	4413      	add	r3, r2
    7d96:	b2da      	uxtb	r2, r3
    7d98:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da0:	701a      	strb	r2, [r3, #0]
    7da2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7daa:	781a      	ldrb	r2, [r3, #0]
    7dac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db4:	781b      	ldrb	r3, [r3, #0]
    7db6:	4413      	add	r3, r2
    7db8:	b2da      	uxtb	r2, r3
    7dba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc2:	701a      	strb	r2, [r3, #0]
    7dc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dcc:	781b      	ldrb	r3, [r3, #0]
    7dce:	3301      	adds	r3, #1
    7dd0:	b2da      	uxtb	r2, r3
    7dd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dda:	701a      	strb	r2, [r3, #0]
    7ddc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de4:	781b      	ldrb	r3, [r3, #0]
    7de6:	2bff      	cmp	r3, #255	; 0xff
    7de8:	d105      	bne.n	7df6 <send_boot+0x84a>
    7dea:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df2:	2200      	movs	r2, #0
    7df4:	701a      	strb	r2, [r3, #0]
    7df6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dfe:	781b      	ldrb	r3, [r3, #0]
    7e00:	461a      	mov	r2, r3
    7e02:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e0a:	7899      	ldrb	r1, [r3, #2]
    7e0c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e14:	5499      	strb	r1, [r3, r2]
    7e16:	4b20      	ldr	r3, [pc, #128]	; (7e98 <send_boot+0x8ec>)
    7e18:	781a      	ldrb	r2, [r3, #0]
    7e1a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e22:	781b      	ldrb	r3, [r3, #0]
    7e24:	4413      	add	r3, r2
    7e26:	b2da      	uxtb	r2, r3
    7e28:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e30:	701a      	strb	r2, [r3, #0]
    7e32:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e3a:	781a      	ldrb	r2, [r3, #0]
    7e3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e44:	781b      	ldrb	r3, [r3, #0]
    7e46:	4413      	add	r3, r2
    7e48:	b2da      	uxtb	r2, r3
    7e4a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e52:	701a      	strb	r2, [r3, #0]
    7e54:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5c:	781b      	ldrb	r3, [r3, #0]
    7e5e:	3301      	adds	r3, #1
    7e60:	b2da      	uxtb	r2, r3
    7e62:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e6a:	701a      	strb	r2, [r3, #0]
    7e6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e74:	781b      	ldrb	r3, [r3, #0]
    7e76:	2bff      	cmp	r3, #255	; 0xff
    7e78:	d110      	bne.n	7e9c <send_boot+0x8f0>
    7e7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e82:	2200      	movs	r2, #0
    7e84:	701a      	strb	r2, [r3, #0]
    7e86:	e009      	b.n	7e9c <send_boot+0x8f0>
    7e88:	2004cb41 	.word	0x2004cb41
    7e8c:	2004cb42 	.word	0x2004cb42
    7e90:	2004cb43 	.word	0x2004cb43
    7e94:	2004cb45 	.word	0x2004cb45
    7e98:	2004cb46 	.word	0x2004cb46
    7e9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea4:	781b      	ldrb	r3, [r3, #0]
    7ea6:	461a      	mov	r2, r3
    7ea8:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb0:	78d9      	ldrb	r1, [r3, #3]
    7eb2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eba:	5499      	strb	r1, [r3, r2]
    7ebc:	4bd3      	ldr	r3, [pc, #844]	; (820c <send_boot+0xc60>)
    7ebe:	781a      	ldrb	r2, [r3, #0]
    7ec0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec8:	781b      	ldrb	r3, [r3, #0]
    7eca:	4413      	add	r3, r2
    7ecc:	b2da      	uxtb	r2, r3
    7ece:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed6:	701a      	strb	r2, [r3, #0]
    7ed8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee0:	781a      	ldrb	r2, [r3, #0]
    7ee2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eea:	781b      	ldrb	r3, [r3, #0]
    7eec:	4413      	add	r3, r2
    7eee:	b2da      	uxtb	r2, r3
    7ef0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef8:	701a      	strb	r2, [r3, #0]
    7efa:	f24c 5349 	movw	r3, #50505	; 0xc549
    7efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f02:	781b      	ldrb	r3, [r3, #0]
    7f04:	3301      	adds	r3, #1
    7f06:	b2da      	uxtb	r2, r3
    7f08:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f10:	701a      	strb	r2, [r3, #0]
    7f12:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f1a:	781b      	ldrb	r3, [r3, #0]
    7f1c:	2bff      	cmp	r3, #255	; 0xff
    7f1e:	d105      	bne.n	7f2c <send_boot+0x980>
    7f20:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f28:	2200      	movs	r2, #0
    7f2a:	701a      	strb	r2, [r3, #0]
    7f2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f34:	781b      	ldrb	r3, [r3, #0]
    7f36:	461a      	mov	r2, r3
    7f38:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f40:	7819      	ldrb	r1, [r3, #0]
    7f42:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f4a:	5499      	strb	r1, [r3, r2]
    7f4c:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f54:	781a      	ldrb	r2, [r3, #0]
    7f56:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f5e:	781b      	ldrb	r3, [r3, #0]
    7f60:	4413      	add	r3, r2
    7f62:	b2da      	uxtb	r2, r3
    7f64:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f6c:	701a      	strb	r2, [r3, #0]
    7f6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f76:	781a      	ldrb	r2, [r3, #0]
    7f78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f80:	781b      	ldrb	r3, [r3, #0]
    7f82:	4413      	add	r3, r2
    7f84:	b2da      	uxtb	r2, r3
    7f86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f8e:	701a      	strb	r2, [r3, #0]
    7f90:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f98:	781b      	ldrb	r3, [r3, #0]
    7f9a:	3301      	adds	r3, #1
    7f9c:	b2da      	uxtb	r2, r3
    7f9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa6:	701a      	strb	r2, [r3, #0]
    7fa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb0:	781b      	ldrb	r3, [r3, #0]
    7fb2:	2bff      	cmp	r3, #255	; 0xff
    7fb4:	d105      	bne.n	7fc2 <send_boot+0xa16>
    7fb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fbe:	2200      	movs	r2, #0
    7fc0:	701a      	strb	r2, [r3, #0]
    7fc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fca:	781b      	ldrb	r3, [r3, #0]
    7fcc:	461a      	mov	r2, r3
    7fce:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd6:	7859      	ldrb	r1, [r3, #1]
    7fd8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe0:	5499      	strb	r1, [r3, r2]
    7fe2:	4b8b      	ldr	r3, [pc, #556]	; (8210 <send_boot+0xc64>)
    7fe4:	781a      	ldrb	r2, [r3, #0]
    7fe6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fee:	781b      	ldrb	r3, [r3, #0]
    7ff0:	4413      	add	r3, r2
    7ff2:	b2da      	uxtb	r2, r3
    7ff4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ffc:	701a      	strb	r2, [r3, #0]
    7ffe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8006:	781a      	ldrb	r2, [r3, #0]
    8008:	f24c 634d 	movw	r3, #50765	; 0xc64d
    800c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8010:	781b      	ldrb	r3, [r3, #0]
    8012:	4413      	add	r3, r2
    8014:	b2da      	uxtb	r2, r3
    8016:	f24c 634e 	movw	r3, #50766	; 0xc64e
    801a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    801e:	701a      	strb	r2, [r3, #0]
    8020:	f24c 5349 	movw	r3, #50505	; 0xc549
    8024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8028:	781b      	ldrb	r3, [r3, #0]
    802a:	3301      	adds	r3, #1
    802c:	b2da      	uxtb	r2, r3
    802e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8036:	701a      	strb	r2, [r3, #0]
    8038:	f24c 5349 	movw	r3, #50505	; 0xc549
    803c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8040:	781b      	ldrb	r3, [r3, #0]
    8042:	2bff      	cmp	r3, #255	; 0xff
    8044:	d105      	bne.n	8052 <send_boot+0xaa6>
    8046:	f24c 5349 	movw	r3, #50505	; 0xc549
    804a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    804e:	2200      	movs	r2, #0
    8050:	701a      	strb	r2, [r3, #0]
    8052:	f24c 5349 	movw	r3, #50505	; 0xc549
    8056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805a:	781b      	ldrb	r3, [r3, #0]
    805c:	461a      	mov	r2, r3
    805e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    8062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8066:	7899      	ldrb	r1, [r3, #2]
    8068:	f24c 534c 	movw	r3, #50508	; 0xc54c
    806c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8070:	5499      	strb	r1, [r3, r2]
    8072:	4b68      	ldr	r3, [pc, #416]	; (8214 <send_boot+0xc68>)
    8074:	781a      	ldrb	r2, [r3, #0]
    8076:	f24c 634d 	movw	r3, #50765	; 0xc64d
    807a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    807e:	781b      	ldrb	r3, [r3, #0]
    8080:	4413      	add	r3, r2
    8082:	b2da      	uxtb	r2, r3
    8084:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    808c:	701a      	strb	r2, [r3, #0]
    808e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8096:	781a      	ldrb	r2, [r3, #0]
    8098:	f24c 634d 	movw	r3, #50765	; 0xc64d
    809c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a0:	781b      	ldrb	r3, [r3, #0]
    80a2:	4413      	add	r3, r2
    80a4:	b2da      	uxtb	r2, r3
    80a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ae:	701a      	strb	r2, [r3, #0]
    80b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    80b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b8:	781b      	ldrb	r3, [r3, #0]
    80ba:	3301      	adds	r3, #1
    80bc:	b2da      	uxtb	r2, r3
    80be:	f24c 5349 	movw	r3, #50505	; 0xc549
    80c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c6:	701a      	strb	r2, [r3, #0]
    80c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    80cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d0:	781b      	ldrb	r3, [r3, #0]
    80d2:	2bff      	cmp	r3, #255	; 0xff
    80d4:	d105      	bne.n	80e2 <send_boot+0xb36>
    80d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    80da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80de:	2200      	movs	r2, #0
    80e0:	701a      	strb	r2, [r3, #0]
    80e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    80e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ea:	781b      	ldrb	r3, [r3, #0]
    80ec:	461a      	mov	r2, r3
    80ee:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    80f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f6:	78d9      	ldrb	r1, [r3, #3]
    80f8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    80fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8100:	5499      	strb	r1, [r3, r2]
    8102:	4b45      	ldr	r3, [pc, #276]	; (8218 <send_boot+0xc6c>)
    8104:	781a      	ldrb	r2, [r3, #0]
    8106:	f24c 634d 	movw	r3, #50765	; 0xc64d
    810a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    810e:	781b      	ldrb	r3, [r3, #0]
    8110:	4413      	add	r3, r2
    8112:	b2da      	uxtb	r2, r3
    8114:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    811c:	701a      	strb	r2, [r3, #0]
    811e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8126:	781a      	ldrb	r2, [r3, #0]
    8128:	f24c 634d 	movw	r3, #50765	; 0xc64d
    812c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8130:	781b      	ldrb	r3, [r3, #0]
    8132:	4413      	add	r3, r2
    8134:	b2da      	uxtb	r2, r3
    8136:	f24c 634e 	movw	r3, #50766	; 0xc64e
    813a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    813e:	701a      	strb	r2, [r3, #0]
    8140:	f24c 5349 	movw	r3, #50505	; 0xc549
    8144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8148:	781b      	ldrb	r3, [r3, #0]
    814a:	3301      	adds	r3, #1
    814c:	b2da      	uxtb	r2, r3
    814e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8156:	701a      	strb	r2, [r3, #0]
    8158:	f24c 5349 	movw	r3, #50505	; 0xc549
    815c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8160:	781b      	ldrb	r3, [r3, #0]
    8162:	2bff      	cmp	r3, #255	; 0xff
    8164:	d105      	bne.n	8172 <send_boot+0xbc6>
    8166:	f24c 5349 	movw	r3, #50505	; 0xc549
    816a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    816e:	2200      	movs	r2, #0
    8170:	701a      	strb	r2, [r3, #0]
    8172:	f24c 5349 	movw	r3, #50505	; 0xc549
    8176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    817a:	781b      	ldrb	r3, [r3, #0]
    817c:	461a      	mov	r2, r3
    817e:	f240 5342 	movw	r3, #1346	; 0x542
    8182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8186:	7819      	ldrb	r1, [r3, #0]
    8188:	f24c 534c 	movw	r3, #50508	; 0xc54c
    818c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8190:	5499      	strb	r1, [r3, r2]
    8192:	f240 5342 	movw	r3, #1346	; 0x542
    8196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    819a:	781a      	ldrb	r2, [r3, #0]
    819c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a4:	781b      	ldrb	r3, [r3, #0]
    81a6:	4413      	add	r3, r2
    81a8:	b2da      	uxtb	r2, r3
    81aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b2:	701a      	strb	r2, [r3, #0]
    81b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    81b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81bc:	781a      	ldrb	r2, [r3, #0]
    81be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c6:	781b      	ldrb	r3, [r3, #0]
    81c8:	4413      	add	r3, r2
    81ca:	b2da      	uxtb	r2, r3
    81cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    81d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d4:	701a      	strb	r2, [r3, #0]
    81d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    81da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81de:	781b      	ldrb	r3, [r3, #0]
    81e0:	3301      	adds	r3, #1
    81e2:	b2da      	uxtb	r2, r3
    81e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    81e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ec:	701a      	strb	r2, [r3, #0]
    81ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    81f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f6:	781b      	ldrb	r3, [r3, #0]
    81f8:	2bff      	cmp	r3, #255	; 0xff
    81fa:	d10f      	bne.n	821c <send_boot+0xc70>
    81fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8204:	2200      	movs	r2, #0
    8206:	701a      	strb	r2, [r3, #0]
    8208:	e008      	b.n	821c <send_boot+0xc70>
    820a:	bf00      	nop
    820c:	2004cb47 	.word	0x2004cb47
    8210:	2004cb3d 	.word	0x2004cb3d
    8214:	2004cb3e 	.word	0x2004cb3e
    8218:	2004cb3f 	.word	0x2004cb3f
    821c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8224:	781b      	ldrb	r3, [r3, #0]
    8226:	461a      	mov	r2, r3
    8228:	f240 5342 	movw	r3, #1346	; 0x542
    822c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8230:	7859      	ldrb	r1, [r3, #1]
    8232:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    823a:	5499      	strb	r1, [r3, r2]
    823c:	4bc5      	ldr	r3, [pc, #788]	; (8554 <send_boot+0xfa8>)
    823e:	781a      	ldrb	r2, [r3, #0]
    8240:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8248:	781b      	ldrb	r3, [r3, #0]
    824a:	4413      	add	r3, r2
    824c:	b2da      	uxtb	r2, r3
    824e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8256:	701a      	strb	r2, [r3, #0]
    8258:	f24c 634e 	movw	r3, #50766	; 0xc64e
    825c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8260:	781a      	ldrb	r2, [r3, #0]
    8262:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    826a:	781b      	ldrb	r3, [r3, #0]
    826c:	4413      	add	r3, r2
    826e:	b2da      	uxtb	r2, r3
    8270:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8278:	701a      	strb	r2, [r3, #0]
    827a:	f24c 5349 	movw	r3, #50505	; 0xc549
    827e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8282:	781b      	ldrb	r3, [r3, #0]
    8284:	3301      	adds	r3, #1
    8286:	b2da      	uxtb	r2, r3
    8288:	f24c 5349 	movw	r3, #50505	; 0xc549
    828c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8290:	701a      	strb	r2, [r3, #0]
    8292:	f24c 5349 	movw	r3, #50505	; 0xc549
    8296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    829a:	781b      	ldrb	r3, [r3, #0]
    829c:	2bff      	cmp	r3, #255	; 0xff
    829e:	d105      	bne.n	82ac <send_boot+0xd00>
    82a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    82a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a8:	2200      	movs	r2, #0
    82aa:	701a      	strb	r2, [r3, #0]
    82ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    82b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b4:	781b      	ldrb	r3, [r3, #0]
    82b6:	461a      	mov	r2, r3
    82b8:	f240 5344 	movw	r3, #1348	; 0x544
    82bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82c0:	7819      	ldrb	r1, [r3, #0]
    82c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    82c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ca:	5499      	strb	r1, [r3, r2]
    82cc:	f240 5344 	movw	r3, #1348	; 0x544
    82d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82d4:	781a      	ldrb	r2, [r3, #0]
    82d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82de:	781b      	ldrb	r3, [r3, #0]
    82e0:	4413      	add	r3, r2
    82e2:	b2da      	uxtb	r2, r3
    82e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ec:	701a      	strb	r2, [r3, #0]
    82ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    82f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f6:	781a      	ldrb	r2, [r3, #0]
    82f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8300:	781b      	ldrb	r3, [r3, #0]
    8302:	4413      	add	r3, r2
    8304:	b2da      	uxtb	r2, r3
    8306:	f24c 634e 	movw	r3, #50766	; 0xc64e
    830a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    830e:	701a      	strb	r2, [r3, #0]
    8310:	f24c 5349 	movw	r3, #50505	; 0xc549
    8314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8318:	781b      	ldrb	r3, [r3, #0]
    831a:	3301      	adds	r3, #1
    831c:	b2da      	uxtb	r2, r3
    831e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8326:	701a      	strb	r2, [r3, #0]
    8328:	f24c 5349 	movw	r3, #50505	; 0xc549
    832c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8330:	781b      	ldrb	r3, [r3, #0]
    8332:	2bff      	cmp	r3, #255	; 0xff
    8334:	d105      	bne.n	8342 <send_boot+0xd96>
    8336:	f24c 5349 	movw	r3, #50505	; 0xc549
    833a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833e:	2200      	movs	r2, #0
    8340:	701a      	strb	r2, [r3, #0]
    8342:	f24c 5349 	movw	r3, #50505	; 0xc549
    8346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    834a:	781b      	ldrb	r3, [r3, #0]
    834c:	461a      	mov	r2, r3
    834e:	f240 5344 	movw	r3, #1348	; 0x544
    8352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8356:	7859      	ldrb	r1, [r3, #1]
    8358:	f24c 534c 	movw	r3, #50508	; 0xc54c
    835c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8360:	5499      	strb	r1, [r3, r2]
    8362:	4b7d      	ldr	r3, [pc, #500]	; (8558 <send_boot+0xfac>)
    8364:	781a      	ldrb	r2, [r3, #0]
    8366:	f24c 634d 	movw	r3, #50765	; 0xc64d
    836a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    836e:	781b      	ldrb	r3, [r3, #0]
    8370:	4413      	add	r3, r2
    8372:	b2da      	uxtb	r2, r3
    8374:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    837c:	701a      	strb	r2, [r3, #0]
    837e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8386:	781a      	ldrb	r2, [r3, #0]
    8388:	f24c 634d 	movw	r3, #50765	; 0xc64d
    838c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8390:	781b      	ldrb	r3, [r3, #0]
    8392:	4413      	add	r3, r2
    8394:	b2da      	uxtb	r2, r3
    8396:	f24c 634e 	movw	r3, #50766	; 0xc64e
    839a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839e:	701a      	strb	r2, [r3, #0]
    83a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    83a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a8:	781b      	ldrb	r3, [r3, #0]
    83aa:	3301      	adds	r3, #1
    83ac:	b2da      	uxtb	r2, r3
    83ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    83b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b6:	701a      	strb	r2, [r3, #0]
    83b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    83bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c0:	781b      	ldrb	r3, [r3, #0]
    83c2:	2bff      	cmp	r3, #255	; 0xff
    83c4:	d105      	bne.n	83d2 <send_boot+0xe26>
    83c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    83ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ce:	2200      	movs	r2, #0
    83d0:	701a      	strb	r2, [r3, #0]
    83d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    83d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83da:	781b      	ldrb	r3, [r3, #0]
    83dc:	461a      	mov	r2, r3
    83de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    83e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e6:	7819      	ldrb	r1, [r3, #0]
    83e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    83ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f0:	5499      	strb	r1, [r3, r2]
    83f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    83f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83fa:	781b      	ldrb	r3, [r3, #0]
    83fc:	3301      	adds	r3, #1
    83fe:	b2da      	uxtb	r2, r3
    8400:	f24c 5349 	movw	r3, #50505	; 0xc549
    8404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8408:	701a      	strb	r2, [r3, #0]
    840a:	f24c 5349 	movw	r3, #50505	; 0xc549
    840e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8412:	781b      	ldrb	r3, [r3, #0]
    8414:	2bff      	cmp	r3, #255	; 0xff
    8416:	d105      	bne.n	8424 <send_boot+0xe78>
    8418:	f24c 5349 	movw	r3, #50505	; 0xc549
    841c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8420:	2200      	movs	r2, #0
    8422:	701a      	strb	r2, [r3, #0]
    8424:	f24c 5349 	movw	r3, #50505	; 0xc549
    8428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    842c:	781b      	ldrb	r3, [r3, #0]
    842e:	461a      	mov	r2, r3
    8430:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8438:	7819      	ldrb	r1, [r3, #0]
    843a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    843e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8442:	5499      	strb	r1, [r3, r2]
    8444:	f24c 5349 	movw	r3, #50505	; 0xc549
    8448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    844c:	781b      	ldrb	r3, [r3, #0]
    844e:	3301      	adds	r3, #1
    8450:	b2da      	uxtb	r2, r3
    8452:	f24c 5349 	movw	r3, #50505	; 0xc549
    8456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    845a:	701a      	strb	r2, [r3, #0]
    845c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8464:	781b      	ldrb	r3, [r3, #0]
    8466:	2bff      	cmp	r3, #255	; 0xff
    8468:	d105      	bne.n	8476 <send_boot+0xeca>
    846a:	f24c 5349 	movw	r3, #50505	; 0xc549
    846e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8472:	2200      	movs	r2, #0
    8474:	701a      	strb	r2, [r3, #0]
    8476:	f242 0339 	movw	r3, #8249	; 0x2039
    847a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    847e:	781b      	ldrb	r3, [r3, #0]
    8480:	b2db      	uxtb	r3, r3
    8482:	f003 0310 	and.w	r3, r3, #16
    8486:	2b00      	cmp	r3, #0
    8488:	d15a      	bne.n	8540 <send_boot+0xf94>
    848a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    848e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8492:	781b      	ldrb	r3, [r3, #0]
    8494:	b2db      	uxtb	r3, r3
    8496:	461a      	mov	r2, r3
    8498:	f24c 534c 	movw	r3, #50508	; 0xc54c
    849c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a0:	5c9a      	ldrb	r2, [r3, r2]
    84a2:	f24c 634b 	movw	r3, #50763	; 0xc64b
    84a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84aa:	701a      	strb	r2, [r3, #0]
    84ac:	f24c 634c 	movw	r3, #50764	; 0xc64c
    84b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b4:	2200      	movs	r2, #0
    84b6:	701a      	strb	r2, [r3, #0]
    84b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c0:	781b      	ldrb	r3, [r3, #0]
    84c2:	b2db      	uxtb	r3, r3
    84c4:	3301      	adds	r3, #1
    84c6:	b2da      	uxtb	r2, r3
    84c8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d0:	701a      	strb	r2, [r3, #0]
    84d2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84da:	781b      	ldrb	r3, [r3, #0]
    84dc:	b2db      	uxtb	r3, r3
    84de:	2bff      	cmp	r3, #255	; 0xff
    84e0:	d105      	bne.n	84ee <send_boot+0xf42>
    84e2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ea:	2200      	movs	r2, #0
    84ec:	701a      	strb	r2, [r3, #0]
    84ee:	f242 0338 	movw	r3, #8248	; 0x2038
    84f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84f6:	f242 0238 	movw	r2, #8248	; 0x2038
    84fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    84fe:	7812      	ldrb	r2, [r2, #0]
    8500:	b2d2      	uxtb	r2, r2
    8502:	f042 0201 	orr.w	r2, r2, #1
    8506:	b2d2      	uxtb	r2, r2
    8508:	701a      	strb	r2, [r3, #0]
    850a:	f242 0339 	movw	r3, #8249	; 0x2039
    850e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8512:	f242 0239 	movw	r2, #8249	; 0x2039
    8516:	f2c2 0200 	movt	r2, #8192	; 0x2000
    851a:	7812      	ldrb	r2, [r2, #0]
    851c:	b2d2      	uxtb	r2, r2
    851e:	f042 0210 	orr.w	r2, r2, #16
    8522:	b2d2      	uxtb	r2, r2
    8524:	701a      	strb	r2, [r3, #0]
    8526:	e00b      	b.n	8540 <send_boot+0xf94>
    8528:	f24c 5348 	movw	r3, #50504	; 0xc548
    852c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8530:	781b      	ldrb	r3, [r3, #0]
    8532:	3301      	adds	r3, #1
    8534:	b2da      	uxtb	r2, r3
    8536:	f24c 5348 	movw	r3, #50504	; 0xc548
    853a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    853e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8540:	f240 533d 	movw	r3, #1341	; 0x53d
    8544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8548:	2200      	movs	r2, #0
    854a:	701a      	strb	r2, [r3, #0]
  }
}
    854c:	46bd      	mov	sp, r7
    854e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8552:	4770      	bx	lr
    8554:	20000543 	.word	0x20000543
    8558:	20000545 	.word	0x20000545

0000855c <send_attitude>:
void send_attitude(void){ //499ms
    855c:	b480      	push	{r7}
    855e:	af00      	add	r7, sp, #0
    // add by wanbo
  if(!boot)
    8560:	f240 533d 	movw	r3, #1341	; 0x53d
    8564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8568:	781b      	ldrb	r3, [r3, #0]
    856a:	2b00      	cmp	r3, #0
    856c:	f040 84ee 	bne.w	8f4c <send_attitude+0x9f0>
  {
    count++;
    8570:	f24c 5341 	movw	r3, #50497	; 0xc541
    8574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8578:	781b      	ldrb	r3, [r3, #0]
    857a:	3301      	adds	r3, #1
    857c:	b2da      	uxtb	r2, r3
    857e:	f24c 5341 	movw	r3, #50497	; 0xc541
    8582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8586:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8588:	f24c 5341 	movw	r3, #50497	; 0xc541
    858c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8590:	781b      	ldrb	r3, [r3, #0]
    8592:	2bfa      	cmp	r3, #250	; 0xfa
    8594:	d105      	bne.n	85a2 <send_attitude+0x46>
    8596:	f24c 5341 	movw	r3, #50497	; 0xc541
    859a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    859e:	2200      	movs	r2, #0
    85a0:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    85a2:	f24c 5341 	movw	r3, #50497	; 0xc541
    85a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85aa:	781a      	ldrb	r2, [r3, #0]
    85ac:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    85b0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    85b4:	fba3 1302 	umull	r1, r3, r3, r2
    85b8:	0899      	lsrs	r1, r3, #2
    85ba:	460b      	mov	r3, r1
    85bc:	009b      	lsls	r3, r3, #2
    85be:	440b      	add	r3, r1
    85c0:	1ad3      	subs	r3, r2, r3
    85c2:	b2db      	uxtb	r3, r3
    85c4:	2b00      	cmp	r3, #0
    85c6:	f040 84c1 	bne.w	8f4c <send_attitude+0x9f0>
       PERIODIC_SEND_ATTITUDE(); 
    85ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    85ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d2:	781a      	ldrb	r2, [r3, #0]
    85d4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    85d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85dc:	781b      	ldrb	r3, [r3, #0]
    85de:	b2db      	uxtb	r3, r3
    85e0:	429a      	cmp	r2, r3
    85e2:	d313      	bcc.n	860c <send_attitude+0xb0>
    85e4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    85e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ec:	781b      	ldrb	r3, [r3, #0]
    85ee:	b2db      	uxtb	r3, r3
    85f0:	461a      	mov	r2, r3
    85f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    85f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85fa:	781b      	ldrb	r3, [r3, #0]
    85fc:	1ad3      	subs	r3, r2, r3
    85fe:	33ff      	adds	r3, #255	; 0xff
    8600:	2b10      	cmp	r3, #16
    8602:	bfd4      	ite	le
    8604:	2300      	movle	r3, #0
    8606:	2301      	movgt	r3, #1
    8608:	b2db      	uxtb	r3, r3
    860a:	e011      	b.n	8630 <send_attitude+0xd4>
    860c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8614:	781b      	ldrb	r3, [r3, #0]
    8616:	b2db      	uxtb	r3, r3
    8618:	461a      	mov	r2, r3
    861a:	f24c 5349 	movw	r3, #50505	; 0xc549
    861e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8622:	781b      	ldrb	r3, [r3, #0]
    8624:	1ad3      	subs	r3, r2, r3
    8626:	2b10      	cmp	r3, #16
    8628:	bfd4      	ite	le
    862a:	2300      	movle	r3, #0
    862c:	2301      	movgt	r3, #1
    862e:	b2db      	uxtb	r3, r3
    8630:	2b00      	cmp	r3, #0
    8632:	f000 847f 	beq.w	8f34 <send_attitude+0x9d8>
    8636:	f24c 5349 	movw	r3, #50505	; 0xc549
    863a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    863e:	781b      	ldrb	r3, [r3, #0]
    8640:	461a      	mov	r2, r3
    8642:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864a:	2105      	movs	r1, #5
    864c:	5499      	strb	r1, [r3, r2]
    864e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8656:	781b      	ldrb	r3, [r3, #0]
    8658:	3301      	adds	r3, #1
    865a:	b2da      	uxtb	r2, r3
    865c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8664:	701a      	strb	r2, [r3, #0]
    8666:	f24c 5349 	movw	r3, #50505	; 0xc549
    866a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    866e:	781b      	ldrb	r3, [r3, #0]
    8670:	2bff      	cmp	r3, #255	; 0xff
    8672:	d105      	bne.n	8680 <send_attitude+0x124>
    8674:	f24c 5349 	movw	r3, #50505	; 0xc549
    8678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    867c:	2200      	movs	r2, #0
    867e:	701a      	strb	r2, [r3, #0]
    8680:	f24c 5349 	movw	r3, #50505	; 0xc549
    8684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8688:	781b      	ldrb	r3, [r3, #0]
    868a:	461a      	mov	r2, r3
    868c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8694:	2106      	movs	r1, #6
    8696:	5499      	strb	r1, [r3, r2]
    8698:	f24c 5349 	movw	r3, #50505	; 0xc549
    869c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a0:	781b      	ldrb	r3, [r3, #0]
    86a2:	3301      	adds	r3, #1
    86a4:	b2da      	uxtb	r2, r3
    86a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    86aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ae:	701a      	strb	r2, [r3, #0]
    86b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    86b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b8:	781b      	ldrb	r3, [r3, #0]
    86ba:	2bff      	cmp	r3, #255	; 0xff
    86bc:	d105      	bne.n	86ca <send_attitude+0x16e>
    86be:	f24c 5349 	movw	r3, #50505	; 0xc549
    86c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c6:	2200      	movs	r2, #0
    86c8:	701a      	strb	r2, [r3, #0]
    86ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d2:	2206      	movs	r2, #6
    86d4:	701a      	strb	r2, [r3, #0]
    86d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    86da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86de:	2206      	movs	r2, #6
    86e0:	701a      	strb	r2, [r3, #0]
    86e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    86e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ea:	781b      	ldrb	r3, [r3, #0]
    86ec:	461a      	mov	r2, r3
    86ee:	f64c 3308 	movw	r3, #51976	; 0xcb08
    86f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f6:	7819      	ldrb	r1, [r3, #0]
    86f8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    86fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8700:	5499      	strb	r1, [r3, r2]
    8702:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    870a:	781a      	ldrb	r2, [r3, #0]
    870c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8714:	781b      	ldrb	r3, [r3, #0]
    8716:	4413      	add	r3, r2
    8718:	b2da      	uxtb	r2, r3
    871a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    871e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8722:	701a      	strb	r2, [r3, #0]
    8724:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872c:	781a      	ldrb	r2, [r3, #0]
    872e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8736:	781b      	ldrb	r3, [r3, #0]
    8738:	4413      	add	r3, r2
    873a:	b2da      	uxtb	r2, r3
    873c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8744:	701a      	strb	r2, [r3, #0]
    8746:	f24c 5349 	movw	r3, #50505	; 0xc549
    874a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    874e:	781b      	ldrb	r3, [r3, #0]
    8750:	3301      	adds	r3, #1
    8752:	b2da      	uxtb	r2, r3
    8754:	f24c 5349 	movw	r3, #50505	; 0xc549
    8758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    875c:	701a      	strb	r2, [r3, #0]
    875e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8766:	781b      	ldrb	r3, [r3, #0]
    8768:	2bff      	cmp	r3, #255	; 0xff
    876a:	d105      	bne.n	8778 <send_attitude+0x21c>
    876c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8774:	2200      	movs	r2, #0
    8776:	701a      	strb	r2, [r3, #0]
    8778:	f24c 5349 	movw	r3, #50505	; 0xc549
    877c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8780:	781b      	ldrb	r3, [r3, #0]
    8782:	461a      	mov	r2, r3
    8784:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878c:	7859      	ldrb	r1, [r3, #1]
    878e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8796:	5499      	strb	r1, [r3, r2]
    8798:	4bd1      	ldr	r3, [pc, #836]	; (8ae0 <send_attitude+0x584>)
    879a:	781a      	ldrb	r2, [r3, #0]
    879c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a4:	781b      	ldrb	r3, [r3, #0]
    87a6:	4413      	add	r3, r2
    87a8:	b2da      	uxtb	r2, r3
    87aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b2:	701a      	strb	r2, [r3, #0]
    87b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    87b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87bc:	781a      	ldrb	r2, [r3, #0]
    87be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c6:	781b      	ldrb	r3, [r3, #0]
    87c8:	4413      	add	r3, r2
    87ca:	b2da      	uxtb	r2, r3
    87cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    87d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d4:	701a      	strb	r2, [r3, #0]
    87d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    87da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87de:	781b      	ldrb	r3, [r3, #0]
    87e0:	3301      	adds	r3, #1
    87e2:	b2da      	uxtb	r2, r3
    87e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    87e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ec:	701a      	strb	r2, [r3, #0]
    87ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    87f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f6:	781b      	ldrb	r3, [r3, #0]
    87f8:	2bff      	cmp	r3, #255	; 0xff
    87fa:	d105      	bne.n	8808 <send_attitude+0x2ac>
    87fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8804:	2200      	movs	r2, #0
    8806:	701a      	strb	r2, [r3, #0]
    8808:	f24c 5349 	movw	r3, #50505	; 0xc549
    880c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8810:	781b      	ldrb	r3, [r3, #0]
    8812:	461a      	mov	r2, r3
    8814:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    881c:	7899      	ldrb	r1, [r3, #2]
    881e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8826:	5499      	strb	r1, [r3, r2]
    8828:	4bae      	ldr	r3, [pc, #696]	; (8ae4 <send_attitude+0x588>)
    882a:	781a      	ldrb	r2, [r3, #0]
    882c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8834:	781b      	ldrb	r3, [r3, #0]
    8836:	4413      	add	r3, r2
    8838:	b2da      	uxtb	r2, r3
    883a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    883e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8842:	701a      	strb	r2, [r3, #0]
    8844:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    884c:	781a      	ldrb	r2, [r3, #0]
    884e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8856:	781b      	ldrb	r3, [r3, #0]
    8858:	4413      	add	r3, r2
    885a:	b2da      	uxtb	r2, r3
    885c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8864:	701a      	strb	r2, [r3, #0]
    8866:	f24c 5349 	movw	r3, #50505	; 0xc549
    886a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886e:	781b      	ldrb	r3, [r3, #0]
    8870:	3301      	adds	r3, #1
    8872:	b2da      	uxtb	r2, r3
    8874:	f24c 5349 	movw	r3, #50505	; 0xc549
    8878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    887c:	701a      	strb	r2, [r3, #0]
    887e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8886:	781b      	ldrb	r3, [r3, #0]
    8888:	2bff      	cmp	r3, #255	; 0xff
    888a:	d105      	bne.n	8898 <send_attitude+0x33c>
    888c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8894:	2200      	movs	r2, #0
    8896:	701a      	strb	r2, [r3, #0]
    8898:	f24c 5349 	movw	r3, #50505	; 0xc549
    889c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a0:	781b      	ldrb	r3, [r3, #0]
    88a2:	461a      	mov	r2, r3
    88a4:	f64c 3308 	movw	r3, #51976	; 0xcb08
    88a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ac:	78d9      	ldrb	r1, [r3, #3]
    88ae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    88b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b6:	5499      	strb	r1, [r3, r2]
    88b8:	4b8b      	ldr	r3, [pc, #556]	; (8ae8 <send_attitude+0x58c>)
    88ba:	781a      	ldrb	r2, [r3, #0]
    88bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c4:	781b      	ldrb	r3, [r3, #0]
    88c6:	4413      	add	r3, r2
    88c8:	b2da      	uxtb	r2, r3
    88ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d2:	701a      	strb	r2, [r3, #0]
    88d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88dc:	781a      	ldrb	r2, [r3, #0]
    88de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e6:	781b      	ldrb	r3, [r3, #0]
    88e8:	4413      	add	r3, r2
    88ea:	b2da      	uxtb	r2, r3
    88ec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f4:	701a      	strb	r2, [r3, #0]
    88f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    88fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fe:	781b      	ldrb	r3, [r3, #0]
    8900:	3301      	adds	r3, #1
    8902:	b2da      	uxtb	r2, r3
    8904:	f24c 5349 	movw	r3, #50505	; 0xc549
    8908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    890c:	701a      	strb	r2, [r3, #0]
    890e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8916:	781b      	ldrb	r3, [r3, #0]
    8918:	2bff      	cmp	r3, #255	; 0xff
    891a:	d105      	bne.n	8928 <send_attitude+0x3cc>
    891c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8924:	2200      	movs	r2, #0
    8926:	701a      	strb	r2, [r3, #0]
    8928:	f24c 5349 	movw	r3, #50505	; 0xc549
    892c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8930:	781b      	ldrb	r3, [r3, #0]
    8932:	461a      	mov	r2, r3
    8934:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893c:	7819      	ldrb	r1, [r3, #0]
    893e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8946:	5499      	strb	r1, [r3, r2]
    8948:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    894c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8950:	781a      	ldrb	r2, [r3, #0]
    8952:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    895a:	781b      	ldrb	r3, [r3, #0]
    895c:	4413      	add	r3, r2
    895e:	b2da      	uxtb	r2, r3
    8960:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8968:	701a      	strb	r2, [r3, #0]
    896a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    896e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8972:	781a      	ldrb	r2, [r3, #0]
    8974:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    897c:	781b      	ldrb	r3, [r3, #0]
    897e:	4413      	add	r3, r2
    8980:	b2da      	uxtb	r2, r3
    8982:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898a:	701a      	strb	r2, [r3, #0]
    898c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8994:	781b      	ldrb	r3, [r3, #0]
    8996:	3301      	adds	r3, #1
    8998:	b2da      	uxtb	r2, r3
    899a:	f24c 5349 	movw	r3, #50505	; 0xc549
    899e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a2:	701a      	strb	r2, [r3, #0]
    89a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    89a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ac:	781b      	ldrb	r3, [r3, #0]
    89ae:	2bff      	cmp	r3, #255	; 0xff
    89b0:	d105      	bne.n	89be <send_attitude+0x462>
    89b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    89b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ba:	2200      	movs	r2, #0
    89bc:	701a      	strb	r2, [r3, #0]
    89be:	f24c 5349 	movw	r3, #50505	; 0xc549
    89c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c6:	781b      	ldrb	r3, [r3, #0]
    89c8:	461a      	mov	r2, r3
    89ca:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    89ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d2:	7859      	ldrb	r1, [r3, #1]
    89d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    89d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89dc:	5499      	strb	r1, [r3, r2]
    89de:	4b43      	ldr	r3, [pc, #268]	; (8aec <send_attitude+0x590>)
    89e0:	781a      	ldrb	r2, [r3, #0]
    89e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ea:	781b      	ldrb	r3, [r3, #0]
    89ec:	4413      	add	r3, r2
    89ee:	b2da      	uxtb	r2, r3
    89f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f8:	701a      	strb	r2, [r3, #0]
    89fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    89fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a02:	781a      	ldrb	r2, [r3, #0]
    8a04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0c:	781b      	ldrb	r3, [r3, #0]
    8a0e:	4413      	add	r3, r2
    8a10:	b2da      	uxtb	r2, r3
    8a12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1a:	701a      	strb	r2, [r3, #0]
    8a1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a24:	781b      	ldrb	r3, [r3, #0]
    8a26:	3301      	adds	r3, #1
    8a28:	b2da      	uxtb	r2, r3
    8a2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a32:	701a      	strb	r2, [r3, #0]
    8a34:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	2bff      	cmp	r3, #255	; 0xff
    8a40:	d105      	bne.n	8a4e <send_attitude+0x4f2>
    8a42:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4a:	2200      	movs	r2, #0
    8a4c:	701a      	strb	r2, [r3, #0]
    8a4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a56:	781b      	ldrb	r3, [r3, #0]
    8a58:	461a      	mov	r2, r3
    8a5a:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a62:	7899      	ldrb	r1, [r3, #2]
    8a64:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a6c:	5499      	strb	r1, [r3, r2]
    8a6e:	4b20      	ldr	r3, [pc, #128]	; (8af0 <send_attitude+0x594>)
    8a70:	781a      	ldrb	r2, [r3, #0]
    8a72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a7a:	781b      	ldrb	r3, [r3, #0]
    8a7c:	4413      	add	r3, r2
    8a7e:	b2da      	uxtb	r2, r3
    8a80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a88:	701a      	strb	r2, [r3, #0]
    8a8a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a92:	781a      	ldrb	r2, [r3, #0]
    8a94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9c:	781b      	ldrb	r3, [r3, #0]
    8a9e:	4413      	add	r3, r2
    8aa0:	b2da      	uxtb	r2, r3
    8aa2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aaa:	701a      	strb	r2, [r3, #0]
    8aac:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab4:	781b      	ldrb	r3, [r3, #0]
    8ab6:	3301      	adds	r3, #1
    8ab8:	b2da      	uxtb	r2, r3
    8aba:	f24c 5349 	movw	r3, #50505	; 0xc549
    8abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac2:	701a      	strb	r2, [r3, #0]
    8ac4:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8acc:	781b      	ldrb	r3, [r3, #0]
    8ace:	2bff      	cmp	r3, #255	; 0xff
    8ad0:	d110      	bne.n	8af4 <send_attitude+0x598>
    8ad2:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ada:	2200      	movs	r2, #0
    8adc:	701a      	strb	r2, [r3, #0]
    8ade:	e009      	b.n	8af4 <send_attitude+0x598>
    8ae0:	2004cb09 	.word	0x2004cb09
    8ae4:	2004cb0a 	.word	0x2004cb0a
    8ae8:	2004cb0b 	.word	0x2004cb0b
    8aec:	2004cb0d 	.word	0x2004cb0d
    8af0:	2004cb0e 	.word	0x2004cb0e
    8af4:	f24c 5349 	movw	r3, #50505	; 0xc549
    8af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afc:	781b      	ldrb	r3, [r3, #0]
    8afe:	461a      	mov	r2, r3
    8b00:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b08:	78d9      	ldrb	r1, [r3, #3]
    8b0a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b12:	5499      	strb	r1, [r3, r2]
    8b14:	4bc2      	ldr	r3, [pc, #776]	; (8e20 <send_attitude+0x8c4>)
    8b16:	781a      	ldrb	r2, [r3, #0]
    8b18:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b20:	781b      	ldrb	r3, [r3, #0]
    8b22:	4413      	add	r3, r2
    8b24:	b2da      	uxtb	r2, r3
    8b26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2e:	701a      	strb	r2, [r3, #0]
    8b30:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b38:	781a      	ldrb	r2, [r3, #0]
    8b3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b42:	781b      	ldrb	r3, [r3, #0]
    8b44:	4413      	add	r3, r2
    8b46:	b2da      	uxtb	r2, r3
    8b48:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b50:	701a      	strb	r2, [r3, #0]
    8b52:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b5a:	781b      	ldrb	r3, [r3, #0]
    8b5c:	3301      	adds	r3, #1
    8b5e:	b2da      	uxtb	r2, r3
    8b60:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b68:	701a      	strb	r2, [r3, #0]
    8b6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b72:	781b      	ldrb	r3, [r3, #0]
    8b74:	2bff      	cmp	r3, #255	; 0xff
    8b76:	d105      	bne.n	8b84 <send_attitude+0x628>
    8b78:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b80:	2200      	movs	r2, #0
    8b82:	701a      	strb	r2, [r3, #0]
    8b84:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8c:	781b      	ldrb	r3, [r3, #0]
    8b8e:	461a      	mov	r2, r3
    8b90:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b98:	7819      	ldrb	r1, [r3, #0]
    8b9a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba2:	5499      	strb	r1, [r3, r2]
    8ba4:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bac:	781a      	ldrb	r2, [r3, #0]
    8bae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb6:	781b      	ldrb	r3, [r3, #0]
    8bb8:	4413      	add	r3, r2
    8bba:	b2da      	uxtb	r2, r3
    8bbc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc4:	701a      	strb	r2, [r3, #0]
    8bc6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bce:	781a      	ldrb	r2, [r3, #0]
    8bd0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd8:	781b      	ldrb	r3, [r3, #0]
    8bda:	4413      	add	r3, r2
    8bdc:	b2da      	uxtb	r2, r3
    8bde:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be6:	701a      	strb	r2, [r3, #0]
    8be8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf0:	781b      	ldrb	r3, [r3, #0]
    8bf2:	3301      	adds	r3, #1
    8bf4:	b2da      	uxtb	r2, r3
    8bf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfe:	701a      	strb	r2, [r3, #0]
    8c00:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c08:	781b      	ldrb	r3, [r3, #0]
    8c0a:	2bff      	cmp	r3, #255	; 0xff
    8c0c:	d105      	bne.n	8c1a <send_attitude+0x6be>
    8c0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c16:	2200      	movs	r2, #0
    8c18:	701a      	strb	r2, [r3, #0]
    8c1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c22:	781b      	ldrb	r3, [r3, #0]
    8c24:	461a      	mov	r2, r3
    8c26:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2e:	7859      	ldrb	r1, [r3, #1]
    8c30:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c38:	5499      	strb	r1, [r3, r2]
    8c3a:	4b7a      	ldr	r3, [pc, #488]	; (8e24 <send_attitude+0x8c8>)
    8c3c:	781a      	ldrb	r2, [r3, #0]
    8c3e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c46:	781b      	ldrb	r3, [r3, #0]
    8c48:	4413      	add	r3, r2
    8c4a:	b2da      	uxtb	r2, r3
    8c4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c54:	701a      	strb	r2, [r3, #0]
    8c56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5e:	781a      	ldrb	r2, [r3, #0]
    8c60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	4413      	add	r3, r2
    8c6c:	b2da      	uxtb	r2, r3
    8c6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c76:	701a      	strb	r2, [r3, #0]
    8c78:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c80:	781b      	ldrb	r3, [r3, #0]
    8c82:	3301      	adds	r3, #1
    8c84:	b2da      	uxtb	r2, r3
    8c86:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c8e:	701a      	strb	r2, [r3, #0]
    8c90:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c98:	781b      	ldrb	r3, [r3, #0]
    8c9a:	2bff      	cmp	r3, #255	; 0xff
    8c9c:	d105      	bne.n	8caa <send_attitude+0x74e>
    8c9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca6:	2200      	movs	r2, #0
    8ca8:	701a      	strb	r2, [r3, #0]
    8caa:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb2:	781b      	ldrb	r3, [r3, #0]
    8cb4:	461a      	mov	r2, r3
    8cb6:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cbe:	7899      	ldrb	r1, [r3, #2]
    8cc0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc8:	5499      	strb	r1, [r3, r2]
    8cca:	4b57      	ldr	r3, [pc, #348]	; (8e28 <send_attitude+0x8cc>)
    8ccc:	781a      	ldrb	r2, [r3, #0]
    8cce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd6:	781b      	ldrb	r3, [r3, #0]
    8cd8:	4413      	add	r3, r2
    8cda:	b2da      	uxtb	r2, r3
    8cdc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce4:	701a      	strb	r2, [r3, #0]
    8ce6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cee:	781a      	ldrb	r2, [r3, #0]
    8cf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf8:	781b      	ldrb	r3, [r3, #0]
    8cfa:	4413      	add	r3, r2
    8cfc:	b2da      	uxtb	r2, r3
    8cfe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d06:	701a      	strb	r2, [r3, #0]
    8d08:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d10:	781b      	ldrb	r3, [r3, #0]
    8d12:	3301      	adds	r3, #1
    8d14:	b2da      	uxtb	r2, r3
    8d16:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d1e:	701a      	strb	r2, [r3, #0]
    8d20:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d28:	781b      	ldrb	r3, [r3, #0]
    8d2a:	2bff      	cmp	r3, #255	; 0xff
    8d2c:	d105      	bne.n	8d3a <send_attitude+0x7de>
    8d2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d36:	2200      	movs	r2, #0
    8d38:	701a      	strb	r2, [r3, #0]
    8d3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d42:	781b      	ldrb	r3, [r3, #0]
    8d44:	461a      	mov	r2, r3
    8d46:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4e:	78d9      	ldrb	r1, [r3, #3]
    8d50:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d58:	5499      	strb	r1, [r3, r2]
    8d5a:	4b34      	ldr	r3, [pc, #208]	; (8e2c <send_attitude+0x8d0>)
    8d5c:	781a      	ldrb	r2, [r3, #0]
    8d5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d66:	781b      	ldrb	r3, [r3, #0]
    8d68:	4413      	add	r3, r2
    8d6a:	b2da      	uxtb	r2, r3
    8d6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d74:	701a      	strb	r2, [r3, #0]
    8d76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d7e:	781a      	ldrb	r2, [r3, #0]
    8d80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d88:	781b      	ldrb	r3, [r3, #0]
    8d8a:	4413      	add	r3, r2
    8d8c:	b2da      	uxtb	r2, r3
    8d8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d96:	701a      	strb	r2, [r3, #0]
    8d98:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da0:	781b      	ldrb	r3, [r3, #0]
    8da2:	3301      	adds	r3, #1
    8da4:	b2da      	uxtb	r2, r3
    8da6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dae:	701a      	strb	r2, [r3, #0]
    8db0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db8:	781b      	ldrb	r3, [r3, #0]
    8dba:	2bff      	cmp	r3, #255	; 0xff
    8dbc:	d105      	bne.n	8dca <send_attitude+0x86e>
    8dbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc6:	2200      	movs	r2, #0
    8dc8:	701a      	strb	r2, [r3, #0]
    8dca:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd2:	781b      	ldrb	r3, [r3, #0]
    8dd4:	461a      	mov	r2, r3
    8dd6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dde:	7819      	ldrb	r1, [r3, #0]
    8de0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de8:	5499      	strb	r1, [r3, r2]
    8dea:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df2:	781b      	ldrb	r3, [r3, #0]
    8df4:	3301      	adds	r3, #1
    8df6:	b2da      	uxtb	r2, r3
    8df8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e00:	701a      	strb	r2, [r3, #0]
    8e02:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e0a:	781b      	ldrb	r3, [r3, #0]
    8e0c:	2bff      	cmp	r3, #255	; 0xff
    8e0e:	d10f      	bne.n	8e30 <send_attitude+0x8d4>
    8e10:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e18:	2200      	movs	r2, #0
    8e1a:	701a      	strb	r2, [r3, #0]
    8e1c:	e008      	b.n	8e30 <send_attitude+0x8d4>
    8e1e:	bf00      	nop
    8e20:	2004cb0f 	.word	0x2004cb0f
    8e24:	2004cb11 	.word	0x2004cb11
    8e28:	2004cb12 	.word	0x2004cb12
    8e2c:	2004cb13 	.word	0x2004cb13
    8e30:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e38:	781b      	ldrb	r3, [r3, #0]
    8e3a:	461a      	mov	r2, r3
    8e3c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e44:	7819      	ldrb	r1, [r3, #0]
    8e46:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e4e:	5499      	strb	r1, [r3, r2]
    8e50:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e58:	781b      	ldrb	r3, [r3, #0]
    8e5a:	3301      	adds	r3, #1
    8e5c:	b2da      	uxtb	r2, r3
    8e5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e66:	701a      	strb	r2, [r3, #0]
    8e68:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e70:	781b      	ldrb	r3, [r3, #0]
    8e72:	2bff      	cmp	r3, #255	; 0xff
    8e74:	d105      	bne.n	8e82 <send_attitude+0x926>
    8e76:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e7e:	2200      	movs	r2, #0
    8e80:	701a      	strb	r2, [r3, #0]
    8e82:	f242 0339 	movw	r3, #8249	; 0x2039
    8e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e8a:	781b      	ldrb	r3, [r3, #0]
    8e8c:	b2db      	uxtb	r3, r3
    8e8e:	f003 0310 	and.w	r3, r3, #16
    8e92:	2b00      	cmp	r3, #0
    8e94:	d15a      	bne.n	8f4c <send_attitude+0x9f0>
    8e96:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e9e:	781b      	ldrb	r3, [r3, #0]
    8ea0:	b2db      	uxtb	r3, r3
    8ea2:	461a      	mov	r2, r3
    8ea4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eac:	5c9a      	ldrb	r2, [r3, r2]
    8eae:	f24c 634b 	movw	r3, #50763	; 0xc64b
    8eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb6:	701a      	strb	r2, [r3, #0]
    8eb8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec0:	2200      	movs	r2, #0
    8ec2:	701a      	strb	r2, [r3, #0]
    8ec4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ecc:	781b      	ldrb	r3, [r3, #0]
    8ece:	b2db      	uxtb	r3, r3
    8ed0:	3301      	adds	r3, #1
    8ed2:	b2da      	uxtb	r2, r3
    8ed4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8edc:	701a      	strb	r2, [r3, #0]
    8ede:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee6:	781b      	ldrb	r3, [r3, #0]
    8ee8:	b2db      	uxtb	r3, r3
    8eea:	2bff      	cmp	r3, #255	; 0xff
    8eec:	d105      	bne.n	8efa <send_attitude+0x99e>
    8eee:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef6:	2200      	movs	r2, #0
    8ef8:	701a      	strb	r2, [r3, #0]
    8efa:	f242 0338 	movw	r3, #8248	; 0x2038
    8efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f02:	f242 0238 	movw	r2, #8248	; 0x2038
    8f06:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8f0a:	7812      	ldrb	r2, [r2, #0]
    8f0c:	b2d2      	uxtb	r2, r2
    8f0e:	f042 0201 	orr.w	r2, r2, #1
    8f12:	b2d2      	uxtb	r2, r2
    8f14:	701a      	strb	r2, [r3, #0]
    8f16:	f242 0339 	movw	r3, #8249	; 0x2039
    8f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f1e:	f242 0239 	movw	r2, #8249	; 0x2039
    8f22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8f26:	7812      	ldrb	r2, [r2, #0]
    8f28:	b2d2      	uxtb	r2, r2
    8f2a:	f042 0210 	orr.w	r2, r2, #16
    8f2e:	b2d2      	uxtb	r2, r2
    8f30:	701a      	strb	r2, [r3, #0]
    8f32:	e00b      	b.n	8f4c <send_attitude+0x9f0>
    8f34:	f24c 5348 	movw	r3, #50504	; 0xc548
    8f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f3c:	781b      	ldrb	r3, [r3, #0]
    8f3e:	3301      	adds	r3, #1
    8f40:	b2da      	uxtb	r2, r3
    8f42:	f24c 5348 	movw	r3, #50504	; 0xc548
    8f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f4a:	701a      	strb	r2, [r3, #0]
  }
}
    8f4c:	46bd      	mov	sp, r7
    8f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f52:	4770      	bx	lr

00008f54 <send_adc>:
  
void send_adc(void){  //500ms
    8f54:	b480      	push	{r7}
    8f56:	af00      	add	r7, sp, #0
  if(!boot)
    8f58:	f240 533d 	movw	r3, #1341	; 0x53d
    8f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f60:	781b      	ldrb	r3, [r3, #0]
    8f62:	2b00      	cmp	r3, #0
    8f64:	f040 827d 	bne.w	9462 <send_adc+0x50e>
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8f68:	f24c 5341 	movw	r3, #50497	; 0xc541
    8f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f70:	781a      	ldrb	r2, [r3, #0]
    8f72:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8f76:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8f7a:	fba3 1302 	umull	r1, r3, r3, r2
    8f7e:	0899      	lsrs	r1, r3, #2
    8f80:	460b      	mov	r3, r1
    8f82:	009b      	lsls	r3, r3, #2
    8f84:	440b      	add	r3, r1
    8f86:	1ad3      	subs	r3, r2, r3
    8f88:	b2db      	uxtb	r3, r3
    8f8a:	2b01      	cmp	r3, #1
    8f8c:	f040 8269 	bne.w	9462 <send_adc+0x50e>
    8f90:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f98:	781a      	ldrb	r2, [r3, #0]
    8f9a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa2:	781b      	ldrb	r3, [r3, #0]
    8fa4:	b2db      	uxtb	r3, r3
    8fa6:	429a      	cmp	r2, r3
    8fa8:	d313      	bcc.n	8fd2 <send_adc+0x7e>
    8faa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb2:	781b      	ldrb	r3, [r3, #0]
    8fb4:	b2db      	uxtb	r3, r3
    8fb6:	461a      	mov	r2, r3
    8fb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc0:	781b      	ldrb	r3, [r3, #0]
    8fc2:	1ad3      	subs	r3, r2, r3
    8fc4:	33ff      	adds	r3, #255	; 0xff
    8fc6:	2b08      	cmp	r3, #8
    8fc8:	bfd4      	ite	le
    8fca:	2300      	movle	r3, #0
    8fcc:	2301      	movgt	r3, #1
    8fce:	b2db      	uxtb	r3, r3
    8fd0:	e011      	b.n	8ff6 <send_adc+0xa2>
    8fd2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fda:	781b      	ldrb	r3, [r3, #0]
    8fdc:	b2db      	uxtb	r3, r3
    8fde:	461a      	mov	r2, r3
    8fe0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe8:	781b      	ldrb	r3, [r3, #0]
    8fea:	1ad3      	subs	r3, r2, r3
    8fec:	2b08      	cmp	r3, #8
    8fee:	bfd4      	ite	le
    8ff0:	2300      	movle	r3, #0
    8ff2:	2301      	movgt	r3, #1
    8ff4:	b2db      	uxtb	r3, r3
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	f000 8227 	beq.w	944a <send_adc+0x4f6>
    8ffc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9004:	781b      	ldrb	r3, [r3, #0]
    9006:	461a      	mov	r2, r3
    9008:	f24c 534c 	movw	r3, #50508	; 0xc54c
    900c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9010:	2105      	movs	r1, #5
    9012:	5499      	strb	r1, [r3, r2]
    9014:	f24c 5349 	movw	r3, #50505	; 0xc549
    9018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    901c:	781b      	ldrb	r3, [r3, #0]
    901e:	3301      	adds	r3, #1
    9020:	b2da      	uxtb	r2, r3
    9022:	f24c 5349 	movw	r3, #50505	; 0xc549
    9026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    902a:	701a      	strb	r2, [r3, #0]
    902c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9034:	781b      	ldrb	r3, [r3, #0]
    9036:	2bff      	cmp	r3, #255	; 0xff
    9038:	d105      	bne.n	9046 <send_adc+0xf2>
    903a:	f24c 5349 	movw	r3, #50505	; 0xc549
    903e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9042:	2200      	movs	r2, #0
    9044:	701a      	strb	r2, [r3, #0]
    9046:	f24c 5349 	movw	r3, #50505	; 0xc549
    904a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    904e:	781b      	ldrb	r3, [r3, #0]
    9050:	461a      	mov	r2, r3
    9052:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    905a:	2107      	movs	r1, #7
    905c:	5499      	strb	r1, [r3, r2]
    905e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9066:	781b      	ldrb	r3, [r3, #0]
    9068:	3301      	adds	r3, #1
    906a:	b2da      	uxtb	r2, r3
    906c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9074:	701a      	strb	r2, [r3, #0]
    9076:	f24c 5349 	movw	r3, #50505	; 0xc549
    907a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    907e:	781b      	ldrb	r3, [r3, #0]
    9080:	2bff      	cmp	r3, #255	; 0xff
    9082:	d105      	bne.n	9090 <send_adc+0x13c>
    9084:	f24c 5349 	movw	r3, #50505	; 0xc549
    9088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    908c:	2200      	movs	r2, #0
    908e:	701a      	strb	r2, [r3, #0]
    9090:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9098:	2207      	movs	r2, #7
    909a:	701a      	strb	r2, [r3, #0]
    909c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    90a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a4:	2207      	movs	r2, #7
    90a6:	701a      	strb	r2, [r3, #0]
    90a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    90ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b0:	781b      	ldrb	r3, [r3, #0]
    90b2:	461a      	mov	r2, r3
    90b4:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    90b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90bc:	7819      	ldrb	r1, [r3, #0]
    90be:	f24c 534c 	movw	r3, #50508	; 0xc54c
    90c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c6:	5499      	strb	r1, [r3, r2]
    90c8:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    90cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d0:	781a      	ldrb	r2, [r3, #0]
    90d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90da:	781b      	ldrb	r3, [r3, #0]
    90dc:	4413      	add	r3, r2
    90de:	b2da      	uxtb	r2, r3
    90e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e8:	701a      	strb	r2, [r3, #0]
    90ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    90ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f2:	781a      	ldrb	r2, [r3, #0]
    90f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fc:	781b      	ldrb	r3, [r3, #0]
    90fe:	4413      	add	r3, r2
    9100:	b2da      	uxtb	r2, r3
    9102:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910a:	701a      	strb	r2, [r3, #0]
    910c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9114:	781b      	ldrb	r3, [r3, #0]
    9116:	3301      	adds	r3, #1
    9118:	b2da      	uxtb	r2, r3
    911a:	f24c 5349 	movw	r3, #50505	; 0xc549
    911e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9122:	701a      	strb	r2, [r3, #0]
    9124:	f24c 5349 	movw	r3, #50505	; 0xc549
    9128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    912c:	781b      	ldrb	r3, [r3, #0]
    912e:	2bff      	cmp	r3, #255	; 0xff
    9130:	d105      	bne.n	913e <send_adc+0x1ea>
    9132:	f24c 5349 	movw	r3, #50505	; 0xc549
    9136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913a:	2200      	movs	r2, #0
    913c:	701a      	strb	r2, [r3, #0]
    913e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9146:	781b      	ldrb	r3, [r3, #0]
    9148:	461a      	mov	r2, r3
    914a:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    914e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9152:	7859      	ldrb	r1, [r3, #1]
    9154:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    915c:	5499      	strb	r1, [r3, r2]
    915e:	4bc3      	ldr	r3, [pc, #780]	; (946c <send_adc+0x518>)
    9160:	781a      	ldrb	r2, [r3, #0]
    9162:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916a:	781b      	ldrb	r3, [r3, #0]
    916c:	4413      	add	r3, r2
    916e:	b2da      	uxtb	r2, r3
    9170:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9178:	701a      	strb	r2, [r3, #0]
    917a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    917e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9182:	781a      	ldrb	r2, [r3, #0]
    9184:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    918c:	781b      	ldrb	r3, [r3, #0]
    918e:	4413      	add	r3, r2
    9190:	b2da      	uxtb	r2, r3
    9192:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919a:	701a      	strb	r2, [r3, #0]
    919c:	f24c 5349 	movw	r3, #50505	; 0xc549
    91a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a4:	781b      	ldrb	r3, [r3, #0]
    91a6:	3301      	adds	r3, #1
    91a8:	b2da      	uxtb	r2, r3
    91aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    91ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b2:	701a      	strb	r2, [r3, #0]
    91b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    91b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91bc:	781b      	ldrb	r3, [r3, #0]
    91be:	2bff      	cmp	r3, #255	; 0xff
    91c0:	d105      	bne.n	91ce <send_adc+0x27a>
    91c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    91c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ca:	2200      	movs	r2, #0
    91cc:	701a      	strb	r2, [r3, #0]
    91ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    91d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d6:	781b      	ldrb	r3, [r3, #0]
    91d8:	461a      	mov	r2, r3
    91da:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    91de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e2:	7819      	ldrb	r1, [r3, #0]
    91e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    91e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ec:	5499      	strb	r1, [r3, r2]
    91ee:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    91f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f6:	781a      	ldrb	r2, [r3, #0]
    91f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9200:	781b      	ldrb	r3, [r3, #0]
    9202:	4413      	add	r3, r2
    9204:	b2da      	uxtb	r2, r3
    9206:	f24c 634d 	movw	r3, #50765	; 0xc64d
    920a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920e:	701a      	strb	r2, [r3, #0]
    9210:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9218:	781a      	ldrb	r2, [r3, #0]
    921a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    921e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9222:	781b      	ldrb	r3, [r3, #0]
    9224:	4413      	add	r3, r2
    9226:	b2da      	uxtb	r2, r3
    9228:	f24c 634e 	movw	r3, #50766	; 0xc64e
    922c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9230:	701a      	strb	r2, [r3, #0]
    9232:	f24c 5349 	movw	r3, #50505	; 0xc549
    9236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    923a:	781b      	ldrb	r3, [r3, #0]
    923c:	3301      	adds	r3, #1
    923e:	b2da      	uxtb	r2, r3
    9240:	f24c 5349 	movw	r3, #50505	; 0xc549
    9244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9248:	701a      	strb	r2, [r3, #0]
    924a:	f24c 5349 	movw	r3, #50505	; 0xc549
    924e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9252:	781b      	ldrb	r3, [r3, #0]
    9254:	2bff      	cmp	r3, #255	; 0xff
    9256:	d105      	bne.n	9264 <send_adc+0x310>
    9258:	f24c 5349 	movw	r3, #50505	; 0xc549
    925c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9260:	2200      	movs	r2, #0
    9262:	701a      	strb	r2, [r3, #0]
    9264:	f24c 5349 	movw	r3, #50505	; 0xc549
    9268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926c:	781b      	ldrb	r3, [r3, #0]
    926e:	461a      	mov	r2, r3
    9270:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    9274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9278:	7859      	ldrb	r1, [r3, #1]
    927a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    927e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9282:	5499      	strb	r1, [r3, r2]
    9284:	4b7a      	ldr	r3, [pc, #488]	; (9470 <send_adc+0x51c>)
    9286:	781a      	ldrb	r2, [r3, #0]
    9288:	f24c 634d 	movw	r3, #50765	; 0xc64d
    928c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9290:	781b      	ldrb	r3, [r3, #0]
    9292:	4413      	add	r3, r2
    9294:	b2da      	uxtb	r2, r3
    9296:	f24c 634d 	movw	r3, #50765	; 0xc64d
    929a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    929e:	701a      	strb	r2, [r3, #0]
    92a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    92a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a8:	781a      	ldrb	r2, [r3, #0]
    92aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    92ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b2:	781b      	ldrb	r3, [r3, #0]
    92b4:	4413      	add	r3, r2
    92b6:	b2da      	uxtb	r2, r3
    92b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    92bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c0:	701a      	strb	r2, [r3, #0]
    92c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    92c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ca:	781b      	ldrb	r3, [r3, #0]
    92cc:	3301      	adds	r3, #1
    92ce:	b2da      	uxtb	r2, r3
    92d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    92d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d8:	701a      	strb	r2, [r3, #0]
    92da:	f24c 5349 	movw	r3, #50505	; 0xc549
    92de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e2:	781b      	ldrb	r3, [r3, #0]
    92e4:	2bff      	cmp	r3, #255	; 0xff
    92e6:	d105      	bne.n	92f4 <send_adc+0x3a0>
    92e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    92ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f0:	2200      	movs	r2, #0
    92f2:	701a      	strb	r2, [r3, #0]
    92f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    92f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92fc:	781b      	ldrb	r3, [r3, #0]
    92fe:	461a      	mov	r2, r3
    9300:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9308:	7819      	ldrb	r1, [r3, #0]
    930a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    930e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9312:	5499      	strb	r1, [r3, r2]
    9314:	f24c 5349 	movw	r3, #50505	; 0xc549
    9318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    931c:	781b      	ldrb	r3, [r3, #0]
    931e:	3301      	adds	r3, #1
    9320:	b2da      	uxtb	r2, r3
    9322:	f24c 5349 	movw	r3, #50505	; 0xc549
    9326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    932a:	701a      	strb	r2, [r3, #0]
    932c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9334:	781b      	ldrb	r3, [r3, #0]
    9336:	2bff      	cmp	r3, #255	; 0xff
    9338:	d105      	bne.n	9346 <send_adc+0x3f2>
    933a:	f24c 5349 	movw	r3, #50505	; 0xc549
    933e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9342:	2200      	movs	r2, #0
    9344:	701a      	strb	r2, [r3, #0]
    9346:	f24c 5349 	movw	r3, #50505	; 0xc549
    934a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    934e:	781b      	ldrb	r3, [r3, #0]
    9350:	461a      	mov	r2, r3
    9352:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    935a:	7819      	ldrb	r1, [r3, #0]
    935c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9364:	5499      	strb	r1, [r3, r2]
    9366:	f24c 5349 	movw	r3, #50505	; 0xc549
    936a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    936e:	781b      	ldrb	r3, [r3, #0]
    9370:	3301      	adds	r3, #1
    9372:	b2da      	uxtb	r2, r3
    9374:	f24c 5349 	movw	r3, #50505	; 0xc549
    9378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    937c:	701a      	strb	r2, [r3, #0]
    937e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9386:	781b      	ldrb	r3, [r3, #0]
    9388:	2bff      	cmp	r3, #255	; 0xff
    938a:	d105      	bne.n	9398 <send_adc+0x444>
    938c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9394:	2200      	movs	r2, #0
    9396:	701a      	strb	r2, [r3, #0]
    9398:	f242 0339 	movw	r3, #8249	; 0x2039
    939c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a0:	781b      	ldrb	r3, [r3, #0]
    93a2:	b2db      	uxtb	r3, r3
    93a4:	f003 0310 	and.w	r3, r3, #16
    93a8:	2b00      	cmp	r3, #0
    93aa:	d15a      	bne.n	9462 <send_adc+0x50e>
    93ac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b4:	781b      	ldrb	r3, [r3, #0]
    93b6:	b2db      	uxtb	r3, r3
    93b8:	461a      	mov	r2, r3
    93ba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    93be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93c2:	5c9a      	ldrb	r2, [r3, r2]
    93c4:	f24c 634b 	movw	r3, #50763	; 0xc64b
    93c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93cc:	701a      	strb	r2, [r3, #0]
    93ce:	f24c 634c 	movw	r3, #50764	; 0xc64c
    93d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d6:	2200      	movs	r2, #0
    93d8:	701a      	strb	r2, [r3, #0]
    93da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93e2:	781b      	ldrb	r3, [r3, #0]
    93e4:	b2db      	uxtb	r3, r3
    93e6:	3301      	adds	r3, #1
    93e8:	b2da      	uxtb	r2, r3
    93ea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f2:	701a      	strb	r2, [r3, #0]
    93f4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93fc:	781b      	ldrb	r3, [r3, #0]
    93fe:	b2db      	uxtb	r3, r3
    9400:	2bff      	cmp	r3, #255	; 0xff
    9402:	d105      	bne.n	9410 <send_adc+0x4bc>
    9404:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    940c:	2200      	movs	r2, #0
    940e:	701a      	strb	r2, [r3, #0]
    9410:	f242 0338 	movw	r3, #8248	; 0x2038
    9414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9418:	f242 0238 	movw	r2, #8248	; 0x2038
    941c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9420:	7812      	ldrb	r2, [r2, #0]
    9422:	b2d2      	uxtb	r2, r2
    9424:	f042 0201 	orr.w	r2, r2, #1
    9428:	b2d2      	uxtb	r2, r2
    942a:	701a      	strb	r2, [r3, #0]
    942c:	f242 0339 	movw	r3, #8249	; 0x2039
    9430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9434:	f242 0239 	movw	r2, #8249	; 0x2039
    9438:	f2c2 0200 	movt	r2, #8192	; 0x2000
    943c:	7812      	ldrb	r2, [r2, #0]
    943e:	b2d2      	uxtb	r2, r2
    9440:	f042 0210 	orr.w	r2, r2, #16
    9444:	b2d2      	uxtb	r2, r2
    9446:	701a      	strb	r2, [r3, #0]
    9448:	e00b      	b.n	9462 <send_adc+0x50e>
    944a:	f24c 5348 	movw	r3, #50504	; 0xc548
    944e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9452:	781b      	ldrb	r3, [r3, #0]
    9454:	3301      	adds	r3, #1
    9456:	b2da      	uxtb	r2, r3
    9458:	f24c 5348 	movw	r3, #50504	; 0xc548
    945c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9460:	701a      	strb	r2, [r3, #0]
}
    9462:	46bd      	mov	sp, r7
    9464:	f85d 7b04 	ldr.w	r7, [sp], #4
    9468:	4770      	bx	lr
    946a:	bf00      	nop
    946c:	2004c7e9 	.word	0x2004c7e9
    9470:	2004c7eb 	.word	0x2004c7eb

00009474 <send_settings>:
void send_settings(void){ //500ms
    9474:	b480      	push	{r7}
    9476:	af00      	add	r7, sp, #0
  if(!boot)
    9478:	f240 533d 	movw	r3, #1341	; 0x53d
    947c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9480:	781b      	ldrb	r3, [r3, #0]
    9482:	2b00      	cmp	r3, #0
    9484:	f040 83fb 	bne.w	9c7e <send_settings+0x80a>
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9488:	f24c 5341 	movw	r3, #50497	; 0xc541
    948c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9490:	781a      	ldrb	r2, [r3, #0]
    9492:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9496:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    949a:	fba3 1302 	umull	r1, r3, r3, r2
    949e:	0899      	lsrs	r1, r3, #2
    94a0:	460b      	mov	r3, r1
    94a2:	009b      	lsls	r3, r3, #2
    94a4:	440b      	add	r3, r1
    94a6:	1ad3      	subs	r3, r2, r3
    94a8:	b2db      	uxtb	r3, r3
    94aa:	2b02      	cmp	r3, #2
    94ac:	f040 83e7 	bne.w	9c7e <send_settings+0x80a>
    94b0:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    94b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b8:	781b      	ldrb	r3, [r3, #0]
    94ba:	2b00      	cmp	r3, #0
    94bc:	f000 83df 	beq.w	9c7e <send_settings+0x80a>
    94c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    94c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94c8:	781a      	ldrb	r2, [r3, #0]
    94ca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    94ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d2:	781b      	ldrb	r3, [r3, #0]
    94d4:	b2db      	uxtb	r3, r3
    94d6:	429a      	cmp	r2, r3
    94d8:	d313      	bcc.n	9502 <send_settings+0x8e>
    94da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    94de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e2:	781b      	ldrb	r3, [r3, #0]
    94e4:	b2db      	uxtb	r3, r3
    94e6:	461a      	mov	r2, r3
    94e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    94ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f0:	781b      	ldrb	r3, [r3, #0]
    94f2:	1ad3      	subs	r3, r2, r3
    94f4:	33ff      	adds	r3, #255	; 0xff
    94f6:	2b0d      	cmp	r3, #13
    94f8:	bfd4      	ite	le
    94fa:	2300      	movle	r3, #0
    94fc:	2301      	movgt	r3, #1
    94fe:	b2db      	uxtb	r3, r3
    9500:	e011      	b.n	9526 <send_settings+0xb2>
    9502:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    950a:	781b      	ldrb	r3, [r3, #0]
    950c:	b2db      	uxtb	r3, r3
    950e:	461a      	mov	r2, r3
    9510:	f24c 5349 	movw	r3, #50505	; 0xc549
    9514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	1ad3      	subs	r3, r2, r3
    951c:	2b0d      	cmp	r3, #13
    951e:	bfd4      	ite	le
    9520:	2300      	movle	r3, #0
    9522:	2301      	movgt	r3, #1
    9524:	b2db      	uxtb	r3, r3
    9526:	2b00      	cmp	r3, #0
    9528:	f000 839d 	beq.w	9c66 <send_settings+0x7f2>
    952c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9534:	781b      	ldrb	r3, [r3, #0]
    9536:	461a      	mov	r2, r3
    9538:	f24c 534c 	movw	r3, #50508	; 0xc54c
    953c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9540:	2105      	movs	r1, #5
    9542:	5499      	strb	r1, [r3, r2]
    9544:	f24c 5349 	movw	r3, #50505	; 0xc549
    9548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    954c:	781b      	ldrb	r3, [r3, #0]
    954e:	3301      	adds	r3, #1
    9550:	b2da      	uxtb	r2, r3
    9552:	f24c 5349 	movw	r3, #50505	; 0xc549
    9556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    955a:	701a      	strb	r2, [r3, #0]
    955c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9564:	781b      	ldrb	r3, [r3, #0]
    9566:	2bff      	cmp	r3, #255	; 0xff
    9568:	d105      	bne.n	9576 <send_settings+0x102>
    956a:	f24c 5349 	movw	r3, #50505	; 0xc549
    956e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9572:	2200      	movs	r2, #0
    9574:	701a      	strb	r2, [r3, #0]
    9576:	f24c 5349 	movw	r3, #50505	; 0xc549
    957a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    957e:	781b      	ldrb	r3, [r3, #0]
    9580:	461a      	mov	r2, r3
    9582:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    958a:	2111      	movs	r1, #17
    958c:	5499      	strb	r1, [r3, r2]
    958e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9596:	781b      	ldrb	r3, [r3, #0]
    9598:	3301      	adds	r3, #1
    959a:	b2da      	uxtb	r2, r3
    959c:	f24c 5349 	movw	r3, #50505	; 0xc549
    95a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a4:	701a      	strb	r2, [r3, #0]
    95a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    95aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ae:	781b      	ldrb	r3, [r3, #0]
    95b0:	2bff      	cmp	r3, #255	; 0xff
    95b2:	d105      	bne.n	95c0 <send_settings+0x14c>
    95b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    95b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95bc:	2200      	movs	r2, #0
    95be:	701a      	strb	r2, [r3, #0]
    95c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    95c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c8:	2211      	movs	r2, #17
    95ca:	701a      	strb	r2, [r3, #0]
    95cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    95d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d4:	2211      	movs	r2, #17
    95d6:	701a      	strb	r2, [r3, #0]
    95d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    95dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e0:	781b      	ldrb	r3, [r3, #0]
    95e2:	461a      	mov	r2, r3
    95e4:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    95e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ec:	7819      	ldrb	r1, [r3, #0]
    95ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    95f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f6:	5499      	strb	r1, [r3, r2]
    95f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    95fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9600:	781a      	ldrb	r2, [r3, #0]
    9602:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    9606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    960a:	781b      	ldrb	r3, [r3, #0]
    960c:	4413      	add	r3, r2
    960e:	b2da      	uxtb	r2, r3
    9610:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9618:	701a      	strb	r2, [r3, #0]
    961a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    961e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9622:	781a      	ldrb	r2, [r3, #0]
    9624:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962c:	781b      	ldrb	r3, [r3, #0]
    962e:	4413      	add	r3, r2
    9630:	b2da      	uxtb	r2, r3
    9632:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    963a:	701a      	strb	r2, [r3, #0]
    963c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9644:	781b      	ldrb	r3, [r3, #0]
    9646:	3301      	adds	r3, #1
    9648:	b2da      	uxtb	r2, r3
    964a:	f24c 5349 	movw	r3, #50505	; 0xc549
    964e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9652:	701a      	strb	r2, [r3, #0]
    9654:	f24c 5349 	movw	r3, #50505	; 0xc549
    9658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    965c:	781b      	ldrb	r3, [r3, #0]
    965e:	2bff      	cmp	r3, #255	; 0xff
    9660:	d105      	bne.n	966e <send_settings+0x1fa>
    9662:	f24c 5349 	movw	r3, #50505	; 0xc549
    9666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    966a:	2200      	movs	r2, #0
    966c:	701a      	strb	r2, [r3, #0]
    966e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9676:	781b      	ldrb	r3, [r3, #0]
    9678:	461a      	mov	r2, r3
    967a:	f24c 5338 	movw	r3, #50488	; 0xc538
    967e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9682:	7819      	ldrb	r1, [r3, #0]
    9684:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    968c:	5499      	strb	r1, [r3, r2]
    968e:	f24c 5338 	movw	r3, #50488	; 0xc538
    9692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9696:	781a      	ldrb	r2, [r3, #0]
    9698:	f24c 634d 	movw	r3, #50765	; 0xc64d
    969c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a0:	781b      	ldrb	r3, [r3, #0]
    96a2:	4413      	add	r3, r2
    96a4:	b2da      	uxtb	r2, r3
    96a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ae:	701a      	strb	r2, [r3, #0]
    96b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    96b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b8:	781a      	ldrb	r2, [r3, #0]
    96ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c2:	781b      	ldrb	r3, [r3, #0]
    96c4:	4413      	add	r3, r2
    96c6:	b2da      	uxtb	r2, r3
    96c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    96cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d0:	701a      	strb	r2, [r3, #0]
    96d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    96d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96da:	781b      	ldrb	r3, [r3, #0]
    96dc:	3301      	adds	r3, #1
    96de:	b2da      	uxtb	r2, r3
    96e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    96e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e8:	701a      	strb	r2, [r3, #0]
    96ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    96ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f2:	781b      	ldrb	r3, [r3, #0]
    96f4:	2bff      	cmp	r3, #255	; 0xff
    96f6:	d105      	bne.n	9704 <send_settings+0x290>
    96f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    96fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9700:	2200      	movs	r2, #0
    9702:	701a      	strb	r2, [r3, #0]
    9704:	f24c 5349 	movw	r3, #50505	; 0xc549
    9708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    970c:	781b      	ldrb	r3, [r3, #0]
    970e:	461a      	mov	r2, r3
    9710:	f24c 5338 	movw	r3, #50488	; 0xc538
    9714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9718:	7859      	ldrb	r1, [r3, #1]
    971a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    971e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9722:	5499      	strb	r1, [r3, r2]
    9724:	4bd1      	ldr	r3, [pc, #836]	; (9a6c <send_settings+0x5f8>)
    9726:	781a      	ldrb	r2, [r3, #0]
    9728:	f24c 634d 	movw	r3, #50765	; 0xc64d
    972c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9730:	781b      	ldrb	r3, [r3, #0]
    9732:	4413      	add	r3, r2
    9734:	b2da      	uxtb	r2, r3
    9736:	f24c 634d 	movw	r3, #50765	; 0xc64d
    973a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    973e:	701a      	strb	r2, [r3, #0]
    9740:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9748:	781a      	ldrb	r2, [r3, #0]
    974a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    974e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9752:	781b      	ldrb	r3, [r3, #0]
    9754:	4413      	add	r3, r2
    9756:	b2da      	uxtb	r2, r3
    9758:	f24c 634e 	movw	r3, #50766	; 0xc64e
    975c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9760:	701a      	strb	r2, [r3, #0]
    9762:	f24c 5349 	movw	r3, #50505	; 0xc549
    9766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    976a:	781b      	ldrb	r3, [r3, #0]
    976c:	3301      	adds	r3, #1
    976e:	b2da      	uxtb	r2, r3
    9770:	f24c 5349 	movw	r3, #50505	; 0xc549
    9774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9778:	701a      	strb	r2, [r3, #0]
    977a:	f24c 5349 	movw	r3, #50505	; 0xc549
    977e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9782:	781b      	ldrb	r3, [r3, #0]
    9784:	2bff      	cmp	r3, #255	; 0xff
    9786:	d105      	bne.n	9794 <send_settings+0x320>
    9788:	f24c 5349 	movw	r3, #50505	; 0xc549
    978c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9790:	2200      	movs	r2, #0
    9792:	701a      	strb	r2, [r3, #0]
    9794:	f24c 5349 	movw	r3, #50505	; 0xc549
    9798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    979c:	781b      	ldrb	r3, [r3, #0]
    979e:	461a      	mov	r2, r3
    97a0:	f24c 5338 	movw	r3, #50488	; 0xc538
    97a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a8:	7899      	ldrb	r1, [r3, #2]
    97aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    97ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b2:	5499      	strb	r1, [r3, r2]
    97b4:	4bae      	ldr	r3, [pc, #696]	; (9a70 <send_settings+0x5fc>)
    97b6:	781a      	ldrb	r2, [r3, #0]
    97b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c0:	781b      	ldrb	r3, [r3, #0]
    97c2:	4413      	add	r3, r2
    97c4:	b2da      	uxtb	r2, r3
    97c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ce:	701a      	strb	r2, [r3, #0]
    97d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    97d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d8:	781a      	ldrb	r2, [r3, #0]
    97da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e2:	781b      	ldrb	r3, [r3, #0]
    97e4:	4413      	add	r3, r2
    97e6:	b2da      	uxtb	r2, r3
    97e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    97ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f0:	701a      	strb	r2, [r3, #0]
    97f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    97f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97fa:	781b      	ldrb	r3, [r3, #0]
    97fc:	3301      	adds	r3, #1
    97fe:	b2da      	uxtb	r2, r3
    9800:	f24c 5349 	movw	r3, #50505	; 0xc549
    9804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9808:	701a      	strb	r2, [r3, #0]
    980a:	f24c 5349 	movw	r3, #50505	; 0xc549
    980e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9812:	781b      	ldrb	r3, [r3, #0]
    9814:	2bff      	cmp	r3, #255	; 0xff
    9816:	d105      	bne.n	9824 <send_settings+0x3b0>
    9818:	f24c 5349 	movw	r3, #50505	; 0xc549
    981c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9820:	2200      	movs	r2, #0
    9822:	701a      	strb	r2, [r3, #0]
    9824:	f24c 5349 	movw	r3, #50505	; 0xc549
    9828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    982c:	781b      	ldrb	r3, [r3, #0]
    982e:	461a      	mov	r2, r3
    9830:	f24c 5338 	movw	r3, #50488	; 0xc538
    9834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9838:	78d9      	ldrb	r1, [r3, #3]
    983a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    983e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9842:	5499      	strb	r1, [r3, r2]
    9844:	4b8b      	ldr	r3, [pc, #556]	; (9a74 <send_settings+0x600>)
    9846:	781a      	ldrb	r2, [r3, #0]
    9848:	f24c 634d 	movw	r3, #50765	; 0xc64d
    984c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9850:	781b      	ldrb	r3, [r3, #0]
    9852:	4413      	add	r3, r2
    9854:	b2da      	uxtb	r2, r3
    9856:	f24c 634d 	movw	r3, #50765	; 0xc64d
    985a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    985e:	701a      	strb	r2, [r3, #0]
    9860:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9868:	781a      	ldrb	r2, [r3, #0]
    986a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    986e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9872:	781b      	ldrb	r3, [r3, #0]
    9874:	4413      	add	r3, r2
    9876:	b2da      	uxtb	r2, r3
    9878:	f24c 634e 	movw	r3, #50766	; 0xc64e
    987c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9880:	701a      	strb	r2, [r3, #0]
    9882:	f24c 5349 	movw	r3, #50505	; 0xc549
    9886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    988a:	781b      	ldrb	r3, [r3, #0]
    988c:	3301      	adds	r3, #1
    988e:	b2da      	uxtb	r2, r3
    9890:	f24c 5349 	movw	r3, #50505	; 0xc549
    9894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9898:	701a      	strb	r2, [r3, #0]
    989a:	f24c 5349 	movw	r3, #50505	; 0xc549
    989e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a2:	781b      	ldrb	r3, [r3, #0]
    98a4:	2bff      	cmp	r3, #255	; 0xff
    98a6:	d105      	bne.n	98b4 <send_settings+0x440>
    98a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    98ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b0:	2200      	movs	r2, #0
    98b2:	701a      	strb	r2, [r3, #0]
    98b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    98b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98bc:	781b      	ldrb	r3, [r3, #0]
    98be:	461a      	mov	r2, r3
    98c0:	f24c 533c 	movw	r3, #50492	; 0xc53c
    98c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c8:	7819      	ldrb	r1, [r3, #0]
    98ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    98ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d2:	5499      	strb	r1, [r3, r2]
    98d4:	f24c 533c 	movw	r3, #50492	; 0xc53c
    98d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98dc:	781a      	ldrb	r2, [r3, #0]
    98de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e6:	781b      	ldrb	r3, [r3, #0]
    98e8:	4413      	add	r3, r2
    98ea:	b2da      	uxtb	r2, r3
    98ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f4:	701a      	strb	r2, [r3, #0]
    98f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    98fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98fe:	781a      	ldrb	r2, [r3, #0]
    9900:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9908:	781b      	ldrb	r3, [r3, #0]
    990a:	4413      	add	r3, r2
    990c:	b2da      	uxtb	r2, r3
    990e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9916:	701a      	strb	r2, [r3, #0]
    9918:	f24c 5349 	movw	r3, #50505	; 0xc549
    991c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9920:	781b      	ldrb	r3, [r3, #0]
    9922:	3301      	adds	r3, #1
    9924:	b2da      	uxtb	r2, r3
    9926:	f24c 5349 	movw	r3, #50505	; 0xc549
    992a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    992e:	701a      	strb	r2, [r3, #0]
    9930:	f24c 5349 	movw	r3, #50505	; 0xc549
    9934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9938:	781b      	ldrb	r3, [r3, #0]
    993a:	2bff      	cmp	r3, #255	; 0xff
    993c:	d105      	bne.n	994a <send_settings+0x4d6>
    993e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9946:	2200      	movs	r2, #0
    9948:	701a      	strb	r2, [r3, #0]
    994a:	f24c 5349 	movw	r3, #50505	; 0xc549
    994e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9952:	781b      	ldrb	r3, [r3, #0]
    9954:	461a      	mov	r2, r3
    9956:	f24c 533c 	movw	r3, #50492	; 0xc53c
    995a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    995e:	7859      	ldrb	r1, [r3, #1]
    9960:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9968:	5499      	strb	r1, [r3, r2]
    996a:	4b43      	ldr	r3, [pc, #268]	; (9a78 <send_settings+0x604>)
    996c:	781a      	ldrb	r2, [r3, #0]
    996e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9976:	781b      	ldrb	r3, [r3, #0]
    9978:	4413      	add	r3, r2
    997a:	b2da      	uxtb	r2, r3
    997c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9984:	701a      	strb	r2, [r3, #0]
    9986:	f24c 634e 	movw	r3, #50766	; 0xc64e
    998a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    998e:	781a      	ldrb	r2, [r3, #0]
    9990:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9998:	781b      	ldrb	r3, [r3, #0]
    999a:	4413      	add	r3, r2
    999c:	b2da      	uxtb	r2, r3
    999e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a6:	701a      	strb	r2, [r3, #0]
    99a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    99ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b0:	781b      	ldrb	r3, [r3, #0]
    99b2:	3301      	adds	r3, #1
    99b4:	b2da      	uxtb	r2, r3
    99b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    99ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99be:	701a      	strb	r2, [r3, #0]
    99c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    99c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c8:	781b      	ldrb	r3, [r3, #0]
    99ca:	2bff      	cmp	r3, #255	; 0xff
    99cc:	d105      	bne.n	99da <send_settings+0x566>
    99ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    99d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d6:	2200      	movs	r2, #0
    99d8:	701a      	strb	r2, [r3, #0]
    99da:	f24c 5349 	movw	r3, #50505	; 0xc549
    99de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	461a      	mov	r2, r3
    99e6:	f24c 533c 	movw	r3, #50492	; 0xc53c
    99ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ee:	7899      	ldrb	r1, [r3, #2]
    99f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    99f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f8:	5499      	strb	r1, [r3, r2]
    99fa:	4b20      	ldr	r3, [pc, #128]	; (9a7c <send_settings+0x608>)
    99fc:	781a      	ldrb	r2, [r3, #0]
    99fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a06:	781b      	ldrb	r3, [r3, #0]
    9a08:	4413      	add	r3, r2
    9a0a:	b2da      	uxtb	r2, r3
    9a0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a14:	701a      	strb	r2, [r3, #0]
    9a16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a1e:	781a      	ldrb	r2, [r3, #0]
    9a20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a28:	781b      	ldrb	r3, [r3, #0]
    9a2a:	4413      	add	r3, r2
    9a2c:	b2da      	uxtb	r2, r3
    9a2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a36:	701a      	strb	r2, [r3, #0]
    9a38:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a40:	781b      	ldrb	r3, [r3, #0]
    9a42:	3301      	adds	r3, #1
    9a44:	b2da      	uxtb	r2, r3
    9a46:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a4e:	701a      	strb	r2, [r3, #0]
    9a50:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a58:	781b      	ldrb	r3, [r3, #0]
    9a5a:	2bff      	cmp	r3, #255	; 0xff
    9a5c:	d110      	bne.n	9a80 <send_settings+0x60c>
    9a5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a66:	2200      	movs	r2, #0
    9a68:	701a      	strb	r2, [r3, #0]
    9a6a:	e009      	b.n	9a80 <send_settings+0x60c>
    9a6c:	2004c539 	.word	0x2004c539
    9a70:	2004c53a 	.word	0x2004c53a
    9a74:	2004c53b 	.word	0x2004c53b
    9a78:	2004c53d 	.word	0x2004c53d
    9a7c:	2004c53e 	.word	0x2004c53e
    9a80:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a88:	781b      	ldrb	r3, [r3, #0]
    9a8a:	461a      	mov	r2, r3
    9a8c:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a94:	78d9      	ldrb	r1, [r3, #3]
    9a96:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9e:	5499      	strb	r1, [r3, r2]
    9aa0:	4b79      	ldr	r3, [pc, #484]	; (9c88 <send_settings+0x814>)
    9aa2:	781a      	ldrb	r2, [r3, #0]
    9aa4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aac:	781b      	ldrb	r3, [r3, #0]
    9aae:	4413      	add	r3, r2
    9ab0:	b2da      	uxtb	r2, r3
    9ab2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aba:	701a      	strb	r2, [r3, #0]
    9abc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac4:	781a      	ldrb	r2, [r3, #0]
    9ac6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ace:	781b      	ldrb	r3, [r3, #0]
    9ad0:	4413      	add	r3, r2
    9ad2:	b2da      	uxtb	r2, r3
    9ad4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9adc:	701a      	strb	r2, [r3, #0]
    9ade:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae6:	781b      	ldrb	r3, [r3, #0]
    9ae8:	3301      	adds	r3, #1
    9aea:	b2da      	uxtb	r2, r3
    9aec:	f24c 5349 	movw	r3, #50505	; 0xc549
    9af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af4:	701a      	strb	r2, [r3, #0]
    9af6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afe:	781b      	ldrb	r3, [r3, #0]
    9b00:	2bff      	cmp	r3, #255	; 0xff
    9b02:	d105      	bne.n	9b10 <send_settings+0x69c>
    9b04:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b0c:	2200      	movs	r2, #0
    9b0e:	701a      	strb	r2, [r3, #0]
    9b10:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b18:	781b      	ldrb	r3, [r3, #0]
    9b1a:	461a      	mov	r2, r3
    9b1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b24:	7819      	ldrb	r1, [r3, #0]
    9b26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b2e:	5499      	strb	r1, [r3, r2]
    9b30:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b38:	781b      	ldrb	r3, [r3, #0]
    9b3a:	3301      	adds	r3, #1
    9b3c:	b2da      	uxtb	r2, r3
    9b3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b46:	701a      	strb	r2, [r3, #0]
    9b48:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b50:	781b      	ldrb	r3, [r3, #0]
    9b52:	2bff      	cmp	r3, #255	; 0xff
    9b54:	d105      	bne.n	9b62 <send_settings+0x6ee>
    9b56:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b5e:	2200      	movs	r2, #0
    9b60:	701a      	strb	r2, [r3, #0]
    9b62:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6a:	781b      	ldrb	r3, [r3, #0]
    9b6c:	461a      	mov	r2, r3
    9b6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b76:	7819      	ldrb	r1, [r3, #0]
    9b78:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b80:	5499      	strb	r1, [r3, r2]
    9b82:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b8a:	781b      	ldrb	r3, [r3, #0]
    9b8c:	3301      	adds	r3, #1
    9b8e:	b2da      	uxtb	r2, r3
    9b90:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b98:	701a      	strb	r2, [r3, #0]
    9b9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba2:	781b      	ldrb	r3, [r3, #0]
    9ba4:	2bff      	cmp	r3, #255	; 0xff
    9ba6:	d105      	bne.n	9bb4 <send_settings+0x740>
    9ba8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb0:	2200      	movs	r2, #0
    9bb2:	701a      	strb	r2, [r3, #0]
    9bb4:	f242 0339 	movw	r3, #8249	; 0x2039
    9bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bbc:	781b      	ldrb	r3, [r3, #0]
    9bbe:	b2db      	uxtb	r3, r3
    9bc0:	f003 0310 	and.w	r3, r3, #16
    9bc4:	2b00      	cmp	r3, #0
    9bc6:	d15a      	bne.n	9c7e <send_settings+0x80a>
    9bc8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd0:	781b      	ldrb	r3, [r3, #0]
    9bd2:	b2db      	uxtb	r3, r3
    9bd4:	461a      	mov	r2, r3
    9bd6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bde:	5c9a      	ldrb	r2, [r3, r2]
    9be0:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be8:	701a      	strb	r2, [r3, #0]
    9bea:	f24c 634c 	movw	r3, #50764	; 0xc64c
    9bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf2:	2200      	movs	r2, #0
    9bf4:	701a      	strb	r2, [r3, #0]
    9bf6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bfe:	781b      	ldrb	r3, [r3, #0]
    9c00:	b2db      	uxtb	r3, r3
    9c02:	3301      	adds	r3, #1
    9c04:	b2da      	uxtb	r2, r3
    9c06:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c0e:	701a      	strb	r2, [r3, #0]
    9c10:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c18:	781b      	ldrb	r3, [r3, #0]
    9c1a:	b2db      	uxtb	r3, r3
    9c1c:	2bff      	cmp	r3, #255	; 0xff
    9c1e:	d105      	bne.n	9c2c <send_settings+0x7b8>
    9c20:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c28:	2200      	movs	r2, #0
    9c2a:	701a      	strb	r2, [r3, #0]
    9c2c:	f242 0338 	movw	r3, #8248	; 0x2038
    9c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c34:	f242 0238 	movw	r2, #8248	; 0x2038
    9c38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9c3c:	7812      	ldrb	r2, [r2, #0]
    9c3e:	b2d2      	uxtb	r2, r2
    9c40:	f042 0201 	orr.w	r2, r2, #1
    9c44:	b2d2      	uxtb	r2, r2
    9c46:	701a      	strb	r2, [r3, #0]
    9c48:	f242 0339 	movw	r3, #8249	; 0x2039
    9c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c50:	f242 0239 	movw	r2, #8249	; 0x2039
    9c54:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9c58:	7812      	ldrb	r2, [r2, #0]
    9c5a:	b2d2      	uxtb	r2, r2
    9c5c:	f042 0210 	orr.w	r2, r2, #16
    9c60:	b2d2      	uxtb	r2, r2
    9c62:	701a      	strb	r2, [r3, #0]
    9c64:	e00b      	b.n	9c7e <send_settings+0x80a>
    9c66:	f24c 5348 	movw	r3, #50504	; 0xc548
    9c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c6e:	781b      	ldrb	r3, [r3, #0]
    9c70:	3301      	adds	r3, #1
    9c72:	b2da      	uxtb	r2, r3
    9c74:	f24c 5348 	movw	r3, #50504	; 0xc548
    9c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c7c:	701a      	strb	r2, [r3, #0]
}
    9c7e:	46bd      	mov	sp, r7
    9c80:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c84:	4770      	bx	lr
    9c86:	bf00      	nop
    9c88:	2004c53f 	.word	0x2004c53f

00009c8c <send_desired>:
void send_desired(void){  //1000ms
    9c8c:	b480      	push	{r7}
    9c8e:	af00      	add	r7, sp, #0
  if(!boot)
    9c90:	f240 533d 	movw	r3, #1341	; 0x53d
    9c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c98:	781b      	ldrb	r3, [r3, #0]
    9c9a:	2b00      	cmp	r3, #0
    9c9c:	f040 8727 	bne.w	aaee <send_desired+0xe62>
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9ca0:	f24c 5341 	movw	r3, #50497	; 0xc541
    9ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca8:	781a      	ldrb	r2, [r3, #0]
    9caa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9cae:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9cb2:	fba3 1302 	umull	r1, r3, r3, r2
    9cb6:	08d9      	lsrs	r1, r3, #3
    9cb8:	460b      	mov	r3, r1
    9cba:	009b      	lsls	r3, r3, #2
    9cbc:	440b      	add	r3, r1
    9cbe:	005b      	lsls	r3, r3, #1
    9cc0:	1ad3      	subs	r3, r2, r3
    9cc2:	b2db      	uxtb	r3, r3
    9cc4:	2b03      	cmp	r3, #3
    9cc6:	f040 8712 	bne.w	aaee <send_desired+0xe62>
    9cca:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd2:	781a      	ldrb	r2, [r3, #0]
    9cd4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cdc:	781b      	ldrb	r3, [r3, #0]
    9cde:	b2db      	uxtb	r3, r3
    9ce0:	429a      	cmp	r2, r3
    9ce2:	d313      	bcc.n	9d0c <send_desired+0x80>
    9ce4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cec:	781b      	ldrb	r3, [r3, #0]
    9cee:	b2db      	uxtb	r3, r3
    9cf0:	461a      	mov	r2, r3
    9cf2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cfa:	781b      	ldrb	r3, [r3, #0]
    9cfc:	1ad3      	subs	r3, r2, r3
    9cfe:	33ff      	adds	r3, #255	; 0xff
    9d00:	2b18      	cmp	r3, #24
    9d02:	bfd4      	ite	le
    9d04:	2300      	movle	r3, #0
    9d06:	2301      	movgt	r3, #1
    9d08:	b2db      	uxtb	r3, r3
    9d0a:	e011      	b.n	9d30 <send_desired+0xa4>
    9d0c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d14:	781b      	ldrb	r3, [r3, #0]
    9d16:	b2db      	uxtb	r3, r3
    9d18:	461a      	mov	r2, r3
    9d1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d22:	781b      	ldrb	r3, [r3, #0]
    9d24:	1ad3      	subs	r3, r2, r3
    9d26:	2b18      	cmp	r3, #24
    9d28:	bfd4      	ite	le
    9d2a:	2300      	movle	r3, #0
    9d2c:	2301      	movgt	r3, #1
    9d2e:	b2db      	uxtb	r3, r3
    9d30:	2b00      	cmp	r3, #0
    9d32:	f000 86d0 	beq.w	aad6 <send_desired+0xe4a>
    9d36:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d3e:	781b      	ldrb	r3, [r3, #0]
    9d40:	461a      	mov	r2, r3
    9d42:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4a:	2105      	movs	r1, #5
    9d4c:	5499      	strb	r1, [r3, r2]
    9d4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d56:	781b      	ldrb	r3, [r3, #0]
    9d58:	3301      	adds	r3, #1
    9d5a:	b2da      	uxtb	r2, r3
    9d5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d64:	701a      	strb	r2, [r3, #0]
    9d66:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d6e:	781b      	ldrb	r3, [r3, #0]
    9d70:	2bff      	cmp	r3, #255	; 0xff
    9d72:	d105      	bne.n	9d80 <send_desired+0xf4>
    9d74:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d7c:	2200      	movs	r2, #0
    9d7e:	701a      	strb	r2, [r3, #0]
    9d80:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d88:	781b      	ldrb	r3, [r3, #0]
    9d8a:	461a      	mov	r2, r3
    9d8c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d94:	2112      	movs	r1, #18
    9d96:	5499      	strb	r1, [r3, r2]
    9d98:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da0:	781b      	ldrb	r3, [r3, #0]
    9da2:	3301      	adds	r3, #1
    9da4:	b2da      	uxtb	r2, r3
    9da6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dae:	701a      	strb	r2, [r3, #0]
    9db0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db8:	781b      	ldrb	r3, [r3, #0]
    9dba:	2bff      	cmp	r3, #255	; 0xff
    9dbc:	d105      	bne.n	9dca <send_desired+0x13e>
    9dbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc6:	2200      	movs	r2, #0
    9dc8:	701a      	strb	r2, [r3, #0]
    9dca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd2:	2212      	movs	r2, #18
    9dd4:	701a      	strb	r2, [r3, #0]
    9dd6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dde:	2212      	movs	r2, #18
    9de0:	701a      	strb	r2, [r3, #0]
    9de2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dea:	781b      	ldrb	r3, [r3, #0]
    9dec:	461a      	mov	r2, r3
    9dee:	f64c 0374 	movw	r3, #51316	; 0xc874
    9df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df6:	7819      	ldrb	r1, [r3, #0]
    9df8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e00:	5499      	strb	r1, [r3, r2]
    9e02:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e0a:	781a      	ldrb	r2, [r3, #0]
    9e0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e14:	781b      	ldrb	r3, [r3, #0]
    9e16:	4413      	add	r3, r2
    9e18:	b2da      	uxtb	r2, r3
    9e1a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e22:	701a      	strb	r2, [r3, #0]
    9e24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2c:	781a      	ldrb	r2, [r3, #0]
    9e2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e36:	781b      	ldrb	r3, [r3, #0]
    9e38:	4413      	add	r3, r2
    9e3a:	b2da      	uxtb	r2, r3
    9e3c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e44:	701a      	strb	r2, [r3, #0]
    9e46:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4e:	781b      	ldrb	r3, [r3, #0]
    9e50:	3301      	adds	r3, #1
    9e52:	b2da      	uxtb	r2, r3
    9e54:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e5c:	701a      	strb	r2, [r3, #0]
    9e5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e66:	781b      	ldrb	r3, [r3, #0]
    9e68:	2bff      	cmp	r3, #255	; 0xff
    9e6a:	d105      	bne.n	9e78 <send_desired+0x1ec>
    9e6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e74:	2200      	movs	r2, #0
    9e76:	701a      	strb	r2, [r3, #0]
    9e78:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e80:	781b      	ldrb	r3, [r3, #0]
    9e82:	461a      	mov	r2, r3
    9e84:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8c:	7859      	ldrb	r1, [r3, #1]
    9e8e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e96:	5499      	strb	r1, [r3, r2]
    9e98:	4bd1      	ldr	r3, [pc, #836]	; (a1e0 <send_desired+0x554>)
    9e9a:	781a      	ldrb	r2, [r3, #0]
    9e9c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea4:	781b      	ldrb	r3, [r3, #0]
    9ea6:	4413      	add	r3, r2
    9ea8:	b2da      	uxtb	r2, r3
    9eaa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb2:	701a      	strb	r2, [r3, #0]
    9eb4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ebc:	781a      	ldrb	r2, [r3, #0]
    9ebe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec6:	781b      	ldrb	r3, [r3, #0]
    9ec8:	4413      	add	r3, r2
    9eca:	b2da      	uxtb	r2, r3
    9ecc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed4:	701a      	strb	r2, [r3, #0]
    9ed6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ede:	781b      	ldrb	r3, [r3, #0]
    9ee0:	3301      	adds	r3, #1
    9ee2:	b2da      	uxtb	r2, r3
    9ee4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eec:	701a      	strb	r2, [r3, #0]
    9eee:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef6:	781b      	ldrb	r3, [r3, #0]
    9ef8:	2bff      	cmp	r3, #255	; 0xff
    9efa:	d105      	bne.n	9f08 <send_desired+0x27c>
    9efc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f04:	2200      	movs	r2, #0
    9f06:	701a      	strb	r2, [r3, #0]
    9f08:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f10:	781b      	ldrb	r3, [r3, #0]
    9f12:	461a      	mov	r2, r3
    9f14:	f64c 0374 	movw	r3, #51316	; 0xc874
    9f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f1c:	7899      	ldrb	r1, [r3, #2]
    9f1e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f26:	5499      	strb	r1, [r3, r2]
    9f28:	4bae      	ldr	r3, [pc, #696]	; (a1e4 <send_desired+0x558>)
    9f2a:	781a      	ldrb	r2, [r3, #0]
    9f2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f34:	781b      	ldrb	r3, [r3, #0]
    9f36:	4413      	add	r3, r2
    9f38:	b2da      	uxtb	r2, r3
    9f3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f42:	701a      	strb	r2, [r3, #0]
    9f44:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f4c:	781a      	ldrb	r2, [r3, #0]
    9f4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f56:	781b      	ldrb	r3, [r3, #0]
    9f58:	4413      	add	r3, r2
    9f5a:	b2da      	uxtb	r2, r3
    9f5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f64:	701a      	strb	r2, [r3, #0]
    9f66:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6e:	781b      	ldrb	r3, [r3, #0]
    9f70:	3301      	adds	r3, #1
    9f72:	b2da      	uxtb	r2, r3
    9f74:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f7c:	701a      	strb	r2, [r3, #0]
    9f7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f86:	781b      	ldrb	r3, [r3, #0]
    9f88:	2bff      	cmp	r3, #255	; 0xff
    9f8a:	d105      	bne.n	9f98 <send_desired+0x30c>
    9f8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f94:	2200      	movs	r2, #0
    9f96:	701a      	strb	r2, [r3, #0]
    9f98:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa0:	781b      	ldrb	r3, [r3, #0]
    9fa2:	461a      	mov	r2, r3
    9fa4:	f64c 0374 	movw	r3, #51316	; 0xc874
    9fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fac:	78d9      	ldrb	r1, [r3, #3]
    9fae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb6:	5499      	strb	r1, [r3, r2]
    9fb8:	4b8b      	ldr	r3, [pc, #556]	; (a1e8 <send_desired+0x55c>)
    9fba:	781a      	ldrb	r2, [r3, #0]
    9fbc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc4:	781b      	ldrb	r3, [r3, #0]
    9fc6:	4413      	add	r3, r2
    9fc8:	b2da      	uxtb	r2, r3
    9fca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd2:	701a      	strb	r2, [r3, #0]
    9fd4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fdc:	781a      	ldrb	r2, [r3, #0]
    9fde:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe6:	781b      	ldrb	r3, [r3, #0]
    9fe8:	4413      	add	r3, r2
    9fea:	b2da      	uxtb	r2, r3
    9fec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff4:	701a      	strb	r2, [r3, #0]
    9ff6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ffe:	781b      	ldrb	r3, [r3, #0]
    a000:	3301      	adds	r3, #1
    a002:	b2da      	uxtb	r2, r3
    a004:	f24c 5349 	movw	r3, #50505	; 0xc549
    a008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a00c:	701a      	strb	r2, [r3, #0]
    a00e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a016:	781b      	ldrb	r3, [r3, #0]
    a018:	2bff      	cmp	r3, #255	; 0xff
    a01a:	d105      	bne.n	a028 <send_desired+0x39c>
    a01c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a024:	2200      	movs	r2, #0
    a026:	701a      	strb	r2, [r3, #0]
    a028:	f24c 5349 	movw	r3, #50505	; 0xc549
    a02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a030:	781b      	ldrb	r3, [r3, #0]
    a032:	461a      	mov	r2, r3
    a034:	f64c 0378 	movw	r3, #51320	; 0xc878
    a038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a03c:	7819      	ldrb	r1, [r3, #0]
    a03e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a046:	5499      	strb	r1, [r3, r2]
    a048:	f64c 0378 	movw	r3, #51320	; 0xc878
    a04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a050:	781a      	ldrb	r2, [r3, #0]
    a052:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05a:	781b      	ldrb	r3, [r3, #0]
    a05c:	4413      	add	r3, r2
    a05e:	b2da      	uxtb	r2, r3
    a060:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a068:	701a      	strb	r2, [r3, #0]
    a06a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a072:	781a      	ldrb	r2, [r3, #0]
    a074:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a07c:	781b      	ldrb	r3, [r3, #0]
    a07e:	4413      	add	r3, r2
    a080:	b2da      	uxtb	r2, r3
    a082:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a08a:	701a      	strb	r2, [r3, #0]
    a08c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a094:	781b      	ldrb	r3, [r3, #0]
    a096:	3301      	adds	r3, #1
    a098:	b2da      	uxtb	r2, r3
    a09a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a2:	701a      	strb	r2, [r3, #0]
    a0a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ac:	781b      	ldrb	r3, [r3, #0]
    a0ae:	2bff      	cmp	r3, #255	; 0xff
    a0b0:	d105      	bne.n	a0be <send_desired+0x432>
    a0b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ba:	2200      	movs	r2, #0
    a0bc:	701a      	strb	r2, [r3, #0]
    a0be:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c6:	781b      	ldrb	r3, [r3, #0]
    a0c8:	461a      	mov	r2, r3
    a0ca:	f64c 0378 	movw	r3, #51320	; 0xc878
    a0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d2:	7859      	ldrb	r1, [r3, #1]
    a0d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0dc:	5499      	strb	r1, [r3, r2]
    a0de:	4b43      	ldr	r3, [pc, #268]	; (a1ec <send_desired+0x560>)
    a0e0:	781a      	ldrb	r2, [r3, #0]
    a0e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ea:	781b      	ldrb	r3, [r3, #0]
    a0ec:	4413      	add	r3, r2
    a0ee:	b2da      	uxtb	r2, r3
    a0f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f8:	701a      	strb	r2, [r3, #0]
    a0fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a102:	781a      	ldrb	r2, [r3, #0]
    a104:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10c:	781b      	ldrb	r3, [r3, #0]
    a10e:	4413      	add	r3, r2
    a110:	b2da      	uxtb	r2, r3
    a112:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a11a:	701a      	strb	r2, [r3, #0]
    a11c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a124:	781b      	ldrb	r3, [r3, #0]
    a126:	3301      	adds	r3, #1
    a128:	b2da      	uxtb	r2, r3
    a12a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a132:	701a      	strb	r2, [r3, #0]
    a134:	f24c 5349 	movw	r3, #50505	; 0xc549
    a138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13c:	781b      	ldrb	r3, [r3, #0]
    a13e:	2bff      	cmp	r3, #255	; 0xff
    a140:	d105      	bne.n	a14e <send_desired+0x4c2>
    a142:	f24c 5349 	movw	r3, #50505	; 0xc549
    a146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14a:	2200      	movs	r2, #0
    a14c:	701a      	strb	r2, [r3, #0]
    a14e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a156:	781b      	ldrb	r3, [r3, #0]
    a158:	461a      	mov	r2, r3
    a15a:	f64c 0378 	movw	r3, #51320	; 0xc878
    a15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a162:	7899      	ldrb	r1, [r3, #2]
    a164:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a16c:	5499      	strb	r1, [r3, r2]
    a16e:	4b20      	ldr	r3, [pc, #128]	; (a1f0 <send_desired+0x564>)
    a170:	781a      	ldrb	r2, [r3, #0]
    a172:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a17a:	781b      	ldrb	r3, [r3, #0]
    a17c:	4413      	add	r3, r2
    a17e:	b2da      	uxtb	r2, r3
    a180:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a188:	701a      	strb	r2, [r3, #0]
    a18a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a192:	781a      	ldrb	r2, [r3, #0]
    a194:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19c:	781b      	ldrb	r3, [r3, #0]
    a19e:	4413      	add	r3, r2
    a1a0:	b2da      	uxtb	r2, r3
    a1a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1aa:	701a      	strb	r2, [r3, #0]
    a1ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b4:	781b      	ldrb	r3, [r3, #0]
    a1b6:	3301      	adds	r3, #1
    a1b8:	b2da      	uxtb	r2, r3
    a1ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c2:	701a      	strb	r2, [r3, #0]
    a1c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1cc:	781b      	ldrb	r3, [r3, #0]
    a1ce:	2bff      	cmp	r3, #255	; 0xff
    a1d0:	d110      	bne.n	a1f4 <send_desired+0x568>
    a1d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1da:	2200      	movs	r2, #0
    a1dc:	701a      	strb	r2, [r3, #0]
    a1de:	e009      	b.n	a1f4 <send_desired+0x568>
    a1e0:	2004c875 	.word	0x2004c875
    a1e4:	2004c876 	.word	0x2004c876
    a1e8:	2004c877 	.word	0x2004c877
    a1ec:	2004c879 	.word	0x2004c879
    a1f0:	2004c87a 	.word	0x2004c87a
    a1f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fc:	781b      	ldrb	r3, [r3, #0]
    a1fe:	461a      	mov	r2, r3
    a200:	f64c 0378 	movw	r3, #51320	; 0xc878
    a204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a208:	78d9      	ldrb	r1, [r3, #3]
    a20a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a212:	5499      	strb	r1, [r3, r2]
    a214:	4bd3      	ldr	r3, [pc, #844]	; (a564 <send_desired+0x8d8>)
    a216:	781a      	ldrb	r2, [r3, #0]
    a218:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a220:	781b      	ldrb	r3, [r3, #0]
    a222:	4413      	add	r3, r2
    a224:	b2da      	uxtb	r2, r3
    a226:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22e:	701a      	strb	r2, [r3, #0]
    a230:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a238:	781a      	ldrb	r2, [r3, #0]
    a23a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a242:	781b      	ldrb	r3, [r3, #0]
    a244:	4413      	add	r3, r2
    a246:	b2da      	uxtb	r2, r3
    a248:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a250:	701a      	strb	r2, [r3, #0]
    a252:	f24c 5349 	movw	r3, #50505	; 0xc549
    a256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a25a:	781b      	ldrb	r3, [r3, #0]
    a25c:	3301      	adds	r3, #1
    a25e:	b2da      	uxtb	r2, r3
    a260:	f24c 5349 	movw	r3, #50505	; 0xc549
    a264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a268:	701a      	strb	r2, [r3, #0]
    a26a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a272:	781b      	ldrb	r3, [r3, #0]
    a274:	2bff      	cmp	r3, #255	; 0xff
    a276:	d105      	bne.n	a284 <send_desired+0x5f8>
    a278:	f24c 5349 	movw	r3, #50505	; 0xc549
    a27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a280:	2200      	movs	r2, #0
    a282:	701a      	strb	r2, [r3, #0]
    a284:	f24c 5349 	movw	r3, #50505	; 0xc549
    a288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28c:	781b      	ldrb	r3, [r3, #0]
    a28e:	461a      	mov	r2, r3
    a290:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a298:	7819      	ldrb	r1, [r3, #0]
    a29a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a2:	5499      	strb	r1, [r3, r2]
    a2a4:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ac:	781a      	ldrb	r2, [r3, #0]
    a2ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b6:	781b      	ldrb	r3, [r3, #0]
    a2b8:	4413      	add	r3, r2
    a2ba:	b2da      	uxtb	r2, r3
    a2bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c4:	701a      	strb	r2, [r3, #0]
    a2c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ce:	781a      	ldrb	r2, [r3, #0]
    a2d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d8:	781b      	ldrb	r3, [r3, #0]
    a2da:	4413      	add	r3, r2
    a2dc:	b2da      	uxtb	r2, r3
    a2de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e6:	701a      	strb	r2, [r3, #0]
    a2e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f0:	781b      	ldrb	r3, [r3, #0]
    a2f2:	3301      	adds	r3, #1
    a2f4:	b2da      	uxtb	r2, r3
    a2f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2fe:	701a      	strb	r2, [r3, #0]
    a300:	f24c 5349 	movw	r3, #50505	; 0xc549
    a304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a308:	781b      	ldrb	r3, [r3, #0]
    a30a:	2bff      	cmp	r3, #255	; 0xff
    a30c:	d105      	bne.n	a31a <send_desired+0x68e>
    a30e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a316:	2200      	movs	r2, #0
    a318:	701a      	strb	r2, [r3, #0]
    a31a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a322:	781b      	ldrb	r3, [r3, #0]
    a324:	461a      	mov	r2, r3
    a326:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32e:	7859      	ldrb	r1, [r3, #1]
    a330:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a338:	5499      	strb	r1, [r3, r2]
    a33a:	4b8b      	ldr	r3, [pc, #556]	; (a568 <send_desired+0x8dc>)
    a33c:	781a      	ldrb	r2, [r3, #0]
    a33e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a346:	781b      	ldrb	r3, [r3, #0]
    a348:	4413      	add	r3, r2
    a34a:	b2da      	uxtb	r2, r3
    a34c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a354:	701a      	strb	r2, [r3, #0]
    a356:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35e:	781a      	ldrb	r2, [r3, #0]
    a360:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a368:	781b      	ldrb	r3, [r3, #0]
    a36a:	4413      	add	r3, r2
    a36c:	b2da      	uxtb	r2, r3
    a36e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a376:	701a      	strb	r2, [r3, #0]
    a378:	f24c 5349 	movw	r3, #50505	; 0xc549
    a37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a380:	781b      	ldrb	r3, [r3, #0]
    a382:	3301      	adds	r3, #1
    a384:	b2da      	uxtb	r2, r3
    a386:	f24c 5349 	movw	r3, #50505	; 0xc549
    a38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a38e:	701a      	strb	r2, [r3, #0]
    a390:	f24c 5349 	movw	r3, #50505	; 0xc549
    a394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a398:	781b      	ldrb	r3, [r3, #0]
    a39a:	2bff      	cmp	r3, #255	; 0xff
    a39c:	d105      	bne.n	a3aa <send_desired+0x71e>
    a39e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a6:	2200      	movs	r2, #0
    a3a8:	701a      	strb	r2, [r3, #0]
    a3aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b2:	781b      	ldrb	r3, [r3, #0]
    a3b4:	461a      	mov	r2, r3
    a3b6:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3be:	7899      	ldrb	r1, [r3, #2]
    a3c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c8:	5499      	strb	r1, [r3, r2]
    a3ca:	4b68      	ldr	r3, [pc, #416]	; (a56c <send_desired+0x8e0>)
    a3cc:	781a      	ldrb	r2, [r3, #0]
    a3ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d6:	781b      	ldrb	r3, [r3, #0]
    a3d8:	4413      	add	r3, r2
    a3da:	b2da      	uxtb	r2, r3
    a3dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e4:	701a      	strb	r2, [r3, #0]
    a3e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ee:	781a      	ldrb	r2, [r3, #0]
    a3f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f8:	781b      	ldrb	r3, [r3, #0]
    a3fa:	4413      	add	r3, r2
    a3fc:	b2da      	uxtb	r2, r3
    a3fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a406:	701a      	strb	r2, [r3, #0]
    a408:	f24c 5349 	movw	r3, #50505	; 0xc549
    a40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a410:	781b      	ldrb	r3, [r3, #0]
    a412:	3301      	adds	r3, #1
    a414:	b2da      	uxtb	r2, r3
    a416:	f24c 5349 	movw	r3, #50505	; 0xc549
    a41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a41e:	701a      	strb	r2, [r3, #0]
    a420:	f24c 5349 	movw	r3, #50505	; 0xc549
    a424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a428:	781b      	ldrb	r3, [r3, #0]
    a42a:	2bff      	cmp	r3, #255	; 0xff
    a42c:	d105      	bne.n	a43a <send_desired+0x7ae>
    a42e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a436:	2200      	movs	r2, #0
    a438:	701a      	strb	r2, [r3, #0]
    a43a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a442:	781b      	ldrb	r3, [r3, #0]
    a444:	461a      	mov	r2, r3
    a446:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a44e:	78d9      	ldrb	r1, [r3, #3]
    a450:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a458:	5499      	strb	r1, [r3, r2]
    a45a:	4b45      	ldr	r3, [pc, #276]	; (a570 <send_desired+0x8e4>)
    a45c:	781a      	ldrb	r2, [r3, #0]
    a45e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a466:	781b      	ldrb	r3, [r3, #0]
    a468:	4413      	add	r3, r2
    a46a:	b2da      	uxtb	r2, r3
    a46c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a474:	701a      	strb	r2, [r3, #0]
    a476:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a47e:	781a      	ldrb	r2, [r3, #0]
    a480:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a488:	781b      	ldrb	r3, [r3, #0]
    a48a:	4413      	add	r3, r2
    a48c:	b2da      	uxtb	r2, r3
    a48e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a496:	701a      	strb	r2, [r3, #0]
    a498:	f24c 5349 	movw	r3, #50505	; 0xc549
    a49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a0:	781b      	ldrb	r3, [r3, #0]
    a4a2:	3301      	adds	r3, #1
    a4a4:	b2da      	uxtb	r2, r3
    a4a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ae:	701a      	strb	r2, [r3, #0]
    a4b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b8:	781b      	ldrb	r3, [r3, #0]
    a4ba:	2bff      	cmp	r3, #255	; 0xff
    a4bc:	d105      	bne.n	a4ca <send_desired+0x83e>
    a4be:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c6:	2200      	movs	r2, #0
    a4c8:	701a      	strb	r2, [r3, #0]
    a4ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d2:	781b      	ldrb	r3, [r3, #0]
    a4d4:	461a      	mov	r2, r3
    a4d6:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4de:	7819      	ldrb	r1, [r3, #0]
    a4e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e8:	5499      	strb	r1, [r3, r2]
    a4ea:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f2:	781a      	ldrb	r2, [r3, #0]
    a4f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4fc:	781b      	ldrb	r3, [r3, #0]
    a4fe:	4413      	add	r3, r2
    a500:	b2da      	uxtb	r2, r3
    a502:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a50a:	701a      	strb	r2, [r3, #0]
    a50c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a514:	781a      	ldrb	r2, [r3, #0]
    a516:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51e:	781b      	ldrb	r3, [r3, #0]
    a520:	4413      	add	r3, r2
    a522:	b2da      	uxtb	r2, r3
    a524:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a52c:	701a      	strb	r2, [r3, #0]
    a52e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a536:	781b      	ldrb	r3, [r3, #0]
    a538:	3301      	adds	r3, #1
    a53a:	b2da      	uxtb	r2, r3
    a53c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a544:	701a      	strb	r2, [r3, #0]
    a546:	f24c 5349 	movw	r3, #50505	; 0xc549
    a54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54e:	781b      	ldrb	r3, [r3, #0]
    a550:	2bff      	cmp	r3, #255	; 0xff
    a552:	d10f      	bne.n	a574 <send_desired+0x8e8>
    a554:	f24c 5349 	movw	r3, #50505	; 0xc549
    a558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a55c:	2200      	movs	r2, #0
    a55e:	701a      	strb	r2, [r3, #0]
    a560:	e008      	b.n	a574 <send_desired+0x8e8>
    a562:	bf00      	nop
    a564:	2004c87b 	.word	0x2004c87b
    a568:	2004c8c1 	.word	0x2004c8c1
    a56c:	2004c8c2 	.word	0x2004c8c2
    a570:	2004c8c3 	.word	0x2004c8c3
    a574:	f24c 5349 	movw	r3, #50505	; 0xc549
    a578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57c:	781b      	ldrb	r3, [r3, #0]
    a57e:	461a      	mov	r2, r3
    a580:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a588:	7859      	ldrb	r1, [r3, #1]
    a58a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a592:	5499      	strb	r1, [r3, r2]
    a594:	4bd1      	ldr	r3, [pc, #836]	; (a8dc <send_desired+0xc50>)
    a596:	781a      	ldrb	r2, [r3, #0]
    a598:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a0:	781b      	ldrb	r3, [r3, #0]
    a5a2:	4413      	add	r3, r2
    a5a4:	b2da      	uxtb	r2, r3
    a5a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ae:	701a      	strb	r2, [r3, #0]
    a5b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b8:	781a      	ldrb	r2, [r3, #0]
    a5ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c2:	781b      	ldrb	r3, [r3, #0]
    a5c4:	4413      	add	r3, r2
    a5c6:	b2da      	uxtb	r2, r3
    a5c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d0:	701a      	strb	r2, [r3, #0]
    a5d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5da:	781b      	ldrb	r3, [r3, #0]
    a5dc:	3301      	adds	r3, #1
    a5de:	b2da      	uxtb	r2, r3
    a5e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e8:	701a      	strb	r2, [r3, #0]
    a5ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f2:	781b      	ldrb	r3, [r3, #0]
    a5f4:	2bff      	cmp	r3, #255	; 0xff
    a5f6:	d105      	bne.n	a604 <send_desired+0x978>
    a5f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a600:	2200      	movs	r2, #0
    a602:	701a      	strb	r2, [r3, #0]
    a604:	f24c 5349 	movw	r3, #50505	; 0xc549
    a608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a60c:	781b      	ldrb	r3, [r3, #0]
    a60e:	461a      	mov	r2, r3
    a610:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a618:	7899      	ldrb	r1, [r3, #2]
    a61a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a622:	5499      	strb	r1, [r3, r2]
    a624:	4bae      	ldr	r3, [pc, #696]	; (a8e0 <send_desired+0xc54>)
    a626:	781a      	ldrb	r2, [r3, #0]
    a628:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a630:	781b      	ldrb	r3, [r3, #0]
    a632:	4413      	add	r3, r2
    a634:	b2da      	uxtb	r2, r3
    a636:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a63e:	701a      	strb	r2, [r3, #0]
    a640:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a648:	781a      	ldrb	r2, [r3, #0]
    a64a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a652:	781b      	ldrb	r3, [r3, #0]
    a654:	4413      	add	r3, r2
    a656:	b2da      	uxtb	r2, r3
    a658:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a660:	701a      	strb	r2, [r3, #0]
    a662:	f24c 5349 	movw	r3, #50505	; 0xc549
    a666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a66a:	781b      	ldrb	r3, [r3, #0]
    a66c:	3301      	adds	r3, #1
    a66e:	b2da      	uxtb	r2, r3
    a670:	f24c 5349 	movw	r3, #50505	; 0xc549
    a674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a678:	701a      	strb	r2, [r3, #0]
    a67a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a682:	781b      	ldrb	r3, [r3, #0]
    a684:	2bff      	cmp	r3, #255	; 0xff
    a686:	d105      	bne.n	a694 <send_desired+0xa08>
    a688:	f24c 5349 	movw	r3, #50505	; 0xc549
    a68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a690:	2200      	movs	r2, #0
    a692:	701a      	strb	r2, [r3, #0]
    a694:	f24c 5349 	movw	r3, #50505	; 0xc549
    a698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a69c:	781b      	ldrb	r3, [r3, #0]
    a69e:	461a      	mov	r2, r3
    a6a0:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a8:	78d9      	ldrb	r1, [r3, #3]
    a6aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a6ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b2:	5499      	strb	r1, [r3, r2]
    a6b4:	4b8b      	ldr	r3, [pc, #556]	; (a8e4 <send_desired+0xc58>)
    a6b6:	781a      	ldrb	r2, [r3, #0]
    a6b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c0:	781b      	ldrb	r3, [r3, #0]
    a6c2:	4413      	add	r3, r2
    a6c4:	b2da      	uxtb	r2, r3
    a6c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ce:	701a      	strb	r2, [r3, #0]
    a6d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d8:	781a      	ldrb	r2, [r3, #0]
    a6da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e2:	781b      	ldrb	r3, [r3, #0]
    a6e4:	4413      	add	r3, r2
    a6e6:	b2da      	uxtb	r2, r3
    a6e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f0:	701a      	strb	r2, [r3, #0]
    a6f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6fa:	781b      	ldrb	r3, [r3, #0]
    a6fc:	3301      	adds	r3, #1
    a6fe:	b2da      	uxtb	r2, r3
    a700:	f24c 5349 	movw	r3, #50505	; 0xc549
    a704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a708:	701a      	strb	r2, [r3, #0]
    a70a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a712:	781b      	ldrb	r3, [r3, #0]
    a714:	2bff      	cmp	r3, #255	; 0xff
    a716:	d105      	bne.n	a724 <send_desired+0xa98>
    a718:	f24c 5349 	movw	r3, #50505	; 0xc549
    a71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a720:	2200      	movs	r2, #0
    a722:	701a      	strb	r2, [r3, #0]
    a724:	f24c 5349 	movw	r3, #50505	; 0xc549
    a728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a72c:	781b      	ldrb	r3, [r3, #0]
    a72e:	461a      	mov	r2, r3
    a730:	f240 5374 	movw	r3, #1396	; 0x574
    a734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a738:	7819      	ldrb	r1, [r3, #0]
    a73a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a742:	5499      	strb	r1, [r3, r2]
    a744:	f240 5374 	movw	r3, #1396	; 0x574
    a748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a74c:	781a      	ldrb	r2, [r3, #0]
    a74e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a756:	781b      	ldrb	r3, [r3, #0]
    a758:	4413      	add	r3, r2
    a75a:	b2da      	uxtb	r2, r3
    a75c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a764:	701a      	strb	r2, [r3, #0]
    a766:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a76e:	781a      	ldrb	r2, [r3, #0]
    a770:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a778:	781b      	ldrb	r3, [r3, #0]
    a77a:	4413      	add	r3, r2
    a77c:	b2da      	uxtb	r2, r3
    a77e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a786:	701a      	strb	r2, [r3, #0]
    a788:	f24c 5349 	movw	r3, #50505	; 0xc549
    a78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a790:	781b      	ldrb	r3, [r3, #0]
    a792:	3301      	adds	r3, #1
    a794:	b2da      	uxtb	r2, r3
    a796:	f24c 5349 	movw	r3, #50505	; 0xc549
    a79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a79e:	701a      	strb	r2, [r3, #0]
    a7a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a8:	781b      	ldrb	r3, [r3, #0]
    a7aa:	2bff      	cmp	r3, #255	; 0xff
    a7ac:	d105      	bne.n	a7ba <send_desired+0xb2e>
    a7ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b6:	2200      	movs	r2, #0
    a7b8:	701a      	strb	r2, [r3, #0]
    a7ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c2:	781b      	ldrb	r3, [r3, #0]
    a7c4:	461a      	mov	r2, r3
    a7c6:	f240 5374 	movw	r3, #1396	; 0x574
    a7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ce:	7859      	ldrb	r1, [r3, #1]
    a7d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d8:	5499      	strb	r1, [r3, r2]
    a7da:	4b43      	ldr	r3, [pc, #268]	; (a8e8 <send_desired+0xc5c>)
    a7dc:	781a      	ldrb	r2, [r3, #0]
    a7de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e6:	781b      	ldrb	r3, [r3, #0]
    a7e8:	4413      	add	r3, r2
    a7ea:	b2da      	uxtb	r2, r3
    a7ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f4:	701a      	strb	r2, [r3, #0]
    a7f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7fe:	781a      	ldrb	r2, [r3, #0]
    a800:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a808:	781b      	ldrb	r3, [r3, #0]
    a80a:	4413      	add	r3, r2
    a80c:	b2da      	uxtb	r2, r3
    a80e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a816:	701a      	strb	r2, [r3, #0]
    a818:	f24c 5349 	movw	r3, #50505	; 0xc549
    a81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a820:	781b      	ldrb	r3, [r3, #0]
    a822:	3301      	adds	r3, #1
    a824:	b2da      	uxtb	r2, r3
    a826:	f24c 5349 	movw	r3, #50505	; 0xc549
    a82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a82e:	701a      	strb	r2, [r3, #0]
    a830:	f24c 5349 	movw	r3, #50505	; 0xc549
    a834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a838:	781b      	ldrb	r3, [r3, #0]
    a83a:	2bff      	cmp	r3, #255	; 0xff
    a83c:	d105      	bne.n	a84a <send_desired+0xbbe>
    a83e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a846:	2200      	movs	r2, #0
    a848:	701a      	strb	r2, [r3, #0]
    a84a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a852:	781b      	ldrb	r3, [r3, #0]
    a854:	461a      	mov	r2, r3
    a856:	f240 5374 	movw	r3, #1396	; 0x574
    a85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a85e:	7899      	ldrb	r1, [r3, #2]
    a860:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a868:	5499      	strb	r1, [r3, r2]
    a86a:	4b20      	ldr	r3, [pc, #128]	; (a8ec <send_desired+0xc60>)
    a86c:	781a      	ldrb	r2, [r3, #0]
    a86e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a876:	781b      	ldrb	r3, [r3, #0]
    a878:	4413      	add	r3, r2
    a87a:	b2da      	uxtb	r2, r3
    a87c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a884:	701a      	strb	r2, [r3, #0]
    a886:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a88e:	781a      	ldrb	r2, [r3, #0]
    a890:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a898:	781b      	ldrb	r3, [r3, #0]
    a89a:	4413      	add	r3, r2
    a89c:	b2da      	uxtb	r2, r3
    a89e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a6:	701a      	strb	r2, [r3, #0]
    a8a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b0:	781b      	ldrb	r3, [r3, #0]
    a8b2:	3301      	adds	r3, #1
    a8b4:	b2da      	uxtb	r2, r3
    a8b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8be:	701a      	strb	r2, [r3, #0]
    a8c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c8:	781b      	ldrb	r3, [r3, #0]
    a8ca:	2bff      	cmp	r3, #255	; 0xff
    a8cc:	d110      	bne.n	a8f0 <send_desired+0xc64>
    a8ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d6:	2200      	movs	r2, #0
    a8d8:	701a      	strb	r2, [r3, #0]
    a8da:	e009      	b.n	a8f0 <send_desired+0xc64>
    a8dc:	2004c8c5 	.word	0x2004c8c5
    a8e0:	2004c8c6 	.word	0x2004c8c6
    a8e4:	2004c8c7 	.word	0x2004c8c7
    a8e8:	20000575 	.word	0x20000575
    a8ec:	20000576 	.word	0x20000576
    a8f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f8:	781b      	ldrb	r3, [r3, #0]
    a8fa:	461a      	mov	r2, r3
    a8fc:	f240 5374 	movw	r3, #1396	; 0x574
    a900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a904:	78d9      	ldrb	r1, [r3, #3]
    a906:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a90e:	5499      	strb	r1, [r3, r2]
    a910:	4b79      	ldr	r3, [pc, #484]	; (aaf8 <send_desired+0xe6c>)
    a912:	781a      	ldrb	r2, [r3, #0]
    a914:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a91c:	781b      	ldrb	r3, [r3, #0]
    a91e:	4413      	add	r3, r2
    a920:	b2da      	uxtb	r2, r3
    a922:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a92a:	701a      	strb	r2, [r3, #0]
    a92c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a934:	781a      	ldrb	r2, [r3, #0]
    a936:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a93e:	781b      	ldrb	r3, [r3, #0]
    a940:	4413      	add	r3, r2
    a942:	b2da      	uxtb	r2, r3
    a944:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a94c:	701a      	strb	r2, [r3, #0]
    a94e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a956:	781b      	ldrb	r3, [r3, #0]
    a958:	3301      	adds	r3, #1
    a95a:	b2da      	uxtb	r2, r3
    a95c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a964:	701a      	strb	r2, [r3, #0]
    a966:	f24c 5349 	movw	r3, #50505	; 0xc549
    a96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a96e:	781b      	ldrb	r3, [r3, #0]
    a970:	2bff      	cmp	r3, #255	; 0xff
    a972:	d105      	bne.n	a980 <send_desired+0xcf4>
    a974:	f24c 5349 	movw	r3, #50505	; 0xc549
    a978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a97c:	2200      	movs	r2, #0
    a97e:	701a      	strb	r2, [r3, #0]
    a980:	f24c 5349 	movw	r3, #50505	; 0xc549
    a984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a988:	781b      	ldrb	r3, [r3, #0]
    a98a:	461a      	mov	r2, r3
    a98c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a994:	7819      	ldrb	r1, [r3, #0]
    a996:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a99e:	5499      	strb	r1, [r3, r2]
    a9a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a8:	781b      	ldrb	r3, [r3, #0]
    a9aa:	3301      	adds	r3, #1
    a9ac:	b2da      	uxtb	r2, r3
    a9ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b6:	701a      	strb	r2, [r3, #0]
    a9b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c0:	781b      	ldrb	r3, [r3, #0]
    a9c2:	2bff      	cmp	r3, #255	; 0xff
    a9c4:	d105      	bne.n	a9d2 <send_desired+0xd46>
    a9c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ce:	2200      	movs	r2, #0
    a9d0:	701a      	strb	r2, [r3, #0]
    a9d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9da:	781b      	ldrb	r3, [r3, #0]
    a9dc:	461a      	mov	r2, r3
    a9de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e6:	7819      	ldrb	r1, [r3, #0]
    a9e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f0:	5499      	strb	r1, [r3, r2]
    a9f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9fa:	781b      	ldrb	r3, [r3, #0]
    a9fc:	3301      	adds	r3, #1
    a9fe:	b2da      	uxtb	r2, r3
    aa00:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa08:	701a      	strb	r2, [r3, #0]
    aa0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa12:	781b      	ldrb	r3, [r3, #0]
    aa14:	2bff      	cmp	r3, #255	; 0xff
    aa16:	d105      	bne.n	aa24 <send_desired+0xd98>
    aa18:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa20:	2200      	movs	r2, #0
    aa22:	701a      	strb	r2, [r3, #0]
    aa24:	f242 0339 	movw	r3, #8249	; 0x2039
    aa28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa2c:	781b      	ldrb	r3, [r3, #0]
    aa2e:	b2db      	uxtb	r3, r3
    aa30:	f003 0310 	and.w	r3, r3, #16
    aa34:	2b00      	cmp	r3, #0
    aa36:	d15a      	bne.n	aaee <send_desired+0xe62>
    aa38:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa40:	781b      	ldrb	r3, [r3, #0]
    aa42:	b2db      	uxtb	r3, r3
    aa44:	461a      	mov	r2, r3
    aa46:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aa4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa4e:	5c9a      	ldrb	r2, [r3, r2]
    aa50:	f24c 634b 	movw	r3, #50763	; 0xc64b
    aa54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa58:	701a      	strb	r2, [r3, #0]
    aa5a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    aa5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa62:	2200      	movs	r2, #0
    aa64:	701a      	strb	r2, [r3, #0]
    aa66:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa6e:	781b      	ldrb	r3, [r3, #0]
    aa70:	b2db      	uxtb	r3, r3
    aa72:	3301      	adds	r3, #1
    aa74:	b2da      	uxtb	r2, r3
    aa76:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa7e:	701a      	strb	r2, [r3, #0]
    aa80:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa88:	781b      	ldrb	r3, [r3, #0]
    aa8a:	b2db      	uxtb	r3, r3
    aa8c:	2bff      	cmp	r3, #255	; 0xff
    aa8e:	d105      	bne.n	aa9c <send_desired+0xe10>
    aa90:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa98:	2200      	movs	r2, #0
    aa9a:	701a      	strb	r2, [r3, #0]
    aa9c:	f242 0338 	movw	r3, #8248	; 0x2038
    aaa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaa4:	f242 0238 	movw	r2, #8248	; 0x2038
    aaa8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aaac:	7812      	ldrb	r2, [r2, #0]
    aaae:	b2d2      	uxtb	r2, r2
    aab0:	f042 0201 	orr.w	r2, r2, #1
    aab4:	b2d2      	uxtb	r2, r2
    aab6:	701a      	strb	r2, [r3, #0]
    aab8:	f242 0339 	movw	r3, #8249	; 0x2039
    aabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aac0:	f242 0239 	movw	r2, #8249	; 0x2039
    aac4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aac8:	7812      	ldrb	r2, [r2, #0]
    aaca:	b2d2      	uxtb	r2, r2
    aacc:	f042 0210 	orr.w	r2, r2, #16
    aad0:	b2d2      	uxtb	r2, r2
    aad2:	701a      	strb	r2, [r3, #0]
    aad4:	e00b      	b.n	aaee <send_desired+0xe62>
    aad6:	f24c 5348 	movw	r3, #50504	; 0xc548
    aada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aade:	781b      	ldrb	r3, [r3, #0]
    aae0:	3301      	adds	r3, #1
    aae2:	b2da      	uxtb	r2, r3
    aae4:	f24c 5348 	movw	r3, #50504	; 0xc548
    aae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaec:	701a      	strb	r2, [r3, #0]
}
    aaee:	46bd      	mov	sp, r7
    aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaf4:	4770      	bx	lr
    aaf6:	bf00      	nop
    aaf8:	20000577 	.word	0x20000577

0000aafc <send_bat>:
void send_bat(void){  //2000ms
    aafc:	b480      	push	{r7}
    aafe:	af00      	add	r7, sp, #0
  if(!boot)
    ab00:	f240 533d 	movw	r3, #1341	; 0x53d
    ab04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab08:	781b      	ldrb	r3, [r3, #0]
    ab0a:	2b00      	cmp	r3, #0
    ab0c:	f040 83af 	bne.w	b26e <send_bat+0x772>
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    ab10:	f24c 5341 	movw	r3, #50497	; 0xc541
    ab14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab18:	781a      	ldrb	r2, [r3, #0]
    ab1a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    ab1e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    ab22:	fba3 1302 	umull	r1, r3, r3, r2
    ab26:	0919      	lsrs	r1, r3, #4
    ab28:	460b      	mov	r3, r1
    ab2a:	009b      	lsls	r3, r3, #2
    ab2c:	440b      	add	r3, r1
    ab2e:	009b      	lsls	r3, r3, #2
    ab30:	1ad3      	subs	r3, r2, r3
    ab32:	b2db      	uxtb	r3, r3
    ab34:	2b08      	cmp	r3, #8
    ab36:	f040 839a 	bne.w	b26e <send_bat+0x772>
    ab3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab42:	781a      	ldrb	r2, [r3, #0]
    ab44:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ab48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab4c:	781b      	ldrb	r3, [r3, #0]
    ab4e:	b2db      	uxtb	r3, r3
    ab50:	429a      	cmp	r2, r3
    ab52:	d313      	bcc.n	ab7c <send_bat+0x80>
    ab54:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ab58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab5c:	781b      	ldrb	r3, [r3, #0]
    ab5e:	b2db      	uxtb	r3, r3
    ab60:	461a      	mov	r2, r3
    ab62:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab6a:	781b      	ldrb	r3, [r3, #0]
    ab6c:	1ad3      	subs	r3, r2, r3
    ab6e:	33ff      	adds	r3, #255	; 0xff
    ab70:	2b0c      	cmp	r3, #12
    ab72:	bfd4      	ite	le
    ab74:	2300      	movle	r3, #0
    ab76:	2301      	movgt	r3, #1
    ab78:	b2db      	uxtb	r3, r3
    ab7a:	e011      	b.n	aba0 <send_bat+0xa4>
    ab7c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ab80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab84:	781b      	ldrb	r3, [r3, #0]
    ab86:	b2db      	uxtb	r3, r3
    ab88:	461a      	mov	r2, r3
    ab8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab92:	781b      	ldrb	r3, [r3, #0]
    ab94:	1ad3      	subs	r3, r2, r3
    ab96:	2b0c      	cmp	r3, #12
    ab98:	bfd4      	ite	le
    ab9a:	2300      	movle	r3, #0
    ab9c:	2301      	movgt	r3, #1
    ab9e:	b2db      	uxtb	r3, r3
    aba0:	2b00      	cmp	r3, #0
    aba2:	f000 8358 	beq.w	b256 <send_bat+0x75a>
    aba6:	f24c 5349 	movw	r3, #50505	; 0xc549
    abaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abae:	781b      	ldrb	r3, [r3, #0]
    abb0:	461a      	mov	r2, r3
    abb2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    abb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abba:	2105      	movs	r1, #5
    abbc:	5499      	strb	r1, [r3, r2]
    abbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    abc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc6:	781b      	ldrb	r3, [r3, #0]
    abc8:	3301      	adds	r3, #1
    abca:	b2da      	uxtb	r2, r3
    abcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    abd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd4:	701a      	strb	r2, [r3, #0]
    abd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    abda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abde:	781b      	ldrb	r3, [r3, #0]
    abe0:	2bff      	cmp	r3, #255	; 0xff
    abe2:	d105      	bne.n	abf0 <send_bat+0xf4>
    abe4:	f24c 5349 	movw	r3, #50505	; 0xc549
    abe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abec:	2200      	movs	r2, #0
    abee:	701a      	strb	r2, [r3, #0]
    abf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    abf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf8:	781b      	ldrb	r3, [r3, #0]
    abfa:	461a      	mov	r2, r3
    abfc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ac00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac04:	210c      	movs	r1, #12
    ac06:	5499      	strb	r1, [r3, r2]
    ac08:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac10:	781b      	ldrb	r3, [r3, #0]
    ac12:	3301      	adds	r3, #1
    ac14:	b2da      	uxtb	r2, r3
    ac16:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1e:	701a      	strb	r2, [r3, #0]
    ac20:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac28:	781b      	ldrb	r3, [r3, #0]
    ac2a:	2bff      	cmp	r3, #255	; 0xff
    ac2c:	d105      	bne.n	ac3a <send_bat+0x13e>
    ac2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac36:	2200      	movs	r2, #0
    ac38:	701a      	strb	r2, [r3, #0]
    ac3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac42:	220c      	movs	r2, #12
    ac44:	701a      	strb	r2, [r3, #0]
    ac46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac4e:	220c      	movs	r2, #12
    ac50:	701a      	strb	r2, [r3, #0]
    ac52:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5a:	781b      	ldrb	r3, [r3, #0]
    ac5c:	461a      	mov	r2, r3
    ac5e:	f24c 5332 	movw	r3, #50482	; 0xc532
    ac62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac66:	7819      	ldrb	r1, [r3, #0]
    ac68:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ac6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac70:	5499      	strb	r1, [r3, r2]
    ac72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac7a:	781a      	ldrb	r2, [r3, #0]
    ac7c:	f24c 5332 	movw	r3, #50482	; 0xc532
    ac80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac84:	781b      	ldrb	r3, [r3, #0]
    ac86:	4413      	add	r3, r2
    ac88:	b2da      	uxtb	r2, r3
    ac8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac92:	701a      	strb	r2, [r3, #0]
    ac94:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9c:	781a      	ldrb	r2, [r3, #0]
    ac9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca6:	781b      	ldrb	r3, [r3, #0]
    aca8:	4413      	add	r3, r2
    acaa:	b2da      	uxtb	r2, r3
    acac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    acb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb4:	701a      	strb	r2, [r3, #0]
    acb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    acba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acbe:	781b      	ldrb	r3, [r3, #0]
    acc0:	3301      	adds	r3, #1
    acc2:	b2da      	uxtb	r2, r3
    acc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    acc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    accc:	701a      	strb	r2, [r3, #0]
    acce:	f24c 5349 	movw	r3, #50505	; 0xc549
    acd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd6:	781b      	ldrb	r3, [r3, #0]
    acd8:	2bff      	cmp	r3, #255	; 0xff
    acda:	d105      	bne.n	ace8 <send_bat+0x1ec>
    acdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ace0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace4:	2200      	movs	r2, #0
    ace6:	701a      	strb	r2, [r3, #0]
    ace8:	f24c 5349 	movw	r3, #50505	; 0xc549
    acec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf0:	781b      	ldrb	r3, [r3, #0]
    acf2:	461a      	mov	r2, r3
    acf4:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    acf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acfc:	7819      	ldrb	r1, [r3, #0]
    acfe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ad02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad06:	5499      	strb	r1, [r3, r2]
    ad08:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ad0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad10:	781a      	ldrb	r2, [r3, #0]
    ad12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1a:	781b      	ldrb	r3, [r3, #0]
    ad1c:	4413      	add	r3, r2
    ad1e:	b2da      	uxtb	r2, r3
    ad20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad28:	701a      	strb	r2, [r3, #0]
    ad2a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad32:	781a      	ldrb	r2, [r3, #0]
    ad34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3c:	781b      	ldrb	r3, [r3, #0]
    ad3e:	4413      	add	r3, r2
    ad40:	b2da      	uxtb	r2, r3
    ad42:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4a:	701a      	strb	r2, [r3, #0]
    ad4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad54:	781b      	ldrb	r3, [r3, #0]
    ad56:	3301      	adds	r3, #1
    ad58:	b2da      	uxtb	r2, r3
    ad5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad62:	701a      	strb	r2, [r3, #0]
    ad64:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6c:	781b      	ldrb	r3, [r3, #0]
    ad6e:	2bff      	cmp	r3, #255	; 0xff
    ad70:	d105      	bne.n	ad7e <send_bat+0x282>
    ad72:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad7a:	2200      	movs	r2, #0
    ad7c:	701a      	strb	r2, [r3, #0]
    ad7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad86:	781b      	ldrb	r3, [r3, #0]
    ad88:	461a      	mov	r2, r3
    ad8a:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ad8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad92:	7859      	ldrb	r1, [r3, #1]
    ad94:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ad98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad9c:	5499      	strb	r1, [r3, r2]
    ad9e:	4bd5      	ldr	r3, [pc, #852]	; (b0f4 <send_bat+0x5f8>)
    ada0:	781a      	ldrb	r2, [r3, #0]
    ada2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ada6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adaa:	781b      	ldrb	r3, [r3, #0]
    adac:	4413      	add	r3, r2
    adae:	b2da      	uxtb	r2, r3
    adb0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    adb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb8:	701a      	strb	r2, [r3, #0]
    adba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    adbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc2:	781a      	ldrb	r2, [r3, #0]
    adc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    adc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adcc:	781b      	ldrb	r3, [r3, #0]
    adce:	4413      	add	r3, r2
    add0:	b2da      	uxtb	r2, r3
    add2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    add6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adda:	701a      	strb	r2, [r3, #0]
    addc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ade0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade4:	781b      	ldrb	r3, [r3, #0]
    ade6:	3301      	adds	r3, #1
    ade8:	b2da      	uxtb	r2, r3
    adea:	f24c 5349 	movw	r3, #50505	; 0xc549
    adee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf2:	701a      	strb	r2, [r3, #0]
    adf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    adf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adfc:	781b      	ldrb	r3, [r3, #0]
    adfe:	2bff      	cmp	r3, #255	; 0xff
    ae00:	d105      	bne.n	ae0e <send_bat+0x312>
    ae02:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae0a:	2200      	movs	r2, #0
    ae0c:	701a      	strb	r2, [r3, #0]
    ae0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae16:	781b      	ldrb	r3, [r3, #0]
    ae18:	461a      	mov	r2, r3
    ae1a:	f24c 5335 	movw	r3, #50485	; 0xc535
    ae1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae22:	7819      	ldrb	r1, [r3, #0]
    ae24:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ae28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae2c:	5499      	strb	r1, [r3, r2]
    ae2e:	f24c 5335 	movw	r3, #50485	; 0xc535
    ae32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae36:	781a      	ldrb	r2, [r3, #0]
    ae38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae40:	781b      	ldrb	r3, [r3, #0]
    ae42:	4413      	add	r3, r2
    ae44:	b2da      	uxtb	r2, r3
    ae46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4e:	701a      	strb	r2, [r3, #0]
    ae50:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae58:	781a      	ldrb	r2, [r3, #0]
    ae5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae62:	781b      	ldrb	r3, [r3, #0]
    ae64:	4413      	add	r3, r2
    ae66:	b2da      	uxtb	r2, r3
    ae68:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae70:	701a      	strb	r2, [r3, #0]
    ae72:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7a:	781b      	ldrb	r3, [r3, #0]
    ae7c:	3301      	adds	r3, #1
    ae7e:	b2da      	uxtb	r2, r3
    ae80:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae88:	701a      	strb	r2, [r3, #0]
    ae8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae92:	781b      	ldrb	r3, [r3, #0]
    ae94:	2bff      	cmp	r3, #255	; 0xff
    ae96:	d105      	bne.n	aea4 <send_bat+0x3a8>
    ae98:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea0:	2200      	movs	r2, #0
    aea2:	701a      	strb	r2, [r3, #0]
    aea4:	f24c 5349 	movw	r3, #50505	; 0xc549
    aea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeac:	781b      	ldrb	r3, [r3, #0]
    aeae:	461a      	mov	r2, r3
    aeb0:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    aeb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb8:	7819      	ldrb	r1, [r3, #0]
    aeba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec2:	5499      	strb	r1, [r3, r2]
    aec4:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    aec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aecc:	781a      	ldrb	r2, [r3, #0]
    aece:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed6:	781b      	ldrb	r3, [r3, #0]
    aed8:	4413      	add	r3, r2
    aeda:	b2da      	uxtb	r2, r3
    aedc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee4:	701a      	strb	r2, [r3, #0]
    aee6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aeea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeee:	781a      	ldrb	r2, [r3, #0]
    aef0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef8:	781b      	ldrb	r3, [r3, #0]
    aefa:	4413      	add	r3, r2
    aefc:	b2da      	uxtb	r2, r3
    aefe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af06:	701a      	strb	r2, [r3, #0]
    af08:	f24c 5349 	movw	r3, #50505	; 0xc549
    af0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af10:	781b      	ldrb	r3, [r3, #0]
    af12:	3301      	adds	r3, #1
    af14:	b2da      	uxtb	r2, r3
    af16:	f24c 5349 	movw	r3, #50505	; 0xc549
    af1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1e:	701a      	strb	r2, [r3, #0]
    af20:	f24c 5349 	movw	r3, #50505	; 0xc549
    af24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af28:	781b      	ldrb	r3, [r3, #0]
    af2a:	2bff      	cmp	r3, #255	; 0xff
    af2c:	d105      	bne.n	af3a <send_bat+0x43e>
    af2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    af32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af36:	2200      	movs	r2, #0
    af38:	701a      	strb	r2, [r3, #0]
    af3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    af3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af42:	781b      	ldrb	r3, [r3, #0]
    af44:	461a      	mov	r2, r3
    af46:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    af4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4e:	7859      	ldrb	r1, [r3, #1]
    af50:	f24c 534c 	movw	r3, #50508	; 0xc54c
    af54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af58:	5499      	strb	r1, [r3, r2]
    af5a:	4b67      	ldr	r3, [pc, #412]	; (b0f8 <send_bat+0x5fc>)
    af5c:	781a      	ldrb	r2, [r3, #0]
    af5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af66:	781b      	ldrb	r3, [r3, #0]
    af68:	4413      	add	r3, r2
    af6a:	b2da      	uxtb	r2, r3
    af6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af74:	701a      	strb	r2, [r3, #0]
    af76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af7e:	781a      	ldrb	r2, [r3, #0]
    af80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af88:	781b      	ldrb	r3, [r3, #0]
    af8a:	4413      	add	r3, r2
    af8c:	b2da      	uxtb	r2, r3
    af8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af96:	701a      	strb	r2, [r3, #0]
    af98:	f24c 5349 	movw	r3, #50505	; 0xc549
    af9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa0:	781b      	ldrb	r3, [r3, #0]
    afa2:	3301      	adds	r3, #1
    afa4:	b2da      	uxtb	r2, r3
    afa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    afaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afae:	701a      	strb	r2, [r3, #0]
    afb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    afb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb8:	781b      	ldrb	r3, [r3, #0]
    afba:	2bff      	cmp	r3, #255	; 0xff
    afbc:	d105      	bne.n	afca <send_bat+0x4ce>
    afbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    afc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc6:	2200      	movs	r2, #0
    afc8:	701a      	strb	r2, [r3, #0]
    afca:	f24c 5349 	movw	r3, #50505	; 0xc549
    afce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd2:	781b      	ldrb	r3, [r3, #0]
    afd4:	461a      	mov	r2, r3
    afd6:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    afda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afde:	7819      	ldrb	r1, [r3, #0]
    afe0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    afe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe8:	5499      	strb	r1, [r3, r2]
    afea:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    afee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff2:	781a      	ldrb	r2, [r3, #0]
    aff4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    affc:	781b      	ldrb	r3, [r3, #0]
    affe:	4413      	add	r3, r2
    b000:	b2da      	uxtb	r2, r3
    b002:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b00a:	701a      	strb	r2, [r3, #0]
    b00c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b014:	781a      	ldrb	r2, [r3, #0]
    b016:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01e:	781b      	ldrb	r3, [r3, #0]
    b020:	4413      	add	r3, r2
    b022:	b2da      	uxtb	r2, r3
    b024:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b02c:	701a      	strb	r2, [r3, #0]
    b02e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b036:	781b      	ldrb	r3, [r3, #0]
    b038:	3301      	adds	r3, #1
    b03a:	b2da      	uxtb	r2, r3
    b03c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b044:	701a      	strb	r2, [r3, #0]
    b046:	f24c 5349 	movw	r3, #50505	; 0xc549
    b04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04e:	781b      	ldrb	r3, [r3, #0]
    b050:	2bff      	cmp	r3, #255	; 0xff
    b052:	d105      	bne.n	b060 <send_bat+0x564>
    b054:	f24c 5349 	movw	r3, #50505	; 0xc549
    b058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05c:	2200      	movs	r2, #0
    b05e:	701a      	strb	r2, [r3, #0]
    b060:	f24c 5349 	movw	r3, #50505	; 0xc549
    b064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b068:	781b      	ldrb	r3, [r3, #0]
    b06a:	461a      	mov	r2, r3
    b06c:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    b070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b074:	7859      	ldrb	r1, [r3, #1]
    b076:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b07e:	5499      	strb	r1, [r3, r2]
    b080:	4b1e      	ldr	r3, [pc, #120]	; (b0fc <send_bat+0x600>)
    b082:	781a      	ldrb	r2, [r3, #0]
    b084:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b08c:	781b      	ldrb	r3, [r3, #0]
    b08e:	4413      	add	r3, r2
    b090:	b2da      	uxtb	r2, r3
    b092:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b09a:	701a      	strb	r2, [r3, #0]
    b09c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a4:	781a      	ldrb	r2, [r3, #0]
    b0a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ae:	781b      	ldrb	r3, [r3, #0]
    b0b0:	4413      	add	r3, r2
    b0b2:	b2da      	uxtb	r2, r3
    b0b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b0b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0bc:	701a      	strb	r2, [r3, #0]
    b0be:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c6:	781b      	ldrb	r3, [r3, #0]
    b0c8:	3301      	adds	r3, #1
    b0ca:	b2da      	uxtb	r2, r3
    b0cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d4:	701a      	strb	r2, [r3, #0]
    b0d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0de:	781b      	ldrb	r3, [r3, #0]
    b0e0:	2bff      	cmp	r3, #255	; 0xff
    b0e2:	d10d      	bne.n	b100 <send_bat+0x604>
    b0e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ec:	2200      	movs	r2, #0
    b0ee:	701a      	strb	r2, [r3, #0]
    b0f0:	e006      	b.n	b100 <send_bat+0x604>
    b0f2:	bf00      	nop
    b0f4:	2004cb2d 	.word	0x2004cb2d
    b0f8:	2004c8b7 	.word	0x2004c8b7
    b0fc:	2004c8b5 	.word	0x2004c8b5
    b100:	f24c 5349 	movw	r3, #50505	; 0xc549
    b104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b108:	781b      	ldrb	r3, [r3, #0]
    b10a:	461a      	mov	r2, r3
    b10c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b114:	7819      	ldrb	r1, [r3, #0]
    b116:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11e:	5499      	strb	r1, [r3, r2]
    b120:	f24c 5349 	movw	r3, #50505	; 0xc549
    b124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b128:	781b      	ldrb	r3, [r3, #0]
    b12a:	3301      	adds	r3, #1
    b12c:	b2da      	uxtb	r2, r3
    b12e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b136:	701a      	strb	r2, [r3, #0]
    b138:	f24c 5349 	movw	r3, #50505	; 0xc549
    b13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b140:	781b      	ldrb	r3, [r3, #0]
    b142:	2bff      	cmp	r3, #255	; 0xff
    b144:	d105      	bne.n	b152 <send_bat+0x656>
    b146:	f24c 5349 	movw	r3, #50505	; 0xc549
    b14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b14e:	2200      	movs	r2, #0
    b150:	701a      	strb	r2, [r3, #0]
    b152:	f24c 5349 	movw	r3, #50505	; 0xc549
    b156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b15a:	781b      	ldrb	r3, [r3, #0]
    b15c:	461a      	mov	r2, r3
    b15e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b166:	7819      	ldrb	r1, [r3, #0]
    b168:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b170:	5499      	strb	r1, [r3, r2]
    b172:	f24c 5349 	movw	r3, #50505	; 0xc549
    b176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b17a:	781b      	ldrb	r3, [r3, #0]
    b17c:	3301      	adds	r3, #1
    b17e:	b2da      	uxtb	r2, r3
    b180:	f24c 5349 	movw	r3, #50505	; 0xc549
    b184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b188:	701a      	strb	r2, [r3, #0]
    b18a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b192:	781b      	ldrb	r3, [r3, #0]
    b194:	2bff      	cmp	r3, #255	; 0xff
    b196:	d105      	bne.n	b1a4 <send_bat+0x6a8>
    b198:	f24c 5349 	movw	r3, #50505	; 0xc549
    b19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a0:	2200      	movs	r2, #0
    b1a2:	701a      	strb	r2, [r3, #0]
    b1a4:	f242 0339 	movw	r3, #8249	; 0x2039
    b1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ac:	781b      	ldrb	r3, [r3, #0]
    b1ae:	b2db      	uxtb	r3, r3
    b1b0:	f003 0310 	and.w	r3, r3, #16
    b1b4:	2b00      	cmp	r3, #0
    b1b6:	d15a      	bne.n	b26e <send_bat+0x772>
    b1b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c0:	781b      	ldrb	r3, [r3, #0]
    b1c2:	b2db      	uxtb	r3, r3
    b1c4:	461a      	mov	r2, r3
    b1c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ce:	5c9a      	ldrb	r2, [r3, r2]
    b1d0:	f24c 634b 	movw	r3, #50763	; 0xc64b
    b1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d8:	701a      	strb	r2, [r3, #0]
    b1da:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e2:	2200      	movs	r2, #0
    b1e4:	701a      	strb	r2, [r3, #0]
    b1e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ee:	781b      	ldrb	r3, [r3, #0]
    b1f0:	b2db      	uxtb	r3, r3
    b1f2:	3301      	adds	r3, #1
    b1f4:	b2da      	uxtb	r2, r3
    b1f6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1fe:	701a      	strb	r2, [r3, #0]
    b200:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b208:	781b      	ldrb	r3, [r3, #0]
    b20a:	b2db      	uxtb	r3, r3
    b20c:	2bff      	cmp	r3, #255	; 0xff
    b20e:	d105      	bne.n	b21c <send_bat+0x720>
    b210:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b218:	2200      	movs	r2, #0
    b21a:	701a      	strb	r2, [r3, #0]
    b21c:	f242 0338 	movw	r3, #8248	; 0x2038
    b220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b224:	f242 0238 	movw	r2, #8248	; 0x2038
    b228:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b22c:	7812      	ldrb	r2, [r2, #0]
    b22e:	b2d2      	uxtb	r2, r2
    b230:	f042 0201 	orr.w	r2, r2, #1
    b234:	b2d2      	uxtb	r2, r2
    b236:	701a      	strb	r2, [r3, #0]
    b238:	f242 0339 	movw	r3, #8249	; 0x2039
    b23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b240:	f242 0239 	movw	r2, #8249	; 0x2039
    b244:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b248:	7812      	ldrb	r2, [r2, #0]
    b24a:	b2d2      	uxtb	r2, r2
    b24c:	f042 0210 	orr.w	r2, r2, #16
    b250:	b2d2      	uxtb	r2, r2
    b252:	701a      	strb	r2, [r3, #0]
    b254:	e00b      	b.n	b26e <send_bat+0x772>
    b256:	f24c 5348 	movw	r3, #50504	; 0xc548
    b25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b25e:	781b      	ldrb	r3, [r3, #0]
    b260:	3301      	adds	r3, #1
    b262:	b2da      	uxtb	r2, r3
    b264:	f24c 5348 	movw	r3, #50504	; 0xc548
    b268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b26c:	701a      	strb	r2, [r3, #0]
}
    b26e:	46bd      	mov	sp, r7
    b270:	f85d 7b04 	ldr.w	r7, [sp], #4
    b274:	4770      	bx	lr
    b276:	bf00      	nop

0000b278 <send_climb>:
void send_climb(void){  //2000ms
    b278:	b480      	push	{r7}
    b27a:	af00      	add	r7, sp, #0
  if(!boot)
    b27c:	f240 533d 	movw	r3, #1341	; 0x53d
    b280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b284:	781b      	ldrb	r3, [r3, #0]
    b286:	2b00      	cmp	r3, #0
    b288:	f040 8569 	bne.w	bd5e <send_climb+0xae6>
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b28c:	f24c 5341 	movw	r3, #50497	; 0xc541
    b290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b294:	781a      	ldrb	r2, [r3, #0]
    b296:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b29a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b29e:	fba3 1302 	umull	r1, r3, r3, r2
    b2a2:	0919      	lsrs	r1, r3, #4
    b2a4:	460b      	mov	r3, r1
    b2a6:	009b      	lsls	r3, r3, #2
    b2a8:	440b      	add	r3, r1
    b2aa:	009b      	lsls	r3, r3, #2
    b2ac:	1ad3      	subs	r3, r2, r3
    b2ae:	b2db      	uxtb	r3, r3
    b2b0:	2b12      	cmp	r3, #18
    b2b2:	f040 8554 	bne.w	bd5e <send_climb+0xae6>
    b2b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2be:	781a      	ldrb	r2, [r3, #0]
    b2c0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c8:	781b      	ldrb	r3, [r3, #0]
    b2ca:	b2db      	uxtb	r3, r3
    b2cc:	429a      	cmp	r2, r3
    b2ce:	d313      	bcc.n	b2f8 <send_climb+0x80>
    b2d0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d8:	781b      	ldrb	r3, [r3, #0]
    b2da:	b2db      	uxtb	r3, r3
    b2dc:	461a      	mov	r2, r3
    b2de:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e6:	781b      	ldrb	r3, [r3, #0]
    b2e8:	1ad3      	subs	r3, r2, r3
    b2ea:	33ff      	adds	r3, #255	; 0xff
    b2ec:	2b12      	cmp	r3, #18
    b2ee:	bfd4      	ite	le
    b2f0:	2300      	movle	r3, #0
    b2f2:	2301      	movgt	r3, #1
    b2f4:	b2db      	uxtb	r3, r3
    b2f6:	e011      	b.n	b31c <send_climb+0xa4>
    b2f8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b300:	781b      	ldrb	r3, [r3, #0]
    b302:	b2db      	uxtb	r3, r3
    b304:	461a      	mov	r2, r3
    b306:	f24c 5349 	movw	r3, #50505	; 0xc549
    b30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b30e:	781b      	ldrb	r3, [r3, #0]
    b310:	1ad3      	subs	r3, r2, r3
    b312:	2b12      	cmp	r3, #18
    b314:	bfd4      	ite	le
    b316:	2300      	movle	r3, #0
    b318:	2301      	movgt	r3, #1
    b31a:	b2db      	uxtb	r3, r3
    b31c:	2b00      	cmp	r3, #0
    b31e:	f000 8512 	beq.w	bd46 <send_climb+0xace>
    b322:	f24c 5349 	movw	r3, #50505	; 0xc549
    b326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b32a:	781b      	ldrb	r3, [r3, #0]
    b32c:	461a      	mov	r2, r3
    b32e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b336:	2105      	movs	r1, #5
    b338:	5499      	strb	r1, [r3, r2]
    b33a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b342:	781b      	ldrb	r3, [r3, #0]
    b344:	3301      	adds	r3, #1
    b346:	b2da      	uxtb	r2, r3
    b348:	f24c 5349 	movw	r3, #50505	; 0xc549
    b34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b350:	701a      	strb	r2, [r3, #0]
    b352:	f24c 5349 	movw	r3, #50505	; 0xc549
    b356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35a:	781b      	ldrb	r3, [r3, #0]
    b35c:	2bff      	cmp	r3, #255	; 0xff
    b35e:	d105      	bne.n	b36c <send_climb+0xf4>
    b360:	f24c 5349 	movw	r3, #50505	; 0xc549
    b364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b368:	2200      	movs	r2, #0
    b36a:	701a      	strb	r2, [r3, #0]
    b36c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b374:	781b      	ldrb	r3, [r3, #0]
    b376:	461a      	mov	r2, r3
    b378:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b380:	210e      	movs	r1, #14
    b382:	5499      	strb	r1, [r3, r2]
    b384:	f24c 5349 	movw	r3, #50505	; 0xc549
    b388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b38c:	781b      	ldrb	r3, [r3, #0]
    b38e:	3301      	adds	r3, #1
    b390:	b2da      	uxtb	r2, r3
    b392:	f24c 5349 	movw	r3, #50505	; 0xc549
    b396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39a:	701a      	strb	r2, [r3, #0]
    b39c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a4:	781b      	ldrb	r3, [r3, #0]
    b3a6:	2bff      	cmp	r3, #255	; 0xff
    b3a8:	d105      	bne.n	b3b6 <send_climb+0x13e>
    b3aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b2:	2200      	movs	r2, #0
    b3b4:	701a      	strb	r2, [r3, #0]
    b3b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3be:	220e      	movs	r2, #14
    b3c0:	701a      	strb	r2, [r3, #0]
    b3c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ca:	220e      	movs	r2, #14
    b3cc:	701a      	strb	r2, [r3, #0]
    b3ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d6:	781b      	ldrb	r3, [r3, #0]
    b3d8:	461a      	mov	r2, r3
    b3da:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e2:	7819      	ldrb	r1, [r3, #0]
    b3e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ec:	5499      	strb	r1, [r3, r2]
    b3ee:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f6:	781a      	ldrb	r2, [r3, #0]
    b3f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b400:	781b      	ldrb	r3, [r3, #0]
    b402:	4413      	add	r3, r2
    b404:	b2da      	uxtb	r2, r3
    b406:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40e:	701a      	strb	r2, [r3, #0]
    b410:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b418:	781a      	ldrb	r2, [r3, #0]
    b41a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b422:	781b      	ldrb	r3, [r3, #0]
    b424:	4413      	add	r3, r2
    b426:	b2da      	uxtb	r2, r3
    b428:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b430:	701a      	strb	r2, [r3, #0]
    b432:	f24c 5349 	movw	r3, #50505	; 0xc549
    b436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b43a:	781b      	ldrb	r3, [r3, #0]
    b43c:	3301      	adds	r3, #1
    b43e:	b2da      	uxtb	r2, r3
    b440:	f24c 5349 	movw	r3, #50505	; 0xc549
    b444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b448:	701a      	strb	r2, [r3, #0]
    b44a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b452:	781b      	ldrb	r3, [r3, #0]
    b454:	2bff      	cmp	r3, #255	; 0xff
    b456:	d105      	bne.n	b464 <send_climb+0x1ec>
    b458:	f24c 5349 	movw	r3, #50505	; 0xc549
    b45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b460:	2200      	movs	r2, #0
    b462:	701a      	strb	r2, [r3, #0]
    b464:	f24c 5349 	movw	r3, #50505	; 0xc549
    b468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b46c:	781b      	ldrb	r3, [r3, #0]
    b46e:	461a      	mov	r2, r3
    b470:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b478:	7859      	ldrb	r1, [r3, #1]
    b47a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b482:	5499      	strb	r1, [r3, r2]
    b484:	4bd3      	ldr	r3, [pc, #844]	; (b7d4 <send_climb+0x55c>)
    b486:	781a      	ldrb	r2, [r3, #0]
    b488:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b490:	781b      	ldrb	r3, [r3, #0]
    b492:	4413      	add	r3, r2
    b494:	b2da      	uxtb	r2, r3
    b496:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b49e:	701a      	strb	r2, [r3, #0]
    b4a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a8:	781a      	ldrb	r2, [r3, #0]
    b4aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b2:	781b      	ldrb	r3, [r3, #0]
    b4b4:	4413      	add	r3, r2
    b4b6:	b2da      	uxtb	r2, r3
    b4b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c0:	701a      	strb	r2, [r3, #0]
    b4c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ca:	781b      	ldrb	r3, [r3, #0]
    b4cc:	3301      	adds	r3, #1
    b4ce:	b2da      	uxtb	r2, r3
    b4d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d8:	701a      	strb	r2, [r3, #0]
    b4da:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e2:	781b      	ldrb	r3, [r3, #0]
    b4e4:	2bff      	cmp	r3, #255	; 0xff
    b4e6:	d105      	bne.n	b4f4 <send_climb+0x27c>
    b4e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f0:	2200      	movs	r2, #0
    b4f2:	701a      	strb	r2, [r3, #0]
    b4f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fc:	781b      	ldrb	r3, [r3, #0]
    b4fe:	461a      	mov	r2, r3
    b500:	f64c 0390 	movw	r3, #51344	; 0xc890
    b504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b508:	7819      	ldrb	r1, [r3, #0]
    b50a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b512:	5499      	strb	r1, [r3, r2]
    b514:	f64c 0390 	movw	r3, #51344	; 0xc890
    b518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b51c:	781a      	ldrb	r2, [r3, #0]
    b51e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b526:	781b      	ldrb	r3, [r3, #0]
    b528:	4413      	add	r3, r2
    b52a:	b2da      	uxtb	r2, r3
    b52c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b534:	701a      	strb	r2, [r3, #0]
    b536:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b53e:	781a      	ldrb	r2, [r3, #0]
    b540:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b548:	781b      	ldrb	r3, [r3, #0]
    b54a:	4413      	add	r3, r2
    b54c:	b2da      	uxtb	r2, r3
    b54e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b556:	701a      	strb	r2, [r3, #0]
    b558:	f24c 5349 	movw	r3, #50505	; 0xc549
    b55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b560:	781b      	ldrb	r3, [r3, #0]
    b562:	3301      	adds	r3, #1
    b564:	b2da      	uxtb	r2, r3
    b566:	f24c 5349 	movw	r3, #50505	; 0xc549
    b56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b56e:	701a      	strb	r2, [r3, #0]
    b570:	f24c 5349 	movw	r3, #50505	; 0xc549
    b574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b578:	781b      	ldrb	r3, [r3, #0]
    b57a:	2bff      	cmp	r3, #255	; 0xff
    b57c:	d105      	bne.n	b58a <send_climb+0x312>
    b57e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b586:	2200      	movs	r2, #0
    b588:	701a      	strb	r2, [r3, #0]
    b58a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b592:	781b      	ldrb	r3, [r3, #0]
    b594:	461a      	mov	r2, r3
    b596:	f64c 0390 	movw	r3, #51344	; 0xc890
    b59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b59e:	7859      	ldrb	r1, [r3, #1]
    b5a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a8:	5499      	strb	r1, [r3, r2]
    b5aa:	4b8b      	ldr	r3, [pc, #556]	; (b7d8 <send_climb+0x560>)
    b5ac:	781a      	ldrb	r2, [r3, #0]
    b5ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b6:	781b      	ldrb	r3, [r3, #0]
    b5b8:	4413      	add	r3, r2
    b5ba:	b2da      	uxtb	r2, r3
    b5bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c4:	701a      	strb	r2, [r3, #0]
    b5c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ce:	781a      	ldrb	r2, [r3, #0]
    b5d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d8:	781b      	ldrb	r3, [r3, #0]
    b5da:	4413      	add	r3, r2
    b5dc:	b2da      	uxtb	r2, r3
    b5de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e6:	701a      	strb	r2, [r3, #0]
    b5e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f0:	781b      	ldrb	r3, [r3, #0]
    b5f2:	3301      	adds	r3, #1
    b5f4:	b2da      	uxtb	r2, r3
    b5f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5fe:	701a      	strb	r2, [r3, #0]
    b600:	f24c 5349 	movw	r3, #50505	; 0xc549
    b604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b608:	781b      	ldrb	r3, [r3, #0]
    b60a:	2bff      	cmp	r3, #255	; 0xff
    b60c:	d105      	bne.n	b61a <send_climb+0x3a2>
    b60e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b616:	2200      	movs	r2, #0
    b618:	701a      	strb	r2, [r3, #0]
    b61a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b622:	781b      	ldrb	r3, [r3, #0]
    b624:	461a      	mov	r2, r3
    b626:	f64c 0390 	movw	r3, #51344	; 0xc890
    b62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b62e:	7899      	ldrb	r1, [r3, #2]
    b630:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b638:	5499      	strb	r1, [r3, r2]
    b63a:	4b68      	ldr	r3, [pc, #416]	; (b7dc <send_climb+0x564>)
    b63c:	781a      	ldrb	r2, [r3, #0]
    b63e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b646:	781b      	ldrb	r3, [r3, #0]
    b648:	4413      	add	r3, r2
    b64a:	b2da      	uxtb	r2, r3
    b64c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b654:	701a      	strb	r2, [r3, #0]
    b656:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b65e:	781a      	ldrb	r2, [r3, #0]
    b660:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b668:	781b      	ldrb	r3, [r3, #0]
    b66a:	4413      	add	r3, r2
    b66c:	b2da      	uxtb	r2, r3
    b66e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b676:	701a      	strb	r2, [r3, #0]
    b678:	f24c 5349 	movw	r3, #50505	; 0xc549
    b67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b680:	781b      	ldrb	r3, [r3, #0]
    b682:	3301      	adds	r3, #1
    b684:	b2da      	uxtb	r2, r3
    b686:	f24c 5349 	movw	r3, #50505	; 0xc549
    b68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b68e:	701a      	strb	r2, [r3, #0]
    b690:	f24c 5349 	movw	r3, #50505	; 0xc549
    b694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b698:	781b      	ldrb	r3, [r3, #0]
    b69a:	2bff      	cmp	r3, #255	; 0xff
    b69c:	d105      	bne.n	b6aa <send_climb+0x432>
    b69e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a6:	2200      	movs	r2, #0
    b6a8:	701a      	strb	r2, [r3, #0]
    b6aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b2:	781b      	ldrb	r3, [r3, #0]
    b6b4:	461a      	mov	r2, r3
    b6b6:	f64c 0390 	movw	r3, #51344	; 0xc890
    b6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6be:	78d9      	ldrb	r1, [r3, #3]
    b6c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b6c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c8:	5499      	strb	r1, [r3, r2]
    b6ca:	4b45      	ldr	r3, [pc, #276]	; (b7e0 <send_climb+0x568>)
    b6cc:	781a      	ldrb	r2, [r3, #0]
    b6ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d6:	781b      	ldrb	r3, [r3, #0]
    b6d8:	4413      	add	r3, r2
    b6da:	b2da      	uxtb	r2, r3
    b6dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e4:	701a      	strb	r2, [r3, #0]
    b6e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ee:	781a      	ldrb	r2, [r3, #0]
    b6f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f8:	781b      	ldrb	r3, [r3, #0]
    b6fa:	4413      	add	r3, r2
    b6fc:	b2da      	uxtb	r2, r3
    b6fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b706:	701a      	strb	r2, [r3, #0]
    b708:	f24c 5349 	movw	r3, #50505	; 0xc549
    b70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b710:	781b      	ldrb	r3, [r3, #0]
    b712:	3301      	adds	r3, #1
    b714:	b2da      	uxtb	r2, r3
    b716:	f24c 5349 	movw	r3, #50505	; 0xc549
    b71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b71e:	701a      	strb	r2, [r3, #0]
    b720:	f24c 5349 	movw	r3, #50505	; 0xc549
    b724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b728:	781b      	ldrb	r3, [r3, #0]
    b72a:	2bff      	cmp	r3, #255	; 0xff
    b72c:	d105      	bne.n	b73a <send_climb+0x4c2>
    b72e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b736:	2200      	movs	r2, #0
    b738:	701a      	strb	r2, [r3, #0]
    b73a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b742:	781b      	ldrb	r3, [r3, #0]
    b744:	461a      	mov	r2, r3
    b746:	f64c 0398 	movw	r3, #51352	; 0xc898
    b74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b74e:	7819      	ldrb	r1, [r3, #0]
    b750:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b758:	5499      	strb	r1, [r3, r2]
    b75a:	f64c 0398 	movw	r3, #51352	; 0xc898
    b75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b762:	781a      	ldrb	r2, [r3, #0]
    b764:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b76c:	781b      	ldrb	r3, [r3, #0]
    b76e:	4413      	add	r3, r2
    b770:	b2da      	uxtb	r2, r3
    b772:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b77a:	701a      	strb	r2, [r3, #0]
    b77c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b784:	781a      	ldrb	r2, [r3, #0]
    b786:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b78e:	781b      	ldrb	r3, [r3, #0]
    b790:	4413      	add	r3, r2
    b792:	b2da      	uxtb	r2, r3
    b794:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b79c:	701a      	strb	r2, [r3, #0]
    b79e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a6:	781b      	ldrb	r3, [r3, #0]
    b7a8:	3301      	adds	r3, #1
    b7aa:	b2da      	uxtb	r2, r3
    b7ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b4:	701a      	strb	r2, [r3, #0]
    b7b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7be:	781b      	ldrb	r3, [r3, #0]
    b7c0:	2bff      	cmp	r3, #255	; 0xff
    b7c2:	d10f      	bne.n	b7e4 <send_climb+0x56c>
    b7c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7cc:	2200      	movs	r2, #0
    b7ce:	701a      	strb	r2, [r3, #0]
    b7d0:	e008      	b.n	b7e4 <send_climb+0x56c>
    b7d2:	bf00      	nop
    b7d4:	2004c87d 	.word	0x2004c87d
    b7d8:	2004c891 	.word	0x2004c891
    b7dc:	2004c892 	.word	0x2004c892
    b7e0:	2004c893 	.word	0x2004c893
    b7e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ec:	781b      	ldrb	r3, [r3, #0]
    b7ee:	461a      	mov	r2, r3
    b7f0:	f64c 0398 	movw	r3, #51352	; 0xc898
    b7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f8:	7859      	ldrb	r1, [r3, #1]
    b7fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b802:	5499      	strb	r1, [r3, r2]
    b804:	4bd1      	ldr	r3, [pc, #836]	; (bb4c <send_climb+0x8d4>)
    b806:	781a      	ldrb	r2, [r3, #0]
    b808:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b810:	781b      	ldrb	r3, [r3, #0]
    b812:	4413      	add	r3, r2
    b814:	b2da      	uxtb	r2, r3
    b816:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b81e:	701a      	strb	r2, [r3, #0]
    b820:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b828:	781a      	ldrb	r2, [r3, #0]
    b82a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b82e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b832:	781b      	ldrb	r3, [r3, #0]
    b834:	4413      	add	r3, r2
    b836:	b2da      	uxtb	r2, r3
    b838:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b840:	701a      	strb	r2, [r3, #0]
    b842:	f24c 5349 	movw	r3, #50505	; 0xc549
    b846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b84a:	781b      	ldrb	r3, [r3, #0]
    b84c:	3301      	adds	r3, #1
    b84e:	b2da      	uxtb	r2, r3
    b850:	f24c 5349 	movw	r3, #50505	; 0xc549
    b854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b858:	701a      	strb	r2, [r3, #0]
    b85a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b862:	781b      	ldrb	r3, [r3, #0]
    b864:	2bff      	cmp	r3, #255	; 0xff
    b866:	d105      	bne.n	b874 <send_climb+0x5fc>
    b868:	f24c 5349 	movw	r3, #50505	; 0xc549
    b86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b870:	2200      	movs	r2, #0
    b872:	701a      	strb	r2, [r3, #0]
    b874:	f24c 5349 	movw	r3, #50505	; 0xc549
    b878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b87c:	781b      	ldrb	r3, [r3, #0]
    b87e:	461a      	mov	r2, r3
    b880:	f64c 0398 	movw	r3, #51352	; 0xc898
    b884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b888:	7899      	ldrb	r1, [r3, #2]
    b88a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b892:	5499      	strb	r1, [r3, r2]
    b894:	4bae      	ldr	r3, [pc, #696]	; (bb50 <send_climb+0x8d8>)
    b896:	781a      	ldrb	r2, [r3, #0]
    b898:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a0:	781b      	ldrb	r3, [r3, #0]
    b8a2:	4413      	add	r3, r2
    b8a4:	b2da      	uxtb	r2, r3
    b8a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ae:	701a      	strb	r2, [r3, #0]
    b8b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b8:	781a      	ldrb	r2, [r3, #0]
    b8ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c2:	781b      	ldrb	r3, [r3, #0]
    b8c4:	4413      	add	r3, r2
    b8c6:	b2da      	uxtb	r2, r3
    b8c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d0:	701a      	strb	r2, [r3, #0]
    b8d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8da:	781b      	ldrb	r3, [r3, #0]
    b8dc:	3301      	adds	r3, #1
    b8de:	b2da      	uxtb	r2, r3
    b8e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e8:	701a      	strb	r2, [r3, #0]
    b8ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f2:	781b      	ldrb	r3, [r3, #0]
    b8f4:	2bff      	cmp	r3, #255	; 0xff
    b8f6:	d105      	bne.n	b904 <send_climb+0x68c>
    b8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b900:	2200      	movs	r2, #0
    b902:	701a      	strb	r2, [r3, #0]
    b904:	f24c 5349 	movw	r3, #50505	; 0xc549
    b908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b90c:	781b      	ldrb	r3, [r3, #0]
    b90e:	461a      	mov	r2, r3
    b910:	f64c 0398 	movw	r3, #51352	; 0xc898
    b914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b918:	78d9      	ldrb	r1, [r3, #3]
    b91a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b922:	5499      	strb	r1, [r3, r2]
    b924:	4b8b      	ldr	r3, [pc, #556]	; (bb54 <send_climb+0x8dc>)
    b926:	781a      	ldrb	r2, [r3, #0]
    b928:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b930:	781b      	ldrb	r3, [r3, #0]
    b932:	4413      	add	r3, r2
    b934:	b2da      	uxtb	r2, r3
    b936:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b93e:	701a      	strb	r2, [r3, #0]
    b940:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b948:	781a      	ldrb	r2, [r3, #0]
    b94a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b952:	781b      	ldrb	r3, [r3, #0]
    b954:	4413      	add	r3, r2
    b956:	b2da      	uxtb	r2, r3
    b958:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b960:	701a      	strb	r2, [r3, #0]
    b962:	f24c 5349 	movw	r3, #50505	; 0xc549
    b966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b96a:	781b      	ldrb	r3, [r3, #0]
    b96c:	3301      	adds	r3, #1
    b96e:	b2da      	uxtb	r2, r3
    b970:	f24c 5349 	movw	r3, #50505	; 0xc549
    b974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b978:	701a      	strb	r2, [r3, #0]
    b97a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b97e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b982:	781b      	ldrb	r3, [r3, #0]
    b984:	2bff      	cmp	r3, #255	; 0xff
    b986:	d105      	bne.n	b994 <send_climb+0x71c>
    b988:	f24c 5349 	movw	r3, #50505	; 0xc549
    b98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b990:	2200      	movs	r2, #0
    b992:	701a      	strb	r2, [r3, #0]
    b994:	f24c 5349 	movw	r3, #50505	; 0xc549
    b998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b99c:	781b      	ldrb	r3, [r3, #0]
    b99e:	461a      	mov	r2, r3
    b9a0:	f648 23cc 	movw	r3, #35532	; 0x8acc
    b9a4:	f2c0 0301 	movt	r3, #1
    b9a8:	7819      	ldrb	r1, [r3, #0]
    b9aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b2:	5499      	strb	r1, [r3, r2]
    b9b4:	f648 23cc 	movw	r3, #35532	; 0x8acc
    b9b8:	f2c0 0301 	movt	r3, #1
    b9bc:	781a      	ldrb	r2, [r3, #0]
    b9be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c6:	781b      	ldrb	r3, [r3, #0]
    b9c8:	4413      	add	r3, r2
    b9ca:	b2da      	uxtb	r2, r3
    b9cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d4:	701a      	strb	r2, [r3, #0]
    b9d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9de:	781a      	ldrb	r2, [r3, #0]
    b9e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e8:	781b      	ldrb	r3, [r3, #0]
    b9ea:	4413      	add	r3, r2
    b9ec:	b2da      	uxtb	r2, r3
    b9ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f6:	701a      	strb	r2, [r3, #0]
    b9f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba00:	781b      	ldrb	r3, [r3, #0]
    ba02:	3301      	adds	r3, #1
    ba04:	b2da      	uxtb	r2, r3
    ba06:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba0e:	701a      	strb	r2, [r3, #0]
    ba10:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba18:	781b      	ldrb	r3, [r3, #0]
    ba1a:	2bff      	cmp	r3, #255	; 0xff
    ba1c:	d105      	bne.n	ba2a <send_climb+0x7b2>
    ba1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba26:	2200      	movs	r2, #0
    ba28:	701a      	strb	r2, [r3, #0]
    ba2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba32:	781b      	ldrb	r3, [r3, #0]
    ba34:	461a      	mov	r2, r3
    ba36:	f648 23cc 	movw	r3, #35532	; 0x8acc
    ba3a:	f2c0 0301 	movt	r3, #1
    ba3e:	7859      	ldrb	r1, [r3, #1]
    ba40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ba44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba48:	5499      	strb	r1, [r3, r2]
    ba4a:	4b43      	ldr	r3, [pc, #268]	; (bb58 <send_climb+0x8e0>)
    ba4c:	781a      	ldrb	r2, [r3, #0]
    ba4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba56:	781b      	ldrb	r3, [r3, #0]
    ba58:	4413      	add	r3, r2
    ba5a:	b2da      	uxtb	r2, r3
    ba5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba64:	701a      	strb	r2, [r3, #0]
    ba66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba6e:	781a      	ldrb	r2, [r3, #0]
    ba70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba78:	781b      	ldrb	r3, [r3, #0]
    ba7a:	4413      	add	r3, r2
    ba7c:	b2da      	uxtb	r2, r3
    ba7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba86:	701a      	strb	r2, [r3, #0]
    ba88:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba90:	781b      	ldrb	r3, [r3, #0]
    ba92:	3301      	adds	r3, #1
    ba94:	b2da      	uxtb	r2, r3
    ba96:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba9e:	701a      	strb	r2, [r3, #0]
    baa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    baa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa8:	781b      	ldrb	r3, [r3, #0]
    baaa:	2bff      	cmp	r3, #255	; 0xff
    baac:	d105      	bne.n	baba <send_climb+0x842>
    baae:	f24c 5349 	movw	r3, #50505	; 0xc549
    bab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab6:	2200      	movs	r2, #0
    bab8:	701a      	strb	r2, [r3, #0]
    baba:	f24c 5349 	movw	r3, #50505	; 0xc549
    babe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac2:	781b      	ldrb	r3, [r3, #0]
    bac4:	461a      	mov	r2, r3
    bac6:	f648 23cc 	movw	r3, #35532	; 0x8acc
    baca:	f2c0 0301 	movt	r3, #1
    bace:	7899      	ldrb	r1, [r3, #2]
    bad0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad8:	5499      	strb	r1, [r3, r2]
    bada:	4b20      	ldr	r3, [pc, #128]	; (bb5c <send_climb+0x8e4>)
    badc:	781a      	ldrb	r2, [r3, #0]
    bade:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae6:	781b      	ldrb	r3, [r3, #0]
    bae8:	4413      	add	r3, r2
    baea:	b2da      	uxtb	r2, r3
    baec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    baf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf4:	701a      	strb	r2, [r3, #0]
    baf6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bafe:	781a      	ldrb	r2, [r3, #0]
    bb00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb08:	781b      	ldrb	r3, [r3, #0]
    bb0a:	4413      	add	r3, r2
    bb0c:	b2da      	uxtb	r2, r3
    bb0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb16:	701a      	strb	r2, [r3, #0]
    bb18:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb20:	781b      	ldrb	r3, [r3, #0]
    bb22:	3301      	adds	r3, #1
    bb24:	b2da      	uxtb	r2, r3
    bb26:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb2e:	701a      	strb	r2, [r3, #0]
    bb30:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb38:	781b      	ldrb	r3, [r3, #0]
    bb3a:	2bff      	cmp	r3, #255	; 0xff
    bb3c:	d110      	bne.n	bb60 <send_climb+0x8e8>
    bb3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb46:	2200      	movs	r2, #0
    bb48:	701a      	strb	r2, [r3, #0]
    bb4a:	e009      	b.n	bb60 <send_climb+0x8e8>
    bb4c:	2004c899 	.word	0x2004c899
    bb50:	2004c89a 	.word	0x2004c89a
    bb54:	2004c89b 	.word	0x2004c89b
    bb58:	00018acd 	.word	0x00018acd
    bb5c:	00018ace 	.word	0x00018ace
    bb60:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb68:	781b      	ldrb	r3, [r3, #0]
    bb6a:	461a      	mov	r2, r3
    bb6c:	f648 23cc 	movw	r3, #35532	; 0x8acc
    bb70:	f2c0 0301 	movt	r3, #1
    bb74:	78d9      	ldrb	r1, [r3, #3]
    bb76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bb7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb7e:	5499      	strb	r1, [r3, r2]
    bb80:	4b79      	ldr	r3, [pc, #484]	; (bd68 <send_climb+0xaf0>)
    bb82:	781a      	ldrb	r2, [r3, #0]
    bb84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb8c:	781b      	ldrb	r3, [r3, #0]
    bb8e:	4413      	add	r3, r2
    bb90:	b2da      	uxtb	r2, r3
    bb92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb9a:	701a      	strb	r2, [r3, #0]
    bb9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba4:	781a      	ldrb	r2, [r3, #0]
    bba6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbae:	781b      	ldrb	r3, [r3, #0]
    bbb0:	4413      	add	r3, r2
    bbb2:	b2da      	uxtb	r2, r3
    bbb4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bbb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbbc:	701a      	strb	r2, [r3, #0]
    bbbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	3301      	adds	r3, #1
    bbca:	b2da      	uxtb	r2, r3
    bbcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd4:	701a      	strb	r2, [r3, #0]
    bbd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbde:	781b      	ldrb	r3, [r3, #0]
    bbe0:	2bff      	cmp	r3, #255	; 0xff
    bbe2:	d105      	bne.n	bbf0 <send_climb+0x978>
    bbe4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbec:	2200      	movs	r2, #0
    bbee:	701a      	strb	r2, [r3, #0]
    bbf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf8:	781b      	ldrb	r3, [r3, #0]
    bbfa:	461a      	mov	r2, r3
    bbfc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bc00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc04:	7819      	ldrb	r1, [r3, #0]
    bc06:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc0e:	5499      	strb	r1, [r3, r2]
    bc10:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc18:	781b      	ldrb	r3, [r3, #0]
    bc1a:	3301      	adds	r3, #1
    bc1c:	b2da      	uxtb	r2, r3
    bc1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc26:	701a      	strb	r2, [r3, #0]
    bc28:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc30:	781b      	ldrb	r3, [r3, #0]
    bc32:	2bff      	cmp	r3, #255	; 0xff
    bc34:	d105      	bne.n	bc42 <send_climb+0x9ca>
    bc36:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc3e:	2200      	movs	r2, #0
    bc40:	701a      	strb	r2, [r3, #0]
    bc42:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc4a:	781b      	ldrb	r3, [r3, #0]
    bc4c:	461a      	mov	r2, r3
    bc4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc56:	7819      	ldrb	r1, [r3, #0]
    bc58:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc60:	5499      	strb	r1, [r3, r2]
    bc62:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc6a:	781b      	ldrb	r3, [r3, #0]
    bc6c:	3301      	adds	r3, #1
    bc6e:	b2da      	uxtb	r2, r3
    bc70:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc78:	701a      	strb	r2, [r3, #0]
    bc7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc82:	781b      	ldrb	r3, [r3, #0]
    bc84:	2bff      	cmp	r3, #255	; 0xff
    bc86:	d105      	bne.n	bc94 <send_climb+0xa1c>
    bc88:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc90:	2200      	movs	r2, #0
    bc92:	701a      	strb	r2, [r3, #0]
    bc94:	f242 0339 	movw	r3, #8249	; 0x2039
    bc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc9c:	781b      	ldrb	r3, [r3, #0]
    bc9e:	b2db      	uxtb	r3, r3
    bca0:	f003 0310 	and.w	r3, r3, #16
    bca4:	2b00      	cmp	r3, #0
    bca6:	d15a      	bne.n	bd5e <send_climb+0xae6>
    bca8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb0:	781b      	ldrb	r3, [r3, #0]
    bcb2:	b2db      	uxtb	r3, r3
    bcb4:	461a      	mov	r2, r3
    bcb6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcbe:	5c9a      	ldrb	r2, [r3, r2]
    bcc0:	f24c 634b 	movw	r3, #50763	; 0xc64b
    bcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc8:	701a      	strb	r2, [r3, #0]
    bcca:	f24c 634c 	movw	r3, #50764	; 0xc64c
    bcce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd2:	2200      	movs	r2, #0
    bcd4:	701a      	strb	r2, [r3, #0]
    bcd6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcde:	781b      	ldrb	r3, [r3, #0]
    bce0:	b2db      	uxtb	r3, r3
    bce2:	3301      	adds	r3, #1
    bce4:	b2da      	uxtb	r2, r3
    bce6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcee:	701a      	strb	r2, [r3, #0]
    bcf0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcf8:	781b      	ldrb	r3, [r3, #0]
    bcfa:	b2db      	uxtb	r3, r3
    bcfc:	2bff      	cmp	r3, #255	; 0xff
    bcfe:	d105      	bne.n	bd0c <send_climb+0xa94>
    bd00:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd08:	2200      	movs	r2, #0
    bd0a:	701a      	strb	r2, [r3, #0]
    bd0c:	f242 0338 	movw	r3, #8248	; 0x2038
    bd10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd14:	f242 0238 	movw	r2, #8248	; 0x2038
    bd18:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd1c:	7812      	ldrb	r2, [r2, #0]
    bd1e:	b2d2      	uxtb	r2, r2
    bd20:	f042 0201 	orr.w	r2, r2, #1
    bd24:	b2d2      	uxtb	r2, r2
    bd26:	701a      	strb	r2, [r3, #0]
    bd28:	f242 0339 	movw	r3, #8249	; 0x2039
    bd2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd30:	f242 0239 	movw	r2, #8249	; 0x2039
    bd34:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd38:	7812      	ldrb	r2, [r2, #0]
    bd3a:	b2d2      	uxtb	r2, r2
    bd3c:	f042 0210 	orr.w	r2, r2, #16
    bd40:	b2d2      	uxtb	r2, r2
    bd42:	701a      	strb	r2, [r3, #0]
    bd44:	e00b      	b.n	bd5e <send_climb+0xae6>
    bd46:	f24c 5348 	movw	r3, #50504	; 0xc548
    bd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd4e:	781b      	ldrb	r3, [r3, #0]
    bd50:	3301      	adds	r3, #1
    bd52:	b2da      	uxtb	r2, r3
    bd54:	f24c 5348 	movw	r3, #50504	; 0xc548
    bd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd5c:	701a      	strb	r2, [r3, #0]
}
    bd5e:	46bd      	mov	sp, r7
    bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd64:	4770      	bx	lr
    bd66:	bf00      	nop
    bd68:	00018acf 	.word	0x00018acf

0000bd6c <send_mode>:
void send_mode(void){  //5000ms
    bd6c:	b480      	push	{r7}
    bd6e:	af00      	add	r7, sp, #0
  if(!boot)
    bd70:	f240 533d 	movw	r3, #1341	; 0x53d
    bd74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd78:	781b      	ldrb	r3, [r3, #0]
    bd7a:	2b00      	cmp	r3, #0
    bd7c:	f040 82ce 	bne.w	c31c <send_mode+0x5b0>
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bd80:	f24c 5341 	movw	r3, #50497	; 0xc541
    bd84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd88:	781a      	ldrb	r2, [r3, #0]
    bd8a:	f248 531f 	movw	r3, #34079	; 0x851f
    bd8e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bd92:	fba3 1302 	umull	r1, r3, r3, r2
    bd96:	091b      	lsrs	r3, r3, #4
    bd98:	2132      	movs	r1, #50	; 0x32
    bd9a:	fb01 f303 	mul.w	r3, r1, r3
    bd9e:	1ad3      	subs	r3, r2, r3
    bda0:	b2db      	uxtb	r3, r3
    bda2:	2b09      	cmp	r3, #9
    bda4:	f040 82ba 	bne.w	c31c <send_mode+0x5b0>
    bda8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb0:	781a      	ldrb	r2, [r3, #0]
    bdb2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bdb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdba:	781b      	ldrb	r3, [r3, #0]
    bdbc:	b2db      	uxtb	r3, r3
    bdbe:	429a      	cmp	r2, r3
    bdc0:	d313      	bcc.n	bdea <send_mode+0x7e>
    bdc2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bdc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdca:	781b      	ldrb	r3, [r3, #0]
    bdcc:	b2db      	uxtb	r3, r3
    bdce:	461a      	mov	r2, r3
    bdd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd8:	781b      	ldrb	r3, [r3, #0]
    bdda:	1ad3      	subs	r3, r2, r3
    bddc:	33ff      	adds	r3, #255	; 0xff
    bdde:	2b09      	cmp	r3, #9
    bde0:	bfd4      	ite	le
    bde2:	2300      	movle	r3, #0
    bde4:	2301      	movgt	r3, #1
    bde6:	b2db      	uxtb	r3, r3
    bde8:	e011      	b.n	be0e <send_mode+0xa2>
    bdea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bdee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf2:	781b      	ldrb	r3, [r3, #0]
    bdf4:	b2db      	uxtb	r3, r3
    bdf6:	461a      	mov	r2, r3
    bdf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be00:	781b      	ldrb	r3, [r3, #0]
    be02:	1ad3      	subs	r3, r2, r3
    be04:	2b09      	cmp	r3, #9
    be06:	bfd4      	ite	le
    be08:	2300      	movle	r3, #0
    be0a:	2301      	movgt	r3, #1
    be0c:	b2db      	uxtb	r3, r3
    be0e:	2b00      	cmp	r3, #0
    be10:	f000 8278 	beq.w	c304 <send_mode+0x598>
    be14:	f24c 5349 	movw	r3, #50505	; 0xc549
    be18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be1c:	781b      	ldrb	r3, [r3, #0]
    be1e:	461a      	mov	r2, r3
    be20:	f24c 534c 	movw	r3, #50508	; 0xc54c
    be24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be28:	2105      	movs	r1, #5
    be2a:	5499      	strb	r1, [r3, r2]
    be2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    be30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be34:	781b      	ldrb	r3, [r3, #0]
    be36:	3301      	adds	r3, #1
    be38:	b2da      	uxtb	r2, r3
    be3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    be3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be42:	701a      	strb	r2, [r3, #0]
    be44:	f24c 5349 	movw	r3, #50505	; 0xc549
    be48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be4c:	781b      	ldrb	r3, [r3, #0]
    be4e:	2bff      	cmp	r3, #255	; 0xff
    be50:	d105      	bne.n	be5e <send_mode+0xf2>
    be52:	f24c 5349 	movw	r3, #50505	; 0xc549
    be56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be5a:	2200      	movs	r2, #0
    be5c:	701a      	strb	r2, [r3, #0]
    be5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    be62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be66:	781b      	ldrb	r3, [r3, #0]
    be68:	461a      	mov	r2, r3
    be6a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    be6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be72:	210b      	movs	r1, #11
    be74:	5499      	strb	r1, [r3, r2]
    be76:	f24c 5349 	movw	r3, #50505	; 0xc549
    be7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be7e:	781b      	ldrb	r3, [r3, #0]
    be80:	3301      	adds	r3, #1
    be82:	b2da      	uxtb	r2, r3
    be84:	f24c 5349 	movw	r3, #50505	; 0xc549
    be88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be8c:	701a      	strb	r2, [r3, #0]
    be8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    be92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be96:	781b      	ldrb	r3, [r3, #0]
    be98:	2bff      	cmp	r3, #255	; 0xff
    be9a:	d105      	bne.n	bea8 <send_mode+0x13c>
    be9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea4:	2200      	movs	r2, #0
    bea6:	701a      	strb	r2, [r3, #0]
    bea8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    beac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb0:	220b      	movs	r2, #11
    beb2:	701a      	strb	r2, [r3, #0]
    beb4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    beb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bebc:	220b      	movs	r2, #11
    bebe:	701a      	strb	r2, [r3, #0]
    bec0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec8:	781b      	ldrb	r3, [r3, #0]
    beca:	461a      	mov	r2, r3
    becc:	f24c 532c 	movw	r3, #50476	; 0xc52c
    bed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed4:	7819      	ldrb	r1, [r3, #0]
    bed6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    beda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bede:	5499      	strb	r1, [r3, r2]
    bee0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee8:	781a      	ldrb	r2, [r3, #0]
    beea:	f24c 532c 	movw	r3, #50476	; 0xc52c
    beee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef2:	781b      	ldrb	r3, [r3, #0]
    bef4:	4413      	add	r3, r2
    bef6:	b2da      	uxtb	r2, r3
    bef8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    befc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf00:	701a      	strb	r2, [r3, #0]
    bf02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf0a:	781a      	ldrb	r2, [r3, #0]
    bf0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf14:	781b      	ldrb	r3, [r3, #0]
    bf16:	4413      	add	r3, r2
    bf18:	b2da      	uxtb	r2, r3
    bf1a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf22:	701a      	strb	r2, [r3, #0]
    bf24:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf2c:	781b      	ldrb	r3, [r3, #0]
    bf2e:	3301      	adds	r3, #1
    bf30:	b2da      	uxtb	r2, r3
    bf32:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf3a:	701a      	strb	r2, [r3, #0]
    bf3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf44:	781b      	ldrb	r3, [r3, #0]
    bf46:	2bff      	cmp	r3, #255	; 0xff
    bf48:	d105      	bne.n	bf56 <send_mode+0x1ea>
    bf4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf52:	2200      	movs	r2, #0
    bf54:	701a      	strb	r2, [r3, #0]
    bf56:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf5e:	781b      	ldrb	r3, [r3, #0]
    bf60:	461a      	mov	r2, r3
    bf62:	f24c 532d 	movw	r3, #50477	; 0xc52d
    bf66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf6a:	7819      	ldrb	r1, [r3, #0]
    bf6c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bf70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf74:	5499      	strb	r1, [r3, r2]
    bf76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf7e:	781a      	ldrb	r2, [r3, #0]
    bf80:	f24c 532d 	movw	r3, #50477	; 0xc52d
    bf84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf88:	781b      	ldrb	r3, [r3, #0]
    bf8a:	4413      	add	r3, r2
    bf8c:	b2da      	uxtb	r2, r3
    bf8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf96:	701a      	strb	r2, [r3, #0]
    bf98:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa0:	781a      	ldrb	r2, [r3, #0]
    bfa2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfaa:	781b      	ldrb	r3, [r3, #0]
    bfac:	4413      	add	r3, r2
    bfae:	b2da      	uxtb	r2, r3
    bfb0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bfb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb8:	701a      	strb	r2, [r3, #0]
    bfba:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc2:	781b      	ldrb	r3, [r3, #0]
    bfc4:	3301      	adds	r3, #1
    bfc6:	b2da      	uxtb	r2, r3
    bfc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd0:	701a      	strb	r2, [r3, #0]
    bfd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfda:	781b      	ldrb	r3, [r3, #0]
    bfdc:	2bff      	cmp	r3, #255	; 0xff
    bfde:	d105      	bne.n	bfec <send_mode+0x280>
    bfe0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe8:	2200      	movs	r2, #0
    bfea:	701a      	strb	r2, [r3, #0]
    bfec:	f24c 5349 	movw	r3, #50505	; 0xc549
    bff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff4:	781b      	ldrb	r3, [r3, #0]
    bff6:	461a      	mov	r2, r3
    bff8:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    bffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c000:	7819      	ldrb	r1, [r3, #0]
    c002:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c00a:	5499      	strb	r1, [r3, r2]
    c00c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c014:	781a      	ldrb	r2, [r3, #0]
    c016:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    c01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c01e:	781b      	ldrb	r3, [r3, #0]
    c020:	4413      	add	r3, r2
    c022:	b2da      	uxtb	r2, r3
    c024:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c02c:	701a      	strb	r2, [r3, #0]
    c02e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c036:	781a      	ldrb	r2, [r3, #0]
    c038:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c040:	781b      	ldrb	r3, [r3, #0]
    c042:	4413      	add	r3, r2
    c044:	b2da      	uxtb	r2, r3
    c046:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c04e:	701a      	strb	r2, [r3, #0]
    c050:	f24c 5349 	movw	r3, #50505	; 0xc549
    c054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c058:	781b      	ldrb	r3, [r3, #0]
    c05a:	3301      	adds	r3, #1
    c05c:	b2da      	uxtb	r2, r3
    c05e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c066:	701a      	strb	r2, [r3, #0]
    c068:	f24c 5349 	movw	r3, #50505	; 0xc549
    c06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c070:	781b      	ldrb	r3, [r3, #0]
    c072:	2bff      	cmp	r3, #255	; 0xff
    c074:	d105      	bne.n	c082 <send_mode+0x316>
    c076:	f24c 5349 	movw	r3, #50505	; 0xc549
    c07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c07e:	2200      	movs	r2, #0
    c080:	701a      	strb	r2, [r3, #0]
    c082:	f24c 5349 	movw	r3, #50505	; 0xc549
    c086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c08a:	781b      	ldrb	r3, [r3, #0]
    c08c:	461a      	mov	r2, r3
    c08e:	f24c 5333 	movw	r3, #50483	; 0xc533
    c092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c096:	7819      	ldrb	r1, [r3, #0]
    c098:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a0:	5499      	strb	r1, [r3, r2]
    c0a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0aa:	781a      	ldrb	r2, [r3, #0]
    c0ac:	f24c 5333 	movw	r3, #50483	; 0xc533
    c0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b4:	781b      	ldrb	r3, [r3, #0]
    c0b6:	4413      	add	r3, r2
    c0b8:	b2da      	uxtb	r2, r3
    c0ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c2:	701a      	strb	r2, [r3, #0]
    c0c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0cc:	781a      	ldrb	r2, [r3, #0]
    c0ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d6:	781b      	ldrb	r3, [r3, #0]
    c0d8:	4413      	add	r3, r2
    c0da:	b2da      	uxtb	r2, r3
    c0dc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e4:	701a      	strb	r2, [r3, #0]
    c0e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ee:	781b      	ldrb	r3, [r3, #0]
    c0f0:	3301      	adds	r3, #1
    c0f2:	b2da      	uxtb	r2, r3
    c0f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0fc:	701a      	strb	r2, [r3, #0]
    c0fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    c102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c106:	781b      	ldrb	r3, [r3, #0]
    c108:	2bff      	cmp	r3, #255	; 0xff
    c10a:	d105      	bne.n	c118 <send_mode+0x3ac>
    c10c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c114:	2200      	movs	r2, #0
    c116:	701a      	strb	r2, [r3, #0]
    c118:	f24c 5349 	movw	r3, #50505	; 0xc549
    c11c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c120:	781b      	ldrb	r3, [r3, #0]
    c122:	461a      	mov	r2, r3
    c124:	f240 533c 	movw	r3, #1340	; 0x53c
    c128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c12c:	7819      	ldrb	r1, [r3, #0]
    c12e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c136:	5499      	strb	r1, [r3, r2]
    c138:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c140:	781a      	ldrb	r2, [r3, #0]
    c142:	f240 533c 	movw	r3, #1340	; 0x53c
    c146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c14a:	781b      	ldrb	r3, [r3, #0]
    c14c:	4413      	add	r3, r2
    c14e:	b2da      	uxtb	r2, r3
    c150:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c158:	701a      	strb	r2, [r3, #0]
    c15a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c162:	781a      	ldrb	r2, [r3, #0]
    c164:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c16c:	781b      	ldrb	r3, [r3, #0]
    c16e:	4413      	add	r3, r2
    c170:	b2da      	uxtb	r2, r3
    c172:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c17a:	701a      	strb	r2, [r3, #0]
    c17c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c184:	781b      	ldrb	r3, [r3, #0]
    c186:	3301      	adds	r3, #1
    c188:	b2da      	uxtb	r2, r3
    c18a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c192:	701a      	strb	r2, [r3, #0]
    c194:	f24c 5349 	movw	r3, #50505	; 0xc549
    c198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19c:	781b      	ldrb	r3, [r3, #0]
    c19e:	2bff      	cmp	r3, #255	; 0xff
    c1a0:	d105      	bne.n	c1ae <send_mode+0x442>
    c1a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1aa:	2200      	movs	r2, #0
    c1ac:	701a      	strb	r2, [r3, #0]
    c1ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b6:	781b      	ldrb	r3, [r3, #0]
    c1b8:	461a      	mov	r2, r3
    c1ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c2:	7819      	ldrb	r1, [r3, #0]
    c1c4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1cc:	5499      	strb	r1, [r3, r2]
    c1ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d6:	781b      	ldrb	r3, [r3, #0]
    c1d8:	3301      	adds	r3, #1
    c1da:	b2da      	uxtb	r2, r3
    c1dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1e4:	701a      	strb	r2, [r3, #0]
    c1e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ee:	781b      	ldrb	r3, [r3, #0]
    c1f0:	2bff      	cmp	r3, #255	; 0xff
    c1f2:	d105      	bne.n	c200 <send_mode+0x494>
    c1f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1fc:	2200      	movs	r2, #0
    c1fe:	701a      	strb	r2, [r3, #0]
    c200:	f24c 5349 	movw	r3, #50505	; 0xc549
    c204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c208:	781b      	ldrb	r3, [r3, #0]
    c20a:	461a      	mov	r2, r3
    c20c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c214:	7819      	ldrb	r1, [r3, #0]
    c216:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c21e:	5499      	strb	r1, [r3, r2]
    c220:	f24c 5349 	movw	r3, #50505	; 0xc549
    c224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c228:	781b      	ldrb	r3, [r3, #0]
    c22a:	3301      	adds	r3, #1
    c22c:	b2da      	uxtb	r2, r3
    c22e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c236:	701a      	strb	r2, [r3, #0]
    c238:	f24c 5349 	movw	r3, #50505	; 0xc549
    c23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c240:	781b      	ldrb	r3, [r3, #0]
    c242:	2bff      	cmp	r3, #255	; 0xff
    c244:	d105      	bne.n	c252 <send_mode+0x4e6>
    c246:	f24c 5349 	movw	r3, #50505	; 0xc549
    c24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c24e:	2200      	movs	r2, #0
    c250:	701a      	strb	r2, [r3, #0]
    c252:	f242 0339 	movw	r3, #8249	; 0x2039
    c256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25a:	781b      	ldrb	r3, [r3, #0]
    c25c:	b2db      	uxtb	r3, r3
    c25e:	f003 0310 	and.w	r3, r3, #16
    c262:	2b00      	cmp	r3, #0
    c264:	d15a      	bne.n	c31c <send_mode+0x5b0>
    c266:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c26e:	781b      	ldrb	r3, [r3, #0]
    c270:	b2db      	uxtb	r3, r3
    c272:	461a      	mov	r2, r3
    c274:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c27c:	5c9a      	ldrb	r2, [r3, r2]
    c27e:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c286:	701a      	strb	r2, [r3, #0]
    c288:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c290:	2200      	movs	r2, #0
    c292:	701a      	strb	r2, [r3, #0]
    c294:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c29c:	781b      	ldrb	r3, [r3, #0]
    c29e:	b2db      	uxtb	r3, r3
    c2a0:	3301      	adds	r3, #1
    c2a2:	b2da      	uxtb	r2, r3
    c2a4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ac:	701a      	strb	r2, [r3, #0]
    c2ae:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b6:	781b      	ldrb	r3, [r3, #0]
    c2b8:	b2db      	uxtb	r3, r3
    c2ba:	2bff      	cmp	r3, #255	; 0xff
    c2bc:	d105      	bne.n	c2ca <send_mode+0x55e>
    c2be:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c6:	2200      	movs	r2, #0
    c2c8:	701a      	strb	r2, [r3, #0]
    c2ca:	f242 0338 	movw	r3, #8248	; 0x2038
    c2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d2:	f242 0238 	movw	r2, #8248	; 0x2038
    c2d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2da:	7812      	ldrb	r2, [r2, #0]
    c2dc:	b2d2      	uxtb	r2, r2
    c2de:	f042 0201 	orr.w	r2, r2, #1
    c2e2:	b2d2      	uxtb	r2, r2
    c2e4:	701a      	strb	r2, [r3, #0]
    c2e6:	f242 0339 	movw	r3, #8249	; 0x2039
    c2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ee:	f242 0239 	movw	r2, #8249	; 0x2039
    c2f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2f6:	7812      	ldrb	r2, [r2, #0]
    c2f8:	b2d2      	uxtb	r2, r2
    c2fa:	f042 0210 	orr.w	r2, r2, #16
    c2fe:	b2d2      	uxtb	r2, r2
    c300:	701a      	strb	r2, [r3, #0]
    c302:	e00b      	b.n	c31c <send_mode+0x5b0>
    c304:	f24c 5348 	movw	r3, #50504	; 0xc548
    c308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c30c:	781b      	ldrb	r3, [r3, #0]
    c30e:	3301      	adds	r3, #1
    c310:	b2da      	uxtb	r2, r3
    c312:	f24c 5348 	movw	r3, #50504	; 0xc548
    c316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c31a:	701a      	strb	r2, [r3, #0]
}
    c31c:	46bd      	mov	sp, r7
    c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c322:	4770      	bx	lr

0000c324 <send_debug>:
void send_debug(void){  //5000ms
    c324:	b480      	push	{r7}
    c326:	af00      	add	r7, sp, #0
  if(!boot)
    c328:	f240 533d 	movw	r3, #1341	; 0x53d
    c32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c330:	781b      	ldrb	r3, [r3, #0]
    c332:	2b00      	cmp	r3, #0
    c334:	f040 82cf 	bne.w	c8d6 <send_debug+0x5b2>
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c338:	f24c 5341 	movw	r3, #50497	; 0xc541
    c33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c340:	781a      	ldrb	r2, [r3, #0]
    c342:	f248 531f 	movw	r3, #34079	; 0x851f
    c346:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c34a:	fba3 1302 	umull	r1, r3, r3, r2
    c34e:	091b      	lsrs	r3, r3, #4
    c350:	2132      	movs	r1, #50	; 0x32
    c352:	fb01 f303 	mul.w	r3, r1, r3
    c356:	1ad3      	subs	r3, r2, r3
    c358:	b2db      	uxtb	r3, r3
    c35a:	2b1d      	cmp	r3, #29
    c35c:	f040 82bb 	bne.w	c8d6 <send_debug+0x5b2>
    c360:	f24c 5349 	movw	r3, #50505	; 0xc549
    c364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c368:	781a      	ldrb	r2, [r3, #0]
    c36a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c372:	781b      	ldrb	r3, [r3, #0]
    c374:	b2db      	uxtb	r3, r3
    c376:	429a      	cmp	r2, r3
    c378:	d313      	bcc.n	c3a2 <send_debug+0x7e>
    c37a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c382:	781b      	ldrb	r3, [r3, #0]
    c384:	b2db      	uxtb	r3, r3
    c386:	461a      	mov	r2, r3
    c388:	f24c 5349 	movw	r3, #50505	; 0xc549
    c38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c390:	781b      	ldrb	r3, [r3, #0]
    c392:	1ad3      	subs	r3, r2, r3
    c394:	33ff      	adds	r3, #255	; 0xff
    c396:	2b09      	cmp	r3, #9
    c398:	bfd4      	ite	le
    c39a:	2300      	movle	r3, #0
    c39c:	2301      	movgt	r3, #1
    c39e:	b2db      	uxtb	r3, r3
    c3a0:	e011      	b.n	c3c6 <send_debug+0xa2>
    c3a2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c3a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3aa:	781b      	ldrb	r3, [r3, #0]
    c3ac:	b2db      	uxtb	r3, r3
    c3ae:	461a      	mov	r2, r3
    c3b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b8:	781b      	ldrb	r3, [r3, #0]
    c3ba:	1ad3      	subs	r3, r2, r3
    c3bc:	2b09      	cmp	r3, #9
    c3be:	bfd4      	ite	le
    c3c0:	2300      	movle	r3, #0
    c3c2:	2301      	movgt	r3, #1
    c3c4:	b2db      	uxtb	r3, r3
    c3c6:	2b00      	cmp	r3, #0
    c3c8:	f000 8279 	beq.w	c8be <send_debug+0x59a>
    c3cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d4:	781b      	ldrb	r3, [r3, #0]
    c3d6:	461a      	mov	r2, r3
    c3d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e0:	2105      	movs	r1, #5
    c3e2:	5499      	strb	r1, [r3, r2]
    c3e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ec:	781b      	ldrb	r3, [r3, #0]
    c3ee:	3301      	adds	r3, #1
    c3f0:	b2da      	uxtb	r2, r3
    c3f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3fa:	701a      	strb	r2, [r3, #0]
    c3fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c404:	781b      	ldrb	r3, [r3, #0]
    c406:	2bff      	cmp	r3, #255	; 0xff
    c408:	d105      	bne.n	c416 <send_debug+0xf2>
    c40a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c412:	2200      	movs	r2, #0
    c414:	701a      	strb	r2, [r3, #0]
    c416:	f24c 5349 	movw	r3, #50505	; 0xc549
    c41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c41e:	781b      	ldrb	r3, [r3, #0]
    c420:	461a      	mov	r2, r3
    c422:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c42a:	210d      	movs	r1, #13
    c42c:	5499      	strb	r1, [r3, r2]
    c42e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c436:	781b      	ldrb	r3, [r3, #0]
    c438:	3301      	adds	r3, #1
    c43a:	b2da      	uxtb	r2, r3
    c43c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c444:	701a      	strb	r2, [r3, #0]
    c446:	f24c 5349 	movw	r3, #50505	; 0xc549
    c44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c44e:	781b      	ldrb	r3, [r3, #0]
    c450:	2bff      	cmp	r3, #255	; 0xff
    c452:	d105      	bne.n	c460 <send_debug+0x13c>
    c454:	f24c 5349 	movw	r3, #50505	; 0xc549
    c458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c45c:	2200      	movs	r2, #0
    c45e:	701a      	strb	r2, [r3, #0]
    c460:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c468:	220d      	movs	r2, #13
    c46a:	701a      	strb	r2, [r3, #0]
    c46c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c474:	220d      	movs	r2, #13
    c476:	701a      	strb	r2, [r3, #0]
    c478:	f24c 5349 	movw	r3, #50505	; 0xc549
    c47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c480:	781b      	ldrb	r3, [r3, #0]
    c482:	461a      	mov	r2, r3
    c484:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c48c:	781b      	ldrb	r3, [r3, #0]
    c48e:	b2d9      	uxtb	r1, r3
    c490:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c498:	5499      	strb	r1, [r3, r2]
    c49a:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a2:	781a      	ldrb	r2, [r3, #0]
    c4a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ac:	781b      	ldrb	r3, [r3, #0]
    c4ae:	4413      	add	r3, r2
    c4b0:	b2da      	uxtb	r2, r3
    c4b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ba:	701a      	strb	r2, [r3, #0]
    c4bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c4:	781a      	ldrb	r2, [r3, #0]
    c4c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ce:	781b      	ldrb	r3, [r3, #0]
    c4d0:	4413      	add	r3, r2
    c4d2:	b2da      	uxtb	r2, r3
    c4d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4dc:	701a      	strb	r2, [r3, #0]
    c4de:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e6:	781b      	ldrb	r3, [r3, #0]
    c4e8:	3301      	adds	r3, #1
    c4ea:	b2da      	uxtb	r2, r3
    c4ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f4:	701a      	strb	r2, [r3, #0]
    c4f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4fe:	781b      	ldrb	r3, [r3, #0]
    c500:	2bff      	cmp	r3, #255	; 0xff
    c502:	d105      	bne.n	c510 <send_debug+0x1ec>
    c504:	f24c 5349 	movw	r3, #50505	; 0xc549
    c508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50c:	2200      	movs	r2, #0
    c50e:	701a      	strb	r2, [r3, #0]
    c510:	f24c 5349 	movw	r3, #50505	; 0xc549
    c514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c518:	781b      	ldrb	r3, [r3, #0]
    c51a:	461a      	mov	r2, r3
    c51c:	f24c 6380 	movw	r3, #50816	; 0xc680
    c520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c524:	7819      	ldrb	r1, [r3, #0]
    c526:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c52e:	5499      	strb	r1, [r3, r2]
    c530:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c538:	781a      	ldrb	r2, [r3, #0]
    c53a:	f24c 6380 	movw	r3, #50816	; 0xc680
    c53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c542:	781b      	ldrb	r3, [r3, #0]
    c544:	4413      	add	r3, r2
    c546:	b2da      	uxtb	r2, r3
    c548:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c550:	701a      	strb	r2, [r3, #0]
    c552:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c55a:	781a      	ldrb	r2, [r3, #0]
    c55c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c564:	781b      	ldrb	r3, [r3, #0]
    c566:	4413      	add	r3, r2
    c568:	b2da      	uxtb	r2, r3
    c56a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c572:	701a      	strb	r2, [r3, #0]
    c574:	f24c 5349 	movw	r3, #50505	; 0xc549
    c578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c57c:	781b      	ldrb	r3, [r3, #0]
    c57e:	3301      	adds	r3, #1
    c580:	b2da      	uxtb	r2, r3
    c582:	f24c 5349 	movw	r3, #50505	; 0xc549
    c586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c58a:	701a      	strb	r2, [r3, #0]
    c58c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c594:	781b      	ldrb	r3, [r3, #0]
    c596:	2bff      	cmp	r3, #255	; 0xff
    c598:	d105      	bne.n	c5a6 <send_debug+0x282>
    c59a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a2:	2200      	movs	r2, #0
    c5a4:	701a      	strb	r2, [r3, #0]
    c5a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ae:	781b      	ldrb	r3, [r3, #0]
    c5b0:	461a      	mov	r2, r3
    c5b2:	f24c 5348 	movw	r3, #50504	; 0xc548
    c5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ba:	7819      	ldrb	r1, [r3, #0]
    c5bc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c4:	5499      	strb	r1, [r3, r2]
    c5c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ce:	781a      	ldrb	r2, [r3, #0]
    c5d0:	f24c 5348 	movw	r3, #50504	; 0xc548
    c5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d8:	781b      	ldrb	r3, [r3, #0]
    c5da:	4413      	add	r3, r2
    c5dc:	b2da      	uxtb	r2, r3
    c5de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e6:	701a      	strb	r2, [r3, #0]
    c5e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f0:	781a      	ldrb	r2, [r3, #0]
    c5f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5fa:	781b      	ldrb	r3, [r3, #0]
    c5fc:	4413      	add	r3, r2
    c5fe:	b2da      	uxtb	r2, r3
    c600:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c608:	701a      	strb	r2, [r3, #0]
    c60a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c612:	781b      	ldrb	r3, [r3, #0]
    c614:	3301      	adds	r3, #1
    c616:	b2da      	uxtb	r2, r3
    c618:	f24c 5349 	movw	r3, #50505	; 0xc549
    c61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c620:	701a      	strb	r2, [r3, #0]
    c622:	f24c 5349 	movw	r3, #50505	; 0xc549
    c626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c62a:	781b      	ldrb	r3, [r3, #0]
    c62c:	2bff      	cmp	r3, #255	; 0xff
    c62e:	d105      	bne.n	c63c <send_debug+0x318>
    c630:	f24c 5349 	movw	r3, #50505	; 0xc549
    c634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c638:	2200      	movs	r2, #0
    c63a:	701a      	strb	r2, [r3, #0]
    c63c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c644:	781b      	ldrb	r3, [r3, #0]
    c646:	461a      	mov	r2, r3
    c648:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c650:	7819      	ldrb	r1, [r3, #0]
    c652:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c65a:	5499      	strb	r1, [r3, r2]
    c65c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c664:	781a      	ldrb	r2, [r3, #0]
    c666:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c66e:	781b      	ldrb	r3, [r3, #0]
    c670:	4413      	add	r3, r2
    c672:	b2da      	uxtb	r2, r3
    c674:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c67c:	701a      	strb	r2, [r3, #0]
    c67e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c686:	781a      	ldrb	r2, [r3, #0]
    c688:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c690:	781b      	ldrb	r3, [r3, #0]
    c692:	4413      	add	r3, r2
    c694:	b2da      	uxtb	r2, r3
    c696:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c69e:	701a      	strb	r2, [r3, #0]
    c6a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a8:	781b      	ldrb	r3, [r3, #0]
    c6aa:	3301      	adds	r3, #1
    c6ac:	b2da      	uxtb	r2, r3
    c6ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b6:	701a      	strb	r2, [r3, #0]
    c6b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c0:	781b      	ldrb	r3, [r3, #0]
    c6c2:	2bff      	cmp	r3, #255	; 0xff
    c6c4:	d105      	bne.n	c6d2 <send_debug+0x3ae>
    c6c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ce:	2200      	movs	r2, #0
    c6d0:	701a      	strb	r2, [r3, #0]
    c6d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6da:	781b      	ldrb	r3, [r3, #0]
    c6dc:	461a      	mov	r2, r3
    c6de:	f24c 5334 	movw	r3, #50484	; 0xc534
    c6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e6:	7819      	ldrb	r1, [r3, #0]
    c6e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f0:	5499      	strb	r1, [r3, r2]
    c6f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6fa:	781a      	ldrb	r2, [r3, #0]
    c6fc:	f24c 5334 	movw	r3, #50484	; 0xc534
    c700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c704:	781b      	ldrb	r3, [r3, #0]
    c706:	4413      	add	r3, r2
    c708:	b2da      	uxtb	r2, r3
    c70a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c712:	701a      	strb	r2, [r3, #0]
    c714:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c71c:	781a      	ldrb	r2, [r3, #0]
    c71e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c726:	781b      	ldrb	r3, [r3, #0]
    c728:	4413      	add	r3, r2
    c72a:	b2da      	uxtb	r2, r3
    c72c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c734:	701a      	strb	r2, [r3, #0]
    c736:	f24c 5349 	movw	r3, #50505	; 0xc549
    c73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73e:	781b      	ldrb	r3, [r3, #0]
    c740:	3301      	adds	r3, #1
    c742:	b2da      	uxtb	r2, r3
    c744:	f24c 5349 	movw	r3, #50505	; 0xc549
    c748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c74c:	701a      	strb	r2, [r3, #0]
    c74e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c756:	781b      	ldrb	r3, [r3, #0]
    c758:	2bff      	cmp	r3, #255	; 0xff
    c75a:	d105      	bne.n	c768 <send_debug+0x444>
    c75c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c764:	2200      	movs	r2, #0
    c766:	701a      	strb	r2, [r3, #0]
    c768:	f24c 5349 	movw	r3, #50505	; 0xc549
    c76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c770:	781b      	ldrb	r3, [r3, #0]
    c772:	461a      	mov	r2, r3
    c774:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c77c:	7819      	ldrb	r1, [r3, #0]
    c77e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c786:	5499      	strb	r1, [r3, r2]
    c788:	f24c 5349 	movw	r3, #50505	; 0xc549
    c78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c790:	781b      	ldrb	r3, [r3, #0]
    c792:	3301      	adds	r3, #1
    c794:	b2da      	uxtb	r2, r3
    c796:	f24c 5349 	movw	r3, #50505	; 0xc549
    c79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c79e:	701a      	strb	r2, [r3, #0]
    c7a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a8:	781b      	ldrb	r3, [r3, #0]
    c7aa:	2bff      	cmp	r3, #255	; 0xff
    c7ac:	d105      	bne.n	c7ba <send_debug+0x496>
    c7ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b6:	2200      	movs	r2, #0
    c7b8:	701a      	strb	r2, [r3, #0]
    c7ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c2:	781b      	ldrb	r3, [r3, #0]
    c7c4:	461a      	mov	r2, r3
    c7c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ce:	7819      	ldrb	r1, [r3, #0]
    c7d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d8:	5499      	strb	r1, [r3, r2]
    c7da:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e2:	781b      	ldrb	r3, [r3, #0]
    c7e4:	3301      	adds	r3, #1
    c7e6:	b2da      	uxtb	r2, r3
    c7e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f0:	701a      	strb	r2, [r3, #0]
    c7f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7fa:	781b      	ldrb	r3, [r3, #0]
    c7fc:	2bff      	cmp	r3, #255	; 0xff
    c7fe:	d105      	bne.n	c80c <send_debug+0x4e8>
    c800:	f24c 5349 	movw	r3, #50505	; 0xc549
    c804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c808:	2200      	movs	r2, #0
    c80a:	701a      	strb	r2, [r3, #0]
    c80c:	f242 0339 	movw	r3, #8249	; 0x2039
    c810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c814:	781b      	ldrb	r3, [r3, #0]
    c816:	b2db      	uxtb	r3, r3
    c818:	f003 0310 	and.w	r3, r3, #16
    c81c:	2b00      	cmp	r3, #0
    c81e:	d15a      	bne.n	c8d6 <send_debug+0x5b2>
    c820:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c828:	781b      	ldrb	r3, [r3, #0]
    c82a:	b2db      	uxtb	r3, r3
    c82c:	461a      	mov	r2, r3
    c82e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c836:	5c9a      	ldrb	r2, [r3, r2]
    c838:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c840:	701a      	strb	r2, [r3, #0]
    c842:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c84a:	2200      	movs	r2, #0
    c84c:	701a      	strb	r2, [r3, #0]
    c84e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c856:	781b      	ldrb	r3, [r3, #0]
    c858:	b2db      	uxtb	r3, r3
    c85a:	3301      	adds	r3, #1
    c85c:	b2da      	uxtb	r2, r3
    c85e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c866:	701a      	strb	r2, [r3, #0]
    c868:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c870:	781b      	ldrb	r3, [r3, #0]
    c872:	b2db      	uxtb	r3, r3
    c874:	2bff      	cmp	r3, #255	; 0xff
    c876:	d105      	bne.n	c884 <send_debug+0x560>
    c878:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c880:	2200      	movs	r2, #0
    c882:	701a      	strb	r2, [r3, #0]
    c884:	f242 0338 	movw	r3, #8248	; 0x2038
    c888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c88c:	f242 0238 	movw	r2, #8248	; 0x2038
    c890:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c894:	7812      	ldrb	r2, [r2, #0]
    c896:	b2d2      	uxtb	r2, r2
    c898:	f042 0201 	orr.w	r2, r2, #1
    c89c:	b2d2      	uxtb	r2, r2
    c89e:	701a      	strb	r2, [r3, #0]
    c8a0:	f242 0339 	movw	r3, #8249	; 0x2039
    c8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8a8:	f242 0239 	movw	r2, #8249	; 0x2039
    c8ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c8b0:	7812      	ldrb	r2, [r2, #0]
    c8b2:	b2d2      	uxtb	r2, r2
    c8b4:	f042 0210 	orr.w	r2, r2, #16
    c8b8:	b2d2      	uxtb	r2, r2
    c8ba:	701a      	strb	r2, [r3, #0]
    c8bc:	e00b      	b.n	c8d6 <send_debug+0x5b2>
    c8be:	f24c 5348 	movw	r3, #50504	; 0xc548
    c8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c6:	781b      	ldrb	r3, [r3, #0]
    c8c8:	3301      	adds	r3, #1
    c8ca:	b2da      	uxtb	r2, r3
    c8cc:	f24c 5348 	movw	r3, #50504	; 0xc548
    c8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d4:	701a      	strb	r2, [r3, #0]
}
    c8d6:	46bd      	mov	sp, r7
    c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8dc:	4770      	bx	lr
    c8de:	bf00      	nop

0000c8e0 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c8e0:	b480      	push	{r7}
    c8e2:	af00      	add	r7, sp, #0
  if(!boot)
    c8e4:	f240 533d 	movw	r3, #1341	; 0x53d
    c8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ec:	781b      	ldrb	r3, [r3, #0]
    c8ee:	2b00      	cmp	r3, #0
    c8f0:	f040 83a9 	bne.w	d046 <send_nav_ref+0x766>
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c8f4:	f24c 5341 	movw	r3, #50497	; 0xc541
    c8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8fc:	781a      	ldrb	r2, [r3, #0]
    c8fe:	f248 531f 	movw	r3, #34079	; 0x851f
    c902:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c906:	fba3 1302 	umull	r1, r3, r3, r2
    c90a:	095b      	lsrs	r3, r3, #5
    c90c:	2164      	movs	r1, #100	; 0x64
    c90e:	fb01 f303 	mul.w	r3, r1, r3
    c912:	1ad3      	subs	r3, r2, r3
    c914:	b2db      	uxtb	r3, r3
    c916:	2b31      	cmp	r3, #49	; 0x31
    c918:	f040 8395 	bne.w	d046 <send_nav_ref+0x766>
    c91c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c924:	781a      	ldrb	r2, [r3, #0]
    c926:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c92e:	781b      	ldrb	r3, [r3, #0]
    c930:	b2db      	uxtb	r3, r3
    c932:	429a      	cmp	r2, r3
    c934:	d313      	bcc.n	c95e <send_nav_ref+0x7e>
    c936:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93e:	781b      	ldrb	r3, [r3, #0]
    c940:	b2db      	uxtb	r3, r3
    c942:	461a      	mov	r2, r3
    c944:	f24c 5349 	movw	r3, #50505	; 0xc549
    c948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c94c:	781b      	ldrb	r3, [r3, #0]
    c94e:	1ad3      	subs	r3, r2, r3
    c950:	33ff      	adds	r3, #255	; 0xff
    c952:	2b0c      	cmp	r3, #12
    c954:	bfd4      	ite	le
    c956:	2300      	movle	r3, #0
    c958:	2301      	movgt	r3, #1
    c95a:	b2db      	uxtb	r3, r3
    c95c:	e011      	b.n	c982 <send_nav_ref+0xa2>
    c95e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c966:	781b      	ldrb	r3, [r3, #0]
    c968:	b2db      	uxtb	r3, r3
    c96a:	461a      	mov	r2, r3
    c96c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c974:	781b      	ldrb	r3, [r3, #0]
    c976:	1ad3      	subs	r3, r2, r3
    c978:	2b0c      	cmp	r3, #12
    c97a:	bfd4      	ite	le
    c97c:	2300      	movle	r3, #0
    c97e:	2301      	movgt	r3, #1
    c980:	b2db      	uxtb	r3, r3
    c982:	2b00      	cmp	r3, #0
    c984:	f000 8353 	beq.w	d02e <send_nav_ref+0x74e>
    c988:	f24c 5349 	movw	r3, #50505	; 0xc549
    c98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c990:	781b      	ldrb	r3, [r3, #0]
    c992:	461a      	mov	r2, r3
    c994:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c99c:	2105      	movs	r1, #5
    c99e:	5499      	strb	r1, [r3, r2]
    c9a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a8:	781b      	ldrb	r3, [r3, #0]
    c9aa:	3301      	adds	r3, #1
    c9ac:	b2da      	uxtb	r2, r3
    c9ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b6:	701a      	strb	r2, [r3, #0]
    c9b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9c0:	781b      	ldrb	r3, [r3, #0]
    c9c2:	2bff      	cmp	r3, #255	; 0xff
    c9c4:	d105      	bne.n	c9d2 <send_nav_ref+0xf2>
    c9c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ce:	2200      	movs	r2, #0
    c9d0:	701a      	strb	r2, [r3, #0]
    c9d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9da:	781b      	ldrb	r3, [r3, #0]
    c9dc:	461a      	mov	r2, r3
    c9de:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e6:	2109      	movs	r1, #9
    c9e8:	5499      	strb	r1, [r3, r2]
    c9ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f2:	781b      	ldrb	r3, [r3, #0]
    c9f4:	3301      	adds	r3, #1
    c9f6:	b2da      	uxtb	r2, r3
    c9f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca00:	701a      	strb	r2, [r3, #0]
    ca02:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0a:	781b      	ldrb	r3, [r3, #0]
    ca0c:	2bff      	cmp	r3, #255	; 0xff
    ca0e:	d105      	bne.n	ca1c <send_nav_ref+0x13c>
    ca10:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca18:	2200      	movs	r2, #0
    ca1a:	701a      	strb	r2, [r3, #0]
    ca1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca24:	2209      	movs	r2, #9
    ca26:	701a      	strb	r2, [r3, #0]
    ca28:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca30:	2209      	movs	r2, #9
    ca32:	701a      	strb	r2, [r3, #0]
    ca34:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3c:	781b      	ldrb	r3, [r3, #0]
    ca3e:	461a      	mov	r2, r3
    ca40:	f648 23c4 	movw	r3, #35524	; 0x8ac4
    ca44:	f2c0 0301 	movt	r3, #1
    ca48:	7819      	ldrb	r1, [r3, #0]
    ca4a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ca4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca52:	5499      	strb	r1, [r3, r2]
    ca54:	f648 23c4 	movw	r3, #35524	; 0x8ac4
    ca58:	f2c0 0301 	movt	r3, #1
    ca5c:	781a      	ldrb	r2, [r3, #0]
    ca5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca66:	781b      	ldrb	r3, [r3, #0]
    ca68:	4413      	add	r3, r2
    ca6a:	b2da      	uxtb	r2, r3
    ca6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca74:	701a      	strb	r2, [r3, #0]
    ca76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca7e:	781a      	ldrb	r2, [r3, #0]
    ca80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca88:	781b      	ldrb	r3, [r3, #0]
    ca8a:	4413      	add	r3, r2
    ca8c:	b2da      	uxtb	r2, r3
    ca8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca96:	701a      	strb	r2, [r3, #0]
    ca98:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa0:	781b      	ldrb	r3, [r3, #0]
    caa2:	3301      	adds	r3, #1
    caa4:	b2da      	uxtb	r2, r3
    caa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    caaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caae:	701a      	strb	r2, [r3, #0]
    cab0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab8:	781b      	ldrb	r3, [r3, #0]
    caba:	2bff      	cmp	r3, #255	; 0xff
    cabc:	d105      	bne.n	caca <send_nav_ref+0x1ea>
    cabe:	f24c 5349 	movw	r3, #50505	; 0xc549
    cac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac6:	2200      	movs	r2, #0
    cac8:	701a      	strb	r2, [r3, #0]
    caca:	f24c 5349 	movw	r3, #50505	; 0xc549
    cace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad2:	781b      	ldrb	r3, [r3, #0]
    cad4:	461a      	mov	r2, r3
    cad6:	f648 23c4 	movw	r3, #35524	; 0x8ac4
    cada:	f2c0 0301 	movt	r3, #1
    cade:	7859      	ldrb	r1, [r3, #1]
    cae0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae8:	5499      	strb	r1, [r3, r2]
    caea:	4bd2      	ldr	r3, [pc, #840]	; (ce34 <send_nav_ref+0x554>)
    caec:	781a      	ldrb	r2, [r3, #0]
    caee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    caf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf6:	781b      	ldrb	r3, [r3, #0]
    caf8:	4413      	add	r3, r2
    cafa:	b2da      	uxtb	r2, r3
    cafc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb04:	701a      	strb	r2, [r3, #0]
    cb06:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb0e:	781a      	ldrb	r2, [r3, #0]
    cb10:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb18:	781b      	ldrb	r3, [r3, #0]
    cb1a:	4413      	add	r3, r2
    cb1c:	b2da      	uxtb	r2, r3
    cb1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb26:	701a      	strb	r2, [r3, #0]
    cb28:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb30:	781b      	ldrb	r3, [r3, #0]
    cb32:	3301      	adds	r3, #1
    cb34:	b2da      	uxtb	r2, r3
    cb36:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb3e:	701a      	strb	r2, [r3, #0]
    cb40:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb48:	781b      	ldrb	r3, [r3, #0]
    cb4a:	2bff      	cmp	r3, #255	; 0xff
    cb4c:	d105      	bne.n	cb5a <send_nav_ref+0x27a>
    cb4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb56:	2200      	movs	r2, #0
    cb58:	701a      	strb	r2, [r3, #0]
    cb5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb62:	781b      	ldrb	r3, [r3, #0]
    cb64:	461a      	mov	r2, r3
    cb66:	f648 23c4 	movw	r3, #35524	; 0x8ac4
    cb6a:	f2c0 0301 	movt	r3, #1
    cb6e:	7899      	ldrb	r1, [r3, #2]
    cb70:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb78:	5499      	strb	r1, [r3, r2]
    cb7a:	4baf      	ldr	r3, [pc, #700]	; (ce38 <send_nav_ref+0x558>)
    cb7c:	781a      	ldrb	r2, [r3, #0]
    cb7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb86:	781b      	ldrb	r3, [r3, #0]
    cb88:	4413      	add	r3, r2
    cb8a:	b2da      	uxtb	r2, r3
    cb8c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb94:	701a      	strb	r2, [r3, #0]
    cb96:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb9e:	781a      	ldrb	r2, [r3, #0]
    cba0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba8:	781b      	ldrb	r3, [r3, #0]
    cbaa:	4413      	add	r3, r2
    cbac:	b2da      	uxtb	r2, r3
    cbae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb6:	701a      	strb	r2, [r3, #0]
    cbb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc0:	781b      	ldrb	r3, [r3, #0]
    cbc2:	3301      	adds	r3, #1
    cbc4:	b2da      	uxtb	r2, r3
    cbc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbce:	701a      	strb	r2, [r3, #0]
    cbd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd8:	781b      	ldrb	r3, [r3, #0]
    cbda:	2bff      	cmp	r3, #255	; 0xff
    cbdc:	d105      	bne.n	cbea <send_nav_ref+0x30a>
    cbde:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe6:	2200      	movs	r2, #0
    cbe8:	701a      	strb	r2, [r3, #0]
    cbea:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf2:	781b      	ldrb	r3, [r3, #0]
    cbf4:	461a      	mov	r2, r3
    cbf6:	f648 23c4 	movw	r3, #35524	; 0x8ac4
    cbfa:	f2c0 0301 	movt	r3, #1
    cbfe:	78d9      	ldrb	r1, [r3, #3]
    cc00:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc08:	5499      	strb	r1, [r3, r2]
    cc0a:	4b8c      	ldr	r3, [pc, #560]	; (ce3c <send_nav_ref+0x55c>)
    cc0c:	781a      	ldrb	r2, [r3, #0]
    cc0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc16:	781b      	ldrb	r3, [r3, #0]
    cc18:	4413      	add	r3, r2
    cc1a:	b2da      	uxtb	r2, r3
    cc1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc24:	701a      	strb	r2, [r3, #0]
    cc26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc2e:	781a      	ldrb	r2, [r3, #0]
    cc30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc38:	781b      	ldrb	r3, [r3, #0]
    cc3a:	4413      	add	r3, r2
    cc3c:	b2da      	uxtb	r2, r3
    cc3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc46:	701a      	strb	r2, [r3, #0]
    cc48:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc50:	781b      	ldrb	r3, [r3, #0]
    cc52:	3301      	adds	r3, #1
    cc54:	b2da      	uxtb	r2, r3
    cc56:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc5e:	701a      	strb	r2, [r3, #0]
    cc60:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc68:	781b      	ldrb	r3, [r3, #0]
    cc6a:	2bff      	cmp	r3, #255	; 0xff
    cc6c:	d105      	bne.n	cc7a <send_nav_ref+0x39a>
    cc6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc76:	2200      	movs	r2, #0
    cc78:	701a      	strb	r2, [r3, #0]
    cc7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc82:	781b      	ldrb	r3, [r3, #0]
    cc84:	461a      	mov	r2, r3
    cc86:	f648 23c8 	movw	r3, #35528	; 0x8ac8
    cc8a:	f2c0 0301 	movt	r3, #1
    cc8e:	7819      	ldrb	r1, [r3, #0]
    cc90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cc94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc98:	5499      	strb	r1, [r3, r2]
    cc9a:	f648 23c8 	movw	r3, #35528	; 0x8ac8
    cc9e:	f2c0 0301 	movt	r3, #1
    cca2:	781a      	ldrb	r2, [r3, #0]
    cca4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccac:	781b      	ldrb	r3, [r3, #0]
    ccae:	4413      	add	r3, r2
    ccb0:	b2da      	uxtb	r2, r3
    ccb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccba:	701a      	strb	r2, [r3, #0]
    ccbc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ccc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc4:	781a      	ldrb	r2, [r3, #0]
    ccc6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccce:	781b      	ldrb	r3, [r3, #0]
    ccd0:	4413      	add	r3, r2
    ccd2:	b2da      	uxtb	r2, r3
    ccd4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ccd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccdc:	701a      	strb	r2, [r3, #0]
    ccde:	f24c 5349 	movw	r3, #50505	; 0xc549
    cce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce6:	781b      	ldrb	r3, [r3, #0]
    cce8:	3301      	adds	r3, #1
    ccea:	b2da      	uxtb	r2, r3
    ccec:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccf4:	701a      	strb	r2, [r3, #0]
    ccf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccfe:	781b      	ldrb	r3, [r3, #0]
    cd00:	2bff      	cmp	r3, #255	; 0xff
    cd02:	d105      	bne.n	cd10 <send_nav_ref+0x430>
    cd04:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd0c:	2200      	movs	r2, #0
    cd0e:	701a      	strb	r2, [r3, #0]
    cd10:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd18:	781b      	ldrb	r3, [r3, #0]
    cd1a:	461a      	mov	r2, r3
    cd1c:	f648 23c8 	movw	r3, #35528	; 0x8ac8
    cd20:	f2c0 0301 	movt	r3, #1
    cd24:	7859      	ldrb	r1, [r3, #1]
    cd26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd2e:	5499      	strb	r1, [r3, r2]
    cd30:	4b43      	ldr	r3, [pc, #268]	; (ce40 <send_nav_ref+0x560>)
    cd32:	781a      	ldrb	r2, [r3, #0]
    cd34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd3c:	781b      	ldrb	r3, [r3, #0]
    cd3e:	4413      	add	r3, r2
    cd40:	b2da      	uxtb	r2, r3
    cd42:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd4a:	701a      	strb	r2, [r3, #0]
    cd4c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd54:	781a      	ldrb	r2, [r3, #0]
    cd56:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5e:	781b      	ldrb	r3, [r3, #0]
    cd60:	4413      	add	r3, r2
    cd62:	b2da      	uxtb	r2, r3
    cd64:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd6c:	701a      	strb	r2, [r3, #0]
    cd6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd76:	781b      	ldrb	r3, [r3, #0]
    cd78:	3301      	adds	r3, #1
    cd7a:	b2da      	uxtb	r2, r3
    cd7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd84:	701a      	strb	r2, [r3, #0]
    cd86:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8e:	781b      	ldrb	r3, [r3, #0]
    cd90:	2bff      	cmp	r3, #255	; 0xff
    cd92:	d105      	bne.n	cda0 <send_nav_ref+0x4c0>
    cd94:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd9c:	2200      	movs	r2, #0
    cd9e:	701a      	strb	r2, [r3, #0]
    cda0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cda4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda8:	781b      	ldrb	r3, [r3, #0]
    cdaa:	461a      	mov	r2, r3
    cdac:	f648 23c8 	movw	r3, #35528	; 0x8ac8
    cdb0:	f2c0 0301 	movt	r3, #1
    cdb4:	7899      	ldrb	r1, [r3, #2]
    cdb6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cdba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdbe:	5499      	strb	r1, [r3, r2]
    cdc0:	4b20      	ldr	r3, [pc, #128]	; (ce44 <send_nav_ref+0x564>)
    cdc2:	781a      	ldrb	r2, [r3, #0]
    cdc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cdc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdcc:	781b      	ldrb	r3, [r3, #0]
    cdce:	4413      	add	r3, r2
    cdd0:	b2da      	uxtb	r2, r3
    cdd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cdd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdda:	701a      	strb	r2, [r3, #0]
    cddc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cde4:	781a      	ldrb	r2, [r3, #0]
    cde6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cdea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdee:	781b      	ldrb	r3, [r3, #0]
    cdf0:	4413      	add	r3, r2
    cdf2:	b2da      	uxtb	r2, r3
    cdf4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cdf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdfc:	701a      	strb	r2, [r3, #0]
    cdfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce06:	781b      	ldrb	r3, [r3, #0]
    ce08:	3301      	adds	r3, #1
    ce0a:	b2da      	uxtb	r2, r3
    ce0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce14:	701a      	strb	r2, [r3, #0]
    ce16:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce1e:	781b      	ldrb	r3, [r3, #0]
    ce20:	2bff      	cmp	r3, #255	; 0xff
    ce22:	d111      	bne.n	ce48 <send_nav_ref+0x568>
    ce24:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce2c:	2200      	movs	r2, #0
    ce2e:	701a      	strb	r2, [r3, #0]
    ce30:	e00a      	b.n	ce48 <send_nav_ref+0x568>
    ce32:	bf00      	nop
    ce34:	00018ac5 	.word	0x00018ac5
    ce38:	00018ac6 	.word	0x00018ac6
    ce3c:	00018ac7 	.word	0x00018ac7
    ce40:	00018ac9 	.word	0x00018ac9
    ce44:	00018aca 	.word	0x00018aca
    ce48:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce50:	781b      	ldrb	r3, [r3, #0]
    ce52:	461a      	mov	r2, r3
    ce54:	f648 23c8 	movw	r3, #35528	; 0x8ac8
    ce58:	f2c0 0301 	movt	r3, #1
    ce5c:	78d9      	ldrb	r1, [r3, #3]
    ce5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ce62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce66:	5499      	strb	r1, [r3, r2]
    ce68:	4b79      	ldr	r3, [pc, #484]	; (d050 <send_nav_ref+0x770>)
    ce6a:	781a      	ldrb	r2, [r3, #0]
    ce6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce74:	781b      	ldrb	r3, [r3, #0]
    ce76:	4413      	add	r3, r2
    ce78:	b2da      	uxtb	r2, r3
    ce7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce82:	701a      	strb	r2, [r3, #0]
    ce84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce8c:	781a      	ldrb	r2, [r3, #0]
    ce8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce96:	781b      	ldrb	r3, [r3, #0]
    ce98:	4413      	add	r3, r2
    ce9a:	b2da      	uxtb	r2, r3
    ce9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea4:	701a      	strb	r2, [r3, #0]
    cea6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ceaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceae:	781b      	ldrb	r3, [r3, #0]
    ceb0:	3301      	adds	r3, #1
    ceb2:	b2da      	uxtb	r2, r3
    ceb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ceb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cebc:	701a      	strb	r2, [r3, #0]
    cebe:	f24c 5349 	movw	r3, #50505	; 0xc549
    cec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec6:	781b      	ldrb	r3, [r3, #0]
    cec8:	2bff      	cmp	r3, #255	; 0xff
    ceca:	d105      	bne.n	ced8 <send_nav_ref+0x5f8>
    cecc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ced0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced4:	2200      	movs	r2, #0
    ced6:	701a      	strb	r2, [r3, #0]
    ced8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee0:	781b      	ldrb	r3, [r3, #0]
    cee2:	461a      	mov	r2, r3
    cee4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceec:	7819      	ldrb	r1, [r3, #0]
    ceee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef6:	5499      	strb	r1, [r3, r2]
    cef8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf00:	781b      	ldrb	r3, [r3, #0]
    cf02:	3301      	adds	r3, #1
    cf04:	b2da      	uxtb	r2, r3
    cf06:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf0e:	701a      	strb	r2, [r3, #0]
    cf10:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf18:	781b      	ldrb	r3, [r3, #0]
    cf1a:	2bff      	cmp	r3, #255	; 0xff
    cf1c:	d105      	bne.n	cf2a <send_nav_ref+0x64a>
    cf1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf26:	2200      	movs	r2, #0
    cf28:	701a      	strb	r2, [r3, #0]
    cf2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf32:	781b      	ldrb	r3, [r3, #0]
    cf34:	461a      	mov	r2, r3
    cf36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cf3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf3e:	7819      	ldrb	r1, [r3, #0]
    cf40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cf44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf48:	5499      	strb	r1, [r3, r2]
    cf4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf52:	781b      	ldrb	r3, [r3, #0]
    cf54:	3301      	adds	r3, #1
    cf56:	b2da      	uxtb	r2, r3
    cf58:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf60:	701a      	strb	r2, [r3, #0]
    cf62:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf6a:	781b      	ldrb	r3, [r3, #0]
    cf6c:	2bff      	cmp	r3, #255	; 0xff
    cf6e:	d105      	bne.n	cf7c <send_nav_ref+0x69c>
    cf70:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf78:	2200      	movs	r2, #0
    cf7a:	701a      	strb	r2, [r3, #0]
    cf7c:	f242 0339 	movw	r3, #8249	; 0x2039
    cf80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf84:	781b      	ldrb	r3, [r3, #0]
    cf86:	b2db      	uxtb	r3, r3
    cf88:	f003 0310 	and.w	r3, r3, #16
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	d15a      	bne.n	d046 <send_nav_ref+0x766>
    cf90:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf98:	781b      	ldrb	r3, [r3, #0]
    cf9a:	b2db      	uxtb	r3, r3
    cf9c:	461a      	mov	r2, r3
    cf9e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cfa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfa6:	5c9a      	ldrb	r2, [r3, r2]
    cfa8:	f24c 634b 	movw	r3, #50763	; 0xc64b
    cfac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb0:	701a      	strb	r2, [r3, #0]
    cfb2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    cfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfba:	2200      	movs	r2, #0
    cfbc:	701a      	strb	r2, [r3, #0]
    cfbe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cfc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfc6:	781b      	ldrb	r3, [r3, #0]
    cfc8:	b2db      	uxtb	r3, r3
    cfca:	3301      	adds	r3, #1
    cfcc:	b2da      	uxtb	r2, r3
    cfce:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd6:	701a      	strb	r2, [r3, #0]
    cfd8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cfdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfe0:	781b      	ldrb	r3, [r3, #0]
    cfe2:	b2db      	uxtb	r3, r3
    cfe4:	2bff      	cmp	r3, #255	; 0xff
    cfe6:	d105      	bne.n	cff4 <send_nav_ref+0x714>
    cfe8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cfec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff0:	2200      	movs	r2, #0
    cff2:	701a      	strb	r2, [r3, #0]
    cff4:	f242 0338 	movw	r3, #8248	; 0x2038
    cff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cffc:	f242 0238 	movw	r2, #8248	; 0x2038
    d000:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d004:	7812      	ldrb	r2, [r2, #0]
    d006:	b2d2      	uxtb	r2, r2
    d008:	f042 0201 	orr.w	r2, r2, #1
    d00c:	b2d2      	uxtb	r2, r2
    d00e:	701a      	strb	r2, [r3, #0]
    d010:	f242 0339 	movw	r3, #8249	; 0x2039
    d014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d018:	f242 0239 	movw	r2, #8249	; 0x2039
    d01c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d020:	7812      	ldrb	r2, [r2, #0]
    d022:	b2d2      	uxtb	r2, r2
    d024:	f042 0210 	orr.w	r2, r2, #16
    d028:	b2d2      	uxtb	r2, r2
    d02a:	701a      	strb	r2, [r3, #0]
    d02c:	e00b      	b.n	d046 <send_nav_ref+0x766>
    d02e:	f24c 5348 	movw	r3, #50504	; 0xc548
    d032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d036:	781b      	ldrb	r3, [r3, #0]
    d038:	3301      	adds	r3, #1
    d03a:	b2da      	uxtb	r2, r3
    d03c:	f24c 5348 	movw	r3, #50504	; 0xc548
    d040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d044:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    d046:	46bd      	mov	sp, r7
    d048:	f85d 7b04 	ldr.w	r7, [sp], #4
    d04c:	4770      	bx	lr
    d04e:	bf00      	nop
    d050:	00018acb 	.word	0x00018acb

0000d054 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    d054:	b480      	push	{r7}
    d056:	b083      	sub	sp, #12
    d058:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    d05a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d062:	8a1b      	ldrh	r3, [r3, #16]
    d064:	b21b      	sxth	r3, r3
    d066:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    d06a:	db0d      	blt.n	d088 <inflight_calib_mode_update+0x34>
    d06c:	f24c 6350 	movw	r3, #50768	; 0xc650
    d070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d074:	8a1b      	ldrh	r3, [r3, #16]
    d076:	b21a      	sxth	r2, r3
    d078:	f640 437f 	movw	r3, #3199	; 0xc7f
    d07c:	429a      	cmp	r2, r3
    d07e:	bfd4      	ite	le
    d080:	2300      	movle	r3, #0
    d082:	2301      	movgt	r3, #1
    d084:	b2db      	uxtb	r3, r3
    d086:	e000      	b.n	d08a <inflight_calib_mode_update+0x36>
    d088:	2302      	movs	r3, #2
    d08a:	71fb      	strb	r3, [r7, #7]
    d08c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d094:	781b      	ldrb	r3, [r3, #0]
    d096:	79fa      	ldrb	r2, [r7, #7]
    d098:	429a      	cmp	r2, r3
    d09a:	d007      	beq.n	d0ac <inflight_calib_mode_update+0x58>
    d09c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0a4:	79fa      	ldrb	r2, [r7, #7]
    d0a6:	701a      	strb	r2, [r3, #0]
    d0a8:	2301      	movs	r3, #1
    d0aa:	e000      	b.n	d0ae <inflight_calib_mode_update+0x5a>
    d0ac:	2300      	movs	r3, #0
}
    d0ae:	4618      	mov	r0, r3
    d0b0:	370c      	adds	r7, #12
    d0b2:	46bd      	mov	sp, r7
    d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0b8:	4770      	bx	lr
    d0ba:	bf00      	nop

0000d0bc <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    d0bc:	b580      	push	{r7, lr}
    d0be:	b082      	sub	sp, #8
    d0c0:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    d0c2:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0ca:	2201      	movs	r2, #1
    d0cc:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d0ce:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0d6:	781b      	ldrb	r3, [r3, #0]
    d0d8:	b2db      	uxtb	r3, r3
    d0da:	2b00      	cmp	r3, #0
    d0dc:	f000 83c0 	beq.w	d860 <radio_control_task+0x7a4>
    uint8_t mode_changed = FALSE;
    d0e0:	2300      	movs	r3, #0
    d0e2:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d0e4:	f7fa fa4c 	bl	7580 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d0e8:	4b3e      	ldr	r3, [pc, #248]	; (d1e4 <radio_control_task+0x128>)
    d0ea:	781b      	ldrb	r3, [r3, #0]
    d0ec:	b2db      	uxtb	r3, r3
    d0ee:	f003 0302 	and.w	r3, r3, #2
    d0f2:	2b00      	cmp	r3, #0
    d0f4:	d00d      	beq.n	d112 <radio_control_task+0x56>
    d0f6:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0fe:	781b      	ldrb	r3, [r3, #0]
    d100:	2b01      	cmp	r3, #1
    d102:	d00d      	beq.n	d120 <radio_control_task+0x64>
    d104:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d10c:	781b      	ldrb	r3, [r3, #0]
    d10e:	2b00      	cmp	r3, #0
    d110:	d006      	beq.n	d120 <radio_control_task+0x64>
    d112:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    d116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d11a:	781b      	ldrb	r3, [r3, #0]
    d11c:	2b00      	cmp	r3, #0
    d11e:	d007      	beq.n	d130 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d120:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d128:	2203      	movs	r2, #3
    d12a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d12c:	2301      	movs	r3, #1
    d12e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    d130:	4b2c      	ldr	r3, [pc, #176]	; (d1e4 <radio_control_task+0x128>)
    d132:	781b      	ldrb	r3, [r3, #0]
    d134:	b2db      	uxtb	r3, r3
    d136:	f003 0304 	and.w	r3, r3, #4
    d13a:	2b00      	cmp	r3, #0
    d13c:	d023      	beq.n	d186 <radio_control_task+0xca>
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d13e:	f7fa f8f9 	bl	7334 <pprz_mode_update>
    d142:	4603      	mov	r3, r0
    d144:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d146:	79fa      	ldrb	r2, [r7, #7]
    d148:	79bb      	ldrb	r3, [r7, #6]
    d14a:	4313      	orrs	r3, r2
    d14c:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d14e:	f7fa f93d 	bl	73cc <ir_estim_mode_update>
    d152:	4603      	mov	r3, r0
    d154:	461a      	mov	r2, r3
    d156:	79fb      	ldrb	r3, [r7, #7]
    d158:	4313      	orrs	r3, r2
    d15a:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d15c:	f7ff ff7a 	bl	d054 <inflight_calib_mode_update>
    d160:	4603      	mov	r3, r0
    d162:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d164:	797b      	ldrb	r3, [r7, #5]
    d166:	2b00      	cmp	r3, #0
    d168:	d102      	bne.n	d170 <radio_control_task+0xb4>
    d16a:	79bb      	ldrb	r3, [r7, #6]
    d16c:	2b00      	cmp	r3, #0
    d16e:	d001      	beq.n	d174 <radio_control_task+0xb8>
    d170:	2301      	movs	r3, #1
    d172:	e000      	b.n	d176 <radio_control_task+0xba>
    d174:	2300      	movs	r3, #0
    d176:	b2db      	uxtb	r3, r3
    d178:	4618      	mov	r0, r3
    d17a:	f008 fba1 	bl	158c0 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d17e:	79fa      	ldrb	r2, [r7, #7]
    d180:	797b      	ldrb	r3, [r7, #5]
    d182:	4313      	orrs	r3, r2
    d184:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d186:	f7fa f949 	bl	741c <mcu1_status_update>
    d18a:	4603      	mov	r3, r0
    d18c:	461a      	mov	r2, r3
    d18e:	79fb      	ldrb	r3, [r7, #7]
    d190:	4313      	orrs	r3, r2
    d192:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d194:	2301      	movs	r3, #1
    d196:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d198:	79fb      	ldrb	r3, [r7, #7]
    d19a:	2b00      	cmp	r3, #0
    d19c:	f000 82bd 	beq.w	d71a <radio_control_task+0x65e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d1a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a8:	781a      	ldrb	r2, [r3, #0]
    d1aa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1b2:	781b      	ldrb	r3, [r3, #0]
    d1b4:	b2db      	uxtb	r3, r3
    d1b6:	429a      	cmp	r2, r3
    d1b8:	d316      	bcc.n	d1e8 <radio_control_task+0x12c>
    d1ba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c2:	781b      	ldrb	r3, [r3, #0]
    d1c4:	b2db      	uxtb	r3, r3
    d1c6:	461a      	mov	r2, r3
    d1c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d0:	781b      	ldrb	r3, [r3, #0]
    d1d2:	1ad3      	subs	r3, r2, r3
    d1d4:	33ff      	adds	r3, #255	; 0xff
    d1d6:	2b09      	cmp	r3, #9
    d1d8:	bfd4      	ite	le
    d1da:	2300      	movle	r3, #0
    d1dc:	2301      	movgt	r3, #1
    d1de:	b2db      	uxtb	r3, r3
    d1e0:	e014      	b.n	d20c <radio_control_task+0x150>
    d1e2:	bf00      	nop
    d1e4:	2004c663 	.word	0x2004c663
    d1e8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f0:	781b      	ldrb	r3, [r3, #0]
    d1f2:	b2db      	uxtb	r3, r3
    d1f4:	461a      	mov	r2, r3
    d1f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1fe:	781b      	ldrb	r3, [r3, #0]
    d200:	1ad3      	subs	r3, r2, r3
    d202:	2b09      	cmp	r3, #9
    d204:	bfd4      	ite	le
    d206:	2300      	movle	r3, #0
    d208:	2301      	movgt	r3, #1
    d20a:	b2db      	uxtb	r3, r3
    d20c:	2b00      	cmp	r3, #0
    d20e:	f000 8278 	beq.w	d702 <radio_control_task+0x646>
    d212:	f24c 5349 	movw	r3, #50505	; 0xc549
    d216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d21a:	781b      	ldrb	r3, [r3, #0]
    d21c:	461a      	mov	r2, r3
    d21e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d226:	2105      	movs	r1, #5
    d228:	5499      	strb	r1, [r3, r2]
    d22a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d232:	781b      	ldrb	r3, [r3, #0]
    d234:	3301      	adds	r3, #1
    d236:	b2da      	uxtb	r2, r3
    d238:	f24c 5349 	movw	r3, #50505	; 0xc549
    d23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d240:	701a      	strb	r2, [r3, #0]
    d242:	f24c 5349 	movw	r3, #50505	; 0xc549
    d246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d24a:	781b      	ldrb	r3, [r3, #0]
    d24c:	2bff      	cmp	r3, #255	; 0xff
    d24e:	d105      	bne.n	d25c <radio_control_task+0x1a0>
    d250:	f24c 5349 	movw	r3, #50505	; 0xc549
    d254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d258:	2200      	movs	r2, #0
    d25a:	701a      	strb	r2, [r3, #0]
    d25c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d264:	781b      	ldrb	r3, [r3, #0]
    d266:	461a      	mov	r2, r3
    d268:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d270:	210b      	movs	r1, #11
    d272:	5499      	strb	r1, [r3, r2]
    d274:	f24c 5349 	movw	r3, #50505	; 0xc549
    d278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d27c:	781b      	ldrb	r3, [r3, #0]
    d27e:	3301      	adds	r3, #1
    d280:	b2da      	uxtb	r2, r3
    d282:	f24c 5349 	movw	r3, #50505	; 0xc549
    d286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d28a:	701a      	strb	r2, [r3, #0]
    d28c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d294:	781b      	ldrb	r3, [r3, #0]
    d296:	2bff      	cmp	r3, #255	; 0xff
    d298:	d105      	bne.n	d2a6 <radio_control_task+0x1ea>
    d29a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a2:	2200      	movs	r2, #0
    d2a4:	701a      	strb	r2, [r3, #0]
    d2a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ae:	220b      	movs	r2, #11
    d2b0:	701a      	strb	r2, [r3, #0]
    d2b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ba:	220b      	movs	r2, #11
    d2bc:	701a      	strb	r2, [r3, #0]
    d2be:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c6:	781b      	ldrb	r3, [r3, #0]
    d2c8:	461a      	mov	r2, r3
    d2ca:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d2:	7819      	ldrb	r1, [r3, #0]
    d2d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2dc:	5499      	strb	r1, [r3, r2]
    d2de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e6:	781a      	ldrb	r2, [r3, #0]
    d2e8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f0:	781b      	ldrb	r3, [r3, #0]
    d2f2:	4413      	add	r3, r2
    d2f4:	b2da      	uxtb	r2, r3
    d2f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2fe:	701a      	strb	r2, [r3, #0]
    d300:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d308:	781a      	ldrb	r2, [r3, #0]
    d30a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d312:	781b      	ldrb	r3, [r3, #0]
    d314:	4413      	add	r3, r2
    d316:	b2da      	uxtb	r2, r3
    d318:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d320:	701a      	strb	r2, [r3, #0]
    d322:	f24c 5349 	movw	r3, #50505	; 0xc549
    d326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d32a:	781b      	ldrb	r3, [r3, #0]
    d32c:	3301      	adds	r3, #1
    d32e:	b2da      	uxtb	r2, r3
    d330:	f24c 5349 	movw	r3, #50505	; 0xc549
    d334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d338:	701a      	strb	r2, [r3, #0]
    d33a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d342:	781b      	ldrb	r3, [r3, #0]
    d344:	2bff      	cmp	r3, #255	; 0xff
    d346:	d105      	bne.n	d354 <radio_control_task+0x298>
    d348:	f24c 5349 	movw	r3, #50505	; 0xc549
    d34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d350:	2200      	movs	r2, #0
    d352:	701a      	strb	r2, [r3, #0]
    d354:	f24c 5349 	movw	r3, #50505	; 0xc549
    d358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35c:	781b      	ldrb	r3, [r3, #0]
    d35e:	461a      	mov	r2, r3
    d360:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d368:	7819      	ldrb	r1, [r3, #0]
    d36a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d372:	5499      	strb	r1, [r3, r2]
    d374:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d37c:	781a      	ldrb	r2, [r3, #0]
    d37e:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d386:	781b      	ldrb	r3, [r3, #0]
    d388:	4413      	add	r3, r2
    d38a:	b2da      	uxtb	r2, r3
    d38c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d394:	701a      	strb	r2, [r3, #0]
    d396:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d39e:	781a      	ldrb	r2, [r3, #0]
    d3a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a8:	781b      	ldrb	r3, [r3, #0]
    d3aa:	4413      	add	r3, r2
    d3ac:	b2da      	uxtb	r2, r3
    d3ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b6:	701a      	strb	r2, [r3, #0]
    d3b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c0:	781b      	ldrb	r3, [r3, #0]
    d3c2:	3301      	adds	r3, #1
    d3c4:	b2da      	uxtb	r2, r3
    d3c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ce:	701a      	strb	r2, [r3, #0]
    d3d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d8:	781b      	ldrb	r3, [r3, #0]
    d3da:	2bff      	cmp	r3, #255	; 0xff
    d3dc:	d105      	bne.n	d3ea <radio_control_task+0x32e>
    d3de:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e6:	2200      	movs	r2, #0
    d3e8:	701a      	strb	r2, [r3, #0]
    d3ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f2:	781b      	ldrb	r3, [r3, #0]
    d3f4:	461a      	mov	r2, r3
    d3f6:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3fe:	7819      	ldrb	r1, [r3, #0]
    d400:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d408:	5499      	strb	r1, [r3, r2]
    d40a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d412:	781a      	ldrb	r2, [r3, #0]
    d414:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41c:	781b      	ldrb	r3, [r3, #0]
    d41e:	4413      	add	r3, r2
    d420:	b2da      	uxtb	r2, r3
    d422:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d42a:	701a      	strb	r2, [r3, #0]
    d42c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d434:	781a      	ldrb	r2, [r3, #0]
    d436:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43e:	781b      	ldrb	r3, [r3, #0]
    d440:	4413      	add	r3, r2
    d442:	b2da      	uxtb	r2, r3
    d444:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d44c:	701a      	strb	r2, [r3, #0]
    d44e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d456:	781b      	ldrb	r3, [r3, #0]
    d458:	3301      	adds	r3, #1
    d45a:	b2da      	uxtb	r2, r3
    d45c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d464:	701a      	strb	r2, [r3, #0]
    d466:	f24c 5349 	movw	r3, #50505	; 0xc549
    d46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46e:	781b      	ldrb	r3, [r3, #0]
    d470:	2bff      	cmp	r3, #255	; 0xff
    d472:	d105      	bne.n	d480 <radio_control_task+0x3c4>
    d474:	f24c 5349 	movw	r3, #50505	; 0xc549
    d478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d47c:	2200      	movs	r2, #0
    d47e:	701a      	strb	r2, [r3, #0]
    d480:	f24c 5349 	movw	r3, #50505	; 0xc549
    d484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d488:	781b      	ldrb	r3, [r3, #0]
    d48a:	461a      	mov	r2, r3
    d48c:	f24c 5333 	movw	r3, #50483	; 0xc533
    d490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d494:	7819      	ldrb	r1, [r3, #0]
    d496:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d49e:	5499      	strb	r1, [r3, r2]
    d4a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a8:	781a      	ldrb	r2, [r3, #0]
    d4aa:	f24c 5333 	movw	r3, #50483	; 0xc533
    d4ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b2:	781b      	ldrb	r3, [r3, #0]
    d4b4:	4413      	add	r3, r2
    d4b6:	b2da      	uxtb	r2, r3
    d4b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c0:	701a      	strb	r2, [r3, #0]
    d4c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ca:	781a      	ldrb	r2, [r3, #0]
    d4cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d4:	781b      	ldrb	r3, [r3, #0]
    d4d6:	4413      	add	r3, r2
    d4d8:	b2da      	uxtb	r2, r3
    d4da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e2:	701a      	strb	r2, [r3, #0]
    d4e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ec:	781b      	ldrb	r3, [r3, #0]
    d4ee:	3301      	adds	r3, #1
    d4f0:	b2da      	uxtb	r2, r3
    d4f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4fa:	701a      	strb	r2, [r3, #0]
    d4fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d504:	781b      	ldrb	r3, [r3, #0]
    d506:	2bff      	cmp	r3, #255	; 0xff
    d508:	d105      	bne.n	d516 <radio_control_task+0x45a>
    d50a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d512:	2200      	movs	r2, #0
    d514:	701a      	strb	r2, [r3, #0]
    d516:	f24c 5349 	movw	r3, #50505	; 0xc549
    d51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d51e:	781b      	ldrb	r3, [r3, #0]
    d520:	461a      	mov	r2, r3
    d522:	f240 533c 	movw	r3, #1340	; 0x53c
    d526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d52a:	7819      	ldrb	r1, [r3, #0]
    d52c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d534:	5499      	strb	r1, [r3, r2]
    d536:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53e:	781a      	ldrb	r2, [r3, #0]
    d540:	f240 533c 	movw	r3, #1340	; 0x53c
    d544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d548:	781b      	ldrb	r3, [r3, #0]
    d54a:	4413      	add	r3, r2
    d54c:	b2da      	uxtb	r2, r3
    d54e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d556:	701a      	strb	r2, [r3, #0]
    d558:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d560:	781a      	ldrb	r2, [r3, #0]
    d562:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d56a:	781b      	ldrb	r3, [r3, #0]
    d56c:	4413      	add	r3, r2
    d56e:	b2da      	uxtb	r2, r3
    d570:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d578:	701a      	strb	r2, [r3, #0]
    d57a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d582:	781b      	ldrb	r3, [r3, #0]
    d584:	3301      	adds	r3, #1
    d586:	b2da      	uxtb	r2, r3
    d588:	f24c 5349 	movw	r3, #50505	; 0xc549
    d58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d590:	701a      	strb	r2, [r3, #0]
    d592:	f24c 5349 	movw	r3, #50505	; 0xc549
    d596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d59a:	781b      	ldrb	r3, [r3, #0]
    d59c:	2bff      	cmp	r3, #255	; 0xff
    d59e:	d105      	bne.n	d5ac <radio_control_task+0x4f0>
    d5a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a8:	2200      	movs	r2, #0
    d5aa:	701a      	strb	r2, [r3, #0]
    d5ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b4:	781b      	ldrb	r3, [r3, #0]
    d5b6:	461a      	mov	r2, r3
    d5b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c0:	7819      	ldrb	r1, [r3, #0]
    d5c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ca:	5499      	strb	r1, [r3, r2]
    d5cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d4:	781b      	ldrb	r3, [r3, #0]
    d5d6:	3301      	adds	r3, #1
    d5d8:	b2da      	uxtb	r2, r3
    d5da:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5e2:	701a      	strb	r2, [r3, #0]
    d5e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ec:	781b      	ldrb	r3, [r3, #0]
    d5ee:	2bff      	cmp	r3, #255	; 0xff
    d5f0:	d105      	bne.n	d5fe <radio_control_task+0x542>
    d5f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5fa:	2200      	movs	r2, #0
    d5fc:	701a      	strb	r2, [r3, #0]
    d5fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    d602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d606:	781b      	ldrb	r3, [r3, #0]
    d608:	461a      	mov	r2, r3
    d60a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d612:	7819      	ldrb	r1, [r3, #0]
    d614:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d61c:	5499      	strb	r1, [r3, r2]
    d61e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d626:	781b      	ldrb	r3, [r3, #0]
    d628:	3301      	adds	r3, #1
    d62a:	b2da      	uxtb	r2, r3
    d62c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d634:	701a      	strb	r2, [r3, #0]
    d636:	f24c 5349 	movw	r3, #50505	; 0xc549
    d63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d63e:	781b      	ldrb	r3, [r3, #0]
    d640:	2bff      	cmp	r3, #255	; 0xff
    d642:	d105      	bne.n	d650 <radio_control_task+0x594>
    d644:	f24c 5349 	movw	r3, #50505	; 0xc549
    d648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d64c:	2200      	movs	r2, #0
    d64e:	701a      	strb	r2, [r3, #0]
    d650:	f242 0339 	movw	r3, #8249	; 0x2039
    d654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d658:	781b      	ldrb	r3, [r3, #0]
    d65a:	b2db      	uxtb	r3, r3
    d65c:	f003 0310 	and.w	r3, r3, #16
    d660:	2b00      	cmp	r3, #0
    d662:	d15a      	bne.n	d71a <radio_control_task+0x65e>
    d664:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d66c:	781b      	ldrb	r3, [r3, #0]
    d66e:	b2db      	uxtb	r3, r3
    d670:	461a      	mov	r2, r3
    d672:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d67a:	5c9a      	ldrb	r2, [r3, r2]
    d67c:	f24c 634b 	movw	r3, #50763	; 0xc64b
    d680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d684:	701a      	strb	r2, [r3, #0]
    d686:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d68e:	2200      	movs	r2, #0
    d690:	701a      	strb	r2, [r3, #0]
    d692:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d69a:	781b      	ldrb	r3, [r3, #0]
    d69c:	b2db      	uxtb	r3, r3
    d69e:	3301      	adds	r3, #1
    d6a0:	b2da      	uxtb	r2, r3
    d6a2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6aa:	701a      	strb	r2, [r3, #0]
    d6ac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6b4:	781b      	ldrb	r3, [r3, #0]
    d6b6:	b2db      	uxtb	r3, r3
    d6b8:	2bff      	cmp	r3, #255	; 0xff
    d6ba:	d105      	bne.n	d6c8 <radio_control_task+0x60c>
    d6bc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6c4:	2200      	movs	r2, #0
    d6c6:	701a      	strb	r2, [r3, #0]
    d6c8:	f242 0338 	movw	r3, #8248	; 0x2038
    d6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6d0:	f242 0238 	movw	r2, #8248	; 0x2038
    d6d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d6d8:	7812      	ldrb	r2, [r2, #0]
    d6da:	b2d2      	uxtb	r2, r2
    d6dc:	f042 0201 	orr.w	r2, r2, #1
    d6e0:	b2d2      	uxtb	r2, r2
    d6e2:	701a      	strb	r2, [r3, #0]
    d6e4:	f242 0339 	movw	r3, #8249	; 0x2039
    d6e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ec:	f242 0239 	movw	r2, #8249	; 0x2039
    d6f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d6f4:	7812      	ldrb	r2, [r2, #0]
    d6f6:	b2d2      	uxtb	r2, r2
    d6f8:	f042 0210 	orr.w	r2, r2, #16
    d6fc:	b2d2      	uxtb	r2, r2
    d6fe:	701a      	strb	r2, [r3, #0]
    d700:	e00b      	b.n	d71a <radio_control_task+0x65e>
    d702:	f24c 5348 	movw	r3, #50504	; 0xc548
    d706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d70a:	781b      	ldrb	r3, [r3, #0]
    d70c:	3301      	adds	r3, #1
    d70e:	b2da      	uxtb	r2, r3
    d710:	f24c 5348 	movw	r3, #50504	; 0xc548
    d714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d718:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d71a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d722:	885b      	ldrh	r3, [r3, #2]
    d724:	b21b      	sxth	r3, r3
    d726:	4618      	mov	r0, r3
    d728:	f00a fe82 	bl	18430 <__aeabi_i2f>
    d72c:	4603      	mov	r3, r0
    d72e:	4618      	mov	r0, r3
    d730:	f04f 0100 	mov.w	r1, #0
    d734:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d738:	f00a ff82 	bl	18640 <__aeabi_fdiv>
    d73c:	4603      	mov	r3, r0
    d73e:	4618      	mov	r0, r3
    d740:	f00a fa36 	bl	17bb0 <__aeabi_f2d>
    d744:	4602      	mov	r2, r0
    d746:	460b      	mov	r3, r1
    d748:	4610      	mov	r0, r2
    d74a:	4619      	mov	r1, r3
    d74c:	a346      	add	r3, pc, #280	; (adr r3, d868 <radio_control_task+0x7ac>)
    d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d752:	f00a fa81 	bl	17c58 <__aeabi_dmul>
    d756:	4602      	mov	r2, r0
    d758:	460b      	mov	r3, r1
    d75a:	4610      	mov	r0, r2
    d75c:	4619      	mov	r1, r3
    d75e:	f04f 0200 	mov.w	r2, #0
    d762:	f04f 0300 	mov.w	r3, #0
    d766:	f00a f8c5 	bl	178f4 <__adddf3>
    d76a:	4602      	mov	r2, r0
    d76c:	460b      	mov	r3, r1
    d76e:	4610      	mov	r0, r2
    d770:	4619      	mov	r1, r3
    d772:	f00a fd53 	bl	1821c <__aeabi_d2f>
    d776:	4602      	mov	r2, r0
    d778:	f64c 0374 	movw	r3, #51316	; 0xc874
    d77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d780:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d782:	f24c 6350 	movw	r3, #50768	; 0xc650
    d786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d78a:	889b      	ldrh	r3, [r3, #4]
    d78c:	b21b      	sxth	r3, r3
    d78e:	4618      	mov	r0, r3
    d790:	f00a fe4e 	bl	18430 <__aeabi_i2f>
    d794:	4603      	mov	r3, r0
    d796:	4618      	mov	r0, r3
    d798:	f04f 0100 	mov.w	r1, #0
    d79c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d7a0:	f00a ff4e 	bl	18640 <__aeabi_fdiv>
    d7a4:	4603      	mov	r3, r0
    d7a6:	4618      	mov	r0, r3
    d7a8:	f00a fa02 	bl	17bb0 <__aeabi_f2d>
    d7ac:	4602      	mov	r2, r0
    d7ae:	460b      	mov	r3, r1
    d7b0:	4610      	mov	r0, r2
    d7b2:	4619      	mov	r1, r3
    d7b4:	f04f 0200 	mov.w	r2, #0
    d7b8:	f04f 0300 	mov.w	r3, #0
    d7bc:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d7c0:	f00a fa4a 	bl	17c58 <__aeabi_dmul>
    d7c4:	4602      	mov	r2, r0
    d7c6:	460b      	mov	r3, r1
    d7c8:	4610      	mov	r0, r2
    d7ca:	4619      	mov	r1, r3
    d7cc:	f04f 0200 	mov.w	r2, #0
    d7d0:	f04f 0300 	mov.w	r3, #0
    d7d4:	f00a f88e 	bl	178f4 <__adddf3>
    d7d8:	4602      	mov	r2, r0
    d7da:	460b      	mov	r3, r1
    d7dc:	4610      	mov	r0, r2
    d7de:	4619      	mov	r1, r3
    d7e0:	f00a fd1c 	bl	1821c <__aeabi_d2f>
    d7e4:	4602      	mov	r2, r0
    d7e6:	f64c 0378 	movw	r3, #51320	; 0xc878
    d7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ee:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d7f0:	f24c 6350 	movw	r3, #50768	; 0xc650
    d7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f8:	881a      	ldrh	r2, [r3, #0]
    d7fa:	f64c 037c 	movw	r3, #51324	; 0xc87c
    d7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d802:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d804:	f24c 6350 	movw	r3, #50768	; 0xc650
    d808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d80c:	7c9a      	ldrb	r2, [r3, #18]
    d80e:	f24c 5334 	movw	r3, #50484	; 0xc534
    d812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d816:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d818:	f24c 6350 	movw	r3, #50768	; 0xc650
    d81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d820:	7d5a      	ldrb	r2, [r3, #21]
    d822:	f24c 5332 	movw	r3, #50482	; 0xc532
    d826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d82a:	701a      	strb	r2, [r3, #0]

    events_update();
    d82c:	f7f9 fe26 	bl	747c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d830:	f7f8 fc26 	bl	6080 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d834:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83c:	781b      	ldrb	r3, [r3, #0]
    d83e:	2b02      	cmp	r3, #2
    d840:	d10e      	bne.n	d860 <radio_control_task+0x7a4>
    d842:	f24c 6350 	movw	r3, #50768	; 0xc650
    d846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d84a:	881b      	ldrh	r3, [r3, #0]
    d84c:	b21b      	sxth	r3, r3
    d84e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d852:	dd05      	ble.n	d860 <radio_control_task+0x7a4>
	launch = TRUE;
    d854:	f24c 5340 	movw	r3, #50496	; 0xc540
    d858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d85c:	2201      	movs	r2, #1
    d85e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d860:	3708      	adds	r7, #8
    d862:	46bd      	mov	sp, r7
    d864:	bd80      	pop	{r7, pc}
    d866:	bf00      	nop
    d868:	33333333 	.word	0x33333333
    d86c:	bfe33333 	.word	0xbfe33333

0000d870 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d870:	b580      	push	{r7, lr}
    d872:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d874:	f24c 532e 	movw	r3, #50478	; 0xc52e
    d878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d87c:	2203      	movs	r2, #3
    d87e:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d880:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d888:	781b      	ldrb	r3, [r3, #0]
    d88a:	2b03      	cmp	r3, #3
    d88c:	d102      	bne.n	d894 <navigation_update+0x24>
    nav_home();
    d88e:	f007 fa9b 	bl	14dc8 <nav_home>
    d892:	e001      	b.n	d898 <navigation_update+0x28>
  else
    nav_update();
    d894:	f007 fabe 	bl	14e14 <nav_update>
}
    d898:	bd80      	pop	{r7, pc}
    d89a:	bf00      	nop

0000d89c <send_nav_values>:

void send_nav_values(void){
    d89c:	b480      	push	{r7}
    d89e:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d8a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a8:	781a      	ldrb	r2, [r3, #0]
    d8aa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b2:	781b      	ldrb	r3, [r3, #0]
    d8b4:	b2db      	uxtb	r3, r3
    d8b6:	429a      	cmp	r2, r3
    d8b8:	d313      	bcc.n	d8e2 <send_nav_values+0x46>
    d8ba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c2:	781b      	ldrb	r3, [r3, #0]
    d8c4:	b2db      	uxtb	r3, r3
    d8c6:	461a      	mov	r2, r3
    d8c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d0:	781b      	ldrb	r3, [r3, #0]
    d8d2:	1ad3      	subs	r3, r2, r3
    d8d4:	33ff      	adds	r3, #255	; 0xff
    d8d6:	2b1e      	cmp	r3, #30
    d8d8:	bfd4      	ite	le
    d8da:	2300      	movle	r3, #0
    d8dc:	2301      	movgt	r3, #1
    d8de:	b2db      	uxtb	r3, r3
    d8e0:	e011      	b.n	d906 <send_nav_values+0x6a>
    d8e2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d8e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ea:	781b      	ldrb	r3, [r3, #0]
    d8ec:	b2db      	uxtb	r3, r3
    d8ee:	461a      	mov	r2, r3
    d8f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f8:	781b      	ldrb	r3, [r3, #0]
    d8fa:	1ad3      	subs	r3, r2, r3
    d8fc:	2b1e      	cmp	r3, #30
    d8fe:	bfd4      	ite	le
    d900:	2300      	movle	r3, #0
    d902:	2301      	movgt	r3, #1
    d904:	b2db      	uxtb	r3, r3
    d906:	2b00      	cmp	r3, #0
    d908:	f001 8094 	beq.w	ea34 <send_nav_values+0x1198>
    d90c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d914:	781b      	ldrb	r3, [r3, #0]
    d916:	461a      	mov	r2, r3
    d918:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d920:	2105      	movs	r1, #5
    d922:	5499      	strb	r1, [r3, r2]
    d924:	f24c 5349 	movw	r3, #50505	; 0xc549
    d928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92c:	781b      	ldrb	r3, [r3, #0]
    d92e:	3301      	adds	r3, #1
    d930:	b2da      	uxtb	r2, r3
    d932:	f24c 5349 	movw	r3, #50505	; 0xc549
    d936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d93a:	701a      	strb	r2, [r3, #0]
    d93c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d944:	781b      	ldrb	r3, [r3, #0]
    d946:	2bff      	cmp	r3, #255	; 0xff
    d948:	d105      	bne.n	d956 <send_nav_values+0xba>
    d94a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d952:	2200      	movs	r2, #0
    d954:	701a      	strb	r2, [r3, #0]
    d956:	f24c 5349 	movw	r3, #50505	; 0xc549
    d95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d95e:	781b      	ldrb	r3, [r3, #0]
    d960:	461a      	mov	r2, r3
    d962:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d96a:	210a      	movs	r1, #10
    d96c:	5499      	strb	r1, [r3, r2]
    d96e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d976:	781b      	ldrb	r3, [r3, #0]
    d978:	3301      	adds	r3, #1
    d97a:	b2da      	uxtb	r2, r3
    d97c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d984:	701a      	strb	r2, [r3, #0]
    d986:	f24c 5349 	movw	r3, #50505	; 0xc549
    d98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98e:	781b      	ldrb	r3, [r3, #0]
    d990:	2bff      	cmp	r3, #255	; 0xff
    d992:	d105      	bne.n	d9a0 <send_nav_values+0x104>
    d994:	f24c 5349 	movw	r3, #50505	; 0xc549
    d998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d99c:	2200      	movs	r2, #0
    d99e:	701a      	strb	r2, [r3, #0]
    d9a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a8:	220a      	movs	r2, #10
    d9aa:	701a      	strb	r2, [r3, #0]
    d9ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b4:	220a      	movs	r2, #10
    d9b6:	701a      	strb	r2, [r3, #0]
    d9b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c0:	781b      	ldrb	r3, [r3, #0]
    d9c2:	461a      	mov	r2, r3
    d9c4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9cc:	7819      	ldrb	r1, [r3, #0]
    d9ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d6:	5499      	strb	r1, [r3, r2]
    d9d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e0:	781a      	ldrb	r2, [r3, #0]
    d9e2:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ea:	781b      	ldrb	r3, [r3, #0]
    d9ec:	4413      	add	r3, r2
    d9ee:	b2da      	uxtb	r2, r3
    d9f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f8:	701a      	strb	r2, [r3, #0]
    d9fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da02:	781a      	ldrb	r2, [r3, #0]
    da04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0c:	781b      	ldrb	r3, [r3, #0]
    da0e:	4413      	add	r3, r2
    da10:	b2da      	uxtb	r2, r3
    da12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da1a:	701a      	strb	r2, [r3, #0]
    da1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    da20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da24:	781b      	ldrb	r3, [r3, #0]
    da26:	3301      	adds	r3, #1
    da28:	b2da      	uxtb	r2, r3
    da2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    da2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da32:	701a      	strb	r2, [r3, #0]
    da34:	f24c 5349 	movw	r3, #50505	; 0xc549
    da38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da3c:	781b      	ldrb	r3, [r3, #0]
    da3e:	2bff      	cmp	r3, #255	; 0xff
    da40:	d105      	bne.n	da4e <send_nav_values+0x1b2>
    da42:	f24c 5349 	movw	r3, #50505	; 0xc549
    da46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4a:	2200      	movs	r2, #0
    da4c:	701a      	strb	r2, [r3, #0]
    da4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    da52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da56:	781b      	ldrb	r3, [r3, #0]
    da58:	461a      	mov	r2, r3
    da5a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    da5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da62:	7819      	ldrb	r1, [r3, #0]
    da64:	f24c 534c 	movw	r3, #50508	; 0xc54c
    da68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da6c:	5499      	strb	r1, [r3, r2]
    da6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da76:	781a      	ldrb	r2, [r3, #0]
    da78:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    da7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da80:	781b      	ldrb	r3, [r3, #0]
    da82:	4413      	add	r3, r2
    da84:	b2da      	uxtb	r2, r3
    da86:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8e:	701a      	strb	r2, [r3, #0]
    da90:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da98:	781a      	ldrb	r2, [r3, #0]
    da9a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa2:	781b      	ldrb	r3, [r3, #0]
    daa4:	4413      	add	r3, r2
    daa6:	b2da      	uxtb	r2, r3
    daa8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    daac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab0:	701a      	strb	r2, [r3, #0]
    dab2:	f24c 5349 	movw	r3, #50505	; 0xc549
    dab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daba:	781b      	ldrb	r3, [r3, #0]
    dabc:	3301      	adds	r3, #1
    dabe:	b2da      	uxtb	r2, r3
    dac0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac8:	701a      	strb	r2, [r3, #0]
    daca:	f24c 5349 	movw	r3, #50505	; 0xc549
    dace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad2:	781b      	ldrb	r3, [r3, #0]
    dad4:	2bff      	cmp	r3, #255	; 0xff
    dad6:	d105      	bne.n	dae4 <send_nav_values+0x248>
    dad8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae0:	2200      	movs	r2, #0
    dae2:	701a      	strb	r2, [r3, #0]
    dae4:	f24c 5349 	movw	r3, #50505	; 0xc549
    dae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daec:	781b      	ldrb	r3, [r3, #0]
    daee:	461a      	mov	r2, r3
    daf0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    daf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf8:	7819      	ldrb	r1, [r3, #0]
    dafa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db02:	5499      	strb	r1, [r3, r2]
    db04:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db0c:	781a      	ldrb	r2, [r3, #0]
    db0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db16:	781b      	ldrb	r3, [r3, #0]
    db18:	4413      	add	r3, r2
    db1a:	b2da      	uxtb	r2, r3
    db1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db24:	701a      	strb	r2, [r3, #0]
    db26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2e:	781a      	ldrb	r2, [r3, #0]
    db30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db38:	781b      	ldrb	r3, [r3, #0]
    db3a:	4413      	add	r3, r2
    db3c:	b2da      	uxtb	r2, r3
    db3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db46:	701a      	strb	r2, [r3, #0]
    db48:	f24c 5349 	movw	r3, #50505	; 0xc549
    db4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db50:	781b      	ldrb	r3, [r3, #0]
    db52:	3301      	adds	r3, #1
    db54:	b2da      	uxtb	r2, r3
    db56:	f24c 5349 	movw	r3, #50505	; 0xc549
    db5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5e:	701a      	strb	r2, [r3, #0]
    db60:	f24c 5349 	movw	r3, #50505	; 0xc549
    db64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db68:	781b      	ldrb	r3, [r3, #0]
    db6a:	2bff      	cmp	r3, #255	; 0xff
    db6c:	d105      	bne.n	db7a <send_nav_values+0x2de>
    db6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    db72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db76:	2200      	movs	r2, #0
    db78:	701a      	strb	r2, [r3, #0]
    db7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    db7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db82:	781b      	ldrb	r3, [r3, #0]
    db84:	461a      	mov	r2, r3
    db86:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db8e:	7859      	ldrb	r1, [r3, #1]
    db90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    db94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db98:	5499      	strb	r1, [r3, r2]
    db9a:	4bd2      	ldr	r3, [pc, #840]	; (dee4 <send_nav_values+0x648>)
    db9c:	781a      	ldrb	r2, [r3, #0]
    db9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba6:	781b      	ldrb	r3, [r3, #0]
    dba8:	4413      	add	r3, r2
    dbaa:	b2da      	uxtb	r2, r3
    dbac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb4:	701a      	strb	r2, [r3, #0]
    dbb6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbbe:	781a      	ldrb	r2, [r3, #0]
    dbc0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc8:	781b      	ldrb	r3, [r3, #0]
    dbca:	4413      	add	r3, r2
    dbcc:	b2da      	uxtb	r2, r3
    dbce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd6:	701a      	strb	r2, [r3, #0]
    dbd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe0:	781b      	ldrb	r3, [r3, #0]
    dbe2:	3301      	adds	r3, #1
    dbe4:	b2da      	uxtb	r2, r3
    dbe6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbee:	701a      	strb	r2, [r3, #0]
    dbf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf8:	781b      	ldrb	r3, [r3, #0]
    dbfa:	2bff      	cmp	r3, #255	; 0xff
    dbfc:	d105      	bne.n	dc0a <send_nav_values+0x36e>
    dbfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc06:	2200      	movs	r2, #0
    dc08:	701a      	strb	r2, [r3, #0]
    dc0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc12:	781b      	ldrb	r3, [r3, #0]
    dc14:	461a      	mov	r2, r3
    dc16:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc1e:	7899      	ldrb	r1, [r3, #2]
    dc20:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc28:	5499      	strb	r1, [r3, r2]
    dc2a:	4baf      	ldr	r3, [pc, #700]	; (dee8 <send_nav_values+0x64c>)
    dc2c:	781a      	ldrb	r2, [r3, #0]
    dc2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc36:	781b      	ldrb	r3, [r3, #0]
    dc38:	4413      	add	r3, r2
    dc3a:	b2da      	uxtb	r2, r3
    dc3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc44:	701a      	strb	r2, [r3, #0]
    dc46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc4e:	781a      	ldrb	r2, [r3, #0]
    dc50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc58:	781b      	ldrb	r3, [r3, #0]
    dc5a:	4413      	add	r3, r2
    dc5c:	b2da      	uxtb	r2, r3
    dc5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc66:	701a      	strb	r2, [r3, #0]
    dc68:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc70:	781b      	ldrb	r3, [r3, #0]
    dc72:	3301      	adds	r3, #1
    dc74:	b2da      	uxtb	r2, r3
    dc76:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7e:	701a      	strb	r2, [r3, #0]
    dc80:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc88:	781b      	ldrb	r3, [r3, #0]
    dc8a:	2bff      	cmp	r3, #255	; 0xff
    dc8c:	d105      	bne.n	dc9a <send_nav_values+0x3fe>
    dc8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc96:	2200      	movs	r2, #0
    dc98:	701a      	strb	r2, [r3, #0]
    dc9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca2:	781b      	ldrb	r3, [r3, #0]
    dca4:	461a      	mov	r2, r3
    dca6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dcaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcae:	78d9      	ldrb	r1, [r3, #3]
    dcb0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dcb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb8:	5499      	strb	r1, [r3, r2]
    dcba:	4b8c      	ldr	r3, [pc, #560]	; (deec <send_nav_values+0x650>)
    dcbc:	781a      	ldrb	r2, [r3, #0]
    dcbe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dcc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc6:	781b      	ldrb	r3, [r3, #0]
    dcc8:	4413      	add	r3, r2
    dcca:	b2da      	uxtb	r2, r3
    dccc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd4:	701a      	strb	r2, [r3, #0]
    dcd6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dcda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcde:	781a      	ldrb	r2, [r3, #0]
    dce0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce8:	781b      	ldrb	r3, [r3, #0]
    dcea:	4413      	add	r3, r2
    dcec:	b2da      	uxtb	r2, r3
    dcee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dcf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf6:	701a      	strb	r2, [r3, #0]
    dcf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd00:	781b      	ldrb	r3, [r3, #0]
    dd02:	3301      	adds	r3, #1
    dd04:	b2da      	uxtb	r2, r3
    dd06:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd0e:	701a      	strb	r2, [r3, #0]
    dd10:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd18:	781b      	ldrb	r3, [r3, #0]
    dd1a:	2bff      	cmp	r3, #255	; 0xff
    dd1c:	d105      	bne.n	dd2a <send_nav_values+0x48e>
    dd1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd26:	2200      	movs	r2, #0
    dd28:	701a      	strb	r2, [r3, #0]
    dd2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd32:	781b      	ldrb	r3, [r3, #0]
    dd34:	461a      	mov	r2, r3
    dd36:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3e:	7819      	ldrb	r1, [r3, #0]
    dd40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd48:	5499      	strb	r1, [r3, r2]
    dd4a:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd52:	781a      	ldrb	r2, [r3, #0]
    dd54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5c:	781b      	ldrb	r3, [r3, #0]
    dd5e:	4413      	add	r3, r2
    dd60:	b2da      	uxtb	r2, r3
    dd62:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd6a:	701a      	strb	r2, [r3, #0]
    dd6c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd74:	781a      	ldrb	r2, [r3, #0]
    dd76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7e:	781b      	ldrb	r3, [r3, #0]
    dd80:	4413      	add	r3, r2
    dd82:	b2da      	uxtb	r2, r3
    dd84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8c:	701a      	strb	r2, [r3, #0]
    dd8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd96:	781b      	ldrb	r3, [r3, #0]
    dd98:	3301      	adds	r3, #1
    dd9a:	b2da      	uxtb	r2, r3
    dd9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    dda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda4:	701a      	strb	r2, [r3, #0]
    dda6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddae:	781b      	ldrb	r3, [r3, #0]
    ddb0:	2bff      	cmp	r3, #255	; 0xff
    ddb2:	d105      	bne.n	ddc0 <send_nav_values+0x524>
    ddb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddbc:	2200      	movs	r2, #0
    ddbe:	701a      	strb	r2, [r3, #0]
    ddc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc8:	781b      	ldrb	r3, [r3, #0]
    ddca:	461a      	mov	r2, r3
    ddcc:	f64c 3300 	movw	r3, #51968	; 0xcb00
    ddd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd4:	7859      	ldrb	r1, [r3, #1]
    ddd6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ddda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddde:	5499      	strb	r1, [r3, r2]
    dde0:	4b43      	ldr	r3, [pc, #268]	; (def0 <send_nav_values+0x654>)
    dde2:	781a      	ldrb	r2, [r3, #0]
    dde4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddec:	781b      	ldrb	r3, [r3, #0]
    ddee:	4413      	add	r3, r2
    ddf0:	b2da      	uxtb	r2, r3
    ddf2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ddf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfa:	701a      	strb	r2, [r3, #0]
    ddfc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de04:	781a      	ldrb	r2, [r3, #0]
    de06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0e:	781b      	ldrb	r3, [r3, #0]
    de10:	4413      	add	r3, r2
    de12:	b2da      	uxtb	r2, r3
    de14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de1c:	701a      	strb	r2, [r3, #0]
    de1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    de22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de26:	781b      	ldrb	r3, [r3, #0]
    de28:	3301      	adds	r3, #1
    de2a:	b2da      	uxtb	r2, r3
    de2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    de30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de34:	701a      	strb	r2, [r3, #0]
    de36:	f24c 5349 	movw	r3, #50505	; 0xc549
    de3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3e:	781b      	ldrb	r3, [r3, #0]
    de40:	2bff      	cmp	r3, #255	; 0xff
    de42:	d105      	bne.n	de50 <send_nav_values+0x5b4>
    de44:	f24c 5349 	movw	r3, #50505	; 0xc549
    de48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de4c:	2200      	movs	r2, #0
    de4e:	701a      	strb	r2, [r3, #0]
    de50:	f24c 5349 	movw	r3, #50505	; 0xc549
    de54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de58:	781b      	ldrb	r3, [r3, #0]
    de5a:	461a      	mov	r2, r3
    de5c:	f64c 3300 	movw	r3, #51968	; 0xcb00
    de60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de64:	7899      	ldrb	r1, [r3, #2]
    de66:	f24c 534c 	movw	r3, #50508	; 0xc54c
    de6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6e:	5499      	strb	r1, [r3, r2]
    de70:	4b20      	ldr	r3, [pc, #128]	; (def4 <send_nav_values+0x658>)
    de72:	781a      	ldrb	r2, [r3, #0]
    de74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de7c:	781b      	ldrb	r3, [r3, #0]
    de7e:	4413      	add	r3, r2
    de80:	b2da      	uxtb	r2, r3
    de82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8a:	701a      	strb	r2, [r3, #0]
    de8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de94:	781a      	ldrb	r2, [r3, #0]
    de96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9e:	781b      	ldrb	r3, [r3, #0]
    dea0:	4413      	add	r3, r2
    dea2:	b2da      	uxtb	r2, r3
    dea4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deac:	701a      	strb	r2, [r3, #0]
    deae:	f24c 5349 	movw	r3, #50505	; 0xc549
    deb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb6:	781b      	ldrb	r3, [r3, #0]
    deb8:	3301      	adds	r3, #1
    deba:	b2da      	uxtb	r2, r3
    debc:	f24c 5349 	movw	r3, #50505	; 0xc549
    dec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec4:	701a      	strb	r2, [r3, #0]
    dec6:	f24c 5349 	movw	r3, #50505	; 0xc549
    deca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dece:	781b      	ldrb	r3, [r3, #0]
    ded0:	2bff      	cmp	r3, #255	; 0xff
    ded2:	d111      	bne.n	def8 <send_nav_values+0x65c>
    ded4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ded8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dedc:	2200      	movs	r2, #0
    dede:	701a      	strb	r2, [r3, #0]
    dee0:	e00a      	b.n	def8 <send_nav_values+0x65c>
    dee2:	bf00      	nop
    dee4:	2004cafd 	.word	0x2004cafd
    dee8:	2004cafe 	.word	0x2004cafe
    deec:	2004caff 	.word	0x2004caff
    def0:	2004cb01 	.word	0x2004cb01
    def4:	2004cb02 	.word	0x2004cb02
    def8:	f24c 5349 	movw	r3, #50505	; 0xc549
    defc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df00:	781b      	ldrb	r3, [r3, #0]
    df02:	461a      	mov	r2, r3
    df04:	f64c 3300 	movw	r3, #51968	; 0xcb00
    df08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0c:	78d9      	ldrb	r1, [r3, #3]
    df0e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    df12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df16:	5499      	strb	r1, [r3, r2]
    df18:	4bd3      	ldr	r3, [pc, #844]	; (e268 <send_nav_values+0x9cc>)
    df1a:	781a      	ldrb	r2, [r3, #0]
    df1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df24:	781b      	ldrb	r3, [r3, #0]
    df26:	4413      	add	r3, r2
    df28:	b2da      	uxtb	r2, r3
    df2a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df32:	701a      	strb	r2, [r3, #0]
    df34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df3c:	781a      	ldrb	r2, [r3, #0]
    df3e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df46:	781b      	ldrb	r3, [r3, #0]
    df48:	4413      	add	r3, r2
    df4a:	b2da      	uxtb	r2, r3
    df4c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df54:	701a      	strb	r2, [r3, #0]
    df56:	f24c 5349 	movw	r3, #50505	; 0xc549
    df5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5e:	781b      	ldrb	r3, [r3, #0]
    df60:	3301      	adds	r3, #1
    df62:	b2da      	uxtb	r2, r3
    df64:	f24c 5349 	movw	r3, #50505	; 0xc549
    df68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df6c:	701a      	strb	r2, [r3, #0]
    df6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    df72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df76:	781b      	ldrb	r3, [r3, #0]
    df78:	2bff      	cmp	r3, #255	; 0xff
    df7a:	d105      	bne.n	df88 <send_nav_values+0x6ec>
    df7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    df80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df84:	2200      	movs	r2, #0
    df86:	701a      	strb	r2, [r3, #0]
    df88:	f24c 5349 	movw	r3, #50505	; 0xc549
    df8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df90:	781b      	ldrb	r3, [r3, #0]
    df92:	461a      	mov	r2, r3
    df94:	f64c 038c 	movw	r3, #51340	; 0xc88c
    df98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df9c:	7819      	ldrb	r1, [r3, #0]
    df9e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dfa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa6:	5499      	strb	r1, [r3, r2]
    dfa8:	f64c 038c 	movw	r3, #51340	; 0xc88c
    dfac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb0:	781a      	ldrb	r2, [r3, #0]
    dfb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfba:	781b      	ldrb	r3, [r3, #0]
    dfbc:	4413      	add	r3, r2
    dfbe:	b2da      	uxtb	r2, r3
    dfc0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc8:	701a      	strb	r2, [r3, #0]
    dfca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dfce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd2:	781a      	ldrb	r2, [r3, #0]
    dfd4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfdc:	781b      	ldrb	r3, [r3, #0]
    dfde:	4413      	add	r3, r2
    dfe0:	b2da      	uxtb	r2, r3
    dfe2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfea:	701a      	strb	r2, [r3, #0]
    dfec:	f24c 5349 	movw	r3, #50505	; 0xc549
    dff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff4:	781b      	ldrb	r3, [r3, #0]
    dff6:	3301      	adds	r3, #1
    dff8:	b2da      	uxtb	r2, r3
    dffa:	f24c 5349 	movw	r3, #50505	; 0xc549
    dffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e002:	701a      	strb	r2, [r3, #0]
    e004:	f24c 5349 	movw	r3, #50505	; 0xc549
    e008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00c:	781b      	ldrb	r3, [r3, #0]
    e00e:	2bff      	cmp	r3, #255	; 0xff
    e010:	d105      	bne.n	e01e <send_nav_values+0x782>
    e012:	f24c 5349 	movw	r3, #50505	; 0xc549
    e016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e01a:	2200      	movs	r2, #0
    e01c:	701a      	strb	r2, [r3, #0]
    e01e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e026:	781b      	ldrb	r3, [r3, #0]
    e028:	461a      	mov	r2, r3
    e02a:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e032:	7859      	ldrb	r1, [r3, #1]
    e034:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03c:	5499      	strb	r1, [r3, r2]
    e03e:	4b8b      	ldr	r3, [pc, #556]	; (e26c <send_nav_values+0x9d0>)
    e040:	781a      	ldrb	r2, [r3, #0]
    e042:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e04a:	781b      	ldrb	r3, [r3, #0]
    e04c:	4413      	add	r3, r2
    e04e:	b2da      	uxtb	r2, r3
    e050:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e058:	701a      	strb	r2, [r3, #0]
    e05a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e062:	781a      	ldrb	r2, [r3, #0]
    e064:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	4413      	add	r3, r2
    e070:	b2da      	uxtb	r2, r3
    e072:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e07a:	701a      	strb	r2, [r3, #0]
    e07c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e084:	781b      	ldrb	r3, [r3, #0]
    e086:	3301      	adds	r3, #1
    e088:	b2da      	uxtb	r2, r3
    e08a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e092:	701a      	strb	r2, [r3, #0]
    e094:	f24c 5349 	movw	r3, #50505	; 0xc549
    e098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09c:	781b      	ldrb	r3, [r3, #0]
    e09e:	2bff      	cmp	r3, #255	; 0xff
    e0a0:	d105      	bne.n	e0ae <send_nav_values+0x812>
    e0a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0aa:	2200      	movs	r2, #0
    e0ac:	701a      	strb	r2, [r3, #0]
    e0ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b6:	781b      	ldrb	r3, [r3, #0]
    e0b8:	461a      	mov	r2, r3
    e0ba:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c2:	7899      	ldrb	r1, [r3, #2]
    e0c4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0cc:	5499      	strb	r1, [r3, r2]
    e0ce:	4b68      	ldr	r3, [pc, #416]	; (e270 <send_nav_values+0x9d4>)
    e0d0:	781a      	ldrb	r2, [r3, #0]
    e0d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0da:	781b      	ldrb	r3, [r3, #0]
    e0dc:	4413      	add	r3, r2
    e0de:	b2da      	uxtb	r2, r3
    e0e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e8:	701a      	strb	r2, [r3, #0]
    e0ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f2:	781a      	ldrb	r2, [r3, #0]
    e0f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fc:	781b      	ldrb	r3, [r3, #0]
    e0fe:	4413      	add	r3, r2
    e100:	b2da      	uxtb	r2, r3
    e102:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10a:	701a      	strb	r2, [r3, #0]
    e10c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e114:	781b      	ldrb	r3, [r3, #0]
    e116:	3301      	adds	r3, #1
    e118:	b2da      	uxtb	r2, r3
    e11a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e122:	701a      	strb	r2, [r3, #0]
    e124:	f24c 5349 	movw	r3, #50505	; 0xc549
    e128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12c:	781b      	ldrb	r3, [r3, #0]
    e12e:	2bff      	cmp	r3, #255	; 0xff
    e130:	d105      	bne.n	e13e <send_nav_values+0x8a2>
    e132:	f24c 5349 	movw	r3, #50505	; 0xc549
    e136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13a:	2200      	movs	r2, #0
    e13c:	701a      	strb	r2, [r3, #0]
    e13e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e146:	781b      	ldrb	r3, [r3, #0]
    e148:	461a      	mov	r2, r3
    e14a:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e152:	78d9      	ldrb	r1, [r3, #3]
    e154:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15c:	5499      	strb	r1, [r3, r2]
    e15e:	4b45      	ldr	r3, [pc, #276]	; (e274 <send_nav_values+0x9d8>)
    e160:	781a      	ldrb	r2, [r3, #0]
    e162:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e16a:	781b      	ldrb	r3, [r3, #0]
    e16c:	4413      	add	r3, r2
    e16e:	b2da      	uxtb	r2, r3
    e170:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e178:	701a      	strb	r2, [r3, #0]
    e17a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e182:	781a      	ldrb	r2, [r3, #0]
    e184:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18c:	781b      	ldrb	r3, [r3, #0]
    e18e:	4413      	add	r3, r2
    e190:	b2da      	uxtb	r2, r3
    e192:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e19a:	701a      	strb	r2, [r3, #0]
    e19c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a4:	781b      	ldrb	r3, [r3, #0]
    e1a6:	3301      	adds	r3, #1
    e1a8:	b2da      	uxtb	r2, r3
    e1aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b2:	701a      	strb	r2, [r3, #0]
    e1b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1bc:	781b      	ldrb	r3, [r3, #0]
    e1be:	2bff      	cmp	r3, #255	; 0xff
    e1c0:	d105      	bne.n	e1ce <send_nav_values+0x932>
    e1c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ca:	2200      	movs	r2, #0
    e1cc:	701a      	strb	r2, [r3, #0]
    e1ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d6:	781b      	ldrb	r3, [r3, #0]
    e1d8:	461a      	mov	r2, r3
    e1da:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e2:	7819      	ldrb	r1, [r3, #0]
    e1e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ec:	5499      	strb	r1, [r3, r2]
    e1ee:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f6:	781a      	ldrb	r2, [r3, #0]
    e1f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e200:	781b      	ldrb	r3, [r3, #0]
    e202:	4413      	add	r3, r2
    e204:	b2da      	uxtb	r2, r3
    e206:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e20e:	701a      	strb	r2, [r3, #0]
    e210:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e218:	781a      	ldrb	r2, [r3, #0]
    e21a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e222:	781b      	ldrb	r3, [r3, #0]
    e224:	4413      	add	r3, r2
    e226:	b2da      	uxtb	r2, r3
    e228:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e230:	701a      	strb	r2, [r3, #0]
    e232:	f24c 5349 	movw	r3, #50505	; 0xc549
    e236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e23a:	781b      	ldrb	r3, [r3, #0]
    e23c:	3301      	adds	r3, #1
    e23e:	b2da      	uxtb	r2, r3
    e240:	f24c 5349 	movw	r3, #50505	; 0xc549
    e244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e248:	701a      	strb	r2, [r3, #0]
    e24a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e252:	781b      	ldrb	r3, [r3, #0]
    e254:	2bff      	cmp	r3, #255	; 0xff
    e256:	d10f      	bne.n	e278 <send_nav_values+0x9dc>
    e258:	f24c 5349 	movw	r3, #50505	; 0xc549
    e25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e260:	2200      	movs	r2, #0
    e262:	701a      	strb	r2, [r3, #0]
    e264:	e008      	b.n	e278 <send_nav_values+0x9dc>
    e266:	bf00      	nop
    e268:	2004cb03 	.word	0x2004cb03
    e26c:	2004c88d 	.word	0x2004c88d
    e270:	2004c88e 	.word	0x2004c88e
    e274:	2004c88f 	.word	0x2004c88f
    e278:	f24c 5349 	movw	r3, #50505	; 0xc549
    e27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e280:	781b      	ldrb	r3, [r3, #0]
    e282:	461a      	mov	r2, r3
    e284:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e28c:	7859      	ldrb	r1, [r3, #1]
    e28e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e296:	5499      	strb	r1, [r3, r2]
    e298:	4bd1      	ldr	r3, [pc, #836]	; (e5e0 <send_nav_values+0xd44>)
    e29a:	781a      	ldrb	r2, [r3, #0]
    e29c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a4:	781b      	ldrb	r3, [r3, #0]
    e2a6:	4413      	add	r3, r2
    e2a8:	b2da      	uxtb	r2, r3
    e2aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2b2:	701a      	strb	r2, [r3, #0]
    e2b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2bc:	781a      	ldrb	r2, [r3, #0]
    e2be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c6:	781b      	ldrb	r3, [r3, #0]
    e2c8:	4413      	add	r3, r2
    e2ca:	b2da      	uxtb	r2, r3
    e2cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d4:	701a      	strb	r2, [r3, #0]
    e2d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2de:	781b      	ldrb	r3, [r3, #0]
    e2e0:	3301      	adds	r3, #1
    e2e2:	b2da      	uxtb	r2, r3
    e2e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ec:	701a      	strb	r2, [r3, #0]
    e2ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f6:	781b      	ldrb	r3, [r3, #0]
    e2f8:	2bff      	cmp	r3, #255	; 0xff
    e2fa:	d105      	bne.n	e308 <send_nav_values+0xa6c>
    e2fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e304:	2200      	movs	r2, #0
    e306:	701a      	strb	r2, [r3, #0]
    e308:	f24c 5349 	movw	r3, #50505	; 0xc549
    e30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e310:	781b      	ldrb	r3, [r3, #0]
    e312:	461a      	mov	r2, r3
    e314:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e31c:	7899      	ldrb	r1, [r3, #2]
    e31e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e326:	5499      	strb	r1, [r3, r2]
    e328:	4bae      	ldr	r3, [pc, #696]	; (e5e4 <send_nav_values+0xd48>)
    e32a:	781a      	ldrb	r2, [r3, #0]
    e32c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e334:	781b      	ldrb	r3, [r3, #0]
    e336:	4413      	add	r3, r2
    e338:	b2da      	uxtb	r2, r3
    e33a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e342:	701a      	strb	r2, [r3, #0]
    e344:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e34c:	781a      	ldrb	r2, [r3, #0]
    e34e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e356:	781b      	ldrb	r3, [r3, #0]
    e358:	4413      	add	r3, r2
    e35a:	b2da      	uxtb	r2, r3
    e35c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e364:	701a      	strb	r2, [r3, #0]
    e366:	f24c 5349 	movw	r3, #50505	; 0xc549
    e36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36e:	781b      	ldrb	r3, [r3, #0]
    e370:	3301      	adds	r3, #1
    e372:	b2da      	uxtb	r2, r3
    e374:	f24c 5349 	movw	r3, #50505	; 0xc549
    e378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e37c:	701a      	strb	r2, [r3, #0]
    e37e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e386:	781b      	ldrb	r3, [r3, #0]
    e388:	2bff      	cmp	r3, #255	; 0xff
    e38a:	d105      	bne.n	e398 <send_nav_values+0xafc>
    e38c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e394:	2200      	movs	r2, #0
    e396:	701a      	strb	r2, [r3, #0]
    e398:	f24c 5349 	movw	r3, #50505	; 0xc549
    e39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a0:	781b      	ldrb	r3, [r3, #0]
    e3a2:	461a      	mov	r2, r3
    e3a4:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ac:	78d9      	ldrb	r1, [r3, #3]
    e3ae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b6:	5499      	strb	r1, [r3, r2]
    e3b8:	4b8b      	ldr	r3, [pc, #556]	; (e5e8 <send_nav_values+0xd4c>)
    e3ba:	781a      	ldrb	r2, [r3, #0]
    e3bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c4:	781b      	ldrb	r3, [r3, #0]
    e3c6:	4413      	add	r3, r2
    e3c8:	b2da      	uxtb	r2, r3
    e3ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d2:	701a      	strb	r2, [r3, #0]
    e3d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3dc:	781a      	ldrb	r2, [r3, #0]
    e3de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e6:	781b      	ldrb	r3, [r3, #0]
    e3e8:	4413      	add	r3, r2
    e3ea:	b2da      	uxtb	r2, r3
    e3ec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f4:	701a      	strb	r2, [r3, #0]
    e3f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fe:	781b      	ldrb	r3, [r3, #0]
    e400:	3301      	adds	r3, #1
    e402:	b2da      	uxtb	r2, r3
    e404:	f24c 5349 	movw	r3, #50505	; 0xc549
    e408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e40c:	701a      	strb	r2, [r3, #0]
    e40e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e416:	781b      	ldrb	r3, [r3, #0]
    e418:	2bff      	cmp	r3, #255	; 0xff
    e41a:	d105      	bne.n	e428 <send_nav_values+0xb8c>
    e41c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e424:	2200      	movs	r2, #0
    e426:	701a      	strb	r2, [r3, #0]
    e428:	f24c 5349 	movw	r3, #50505	; 0xc549
    e42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e430:	781b      	ldrb	r3, [r3, #0]
    e432:	461a      	mov	r2, r3
    e434:	f240 5358 	movw	r3, #1368	; 0x558
    e438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e43c:	7819      	ldrb	r1, [r3, #0]
    e43e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e446:	5499      	strb	r1, [r3, r2]
    e448:	f240 5358 	movw	r3, #1368	; 0x558
    e44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e450:	781a      	ldrb	r2, [r3, #0]
    e452:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e45a:	781b      	ldrb	r3, [r3, #0]
    e45c:	4413      	add	r3, r2
    e45e:	b2da      	uxtb	r2, r3
    e460:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e468:	701a      	strb	r2, [r3, #0]
    e46a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e472:	781a      	ldrb	r2, [r3, #0]
    e474:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e47c:	781b      	ldrb	r3, [r3, #0]
    e47e:	4413      	add	r3, r2
    e480:	b2da      	uxtb	r2, r3
    e482:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e48a:	701a      	strb	r2, [r3, #0]
    e48c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e494:	781b      	ldrb	r3, [r3, #0]
    e496:	3301      	adds	r3, #1
    e498:	b2da      	uxtb	r2, r3
    e49a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4a2:	701a      	strb	r2, [r3, #0]
    e4a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ac:	781b      	ldrb	r3, [r3, #0]
    e4ae:	2bff      	cmp	r3, #255	; 0xff
    e4b0:	d105      	bne.n	e4be <send_nav_values+0xc22>
    e4b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ba:	2200      	movs	r2, #0
    e4bc:	701a      	strb	r2, [r3, #0]
    e4be:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c6:	781b      	ldrb	r3, [r3, #0]
    e4c8:	461a      	mov	r2, r3
    e4ca:	f240 5358 	movw	r3, #1368	; 0x558
    e4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4d2:	7859      	ldrb	r1, [r3, #1]
    e4d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4dc:	5499      	strb	r1, [r3, r2]
    e4de:	4b43      	ldr	r3, [pc, #268]	; (e5ec <send_nav_values+0xd50>)
    e4e0:	781a      	ldrb	r2, [r3, #0]
    e4e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ea:	781b      	ldrb	r3, [r3, #0]
    e4ec:	4413      	add	r3, r2
    e4ee:	b2da      	uxtb	r2, r3
    e4f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f8:	701a      	strb	r2, [r3, #0]
    e4fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e502:	781a      	ldrb	r2, [r3, #0]
    e504:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e50c:	781b      	ldrb	r3, [r3, #0]
    e50e:	4413      	add	r3, r2
    e510:	b2da      	uxtb	r2, r3
    e512:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e51a:	701a      	strb	r2, [r3, #0]
    e51c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e524:	781b      	ldrb	r3, [r3, #0]
    e526:	3301      	adds	r3, #1
    e528:	b2da      	uxtb	r2, r3
    e52a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e532:	701a      	strb	r2, [r3, #0]
    e534:	f24c 5349 	movw	r3, #50505	; 0xc549
    e538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e53c:	781b      	ldrb	r3, [r3, #0]
    e53e:	2bff      	cmp	r3, #255	; 0xff
    e540:	d105      	bne.n	e54e <send_nav_values+0xcb2>
    e542:	f24c 5349 	movw	r3, #50505	; 0xc549
    e546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e54a:	2200      	movs	r2, #0
    e54c:	701a      	strb	r2, [r3, #0]
    e54e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e556:	781b      	ldrb	r3, [r3, #0]
    e558:	461a      	mov	r2, r3
    e55a:	f240 5358 	movw	r3, #1368	; 0x558
    e55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e562:	7899      	ldrb	r1, [r3, #2]
    e564:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e56c:	5499      	strb	r1, [r3, r2]
    e56e:	4b20      	ldr	r3, [pc, #128]	; (e5f0 <send_nav_values+0xd54>)
    e570:	781a      	ldrb	r2, [r3, #0]
    e572:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e57a:	781b      	ldrb	r3, [r3, #0]
    e57c:	4413      	add	r3, r2
    e57e:	b2da      	uxtb	r2, r3
    e580:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e588:	701a      	strb	r2, [r3, #0]
    e58a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e592:	781a      	ldrb	r2, [r3, #0]
    e594:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59c:	781b      	ldrb	r3, [r3, #0]
    e59e:	4413      	add	r3, r2
    e5a0:	b2da      	uxtb	r2, r3
    e5a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5aa:	701a      	strb	r2, [r3, #0]
    e5ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b4:	781b      	ldrb	r3, [r3, #0]
    e5b6:	3301      	adds	r3, #1
    e5b8:	b2da      	uxtb	r2, r3
    e5ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c2:	701a      	strb	r2, [r3, #0]
    e5c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5cc:	781b      	ldrb	r3, [r3, #0]
    e5ce:	2bff      	cmp	r3, #255	; 0xff
    e5d0:	d110      	bne.n	e5f4 <send_nav_values+0xd58>
    e5d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5da:	2200      	movs	r2, #0
    e5dc:	701a      	strb	r2, [r3, #0]
    e5de:	e009      	b.n	e5f4 <send_nav_values+0xd58>
    e5e0:	2004c8d5 	.word	0x2004c8d5
    e5e4:	2004c8d6 	.word	0x2004c8d6
    e5e8:	2004c8d7 	.word	0x2004c8d7
    e5ec:	20000559 	.word	0x20000559
    e5f0:	2000055a 	.word	0x2000055a
    e5f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5fc:	781b      	ldrb	r3, [r3, #0]
    e5fe:	461a      	mov	r2, r3
    e600:	f240 5358 	movw	r3, #1368	; 0x558
    e604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e608:	78d9      	ldrb	r1, [r3, #3]
    e60a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e612:	5499      	strb	r1, [r3, r2]
    e614:	4bc2      	ldr	r3, [pc, #776]	; (e920 <send_nav_values+0x1084>)
    e616:	781a      	ldrb	r2, [r3, #0]
    e618:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e620:	781b      	ldrb	r3, [r3, #0]
    e622:	4413      	add	r3, r2
    e624:	b2da      	uxtb	r2, r3
    e626:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62e:	701a      	strb	r2, [r3, #0]
    e630:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e638:	781a      	ldrb	r2, [r3, #0]
    e63a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	4413      	add	r3, r2
    e646:	b2da      	uxtb	r2, r3
    e648:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e650:	701a      	strb	r2, [r3, #0]
    e652:	f24c 5349 	movw	r3, #50505	; 0xc549
    e656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e65a:	781b      	ldrb	r3, [r3, #0]
    e65c:	3301      	adds	r3, #1
    e65e:	b2da      	uxtb	r2, r3
    e660:	f24c 5349 	movw	r3, #50505	; 0xc549
    e664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e668:	701a      	strb	r2, [r3, #0]
    e66a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e672:	781b      	ldrb	r3, [r3, #0]
    e674:	2bff      	cmp	r3, #255	; 0xff
    e676:	d105      	bne.n	e684 <send_nav_values+0xde8>
    e678:	f24c 5349 	movw	r3, #50505	; 0xc549
    e67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e680:	2200      	movs	r2, #0
    e682:	701a      	strb	r2, [r3, #0]
    e684:	f24c 5349 	movw	r3, #50505	; 0xc549
    e688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e68c:	781b      	ldrb	r3, [r3, #0]
    e68e:	461a      	mov	r2, r3
    e690:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e698:	7819      	ldrb	r1, [r3, #0]
    e69a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a2:	5499      	strb	r1, [r3, r2]
    e6a4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ac:	781a      	ldrb	r2, [r3, #0]
    e6ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b6:	781b      	ldrb	r3, [r3, #0]
    e6b8:	4413      	add	r3, r2
    e6ba:	b2da      	uxtb	r2, r3
    e6bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c4:	701a      	strb	r2, [r3, #0]
    e6c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ce:	781a      	ldrb	r2, [r3, #0]
    e6d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d8:	781b      	ldrb	r3, [r3, #0]
    e6da:	4413      	add	r3, r2
    e6dc:	b2da      	uxtb	r2, r3
    e6de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e6:	701a      	strb	r2, [r3, #0]
    e6e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f0:	781b      	ldrb	r3, [r3, #0]
    e6f2:	3301      	adds	r3, #1
    e6f4:	b2da      	uxtb	r2, r3
    e6f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6fe:	701a      	strb	r2, [r3, #0]
    e700:	f24c 5349 	movw	r3, #50505	; 0xc549
    e704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e708:	781b      	ldrb	r3, [r3, #0]
    e70a:	2bff      	cmp	r3, #255	; 0xff
    e70c:	d105      	bne.n	e71a <send_nav_values+0xe7e>
    e70e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e716:	2200      	movs	r2, #0
    e718:	701a      	strb	r2, [r3, #0]
    e71a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e722:	781b      	ldrb	r3, [r3, #0]
    e724:	461a      	mov	r2, r3
    e726:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e72e:	7859      	ldrb	r1, [r3, #1]
    e730:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e738:	5499      	strb	r1, [r3, r2]
    e73a:	4b7a      	ldr	r3, [pc, #488]	; (e924 <send_nav_values+0x1088>)
    e73c:	781a      	ldrb	r2, [r3, #0]
    e73e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e746:	781b      	ldrb	r3, [r3, #0]
    e748:	4413      	add	r3, r2
    e74a:	b2da      	uxtb	r2, r3
    e74c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e754:	701a      	strb	r2, [r3, #0]
    e756:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e75e:	781a      	ldrb	r2, [r3, #0]
    e760:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e768:	781b      	ldrb	r3, [r3, #0]
    e76a:	4413      	add	r3, r2
    e76c:	b2da      	uxtb	r2, r3
    e76e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e776:	701a      	strb	r2, [r3, #0]
    e778:	f24c 5349 	movw	r3, #50505	; 0xc549
    e77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e780:	781b      	ldrb	r3, [r3, #0]
    e782:	3301      	adds	r3, #1
    e784:	b2da      	uxtb	r2, r3
    e786:	f24c 5349 	movw	r3, #50505	; 0xc549
    e78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e78e:	701a      	strb	r2, [r3, #0]
    e790:	f24c 5349 	movw	r3, #50505	; 0xc549
    e794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e798:	781b      	ldrb	r3, [r3, #0]
    e79a:	2bff      	cmp	r3, #255	; 0xff
    e79c:	d105      	bne.n	e7aa <send_nav_values+0xf0e>
    e79e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a6:	2200      	movs	r2, #0
    e7a8:	701a      	strb	r2, [r3, #0]
    e7aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b2:	781b      	ldrb	r3, [r3, #0]
    e7b4:	461a      	mov	r2, r3
    e7b6:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7be:	7899      	ldrb	r1, [r3, #2]
    e7c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c8:	5499      	strb	r1, [r3, r2]
    e7ca:	4b57      	ldr	r3, [pc, #348]	; (e928 <send_nav_values+0x108c>)
    e7cc:	781a      	ldrb	r2, [r3, #0]
    e7ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d6:	781b      	ldrb	r3, [r3, #0]
    e7d8:	4413      	add	r3, r2
    e7da:	b2da      	uxtb	r2, r3
    e7dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e4:	701a      	strb	r2, [r3, #0]
    e7e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ee:	781a      	ldrb	r2, [r3, #0]
    e7f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f8:	781b      	ldrb	r3, [r3, #0]
    e7fa:	4413      	add	r3, r2
    e7fc:	b2da      	uxtb	r2, r3
    e7fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e806:	701a      	strb	r2, [r3, #0]
    e808:	f24c 5349 	movw	r3, #50505	; 0xc549
    e80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e810:	781b      	ldrb	r3, [r3, #0]
    e812:	3301      	adds	r3, #1
    e814:	b2da      	uxtb	r2, r3
    e816:	f24c 5349 	movw	r3, #50505	; 0xc549
    e81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e81e:	701a      	strb	r2, [r3, #0]
    e820:	f24c 5349 	movw	r3, #50505	; 0xc549
    e824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e828:	781b      	ldrb	r3, [r3, #0]
    e82a:	2bff      	cmp	r3, #255	; 0xff
    e82c:	d105      	bne.n	e83a <send_nav_values+0xf9e>
    e82e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e836:	2200      	movs	r2, #0
    e838:	701a      	strb	r2, [r3, #0]
    e83a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e842:	781b      	ldrb	r3, [r3, #0]
    e844:	461a      	mov	r2, r3
    e846:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e84e:	78d9      	ldrb	r1, [r3, #3]
    e850:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e858:	5499      	strb	r1, [r3, r2]
    e85a:	4b34      	ldr	r3, [pc, #208]	; (e92c <send_nav_values+0x1090>)
    e85c:	781a      	ldrb	r2, [r3, #0]
    e85e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e866:	781b      	ldrb	r3, [r3, #0]
    e868:	4413      	add	r3, r2
    e86a:	b2da      	uxtb	r2, r3
    e86c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e874:	701a      	strb	r2, [r3, #0]
    e876:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e87e:	781a      	ldrb	r2, [r3, #0]
    e880:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e888:	781b      	ldrb	r3, [r3, #0]
    e88a:	4413      	add	r3, r2
    e88c:	b2da      	uxtb	r2, r3
    e88e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e896:	701a      	strb	r2, [r3, #0]
    e898:	f24c 5349 	movw	r3, #50505	; 0xc549
    e89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a0:	781b      	ldrb	r3, [r3, #0]
    e8a2:	3301      	adds	r3, #1
    e8a4:	b2da      	uxtb	r2, r3
    e8a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ae:	701a      	strb	r2, [r3, #0]
    e8b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b8:	781b      	ldrb	r3, [r3, #0]
    e8ba:	2bff      	cmp	r3, #255	; 0xff
    e8bc:	d105      	bne.n	e8ca <send_nav_values+0x102e>
    e8be:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c6:	2200      	movs	r2, #0
    e8c8:	701a      	strb	r2, [r3, #0]
    e8ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d2:	781b      	ldrb	r3, [r3, #0]
    e8d4:	461a      	mov	r2, r3
    e8d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8de:	7819      	ldrb	r1, [r3, #0]
    e8e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e8:	5499      	strb	r1, [r3, r2]
    e8ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f2:	781b      	ldrb	r3, [r3, #0]
    e8f4:	3301      	adds	r3, #1
    e8f6:	b2da      	uxtb	r2, r3
    e8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e900:	701a      	strb	r2, [r3, #0]
    e902:	f24c 5349 	movw	r3, #50505	; 0xc549
    e906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e90a:	781b      	ldrb	r3, [r3, #0]
    e90c:	2bff      	cmp	r3, #255	; 0xff
    e90e:	d10f      	bne.n	e930 <send_nav_values+0x1094>
    e910:	f24c 5349 	movw	r3, #50505	; 0xc549
    e914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e918:	2200      	movs	r2, #0
    e91a:	701a      	strb	r2, [r3, #0]
    e91c:	e008      	b.n	e930 <send_nav_values+0x1094>
    e91e:	bf00      	nop
    e920:	2000055b 	.word	0x2000055b
    e924:	2004c8d9 	.word	0x2004c8d9
    e928:	2004c8da 	.word	0x2004c8da
    e92c:	2004c8db 	.word	0x2004c8db
    e930:	f24c 5349 	movw	r3, #50505	; 0xc549
    e934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e938:	781b      	ldrb	r3, [r3, #0]
    e93a:	461a      	mov	r2, r3
    e93c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e944:	7819      	ldrb	r1, [r3, #0]
    e946:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e94e:	5499      	strb	r1, [r3, r2]
    e950:	f24c 5349 	movw	r3, #50505	; 0xc549
    e954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e958:	781b      	ldrb	r3, [r3, #0]
    e95a:	3301      	adds	r3, #1
    e95c:	b2da      	uxtb	r2, r3
    e95e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e966:	701a      	strb	r2, [r3, #0]
    e968:	f24c 5349 	movw	r3, #50505	; 0xc549
    e96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e970:	781b      	ldrb	r3, [r3, #0]
    e972:	2bff      	cmp	r3, #255	; 0xff
    e974:	d105      	bne.n	e982 <send_nav_values+0x10e6>
    e976:	f24c 5349 	movw	r3, #50505	; 0xc549
    e97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e97e:	2200      	movs	r2, #0
    e980:	701a      	strb	r2, [r3, #0]
    e982:	f242 0339 	movw	r3, #8249	; 0x2039
    e986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e98a:	781b      	ldrb	r3, [r3, #0]
    e98c:	b2db      	uxtb	r3, r3
    e98e:	f003 0310 	and.w	r3, r3, #16
    e992:	2b00      	cmp	r3, #0
    e994:	d15a      	bne.n	ea4c <send_nav_values+0x11b0>
    e996:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e99e:	781b      	ldrb	r3, [r3, #0]
    e9a0:	b2db      	uxtb	r3, r3
    e9a2:	461a      	mov	r2, r3
    e9a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ac:	5c9a      	ldrb	r2, [r3, r2]
    e9ae:	f24c 634b 	movw	r3, #50763	; 0xc64b
    e9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b6:	701a      	strb	r2, [r3, #0]
    e9b8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    e9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c0:	2200      	movs	r2, #0
    e9c2:	701a      	strb	r2, [r3, #0]
    e9c4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9cc:	781b      	ldrb	r3, [r3, #0]
    e9ce:	b2db      	uxtb	r3, r3
    e9d0:	3301      	adds	r3, #1
    e9d2:	b2da      	uxtb	r2, r3
    e9d4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9dc:	701a      	strb	r2, [r3, #0]
    e9de:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e6:	781b      	ldrb	r3, [r3, #0]
    e9e8:	b2db      	uxtb	r3, r3
    e9ea:	2bff      	cmp	r3, #255	; 0xff
    e9ec:	d105      	bne.n	e9fa <send_nav_values+0x115e>
    e9ee:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f6:	2200      	movs	r2, #0
    e9f8:	701a      	strb	r2, [r3, #0]
    e9fa:	f242 0338 	movw	r3, #8248	; 0x2038
    e9fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea02:	f242 0238 	movw	r2, #8248	; 0x2038
    ea06:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ea0a:	7812      	ldrb	r2, [r2, #0]
    ea0c:	b2d2      	uxtb	r2, r2
    ea0e:	f042 0201 	orr.w	r2, r2, #1
    ea12:	b2d2      	uxtb	r2, r2
    ea14:	701a      	strb	r2, [r3, #0]
    ea16:	f242 0339 	movw	r3, #8249	; 0x2039
    ea1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea1e:	f242 0239 	movw	r2, #8249	; 0x2039
    ea22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ea26:	7812      	ldrb	r2, [r2, #0]
    ea28:	b2d2      	uxtb	r2, r2
    ea2a:	f042 0210 	orr.w	r2, r2, #16
    ea2e:	b2d2      	uxtb	r2, r2
    ea30:	701a      	strb	r2, [r3, #0]
    ea32:	e00b      	b.n	ea4c <send_nav_values+0x11b0>
    ea34:	f24c 5348 	movw	r3, #50504	; 0xc548
    ea38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea3c:	781b      	ldrb	r3, [r3, #0]
    ea3e:	3301      	adds	r3, #1
    ea40:	b2da      	uxtb	r2, r3
    ea42:	f24c 5348 	movw	r3, #50504	; 0xc548
    ea46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea4a:	701a      	strb	r2, [r3, #0]
}
    ea4c:	46bd      	mov	sp, r7
    ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea52:	4770      	bx	lr

0000ea54 <course_run>:

void course_run(void){
    ea54:	b580      	push	{r7, lr}
    ea56:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    ea58:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea60:	781b      	ldrb	r3, [r3, #0]
    ea62:	2b02      	cmp	r3, #2
    ea64:	d006      	beq.n	ea74 <course_run+0x20>
    ea66:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea6e:	781b      	ldrb	r3, [r3, #0]
    ea70:	2b03      	cmp	r3, #3
    ea72:	d112      	bne.n	ea9a <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    ea74:	f24c 532e 	movw	r3, #50478	; 0xc52e
    ea78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea7c:	781b      	ldrb	r3, [r3, #0]
    ea7e:	2b02      	cmp	r3, #2
    ea80:	d901      	bls.n	ea86 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    ea82:	f003 faf1 	bl	12068 <course_pid_run>
    desired_roll = nav_desired_roll;
    ea86:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    ea8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8e:	681a      	ldr	r2, [r3, #0]
    ea90:	f64c 0374 	movw	r3, #51316	; 0xc874
    ea94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea98:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    ea9a:	bd80      	pop	{r7, pc}

0000ea9c <altitude_control_task>:

void altitude_control_task(void)
{
    ea9c:	b580      	push	{r7, lr}
    ea9e:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    eaa0:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eaa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaa8:	781b      	ldrb	r3, [r3, #0]
    eaaa:	2b02      	cmp	r3, #2
    eaac:	d006      	beq.n	eabc <altitude_control_task+0x20>
    eaae:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab6:	781b      	ldrb	r3, [r3, #0]
    eab8:	2b03      	cmp	r3, #3
    eaba:	d108      	bne.n	eace <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    eabc:	f24c 532d 	movw	r3, #50477	; 0xc52d
    eac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eac4:	781b      	ldrb	r3, [r3, #0]
    eac6:	2b03      	cmp	r3, #3
    eac8:	d101      	bne.n	eace <altitude_control_task+0x32>
      			altitude_pid_run();
    eaca:	f003 fd55 	bl	12578 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    eace:	bd80      	pop	{r7, pc}

0000ead0 <climb_control_task>:
void climb_control_task(void)
{
    ead0:	b580      	push	{r7, lr}
    ead2:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    ead4:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ead8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eadc:	781b      	ldrb	r3, [r3, #0]
    eade:	2b02      	cmp	r3, #2
    eae0:	d006      	beq.n	eaf0 <climb_control_task+0x20>
    eae2:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaea:	781b      	ldrb	r3, [r3, #0]
    eaec:	2b03      	cmp	r3, #3
    eaee:	d135      	bne.n	eb5c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    eaf0:	f24c 532d 	movw	r3, #50477	; 0xc52d
    eaf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaf8:	781b      	ldrb	r3, [r3, #0]
    eafa:	2b01      	cmp	r3, #1
    eafc:	d901      	bls.n	eb02 <climb_control_task+0x32>
        	climb_pid_run();
    eafe:	f003 fb6b 	bl	121d8 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    eb02:	f24c 532d 	movw	r3, #50477	; 0xc52d
    eb06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb0a:	781b      	ldrb	r3, [r3, #0]
    eb0c:	2b01      	cmp	r3, #1
    eb0e:	d10a      	bne.n	eb26 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    eb10:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
    eb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb18:	881b      	ldrh	r3, [r3, #0]
    eb1a:	b29a      	uxth	r2, r3
    eb1c:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb24:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    eb26:	f24c 5335 	movw	r3, #50485	; 0xc535
    eb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb2e:	781b      	ldrb	r3, [r3, #0]
    eb30:	2b00      	cmp	r3, #0
    eb32:	d10d      	bne.n	eb50 <climb_control_task+0x80>
    eb34:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    eb38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb3c:	881b      	ldrh	r3, [r3, #0]
    eb3e:	2b00      	cmp	r3, #0
    eb40:	d10c      	bne.n	eb5c <climb_control_task+0x8c>
    eb42:	f24c 5340 	movw	r3, #50496	; 0xc540
    eb46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb4a:	781b      	ldrb	r3, [r3, #0]
    eb4c:	2b00      	cmp	r3, #0
    eb4e:	d105      	bne.n	eb5c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    eb50:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb58:	2200      	movs	r2, #0
    eb5a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    eb5c:	bd80      	pop	{r7, pc}
    eb5e:	bf00      	nop

0000eb60 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    eb60:	b580      	push	{r7, lr}
    eb62:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    eb64:	f003 f926 	bl	11db4 <ir_update>
    estimator_update_state_infrared();
    eb68:	f006 fbac 	bl	152c4 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    eb6c:	f003 f990 	bl	11e90 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    eb70:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb78:	881a      	ldrh	r2, [r3, #0]
    eb7a:	f24c 6368 	movw	r3, #50792	; 0xc668
    eb7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb82:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    eb84:	f64c 037e 	movw	r3, #51326	; 0xc87e
    eb88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8c:	881a      	ldrh	r2, [r3, #0]
    eb8e:	f24c 6368 	movw	r3, #50792	; 0xc668
    eb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb96:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    eb98:	f64c 0380 	movw	r3, #51328	; 0xc880
    eb9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba0:	881a      	ldrh	r2, [r3, #0]
    eba2:	f24c 6368 	movw	r3, #50792	; 0xc668
    eba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebaa:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    ebac:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ebb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebb4:	681b      	ldr	r3, [r3, #0]
    ebb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ebba:	4618      	mov	r0, r3
    ebbc:	f008 fff8 	bl	17bb0 <__aeabi_f2d>
    ebc0:	4602      	mov	r2, r0
    ebc2:	460b      	mov	r3, r1
    ebc4:	4610      	mov	r0, r2
    ebc6:	4619      	mov	r1, r3
    ebc8:	f04f 0200 	mov.w	r2, #0
    ebcc:	f04f 0300 	mov.w	r3, #0
    ebd0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ebd4:	f009 f840 	bl	17c58 <__aeabi_dmul>
    ebd8:	4602      	mov	r2, r0
    ebda:	460b      	mov	r3, r1
    ebdc:	4610      	mov	r0, r2
    ebde:	4619      	mov	r1, r3
    ebe0:	f04f 0200 	mov.w	r2, #0
    ebe4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ebe8:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    ebec:	f009 faa6 	bl	1813c <__aeabi_dcmplt>
    ebf0:	4603      	mov	r3, r0
    ebf2:	2b00      	cmp	r3, #0
    ebf4:	d002      	beq.n	ebfc <stabilisation_task+0x9c>
    ebf6:	f64d 2280 	movw	r2, #55936	; 0xda80
    ebfa:	e046      	b.n	ec8a <stabilisation_task+0x12a>
    ebfc:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ec00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec04:	681b      	ldr	r3, [r3, #0]
    ec06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ec0a:	4618      	mov	r0, r3
    ec0c:	f008 ffd0 	bl	17bb0 <__aeabi_f2d>
    ec10:	4602      	mov	r2, r0
    ec12:	460b      	mov	r3, r1
    ec14:	4610      	mov	r0, r2
    ec16:	4619      	mov	r1, r3
    ec18:	f04f 0200 	mov.w	r2, #0
    ec1c:	f04f 0300 	mov.w	r3, #0
    ec20:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ec24:	f009 f818 	bl	17c58 <__aeabi_dmul>
    ec28:	4602      	mov	r2, r0
    ec2a:	460b      	mov	r3, r1
    ec2c:	4610      	mov	r0, r2
    ec2e:	4619      	mov	r1, r3
    ec30:	f04f 0200 	mov.w	r2, #0
    ec34:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ec38:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    ec3c:	f009 fa9c 	bl	18178 <__aeabi_dcmpgt>
    ec40:	4603      	mov	r3, r0
    ec42:	2b00      	cmp	r3, #0
    ec44:	d002      	beq.n	ec4c <stabilisation_task+0xec>
    ec46:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ec4a:	e01d      	b.n	ec88 <stabilisation_task+0x128>
    ec4c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ec50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec54:	681b      	ldr	r3, [r3, #0]
    ec56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ec5a:	4618      	mov	r0, r3
    ec5c:	f008 ffa8 	bl	17bb0 <__aeabi_f2d>
    ec60:	4602      	mov	r2, r0
    ec62:	460b      	mov	r3, r1
    ec64:	4610      	mov	r0, r2
    ec66:	4619      	mov	r1, r3
    ec68:	f04f 0200 	mov.w	r2, #0
    ec6c:	f04f 0300 	mov.w	r3, #0
    ec70:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ec74:	f008 fff0 	bl	17c58 <__aeabi_dmul>
    ec78:	4602      	mov	r2, r0
    ec7a:	460b      	mov	r3, r1
    ec7c:	4610      	mov	r0, r2
    ec7e:	4619      	mov	r1, r3
    ec80:	f009 fa84 	bl	1818c <__aeabi_d2iz>
    ec84:	4603      	mov	r3, r0
    ec86:	b29b      	uxth	r3, r3
    ec88:	b29a      	uxth	r2, r3
    ec8a:	f24c 6368 	movw	r3, #50792	; 0xc668
    ec8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec92:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ec94:	bd80      	pop	{r7, pc}
    ec96:	bf00      	nop

0000ec98 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ec98:	b580      	push	{r7, lr}
    ec9a:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ec9c:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
    eca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca4:	2200      	movs	r2, #0
    eca6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    eca8:	f24c 63de 	movw	r3, #50910	; 0xc6de
    ecac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb0:	781b      	ldrb	r3, [r3, #0]
    ecb2:	2b00      	cmp	r3, #0
    ecb4:	f001 81af 	beq.w	10016 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ecb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc0:	781a      	ldrb	r2, [r3, #0]
    ecc2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ecc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecca:	781b      	ldrb	r3, [r3, #0]
    eccc:	b2db      	uxtb	r3, r3
    ecce:	429a      	cmp	r2, r3
    ecd0:	d313      	bcc.n	ecfa <send_gps_pos+0x62>
    ecd2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ecd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecda:	781b      	ldrb	r3, [r3, #0]
    ecdc:	b2db      	uxtb	r3, r3
    ecde:	461a      	mov	r2, r3
    ece0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ece4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece8:	781b      	ldrb	r3, [r3, #0]
    ecea:	1ad3      	subs	r3, r2, r3
    ecec:	33ff      	adds	r3, #255	; 0xff
    ecee:	2b21      	cmp	r3, #33	; 0x21
    ecf0:	bfd4      	ite	le
    ecf2:	2300      	movle	r3, #0
    ecf4:	2301      	movgt	r3, #1
    ecf6:	b2db      	uxtb	r3, r3
    ecf8:	e011      	b.n	ed1e <send_gps_pos+0x86>
    ecfa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ecfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed02:	781b      	ldrb	r3, [r3, #0]
    ed04:	b2db      	uxtb	r3, r3
    ed06:	461a      	mov	r2, r3
    ed08:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed10:	781b      	ldrb	r3, [r3, #0]
    ed12:	1ad3      	subs	r3, r2, r3
    ed14:	2b21      	cmp	r3, #33	; 0x21
    ed16:	bfd4      	ite	le
    ed18:	2300      	movle	r3, #0
    ed1a:	2301      	movgt	r3, #1
    ed1c:	b2db      	uxtb	r3, r3
    ed1e:	2b00      	cmp	r3, #0
    ed20:	f001 816b 	beq.w	fffa <send_gps_pos+0x1362>
    ed24:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed2c:	781b      	ldrb	r3, [r3, #0]
    ed2e:	461a      	mov	r2, r3
    ed30:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ed34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed38:	2105      	movs	r1, #5
    ed3a:	5499      	strb	r1, [r3, r2]
    ed3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed44:	781b      	ldrb	r3, [r3, #0]
    ed46:	3301      	adds	r3, #1
    ed48:	b2da      	uxtb	r2, r3
    ed4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed52:	701a      	strb	r2, [r3, #0]
    ed54:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed5c:	781b      	ldrb	r3, [r3, #0]
    ed5e:	2bff      	cmp	r3, #255	; 0xff
    ed60:	d105      	bne.n	ed6e <send_gps_pos+0xd6>
    ed62:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed6a:	2200      	movs	r2, #0
    ed6c:	701a      	strb	r2, [r3, #0]
    ed6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed76:	781b      	ldrb	r3, [r3, #0]
    ed78:	461a      	mov	r2, r3
    ed7a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ed7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed82:	2108      	movs	r1, #8
    ed84:	5499      	strb	r1, [r3, r2]
    ed86:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8e:	781b      	ldrb	r3, [r3, #0]
    ed90:	3301      	adds	r3, #1
    ed92:	b2da      	uxtb	r2, r3
    ed94:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed9c:	701a      	strb	r2, [r3, #0]
    ed9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    eda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda6:	781b      	ldrb	r3, [r3, #0]
    eda8:	2bff      	cmp	r3, #255	; 0xff
    edaa:	d105      	bne.n	edb8 <send_gps_pos+0x120>
    edac:	f24c 5349 	movw	r3, #50505	; 0xc549
    edb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb4:	2200      	movs	r2, #0
    edb6:	701a      	strb	r2, [r3, #0]
    edb8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    edbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc0:	2208      	movs	r2, #8
    edc2:	701a      	strb	r2, [r3, #0]
    edc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    edc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edcc:	2208      	movs	r2, #8
    edce:	701a      	strb	r2, [r3, #0]
    edd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    edd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd8:	781b      	ldrb	r3, [r3, #0]
    edda:	461a      	mov	r2, r3
    eddc:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ede0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede4:	7819      	ldrb	r1, [r3, #0]
    ede6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    edea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edee:	5499      	strb	r1, [r3, r2]
    edf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    edf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf8:	781a      	ldrb	r2, [r3, #0]
    edfa:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    edfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee02:	781b      	ldrb	r3, [r3, #0]
    ee04:	4413      	add	r3, r2
    ee06:	b2da      	uxtb	r2, r3
    ee08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee10:	701a      	strb	r2, [r3, #0]
    ee12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee1a:	781a      	ldrb	r2, [r3, #0]
    ee1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee24:	781b      	ldrb	r3, [r3, #0]
    ee26:	4413      	add	r3, r2
    ee28:	b2da      	uxtb	r2, r3
    ee2a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee32:	701a      	strb	r2, [r3, #0]
    ee34:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee3c:	781b      	ldrb	r3, [r3, #0]
    ee3e:	3301      	adds	r3, #1
    ee40:	b2da      	uxtb	r2, r3
    ee42:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee4a:	701a      	strb	r2, [r3, #0]
    ee4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee54:	781b      	ldrb	r3, [r3, #0]
    ee56:	2bff      	cmp	r3, #255	; 0xff
    ee58:	d105      	bne.n	ee66 <send_gps_pos+0x1ce>
    ee5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee62:	2200      	movs	r2, #0
    ee64:	701a      	strb	r2, [r3, #0]
    ee66:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee6e:	781b      	ldrb	r3, [r3, #0]
    ee70:	461a      	mov	r2, r3
    ee72:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ee76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7a:	7819      	ldrb	r1, [r3, #0]
    ee7c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ee80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee84:	5499      	strb	r1, [r3, r2]
    ee86:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ee8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8e:	781a      	ldrb	r2, [r3, #0]
    ee90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee98:	781b      	ldrb	r3, [r3, #0]
    ee9a:	4413      	add	r3, r2
    ee9c:	b2da      	uxtb	r2, r3
    ee9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea6:	701a      	strb	r2, [r3, #0]
    eea8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb0:	781a      	ldrb	r2, [r3, #0]
    eeb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eeb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeba:	781b      	ldrb	r3, [r3, #0]
    eebc:	4413      	add	r3, r2
    eebe:	b2da      	uxtb	r2, r3
    eec0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec8:	701a      	strb	r2, [r3, #0]
    eeca:	f24c 5349 	movw	r3, #50505	; 0xc549
    eece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed2:	781b      	ldrb	r3, [r3, #0]
    eed4:	3301      	adds	r3, #1
    eed6:	b2da      	uxtb	r2, r3
    eed8:	f24c 5349 	movw	r3, #50505	; 0xc549
    eedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee0:	701a      	strb	r2, [r3, #0]
    eee2:	f24c 5349 	movw	r3, #50505	; 0xc549
    eee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeea:	781b      	ldrb	r3, [r3, #0]
    eeec:	2bff      	cmp	r3, #255	; 0xff
    eeee:	d105      	bne.n	eefc <send_gps_pos+0x264>
    eef0:	f24c 5349 	movw	r3, #50505	; 0xc549
    eef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef8:	2200      	movs	r2, #0
    eefa:	701a      	strb	r2, [r3, #0]
    eefc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef04:	781b      	ldrb	r3, [r3, #0]
    ef06:	461a      	mov	r2, r3
    ef08:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ef0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef10:	7859      	ldrb	r1, [r3, #1]
    ef12:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ef16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef1a:	5499      	strb	r1, [r3, r2]
    ef1c:	4bd1      	ldr	r3, [pc, #836]	; (f264 <send_gps_pos+0x5cc>)
    ef1e:	781a      	ldrb	r2, [r3, #0]
    ef20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef28:	781b      	ldrb	r3, [r3, #0]
    ef2a:	4413      	add	r3, r2
    ef2c:	b2da      	uxtb	r2, r3
    ef2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef36:	701a      	strb	r2, [r3, #0]
    ef38:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef40:	781a      	ldrb	r2, [r3, #0]
    ef42:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef4a:	781b      	ldrb	r3, [r3, #0]
    ef4c:	4413      	add	r3, r2
    ef4e:	b2da      	uxtb	r2, r3
    ef50:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef58:	701a      	strb	r2, [r3, #0]
    ef5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef62:	781b      	ldrb	r3, [r3, #0]
    ef64:	3301      	adds	r3, #1
    ef66:	b2da      	uxtb	r2, r3
    ef68:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef70:	701a      	strb	r2, [r3, #0]
    ef72:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef7a:	781b      	ldrb	r3, [r3, #0]
    ef7c:	2bff      	cmp	r3, #255	; 0xff
    ef7e:	d105      	bne.n	ef8c <send_gps_pos+0x2f4>
    ef80:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef88:	2200      	movs	r2, #0
    ef8a:	701a      	strb	r2, [r3, #0]
    ef8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef94:	781b      	ldrb	r3, [r3, #0]
    ef96:	461a      	mov	r2, r3
    ef98:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ef9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa0:	7899      	ldrb	r1, [r3, #2]
    efa2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    efa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efaa:	5499      	strb	r1, [r3, r2]
    efac:	4bae      	ldr	r3, [pc, #696]	; (f268 <send_gps_pos+0x5d0>)
    efae:	781a      	ldrb	r2, [r3, #0]
    efb0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb8:	781b      	ldrb	r3, [r3, #0]
    efba:	4413      	add	r3, r2
    efbc:	b2da      	uxtb	r2, r3
    efbe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc6:	701a      	strb	r2, [r3, #0]
    efc8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    efcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd0:	781a      	ldrb	r2, [r3, #0]
    efd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efda:	781b      	ldrb	r3, [r3, #0]
    efdc:	4413      	add	r3, r2
    efde:	b2da      	uxtb	r2, r3
    efe0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    efe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe8:	701a      	strb	r2, [r3, #0]
    efea:	f24c 5349 	movw	r3, #50505	; 0xc549
    efee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff2:	781b      	ldrb	r3, [r3, #0]
    eff4:	3301      	adds	r3, #1
    eff6:	b2da      	uxtb	r2, r3
    eff8:	f24c 5349 	movw	r3, #50505	; 0xc549
    effc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f000:	701a      	strb	r2, [r3, #0]
    f002:	f24c 5349 	movw	r3, #50505	; 0xc549
    f006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f00a:	781b      	ldrb	r3, [r3, #0]
    f00c:	2bff      	cmp	r3, #255	; 0xff
    f00e:	d105      	bne.n	f01c <send_gps_pos+0x384>
    f010:	f24c 5349 	movw	r3, #50505	; 0xc549
    f014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f018:	2200      	movs	r2, #0
    f01a:	701a      	strb	r2, [r3, #0]
    f01c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f024:	781b      	ldrb	r3, [r3, #0]
    f026:	461a      	mov	r2, r3
    f028:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    f02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f030:	78d9      	ldrb	r1, [r3, #3]
    f032:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f03a:	5499      	strb	r1, [r3, r2]
    f03c:	4b8b      	ldr	r3, [pc, #556]	; (f26c <send_gps_pos+0x5d4>)
    f03e:	781a      	ldrb	r2, [r3, #0]
    f040:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f048:	781b      	ldrb	r3, [r3, #0]
    f04a:	4413      	add	r3, r2
    f04c:	b2da      	uxtb	r2, r3
    f04e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f056:	701a      	strb	r2, [r3, #0]
    f058:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f060:	781a      	ldrb	r2, [r3, #0]
    f062:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f06a:	781b      	ldrb	r3, [r3, #0]
    f06c:	4413      	add	r3, r2
    f06e:	b2da      	uxtb	r2, r3
    f070:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f078:	701a      	strb	r2, [r3, #0]
    f07a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f082:	781b      	ldrb	r3, [r3, #0]
    f084:	3301      	adds	r3, #1
    f086:	b2da      	uxtb	r2, r3
    f088:	f24c 5349 	movw	r3, #50505	; 0xc549
    f08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f090:	701a      	strb	r2, [r3, #0]
    f092:	f24c 5349 	movw	r3, #50505	; 0xc549
    f096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f09a:	781b      	ldrb	r3, [r3, #0]
    f09c:	2bff      	cmp	r3, #255	; 0xff
    f09e:	d105      	bne.n	f0ac <send_gps_pos+0x414>
    f0a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a8:	2200      	movs	r2, #0
    f0aa:	701a      	strb	r2, [r3, #0]
    f0ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b4:	781b      	ldrb	r3, [r3, #0]
    f0b6:	461a      	mov	r2, r3
    f0b8:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c0:	7819      	ldrb	r1, [r3, #0]
    f0c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ca:	5499      	strb	r1, [r3, r2]
    f0cc:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d4:	781a      	ldrb	r2, [r3, #0]
    f0d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0de:	781b      	ldrb	r3, [r3, #0]
    f0e0:	4413      	add	r3, r2
    f0e2:	b2da      	uxtb	r2, r3
    f0e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ec:	701a      	strb	r2, [r3, #0]
    f0ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f6:	781a      	ldrb	r2, [r3, #0]
    f0f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f100:	781b      	ldrb	r3, [r3, #0]
    f102:	4413      	add	r3, r2
    f104:	b2da      	uxtb	r2, r3
    f106:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f10e:	701a      	strb	r2, [r3, #0]
    f110:	f24c 5349 	movw	r3, #50505	; 0xc549
    f114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f118:	781b      	ldrb	r3, [r3, #0]
    f11a:	3301      	adds	r3, #1
    f11c:	b2da      	uxtb	r2, r3
    f11e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f126:	701a      	strb	r2, [r3, #0]
    f128:	f24c 5349 	movw	r3, #50505	; 0xc549
    f12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f130:	781b      	ldrb	r3, [r3, #0]
    f132:	2bff      	cmp	r3, #255	; 0xff
    f134:	d105      	bne.n	f142 <send_gps_pos+0x4aa>
    f136:	f24c 5349 	movw	r3, #50505	; 0xc549
    f13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f13e:	2200      	movs	r2, #0
    f140:	701a      	strb	r2, [r3, #0]
    f142:	f24c 5349 	movw	r3, #50505	; 0xc549
    f146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f14a:	781b      	ldrb	r3, [r3, #0]
    f14c:	461a      	mov	r2, r3
    f14e:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f156:	7859      	ldrb	r1, [r3, #1]
    f158:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f160:	5499      	strb	r1, [r3, r2]
    f162:	4b43      	ldr	r3, [pc, #268]	; (f270 <send_gps_pos+0x5d8>)
    f164:	781a      	ldrb	r2, [r3, #0]
    f166:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f16e:	781b      	ldrb	r3, [r3, #0]
    f170:	4413      	add	r3, r2
    f172:	b2da      	uxtb	r2, r3
    f174:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f17c:	701a      	strb	r2, [r3, #0]
    f17e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f186:	781a      	ldrb	r2, [r3, #0]
    f188:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f190:	781b      	ldrb	r3, [r3, #0]
    f192:	4413      	add	r3, r2
    f194:	b2da      	uxtb	r2, r3
    f196:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f19e:	701a      	strb	r2, [r3, #0]
    f1a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a8:	781b      	ldrb	r3, [r3, #0]
    f1aa:	3301      	adds	r3, #1
    f1ac:	b2da      	uxtb	r2, r3
    f1ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b6:	701a      	strb	r2, [r3, #0]
    f1b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c0:	781b      	ldrb	r3, [r3, #0]
    f1c2:	2bff      	cmp	r3, #255	; 0xff
    f1c4:	d105      	bne.n	f1d2 <send_gps_pos+0x53a>
    f1c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ce:	2200      	movs	r2, #0
    f1d0:	701a      	strb	r2, [r3, #0]
    f1d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1da:	781b      	ldrb	r3, [r3, #0]
    f1dc:	461a      	mov	r2, r3
    f1de:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e6:	7899      	ldrb	r1, [r3, #2]
    f1e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f0:	5499      	strb	r1, [r3, r2]
    f1f2:	4b20      	ldr	r3, [pc, #128]	; (f274 <send_gps_pos+0x5dc>)
    f1f4:	781a      	ldrb	r2, [r3, #0]
    f1f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1fe:	781b      	ldrb	r3, [r3, #0]
    f200:	4413      	add	r3, r2
    f202:	b2da      	uxtb	r2, r3
    f204:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20c:	701a      	strb	r2, [r3, #0]
    f20e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f216:	781a      	ldrb	r2, [r3, #0]
    f218:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f220:	781b      	ldrb	r3, [r3, #0]
    f222:	4413      	add	r3, r2
    f224:	b2da      	uxtb	r2, r3
    f226:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f22e:	701a      	strb	r2, [r3, #0]
    f230:	f24c 5349 	movw	r3, #50505	; 0xc549
    f234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f238:	781b      	ldrb	r3, [r3, #0]
    f23a:	3301      	adds	r3, #1
    f23c:	b2da      	uxtb	r2, r3
    f23e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f246:	701a      	strb	r2, [r3, #0]
    f248:	f24c 5349 	movw	r3, #50505	; 0xc549
    f24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f250:	781b      	ldrb	r3, [r3, #0]
    f252:	2bff      	cmp	r3, #255	; 0xff
    f254:	d110      	bne.n	f278 <send_gps_pos+0x5e0>
    f256:	f24c 5349 	movw	r3, #50505	; 0xc549
    f25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f25e:	2200      	movs	r2, #0
    f260:	701a      	strb	r2, [r3, #0]
    f262:	e009      	b.n	f278 <send_gps_pos+0x5e0>
    f264:	2004c6cd 	.word	0x2004c6cd
    f268:	2004c6ce 	.word	0x2004c6ce
    f26c:	2004c6cf 	.word	0x2004c6cf
    f270:	2004c6d1 	.word	0x2004c6d1
    f274:	2004c6d2 	.word	0x2004c6d2
    f278:	f24c 5349 	movw	r3, #50505	; 0xc549
    f27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f280:	781b      	ldrb	r3, [r3, #0]
    f282:	461a      	mov	r2, r3
    f284:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f28c:	78d9      	ldrb	r1, [r3, #3]
    f28e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f296:	5499      	strb	r1, [r3, r2]
    f298:	4bd3      	ldr	r3, [pc, #844]	; (f5e8 <send_gps_pos+0x950>)
    f29a:	781a      	ldrb	r2, [r3, #0]
    f29c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2a4:	781b      	ldrb	r3, [r3, #0]
    f2a6:	4413      	add	r3, r2
    f2a8:	b2da      	uxtb	r2, r3
    f2aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b2:	701a      	strb	r2, [r3, #0]
    f2b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2bc:	781a      	ldrb	r2, [r3, #0]
    f2be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c6:	781b      	ldrb	r3, [r3, #0]
    f2c8:	4413      	add	r3, r2
    f2ca:	b2da      	uxtb	r2, r3
    f2cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d4:	701a      	strb	r2, [r3, #0]
    f2d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2de:	781b      	ldrb	r3, [r3, #0]
    f2e0:	3301      	adds	r3, #1
    f2e2:	b2da      	uxtb	r2, r3
    f2e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ec:	701a      	strb	r2, [r3, #0]
    f2ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f6:	781b      	ldrb	r3, [r3, #0]
    f2f8:	2bff      	cmp	r3, #255	; 0xff
    f2fa:	d105      	bne.n	f308 <send_gps_pos+0x670>
    f2fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f304:	2200      	movs	r2, #0
    f306:	701a      	strb	r2, [r3, #0]
    f308:	f24c 5349 	movw	r3, #50505	; 0xc549
    f30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f310:	781b      	ldrb	r3, [r3, #0]
    f312:	461a      	mov	r2, r3
    f314:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f31c:	7819      	ldrb	r1, [r3, #0]
    f31e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f326:	5499      	strb	r1, [r3, r2]
    f328:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f330:	781a      	ldrb	r2, [r3, #0]
    f332:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f33a:	781b      	ldrb	r3, [r3, #0]
    f33c:	4413      	add	r3, r2
    f33e:	b2da      	uxtb	r2, r3
    f340:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f348:	701a      	strb	r2, [r3, #0]
    f34a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f352:	781a      	ldrb	r2, [r3, #0]
    f354:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35c:	781b      	ldrb	r3, [r3, #0]
    f35e:	4413      	add	r3, r2
    f360:	b2da      	uxtb	r2, r3
    f362:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36a:	701a      	strb	r2, [r3, #0]
    f36c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f374:	781b      	ldrb	r3, [r3, #0]
    f376:	3301      	adds	r3, #1
    f378:	b2da      	uxtb	r2, r3
    f37a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f382:	701a      	strb	r2, [r3, #0]
    f384:	f24c 5349 	movw	r3, #50505	; 0xc549
    f388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38c:	781b      	ldrb	r3, [r3, #0]
    f38e:	2bff      	cmp	r3, #255	; 0xff
    f390:	d105      	bne.n	f39e <send_gps_pos+0x706>
    f392:	f24c 5349 	movw	r3, #50505	; 0xc549
    f396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f39a:	2200      	movs	r2, #0
    f39c:	701a      	strb	r2, [r3, #0]
    f39e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a6:	781b      	ldrb	r3, [r3, #0]
    f3a8:	461a      	mov	r2, r3
    f3aa:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b2:	7859      	ldrb	r1, [r3, #1]
    f3b4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3bc:	5499      	strb	r1, [r3, r2]
    f3be:	4b8b      	ldr	r3, [pc, #556]	; (f5ec <send_gps_pos+0x954>)
    f3c0:	781a      	ldrb	r2, [r3, #0]
    f3c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ca:	781b      	ldrb	r3, [r3, #0]
    f3cc:	4413      	add	r3, r2
    f3ce:	b2da      	uxtb	r2, r3
    f3d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d8:	701a      	strb	r2, [r3, #0]
    f3da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e2:	781a      	ldrb	r2, [r3, #0]
    f3e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ec:	781b      	ldrb	r3, [r3, #0]
    f3ee:	4413      	add	r3, r2
    f3f0:	b2da      	uxtb	r2, r3
    f3f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3fa:	701a      	strb	r2, [r3, #0]
    f3fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f404:	781b      	ldrb	r3, [r3, #0]
    f406:	3301      	adds	r3, #1
    f408:	b2da      	uxtb	r2, r3
    f40a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f412:	701a      	strb	r2, [r3, #0]
    f414:	f24c 5349 	movw	r3, #50505	; 0xc549
    f418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41c:	781b      	ldrb	r3, [r3, #0]
    f41e:	2bff      	cmp	r3, #255	; 0xff
    f420:	d105      	bne.n	f42e <send_gps_pos+0x796>
    f422:	f24c 5349 	movw	r3, #50505	; 0xc549
    f426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42a:	2200      	movs	r2, #0
    f42c:	701a      	strb	r2, [r3, #0]
    f42e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f436:	781b      	ldrb	r3, [r3, #0]
    f438:	461a      	mov	r2, r3
    f43a:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f442:	7899      	ldrb	r1, [r3, #2]
    f444:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44c:	5499      	strb	r1, [r3, r2]
    f44e:	4b68      	ldr	r3, [pc, #416]	; (f5f0 <send_gps_pos+0x958>)
    f450:	781a      	ldrb	r2, [r3, #0]
    f452:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45a:	781b      	ldrb	r3, [r3, #0]
    f45c:	4413      	add	r3, r2
    f45e:	b2da      	uxtb	r2, r3
    f460:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f468:	701a      	strb	r2, [r3, #0]
    f46a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f472:	781a      	ldrb	r2, [r3, #0]
    f474:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47c:	781b      	ldrb	r3, [r3, #0]
    f47e:	4413      	add	r3, r2
    f480:	b2da      	uxtb	r2, r3
    f482:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48a:	701a      	strb	r2, [r3, #0]
    f48c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f494:	781b      	ldrb	r3, [r3, #0]
    f496:	3301      	adds	r3, #1
    f498:	b2da      	uxtb	r2, r3
    f49a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a2:	701a      	strb	r2, [r3, #0]
    f4a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ac:	781b      	ldrb	r3, [r3, #0]
    f4ae:	2bff      	cmp	r3, #255	; 0xff
    f4b0:	d105      	bne.n	f4be <send_gps_pos+0x826>
    f4b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ba:	2200      	movs	r2, #0
    f4bc:	701a      	strb	r2, [r3, #0]
    f4be:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c6:	781b      	ldrb	r3, [r3, #0]
    f4c8:	461a      	mov	r2, r3
    f4ca:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d2:	78d9      	ldrb	r1, [r3, #3]
    f4d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4dc:	5499      	strb	r1, [r3, r2]
    f4de:	4b45      	ldr	r3, [pc, #276]	; (f5f4 <send_gps_pos+0x95c>)
    f4e0:	781a      	ldrb	r2, [r3, #0]
    f4e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ea:	781b      	ldrb	r3, [r3, #0]
    f4ec:	4413      	add	r3, r2
    f4ee:	b2da      	uxtb	r2, r3
    f4f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f8:	701a      	strb	r2, [r3, #0]
    f4fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f502:	781a      	ldrb	r2, [r3, #0]
    f504:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50c:	781b      	ldrb	r3, [r3, #0]
    f50e:	4413      	add	r3, r2
    f510:	b2da      	uxtb	r2, r3
    f512:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f51a:	701a      	strb	r2, [r3, #0]
    f51c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f524:	781b      	ldrb	r3, [r3, #0]
    f526:	3301      	adds	r3, #1
    f528:	b2da      	uxtb	r2, r3
    f52a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f532:	701a      	strb	r2, [r3, #0]
    f534:	f24c 5349 	movw	r3, #50505	; 0xc549
    f538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53c:	781b      	ldrb	r3, [r3, #0]
    f53e:	2bff      	cmp	r3, #255	; 0xff
    f540:	d105      	bne.n	f54e <send_gps_pos+0x8b6>
    f542:	f24c 5349 	movw	r3, #50505	; 0xc549
    f546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54a:	2200      	movs	r2, #0
    f54c:	701a      	strb	r2, [r3, #0]
    f54e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f556:	781b      	ldrb	r3, [r3, #0]
    f558:	461a      	mov	r2, r3
    f55a:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f562:	7819      	ldrb	r1, [r3, #0]
    f564:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f56c:	5499      	strb	r1, [r3, r2]
    f56e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f576:	781a      	ldrb	r2, [r3, #0]
    f578:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f580:	781b      	ldrb	r3, [r3, #0]
    f582:	4413      	add	r3, r2
    f584:	b2da      	uxtb	r2, r3
    f586:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f58e:	701a      	strb	r2, [r3, #0]
    f590:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f598:	781a      	ldrb	r2, [r3, #0]
    f59a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a2:	781b      	ldrb	r3, [r3, #0]
    f5a4:	4413      	add	r3, r2
    f5a6:	b2da      	uxtb	r2, r3
    f5a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b0:	701a      	strb	r2, [r3, #0]
    f5b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ba:	781b      	ldrb	r3, [r3, #0]
    f5bc:	3301      	adds	r3, #1
    f5be:	b2da      	uxtb	r2, r3
    f5c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c8:	701a      	strb	r2, [r3, #0]
    f5ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d2:	781b      	ldrb	r3, [r3, #0]
    f5d4:	2bff      	cmp	r3, #255	; 0xff
    f5d6:	d10f      	bne.n	f5f8 <send_gps_pos+0x960>
    f5d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e0:	2200      	movs	r2, #0
    f5e2:	701a      	strb	r2, [r3, #0]
    f5e4:	e008      	b.n	f5f8 <send_gps_pos+0x960>
    f5e6:	bf00      	nop
    f5e8:	2004c6d3 	.word	0x2004c6d3
    f5ec:	2004c6c9 	.word	0x2004c6c9
    f5f0:	2004c6ca 	.word	0x2004c6ca
    f5f4:	2004c6cb 	.word	0x2004c6cb
    f5f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f600:	781b      	ldrb	r3, [r3, #0]
    f602:	461a      	mov	r2, r3
    f604:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f60c:	7859      	ldrb	r1, [r3, #1]
    f60e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f616:	5499      	strb	r1, [r3, r2]
    f618:	4bd1      	ldr	r3, [pc, #836]	; (f960 <send_gps_pos+0xcc8>)
    f61a:	781a      	ldrb	r2, [r3, #0]
    f61c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f624:	781b      	ldrb	r3, [r3, #0]
    f626:	4413      	add	r3, r2
    f628:	b2da      	uxtb	r2, r3
    f62a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f632:	701a      	strb	r2, [r3, #0]
    f634:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f63c:	781a      	ldrb	r2, [r3, #0]
    f63e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f646:	781b      	ldrb	r3, [r3, #0]
    f648:	4413      	add	r3, r2
    f64a:	b2da      	uxtb	r2, r3
    f64c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f654:	701a      	strb	r2, [r3, #0]
    f656:	f24c 5349 	movw	r3, #50505	; 0xc549
    f65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65e:	781b      	ldrb	r3, [r3, #0]
    f660:	3301      	adds	r3, #1
    f662:	b2da      	uxtb	r2, r3
    f664:	f24c 5349 	movw	r3, #50505	; 0xc549
    f668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f66c:	701a      	strb	r2, [r3, #0]
    f66e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f676:	781b      	ldrb	r3, [r3, #0]
    f678:	2bff      	cmp	r3, #255	; 0xff
    f67a:	d105      	bne.n	f688 <send_gps_pos+0x9f0>
    f67c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f684:	2200      	movs	r2, #0
    f686:	701a      	strb	r2, [r3, #0]
    f688:	f24c 5349 	movw	r3, #50505	; 0xc549
    f68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f690:	781b      	ldrb	r3, [r3, #0]
    f692:	461a      	mov	r2, r3
    f694:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f69c:	7899      	ldrb	r1, [r3, #2]
    f69e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a6:	5499      	strb	r1, [r3, r2]
    f6a8:	4bae      	ldr	r3, [pc, #696]	; (f964 <send_gps_pos+0xccc>)
    f6aa:	781a      	ldrb	r2, [r3, #0]
    f6ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b4:	781b      	ldrb	r3, [r3, #0]
    f6b6:	4413      	add	r3, r2
    f6b8:	b2da      	uxtb	r2, r3
    f6ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c2:	701a      	strb	r2, [r3, #0]
    f6c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6cc:	781a      	ldrb	r2, [r3, #0]
    f6ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d6:	781b      	ldrb	r3, [r3, #0]
    f6d8:	4413      	add	r3, r2
    f6da:	b2da      	uxtb	r2, r3
    f6dc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e4:	701a      	strb	r2, [r3, #0]
    f6e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ee:	781b      	ldrb	r3, [r3, #0]
    f6f0:	3301      	adds	r3, #1
    f6f2:	b2da      	uxtb	r2, r3
    f6f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6fc:	701a      	strb	r2, [r3, #0]
    f6fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    f702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f706:	781b      	ldrb	r3, [r3, #0]
    f708:	2bff      	cmp	r3, #255	; 0xff
    f70a:	d105      	bne.n	f718 <send_gps_pos+0xa80>
    f70c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f714:	2200      	movs	r2, #0
    f716:	701a      	strb	r2, [r3, #0]
    f718:	f24c 5349 	movw	r3, #50505	; 0xc549
    f71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f720:	781b      	ldrb	r3, [r3, #0]
    f722:	461a      	mov	r2, r3
    f724:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f72c:	78d9      	ldrb	r1, [r3, #3]
    f72e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f736:	5499      	strb	r1, [r3, r2]
    f738:	4b8b      	ldr	r3, [pc, #556]	; (f968 <send_gps_pos+0xcd0>)
    f73a:	781a      	ldrb	r2, [r3, #0]
    f73c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f744:	781b      	ldrb	r3, [r3, #0]
    f746:	4413      	add	r3, r2
    f748:	b2da      	uxtb	r2, r3
    f74a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f752:	701a      	strb	r2, [r3, #0]
    f754:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f75c:	781a      	ldrb	r2, [r3, #0]
    f75e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f766:	781b      	ldrb	r3, [r3, #0]
    f768:	4413      	add	r3, r2
    f76a:	b2da      	uxtb	r2, r3
    f76c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f774:	701a      	strb	r2, [r3, #0]
    f776:	f24c 5349 	movw	r3, #50505	; 0xc549
    f77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77e:	781b      	ldrb	r3, [r3, #0]
    f780:	3301      	adds	r3, #1
    f782:	b2da      	uxtb	r2, r3
    f784:	f24c 5349 	movw	r3, #50505	; 0xc549
    f788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f78c:	701a      	strb	r2, [r3, #0]
    f78e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f796:	781b      	ldrb	r3, [r3, #0]
    f798:	2bff      	cmp	r3, #255	; 0xff
    f79a:	d105      	bne.n	f7a8 <send_gps_pos+0xb10>
    f79c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a4:	2200      	movs	r2, #0
    f7a6:	701a      	strb	r2, [r3, #0]
    f7a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b0:	781b      	ldrb	r3, [r3, #0]
    f7b2:	461a      	mov	r2, r3
    f7b4:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7bc:	7819      	ldrb	r1, [r3, #0]
    f7be:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c6:	5499      	strb	r1, [r3, r2]
    f7c8:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d0:	781a      	ldrb	r2, [r3, #0]
    f7d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7da:	781b      	ldrb	r3, [r3, #0]
    f7dc:	4413      	add	r3, r2
    f7de:	b2da      	uxtb	r2, r3
    f7e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e8:	701a      	strb	r2, [r3, #0]
    f7ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f2:	781a      	ldrb	r2, [r3, #0]
    f7f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fc:	781b      	ldrb	r3, [r3, #0]
    f7fe:	4413      	add	r3, r2
    f800:	b2da      	uxtb	r2, r3
    f802:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f80a:	701a      	strb	r2, [r3, #0]
    f80c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f814:	781b      	ldrb	r3, [r3, #0]
    f816:	3301      	adds	r3, #1
    f818:	b2da      	uxtb	r2, r3
    f81a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f822:	701a      	strb	r2, [r3, #0]
    f824:	f24c 5349 	movw	r3, #50505	; 0xc549
    f828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82c:	781b      	ldrb	r3, [r3, #0]
    f82e:	2bff      	cmp	r3, #255	; 0xff
    f830:	d105      	bne.n	f83e <send_gps_pos+0xba6>
    f832:	f24c 5349 	movw	r3, #50505	; 0xc549
    f836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83a:	2200      	movs	r2, #0
    f83c:	701a      	strb	r2, [r3, #0]
    f83e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f846:	781b      	ldrb	r3, [r3, #0]
    f848:	461a      	mov	r2, r3
    f84a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f852:	7859      	ldrb	r1, [r3, #1]
    f854:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f85c:	5499      	strb	r1, [r3, r2]
    f85e:	4b43      	ldr	r3, [pc, #268]	; (f96c <send_gps_pos+0xcd4>)
    f860:	781a      	ldrb	r2, [r3, #0]
    f862:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86a:	781b      	ldrb	r3, [r3, #0]
    f86c:	4413      	add	r3, r2
    f86e:	b2da      	uxtb	r2, r3
    f870:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f878:	701a      	strb	r2, [r3, #0]
    f87a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f882:	781a      	ldrb	r2, [r3, #0]
    f884:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f88c:	781b      	ldrb	r3, [r3, #0]
    f88e:	4413      	add	r3, r2
    f890:	b2da      	uxtb	r2, r3
    f892:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f89a:	701a      	strb	r2, [r3, #0]
    f89c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a4:	781b      	ldrb	r3, [r3, #0]
    f8a6:	3301      	adds	r3, #1
    f8a8:	b2da      	uxtb	r2, r3
    f8aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b2:	701a      	strb	r2, [r3, #0]
    f8b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8bc:	781b      	ldrb	r3, [r3, #0]
    f8be:	2bff      	cmp	r3, #255	; 0xff
    f8c0:	d105      	bne.n	f8ce <send_gps_pos+0xc36>
    f8c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ca:	2200      	movs	r2, #0
    f8cc:	701a      	strb	r2, [r3, #0]
    f8ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d6:	781b      	ldrb	r3, [r3, #0]
    f8d8:	461a      	mov	r2, r3
    f8da:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e2:	7899      	ldrb	r1, [r3, #2]
    f8e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ec:	5499      	strb	r1, [r3, r2]
    f8ee:	4b20      	ldr	r3, [pc, #128]	; (f970 <send_gps_pos+0xcd8>)
    f8f0:	781a      	ldrb	r2, [r3, #0]
    f8f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8fa:	781b      	ldrb	r3, [r3, #0]
    f8fc:	4413      	add	r3, r2
    f8fe:	b2da      	uxtb	r2, r3
    f900:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f908:	701a      	strb	r2, [r3, #0]
    f90a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f912:	781a      	ldrb	r2, [r3, #0]
    f914:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91c:	781b      	ldrb	r3, [r3, #0]
    f91e:	4413      	add	r3, r2
    f920:	b2da      	uxtb	r2, r3
    f922:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f92a:	701a      	strb	r2, [r3, #0]
    f92c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f934:	781b      	ldrb	r3, [r3, #0]
    f936:	3301      	adds	r3, #1
    f938:	b2da      	uxtb	r2, r3
    f93a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f942:	701a      	strb	r2, [r3, #0]
    f944:	f24c 5349 	movw	r3, #50505	; 0xc549
    f948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f94c:	781b      	ldrb	r3, [r3, #0]
    f94e:	2bff      	cmp	r3, #255	; 0xff
    f950:	d110      	bne.n	f974 <send_gps_pos+0xcdc>
    f952:	f24c 5349 	movw	r3, #50505	; 0xc549
    f956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f95a:	2200      	movs	r2, #0
    f95c:	701a      	strb	r2, [r3, #0]
    f95e:	e009      	b.n	f974 <send_gps_pos+0xcdc>
    f960:	2004c6bd 	.word	0x2004c6bd
    f964:	2004c6be 	.word	0x2004c6be
    f968:	2004c6bf 	.word	0x2004c6bf
    f96c:	2004c6c1 	.word	0x2004c6c1
    f970:	2004c6c2 	.word	0x2004c6c2
    f974:	f24c 5349 	movw	r3, #50505	; 0xc549
    f978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f97c:	781b      	ldrb	r3, [r3, #0]
    f97e:	461a      	mov	r2, r3
    f980:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f988:	78d9      	ldrb	r1, [r3, #3]
    f98a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f992:	5499      	strb	r1, [r3, r2]
    f994:	4bd3      	ldr	r3, [pc, #844]	; (fce4 <send_gps_pos+0x104c>)
    f996:	781a      	ldrb	r2, [r3, #0]
    f998:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a0:	781b      	ldrb	r3, [r3, #0]
    f9a2:	4413      	add	r3, r2
    f9a4:	b2da      	uxtb	r2, r3
    f9a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ae:	701a      	strb	r2, [r3, #0]
    f9b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b8:	781a      	ldrb	r2, [r3, #0]
    f9ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c2:	781b      	ldrb	r3, [r3, #0]
    f9c4:	4413      	add	r3, r2
    f9c6:	b2da      	uxtb	r2, r3
    f9c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d0:	701a      	strb	r2, [r3, #0]
    f9d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9da:	781b      	ldrb	r3, [r3, #0]
    f9dc:	3301      	adds	r3, #1
    f9de:	b2da      	uxtb	r2, r3
    f9e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e8:	701a      	strb	r2, [r3, #0]
    f9ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f2:	781b      	ldrb	r3, [r3, #0]
    f9f4:	2bff      	cmp	r3, #255	; 0xff
    f9f6:	d105      	bne.n	fa04 <send_gps_pos+0xd6c>
    f9f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa00:	2200      	movs	r2, #0
    fa02:	701a      	strb	r2, [r3, #0]
    fa04:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa0c:	781b      	ldrb	r3, [r3, #0]
    fa0e:	461a      	mov	r2, r3
    fa10:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa18:	7819      	ldrb	r1, [r3, #0]
    fa1a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fa1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa22:	5499      	strb	r1, [r3, r2]
    fa24:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa2c:	781a      	ldrb	r2, [r3, #0]
    fa2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa36:	781b      	ldrb	r3, [r3, #0]
    fa38:	4413      	add	r3, r2
    fa3a:	b2da      	uxtb	r2, r3
    fa3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa44:	701a      	strb	r2, [r3, #0]
    fa46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4e:	781a      	ldrb	r2, [r3, #0]
    fa50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa58:	781b      	ldrb	r3, [r3, #0]
    fa5a:	4413      	add	r3, r2
    fa5c:	b2da      	uxtb	r2, r3
    fa5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa66:	701a      	strb	r2, [r3, #0]
    fa68:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa70:	781b      	ldrb	r3, [r3, #0]
    fa72:	3301      	adds	r3, #1
    fa74:	b2da      	uxtb	r2, r3
    fa76:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa7e:	701a      	strb	r2, [r3, #0]
    fa80:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa88:	781b      	ldrb	r3, [r3, #0]
    fa8a:	2bff      	cmp	r3, #255	; 0xff
    fa8c:	d105      	bne.n	fa9a <send_gps_pos+0xe02>
    fa8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa96:	2200      	movs	r2, #0
    fa98:	701a      	strb	r2, [r3, #0]
    fa9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa2:	781b      	ldrb	r3, [r3, #0]
    faa4:	461a      	mov	r2, r3
    faa6:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    faaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faae:	7859      	ldrb	r1, [r3, #1]
    fab0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab8:	5499      	strb	r1, [r3, r2]
    faba:	4b8b      	ldr	r3, [pc, #556]	; (fce8 <send_gps_pos+0x1050>)
    fabc:	781a      	ldrb	r2, [r3, #0]
    fabe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac6:	781b      	ldrb	r3, [r3, #0]
    fac8:	4413      	add	r3, r2
    faca:	b2da      	uxtb	r2, r3
    facc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad4:	701a      	strb	r2, [r3, #0]
    fad6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fade:	781a      	ldrb	r2, [r3, #0]
    fae0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae8:	781b      	ldrb	r3, [r3, #0]
    faea:	4413      	add	r3, r2
    faec:	b2da      	uxtb	r2, r3
    faee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    faf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf6:	701a      	strb	r2, [r3, #0]
    faf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb00:	781b      	ldrb	r3, [r3, #0]
    fb02:	3301      	adds	r3, #1
    fb04:	b2da      	uxtb	r2, r3
    fb06:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb0e:	701a      	strb	r2, [r3, #0]
    fb10:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb18:	781b      	ldrb	r3, [r3, #0]
    fb1a:	2bff      	cmp	r3, #255	; 0xff
    fb1c:	d105      	bne.n	fb2a <send_gps_pos+0xe92>
    fb1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb26:	2200      	movs	r2, #0
    fb28:	701a      	strb	r2, [r3, #0]
    fb2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb32:	781b      	ldrb	r3, [r3, #0]
    fb34:	461a      	mov	r2, r3
    fb36:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb3e:	7899      	ldrb	r1, [r3, #2]
    fb40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb48:	5499      	strb	r1, [r3, r2]
    fb4a:	4b68      	ldr	r3, [pc, #416]	; (fcec <send_gps_pos+0x1054>)
    fb4c:	781a      	ldrb	r2, [r3, #0]
    fb4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb56:	781b      	ldrb	r3, [r3, #0]
    fb58:	4413      	add	r3, r2
    fb5a:	b2da      	uxtb	r2, r3
    fb5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb64:	701a      	strb	r2, [r3, #0]
    fb66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb6e:	781a      	ldrb	r2, [r3, #0]
    fb70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb78:	781b      	ldrb	r3, [r3, #0]
    fb7a:	4413      	add	r3, r2
    fb7c:	b2da      	uxtb	r2, r3
    fb7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb86:	701a      	strb	r2, [r3, #0]
    fb88:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb90:	781b      	ldrb	r3, [r3, #0]
    fb92:	3301      	adds	r3, #1
    fb94:	b2da      	uxtb	r2, r3
    fb96:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb9e:	701a      	strb	r2, [r3, #0]
    fba0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba8:	781b      	ldrb	r3, [r3, #0]
    fbaa:	2bff      	cmp	r3, #255	; 0xff
    fbac:	d105      	bne.n	fbba <send_gps_pos+0xf22>
    fbae:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb6:	2200      	movs	r2, #0
    fbb8:	701a      	strb	r2, [r3, #0]
    fbba:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc2:	781b      	ldrb	r3, [r3, #0]
    fbc4:	461a      	mov	r2, r3
    fbc6:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbce:	78d9      	ldrb	r1, [r3, #3]
    fbd0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd8:	5499      	strb	r1, [r3, r2]
    fbda:	4b45      	ldr	r3, [pc, #276]	; (fcf0 <send_gps_pos+0x1058>)
    fbdc:	781a      	ldrb	r2, [r3, #0]
    fbde:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe6:	781b      	ldrb	r3, [r3, #0]
    fbe8:	4413      	add	r3, r2
    fbea:	b2da      	uxtb	r2, r3
    fbec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf4:	701a      	strb	r2, [r3, #0]
    fbf6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbfe:	781a      	ldrb	r2, [r3, #0]
    fc00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc08:	781b      	ldrb	r3, [r3, #0]
    fc0a:	4413      	add	r3, r2
    fc0c:	b2da      	uxtb	r2, r3
    fc0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc16:	701a      	strb	r2, [r3, #0]
    fc18:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc20:	781b      	ldrb	r3, [r3, #0]
    fc22:	3301      	adds	r3, #1
    fc24:	b2da      	uxtb	r2, r3
    fc26:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc2e:	701a      	strb	r2, [r3, #0]
    fc30:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc38:	781b      	ldrb	r3, [r3, #0]
    fc3a:	2bff      	cmp	r3, #255	; 0xff
    fc3c:	d105      	bne.n	fc4a <send_gps_pos+0xfb2>
    fc3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc46:	2200      	movs	r2, #0
    fc48:	701a      	strb	r2, [r3, #0]
    fc4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc52:	781b      	ldrb	r3, [r3, #0]
    fc54:	461a      	mov	r2, r3
    fc56:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc5e:	7819      	ldrb	r1, [r3, #0]
    fc60:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc68:	5499      	strb	r1, [r3, r2]
    fc6a:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fc6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc72:	781a      	ldrb	r2, [r3, #0]
    fc74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc7c:	781b      	ldrb	r3, [r3, #0]
    fc7e:	4413      	add	r3, r2
    fc80:	b2da      	uxtb	r2, r3
    fc82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc8a:	701a      	strb	r2, [r3, #0]
    fc8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc94:	781a      	ldrb	r2, [r3, #0]
    fc96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9e:	781b      	ldrb	r3, [r3, #0]
    fca0:	4413      	add	r3, r2
    fca2:	b2da      	uxtb	r2, r3
    fca4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcac:	701a      	strb	r2, [r3, #0]
    fcae:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb6:	781b      	ldrb	r3, [r3, #0]
    fcb8:	3301      	adds	r3, #1
    fcba:	b2da      	uxtb	r2, r3
    fcbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc4:	701a      	strb	r2, [r3, #0]
    fcc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcce:	781b      	ldrb	r3, [r3, #0]
    fcd0:	2bff      	cmp	r3, #255	; 0xff
    fcd2:	d10f      	bne.n	fcf4 <send_gps_pos+0x105c>
    fcd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcdc:	2200      	movs	r2, #0
    fcde:	701a      	strb	r2, [r3, #0]
    fce0:	e008      	b.n	fcf4 <send_gps_pos+0x105c>
    fce2:	bf00      	nop
    fce4:	2004c6c3 	.word	0x2004c6c3
    fce8:	2004c6c5 	.word	0x2004c6c5
    fcec:	2004c6c6 	.word	0x2004c6c6
    fcf0:	2004c6c7 	.word	0x2004c6c7
    fcf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcfc:	781b      	ldrb	r3, [r3, #0]
    fcfe:	461a      	mov	r2, r3
    fd00:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd08:	7859      	ldrb	r1, [r3, #1]
    fd0a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd12:	5499      	strb	r1, [r3, r2]
    fd14:	4bc0      	ldr	r3, [pc, #768]	; (10018 <send_gps_pos+0x1380>)
    fd16:	781a      	ldrb	r2, [r3, #0]
    fd18:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd20:	781b      	ldrb	r3, [r3, #0]
    fd22:	4413      	add	r3, r2
    fd24:	b2da      	uxtb	r2, r3
    fd26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd2e:	701a      	strb	r2, [r3, #0]
    fd30:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd38:	781a      	ldrb	r2, [r3, #0]
    fd3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd42:	781b      	ldrb	r3, [r3, #0]
    fd44:	4413      	add	r3, r2
    fd46:	b2da      	uxtb	r2, r3
    fd48:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd50:	701a      	strb	r2, [r3, #0]
    fd52:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd5a:	781b      	ldrb	r3, [r3, #0]
    fd5c:	3301      	adds	r3, #1
    fd5e:	b2da      	uxtb	r2, r3
    fd60:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd68:	701a      	strb	r2, [r3, #0]
    fd6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd72:	781b      	ldrb	r3, [r3, #0]
    fd74:	2bff      	cmp	r3, #255	; 0xff
    fd76:	d105      	bne.n	fd84 <send_gps_pos+0x10ec>
    fd78:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd80:	2200      	movs	r2, #0
    fd82:	701a      	strb	r2, [r3, #0]
    fd84:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd8c:	781b      	ldrb	r3, [r3, #0]
    fd8e:	461a      	mov	r2, r3
    fd90:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd98:	7899      	ldrb	r1, [r3, #2]
    fd9a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fd9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda2:	5499      	strb	r1, [r3, r2]
    fda4:	4b9d      	ldr	r3, [pc, #628]	; (1001c <send_gps_pos+0x1384>)
    fda6:	781a      	ldrb	r2, [r3, #0]
    fda8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb0:	781b      	ldrb	r3, [r3, #0]
    fdb2:	4413      	add	r3, r2
    fdb4:	b2da      	uxtb	r2, r3
    fdb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fdba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdbe:	701a      	strb	r2, [r3, #0]
    fdc0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc8:	781a      	ldrb	r2, [r3, #0]
    fdca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fdce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd2:	781b      	ldrb	r3, [r3, #0]
    fdd4:	4413      	add	r3, r2
    fdd6:	b2da      	uxtb	r2, r3
    fdd8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde0:	701a      	strb	r2, [r3, #0]
    fde2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fde6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdea:	781b      	ldrb	r3, [r3, #0]
    fdec:	3301      	adds	r3, #1
    fdee:	b2da      	uxtb	r2, r3
    fdf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf8:	701a      	strb	r2, [r3, #0]
    fdfa:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe02:	781b      	ldrb	r3, [r3, #0]
    fe04:	2bff      	cmp	r3, #255	; 0xff
    fe06:	d105      	bne.n	fe14 <send_gps_pos+0x117c>
    fe08:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe10:	2200      	movs	r2, #0
    fe12:	701a      	strb	r2, [r3, #0]
    fe14:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe1c:	781b      	ldrb	r3, [r3, #0]
    fe1e:	461a      	mov	r2, r3
    fe20:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fe24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe28:	78d9      	ldrb	r1, [r3, #3]
    fe2a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fe2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe32:	5499      	strb	r1, [r3, r2]
    fe34:	4b7a      	ldr	r3, [pc, #488]	; (10020 <send_gps_pos+0x1388>)
    fe36:	781a      	ldrb	r2, [r3, #0]
    fe38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe40:	781b      	ldrb	r3, [r3, #0]
    fe42:	4413      	add	r3, r2
    fe44:	b2da      	uxtb	r2, r3
    fe46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe4e:	701a      	strb	r2, [r3, #0]
    fe50:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe58:	781a      	ldrb	r2, [r3, #0]
    fe5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe62:	781b      	ldrb	r3, [r3, #0]
    fe64:	4413      	add	r3, r2
    fe66:	b2da      	uxtb	r2, r3
    fe68:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe70:	701a      	strb	r2, [r3, #0]
    fe72:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe7a:	781b      	ldrb	r3, [r3, #0]
    fe7c:	3301      	adds	r3, #1
    fe7e:	b2da      	uxtb	r2, r3
    fe80:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe88:	701a      	strb	r2, [r3, #0]
    fe8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe92:	781b      	ldrb	r3, [r3, #0]
    fe94:	2bff      	cmp	r3, #255	; 0xff
    fe96:	d105      	bne.n	fea4 <send_gps_pos+0x120c>
    fe98:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea0:	2200      	movs	r2, #0
    fea2:	701a      	strb	r2, [r3, #0]
    fea4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feac:	781b      	ldrb	r3, [r3, #0]
    feae:	461a      	mov	r2, r3
    feb0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    feb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb8:	7819      	ldrb	r1, [r3, #0]
    feba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    febe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fec2:	5499      	strb	r1, [r3, r2]
    fec4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fecc:	781b      	ldrb	r3, [r3, #0]
    fece:	3301      	adds	r3, #1
    fed0:	b2da      	uxtb	r2, r3
    fed2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feda:	701a      	strb	r2, [r3, #0]
    fedc:	f24c 5349 	movw	r3, #50505	; 0xc549
    fee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee4:	781b      	ldrb	r3, [r3, #0]
    fee6:	2bff      	cmp	r3, #255	; 0xff
    fee8:	d105      	bne.n	fef6 <send_gps_pos+0x125e>
    feea:	f24c 5349 	movw	r3, #50505	; 0xc549
    feee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef2:	2200      	movs	r2, #0
    fef4:	701a      	strb	r2, [r3, #0]
    fef6:	f24c 5349 	movw	r3, #50505	; 0xc549
    fefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fefe:	781b      	ldrb	r3, [r3, #0]
    ff00:	461a      	mov	r2, r3
    ff02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ff06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff0a:	7819      	ldrb	r1, [r3, #0]
    ff0c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ff10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff14:	5499      	strb	r1, [r3, r2]
    ff16:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff1e:	781b      	ldrb	r3, [r3, #0]
    ff20:	3301      	adds	r3, #1
    ff22:	b2da      	uxtb	r2, r3
    ff24:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff2c:	701a      	strb	r2, [r3, #0]
    ff2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff36:	781b      	ldrb	r3, [r3, #0]
    ff38:	2bff      	cmp	r3, #255	; 0xff
    ff3a:	d105      	bne.n	ff48 <send_gps_pos+0x12b0>
    ff3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff44:	2200      	movs	r2, #0
    ff46:	701a      	strb	r2, [r3, #0]
    ff48:	f242 0339 	movw	r3, #8249	; 0x2039
    ff4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff50:	781b      	ldrb	r3, [r3, #0]
    ff52:	b2db      	uxtb	r3, r3
    ff54:	f003 0310 	and.w	r3, r3, #16
    ff58:	2b00      	cmp	r3, #0
    ff5a:	d15a      	bne.n	10012 <send_gps_pos+0x137a>
    ff5c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff64:	781b      	ldrb	r3, [r3, #0]
    ff66:	b2db      	uxtb	r3, r3
    ff68:	461a      	mov	r2, r3
    ff6a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ff6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff72:	5c9a      	ldrb	r2, [r3, r2]
    ff74:	f24c 634b 	movw	r3, #50763	; 0xc64b
    ff78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff7c:	701a      	strb	r2, [r3, #0]
    ff7e:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ff82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff86:	2200      	movs	r2, #0
    ff88:	701a      	strb	r2, [r3, #0]
    ff8a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff92:	781b      	ldrb	r3, [r3, #0]
    ff94:	b2db      	uxtb	r3, r3
    ff96:	3301      	adds	r3, #1
    ff98:	b2da      	uxtb	r2, r3
    ff9a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffa2:	701a      	strb	r2, [r3, #0]
    ffa4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffac:	781b      	ldrb	r3, [r3, #0]
    ffae:	b2db      	uxtb	r3, r3
    ffb0:	2bff      	cmp	r3, #255	; 0xff
    ffb2:	d105      	bne.n	ffc0 <send_gps_pos+0x1328>
    ffb4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffbc:	2200      	movs	r2, #0
    ffbe:	701a      	strb	r2, [r3, #0]
    ffc0:	f242 0338 	movw	r3, #8248	; 0x2038
    ffc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc8:	f242 0238 	movw	r2, #8248	; 0x2038
    ffcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ffd0:	7812      	ldrb	r2, [r2, #0]
    ffd2:	b2d2      	uxtb	r2, r2
    ffd4:	f042 0201 	orr.w	r2, r2, #1
    ffd8:	b2d2      	uxtb	r2, r2
    ffda:	701a      	strb	r2, [r3, #0]
    ffdc:	f242 0339 	movw	r3, #8249	; 0x2039
    ffe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe4:	f242 0239 	movw	r2, #8249	; 0x2039
    ffe8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ffec:	7812      	ldrb	r2, [r2, #0]
    ffee:	b2d2      	uxtb	r2, r2
    fff0:	f042 0210 	orr.w	r2, r2, #16
    fff4:	b2d2      	uxtb	r2, r2
    fff6:	701a      	strb	r2, [r3, #0]
    fff8:	e00b      	b.n	10012 <send_gps_pos+0x137a>
    fffa:	f24c 5348 	movw	r3, #50504	; 0xc548
    fffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10002:	781b      	ldrb	r3, [r3, #0]
   10004:	3301      	adds	r3, #1
   10006:	b2da      	uxtb	r2, r3
   10008:	f24c 5348 	movw	r3, #50504	; 0xc548
   1000c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10010:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
   10012:	f005 fbfd 	bl	15810 <estimator_update_state_gps>
  }
}
   10016:	bd80      	pop	{r7, pc}
   10018:	2004c6b9 	.word	0x2004c6b9
   1001c:	2004c6ba 	.word	0x2004c6ba
   10020:	2004c6bb 	.word	0x2004c6bb

00010024 <send_radIR>:

void send_radIR(void){
   10024:	b480      	push	{r7}
   10026:	af00      	add	r7, sp, #0
  if (gps_pos_available)
   10028:	f24c 63de 	movw	r3, #50910	; 0xc6de
   1002c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10030:	781b      	ldrb	r3, [r3, #0]
   10032:	2b00      	cmp	r3, #0
   10034:	f000 85e8 	beq.w	10c08 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
   10038:	f24c 5349 	movw	r3, #50505	; 0xc549
   1003c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10040:	781a      	ldrb	r2, [r3, #0]
   10042:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004a:	781b      	ldrb	r3, [r3, #0]
   1004c:	b2db      	uxtb	r3, r3
   1004e:	429a      	cmp	r2, r3
   10050:	d313      	bcc.n	1007a <send_radIR+0x56>
   10052:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1005a:	781b      	ldrb	r3, [r3, #0]
   1005c:	b2db      	uxtb	r3, r3
   1005e:	461a      	mov	r2, r3
   10060:	f24c 5349 	movw	r3, #50505	; 0xc549
   10064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10068:	781b      	ldrb	r3, [r3, #0]
   1006a:	1ad3      	subs	r3, r2, r3
   1006c:	33ff      	adds	r3, #255	; 0xff
   1006e:	2b14      	cmp	r3, #20
   10070:	bfd4      	ite	le
   10072:	2300      	movle	r3, #0
   10074:	2301      	movgt	r3, #1
   10076:	b2db      	uxtb	r3, r3
   10078:	e011      	b.n	1009e <send_radIR+0x7a>
   1007a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1007e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10082:	781b      	ldrb	r3, [r3, #0]
   10084:	b2db      	uxtb	r3, r3
   10086:	461a      	mov	r2, r3
   10088:	f24c 5349 	movw	r3, #50505	; 0xc549
   1008c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10090:	781b      	ldrb	r3, [r3, #0]
   10092:	1ad3      	subs	r3, r2, r3
   10094:	2b14      	cmp	r3, #20
   10096:	bfd4      	ite	le
   10098:	2300      	movle	r3, #0
   1009a:	2301      	movgt	r3, #1
   1009c:	b2db      	uxtb	r3, r3
   1009e:	2b00      	cmp	r3, #0
   100a0:	f000 85a6 	beq.w	10bf0 <send_radIR+0xbcc>
   100a4:	f24c 5349 	movw	r3, #50505	; 0xc549
   100a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ac:	781b      	ldrb	r3, [r3, #0]
   100ae:	461a      	mov	r2, r3
   100b0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   100b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b8:	2105      	movs	r1, #5
   100ba:	5499      	strb	r1, [r3, r2]
   100bc:	f24c 5349 	movw	r3, #50505	; 0xc549
   100c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c4:	781b      	ldrb	r3, [r3, #0]
   100c6:	3301      	adds	r3, #1
   100c8:	b2da      	uxtb	r2, r3
   100ca:	f24c 5349 	movw	r3, #50505	; 0xc549
   100ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d2:	701a      	strb	r2, [r3, #0]
   100d4:	f24c 5349 	movw	r3, #50505	; 0xc549
   100d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100dc:	781b      	ldrb	r3, [r3, #0]
   100de:	2bff      	cmp	r3, #255	; 0xff
   100e0:	d105      	bne.n	100ee <send_radIR+0xca>
   100e2:	f24c 5349 	movw	r3, #50505	; 0xc549
   100e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ea:	2200      	movs	r2, #0
   100ec:	701a      	strb	r2, [r3, #0]
   100ee:	f24c 5349 	movw	r3, #50505	; 0xc549
   100f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f6:	781b      	ldrb	r3, [r3, #0]
   100f8:	461a      	mov	r2, r3
   100fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
   100fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10102:	2105      	movs	r1, #5
   10104:	5499      	strb	r1, [r3, r2]
   10106:	f24c 5349 	movw	r3, #50505	; 0xc549
   1010a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1010e:	781b      	ldrb	r3, [r3, #0]
   10110:	3301      	adds	r3, #1
   10112:	b2da      	uxtb	r2, r3
   10114:	f24c 5349 	movw	r3, #50505	; 0xc549
   10118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1011c:	701a      	strb	r2, [r3, #0]
   1011e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2bff      	cmp	r3, #255	; 0xff
   1012a:	d105      	bne.n	10138 <send_radIR+0x114>
   1012c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10134:	2200      	movs	r2, #0
   10136:	701a      	strb	r2, [r3, #0]
   10138:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1013c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10140:	2205      	movs	r2, #5
   10142:	701a      	strb	r2, [r3, #0]
   10144:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1014c:	2205      	movs	r2, #5
   1014e:	701a      	strb	r2, [r3, #0]
   10150:	f24c 5349 	movw	r3, #50505	; 0xc549
   10154:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10158:	781b      	ldrb	r3, [r3, #0]
   1015a:	461a      	mov	r2, r3
   1015c:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10160:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10164:	7819      	ldrb	r1, [r3, #0]
   10166:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1016a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1016e:	5499      	strb	r1, [r3, r2]
   10170:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10174:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10178:	781a      	ldrb	r2, [r3, #0]
   1017a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1017e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10182:	781b      	ldrb	r3, [r3, #0]
   10184:	4413      	add	r3, r2
   10186:	b2da      	uxtb	r2, r3
   10188:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1018c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10190:	701a      	strb	r2, [r3, #0]
   10192:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019a:	781a      	ldrb	r2, [r3, #0]
   1019c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a4:	781b      	ldrb	r3, [r3, #0]
   101a6:	4413      	add	r3, r2
   101a8:	b2da      	uxtb	r2, r3
   101aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b2:	701a      	strb	r2, [r3, #0]
   101b4:	f24c 5349 	movw	r3, #50505	; 0xc549
   101b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101bc:	781b      	ldrb	r3, [r3, #0]
   101be:	3301      	adds	r3, #1
   101c0:	b2da      	uxtb	r2, r3
   101c2:	f24c 5349 	movw	r3, #50505	; 0xc549
   101c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ca:	701a      	strb	r2, [r3, #0]
   101cc:	f24c 5349 	movw	r3, #50505	; 0xc549
   101d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d4:	781b      	ldrb	r3, [r3, #0]
   101d6:	2bff      	cmp	r3, #255	; 0xff
   101d8:	d105      	bne.n	101e6 <send_radIR+0x1c2>
   101da:	f24c 5349 	movw	r3, #50505	; 0xc549
   101de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e2:	2200      	movs	r2, #0
   101e4:	701a      	strb	r2, [r3, #0]
   101e6:	f24c 5349 	movw	r3, #50505	; 0xc549
   101ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ee:	781b      	ldrb	r3, [r3, #0]
   101f0:	461a      	mov	r2, r3
   101f2:	f64c 3340 	movw	r3, #52032	; 0xcb40
   101f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101fa:	7859      	ldrb	r1, [r3, #1]
   101fc:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10204:	5499      	strb	r1, [r3, r2]
   10206:	4bd2      	ldr	r3, [pc, #840]	; (10550 <send_radIR+0x52c>)
   10208:	781a      	ldrb	r2, [r3, #0]
   1020a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1020e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10212:	781b      	ldrb	r3, [r3, #0]
   10214:	4413      	add	r3, r2
   10216:	b2da      	uxtb	r2, r3
   10218:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1021c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10220:	701a      	strb	r2, [r3, #0]
   10222:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1022a:	781a      	ldrb	r2, [r3, #0]
   1022c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10234:	781b      	ldrb	r3, [r3, #0]
   10236:	4413      	add	r3, r2
   10238:	b2da      	uxtb	r2, r3
   1023a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1023e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10242:	701a      	strb	r2, [r3, #0]
   10244:	f24c 5349 	movw	r3, #50505	; 0xc549
   10248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024c:	781b      	ldrb	r3, [r3, #0]
   1024e:	3301      	adds	r3, #1
   10250:	b2da      	uxtb	r2, r3
   10252:	f24c 5349 	movw	r3, #50505	; 0xc549
   10256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1025a:	701a      	strb	r2, [r3, #0]
   1025c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10264:	781b      	ldrb	r3, [r3, #0]
   10266:	2bff      	cmp	r3, #255	; 0xff
   10268:	d105      	bne.n	10276 <send_radIR+0x252>
   1026a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1026e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10272:	2200      	movs	r2, #0
   10274:	701a      	strb	r2, [r3, #0]
   10276:	f24c 5349 	movw	r3, #50505	; 0xc549
   1027a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1027e:	781b      	ldrb	r3, [r3, #0]
   10280:	461a      	mov	r2, r3
   10282:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10286:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1028a:	7899      	ldrb	r1, [r3, #2]
   1028c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10294:	5499      	strb	r1, [r3, r2]
   10296:	4baf      	ldr	r3, [pc, #700]	; (10554 <send_radIR+0x530>)
   10298:	781a      	ldrb	r2, [r3, #0]
   1029a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1029e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a2:	781b      	ldrb	r3, [r3, #0]
   102a4:	4413      	add	r3, r2
   102a6:	b2da      	uxtb	r2, r3
   102a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b0:	701a      	strb	r2, [r3, #0]
   102b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   102b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ba:	781a      	ldrb	r2, [r3, #0]
   102bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c4:	781b      	ldrb	r3, [r3, #0]
   102c6:	4413      	add	r3, r2
   102c8:	b2da      	uxtb	r2, r3
   102ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
   102ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d2:	701a      	strb	r2, [r3, #0]
   102d4:	f24c 5349 	movw	r3, #50505	; 0xc549
   102d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102dc:	781b      	ldrb	r3, [r3, #0]
   102de:	3301      	adds	r3, #1
   102e0:	b2da      	uxtb	r2, r3
   102e2:	f24c 5349 	movw	r3, #50505	; 0xc549
   102e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ea:	701a      	strb	r2, [r3, #0]
   102ec:	f24c 5349 	movw	r3, #50505	; 0xc549
   102f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f4:	781b      	ldrb	r3, [r3, #0]
   102f6:	2bff      	cmp	r3, #255	; 0xff
   102f8:	d105      	bne.n	10306 <send_radIR+0x2e2>
   102fa:	f24c 5349 	movw	r3, #50505	; 0xc549
   102fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10302:	2200      	movs	r2, #0
   10304:	701a      	strb	r2, [r3, #0]
   10306:	f24c 5349 	movw	r3, #50505	; 0xc549
   1030a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1030e:	781b      	ldrb	r3, [r3, #0]
   10310:	461a      	mov	r2, r3
   10312:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1031a:	78d9      	ldrb	r1, [r3, #3]
   1031c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10324:	5499      	strb	r1, [r3, r2]
   10326:	4b8c      	ldr	r3, [pc, #560]	; (10558 <send_radIR+0x534>)
   10328:	781a      	ldrb	r2, [r3, #0]
   1032a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1032e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10332:	781b      	ldrb	r3, [r3, #0]
   10334:	4413      	add	r3, r2
   10336:	b2da      	uxtb	r2, r3
   10338:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1033c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10340:	701a      	strb	r2, [r3, #0]
   10342:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10346:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1034a:	781a      	ldrb	r2, [r3, #0]
   1034c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10350:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10354:	781b      	ldrb	r3, [r3, #0]
   10356:	4413      	add	r3, r2
   10358:	b2da      	uxtb	r2, r3
   1035a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1035e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10362:	701a      	strb	r2, [r3, #0]
   10364:	f24c 5349 	movw	r3, #50505	; 0xc549
   10368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1036c:	781b      	ldrb	r3, [r3, #0]
   1036e:	3301      	adds	r3, #1
   10370:	b2da      	uxtb	r2, r3
   10372:	f24c 5349 	movw	r3, #50505	; 0xc549
   10376:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1037a:	701a      	strb	r2, [r3, #0]
   1037c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10384:	781b      	ldrb	r3, [r3, #0]
   10386:	2bff      	cmp	r3, #255	; 0xff
   10388:	d105      	bne.n	10396 <send_radIR+0x372>
   1038a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1038e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10392:	2200      	movs	r2, #0
   10394:	701a      	strb	r2, [r3, #0]
   10396:	f24c 5349 	movw	r3, #50505	; 0xc549
   1039a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1039e:	781b      	ldrb	r3, [r3, #0]
   103a0:	461a      	mov	r2, r3
   103a2:	f64c 3344 	movw	r3, #52036	; 0xcb44
   103a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103aa:	7819      	ldrb	r1, [r3, #0]
   103ac:	f24c 534c 	movw	r3, #50508	; 0xc54c
   103b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b4:	5499      	strb	r1, [r3, r2]
   103b6:	f64c 3344 	movw	r3, #52036	; 0xcb44
   103ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103be:	781a      	ldrb	r2, [r3, #0]
   103c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c8:	781b      	ldrb	r3, [r3, #0]
   103ca:	4413      	add	r3, r2
   103cc:	b2da      	uxtb	r2, r3
   103ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d6:	701a      	strb	r2, [r3, #0]
   103d8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   103dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e0:	781a      	ldrb	r2, [r3, #0]
   103e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ea:	781b      	ldrb	r3, [r3, #0]
   103ec:	4413      	add	r3, r2
   103ee:	b2da      	uxtb	r2, r3
   103f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   103f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f8:	701a      	strb	r2, [r3, #0]
   103fa:	f24c 5349 	movw	r3, #50505	; 0xc549
   103fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10402:	781b      	ldrb	r3, [r3, #0]
   10404:	3301      	adds	r3, #1
   10406:	b2da      	uxtb	r2, r3
   10408:	f24c 5349 	movw	r3, #50505	; 0xc549
   1040c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10410:	701a      	strb	r2, [r3, #0]
   10412:	f24c 5349 	movw	r3, #50505	; 0xc549
   10416:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1041a:	781b      	ldrb	r3, [r3, #0]
   1041c:	2bff      	cmp	r3, #255	; 0xff
   1041e:	d105      	bne.n	1042c <send_radIR+0x408>
   10420:	f24c 5349 	movw	r3, #50505	; 0xc549
   10424:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10428:	2200      	movs	r2, #0
   1042a:	701a      	strb	r2, [r3, #0]
   1042c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10434:	781b      	ldrb	r3, [r3, #0]
   10436:	461a      	mov	r2, r3
   10438:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1043c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10440:	7859      	ldrb	r1, [r3, #1]
   10442:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10446:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1044a:	5499      	strb	r1, [r3, r2]
   1044c:	4b43      	ldr	r3, [pc, #268]	; (1055c <send_radIR+0x538>)
   1044e:	781a      	ldrb	r2, [r3, #0]
   10450:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10454:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10458:	781b      	ldrb	r3, [r3, #0]
   1045a:	4413      	add	r3, r2
   1045c:	b2da      	uxtb	r2, r3
   1045e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10466:	701a      	strb	r2, [r3, #0]
   10468:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1046c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10470:	781a      	ldrb	r2, [r3, #0]
   10472:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10476:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1047a:	781b      	ldrb	r3, [r3, #0]
   1047c:	4413      	add	r3, r2
   1047e:	b2da      	uxtb	r2, r3
   10480:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10488:	701a      	strb	r2, [r3, #0]
   1048a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1048e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10492:	781b      	ldrb	r3, [r3, #0]
   10494:	3301      	adds	r3, #1
   10496:	b2da      	uxtb	r2, r3
   10498:	f24c 5349 	movw	r3, #50505	; 0xc549
   1049c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a0:	701a      	strb	r2, [r3, #0]
   104a2:	f24c 5349 	movw	r3, #50505	; 0xc549
   104a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104aa:	781b      	ldrb	r3, [r3, #0]
   104ac:	2bff      	cmp	r3, #255	; 0xff
   104ae:	d105      	bne.n	104bc <send_radIR+0x498>
   104b0:	f24c 5349 	movw	r3, #50505	; 0xc549
   104b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b8:	2200      	movs	r2, #0
   104ba:	701a      	strb	r2, [r3, #0]
   104bc:	f24c 5349 	movw	r3, #50505	; 0xc549
   104c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c4:	781b      	ldrb	r3, [r3, #0]
   104c6:	461a      	mov	r2, r3
   104c8:	f64c 3344 	movw	r3, #52036	; 0xcb44
   104cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d0:	7899      	ldrb	r1, [r3, #2]
   104d2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   104d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104da:	5499      	strb	r1, [r3, r2]
   104dc:	4b20      	ldr	r3, [pc, #128]	; (10560 <send_radIR+0x53c>)
   104de:	781a      	ldrb	r2, [r3, #0]
   104e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e8:	781b      	ldrb	r3, [r3, #0]
   104ea:	4413      	add	r3, r2
   104ec:	b2da      	uxtb	r2, r3
   104ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f6:	701a      	strb	r2, [r3, #0]
   104f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10500:	781a      	ldrb	r2, [r3, #0]
   10502:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1050a:	781b      	ldrb	r3, [r3, #0]
   1050c:	4413      	add	r3, r2
   1050e:	b2da      	uxtb	r2, r3
   10510:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10518:	701a      	strb	r2, [r3, #0]
   1051a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1051e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10522:	781b      	ldrb	r3, [r3, #0]
   10524:	3301      	adds	r3, #1
   10526:	b2da      	uxtb	r2, r3
   10528:	f24c 5349 	movw	r3, #50505	; 0xc549
   1052c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10530:	701a      	strb	r2, [r3, #0]
   10532:	f24c 5349 	movw	r3, #50505	; 0xc549
   10536:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1053a:	781b      	ldrb	r3, [r3, #0]
   1053c:	2bff      	cmp	r3, #255	; 0xff
   1053e:	d111      	bne.n	10564 <send_radIR+0x540>
   10540:	f24c 5349 	movw	r3, #50505	; 0xc549
   10544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10548:	2200      	movs	r2, #0
   1054a:	701a      	strb	r2, [r3, #0]
   1054c:	e00a      	b.n	10564 <send_radIR+0x540>
   1054e:	bf00      	nop
   10550:	2004cb41 	.word	0x2004cb41
   10554:	2004cb42 	.word	0x2004cb42
   10558:	2004cb43 	.word	0x2004cb43
   1055c:	2004cb45 	.word	0x2004cb45
   10560:	2004cb46 	.word	0x2004cb46
   10564:	f24c 5349 	movw	r3, #50505	; 0xc549
   10568:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1056c:	781b      	ldrb	r3, [r3, #0]
   1056e:	461a      	mov	r2, r3
   10570:	f64c 3344 	movw	r3, #52036	; 0xcb44
   10574:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10578:	78d9      	ldrb	r1, [r3, #3]
   1057a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1057e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10582:	5499      	strb	r1, [r3, r2]
   10584:	4bd3      	ldr	r3, [pc, #844]	; (108d4 <send_radIR+0x8b0>)
   10586:	781a      	ldrb	r2, [r3, #0]
   10588:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1058c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10590:	781b      	ldrb	r3, [r3, #0]
   10592:	4413      	add	r3, r2
   10594:	b2da      	uxtb	r2, r3
   10596:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1059a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1059e:	701a      	strb	r2, [r3, #0]
   105a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   105a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a8:	781a      	ldrb	r2, [r3, #0]
   105aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b2:	781b      	ldrb	r3, [r3, #0]
   105b4:	4413      	add	r3, r2
   105b6:	b2da      	uxtb	r2, r3
   105b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   105bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c0:	701a      	strb	r2, [r3, #0]
   105c2:	f24c 5349 	movw	r3, #50505	; 0xc549
   105c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ca:	781b      	ldrb	r3, [r3, #0]
   105cc:	3301      	adds	r3, #1
   105ce:	b2da      	uxtb	r2, r3
   105d0:	f24c 5349 	movw	r3, #50505	; 0xc549
   105d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d8:	701a      	strb	r2, [r3, #0]
   105da:	f24c 5349 	movw	r3, #50505	; 0xc549
   105de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e2:	781b      	ldrb	r3, [r3, #0]
   105e4:	2bff      	cmp	r3, #255	; 0xff
   105e6:	d105      	bne.n	105f4 <send_radIR+0x5d0>
   105e8:	f24c 5349 	movw	r3, #50505	; 0xc549
   105ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f0:	2200      	movs	r2, #0
   105f2:	701a      	strb	r2, [r3, #0]
   105f4:	f24c 5349 	movw	r3, #50505	; 0xc549
   105f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105fc:	781b      	ldrb	r3, [r3, #0]
   105fe:	461a      	mov	r2, r3
   10600:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10608:	7819      	ldrb	r1, [r3, #0]
   1060a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1060e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10612:	5499      	strb	r1, [r3, r2]
   10614:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1061c:	781a      	ldrb	r2, [r3, #0]
   1061e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10626:	781b      	ldrb	r3, [r3, #0]
   10628:	4413      	add	r3, r2
   1062a:	b2da      	uxtb	r2, r3
   1062c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10634:	701a      	strb	r2, [r3, #0]
   10636:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1063a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063e:	781a      	ldrb	r2, [r3, #0]
   10640:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10648:	781b      	ldrb	r3, [r3, #0]
   1064a:	4413      	add	r3, r2
   1064c:	b2da      	uxtb	r2, r3
   1064e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10656:	701a      	strb	r2, [r3, #0]
   10658:	f24c 5349 	movw	r3, #50505	; 0xc549
   1065c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10660:	781b      	ldrb	r3, [r3, #0]
   10662:	3301      	adds	r3, #1
   10664:	b2da      	uxtb	r2, r3
   10666:	f24c 5349 	movw	r3, #50505	; 0xc549
   1066a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1066e:	701a      	strb	r2, [r3, #0]
   10670:	f24c 5349 	movw	r3, #50505	; 0xc549
   10674:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10678:	781b      	ldrb	r3, [r3, #0]
   1067a:	2bff      	cmp	r3, #255	; 0xff
   1067c:	d105      	bne.n	1068a <send_radIR+0x666>
   1067e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10686:	2200      	movs	r2, #0
   10688:	701a      	strb	r2, [r3, #0]
   1068a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1068e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10692:	781b      	ldrb	r3, [r3, #0]
   10694:	461a      	mov	r2, r3
   10696:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1069a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1069e:	7859      	ldrb	r1, [r3, #1]
   106a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   106a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a8:	5499      	strb	r1, [r3, r2]
   106aa:	4b8b      	ldr	r3, [pc, #556]	; (108d8 <send_radIR+0x8b4>)
   106ac:	781a      	ldrb	r2, [r3, #0]
   106ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b6:	781b      	ldrb	r3, [r3, #0]
   106b8:	4413      	add	r3, r2
   106ba:	b2da      	uxtb	r2, r3
   106bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c4:	701a      	strb	r2, [r3, #0]
   106c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   106ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ce:	781a      	ldrb	r2, [r3, #0]
   106d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d8:	781b      	ldrb	r3, [r3, #0]
   106da:	4413      	add	r3, r2
   106dc:	b2da      	uxtb	r2, r3
   106de:	f24c 634e 	movw	r3, #50766	; 0xc64e
   106e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e6:	701a      	strb	r2, [r3, #0]
   106e8:	f24c 5349 	movw	r3, #50505	; 0xc549
   106ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f0:	781b      	ldrb	r3, [r3, #0]
   106f2:	3301      	adds	r3, #1
   106f4:	b2da      	uxtb	r2, r3
   106f6:	f24c 5349 	movw	r3, #50505	; 0xc549
   106fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106fe:	701a      	strb	r2, [r3, #0]
   10700:	f24c 5349 	movw	r3, #50505	; 0xc549
   10704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10708:	781b      	ldrb	r3, [r3, #0]
   1070a:	2bff      	cmp	r3, #255	; 0xff
   1070c:	d105      	bne.n	1071a <send_radIR+0x6f6>
   1070e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10716:	2200      	movs	r2, #0
   10718:	701a      	strb	r2, [r3, #0]
   1071a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1071e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10722:	781b      	ldrb	r3, [r3, #0]
   10724:	461a      	mov	r2, r3
   10726:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1072a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1072e:	7899      	ldrb	r1, [r3, #2]
   10730:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10738:	5499      	strb	r1, [r3, r2]
   1073a:	4b68      	ldr	r3, [pc, #416]	; (108dc <send_radIR+0x8b8>)
   1073c:	781a      	ldrb	r2, [r3, #0]
   1073e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10746:	781b      	ldrb	r3, [r3, #0]
   10748:	4413      	add	r3, r2
   1074a:	b2da      	uxtb	r2, r3
   1074c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10754:	701a      	strb	r2, [r3, #0]
   10756:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1075a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1075e:	781a      	ldrb	r2, [r3, #0]
   10760:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10764:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10768:	781b      	ldrb	r3, [r3, #0]
   1076a:	4413      	add	r3, r2
   1076c:	b2da      	uxtb	r2, r3
   1076e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10776:	701a      	strb	r2, [r3, #0]
   10778:	f24c 5349 	movw	r3, #50505	; 0xc549
   1077c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10780:	781b      	ldrb	r3, [r3, #0]
   10782:	3301      	adds	r3, #1
   10784:	b2da      	uxtb	r2, r3
   10786:	f24c 5349 	movw	r3, #50505	; 0xc549
   1078a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1078e:	701a      	strb	r2, [r3, #0]
   10790:	f24c 5349 	movw	r3, #50505	; 0xc549
   10794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10798:	781b      	ldrb	r3, [r3, #0]
   1079a:	2bff      	cmp	r3, #255	; 0xff
   1079c:	d105      	bne.n	107aa <send_radIR+0x786>
   1079e:	f24c 5349 	movw	r3, #50505	; 0xc549
   107a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a6:	2200      	movs	r2, #0
   107a8:	701a      	strb	r2, [r3, #0]
   107aa:	f24c 5349 	movw	r3, #50505	; 0xc549
   107ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b2:	781b      	ldrb	r3, [r3, #0]
   107b4:	461a      	mov	r2, r3
   107b6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   107ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107be:	78d9      	ldrb	r1, [r3, #3]
   107c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   107c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c8:	5499      	strb	r1, [r3, r2]
   107ca:	4b45      	ldr	r3, [pc, #276]	; (108e0 <send_radIR+0x8bc>)
   107cc:	781a      	ldrb	r2, [r3, #0]
   107ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d6:	781b      	ldrb	r3, [r3, #0]
   107d8:	4413      	add	r3, r2
   107da:	b2da      	uxtb	r2, r3
   107dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e4:	701a      	strb	r2, [r3, #0]
   107e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   107ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ee:	781a      	ldrb	r2, [r3, #0]
   107f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f8:	781b      	ldrb	r3, [r3, #0]
   107fa:	4413      	add	r3, r2
   107fc:	b2da      	uxtb	r2, r3
   107fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10806:	701a      	strb	r2, [r3, #0]
   10808:	f24c 5349 	movw	r3, #50505	; 0xc549
   1080c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10810:	781b      	ldrb	r3, [r3, #0]
   10812:	3301      	adds	r3, #1
   10814:	b2da      	uxtb	r2, r3
   10816:	f24c 5349 	movw	r3, #50505	; 0xc549
   1081a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1081e:	701a      	strb	r2, [r3, #0]
   10820:	f24c 5349 	movw	r3, #50505	; 0xc549
   10824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10828:	781b      	ldrb	r3, [r3, #0]
   1082a:	2bff      	cmp	r3, #255	; 0xff
   1082c:	d105      	bne.n	1083a <send_radIR+0x816>
   1082e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10832:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10836:	2200      	movs	r2, #0
   10838:	701a      	strb	r2, [r3, #0]
   1083a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1083e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10842:	781b      	ldrb	r3, [r3, #0]
   10844:	461a      	mov	r2, r3
   10846:	f240 5342 	movw	r3, #1346	; 0x542
   1084a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1084e:	7819      	ldrb	r1, [r3, #0]
   10850:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10858:	5499      	strb	r1, [r3, r2]
   1085a:	f240 5342 	movw	r3, #1346	; 0x542
   1085e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10862:	781a      	ldrb	r2, [r3, #0]
   10864:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1086c:	781b      	ldrb	r3, [r3, #0]
   1086e:	4413      	add	r3, r2
   10870:	b2da      	uxtb	r2, r3
   10872:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10876:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1087a:	701a      	strb	r2, [r3, #0]
   1087c:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10884:	781a      	ldrb	r2, [r3, #0]
   10886:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1088a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1088e:	781b      	ldrb	r3, [r3, #0]
   10890:	4413      	add	r3, r2
   10892:	b2da      	uxtb	r2, r3
   10894:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10898:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1089c:	701a      	strb	r2, [r3, #0]
   1089e:	f24c 5349 	movw	r3, #50505	; 0xc549
   108a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a6:	781b      	ldrb	r3, [r3, #0]
   108a8:	3301      	adds	r3, #1
   108aa:	b2da      	uxtb	r2, r3
   108ac:	f24c 5349 	movw	r3, #50505	; 0xc549
   108b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b4:	701a      	strb	r2, [r3, #0]
   108b6:	f24c 5349 	movw	r3, #50505	; 0xc549
   108ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108be:	781b      	ldrb	r3, [r3, #0]
   108c0:	2bff      	cmp	r3, #255	; 0xff
   108c2:	d10f      	bne.n	108e4 <send_radIR+0x8c0>
   108c4:	f24c 5349 	movw	r3, #50505	; 0xc549
   108c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108cc:	2200      	movs	r2, #0
   108ce:	701a      	strb	r2, [r3, #0]
   108d0:	e008      	b.n	108e4 <send_radIR+0x8c0>
   108d2:	bf00      	nop
   108d4:	2004cb47 	.word	0x2004cb47
   108d8:	2004cb3d 	.word	0x2004cb3d
   108dc:	2004cb3e 	.word	0x2004cb3e
   108e0:	2004cb3f 	.word	0x2004cb3f
   108e4:	f24c 5349 	movw	r3, #50505	; 0xc549
   108e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ec:	781b      	ldrb	r3, [r3, #0]
   108ee:	461a      	mov	r2, r3
   108f0:	f240 5342 	movw	r3, #1346	; 0x542
   108f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108f8:	7859      	ldrb	r1, [r3, #1]
   108fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
   108fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10902:	5499      	strb	r1, [r3, r2]
   10904:	4bc2      	ldr	r3, [pc, #776]	; (10c10 <send_radIR+0xbec>)
   10906:	781a      	ldrb	r2, [r3, #0]
   10908:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1090c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10910:	781b      	ldrb	r3, [r3, #0]
   10912:	4413      	add	r3, r2
   10914:	b2da      	uxtb	r2, r3
   10916:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1091a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1091e:	701a      	strb	r2, [r3, #0]
   10920:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10928:	781a      	ldrb	r2, [r3, #0]
   1092a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1092e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10932:	781b      	ldrb	r3, [r3, #0]
   10934:	4413      	add	r3, r2
   10936:	b2da      	uxtb	r2, r3
   10938:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1093c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10940:	701a      	strb	r2, [r3, #0]
   10942:	f24c 5349 	movw	r3, #50505	; 0xc549
   10946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1094a:	781b      	ldrb	r3, [r3, #0]
   1094c:	3301      	adds	r3, #1
   1094e:	b2da      	uxtb	r2, r3
   10950:	f24c 5349 	movw	r3, #50505	; 0xc549
   10954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10958:	701a      	strb	r2, [r3, #0]
   1095a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1095e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10962:	781b      	ldrb	r3, [r3, #0]
   10964:	2bff      	cmp	r3, #255	; 0xff
   10966:	d105      	bne.n	10974 <send_radIR+0x950>
   10968:	f24c 5349 	movw	r3, #50505	; 0xc549
   1096c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10970:	2200      	movs	r2, #0
   10972:	701a      	strb	r2, [r3, #0]
   10974:	f24c 5349 	movw	r3, #50505	; 0xc549
   10978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097c:	781b      	ldrb	r3, [r3, #0]
   1097e:	461a      	mov	r2, r3
   10980:	f240 5344 	movw	r3, #1348	; 0x544
   10984:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10988:	7819      	ldrb	r1, [r3, #0]
   1098a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1098e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10992:	5499      	strb	r1, [r3, r2]
   10994:	f240 5344 	movw	r3, #1348	; 0x544
   10998:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1099c:	781a      	ldrb	r2, [r3, #0]
   1099e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   109a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a6:	781b      	ldrb	r3, [r3, #0]
   109a8:	4413      	add	r3, r2
   109aa:	b2da      	uxtb	r2, r3
   109ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
   109b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b4:	701a      	strb	r2, [r3, #0]
   109b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   109ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109be:	781a      	ldrb	r2, [r3, #0]
   109c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   109c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c8:	781b      	ldrb	r3, [r3, #0]
   109ca:	4413      	add	r3, r2
   109cc:	b2da      	uxtb	r2, r3
   109ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
   109d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d6:	701a      	strb	r2, [r3, #0]
   109d8:	f24c 5349 	movw	r3, #50505	; 0xc549
   109dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e0:	781b      	ldrb	r3, [r3, #0]
   109e2:	3301      	adds	r3, #1
   109e4:	b2da      	uxtb	r2, r3
   109e6:	f24c 5349 	movw	r3, #50505	; 0xc549
   109ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ee:	701a      	strb	r2, [r3, #0]
   109f0:	f24c 5349 	movw	r3, #50505	; 0xc549
   109f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f8:	781b      	ldrb	r3, [r3, #0]
   109fa:	2bff      	cmp	r3, #255	; 0xff
   109fc:	d105      	bne.n	10a0a <send_radIR+0x9e6>
   109fe:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a06:	2200      	movs	r2, #0
   10a08:	701a      	strb	r2, [r3, #0]
   10a0a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a12:	781b      	ldrb	r3, [r3, #0]
   10a14:	461a      	mov	r2, r3
   10a16:	f240 5344 	movw	r3, #1348	; 0x544
   10a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a1e:	7859      	ldrb	r1, [r3, #1]
   10a20:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a28:	5499      	strb	r1, [r3, r2]
   10a2a:	4b7a      	ldr	r3, [pc, #488]	; (10c14 <send_radIR+0xbf0>)
   10a2c:	781a      	ldrb	r2, [r3, #0]
   10a2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a36:	781b      	ldrb	r3, [r3, #0]
   10a38:	4413      	add	r3, r2
   10a3a:	b2da      	uxtb	r2, r3
   10a3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a44:	701a      	strb	r2, [r3, #0]
   10a46:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a4e:	781a      	ldrb	r2, [r3, #0]
   10a50:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a58:	781b      	ldrb	r3, [r3, #0]
   10a5a:	4413      	add	r3, r2
   10a5c:	b2da      	uxtb	r2, r3
   10a5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a66:	701a      	strb	r2, [r3, #0]
   10a68:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a70:	781b      	ldrb	r3, [r3, #0]
   10a72:	3301      	adds	r3, #1
   10a74:	b2da      	uxtb	r2, r3
   10a76:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a7e:	701a      	strb	r2, [r3, #0]
   10a80:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a88:	781b      	ldrb	r3, [r3, #0]
   10a8a:	2bff      	cmp	r3, #255	; 0xff
   10a8c:	d105      	bne.n	10a9a <send_radIR+0xa76>
   10a8e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a96:	2200      	movs	r2, #0
   10a98:	701a      	strb	r2, [r3, #0]
   10a9a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa2:	781b      	ldrb	r3, [r3, #0]
   10aa4:	461a      	mov	r2, r3
   10aa6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aae:	7819      	ldrb	r1, [r3, #0]
   10ab0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab8:	5499      	strb	r1, [r3, r2]
   10aba:	f24c 5349 	movw	r3, #50505	; 0xc549
   10abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac2:	781b      	ldrb	r3, [r3, #0]
   10ac4:	3301      	adds	r3, #1
   10ac6:	b2da      	uxtb	r2, r3
   10ac8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad0:	701a      	strb	r2, [r3, #0]
   10ad2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ada:	781b      	ldrb	r3, [r3, #0]
   10adc:	2bff      	cmp	r3, #255	; 0xff
   10ade:	d105      	bne.n	10aec <send_radIR+0xac8>
   10ae0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae8:	2200      	movs	r2, #0
   10aea:	701a      	strb	r2, [r3, #0]
   10aec:	f24c 5349 	movw	r3, #50505	; 0xc549
   10af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af4:	781b      	ldrb	r3, [r3, #0]
   10af6:	461a      	mov	r2, r3
   10af8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b00:	7819      	ldrb	r1, [r3, #0]
   10b02:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b0a:	5499      	strb	r1, [r3, r2]
   10b0c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b14:	781b      	ldrb	r3, [r3, #0]
   10b16:	3301      	adds	r3, #1
   10b18:	b2da      	uxtb	r2, r3
   10b1a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b22:	701a      	strb	r2, [r3, #0]
   10b24:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b2c:	781b      	ldrb	r3, [r3, #0]
   10b2e:	2bff      	cmp	r3, #255	; 0xff
   10b30:	d105      	bne.n	10b3e <send_radIR+0xb1a>
   10b32:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b3a:	2200      	movs	r2, #0
   10b3c:	701a      	strb	r2, [r3, #0]
   10b3e:	f242 0339 	movw	r3, #8249	; 0x2039
   10b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b46:	781b      	ldrb	r3, [r3, #0]
   10b48:	b2db      	uxtb	r3, r3
   10b4a:	f003 0310 	and.w	r3, r3, #16
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d15a      	bne.n	10c08 <send_radIR+0xbe4>
   10b52:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b5a:	781b      	ldrb	r3, [r3, #0]
   10b5c:	b2db      	uxtb	r3, r3
   10b5e:	461a      	mov	r2, r3
   10b60:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b68:	5c9a      	ldrb	r2, [r3, r2]
   10b6a:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b72:	701a      	strb	r2, [r3, #0]
   10b74:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b7c:	2200      	movs	r2, #0
   10b7e:	701a      	strb	r2, [r3, #0]
   10b80:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b88:	781b      	ldrb	r3, [r3, #0]
   10b8a:	b2db      	uxtb	r3, r3
   10b8c:	3301      	adds	r3, #1
   10b8e:	b2da      	uxtb	r2, r3
   10b90:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b98:	701a      	strb	r2, [r3, #0]
   10b9a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba2:	781b      	ldrb	r3, [r3, #0]
   10ba4:	b2db      	uxtb	r3, r3
   10ba6:	2bff      	cmp	r3, #255	; 0xff
   10ba8:	d105      	bne.n	10bb6 <send_radIR+0xb92>
   10baa:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb2:	2200      	movs	r2, #0
   10bb4:	701a      	strb	r2, [r3, #0]
   10bb6:	f242 0338 	movw	r3, #8248	; 0x2038
   10bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bbe:	f242 0238 	movw	r2, #8248	; 0x2038
   10bc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10bc6:	7812      	ldrb	r2, [r2, #0]
   10bc8:	b2d2      	uxtb	r2, r2
   10bca:	f042 0201 	orr.w	r2, r2, #1
   10bce:	b2d2      	uxtb	r2, r2
   10bd0:	701a      	strb	r2, [r3, #0]
   10bd2:	f242 0339 	movw	r3, #8249	; 0x2039
   10bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bda:	f242 0239 	movw	r2, #8249	; 0x2039
   10bde:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10be2:	7812      	ldrb	r2, [r2, #0]
   10be4:	b2d2      	uxtb	r2, r2
   10be6:	f042 0210 	orr.w	r2, r2, #16
   10bea:	b2d2      	uxtb	r2, r2
   10bec:	701a      	strb	r2, [r3, #0]
   10bee:	e00b      	b.n	10c08 <send_radIR+0xbe4>
   10bf0:	f24c 5348 	movw	r3, #50504	; 0xc548
   10bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf8:	781b      	ldrb	r3, [r3, #0]
   10bfa:	3301      	adds	r3, #1
   10bfc:	b2da      	uxtb	r2, r3
   10bfe:	f24c 5348 	movw	r3, #50504	; 0xc548
   10c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c06:	701a      	strb	r2, [r3, #0]
}
   10c08:	46bd      	mov	sp, r7
   10c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c0e:	4770      	bx	lr
   10c10:	20000543 	.word	0x20000543
   10c14:	20000545 	.word	0x20000545

00010c18 <send_takeOff>:

void send_takeOff(void){
   10c18:	b580      	push	{r7, lr}
   10c1a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10c1c:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c24:	781b      	ldrb	r3, [r3, #0]
   10c26:	2b00      	cmp	r3, #0
   10c28:	f000 8200 	beq.w	1102c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10c2c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c34:	881b      	ldrh	r3, [r3, #0]
   10c36:	2b00      	cmp	r3, #0
   10c38:	f040 81f2 	bne.w	11020 <send_takeOff+0x408>
   10c3c:	f64c 3334 	movw	r3, #52020	; 0xcb34
   10c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c44:	681b      	ldr	r3, [r3, #0]
   10c46:	4618      	mov	r0, r3
   10c48:	f04f 0100 	mov.w	r1, #0
   10c4c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10c50:	f007 fdfe 	bl	18850 <__aeabi_fcmpgt>
   10c54:	4603      	mov	r3, r0
   10c56:	2b00      	cmp	r3, #0
   10c58:	f000 81e2 	beq.w	11020 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10c5c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c64:	2201      	movs	r2, #1
   10c66:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10c68:	f24c 5340 	movw	r3, #50496	; 0xc540
   10c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c70:	2201      	movs	r2, #1
   10c72:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10c74:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c7c:	781a      	ldrb	r2, [r3, #0]
   10c7e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c86:	781b      	ldrb	r3, [r3, #0]
   10c88:	b2db      	uxtb	r3, r3
   10c8a:	429a      	cmp	r2, r3
   10c8c:	d313      	bcc.n	10cb6 <send_takeOff+0x9e>
   10c8e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c96:	781b      	ldrb	r3, [r3, #0]
   10c98:	b2db      	uxtb	r3, r3
   10c9a:	461a      	mov	r2, r3
   10c9c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca4:	781b      	ldrb	r3, [r3, #0]
   10ca6:	1ad3      	subs	r3, r2, r3
   10ca8:	33ff      	adds	r3, #255	; 0xff
   10caa:	2b06      	cmp	r3, #6
   10cac:	bfd4      	ite	le
   10cae:	2300      	movle	r3, #0
   10cb0:	2301      	movgt	r3, #1
   10cb2:	b2db      	uxtb	r3, r3
   10cb4:	e011      	b.n	10cda <send_takeOff+0xc2>
   10cb6:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cbe:	781b      	ldrb	r3, [r3, #0]
   10cc0:	b2db      	uxtb	r3, r3
   10cc2:	461a      	mov	r2, r3
   10cc4:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ccc:	781b      	ldrb	r3, [r3, #0]
   10cce:	1ad3      	subs	r3, r2, r3
   10cd0:	2b06      	cmp	r3, #6
   10cd2:	bfd4      	ite	le
   10cd4:	2300      	movle	r3, #0
   10cd6:	2301      	movgt	r3, #1
   10cd8:	b2db      	uxtb	r3, r3
   10cda:	2b00      	cmp	r3, #0
   10cdc:	f000 8194 	beq.w	11008 <send_takeOff+0x3f0>
   10ce0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce8:	781b      	ldrb	r3, [r3, #0]
   10cea:	461a      	mov	r2, r3
   10cec:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf4:	2105      	movs	r1, #5
   10cf6:	5499      	strb	r1, [r3, r2]
   10cf8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d00:	781b      	ldrb	r3, [r3, #0]
   10d02:	3301      	adds	r3, #1
   10d04:	b2da      	uxtb	r2, r3
   10d06:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d0e:	701a      	strb	r2, [r3, #0]
   10d10:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d18:	781b      	ldrb	r3, [r3, #0]
   10d1a:	2bff      	cmp	r3, #255	; 0xff
   10d1c:	d105      	bne.n	10d2a <send_takeOff+0x112>
   10d1e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d26:	2200      	movs	r2, #0
   10d28:	701a      	strb	r2, [r3, #0]
   10d2a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d32:	781b      	ldrb	r3, [r3, #0]
   10d34:	461a      	mov	r2, r3
   10d36:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d3e:	2104      	movs	r1, #4
   10d40:	5499      	strb	r1, [r3, r2]
   10d42:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d4a:	781b      	ldrb	r3, [r3, #0]
   10d4c:	3301      	adds	r3, #1
   10d4e:	b2da      	uxtb	r2, r3
   10d50:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d58:	701a      	strb	r2, [r3, #0]
   10d5a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d62:	781b      	ldrb	r3, [r3, #0]
   10d64:	2bff      	cmp	r3, #255	; 0xff
   10d66:	d105      	bne.n	10d74 <send_takeOff+0x15c>
   10d68:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d70:	2200      	movs	r2, #0
   10d72:	701a      	strb	r2, [r3, #0]
   10d74:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d7c:	2204      	movs	r2, #4
   10d7e:	701a      	strb	r2, [r3, #0]
   10d80:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d88:	2204      	movs	r2, #4
   10d8a:	701a      	strb	r2, [r3, #0]
   10d8c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d94:	781b      	ldrb	r3, [r3, #0]
   10d96:	461a      	mov	r2, r3
   10d98:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da0:	7819      	ldrb	r1, [r3, #0]
   10da2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10daa:	5499      	strb	r1, [r3, r2]
   10dac:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db4:	781a      	ldrb	r2, [r3, #0]
   10db6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dbe:	781b      	ldrb	r3, [r3, #0]
   10dc0:	4413      	add	r3, r2
   10dc2:	b2da      	uxtb	r2, r3
   10dc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dcc:	701a      	strb	r2, [r3, #0]
   10dce:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd6:	781a      	ldrb	r2, [r3, #0]
   10dd8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de0:	781b      	ldrb	r3, [r3, #0]
   10de2:	4413      	add	r3, r2
   10de4:	b2da      	uxtb	r2, r3
   10de6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dee:	701a      	strb	r2, [r3, #0]
   10df0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df8:	781b      	ldrb	r3, [r3, #0]
   10dfa:	3301      	adds	r3, #1
   10dfc:	b2da      	uxtb	r2, r3
   10dfe:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e06:	701a      	strb	r2, [r3, #0]
   10e08:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e10:	781b      	ldrb	r3, [r3, #0]
   10e12:	2bff      	cmp	r3, #255	; 0xff
   10e14:	d105      	bne.n	10e22 <send_takeOff+0x20a>
   10e16:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e1e:	2200      	movs	r2, #0
   10e20:	701a      	strb	r2, [r3, #0]
   10e22:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e2a:	781b      	ldrb	r3, [r3, #0]
   10e2c:	461a      	mov	r2, r3
   10e2e:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e36:	7859      	ldrb	r1, [r3, #1]
   10e38:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e40:	5499      	strb	r1, [r3, r2]
   10e42:	4b7b      	ldr	r3, [pc, #492]	; (11030 <send_takeOff+0x418>)
   10e44:	781a      	ldrb	r2, [r3, #0]
   10e46:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e4e:	781b      	ldrb	r3, [r3, #0]
   10e50:	4413      	add	r3, r2
   10e52:	b2da      	uxtb	r2, r3
   10e54:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e5c:	701a      	strb	r2, [r3, #0]
   10e5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e66:	781a      	ldrb	r2, [r3, #0]
   10e68:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e70:	781b      	ldrb	r3, [r3, #0]
   10e72:	4413      	add	r3, r2
   10e74:	b2da      	uxtb	r2, r3
   10e76:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e7e:	701a      	strb	r2, [r3, #0]
   10e80:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e88:	781b      	ldrb	r3, [r3, #0]
   10e8a:	3301      	adds	r3, #1
   10e8c:	b2da      	uxtb	r2, r3
   10e8e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e96:	701a      	strb	r2, [r3, #0]
   10e98:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea0:	781b      	ldrb	r3, [r3, #0]
   10ea2:	2bff      	cmp	r3, #255	; 0xff
   10ea4:	d105      	bne.n	10eb2 <send_takeOff+0x29a>
   10ea6:	f24c 5349 	movw	r3, #50505	; 0xc549
   10eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eae:	2200      	movs	r2, #0
   10eb0:	701a      	strb	r2, [r3, #0]
   10eb2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eba:	781b      	ldrb	r3, [r3, #0]
   10ebc:	461a      	mov	r2, r3
   10ebe:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec6:	7819      	ldrb	r1, [r3, #0]
   10ec8:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ed0:	5499      	strb	r1, [r3, r2]
   10ed2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eda:	781b      	ldrb	r3, [r3, #0]
   10edc:	3301      	adds	r3, #1
   10ede:	b2da      	uxtb	r2, r3
   10ee0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee8:	701a      	strb	r2, [r3, #0]
   10eea:	f24c 5349 	movw	r3, #50505	; 0xc549
   10eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef2:	781b      	ldrb	r3, [r3, #0]
   10ef4:	2bff      	cmp	r3, #255	; 0xff
   10ef6:	d105      	bne.n	10f04 <send_takeOff+0x2ec>
   10ef8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f00:	2200      	movs	r2, #0
   10f02:	701a      	strb	r2, [r3, #0]
   10f04:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f0c:	781b      	ldrb	r3, [r3, #0]
   10f0e:	461a      	mov	r2, r3
   10f10:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f18:	7819      	ldrb	r1, [r3, #0]
   10f1a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f22:	5499      	strb	r1, [r3, r2]
   10f24:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f2c:	781b      	ldrb	r3, [r3, #0]
   10f2e:	3301      	adds	r3, #1
   10f30:	b2da      	uxtb	r2, r3
   10f32:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f3a:	701a      	strb	r2, [r3, #0]
   10f3c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f44:	781b      	ldrb	r3, [r3, #0]
   10f46:	2bff      	cmp	r3, #255	; 0xff
   10f48:	d105      	bne.n	10f56 <send_takeOff+0x33e>
   10f4a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f52:	2200      	movs	r2, #0
   10f54:	701a      	strb	r2, [r3, #0]
   10f56:	f242 0339 	movw	r3, #8249	; 0x2039
   10f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f5e:	781b      	ldrb	r3, [r3, #0]
   10f60:	b2db      	uxtb	r3, r3
   10f62:	f003 0310 	and.w	r3, r3, #16
   10f66:	2b00      	cmp	r3, #0
   10f68:	d15a      	bne.n	11020 <send_takeOff+0x408>
   10f6a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f72:	781b      	ldrb	r3, [r3, #0]
   10f74:	b2db      	uxtb	r3, r3
   10f76:	461a      	mov	r2, r3
   10f78:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f80:	5c9a      	ldrb	r2, [r3, r2]
   10f82:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f8a:	701a      	strb	r2, [r3, #0]
   10f8c:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f94:	2200      	movs	r2, #0
   10f96:	701a      	strb	r2, [r3, #0]
   10f98:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fa0:	781b      	ldrb	r3, [r3, #0]
   10fa2:	b2db      	uxtb	r3, r3
   10fa4:	3301      	adds	r3, #1
   10fa6:	b2da      	uxtb	r2, r3
   10fa8:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fb0:	701a      	strb	r2, [r3, #0]
   10fb2:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fba:	781b      	ldrb	r3, [r3, #0]
   10fbc:	b2db      	uxtb	r3, r3
   10fbe:	2bff      	cmp	r3, #255	; 0xff
   10fc0:	d105      	bne.n	10fce <send_takeOff+0x3b6>
   10fc2:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fca:	2200      	movs	r2, #0
   10fcc:	701a      	strb	r2, [r3, #0]
   10fce:	f242 0338 	movw	r3, #8248	; 0x2038
   10fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd6:	f242 0238 	movw	r2, #8248	; 0x2038
   10fda:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fde:	7812      	ldrb	r2, [r2, #0]
   10fe0:	b2d2      	uxtb	r2, r2
   10fe2:	f042 0201 	orr.w	r2, r2, #1
   10fe6:	b2d2      	uxtb	r2, r2
   10fe8:	701a      	strb	r2, [r3, #0]
   10fea:	f242 0339 	movw	r3, #8249	; 0x2039
   10fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff2:	f242 0239 	movw	r2, #8249	; 0x2039
   10ff6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ffa:	7812      	ldrb	r2, [r2, #0]
   10ffc:	b2d2      	uxtb	r2, r2
   10ffe:	f042 0210 	orr.w	r2, r2, #16
   11002:	b2d2      	uxtb	r2, r2
   11004:	701a      	strb	r2, [r3, #0]
   11006:	e00b      	b.n	11020 <send_takeOff+0x408>
   11008:	f24c 5348 	movw	r3, #50504	; 0xc548
   1100c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11010:	781b      	ldrb	r3, [r3, #0]
   11012:	3301      	adds	r3, #1
   11014:	b2da      	uxtb	r2, r3
   11016:	f24c 5348 	movw	r3, #50504	; 0xc548
   1101a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1101e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   11020:	f24c 63de 	movw	r3, #50910	; 0xc6de
   11024:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11028:	2200      	movs	r2, #0
   1102a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   1102c:	bd80      	pop	{r7, pc}
   1102e:	bf00      	nop
   11030:	2004c52b 	.word	0x2004c52b
   11034:	f3af 8000 	nop.w

00011038 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   11038:	b480      	push	{r7}
   1103a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   1103c:	f242 0317 	movw	r3, #8215	; 0x2017
   11040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11044:	f242 0217 	movw	r2, #8215	; 0x2017
   11048:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1104c:	7812      	ldrb	r2, [r2, #0]
   1104e:	b2d2      	uxtb	r2, r2
   11050:	f042 0210 	orr.w	r2, r2, #16
   11054:	b2d2      	uxtb	r2, r2
   11056:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   11058:	f242 0331 	movw	r3, #8241	; 0x2031
   1105c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11060:	2201      	movs	r2, #1
   11062:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   11064:	f242 0333 	movw	r3, #8243	; 0x2033
   11068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1106c:	2219      	movs	r2, #25
   1106e:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   11070:	f242 0311 	movw	r3, #8209	; 0x2011
   11074:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11078:	f242 0211 	movw	r2, #8209	; 0x2011
   1107c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11080:	7812      	ldrb	r2, [r2, #0]
   11082:	b2d2      	uxtb	r2, r2
   11084:	f062 023f 	orn	r2, r2, #63	; 0x3f
   11088:	b2d2      	uxtb	r2, r2
   1108a:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1108c:	f242 0312 	movw	r3, #8210	; 0x2012
   11090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11094:	f242 0212 	movw	r2, #8210	; 0x2012
   11098:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1109c:	7812      	ldrb	r2, [r2, #0]
   1109e:	b2d2      	uxtb	r2, r2
   110a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110a4:	b2d2      	uxtb	r2, r2
   110a6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   110a8:	f242 0312 	movw	r3, #8210	; 0x2012
   110ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b0:	f242 0212 	movw	r2, #8210	; 0x2012
   110b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110b8:	7812      	ldrb	r2, [r2, #0]
   110ba:	b2d2      	uxtb	r2, r2
   110bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   110c0:	b2d2      	uxtb	r2, r2
   110c2:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   110c4:	f242 033a 	movw	r3, #8250	; 0x203a
   110c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110cc:	f242 023a 	movw	r2, #8250	; 0x203a
   110d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110d4:	7812      	ldrb	r2, [r2, #0]
   110d6:	b2d2      	uxtb	r2, r2
   110d8:	f042 0202 	orr.w	r2, r2, #2
   110dc:	b2d2      	uxtb	r2, r2
   110de:	701a      	strb	r2, [r3, #0]
}
   110e0:	46bd      	mov	sp, r7
   110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   110e6:	4770      	bx	lr

000110e8 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   110e8:	b480      	push	{r7}
   110ea:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   110ec:	f24c 634c 	movw	r3, #50764	; 0xc64c
   110f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f4:	781b      	ldrb	r3, [r3, #0]
   110f6:	2b00      	cmp	r3, #0
   110f8:	d10e      	bne.n	11118 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   110fa:	f242 0312 	movw	r3, #8210	; 0x2012
   110fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11102:	f242 0212 	movw	r2, #8210	; 0x2012
   11106:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1110a:	7812      	ldrb	r2, [r2, #0]
   1110c:	b2d2      	uxtb	r2, r2
   1110e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11112:	b2d2      	uxtb	r2, r2
   11114:	701a      	strb	r2, [r3, #0]
   11116:	e047      	b.n	111a8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   11118:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1111c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11120:	781b      	ldrb	r3, [r3, #0]
   11122:	2b08      	cmp	r3, #8
   11124:	d832      	bhi.n	1118c <__vector_5+0xa4>
    if (tx_byte & 0x01)
   11126:	f24c 634b 	movw	r3, #50763	; 0xc64b
   1112a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1112e:	781b      	ldrb	r3, [r3, #0]
   11130:	f003 0301 	and.w	r3, r3, #1
   11134:	2b00      	cmp	r3, #0
   11136:	d00e      	beq.n	11156 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11138:	f242 0312 	movw	r3, #8210	; 0x2012
   1113c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11140:	f242 0212 	movw	r2, #8210	; 0x2012
   11144:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11148:	7812      	ldrb	r2, [r2, #0]
   1114a:	b2d2      	uxtb	r2, r2
   1114c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11150:	b2d2      	uxtb	r2, r2
   11152:	701a      	strb	r2, [r3, #0]
   11154:	e00d      	b.n	11172 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11156:	f242 0312 	movw	r3, #8210	; 0x2012
   1115a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1115e:	f242 0212 	movw	r2, #8210	; 0x2012
   11162:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11166:	7812      	ldrb	r2, [r2, #0]
   11168:	b2d2      	uxtb	r2, r2
   1116a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1116e:	b2d2      	uxtb	r2, r2
   11170:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   11172:	f24c 634b 	movw	r3, #50763	; 0xc64b
   11176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1117a:	781b      	ldrb	r3, [r3, #0]
   1117c:	085b      	lsrs	r3, r3, #1
   1117e:	b2da      	uxtb	r2, r3
   11180:	f24c 634b 	movw	r3, #50763	; 0xc64b
   11184:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11188:	701a      	strb	r2, [r3, #0]
   1118a:	e00d      	b.n	111a8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   1118c:	f242 0312 	movw	r3, #8210	; 0x2012
   11190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11194:	f242 0212 	movw	r2, #8210	; 0x2012
   11198:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1119c:	7812      	ldrb	r2, [r2, #0]
   1119e:	b2d2      	uxtb	r2, r2
   111a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   111a4:	b2d2      	uxtb	r2, r2
   111a6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   111a8:	f24c 634c 	movw	r3, #50764	; 0xc64c
   111ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111b0:	781b      	ldrb	r3, [r3, #0]
   111b2:	3301      	adds	r3, #1
   111b4:	b2da      	uxtb	r2, r3
   111b6:	f24c 634c 	movw	r3, #50764	; 0xc64c
   111ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111be:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   111c0:	f24c 634c 	movw	r3, #50764	; 0xc64c
   111c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111c8:	781b      	ldrb	r3, [r3, #0]
   111ca:	2b09      	cmp	r3, #9
   111cc:	d94d      	bls.n	1126a <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   111ce:	f24c 5349 	movw	r3, #50505	; 0xc549
   111d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111d6:	781a      	ldrb	r2, [r3, #0]
   111d8:	f24c 534a 	movw	r3, #50506	; 0xc54a
   111dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111e0:	781b      	ldrb	r3, [r3, #0]
   111e2:	b2db      	uxtb	r3, r3
   111e4:	429a      	cmp	r2, r3
   111e6:	d10e      	bne.n	11206 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   111e8:	f242 0339 	movw	r3, #8249	; 0x2039
   111ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111f0:	f242 0239 	movw	r2, #8249	; 0x2039
   111f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111f8:	7812      	ldrb	r2, [r2, #0]
   111fa:	b2d2      	uxtb	r2, r2
   111fc:	f022 0210 	bic.w	r2, r2, #16
   11200:	b2d2      	uxtb	r2, r2
   11202:	701a      	strb	r2, [r3, #0]
   11204:	e031      	b.n	1126a <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   11206:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1120a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1120e:	781b      	ldrb	r3, [r3, #0]
   11210:	b2db      	uxtb	r3, r3
   11212:	461a      	mov	r2, r3
   11214:	f24c 534c 	movw	r3, #50508	; 0xc54c
   11218:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1121c:	5c9a      	ldrb	r2, [r3, r2]
   1121e:	f24c 634b 	movw	r3, #50763	; 0xc64b
   11222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11226:	701a      	strb	r2, [r3, #0]
   11228:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1122c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11230:	2200      	movs	r2, #0
   11232:	701a      	strb	r2, [r3, #0]
   11234:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1123c:	781b      	ldrb	r3, [r3, #0]
   1123e:	b2db      	uxtb	r3, r3
   11240:	3301      	adds	r3, #1
   11242:	b2da      	uxtb	r2, r3
   11244:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1124c:	701a      	strb	r2, [r3, #0]
   1124e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11256:	781b      	ldrb	r3, [r3, #0]
   11258:	b2db      	uxtb	r3, r3
   1125a:	2bff      	cmp	r3, #255	; 0xff
   1125c:	d105      	bne.n	1126a <__vector_5+0x182>
   1125e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11262:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11266:	2200      	movs	r2, #0
   11268:	701a      	strb	r2, [r3, #0]
    }
  }
}
   1126a:	46bd      	mov	sp, r7
   1126c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11270:	4770      	bx	lr
   11272:	bf00      	nop

00011274 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   11274:	b480      	push	{r7}
   11276:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   11278:	f24c 637f 	movw	r3, #50815	; 0xc67f
   1127c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11280:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   11282:	f240 533e 	movw	r3, #1342	; 0x53e
   11286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1128a:	2200      	movs	r2, #0
   1128c:	701a      	strb	r2, [r3, #0]
}
   1128e:	46bd      	mov	sp, r7
   11290:	f85d 7b04 	ldr.w	r7, [sp], #4
   11294:	4770      	bx	lr
   11296:	bf00      	nop

00011298 <link_fbw_send>:

void link_fbw_send(void) {
   11298:	b480      	push	{r7}
   1129a:	b083      	sub	sp, #12
   1129c:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   1129e:	f24c 6384 	movw	r3, #50820	; 0xc684
   112a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112a6:	781b      	ldrb	r3, [r3, #0]
   112a8:	b2db      	uxtb	r3, r3
   112aa:	2b00      	cmp	r3, #0
   112ac:	d00c      	beq.n	112c8 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   112ae:	f24c 6385 	movw	r3, #50821	; 0xc685
   112b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112b6:	781b      	ldrb	r3, [r3, #0]
   112b8:	3301      	adds	r3, #1
   112ba:	b2da      	uxtb	r2, r3
   112bc:	f24c 6385 	movw	r3, #50821	; 0xc685
   112c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112c4:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   112c6:	e064      	b.n	11392 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   112c8:	f242 030d 	movw	r3, #8205	; 0x200d
   112cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112d0:	2251      	movs	r2, #81	; 0x51
   112d2:	701a      	strb	r2, [r3, #0]
   112d4:	f242 030e 	movw	r3, #8206	; 0x200e
   112d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112dc:	781b      	ldrb	r3, [r3, #0]
   112de:	b2db      	uxtb	r3, r3
   112e0:	b2db      	uxtb	r3, r3
   112e2:	b25b      	sxtb	r3, r3
   112e4:	2b00      	cmp	r3, #0
   112e6:	da05      	bge.n	112f4 <link_fbw_send+0x5c>
   112e8:	f242 030f 	movw	r3, #8207	; 0x200f
   112ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f0:	781b      	ldrb	r3, [r3, #0]
   112f2:	71fb      	strb	r3, [r7, #7]
   112f4:	f242 030d 	movw	r3, #8205	; 0x200d
   112f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112fc:	f242 020d 	movw	r2, #8205	; 0x200d
   11300:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11304:	7812      	ldrb	r2, [r2, #0]
   11306:	b2d2      	uxtb	r2, r2
   11308:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1130c:	b2d2      	uxtb	r2, r2
   1130e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11310:	f24c 6384 	movw	r3, #50820	; 0xc684
   11314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11318:	2201      	movs	r2, #1
   1131a:	701a      	strb	r2, [r3, #0]
   1131c:	f242 0318 	movw	r3, #8216	; 0x2018
   11320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11324:	f242 0218 	movw	r2, #8216	; 0x2018
   11328:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1132c:	7812      	ldrb	r2, [r2, #0]
   1132e:	b2d2      	uxtb	r2, r2
   11330:	f022 0201 	bic.w	r2, r2, #1
   11334:	b2d2      	uxtb	r2, r2
   11336:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11338:	f24c 6381 	movw	r3, #50817	; 0xc681
   1133c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11340:	2200      	movs	r2, #0
   11342:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   11344:	f24c 6382 	movw	r3, #50818	; 0xc682
   11348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1134c:	2200      	movs	r2, #0
   1134e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11350:	f24c 6381 	movw	r3, #50817	; 0xc681
   11354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11358:	781b      	ldrb	r3, [r3, #0]
   1135a:	461a      	mov	r2, r3
   1135c:	f24c 6368 	movw	r3, #50792	; 0xc668
   11360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11364:	4413      	add	r3, r2
   11366:	781a      	ldrb	r2, [r3, #0]
   11368:	f24c 6383 	movw	r3, #50819	; 0xc683
   1136c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11370:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   11372:	f242 030f 	movw	r3, #8207	; 0x200f
   11376:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1137a:	f24c 6283 	movw	r2, #50819	; 0xc683
   1137e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11382:	7812      	ldrb	r2, [r2, #0]
   11384:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   11386:	f24c 637e 	movw	r3, #50814	; 0xc67e
   1138a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1138e:	2200      	movs	r2, #0
   11390:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   11392:	370c      	adds	r7, #12
   11394:	46bd      	mov	sp, r7
   11396:	f85d 7b04 	ldr.w	r7, [sp], #4
   1139a:	4770      	bx	lr

0001139c <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   1139c:	b480      	push	{r7}
   1139e:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   113a0:	f242 032a 	movw	r3, #8234	; 0x202a
   113a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113a8:	f242 022c 	movw	r2, #8236	; 0x202c
   113ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113b0:	8812      	ldrh	r2, [r2, #0]
   113b2:	b292      	uxth	r2, r2
   113b4:	32c8      	adds	r2, #200	; 0xc8
   113b6:	b292      	uxth	r2, r2
   113b8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   113ba:	f242 0336 	movw	r3, #8246	; 0x2036
   113be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113c2:	f242 0236 	movw	r2, #8246	; 0x2036
   113c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113ca:	7812      	ldrb	r2, [r2, #0]
   113cc:	b2d2      	uxtb	r2, r2
   113ce:	f042 0210 	orr.w	r2, r2, #16
   113d2:	b2d2      	uxtb	r2, r2
   113d4:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   113d6:	f242 0337 	movw	r3, #8247	; 0x2037
   113da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113de:	f242 0237 	movw	r2, #8247	; 0x2037
   113e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113e6:	7812      	ldrb	r2, [r2, #0]
   113e8:	b2d2      	uxtb	r2, r2
   113ea:	f042 0210 	orr.w	r2, r2, #16
   113ee:	b2d2      	uxtb	r2, r2
   113f0:	701a      	strb	r2, [r3, #0]
}
   113f2:	46bd      	mov	sp, r7
   113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   113f8:	4770      	bx	lr
   113fa:	bf00      	nop

000113fc <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   113fc:	b480      	push	{r7}
   113fe:	b083      	sub	sp, #12
   11400:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   11402:	f242 0337 	movw	r3, #8247	; 0x2037
   11406:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1140a:	f242 0237 	movw	r2, #8247	; 0x2037
   1140e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11412:	7812      	ldrb	r2, [r2, #0]
   11414:	b2d2      	uxtb	r2, r2
   11416:	f022 0210 	bic.w	r2, r2, #16
   1141a:	b2d2      	uxtb	r2, r2
   1141c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   1141e:	f24c 6381 	movw	r3, #50817	; 0xc681
   11422:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11426:	781b      	ldrb	r3, [r3, #0]
   11428:	3301      	adds	r3, #1
   1142a:	b2da      	uxtb	r2, r3
   1142c:	f24c 6381 	movw	r3, #50817	; 0xc681
   11430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11434:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   11436:	f24c 6381 	movw	r3, #50817	; 0xc681
   1143a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1143e:	781b      	ldrb	r3, [r3, #0]
   11440:	2b17      	cmp	r3, #23
   11442:	d162      	bne.n	1150a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   11444:	f242 030f 	movw	r3, #8207	; 0x200f
   11448:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1144c:	781b      	ldrb	r3, [r3, #0]
   1144e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11450:	f24c 6382 	movw	r3, #50818	; 0xc682
   11454:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11458:	781b      	ldrb	r3, [r3, #0]
   1145a:	79fa      	ldrb	r2, [r7, #7]
   1145c:	429a      	cmp	r2, r3
   1145e:	d110      	bne.n	11482 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11460:	f24c 637e 	movw	r3, #50814	; 0xc67e
   11464:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11468:	2201      	movs	r2, #1
   1146a:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   1146c:	f24c 6350 	movw	r3, #50768	; 0xc650
   11470:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11474:	7d1a      	ldrb	r2, [r3, #20]
   11476:	f24c 6380 	movw	r3, #50816	; 0xc680
   1147a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1147e:	701a      	strb	r2, [r3, #0]
   11480:	e00c      	b.n	1149c <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   11482:	f24c 637f 	movw	r3, #50815	; 0xc67f
   11486:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1148a:	781b      	ldrb	r3, [r3, #0]
   1148c:	b2db      	uxtb	r3, r3
   1148e:	3301      	adds	r3, #1
   11490:	b2da      	uxtb	r2, r3
   11492:	f24c 637f 	movw	r3, #50815	; 0xc67f
   11496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1149a:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   1149c:	f240 533e 	movw	r3, #1342	; 0x53e
   114a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114a4:	2201      	movs	r2, #1
   114a6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   114a8:	f24c 6384 	movw	r3, #50820	; 0xc684
   114ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114b0:	2200      	movs	r2, #0
   114b2:	701a      	strb	r2, [r3, #0]
   114b4:	f242 0318 	movw	r3, #8216	; 0x2018
   114b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114bc:	f242 0218 	movw	r2, #8216	; 0x2018
   114c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114c4:	7812      	ldrb	r2, [r2, #0]
   114c6:	b2d2      	uxtb	r2, r2
   114c8:	f042 0201 	orr.w	r2, r2, #1
   114cc:	b2d2      	uxtb	r2, r2
   114ce:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   114d0:	f242 030d 	movw	r3, #8205	; 0x200d
   114d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114d8:	f242 020d 	movw	r2, #8205	; 0x200d
   114dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114e0:	7812      	ldrb	r2, [r2, #0]
   114e2:	b2d2      	uxtb	r2, r2
   114e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   114e8:	b2d2      	uxtb	r2, r2
   114ea:	701a      	strb	r2, [r3, #0]
   114ec:	f242 030d 	movw	r3, #8205	; 0x200d
   114f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114f4:	f242 020d 	movw	r2, #8205	; 0x200d
   114f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114fc:	7812      	ldrb	r2, [r2, #0]
   114fe:	b2d2      	uxtb	r2, r2
   11500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11504:	b2d2      	uxtb	r2, r2
   11506:	701a      	strb	r2, [r3, #0]
    return;
   11508:	e051      	b.n	115ae <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   1150a:	f24c 6381 	movw	r3, #50817	; 0xc681
   1150e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11512:	781b      	ldrb	r3, [r3, #0]
   11514:	2b15      	cmp	r3, #21
   11516:	d820      	bhi.n	1155a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11518:	f24c 6381 	movw	r3, #50817	; 0xc681
   1151c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11520:	781b      	ldrb	r3, [r3, #0]
   11522:	461a      	mov	r2, r3
   11524:	f24c 6368 	movw	r3, #50792	; 0xc668
   11528:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1152c:	4413      	add	r3, r2
   1152e:	781b      	ldrb	r3, [r3, #0]
   11530:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   11532:	f242 030f 	movw	r3, #8207	; 0x200f
   11536:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1153a:	79fa      	ldrb	r2, [r7, #7]
   1153c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   1153e:	f24c 6383 	movw	r3, #50819	; 0xc683
   11542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11546:	781a      	ldrb	r2, [r3, #0]
   11548:	79fb      	ldrb	r3, [r7, #7]
   1154a:	4053      	eors	r3, r2
   1154c:	b2da      	uxtb	r2, r3
   1154e:	f24c 6383 	movw	r3, #50819	; 0xc683
   11552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11556:	701a      	strb	r2, [r3, #0]
   11558:	e009      	b.n	1156e <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   1155a:	f242 030f 	movw	r3, #8207	; 0x200f
   1155e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11562:	f24c 6283 	movw	r2, #50819	; 0xc683
   11566:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1156a:	7812      	ldrb	r2, [r2, #0]
   1156c:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   1156e:	f242 030f 	movw	r3, #8207	; 0x200f
   11572:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11576:	781b      	ldrb	r3, [r3, #0]
   11578:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   1157a:	f24c 6381 	movw	r3, #50817	; 0xc681
   1157e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11582:	781b      	ldrb	r3, [r3, #0]
   11584:	1e5a      	subs	r2, r3, #1
   11586:	f24c 6350 	movw	r3, #50768	; 0xc650
   1158a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1158e:	4413      	add	r3, r2
   11590:	79fa      	ldrb	r2, [r7, #7]
   11592:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   11594:	f24c 6382 	movw	r3, #50818	; 0xc682
   11598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1159c:	781a      	ldrb	r2, [r3, #0]
   1159e:	79fb      	ldrb	r3, [r7, #7]
   115a0:	4053      	eors	r3, r2
   115a2:	b2da      	uxtb	r2, r3
   115a4:	f24c 6382 	movw	r3, #50818	; 0xc682
   115a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ac:	701a      	strb	r2, [r3, #0]
}
   115ae:	370c      	adds	r7, #12
   115b0:	46bd      	mov	sp, r7
   115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   115b6:	4770      	bx	lr

000115b8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   115b8:	b480      	push	{r7}
   115ba:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   115bc:	f242 0317 	movw	r3, #8215	; 0x2017
   115c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c4:	f242 0217 	movw	r2, #8215	; 0x2017
   115c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115cc:	7812      	ldrb	r2, [r2, #0]
   115ce:	b2d2      	uxtb	r2, r2
   115d0:	f042 0206 	orr.w	r2, r2, #6
   115d4:	b2d2      	uxtb	r2, r2
   115d6:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   115d8:	f242 0317 	movw	r3, #8215	; 0x2017
   115dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e0:	f242 0217 	movw	r2, #8215	; 0x2017
   115e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115e8:	7812      	ldrb	r2, [r2, #0]
   115ea:	b2d2      	uxtb	r2, r2
   115ec:	f042 0201 	orr.w	r2, r2, #1
   115f0:	b2d2      	uxtb	r2, r2
   115f2:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   115f4:	f24c 6384 	movw	r3, #50820	; 0xc684
   115f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115fc:	2200      	movs	r2, #0
   115fe:	701a      	strb	r2, [r3, #0]
   11600:	f242 0318 	movw	r3, #8216	; 0x2018
   11604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11608:	f242 0218 	movw	r2, #8216	; 0x2018
   1160c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11610:	7812      	ldrb	r2, [r2, #0]
   11612:	b2d2      	uxtb	r2, r2
   11614:	f042 0201 	orr.w	r2, r2, #1
   11618:	b2d2      	uxtb	r2, r2
   1161a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   1161c:	f242 0302 	movw	r3, #8194	; 0x2002
   11620:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11624:	f242 0202 	movw	r2, #8194	; 0x2002
   11628:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1162c:	7812      	ldrb	r2, [r2, #0]
   1162e:	b2d2      	uxtb	r2, r2
   11630:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11634:	b2d2      	uxtb	r2, r2
   11636:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11638:	f24c 6384 	movw	r3, #50820	; 0xc684
   1163c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11640:	2200      	movs	r2, #0
   11642:	701a      	strb	r2, [r3, #0]
   11644:	f242 0303 	movw	r3, #8195	; 0x2003
   11648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1164c:	f242 0203 	movw	r2, #8195	; 0x2003
   11650:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11654:	7812      	ldrb	r2, [r2, #0]
   11656:	b2d2      	uxtb	r2, r2
   11658:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1165c:	b2d2      	uxtb	r2, r2
   1165e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11660:	f24c 6384 	movw	r3, #50820	; 0xc684
   11664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11668:	2200      	movs	r2, #0
   1166a:	701a      	strb	r2, [r3, #0]
}
   1166c:	46bd      	mov	sp, r7
   1166e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11672:	4770      	bx	lr

00011674 <__vector_17>:


SIGNAL(SIG_SPI) {
   11674:	b580      	push	{r7, lr}
   11676:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11678:	f24c 6384 	movw	r3, #50820	; 0xc684
   1167c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11680:	781b      	ldrb	r3, [r3, #0]
   11682:	b2db      	uxtb	r3, r3
   11684:	2b01      	cmp	r3, #1
   11686:	d102      	bne.n	1168e <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11688:	f7ff fe88 	bl	1139c <link_fbw_on_spi_it>
   1168c:	e00b      	b.n	116a6 <__vector_17+0x32>
  else
    fatal_error_nb++;
   1168e:	f24c 5328 	movw	r3, #50472	; 0xc528
   11692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11696:	781b      	ldrb	r3, [r3, #0]
   11698:	3301      	adds	r3, #1
   1169a:	b2da      	uxtb	r2, r3
   1169c:	f24c 5328 	movw	r3, #50472	; 0xc528
   116a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116a4:	701a      	strb	r2, [r3, #0]
}
   116a6:	bd80      	pop	{r7, pc}

000116a8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   116a8:	b480      	push	{r7}
   116aa:	b083      	sub	sp, #12
   116ac:	af00      	add	r7, sp, #0
   116ae:	4603      	mov	r3, r0
   116b0:	6039      	str	r1, [r7, #0]
   116b2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   116b4:	79fa      	ldrb	r2, [r7, #7]
   116b6:	f24c 6398 	movw	r3, #50840	; 0xc698
   116ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116be:	6839      	ldr	r1, [r7, #0]
   116c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   116c4:	370c      	adds	r7, #12
   116c6:	46bd      	mov	sp, r7
   116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   116cc:	4770      	bx	lr
   116ce:	bf00      	nop

000116d0 <adc_init>:

void 
adc_init( void )
{
   116d0:	b480      	push	{r7}
   116d2:	b083      	sub	sp, #12
   116d4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   116d6:	f242 0362 	movw	r3, #8290	; 0x2062
   116da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116de:	2200      	movs	r2, #0
   116e0:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   116e2:	f242 0361 	movw	r3, #8289	; 0x2061
   116e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116ea:	2200      	movs	r2, #0
   116ec:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   116ee:	f242 0307 	movw	r3, #8199	; 0x2007
   116f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f6:	2240      	movs	r2, #64	; 0x40
   116f8:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   116fa:	f242 0308 	movw	r3, #8200	; 0x2008
   116fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11702:	f242 0208 	movw	r2, #8200	; 0x2008
   11706:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1170a:	7812      	ldrb	r2, [r2, #0]
   1170c:	b2d2      	uxtb	r2, r2
   1170e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11712:	b2d2      	uxtb	r2, r2
   11714:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   11716:	f242 0306 	movw	r3, #8198	; 0x2006
   1171a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1171e:	22cf      	movs	r2, #207	; 0xcf
   11720:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11722:	2300      	movs	r3, #0
   11724:	71fb      	strb	r3, [r7, #7]
   11726:	e00a      	b.n	1173e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11728:	79fa      	ldrb	r2, [r7, #7]
   1172a:	f24c 6398 	movw	r3, #50840	; 0xc698
   1172e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11732:	2100      	movs	r1, #0
   11734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11738:	79fb      	ldrb	r3, [r7, #7]
   1173a:	3301      	adds	r3, #1
   1173c:	71fb      	strb	r3, [r7, #7]
   1173e:	79fb      	ldrb	r3, [r7, #7]
   11740:	2b07      	cmp	r3, #7
   11742:	d9f1      	bls.n	11728 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   11744:	370c      	adds	r7, #12
   11746:	46bd      	mov	sp, r7
   11748:	f85d 7b04 	ldr.w	r7, [sp], #4
   1174c:	4770      	bx	lr
   1174e:	bf00      	nop

00011750 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11750:	b480      	push	{r7}
   11752:	b085      	sub	sp, #20
   11754:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   11756:	f242 0307 	movw	r3, #8199	; 0x2007
   1175a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1175e:	781b      	ldrb	r3, [r3, #0]
   11760:	b2db      	uxtb	r3, r3
   11762:	f003 0307 	and.w	r3, r3, #7
   11766:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11768:	7bfa      	ldrb	r2, [r7, #15]
   1176a:	f24c 6398 	movw	r3, #50840	; 0xc698
   1176e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11776:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11778:	f242 0304 	movw	r3, #8196	; 0x2004
   1177c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11780:	881b      	ldrh	r3, [r3, #0]
   11782:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   11784:	7bfa      	ldrb	r2, [r7, #15]
   11786:	f24c 6388 	movw	r3, #50824	; 0xc688
   1178a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1178e:	88f9      	ldrh	r1, [r7, #6]
   11790:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   11794:	68bb      	ldr	r3, [r7, #8]
   11796:	2b00      	cmp	r3, #0
   11798:	d025      	beq.n	117e6 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   1179a:	68bb      	ldr	r3, [r7, #8]
   1179c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   117a0:	3301      	adds	r3, #1
   117a2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   117a4:	7bbb      	ldrb	r3, [r7, #14]
   117a6:	2b1f      	cmp	r3, #31
   117a8:	d901      	bls.n	117ae <__vector_21+0x5e>
   117aa:	2300      	movs	r3, #0
   117ac:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   117ae:	68bb      	ldr	r3, [r7, #8]
   117b0:	881a      	ldrh	r2, [r3, #0]
   117b2:	7bbb      	ldrb	r3, [r7, #14]
   117b4:	68b9      	ldr	r1, [r7, #8]
   117b6:	005b      	lsls	r3, r3, #1
   117b8:	440b      	add	r3, r1
   117ba:	885b      	ldrh	r3, [r3, #2]
   117bc:	1ad3      	subs	r3, r2, r3
   117be:	b29a      	uxth	r2, r3
   117c0:	68bb      	ldr	r3, [r7, #8]
   117c2:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   117c4:	7bbb      	ldrb	r3, [r7, #14]
   117c6:	68ba      	ldr	r2, [r7, #8]
   117c8:	005b      	lsls	r3, r3, #1
   117ca:	4413      	add	r3, r2
   117cc:	88fa      	ldrh	r2, [r7, #6]
   117ce:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   117d0:	68bb      	ldr	r3, [r7, #8]
   117d2:	881a      	ldrh	r2, [r3, #0]
   117d4:	88fb      	ldrh	r3, [r7, #6]
   117d6:	4413      	add	r3, r2
   117d8:	b29a      	uxth	r2, r3
   117da:	68bb      	ldr	r3, [r7, #8]
   117dc:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   117de:	68bb      	ldr	r3, [r7, #8]
   117e0:	7bba      	ldrb	r2, [r7, #14]
   117e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   117e6:	7bfb      	ldrb	r3, [r7, #15]
   117e8:	3301      	adds	r3, #1
   117ea:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   117ec:	7bfb      	ldrb	r3, [r7, #15]
   117ee:	2b07      	cmp	r3, #7
   117f0:	d901      	bls.n	117f6 <__vector_21+0xa6>
    adc_input = 0;
   117f2:	2300      	movs	r3, #0
   117f4:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   117f6:	f242 0307 	movw	r3, #8199	; 0x2007
   117fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117fe:	7bfa      	ldrb	r2, [r7, #15]
   11800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11804:	b2d2      	uxtb	r2, r2
   11806:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11808:	f242 0306 	movw	r3, #8198	; 0x2006
   1180c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11810:	f242 0206 	movw	r2, #8198	; 0x2006
   11814:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11818:	7812      	ldrb	r2, [r2, #0]
   1181a:	b2d2      	uxtb	r2, r2
   1181c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11820:	b2d2      	uxtb	r2, r2
   11822:	701a      	strb	r2, [r3, #0]
  
}
   11824:	3714      	adds	r7, #20
   11826:	46bd      	mov	sp, r7
   11828:	f85d 7b04 	ldr.w	r7, [sp], #4
   1182c:	4770      	bx	lr
   1182e:	bf00      	nop

00011830 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11830:	b580      	push	{r7, lr}
   11832:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   11834:	f003 fca8 	bl	15188 <uart1_init>
#endif
  ubx_status = UNINIT;
   11838:	f24c 73df 	movw	r3, #51167	; 0xc7df
   1183c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11840:	2200      	movs	r2, #0
   11842:	701a      	strb	r2, [r3, #0]
}
   11844:	bd80      	pop	{r7, pc}
   11846:	bf00      	nop

00011848 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11848:	b580      	push	{r7, lr}
   1184a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1184c:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11854:	781b      	ldrb	r3, [r3, #0]
   11856:	2b01      	cmp	r3, #1
   11858:	f040 80f9 	bne.w	11a4e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   1185c:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11864:	781b      	ldrb	r3, [r3, #0]
   11866:	2b08      	cmp	r3, #8
   11868:	d128      	bne.n	118bc <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   1186a:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   1186e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11872:	685a      	ldr	r2, [r3, #4]
   11874:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   11878:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1187c:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   1187e:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11886:	689a      	ldr	r2, [r3, #8]
   11888:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   1188c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11890:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   11892:	4b73      	ldr	r3, [pc, #460]	; (11a60 <parse_gps_msg+0x218>)
   11894:	681b      	ldr	r3, [r3, #0]
   11896:	4618      	mov	r0, r3
   11898:	f006 fdca 	bl	18430 <__aeabi_i2f>
   1189c:	4603      	mov	r3, r0
   1189e:	4618      	mov	r0, r3
   118a0:	f04f 0100 	mov.w	r1, #0
   118a4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   118a8:	f006 feca 	bl	18640 <__aeabi_fdiv>
   118ac:	4603      	mov	r3, r0
   118ae:	461a      	mov	r2, r3
   118b0:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   118b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118b8:	601a      	str	r2, [r3, #0]
   118ba:	e0c8      	b.n	11a4e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   118bc:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   118c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c4:	781b      	ldrb	r3, [r3, #0]
   118c6:	2b03      	cmp	r3, #3
   118c8:	d10a      	bne.n	118e0 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   118ca:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   118ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118d2:	791a      	ldrb	r2, [r3, #4]
   118d4:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   118d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118dc:	701a      	strb	r2, [r3, #0]
   118de:	e0b6      	b.n	11a4e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   118e0:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   118e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118e8:	781b      	ldrb	r3, [r3, #0]
   118ea:	2b12      	cmp	r3, #18
   118ec:	f040 80af 	bne.w	11a4e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   118f0:	4b5c      	ldr	r3, [pc, #368]	; (11a64 <parse_gps_msg+0x21c>)
   118f2:	681b      	ldr	r3, [r3, #0]
   118f4:	4618      	mov	r0, r3
   118f6:	f006 fd97 	bl	18428 <__aeabi_ui2f>
   118fa:	4603      	mov	r3, r0
   118fc:	4618      	mov	r0, r3
   118fe:	f04f 0100 	mov.w	r1, #0
   11902:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11906:	f006 fe9b 	bl	18640 <__aeabi_fdiv>
   1190a:	4603      	mov	r3, r0
   1190c:	461a      	mov	r2, r3
   1190e:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   11912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11916:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11918:	4b51      	ldr	r3, [pc, #324]	; (11a60 <parse_gps_msg+0x218>)
   1191a:	681b      	ldr	r3, [r3, #0]
   1191c:	4618      	mov	r0, r3
   1191e:	f006 fd87 	bl	18430 <__aeabi_i2f>
   11922:	4603      	mov	r3, r0
   11924:	4618      	mov	r0, r3
   11926:	f04f 0100 	mov.w	r1, #0
   1192a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1192e:	f006 fe87 	bl	18640 <__aeabi_fdiv>
   11932:	4603      	mov	r3, r0
   11934:	461a      	mov	r2, r3
   11936:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   1193a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1193e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11940:	4b49      	ldr	r3, [pc, #292]	; (11a68 <parse_gps_msg+0x220>)
   11942:	681b      	ldr	r3, [r3, #0]
   11944:	4618      	mov	r0, r3
   11946:	f006 fd73 	bl	18430 <__aeabi_i2f>
   1194a:	4603      	mov	r3, r0
   1194c:	4618      	mov	r0, r3
   1194e:	f006 f92f 	bl	17bb0 <__aeabi_f2d>
   11952:	4602      	mov	r2, r0
   11954:	460b      	mov	r3, r1
   11956:	4610      	mov	r0, r2
   11958:	4619      	mov	r1, r3
   1195a:	a33d      	add	r3, pc, #244	; (adr r3, 11a50 <parse_gps_msg+0x208>)
   1195c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11960:	f006 faa4 	bl	17eac <__aeabi_ddiv>
   11964:	4602      	mov	r2, r0
   11966:	460b      	mov	r3, r1
   11968:	4610      	mov	r0, r2
   1196a:	4619      	mov	r1, r3
   1196c:	f04f 0200 	mov.w	r2, #0
   11970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11974:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11978:	f006 fa98 	bl	17eac <__aeabi_ddiv>
   1197c:	4602      	mov	r2, r0
   1197e:	460b      	mov	r3, r1
   11980:	4610      	mov	r0, r2
   11982:	4619      	mov	r1, r3
   11984:	a334      	add	r3, pc, #208	; (adr r3, 11a58 <parse_gps_msg+0x210>)
   11986:	e9d3 2300 	ldrd	r2, r3, [r3]
   1198a:	f006 f965 	bl	17c58 <__aeabi_dmul>
   1198e:	4602      	mov	r2, r0
   11990:	460b      	mov	r3, r1
   11992:	4610      	mov	r0, r2
   11994:	4619      	mov	r1, r3
   11996:	f006 fc41 	bl	1821c <__aeabi_d2f>
   1199a:	4602      	mov	r2, r0
   1199c:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   119a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119a4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   119a6:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   119aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ae:	681b      	ldr	r3, [r3, #0]
   119b0:	4618      	mov	r0, r3
   119b2:	f006 fd39 	bl	18428 <__aeabi_ui2f>
   119b6:	4603      	mov	r3, r0
   119b8:	4618      	mov	r0, r3
   119ba:	f04f 0100 	mov.w	r1, #0
   119be:	f2c4 417a 	movt	r1, #17530	; 0x447a
   119c2:	f006 fe3d 	bl	18640 <__aeabi_fdiv>
   119c6:	4603      	mov	r3, r0
   119c8:	461a      	mov	r2, r3
   119ca:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   119ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119d2:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   119d4:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   119d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119dc:	681a      	ldr	r2, [r3, #0]
   119de:	f248 531f 	movw	r3, #34079	; 0x851f
   119e2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   119e6:	fb83 1302 	smull	r1, r3, r3, r2
   119ea:	1159      	asrs	r1, r3, #5
   119ec:	17d3      	asrs	r3, r2, #31
   119ee:	1acb      	subs	r3, r1, r3
   119f0:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   119f4:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   119f8:	4618      	mov	r0, r3
   119fa:	f006 fd19 	bl	18430 <__aeabi_i2f>
   119fe:	4602      	mov	r2, r0
   11a00:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   11a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a08:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11a0a:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   11a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a12:	681a      	ldr	r2, [r3, #0]
   11a14:	f248 531f 	movw	r3, #34079	; 0x851f
   11a18:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11a1c:	fb83 1302 	smull	r1, r3, r3, r2
   11a20:	1159      	asrs	r1, r3, #5
   11a22:	17d3      	asrs	r3, r2, #31
   11a24:	1aca      	subs	r2, r1, r3
   11a26:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11a2a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11a2e:	4413      	add	r3, r2
   11a30:	4618      	mov	r0, r3
   11a32:	f006 fcfd 	bl	18430 <__aeabi_i2f>
   11a36:	4602      	mov	r2, r0
   11a38:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   11a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a40:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11a42:	f24c 63de 	movw	r3, #50910	; 0xc6de
   11a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a4a:	2201      	movs	r2, #1
   11a4c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11a4e:	bd80      	pop	{r7, pc}
   11a50:	00000000 	.word	0x00000000
   11a54:	40f86a00 	.word	0x40f86a00
   11a58:	5a7ed197 	.word	0x5a7ed197
   11a5c:	400921fb 	.word	0x400921fb
   11a60:	2004c6ec 	.word	0x2004c6ec
   11a64:	2004c6f4 	.word	0x2004c6f4
   11a68:	2004c6f8 	.word	0x2004c6f8

00011a6c <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11a6c:	b480      	push	{r7}
   11a6e:	b083      	sub	sp, #12
   11a70:	af00      	add	r7, sp, #0
   11a72:	4603      	mov	r3, r0
   11a74:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   11a76:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a7e:	781b      	ldrb	r3, [r3, #0]
   11a80:	2b06      	cmp	r3, #6
   11a82:	d81d      	bhi.n	11ac0 <parse_ubx+0x54>
    ck_a += c;
   11a84:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a8c:	781a      	ldrb	r2, [r3, #0]
   11a8e:	79fb      	ldrb	r3, [r7, #7]
   11a90:	4413      	add	r3, r2
   11a92:	b2da      	uxtb	r2, r3
   11a94:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a9c:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   11a9e:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aa6:	781a      	ldrb	r2, [r3, #0]
   11aa8:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab0:	781b      	ldrb	r3, [r3, #0]
   11ab2:	4413      	add	r3, r2
   11ab4:	b2da      	uxtb	r2, r3
   11ab6:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11abe:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11ac0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac8:	781b      	ldrb	r3, [r3, #0]
   11aca:	2b00      	cmp	r3, #0
   11acc:	d110      	bne.n	11af0 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11ace:	79fb      	ldrb	r3, [r7, #7]
   11ad0:	2bb5      	cmp	r3, #181	; 0xb5
   11ad2:	f040 8135 	bne.w	11d40 <parse_ubx+0x2d4>
      ubx_status++;
   11ad6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ade:	781b      	ldrb	r3, [r3, #0]
   11ae0:	3301      	adds	r3, #1
   11ae2:	b2da      	uxtb	r2, r3
   11ae4:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aec:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11aee:	e12f      	b.n	11d50 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11af0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af8:	781b      	ldrb	r3, [r3, #0]
   11afa:	2b01      	cmp	r3, #1
   11afc:	d11c      	bne.n	11b38 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11afe:	79fb      	ldrb	r3, [r7, #7]
   11b00:	2b62      	cmp	r3, #98	; 0x62
   11b02:	d000      	beq.n	11b06 <parse_ubx+0x9a>
      goto error;
   11b04:	e11d      	b.n	11d42 <parse_ubx+0x2d6>
    ck_a = 0;
   11b06:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b0e:	2200      	movs	r2, #0
   11b10:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11b12:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b1a:	2200      	movs	r2, #0
   11b1c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b1e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b26:	781b      	ldrb	r3, [r3, #0]
   11b28:	3301      	adds	r3, #1
   11b2a:	b2da      	uxtb	r2, r3
   11b2c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b34:	701a      	strb	r2, [r3, #0]
   11b36:	e103      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11b38:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b40:	781b      	ldrb	r3, [r3, #0]
   11b42:	2b02      	cmp	r3, #2
   11b44:	d127      	bne.n	11b96 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11b46:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b4e:	781b      	ldrb	r3, [r3, #0]
   11b50:	b2db      	uxtb	r3, r3
   11b52:	2b00      	cmp	r3, #0
   11b54:	d00c      	beq.n	11b70 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11b56:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b5e:	781b      	ldrb	r3, [r3, #0]
   11b60:	3301      	adds	r3, #1
   11b62:	b2da      	uxtb	r2, r3
   11b64:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6c:	701a      	strb	r2, [r3, #0]
      goto error;
   11b6e:	e0e8      	b.n	11d42 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11b70:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b78:	79fa      	ldrb	r2, [r7, #7]
   11b7a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b7c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b84:	781b      	ldrb	r3, [r3, #0]
   11b86:	3301      	adds	r3, #1
   11b88:	b2da      	uxtb	r2, r3
   11b8a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b92:	701a      	strb	r2, [r3, #0]
   11b94:	e0d4      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11b96:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b9e:	781b      	ldrb	r3, [r3, #0]
   11ba0:	2b03      	cmp	r3, #3
   11ba2:	d112      	bne.n	11bca <parse_ubx+0x15e>
  {
    ubx_id = c;
   11ba4:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bac:	79fa      	ldrb	r2, [r7, #7]
   11bae:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11bb0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bb8:	781b      	ldrb	r3, [r3, #0]
   11bba:	3301      	adds	r3, #1
   11bbc:	b2da      	uxtb	r2, r3
   11bbe:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc6:	701a      	strb	r2, [r3, #0]
   11bc8:	e0ba      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11bca:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd2:	781b      	ldrb	r3, [r3, #0]
   11bd4:	2b04      	cmp	r3, #4
   11bd6:	d113      	bne.n	11c00 <parse_ubx+0x194>
  {
    ubx_len = c;
   11bd8:	79fb      	ldrb	r3, [r7, #7]
   11bda:	b29a      	uxth	r2, r3
   11bdc:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be4:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11be6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bee:	781b      	ldrb	r3, [r3, #0]
   11bf0:	3301      	adds	r3, #1
   11bf2:	b2da      	uxtb	r2, r3
   11bf4:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bfc:	701a      	strb	r2, [r3, #0]
   11bfe:	e09f      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11c00:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c08:	781b      	ldrb	r3, [r3, #0]
   11c0a:	2b05      	cmp	r3, #5
   11c0c:	d12b      	bne.n	11c66 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11c0e:	79fb      	ldrb	r3, [r7, #7]
   11c10:	021b      	lsls	r3, r3, #8
   11c12:	b29a      	uxth	r2, r3
   11c14:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c1c:	881b      	ldrh	r3, [r3, #0]
   11c1e:	b29b      	uxth	r3, r3
   11c20:	4313      	orrs	r3, r2
   11c22:	b29b      	uxth	r3, r3
   11c24:	b29a      	uxth	r2, r3
   11c26:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c2e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11c30:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c38:	881b      	ldrh	r3, [r3, #0]
   11c3a:	2bff      	cmp	r3, #255	; 0xff
   11c3c:	d900      	bls.n	11c40 <parse_ubx+0x1d4>
      goto error;
   11c3e:	e080      	b.n	11d42 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11c40:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c48:	2200      	movs	r2, #0
   11c4a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11c4c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c54:	781b      	ldrb	r3, [r3, #0]
   11c56:	3301      	adds	r3, #1
   11c58:	b2da      	uxtb	r2, r3
   11c5a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c62:	701a      	strb	r2, [r3, #0]
   11c64:	e06c      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11c66:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c6e:	781b      	ldrb	r3, [r3, #0]
   11c70:	2b06      	cmp	r3, #6
   11c72:	d131      	bne.n	11cd8 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11c74:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c7c:	781b      	ldrb	r3, [r3, #0]
   11c7e:	461a      	mov	r2, r3
   11c80:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c88:	79f9      	ldrb	r1, [r7, #7]
   11c8a:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11c8c:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c94:	781b      	ldrb	r3, [r3, #0]
   11c96:	3301      	adds	r3, #1
   11c98:	b2da      	uxtb	r2, r3
   11c9a:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ca2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11ca4:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cac:	781b      	ldrb	r3, [r3, #0]
   11cae:	461a      	mov	r2, r3
   11cb0:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cb8:	881b      	ldrh	r3, [r3, #0]
   11cba:	429a      	cmp	r2, r3
   11cbc:	d340      	bcc.n	11d40 <parse_ubx+0x2d4>
      ubx_status++;
   11cbe:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cc6:	781b      	ldrb	r3, [r3, #0]
   11cc8:	3301      	adds	r3, #1
   11cca:	b2da      	uxtb	r2, r3
   11ccc:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cd4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11cd6:	e03b      	b.n	11d50 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11cd8:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ce0:	781b      	ldrb	r3, [r3, #0]
   11ce2:	2b07      	cmp	r3, #7
   11ce4:	d115      	bne.n	11d12 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11ce6:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cee:	781b      	ldrb	r3, [r3, #0]
   11cf0:	79fa      	ldrb	r2, [r7, #7]
   11cf2:	429a      	cmp	r2, r3
   11cf4:	d000      	beq.n	11cf8 <parse_ubx+0x28c>
      goto error;
   11cf6:	e024      	b.n	11d42 <parse_ubx+0x2d6>
    ubx_status++;
   11cf8:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d00:	781b      	ldrb	r3, [r3, #0]
   11d02:	3301      	adds	r3, #1
   11d04:	b2da      	uxtb	r2, r3
   11d06:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d0e:	701a      	strb	r2, [r3, #0]
   11d10:	e016      	b.n	11d40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11d12:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d1a:	781b      	ldrb	r3, [r3, #0]
   11d1c:	2b08      	cmp	r3, #8
   11d1e:	d10f      	bne.n	11d40 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11d20:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d28:	781b      	ldrb	r3, [r3, #0]
   11d2a:	79fa      	ldrb	r2, [r7, #7]
   11d2c:	429a      	cmp	r2, r3
   11d2e:	d000      	beq.n	11d32 <parse_ubx+0x2c6>
      goto error;
   11d30:	e007      	b.n	11d42 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11d32:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d3a:	2201      	movs	r2, #1
   11d3c:	701a      	strb	r2, [r3, #0]
    goto restart;
   11d3e:	e000      	b.n	11d42 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11d40:	e006      	b.n	11d50 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11d42:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d4a:	2200      	movs	r2, #0
   11d4c:	701a      	strb	r2, [r3, #0]
  return;
   11d4e:	bf00      	nop
}
   11d50:	370c      	adds	r7, #12
   11d52:	46bd      	mov	sp, r7
   11d54:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d58:	4770      	bx	lr
   11d5a:	bf00      	nop

00011d5c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11d5c:	b580      	push	{r7, lr}
   11d5e:	b082      	sub	sp, #8
   11d60:	af00      	add	r7, sp, #0
   11d62:	f242 039c 	movw	r3, #8348	; 0x209c
   11d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d6a:	781b      	ldrb	r3, [r3, #0]
   11d6c:	71fb      	strb	r3, [r7, #7]
   11d6e:	79fb      	ldrb	r3, [r7, #7]
   11d70:	4618      	mov	r0, r3
   11d72:	f7ff fe7b 	bl	11a6c <parse_ubx>
   11d76:	3708      	adds	r7, #8
   11d78:	46bd      	mov	sp, r7
   11d7a:	bd80      	pop	{r7, pc}
   11d7c:	f3af 8000 	nop.w

00011d80 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11d80:	b580      	push	{r7, lr}
   11d82:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11d84:	f240 5348 	movw	r3, #1352	; 0x548
   11d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d8c:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11d90:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11d94:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11d96:	2001      	movs	r0, #1
   11d98:	f24c 71ec 	movw	r1, #51180	; 0xc7ec
   11d9c:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11da0:	f7ff fc82 	bl	116a8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11da4:	2002      	movs	r0, #2
   11da6:	f64c 0130 	movw	r1, #51248	; 0xc830
   11daa:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11dae:	f7ff fc7b 	bl	116a8 <adc_buf_channel>
}
   11db2:	bd80      	pop	{r7, pc}

00011db4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11db4:	b480      	push	{r7}
   11db6:	b083      	sub	sp, #12
   11db8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11dba:	f24c 73ec 	movw	r3, #51180	; 0xc7ec
   11dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dc2:	881b      	ldrh	r3, [r3, #0]
   11dc4:	095b      	lsrs	r3, r3, #5
   11dc6:	b29b      	uxth	r3, r3
   11dc8:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11dca:	f64c 0330 	movw	r3, #51248	; 0xc830
   11dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dd2:	881b      	ldrh	r3, [r3, #0]
   11dd4:	095b      	lsrs	r3, r3, #5
   11dd6:	b29b      	uxth	r3, r3
   11dd8:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11dda:	88fb      	ldrh	r3, [r7, #6]
   11ddc:	425b      	negs	r3, r3
   11dde:	b29a      	uxth	r2, r3
   11de0:	88bb      	ldrh	r3, [r7, #4]
   11de2:	1ad3      	subs	r3, r2, r3
   11de4:	b29a      	uxth	r2, r3
   11de6:	f240 5342 	movw	r3, #1346	; 0x542
   11dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dee:	881b      	ldrh	r3, [r3, #0]
   11df0:	b29b      	uxth	r3, r3
   11df2:	1ad3      	subs	r3, r2, r3
   11df4:	b29b      	uxth	r3, r3
   11df6:	b29a      	uxth	r2, r3
   11df8:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   11dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e00:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11e02:	88ba      	ldrh	r2, [r7, #4]
   11e04:	88fb      	ldrh	r3, [r7, #6]
   11e06:	1ad3      	subs	r3, r2, r3
   11e08:	b29a      	uxth	r2, r3
   11e0a:	f240 5344 	movw	r3, #1348	; 0x544
   11e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e12:	881b      	ldrh	r3, [r3, #0]
   11e14:	b29b      	uxth	r3, r3
   11e16:	1ad3      	subs	r3, r2, r3
   11e18:	b29b      	uxth	r3, r3
   11e1a:	b29a      	uxth	r2, r3
   11e1c:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e24:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11e26:	370c      	adds	r7, #12
   11e28:	46bd      	mov	sp, r7
   11e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e2e:	4770      	bx	lr

00011e30 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11e30:	b580      	push	{r7, lr}
   11e32:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11e34:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e3c:	881b      	ldrh	r3, [r3, #0]
   11e3e:	b29b      	uxth	r3, r3
   11e40:	425b      	negs	r3, r3
   11e42:	b29b      	uxth	r3, r3
   11e44:	b29a      	uxth	r2, r3
   11e46:	f240 5340 	movw	r3, #1344	; 0x540
   11e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e4e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11e50:	f240 5340 	movw	r3, #1344	; 0x540
   11e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e58:	881b      	ldrh	r3, [r3, #0]
   11e5a:	b21b      	sxth	r3, r3
   11e5c:	4618      	mov	r0, r3
   11e5e:	f005 fe95 	bl	17b8c <__aeabi_i2d>
   11e62:	4602      	mov	r2, r0
   11e64:	460b      	mov	r3, r1
   11e66:	f04f 0000 	mov.w	r0, #0
   11e6a:	f04f 0100 	mov.w	r1, #0
   11e6e:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11e72:	f006 f81b 	bl	17eac <__aeabi_ddiv>
   11e76:	4602      	mov	r2, r0
   11e78:	460b      	mov	r3, r1
   11e7a:	4610      	mov	r0, r2
   11e7c:	4619      	mov	r1, r3
   11e7e:	f006 f9cd 	bl	1821c <__aeabi_d2f>
   11e82:	4602      	mov	r2, r0
   11e84:	f240 5348 	movw	r3, #1352	; 0x548
   11e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e8c:	601a      	str	r2, [r3, #0]
}
   11e8e:	bd80      	pop	{r7, pc}

00011e90 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11e90:	b590      	push	{r4, r7, lr}
   11e92:	b083      	sub	sp, #12
   11e94:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11e96:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e9e:	681a      	ldr	r2, [r3, #0]
   11ea0:	f64c 0374 	movw	r3, #51316	; 0xc874
   11ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ea8:	681b      	ldr	r3, [r3, #0]
   11eaa:	4610      	mov	r0, r2
   11eac:	4619      	mov	r1, r3
   11eae:	f006 fa09 	bl	182c4 <__aeabi_fsub>
   11eb2:	4603      	mov	r3, r0
   11eb4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11eb6:	f240 534c 	movw	r3, #1356	; 0x54c
   11eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ebe:	681b      	ldr	r3, [r3, #0]
   11ec0:	4618      	mov	r0, r3
   11ec2:	6879      	ldr	r1, [r7, #4]
   11ec4:	f006 fb08 	bl	184d8 <__aeabi_fmul>
   11ec8:	4603      	mov	r3, r0
   11eca:	4618      	mov	r0, r3
   11ecc:	f04f 0100 	mov.w	r1, #0
   11ed0:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11ed4:	f006 fc9e 	bl	18814 <__aeabi_fcmplt>
   11ed8:	4603      	mov	r3, r0
   11eda:	2b00      	cmp	r3, #0
   11edc:	d002      	beq.n	11ee4 <roll_pitch_pid_run+0x54>
   11ede:	f64d 2280 	movw	r2, #55936	; 0xda80
   11ee2:	e026      	b.n	11f32 <roll_pitch_pid_run+0xa2>
   11ee4:	f240 534c 	movw	r3, #1356	; 0x54c
   11ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eec:	681b      	ldr	r3, [r3, #0]
   11eee:	4618      	mov	r0, r3
   11ef0:	6879      	ldr	r1, [r7, #4]
   11ef2:	f006 faf1 	bl	184d8 <__aeabi_fmul>
   11ef6:	4603      	mov	r3, r0
   11ef8:	4618      	mov	r0, r3
   11efa:	f04f 0100 	mov.w	r1, #0
   11efe:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f02:	f006 fca5 	bl	18850 <__aeabi_fcmpgt>
   11f06:	4603      	mov	r3, r0
   11f08:	2b00      	cmp	r3, #0
   11f0a:	d002      	beq.n	11f12 <roll_pitch_pid_run+0x82>
   11f0c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11f10:	e00e      	b.n	11f30 <roll_pitch_pid_run+0xa0>
   11f12:	f240 534c 	movw	r3, #1356	; 0x54c
   11f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f1a:	681b      	ldr	r3, [r3, #0]
   11f1c:	4618      	mov	r0, r3
   11f1e:	6879      	ldr	r1, [r7, #4]
   11f20:	f006 fada 	bl	184d8 <__aeabi_fmul>
   11f24:	4603      	mov	r3, r0
   11f26:	4618      	mov	r0, r3
   11f28:	f006 fc9c 	bl	18864 <__aeabi_f2iz>
   11f2c:	4603      	mov	r3, r0
   11f2e:	b29b      	uxth	r3, r3
   11f30:	b29a      	uxth	r2, r3
   11f32:	f64c 037e 	movw	r3, #51326	; 0xc87e
   11f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f3a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11f3c:	f64c 0384 	movw	r3, #51332	; 0xc884
   11f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f44:	681b      	ldr	r3, [r3, #0]
   11f46:	4618      	mov	r0, r3
   11f48:	f04f 0100 	mov.w	r1, #0
   11f4c:	f006 fc62 	bl	18814 <__aeabi_fcmplt>
   11f50:	4603      	mov	r3, r0
   11f52:	2b00      	cmp	r3, #0
   11f54:	d006      	beq.n	11f64 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11f56:	f64c 0384 	movw	r3, #51332	; 0xc884
   11f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f5e:	f04f 0200 	mov.w	r2, #0
   11f62:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11f64:	f64c 3310 	movw	r3, #51984	; 0xcb10
   11f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f6c:	681a      	ldr	r2, [r3, #0]
   11f6e:	f64c 0378 	movw	r3, #51320	; 0xc878
   11f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f76:	681b      	ldr	r3, [r3, #0]
   11f78:	4610      	mov	r0, r2
   11f7a:	4619      	mov	r1, r3
   11f7c:	f006 f9a2 	bl	182c4 <__aeabi_fsub>
   11f80:	4603      	mov	r3, r0
   11f82:	461c      	mov	r4, r3
   11f84:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f8c:	681b      	ldr	r3, [r3, #0]
   11f8e:	4618      	mov	r0, r3
   11f90:	f04f 0100 	mov.w	r1, #0
   11f94:	f006 fc3e 	bl	18814 <__aeabi_fcmplt>
   11f98:	4603      	mov	r3, r0
   11f9a:	2b00      	cmp	r3, #0
   11f9c:	d007      	beq.n	11fae <roll_pitch_pid_run+0x11e>
   11f9e:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fa6:	681b      	ldr	r3, [r3, #0]
   11fa8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11fac:	e004      	b.n	11fb8 <roll_pitch_pid_run+0x128>
   11fae:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fb6:	681a      	ldr	r2, [r3, #0]
   11fb8:	f64c 0384 	movw	r3, #51332	; 0xc884
   11fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fc0:	681b      	ldr	r3, [r3, #0]
   11fc2:	4610      	mov	r0, r2
   11fc4:	4619      	mov	r1, r3
   11fc6:	f006 fa87 	bl	184d8 <__aeabi_fmul>
   11fca:	4603      	mov	r3, r0
   11fcc:	4620      	mov	r0, r4
   11fce:	4619      	mov	r1, r3
   11fd0:	f006 f978 	bl	182c4 <__aeabi_fsub>
   11fd4:	4603      	mov	r3, r0
   11fd6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11fda:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11fdc:	f240 5350 	movw	r3, #1360	; 0x550
   11fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fe4:	681b      	ldr	r3, [r3, #0]
   11fe6:	4618      	mov	r0, r3
   11fe8:	6879      	ldr	r1, [r7, #4]
   11fea:	f006 fa75 	bl	184d8 <__aeabi_fmul>
   11fee:	4603      	mov	r3, r0
   11ff0:	4618      	mov	r0, r3
   11ff2:	f04f 0100 	mov.w	r1, #0
   11ff6:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11ffa:	f006 fc0b 	bl	18814 <__aeabi_fcmplt>
   11ffe:	4603      	mov	r3, r0
   12000:	2b00      	cmp	r3, #0
   12002:	d002      	beq.n	1200a <roll_pitch_pid_run+0x17a>
   12004:	f64d 2280 	movw	r2, #55936	; 0xda80
   12008:	e026      	b.n	12058 <roll_pitch_pid_run+0x1c8>
   1200a:	f240 5350 	movw	r3, #1360	; 0x550
   1200e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12012:	681b      	ldr	r3, [r3, #0]
   12014:	4618      	mov	r0, r3
   12016:	6879      	ldr	r1, [r7, #4]
   12018:	f006 fa5e 	bl	184d8 <__aeabi_fmul>
   1201c:	4603      	mov	r3, r0
   1201e:	4618      	mov	r0, r3
   12020:	f04f 0100 	mov.w	r1, #0
   12024:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12028:	f006 fc12 	bl	18850 <__aeabi_fcmpgt>
   1202c:	4603      	mov	r3, r0
   1202e:	2b00      	cmp	r3, #0
   12030:	d002      	beq.n	12038 <roll_pitch_pid_run+0x1a8>
   12032:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12036:	e00e      	b.n	12056 <roll_pitch_pid_run+0x1c6>
   12038:	f240 5350 	movw	r3, #1360	; 0x550
   1203c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12040:	681b      	ldr	r3, [r3, #0]
   12042:	4618      	mov	r0, r3
   12044:	6879      	ldr	r1, [r7, #4]
   12046:	f006 fa47 	bl	184d8 <__aeabi_fmul>
   1204a:	4603      	mov	r3, r0
   1204c:	4618      	mov	r0, r3
   1204e:	f006 fc09 	bl	18864 <__aeabi_f2iz>
   12052:	4603      	mov	r3, r0
   12054:	b29b      	uxth	r3, r3
   12056:	b29a      	uxth	r2, r3
   12058:	f64c 0380 	movw	r3, #51328	; 0xc880
   1205c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12060:	801a      	strh	r2, [r3, #0]
}
   12062:	370c      	adds	r7, #12
   12064:	46bd      	mov	sp, r7
   12066:	bd90      	pop	{r4, r7, pc}

00012068 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   12068:	b580      	push	{r7, lr}
   1206a:	b082      	sub	sp, #8
   1206c:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   1206e:	f64c 3338 	movw	r3, #52024	; 0xcb38
   12072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12076:	681a      	ldr	r2, [r3, #0]
   12078:	f64c 038c 	movw	r3, #51340	; 0xc88c
   1207c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12080:	681b      	ldr	r3, [r3, #0]
   12082:	4610      	mov	r0, r2
   12084:	4619      	mov	r1, r3
   12086:	f006 f91d 	bl	182c4 <__aeabi_fsub>
   1208a:	4603      	mov	r3, r0
   1208c:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   1208e:	e013      	b.n	120b8 <course_pid_run+0x50>
   12090:	6878      	ldr	r0, [r7, #4]
   12092:	f005 fd8d 	bl	17bb0 <__aeabi_f2d>
   12096:	4602      	mov	r2, r0
   12098:	460b      	mov	r3, r1
   1209a:	4610      	mov	r0, r2
   1209c:	4619      	mov	r1, r3
   1209e:	a348      	add	r3, pc, #288	; (adr r3, 121c0 <course_pid_run+0x158>)
   120a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   120a4:	f005 fc24 	bl	178f0 <__aeabi_dsub>
   120a8:	4602      	mov	r2, r0
   120aa:	460b      	mov	r3, r1
   120ac:	4610      	mov	r0, r2
   120ae:	4619      	mov	r1, r3
   120b0:	f006 f8b4 	bl	1821c <__aeabi_d2f>
   120b4:	4603      	mov	r3, r0
   120b6:	607b      	str	r3, [r7, #4]
   120b8:	6878      	ldr	r0, [r7, #4]
   120ba:	f005 fd79 	bl	17bb0 <__aeabi_f2d>
   120be:	4602      	mov	r2, r0
   120c0:	460b      	mov	r3, r1
   120c2:	4610      	mov	r0, r2
   120c4:	4619      	mov	r1, r3
   120c6:	a340      	add	r3, pc, #256	; (adr r3, 121c8 <course_pid_run+0x160>)
   120c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   120cc:	f006 f854 	bl	18178 <__aeabi_dcmpgt>
   120d0:	4603      	mov	r3, r0
   120d2:	2b00      	cmp	r3, #0
   120d4:	d1dc      	bne.n	12090 <course_pid_run+0x28>
   120d6:	e013      	b.n	12100 <course_pid_run+0x98>
   120d8:	6878      	ldr	r0, [r7, #4]
   120da:	f005 fd69 	bl	17bb0 <__aeabi_f2d>
   120de:	4602      	mov	r2, r0
   120e0:	460b      	mov	r3, r1
   120e2:	4610      	mov	r0, r2
   120e4:	4619      	mov	r1, r3
   120e6:	a336      	add	r3, pc, #216	; (adr r3, 121c0 <course_pid_run+0x158>)
   120e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   120ec:	f005 fc02 	bl	178f4 <__adddf3>
   120f0:	4602      	mov	r2, r0
   120f2:	460b      	mov	r3, r1
   120f4:	4610      	mov	r0, r2
   120f6:	4619      	mov	r1, r3
   120f8:	f006 f890 	bl	1821c <__aeabi_d2f>
   120fc:	4603      	mov	r3, r0
   120fe:	607b      	str	r3, [r7, #4]
   12100:	6878      	ldr	r0, [r7, #4]
   12102:	f005 fd55 	bl	17bb0 <__aeabi_f2d>
   12106:	4602      	mov	r2, r0
   12108:	460b      	mov	r3, r1
   1210a:	4610      	mov	r0, r2
   1210c:	4619      	mov	r1, r3
   1210e:	a330      	add	r3, pc, #192	; (adr r3, 121d0 <course_pid_run+0x168>)
   12110:	e9d3 2300 	ldrd	r2, r3, [r3]
   12114:	f006 f812 	bl	1813c <__aeabi_dcmplt>
   12118:	4603      	mov	r3, r0
   1211a:	2b00      	cmp	r3, #0
   1211c:	d1dc      	bne.n	120d8 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   1211e:	f240 5358 	movw	r3, #1368	; 0x558
   12122:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12126:	681b      	ldr	r3, [r3, #0]
   12128:	4618      	mov	r0, r3
   1212a:	6879      	ldr	r1, [r7, #4]
   1212c:	f006 f9d4 	bl	184d8 <__aeabi_fmul>
   12130:	4603      	mov	r3, r0
   12132:	461a      	mov	r2, r3
   12134:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12138:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1213c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   1213e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12146:	681a      	ldr	r2, [r3, #0]
   12148:	f240 535c 	movw	r3, #1372	; 0x55c
   1214c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12150:	681b      	ldr	r3, [r3, #0]
   12152:	4610      	mov	r0, r2
   12154:	4619      	mov	r1, r3
   12156:	f006 fb7b 	bl	18850 <__aeabi_fcmpgt>
   1215a:	4603      	mov	r3, r0
   1215c:	2b00      	cmp	r3, #0
   1215e:	d00a      	beq.n	12176 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   12160:	f240 535c 	movw	r3, #1372	; 0x55c
   12164:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12168:	681a      	ldr	r2, [r3, #0]
   1216a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1216e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12172:	601a      	str	r2, [r3, #0]
   12174:	e01e      	b.n	121b4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   12176:	f240 535c 	movw	r3, #1372	; 0x55c
   1217a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1217e:	681b      	ldr	r3, [r3, #0]
   12180:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12184:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1218c:	681b      	ldr	r3, [r3, #0]
   1218e:	4610      	mov	r0, r2
   12190:	4619      	mov	r1, r3
   12192:	f006 fb5d 	bl	18850 <__aeabi_fcmpgt>
   12196:	4603      	mov	r3, r0
   12198:	2b00      	cmp	r3, #0
   1219a:	d00b      	beq.n	121b4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   1219c:	f240 535c 	movw	r3, #1372	; 0x55c
   121a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a4:	681b      	ldr	r3, [r3, #0]
   121a6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   121aa:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   121ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121b2:	601a      	str	r2, [r3, #0]
}
   121b4:	3708      	adds	r7, #8
   121b6:	46bd      	mov	sp, r7
   121b8:	bd80      	pop	{r7, pc}
   121ba:	bf00      	nop
   121bc:	f3af 8000 	nop.w
   121c0:	54442d18 	.word	0x54442d18
   121c4:	401921fb 	.word	0x401921fb
   121c8:	54442d18 	.word	0x54442d18
   121cc:	400921fb 	.word	0x400921fb
   121d0:	54442d18 	.word	0x54442d18
   121d4:	c00921fb 	.word	0xc00921fb

000121d8 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   121d8:	b5b0      	push	{r4, r5, r7, lr}
   121da:	b082      	sub	sp, #8
   121dc:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   121de:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   121e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121e6:	681a      	ldr	r2, [r3, #0]
   121e8:	f64c 0390 	movw	r3, #51344	; 0xc890
   121ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121f0:	681b      	ldr	r3, [r3, #0]
   121f2:	4610      	mov	r0, r2
   121f4:	4619      	mov	r1, r3
   121f6:	f006 f865 	bl	182c4 <__aeabi_fsub>
   121fa:	4603      	mov	r3, r0
   121fc:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   121fe:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12202:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12206:	781b      	ldrb	r3, [r3, #0]
   12208:	2b00      	cmp	r3, #0
   1220a:	f000 80a8 	beq.w	1235e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   1220e:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   12212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12216:	881b      	ldrh	r3, [r3, #0]
   12218:	b29a      	uxth	r2, r3
   1221a:	f64c 037c 	movw	r3, #51324	; 0xc87c
   1221e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12222:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   12224:	f240 5364 	movw	r3, #1380	; 0x564
   12228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1222c:	681a      	ldr	r2, [r3, #0]
   1222e:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12232:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12236:	681b      	ldr	r3, [r3, #0]
   12238:	4610      	mov	r0, r2
   1223a:	4619      	mov	r1, r3
   1223c:	f006 f94c 	bl	184d8 <__aeabi_fmul>
   12240:	4603      	mov	r3, r0
   12242:	4618      	mov	r0, r3
   12244:	6879      	ldr	r1, [r7, #4]
   12246:	f006 f83f 	bl	182c8 <__addsf3>
   1224a:	4603      	mov	r3, r0
   1224c:	461a      	mov	r2, r3
   1224e:	f240 5360 	movw	r3, #1376	; 0x560
   12252:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12256:	681b      	ldr	r3, [r3, #0]
   12258:	4610      	mov	r0, r2
   1225a:	4619      	mov	r1, r3
   1225c:	f006 f93c 	bl	184d8 <__aeabi_fmul>
   12260:	4603      	mov	r3, r0
   12262:	461a      	mov	r2, r3
   12264:	f64c 0378 	movw	r3, #51320	; 0xc878
   12268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1226c:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   1226e:	f64c 0378 	movw	r3, #51320	; 0xc878
   12272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12276:	681a      	ldr	r2, [r3, #0]
   12278:	f240 5368 	movw	r3, #1384	; 0x568
   1227c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12280:	681b      	ldr	r3, [r3, #0]
   12282:	4610      	mov	r0, r2
   12284:	4619      	mov	r1, r3
   12286:	f006 fae3 	bl	18850 <__aeabi_fcmpgt>
   1228a:	4603      	mov	r3, r0
   1228c:	2b00      	cmp	r3, #0
   1228e:	d009      	beq.n	122a4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   12290:	f240 5368 	movw	r3, #1384	; 0x568
   12294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12298:	681a      	ldr	r2, [r3, #0]
   1229a:	f64c 0378 	movw	r3, #51320	; 0xc878
   1229e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122a2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   122a4:	f64c 0378 	movw	r3, #51320	; 0xc878
   122a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122ac:	681a      	ldr	r2, [r3, #0]
   122ae:	f240 536c 	movw	r3, #1388	; 0x56c
   122b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122b6:	681b      	ldr	r3, [r3, #0]
   122b8:	4610      	mov	r0, r2
   122ba:	4619      	mov	r1, r3
   122bc:	f006 faaa 	bl	18814 <__aeabi_fcmplt>
   122c0:	4603      	mov	r3, r0
   122c2:	2b00      	cmp	r3, #0
   122c4:	d009      	beq.n	122da <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   122c6:	f240 536c 	movw	r3, #1388	; 0x56c
   122ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ce:	681a      	ldr	r2, [r3, #0]
   122d0:	f64c 0378 	movw	r3, #51320	; 0xc878
   122d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122d8:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   122da:	f64c 039c 	movw	r3, #51356	; 0xc89c
   122de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122e2:	681b      	ldr	r3, [r3, #0]
   122e4:	4618      	mov	r0, r3
   122e6:	6879      	ldr	r1, [r7, #4]
   122e8:	f005 ffee 	bl	182c8 <__addsf3>
   122ec:	4603      	mov	r3, r0
   122ee:	461a      	mov	r2, r3
   122f0:	f64c 039c 	movw	r3, #51356	; 0xc89c
   122f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122f8:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   122fa:	f64c 039c 	movw	r3, #51356	; 0xc89c
   122fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12302:	681b      	ldr	r3, [r3, #0]
   12304:	4618      	mov	r0, r3
   12306:	f04f 0100 	mov.w	r1, #0
   1230a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1230e:	f006 fa9f 	bl	18850 <__aeabi_fcmpgt>
   12312:	4603      	mov	r3, r0
   12314:	2b00      	cmp	r3, #0
   12316:	d008      	beq.n	1232a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12318:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1231c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12320:	f04f 0200 	mov.w	r2, #0
   12324:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12328:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   1232a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1232e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12332:	681b      	ldr	r3, [r3, #0]
   12334:	4618      	mov	r0, r3
   12336:	f04f 0100 	mov.w	r1, #0
   1233a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1233e:	f006 fa69 	bl	18814 <__aeabi_fcmplt>
   12342:	4603      	mov	r3, r0
   12344:	2b00      	cmp	r3, #0
   12346:	d100      	bne.n	1234a <climb_pid_run+0x172>
   12348:	e109      	b.n	1255e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   1234a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1234e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12352:	f04f 0200 	mov.w	r2, #0
   12356:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1235a:	601a      	str	r2, [r3, #0]
   1235c:	e0ff      	b.n	1255e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   1235e:	f64c 0390 	movw	r3, #51344	; 0xc890
   12362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12366:	681b      	ldr	r3, [r3, #0]
   12368:	4618      	mov	r0, r3
   1236a:	f04f 0100 	mov.w	r1, #0
   1236e:	f006 fa6f 	bl	18850 <__aeabi_fcmpgt>
   12372:	4603      	mov	r3, r0
   12374:	2b00      	cmp	r3, #0
   12376:	d010      	beq.n	1239a <climb_pid_run+0x1c2>
   12378:	f64c 0390 	movw	r3, #51344	; 0xc890
   1237c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12380:	681a      	ldr	r2, [r3, #0]
   12382:	f240 5354 	movw	r3, #1364	; 0x554
   12386:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1238a:	681b      	ldr	r3, [r3, #0]
   1238c:	4610      	mov	r0, r2
   1238e:	4619      	mov	r1, r3
   12390:	f006 f8a2 	bl	184d8 <__aeabi_fmul>
   12394:	4603      	mov	r3, r0
   12396:	461a      	mov	r2, r3
   12398:	e001      	b.n	1239e <climb_pid_run+0x1c6>
   1239a:	f04f 0200 	mov.w	r2, #0
   1239e:	f64c 0388 	movw	r3, #51336	; 0xc888
   123a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123a6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   123a8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   123ac:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   123b0:	f64c 0398 	movw	r3, #51352	; 0xc898
   123b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123b8:	681b      	ldr	r3, [r3, #0]
   123ba:	4610      	mov	r0, r2
   123bc:	4619      	mov	r1, r3
   123be:	f006 f88b 	bl	184d8 <__aeabi_fmul>
   123c2:	4603      	mov	r3, r0
   123c4:	4618      	mov	r0, r3
   123c6:	6879      	ldr	r1, [r7, #4]
   123c8:	f005 ff7e 	bl	182c8 <__addsf3>
   123cc:	4603      	mov	r3, r0
   123ce:	461a      	mov	r2, r3
   123d0:	f24c 238f 	movw	r3, #49807	; 0xc28f
   123d4:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   123d8:	4610      	mov	r0, r2
   123da:	4619      	mov	r1, r3
   123dc:	f006 f87c 	bl	184d8 <__aeabi_fmul>
   123e0:	4603      	mov	r3, r0
   123e2:	4618      	mov	r0, r3
   123e4:	f005 fbe4 	bl	17bb0 <__aeabi_f2d>
   123e8:	4602      	mov	r2, r0
   123ea:	460b      	mov	r3, r1
   123ec:	4610      	mov	r0, r2
   123ee:	4619      	mov	r1, r3
   123f0:	a35d      	add	r3, pc, #372	; (adr r3, 12568 <climb_pid_run+0x390>)
   123f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   123f6:	f005 fa7d 	bl	178f4 <__adddf3>
   123fa:	4602      	mov	r2, r0
   123fc:	460b      	mov	r3, r1
   123fe:	4614      	mov	r4, r2
   12400:	461d      	mov	r5, r3
   12402:	f64c 0390 	movw	r3, #51344	; 0xc890
   12406:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1240a:	681b      	ldr	r3, [r3, #0]
   1240c:	4618      	mov	r0, r3
   1240e:	f005 fbcf 	bl	17bb0 <__aeabi_f2d>
   12412:	4602      	mov	r2, r0
   12414:	460b      	mov	r3, r1
   12416:	4610      	mov	r0, r2
   12418:	4619      	mov	r1, r3
   1241a:	a355      	add	r3, pc, #340	; (adr r3, 12570 <climb_pid_run+0x398>)
   1241c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12420:	f005 fc1a 	bl	17c58 <__aeabi_dmul>
   12424:	4602      	mov	r2, r0
   12426:	460b      	mov	r3, r1
   12428:	4620      	mov	r0, r4
   1242a:	4629      	mov	r1, r5
   1242c:	f005 fa62 	bl	178f4 <__adddf3>
   12430:	4602      	mov	r2, r0
   12432:	460b      	mov	r3, r1
   12434:	4610      	mov	r0, r2
   12436:	4619      	mov	r1, r3
   12438:	f005 fef0 	bl	1821c <__aeabi_d2f>
   1243c:	4603      	mov	r3, r0
   1243e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12440:	f64c 0398 	movw	r3, #51352	; 0xc898
   12444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12448:	681b      	ldr	r3, [r3, #0]
   1244a:	4618      	mov	r0, r3
   1244c:	6879      	ldr	r1, [r7, #4]
   1244e:	f005 ff3b 	bl	182c8 <__addsf3>
   12452:	4603      	mov	r3, r0
   12454:	461a      	mov	r2, r3
   12456:	f64c 0398 	movw	r3, #51352	; 0xc898
   1245a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1245e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12460:	f64c 0398 	movw	r3, #51352	; 0xc898
   12464:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12468:	681b      	ldr	r3, [r3, #0]
   1246a:	4618      	mov	r0, r3
   1246c:	f04f 0100 	mov.w	r1, #0
   12470:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12474:	f006 f9ec 	bl	18850 <__aeabi_fcmpgt>
   12478:	4603      	mov	r3, r0
   1247a:	2b00      	cmp	r3, #0
   1247c:	d008      	beq.n	12490 <climb_pid_run+0x2b8>
   1247e:	f64c 0398 	movw	r3, #51352	; 0xc898
   12482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12486:	f04f 0200 	mov.w	r2, #0
   1248a:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   1248e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12490:	f64c 0398 	movw	r3, #51352	; 0xc898
   12494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12498:	681b      	ldr	r3, [r3, #0]
   1249a:	4618      	mov	r0, r3
   1249c:	f04f 0100 	mov.w	r1, #0
   124a0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   124a4:	f006 f9b6 	bl	18814 <__aeabi_fcmplt>
   124a8:	4603      	mov	r3, r0
   124aa:	2b00      	cmp	r3, #0
   124ac:	d008      	beq.n	124c0 <climb_pid_run+0x2e8>
   124ae:	f64c 0398 	movw	r3, #51352	; 0xc898
   124b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124b6:	f04f 0200 	mov.w	r2, #0
   124ba:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   124be:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   124c0:	6838      	ldr	r0, [r7, #0]
   124c2:	f04f 0100 	mov.w	r1, #0
   124c6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   124ca:	f006 f805 	bl	184d8 <__aeabi_fmul>
   124ce:	4603      	mov	r3, r0
   124d0:	4618      	mov	r0, r3
   124d2:	f04f 0100 	mov.w	r1, #0
   124d6:	f006 f99d 	bl	18814 <__aeabi_fcmplt>
   124da:	4603      	mov	r3, r0
   124dc:	2b00      	cmp	r3, #0
   124de:	d001      	beq.n	124e4 <climb_pid_run+0x30c>
   124e0:	2200      	movs	r2, #0
   124e2:	e022      	b.n	1252a <climb_pid_run+0x352>
   124e4:	6838      	ldr	r0, [r7, #0]
   124e6:	f04f 0100 	mov.w	r1, #0
   124ea:	f2c4 6116 	movt	r1, #17942	; 0x4616
   124ee:	f005 fff3 	bl	184d8 <__aeabi_fmul>
   124f2:	4603      	mov	r3, r0
   124f4:	4618      	mov	r0, r3
   124f6:	f04f 0100 	mov.w	r1, #0
   124fa:	f2c4 6116 	movt	r1, #17942	; 0x4616
   124fe:	f006 f9a7 	bl	18850 <__aeabi_fcmpgt>
   12502:	4603      	mov	r3, r0
   12504:	2b00      	cmp	r3, #0
   12506:	d002      	beq.n	1250e <climb_pid_run+0x336>
   12508:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1250c:	e00c      	b.n	12528 <climb_pid_run+0x350>
   1250e:	6838      	ldr	r0, [r7, #0]
   12510:	f04f 0100 	mov.w	r1, #0
   12514:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12518:	f005 ffde 	bl	184d8 <__aeabi_fmul>
   1251c:	4603      	mov	r3, r0
   1251e:	4618      	mov	r0, r3
   12520:	f006 f9a0 	bl	18864 <__aeabi_f2iz>
   12524:	4603      	mov	r3, r0
   12526:	b29b      	uxth	r3, r3
   12528:	b29a      	uxth	r2, r3
   1252a:	f64c 037c 	movw	r3, #51324	; 0xc87c
   1252e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12532:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   12534:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1253c:	681a      	ldr	r2, [r3, #0]
   1253e:	f64c 0388 	movw	r3, #51336	; 0xc888
   12542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12546:	681b      	ldr	r3, [r3, #0]
   12548:	4610      	mov	r0, r2
   1254a:	4619      	mov	r1, r3
   1254c:	f005 febc 	bl	182c8 <__addsf3>
   12550:	4603      	mov	r3, r0
   12552:	461a      	mov	r2, r3
   12554:	f64c 0378 	movw	r3, #51320	; 0xc878
   12558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1255c:	601a      	str	r2, [r3, #0]
  }
}
   1255e:	3708      	adds	r7, #8
   12560:	46bd      	mov	sp, r7
   12562:	bdb0      	pop	{r4, r5, r7, pc}
   12564:	f3af 8000 	nop.w
   12568:	3d70a3d7 	.word	0x3d70a3d7
   1256c:	3fd3d70a 	.word	0x3fd3d70a
   12570:	9999999a 	.word	0x9999999a
   12574:	3fc99999 	.word	0x3fc99999

00012578 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12578:	b580      	push	{r7, lr}
   1257a:	b082      	sub	sp, #8
   1257c:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   1257e:	f64c 3304 	movw	r3, #51972	; 0xcb04
   12582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12586:	681a      	ldr	r2, [r3, #0]
   12588:	f240 5374 	movw	r3, #1396	; 0x574
   1258c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12590:	681b      	ldr	r3, [r3, #0]
   12592:	4610      	mov	r0, r2
   12594:	4619      	mov	r1, r3
   12596:	f005 fe95 	bl	182c4 <__aeabi_fsub>
   1259a:	4603      	mov	r3, r0
   1259c:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   1259e:	f240 5370 	movw	r3, #1392	; 0x570
   125a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125a6:	681b      	ldr	r3, [r3, #0]
   125a8:	4618      	mov	r0, r3
   125aa:	6879      	ldr	r1, [r7, #4]
   125ac:	f005 ff94 	bl	184d8 <__aeabi_fmul>
   125b0:	4603      	mov	r3, r0
   125b2:	461a      	mov	r2, r3
   125b4:	f64c 0394 	movw	r3, #51348	; 0xc894
   125b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125bc:	681b      	ldr	r3, [r3, #0]
   125be:	4610      	mov	r0, r2
   125c0:	4619      	mov	r1, r3
   125c2:	f005 fe81 	bl	182c8 <__addsf3>
   125c6:	4603      	mov	r3, r0
   125c8:	461a      	mov	r2, r3
   125ca:	f64c 0390 	movw	r3, #51344	; 0xc890
   125ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125d2:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   125d4:	f64c 0390 	movw	r3, #51344	; 0xc890
   125d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125dc:	681b      	ldr	r3, [r3, #0]
   125de:	4618      	mov	r0, r3
   125e0:	f04f 0100 	mov.w	r1, #0
   125e4:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   125e8:	f006 f914 	bl	18814 <__aeabi_fcmplt>
   125ec:	4603      	mov	r3, r0
   125ee:	2b00      	cmp	r3, #0
   125f0:	d008      	beq.n	12604 <altitude_pid_run+0x8c>
   125f2:	f64c 0390 	movw	r3, #51344	; 0xc890
   125f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125fa:	f04f 0200 	mov.w	r2, #0
   125fe:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   12602:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   12604:	f64c 0390 	movw	r3, #51344	; 0xc890
   12608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1260c:	681b      	ldr	r3, [r3, #0]
   1260e:	4618      	mov	r0, r3
   12610:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12614:	f006 f91c 	bl	18850 <__aeabi_fcmpgt>
   12618:	4603      	mov	r3, r0
   1261a:	2b00      	cmp	r3, #0
   1261c:	d006      	beq.n	1262c <altitude_pid_run+0xb4>
   1261e:	f64c 0390 	movw	r3, #51344	; 0xc890
   12622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12626:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1262a:	601a      	str	r2, [r3, #0]
}
   1262c:	3708      	adds	r7, #8
   1262e:	46bd      	mov	sp, r7
   12630:	bd80      	pop	{r7, pc}
   12632:	bf00      	nop
   12634:	f3af 8000 	nop.w

00012638 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12638:	b5f0      	push	{r4, r5, r6, r7, lr}
   1263a:	b08b      	sub	sp, #44	; 0x2c
   1263c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   1263e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12646:	781b      	ldrb	r3, [r3, #0]
   12648:	2b00      	cmp	r3, #0
   1264a:	f040 8169 	bne.w	12920 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   1264e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12656:	781b      	ldrb	r3, [r3, #0]
   12658:	2b00      	cmp	r3, #0
   1265a:	d13c      	bne.n	126d6 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   1265c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12660:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12664:	2200      	movs	r2, #0
   12666:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12668:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   1266c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12670:	881b      	ldrh	r3, [r3, #0]
   12672:	2b00      	cmp	r3, #0
   12674:	d000      	beq.n	12678 <auto_nav+0x40>
   12676:	e03d      	b.n	126f4 <auto_nav+0xbc>
	else NextStage(); 
   12678:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1267c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12680:	781b      	ldrb	r3, [r3, #0]
   12682:	3301      	adds	r3, #1
   12684:	b2da      	uxtb	r2, r3
   12686:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1268a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1268e:	701a      	strb	r2, [r3, #0]
   12690:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12698:	681a      	ldr	r2, [r3, #0]
   1269a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1269e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a2:	601a      	str	r2, [r3, #0]
   126a4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   126a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ac:	681a      	ldr	r2, [r3, #0]
   126ae:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   126b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b6:	601a      	str	r2, [r3, #0]
   126b8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   126bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c0:	2200      	movs	r2, #0
   126c2:	801a      	strh	r2, [r3, #0]
   126c4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   126c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126cc:	f04f 0200 	mov.w	r2, #0
   126d0:	601a      	str	r2, [r3, #0]
   126d2:	f002 b883 	b.w	147dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   126d6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126de:	781b      	ldrb	r3, [r3, #0]
   126e0:	2b01      	cmp	r3, #1
   126e2:	d100      	bne.n	126e6 <auto_nav+0xae>
    {   Goto(while_1)}
   126e4:	e7ba      	b.n	1265c <auto_nav+0x24>
    else if (nav_stage == 2)
   126e6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ee:	781b      	ldrb	r3, [r3, #0]
   126f0:	2b02      	cmp	r3, #2
   126f2:	d162      	bne.n	127ba <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   126f4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126fc:	2202      	movs	r2, #2
   126fe:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12700:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   12704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12708:	881b      	ldrh	r3, [r3, #0]
   1270a:	2b08      	cmp	r3, #8
   1270c:	d92e      	bls.n	1276c <auto_nav+0x134>
   1270e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12716:	781b      	ldrb	r3, [r3, #0]
   12718:	3301      	adds	r3, #1
   1271a:	b2da      	uxtb	r2, r3
   1271c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12720:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12724:	701a      	strb	r2, [r3, #0]
   12726:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1272a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1272e:	681a      	ldr	r2, [r3, #0]
   12730:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12738:	601a      	str	r2, [r3, #0]
   1273a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1273e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12742:	681a      	ldr	r2, [r3, #0]
   12744:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1274c:	601a      	str	r2, [r3, #0]
   1274e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12756:	2200      	movs	r2, #0
   12758:	801a      	strh	r2, [r3, #0]
   1275a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1275e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12762:	f04f 0200 	mov.w	r2, #0
   12766:	601a      	str	r2, [r3, #0]
   12768:	f002 b838 	b.w	147dc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   1276c:	f64c 038c 	movw	r3, #51340	; 0xc88c
   12770:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12774:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12778:	f2c4 0296 	movt	r2, #16534	; 0x4096
   1277c:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1277e:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12782:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12786:	2200      	movs	r2, #0
   12788:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   1278a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1278e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12792:	f649 129a 	movw	r2, #39322	; 0x999a
   12796:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   1279a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   1279c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   127a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a4:	2201      	movs	r2, #1
   127a6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   127a8:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   127ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   127b4:	801a      	strh	r2, [r3, #0]
        }
        return;
   127b6:	f002 b811 	b.w	147dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   127ba:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   127be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c2:	781b      	ldrb	r3, [r3, #0]
   127c4:	2b03      	cmp	r3, #3
   127c6:	d168      	bne.n	1289a <auto_nav+0x262>
     {
	nav_stage = 3;	
   127c8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   127cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d0:	2203      	movs	r2, #3
   127d2:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   127d4:	f64c 3304 	movw	r3, #51972	; 0xcb04
   127d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127dc:	681b      	ldr	r3, [r3, #0]
   127de:	4618      	mov	r0, r3
   127e0:	f04f 0100 	mov.w	r1, #0
   127e4:	f2c4 3116 	movt	r1, #17174	; 0x4316
   127e8:	f006 f832 	bl	18850 <__aeabi_fcmpgt>
   127ec:	4603      	mov	r3, r0
   127ee:	2b00      	cmp	r3, #0
   127f0:	d02e      	beq.n	12850 <auto_nav+0x218>
   127f2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   127f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127fa:	781b      	ldrb	r3, [r3, #0]
   127fc:	3301      	adds	r3, #1
   127fe:	b2da      	uxtb	r2, r3
   12800:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12808:	701a      	strb	r2, [r3, #0]
   1280a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1280e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12812:	681a      	ldr	r2, [r3, #0]
   12814:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1281c:	601a      	str	r2, [r3, #0]
   1281e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12826:	681a      	ldr	r2, [r3, #0]
   12828:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1282c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12830:	601a      	str	r2, [r3, #0]
   12832:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12836:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1283a:	2200      	movs	r2, #0
   1283c:	801a      	strh	r2, [r3, #0]
   1283e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12846:	f04f 0200 	mov.w	r2, #0
   1284a:	601a      	str	r2, [r3, #0]
   1284c:	f001 bfc6 	b.w	147dc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12850:	f64c 038c 	movw	r3, #51340	; 0xc88c
   12854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12858:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   1285c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12860:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12862:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1286a:	2200      	movs	r2, #0
   1286c:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   1286e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12872:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12876:	f04f 0200 	mov.w	r2, #0
   1287a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   1287c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12884:	2202      	movs	r2, #2
   12886:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12888:	f64c 0390 	movw	r3, #51344	; 0xc890
   1288c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12890:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12894:	601a      	str	r2, [r3, #0]
        }
        return;
   12896:	f001 bfa1 	b.w	147dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   1289a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1289e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a2:	781b      	ldrb	r3, [r3, #0]
   128a4:	2b04      	cmp	r3, #4
   128a6:	f041 8799 	bne.w	147dc <auto_nav+0x21a4>
        NextBlock()
   128aa:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   128ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b2:	781b      	ldrb	r3, [r3, #0]
   128b4:	3301      	adds	r3, #1
   128b6:	b2da      	uxtb	r2, r3
   128b8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   128bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c0:	701a      	strb	r2, [r3, #0]
   128c2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   128c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ca:	2200      	movs	r2, #0
   128cc:	701a      	strb	r2, [r3, #0]
   128ce:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   128d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d6:	2200      	movs	r2, #0
   128d8:	801a      	strh	r2, [r3, #0]
   128da:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   128de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e2:	681a      	ldr	r2, [r3, #0]
   128e4:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   128e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ec:	601a      	str	r2, [r3, #0]
   128ee:	f64c 3300 	movw	r3, #51968	; 0xcb00
   128f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f6:	681a      	ldr	r2, [r3, #0]
   128f8:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   128fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12900:	601a      	str	r2, [r3, #0]
   12902:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12906:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1290a:	2200      	movs	r2, #0
   1290c:	801a      	strh	r2, [r3, #0]
   1290e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12916:	f04f 0200 	mov.w	r2, #0
   1291a:	601a      	str	r2, [r3, #0]
   1291c:	f001 bf5e 	b.w	147dc <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12920:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12928:	781b      	ldrb	r3, [r3, #0]
   1292a:	2b01      	cmp	r3, #1
   1292c:	f040 81bc 	bne.w	12ca8 <auto_nav+0x670>
{
    nav_block = 1;
   12930:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12934:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12938:	2201      	movs	r2, #1
   1293a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1293c:	f24c 5330 	movw	r3, #50480	; 0xc530
   12940:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12944:	781b      	ldrb	r3, [r3, #0]
   12946:	2b00      	cmp	r3, #0
   12948:	d007      	beq.n	1295a <auto_nav+0x322>
   1294a:	f24c 5330 	movw	r3, #50480	; 0xc530
   1294e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12952:	2200      	movs	r2, #0
   12954:	701a      	strb	r2, [r3, #0]
   12956:	2301      	movs	r3, #1
   12958:	e000      	b.n	1295c <auto_nav+0x324>
   1295a:	2300      	movs	r3, #0
   1295c:	2b00      	cmp	r3, #0
   1295e:	d034      	beq.n	129ca <auto_nav+0x392>
	{ GotoBlock(2) }
   12960:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12968:	2202      	movs	r2, #2
   1296a:	701a      	strb	r2, [r3, #0]
   1296c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12974:	2200      	movs	r2, #0
   12976:	701a      	strb	r2, [r3, #0]
   12978:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   1297c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12980:	2200      	movs	r2, #0
   12982:	801a      	strh	r2, [r3, #0]
   12984:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298c:	681a      	ldr	r2, [r3, #0]
   1298e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12992:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12996:	601a      	str	r2, [r3, #0]
   12998:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1299c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a0:	681a      	ldr	r2, [r3, #0]
   129a2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   129a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129aa:	601a      	str	r2, [r3, #0]
   129ac:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   129b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b4:	2200      	movs	r2, #0
   129b6:	801a      	strh	r2, [r3, #0]
   129b8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   129bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c0:	f04f 0200 	mov.w	r2, #0
   129c4:	601a      	str	r2, [r3, #0]
   129c6:	f001 bf09 	b.w	147dc <auto_nav+0x21a4>
    if(nav_stage == 0)
   129ca:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d2:	781b      	ldrb	r3, [r3, #0]
   129d4:	2b00      	cmp	r3, #0
   129d6:	d12e      	bne.n	12a36 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   129d8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e0:	781b      	ldrb	r3, [r3, #0]
   129e2:	3301      	adds	r3, #1
   129e4:	b2da      	uxtb	r2, r3
   129e6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ee:	701a      	strb	r2, [r3, #0]
   129f0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   129f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f8:	681a      	ldr	r2, [r3, #0]
   129fa:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   129fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a02:	601a      	str	r2, [r3, #0]
   12a04:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a0c:	681a      	ldr	r2, [r3, #0]
   12a0e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a16:	601a      	str	r2, [r3, #0]
   12a18:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a20:	2200      	movs	r2, #0
   12a22:	801a      	strh	r2, [r3, #0]
   12a24:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a2c:	f04f 0200 	mov.w	r2, #0
   12a30:	601a      	str	r2, [r3, #0]
   12a32:	f001 bed3 	b.w	147dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12a36:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a3e:	781b      	ldrb	r3, [r3, #0]
   12a40:	2b01      	cmp	r3, #1
   12a42:	d169      	bne.n	12b18 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12a44:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a4c:	2201      	movs	r2, #1
   12a4e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12a50:	2001      	movs	r0, #1
   12a52:	f001 fed1 	bl	147f8 <approaching>
   12a56:	4603      	mov	r3, r0
   12a58:	2b00      	cmp	r3, #0
   12a5a:	d034      	beq.n	12ac6 <auto_nav+0x48e>
   12a5c:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a64:	2201      	movs	r2, #1
   12a66:	701a      	strb	r2, [r3, #0]
   12a68:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a70:	781b      	ldrb	r3, [r3, #0]
   12a72:	3301      	adds	r3, #1
   12a74:	b2da      	uxtb	r2, r3
   12a76:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a7e:	701a      	strb	r2, [r3, #0]
   12a80:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a88:	681a      	ldr	r2, [r3, #0]
   12a8a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a92:	601a      	str	r2, [r3, #0]
   12a94:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a9c:	681a      	ldr	r2, [r3, #0]
   12a9e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa6:	601a      	str	r2, [r3, #0]
   12aa8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab0:	2200      	movs	r2, #0
   12ab2:	801a      	strh	r2, [r3, #0]
   12ab4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12abc:	f04f 0200 	mov.w	r2, #0
   12ac0:	601a      	str	r2, [r3, #0]
   12ac2:	f001 be8b 	b.w	147dc <auto_nav+0x21a4>
            fly_to(1);
   12ac6:	2001      	movs	r0, #1
   12ac8:	f001 ffca 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   12acc:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad4:	2200      	movs	r2, #0
   12ad6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ad8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae0:	f04f 0200 	mov.w	r2, #0
   12ae4:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12ae6:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aee:	2203      	movs	r2, #3
   12af0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12af2:	f240 5378 	movw	r3, #1400	; 0x578
   12af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12afa:	695a      	ldr	r2, [r3, #20]
   12afc:	f240 5374 	movw	r3, #1396	; 0x574
   12b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b04:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b06:	f64c 0394 	movw	r3, #51348	; 0xc894
   12b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b0e:	f04f 0200 	mov.w	r2, #0
   12b12:	601a      	str	r2, [r3, #0]
          }
          return;
   12b14:	f001 be62 	b.w	147dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12b18:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b20:	781b      	ldrb	r3, [r3, #0]
   12b22:	2b02      	cmp	r3, #2
   12b24:	d169      	bne.n	12bfa <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12b26:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b2e:	2202      	movs	r2, #2
   12b30:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12b32:	2004      	movs	r0, #4
   12b34:	f001 fe60 	bl	147f8 <approaching>
   12b38:	4603      	mov	r3, r0
   12b3a:	2b00      	cmp	r3, #0
   12b3c:	d034      	beq.n	12ba8 <auto_nav+0x570>
   12b3e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b46:	2204      	movs	r2, #4
   12b48:	701a      	strb	r2, [r3, #0]
   12b4a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b52:	781b      	ldrb	r3, [r3, #0]
   12b54:	3301      	adds	r3, #1
   12b56:	b2da      	uxtb	r2, r3
   12b58:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b60:	701a      	strb	r2, [r3, #0]
   12b62:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b6a:	681a      	ldr	r2, [r3, #0]
   12b6c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b74:	601a      	str	r2, [r3, #0]
   12b76:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7e:	681a      	ldr	r2, [r3, #0]
   12b80:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b88:	601a      	str	r2, [r3, #0]
   12b8a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b92:	2200      	movs	r2, #0
   12b94:	801a      	strh	r2, [r3, #0]
   12b96:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b9e:	f04f 0200 	mov.w	r2, #0
   12ba2:	601a      	str	r2, [r3, #0]
   12ba4:	f001 be1a 	b.w	147dc <auto_nav+0x21a4>
            fly_to(4);
   12ba8:	2004      	movs	r0, #4
   12baa:	f001 ff59 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   12bae:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb6:	2200      	movs	r2, #0
   12bb8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12bba:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc2:	f04f 0200 	mov.w	r2, #0
   12bc6:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12bc8:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd0:	2203      	movs	r2, #3
   12bd2:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12bd4:	f240 5378 	movw	r3, #1400	; 0x578
   12bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12bde:	f240 5374 	movw	r3, #1396	; 0x574
   12be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12be6:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12be8:	f64c 0394 	movw	r3, #51348	; 0xc894
   12bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf0:	f04f 0200 	mov.w	r2, #0
   12bf4:	601a      	str	r2, [r3, #0]
          }
          return;
   12bf6:	f001 bdf1 	b.w	147dc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12bfa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c02:	781b      	ldrb	r3, [r3, #0]
   12c04:	2b03      	cmp	r3, #3
   12c06:	d106      	bne.n	12c16 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12c08:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c10:	2203      	movs	r2, #3
   12c12:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12c14:	e6e0      	b.n	129d8 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12c16:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c1e:	781b      	ldrb	r3, [r3, #0]
   12c20:	2b04      	cmp	r3, #4
   12c22:	f041 85db 	bne.w	147dc <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12c26:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c2e:	2204      	movs	r2, #4
   12c30:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12c32:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c3a:	781b      	ldrb	r3, [r3, #0]
   12c3c:	3301      	adds	r3, #1
   12c3e:	b2da      	uxtb	r2, r3
   12c40:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c48:	701a      	strb	r2, [r3, #0]
   12c4a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c52:	2200      	movs	r2, #0
   12c54:	701a      	strb	r2, [r3, #0]
   12c56:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c5e:	2200      	movs	r2, #0
   12c60:	801a      	strh	r2, [r3, #0]
   12c62:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c6a:	681a      	ldr	r2, [r3, #0]
   12c6c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c74:	601a      	str	r2, [r3, #0]
   12c76:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c7e:	681a      	ldr	r2, [r3, #0]
   12c80:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c88:	601a      	str	r2, [r3, #0]
   12c8a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c92:	2200      	movs	r2, #0
   12c94:	801a      	strh	r2, [r3, #0]
   12c96:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c9e:	f04f 0200 	mov.w	r2, #0
   12ca2:	601a      	str	r2, [r3, #0]
   12ca4:	f001 bd9a 	b.w	147dc <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12ca8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cb0:	781b      	ldrb	r3, [r3, #0]
   12cb2:	2b02      	cmp	r3, #2
   12cb4:	f040 8392 	bne.w	133dc <auto_nav+0xda4>
{
	nav_block = 2;
   12cb8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc0:	2202      	movs	r2, #2
   12cc2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12cc4:	f24c 5330 	movw	r3, #50480	; 0xc530
   12cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ccc:	781b      	ldrb	r3, [r3, #0]
   12cce:	2b00      	cmp	r3, #0
   12cd0:	d007      	beq.n	12ce2 <auto_nav+0x6aa>
   12cd2:	f24c 5330 	movw	r3, #50480	; 0xc530
   12cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cda:	2200      	movs	r2, #0
   12cdc:	701a      	strb	r2, [r3, #0]
   12cde:	2301      	movs	r3, #1
   12ce0:	e000      	b.n	12ce4 <auto_nav+0x6ac>
   12ce2:	2300      	movs	r3, #0
   12ce4:	2b00      	cmp	r3, #0
   12ce6:	d034      	beq.n	12d52 <auto_nav+0x71a>
   12ce8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cf0:	2203      	movs	r2, #3
   12cf2:	701a      	strb	r2, [r3, #0]
   12cf4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cfc:	2200      	movs	r2, #0
   12cfe:	701a      	strb	r2, [r3, #0]
   12d00:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d08:	2200      	movs	r2, #0
   12d0a:	801a      	strh	r2, [r3, #0]
   12d0c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d14:	681a      	ldr	r2, [r3, #0]
   12d16:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d1e:	601a      	str	r2, [r3, #0]
   12d20:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d28:	681a      	ldr	r2, [r3, #0]
   12d2a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d32:	601a      	str	r2, [r3, #0]
   12d34:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d3c:	2200      	movs	r2, #0
   12d3e:	801a      	strh	r2, [r3, #0]
   12d40:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d48:	f04f 0200 	mov.w	r2, #0
   12d4c:	601a      	str	r2, [r3, #0]
   12d4e:	f001 bd45 	b.w	147dc <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12d52:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d5a:	781b      	ldrb	r3, [r3, #0]
   12d5c:	2b00      	cmp	r3, #0
   12d5e:	d134      	bne.n	12dca <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12d60:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d68:	2200      	movs	r2, #0
   12d6a:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12d6c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d74:	781b      	ldrb	r3, [r3, #0]
   12d76:	3301      	adds	r3, #1
   12d78:	b2da      	uxtb	r2, r3
   12d7a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d82:	701a      	strb	r2, [r3, #0]
   12d84:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d8c:	681a      	ldr	r2, [r3, #0]
   12d8e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d96:	601a      	str	r2, [r3, #0]
   12d98:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12da0:	681a      	ldr	r2, [r3, #0]
   12da2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12daa:	601a      	str	r2, [r3, #0]
   12dac:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db4:	2200      	movs	r2, #0
   12db6:	801a      	strh	r2, [r3, #0]
   12db8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc0:	f04f 0200 	mov.w	r2, #0
   12dc4:	601a      	str	r2, [r3, #0]
   12dc6:	f001 bd09 	b.w	147dc <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12dca:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dd2:	781b      	ldrb	r3, [r3, #0]
   12dd4:	2b01      	cmp	r3, #1
   12dd6:	d169      	bne.n	12eac <auto_nav+0x874>
    {
         nav_stage =1;
   12dd8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de0:	2201      	movs	r2, #1
   12de2:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12de4:	2006      	movs	r0, #6
   12de6:	f001 fd07 	bl	147f8 <approaching>
   12dea:	4603      	mov	r3, r0
   12dec:	2b00      	cmp	r3, #0
   12dee:	d034      	beq.n	12e5a <auto_nav+0x822>
   12df0:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df8:	2206      	movs	r2, #6
   12dfa:	701a      	strb	r2, [r3, #0]
   12dfc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e04:	781b      	ldrb	r3, [r3, #0]
   12e06:	3301      	adds	r3, #1
   12e08:	b2da      	uxtb	r2, r3
   12e0a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e12:	701a      	strb	r2, [r3, #0]
   12e14:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e1c:	681a      	ldr	r2, [r3, #0]
   12e1e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e26:	601a      	str	r2, [r3, #0]
   12e28:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e30:	681a      	ldr	r2, [r3, #0]
   12e32:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e3a:	601a      	str	r2, [r3, #0]
   12e3c:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e44:	2200      	movs	r2, #0
   12e46:	801a      	strh	r2, [r3, #0]
   12e48:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e50:	f04f 0200 	mov.w	r2, #0
   12e54:	601a      	str	r2, [r3, #0]
   12e56:	f001 bcc1 	b.w	147dc <auto_nav+0x21a4>
            fly_to(6);
   12e5a:	2006      	movs	r0, #6
   12e5c:	f001 fe00 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   12e60:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e68:	2200      	movs	r2, #0
   12e6a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e6c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e74:	f04f 0200 	mov.w	r2, #0
   12e78:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e7a:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e82:	2203      	movs	r2, #3
   12e84:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12e86:	f240 5378 	movw	r3, #1400	; 0x578
   12e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12e90:	f240 5374 	movw	r3, #1396	; 0x574
   12e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e98:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e9a:	f64c 0394 	movw	r3, #51348	; 0xc894
   12e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ea2:	f04f 0200 	mov.w	r2, #0
   12ea6:	601a      	str	r2, [r3, #0]
          }
          return;
   12ea8:	f001 bc98 	b.w	147dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12eac:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eb4:	781b      	ldrb	r3, [r3, #0]
   12eb6:	2b02      	cmp	r3, #2
   12eb8:	d169      	bne.n	12f8e <auto_nav+0x956>
     {
         nav_stage =2; 
   12eba:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ec2:	2202      	movs	r2, #2
   12ec4:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12ec6:	2001      	movs	r0, #1
   12ec8:	f001 fc96 	bl	147f8 <approaching>
   12ecc:	4603      	mov	r3, r0
   12ece:	2b00      	cmp	r3, #0
   12ed0:	d034      	beq.n	12f3c <auto_nav+0x904>
   12ed2:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eda:	2201      	movs	r2, #1
   12edc:	701a      	strb	r2, [r3, #0]
   12ede:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee6:	781b      	ldrb	r3, [r3, #0]
   12ee8:	3301      	adds	r3, #1
   12eea:	b2da      	uxtb	r2, r3
   12eec:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef4:	701a      	strb	r2, [r3, #0]
   12ef6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12efe:	681a      	ldr	r2, [r3, #0]
   12f00:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f08:	601a      	str	r2, [r3, #0]
   12f0a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f12:	681a      	ldr	r2, [r3, #0]
   12f14:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f1c:	601a      	str	r2, [r3, #0]
   12f1e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f26:	2200      	movs	r2, #0
   12f28:	801a      	strh	r2, [r3, #0]
   12f2a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f32:	f04f 0200 	mov.w	r2, #0
   12f36:	601a      	str	r2, [r3, #0]
   12f38:	f001 bc50 	b.w	147dc <auto_nav+0x21a4>
            fly_to(1);
   12f3c:	2001      	movs	r0, #1
   12f3e:	f001 fd8f 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   12f42:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f4a:	2200      	movs	r2, #0
   12f4c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f4e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f56:	f04f 0200 	mov.w	r2, #0
   12f5a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f5c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f64:	2203      	movs	r2, #3
   12f66:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12f68:	f240 5378 	movw	r3, #1400	; 0x578
   12f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f70:	695a      	ldr	r2, [r3, #20]
   12f72:	f240 5374 	movw	r3, #1396	; 0x574
   12f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f7a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f7c:	f64c 0394 	movw	r3, #51348	; 0xc894
   12f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f84:	f04f 0200 	mov.w	r2, #0
   12f88:	601a      	str	r2, [r3, #0]
          }
          return;
   12f8a:	f001 bc27 	b.w	147dc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12f8e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f96:	781b      	ldrb	r3, [r3, #0]
   12f98:	2b03      	cmp	r3, #3
   12f9a:	d16f      	bne.n	1307c <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12f9c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fa4:	2203      	movs	r2, #3
   12fa6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12fa8:	2002      	movs	r0, #2
   12faa:	f001 fc25 	bl	147f8 <approaching>
   12fae:	4603      	mov	r3, r0
   12fb0:	2b00      	cmp	r3, #0
   12fb2:	d034      	beq.n	1301e <auto_nav+0x9e6>
   12fb4:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fbc:	2202      	movs	r2, #2
   12fbe:	701a      	strb	r2, [r3, #0]
   12fc0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc8:	781b      	ldrb	r3, [r3, #0]
   12fca:	3301      	adds	r3, #1
   12fcc:	b2da      	uxtb	r2, r3
   12fce:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd6:	701a      	strb	r2, [r3, #0]
   12fd8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe0:	681a      	ldr	r2, [r3, #0]
   12fe2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fea:	601a      	str	r2, [r3, #0]
   12fec:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ff4:	681a      	ldr	r2, [r3, #0]
   12ff6:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ffe:	601a      	str	r2, [r3, #0]
   13000:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13008:	2200      	movs	r2, #0
   1300a:	801a      	strh	r2, [r3, #0]
   1300c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13014:	f04f 0200 	mov.w	r2, #0
   13018:	601a      	str	r2, [r3, #0]
   1301a:	f001 bbdf 	b.w	147dc <auto_nav+0x21a4>
            route_to(last_wp, 2);
   1301e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13022:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	4618      	mov	r0, r3
   1302a:	2102      	movs	r1, #2
   1302c:	f001 fd3a 	bl	14aa4 <route_to>
            auto_pitch = FALSE;
   13030:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13034:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13038:	2200      	movs	r2, #0
   1303a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1303c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13040:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13044:	f04f 0200 	mov.w	r2, #0
   13048:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1304a:	f24c 532d 	movw	r3, #50477	; 0xc52d
   1304e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13052:	2203      	movs	r2, #3
   13054:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   13056:	f240 5378 	movw	r3, #1400	; 0x578
   1305a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1305e:	6a1a      	ldr	r2, [r3, #32]
   13060:	f240 5374 	movw	r3, #1396	; 0x574
   13064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13068:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1306a:	f64c 0394 	movw	r3, #51348	; 0xc894
   1306e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13072:	f04f 0200 	mov.w	r2, #0
   13076:	601a      	str	r2, [r3, #0]
          }
          return;
   13078:	f001 bbb0 	b.w	147dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   1307c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13084:	781b      	ldrb	r3, [r3, #0]
   13086:	2b04      	cmp	r3, #4
   13088:	d169      	bne.n	1315e <auto_nav+0xb26>
       {
          nav_stage = 4;
   1308a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1308e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13092:	2204      	movs	r2, #4
   13094:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   13096:	2003      	movs	r0, #3
   13098:	f001 fbae 	bl	147f8 <approaching>
   1309c:	4603      	mov	r3, r0
   1309e:	2b00      	cmp	r3, #0
   130a0:	d034      	beq.n	1310c <auto_nav+0xad4>
   130a2:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   130a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130aa:	2203      	movs	r2, #3
   130ac:	701a      	strb	r2, [r3, #0]
   130ae:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b6:	781b      	ldrb	r3, [r3, #0]
   130b8:	3301      	adds	r3, #1
   130ba:	b2da      	uxtb	r2, r3
   130bc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c4:	701a      	strb	r2, [r3, #0]
   130c6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   130ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ce:	681a      	ldr	r2, [r3, #0]
   130d0:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   130d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130d8:	601a      	str	r2, [r3, #0]
   130da:	f64c 3300 	movw	r3, #51968	; 0xcb00
   130de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e2:	681a      	ldr	r2, [r3, #0]
   130e4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   130e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ec:	601a      	str	r2, [r3, #0]
   130ee:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   130f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f6:	2200      	movs	r2, #0
   130f8:	801a      	strh	r2, [r3, #0]
   130fa:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   130fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13102:	f04f 0200 	mov.w	r2, #0
   13106:	601a      	str	r2, [r3, #0]
   13108:	f001 bb68 	b.w	147dc <auto_nav+0x21a4>
            fly_to(3);
   1310c:	2003      	movs	r0, #3
   1310e:	f001 fca7 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   13112:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13116:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1311a:	2200      	movs	r2, #0
   1311c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1311e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13126:	f04f 0200 	mov.w	r2, #0
   1312a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1312c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13134:	2203      	movs	r2, #3
   13136:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   13138:	f240 5378 	movw	r3, #1400	; 0x578
   1313c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13142:	f240 5374 	movw	r3, #1396	; 0x574
   13146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1314a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1314c:	f64c 0394 	movw	r3, #51348	; 0xc894
   13150:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13154:	f04f 0200 	mov.w	r2, #0
   13158:	601a      	str	r2, [r3, #0]
          }
          return;
   1315a:	f001 bb3f 	b.w	147dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   1315e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13166:	781b      	ldrb	r3, [r3, #0]
   13168:	2b05      	cmp	r3, #5
   1316a:	d169      	bne.n	13240 <auto_nav+0xc08>
       {
          nav_stage =5;
   1316c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13174:	2205      	movs	r2, #5
   13176:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   13178:	2004      	movs	r0, #4
   1317a:	f001 fb3d 	bl	147f8 <approaching>
   1317e:	4603      	mov	r3, r0
   13180:	2b00      	cmp	r3, #0
   13182:	d034      	beq.n	131ee <auto_nav+0xbb6>
   13184:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1318c:	2204      	movs	r2, #4
   1318e:	701a      	strb	r2, [r3, #0]
   13190:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13194:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13198:	781b      	ldrb	r3, [r3, #0]
   1319a:	3301      	adds	r3, #1
   1319c:	b2da      	uxtb	r2, r3
   1319e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a6:	701a      	strb	r2, [r3, #0]
   131a8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   131ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b0:	681a      	ldr	r2, [r3, #0]
   131b2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   131b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ba:	601a      	str	r2, [r3, #0]
   131bc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   131c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c4:	681a      	ldr	r2, [r3, #0]
   131c6:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   131ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ce:	601a      	str	r2, [r3, #0]
   131d0:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   131d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d8:	2200      	movs	r2, #0
   131da:	801a      	strh	r2, [r3, #0]
   131dc:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   131e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e4:	f04f 0200 	mov.w	r2, #0
   131e8:	601a      	str	r2, [r3, #0]
   131ea:	f001 baf7 	b.w	147dc <auto_nav+0x21a4>
            fly_to(4);
   131ee:	2004      	movs	r0, #4
   131f0:	f001 fc36 	bl	14a60 <fly_to>
            auto_pitch = FALSE;
   131f4:	f24c 532f 	movw	r3, #50479	; 0xc52f
   131f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131fc:	2200      	movs	r2, #0
   131fe:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13200:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13208:	f04f 0200 	mov.w	r2, #0
   1320c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1320e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13216:	2203      	movs	r2, #3
   13218:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1321a:	f240 5378 	movw	r3, #1400	; 0x578
   1321e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13224:	f240 5374 	movw	r3, #1396	; 0x574
   13228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1322c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1322e:	f64c 0394 	movw	r3, #51348	; 0xc894
   13232:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13236:	f04f 0200 	mov.w	r2, #0
   1323a:	601a      	str	r2, [r3, #0]
          }
          return;
   1323c:	f001 bace 	b.w	147dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13240:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13244:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13248:	781b      	ldrb	r3, [r3, #0]
   1324a:	2b06      	cmp	r3, #6
   1324c:	d16f      	bne.n	1332e <auto_nav+0xcf6>
       {
          nav_stage =6;
   1324e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13256:	2206      	movs	r2, #6
   13258:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   1325a:	2005      	movs	r0, #5
   1325c:	f001 facc 	bl	147f8 <approaching>
   13260:	4603      	mov	r3, r0
   13262:	2b00      	cmp	r3, #0
   13264:	d034      	beq.n	132d0 <auto_nav+0xc98>
   13266:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   1326a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1326e:	2205      	movs	r2, #5
   13270:	701a      	strb	r2, [r3, #0]
   13272:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1327a:	781b      	ldrb	r3, [r3, #0]
   1327c:	3301      	adds	r3, #1
   1327e:	b2da      	uxtb	r2, r3
   13280:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13288:	701a      	strb	r2, [r3, #0]
   1328a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1328e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13292:	681a      	ldr	r2, [r3, #0]
   13294:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1329c:	601a      	str	r2, [r3, #0]
   1329e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   132a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132a6:	681a      	ldr	r2, [r3, #0]
   132a8:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   132ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132b0:	601a      	str	r2, [r3, #0]
   132b2:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   132b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ba:	2200      	movs	r2, #0
   132bc:	801a      	strh	r2, [r3, #0]
   132be:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   132c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132c6:	f04f 0200 	mov.w	r2, #0
   132ca:	601a      	str	r2, [r3, #0]
   132cc:	f001 ba86 	b.w	147dc <auto_nav+0x21a4>
            route_to(last_wp, 5);
   132d0:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   132d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132d8:	781b      	ldrb	r3, [r3, #0]
   132da:	4618      	mov	r0, r3
   132dc:	2105      	movs	r1, #5
   132de:	f001 fbe1 	bl	14aa4 <route_to>
            auto_pitch = FALSE;
   132e2:	f24c 532f 	movw	r3, #50479	; 0xc52f
   132e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ea:	2200      	movs	r2, #0
   132ec:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   132ee:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   132f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f6:	f04f 0200 	mov.w	r2, #0
   132fa:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   132fc:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13304:	2203      	movs	r2, #3
   13306:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13308:	f240 5378 	movw	r3, #1400	; 0x578
   1330c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13312:	f240 5374 	movw	r3, #1396	; 0x574
   13316:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1331a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1331c:	f64c 0394 	movw	r3, #51348	; 0xc894
   13320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13324:	f04f 0200 	mov.w	r2, #0
   13328:	601a      	str	r2, [r3, #0]
          }
          return;
   1332a:	f001 ba57 	b.w	147dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   1332e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13332:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13336:	781b      	ldrb	r3, [r3, #0]
   13338:	2b07      	cmp	r3, #7
   1333a:	d106      	bne.n	1334a <auto_nav+0xd12>
       {
	   nav_stage =7;
   1333c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13344:	2207      	movs	r2, #7
   13346:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13348:	e50a      	b.n	12d60 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   1334a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1334e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13352:	781b      	ldrb	r3, [r3, #0]
   13354:	2b08      	cmp	r3, #8
   13356:	f041 8241 	bne.w	147dc <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   1335a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1335e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13362:	2208      	movs	r2, #8
   13364:	701a      	strb	r2, [r3, #0]
          NextBlock();
   13366:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1336a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1336e:	781b      	ldrb	r3, [r3, #0]
   13370:	3301      	adds	r3, #1
   13372:	b2da      	uxtb	r2, r3
   13374:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13378:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1337c:	701a      	strb	r2, [r3, #0]
   1337e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13382:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13386:	2200      	movs	r2, #0
   13388:	701a      	strb	r2, [r3, #0]
   1338a:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   1338e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13392:	2200      	movs	r2, #0
   13394:	801a      	strh	r2, [r3, #0]
   13396:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1339a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1339e:	681a      	ldr	r2, [r3, #0]
   133a0:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   133a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133a8:	601a      	str	r2, [r3, #0]
   133aa:	f64c 3300 	movw	r3, #51968	; 0xcb00
   133ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b2:	681a      	ldr	r2, [r3, #0]
   133b4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   133b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133bc:	601a      	str	r2, [r3, #0]
   133be:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   133c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133c6:	2200      	movs	r2, #0
   133c8:	801a      	strh	r2, [r3, #0]
   133ca:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   133ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133d2:	f04f 0200 	mov.w	r2, #0
   133d6:	601a      	str	r2, [r3, #0]
   133d8:	f001 ba00 	b.w	147dc <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   133dc:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   133e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133e4:	781b      	ldrb	r3, [r3, #0]
   133e6:	2b03      	cmp	r3, #3
   133e8:	f040 8388 	bne.w	13afc <auto_nav+0x14c4>
{
    nav_block = 3;
   133ec:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   133f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133f4:	2203      	movs	r2, #3
   133f6:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   133f8:	f24c 5330 	movw	r3, #50480	; 0xc530
   133fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13400:	781b      	ldrb	r3, [r3, #0]
   13402:	2b00      	cmp	r3, #0
   13404:	d007      	beq.n	13416 <auto_nav+0xdde>
   13406:	f24c 5330 	movw	r3, #50480	; 0xc530
   1340a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1340e:	2200      	movs	r2, #0
   13410:	701a      	strb	r2, [r3, #0]
   13412:	2301      	movs	r3, #1
   13414:	e000      	b.n	13418 <auto_nav+0xde0>
   13416:	2300      	movs	r3, #0
   13418:	2b00      	cmp	r3, #0
   1341a:	d034      	beq.n	13486 <auto_nav+0xe4e>
   1341c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13424:	2204      	movs	r2, #4
   13426:	701a      	strb	r2, [r3, #0]
   13428:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1342c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13430:	2200      	movs	r2, #0
   13432:	701a      	strb	r2, [r3, #0]
   13434:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1343c:	2200      	movs	r2, #0
   1343e:	801a      	strh	r2, [r3, #0]
   13440:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13448:	681a      	ldr	r2, [r3, #0]
   1344a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1344e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13452:	601a      	str	r2, [r3, #0]
   13454:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13458:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1345c:	681a      	ldr	r2, [r3, #0]
   1345e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13466:	601a      	str	r2, [r3, #0]
   13468:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1346c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13470:	2200      	movs	r2, #0
   13472:	801a      	strh	r2, [r3, #0]
   13474:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13478:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1347c:	f04f 0200 	mov.w	r2, #0
   13480:	601a      	str	r2, [r3, #0]
   13482:	f001 b9ab 	b.w	147dc <auto_nav+0x21a4>
    if(nav_stage == 0)
   13486:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1348a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1348e:	781b      	ldrb	r3, [r3, #0]
   13490:	2b00      	cmp	r3, #0
   13492:	f040 82ea 	bne.w	13a6a <auto_nav+0x1432>
    {
        nav_stage = 0;
   13496:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1349a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1349e:	2200      	movs	r2, #0
   134a0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   134a2:	f24c 532c 	movw	r3, #50476	; 0xc52c
   134a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134aa:	781b      	ldrb	r3, [r3, #0]
   134ac:	2b02      	cmp	r3, #2
   134ae:	f040 81a5 	bne.w	137fc <auto_nav+0x11c4>
   134b2:	f24c 6350 	movw	r3, #50768	; 0xc650
   134b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ba:	88db      	ldrh	r3, [r3, #6]
   134bc:	84fb      	strh	r3, [r7, #38]	; 0x26
   134be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   134c2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   134c6:	dc04      	bgt.n	134d2 <auto_nav+0xe9a>
   134c8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   134cc:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   134d0:	da7e      	bge.n	135d0 <auto_nav+0xf98>
   134d2:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   134d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134da:	681b      	ldr	r3, [r3, #0]
   134dc:	4618      	mov	r0, r3
   134de:	f004 fb67 	bl	17bb0 <__aeabi_f2d>
   134e2:	4604      	mov	r4, r0
   134e4:	460d      	mov	r5, r1
   134e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   134ea:	4618      	mov	r0, r3
   134ec:	f004 ffa0 	bl	18430 <__aeabi_i2f>
   134f0:	4603      	mov	r3, r0
   134f2:	4618      	mov	r0, r3
   134f4:	f04f 0100 	mov.w	r1, #0
   134f8:	f2c4 6116 	movt	r1, #17942	; 0x4616
   134fc:	f005 f8a0 	bl	18640 <__aeabi_fdiv>
   13500:	4603      	mov	r3, r0
   13502:	4618      	mov	r0, r3
   13504:	f004 fb54 	bl	17bb0 <__aeabi_f2d>
   13508:	4602      	mov	r2, r0
   1350a:	460b      	mov	r3, r1
   1350c:	4610      	mov	r0, r2
   1350e:	4619      	mov	r1, r3
   13510:	f04f 0200 	mov.w	r2, #0
   13514:	f04f 0300 	mov.w	r3, #0
   13518:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1351c:	f004 fb9c 	bl	17c58 <__aeabi_dmul>
   13520:	4602      	mov	r2, r0
   13522:	460b      	mov	r3, r1
   13524:	4610      	mov	r0, r2
   13526:	4619      	mov	r1, r3
   13528:	f04f 0200 	mov.w	r2, #0
   1352c:	f04f 0300 	mov.w	r3, #0
   13530:	f004 f9e0 	bl	178f4 <__adddf3>
   13534:	4602      	mov	r2, r0
   13536:	460b      	mov	r3, r1
   13538:	4620      	mov	r0, r4
   1353a:	4629      	mov	r1, r5
   1353c:	f004 f9da 	bl	178f4 <__adddf3>
   13540:	4602      	mov	r2, r0
   13542:	460b      	mov	r3, r1
   13544:	4610      	mov	r0, r2
   13546:	4619      	mov	r1, r3
   13548:	f004 fe68 	bl	1821c <__aeabi_d2f>
   1354c:	4602      	mov	r2, r0
   1354e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13556:	601a      	str	r2, [r3, #0]
   13558:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1355c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13560:	681b      	ldr	r3, [r3, #0]
   13562:	4618      	mov	r0, r3
   13564:	f04f 0100 	mov.w	r1, #0
   13568:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1356c:	f005 f95c 	bl	18828 <__aeabi_fcmple>
   13570:	4603      	mov	r3, r0
   13572:	2b00      	cmp	r3, #0
   13574:	d005      	beq.n	13582 <auto_nav+0xf4a>
   13576:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1357a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1357e:	681a      	ldr	r2, [r3, #0]
   13580:	e003      	b.n	1358a <auto_nav+0xf52>
   13582:	f04f 0200 	mov.w	r2, #0
   13586:	f2c4 327a 	movt	r2, #17274	; 0x437a
   1358a:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1358e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13592:	601a      	str	r2, [r3, #0]
   13594:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1359c:	681b      	ldr	r3, [r3, #0]
   1359e:	4618      	mov	r0, r3
   135a0:	f04f 0100 	mov.w	r1, #0
   135a4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   135a8:	f005 f948 	bl	1883c <__aeabi_fcmpge>
   135ac:	4603      	mov	r3, r0
   135ae:	2b00      	cmp	r3, #0
   135b0:	d005      	beq.n	135be <auto_nav+0xf86>
   135b2:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ba:	681a      	ldr	r2, [r3, #0]
   135bc:	e003      	b.n	135c6 <auto_nav+0xf8e>
   135be:	f04f 0200 	mov.w	r2, #0
   135c2:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   135c6:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ce:	601a      	str	r2, [r3, #0]
   135d0:	f24c 6350 	movw	r3, #50768	; 0xc650
   135d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135d8:	889b      	ldrh	r3, [r3, #4]
   135da:	84bb      	strh	r3, [r7, #36]	; 0x24
   135dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   135e0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   135e4:	dc04      	bgt.n	135f0 <auto_nav+0xfb8>
   135e6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   135ea:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   135ee:	da7e      	bge.n	136ee <auto_nav+0x10b6>
   135f0:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135f8:	681b      	ldr	r3, [r3, #0]
   135fa:	4618      	mov	r0, r3
   135fc:	f004 fad8 	bl	17bb0 <__aeabi_f2d>
   13600:	4604      	mov	r4, r0
   13602:	460d      	mov	r5, r1
   13604:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13608:	4618      	mov	r0, r3
   1360a:	f004 ff11 	bl	18430 <__aeabi_i2f>
   1360e:	4603      	mov	r3, r0
   13610:	4618      	mov	r0, r3
   13612:	f04f 0100 	mov.w	r1, #0
   13616:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1361a:	f005 f811 	bl	18640 <__aeabi_fdiv>
   1361e:	4603      	mov	r3, r0
   13620:	4618      	mov	r0, r3
   13622:	f004 fac5 	bl	17bb0 <__aeabi_f2d>
   13626:	4602      	mov	r2, r0
   13628:	460b      	mov	r3, r1
   1362a:	4610      	mov	r0, r2
   1362c:	4619      	mov	r1, r3
   1362e:	f04f 0200 	mov.w	r2, #0
   13632:	f04f 0300 	mov.w	r3, #0
   13636:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1363a:	f004 fb0d 	bl	17c58 <__aeabi_dmul>
   1363e:	4602      	mov	r2, r0
   13640:	460b      	mov	r3, r1
   13642:	4610      	mov	r0, r2
   13644:	4619      	mov	r1, r3
   13646:	f04f 0200 	mov.w	r2, #0
   1364a:	f04f 0300 	mov.w	r3, #0
   1364e:	f004 f951 	bl	178f4 <__adddf3>
   13652:	4602      	mov	r2, r0
   13654:	460b      	mov	r3, r1
   13656:	4620      	mov	r0, r4
   13658:	4629      	mov	r1, r5
   1365a:	f004 f94b 	bl	178f4 <__adddf3>
   1365e:	4602      	mov	r2, r0
   13660:	460b      	mov	r3, r1
   13662:	4610      	mov	r0, r2
   13664:	4619      	mov	r1, r3
   13666:	f004 fdd9 	bl	1821c <__aeabi_d2f>
   1366a:	4602      	mov	r2, r0
   1366c:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13674:	601a      	str	r2, [r3, #0]
   13676:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1367a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1367e:	681b      	ldr	r3, [r3, #0]
   13680:	4618      	mov	r0, r3
   13682:	f04f 0100 	mov.w	r1, #0
   13686:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1368a:	f005 f8cd 	bl	18828 <__aeabi_fcmple>
   1368e:	4603      	mov	r3, r0
   13690:	2b00      	cmp	r3, #0
   13692:	d005      	beq.n	136a0 <auto_nav+0x1068>
   13694:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1369c:	681a      	ldr	r2, [r3, #0]
   1369e:	e003      	b.n	136a8 <auto_nav+0x1070>
   136a0:	f04f 0200 	mov.w	r2, #0
   136a4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   136a8:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136b0:	601a      	str	r2, [r3, #0]
   136b2:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136ba:	681b      	ldr	r3, [r3, #0]
   136bc:	4618      	mov	r0, r3
   136be:	f04f 0100 	mov.w	r1, #0
   136c2:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   136c6:	f005 f8b9 	bl	1883c <__aeabi_fcmpge>
   136ca:	4603      	mov	r3, r0
   136cc:	2b00      	cmp	r3, #0
   136ce:	d005      	beq.n	136dc <auto_nav+0x10a4>
   136d0:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136d8:	681a      	ldr	r2, [r3, #0]
   136da:	e003      	b.n	136e4 <auto_nav+0x10ac>
   136dc:	f04f 0200 	mov.w	r2, #0
   136e0:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   136e4:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136ec:	601a      	str	r2, [r3, #0]
   136ee:	f24c 532d 	movw	r3, #50477	; 0xc52d
   136f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136f6:	2203      	movs	r2, #3
   136f8:	701a      	strb	r2, [r3, #0]
   136fa:	f24c 6350 	movw	r3, #50768	; 0xc650
   136fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13702:	885b      	ldrh	r3, [r3, #2]
   13704:	847b      	strh	r3, [r7, #34]	; 0x22
   13706:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1370a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1370e:	dc04      	bgt.n	1371a <auto_nav+0x10e2>
   13710:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13714:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13718:	da70      	bge.n	137fc <auto_nav+0x11c4>
   1371a:	f240 5374 	movw	r3, #1396	; 0x574
   1371e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13722:	681b      	ldr	r3, [r3, #0]
   13724:	4618      	mov	r0, r3
   13726:	f004 fa43 	bl	17bb0 <__aeabi_f2d>
   1372a:	4604      	mov	r4, r0
   1372c:	460d      	mov	r5, r1
   1372e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13732:	4618      	mov	r0, r3
   13734:	f004 fe7c 	bl	18430 <__aeabi_i2f>
   13738:	4603      	mov	r3, r0
   1373a:	4618      	mov	r0, r3
   1373c:	f04f 0100 	mov.w	r1, #0
   13740:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13744:	f004 ff7c 	bl	18640 <__aeabi_fdiv>
   13748:	4603      	mov	r3, r0
   1374a:	4618      	mov	r0, r3
   1374c:	f004 fa30 	bl	17bb0 <__aeabi_f2d>
   13750:	4602      	mov	r2, r0
   13752:	460b      	mov	r3, r1
   13754:	f04f 0000 	mov.w	r0, #0
   13758:	f04f 0100 	mov.w	r1, #0
   1375c:	f004 f8c8 	bl	178f0 <__aeabi_dsub>
   13760:	4602      	mov	r2, r0
   13762:	460b      	mov	r3, r1
   13764:	4620      	mov	r0, r4
   13766:	4629      	mov	r1, r5
   13768:	f004 f8c4 	bl	178f4 <__adddf3>
   1376c:	4602      	mov	r2, r0
   1376e:	460b      	mov	r3, r1
   13770:	4610      	mov	r0, r2
   13772:	4619      	mov	r1, r3
   13774:	f004 fd52 	bl	1821c <__aeabi_d2f>
   13778:	4602      	mov	r2, r0
   1377a:	f240 5374 	movw	r3, #1396	; 0x574
   1377e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13782:	601a      	str	r2, [r3, #0]
   13784:	f240 5374 	movw	r3, #1396	; 0x574
   13788:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1378c:	681b      	ldr	r3, [r3, #0]
   1378e:	4618      	mov	r0, r3
   13790:	f04f 0100 	mov.w	r1, #0
   13794:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13798:	f005 f850 	bl	1883c <__aeabi_fcmpge>
   1379c:	4603      	mov	r3, r0
   1379e:	2b00      	cmp	r3, #0
   137a0:	d005      	beq.n	137ae <auto_nav+0x1176>
   137a2:	f240 5374 	movw	r3, #1396	; 0x574
   137a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137aa:	681a      	ldr	r2, [r3, #0]
   137ac:	e003      	b.n	137b6 <auto_nav+0x117e>
   137ae:	f04f 0200 	mov.w	r2, #0
   137b2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   137b6:	f240 5374 	movw	r3, #1396	; 0x574
   137ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137be:	601a      	str	r2, [r3, #0]
   137c0:	f240 5374 	movw	r3, #1396	; 0x574
   137c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137c8:	681b      	ldr	r3, [r3, #0]
   137ca:	4618      	mov	r0, r3
   137cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   137d0:	f2c4 3189 	movt	r1, #17289	; 0x4389
   137d4:	f005 f828 	bl	18828 <__aeabi_fcmple>
   137d8:	4603      	mov	r3, r0
   137da:	2b00      	cmp	r3, #0
   137dc:	d005      	beq.n	137ea <auto_nav+0x11b2>
   137de:	f240 5374 	movw	r3, #1396	; 0x574
   137e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137e6:	681a      	ldr	r2, [r3, #0]
   137e8:	e003      	b.n	137f2 <auto_nav+0x11ba>
   137ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   137ee:	f2c4 3289 	movt	r2, #17289	; 0x4389
   137f2:	f240 5374 	movw	r3, #1396	; 0x574
   137f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137fa:	601a      	str	r2, [r3, #0]
   137fc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13804:	681a      	ldr	r2, [r3, #0]
   13806:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1380a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1380e:	681b      	ldr	r3, [r3, #0]
   13810:	4610      	mov	r0, r2
   13812:	4619      	mov	r1, r3
   13814:	f004 fd56 	bl	182c4 <__aeabi_fsub>
   13818:	4603      	mov	r3, r0
   1381a:	4618      	mov	r0, r3
   1381c:	f004 f9c8 	bl	17bb0 <__aeabi_f2d>
   13820:	4604      	mov	r4, r0
   13822:	460d      	mov	r5, r1
   13824:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1382c:	681a      	ldr	r2, [r3, #0]
   1382e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13832:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13836:	681b      	ldr	r3, [r3, #0]
   13838:	4610      	mov	r0, r2
   1383a:	4619      	mov	r1, r3
   1383c:	f004 fd42 	bl	182c4 <__aeabi_fsub>
   13840:	4603      	mov	r3, r0
   13842:	4618      	mov	r0, r3
   13844:	f004 f9b4 	bl	17bb0 <__aeabi_f2d>
   13848:	4602      	mov	r2, r0
   1384a:	460b      	mov	r3, r1
   1384c:	4620      	mov	r0, r4
   1384e:	4629      	mov	r1, r5
   13850:	f002 fa12 	bl	15c78 <pp_atan2>
   13854:	4602      	mov	r2, r0
   13856:	460b      	mov	r3, r1
   13858:	4610      	mov	r0, r2
   1385a:	4619      	mov	r1, r3
   1385c:	f004 fcde 	bl	1821c <__aeabi_d2f>
   13860:	4603      	mov	r3, r0
   13862:	61fb      	str	r3, [r7, #28]
   13864:	69f8      	ldr	r0, [r7, #28]
   13866:	f004 f9a3 	bl	17bb0 <__aeabi_f2d>
   1386a:	4604      	mov	r4, r0
   1386c:	460d      	mov	r5, r1
   1386e:	f64c 3334 	movw	r3, #52020	; 0xcb34
   13872:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13876:	681b      	ldr	r3, [r3, #0]
   13878:	4618      	mov	r0, r3
   1387a:	f04f 0100 	mov.w	r1, #0
   1387e:	f2cc 2148 	movt	r1, #49736	; 0xc248
   13882:	f004 fe29 	bl	184d8 <__aeabi_fmul>
   13886:	4603      	mov	r3, r0
   13888:	4618      	mov	r0, r3
   1388a:	f004 f991 	bl	17bb0 <__aeabi_f2d>
   1388e:	4602      	mov	r2, r0
   13890:	460b      	mov	r3, r1
   13892:	f04f 0000 	mov.w	r0, #0
   13896:	f04f 0100 	mov.w	r1, #0
   1389a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1389e:	f004 fb05 	bl	17eac <__aeabi_ddiv>
   138a2:	4602      	mov	r2, r0
   138a4:	460b      	mov	r3, r1
   138a6:	4620      	mov	r0, r4
   138a8:	4629      	mov	r1, r5
   138aa:	f004 f823 	bl	178f4 <__adddf3>
   138ae:	4602      	mov	r2, r0
   138b0:	460b      	mov	r3, r1
   138b2:	4610      	mov	r0, r2
   138b4:	4619      	mov	r1, r3
   138b6:	f004 fcb1 	bl	1821c <__aeabi_d2f>
   138ba:	4603      	mov	r3, r0
   138bc:	61bb      	str	r3, [r7, #24]
   138be:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   138c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138c6:	681b      	ldr	r3, [r3, #0]
   138c8:	4618      	mov	r0, r3
   138ca:	f004 f971 	bl	17bb0 <__aeabi_f2d>
   138ce:	4604      	mov	r4, r0
   138d0:	460d      	mov	r5, r1
   138d2:	69b8      	ldr	r0, [r7, #24]
   138d4:	f004 f96c 	bl	17bb0 <__aeabi_f2d>
   138d8:	4602      	mov	r2, r0
   138da:	460b      	mov	r3, r1
   138dc:	4610      	mov	r0, r2
   138de:	4619      	mov	r1, r3
   138e0:	a3b1      	add	r3, pc, #708	; (adr r3, 13ba8 <auto_nav+0x1570>)
   138e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   138e6:	f004 f805 	bl	178f4 <__adddf3>
   138ea:	4602      	mov	r2, r0
   138ec:	460b      	mov	r3, r1
   138ee:	4610      	mov	r0, r2
   138f0:	4619      	mov	r1, r3
   138f2:	f002 fa81 	bl	15df8 <pp_sin>
   138f6:	4602      	mov	r2, r0
   138f8:	460b      	mov	r3, r1
   138fa:	4610      	mov	r0, r2
   138fc:	4619      	mov	r1, r3
   138fe:	f04f 0200 	mov.w	r2, #0
   13902:	f04f 0300 	mov.w	r3, #0
   13906:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1390a:	f004 f9a5 	bl	17c58 <__aeabi_dmul>
   1390e:	4602      	mov	r2, r0
   13910:	460b      	mov	r3, r1
   13912:	4620      	mov	r0, r4
   13914:	4629      	mov	r1, r5
   13916:	f003 ffed 	bl	178f4 <__adddf3>
   1391a:	4602      	mov	r2, r0
   1391c:	460b      	mov	r3, r1
   1391e:	4610      	mov	r0, r2
   13920:	4619      	mov	r1, r3
   13922:	f004 fc7b 	bl	1821c <__aeabi_d2f>
   13926:	4606      	mov	r6, r0
   13928:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1392c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13930:	681b      	ldr	r3, [r3, #0]
   13932:	4618      	mov	r0, r3
   13934:	f004 f93c 	bl	17bb0 <__aeabi_f2d>
   13938:	4604      	mov	r4, r0
   1393a:	460d      	mov	r5, r1
   1393c:	69b8      	ldr	r0, [r7, #24]
   1393e:	f004 f937 	bl	17bb0 <__aeabi_f2d>
   13942:	4602      	mov	r2, r0
   13944:	460b      	mov	r3, r1
   13946:	4610      	mov	r0, r2
   13948:	4619      	mov	r1, r3
   1394a:	f002 fa55 	bl	15df8 <pp_sin>
   1394e:	4602      	mov	r2, r0
   13950:	460b      	mov	r3, r1
   13952:	4610      	mov	r0, r2
   13954:	4619      	mov	r1, r3
   13956:	f04f 0200 	mov.w	r2, #0
   1395a:	f04f 0300 	mov.w	r3, #0
   1395e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13962:	f004 f979 	bl	17c58 <__aeabi_dmul>
   13966:	4602      	mov	r2, r0
   13968:	460b      	mov	r3, r1
   1396a:	4620      	mov	r0, r4
   1396c:	4629      	mov	r1, r5
   1396e:	f003 ffc1 	bl	178f4 <__adddf3>
   13972:	4602      	mov	r2, r0
   13974:	460b      	mov	r3, r1
   13976:	4610      	mov	r0, r2
   13978:	4619      	mov	r1, r3
   1397a:	f004 fc4f 	bl	1821c <__aeabi_d2f>
   1397e:	4603      	mov	r3, r0
   13980:	4630      	mov	r0, r6
   13982:	4619      	mov	r1, r3
   13984:	f001 f81c 	bl	149c0 <fly_to_xy>
   13988:	69b8      	ldr	r0, [r7, #24]
   1398a:	f004 f911 	bl	17bb0 <__aeabi_f2d>
   1398e:	4602      	mov	r2, r0
   13990:	460b      	mov	r3, r1
   13992:	a185      	add	r1, pc, #532	; (adr r1, 13ba8 <auto_nav+0x1570>)
   13994:	e9d1 0100 	ldrd	r0, r1, [r1]
   13998:	f003 ffaa 	bl	178f0 <__aeabi_dsub>
   1399c:	4602      	mov	r2, r0
   1399e:	460b      	mov	r3, r1
   139a0:	4610      	mov	r0, r2
   139a2:	4619      	mov	r1, r3
   139a4:	a382      	add	r3, pc, #520	; (adr r3, 13bb0 <auto_nav+0x1578>)
   139a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   139aa:	f004 fa7f 	bl	17eac <__aeabi_ddiv>
   139ae:	4602      	mov	r2, r0
   139b0:	460b      	mov	r3, r1
   139b2:	4610      	mov	r0, r2
   139b4:	4619      	mov	r1, r3
   139b6:	f04f 0200 	mov.w	r2, #0
   139ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   139be:	f2c4 0366 	movt	r3, #16486	; 0x4066
   139c2:	f004 f949 	bl	17c58 <__aeabi_dmul>
   139c6:	4602      	mov	r2, r0
   139c8:	460b      	mov	r3, r1
   139ca:	4610      	mov	r0, r2
   139cc:	4619      	mov	r1, r3
   139ce:	f004 fc25 	bl	1821c <__aeabi_d2f>
   139d2:	4602      	mov	r2, r0
   139d4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   139d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139dc:	601a      	str	r2, [r3, #0]
   139de:	e012      	b.n	13a06 <auto_nav+0x13ce>
   139e0:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   139e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139e8:	681b      	ldr	r3, [r3, #0]
   139ea:	4618      	mov	r0, r3
   139ec:	f04f 0100 	mov.w	r1, #0
   139f0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   139f4:	f004 fc68 	bl	182c8 <__addsf3>
   139f8:	4603      	mov	r3, r0
   139fa:	461a      	mov	r2, r3
   139fc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a04:	601a      	str	r2, [r3, #0]
   13a06:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a0e:	681b      	ldr	r3, [r3, #0]
   13a10:	4618      	mov	r0, r3
   13a12:	f04f 0100 	mov.w	r1, #0
   13a16:	f004 fefd 	bl	18814 <__aeabi_fcmplt>
   13a1a:	4603      	mov	r3, r0
   13a1c:	2b00      	cmp	r3, #0
   13a1e:	d1df      	bne.n	139e0 <auto_nav+0x13a8>
   13a20:	e012      	b.n	13a48 <auto_nav+0x1410>
   13a22:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a2a:	681b      	ldr	r3, [r3, #0]
   13a2c:	4618      	mov	r0, r3
   13a2e:	f04f 0100 	mov.w	r1, #0
   13a32:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a36:	f004 fc45 	bl	182c4 <__aeabi_fsub>
   13a3a:	4603      	mov	r3, r0
   13a3c:	461a      	mov	r2, r3
   13a3e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a46:	601a      	str	r2, [r3, #0]
   13a48:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a50:	681b      	ldr	r3, [r3, #0]
   13a52:	4618      	mov	r0, r3
   13a54:	f04f 0100 	mov.w	r1, #0
   13a58:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a5c:	f004 feee 	bl	1883c <__aeabi_fcmpge>
   13a60:	4603      	mov	r3, r0
   13a62:	2b00      	cmp	r3, #0
   13a64:	d1dd      	bne.n	13a22 <auto_nav+0x13ea>
        return;
   13a66:	f000 beb9 	b.w	147dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13a6a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a72:	781b      	ldrb	r3, [r3, #0]
   13a74:	2b01      	cmp	r3, #1
   13a76:	f040 86b1 	bne.w	147dc <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13a7a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a82:	2201      	movs	r2, #1
   13a84:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13a86:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a8e:	781b      	ldrb	r3, [r3, #0]
   13a90:	3301      	adds	r3, #1
   13a92:	b2da      	uxtb	r2, r3
   13a94:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a9c:	701a      	strb	r2, [r3, #0]
   13a9e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aa6:	2200      	movs	r2, #0
   13aa8:	701a      	strb	r2, [r3, #0]
   13aaa:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab2:	2200      	movs	r2, #0
   13ab4:	801a      	strh	r2, [r3, #0]
   13ab6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13abe:	681a      	ldr	r2, [r3, #0]
   13ac0:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ac8:	601a      	str	r2, [r3, #0]
   13aca:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ad2:	681a      	ldr	r2, [r3, #0]
   13ad4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13adc:	601a      	str	r2, [r3, #0]
   13ade:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ae6:	2200      	movs	r2, #0
   13ae8:	801a      	strh	r2, [r3, #0]
   13aea:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13af2:	f04f 0200 	mov.w	r2, #0
   13af6:	601a      	str	r2, [r3, #0]
   13af8:	f000 be70 	b.w	147dc <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13afc:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b04:	781b      	ldrb	r3, [r3, #0]
   13b06:	2b04      	cmp	r3, #4
   13b08:	f040 8202 	bne.w	13f10 <auto_nav+0x18d8>
{
    nav_block = 4;
   13b0c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b14:	2204      	movs	r2, #4
   13b16:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13b18:	f24c 5330 	movw	r3, #50480	; 0xc530
   13b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b20:	781b      	ldrb	r3, [r3, #0]
   13b22:	2b00      	cmp	r3, #0
   13b24:	d007      	beq.n	13b36 <auto_nav+0x14fe>
   13b26:	f24c 5330 	movw	r3, #50480	; 0xc530
   13b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b2e:	2200      	movs	r2, #0
   13b30:	701a      	strb	r2, [r3, #0]
   13b32:	2301      	movs	r3, #1
   13b34:	e000      	b.n	13b38 <auto_nav+0x1500>
   13b36:	2300      	movs	r3, #0
   13b38:	2b00      	cmp	r3, #0
   13b3a:	d03d      	beq.n	13bb8 <auto_nav+0x1580>
   13b3c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b44:	2205      	movs	r2, #5
   13b46:	701a      	strb	r2, [r3, #0]
   13b48:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b50:	2200      	movs	r2, #0
   13b52:	701a      	strb	r2, [r3, #0]
   13b54:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b5c:	2200      	movs	r2, #0
   13b5e:	801a      	strh	r2, [r3, #0]
   13b60:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b68:	681a      	ldr	r2, [r3, #0]
   13b6a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b72:	601a      	str	r2, [r3, #0]
   13b74:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b7c:	681a      	ldr	r2, [r3, #0]
   13b7e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b86:	601a      	str	r2, [r3, #0]
   13b88:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b90:	2200      	movs	r2, #0
   13b92:	801a      	strh	r2, [r3, #0]
   13b94:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b9c:	f04f 0200 	mov.w	r2, #0
   13ba0:	601a      	str	r2, [r3, #0]
   13ba2:	f000 be1b 	b.w	147dc <auto_nav+0x21a4>
   13ba6:	bf00      	nop
   13ba8:	54442d18 	.word	0x54442d18
   13bac:	3ff921fb 	.word	0x3ff921fb
   13bb0:	54442d18 	.word	0x54442d18
   13bb4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13bb8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bc0:	781b      	ldrb	r3, [r3, #0]
   13bc2:	2b00      	cmp	r3, #0
   13bc4:	f040 815b 	bne.w	13e7e <auto_nav+0x1846>
    {
        nav_stage = 0;
   13bc8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bd0:	2200      	movs	r2, #0
   13bd2:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13bd4:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bdc:	2200      	movs	r2, #0
   13bde:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13be0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13be8:	f04f 0200 	mov.w	r2, #0
   13bec:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13bee:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bf6:	2203      	movs	r2, #3
   13bf8:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13bfa:	f240 5378 	movw	r3, #1400	; 0x578
   13bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c02:	689a      	ldr	r2, [r3, #8]
   13c04:	f240 5374 	movw	r3, #1396	; 0x574
   13c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c0c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13c0e:	f64c 0394 	movw	r3, #51348	; 0xc894
   13c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c16:	f04f 0200 	mov.w	r2, #0
   13c1a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13c1c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c24:	681a      	ldr	r2, [r3, #0]
   13c26:	f240 5378 	movw	r3, #1400	; 0x578
   13c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c2e:	685b      	ldr	r3, [r3, #4]
   13c30:	4610      	mov	r0, r2
   13c32:	4619      	mov	r1, r3
   13c34:	f004 fb46 	bl	182c4 <__aeabi_fsub>
   13c38:	4603      	mov	r3, r0
   13c3a:	4618      	mov	r0, r3
   13c3c:	f003 ffb8 	bl	17bb0 <__aeabi_f2d>
   13c40:	4604      	mov	r4, r0
   13c42:	460d      	mov	r5, r1
   13c44:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c4c:	681a      	ldr	r2, [r3, #0]
   13c4e:	f240 5378 	movw	r3, #1400	; 0x578
   13c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c56:	681b      	ldr	r3, [r3, #0]
   13c58:	4610      	mov	r0, r2
   13c5a:	4619      	mov	r1, r3
   13c5c:	f004 fb32 	bl	182c4 <__aeabi_fsub>
   13c60:	4603      	mov	r3, r0
   13c62:	4618      	mov	r0, r3
   13c64:	f003 ffa4 	bl	17bb0 <__aeabi_f2d>
   13c68:	4602      	mov	r2, r0
   13c6a:	460b      	mov	r3, r1
   13c6c:	4620      	mov	r0, r4
   13c6e:	4629      	mov	r1, r5
   13c70:	f002 f802 	bl	15c78 <pp_atan2>
   13c74:	4602      	mov	r2, r0
   13c76:	460b      	mov	r3, r1
   13c78:	4610      	mov	r0, r2
   13c7a:	4619      	mov	r1, r3
   13c7c:	f004 face 	bl	1821c <__aeabi_d2f>
   13c80:	4603      	mov	r3, r0
   13c82:	617b      	str	r3, [r7, #20]
   13c84:	6978      	ldr	r0, [r7, #20]
   13c86:	f003 ff93 	bl	17bb0 <__aeabi_f2d>
   13c8a:	4604      	mov	r4, r0
   13c8c:	460d      	mov	r5, r1
   13c8e:	f64c 3334 	movw	r3, #52020	; 0xcb34
   13c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c96:	681b      	ldr	r3, [r3, #0]
   13c98:	4618      	mov	r0, r3
   13c9a:	f04f 0100 	mov.w	r1, #0
   13c9e:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13ca2:	f004 fc19 	bl	184d8 <__aeabi_fmul>
   13ca6:	4603      	mov	r3, r0
   13ca8:	4618      	mov	r0, r3
   13caa:	f003 ff81 	bl	17bb0 <__aeabi_f2d>
   13cae:	4602      	mov	r2, r0
   13cb0:	460b      	mov	r3, r1
   13cb2:	f04f 0000 	mov.w	r0, #0
   13cb6:	f04f 0100 	mov.w	r1, #0
   13cba:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13cbe:	f004 f8f5 	bl	17eac <__aeabi_ddiv>
   13cc2:	4602      	mov	r2, r0
   13cc4:	460b      	mov	r3, r1
   13cc6:	4620      	mov	r0, r4
   13cc8:	4629      	mov	r1, r5
   13cca:	f003 fe13 	bl	178f4 <__adddf3>
   13cce:	4602      	mov	r2, r0
   13cd0:	460b      	mov	r3, r1
   13cd2:	4610      	mov	r0, r2
   13cd4:	4619      	mov	r1, r3
   13cd6:	f004 faa1 	bl	1821c <__aeabi_d2f>
   13cda:	4603      	mov	r3, r0
   13cdc:	613b      	str	r3, [r7, #16]
   13cde:	f240 5378 	movw	r3, #1400	; 0x578
   13ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ce6:	681b      	ldr	r3, [r3, #0]
   13ce8:	4618      	mov	r0, r3
   13cea:	f003 ff61 	bl	17bb0 <__aeabi_f2d>
   13cee:	4604      	mov	r4, r0
   13cf0:	460d      	mov	r5, r1
   13cf2:	6938      	ldr	r0, [r7, #16]
   13cf4:	f003 ff5c 	bl	17bb0 <__aeabi_f2d>
   13cf8:	4602      	mov	r2, r0
   13cfa:	460b      	mov	r3, r1
   13cfc:	4610      	mov	r0, r2
   13cfe:	4619      	mov	r1, r3
   13d00:	a3af      	add	r3, pc, #700	; (adr r3, 13fc0 <auto_nav+0x1988>)
   13d02:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d06:	f003 fdf5 	bl	178f4 <__adddf3>
   13d0a:	4602      	mov	r2, r0
   13d0c:	460b      	mov	r3, r1
   13d0e:	4610      	mov	r0, r2
   13d10:	4619      	mov	r1, r3
   13d12:	f002 f871 	bl	15df8 <pp_sin>
   13d16:	4602      	mov	r2, r0
   13d18:	460b      	mov	r3, r1
   13d1a:	4610      	mov	r0, r2
   13d1c:	4619      	mov	r1, r3
   13d1e:	a3aa      	add	r3, pc, #680	; (adr r3, 13fc8 <auto_nav+0x1990>)
   13d20:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d24:	f003 ff98 	bl	17c58 <__aeabi_dmul>
   13d28:	4602      	mov	r2, r0
   13d2a:	460b      	mov	r3, r1
   13d2c:	4620      	mov	r0, r4
   13d2e:	4629      	mov	r1, r5
   13d30:	f003 fde0 	bl	178f4 <__adddf3>
   13d34:	4602      	mov	r2, r0
   13d36:	460b      	mov	r3, r1
   13d38:	4610      	mov	r0, r2
   13d3a:	4619      	mov	r1, r3
   13d3c:	f004 fa6e 	bl	1821c <__aeabi_d2f>
   13d40:	4606      	mov	r6, r0
   13d42:	f240 5378 	movw	r3, #1400	; 0x578
   13d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d4a:	685b      	ldr	r3, [r3, #4]
   13d4c:	4618      	mov	r0, r3
   13d4e:	f003 ff2f 	bl	17bb0 <__aeabi_f2d>
   13d52:	4604      	mov	r4, r0
   13d54:	460d      	mov	r5, r1
   13d56:	6938      	ldr	r0, [r7, #16]
   13d58:	f003 ff2a 	bl	17bb0 <__aeabi_f2d>
   13d5c:	4602      	mov	r2, r0
   13d5e:	460b      	mov	r3, r1
   13d60:	4610      	mov	r0, r2
   13d62:	4619      	mov	r1, r3
   13d64:	f002 f848 	bl	15df8 <pp_sin>
   13d68:	4602      	mov	r2, r0
   13d6a:	460b      	mov	r3, r1
   13d6c:	4610      	mov	r0, r2
   13d6e:	4619      	mov	r1, r3
   13d70:	a395      	add	r3, pc, #596	; (adr r3, 13fc8 <auto_nav+0x1990>)
   13d72:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d76:	f003 ff6f 	bl	17c58 <__aeabi_dmul>
   13d7a:	4602      	mov	r2, r0
   13d7c:	460b      	mov	r3, r1
   13d7e:	4620      	mov	r0, r4
   13d80:	4629      	mov	r1, r5
   13d82:	f003 fdb7 	bl	178f4 <__adddf3>
   13d86:	4602      	mov	r2, r0
   13d88:	460b      	mov	r3, r1
   13d8a:	4610      	mov	r0, r2
   13d8c:	4619      	mov	r1, r3
   13d8e:	f004 fa45 	bl	1821c <__aeabi_d2f>
   13d92:	4603      	mov	r3, r0
   13d94:	4630      	mov	r0, r6
   13d96:	4619      	mov	r1, r3
   13d98:	f000 fe12 	bl	149c0 <fly_to_xy>
   13d9c:	6938      	ldr	r0, [r7, #16]
   13d9e:	f003 ff07 	bl	17bb0 <__aeabi_f2d>
   13da2:	4602      	mov	r2, r0
   13da4:	460b      	mov	r3, r1
   13da6:	a186      	add	r1, pc, #536	; (adr r1, 13fc0 <auto_nav+0x1988>)
   13da8:	e9d1 0100 	ldrd	r0, r1, [r1]
   13dac:	f003 fda0 	bl	178f0 <__aeabi_dsub>
   13db0:	4602      	mov	r2, r0
   13db2:	460b      	mov	r3, r1
   13db4:	4610      	mov	r0, r2
   13db6:	4619      	mov	r1, r3
   13db8:	a385      	add	r3, pc, #532	; (adr r3, 13fd0 <auto_nav+0x1998>)
   13dba:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dbe:	f004 f875 	bl	17eac <__aeabi_ddiv>
   13dc2:	4602      	mov	r2, r0
   13dc4:	460b      	mov	r3, r1
   13dc6:	4610      	mov	r0, r2
   13dc8:	4619      	mov	r1, r3
   13dca:	f04f 0200 	mov.w	r2, #0
   13dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13dd2:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13dd6:	f003 ff3f 	bl	17c58 <__aeabi_dmul>
   13dda:	4602      	mov	r2, r0
   13ddc:	460b      	mov	r3, r1
   13dde:	4610      	mov	r0, r2
   13de0:	4619      	mov	r1, r3
   13de2:	f004 fa1b 	bl	1821c <__aeabi_d2f>
   13de6:	4602      	mov	r2, r0
   13de8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13df0:	601a      	str	r2, [r3, #0]
   13df2:	e012      	b.n	13e1a <auto_nav+0x17e2>
   13df4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dfc:	681b      	ldr	r3, [r3, #0]
   13dfe:	4618      	mov	r0, r3
   13e00:	f04f 0100 	mov.w	r1, #0
   13e04:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e08:	f004 fa5e 	bl	182c8 <__addsf3>
   13e0c:	4603      	mov	r3, r0
   13e0e:	461a      	mov	r2, r3
   13e10:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e18:	601a      	str	r2, [r3, #0]
   13e1a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e22:	681b      	ldr	r3, [r3, #0]
   13e24:	4618      	mov	r0, r3
   13e26:	f04f 0100 	mov.w	r1, #0
   13e2a:	f004 fcf3 	bl	18814 <__aeabi_fcmplt>
   13e2e:	4603      	mov	r3, r0
   13e30:	2b00      	cmp	r3, #0
   13e32:	d1df      	bne.n	13df4 <auto_nav+0x17bc>
   13e34:	e012      	b.n	13e5c <auto_nav+0x1824>
   13e36:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e3e:	681b      	ldr	r3, [r3, #0]
   13e40:	4618      	mov	r0, r3
   13e42:	f04f 0100 	mov.w	r1, #0
   13e46:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e4a:	f004 fa3b 	bl	182c4 <__aeabi_fsub>
   13e4e:	4603      	mov	r3, r0
   13e50:	461a      	mov	r2, r3
   13e52:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e5a:	601a      	str	r2, [r3, #0]
   13e5c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e64:	681b      	ldr	r3, [r3, #0]
   13e66:	4618      	mov	r0, r3
   13e68:	f04f 0100 	mov.w	r1, #0
   13e6c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e70:	f004 fce4 	bl	1883c <__aeabi_fcmpge>
   13e74:	4603      	mov	r3, r0
   13e76:	2b00      	cmp	r3, #0
   13e78:	d1dd      	bne.n	13e36 <auto_nav+0x17fe>
        return;
   13e7a:	f000 bcaf 	b.w	147dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13e7e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e86:	781b      	ldrb	r3, [r3, #0]
   13e88:	2b01      	cmp	r3, #1
   13e8a:	f040 84a7 	bne.w	147dc <auto_nav+0x21a4>
    {
        nav_stage =1;
   13e8e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e96:	2201      	movs	r2, #1
   13e98:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13e9a:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ea2:	781b      	ldrb	r3, [r3, #0]
   13ea4:	3301      	adds	r3, #1
   13ea6:	b2da      	uxtb	r2, r3
   13ea8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eb0:	701a      	strb	r2, [r3, #0]
   13eb2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eba:	2200      	movs	r2, #0
   13ebc:	701a      	strb	r2, [r3, #0]
   13ebe:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ec6:	2200      	movs	r2, #0
   13ec8:	801a      	strh	r2, [r3, #0]
   13eca:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed2:	681a      	ldr	r2, [r3, #0]
   13ed4:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13edc:	601a      	str	r2, [r3, #0]
   13ede:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ee6:	681a      	ldr	r2, [r3, #0]
   13ee8:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ef0:	601a      	str	r2, [r3, #0]
   13ef2:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13efa:	2200      	movs	r2, #0
   13efc:	801a      	strh	r2, [r3, #0]
   13efe:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f06:	f04f 0200 	mov.w	r2, #0
   13f0a:	601a      	str	r2, [r3, #0]
   13f0c:	f000 bc66 	b.w	147dc <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13f10:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f18:	781b      	ldrb	r3, [r3, #0]
   13f1a:	2b05      	cmp	r3, #5
   13f1c:	f040 845e 	bne.w	147dc <auto_nav+0x21a4>
{
    nav_block = 5;
   13f20:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f28:	2205      	movs	r2, #5
   13f2a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13f2c:	f24c 5330 	movw	r3, #50480	; 0xc530
   13f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f34:	781b      	ldrb	r3, [r3, #0]
   13f36:	2b00      	cmp	r3, #0
   13f38:	d007      	beq.n	13f4a <auto_nav+0x1912>
   13f3a:	f24c 5330 	movw	r3, #50480	; 0xc530
   13f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f42:	2200      	movs	r2, #0
   13f44:	701a      	strb	r2, [r3, #0]
   13f46:	2301      	movs	r3, #1
   13f48:	e000      	b.n	13f4c <auto_nav+0x1914>
   13f4a:	2300      	movs	r3, #0
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	d043      	beq.n	13fd8 <auto_nav+0x19a0>
   13f50:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f58:	2201      	movs	r2, #1
   13f5a:	701a      	strb	r2, [r3, #0]
   13f5c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f64:	2200      	movs	r2, #0
   13f66:	701a      	strb	r2, [r3, #0]
   13f68:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f70:	2200      	movs	r2, #0
   13f72:	801a      	strh	r2, [r3, #0]
   13f74:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f7c:	681a      	ldr	r2, [r3, #0]
   13f7e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f86:	601a      	str	r2, [r3, #0]
   13f88:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f90:	681a      	ldr	r2, [r3, #0]
   13f92:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f9a:	601a      	str	r2, [r3, #0]
   13f9c:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fa4:	2200      	movs	r2, #0
   13fa6:	801a      	strh	r2, [r3, #0]
   13fa8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb0:	f04f 0200 	mov.w	r2, #0
   13fb4:	601a      	str	r2, [r3, #0]
   13fb6:	f000 bc11 	b.w	147dc <auto_nav+0x21a4>
   13fba:	bf00      	nop
   13fbc:	f3af 8000 	nop.w
   13fc0:	54442d18 	.word	0x54442d18
   13fc4:	3ff921fb 	.word	0x3ff921fb
   13fc8:	00000000 	.word	0x00000000
   13fcc:	4062c000 	.word	0x4062c000
   13fd0:	54442d18 	.word	0x54442d18
   13fd4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13fd8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fe0:	781b      	ldrb	r3, [r3, #0]
   13fe2:	2b00      	cmp	r3, #0
   13fe4:	d133      	bne.n	1404e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13fe6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fee:	2200      	movs	r2, #0
   13ff0:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13ff2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ffa:	781b      	ldrb	r3, [r3, #0]
   13ffc:	3301      	adds	r3, #1
   13ffe:	b2da      	uxtb	r2, r3
   14000:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14008:	701a      	strb	r2, [r3, #0]
   1400a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1400e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14012:	681a      	ldr	r2, [r3, #0]
   14014:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1401c:	601a      	str	r2, [r3, #0]
   1401e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14022:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14026:	681a      	ldr	r2, [r3, #0]
   14028:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1402c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14030:	601a      	str	r2, [r3, #0]
   14032:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   14036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1403a:	2200      	movs	r2, #0
   1403c:	801a      	strh	r2, [r3, #0]
   1403e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14046:	f04f 0200 	mov.w	r2, #0
   1404a:	601a      	str	r2, [r3, #0]
   1404c:	e3c6      	b.n	147dc <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   1404e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14052:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14056:	781b      	ldrb	r3, [r3, #0]
   14058:	2b01      	cmp	r3, #1
   1405a:	f040 81b5 	bne.w	143c8 <auto_nav+0x1d90>
    {
        nav_stage =1;
   1405e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14066:	2201      	movs	r2, #1
   14068:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   1406a:	f24c 532f 	movw	r3, #50479	; 0xc52f
   1406e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14072:	2200      	movs	r2, #0
   14074:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   14076:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1407a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1407e:	f04f 0200 	mov.w	r2, #0
   14082:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14084:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1408c:	2203      	movs	r2, #3
   1408e:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   14090:	f240 5378 	movw	r3, #1400	; 0x578
   14094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14098:	695a      	ldr	r2, [r3, #20]
   1409a:	f240 5374 	movw	r3, #1396	; 0x574
   1409e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140a2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   140a4:	f64c 0394 	movw	r3, #51348	; 0xc894
   140a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140ac:	f04f 0200 	mov.w	r2, #0
   140b0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   140b2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   140b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140ba:	681a      	ldr	r2, [r3, #0]
   140bc:	f240 5378 	movw	r3, #1400	; 0x578
   140c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140c4:	691b      	ldr	r3, [r3, #16]
   140c6:	4610      	mov	r0, r2
   140c8:	4619      	mov	r1, r3
   140ca:	f004 f8fb 	bl	182c4 <__aeabi_fsub>
   140ce:	4603      	mov	r3, r0
   140d0:	4618      	mov	r0, r3
   140d2:	f003 fd6d 	bl	17bb0 <__aeabi_f2d>
   140d6:	4604      	mov	r4, r0
   140d8:	460d      	mov	r5, r1
   140da:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   140de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140e2:	681a      	ldr	r2, [r3, #0]
   140e4:	f240 5378 	movw	r3, #1400	; 0x578
   140e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140ec:	68db      	ldr	r3, [r3, #12]
   140ee:	4610      	mov	r0, r2
   140f0:	4619      	mov	r1, r3
   140f2:	f004 f8e7 	bl	182c4 <__aeabi_fsub>
   140f6:	4603      	mov	r3, r0
   140f8:	4618      	mov	r0, r3
   140fa:	f003 fd59 	bl	17bb0 <__aeabi_f2d>
   140fe:	4602      	mov	r2, r0
   14100:	460b      	mov	r3, r1
   14102:	4620      	mov	r0, r4
   14104:	4629      	mov	r1, r5
   14106:	f001 fdb7 	bl	15c78 <pp_atan2>
   1410a:	4602      	mov	r2, r0
   1410c:	460b      	mov	r3, r1
   1410e:	4610      	mov	r0, r2
   14110:	4619      	mov	r1, r3
   14112:	f004 f883 	bl	1821c <__aeabi_d2f>
   14116:	4603      	mov	r3, r0
   14118:	60fb      	str	r3, [r7, #12]
   1411a:	68f8      	ldr	r0, [r7, #12]
   1411c:	f003 fd48 	bl	17bb0 <__aeabi_f2d>
   14120:	4604      	mov	r4, r0
   14122:	460d      	mov	r5, r1
   14124:	f64c 3334 	movw	r3, #52020	; 0xcb34
   14128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1412c:	681b      	ldr	r3, [r3, #0]
   1412e:	4618      	mov	r0, r3
   14130:	f04f 0100 	mov.w	r1, #0
   14134:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14138:	f004 f9ce 	bl	184d8 <__aeabi_fmul>
   1413c:	4603      	mov	r3, r0
   1413e:	4618      	mov	r0, r3
   14140:	f003 fd36 	bl	17bb0 <__aeabi_f2d>
   14144:	4602      	mov	r2, r0
   14146:	460b      	mov	r3, r1
   14148:	f04f 0000 	mov.w	r0, #0
   1414c:	f04f 0100 	mov.w	r1, #0
   14150:	f2c4 0114 	movt	r1, #16404	; 0x4014
   14154:	f003 feaa 	bl	17eac <__aeabi_ddiv>
   14158:	4602      	mov	r2, r0
   1415a:	460b      	mov	r3, r1
   1415c:	4620      	mov	r0, r4
   1415e:	4629      	mov	r1, r5
   14160:	f003 fbc8 	bl	178f4 <__adddf3>
   14164:	4602      	mov	r2, r0
   14166:	460b      	mov	r3, r1
   14168:	4610      	mov	r0, r2
   1416a:	4619      	mov	r1, r3
   1416c:	f004 f856 	bl	1821c <__aeabi_d2f>
   14170:	4603      	mov	r3, r0
   14172:	60bb      	str	r3, [r7, #8]
   14174:	f240 5378 	movw	r3, #1400	; 0x578
   14178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1417c:	68db      	ldr	r3, [r3, #12]
   1417e:	4618      	mov	r0, r3
   14180:	f003 fd16 	bl	17bb0 <__aeabi_f2d>
   14184:	4604      	mov	r4, r0
   14186:	460d      	mov	r5, r1
   14188:	68b8      	ldr	r0, [r7, #8]
   1418a:	f003 fd11 	bl	17bb0 <__aeabi_f2d>
   1418e:	4602      	mov	r2, r0
   14190:	460b      	mov	r3, r1
   14192:	4610      	mov	r0, r2
   14194:	4619      	mov	r1, r3
   14196:	a388      	add	r3, pc, #544	; (adr r3, 143b8 <auto_nav+0x1d80>)
   14198:	e9d3 2300 	ldrd	r2, r3, [r3]
   1419c:	f003 fbaa 	bl	178f4 <__adddf3>
   141a0:	4602      	mov	r2, r0
   141a2:	460b      	mov	r3, r1
   141a4:	4610      	mov	r0, r2
   141a6:	4619      	mov	r1, r3
   141a8:	f001 fe26 	bl	15df8 <pp_sin>
   141ac:	4602      	mov	r2, r0
   141ae:	460b      	mov	r3, r1
   141b0:	4610      	mov	r0, r2
   141b2:	4619      	mov	r1, r3
   141b4:	f04f 0200 	mov.w	r2, #0
   141b8:	f04f 0300 	mov.w	r3, #0
   141bc:	f2c4 0359 	movt	r3, #16473	; 0x4059
   141c0:	f003 fd4a 	bl	17c58 <__aeabi_dmul>
   141c4:	4602      	mov	r2, r0
   141c6:	460b      	mov	r3, r1
   141c8:	4620      	mov	r0, r4
   141ca:	4629      	mov	r1, r5
   141cc:	f003 fb92 	bl	178f4 <__adddf3>
   141d0:	4602      	mov	r2, r0
   141d2:	460b      	mov	r3, r1
   141d4:	4610      	mov	r0, r2
   141d6:	4619      	mov	r1, r3
   141d8:	f004 f820 	bl	1821c <__aeabi_d2f>
   141dc:	4606      	mov	r6, r0
   141de:	f240 5378 	movw	r3, #1400	; 0x578
   141e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141e6:	691b      	ldr	r3, [r3, #16]
   141e8:	4618      	mov	r0, r3
   141ea:	f003 fce1 	bl	17bb0 <__aeabi_f2d>
   141ee:	4604      	mov	r4, r0
   141f0:	460d      	mov	r5, r1
   141f2:	68b8      	ldr	r0, [r7, #8]
   141f4:	f003 fcdc 	bl	17bb0 <__aeabi_f2d>
   141f8:	4602      	mov	r2, r0
   141fa:	460b      	mov	r3, r1
   141fc:	4610      	mov	r0, r2
   141fe:	4619      	mov	r1, r3
   14200:	f001 fdfa 	bl	15df8 <pp_sin>
   14204:	4602      	mov	r2, r0
   14206:	460b      	mov	r3, r1
   14208:	4610      	mov	r0, r2
   1420a:	4619      	mov	r1, r3
   1420c:	f04f 0200 	mov.w	r2, #0
   14210:	f04f 0300 	mov.w	r3, #0
   14214:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14218:	f003 fd1e 	bl	17c58 <__aeabi_dmul>
   1421c:	4602      	mov	r2, r0
   1421e:	460b      	mov	r3, r1
   14220:	4620      	mov	r0, r4
   14222:	4629      	mov	r1, r5
   14224:	f003 fb66 	bl	178f4 <__adddf3>
   14228:	4602      	mov	r2, r0
   1422a:	460b      	mov	r3, r1
   1422c:	4610      	mov	r0, r2
   1422e:	4619      	mov	r1, r3
   14230:	f003 fff4 	bl	1821c <__aeabi_d2f>
   14234:	4603      	mov	r3, r0
   14236:	4630      	mov	r0, r6
   14238:	4619      	mov	r1, r3
   1423a:	f000 fbc1 	bl	149c0 <fly_to_xy>
   1423e:	68b8      	ldr	r0, [r7, #8]
   14240:	f003 fcb6 	bl	17bb0 <__aeabi_f2d>
   14244:	4602      	mov	r2, r0
   14246:	460b      	mov	r3, r1
   14248:	a15b      	add	r1, pc, #364	; (adr r1, 143b8 <auto_nav+0x1d80>)
   1424a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1424e:	f003 fb4f 	bl	178f0 <__aeabi_dsub>
   14252:	4602      	mov	r2, r0
   14254:	460b      	mov	r3, r1
   14256:	4610      	mov	r0, r2
   14258:	4619      	mov	r1, r3
   1425a:	a359      	add	r3, pc, #356	; (adr r3, 143c0 <auto_nav+0x1d88>)
   1425c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14260:	f003 fe24 	bl	17eac <__aeabi_ddiv>
   14264:	4602      	mov	r2, r0
   14266:	460b      	mov	r3, r1
   14268:	4610      	mov	r0, r2
   1426a:	4619      	mov	r1, r3
   1426c:	f04f 0200 	mov.w	r2, #0
   14270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14274:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14278:	f003 fcee 	bl	17c58 <__aeabi_dmul>
   1427c:	4602      	mov	r2, r0
   1427e:	460b      	mov	r3, r1
   14280:	4610      	mov	r0, r2
   14282:	4619      	mov	r1, r3
   14284:	f003 ffca 	bl	1821c <__aeabi_d2f>
   14288:	4602      	mov	r2, r0
   1428a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1428e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14292:	601a      	str	r2, [r3, #0]
   14294:	e012      	b.n	142bc <auto_nav+0x1c84>
   14296:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1429a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1429e:	681b      	ldr	r3, [r3, #0]
   142a0:	4618      	mov	r0, r3
   142a2:	f04f 0100 	mov.w	r1, #0
   142a6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   142aa:	f004 f80d 	bl	182c8 <__addsf3>
   142ae:	4603      	mov	r3, r0
   142b0:	461a      	mov	r2, r3
   142b2:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142ba:	601a      	str	r2, [r3, #0]
   142bc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142c4:	681b      	ldr	r3, [r3, #0]
   142c6:	4618      	mov	r0, r3
   142c8:	f04f 0100 	mov.w	r1, #0
   142cc:	f004 faa2 	bl	18814 <__aeabi_fcmplt>
   142d0:	4603      	mov	r3, r0
   142d2:	2b00      	cmp	r3, #0
   142d4:	d1df      	bne.n	14296 <auto_nav+0x1c5e>
   142d6:	e012      	b.n	142fe <auto_nav+0x1cc6>
   142d8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142e0:	681b      	ldr	r3, [r3, #0]
   142e2:	4618      	mov	r0, r3
   142e4:	f04f 0100 	mov.w	r1, #0
   142e8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   142ec:	f003 ffea 	bl	182c4 <__aeabi_fsub>
   142f0:	4603      	mov	r3, r0
   142f2:	461a      	mov	r2, r3
   142f4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142fc:	601a      	str	r2, [r3, #0]
   142fe:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14302:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14306:	681b      	ldr	r3, [r3, #0]
   14308:	4618      	mov	r0, r3
   1430a:	f04f 0100 	mov.w	r1, #0
   1430e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14312:	f004 fa93 	bl	1883c <__aeabi_fcmpge>
   14316:	4603      	mov	r3, r0
   14318:	2b00      	cmp	r3, #0
   1431a:	d1dd      	bne.n	142d8 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   1431c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14324:	681b      	ldr	r3, [r3, #0]
   14326:	4618      	mov	r0, r3
   14328:	f04f 0100 	mov.w	r1, #0
   1432c:	f004 fa90 	bl	18850 <__aeabi_fcmpgt>
   14330:	4603      	mov	r3, r0
   14332:	2b00      	cmp	r3, #0
   14334:	d100      	bne.n	14338 <auto_nav+0x1d00>
        return;
   14336:	e251      	b.n	147dc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14338:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1433c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14340:	681b      	ldr	r3, [r3, #0]
   14342:	4618      	mov	r0, r3
   14344:	f04f 0100 	mov.w	r1, #0
   14348:	f2c4 1120 	movt	r1, #16672	; 0x4120
   1434c:	f004 fa62 	bl	18814 <__aeabi_fcmplt>
   14350:	4603      	mov	r3, r0
   14352:	2b00      	cmp	r3, #0
   14354:	d100      	bne.n	14358 <auto_nav+0x1d20>
        return;
   14356:	e241      	b.n	147dc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14358:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1435c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14360:	781b      	ldrb	r3, [r3, #0]
   14362:	3301      	adds	r3, #1
   14364:	b2da      	uxtb	r2, r3
   14366:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1436a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1436e:	701a      	strb	r2, [r3, #0]
   14370:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14374:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14378:	681a      	ldr	r2, [r3, #0]
   1437a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1437e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14382:	601a      	str	r2, [r3, #0]
   14384:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14388:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1438c:	681a      	ldr	r2, [r3, #0]
   1438e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14392:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14396:	601a      	str	r2, [r3, #0]
   14398:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1439c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143a0:	2200      	movs	r2, #0
   143a2:	801a      	strh	r2, [r3, #0]
   143a4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   143a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ac:	f04f 0200 	mov.w	r2, #0
   143b0:	601a      	str	r2, [r3, #0]
   143b2:	e213      	b.n	147dc <auto_nav+0x21a4>
   143b4:	f3af 8000 	nop.w
   143b8:	54442d18 	.word	0x54442d18
   143bc:	3ff921fb 	.word	0x3ff921fb
   143c0:	54442d18 	.word	0x54442d18
   143c4:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   143c8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   143cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143d0:	781b      	ldrb	r3, [r3, #0]
   143d2:	2b02      	cmp	r3, #2
   143d4:	f040 81ad 	bne.w	14732 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   143d8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   143dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143e0:	2202      	movs	r2, #2
   143e2:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   143e4:	f24c 532f 	movw	r3, #50479	; 0xc52f
   143e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ec:	2200      	movs	r2, #0
   143ee:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   143f0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   143f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143f8:	f04f 0200 	mov.w	r2, #0
   143fc:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   143fe:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14402:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14406:	2203      	movs	r2, #3
   14408:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   1440a:	f240 5378 	movw	r3, #1400	; 0x578
   1440e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14414:	f240 5374 	movw	r3, #1396	; 0x574
   14418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1441c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   1441e:	f64c 0394 	movw	r3, #51348	; 0xc894
   14422:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14426:	f04f 0200 	mov.w	r2, #0
   1442a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   1442c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14434:	681a      	ldr	r2, [r3, #0]
   14436:	f240 5378 	movw	r3, #1400	; 0x578
   1443a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14440:	4610      	mov	r0, r2
   14442:	4619      	mov	r1, r3
   14444:	f003 ff3e 	bl	182c4 <__aeabi_fsub>
   14448:	4603      	mov	r3, r0
   1444a:	4618      	mov	r0, r3
   1444c:	f003 fbb0 	bl	17bb0 <__aeabi_f2d>
   14450:	4604      	mov	r4, r0
   14452:	460d      	mov	r5, r1
   14454:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14458:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1445c:	681a      	ldr	r2, [r3, #0]
   1445e:	f240 5378 	movw	r3, #1400	; 0x578
   14462:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14468:	4610      	mov	r0, r2
   1446a:	4619      	mov	r1, r3
   1446c:	f003 ff2a 	bl	182c4 <__aeabi_fsub>
   14470:	4603      	mov	r3, r0
   14472:	4618      	mov	r0, r3
   14474:	f003 fb9c 	bl	17bb0 <__aeabi_f2d>
   14478:	4602      	mov	r2, r0
   1447a:	460b      	mov	r3, r1
   1447c:	4620      	mov	r0, r4
   1447e:	4629      	mov	r1, r5
   14480:	f001 fbfa 	bl	15c78 <pp_atan2>
   14484:	4602      	mov	r2, r0
   14486:	460b      	mov	r3, r1
   14488:	4610      	mov	r0, r2
   1448a:	4619      	mov	r1, r3
   1448c:	f003 fec6 	bl	1821c <__aeabi_d2f>
   14490:	4603      	mov	r3, r0
   14492:	607b      	str	r3, [r7, #4]
   14494:	6878      	ldr	r0, [r7, #4]
   14496:	f003 fb8b 	bl	17bb0 <__aeabi_f2d>
   1449a:	4604      	mov	r4, r0
   1449c:	460d      	mov	r5, r1
   1449e:	f64c 3334 	movw	r3, #52020	; 0xcb34
   144a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144a6:	681b      	ldr	r3, [r3, #0]
   144a8:	4618      	mov	r0, r3
   144aa:	f04f 0100 	mov.w	r1, #0
   144ae:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   144b2:	f004 f811 	bl	184d8 <__aeabi_fmul>
   144b6:	4603      	mov	r3, r0
   144b8:	4618      	mov	r0, r3
   144ba:	f003 fb79 	bl	17bb0 <__aeabi_f2d>
   144be:	4602      	mov	r2, r0
   144c0:	460b      	mov	r3, r1
   144c2:	f04f 0000 	mov.w	r0, #0
   144c6:	f04f 0100 	mov.w	r1, #0
   144ca:	f2c4 0114 	movt	r1, #16404	; 0x4014
   144ce:	f003 fced 	bl	17eac <__aeabi_ddiv>
   144d2:	4602      	mov	r2, r0
   144d4:	460b      	mov	r3, r1
   144d6:	4620      	mov	r0, r4
   144d8:	4629      	mov	r1, r5
   144da:	f003 fa0b 	bl	178f4 <__adddf3>
   144de:	4602      	mov	r2, r0
   144e0:	460b      	mov	r3, r1
   144e2:	4610      	mov	r0, r2
   144e4:	4619      	mov	r1, r3
   144e6:	f003 fe99 	bl	1821c <__aeabi_d2f>
   144ea:	4603      	mov	r3, r0
   144ec:	603b      	str	r3, [r7, #0]
   144ee:	f240 5378 	movw	r3, #1400	; 0x578
   144f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   144f8:	4618      	mov	r0, r3
   144fa:	f003 fb59 	bl	17bb0 <__aeabi_f2d>
   144fe:	4604      	mov	r4, r0
   14500:	460d      	mov	r5, r1
   14502:	6838      	ldr	r0, [r7, #0]
   14504:	f003 fb54 	bl	17bb0 <__aeabi_f2d>
   14508:	4602      	mov	r2, r0
   1450a:	460b      	mov	r3, r1
   1450c:	4610      	mov	r0, r2
   1450e:	4619      	mov	r1, r3
   14510:	a3b5      	add	r3, pc, #724	; (adr r3, 147e8 <auto_nav+0x21b0>)
   14512:	e9d3 2300 	ldrd	r2, r3, [r3]
   14516:	f003 f9ed 	bl	178f4 <__adddf3>
   1451a:	4602      	mov	r2, r0
   1451c:	460b      	mov	r3, r1
   1451e:	4610      	mov	r0, r2
   14520:	4619      	mov	r1, r3
   14522:	f001 fc69 	bl	15df8 <pp_sin>
   14526:	4602      	mov	r2, r0
   14528:	460b      	mov	r3, r1
   1452a:	4610      	mov	r0, r2
   1452c:	4619      	mov	r1, r3
   1452e:	f04f 0200 	mov.w	r2, #0
   14532:	f04f 0300 	mov.w	r3, #0
   14536:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1453a:	f003 fb8d 	bl	17c58 <__aeabi_dmul>
   1453e:	4602      	mov	r2, r0
   14540:	460b      	mov	r3, r1
   14542:	4620      	mov	r0, r4
   14544:	4629      	mov	r1, r5
   14546:	f003 f9d5 	bl	178f4 <__adddf3>
   1454a:	4602      	mov	r2, r0
   1454c:	460b      	mov	r3, r1
   1454e:	4610      	mov	r0, r2
   14550:	4619      	mov	r1, r3
   14552:	f003 fe63 	bl	1821c <__aeabi_d2f>
   14556:	4606      	mov	r6, r0
   14558:	f240 5378 	movw	r3, #1400	; 0x578
   1455c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14562:	4618      	mov	r0, r3
   14564:	f003 fb24 	bl	17bb0 <__aeabi_f2d>
   14568:	4604      	mov	r4, r0
   1456a:	460d      	mov	r5, r1
   1456c:	6838      	ldr	r0, [r7, #0]
   1456e:	f003 fb1f 	bl	17bb0 <__aeabi_f2d>
   14572:	4602      	mov	r2, r0
   14574:	460b      	mov	r3, r1
   14576:	4610      	mov	r0, r2
   14578:	4619      	mov	r1, r3
   1457a:	f001 fc3d 	bl	15df8 <pp_sin>
   1457e:	4602      	mov	r2, r0
   14580:	460b      	mov	r3, r1
   14582:	4610      	mov	r0, r2
   14584:	4619      	mov	r1, r3
   14586:	f04f 0200 	mov.w	r2, #0
   1458a:	f04f 0300 	mov.w	r3, #0
   1458e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14592:	f003 fb61 	bl	17c58 <__aeabi_dmul>
   14596:	4602      	mov	r2, r0
   14598:	460b      	mov	r3, r1
   1459a:	4620      	mov	r0, r4
   1459c:	4629      	mov	r1, r5
   1459e:	f003 f9a9 	bl	178f4 <__adddf3>
   145a2:	4602      	mov	r2, r0
   145a4:	460b      	mov	r3, r1
   145a6:	4610      	mov	r0, r2
   145a8:	4619      	mov	r1, r3
   145aa:	f003 fe37 	bl	1821c <__aeabi_d2f>
   145ae:	4603      	mov	r3, r0
   145b0:	4630      	mov	r0, r6
   145b2:	4619      	mov	r1, r3
   145b4:	f000 fa04 	bl	149c0 <fly_to_xy>
   145b8:	6838      	ldr	r0, [r7, #0]
   145ba:	f003 faf9 	bl	17bb0 <__aeabi_f2d>
   145be:	4602      	mov	r2, r0
   145c0:	460b      	mov	r3, r1
   145c2:	a189      	add	r1, pc, #548	; (adr r1, 147e8 <auto_nav+0x21b0>)
   145c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   145c8:	f003 f992 	bl	178f0 <__aeabi_dsub>
   145cc:	4602      	mov	r2, r0
   145ce:	460b      	mov	r3, r1
   145d0:	4610      	mov	r0, r2
   145d2:	4619      	mov	r1, r3
   145d4:	a386      	add	r3, pc, #536	; (adr r3, 147f0 <auto_nav+0x21b8>)
   145d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   145da:	f003 fc67 	bl	17eac <__aeabi_ddiv>
   145de:	4602      	mov	r2, r0
   145e0:	460b      	mov	r3, r1
   145e2:	4610      	mov	r0, r2
   145e4:	4619      	mov	r1, r3
   145e6:	f04f 0200 	mov.w	r2, #0
   145ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   145ee:	f2c4 0366 	movt	r3, #16486	; 0x4066
   145f2:	f003 fb31 	bl	17c58 <__aeabi_dmul>
   145f6:	4602      	mov	r2, r0
   145f8:	460b      	mov	r3, r1
   145fa:	4610      	mov	r0, r2
   145fc:	4619      	mov	r1, r3
   145fe:	f003 fe0d 	bl	1821c <__aeabi_d2f>
   14602:	4602      	mov	r2, r0
   14604:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1460c:	601a      	str	r2, [r3, #0]
   1460e:	e012      	b.n	14636 <auto_nav+0x1ffe>
   14610:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14618:	681b      	ldr	r3, [r3, #0]
   1461a:	4618      	mov	r0, r3
   1461c:	f04f 0100 	mov.w	r1, #0
   14620:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14624:	f003 fe50 	bl	182c8 <__addsf3>
   14628:	4603      	mov	r3, r0
   1462a:	461a      	mov	r2, r3
   1462c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14634:	601a      	str	r2, [r3, #0]
   14636:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1463a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1463e:	681b      	ldr	r3, [r3, #0]
   14640:	4618      	mov	r0, r3
   14642:	f04f 0100 	mov.w	r1, #0
   14646:	f004 f8e5 	bl	18814 <__aeabi_fcmplt>
   1464a:	4603      	mov	r3, r0
   1464c:	2b00      	cmp	r3, #0
   1464e:	d1df      	bne.n	14610 <auto_nav+0x1fd8>
   14650:	e012      	b.n	14678 <auto_nav+0x2040>
   14652:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14656:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1465a:	681b      	ldr	r3, [r3, #0]
   1465c:	4618      	mov	r0, r3
   1465e:	f04f 0100 	mov.w	r1, #0
   14662:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14666:	f003 fe2d 	bl	182c4 <__aeabi_fsub>
   1466a:	4603      	mov	r3, r0
   1466c:	461a      	mov	r2, r3
   1466e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14676:	601a      	str	r2, [r3, #0]
   14678:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1467c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14680:	681b      	ldr	r3, [r3, #0]
   14682:	4618      	mov	r0, r3
   14684:	f04f 0100 	mov.w	r1, #0
   14688:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1468c:	f004 f8d6 	bl	1883c <__aeabi_fcmpge>
   14690:	4603      	mov	r3, r0
   14692:	2b00      	cmp	r3, #0
   14694:	d1dd      	bne.n	14652 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   14696:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1469a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1469e:	681b      	ldr	r3, [r3, #0]
   146a0:	4618      	mov	r0, r3
   146a2:	f04f 0100 	mov.w	r1, #0
   146a6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   146aa:	f004 f8d1 	bl	18850 <__aeabi_fcmpgt>
   146ae:	4603      	mov	r3, r0
   146b0:	2b00      	cmp	r3, #0
   146b2:	d100      	bne.n	146b6 <auto_nav+0x207e>
          return;
   146b4:	e092      	b.n	147dc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   146b6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   146ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146be:	681b      	ldr	r3, [r3, #0]
   146c0:	4618      	mov	r0, r3
   146c2:	f04f 0100 	mov.w	r1, #0
   146c6:	f2c4 313e 	movt	r1, #17214	; 0x433e
   146ca:	f004 f8a3 	bl	18814 <__aeabi_fcmplt>
   146ce:	4603      	mov	r3, r0
   146d0:	2b00      	cmp	r3, #0
   146d2:	d100      	bne.n	146d6 <auto_nav+0x209e>
          return;
   146d4:	e082      	b.n	147dc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   146d6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   146da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146de:	781b      	ldrb	r3, [r3, #0]
   146e0:	3301      	adds	r3, #1
   146e2:	b2da      	uxtb	r2, r3
   146e4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   146e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146ec:	701a      	strb	r2, [r3, #0]
   146ee:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   146f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146f6:	681a      	ldr	r2, [r3, #0]
   146f8:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   146fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14700:	601a      	str	r2, [r3, #0]
   14702:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1470a:	681a      	ldr	r2, [r3, #0]
   1470c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14714:	601a      	str	r2, [r3, #0]
   14716:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1471a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1471e:	2200      	movs	r2, #0
   14720:	801a      	strh	r2, [r3, #0]
   14722:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1472a:	f04f 0200 	mov.w	r2, #0
   1472e:	601a      	str	r2, [r3, #0]
   14730:	e054      	b.n	147dc <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   14732:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1473a:	781b      	ldrb	r3, [r3, #0]
   1473c:	2b03      	cmp	r3, #3
   1473e:	d106      	bne.n	1474e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14740:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14748:	2203      	movs	r2, #3
   1474a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   1474c:	e44b      	b.n	13fe6 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   1474e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14756:	781b      	ldrb	r3, [r3, #0]
   14758:	2b04      	cmp	r3, #4
   1475a:	d13f      	bne.n	147dc <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   1475c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14760:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14764:	2204      	movs	r2, #4
   14766:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14768:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1476c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14770:	781b      	ldrb	r3, [r3, #0]
   14772:	3301      	adds	r3, #1
   14774:	b2da      	uxtb	r2, r3
   14776:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1477a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1477e:	701a      	strb	r2, [r3, #0]
   14780:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14788:	2200      	movs	r2, #0
   1478a:	701a      	strb	r2, [r3, #0]
   1478c:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   14790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14794:	2200      	movs	r2, #0
   14796:	801a      	strh	r2, [r3, #0]
   14798:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1479c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147a0:	681a      	ldr	r2, [r3, #0]
   147a2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   147a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147aa:	601a      	str	r2, [r3, #0]
   147ac:	f64c 3300 	movw	r3, #51968	; 0xcb00
   147b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147b4:	681a      	ldr	r2, [r3, #0]
   147b6:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   147ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147be:	601a      	str	r2, [r3, #0]
   147c0:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   147c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147c8:	2200      	movs	r2, #0
   147ca:	801a      	strh	r2, [r3, #0]
   147cc:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   147d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147d4:	f04f 0200 	mov.w	r2, #0
   147d8:	601a      	str	r2, [r3, #0]
   147da:	bf00      	nop
    else { }
}
else { }

//#endif
}
   147dc:	372c      	adds	r7, #44	; 0x2c
   147de:	46bd      	mov	sp, r7
   147e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147e2:	bf00      	nop
   147e4:	f3af 8000 	nop.w
   147e8:	54442d18 	.word	0x54442d18
   147ec:	3ff921fb 	.word	0x3ff921fb
   147f0:	54442d18 	.word	0x54442d18
   147f4:	400921fb 	.word	0x400921fb

000147f8 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   147f8:	b590      	push	{r4, r7, lr}
   147fa:	b087      	sub	sp, #28
   147fc:	af00      	add	r7, sp, #0
   147fe:	4603      	mov	r3, r0
   14800:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   14802:	79f9      	ldrb	r1, [r7, #7]
   14804:	f240 5278 	movw	r2, #1400	; 0x578
   14808:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1480c:	460b      	mov	r3, r1
   1480e:	005b      	lsls	r3, r3, #1
   14810:	440b      	add	r3, r1
   14812:	009b      	lsls	r3, r3, #2
   14814:	4413      	add	r3, r2
   14816:	681a      	ldr	r2, [r3, #0]
   14818:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1481c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14820:	681b      	ldr	r3, [r3, #0]
   14822:	4610      	mov	r0, r2
   14824:	4619      	mov	r1, r3
   14826:	f003 fd4d 	bl	182c4 <__aeabi_fsub>
   1482a:	4603      	mov	r3, r0
   1482c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1482e:	79f9      	ldrb	r1, [r7, #7]
   14830:	f240 5278 	movw	r2, #1400	; 0x578
   14834:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14838:	460b      	mov	r3, r1
   1483a:	005b      	lsls	r3, r3, #1
   1483c:	440b      	add	r3, r1
   1483e:	009b      	lsls	r3, r3, #2
   14840:	4413      	add	r3, r2
   14842:	3304      	adds	r3, #4
   14844:	681a      	ldr	r2, [r3, #0]
   14846:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1484a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1484e:	681b      	ldr	r3, [r3, #0]
   14850:	4610      	mov	r0, r2
   14852:	4619      	mov	r1, r3
   14854:	f003 fd36 	bl	182c4 <__aeabi_fsub>
   14858:	4603      	mov	r3, r0
   1485a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   1485c:	6978      	ldr	r0, [r7, #20]
   1485e:	6979      	ldr	r1, [r7, #20]
   14860:	f003 fe3a 	bl	184d8 <__aeabi_fmul>
   14864:	4603      	mov	r3, r0
   14866:	461c      	mov	r4, r3
   14868:	6938      	ldr	r0, [r7, #16]
   1486a:	6939      	ldr	r1, [r7, #16]
   1486c:	f003 fe34 	bl	184d8 <__aeabi_fmul>
   14870:	4603      	mov	r3, r0
   14872:	4620      	mov	r0, r4
   14874:	4619      	mov	r1, r3
   14876:	f003 fd27 	bl	182c8 <__addsf3>
   1487a:	4603      	mov	r3, r0
   1487c:	461a      	mov	r2, r3
   1487e:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   14882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14886:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14888:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1488c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14890:	681b      	ldr	r3, [r3, #0]
   14892:	4618      	mov	r0, r3
   14894:	f04f 0100 	mov.w	r1, #0
   14898:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   1489c:	f003 fe1c 	bl	184d8 <__aeabi_fmul>
   148a0:	4603      	mov	r3, r0
   148a2:	461a      	mov	r2, r3
   148a4:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148ac:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   148ae:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148b6:	681b      	ldr	r3, [r3, #0]
   148b8:	4618      	mov	r0, r3
   148ba:	f04f 0100 	mov.w	r1, #0
   148be:	f2c4 2120 	movt	r1, #16928	; 0x4220
   148c2:	f003 ffa7 	bl	18814 <__aeabi_fcmplt>
   148c6:	4603      	mov	r3, r0
   148c8:	2b00      	cmp	r3, #0
   148ca:	d004      	beq.n	148d6 <approaching+0xde>
   148cc:	f04f 0200 	mov.w	r2, #0
   148d0:	f2c4 2220 	movt	r2, #16928	; 0x4220
   148d4:	e004      	b.n	148e0 <approaching+0xe8>
   148d6:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148de:	681a      	ldr	r2, [r3, #0]
   148e0:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148e8:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   148ea:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148f2:	681a      	ldr	r2, [r3, #0]
   148f4:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148fc:	681b      	ldr	r3, [r3, #0]
   148fe:	4610      	mov	r0, r2
   14900:	4619      	mov	r1, r3
   14902:	f003 fde9 	bl	184d8 <__aeabi_fmul>
   14906:	4603      	mov	r3, r0
   14908:	461a      	mov	r2, r3
   1490a:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1490e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14912:	681b      	ldr	r3, [r3, #0]
   14914:	4610      	mov	r0, r2
   14916:	4619      	mov	r1, r3
   14918:	f003 ff9a 	bl	18850 <__aeabi_fcmpgt>
   1491c:	4603      	mov	r3, r0
   1491e:	2b00      	cmp	r3, #0
   14920:	d001      	beq.n	14926 <approaching+0x12e>
    return TRUE;
   14922:	2301      	movs	r3, #1
   14924:	e048      	b.n	149b8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14926:	79f9      	ldrb	r1, [r7, #7]
   14928:	f240 5278 	movw	r2, #1400	; 0x578
   1492c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14930:	460b      	mov	r3, r1
   14932:	005b      	lsls	r3, r3, #1
   14934:	440b      	add	r3, r1
   14936:	009b      	lsls	r3, r3, #2
   14938:	4413      	add	r3, r2
   1493a:	681a      	ldr	r2, [r3, #0]
   1493c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14940:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14944:	681b      	ldr	r3, [r3, #0]
   14946:	4610      	mov	r0, r2
   14948:	4619      	mov	r1, r3
   1494a:	f003 fcbb 	bl	182c4 <__aeabi_fsub>
   1494e:	4603      	mov	r3, r0
   14950:	4618      	mov	r0, r3
   14952:	6979      	ldr	r1, [r7, #20]
   14954:	f003 fdc0 	bl	184d8 <__aeabi_fmul>
   14958:	4603      	mov	r3, r0
   1495a:	461c      	mov	r4, r3
   1495c:	79f9      	ldrb	r1, [r7, #7]
   1495e:	f240 5278 	movw	r2, #1400	; 0x578
   14962:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14966:	460b      	mov	r3, r1
   14968:	005b      	lsls	r3, r3, #1
   1496a:	440b      	add	r3, r1
   1496c:	009b      	lsls	r3, r3, #2
   1496e:	4413      	add	r3, r2
   14970:	3304      	adds	r3, #4
   14972:	681a      	ldr	r2, [r3, #0]
   14974:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1497c:	681b      	ldr	r3, [r3, #0]
   1497e:	4610      	mov	r0, r2
   14980:	4619      	mov	r1, r3
   14982:	f003 fc9f 	bl	182c4 <__aeabi_fsub>
   14986:	4603      	mov	r3, r0
   14988:	4618      	mov	r0, r3
   1498a:	6939      	ldr	r1, [r7, #16]
   1498c:	f003 fda4 	bl	184d8 <__aeabi_fmul>
   14990:	4603      	mov	r3, r0
   14992:	4620      	mov	r0, r4
   14994:	4619      	mov	r1, r3
   14996:	f003 fc97 	bl	182c8 <__addsf3>
   1499a:	4603      	mov	r3, r0
   1499c:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   1499e:	2301      	movs	r3, #1
   149a0:	461c      	mov	r4, r3
   149a2:	68f8      	ldr	r0, [r7, #12]
   149a4:	f04f 0100 	mov.w	r1, #0
   149a8:	f003 ff34 	bl	18814 <__aeabi_fcmplt>
   149ac:	4603      	mov	r3, r0
   149ae:	2b00      	cmp	r3, #0
   149b0:	d101      	bne.n	149b6 <approaching+0x1be>
   149b2:	2300      	movs	r3, #0
   149b4:	461c      	mov	r4, r3
   149b6:	b2e3      	uxtb	r3, r4
}
   149b8:	4618      	mov	r0, r3
   149ba:	371c      	adds	r7, #28
   149bc:	46bd      	mov	sp, r7
   149be:	bd90      	pop	{r4, r7, pc}

000149c0 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   149c0:	b5b0      	push	{r4, r5, r7, lr}
   149c2:	b082      	sub	sp, #8
   149c4:	af00      	add	r7, sp, #0
   149c6:	6078      	str	r0, [r7, #4]
   149c8:	6039      	str	r1, [r7, #0]
  desired_x = x;
   149ca:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
   149ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149d2:	687a      	ldr	r2, [r7, #4]
   149d4:	601a      	str	r2, [r3, #0]
  desired_y = y;
   149d6:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
   149da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149de:	683a      	ldr	r2, [r7, #0]
   149e0:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   149e2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   149e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149ea:	681b      	ldr	r3, [r3, #0]
   149ec:	6838      	ldr	r0, [r7, #0]
   149ee:	4619      	mov	r1, r3
   149f0:	f003 fc68 	bl	182c4 <__aeabi_fsub>
   149f4:	4603      	mov	r3, r0
   149f6:	4618      	mov	r0, r3
   149f8:	f003 f8da 	bl	17bb0 <__aeabi_f2d>
   149fc:	4604      	mov	r4, r0
   149fe:	460d      	mov	r5, r1
   14a00:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a08:	681b      	ldr	r3, [r3, #0]
   14a0a:	6878      	ldr	r0, [r7, #4]
   14a0c:	4619      	mov	r1, r3
   14a0e:	f003 fc59 	bl	182c4 <__aeabi_fsub>
   14a12:	4603      	mov	r3, r0
   14a14:	4618      	mov	r0, r3
   14a16:	f003 f8cb 	bl	17bb0 <__aeabi_f2d>
   14a1a:	4602      	mov	r2, r0
   14a1c:	460b      	mov	r3, r1
   14a1e:	4620      	mov	r0, r4
   14a20:	4629      	mov	r1, r5
   14a22:	f001 f929 	bl	15c78 <pp_atan2>
   14a26:	4602      	mov	r2, r0
   14a28:	460b      	mov	r3, r1
   14a2a:	a10b      	add	r1, pc, #44	; (adr r1, 14a58 <fly_to_xy+0x98>)
   14a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14a30:	f002 ff5e 	bl	178f0 <__aeabi_dsub>
   14a34:	4602      	mov	r2, r0
   14a36:	460b      	mov	r3, r1
   14a38:	4610      	mov	r0, r2
   14a3a:	4619      	mov	r1, r3
   14a3c:	f003 fbee 	bl	1821c <__aeabi_d2f>
   14a40:	4602      	mov	r2, r0
   14a42:	f64c 038c 	movw	r3, #51340	; 0xc88c
   14a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a4a:	601a      	str	r2, [r3, #0]
}
   14a4c:	3708      	adds	r7, #8
   14a4e:	46bd      	mov	sp, r7
   14a50:	bdb0      	pop	{r4, r5, r7, pc}
   14a52:	bf00      	nop
   14a54:	f3af 8000 	nop.w
   14a58:	54442d18 	.word	0x54442d18
   14a5c:	3ff921fb 	.word	0x3ff921fb

00014a60 <fly_to>:

static void fly_to(uint8_t wp) { 
   14a60:	b580      	push	{r7, lr}
   14a62:	b082      	sub	sp, #8
   14a64:	af00      	add	r7, sp, #0
   14a66:	4603      	mov	r3, r0
   14a68:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14a6a:	79f9      	ldrb	r1, [r7, #7]
   14a6c:	f240 5278 	movw	r2, #1400	; 0x578
   14a70:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a74:	460b      	mov	r3, r1
   14a76:	005b      	lsls	r3, r3, #1
   14a78:	440b      	add	r3, r1
   14a7a:	009b      	lsls	r3, r3, #2
   14a7c:	4413      	add	r3, r2
   14a7e:	6818      	ldr	r0, [r3, #0]
   14a80:	79f9      	ldrb	r1, [r7, #7]
   14a82:	f240 5278 	movw	r2, #1400	; 0x578
   14a86:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a8a:	460b      	mov	r3, r1
   14a8c:	005b      	lsls	r3, r3, #1
   14a8e:	440b      	add	r3, r1
   14a90:	009b      	lsls	r3, r3, #2
   14a92:	4413      	add	r3, r2
   14a94:	3304      	adds	r3, #4
   14a96:	681b      	ldr	r3, [r3, #0]
   14a98:	4619      	mov	r1, r3
   14a9a:	f7ff ff91 	bl	149c0 <fly_to_xy>
}
   14a9e:	3708      	adds	r7, #8
   14aa0:	46bd      	mov	sp, r7
   14aa2:	bd80      	pop	{r7, pc}

00014aa4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   14aa4:	b5b0      	push	{r4, r5, r7, lr}
   14aa6:	b088      	sub	sp, #32
   14aa8:	af00      	add	r7, sp, #0
   14aaa:	4602      	mov	r2, r0
   14aac:	460b      	mov	r3, r1
   14aae:	71fa      	strb	r2, [r7, #7]
   14ab0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14ab2:	79f9      	ldrb	r1, [r7, #7]
   14ab4:	f240 5278 	movw	r2, #1400	; 0x578
   14ab8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14abc:	460b      	mov	r3, r1
   14abe:	005b      	lsls	r3, r3, #1
   14ac0:	440b      	add	r3, r1
   14ac2:	009b      	lsls	r3, r3, #2
   14ac4:	4413      	add	r3, r2
   14ac6:	681b      	ldr	r3, [r3, #0]
   14ac8:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14aca:	79f9      	ldrb	r1, [r7, #7]
   14acc:	f240 5278 	movw	r2, #1400	; 0x578
   14ad0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ad4:	460b      	mov	r3, r1
   14ad6:	005b      	lsls	r3, r3, #1
   14ad8:	440b      	add	r3, r1
   14ada:	009b      	lsls	r3, r3, #2
   14adc:	4413      	add	r3, r2
   14ade:	3304      	adds	r3, #4
   14ae0:	681b      	ldr	r3, [r3, #0]
   14ae2:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14ae4:	79b9      	ldrb	r1, [r7, #6]
   14ae6:	f240 5278 	movw	r2, #1400	; 0x578
   14aea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14aee:	460b      	mov	r3, r1
   14af0:	005b      	lsls	r3, r3, #1
   14af2:	440b      	add	r3, r1
   14af4:	009b      	lsls	r3, r3, #2
   14af6:	4413      	add	r3, r2
   14af8:	681b      	ldr	r3, [r3, #0]
   14afa:	4618      	mov	r0, r3
   14afc:	69f9      	ldr	r1, [r7, #28]
   14afe:	f003 fbe1 	bl	182c4 <__aeabi_fsub>
   14b02:	4603      	mov	r3, r0
   14b04:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14b06:	79b9      	ldrb	r1, [r7, #6]
   14b08:	f240 5278 	movw	r2, #1400	; 0x578
   14b0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b10:	460b      	mov	r3, r1
   14b12:	005b      	lsls	r3, r3, #1
   14b14:	440b      	add	r3, r1
   14b16:	009b      	lsls	r3, r3, #2
   14b18:	4413      	add	r3, r2
   14b1a:	3304      	adds	r3, #4
   14b1c:	681b      	ldr	r3, [r3, #0]
   14b1e:	4618      	mov	r0, r3
   14b20:	69b9      	ldr	r1, [r7, #24]
   14b22:	f003 fbcf 	bl	182c4 <__aeabi_fsub>
   14b26:	4603      	mov	r3, r0
   14b28:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14b2a:	6978      	ldr	r0, [r7, #20]
   14b2c:	6979      	ldr	r1, [r7, #20]
   14b2e:	f003 fcd3 	bl	184d8 <__aeabi_fmul>
   14b32:	4603      	mov	r3, r0
   14b34:	461c      	mov	r4, r3
   14b36:	6938      	ldr	r0, [r7, #16]
   14b38:	6939      	ldr	r1, [r7, #16]
   14b3a:	f003 fccd 	bl	184d8 <__aeabi_fmul>
   14b3e:	4603      	mov	r3, r0
   14b40:	4620      	mov	r0, r4
   14b42:	4619      	mov	r1, r3
   14b44:	f003 fbc0 	bl	182c8 <__addsf3>
   14b48:	4603      	mov	r3, r0
   14b4a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14b4c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b54:	681b      	ldr	r3, [r3, #0]
   14b56:	4618      	mov	r0, r3
   14b58:	69f9      	ldr	r1, [r7, #28]
   14b5a:	f003 fbb3 	bl	182c4 <__aeabi_fsub>
   14b5e:	4603      	mov	r3, r0
   14b60:	4618      	mov	r0, r3
   14b62:	6979      	ldr	r1, [r7, #20]
   14b64:	f003 fcb8 	bl	184d8 <__aeabi_fmul>
   14b68:	4603      	mov	r3, r0
   14b6a:	461c      	mov	r4, r3
   14b6c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b74:	681b      	ldr	r3, [r3, #0]
   14b76:	4618      	mov	r0, r3
   14b78:	69b9      	ldr	r1, [r7, #24]
   14b7a:	f003 fba3 	bl	182c4 <__aeabi_fsub>
   14b7e:	4603      	mov	r3, r0
   14b80:	4618      	mov	r0, r3
   14b82:	6939      	ldr	r1, [r7, #16]
   14b84:	f003 fca8 	bl	184d8 <__aeabi_fmul>
   14b88:	4603      	mov	r3, r0
   14b8a:	4620      	mov	r0, r4
   14b8c:	4619      	mov	r1, r3
   14b8e:	f003 fb9b 	bl	182c8 <__addsf3>
   14b92:	4603      	mov	r3, r0
   14b94:	4618      	mov	r0, r3
   14b96:	68f9      	ldr	r1, [r7, #12]
   14b98:	f003 fd52 	bl	18640 <__aeabi_fdiv>
   14b9c:	4603      	mov	r3, r0
   14b9e:	461a      	mov	r2, r3
   14ba0:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ba8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14baa:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bb2:	681b      	ldr	r3, [r3, #0]
   14bb4:	4618      	mov	r0, r3
   14bb6:	f04f 0100 	mov.w	r1, #0
   14bba:	f003 fe3f 	bl	1883c <__aeabi_fcmpge>
   14bbe:	4603      	mov	r3, r0
   14bc0:	2b00      	cmp	r3, #0
   14bc2:	d005      	beq.n	14bd0 <route_to+0x12c>
   14bc4:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bcc:	681a      	ldr	r2, [r3, #0]
   14bce:	e001      	b.n	14bd4 <route_to+0x130>
   14bd0:	f04f 0200 	mov.w	r2, #0
   14bd4:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bdc:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14bde:	68f8      	ldr	r0, [r7, #12]
   14be0:	f002 ffe6 	bl	17bb0 <__aeabi_f2d>
   14be4:	4602      	mov	r2, r0
   14be6:	460b      	mov	r3, r1
   14be8:	4610      	mov	r0, r2
   14bea:	4619      	mov	r1, r3
   14bec:	f001 f9f4 	bl	15fd8 <pp_sqrt>
   14bf0:	4602      	mov	r2, r0
   14bf2:	460b      	mov	r3, r1
   14bf4:	4610      	mov	r0, r2
   14bf6:	4619      	mov	r1, r3
   14bf8:	f003 fb10 	bl	1821c <__aeabi_d2f>
   14bfc:	4602      	mov	r2, r0
   14bfe:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c06:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14c08:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c10:	681b      	ldr	r3, [r3, #0]
   14c12:	4618      	mov	r0, r3
   14c14:	f002 ffcc 	bl	17bb0 <__aeabi_f2d>
   14c18:	4604      	mov	r4, r0
   14c1a:	460d      	mov	r5, r1
   14c1c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c24:	681a      	ldr	r2, [r3, #0]
   14c26:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c2e:	681b      	ldr	r3, [r3, #0]
   14c30:	4610      	mov	r0, r2
   14c32:	4619      	mov	r1, r3
   14c34:	f003 fd04 	bl	18640 <__aeabi_fdiv>
   14c38:	4603      	mov	r3, r0
   14c3a:	4618      	mov	r0, r3
   14c3c:	f04f 0100 	mov.w	r1, #0
   14c40:	f003 fdfc 	bl	1883c <__aeabi_fcmpge>
   14c44:	4603      	mov	r3, r0
   14c46:	2b00      	cmp	r3, #0
   14c48:	d014      	beq.n	14c74 <route_to+0x1d0>
   14c4a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c52:	681a      	ldr	r2, [r3, #0]
   14c54:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c5c:	681b      	ldr	r3, [r3, #0]
   14c5e:	4610      	mov	r0, r2
   14c60:	4619      	mov	r1, r3
   14c62:	f003 fced 	bl	18640 <__aeabi_fdiv>
   14c66:	4603      	mov	r3, r0
   14c68:	4618      	mov	r0, r3
   14c6a:	f002 ffa1 	bl	17bb0 <__aeabi_f2d>
   14c6e:	4602      	mov	r2, r0
   14c70:	460b      	mov	r3, r1
   14c72:	e003      	b.n	14c7c <route_to+0x1d8>
   14c74:	f04f 0200 	mov.w	r2, #0
   14c78:	f04f 0300 	mov.w	r3, #0
   14c7c:	4620      	mov	r0, r4
   14c7e:	4629      	mov	r1, r5
   14c80:	f002 fe38 	bl	178f4 <__adddf3>
   14c84:	4602      	mov	r2, r0
   14c86:	460b      	mov	r3, r1
   14c88:	4610      	mov	r0, r2
   14c8a:	4619      	mov	r1, r3
   14c8c:	f003 fac6 	bl	1821c <__aeabi_d2f>
   14c90:	4602      	mov	r2, r0
   14c92:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c9a:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14c9c:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ca4:	681b      	ldr	r3, [r3, #0]
   14ca6:	4618      	mov	r0, r3
   14ca8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14cac:	f003 fdc6 	bl	1883c <__aeabi_fcmpge>
   14cb0:	4603      	mov	r3, r0
   14cb2:	2b00      	cmp	r3, #0
   14cb4:	d002      	beq.n	14cbc <route_to+0x218>
   14cb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14cba:	e004      	b.n	14cc6 <route_to+0x222>
   14cbc:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cc4:	681a      	ldr	r2, [r3, #0]
   14cc6:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cce:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14cd0:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cd8:	681b      	ldr	r3, [r3, #0]
   14cda:	4618      	mov	r0, r3
   14cdc:	6979      	ldr	r1, [r7, #20]
   14cde:	f003 fbfb 	bl	184d8 <__aeabi_fmul>
   14ce2:	4603      	mov	r3, r0
   14ce4:	4618      	mov	r0, r3
   14ce6:	69f9      	ldr	r1, [r7, #28]
   14ce8:	f003 faee 	bl	182c8 <__addsf3>
   14cec:	4603      	mov	r3, r0
   14cee:	461c      	mov	r4, r3
   14cf0:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cf8:	681b      	ldr	r3, [r3, #0]
   14cfa:	4618      	mov	r0, r3
   14cfc:	6939      	ldr	r1, [r7, #16]
   14cfe:	f003 fbeb 	bl	184d8 <__aeabi_fmul>
   14d02:	4603      	mov	r3, r0
   14d04:	4618      	mov	r0, r3
   14d06:	69b9      	ldr	r1, [r7, #24]
   14d08:	f003 fade 	bl	182c8 <__addsf3>
   14d0c:	4603      	mov	r3, r0
   14d0e:	4620      	mov	r0, r4
   14d10:	4619      	mov	r1, r3
   14d12:	f7ff fe55 	bl	149c0 <fly_to_xy>
}
   14d16:	3720      	adds	r7, #32
   14d18:	46bd      	mov	sp, r7
   14d1a:	bdb0      	pop	{r4, r5, r7, pc}

00014d1c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14d1c:	b590      	push	{r4, r7, lr}
   14d1e:	b083      	sub	sp, #12
   14d20:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14d22:	f240 5378 	movw	r3, #1400	; 0x578
   14d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d2a:	681a      	ldr	r2, [r3, #0]
   14d2c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d34:	681b      	ldr	r3, [r3, #0]
   14d36:	4610      	mov	r0, r2
   14d38:	4619      	mov	r1, r3
   14d3a:	f003 fac3 	bl	182c4 <__aeabi_fsub>
   14d3e:	4603      	mov	r3, r0
   14d40:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14d42:	f240 5378 	movw	r3, #1400	; 0x578
   14d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d4a:	685a      	ldr	r2, [r3, #4]
   14d4c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d54:	681b      	ldr	r3, [r3, #0]
   14d56:	4610      	mov	r0, r2
   14d58:	4619      	mov	r1, r3
   14d5a:	f003 fab3 	bl	182c4 <__aeabi_fsub>
   14d5e:	4603      	mov	r3, r0
   14d60:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14d62:	6878      	ldr	r0, [r7, #4]
   14d64:	6879      	ldr	r1, [r7, #4]
   14d66:	f003 fbb7 	bl	184d8 <__aeabi_fmul>
   14d6a:	4603      	mov	r3, r0
   14d6c:	461c      	mov	r4, r3
   14d6e:	6838      	ldr	r0, [r7, #0]
   14d70:	6839      	ldr	r1, [r7, #0]
   14d72:	f003 fbb1 	bl	184d8 <__aeabi_fmul>
   14d76:	4603      	mov	r3, r0
   14d78:	4620      	mov	r0, r4
   14d7a:	4619      	mov	r1, r3
   14d7c:	f003 faa4 	bl	182c8 <__addsf3>
   14d80:	4603      	mov	r3, r0
   14d82:	461a      	mov	r2, r3
   14d84:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d8c:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14d8e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d96:	681b      	ldr	r3, [r3, #0]
   14d98:	2201      	movs	r2, #1
   14d9a:	4614      	mov	r4, r2
   14d9c:	4618      	mov	r0, r3
   14d9e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14da2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14da6:	f003 fd53 	bl	18850 <__aeabi_fcmpgt>
   14daa:	4603      	mov	r3, r0
   14dac:	2b00      	cmp	r3, #0
   14dae:	d101      	bne.n	14db4 <compute_dist2_to_home+0x98>
   14db0:	2300      	movs	r3, #0
   14db2:	461c      	mov	r4, r3
   14db4:	b2e3      	uxtb	r3, r4
   14db6:	461a      	mov	r2, r3
   14db8:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   14dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dc0:	701a      	strb	r2, [r3, #0]
}
   14dc2:	370c      	adds	r7, #12
   14dc4:	46bd      	mov	sp, r7
   14dc6:	bd90      	pop	{r4, r7, pc}

00014dc8 <nav_home>:

void nav_home(void) {
   14dc8:	b580      	push	{r7, lr}
   14dca:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14dcc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dd4:	f04f 0200 	mov.w	r2, #0
   14dd8:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14dda:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14de2:	2203      	movs	r2, #3
   14de4:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14de6:	f240 5374 	movw	r3, #1396	; 0x574
   14dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dee:	f04f 0200 	mov.w	r2, #0
   14df2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14df6:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14df8:	f7ff ff90 	bl	14d1c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14dfc:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e04:	681a      	ldr	r2, [r3, #0]
   14e06:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   14e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e0e:	601a      	str	r2, [r3, #0]
}
   14e10:	bd80      	pop	{r7, pc}
   14e12:	bf00      	nop

00014e14 <nav_update>:

void nav_update(void) {
   14e14:	b580      	push	{r7, lr}
   14e16:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14e18:	f7ff ff80 	bl	14d1c <compute_dist2_to_home>

  auto_nav();
   14e1c:	f7fd fc0c 	bl	12638 <auto_nav>
}
   14e20:	bd80      	pop	{r7, pc}
   14e22:	bf00      	nop

00014e24 <nav_init>:


void nav_init(void) {
   14e24:	b480      	push	{r7}
   14e26:	af00      	add	r7, sp, #0
  nav_block = 0;
   14e28:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e30:	2200      	movs	r2, #0
   14e32:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14e34:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e3c:	2200      	movs	r2, #0
   14e3e:	701a      	strb	r2, [r3, #0]
}
   14e40:	46bd      	mov	sp, r7
   14e42:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e46:	4770      	bx	lr

00014e48 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14e48:	b480      	push	{r7}
   14e4a:	b083      	sub	sp, #12
   14e4c:	af00      	add	r7, sp, #0
   14e4e:	4603      	mov	r3, r0
   14e50:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14e52:	f242 030a 	movw	r3, #8202	; 0x200a
   14e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e5a:	781b      	ldrb	r3, [r3, #0]
   14e5c:	b2db      	uxtb	r3, r3
   14e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14e62:	2b00      	cmp	r3, #0
   14e64:	d028      	beq.n	14eb8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14e66:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e6e:	781b      	ldrb	r3, [r3, #0]
   14e70:	b2db      	uxtb	r3, r3
   14e72:	461a      	mov	r2, r3
   14e74:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e7c:	781b      	ldrb	r3, [r3, #0]
   14e7e:	3301      	adds	r3, #1
   14e80:	429a      	cmp	r2, r3
   14e82:	d100      	bne.n	14e86 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14e84:	e02c      	b.n	14ee0 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14e86:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e8e:	781b      	ldrb	r3, [r3, #0]
   14e90:	461a      	mov	r2, r3
   14e92:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   14e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e9a:	79f9      	ldrb	r1, [r7, #7]
   14e9c:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14e9e:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ea6:	781b      	ldrb	r3, [r3, #0]
   14ea8:	3301      	adds	r3, #1
   14eaa:	b2da      	uxtb	r2, r3
   14eac:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eb4:	701a      	strb	r2, [r3, #0]
   14eb6:	e013      	b.n	14ee0 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14eb8:	f242 030c 	movw	r3, #8204	; 0x200c
   14ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ec0:	79fa      	ldrb	r2, [r7, #7]
   14ec2:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14ec4:	f242 030a 	movw	r3, #8202	; 0x200a
   14ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ecc:	f242 020a 	movw	r2, #8202	; 0x200a
   14ed0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ed4:	7812      	ldrb	r2, [r2, #0]
   14ed6:	b2d2      	uxtb	r2, r2
   14ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14edc:	b2d2      	uxtb	r2, r2
   14ede:	701a      	strb	r2, [r3, #0]
  }
}
   14ee0:	370c      	adds	r7, #12
   14ee2:	46bd      	mov	sp, r7
   14ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ee8:	4770      	bx	lr
   14eea:	bf00      	nop

00014eec <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14eec:	b480      	push	{r7}
   14eee:	b083      	sub	sp, #12
   14ef0:	af00      	add	r7, sp, #0
   14ef2:	4603      	mov	r3, r0
   14ef4:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14ef6:	f242 039a 	movw	r3, #8346	; 0x209a
   14efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14efe:	781b      	ldrb	r3, [r3, #0]
   14f00:	b2db      	uxtb	r3, r3
   14f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14f06:	2b00      	cmp	r3, #0
   14f08:	d028      	beq.n	14f5c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14f0a:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f12:	781b      	ldrb	r3, [r3, #0]
   14f14:	b2db      	uxtb	r3, r3
   14f16:	461a      	mov	r2, r3
   14f18:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f20:	781b      	ldrb	r3, [r3, #0]
   14f22:	3301      	adds	r3, #1
   14f24:	429a      	cmp	r2, r3
   14f26:	d100      	bne.n	14f2a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14f28:	e02c      	b.n	14f84 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14f2a:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f32:	781b      	ldrb	r3, [r3, #0]
   14f34:	461a      	mov	r2, r3
   14f36:	f64c 13fc 	movw	r3, #51708	; 0xc9fc
   14f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f3e:	79f9      	ldrb	r1, [r7, #7]
   14f40:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14f42:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f4a:	781b      	ldrb	r3, [r3, #0]
   14f4c:	3301      	adds	r3, #1
   14f4e:	b2da      	uxtb	r2, r3
   14f50:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f58:	701a      	strb	r2, [r3, #0]
   14f5a:	e013      	b.n	14f84 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14f5c:	f242 039c 	movw	r3, #8348	; 0x209c
   14f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f64:	79fa      	ldrb	r2, [r7, #7]
   14f66:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14f68:	f242 039a 	movw	r3, #8346	; 0x209a
   14f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f70:	f242 029a 	movw	r2, #8346	; 0x209a
   14f74:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f78:	7812      	ldrb	r2, [r2, #0]
   14f7a:	b2d2      	uxtb	r2, r2
   14f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14f80:	b2d2      	uxtb	r2, r2
   14f82:	701a      	strb	r2, [r3, #0]
  }
}
   14f84:	370c      	adds	r7, #12
   14f86:	46bd      	mov	sp, r7
   14f88:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f8c:	4770      	bx	lr
   14f8e:	bf00      	nop

00014f90 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14f90:	b580      	push	{r7, lr}
   14f92:	b084      	sub	sp, #16
   14f94:	af00      	add	r7, sp, #0
   14f96:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14f98:	2300      	movs	r3, #0
   14f9a:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14f9c:	e009      	b.n	14fb2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14f9e:	7bfb      	ldrb	r3, [r7, #15]
   14fa0:	687a      	ldr	r2, [r7, #4]
   14fa2:	4413      	add	r3, r2
   14fa4:	781b      	ldrb	r3, [r3, #0]
   14fa6:	4618      	mov	r0, r3
   14fa8:	f7ff ff4e 	bl	14e48 <uart0_transmit>
    i++;
   14fac:	7bfb      	ldrb	r3, [r7, #15]
   14fae:	3301      	adds	r3, #1
   14fb0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14fb2:	7bfb      	ldrb	r3, [r7, #15]
   14fb4:	687a      	ldr	r2, [r7, #4]
   14fb6:	4413      	add	r3, r2
   14fb8:	781b      	ldrb	r3, [r3, #0]
   14fba:	2b00      	cmp	r3, #0
   14fbc:	d1ef      	bne.n	14f9e <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14fbe:	3710      	adds	r7, #16
   14fc0:	46bd      	mov	sp, r7
   14fc2:	bd80      	pop	{r7, pc}

00014fc4 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14fc4:	b590      	push	{r4, r7, lr}
   14fc6:	b089      	sub	sp, #36	; 0x24
   14fc8:	af00      	add	r7, sp, #0
   14fca:	4603      	mov	r3, r0
   14fcc:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14fce:	f648 23e4 	movw	r3, #35556	; 0x8ae4
   14fd2:	f2c0 0301 	movt	r3, #1
   14fd6:	f107 040c 	add.w	r4, r7, #12
   14fda:	6818      	ldr	r0, [r3, #0]
   14fdc:	6859      	ldr	r1, [r3, #4]
   14fde:	689a      	ldr	r2, [r3, #8]
   14fe0:	68db      	ldr	r3, [r3, #12]
   14fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14fe4:	79fb      	ldrb	r3, [r7, #7]
   14fe6:	091b      	lsrs	r3, r3, #4
   14fe8:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14fea:	79fb      	ldrb	r3, [r7, #7]
   14fec:	f003 030f 	and.w	r3, r3, #15
   14ff0:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14ff2:	230f      	movs	r3, #15
   14ff4:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14ff6:	230f      	movs	r3, #15
   14ff8:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14ffa:	7ffb      	ldrb	r3, [r7, #31]
   14ffc:	f107 0220 	add.w	r2, r7, #32
   15000:	4413      	add	r3, r2
   15002:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15006:	4618      	mov	r0, r3
   15008:	f7ff ff1e 	bl	14e48 <uart0_transmit>
  uart0_transmit(hex[low]);
   1500c:	7fbb      	ldrb	r3, [r7, #30]
   1500e:	f107 0220 	add.w	r2, r7, #32
   15012:	4413      	add	r3, r2
   15014:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15018:	4618      	mov	r0, r3
   1501a:	f7ff ff15 	bl	14e48 <uart0_transmit>
}
   1501e:	3724      	adds	r7, #36	; 0x24
   15020:	46bd      	mov	sp, r7
   15022:	bd90      	pop	{r4, r7, pc}

00015024 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   15024:	b480      	push	{r7}
   15026:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   15028:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   1502c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15030:	781a      	ldrb	r2, [r3, #0]
   15032:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   15036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1503a:	781b      	ldrb	r3, [r3, #0]
   1503c:	b2db      	uxtb	r3, r3
   1503e:	429a      	cmp	r2, r3
   15040:	d10e      	bne.n	15060 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   15042:	f242 030a 	movw	r3, #8202	; 0x200a
   15046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1504a:	f242 020a 	movw	r2, #8202	; 0x200a
   1504e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15052:	7812      	ldrb	r2, [r2, #0]
   15054:	b2d2      	uxtb	r2, r2
   15056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1505a:	b2d2      	uxtb	r2, r2
   1505c:	701a      	strb	r2, [r3, #0]
   1505e:	e01d      	b.n	1509c <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   15060:	f242 030c 	movw	r3, #8204	; 0x200c
   15064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15068:	f64c 02f5 	movw	r2, #51445	; 0xc8f5
   1506c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15070:	7812      	ldrb	r2, [r2, #0]
   15072:	b2d2      	uxtb	r2, r2
   15074:	4611      	mov	r1, r2
   15076:	f64c 02f8 	movw	r2, #51448	; 0xc8f8
   1507a:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1507e:	5c52      	ldrb	r2, [r2, r1]
   15080:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   15082:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   15086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1508a:	781b      	ldrb	r3, [r3, #0]
   1508c:	b2db      	uxtb	r3, r3
   1508e:	3301      	adds	r3, #1
   15090:	b2da      	uxtb	r2, r3
   15092:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   15096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1509a:	701a      	strb	r2, [r3, #0]
  }
}
   1509c:	46bd      	mov	sp, r7
   1509e:	f85d 7b04 	ldr.w	r7, [sp], #4
   150a2:	4770      	bx	lr

000150a4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   150a4:	b480      	push	{r7}
   150a6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   150a8:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   150ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150b0:	781a      	ldrb	r2, [r3, #0]
   150b2:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   150b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150ba:	781b      	ldrb	r3, [r3, #0]
   150bc:	b2db      	uxtb	r3, r3
   150be:	429a      	cmp	r2, r3
   150c0:	d10e      	bne.n	150e0 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   150c2:	f242 039a 	movw	r3, #8346	; 0x209a
   150c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150ca:	f242 029a 	movw	r2, #8346	; 0x209a
   150ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150d2:	7812      	ldrb	r2, [r2, #0]
   150d4:	b2d2      	uxtb	r2, r2
   150d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   150da:	b2d2      	uxtb	r2, r2
   150dc:	701a      	strb	r2, [r3, #0]
   150de:	e01d      	b.n	1511c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   150e0:	f242 039c 	movw	r3, #8348	; 0x209c
   150e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e8:	f64c 12f9 	movw	r2, #51705	; 0xc9f9
   150ec:	f2c2 0204 	movt	r2, #8196	; 0x2004
   150f0:	7812      	ldrb	r2, [r2, #0]
   150f2:	b2d2      	uxtb	r2, r2
   150f4:	4611      	mov	r1, r2
   150f6:	f64c 12fc 	movw	r2, #51708	; 0xc9fc
   150fa:	f2c2 0204 	movt	r2, #8196	; 0x2004
   150fe:	5c52      	ldrb	r2, [r2, r1]
   15100:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   15102:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   15106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1510a:	781b      	ldrb	r3, [r3, #0]
   1510c:	b2db      	uxtb	r3, r3
   1510e:	3301      	adds	r3, #1
   15110:	b2da      	uxtb	r2, r3
   15112:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   15116:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1511a:	701a      	strb	r2, [r3, #0]
  }
}
   1511c:	46bd      	mov	sp, r7
   1511e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15122:	4770      	bx	lr

00015124 <uart0_init>:

void uart0_init( void ) {
   15124:	b480      	push	{r7}
   15126:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   15128:	f242 0390 	movw	r3, #8336	; 0x2090
   1512c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15130:	2200      	movs	r2, #0
   15132:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   15134:	f242 0309 	movw	r3, #8201	; 0x2009
   15138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1513c:	2219      	movs	r2, #25
   1513e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   15140:	f242 030b 	movw	r3, #8203	; 0x200b
   15144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15148:	2200      	movs	r2, #0
   1514a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   1514c:	f242 030a 	movw	r3, #8202	; 0x200a
   15150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15154:	2218      	movs	r2, #24
   15156:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   15158:	f242 0395 	movw	r3, #8341	; 0x2095
   1515c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15160:	2206      	movs	r2, #6
   15162:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   15164:	f242 030a 	movw	r3, #8202	; 0x200a
   15168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1516c:	f242 020a 	movw	r2, #8202	; 0x200a
   15170:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15174:	7812      	ldrb	r2, [r2, #0]
   15176:	b2d2      	uxtb	r2, r2
   15178:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1517c:	b2d2      	uxtb	r2, r2
   1517e:	701a      	strb	r2, [r3, #0]
}
   15180:	46bd      	mov	sp, r7
   15182:	f85d 7b04 	ldr.w	r7, [sp], #4
   15186:	4770      	bx	lr

00015188 <uart1_init>:

void uart1_init( void ) {
   15188:	b480      	push	{r7}
   1518a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   1518c:	f242 0398 	movw	r3, #8344	; 0x2098
   15190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15194:	2200      	movs	r2, #0
   15196:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   15198:	f242 0399 	movw	r3, #8345	; 0x2099
   1519c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151a0:	2219      	movs	r2, #25
   151a2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   151a4:	f242 039b 	movw	r3, #8347	; 0x209b
   151a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ac:	2200      	movs	r2, #0
   151ae:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   151b0:	f242 039a 	movw	r3, #8346	; 0x209a
   151b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151b8:	2218      	movs	r2, #24
   151ba:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   151bc:	f242 039d 	movw	r3, #8349	; 0x209d
   151c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151c4:	2206      	movs	r2, #6
   151c6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   151c8:	f242 039a 	movw	r3, #8346	; 0x209a
   151cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151d0:	f242 029a 	movw	r2, #8346	; 0x209a
   151d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   151d8:	7812      	ldrb	r2, [r2, #0]
   151da:	b2d2      	uxtb	r2, r2
   151dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   151e0:	b2d2      	uxtb	r2, r2
   151e2:	701a      	strb	r2, [r3, #0]
}
   151e4:	46bd      	mov	sp, r7
   151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   151ea:	4770      	bx	lr
   151ec:	0000      	movs	r0, r0
	...

000151f0 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   151f0:	b480      	push	{r7}
   151f2:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   151f4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   151f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151fc:	f04f 0200 	mov.w	r2, #0
   15200:	601a      	str	r2, [r3, #0]
   15202:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1520a:	f04f 0200 	mov.w	r2, #0
   1520e:	601a      	str	r2, [r3, #0]
   15210:	f64c 3304 	movw	r3, #51972	; 0xcb04
   15214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15218:	f04f 0200 	mov.w	r2, #0
   1521c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   1521e:	f64c 3308 	movw	r3, #51976	; 0xcb08
   15222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15226:	f04f 0200 	mov.w	r2, #0
   1522a:	601a      	str	r2, [r3, #0]
   1522c:	f64c 330c 	movw	r3, #51980	; 0xcb0c
   15230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15234:	f04f 0200 	mov.w	r2, #0
   15238:	601a      	str	r2, [r3, #0]
   1523a:	f64c 3310 	movw	r3, #51984	; 0xcb10
   1523e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15242:	f04f 0200 	mov.w	r2, #0
   15246:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15248:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1524c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15250:	f04f 0200 	mov.w	r2, #0
   15254:	601a      	str	r2, [r3, #0]
   15256:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1525a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1525e:	f04f 0200 	mov.w	r2, #0
   15262:	601a      	str	r2, [r3, #0]
   15264:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   15268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1526c:	f04f 0200 	mov.w	r2, #0
   15270:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   15272:	f64c 3320 	movw	r3, #52000	; 0xcb20
   15276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1527a:	f04f 0200 	mov.w	r2, #0
   1527e:	601a      	str	r2, [r3, #0]
   15280:	f64c 3324 	movw	r3, #52004	; 0xcb24
   15284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15288:	f04f 0200 	mov.w	r2, #0
   1528c:	601a      	str	r2, [r3, #0]
   1528e:	f64c 3328 	movw	r3, #52008	; 0xcb28
   15292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15296:	f04f 0200 	mov.w	r2, #0
   1529a:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   1529c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   152a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152a4:	2200      	movs	r2, #0
   152a6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   152a8:	f240 5348 	movw	r3, #1352	; 0x548
   152ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152b0:	681a      	ldr	r2, [r3, #0]
   152b2:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   152b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ba:	601a      	str	r2, [r3, #0]
}
   152bc:	46bd      	mov	sp, r7
   152be:	f85d 7b04 	ldr.w	r7, [sp], #4
   152c2:	4770      	bx	lr

000152c4 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   152c4:	b580      	push	{r7, lr}
   152c6:	b082      	sub	sp, #8
   152c8:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   152ca:	f240 533c 	movw	r3, #1340	; 0x53c
   152ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152d2:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   152d4:	2b01      	cmp	r3, #1
   152d6:	d105      	bne.n	152e4 <estimator_update_state_infrared+0x20>
   152d8:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   152dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152e0:	681b      	ldr	r3, [r3, #0]
   152e2:	e004      	b.n	152ee <estimator_update_state_infrared+0x2a>
   152e4:	f240 5348 	movw	r3, #1352	; 0x548
   152e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ec:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   152ee:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   152f0:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   152f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152f8:	881b      	ldrh	r3, [r3, #0]
   152fa:	b21b      	sxth	r3, r3
   152fc:	4618      	mov	r0, r3
   152fe:	f003 f897 	bl	18430 <__aeabi_i2f>
   15302:	4603      	mov	r3, r0
   15304:	4618      	mov	r0, r3
   15306:	6879      	ldr	r1, [r7, #4]
   15308:	f003 f8e6 	bl	184d8 <__aeabi_fmul>
   1530c:	4603      	mov	r3, r0
   1530e:	461a      	mov	r2, r3
   15310:	f64c 3308 	movw	r3, #51976	; 0xcb08
   15314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15318:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1531a:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   1531e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15322:	881b      	ldrh	r3, [r3, #0]
   15324:	b21b      	sxth	r3, r3
   15326:	4618      	mov	r0, r3
   15328:	f003 f882 	bl	18430 <__aeabi_i2f>
   1532c:	4603      	mov	r3, r0
   1532e:	4618      	mov	r0, r3
   15330:	6879      	ldr	r1, [r7, #4]
   15332:	f003 f8d1 	bl	184d8 <__aeabi_fmul>
   15336:	4603      	mov	r3, r0
   15338:	461a      	mov	r2, r3
   1533a:	f64c 3310 	movw	r3, #51984	; 0xcb10
   1533e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15342:	601a      	str	r2, [r3, #0]
}
   15344:	3708      	adds	r7, #8
   15346:	46bd      	mov	sp, r7
   15348:	bd80      	pop	{r7, pc}
   1534a:	bf00      	nop

0001534c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1534c:	b5b0      	push	{r4, r5, r7, lr}
   1534e:	b084      	sub	sp, #16
   15350:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   15352:	f64c 3348 	movw	r3, #52040	; 0xcb48
   15356:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1535a:	781b      	ldrb	r3, [r3, #0]
   1535c:	2b00      	cmp	r3, #0
   1535e:	f000 81e8 	beq.w	15732 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   15362:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   15366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1536a:	681a      	ldr	r2, [r3, #0]
   1536c:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   15370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15374:	681b      	ldr	r3, [r3, #0]
   15376:	4610      	mov	r0, r2
   15378:	4619      	mov	r1, r3
   1537a:	f002 ffa3 	bl	182c4 <__aeabi_fsub>
   1537e:	4603      	mov	r3, r0
   15380:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   15382:	68b8      	ldr	r0, [r7, #8]
   15384:	f002 fc14 	bl	17bb0 <__aeabi_f2d>
   15388:	4602      	mov	r2, r0
   1538a:	460b      	mov	r3, r1
   1538c:	4610      	mov	r0, r2
   1538e:	4619      	mov	r1, r3
   15390:	a385      	add	r3, pc, #532	; (adr r3, 155a8 <estimator_update_ir_estim+0x25c>)
   15392:	e9d3 2300 	ldrd	r2, r3, [r3]
   15396:	f002 feef 	bl	18178 <__aeabi_dcmpgt>
   1539a:	4603      	mov	r3, r0
   1539c:	2b00      	cmp	r3, #0
   1539e:	d100      	bne.n	153a2 <estimator_update_ir_estim+0x56>
   153a0:	e219      	b.n	157d6 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   153a2:	f64c 3338 	movw	r3, #52024	; 0xcb38
   153a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153aa:	681a      	ldr	r2, [r3, #0]
   153ac:	f64c 3350 	movw	r3, #52048	; 0xcb50
   153b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153b4:	681b      	ldr	r3, [r3, #0]
   153b6:	4610      	mov	r0, r2
   153b8:	4619      	mov	r1, r3
   153ba:	f002 ff83 	bl	182c4 <__aeabi_fsub>
   153be:	4603      	mov	r3, r0
   153c0:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   153c2:	e013      	b.n	153ec <estimator_update_ir_estim+0xa0>
   153c4:	68f8      	ldr	r0, [r7, #12]
   153c6:	f002 fbf3 	bl	17bb0 <__aeabi_f2d>
   153ca:	4602      	mov	r2, r0
   153cc:	460b      	mov	r3, r1
   153ce:	4610      	mov	r0, r2
   153d0:	4619      	mov	r1, r3
   153d2:	a377      	add	r3, pc, #476	; (adr r3, 155b0 <estimator_update_ir_estim+0x264>)
   153d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   153d8:	f002 fa8a 	bl	178f0 <__aeabi_dsub>
   153dc:	4602      	mov	r2, r0
   153de:	460b      	mov	r3, r1
   153e0:	4610      	mov	r0, r2
   153e2:	4619      	mov	r1, r3
   153e4:	f002 ff1a 	bl	1821c <__aeabi_d2f>
   153e8:	4603      	mov	r3, r0
   153ea:	60fb      	str	r3, [r7, #12]
   153ec:	68f8      	ldr	r0, [r7, #12]
   153ee:	f002 fbdf 	bl	17bb0 <__aeabi_f2d>
   153f2:	4602      	mov	r2, r0
   153f4:	460b      	mov	r3, r1
   153f6:	4610      	mov	r0, r2
   153f8:	4619      	mov	r1, r3
   153fa:	a36f      	add	r3, pc, #444	; (adr r3, 155b8 <estimator_update_ir_estim+0x26c>)
   153fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15400:	f002 feba 	bl	18178 <__aeabi_dcmpgt>
   15404:	4603      	mov	r3, r0
   15406:	2b00      	cmp	r3, #0
   15408:	d1dc      	bne.n	153c4 <estimator_update_ir_estim+0x78>
   1540a:	e013      	b.n	15434 <estimator_update_ir_estim+0xe8>
   1540c:	68f8      	ldr	r0, [r7, #12]
   1540e:	f002 fbcf 	bl	17bb0 <__aeabi_f2d>
   15412:	4602      	mov	r2, r0
   15414:	460b      	mov	r3, r1
   15416:	4610      	mov	r0, r2
   15418:	4619      	mov	r1, r3
   1541a:	a365      	add	r3, pc, #404	; (adr r3, 155b0 <estimator_update_ir_estim+0x264>)
   1541c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15420:	f002 fa68 	bl	178f4 <__adddf3>
   15424:	4602      	mov	r2, r0
   15426:	460b      	mov	r3, r1
   15428:	4610      	mov	r0, r2
   1542a:	4619      	mov	r1, r3
   1542c:	f002 fef6 	bl	1821c <__aeabi_d2f>
   15430:	4603      	mov	r3, r0
   15432:	60fb      	str	r3, [r7, #12]
   15434:	68f8      	ldr	r0, [r7, #12]
   15436:	f002 fbbb 	bl	17bb0 <__aeabi_f2d>
   1543a:	4602      	mov	r2, r0
   1543c:	460b      	mov	r3, r1
   1543e:	4610      	mov	r0, r2
   15440:	4619      	mov	r1, r3
   15442:	a35f      	add	r3, pc, #380	; (adr r3, 155c0 <estimator_update_ir_estim+0x274>)
   15444:	e9d3 2300 	ldrd	r2, r3, [r3]
   15448:	f002 fe78 	bl	1813c <__aeabi_dcmplt>
   1544c:	4603      	mov	r3, r0
   1544e:	2b00      	cmp	r3, #0
   15450:	d1dc      	bne.n	1540c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   15452:	68f8      	ldr	r0, [r7, #12]
   15454:	68b9      	ldr	r1, [r7, #8]
   15456:	f003 f8f3 	bl	18640 <__aeabi_fdiv>
   1545a:	4603      	mov	r3, r0
   1545c:	4618      	mov	r0, r3
   1545e:	f002 fba7 	bl	17bb0 <__aeabi_f2d>
   15462:	4602      	mov	r2, r0
   15464:	460b      	mov	r3, r1
   15466:	4610      	mov	r0, r2
   15468:	4619      	mov	r1, r3
   1546a:	f04f 0200 	mov.w	r2, #0
   1546e:	f04f 0300 	mov.w	r3, #0
   15472:	f2c4 0324 	movt	r3, #16420	; 0x4024
   15476:	f002 fbef 	bl	17c58 <__aeabi_dmul>
   1547a:	4602      	mov	r2, r0
   1547c:	460b      	mov	r3, r1
   1547e:	4610      	mov	r0, r2
   15480:	4619      	mov	r1, r3
   15482:	a351      	add	r3, pc, #324	; (adr r3, 155c8 <estimator_update_ir_estim+0x27c>)
   15484:	e9d3 2300 	ldrd	r2, r3, [r3]
   15488:	f002 fd10 	bl	17eac <__aeabi_ddiv>
   1548c:	4602      	mov	r2, r0
   1548e:	460b      	mov	r3, r1
   15490:	4610      	mov	r0, r2
   15492:	4619      	mov	r1, r3
   15494:	f002 fec2 	bl	1821c <__aeabi_d2f>
   15498:	4603      	mov	r3, r0
   1549a:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1549c:	e013      	b.n	154c6 <estimator_update_ir_estim+0x17a>
   1549e:	68f8      	ldr	r0, [r7, #12]
   154a0:	f002 fb86 	bl	17bb0 <__aeabi_f2d>
   154a4:	4602      	mov	r2, r0
   154a6:	460b      	mov	r3, r1
   154a8:	4610      	mov	r0, r2
   154aa:	4619      	mov	r1, r3
   154ac:	a340      	add	r3, pc, #256	; (adr r3, 155b0 <estimator_update_ir_estim+0x264>)
   154ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   154b2:	f002 fa1d 	bl	178f0 <__aeabi_dsub>
   154b6:	4602      	mov	r2, r0
   154b8:	460b      	mov	r3, r1
   154ba:	4610      	mov	r0, r2
   154bc:	4619      	mov	r1, r3
   154be:	f002 fead 	bl	1821c <__aeabi_d2f>
   154c2:	4603      	mov	r3, r0
   154c4:	60fb      	str	r3, [r7, #12]
   154c6:	68f8      	ldr	r0, [r7, #12]
   154c8:	f002 fb72 	bl	17bb0 <__aeabi_f2d>
   154cc:	4602      	mov	r2, r0
   154ce:	460b      	mov	r3, r1
   154d0:	4610      	mov	r0, r2
   154d2:	4619      	mov	r1, r3
   154d4:	a338      	add	r3, pc, #224	; (adr r3, 155b8 <estimator_update_ir_estim+0x26c>)
   154d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   154da:	f002 fe4d 	bl	18178 <__aeabi_dcmpgt>
   154de:	4603      	mov	r3, r0
   154e0:	2b00      	cmp	r3, #0
   154e2:	d1dc      	bne.n	1549e <estimator_update_ir_estim+0x152>
   154e4:	e013      	b.n	1550e <estimator_update_ir_estim+0x1c2>
   154e6:	68f8      	ldr	r0, [r7, #12]
   154e8:	f002 fb62 	bl	17bb0 <__aeabi_f2d>
   154ec:	4602      	mov	r2, r0
   154ee:	460b      	mov	r3, r1
   154f0:	4610      	mov	r0, r2
   154f2:	4619      	mov	r1, r3
   154f4:	a32e      	add	r3, pc, #184	; (adr r3, 155b0 <estimator_update_ir_estim+0x264>)
   154f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   154fa:	f002 f9fb 	bl	178f4 <__adddf3>
   154fe:	4602      	mov	r2, r0
   15500:	460b      	mov	r3, r1
   15502:	4610      	mov	r0, r2
   15504:	4619      	mov	r1, r3
   15506:	f002 fe89 	bl	1821c <__aeabi_d2f>
   1550a:	4603      	mov	r3, r0
   1550c:	60fb      	str	r3, [r7, #12]
   1550e:	68f8      	ldr	r0, [r7, #12]
   15510:	f002 fb4e 	bl	17bb0 <__aeabi_f2d>
   15514:	4602      	mov	r2, r0
   15516:	460b      	mov	r3, r1
   15518:	4610      	mov	r0, r2
   1551a:	4619      	mov	r1, r3
   1551c:	a328      	add	r3, pc, #160	; (adr r3, 155c0 <estimator_update_ir_estim+0x274>)
   1551e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15522:	f002 fe0b 	bl	1813c <__aeabi_dcmplt>
   15526:	4603      	mov	r3, r0
   15528:	2b00      	cmp	r3, #0
   1552a:	d1dc      	bne.n	154e6 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1552c:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15534:	881b      	ldrh	r3, [r3, #0]
   15536:	b21b      	sxth	r3, r3
   15538:	4618      	mov	r0, r3
   1553a:	f002 ff79 	bl	18430 <__aeabi_i2f>
   1553e:	4602      	mov	r2, r0
   15540:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15548:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1554a:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1554e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15552:	68fa      	ldr	r2, [r7, #12]
   15554:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   15556:	68f8      	ldr	r0, [r7, #12]
   15558:	f04f 0100 	mov.w	r1, #0
   1555c:	f003 f95a 	bl	18814 <__aeabi_fcmplt>
   15560:	4603      	mov	r3, r0
   15562:	2b00      	cmp	r3, #0
   15564:	d003      	beq.n	1556e <estimator_update_ir_estim+0x222>
   15566:	68fb      	ldr	r3, [r7, #12]
   15568:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1556c:	e000      	b.n	15570 <estimator_update_ir_estim+0x224>
   1556e:	68fb      	ldr	r3, [r7, #12]
   15570:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   15572:	6878      	ldr	r0, [r7, #4]
   15574:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15578:	f003 f94c 	bl	18814 <__aeabi_fcmplt>
   1557c:	4603      	mov	r3, r0
   1557e:	2b00      	cmp	r3, #0
   15580:	d100      	bne.n	15584 <estimator_update_ir_estim+0x238>
   15582:	e128      	b.n	157d6 <estimator_update_ir_estim+0x48a>
   15584:	6878      	ldr	r0, [r7, #4]
   15586:	f002 fb13 	bl	17bb0 <__aeabi_f2d>
   1558a:	4602      	mov	r2, r0
   1558c:	460b      	mov	r3, r1
   1558e:	4610      	mov	r0, r2
   15590:	4619      	mov	r1, r3
   15592:	a30f      	add	r3, pc, #60	; (adr r3, 155d0 <estimator_update_ir_estim+0x284>)
   15594:	e9d3 2300 	ldrd	r2, r3, [r3]
   15598:	f002 fdee 	bl	18178 <__aeabi_dcmpgt>
   1559c:	4603      	mov	r3, r0
   1559e:	2b00      	cmp	r3, #0
   155a0:	d11a      	bne.n	155d8 <estimator_update_ir_estim+0x28c>
   155a2:	e118      	b.n	157d6 <estimator_update_ir_estim+0x48a>
   155a4:	f3af 8000 	nop.w
   155a8:	9999999a 	.word	0x9999999a
   155ac:	3fb99999 	.word	0x3fb99999
   155b0:	54442d18 	.word	0x54442d18
   155b4:	401921fb 	.word	0x401921fb
   155b8:	54442d18 	.word	0x54442d18
   155bc:	400921fb 	.word	0x400921fb
   155c0:	54442d18 	.word	0x54442d18
   155c4:	c00921fb 	.word	0xc00921fb
   155c8:	51eb851f 	.word	0x51eb851f
   155cc:	40239eb8 	.word	0x40239eb8
   155d0:	9999999a 	.word	0x9999999a
   155d4:	3fa99999 	.word	0x3fa99999
   155d8:	f240 5340 	movw	r3, #1344	; 0x540
   155dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155e0:	881b      	ldrh	r3, [r3, #0]
   155e2:	b21b      	sxth	r3, r3
   155e4:	425b      	negs	r3, r3
   155e6:	0fda      	lsrs	r2, r3, #31
   155e8:	4413      	add	r3, r2
   155ea:	105b      	asrs	r3, r3, #1
   155ec:	461a      	mov	r2, r3
   155ee:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   155f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155f6:	881b      	ldrh	r3, [r3, #0]
   155f8:	b21b      	sxth	r3, r3
   155fa:	429a      	cmp	r2, r3
   155fc:	f280 8098 	bge.w	15730 <estimator_update_ir_estim+0x3e4>
   15600:	f240 5340 	movw	r3, #1344	; 0x540
   15604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15608:	881b      	ldrh	r3, [r3, #0]
   1560a:	b21b      	sxth	r3, r3
   1560c:	0fda      	lsrs	r2, r3, #31
   1560e:	4413      	add	r3, r2
   15610:	105b      	asrs	r3, r3, #1
   15612:	b29a      	uxth	r2, r3
   15614:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1561c:	881b      	ldrh	r3, [r3, #0]
   1561e:	b212      	sxth	r2, r2
   15620:	b21b      	sxth	r3, r3
   15622:	429a      	cmp	r2, r3
   15624:	f340 8084 	ble.w	15730 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15628:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1562c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15630:	681a      	ldr	r2, [r3, #0]
   15632:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15636:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1563a:	681b      	ldr	r3, [r3, #0]
   1563c:	4610      	mov	r0, r2
   1563e:	4619      	mov	r1, r3
   15640:	f002 ff4a 	bl	184d8 <__aeabi_fmul>
   15644:	4603      	mov	r3, r0
   15646:	4618      	mov	r0, r3
   15648:	f002 fab2 	bl	17bb0 <__aeabi_f2d>
   1564c:	4604      	mov	r4, r0
   1564e:	460d      	mov	r5, r1
   15650:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15658:	681b      	ldr	r3, [r3, #0]
   1565a:	4618      	mov	r0, r3
   1565c:	f002 faa8 	bl	17bb0 <__aeabi_f2d>
   15660:	4602      	mov	r2, r0
   15662:	460b      	mov	r3, r1
   15664:	4610      	mov	r0, r2
   15666:	4619      	mov	r1, r3
   15668:	a367      	add	r3, pc, #412	; (adr r3, 15808 <estimator_update_ir_estim+0x4bc>)
   1566a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1566e:	f002 faf3 	bl	17c58 <__aeabi_dmul>
   15672:	4602      	mov	r2, r0
   15674:	460b      	mov	r3, r1
   15676:	4620      	mov	r0, r4
   15678:	4629      	mov	r1, r5
   1567a:	f002 f93b 	bl	178f4 <__adddf3>
   1567e:	4602      	mov	r2, r0
   15680:	460b      	mov	r3, r1
   15682:	4610      	mov	r0, r2
   15684:	4619      	mov	r1, r3
   15686:	f002 fdc9 	bl	1821c <__aeabi_d2f>
   1568a:	4602      	mov	r2, r0
   1568c:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15694:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   15696:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1569a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1569e:	681a      	ldr	r2, [r3, #0]
   156a0:	f64c 3340 	movw	r3, #52032	; 0xcb40
   156a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156a8:	681b      	ldr	r3, [r3, #0]
   156aa:	4610      	mov	r0, r2
   156ac:	4619      	mov	r1, r3
   156ae:	f002 ff13 	bl	184d8 <__aeabi_fmul>
   156b2:	4603      	mov	r3, r0
   156b4:	4618      	mov	r0, r3
   156b6:	f002 fa7b 	bl	17bb0 <__aeabi_f2d>
   156ba:	4604      	mov	r4, r0
   156bc:	460d      	mov	r5, r1
   156be:	f64c 3358 	movw	r3, #52056	; 0xcb58
   156c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156c6:	681b      	ldr	r3, [r3, #0]
   156c8:	4618      	mov	r0, r3
   156ca:	f002 fa71 	bl	17bb0 <__aeabi_f2d>
   156ce:	4602      	mov	r2, r0
   156d0:	460b      	mov	r3, r1
   156d2:	4610      	mov	r0, r2
   156d4:	4619      	mov	r1, r3
   156d6:	a34c      	add	r3, pc, #304	; (adr r3, 15808 <estimator_update_ir_estim+0x4bc>)
   156d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   156dc:	f002 fabc 	bl	17c58 <__aeabi_dmul>
   156e0:	4602      	mov	r2, r0
   156e2:	460b      	mov	r3, r1
   156e4:	4620      	mov	r0, r4
   156e6:	4629      	mov	r1, r5
   156e8:	f002 f904 	bl	178f4 <__adddf3>
   156ec:	4602      	mov	r2, r0
   156ee:	460b      	mov	r3, r1
   156f0:	4610      	mov	r0, r2
   156f2:	4619      	mov	r1, r3
   156f4:	f002 fd92 	bl	1821c <__aeabi_d2f>
   156f8:	4602      	mov	r2, r0
   156fa:	f64c 3358 	movw	r3, #52056	; 0xcb58
   156fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15702:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   15704:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1570c:	681a      	ldr	r2, [r3, #0]
   1570e:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15716:	681b      	ldr	r3, [r3, #0]
   15718:	4610      	mov	r0, r2
   1571a:	4619      	mov	r1, r3
   1571c:	f002 ff90 	bl	18640 <__aeabi_fdiv>
   15720:	4603      	mov	r3, r0
   15722:	461a      	mov	r2, r3
   15724:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   15728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1572c:	601a      	str	r2, [r3, #0]
   1572e:	e052      	b.n	157d6 <estimator_update_ir_estim+0x48a>
   15730:	e051      	b.n	157d6 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   15732:	f64c 3348 	movw	r3, #52040	; 0xcb48
   15736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1573a:	2201      	movs	r2, #1
   1573c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1573e:	f240 5340 	movw	r3, #1344	; 0x540
   15742:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15746:	881b      	ldrh	r3, [r3, #0]
   15748:	b21b      	sxth	r3, r3
   1574a:	4618      	mov	r0, r3
   1574c:	f002 fe70 	bl	18430 <__aeabi_i2f>
   15750:	4603      	mov	r3, r0
   15752:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   15754:	6838      	ldr	r0, [r7, #0]
   15756:	6839      	ldr	r1, [r7, #0]
   15758:	f002 febe 	bl	184d8 <__aeabi_fmul>
   1575c:	4603      	mov	r3, r0
   1575e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15760:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   15764:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15768:	681b      	ldr	r3, [r3, #0]
   1576a:	4618      	mov	r0, r3
   1576c:	f002 fa20 	bl	17bb0 <__aeabi_f2d>
   15770:	4602      	mov	r2, r0
   15772:	460b      	mov	r3, r1
   15774:	4610      	mov	r0, r2
   15776:	4619      	mov	r1, r3
   15778:	f04f 0200 	mov.w	r2, #0
   1577c:	f04f 0300 	mov.w	r3, #0
   15780:	f2c4 0359 	movt	r3, #16473	; 0x4059
   15784:	f002 fa68 	bl	17c58 <__aeabi_dmul>
   15788:	4602      	mov	r2, r0
   1578a:	460b      	mov	r3, r1
   1578c:	4614      	mov	r4, r2
   1578e:	461d      	mov	r5, r3
   15790:	6838      	ldr	r0, [r7, #0]
   15792:	f002 fa0d 	bl	17bb0 <__aeabi_f2d>
   15796:	4602      	mov	r2, r0
   15798:	460b      	mov	r3, r1
   1579a:	4620      	mov	r0, r4
   1579c:	4629      	mov	r1, r5
   1579e:	f002 fa5b 	bl	17c58 <__aeabi_dmul>
   157a2:	4602      	mov	r2, r0
   157a4:	460b      	mov	r3, r1
   157a6:	4610      	mov	r0, r2
   157a8:	4619      	mov	r1, r3
   157aa:	f002 fd37 	bl	1821c <__aeabi_d2f>
   157ae:	4602      	mov	r2, r0
   157b0:	f64c 3354 	movw	r3, #52052	; 0xcb54
   157b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157b8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   157ba:	6838      	ldr	r0, [r7, #0]
   157bc:	f04f 0100 	mov.w	r1, #0
   157c0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   157c4:	f002 fe88 	bl	184d8 <__aeabi_fmul>
   157c8:	4603      	mov	r3, r0
   157ca:	461a      	mov	r2, r3
   157cc:	f64c 3358 	movw	r3, #52056	; 0xcb58
   157d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157d4:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   157d6:	f64c 3338 	movw	r3, #52024	; 0xcb38
   157da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157de:	681a      	ldr	r2, [r3, #0]
   157e0:	f64c 3350 	movw	r3, #52048	; 0xcb50
   157e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157e8:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   157ea:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   157ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157f2:	681a      	ldr	r2, [r3, #0]
   157f4:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   157f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157fc:	601a      	str	r2, [r3, #0]
}
   157fe:	3710      	adds	r7, #16
   15800:	46bd      	mov	sp, r7
   15802:	bdb0      	pop	{r4, r5, r7, pc}
   15804:	f3af 8000 	nop.w
   15808:	d916872b 	.word	0xd916872b
   1580c:	3feff7ce 	.word	0x3feff7ce

00015810 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15810:	b580      	push	{r7, lr}
   15812:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   15814:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   15818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1581c:	781b      	ldrb	r3, [r3, #0]
   1581e:	f003 0320 	and.w	r3, r3, #32
   15822:	2b00      	cmp	r3, #0
   15824:	d044      	beq.n	158b0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   15826:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   1582a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1582e:	681a      	ldr	r2, [r3, #0]
   15830:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   15834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15838:	601a      	str	r2, [r3, #0]
   1583a:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   1583e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15842:	681a      	ldr	r2, [r3, #0]
   15844:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1584c:	601a      	str	r2, [r3, #0]
   1584e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   15852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15856:	681a      	ldr	r2, [r3, #0]
   15858:	f64c 3304 	movw	r3, #51972	; 0xcb04
   1585c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15860:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   15862:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   15866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1586a:	681a      	ldr	r2, [r3, #0]
   1586c:	f64c 3334 	movw	r3, #52020	; 0xcb34
   15870:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15874:	601a      	str	r2, [r3, #0]
   15876:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   1587a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1587e:	681a      	ldr	r2, [r3, #0]
   15880:	f64c 3338 	movw	r3, #52024	; 0xcb38
   15884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15888:	601a      	str	r2, [r3, #0]
   1588a:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   1588e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15892:	681a      	ldr	r2, [r3, #0]
   15894:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   15898:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1589c:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   1589e:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   158a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158a6:	881b      	ldrh	r3, [r3, #0]
   158a8:	2b00      	cmp	r3, #0
   158aa:	d001      	beq.n	158b0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   158ac:	f7ff fd4e 	bl	1534c <estimator_update_ir_estim>
  }
}
   158b0:	bd80      	pop	{r7, pc}
   158b2:	bf00      	nop

000158b4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   158b4:	b480      	push	{r7}
   158b6:	af00      	add	r7, sp, #0
  
}
   158b8:	46bd      	mov	sp, r7
   158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   158be:	4770      	bx	lr

000158c0 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   158c0:	b5b0      	push	{r4, r5, r7, lr}
   158c2:	b082      	sub	sp, #8
   158c4:	af00      	add	r7, sp, #0
   158c6:	4603      	mov	r3, r0
   158c8:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   158ca:	f24c 532c 	movw	r3, #50476	; 0xc52c
   158ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158d2:	781b      	ldrb	r3, [r3, #0]
   158d4:	2b01      	cmp	r3, #1
   158d6:	f040 80e0 	bne.w	15a9a <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   158da:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   158de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158e2:	781b      	ldrb	r3, [r3, #0]
   158e4:	2b02      	cmp	r3, #2
   158e6:	d168      	bne.n	159ba <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   158e8:	79fb      	ldrb	r3, [r7, #7]
   158ea:	2b00      	cmp	r3, #0
   158ec:	d013      	beq.n	15916 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   158ee:	f240 5344 	movw	r3, #1348	; 0x544
   158f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158f6:	881a      	ldrh	r2, [r3, #0]
   158f8:	f64c 3362 	movw	r3, #52066	; 0xcb62
   158fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15900:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15902:	f24c 6350 	movw	r3, #50768	; 0xc650
   15906:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1590a:	895a      	ldrh	r2, [r3, #10]
   1590c:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15910:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15914:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15916:	f24c 6350 	movw	r3, #50768	; 0xc650
   1591a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1591e:	895b      	ldrh	r3, [r3, #10]
   15920:	b21a      	sxth	r2, r3
   15922:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1592a:	881b      	ldrh	r3, [r3, #0]
   1592c:	b21b      	sxth	r3, r3
   1592e:	1ad3      	subs	r3, r2, r3
   15930:	4618      	mov	r0, r3
   15932:	f002 fd7d 	bl	18430 <__aeabi_i2f>
   15936:	4603      	mov	r3, r0
   15938:	4618      	mov	r0, r3
   1593a:	f002 f939 	bl	17bb0 <__aeabi_f2d>
   1593e:	4602      	mov	r2, r0
   15940:	460b      	mov	r3, r1
   15942:	4610      	mov	r0, r2
   15944:	4619      	mov	r1, r3
   15946:	f04f 0200 	mov.w	r2, #0
   1594a:	f04f 0300 	mov.w	r3, #0
   1594e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   15952:	f002 f981 	bl	17c58 <__aeabi_dmul>
   15956:	4602      	mov	r2, r0
   15958:	460b      	mov	r3, r1
   1595a:	4610      	mov	r0, r2
   1595c:	4619      	mov	r1, r3
   1595e:	f04f 0200 	mov.w	r2, #0
   15962:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15966:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1596a:	f002 fa9f 	bl	17eac <__aeabi_ddiv>
   1596e:	4602      	mov	r2, r0
   15970:	460b      	mov	r3, r1
   15972:	4610      	mov	r0, r2
   15974:	4619      	mov	r1, r3
   15976:	f002 fc09 	bl	1818c <__aeabi_d2iz>
   1597a:	4603      	mov	r3, r0
   1597c:	b29b      	uxth	r3, r3
   1597e:	b29a      	uxth	r2, r3
   15980:	f64c 3362 	movw	r3, #52066	; 0xcb62
   15984:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15988:	881b      	ldrh	r3, [r3, #0]
   1598a:	b29b      	uxth	r3, r3
   1598c:	4413      	add	r3, r2
   1598e:	b29b      	uxth	r3, r3
   15990:	b29a      	uxth	r2, r3
   15992:	f240 5344 	movw	r3, #1348	; 0x544
   15996:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1599a:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   1599c:	f240 5344 	movw	r3, #1348	; 0x544
   159a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159a4:	881b      	ldrh	r3, [r3, #0]
   159a6:	b21b      	sxth	r3, r3
   159a8:	4618      	mov	r0, r3
   159aa:	f002 fd41 	bl	18430 <__aeabi_i2f>
   159ae:	4602      	mov	r2, r0
   159b0:	f24c 5338 	movw	r3, #50488	; 0xc538
   159b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159b8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   159ba:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   159be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159c2:	781b      	ldrb	r3, [r3, #0]
   159c4:	2b02      	cmp	r3, #2
   159c6:	d168      	bne.n	15a9a <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   159c8:	79fb      	ldrb	r3, [r7, #7]
   159ca:	2b00      	cmp	r3, #0
   159cc:	d013      	beq.n	159f6 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   159ce:	f240 5342 	movw	r3, #1346	; 0x542
   159d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159d6:	881a      	ldrh	r2, [r3, #0]
   159d8:	f64c 3364 	movw	r3, #52068	; 0xcb64
   159dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159e0:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   159e2:	f24c 6350 	movw	r3, #50768	; 0xc650
   159e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159ea:	899a      	ldrh	r2, [r3, #12]
   159ec:	f64c 3360 	movw	r3, #52064	; 0xcb60
   159f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159f4:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   159f6:	f24c 6350 	movw	r3, #50768	; 0xc650
   159fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159fe:	899b      	ldrh	r3, [r3, #12]
   15a00:	b21a      	sxth	r2, r3
   15a02:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a0a:	881b      	ldrh	r3, [r3, #0]
   15a0c:	b21b      	sxth	r3, r3
   15a0e:	1ad3      	subs	r3, r2, r3
   15a10:	4618      	mov	r0, r3
   15a12:	f002 fd0d 	bl	18430 <__aeabi_i2f>
   15a16:	4603      	mov	r3, r0
   15a18:	4618      	mov	r0, r3
   15a1a:	f002 f8c9 	bl	17bb0 <__aeabi_f2d>
   15a1e:	4602      	mov	r2, r0
   15a20:	460b      	mov	r3, r1
   15a22:	4610      	mov	r0, r2
   15a24:	4619      	mov	r1, r3
   15a26:	f04f 0200 	mov.w	r2, #0
   15a2a:	f04f 0300 	mov.w	r3, #0
   15a2e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15a32:	f002 f911 	bl	17c58 <__aeabi_dmul>
   15a36:	4602      	mov	r2, r0
   15a38:	460b      	mov	r3, r1
   15a3a:	4610      	mov	r0, r2
   15a3c:	4619      	mov	r1, r3
   15a3e:	f04f 0200 	mov.w	r2, #0
   15a42:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a46:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a4a:	f002 fa2f 	bl	17eac <__aeabi_ddiv>
   15a4e:	4602      	mov	r2, r0
   15a50:	460b      	mov	r3, r1
   15a52:	4610      	mov	r0, r2
   15a54:	4619      	mov	r1, r3
   15a56:	f002 fb99 	bl	1818c <__aeabi_d2iz>
   15a5a:	4603      	mov	r3, r0
   15a5c:	b29b      	uxth	r3, r3
   15a5e:	b29a      	uxth	r2, r3
   15a60:	f64c 3364 	movw	r3, #52068	; 0xcb64
   15a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a68:	881b      	ldrh	r3, [r3, #0]
   15a6a:	b29b      	uxth	r3, r3
   15a6c:	4413      	add	r3, r2
   15a6e:	b29b      	uxth	r3, r3
   15a70:	b29a      	uxth	r2, r3
   15a72:	f240 5342 	movw	r3, #1346	; 0x542
   15a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a7a:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15a7c:	f240 5342 	movw	r3, #1346	; 0x542
   15a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a84:	881b      	ldrh	r3, [r3, #0]
   15a86:	b21b      	sxth	r3, r3
   15a88:	4618      	mov	r0, r3
   15a8a:	f002 fcd1 	bl	18430 <__aeabi_i2f>
   15a8e:	4602      	mov	r2, r0
   15a90:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a98:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   15a9a:	f24c 532c 	movw	r3, #50476	; 0xc52c
   15a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aa2:	781b      	ldrb	r3, [r3, #0]
   15aa4:	2b02      	cmp	r3, #2
   15aa6:	f040 80da 	bne.w	15c5e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15aaa:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ab2:	781b      	ldrb	r3, [r3, #0]
   15ab4:	2b02      	cmp	r3, #2
   15ab6:	d165      	bne.n	15b84 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15ab8:	79fb      	ldrb	r3, [r7, #7]
   15aba:	2b00      	cmp	r3, #0
   15abc:	d013      	beq.n	15ae6 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15abe:	f240 5358 	movw	r3, #1368	; 0x558
   15ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ac6:	681a      	ldr	r2, [r3, #0]
   15ac8:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ad0:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15ad2:	f24c 6350 	movw	r3, #50768	; 0xc650
   15ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ada:	895a      	ldrh	r2, [r3, #10]
   15adc:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ae4:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15ae6:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aee:	681b      	ldr	r3, [r3, #0]
   15af0:	4618      	mov	r0, r3
   15af2:	f002 f85d 	bl	17bb0 <__aeabi_f2d>
   15af6:	4604      	mov	r4, r0
   15af8:	460d      	mov	r5, r1
   15afa:	f24c 6350 	movw	r3, #50768	; 0xc650
   15afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b02:	895b      	ldrh	r3, [r3, #10]
   15b04:	b21a      	sxth	r2, r3
   15b06:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b0e:	881b      	ldrh	r3, [r3, #0]
   15b10:	b21b      	sxth	r3, r3
   15b12:	1ad3      	subs	r3, r2, r3
   15b14:	4618      	mov	r0, r3
   15b16:	f002 fc8b 	bl	18430 <__aeabi_i2f>
   15b1a:	4603      	mov	r3, r0
   15b1c:	4618      	mov	r0, r3
   15b1e:	f002 f847 	bl	17bb0 <__aeabi_f2d>
   15b22:	4602      	mov	r2, r0
   15b24:	460b      	mov	r3, r1
   15b26:	4610      	mov	r0, r2
   15b28:	4619      	mov	r1, r3
   15b2a:	a34f      	add	r3, pc, #316	; (adr r3, 15c68 <inflight_calib+0x3a8>)
   15b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b30:	f002 f892 	bl	17c58 <__aeabi_dmul>
   15b34:	4602      	mov	r2, r0
   15b36:	460b      	mov	r3, r1
   15b38:	4610      	mov	r0, r2
   15b3a:	4619      	mov	r1, r3
   15b3c:	f04f 0200 	mov.w	r2, #0
   15b40:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b44:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b48:	f002 f9b0 	bl	17eac <__aeabi_ddiv>
   15b4c:	4602      	mov	r2, r0
   15b4e:	460b      	mov	r3, r1
   15b50:	4620      	mov	r0, r4
   15b52:	4629      	mov	r1, r5
   15b54:	f001 fece 	bl	178f4 <__adddf3>
   15b58:	4602      	mov	r2, r0
   15b5a:	460b      	mov	r3, r1
   15b5c:	4610      	mov	r0, r2
   15b5e:	4619      	mov	r1, r3
   15b60:	f002 fb5c 	bl	1821c <__aeabi_d2f>
   15b64:	4602      	mov	r2, r0
   15b66:	f240 5358 	movw	r3, #1368	; 0x558
   15b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b6e:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15b70:	f240 5358 	movw	r3, #1368	; 0x558
   15b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b78:	681a      	ldr	r2, [r3, #0]
   15b7a:	f24c 5338 	movw	r3, #50488	; 0xc538
   15b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b82:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15b84:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b8c:	781b      	ldrb	r3, [r3, #0]
   15b8e:	2b02      	cmp	r3, #2
   15b90:	d165      	bne.n	15c5e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15b92:	79fb      	ldrb	r3, [r7, #7]
   15b94:	2b00      	cmp	r3, #0
   15b96:	d013      	beq.n	15bc0 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15b98:	f240 535c 	movw	r3, #1372	; 0x55c
   15b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ba0:	681a      	ldr	r2, [r3, #0]
   15ba2:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15baa:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15bac:	f24c 6350 	movw	r3, #50768	; 0xc650
   15bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bb4:	899a      	ldrh	r2, [r3, #12]
   15bb6:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bbe:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15bc0:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bc8:	681b      	ldr	r3, [r3, #0]
   15bca:	4618      	mov	r0, r3
   15bcc:	f001 fff0 	bl	17bb0 <__aeabi_f2d>
   15bd0:	4604      	mov	r4, r0
   15bd2:	460d      	mov	r5, r1
   15bd4:	f24c 6350 	movw	r3, #50768	; 0xc650
   15bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bdc:	899b      	ldrh	r3, [r3, #12]
   15bde:	b21a      	sxth	r2, r3
   15be0:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15be8:	881b      	ldrh	r3, [r3, #0]
   15bea:	b21b      	sxth	r3, r3
   15bec:	1ad3      	subs	r3, r2, r3
   15bee:	4618      	mov	r0, r3
   15bf0:	f002 fc1e 	bl	18430 <__aeabi_i2f>
   15bf4:	4603      	mov	r3, r0
   15bf6:	4618      	mov	r0, r3
   15bf8:	f001 ffda 	bl	17bb0 <__aeabi_f2d>
   15bfc:	4602      	mov	r2, r0
   15bfe:	460b      	mov	r3, r1
   15c00:	4610      	mov	r0, r2
   15c02:	4619      	mov	r1, r3
   15c04:	a31a      	add	r3, pc, #104	; (adr r3, 15c70 <inflight_calib+0x3b0>)
   15c06:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c0a:	f002 f825 	bl	17c58 <__aeabi_dmul>
   15c0e:	4602      	mov	r2, r0
   15c10:	460b      	mov	r3, r1
   15c12:	4610      	mov	r0, r2
   15c14:	4619      	mov	r1, r3
   15c16:	f04f 0200 	mov.w	r2, #0
   15c1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15c1e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15c22:	f002 f943 	bl	17eac <__aeabi_ddiv>
   15c26:	4602      	mov	r2, r0
   15c28:	460b      	mov	r3, r1
   15c2a:	4620      	mov	r0, r4
   15c2c:	4629      	mov	r1, r5
   15c2e:	f001 fe61 	bl	178f4 <__adddf3>
   15c32:	4602      	mov	r2, r0
   15c34:	460b      	mov	r3, r1
   15c36:	4610      	mov	r0, r2
   15c38:	4619      	mov	r1, r3
   15c3a:	f002 faef 	bl	1821c <__aeabi_d2f>
   15c3e:	4602      	mov	r2, r0
   15c40:	f240 535c 	movw	r3, #1372	; 0x55c
   15c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c48:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15c4a:	f240 535c 	movw	r3, #1372	; 0x55c
   15c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c52:	681a      	ldr	r2, [r3, #0]
   15c54:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c5c:	601a      	str	r2, [r3, #0]
    }
  }
}
   15c5e:	3708      	adds	r7, #8
   15c60:	46bd      	mov	sp, r7
   15c62:	bdb0      	pop	{r4, r5, r7, pc}
   15c64:	f3af 8000 	nop.w
   15c68:	9999999a 	.word	0x9999999a
   15c6c:	3fb99999 	.word	0x3fb99999
   15c70:	9999999a 	.word	0x9999999a
   15c74:	bfc99999 	.word	0xbfc99999

00015c78 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15c78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15c7c:	b08e      	sub	sp, #56	; 0x38
   15c7e:	af00      	add	r7, sp, #0
   15c80:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15c84:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15c88:	a357      	add	r3, pc, #348	; (adr r3, 15de8 <pp_atan2+0x170>)
   15c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c96:	f04f 0200 	mov.w	r2, #0
   15c9a:	f04f 0300 	mov.w	r3, #0
   15c9e:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15ca2:	f001 ffd9 	bl	17c58 <__aeabi_dmul>
   15ca6:	4602      	mov	r2, r0
   15ca8:	460b      	mov	r3, r1
   15caa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15cae:	e9d7 0100 	ldrd	r0, r1, [r7]
   15cb2:	f04f 0200 	mov.w	r2, #0
   15cb6:	f04f 0300 	mov.w	r3, #0
   15cba:	f002 fa3f 	bl	1813c <__aeabi_dcmplt>
   15cbe:	4603      	mov	r3, r0
   15cc0:	2b00      	cmp	r3, #0
   15cc2:	d009      	beq.n	15cd8 <pp_atan2+0x60>
   15cc4:	a14a      	add	r1, pc, #296	; (adr r1, 15df0 <pp_atan2+0x178>)
   15cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
   15cca:	e9d7 2300 	ldrd	r2, r3, [r7]
   15cce:	f001 fe0f 	bl	178f0 <__aeabi_dsub>
   15cd2:	4602      	mov	r2, r0
   15cd4:	460b      	mov	r3, r1
   15cd6:	e008      	b.n	15cea <pp_atan2+0x72>
   15cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
   15cdc:	a344      	add	r3, pc, #272	; (adr r3, 15df0 <pp_atan2+0x178>)
   15cde:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ce2:	f001 fe07 	bl	178f4 <__adddf3>
   15ce6:	4602      	mov	r2, r0
   15ce8:	460b      	mov	r3, r1
   15cea:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15cee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15cf2:	f04f 0200 	mov.w	r2, #0
   15cf6:	f04f 0300 	mov.w	r3, #0
   15cfa:	f002 fa3d 	bl	18178 <__aeabi_dcmpgt>
   15cfe:	4603      	mov	r3, r0
   15d00:	2b00      	cmp	r3, #0
   15d02:	d02a      	beq.n	15d5a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15d04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d0c:	f001 fdf0 	bl	178f0 <__aeabi_dsub>
   15d10:	4602      	mov	r2, r0
   15d12:	460b      	mov	r3, r1
   15d14:	4690      	mov	r8, r2
   15d16:	4699      	mov	r9, r3
   15d18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d20:	f001 fde8 	bl	178f4 <__adddf3>
   15d24:	4602      	mov	r2, r0
   15d26:	460b      	mov	r3, r1
   15d28:	4640      	mov	r0, r8
   15d2a:	4649      	mov	r1, r9
   15d2c:	f002 f8be 	bl	17eac <__aeabi_ddiv>
   15d30:	4602      	mov	r2, r0
   15d32:	460b      	mov	r3, r1
   15d34:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15d38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d40:	f001 ff8a 	bl	17c58 <__aeabi_dmul>
   15d44:	4602      	mov	r2, r0
   15d46:	460b      	mov	r3, r1
   15d48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d4c:	f001 fdd0 	bl	178f0 <__aeabi_dsub>
   15d50:	4602      	mov	r2, r0
   15d52:	460b      	mov	r3, r1
   15d54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15d58:	e029      	b.n	15dae <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d62:	f001 fdc7 	bl	178f4 <__adddf3>
   15d66:	4602      	mov	r2, r0
   15d68:	460b      	mov	r3, r1
   15d6a:	4690      	mov	r8, r2
   15d6c:	4699      	mov	r9, r3
   15d6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15d72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15d76:	f001 fdbb 	bl	178f0 <__aeabi_dsub>
   15d7a:	4602      	mov	r2, r0
   15d7c:	460b      	mov	r3, r1
   15d7e:	4640      	mov	r0, r8
   15d80:	4649      	mov	r1, r9
   15d82:	f002 f893 	bl	17eac <__aeabi_ddiv>
   15d86:	4602      	mov	r2, r0
   15d88:	460b      	mov	r3, r1
   15d8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d96:	f001 ff5f 	bl	17c58 <__aeabi_dmul>
   15d9a:	4602      	mov	r2, r0
   15d9c:	460b      	mov	r3, r1
   15d9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15da2:	f001 fda5 	bl	178f0 <__aeabi_dsub>
   15da6:	4602      	mov	r2, r0
   15da8:	460b      	mov	r3, r1
   15daa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15dae:	e9d7 0100 	ldrd	r0, r1, [r7]
   15db2:	f04f 0200 	mov.w	r2, #0
   15db6:	f04f 0300 	mov.w	r3, #0
   15dba:	f002 f9bf 	bl	1813c <__aeabi_dcmplt>
   15dbe:	4603      	mov	r3, r0
   15dc0:	2b00      	cmp	r3, #0
   15dc2:	d004      	beq.n	15dce <pp_atan2+0x156>
		return (-angle);
   15dc4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15dc8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15dcc:	e001      	b.n	15dd2 <pp_atan2+0x15a>
	else
		return angle;
   15dce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15dd2:	4622      	mov	r2, r4
   15dd4:	462b      	mov	r3, r5
}
   15dd6:	4610      	mov	r0, r2
   15dd8:	4619      	mov	r1, r3
   15dda:	3738      	adds	r7, #56	; 0x38
   15ddc:	46bd      	mov	sp, r7
   15dde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15de2:	bf00      	nop
   15de4:	f3af 8000 	nop.w
   15de8:	54442d18 	.word	0x54442d18
   15dec:	3fe921fb 	.word	0x3fe921fb
   15df0:	d9d7bdbb 	.word	0xd9d7bdbb
   15df4:	3ddb7cdf 	.word	0x3ddb7cdf

00015df8 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15df8:	b5b0      	push	{r4, r5, r7, lr}
   15dfa:	b08c      	sub	sp, #48	; 0x30
   15dfc:	af00      	add	r7, sp, #0
   15dfe:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15e02:	e9d7 2300 	ldrd	r2, r3, [r7]
   15e06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e0a:	2301      	movs	r3, #1
   15e0c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15e0e:	e00a      	b.n	15e26 <pp_sin+0x2e>
   15e10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e14:	a35a      	add	r3, pc, #360	; (adr r3, 15f80 <pp_sin+0x188>)
   15e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e1a:	f001 fd6b 	bl	178f4 <__adddf3>
   15e1e:	4602      	mov	r2, r0
   15e20:	460b      	mov	r3, r1
   15e22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e2a:	a357      	add	r3, pc, #348	; (adr r3, 15f88 <pp_sin+0x190>)
   15e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e30:	f002 f984 	bl	1813c <__aeabi_dcmplt>
   15e34:	4603      	mov	r3, r0
   15e36:	2b00      	cmp	r3, #0
   15e38:	d1ea      	bne.n	15e10 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15e3a:	e00a      	b.n	15e52 <pp_sin+0x5a>
   15e3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e40:	a34f      	add	r3, pc, #316	; (adr r3, 15f80 <pp_sin+0x188>)
   15e42:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e46:	f001 fd53 	bl	178f0 <__aeabi_dsub>
   15e4a:	4602      	mov	r2, r0
   15e4c:	460b      	mov	r3, r1
   15e4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e56:	a34e      	add	r3, pc, #312	; (adr r3, 15f90 <pp_sin+0x198>)
   15e58:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e5c:	f002 f98c 	bl	18178 <__aeabi_dcmpgt>
   15e60:	4603      	mov	r3, r0
   15e62:	2b00      	cmp	r3, #0
   15e64:	d1ea      	bne.n	15e3c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e6a:	a34b      	add	r3, pc, #300	; (adr r3, 15f98 <pp_sin+0x1a0>)
   15e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e70:	f002 f982 	bl	18178 <__aeabi_dcmpgt>
   15e74:	4603      	mov	r3, r0
   15e76:	2b00      	cmp	r3, #0
   15e78:	d00d      	beq.n	15e96 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e7e:	a348      	add	r3, pc, #288	; (adr r3, 15fa0 <pp_sin+0x1a8>)
   15e80:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e84:	f001 fd34 	bl	178f0 <__aeabi_dsub>
   15e88:	4602      	mov	r2, r0
   15e8a:	460b      	mov	r3, r1
   15e8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15e90:	f04f 33ff 	mov.w	r3, #4294967295
   15e94:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15e96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e9a:	a343      	add	r3, pc, #268	; (adr r3, 15fa8 <pp_sin+0x1b0>)
   15e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ea0:	f002 f804 	bl	17eac <__aeabi_ddiv>
   15ea4:	4602      	mov	r2, r0
   15ea6:	460b      	mov	r3, r1
   15ea8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15eac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15eb4:	f001 fed0 	bl	17c58 <__aeabi_dmul>
   15eb8:	4602      	mov	r2, r0
   15eba:	460b      	mov	r3, r1
   15ebc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15ec0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15ec4:	a33a      	add	r3, pc, #232	; (adr r3, 15fb0 <pp_sin+0x1b8>)
   15ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15eca:	f001 fec5 	bl	17c58 <__aeabi_dmul>
   15ece:	4602      	mov	r2, r0
   15ed0:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15ed2:	4610      	mov	r0, r2
   15ed4:	4619      	mov	r1, r3
   15ed6:	a338      	add	r3, pc, #224	; (adr r3, 15fb8 <pp_sin+0x1c0>)
   15ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15edc:	f001 fd08 	bl	178f0 <__aeabi_dsub>
   15ee0:	4602      	mov	r2, r0
   15ee2:	460b      	mov	r3, r1
   15ee4:	4610      	mov	r0, r2
   15ee6:	4619      	mov	r1, r3
   15ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15eec:	f001 feb4 	bl	17c58 <__aeabi_dmul>
   15ef0:	4602      	mov	r2, r0
   15ef2:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15ef4:	4610      	mov	r0, r2
   15ef6:	4619      	mov	r1, r3
   15ef8:	a331      	add	r3, pc, #196	; (adr r3, 15fc0 <pp_sin+0x1c8>)
   15efa:	e9d3 2300 	ldrd	r2, r3, [r3]
   15efe:	f001 fcf9 	bl	178f4 <__adddf3>
   15f02:	4602      	mov	r2, r0
   15f04:	460b      	mov	r3, r1
   15f06:	4610      	mov	r0, r2
   15f08:	4619      	mov	r1, r3
   15f0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f0e:	f001 fea3 	bl	17c58 <__aeabi_dmul>
   15f12:	4602      	mov	r2, r0
   15f14:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15f16:	4610      	mov	r0, r2
   15f18:	4619      	mov	r1, r3
   15f1a:	a32b      	add	r3, pc, #172	; (adr r3, 15fc8 <pp_sin+0x1d0>)
   15f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f20:	f001 fce6 	bl	178f0 <__aeabi_dsub>
   15f24:	4602      	mov	r2, r0
   15f26:	460b      	mov	r3, r1
   15f28:	4610      	mov	r0, r2
   15f2a:	4619      	mov	r1, r3
   15f2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f30:	f001 fe92 	bl	17c58 <__aeabi_dmul>
   15f34:	4602      	mov	r2, r0
   15f36:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15f38:	4610      	mov	r0, r2
   15f3a:	4619      	mov	r1, r3
   15f3c:	a324      	add	r3, pc, #144	; (adr r3, 15fd0 <pp_sin+0x1d8>)
   15f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f42:	f001 fcd7 	bl	178f4 <__adddf3>
   15f46:	4602      	mov	r2, r0
   15f48:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15f4a:	4610      	mov	r0, r2
   15f4c:	4619      	mov	r1, r3
   15f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15f52:	f001 fe81 	bl	17c58 <__aeabi_dmul>
   15f56:	4602      	mov	r2, r0
   15f58:	460b      	mov	r3, r1
   15f5a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f60:	2b00      	cmp	r3, #0
   15f62:	da04      	bge.n	15f6e <pp_sin+0x176>
   15f64:	68bc      	ldr	r4, [r7, #8]
   15f66:	68fb      	ldr	r3, [r7, #12]
   15f68:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15f6c:	e001      	b.n	15f72 <pp_sin+0x17a>
   15f6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15f72:	4622      	mov	r2, r4
   15f74:	462b      	mov	r3, r5
}
   15f76:	4610      	mov	r0, r2
   15f78:	4619      	mov	r1, r3
   15f7a:	3730      	adds	r7, #48	; 0x30
   15f7c:	46bd      	mov	sp, r7
   15f7e:	bdb0      	pop	{r4, r5, r7, pc}
   15f80:	54442d18 	.word	0x54442d18
   15f84:	401921fb 	.word	0x401921fb
   15f88:	54442d18 	.word	0x54442d18
   15f8c:	bff921fb 	.word	0xbff921fb
   15f90:	7f3321d2 	.word	0x7f3321d2
   15f94:	4012d97c 	.word	0x4012d97c
   15f98:	54442d18 	.word	0x54442d18
   15f9c:	3ff921fb 	.word	0x3ff921fb
   15fa0:	54442d18 	.word	0x54442d18
   15fa4:	400921fb 	.word	0x400921fb
   15fa8:	5443d6f4 	.word	0x5443d6f4
   15fac:	3ff921fb 	.word	0x3ff921fb
   15fb0:	48a890af 	.word	0x48a890af
   15fb4:	3f23daf7 	.word	0x3f23daf7
   15fb8:	645b6d0e 	.word	0x645b6d0e
   15fbc:	3f7324cc 	.word	0x3f7324cc
   15fc0:	f65619a5 	.word	0xf65619a5
   15fc4:	3fb4668a 	.word	0x3fb4668a
   15fc8:	16acf9cd 	.word	0x16acf9cd
   15fcc:	3fe4abbc 	.word	0x3fe4abbc
   15fd0:	520817f7 	.word	0x520817f7
   15fd4:	3ff921fb 	.word	0x3ff921fb

00015fd8 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15fd8:	b480      	push	{r7}
   15fda:	b083      	sub	sp, #12
   15fdc:	af00      	add	r7, sp, #0
   15fde:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15fe2:	4610      	mov	r0, r2
   15fe4:	4619      	mov	r1, r3
   15fe6:	370c      	adds	r7, #12
   15fe8:	46bd      	mov	sp, r7
   15fea:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fee:	4770      	bx	lr

00015ff0 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15ff0:	b480      	push	{r7}
   15ff2:	b083      	sub	sp, #12
   15ff4:	af00      	add	r7, sp, #0
   15ff6:	4603      	mov	r3, r0
   15ff8:	6039      	str	r1, [r7, #0]
   15ffa:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15ffc:	79fa      	ldrb	r2, [r7, #7]
   15ffe:	f64c 3380 	movw	r3, #52096	; 0xcb80
   16002:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16006:	6839      	ldr	r1, [r7, #0]
   16008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1600c:	370c      	adds	r7, #12
   1600e:	46bd      	mov	sp, r7
   16010:	f85d 7b04 	ldr.w	r7, [sp], #4
   16014:	4770      	bx	lr
   16016:	bf00      	nop

00016018 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   16018:	b480      	push	{r7}
   1601a:	b083      	sub	sp, #12
   1601c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   1601e:	f242 0315 	movw	r3, #8213	; 0x2015
   16022:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16026:	2200      	movs	r2, #0
   16028:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1602a:	f242 0314 	movw	r3, #8212	; 0x2014
   1602e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16032:	2200      	movs	r2, #0
   16034:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   16036:	f242 0307 	movw	r3, #8199	; 0x2007
   1603a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1603e:	22c0      	movs	r2, #192	; 0xc0
   16040:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   16042:	f242 0306 	movw	r3, #8198	; 0x2006
   16046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1604a:	22cf      	movs	r2, #207	; 0xcf
   1604c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   1604e:	2300      	movs	r3, #0
   16050:	71fb      	strb	r3, [r7, #7]
   16052:	e00a      	b.n	1606a <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   16054:	79fa      	ldrb	r2, [r7, #7]
   16056:	f64c 3380 	movw	r3, #52096	; 0xcb80
   1605a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1605e:	2100      	movs	r1, #0
   16060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   16064:	79fb      	ldrb	r3, [r7, #7]
   16066:	3301      	adds	r3, #1
   16068:	71fb      	strb	r3, [r7, #7]
   1606a:	79fb      	ldrb	r3, [r7, #7]
   1606c:	2b07      	cmp	r3, #7
   1606e:	d9f1      	bls.n	16054 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   16070:	370c      	adds	r7, #12
   16072:	46bd      	mov	sp, r7
   16074:	f85d 7b04 	ldr.w	r7, [sp], #4
   16078:	4770      	bx	lr
   1607a:	bf00      	nop

0001607c <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   1607c:	b480      	push	{r7}
   1607e:	b083      	sub	sp, #12
   16080:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   16082:	f242 0326 	movw	r3, #8230	; 0x2026
   16086:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1608a:	881b      	ldrh	r3, [r3, #0]
   1608c:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   1608e:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   16092:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16096:	881b      	ldrh	r3, [r3, #0]
   16098:	88fa      	ldrh	r2, [r7, #6]
   1609a:	1ad3      	subs	r3, r2, r3
   1609c:	80bb      	strh	r3, [r7, #4]
  last		= this;
   1609e:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   160a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160a6:	88fa      	ldrh	r2, [r7, #6]
   160a8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   160aa:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160b2:	781b      	ldrb	r3, [r3, #0]
   160b4:	2b00      	cmp	r3, #0
   160b6:	d11e      	bne.n	160f6 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   160b8:	f242 0324 	movw	r3, #8228	; 0x2024
   160bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160c0:	781b      	ldrb	r3, [r3, #0]
   160c2:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   160c4:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   160c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160cc:	781b      	ldrb	r3, [r3, #0]
   160ce:	78fa      	ldrb	r2, [r7, #3]
   160d0:	1ad3      	subs	r3, r2, r3
   160d2:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   160d4:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   160d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160dc:	78fa      	ldrb	r2, [r7, #3]
   160de:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   160e0:	78bb      	ldrb	r3, [r7, #2]
   160e2:	2b6d      	cmp	r3, #109	; 0x6d
   160e4:	d906      	bls.n	160f4 <__vector_34+0x78>
      state = 1;
   160e6:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160ee:	2201      	movs	r2, #1
   160f0:	701a      	strb	r2, [r3, #0]
   160f2:	e053      	b.n	1619c <__vector_34+0x120>
   160f4:	e052      	b.n	1619c <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   160f6:	88bb      	ldrh	r3, [r7, #4]
   160f8:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   160fc:	d304      	bcc.n	16108 <__vector_34+0x8c>
   160fe:	88ba      	ldrh	r2, [r7, #4]
   16100:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   16104:	429a      	cmp	r2, r3
   16106:	d911      	bls.n	1612c <__vector_34+0xb0>
      RestartPpmCycle();
   16108:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1610c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16110:	2200      	movs	r2, #0
   16112:	701a      	strb	r2, [r3, #0]
   16114:	f242 0324 	movw	r3, #8228	; 0x2024
   16118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1611c:	781b      	ldrb	r3, [r3, #0]
   1611e:	b2da      	uxtb	r2, r3
   16120:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16124:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16128:	701a      	strb	r2, [r3, #0]
   1612a:	e038      	b.n	1619e <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   1612c:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16134:	781b      	ldrb	r3, [r3, #0]
   16136:	1e5a      	subs	r2, r3, #1
   16138:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1613c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16140:	88b9      	ldrh	r1, [r7, #4]
   16142:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   16146:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1614a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1614e:	781b      	ldrb	r3, [r3, #0]
   16150:	2b08      	cmp	r3, #8
   16152:	d917      	bls.n	16184 <__vector_34+0x108>
      ppm_valid	= 1;
   16154:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1615c:	2201      	movs	r2, #1
   1615e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   16160:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16168:	2200      	movs	r2, #0
   1616a:	701a      	strb	r2, [r3, #0]
   1616c:	f242 0324 	movw	r3, #8228	; 0x2024
   16170:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16174:	781b      	ldrb	r3, [r3, #0]
   16176:	b2da      	uxtb	r2, r3
   16178:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   1617c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16180:	701a      	strb	r2, [r3, #0]
   16182:	e00c      	b.n	1619e <__vector_34+0x122>
    } else 
      state++;
   16184:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1618c:	781b      	ldrb	r3, [r3, #0]
   1618e:	3301      	adds	r3, #1
   16190:	b2da      	uxtb	r2, r3
   16192:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1619a:	701a      	strb	r2, [r3, #0]
  }
  return;
   1619c:	bf00      	nop
}
   1619e:	370c      	adds	r7, #12
   161a0:	46bd      	mov	sp, r7
   161a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   161a6:	4770      	bx	lr

000161a8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   161a8:	b590      	push	{r4, r7, lr}
   161aa:	b083      	sub	sp, #12
   161ac:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   161ae:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   161b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161b6:	881b      	ldrh	r3, [r3, #0]
   161b8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   161bc:	b29b      	uxth	r3, r3
   161be:	80fb      	strh	r3, [r7, #6]
   161c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161c4:	4618      	mov	r0, r3
   161c6:	f002 f933 	bl	18430 <__aeabi_i2f>
   161ca:	4603      	mov	r3, r0
   161cc:	4618      	mov	r0, r3
   161ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   161d2:	f002 f981 	bl	184d8 <__aeabi_fmul>
   161d6:	4603      	mov	r3, r0
   161d8:	4618      	mov	r0, r3
   161da:	f002 fb43 	bl	18864 <__aeabi_f2iz>
   161de:	4603      	mov	r3, r0
   161e0:	b29a      	uxth	r2, r3
   161e2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ea:	801a      	strh	r2, [r3, #0]
   161ec:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161f4:	881b      	ldrh	r3, [r3, #0]
   161f6:	b21b      	sxth	r3, r3
   161f8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161fc:	dd07      	ble.n	1620e <last_radio_from_ppm+0x66>
   161fe:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16202:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16206:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1620a:	801a      	strh	r2, [r3, #0]
   1620c:	e00d      	b.n	1622a <last_radio_from_ppm+0x82>
   1620e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16216:	881b      	ldrh	r3, [r3, #0]
   16218:	b21b      	sxth	r3, r3
   1621a:	2b00      	cmp	r3, #0
   1621c:	da05      	bge.n	1622a <last_radio_from_ppm+0x82>
   1621e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16226:	2200      	movs	r2, #0
   16228:	801a      	strh	r2, [r3, #0]
   1622a:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1622e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16232:	885b      	ldrh	r3, [r3, #2]
   16234:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16238:	b29b      	uxth	r3, r3
   1623a:	80fb      	strh	r3, [r7, #6]
   1623c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16240:	4618      	mov	r0, r3
   16242:	f002 f8f5 	bl	18430 <__aeabi_i2f>
   16246:	4603      	mov	r3, r0
   16248:	4618      	mov	r0, r3
   1624a:	f002 fb0b 	bl	18864 <__aeabi_f2iz>
   1624e:	4603      	mov	r3, r0
   16250:	b29a      	uxth	r2, r3
   16252:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1625a:	805a      	strh	r2, [r3, #2]
   1625c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16264:	885b      	ldrh	r3, [r3, #2]
   16266:	b21b      	sxth	r3, r3
   16268:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1626c:	dd07      	ble.n	1627e <last_radio_from_ppm+0xd6>
   1626e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16276:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1627a:	805a      	strh	r2, [r3, #2]
   1627c:	e00f      	b.n	1629e <last_radio_from_ppm+0xf6>
   1627e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16286:	885b      	ldrh	r3, [r3, #2]
   16288:	b21b      	sxth	r3, r3
   1628a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1628e:	da06      	bge.n	1629e <last_radio_from_ppm+0xf6>
   16290:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16294:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16298:	f64d 2280 	movw	r2, #55936	; 0xda80
   1629c:	805a      	strh	r2, [r3, #2]
   1629e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   162a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162a6:	889b      	ldrh	r3, [r3, #4]
   162a8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162ac:	b29b      	uxth	r3, r3
   162ae:	80fb      	strh	r3, [r7, #6]
   162b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162b4:	4618      	mov	r0, r3
   162b6:	f002 f8bb 	bl	18430 <__aeabi_i2f>
   162ba:	4603      	mov	r3, r0
   162bc:	4618      	mov	r0, r3
   162be:	f002 fad1 	bl	18864 <__aeabi_f2iz>
   162c2:	4603      	mov	r3, r0
   162c4:	b29a      	uxth	r2, r3
   162c6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ce:	809a      	strh	r2, [r3, #4]
   162d0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162d8:	889b      	ldrh	r3, [r3, #4]
   162da:	b21b      	sxth	r3, r3
   162dc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162e0:	dd07      	ble.n	162f2 <last_radio_from_ppm+0x14a>
   162e2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ea:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162ee:	809a      	strh	r2, [r3, #4]
   162f0:	e00f      	b.n	16312 <last_radio_from_ppm+0x16a>
   162f2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162fa:	889b      	ldrh	r3, [r3, #4]
   162fc:	b21b      	sxth	r3, r3
   162fe:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16302:	da06      	bge.n	16312 <last_radio_from_ppm+0x16a>
   16304:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1630c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16310:	809a      	strh	r2, [r3, #4]
   16312:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1631a:	88db      	ldrh	r3, [r3, #6]
   1631c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16320:	b29b      	uxth	r3, r3
   16322:	80fb      	strh	r3, [r7, #6]
   16324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16328:	4618      	mov	r0, r3
   1632a:	f002 f881 	bl	18430 <__aeabi_i2f>
   1632e:	4603      	mov	r3, r0
   16330:	4618      	mov	r0, r3
   16332:	f002 fa97 	bl	18864 <__aeabi_f2iz>
   16336:	4603      	mov	r3, r0
   16338:	b29a      	uxth	r2, r3
   1633a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1633e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16342:	80da      	strh	r2, [r3, #6]
   16344:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1634c:	88db      	ldrh	r3, [r3, #6]
   1634e:	b21b      	sxth	r3, r3
   16350:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16354:	dd07      	ble.n	16366 <last_radio_from_ppm+0x1be>
   16356:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1635a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1635e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16362:	80da      	strh	r2, [r3, #6]
   16364:	e00f      	b.n	16386 <last_radio_from_ppm+0x1de>
   16366:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1636a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1636e:	88db      	ldrh	r3, [r3, #6]
   16370:	b21b      	sxth	r3, r3
   16372:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16376:	da06      	bge.n	16386 <last_radio_from_ppm+0x1de>
   16378:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1637c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16380:	f64d 2280 	movw	r2, #55936	; 0xda80
   16384:	80da      	strh	r2, [r3, #6]
   16386:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1638a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1638e:	891b      	ldrh	r3, [r3, #8]
   16390:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16394:	b29b      	uxth	r3, r3
   16396:	80fb      	strh	r3, [r7, #6]
   16398:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1639c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163a0:	891b      	ldrh	r3, [r3, #8]
   163a2:	b21b      	sxth	r3, r3
   163a4:	4618      	mov	r0, r3
   163a6:	f002 f843 	bl	18430 <__aeabi_i2f>
   163aa:	4604      	mov	r4, r0
   163ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163b0:	4618      	mov	r0, r3
   163b2:	f002 f83d 	bl	18430 <__aeabi_i2f>
   163b6:	4603      	mov	r3, r0
   163b8:	4618      	mov	r0, r3
   163ba:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   163be:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   163c2:	f002 f889 	bl	184d8 <__aeabi_fmul>
   163c6:	4603      	mov	r3, r0
   163c8:	4620      	mov	r0, r4
   163ca:	4619      	mov	r1, r3
   163cc:	f001 ff7c 	bl	182c8 <__addsf3>
   163d0:	4603      	mov	r3, r0
   163d2:	4618      	mov	r0, r3
   163d4:	f002 fa46 	bl	18864 <__aeabi_f2iz>
   163d8:	4603      	mov	r3, r0
   163da:	b29a      	uxth	r2, r3
   163dc:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163e4:	811a      	strh	r2, [r3, #8]
   163e6:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   163ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163ee:	895b      	ldrh	r3, [r3, #10]
   163f0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163f4:	b29b      	uxth	r3, r3
   163f6:	80fb      	strh	r3, [r7, #6]
   163f8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16400:	895b      	ldrh	r3, [r3, #10]
   16402:	b21b      	sxth	r3, r3
   16404:	4618      	mov	r0, r3
   16406:	f002 f813 	bl	18430 <__aeabi_i2f>
   1640a:	4604      	mov	r4, r0
   1640c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16410:	4618      	mov	r0, r3
   16412:	f002 f80d 	bl	18430 <__aeabi_i2f>
   16416:	4603      	mov	r3, r0
   16418:	4618      	mov	r0, r3
   1641a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1641e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16422:	f002 f859 	bl	184d8 <__aeabi_fmul>
   16426:	4603      	mov	r3, r0
   16428:	4620      	mov	r0, r4
   1642a:	4619      	mov	r1, r3
   1642c:	f001 ff4c 	bl	182c8 <__addsf3>
   16430:	4603      	mov	r3, r0
   16432:	4618      	mov	r0, r3
   16434:	f002 fa16 	bl	18864 <__aeabi_f2iz>
   16438:	4603      	mov	r3, r0
   1643a:	b29a      	uxth	r2, r3
   1643c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16444:	815a      	strh	r2, [r3, #10]
   16446:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1644a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1644e:	899b      	ldrh	r3, [r3, #12]
   16450:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16454:	b29b      	uxth	r3, r3
   16456:	80fb      	strh	r3, [r7, #6]
   16458:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1645c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16460:	899b      	ldrh	r3, [r3, #12]
   16462:	b21b      	sxth	r3, r3
   16464:	4618      	mov	r0, r3
   16466:	f001 ffe3 	bl	18430 <__aeabi_i2f>
   1646a:	4604      	mov	r4, r0
   1646c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16470:	4618      	mov	r0, r3
   16472:	f001 ffdd 	bl	18430 <__aeabi_i2f>
   16476:	4603      	mov	r3, r0
   16478:	4618      	mov	r0, r3
   1647a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1647e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16482:	f002 f829 	bl	184d8 <__aeabi_fmul>
   16486:	4603      	mov	r3, r0
   16488:	4620      	mov	r0, r4
   1648a:	4619      	mov	r1, r3
   1648c:	f001 ff1c 	bl	182c8 <__addsf3>
   16490:	4603      	mov	r3, r0
   16492:	4618      	mov	r0, r3
   16494:	f002 f9e6 	bl	18864 <__aeabi_f2iz>
   16498:	4603      	mov	r3, r0
   1649a:	b29a      	uxth	r2, r3
   1649c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164a4:	819a      	strh	r2, [r3, #12]
   164a6:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   164aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164ae:	89db      	ldrh	r3, [r3, #14]
   164b0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   164b4:	b29b      	uxth	r3, r3
   164b6:	80fb      	strh	r3, [r7, #6]
   164b8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164c0:	89db      	ldrh	r3, [r3, #14]
   164c2:	b21b      	sxth	r3, r3
   164c4:	4618      	mov	r0, r3
   164c6:	f001 ffb3 	bl	18430 <__aeabi_i2f>
   164ca:	4604      	mov	r4, r0
   164cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   164d0:	4618      	mov	r0, r3
   164d2:	f001 ffad 	bl	18430 <__aeabi_i2f>
   164d6:	4603      	mov	r3, r0
   164d8:	4618      	mov	r0, r3
   164da:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   164de:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   164e2:	f001 fff9 	bl	184d8 <__aeabi_fmul>
   164e6:	4603      	mov	r3, r0
   164e8:	4620      	mov	r0, r4
   164ea:	4619      	mov	r1, r3
   164ec:	f001 feec 	bl	182c8 <__addsf3>
   164f0:	4603      	mov	r3, r0
   164f2:	4618      	mov	r0, r3
   164f4:	f002 f9b6 	bl	18864 <__aeabi_f2iz>
   164f8:	4603      	mov	r3, r0
   164fa:	b29a      	uxth	r2, r3
   164fc:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16500:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16504:	81da      	strh	r2, [r3, #14]
   16506:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1650a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1650e:	8a1b      	ldrh	r3, [r3, #16]
   16510:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16514:	b29b      	uxth	r3, r3
   16516:	80fb      	strh	r3, [r7, #6]
   16518:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1651c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16520:	8a1b      	ldrh	r3, [r3, #16]
   16522:	b21b      	sxth	r3, r3
   16524:	4618      	mov	r0, r3
   16526:	f001 ff83 	bl	18430 <__aeabi_i2f>
   1652a:	4604      	mov	r4, r0
   1652c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16530:	4618      	mov	r0, r3
   16532:	f001 ff7d 	bl	18430 <__aeabi_i2f>
   16536:	4603      	mov	r3, r0
   16538:	4618      	mov	r0, r3
   1653a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1653e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16542:	f001 ffc9 	bl	184d8 <__aeabi_fmul>
   16546:	4603      	mov	r3, r0
   16548:	4620      	mov	r0, r4
   1654a:	4619      	mov	r1, r3
   1654c:	f001 febc 	bl	182c8 <__addsf3>
   16550:	4603      	mov	r3, r0
   16552:	4618      	mov	r0, r3
   16554:	f002 f986 	bl	18864 <__aeabi_f2iz>
   16558:	4603      	mov	r3, r0
   1655a:	b29a      	uxth	r2, r3
   1655c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16560:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16564:	821a      	strh	r2, [r3, #16]
   16566:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   1656a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1656e:	781b      	ldrb	r3, [r3, #0]
   16570:	3301      	adds	r3, #1
   16572:	b2da      	uxtb	r2, r3
   16574:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   16578:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1657c:	701a      	strb	r2, [r3, #0]
   1657e:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   16582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16586:	781b      	ldrb	r3, [r3, #0]
   16588:	2b0a      	cmp	r3, #10
   1658a:	f040 8101 	bne.w	16790 <last_radio_from_ppm+0x5e8>
   1658e:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   16592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16596:	2200      	movs	r2, #0
   16598:	701a      	strb	r2, [r3, #0]
   1659a:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1659e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165a2:	891a      	ldrh	r2, [r3, #8]
   165a4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ac:	811a      	strh	r2, [r3, #8]
   165ae:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165b6:	2200      	movs	r2, #0
   165b8:	811a      	strh	r2, [r3, #8]
   165ba:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165c2:	891b      	ldrh	r3, [r3, #8]
   165c4:	b21b      	sxth	r3, r3
   165c6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   165ca:	dd07      	ble.n	165dc <last_radio_from_ppm+0x434>
   165cc:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   165d8:	811a      	strh	r2, [r3, #8]
   165da:	e00f      	b.n	165fc <last_radio_from_ppm+0x454>
   165dc:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e4:	891b      	ldrh	r3, [r3, #8]
   165e6:	b21b      	sxth	r3, r3
   165e8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   165ec:	da06      	bge.n	165fc <last_radio_from_ppm+0x454>
   165ee:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f6:	f64d 2280 	movw	r2, #55936	; 0xda80
   165fa:	811a      	strh	r2, [r3, #8]
   165fc:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16600:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16604:	895a      	ldrh	r2, [r3, #10]
   16606:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1660e:	815a      	strh	r2, [r3, #10]
   16610:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16618:	2200      	movs	r2, #0
   1661a:	815a      	strh	r2, [r3, #10]
   1661c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16624:	895b      	ldrh	r3, [r3, #10]
   16626:	b21b      	sxth	r3, r3
   16628:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1662c:	dd07      	ble.n	1663e <last_radio_from_ppm+0x496>
   1662e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16636:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1663a:	815a      	strh	r2, [r3, #10]
   1663c:	e00f      	b.n	1665e <last_radio_from_ppm+0x4b6>
   1663e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16646:	895b      	ldrh	r3, [r3, #10]
   16648:	b21b      	sxth	r3, r3
   1664a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1664e:	da06      	bge.n	1665e <last_radio_from_ppm+0x4b6>
   16650:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16658:	f64d 2280 	movw	r2, #55936	; 0xda80
   1665c:	815a      	strh	r2, [r3, #10]
   1665e:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16666:	899a      	ldrh	r2, [r3, #12]
   16668:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1666c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16670:	819a      	strh	r2, [r3, #12]
   16672:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1667a:	2200      	movs	r2, #0
   1667c:	819a      	strh	r2, [r3, #12]
   1667e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16686:	899b      	ldrh	r3, [r3, #12]
   16688:	b21b      	sxth	r3, r3
   1668a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1668e:	dd07      	ble.n	166a0 <last_radio_from_ppm+0x4f8>
   16690:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16698:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1669c:	819a      	strh	r2, [r3, #12]
   1669e:	e00f      	b.n	166c0 <last_radio_from_ppm+0x518>
   166a0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a8:	899b      	ldrh	r3, [r3, #12]
   166aa:	b21b      	sxth	r3, r3
   166ac:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   166b0:	da06      	bge.n	166c0 <last_radio_from_ppm+0x518>
   166b2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ba:	f64d 2280 	movw	r2, #55936	; 0xda80
   166be:	819a      	strh	r2, [r3, #12]
   166c0:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   166c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166c8:	89da      	ldrh	r2, [r3, #14]
   166ca:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166d2:	81da      	strh	r2, [r3, #14]
   166d4:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   166d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166dc:	2200      	movs	r2, #0
   166de:	81da      	strh	r2, [r3, #14]
   166e0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e8:	89db      	ldrh	r3, [r3, #14]
   166ea:	b21b      	sxth	r3, r3
   166ec:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   166f0:	dd07      	ble.n	16702 <last_radio_from_ppm+0x55a>
   166f2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166fa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   166fe:	81da      	strh	r2, [r3, #14]
   16700:	e00f      	b.n	16722 <last_radio_from_ppm+0x57a>
   16702:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1670a:	89db      	ldrh	r3, [r3, #14]
   1670c:	b21b      	sxth	r3, r3
   1670e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16712:	da06      	bge.n	16722 <last_radio_from_ppm+0x57a>
   16714:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1671c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16720:	81da      	strh	r2, [r3, #14]
   16722:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1672a:	8a1a      	ldrh	r2, [r3, #16]
   1672c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16730:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16734:	821a      	strh	r2, [r3, #16]
   16736:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1673a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1673e:	2200      	movs	r2, #0
   16740:	821a      	strh	r2, [r3, #16]
   16742:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1674a:	8a1b      	ldrh	r3, [r3, #16]
   1674c:	b21b      	sxth	r3, r3
   1674e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16752:	dd07      	ble.n	16764 <last_radio_from_ppm+0x5bc>
   16754:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1675c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16760:	821a      	strh	r2, [r3, #16]
   16762:	e00f      	b.n	16784 <last_radio_from_ppm+0x5dc>
   16764:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1676c:	8a1b      	ldrh	r3, [r3, #16]
   1676e:	b21b      	sxth	r3, r3
   16770:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16774:	da06      	bge.n	16784 <last_radio_from_ppm+0x5dc>
   16776:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1677a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1677e:	f64d 2280 	movw	r2, #55936	; 0xda80
   16782:	821a      	strh	r2, [r3, #16]
   16784:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16788:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1678c:	2201      	movs	r2, #1
   1678e:	701a      	strb	r2, [r3, #0]
}
   16790:	370c      	adds	r7, #12
   16792:	46bd      	mov	sp, r7
   16794:	bd90      	pop	{r4, r7, pc}
   16796:	bf00      	nop

00016798 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16798:	b480      	push	{r7}
   1679a:	af00      	add	r7, sp, #0
  idx_buf = 0;
   1679c:	f64c 4314 	movw	r3, #52244	; 0xcc14
   167a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167a4:	2200      	movs	r2, #0
   167a6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   167a8:	f64c 4315 	movw	r3, #52245	; 0xcc15
   167ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167b0:	2200      	movs	r2, #0
   167b2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   167b4:	f64c 4314 	movw	r3, #52244	; 0xcc14
   167b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167bc:	781b      	ldrb	r3, [r3, #0]
   167be:	b2db      	uxtb	r3, r3
   167c0:	461a      	mov	r2, r3
   167c2:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   167c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167ca:	4413      	add	r3, r2
   167cc:	781a      	ldrb	r2, [r3, #0]
   167ce:	f64c 4316 	movw	r3, #52246	; 0xcc16
   167d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167d6:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   167d8:	f242 030f 	movw	r3, #8207	; 0x200f
   167dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167e0:	f64c 4216 	movw	r2, #52246	; 0xcc16
   167e4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   167e8:	7812      	ldrb	r2, [r2, #0]
   167ea:	b2d2      	uxtb	r2, r2
   167ec:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   167ee:	f64c 4312 	movw	r3, #52242	; 0xcc12
   167f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167f6:	2200      	movs	r2, #0
   167f8:	701a      	strb	r2, [r3, #0]
}
   167fa:	46bd      	mov	sp, r7
   167fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16800:	4770      	bx	lr
   16802:	bf00      	nop

00016804 <fbw_spi_init>:

void fbw_spi_init(void) {
   16804:	b480      	push	{r7}
   16806:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16808:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1680c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16810:	2200      	movs	r2, #0
   16812:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   16814:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1681c:	2200      	movs	r2, #0
   1681e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16820:	f242 0317 	movw	r3, #8215	; 0x2017
   16824:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16828:	f242 0217 	movw	r2, #8215	; 0x2017
   1682c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16830:	7812      	ldrb	r2, [r2, #0]
   16832:	b2d2      	uxtb	r2, r2
   16834:	f042 0210 	orr.w	r2, r2, #16
   16838:	b2d2      	uxtb	r2, r2
   1683a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1683c:	f242 030d 	movw	r3, #8205	; 0x200d
   16840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16844:	2240      	movs	r2, #64	; 0x40
   16846:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16848:	f242 030d 	movw	r3, #8205	; 0x200d
   1684c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16850:	f242 020d 	movw	r2, #8205	; 0x200d
   16854:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16858:	7812      	ldrb	r2, [r2, #0]
   1685a:	b2d2      	uxtb	r2, r2
   1685c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16860:	b2d2      	uxtb	r2, r2
   16862:	701a      	strb	r2, [r3, #0]
}
   16864:	46bd      	mov	sp, r7
   16866:	f85d 7b04 	ldr.w	r7, [sp], #4
   1686a:	4770      	bx	lr
   1686c:	0000      	movs	r0, r0
	...

00016870 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16870:	b480      	push	{r7}
   16872:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   16874:	f242 032f 	movw	r3, #8239	; 0x202f
   16878:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1687c:	2200      	movs	r2, #0
   1687e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16880:	f242 032e 	movw	r3, #8238	; 0x202e
   16884:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16888:	2201      	movs	r2, #1
   1688a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   1688c:	f242 0325 	movw	r3, #8229	; 0x2025
   16890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16894:	2207      	movs	r2, #7
   16896:	701a      	strb	r2, [r3, #0]
}
   16898:	46bd      	mov	sp, r7
   1689a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1689e:	4770      	bx	lr

000168a0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   168a0:	b480      	push	{r7}
   168a2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   168a4:	f242 032e 	movw	r3, #8238	; 0x202e
   168a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168ac:	f242 022e 	movw	r2, #8238	; 0x202e
   168b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168b4:	7812      	ldrb	r2, [r2, #0]
   168b6:	b2d2      	uxtb	r2, r2
   168b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   168bc:	b2d2      	uxtb	r2, r2
   168be:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   168c0:	f242 032e 	movw	r3, #8238	; 0x202e
   168c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168c8:	f242 022e 	movw	r2, #8238	; 0x202e
   168cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168d0:	7812      	ldrb	r2, [r2, #0]
   168d2:	b2d2      	uxtb	r2, r2
   168d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   168d8:	b2d2      	uxtb	r2, r2
   168da:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   168dc:	f242 0317 	movw	r3, #8215	; 0x2017
   168e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168e4:	f242 0217 	movw	r2, #8215	; 0x2017
   168e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168ec:	7812      	ldrb	r2, [r2, #0]
   168ee:	b2d2      	uxtb	r2, r2
   168f0:	f022 0201 	bic.w	r2, r2, #1
   168f4:	b2d2      	uxtb	r2, r2
   168f6:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   168f8:	f242 0337 	movw	r3, #8247	; 0x2037
   168fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16900:	f242 0237 	movw	r2, #8247	; 0x2037
   16904:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16908:	7812      	ldrb	r2, [r2, #0]
   1690a:	b2d2      	uxtb	r2, r2
   1690c:	f042 0220 	orr.w	r2, r2, #32
   16910:	b2d2      	uxtb	r2, r2
   16912:	701a      	strb	r2, [r3, #0]
}
   16914:	46bd      	mov	sp, r7
   16916:	f85d 7b04 	ldr.w	r7, [sp], #4
   1691a:	4770      	bx	lr

0001691c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1691c:	b580      	push	{r7, lr}
   1691e:	b082      	sub	sp, #8
   16920:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16922:	2300      	movs	r3, #0
   16924:	71fb      	strb	r3, [r7, #7]
   16926:	e010      	b.n	1694a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16928:	79fa      	ldrb	r2, [r7, #7]
   1692a:	79f9      	ldrb	r1, [r7, #7]
   1692c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16934:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16938:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1693c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16940:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16944:	79fb      	ldrb	r3, [r7, #7]
   16946:	3301      	adds	r3, #1
   16948:	71fb      	strb	r3, [r7, #7]
   1694a:	79fb      	ldrb	r3, [r7, #7]
   1694c:	2b08      	cmp	r3, #8
   1694e:	d9eb      	bls.n	16928 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16950:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16958:	781b      	ldrb	r3, [r3, #0]
   1695a:	2b00      	cmp	r3, #0
   1695c:	bf0c      	ite	eq
   1695e:	2300      	moveq	r3, #0
   16960:	2301      	movne	r3, #1
   16962:	b2db      	uxtb	r3, r3
   16964:	461a      	mov	r2, r3
   16966:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1696a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1696e:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16970:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16974:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16978:	7cdb      	ldrb	r3, [r3, #19]
   1697a:	b2da      	uxtb	r2, r3
   1697c:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16984:	781b      	ldrb	r3, [r3, #0]
   16986:	2b00      	cmp	r3, #0
   16988:	d001      	beq.n	1698e <to_autopilot_from_last_radio+0x72>
   1698a:	2302      	movs	r3, #2
   1698c:	e000      	b.n	16990 <to_autopilot_from_last_radio+0x74>
   1698e:	2300      	movs	r3, #0
   16990:	4313      	orrs	r3, r2
   16992:	b2db      	uxtb	r3, r3
   16994:	b2da      	uxtb	r2, r3
   16996:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1699a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1699e:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   169a0:	f64c 33da 	movw	r3, #52186	; 0xcbda
   169a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169a8:	781b      	ldrb	r3, [r3, #0]
   169aa:	2b00      	cmp	r3, #0
   169ac:	d012      	beq.n	169d4 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   169ae:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169b6:	7cdb      	ldrb	r3, [r3, #19]
   169b8:	f043 0304 	orr.w	r3, r3, #4
   169bc:	b2da      	uxtb	r2, r3
   169be:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169c6:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   169c8:	f64c 33da 	movw	r3, #52186	; 0xcbda
   169cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169d0:	2200      	movs	r2, #0
   169d2:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   169d4:	f64c 43a8 	movw	r3, #52392	; 0xcca8
   169d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169dc:	781a      	ldrb	r2, [r3, #0]
   169de:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169e6:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   169e8:	f64c 4318 	movw	r3, #52248	; 0xcc18
   169ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169f0:	881b      	ldrh	r3, [r3, #0]
   169f2:	4618      	mov	r0, r3
   169f4:	f001 f8ca 	bl	17b8c <__aeabi_i2d>
   169f8:	4602      	mov	r2, r0
   169fa:	460b      	mov	r3, r1
   169fc:	4610      	mov	r0, r2
   169fe:	4619      	mov	r1, r3
   16a00:	a31b      	add	r3, pc, #108	; (adr r3, 16a70 <to_autopilot_from_last_radio+0x154>)
   16a02:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a06:	f001 f927 	bl	17c58 <__aeabi_dmul>
   16a0a:	4602      	mov	r2, r0
   16a0c:	460b      	mov	r3, r1
   16a0e:	4610      	mov	r0, r2
   16a10:	4619      	mov	r1, r3
   16a12:	f04f 0200 	mov.w	r2, #0
   16a16:	f04f 0300 	mov.w	r3, #0
   16a1a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16a1e:	f001 fa45 	bl	17eac <__aeabi_ddiv>
   16a22:	4602      	mov	r2, r0
   16a24:	460b      	mov	r3, r1
   16a26:	4610      	mov	r0, r2
   16a28:	4619      	mov	r1, r3
   16a2a:	a313      	add	r3, pc, #76	; (adr r3, 16a78 <to_autopilot_from_last_radio+0x15c>)
   16a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a30:	f000 ff60 	bl	178f4 <__adddf3>
   16a34:	4602      	mov	r2, r0
   16a36:	460b      	mov	r3, r1
   16a38:	4610      	mov	r0, r2
   16a3a:	4619      	mov	r1, r3
   16a3c:	f04f 0200 	mov.w	r2, #0
   16a40:	f04f 0300 	mov.w	r3, #0
   16a44:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16a48:	f001 f906 	bl	17c58 <__aeabi_dmul>
   16a4c:	4602      	mov	r2, r0
   16a4e:	460b      	mov	r3, r1
   16a50:	4610      	mov	r0, r2
   16a52:	4619      	mov	r1, r3
   16a54:	f001 fbc2 	bl	181dc <__aeabi_d2uiz>
   16a58:	4603      	mov	r3, r0
   16a5a:	b2da      	uxtb	r2, r3
   16a5c:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a64:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   16a66:	3708      	adds	r7, #8
   16a68:	46bd      	mov	sp, r7
   16a6a:	bd80      	pop	{r7, pc}
   16a6c:	f3af 8000 	nop.w
   16a70:	1eb851ec 	.word	0x1eb851ec
   16a74:	3f91eb85 	.word	0x3f91eb85
   16a78:	020c49ba 	.word	0x020c49ba
   16a7c:	3fb6872b 	.word	0x3fb6872b

00016a80 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16a80:	b580      	push	{r7, lr}
   16a82:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
   if ( !SpiIsSelected() && spi_was_interrupted ) 
   16a84:	f242 0316 	movw	r3, #8214	; 0x2016
   16a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a8c:	781b      	ldrb	r3, [r3, #0]
   16a8e:	b2db      	uxtb	r3, r3
   16a90:	f003 0304 	and.w	r3, r3, #4
   16a94:	2b00      	cmp	r3, #0
   16a96:	d011      	beq.n	16abc <send_data_to_autopilot_task+0x3c>
   16a98:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aa0:	781b      	ldrb	r3, [r3, #0]
   16aa2:	b2db      	uxtb	r3, r3
   16aa4:	2b00      	cmp	r3, #0
   16aa6:	d009      	beq.n	16abc <send_data_to_autopilot_task+0x3c>
   {
      spi_was_interrupted = FALSE;
   16aa8:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ab0:	2200      	movs	r2, #0
   16ab2:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16ab4:	f7ff ff32 	bl	1691c <to_autopilot_from_last_radio>
      spi_reset();
   16ab8:	f7ff fe6e 	bl	16798 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16abc:	bd80      	pop	{r7, pc}
   16abe:	bf00      	nop

00016ac0 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   16ac0:	b580      	push	{r7, lr}
   16ac2:	af00      	add	r7, sp, #0
  uart_init_tx();
   16ac4:	f000 fb68 	bl	17198 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16ac8:	f648 3008 	movw	r0, #35592	; 0x8b08
   16acc:	f2c0 0001 	movt	r0, #1
   16ad0:	f000 fc40 	bl	17354 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16ad4:	f7ff faa0 	bl	16018 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16ad8:	2003      	movs	r0, #3
   16ada:	f64c 4118 	movw	r1, #52248	; 0xcc18
   16ade:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16ae2:	f7ff fa85 	bl	15ff0 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16ae6:	2006      	movs	r0, #6
   16ae8:	f64c 415c 	movw	r1, #52316	; 0xcc5c
   16aec:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16af0:	f7ff fa7e 	bl	15ff0 <fbw_adc_buf_channel>
#endif
  timer_init();
   16af4:	f7ff febc 	bl	16870 <timer_init>
  servo_init();
   16af8:	f000 f8fa 	bl	16cf0 <servo_init>
  ppm_init();
   16afc:	f7ff fed0 	bl	168a0 <ppm_init>
  fbw_spi_init();
   16b00:	f7ff fe80 	bl	16804 <fbw_spi_init>
  //sei(); //FN
}
   16b04:	bd80      	pop	{r7, pc}
   16b06:	bf00      	nop

00016b08 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16b08:	b580      	push	{r7, lr}
   16b0a:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    if( ppm_valid ) 
   16b0c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b14:	781b      	ldrb	r3, [r3, #0]
   16b16:	b2db      	uxtb	r3, r3
   16b18:	2b00      	cmp	r3, #0
   16b1a:	d04c      	beq.n	16bb6 <test_ppm_task+0xae>
    {
      ppm_valid = FALSE;
   16b1c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b24:	2200      	movs	r2, #0
   16b26:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16b28:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b30:	781b      	ldrb	r3, [r3, #0]
   16b32:	3301      	adds	r3, #1
   16b34:	b2da      	uxtb	r2, r3
   16b36:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b3e:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16b40:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b48:	2201      	movs	r2, #1
   16b4a:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16b4c:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b54:	2200      	movs	r2, #0
   16b56:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16b58:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b60:	2200      	movs	r2, #0
   16b62:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16b64:	f7ff fb20 	bl	161a8 <last_radio_from_ppm>
      if (last_radio_contains_avg_channels) 
   16b68:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b70:	781b      	ldrb	r3, [r3, #0]
   16b72:	2b00      	cmp	r3, #0
   16b74:	d011      	beq.n	16b9a <test_ppm_task+0x92>
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16b76:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b7e:	891b      	ldrh	r3, [r3, #8]
   16b80:	b21b      	sxth	r3, r3
   16b82:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16b86:	bfb4      	ite	lt
   16b88:	2300      	movlt	r3, #0
   16b8a:	2301      	movge	r3, #1
   16b8c:	b2db      	uxtb	r3, r3
   16b8e:	461a      	mov	r2, r3
   16b90:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b98:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16b9a:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ba2:	781b      	ldrb	r3, [r3, #0]
   16ba4:	2b00      	cmp	r3, #0
   16ba6:	d11a      	bne.n	16bde <test_ppm_task+0xd6>
      {
	servo_set(last_radio);
   16ba8:	f64c 30b4 	movw	r0, #52148	; 0xcbb4
   16bac:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16bb0:	f000 f97c 	bl	16eac <servo_set>
   16bb4:	e013      	b.n	16bde <test_ppm_task+0xd6>
      }
    } 
    else if (mode == MODE_MANUAL && radio_really_lost) 
   16bb6:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bbe:	781b      	ldrb	r3, [r3, #0]
   16bc0:	2b00      	cmp	r3, #0
   16bc2:	d10c      	bne.n	16bde <test_ppm_task+0xd6>
   16bc4:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bcc:	781b      	ldrb	r3, [r3, #0]
   16bce:	2b00      	cmp	r3, #0
   16bd0:	d005      	beq.n	16bde <test_ppm_task+0xd6>
    {
      mode = MODE_AUTO;
   16bd2:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bda:	2201      	movs	r2, #1
   16bdc:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= STALLED_TIME) 
   16bde:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16be6:	881b      	ldrh	r3, [r3, #0]
   16be8:	2b1d      	cmp	r3, #29
   16bea:	d905      	bls.n	16bf8 <test_ppm_task+0xf0>
    {
      radio_ok = FALSE;
   16bec:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bf4:	2200      	movs	r2, #0
   16bf6:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= REALLY_STALLED_TIME) 
   16bf8:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c00:	881b      	ldrh	r3, [r3, #0]
   16c02:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16c06:	d305      	bcc.n	16c14 <test_ppm_task+0x10c>
    {
      radio_really_lost = TRUE;
   16c08:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c10:	2201      	movs	r2, #1
   16c12:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16c14:	bd80      	pop	{r7, pc}
   16c16:	bf00      	nop

00016c18 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16c18:	b580      	push	{r7, lr}
   16c1a:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   16c1c:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c24:	781b      	ldrb	r3, [r3, #0]
   16c26:	2b00      	cmp	r3, #0
   16c28:	d106      	bne.n	16c38 <check_failsafe_task+0x20>
   16c2a:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c32:	781b      	ldrb	r3, [r3, #0]
   16c34:	2b00      	cmp	r3, #0
   16c36:	d00d      	beq.n	16c54 <check_failsafe_task+0x3c>
   16c38:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c40:	781b      	ldrb	r3, [r3, #0]
   16c42:	2b01      	cmp	r3, #1
   16c44:	d10c      	bne.n	16c60 <check_failsafe_task+0x48>
   16c46:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c4e:	781b      	ldrb	r3, [r3, #0]
   16c50:	2b00      	cmp	r3, #0
   16c52:	d105      	bne.n	16c60 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   16c54:	f648 20f4 	movw	r0, #35572	; 0x8af4
   16c58:	f2c0 0001 	movt	r0, #1
   16c5c:	f000 f926 	bl	16eac <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16c60:	bd80      	pop	{r7, pc}
   16c62:	bf00      	nop

00016c64 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16c64:	b580      	push	{r7, lr}
   16c66:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     if ( !SpiIsSelected() && spi_was_interrupted ) 
   16c68:	f242 0316 	movw	r3, #8214	; 0x2016
   16c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c70:	781b      	ldrb	r3, [r3, #0]
   16c72:	b2db      	uxtb	r3, r3
   16c74:	f003 0304 	and.w	r3, r3, #4
   16c78:	2b00      	cmp	r3, #0
   16c7a:	d028      	beq.n	16cce <check_mega128_values_task+0x6a>
   16c7c:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c84:	781b      	ldrb	r3, [r3, #0]
   16c86:	b2db      	uxtb	r3, r3
   16c88:	2b00      	cmp	r3, #0
   16c8a:	d020      	beq.n	16cce <check_mega128_values_task+0x6a>
     {
         if (mega128_receive_valid)
   16c8c:	f64c 4312 	movw	r3, #52242	; 0xcc12
   16c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c94:	781b      	ldrb	r3, [r3, #0]
   16c96:	b2db      	uxtb	r3, r3
   16c98:	2b00      	cmp	r3, #0
   16c9a:	d018      	beq.n	16cce <check_mega128_values_task+0x6a>
         { 
             time_since_last_mega128 = 0;
   16c9c:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ca4:	2200      	movs	r2, #0
   16ca6:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16ca8:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cb0:	2201      	movs	r2, #1
   16cb2:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16cb4:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cbc:	781b      	ldrb	r3, [r3, #0]
   16cbe:	2b01      	cmp	r3, #1
   16cc0:	d105      	bne.n	16cce <check_mega128_values_task+0x6a>
                 servo_set(from_mega128.channels);
   16cc2:	f64c 30e4 	movw	r0, #52196	; 0xcbe4
   16cc6:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16cca:	f000 f8ef 	bl	16eac <servo_set>
         }
     }
     if (time_since_last_mega128 == STALLED_TIME) 
   16cce:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cd6:	781b      	ldrb	r3, [r3, #0]
   16cd8:	2b1e      	cmp	r3, #30
   16cda:	d105      	bne.n	16ce8 <check_mega128_values_task+0x84>
     {
         mega128_ok = FALSE;
   16cdc:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ce4:	2200      	movs	r2, #0
   16ce6:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16ce8:	bd80      	pop	{r7, pc}
   16cea:	bf00      	nop
   16cec:	f3af 8000 	nop.w

00016cf0 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16cf0:	b480      	push	{r7}
   16cf2:	b083      	sub	sp, #12
   16cf4:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16cf6:	f242 0311 	movw	r3, #8209	; 0x2011
   16cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cfe:	f242 0211 	movw	r2, #8209	; 0x2011
   16d02:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d06:	7812      	ldrb	r2, [r2, #0]
   16d08:	b2d2      	uxtb	r2, r2
   16d0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16d0e:	b2d2      	uxtb	r2, r2
   16d10:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16d12:	f242 0317 	movw	r3, #8215	; 0x2017
   16d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d1a:	f242 0217 	movw	r2, #8215	; 0x2017
   16d1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d22:	7812      	ldrb	r2, [r2, #0]
   16d24:	b2d2      	uxtb	r2, r2
   16d26:	f042 0202 	orr.w	r2, r2, #2
   16d2a:	b2d2      	uxtb	r2, r2
   16d2c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16d2e:	f242 0312 	movw	r3, #8210	; 0x2012
   16d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d36:	f242 0212 	movw	r2, #8210	; 0x2012
   16d3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d3e:	7812      	ldrb	r2, [r2, #0]
   16d40:	b2d2      	uxtb	r2, r2
   16d42:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16d46:	b2d2      	uxtb	r2, r2
   16d48:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16d4a:	f242 0318 	movw	r3, #8216	; 0x2018
   16d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d52:	f242 0218 	movw	r2, #8216	; 0x2018
   16d56:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d5a:	7812      	ldrb	r2, [r2, #0]
   16d5c:	b2d2      	uxtb	r2, r2
   16d5e:	f022 0202 	bic.w	r2, r2, #2
   16d62:	b2d2      	uxtb	r2, r2
   16d64:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16d66:	2300      	movs	r3, #0
   16d68:	71fb      	strb	r3, [r7, #7]
   16d6a:	e00b      	b.n	16d84 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16d6c:	79fa      	ldrb	r2, [r7, #7]
   16d6e:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d76:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16d7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16d7e:	79fb      	ldrb	r3, [r7, #7]
   16d80:	3301      	adds	r3, #1
   16d82:	71fb      	strb	r3, [r7, #7]
   16d84:	79fb      	ldrb	r3, [r7, #7]
   16d86:	2b09      	cmp	r3, #9
   16d88:	d9f0      	bls.n	16d6c <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16d8a:	f242 032a 	movw	r3, #8234	; 0x202a
   16d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16d96:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16d98:	f242 032f 	movw	r3, #8239	; 0x202f
   16d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16da0:	f242 022f 	movw	r2, #8239	; 0x202f
   16da4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16da8:	7812      	ldrb	r2, [r2, #0]
   16daa:	b2d2      	uxtb	r2, r2
   16dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16db0:	b2d2      	uxtb	r2, r2
   16db2:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16db4:	f242 0336 	movw	r3, #8246	; 0x2036
   16db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dbc:	2210      	movs	r2, #16
   16dbe:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16dc0:	f242 0312 	movw	r3, #8210	; 0x2012
   16dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dc8:	f242 0212 	movw	r2, #8210	; 0x2012
   16dcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16dd0:	7812      	ldrb	r2, [r2, #0]
   16dd2:	b2d2      	uxtb	r2, r2
   16dd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16dd8:	b2d2      	uxtb	r2, r2
   16dda:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16ddc:	f242 0337 	movw	r3, #8247	; 0x2037
   16de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16de4:	f242 0237 	movw	r2, #8247	; 0x2037
   16de8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16dec:	7812      	ldrb	r2, [r2, #0]
   16dee:	b2d2      	uxtb	r2, r2
   16df0:	f042 0210 	orr.w	r2, r2, #16
   16df4:	b2d2      	uxtb	r2, r2
   16df6:	701a      	strb	r2, [r3, #0]
}
   16df8:	370c      	adds	r7, #12
   16dfa:	46bd      	mov	sp, r7
   16dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e00:	4770      	bx	lr
   16e02:	bf00      	nop

00016e04 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16e04:	b480      	push	{r7}
   16e06:	b083      	sub	sp, #12
   16e08:	af00      	add	r7, sp, #0
   16e0a:	4602      	mov	r2, r0
   16e0c:	460b      	mov	r3, r1
   16e0e:	71fa      	strb	r2, [r7, #7]
   16e10:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16e12:	79f9      	ldrb	r1, [r7, #7]
   16e14:	88bb      	ldrh	r3, [r7, #4]
   16e16:	011b      	lsls	r3, r3, #4
   16e18:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e1c:	d308      	bcc.n	16e30 <servo_set_one+0x2c>
   16e1e:	88bb      	ldrh	r3, [r7, #4]
   16e20:	011b      	lsls	r3, r3, #4
   16e22:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e26:	bf28      	it	cs
   16e28:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e2c:	b29a      	uxth	r2, r3
   16e2e:	e001      	b.n	16e34 <servo_set_one+0x30>
   16e30:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e34:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e3c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16e40:	370c      	adds	r7, #12
   16e42:	46bd      	mov	sp, r7
   16e44:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e48:	4770      	bx	lr
   16e4a:	bf00      	nop

00016e4c <servo_transmit>:

void 
servo_transmit(void) {
   16e4c:	b580      	push	{r7, lr}
   16e4e:	b082      	sub	sp, #8
   16e50:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16e52:	2000      	movs	r0, #0
   16e54:	f000 f9e6 	bl	17224 <uart_transmit>
   16e58:	2000      	movs	r0, #0
   16e5a:	f000 f9e3 	bl	17224 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16e5e:	2300      	movs	r3, #0
   16e60:	71fb      	strb	r3, [r7, #7]
   16e62:	e01a      	b.n	16e9a <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16e64:	79fa      	ldrb	r2, [r7, #7]
   16e66:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16e72:	0a1b      	lsrs	r3, r3, #8
   16e74:	b29b      	uxth	r3, r3
   16e76:	b2db      	uxtb	r3, r3
   16e78:	4618      	mov	r0, r3
   16e7a:	f000 f9d3 	bl	17224 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16e7e:	79fa      	ldrb	r2, [r7, #7]
   16e80:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16e8c:	b2db      	uxtb	r3, r3
   16e8e:	4618      	mov	r0, r3
   16e90:	f000 f9c8 	bl	17224 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16e94:	79fb      	ldrb	r3, [r7, #7]
   16e96:	3301      	adds	r3, #1
   16e98:	71fb      	strb	r3, [r7, #7]
   16e9a:	79fb      	ldrb	r3, [r7, #7]
   16e9c:	2b09      	cmp	r3, #9
   16e9e:	d9e1      	bls.n	16e64 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16ea0:	200a      	movs	r0, #10
   16ea2:	f000 f9bf 	bl	17224 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16ea6:	3708      	adds	r7, #8
   16ea8:	46bd      	mov	sp, r7
   16eaa:	bd80      	pop	{r7, pc}

00016eac <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16eac:	b5b0      	push	{r4, r5, r7, lr}
   16eae:	b084      	sub	sp, #16
   16eb0:	af00      	add	r7, sp, #0
   16eb2:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16eb4:	687b      	ldr	r3, [r7, #4]
   16eb6:	330a      	adds	r3, #10
   16eb8:	881b      	ldrh	r3, [r3, #0]
   16eba:	b21b      	sxth	r3, r3
   16ebc:	005b      	lsls	r3, r3, #1
   16ebe:	4618      	mov	r0, r3
   16ec0:	f000 fe64 	bl	17b8c <__aeabi_i2d>
   16ec4:	4602      	mov	r2, r0
   16ec6:	460b      	mov	r3, r1
   16ec8:	4610      	mov	r0, r2
   16eca:	4619      	mov	r1, r3
   16ecc:	a3a6      	add	r3, pc, #664	; (adr r3, 17168 <servo_set+0x2bc>)
   16ece:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ed2:	f000 fec1 	bl	17c58 <__aeabi_dmul>
   16ed6:	4602      	mov	r2, r0
   16ed8:	460b      	mov	r3, r1
   16eda:	4610      	mov	r0, r2
   16edc:	4619      	mov	r1, r3
   16ede:	f001 f955 	bl	1818c <__aeabi_d2iz>
   16ee2:	4603      	mov	r3, r0
   16ee4:	b29b      	uxth	r3, r3
   16ee6:	b29b      	uxth	r3, r3
   16ee8:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16eec:	81fb      	strh	r3, [r7, #14]
   16eee:	89fb      	ldrh	r3, [r7, #14]
   16ef0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ef4:	d307      	bcc.n	16f06 <servo_set+0x5a>
   16ef6:	89fb      	ldrh	r3, [r7, #14]
   16ef8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16efc:	bf28      	it	cs
   16efe:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f02:	b29a      	uxth	r2, r3
   16f04:	e001      	b.n	16f0a <servo_set+0x5e>
   16f06:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f0a:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f12:	80da      	strh	r2, [r3, #6]
   16f14:	687b      	ldr	r3, [r7, #4]
   16f16:	881b      	ldrh	r3, [r3, #0]
   16f18:	b21b      	sxth	r3, r3
   16f1a:	005b      	lsls	r3, r3, #1
   16f1c:	4618      	mov	r0, r3
   16f1e:	f000 fe35 	bl	17b8c <__aeabi_i2d>
   16f22:	4602      	mov	r2, r0
   16f24:	460b      	mov	r3, r1
   16f26:	4610      	mov	r0, r2
   16f28:	4619      	mov	r1, r3
   16f2a:	a38f      	add	r3, pc, #572	; (adr r3, 17168 <servo_set+0x2bc>)
   16f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f30:	f000 fe92 	bl	17c58 <__aeabi_dmul>
   16f34:	4602      	mov	r2, r0
   16f36:	460b      	mov	r3, r1
   16f38:	4610      	mov	r0, r2
   16f3a:	4619      	mov	r1, r3
   16f3c:	f001 f926 	bl	1818c <__aeabi_d2iz>
   16f40:	4603      	mov	r3, r0
   16f42:	b29b      	uxth	r3, r3
   16f44:	b29b      	uxth	r3, r3
   16f46:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16f4a:	81fb      	strh	r3, [r7, #14]
   16f4c:	89fb      	ldrh	r3, [r7, #14]
   16f4e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f52:	d307      	bcc.n	16f64 <servo_set+0xb8>
   16f54:	89fb      	ldrh	r3, [r7, #14]
   16f56:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f5a:	bf28      	it	cs
   16f5c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f60:	b29a      	uxth	r2, r3
   16f62:	e001      	b.n	16f68 <servo_set+0xbc>
   16f64:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f68:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f70:	825a      	strh	r2, [r3, #18]
   16f72:	687b      	ldr	r3, [r7, #4]
   16f74:	3304      	adds	r3, #4
   16f76:	881b      	ldrh	r3, [r3, #0]
   16f78:	b21b      	sxth	r3, r3
   16f7a:	4618      	mov	r0, r3
   16f7c:	f000 fe06 	bl	17b8c <__aeabi_i2d>
   16f80:	4602      	mov	r2, r0
   16f82:	460b      	mov	r3, r1
   16f84:	4610      	mov	r0, r2
   16f86:	4619      	mov	r1, r3
   16f88:	a379      	add	r3, pc, #484	; (adr r3, 17170 <servo_set+0x2c4>)
   16f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f8e:	f000 fe63 	bl	17c58 <__aeabi_dmul>
   16f92:	4602      	mov	r2, r0
   16f94:	460b      	mov	r3, r1
   16f96:	4610      	mov	r0, r2
   16f98:	4619      	mov	r1, r3
   16f9a:	f001 f8f7 	bl	1818c <__aeabi_d2iz>
   16f9e:	4603      	mov	r3, r0
   16fa0:	b29b      	uxth	r3, r3
   16fa2:	b29b      	uxth	r3, r3
   16fa4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16fa8:	3320      	adds	r3, #32
   16faa:	81fb      	strh	r3, [r7, #14]
   16fac:	89fb      	ldrh	r3, [r7, #14]
   16fae:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16fb2:	d307      	bcc.n	16fc4 <servo_set+0x118>
   16fb4:	89fb      	ldrh	r3, [r7, #14]
   16fb6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16fba:	bf28      	it	cs
   16fbc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16fc0:	b29a      	uxth	r2, r3
   16fc2:	e001      	b.n	16fc8 <servo_set+0x11c>
   16fc4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fc8:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fd0:	819a      	strh	r2, [r3, #12]
   16fd2:	687b      	ldr	r3, [r7, #4]
   16fd4:	885b      	ldrh	r3, [r3, #2]
   16fd6:	81bb      	strh	r3, [r7, #12]
   16fd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16fdc:	2b00      	cmp	r3, #0
   16fde:	dd06      	ble.n	16fee <servo_set+0x142>
   16fe0:	f04f 0400 	mov.w	r4, #0
   16fe4:	f04f 0500 	mov.w	r5, #0
   16fe8:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16fec:	e002      	b.n	16ff4 <servo_set+0x148>
   16fee:	a562      	add	r5, pc, #392	; (adr r5, 17178 <servo_set+0x2cc>)
   16ff0:	e9d5 4500 	ldrd	r4, r5, [r5]
   16ff4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16ff8:	4618      	mov	r0, r3
   16ffa:	f000 fdc7 	bl	17b8c <__aeabi_i2d>
   16ffe:	4602      	mov	r2, r0
   17000:	460b      	mov	r3, r1
   17002:	4620      	mov	r0, r4
   17004:	4629      	mov	r1, r5
   17006:	f000 fe27 	bl	17c58 <__aeabi_dmul>
   1700a:	4602      	mov	r2, r0
   1700c:	460b      	mov	r3, r1
   1700e:	4610      	mov	r0, r2
   17010:	4619      	mov	r1, r3
   17012:	a35b      	add	r3, pc, #364	; (adr r3, 17180 <servo_set+0x2d4>)
   17014:	e9d3 2300 	ldrd	r2, r3, [r3]
   17018:	f000 fe1e 	bl	17c58 <__aeabi_dmul>
   1701c:	4602      	mov	r2, r0
   1701e:	460b      	mov	r3, r1
   17020:	4610      	mov	r0, r2
   17022:	4619      	mov	r1, r3
   17024:	f001 f8b2 	bl	1818c <__aeabi_d2iz>
   17028:	4603      	mov	r3, r0
   1702a:	b29b      	uxth	r3, r3
   1702c:	b29b      	uxth	r3, r3
   1702e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   17032:	81fb      	strh	r3, [r7, #14]
   17034:	89fb      	ldrh	r3, [r7, #14]
   17036:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1703a:	d307      	bcc.n	1704c <servo_set+0x1a0>
   1703c:	89fb      	ldrh	r3, [r7, #14]
   1703e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17042:	bf28      	it	cs
   17044:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17048:	b29a      	uxth	r2, r3
   1704a:	e001      	b.n	17050 <servo_set+0x1a4>
   1704c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17050:	f64c 43ac 	movw	r3, #52396	; 0xccac
   17054:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17058:	801a      	strh	r2, [r3, #0]
   1705a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1705e:	2b00      	cmp	r3, #0
   17060:	dd03      	ble.n	1706a <servo_set+0x1be>
   17062:	a545      	add	r5, pc, #276	; (adr r5, 17178 <servo_set+0x2cc>)
   17064:	e9d5 4500 	ldrd	r4, r5, [r5]
   17068:	e005      	b.n	17076 <servo_set+0x1ca>
   1706a:	f04f 0400 	mov.w	r4, #0
   1706e:	f04f 0500 	mov.w	r5, #0
   17072:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   17076:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1707a:	4618      	mov	r0, r3
   1707c:	f000 fd86 	bl	17b8c <__aeabi_i2d>
   17080:	4602      	mov	r2, r0
   17082:	460b      	mov	r3, r1
   17084:	4620      	mov	r0, r4
   17086:	4629      	mov	r1, r5
   17088:	f000 fde6 	bl	17c58 <__aeabi_dmul>
   1708c:	4602      	mov	r2, r0
   1708e:	460b      	mov	r3, r1
   17090:	4610      	mov	r0, r2
   17092:	4619      	mov	r1, r3
   17094:	a33c      	add	r3, pc, #240	; (adr r3, 17188 <servo_set+0x2dc>)
   17096:	e9d3 2300 	ldrd	r2, r3, [r3]
   1709a:	f000 fddd 	bl	17c58 <__aeabi_dmul>
   1709e:	4602      	mov	r2, r0
   170a0:	460b      	mov	r3, r1
   170a2:	4610      	mov	r0, r2
   170a4:	4619      	mov	r1, r3
   170a6:	f001 f871 	bl	1818c <__aeabi_d2iz>
   170aa:	4603      	mov	r3, r0
   170ac:	b29b      	uxth	r3, r3
   170ae:	b29b      	uxth	r3, r3
   170b0:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   170b4:	3320      	adds	r3, #32
   170b6:	81fb      	strh	r3, [r7, #14]
   170b8:	89fb      	ldrh	r3, [r7, #14]
   170ba:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   170be:	d307      	bcc.n	170d0 <servo_set+0x224>
   170c0:	89fb      	ldrh	r3, [r7, #14]
   170c2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   170c6:	bf28      	it	cs
   170c8:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   170cc:	b29a      	uxth	r2, r3
   170ce:	e001      	b.n	170d4 <servo_set+0x228>
   170d0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   170d4:	f64c 43ac 	movw	r3, #52396	; 0xccac
   170d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170dc:	809a      	strh	r2, [r3, #4]
   170de:	687b      	ldr	r3, [r7, #4]
   170e0:	3306      	adds	r3, #6
   170e2:	881b      	ldrh	r3, [r3, #0]
   170e4:	b21b      	sxth	r3, r3
   170e6:	4618      	mov	r0, r3
   170e8:	f000 fd50 	bl	17b8c <__aeabi_i2d>
   170ec:	4604      	mov	r4, r0
   170ee:	460d      	mov	r5, r1
   170f0:	687b      	ldr	r3, [r7, #4]
   170f2:	3302      	adds	r3, #2
   170f4:	881b      	ldrh	r3, [r3, #0]
   170f6:	b21b      	sxth	r3, r3
   170f8:	4618      	mov	r0, r3
   170fa:	f000 fd47 	bl	17b8c <__aeabi_i2d>
   170fe:	4602      	mov	r2, r0
   17100:	460b      	mov	r3, r1
   17102:	4620      	mov	r0, r4
   17104:	4629      	mov	r1, r5
   17106:	f000 fbf5 	bl	178f4 <__adddf3>
   1710a:	4602      	mov	r2, r0
   1710c:	460b      	mov	r3, r1
   1710e:	4610      	mov	r0, r2
   17110:	4619      	mov	r1, r3
   17112:	a31f      	add	r3, pc, #124	; (adr r3, 17190 <servo_set+0x2e4>)
   17114:	e9d3 2300 	ldrd	r2, r3, [r3]
   17118:	f000 fd9e 	bl	17c58 <__aeabi_dmul>
   1711c:	4602      	mov	r2, r0
   1711e:	460b      	mov	r3, r1
   17120:	4610      	mov	r0, r2
   17122:	4619      	mov	r1, r3
   17124:	f001 f832 	bl	1818c <__aeabi_d2iz>
   17128:	4603      	mov	r3, r0
   1712a:	b29b      	uxth	r3, r3
   1712c:	b29b      	uxth	r3, r3
   1712e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   17132:	3320      	adds	r3, #32
   17134:	81fb      	strh	r3, [r7, #14]
   17136:	89fb      	ldrh	r3, [r7, #14]
   17138:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1713c:	d307      	bcc.n	1714e <servo_set+0x2a2>
   1713e:	89fb      	ldrh	r3, [r7, #14]
   17140:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17144:	bf28      	it	cs
   17146:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1714a:	b29a      	uxth	r2, r3
   1714c:	e001      	b.n	17152 <servo_set+0x2a6>
   1714e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17152:	f64c 43ac 	movw	r3, #52396	; 0xccac
   17156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1715a:	81da      	strh	r2, [r3, #14]
}
   1715c:	3710      	adds	r7, #16
   1715e:	46bd      	mov	sp, r7
   17160:	bdb0      	pop	{r4, r5, r7, pc}
   17162:	bf00      	nop
   17164:	f3af 8000 	nop.w
   17168:	aaaa9ef0 	.word	0xaaaa9ef0
   1716c:	3feaaaaa 	.word	0x3feaaaaa
   17170:	fc96473e 	.word	0xfc96473e
   17174:	3fdfc962 	.word	0x3fdfc962
   17178:	51eb851f 	.word	0x51eb851f
   1717c:	3fe51eb8 	.word	0x3fe51eb8
   17180:	9999999a 	.word	0x9999999a
   17184:	bfe19999 	.word	0xbfe19999
   17188:	aaaa9ef0 	.word	0xaaaa9ef0
   1718c:	bfe0aaaa 	.word	0xbfe0aaaa
   17190:	eeeed77a 	.word	0xeeeed77a
   17194:	bfdeeeee 	.word	0xbfdeeeee

00017198 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   17198:	b480      	push	{r7}
   1719a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   1719c:	f242 0320 	movw	r3, #8224	; 0x2020
   171a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171a4:	2200      	movs	r2, #0
   171a6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   171a8:	f242 0309 	movw	r3, #8201	; 0x2009
   171ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171b0:	2219      	movs	r2, #25
   171b2:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   171b4:	f242 030b 	movw	r3, #8203	; 0x200b
   171b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171bc:	2200      	movs	r2, #0
   171be:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   171c0:	f242 030a 	movw	r3, #8202	; 0x200a
   171c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171c8:	2208      	movs	r2, #8
   171ca:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   171cc:	f242 0320 	movw	r3, #8224	; 0x2020
   171d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171d4:	2286      	movs	r2, #134	; 0x86
   171d6:	701a      	strb	r2, [r3, #0]
}
   171d8:	46bd      	mov	sp, r7
   171da:	f85d 7b04 	ldr.w	r7, [sp], #4
   171de:	4770      	bx	lr

000171e0 <uart_init_rx>:

void uart_init_rx() {
   171e0:	b480      	push	{r7}
   171e2:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   171e4:	f242 030a 	movw	r3, #8202	; 0x200a
   171e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171ec:	f242 020a 	movw	r2, #8202	; 0x200a
   171f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   171f4:	7812      	ldrb	r2, [r2, #0]
   171f6:	b2d2      	uxtb	r2, r2
   171f8:	f042 0210 	orr.w	r2, r2, #16
   171fc:	b2d2      	uxtb	r2, r2
   171fe:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   17200:	f242 030a 	movw	r3, #8202	; 0x200a
   17204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17208:	f242 020a 	movw	r2, #8202	; 0x200a
   1720c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17210:	7812      	ldrb	r2, [r2, #0]
   17212:	b2d2      	uxtb	r2, r2
   17214:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17218:	b2d2      	uxtb	r2, r2
   1721a:	701a      	strb	r2, [r3, #0]
}
   1721c:	46bd      	mov	sp, r7
   1721e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17222:	4770      	bx	lr

00017224 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   17224:	b480      	push	{r7}
   17226:	b083      	sub	sp, #12
   17228:	af00      	add	r7, sp, #0
   1722a:	4603      	mov	r3, r0
   1722c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   1722e:	f242 030a 	movw	r3, #8202	; 0x200a
   17232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17236:	781b      	ldrb	r3, [r3, #0]
   17238:	b2db      	uxtb	r3, r3
   1723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1723e:	2b00      	cmp	r3, #0
   17240:	d028      	beq.n	17294 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   17242:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   17246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1724a:	781b      	ldrb	r3, [r3, #0]
   1724c:	b2db      	uxtb	r3, r3
   1724e:	461a      	mov	r2, r3
   17250:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17258:	781b      	ldrb	r3, [r3, #0]
   1725a:	3301      	adds	r3, #1
   1725c:	429a      	cmp	r2, r3
   1725e:	d100      	bne.n	17262 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   17260:	e02c      	b.n	172bc <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   17262:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1726a:	781b      	ldrb	r3, [r3, #0]
   1726c:	461a      	mov	r2, r3
   1726e:	f64c 43c4 	movw	r3, #52420	; 0xccc4
   17272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17276:	79f9      	ldrb	r1, [r7, #7]
   17278:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   1727a:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   1727e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17282:	781b      	ldrb	r3, [r3, #0]
   17284:	3301      	adds	r3, #1
   17286:	b2da      	uxtb	r2, r3
   17288:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   1728c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17290:	701a      	strb	r2, [r3, #0]
   17292:	e013      	b.n	172bc <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   17294:	f242 030c 	movw	r3, #8204	; 0x200c
   17298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1729c:	79fa      	ldrb	r2, [r7, #7]
   1729e:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   172a0:	f242 030a 	movw	r3, #8202	; 0x200a
   172a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172a8:	f242 020a 	movw	r2, #8202	; 0x200a
   172ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   172b0:	7812      	ldrb	r2, [r2, #0]
   172b2:	b2d2      	uxtb	r2, r2
   172b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   172b8:	b2d2      	uxtb	r2, r2
   172ba:	701a      	strb	r2, [r3, #0]
  }
}
   172bc:	370c      	adds	r7, #12
   172be:	46bd      	mov	sp, r7
   172c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   172c4:	4770      	bx	lr
   172c6:	bf00      	nop

000172c8 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   172c8:	b590      	push	{r4, r7, lr}
   172ca:	b089      	sub	sp, #36	; 0x24
   172cc:	af00      	add	r7, sp, #0
   172ce:	4603      	mov	r3, r0
   172d0:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   172d2:	f648 3348 	movw	r3, #35656	; 0x8b48
   172d6:	f2c0 0301 	movt	r3, #1
   172da:	f107 040c 	add.w	r4, r7, #12
   172de:	6818      	ldr	r0, [r3, #0]
   172e0:	6859      	ldr	r1, [r3, #4]
   172e2:	689a      	ldr	r2, [r3, #8]
   172e4:	68db      	ldr	r3, [r3, #12]
   172e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   172e8:	79fb      	ldrb	r3, [r7, #7]
   172ea:	091b      	lsrs	r3, r3, #4
   172ec:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   172ee:	79fb      	ldrb	r3, [r7, #7]
   172f0:	f003 030f 	and.w	r3, r3, #15
   172f4:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   172f6:	230f      	movs	r3, #15
   172f8:	77fb      	strb	r3, [r7, #31]
        low = 15;
   172fa:	230f      	movs	r3, #15
   172fc:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   172fe:	7ffb      	ldrb	r3, [r7, #31]
   17300:	f107 0220 	add.w	r2, r7, #32
   17304:	4413      	add	r3, r2
   17306:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1730a:	4618      	mov	r0, r3
   1730c:	f7ff ff8a 	bl	17224 <uart_transmit>
  uart_transmit(hex[low]);
   17310:	7fbb      	ldrb	r3, [r7, #30]
   17312:	f107 0220 	add.w	r2, r7, #32
   17316:	4413      	add	r3, r2
   17318:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1731c:	4618      	mov	r0, r3
   1731e:	f7ff ff81 	bl	17224 <uart_transmit>
} 
   17322:	3724      	adds	r7, #36	; 0x24
   17324:	46bd      	mov	sp, r7
   17326:	bd90      	pop	{r4, r7, pc}

00017328 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17328:	b580      	push	{r7, lr}
   1732a:	b084      	sub	sp, #16
   1732c:	af00      	add	r7, sp, #0
   1732e:	4603      	mov	r3, r0
   17330:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   17332:	88fb      	ldrh	r3, [r7, #6]
   17334:	0a1b      	lsrs	r3, r3, #8
   17336:	b29b      	uxth	r3, r3
   17338:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   1733a:	88fb      	ldrh	r3, [r7, #6]
   1733c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   1733e:	7bfb      	ldrb	r3, [r7, #15]
   17340:	4618      	mov	r0, r3
   17342:	f7ff ffc1 	bl	172c8 <uart_print_hex>
  uart_print_hex(low);
   17346:	7bbb      	ldrb	r3, [r7, #14]
   17348:	4618      	mov	r0, r3
   1734a:	f7ff ffbd 	bl	172c8 <uart_print_hex>
}
   1734e:	3710      	adds	r7, #16
   17350:	46bd      	mov	sp, r7
   17352:	bd80      	pop	{r7, pc}

00017354 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   17354:	b580      	push	{r7, lr}
   17356:	b084      	sub	sp, #16
   17358:	af00      	add	r7, sp, #0
   1735a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   1735c:	2300      	movs	r3, #0
   1735e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   17360:	e009      	b.n	17376 <uart_print_string+0x22>
    uart_transmit(s[i]);
   17362:	7bfb      	ldrb	r3, [r7, #15]
   17364:	687a      	ldr	r2, [r7, #4]
   17366:	4413      	add	r3, r2
   17368:	781b      	ldrb	r3, [r3, #0]
   1736a:	4618      	mov	r0, r3
   1736c:	f7ff ff5a 	bl	17224 <uart_transmit>
    i++;
   17370:	7bfb      	ldrb	r3, [r7, #15]
   17372:	3301      	adds	r3, #1
   17374:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   17376:	7bfb      	ldrb	r3, [r7, #15]
   17378:	687a      	ldr	r2, [r7, #4]
   1737a:	4413      	add	r3, r2
   1737c:	781b      	ldrb	r3, [r3, #0]
   1737e:	2b00      	cmp	r3, #0
   17380:	d1ef      	bne.n	17362 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   17382:	3710      	adds	r7, #16
   17384:	46bd      	mov	sp, r7
   17386:	bd80      	pop	{r7, pc}

00017388 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   17388:	b480      	push	{r7}
   1738a:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   1738c:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17390:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17394:	781a      	ldrb	r2, [r3, #0]
   17396:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   1739a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1739e:	781b      	ldrb	r3, [r3, #0]
   173a0:	b2db      	uxtb	r3, r3
   173a2:	429a      	cmp	r2, r3
   173a4:	d10e      	bne.n	173c4 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   173a6:	f242 030a 	movw	r3, #8202	; 0x200a
   173aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173ae:	f242 020a 	movw	r2, #8202	; 0x200a
   173b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   173b6:	7812      	ldrb	r2, [r2, #0]
   173b8:	b2d2      	uxtb	r2, r2
   173ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   173be:	b2d2      	uxtb	r2, r2
   173c0:	701a      	strb	r2, [r3, #0]
   173c2:	e01d      	b.n	17400 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   173c4:	f242 030c 	movw	r3, #8204	; 0x200c
   173c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173cc:	f64c 42c1 	movw	r2, #52417	; 0xccc1
   173d0:	f2c2 0204 	movt	r2, #8196	; 0x2004
   173d4:	7812      	ldrb	r2, [r2, #0]
   173d6:	b2d2      	uxtb	r2, r2
   173d8:	4611      	mov	r1, r2
   173da:	f64c 42c4 	movw	r2, #52420	; 0xccc4
   173de:	f2c2 0204 	movt	r2, #8196	; 0x2004
   173e2:	5c52      	ldrb	r2, [r2, r1]
   173e4:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   173e6:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   173ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   173ee:	781b      	ldrb	r3, [r3, #0]
   173f0:	b2db      	uxtb	r3, r3
   173f2:	3301      	adds	r3, #1
   173f4:	b2da      	uxtb	r2, r3
   173f6:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   173fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   173fe:	701a      	strb	r2, [r3, #0]
  }
}
   17400:	46bd      	mov	sp, r7
   17402:	f85d 7b04 	ldr.w	r7, [sp], #4
   17406:	4770      	bx	lr

00017408 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17408:	b580      	push	{r7, lr}
   1740a:	b082      	sub	sp, #8
   1740c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   1740e:	2010      	movs	r0, #16
   17410:	2101      	movs	r1, #1
   17412:	f7e9 fcd5 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   17416:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1741a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1741e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17422:	2201      	movs	r2, #1
   17424:	f7e9 ffdc 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1742c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1742e:	2310      	movs	r3, #16
   17430:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17432:	2303      	movs	r3, #3
   17434:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17436:	1d3b      	adds	r3, r7, #4
   17438:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1743c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17440:	4619      	mov	r1, r3
   17442:	f7e9 fe91 	bl	1168 <GPIO_Init>
}
   17446:	3708      	adds	r7, #8
   17448:	46bd      	mov	sp, r7
   1744a:	bd80      	pop	{r7, pc}

0001744c <init_button>:

void init_button(void)
{
   1744c:	b580      	push	{r7, lr}
   1744e:	b082      	sub	sp, #8
   17450:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   17452:	2004      	movs	r0, #4
   17454:	2101      	movs	r1, #1
   17456:	f7e9 fcb3 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   1745a:	2301      	movs	r3, #1
   1745c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   1745e:	2304      	movs	r3, #4
   17460:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17462:	2303      	movs	r3, #3
   17464:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17466:	1d3b      	adds	r3, r7, #4
   17468:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1746c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17470:	4619      	mov	r1, r3
   17472:	f7e9 fe79 	bl	1168 <GPIO_Init>
}
   17476:	3708      	adds	r7, #8
   17478:	46bd      	mov	sp, r7
   1747a:	bd80      	pop	{r7, pc}

0001747c <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   1747c:	b580      	push	{r7, lr}
   1747e:	b084      	sub	sp, #16
   17480:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   17482:	2001      	movs	r0, #1
   17484:	2101      	movs	r1, #1
   17486:	f7e9 fc9b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   1748a:	2000      	movs	r0, #0
   1748c:	2100      	movs	r1, #0
   1748e:	f7ea f89f 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   17492:	2301      	movs	r3, #1
   17494:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   17496:	2300      	movs	r3, #0
   17498:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   1749a:	2308      	movs	r3, #8
   1749c:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   1749e:	2301      	movs	r3, #1
   174a0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   174a2:	f107 0308 	add.w	r3, r7, #8
   174a6:	4618      	mov	r0, r3
   174a8:	f7ea fd98 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   174ac:	2306      	movs	r3, #6
   174ae:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   174b0:	230f      	movs	r3, #15
   174b2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   174b4:	230f      	movs	r3, #15
   174b6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   174b8:	2301      	movs	r3, #1
   174ba:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   174bc:	1d3b      	adds	r3, r7, #4
   174be:	4618      	mov	r0, r3
   174c0:	f7ea fec6 	bl	2250 <NVIC_Init>
}
   174c4:	3710      	adds	r7, #16
   174c6:	46bd      	mov	sp, r7
   174c8:	bd80      	pop	{r7, pc}
   174ca:	bf00      	nop

000174cc <init_rs232>:

void init_rs232(void)
{
   174cc:	b580      	push	{r7, lr}
   174ce:	b086      	sub	sp, #24
   174d0:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   174d2:	2005      	movs	r0, #5
   174d4:	2101      	movs	r1, #1
   174d6:	f7e9 fc73 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   174da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   174de:	2101      	movs	r1, #1
   174e0:	f7e9 fc96 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   174e4:	2308      	movs	r3, #8
   174e6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   174e8:	2304      	movs	r3, #4
   174ea:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   174ec:	1d3b      	adds	r3, r7, #4
   174ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
   174f2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   174f6:	4619      	mov	r1, r3
   174f8:	f7e9 fe36 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   174fc:	2304      	movs	r3, #4
   174fe:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17500:	2303      	movs	r3, #3
   17502:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   17504:	2318      	movs	r3, #24
   17506:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17508:	1d3b      	adds	r3, r7, #4
   1750a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1750e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17512:	4619      	mov	r1, r3
   17514:	f7e9 fe28 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17518:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1751c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1751e:	2300      	movs	r3, #0
   17520:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   17522:	2300      	movs	r3, #0
   17524:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   17526:	2300      	movs	r3, #0
   17528:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1752a:	2300      	movs	r3, #0
   1752c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1752e:	230c      	movs	r3, #12
   17530:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   17532:	f107 0308 	add.w	r3, r7, #8
   17536:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1753a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1753e:	4619      	mov	r1, r3
   17540:	f7ea f8fa 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   17544:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17548:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1754c:	2101      	movs	r1, #1
   1754e:	f7ea fa11 	bl	1974 <USART_Cmd>
}
   17552:	3718      	adds	r7, #24
   17554:	46bd      	mov	sp, r7
   17556:	bd80      	pop	{r7, pc}

00017558 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17558:	b580      	push	{r7, lr}
   1755a:	b082      	sub	sp, #8
   1755c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   1755e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17562:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17566:	f240 7127 	movw	r1, #1831	; 0x727
   1756a:	2200      	movs	r2, #0
   1756c:	f7ea fa22 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   17570:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17574:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17578:	f240 5125 	movw	r1, #1317	; 0x525
   1757c:	2201      	movs	r2, #1
   1757e:	f7ea fa19 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   17582:	2326      	movs	r3, #38	; 0x26
   17584:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   17586:	2300      	movs	r3, #0
   17588:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   1758a:	2301      	movs	r3, #1
   1758c:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   1758e:	1d3b      	adds	r3, r7, #4
   17590:	4618      	mov	r0, r3
   17592:	f7ea fe5d 	bl	2250 <NVIC_Init>
}
   17596:	3708      	adds	r7, #8
   17598:	46bd      	mov	sp, r7
   1759a:	bd80      	pop	{r7, pc}

0001759c <enable_rs232>:

void enable_rs232(void)
{
   1759c:	b580      	push	{r7, lr}
   1759e:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   175a0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175a8:	2101      	movs	r1, #1
   175aa:	f7ea f9e3 	bl	1974 <USART_Cmd>
}
   175ae:	bd80      	pop	{r7, pc}

000175b0 <send_byte>:

void send_byte(uint8_t b)
{
   175b0:	b580      	push	{r7, lr}
   175b2:	b082      	sub	sp, #8
   175b4:	af00      	add	r7, sp, #0
   175b6:	4603      	mov	r3, r0
   175b8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   175ba:	bf00      	nop
   175bc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175c4:	2180      	movs	r1, #128	; 0x80
   175c6:	f7ea fc41 	bl	1e4c <USART_GetFlagStatus>
   175ca:	4603      	mov	r3, r0
   175cc:	2b00      	cmp	r3, #0
   175ce:	d0f5      	beq.n	175bc <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   175d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   175d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
   175d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   175dc:	f2c4 0201 	movt	r2, #16385	; 0x4001
   175e0:	68d2      	ldr	r2, [r2, #12]
   175e2:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   175e6:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   175e8:	79fb      	ldrb	r3, [r7, #7]
   175ea:	b29b      	uxth	r3, r3
   175ec:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175f0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175f4:	4619      	mov	r1, r3
   175f6:	f7ea fadd 	bl	1bb4 <USART_SendData>
}
   175fa:	3708      	adds	r7, #8
   175fc:	46bd      	mov	sp, r7
   175fe:	bd80      	pop	{r7, pc}

00017600 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17600:	b580      	push	{r7, lr}
   17602:	b082      	sub	sp, #8
   17604:	af00      	add	r7, sp, #0
   17606:	4603      	mov	r3, r0
   17608:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   1760a:	79fb      	ldrb	r3, [r7, #7]
   1760c:	3330      	adds	r3, #48	; 0x30
   1760e:	b2db      	uxtb	r3, r3
   17610:	4618      	mov	r0, r3
   17612:	f7ff ffcd 	bl	175b0 <send_byte>
}
   17616:	3708      	adds	r7, #8
   17618:	46bd      	mov	sp, r7
   1761a:	bd80      	pop	{r7, pc}

0001761c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   1761c:	b580      	push	{r7, lr}
   1761e:	b084      	sub	sp, #16
   17620:	af00      	add	r7, sp, #0
   17622:	6078      	str	r0, [r7, #4]
    int i = 0;
   17624:	2300      	movs	r3, #0
   17626:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17628:	e009      	b.n	1763e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1762a:	68fb      	ldr	r3, [r7, #12]
   1762c:	687a      	ldr	r2, [r7, #4]
   1762e:	4413      	add	r3, r2
   17630:	781b      	ldrb	r3, [r3, #0]
   17632:	4618      	mov	r0, r3
   17634:	f7ff ffbc 	bl	175b0 <send_byte>
        i++;
   17638:	68fb      	ldr	r3, [r7, #12]
   1763a:	3301      	adds	r3, #1
   1763c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   1763e:	68fb      	ldr	r3, [r7, #12]
   17640:	687a      	ldr	r2, [r7, #4]
   17642:	4413      	add	r3, r2
   17644:	781b      	ldrb	r3, [r3, #0]
   17646:	2b00      	cmp	r3, #0
   17648:	d1ef      	bne.n	1762a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   1764a:	3710      	adds	r7, #16
   1764c:	46bd      	mov	sp, r7
   1764e:	bd80      	pop	{r7, pc}

00017650 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17650:	b580      	push	{r7, lr}
   17652:	b08a      	sub	sp, #40	; 0x28
   17654:	af00      	add	r7, sp, #0
   17656:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17658:	2300      	movs	r3, #0
   1765a:	623b      	str	r3, [r7, #32]
    long num = c_num;
   1765c:	687b      	ldr	r3, [r7, #4]
   1765e:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17660:	69fb      	ldr	r3, [r7, #28]
   17662:	2b00      	cmp	r3, #0
   17664:	d106      	bne.n	17674 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   17666:	f648 3058 	movw	r0, #35672	; 0x8b58
   1766a:	f2c0 0001 	movt	r0, #1
   1766e:	f7ff ffd5 	bl	1761c <vPrintString>
   17672:	e062      	b.n	1773a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   17674:	e024      	b.n	176c0 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   17676:	69f9      	ldr	r1, [r7, #28]
   17678:	f246 6367 	movw	r3, #26215	; 0x6667
   1767c:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17680:	fb83 2301 	smull	r2, r3, r3, r1
   17684:	109a      	asrs	r2, r3, #2
   17686:	17cb      	asrs	r3, r1, #31
   17688:	1ad2      	subs	r2, r2, r3
   1768a:	4613      	mov	r3, r2
   1768c:	009b      	lsls	r3, r3, #2
   1768e:	4413      	add	r3, r2
   17690:	005b      	lsls	r3, r3, #1
   17692:	1aca      	subs	r2, r1, r3
   17694:	b2d3      	uxtb	r3, r2
   17696:	3330      	adds	r3, #48	; 0x30
   17698:	b2da      	uxtb	r2, r3
   1769a:	f107 010c 	add.w	r1, r7, #12
   1769e:	6a3b      	ldr	r3, [r7, #32]
   176a0:	440b      	add	r3, r1
   176a2:	701a      	strb	r2, [r3, #0]
            count ++;
   176a4:	6a3b      	ldr	r3, [r7, #32]
   176a6:	3301      	adds	r3, #1
   176a8:	623b      	str	r3, [r7, #32]
            num /= 10;
   176aa:	69fa      	ldr	r2, [r7, #28]
   176ac:	f246 6367 	movw	r3, #26215	; 0x6667
   176b0:	f2c6 6366 	movt	r3, #26214	; 0x6666
   176b4:	fb83 1302 	smull	r1, r3, r3, r2
   176b8:	1099      	asrs	r1, r3, #2
   176ba:	17d3      	asrs	r3, r2, #31
   176bc:	1acb      	subs	r3, r1, r3
   176be:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   176c0:	69fb      	ldr	r3, [r7, #28]
   176c2:	2b00      	cmp	r3, #0
   176c4:	d1d7      	bne.n	17676 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   176c6:	f107 020c 	add.w	r2, r7, #12
   176ca:	6a3b      	ldr	r3, [r7, #32]
   176cc:	4413      	add	r3, r2
   176ce:	2200      	movs	r2, #0
   176d0:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   176d2:	2300      	movs	r3, #0
   176d4:	627b      	str	r3, [r7, #36]	; 0x24
   176d6:	e020      	b.n	1771a <vPrintNumber+0xca>
        {
            tmp = time[i];
   176d8:	f107 020c 	add.w	r2, r7, #12
   176dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176de:	4413      	add	r3, r2
   176e0:	781b      	ldrb	r3, [r3, #0]
   176e2:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   176e4:	6a3a      	ldr	r2, [r7, #32]
   176e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176e8:	1ad3      	subs	r3, r2, r3
   176ea:	3b01      	subs	r3, #1
   176ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
   176f0:	4413      	add	r3, r2
   176f2:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   176f6:	f107 010c 	add.w	r1, r7, #12
   176fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176fc:	440b      	add	r3, r1
   176fe:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17700:	6a3a      	ldr	r2, [r7, #32]
   17702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17704:	1ad3      	subs	r3, r2, r3
   17706:	3b01      	subs	r3, #1
   17708:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1770c:	440b      	add	r3, r1
   1770e:	7efa      	ldrb	r2, [r7, #27]
   17710:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   17714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17716:	3301      	adds	r3, #1
   17718:	627b      	str	r3, [r7, #36]	; 0x24
   1771a:	6a3b      	ldr	r3, [r7, #32]
   1771c:	085a      	lsrs	r2, r3, #1
   1771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17720:	429a      	cmp	r2, r3
   17722:	d8d9      	bhi.n	176d8 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   17724:	f107 030c 	add.w	r3, r7, #12
   17728:	4618      	mov	r0, r3
   1772a:	f7ff ff77 	bl	1761c <vPrintString>
        vPrintString("\n\r");
   1772e:	f648 305c 	movw	r0, #35676	; 0x8b5c
   17732:	f2c0 0001 	movt	r0, #1
   17736:	f7ff ff71 	bl	1761c <vPrintString>
    }
}
   1773a:	3728      	adds	r7, #40	; 0x28
   1773c:	46bd      	mov	sp, r7
   1773e:	bd80      	pop	{r7, pc}

00017740 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   17740:	b580      	push	{r7, lr}
   17742:	b084      	sub	sp, #16
   17744:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   17746:	2300      	movs	r3, #0
   17748:	60fb      	str	r3, [r7, #12]
   1774a:	e01e      	b.n	1778a <vStartTask+0x4a>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
   1774c:	f240 0390 	movw	r3, #144	; 0x90
   17750:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17754:	68fa      	ldr	r2, [r7, #12]
   17756:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1775a:	f240 0328 	movw	r3, #40	; 0x28
   1775e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17762:	68fa      	ldr	r2, [r7, #12]
   17764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   17768:	f240 0328 	movw	r3, #40	; 0x28
   1776c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17770:	68fa      	ldr	r2, [r7, #12]
   17772:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17776:	463b      	mov	r3, r7
   17778:	f7eb fab6 	bl	2ce8 <pxEventGenericCreate>
   1777c:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   1777e:	68b8      	ldr	r0, [r7, #8]
   17780:	f7eb fe60 	bl	3444 <vEventGenericSend>
void vStartTask()
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   17784:	68fb      	ldr	r3, [r7, #12]
   17786:	3301      	adds	r3, #1
   17788:	60fb      	str	r3, [r7, #12]
   1778a:	68fb      	ldr	r3, [r7, #12]
   1778c:	2b0c      	cmp	r3, #12
   1778e:	dddd      	ble.n	1774c <vStartTask+0xc>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
        vEventSend( pxEvent );   
    }
}
   17790:	3710      	adds	r7, #16
   17792:	46bd      	mov	sp, r7
   17794:	bd80      	pop	{r7, pc}
   17796:	bf00      	nop

00017798 <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   17798:	b580      	push	{r7, lr}
   1779a:	b086      	sub	sp, #24
   1779c:	af04      	add	r7, sp, #16
    init_led();
   1779e:	f7ff fe33 	bl	17408 <init_led>
    init_rs232();
   177a2:	f7ff fe93 	bl	174cc <init_rs232>
    enable_rs232_interrupts();
   177a6:	f7ff fed7 	bl	17558 <enable_rs232_interrupts>
    enable_rs232();
   177aa:	f7ff fef7 	bl	1759c <enable_rs232>
    vSemaphoreInitialise();
   177ae:	f7eb feb1 	bl	3514 <vSemaphoreInitialise>
    vContextInit();
   177b2:	f7eb feef 	bl	3594 <vContextInit>
    vInitialiseEventLists();  
   177b6:	f7eb f957 	bl	2a68 <vInitialiseEventLists>
    vStartTask();
   177ba:	f7ff ffc1 	bl	17740 <vStartTask>
    PapabenchInit();
   177be:	f7ec fa91 	bl	3ce4 <PapabenchInit>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   177c2:	2300      	movs	r3, #0
   177c4:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   177c6:	2301      	movs	r3, #1
   177c8:	9300      	str	r3, [sp, #0]
   177ca:	f64c 53c4 	movw	r3, #52676	; 0xcdc4
   177ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   177d2:	9301      	str	r3, [sp, #4]
   177d4:	2300      	movs	r3, #0
   177d6:	9302      	str	r3, [sp, #8]
   177d8:	2300      	movs	r3, #0
   177da:	9303      	str	r3, [sp, #12]
   177dc:	f643 4001 	movw	r0, #15361	; 0x3c01
   177e0:	f2c0 0000 	movt	r0, #0
   177e4:	f648 3160 	movw	r1, #35680	; 0x8b60
   177e8:	f2c0 0101 	movt	r1, #1
   177ec:	2280      	movs	r2, #128	; 0x80
   177ee:	2300      	movs	r3, #0
   177f0:	f7ed f91c 	bl	4a2c <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 4, &xTaskOfHandle[1]);
   177f4:	2304      	movs	r3, #4
   177f6:	9300      	str	r3, [sp, #0]
   177f8:	4b25      	ldr	r3, [pc, #148]	; (17890 <main+0xf8>)
   177fa:	9301      	str	r3, [sp, #4]
   177fc:	2300      	movs	r3, #0
   177fe:	9302      	str	r3, [sp, #8]
   17800:	2300      	movs	r3, #0
   17802:	9303      	str	r3, [sp, #12]
   17804:	f643 0079 	movw	r0, #14457	; 0x3879
   17808:	f2c0 0000 	movt	r0, #0
   1780c:	f648 316c 	movw	r1, #35692	; 0x8b6c
   17810:	f2c0 0101 	movt	r1, #1
   17814:	2280      	movs	r2, #128	; 0x80
   17816:	2300      	movs	r3, #0
   17818:	f7ed f908 	bl	4a2c <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   1781c:	2302      	movs	r3, #2
   1781e:	9300      	str	r3, [sp, #0]
   17820:	4b1c      	ldr	r3, [pc, #112]	; (17894 <main+0xfc>)
   17822:	9301      	str	r3, [sp, #4]
   17824:	2300      	movs	r3, #0
   17826:	9302      	str	r3, [sp, #8]
   17828:	2300      	movs	r3, #0
   1782a:	9303      	str	r3, [sp, #12]
   1782c:	f643 1085 	movw	r0, #14725	; 0x3985
   17830:	f2c0 0000 	movt	r0, #0
   17834:	f648 3178 	movw	r1, #35704	; 0x8b78
   17838:	f2c0 0101 	movt	r1, #1
   1783c:	2280      	movs	r2, #128	; 0x80
   1783e:	2300      	movs	r3, #0
   17840:	f7ed f8f4 	bl	4a2c <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 3, &xTaskOfHandle[3]);
   17844:	2303      	movs	r3, #3
   17846:	9300      	str	r3, [sp, #0]
   17848:	4b13      	ldr	r3, [pc, #76]	; (17898 <main+0x100>)
   1784a:	9301      	str	r3, [sp, #4]
   1784c:	2300      	movs	r3, #0
   1784e:	9302      	str	r3, [sp, #8]
   17850:	2300      	movs	r3, #0
   17852:	9303      	str	r3, [sp, #12]
   17854:	f643 3001 	movw	r0, #15105	; 0x3b01
   17858:	f2c0 0000 	movt	r0, #0
   1785c:	f648 3184 	movw	r1, #35716	; 0x8b84
   17860:	f2c0 0101 	movt	r1, #1
   17864:	2280      	movs	r2, #128	; 0x80
   17866:	2300      	movs	r3, #0
   17868:	f7ed f8e0 	bl	4a2c <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   1786c:	f241 3354 	movw	r3, #4948	; 0x1354
   17870:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17874:	681b      	ldr	r3, [r3, #0]
   17876:	4618      	mov	r0, r3
   17878:	2100      	movs	r1, #0
   1787a:	2200      	movs	r2, #0
   1787c:	2300      	movs	r3, #0
   1787e:	f7ec fdc3 	bl	4408 <xQueueGenericSend>
    vTaskStartScheduler();
   17882:	f7ed fc51 	bl	5128 <vTaskStartScheduler>

    return 0;
   17886:	2300      	movs	r3, #0
}
   17888:	4618      	mov	r0, r3
   1788a:	3708      	adds	r7, #8
   1788c:	46bd      	mov	sp, r7
   1788e:	bd80      	pop	{r7, pc}
   17890:	2004cdc8 	.word	0x2004cdc8
   17894:	2004cdcc 	.word	0x2004cdcc
   17898:	2004cdd0 	.word	0x2004cdd0

0001789c <myTraceCreate>:

void myTraceCreate      (){
   1789c:	b480      	push	{r7}
   1789e:	af00      	add	r7, sp, #0
}
   178a0:	46bd      	mov	sp, r7
   178a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   178a6:	4770      	bx	lr

000178a8 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   178a8:	b480      	push	{r7}
   178aa:	af00      	add	r7, sp, #0
}
   178ac:	46bd      	mov	sp, r7
   178ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   178b2:	4770      	bx	lr

000178b4 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   178b4:	b480      	push	{r7}
   178b6:	af00      	add	r7, sp, #0
}
   178b8:	46bd      	mov	sp, r7
   178ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   178be:	4770      	bx	lr

000178c0 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   178c0:	b580      	push	{r7, lr}
   178c2:	af00      	add	r7, sp, #0
    if(xIsExecutableEventArrive())
   178c4:	f7eb f934 	bl	2b30 <xIsExecutableEventArrive>
   178c8:	4603      	mov	r3, r0
   178ca:	2b00      	cmp	r3, #0
   178cc:	d00a      	beq.n	178e4 <vApplicationTickHook+0x24>
       xSemaphoreGive( xBinarySemaphore[0] ); 
   178ce:	f241 3354 	movw	r3, #4948	; 0x1354
   178d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   178d6:	681b      	ldr	r3, [r3, #0]
   178d8:	4618      	mov	r0, r3
   178da:	2100      	movs	r1, #0
   178dc:	2200      	movs	r2, #0
   178de:	2300      	movs	r3, #0
   178e0:	f7ec fd92 	bl	4408 <xQueueGenericSend>
}
   178e4:	bd80      	pop	{r7, pc}
   178e6:	bf00      	nop

000178e8 <__aeabi_drsub>:
   178e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   178ec:	e002      	b.n	178f4 <__adddf3>
   178ee:	bf00      	nop

000178f0 <__aeabi_dsub>:
   178f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000178f4 <__adddf3>:
   178f4:	b530      	push	{r4, r5, lr}
   178f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   178fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   178fe:	ea94 0f05 	teq	r4, r5
   17902:	bf08      	it	eq
   17904:	ea90 0f02 	teqeq	r0, r2
   17908:	bf1f      	itttt	ne
   1790a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1790e:	ea55 0c02 	orrsne.w	ip, r5, r2
   17912:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   17916:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1791a:	f000 80e2 	beq.w	17ae2 <__adddf3+0x1ee>
   1791e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17922:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17926:	bfb8      	it	lt
   17928:	426d      	neglt	r5, r5
   1792a:	dd0c      	ble.n	17946 <__adddf3+0x52>
   1792c:	442c      	add	r4, r5
   1792e:	ea80 0202 	eor.w	r2, r0, r2
   17932:	ea81 0303 	eor.w	r3, r1, r3
   17936:	ea82 0000 	eor.w	r0, r2, r0
   1793a:	ea83 0101 	eor.w	r1, r3, r1
   1793e:	ea80 0202 	eor.w	r2, r0, r2
   17942:	ea81 0303 	eor.w	r3, r1, r3
   17946:	2d36      	cmp	r5, #54	; 0x36
   17948:	bf88      	it	hi
   1794a:	bd30      	pophi	{r4, r5, pc}
   1794c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17950:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17954:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17958:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1795c:	d002      	beq.n	17964 <__adddf3+0x70>
   1795e:	4240      	negs	r0, r0
   17960:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17964:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17968:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1796c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17970:	d002      	beq.n	17978 <__adddf3+0x84>
   17972:	4252      	negs	r2, r2
   17974:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17978:	ea94 0f05 	teq	r4, r5
   1797c:	f000 80a7 	beq.w	17ace <__adddf3+0x1da>
   17980:	f1a4 0401 	sub.w	r4, r4, #1
   17984:	f1d5 0e20 	rsbs	lr, r5, #32
   17988:	db0d      	blt.n	179a6 <__adddf3+0xb2>
   1798a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1798e:	fa22 f205 	lsr.w	r2, r2, r5
   17992:	1880      	adds	r0, r0, r2
   17994:	f141 0100 	adc.w	r1, r1, #0
   17998:	fa03 f20e 	lsl.w	r2, r3, lr
   1799c:	1880      	adds	r0, r0, r2
   1799e:	fa43 f305 	asr.w	r3, r3, r5
   179a2:	4159      	adcs	r1, r3
   179a4:	e00e      	b.n	179c4 <__adddf3+0xd0>
   179a6:	f1a5 0520 	sub.w	r5, r5, #32
   179aa:	f10e 0e20 	add.w	lr, lr, #32
   179ae:	2a01      	cmp	r2, #1
   179b0:	fa03 fc0e 	lsl.w	ip, r3, lr
   179b4:	bf28      	it	cs
   179b6:	f04c 0c02 	orrcs.w	ip, ip, #2
   179ba:	fa43 f305 	asr.w	r3, r3, r5
   179be:	18c0      	adds	r0, r0, r3
   179c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   179c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   179c8:	d507      	bpl.n	179da <__adddf3+0xe6>
   179ca:	f04f 0e00 	mov.w	lr, #0
   179ce:	f1dc 0c00 	rsbs	ip, ip, #0
   179d2:	eb7e 0000 	sbcs.w	r0, lr, r0
   179d6:	eb6e 0101 	sbc.w	r1, lr, r1
   179da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   179de:	d31b      	bcc.n	17a18 <__adddf3+0x124>
   179e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   179e4:	d30c      	bcc.n	17a00 <__adddf3+0x10c>
   179e6:	0849      	lsrs	r1, r1, #1
   179e8:	ea5f 0030 	movs.w	r0, r0, rrx
   179ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   179f0:	f104 0401 	add.w	r4, r4, #1
   179f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   179f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   179fc:	f080 809a 	bcs.w	17b34 <__adddf3+0x240>
   17a00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17a04:	bf08      	it	eq
   17a06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17a0a:	f150 0000 	adcs.w	r0, r0, #0
   17a0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17a12:	ea41 0105 	orr.w	r1, r1, r5
   17a16:	bd30      	pop	{r4, r5, pc}
   17a18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17a1c:	4140      	adcs	r0, r0
   17a1e:	eb41 0101 	adc.w	r1, r1, r1
   17a22:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17a26:	f1a4 0401 	sub.w	r4, r4, #1
   17a2a:	d1e9      	bne.n	17a00 <__adddf3+0x10c>
   17a2c:	f091 0f00 	teq	r1, #0
   17a30:	bf04      	itt	eq
   17a32:	4601      	moveq	r1, r0
   17a34:	2000      	moveq	r0, #0
   17a36:	fab1 f381 	clz	r3, r1
   17a3a:	bf08      	it	eq
   17a3c:	3320      	addeq	r3, #32
   17a3e:	f1a3 030b 	sub.w	r3, r3, #11
   17a42:	f1b3 0220 	subs.w	r2, r3, #32
   17a46:	da0c      	bge.n	17a62 <__adddf3+0x16e>
   17a48:	320c      	adds	r2, #12
   17a4a:	dd08      	ble.n	17a5e <__adddf3+0x16a>
   17a4c:	f102 0c14 	add.w	ip, r2, #20
   17a50:	f1c2 020c 	rsb	r2, r2, #12
   17a54:	fa01 f00c 	lsl.w	r0, r1, ip
   17a58:	fa21 f102 	lsr.w	r1, r1, r2
   17a5c:	e00c      	b.n	17a78 <__adddf3+0x184>
   17a5e:	f102 0214 	add.w	r2, r2, #20
   17a62:	bfd8      	it	le
   17a64:	f1c2 0c20 	rsble	ip, r2, #32
   17a68:	fa01 f102 	lsl.w	r1, r1, r2
   17a6c:	fa20 fc0c 	lsr.w	ip, r0, ip
   17a70:	bfdc      	itt	le
   17a72:	ea41 010c 	orrle.w	r1, r1, ip
   17a76:	4090      	lslle	r0, r2
   17a78:	1ae4      	subs	r4, r4, r3
   17a7a:	bfa2      	ittt	ge
   17a7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17a80:	4329      	orrge	r1, r5
   17a82:	bd30      	popge	{r4, r5, pc}
   17a84:	ea6f 0404 	mvn.w	r4, r4
   17a88:	3c1f      	subs	r4, #31
   17a8a:	da1c      	bge.n	17ac6 <__adddf3+0x1d2>
   17a8c:	340c      	adds	r4, #12
   17a8e:	dc0e      	bgt.n	17aae <__adddf3+0x1ba>
   17a90:	f104 0414 	add.w	r4, r4, #20
   17a94:	f1c4 0220 	rsb	r2, r4, #32
   17a98:	fa20 f004 	lsr.w	r0, r0, r4
   17a9c:	fa01 f302 	lsl.w	r3, r1, r2
   17aa0:	ea40 0003 	orr.w	r0, r0, r3
   17aa4:	fa21 f304 	lsr.w	r3, r1, r4
   17aa8:	ea45 0103 	orr.w	r1, r5, r3
   17aac:	bd30      	pop	{r4, r5, pc}
   17aae:	f1c4 040c 	rsb	r4, r4, #12
   17ab2:	f1c4 0220 	rsb	r2, r4, #32
   17ab6:	fa20 f002 	lsr.w	r0, r0, r2
   17aba:	fa01 f304 	lsl.w	r3, r1, r4
   17abe:	ea40 0003 	orr.w	r0, r0, r3
   17ac2:	4629      	mov	r1, r5
   17ac4:	bd30      	pop	{r4, r5, pc}
   17ac6:	fa21 f004 	lsr.w	r0, r1, r4
   17aca:	4629      	mov	r1, r5
   17acc:	bd30      	pop	{r4, r5, pc}
   17ace:	f094 0f00 	teq	r4, #0
   17ad2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17ad6:	bf06      	itte	eq
   17ad8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17adc:	3401      	addeq	r4, #1
   17ade:	3d01      	subne	r5, #1
   17ae0:	e74e      	b.n	17980 <__adddf3+0x8c>
   17ae2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17ae6:	bf18      	it	ne
   17ae8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17aec:	d029      	beq.n	17b42 <__adddf3+0x24e>
   17aee:	ea94 0f05 	teq	r4, r5
   17af2:	bf08      	it	eq
   17af4:	ea90 0f02 	teqeq	r0, r2
   17af8:	d005      	beq.n	17b06 <__adddf3+0x212>
   17afa:	ea54 0c00 	orrs.w	ip, r4, r0
   17afe:	bf04      	itt	eq
   17b00:	4619      	moveq	r1, r3
   17b02:	4610      	moveq	r0, r2
   17b04:	bd30      	pop	{r4, r5, pc}
   17b06:	ea91 0f03 	teq	r1, r3
   17b0a:	bf1e      	ittt	ne
   17b0c:	2100      	movne	r1, #0
   17b0e:	2000      	movne	r0, #0
   17b10:	bd30      	popne	{r4, r5, pc}
   17b12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17b16:	d105      	bne.n	17b24 <__adddf3+0x230>
   17b18:	0040      	lsls	r0, r0, #1
   17b1a:	4149      	adcs	r1, r1
   17b1c:	bf28      	it	cs
   17b1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17b22:	bd30      	pop	{r4, r5, pc}
   17b24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17b28:	bf3c      	itt	cc
   17b2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17b2e:	bd30      	popcc	{r4, r5, pc}
   17b30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17b34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17b38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17b3c:	f04f 0000 	mov.w	r0, #0
   17b40:	bd30      	pop	{r4, r5, pc}
   17b42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17b46:	bf1a      	itte	ne
   17b48:	4619      	movne	r1, r3
   17b4a:	4610      	movne	r0, r2
   17b4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17b50:	bf1c      	itt	ne
   17b52:	460b      	movne	r3, r1
   17b54:	4602      	movne	r2, r0
   17b56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17b5a:	bf06      	itte	eq
   17b5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17b60:	ea91 0f03 	teqeq	r1, r3
   17b64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17b68:	bd30      	pop	{r4, r5, pc}
   17b6a:	bf00      	nop

00017b6c <__aeabi_ui2d>:
   17b6c:	f090 0f00 	teq	r0, #0
   17b70:	bf04      	itt	eq
   17b72:	2100      	moveq	r1, #0
   17b74:	4770      	bxeq	lr
   17b76:	b530      	push	{r4, r5, lr}
   17b78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b80:	f04f 0500 	mov.w	r5, #0
   17b84:	f04f 0100 	mov.w	r1, #0
   17b88:	e750      	b.n	17a2c <__adddf3+0x138>
   17b8a:	bf00      	nop

00017b8c <__aeabi_i2d>:
   17b8c:	f090 0f00 	teq	r0, #0
   17b90:	bf04      	itt	eq
   17b92:	2100      	moveq	r1, #0
   17b94:	4770      	bxeq	lr
   17b96:	b530      	push	{r4, r5, lr}
   17b98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17ba0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17ba4:	bf48      	it	mi
   17ba6:	4240      	negmi	r0, r0
   17ba8:	f04f 0100 	mov.w	r1, #0
   17bac:	e73e      	b.n	17a2c <__adddf3+0x138>
   17bae:	bf00      	nop

00017bb0 <__aeabi_f2d>:
   17bb0:	0042      	lsls	r2, r0, #1
   17bb2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17bb6:	ea4f 0131 	mov.w	r1, r1, rrx
   17bba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17bbe:	bf1f      	itttt	ne
   17bc0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17bc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17bc8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17bcc:	4770      	bxne	lr
   17bce:	f092 0f00 	teq	r2, #0
   17bd2:	bf14      	ite	ne
   17bd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17bd8:	4770      	bxeq	lr
   17bda:	b530      	push	{r4, r5, lr}
   17bdc:	f44f 7460 	mov.w	r4, #896	; 0x380
   17be0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17be4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17be8:	e720      	b.n	17a2c <__adddf3+0x138>
   17bea:	bf00      	nop

00017bec <__aeabi_ul2d>:
   17bec:	ea50 0201 	orrs.w	r2, r0, r1
   17bf0:	bf08      	it	eq
   17bf2:	4770      	bxeq	lr
   17bf4:	b530      	push	{r4, r5, lr}
   17bf6:	f04f 0500 	mov.w	r5, #0
   17bfa:	e00a      	b.n	17c12 <__aeabi_l2d+0x16>

00017bfc <__aeabi_l2d>:
   17bfc:	ea50 0201 	orrs.w	r2, r0, r1
   17c00:	bf08      	it	eq
   17c02:	4770      	bxeq	lr
   17c04:	b530      	push	{r4, r5, lr}
   17c06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17c0a:	d502      	bpl.n	17c12 <__aeabi_l2d+0x16>
   17c0c:	4240      	negs	r0, r0
   17c0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17c12:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17c16:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17c1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17c1e:	f43f aedc 	beq.w	179da <__adddf3+0xe6>
   17c22:	f04f 0203 	mov.w	r2, #3
   17c26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17c2a:	bf18      	it	ne
   17c2c:	3203      	addne	r2, #3
   17c2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17c32:	bf18      	it	ne
   17c34:	3203      	addne	r2, #3
   17c36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17c3a:	f1c2 0320 	rsb	r3, r2, #32
   17c3e:	fa00 fc03 	lsl.w	ip, r0, r3
   17c42:	fa20 f002 	lsr.w	r0, r0, r2
   17c46:	fa01 fe03 	lsl.w	lr, r1, r3
   17c4a:	ea40 000e 	orr.w	r0, r0, lr
   17c4e:	fa21 f102 	lsr.w	r1, r1, r2
   17c52:	4414      	add	r4, r2
   17c54:	e6c1      	b.n	179da <__adddf3+0xe6>
   17c56:	bf00      	nop

00017c58 <__aeabi_dmul>:
   17c58:	b570      	push	{r4, r5, r6, lr}
   17c5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17c5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17c62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17c66:	bf1d      	ittte	ne
   17c68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17c6c:	ea94 0f0c 	teqne	r4, ip
   17c70:	ea95 0f0c 	teqne	r5, ip
   17c74:	f000 f8de 	bleq	17e34 <__aeabi_dmul+0x1dc>
   17c78:	442c      	add	r4, r5
   17c7a:	ea81 0603 	eor.w	r6, r1, r3
   17c7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17c82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17c86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17c8a:	bf18      	it	ne
   17c8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17c90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17c98:	d038      	beq.n	17d0c <__aeabi_dmul+0xb4>
   17c9a:	fba0 ce02 	umull	ip, lr, r0, r2
   17c9e:	f04f 0500 	mov.w	r5, #0
   17ca2:	fbe1 e502 	umlal	lr, r5, r1, r2
   17ca6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17caa:	fbe0 e503 	umlal	lr, r5, r0, r3
   17cae:	f04f 0600 	mov.w	r6, #0
   17cb2:	fbe1 5603 	umlal	r5, r6, r1, r3
   17cb6:	f09c 0f00 	teq	ip, #0
   17cba:	bf18      	it	ne
   17cbc:	f04e 0e01 	orrne.w	lr, lr, #1
   17cc0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17cc4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17cc8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17ccc:	d204      	bcs.n	17cd8 <__aeabi_dmul+0x80>
   17cce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17cd2:	416d      	adcs	r5, r5
   17cd4:	eb46 0606 	adc.w	r6, r6, r6
   17cd8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17cdc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17ce0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17ce4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17ce8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17cec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17cf0:	bf88      	it	hi
   17cf2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17cf6:	d81e      	bhi.n	17d36 <__aeabi_dmul+0xde>
   17cf8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17cfc:	bf08      	it	eq
   17cfe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17d02:	f150 0000 	adcs.w	r0, r0, #0
   17d06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17d0a:	bd70      	pop	{r4, r5, r6, pc}
   17d0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17d10:	ea46 0101 	orr.w	r1, r6, r1
   17d14:	ea40 0002 	orr.w	r0, r0, r2
   17d18:	ea81 0103 	eor.w	r1, r1, r3
   17d1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17d20:	bfc2      	ittt	gt
   17d22:	ebd4 050c 	rsbsgt	r5, r4, ip
   17d26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17d2a:	bd70      	popgt	{r4, r5, r6, pc}
   17d2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d30:	f04f 0e00 	mov.w	lr, #0
   17d34:	3c01      	subs	r4, #1
   17d36:	f300 80ab 	bgt.w	17e90 <__aeabi_dmul+0x238>
   17d3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17d3e:	bfde      	ittt	le
   17d40:	2000      	movle	r0, #0
   17d42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17d46:	bd70      	pople	{r4, r5, r6, pc}
   17d48:	f1c4 0400 	rsb	r4, r4, #0
   17d4c:	3c20      	subs	r4, #32
   17d4e:	da35      	bge.n	17dbc <__aeabi_dmul+0x164>
   17d50:	340c      	adds	r4, #12
   17d52:	dc1b      	bgt.n	17d8c <__aeabi_dmul+0x134>
   17d54:	f104 0414 	add.w	r4, r4, #20
   17d58:	f1c4 0520 	rsb	r5, r4, #32
   17d5c:	fa00 f305 	lsl.w	r3, r0, r5
   17d60:	fa20 f004 	lsr.w	r0, r0, r4
   17d64:	fa01 f205 	lsl.w	r2, r1, r5
   17d68:	ea40 0002 	orr.w	r0, r0, r2
   17d6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17d70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17d74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17d78:	fa21 f604 	lsr.w	r6, r1, r4
   17d7c:	eb42 0106 	adc.w	r1, r2, r6
   17d80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d84:	bf08      	it	eq
   17d86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d8a:	bd70      	pop	{r4, r5, r6, pc}
   17d8c:	f1c4 040c 	rsb	r4, r4, #12
   17d90:	f1c4 0520 	rsb	r5, r4, #32
   17d94:	fa00 f304 	lsl.w	r3, r0, r4
   17d98:	fa20 f005 	lsr.w	r0, r0, r5
   17d9c:	fa01 f204 	lsl.w	r2, r1, r4
   17da0:	ea40 0002 	orr.w	r0, r0, r2
   17da4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17da8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17dac:	f141 0100 	adc.w	r1, r1, #0
   17db0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17db4:	bf08      	it	eq
   17db6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17dba:	bd70      	pop	{r4, r5, r6, pc}
   17dbc:	f1c4 0520 	rsb	r5, r4, #32
   17dc0:	fa00 f205 	lsl.w	r2, r0, r5
   17dc4:	ea4e 0e02 	orr.w	lr, lr, r2
   17dc8:	fa20 f304 	lsr.w	r3, r0, r4
   17dcc:	fa01 f205 	lsl.w	r2, r1, r5
   17dd0:	ea43 0302 	orr.w	r3, r3, r2
   17dd4:	fa21 f004 	lsr.w	r0, r1, r4
   17dd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17ddc:	fa21 f204 	lsr.w	r2, r1, r4
   17de0:	ea20 0002 	bic.w	r0, r0, r2
   17de4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17de8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17dec:	bf08      	it	eq
   17dee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17df2:	bd70      	pop	{r4, r5, r6, pc}
   17df4:	f094 0f00 	teq	r4, #0
   17df8:	d10f      	bne.n	17e1a <__aeabi_dmul+0x1c2>
   17dfa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17dfe:	0040      	lsls	r0, r0, #1
   17e00:	eb41 0101 	adc.w	r1, r1, r1
   17e04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17e08:	bf08      	it	eq
   17e0a:	3c01      	subeq	r4, #1
   17e0c:	d0f7      	beq.n	17dfe <__aeabi_dmul+0x1a6>
   17e0e:	ea41 0106 	orr.w	r1, r1, r6
   17e12:	f095 0f00 	teq	r5, #0
   17e16:	bf18      	it	ne
   17e18:	4770      	bxne	lr
   17e1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17e1e:	0052      	lsls	r2, r2, #1
   17e20:	eb43 0303 	adc.w	r3, r3, r3
   17e24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17e28:	bf08      	it	eq
   17e2a:	3d01      	subeq	r5, #1
   17e2c:	d0f7      	beq.n	17e1e <__aeabi_dmul+0x1c6>
   17e2e:	ea43 0306 	orr.w	r3, r3, r6
   17e32:	4770      	bx	lr
   17e34:	ea94 0f0c 	teq	r4, ip
   17e38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17e3c:	bf18      	it	ne
   17e3e:	ea95 0f0c 	teqne	r5, ip
   17e42:	d00c      	beq.n	17e5e <__aeabi_dmul+0x206>
   17e44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e48:	bf18      	it	ne
   17e4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e4e:	d1d1      	bne.n	17df4 <__aeabi_dmul+0x19c>
   17e50:	ea81 0103 	eor.w	r1, r1, r3
   17e54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e58:	f04f 0000 	mov.w	r0, #0
   17e5c:	bd70      	pop	{r4, r5, r6, pc}
   17e5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e62:	bf06      	itte	eq
   17e64:	4610      	moveq	r0, r2
   17e66:	4619      	moveq	r1, r3
   17e68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e6c:	d019      	beq.n	17ea2 <__aeabi_dmul+0x24a>
   17e6e:	ea94 0f0c 	teq	r4, ip
   17e72:	d102      	bne.n	17e7a <__aeabi_dmul+0x222>
   17e74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17e78:	d113      	bne.n	17ea2 <__aeabi_dmul+0x24a>
   17e7a:	ea95 0f0c 	teq	r5, ip
   17e7e:	d105      	bne.n	17e8c <__aeabi_dmul+0x234>
   17e80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17e84:	bf1c      	itt	ne
   17e86:	4610      	movne	r0, r2
   17e88:	4619      	movne	r1, r3
   17e8a:	d10a      	bne.n	17ea2 <__aeabi_dmul+0x24a>
   17e8c:	ea81 0103 	eor.w	r1, r1, r3
   17e90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17e98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17e9c:	f04f 0000 	mov.w	r0, #0
   17ea0:	bd70      	pop	{r4, r5, r6, pc}
   17ea2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17ea6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17eaa:	bd70      	pop	{r4, r5, r6, pc}

00017eac <__aeabi_ddiv>:
   17eac:	b570      	push	{r4, r5, r6, lr}
   17eae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17eb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17eb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17eba:	bf1d      	ittte	ne
   17ebc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17ec0:	ea94 0f0c 	teqne	r4, ip
   17ec4:	ea95 0f0c 	teqne	r5, ip
   17ec8:	f000 f8a7 	bleq	1801a <__aeabi_ddiv+0x16e>
   17ecc:	eba4 0405 	sub.w	r4, r4, r5
   17ed0:	ea81 0e03 	eor.w	lr, r1, r3
   17ed4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17ed8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17edc:	f000 8088 	beq.w	17ff0 <__aeabi_ddiv+0x144>
   17ee0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17ee4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17ee8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17eec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17ef0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17ef4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17ef8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17efc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17f00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17f04:	429d      	cmp	r5, r3
   17f06:	bf08      	it	eq
   17f08:	4296      	cmpeq	r6, r2
   17f0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17f0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17f12:	d202      	bcs.n	17f1a <__aeabi_ddiv+0x6e>
   17f14:	085b      	lsrs	r3, r3, #1
   17f16:	ea4f 0232 	mov.w	r2, r2, rrx
   17f1a:	1ab6      	subs	r6, r6, r2
   17f1c:	eb65 0503 	sbc.w	r5, r5, r3
   17f20:	085b      	lsrs	r3, r3, #1
   17f22:	ea4f 0232 	mov.w	r2, r2, rrx
   17f26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17f2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17f2e:	ebb6 0e02 	subs.w	lr, r6, r2
   17f32:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f36:	bf22      	ittt	cs
   17f38:	1ab6      	subcs	r6, r6, r2
   17f3a:	4675      	movcs	r5, lr
   17f3c:	ea40 000c 	orrcs.w	r0, r0, ip
   17f40:	085b      	lsrs	r3, r3, #1
   17f42:	ea4f 0232 	mov.w	r2, r2, rrx
   17f46:	ebb6 0e02 	subs.w	lr, r6, r2
   17f4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f4e:	bf22      	ittt	cs
   17f50:	1ab6      	subcs	r6, r6, r2
   17f52:	4675      	movcs	r5, lr
   17f54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17f58:	085b      	lsrs	r3, r3, #1
   17f5a:	ea4f 0232 	mov.w	r2, r2, rrx
   17f5e:	ebb6 0e02 	subs.w	lr, r6, r2
   17f62:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f66:	bf22      	ittt	cs
   17f68:	1ab6      	subcs	r6, r6, r2
   17f6a:	4675      	movcs	r5, lr
   17f6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17f70:	085b      	lsrs	r3, r3, #1
   17f72:	ea4f 0232 	mov.w	r2, r2, rrx
   17f76:	ebb6 0e02 	subs.w	lr, r6, r2
   17f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f7e:	bf22      	ittt	cs
   17f80:	1ab6      	subcs	r6, r6, r2
   17f82:	4675      	movcs	r5, lr
   17f84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17f88:	ea55 0e06 	orrs.w	lr, r5, r6
   17f8c:	d018      	beq.n	17fc0 <__aeabi_ddiv+0x114>
   17f8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17f92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17f96:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17f9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17f9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17fa2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17fa6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17faa:	d1c0      	bne.n	17f2e <__aeabi_ddiv+0x82>
   17fac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17fb0:	d10b      	bne.n	17fca <__aeabi_ddiv+0x11e>
   17fb2:	ea41 0100 	orr.w	r1, r1, r0
   17fb6:	f04f 0000 	mov.w	r0, #0
   17fba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17fbe:	e7b6      	b.n	17f2e <__aeabi_ddiv+0x82>
   17fc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17fc4:	bf04      	itt	eq
   17fc6:	4301      	orreq	r1, r0
   17fc8:	2000      	moveq	r0, #0
   17fca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17fce:	bf88      	it	hi
   17fd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17fd4:	f63f aeaf 	bhi.w	17d36 <__aeabi_dmul+0xde>
   17fd8:	ebb5 0c03 	subs.w	ip, r5, r3
   17fdc:	bf04      	itt	eq
   17fde:	ebb6 0c02 	subseq.w	ip, r6, r2
   17fe2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17fe6:	f150 0000 	adcs.w	r0, r0, #0
   17fea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17fee:	bd70      	pop	{r4, r5, r6, pc}
   17ff0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17ff4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17ff8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17ffc:	bfc2      	ittt	gt
   17ffe:	ebd4 050c 	rsbsgt	r5, r4, ip
   18002:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18006:	bd70      	popgt	{r4, r5, r6, pc}
   18008:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1800c:	f04f 0e00 	mov.w	lr, #0
   18010:	3c01      	subs	r4, #1
   18012:	e690      	b.n	17d36 <__aeabi_dmul+0xde>
   18014:	ea45 0e06 	orr.w	lr, r5, r6
   18018:	e68d      	b.n	17d36 <__aeabi_dmul+0xde>
   1801a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1801e:	ea94 0f0c 	teq	r4, ip
   18022:	bf08      	it	eq
   18024:	ea95 0f0c 	teqeq	r5, ip
   18028:	f43f af3b 	beq.w	17ea2 <__aeabi_dmul+0x24a>
   1802c:	ea94 0f0c 	teq	r4, ip
   18030:	d10a      	bne.n	18048 <__aeabi_ddiv+0x19c>
   18032:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18036:	f47f af34 	bne.w	17ea2 <__aeabi_dmul+0x24a>
   1803a:	ea95 0f0c 	teq	r5, ip
   1803e:	f47f af25 	bne.w	17e8c <__aeabi_dmul+0x234>
   18042:	4610      	mov	r0, r2
   18044:	4619      	mov	r1, r3
   18046:	e72c      	b.n	17ea2 <__aeabi_dmul+0x24a>
   18048:	ea95 0f0c 	teq	r5, ip
   1804c:	d106      	bne.n	1805c <__aeabi_ddiv+0x1b0>
   1804e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18052:	f43f aefd 	beq.w	17e50 <__aeabi_dmul+0x1f8>
   18056:	4610      	mov	r0, r2
   18058:	4619      	mov	r1, r3
   1805a:	e722      	b.n	17ea2 <__aeabi_dmul+0x24a>
   1805c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18060:	bf18      	it	ne
   18062:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18066:	f47f aec5 	bne.w	17df4 <__aeabi_dmul+0x19c>
   1806a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1806e:	f47f af0d 	bne.w	17e8c <__aeabi_dmul+0x234>
   18072:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18076:	f47f aeeb 	bne.w	17e50 <__aeabi_dmul+0x1f8>
   1807a:	e712      	b.n	17ea2 <__aeabi_dmul+0x24a>

0001807c <__gedf2>:
   1807c:	f04f 3cff 	mov.w	ip, #4294967295
   18080:	e006      	b.n	18090 <__cmpdf2+0x4>
   18082:	bf00      	nop

00018084 <__ledf2>:
   18084:	f04f 0c01 	mov.w	ip, #1
   18088:	e002      	b.n	18090 <__cmpdf2+0x4>
   1808a:	bf00      	nop

0001808c <__cmpdf2>:
   1808c:	f04f 0c01 	mov.w	ip, #1
   18090:	f84d cd04 	str.w	ip, [sp, #-4]!
   18094:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18098:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1809c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   180a0:	bf18      	it	ne
   180a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   180a6:	d01b      	beq.n	180e0 <__cmpdf2+0x54>
   180a8:	b001      	add	sp, #4
   180aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   180ae:	bf0c      	ite	eq
   180b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   180b4:	ea91 0f03 	teqne	r1, r3
   180b8:	bf02      	ittt	eq
   180ba:	ea90 0f02 	teqeq	r0, r2
   180be:	2000      	moveq	r0, #0
   180c0:	4770      	bxeq	lr
   180c2:	f110 0f00 	cmn.w	r0, #0
   180c6:	ea91 0f03 	teq	r1, r3
   180ca:	bf58      	it	pl
   180cc:	4299      	cmppl	r1, r3
   180ce:	bf08      	it	eq
   180d0:	4290      	cmpeq	r0, r2
   180d2:	bf2c      	ite	cs
   180d4:	17d8      	asrcs	r0, r3, #31
   180d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   180da:	f040 0001 	orr.w	r0, r0, #1
   180de:	4770      	bx	lr
   180e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   180e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   180e8:	d102      	bne.n	180f0 <__cmpdf2+0x64>
   180ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   180ee:	d107      	bne.n	18100 <__cmpdf2+0x74>
   180f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   180f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   180f8:	d1d6      	bne.n	180a8 <__cmpdf2+0x1c>
   180fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   180fe:	d0d3      	beq.n	180a8 <__cmpdf2+0x1c>
   18100:	f85d 0b04 	ldr.w	r0, [sp], #4
   18104:	4770      	bx	lr
   18106:	bf00      	nop

00018108 <__aeabi_cdrcmple>:
   18108:	4684      	mov	ip, r0
   1810a:	4610      	mov	r0, r2
   1810c:	4662      	mov	r2, ip
   1810e:	468c      	mov	ip, r1
   18110:	4619      	mov	r1, r3
   18112:	4663      	mov	r3, ip
   18114:	e000      	b.n	18118 <__aeabi_cdcmpeq>
   18116:	bf00      	nop

00018118 <__aeabi_cdcmpeq>:
   18118:	b501      	push	{r0, lr}
   1811a:	f7ff ffb7 	bl	1808c <__cmpdf2>
   1811e:	2800      	cmp	r0, #0
   18120:	bf48      	it	mi
   18122:	f110 0f00 	cmnmi.w	r0, #0
   18126:	bd01      	pop	{r0, pc}

00018128 <__aeabi_dcmpeq>:
   18128:	f84d ed08 	str.w	lr, [sp, #-8]!
   1812c:	f7ff fff4 	bl	18118 <__aeabi_cdcmpeq>
   18130:	bf0c      	ite	eq
   18132:	2001      	moveq	r0, #1
   18134:	2000      	movne	r0, #0
   18136:	f85d fb08 	ldr.w	pc, [sp], #8
   1813a:	bf00      	nop

0001813c <__aeabi_dcmplt>:
   1813c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18140:	f7ff ffea 	bl	18118 <__aeabi_cdcmpeq>
   18144:	bf34      	ite	cc
   18146:	2001      	movcc	r0, #1
   18148:	2000      	movcs	r0, #0
   1814a:	f85d fb08 	ldr.w	pc, [sp], #8
   1814e:	bf00      	nop

00018150 <__aeabi_dcmple>:
   18150:	f84d ed08 	str.w	lr, [sp, #-8]!
   18154:	f7ff ffe0 	bl	18118 <__aeabi_cdcmpeq>
   18158:	bf94      	ite	ls
   1815a:	2001      	movls	r0, #1
   1815c:	2000      	movhi	r0, #0
   1815e:	f85d fb08 	ldr.w	pc, [sp], #8
   18162:	bf00      	nop

00018164 <__aeabi_dcmpge>:
   18164:	f84d ed08 	str.w	lr, [sp, #-8]!
   18168:	f7ff ffce 	bl	18108 <__aeabi_cdrcmple>
   1816c:	bf94      	ite	ls
   1816e:	2001      	movls	r0, #1
   18170:	2000      	movhi	r0, #0
   18172:	f85d fb08 	ldr.w	pc, [sp], #8
   18176:	bf00      	nop

00018178 <__aeabi_dcmpgt>:
   18178:	f84d ed08 	str.w	lr, [sp, #-8]!
   1817c:	f7ff ffc4 	bl	18108 <__aeabi_cdrcmple>
   18180:	bf34      	ite	cc
   18182:	2001      	movcc	r0, #1
   18184:	2000      	movcs	r0, #0
   18186:	f85d fb08 	ldr.w	pc, [sp], #8
   1818a:	bf00      	nop

0001818c <__aeabi_d2iz>:
   1818c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18190:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18194:	d215      	bcs.n	181c2 <__aeabi_d2iz+0x36>
   18196:	d511      	bpl.n	181bc <__aeabi_d2iz+0x30>
   18198:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1819c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   181a0:	d912      	bls.n	181c8 <__aeabi_d2iz+0x3c>
   181a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   181a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   181aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   181ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   181b2:	fa23 f002 	lsr.w	r0, r3, r2
   181b6:	bf18      	it	ne
   181b8:	4240      	negne	r0, r0
   181ba:	4770      	bx	lr
   181bc:	f04f 0000 	mov.w	r0, #0
   181c0:	4770      	bx	lr
   181c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   181c6:	d105      	bne.n	181d4 <__aeabi_d2iz+0x48>
   181c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   181cc:	bf08      	it	eq
   181ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   181d2:	4770      	bx	lr
   181d4:	f04f 0000 	mov.w	r0, #0
   181d8:	4770      	bx	lr
   181da:	bf00      	nop

000181dc <__aeabi_d2uiz>:
   181dc:	004a      	lsls	r2, r1, #1
   181de:	d211      	bcs.n	18204 <__aeabi_d2uiz+0x28>
   181e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   181e4:	d211      	bcs.n	1820a <__aeabi_d2uiz+0x2e>
   181e6:	d50d      	bpl.n	18204 <__aeabi_d2uiz+0x28>
   181e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   181ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   181f0:	d40e      	bmi.n	18210 <__aeabi_d2uiz+0x34>
   181f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   181f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   181fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   181fe:	fa23 f002 	lsr.w	r0, r3, r2
   18202:	4770      	bx	lr
   18204:	f04f 0000 	mov.w	r0, #0
   18208:	4770      	bx	lr
   1820a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1820e:	d102      	bne.n	18216 <__aeabi_d2uiz+0x3a>
   18210:	f04f 30ff 	mov.w	r0, #4294967295
   18214:	4770      	bx	lr
   18216:	f04f 0000 	mov.w	r0, #0
   1821a:	4770      	bx	lr

0001821c <__aeabi_d2f>:
   1821c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18220:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18224:	bf24      	itt	cs
   18226:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1822a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1822e:	d90d      	bls.n	1824c <__aeabi_d2f+0x30>
   18230:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18234:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18238:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1823c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18240:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18244:	bf08      	it	eq
   18246:	f020 0001 	biceq.w	r0, r0, #1
   1824a:	4770      	bx	lr
   1824c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18250:	d121      	bne.n	18296 <__aeabi_d2f+0x7a>
   18252:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18256:	bfbc      	itt	lt
   18258:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1825c:	4770      	bxlt	lr
   1825e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18262:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18266:	f1c2 0218 	rsb	r2, r2, #24
   1826a:	f1c2 0c20 	rsb	ip, r2, #32
   1826e:	fa10 f30c 	lsls.w	r3, r0, ip
   18272:	fa20 f002 	lsr.w	r0, r0, r2
   18276:	bf18      	it	ne
   18278:	f040 0001 	orrne.w	r0, r0, #1
   1827c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18280:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18284:	fa03 fc0c 	lsl.w	ip, r3, ip
   18288:	ea40 000c 	orr.w	r0, r0, ip
   1828c:	fa23 f302 	lsr.w	r3, r3, r2
   18290:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18294:	e7cc      	b.n	18230 <__aeabi_d2f+0x14>
   18296:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1829a:	d107      	bne.n	182ac <__aeabi_d2f+0x90>
   1829c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   182a0:	bf1e      	ittt	ne
   182a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   182a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   182aa:	4770      	bxne	lr
   182ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   182b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182b8:	4770      	bx	lr
   182ba:	bf00      	nop

000182bc <__aeabi_frsub>:
   182bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   182c0:	e002      	b.n	182c8 <__addsf3>
   182c2:	bf00      	nop

000182c4 <__aeabi_fsub>:
   182c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000182c8 <__addsf3>:
   182c8:	0042      	lsls	r2, r0, #1
   182ca:	bf1f      	itttt	ne
   182cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   182d0:	ea92 0f03 	teqne	r2, r3
   182d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   182d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   182dc:	d06a      	beq.n	183b4 <__addsf3+0xec>
   182de:	ea4f 6212 	mov.w	r2, r2, lsr #24
   182e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   182e6:	bfc1      	itttt	gt
   182e8:	18d2      	addgt	r2, r2, r3
   182ea:	4041      	eorgt	r1, r0
   182ec:	4048      	eorgt	r0, r1
   182ee:	4041      	eorgt	r1, r0
   182f0:	bfb8      	it	lt
   182f2:	425b      	neglt	r3, r3
   182f4:	2b19      	cmp	r3, #25
   182f6:	bf88      	it	hi
   182f8:	4770      	bxhi	lr
   182fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   182fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18302:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18306:	bf18      	it	ne
   18308:	4240      	negne	r0, r0
   1830a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1830e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18312:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18316:	bf18      	it	ne
   18318:	4249      	negne	r1, r1
   1831a:	ea92 0f03 	teq	r2, r3
   1831e:	d03f      	beq.n	183a0 <__addsf3+0xd8>
   18320:	f1a2 0201 	sub.w	r2, r2, #1
   18324:	fa41 fc03 	asr.w	ip, r1, r3
   18328:	eb10 000c 	adds.w	r0, r0, ip
   1832c:	f1c3 0320 	rsb	r3, r3, #32
   18330:	fa01 f103 	lsl.w	r1, r1, r3
   18334:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18338:	d502      	bpl.n	18340 <__addsf3+0x78>
   1833a:	4249      	negs	r1, r1
   1833c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18340:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18344:	d313      	bcc.n	1836e <__addsf3+0xa6>
   18346:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1834a:	d306      	bcc.n	1835a <__addsf3+0x92>
   1834c:	0840      	lsrs	r0, r0, #1
   1834e:	ea4f 0131 	mov.w	r1, r1, rrx
   18352:	f102 0201 	add.w	r2, r2, #1
   18356:	2afe      	cmp	r2, #254	; 0xfe
   18358:	d251      	bcs.n	183fe <__addsf3+0x136>
   1835a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1835e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18362:	bf08      	it	eq
   18364:	f020 0001 	biceq.w	r0, r0, #1
   18368:	ea40 0003 	orr.w	r0, r0, r3
   1836c:	4770      	bx	lr
   1836e:	0049      	lsls	r1, r1, #1
   18370:	eb40 0000 	adc.w	r0, r0, r0
   18374:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18378:	f1a2 0201 	sub.w	r2, r2, #1
   1837c:	d1ed      	bne.n	1835a <__addsf3+0x92>
   1837e:	fab0 fc80 	clz	ip, r0
   18382:	f1ac 0c08 	sub.w	ip, ip, #8
   18386:	ebb2 020c 	subs.w	r2, r2, ip
   1838a:	fa00 f00c 	lsl.w	r0, r0, ip
   1838e:	bfaa      	itet	ge
   18390:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18394:	4252      	neglt	r2, r2
   18396:	4318      	orrge	r0, r3
   18398:	bfbc      	itt	lt
   1839a:	40d0      	lsrlt	r0, r2
   1839c:	4318      	orrlt	r0, r3
   1839e:	4770      	bx	lr
   183a0:	f092 0f00 	teq	r2, #0
   183a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   183a8:	bf06      	itte	eq
   183aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   183ae:	3201      	addeq	r2, #1
   183b0:	3b01      	subne	r3, #1
   183b2:	e7b5      	b.n	18320 <__addsf3+0x58>
   183b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   183b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   183bc:	bf18      	it	ne
   183be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   183c2:	d021      	beq.n	18408 <__addsf3+0x140>
   183c4:	ea92 0f03 	teq	r2, r3
   183c8:	d004      	beq.n	183d4 <__addsf3+0x10c>
   183ca:	f092 0f00 	teq	r2, #0
   183ce:	bf08      	it	eq
   183d0:	4608      	moveq	r0, r1
   183d2:	4770      	bx	lr
   183d4:	ea90 0f01 	teq	r0, r1
   183d8:	bf1c      	itt	ne
   183da:	2000      	movne	r0, #0
   183dc:	4770      	bxne	lr
   183de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   183e2:	d104      	bne.n	183ee <__addsf3+0x126>
   183e4:	0040      	lsls	r0, r0, #1
   183e6:	bf28      	it	cs
   183e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   183ec:	4770      	bx	lr
   183ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   183f2:	bf3c      	itt	cc
   183f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   183f8:	4770      	bxcc	lr
   183fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   183fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18402:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18406:	4770      	bx	lr
   18408:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1840c:	bf16      	itet	ne
   1840e:	4608      	movne	r0, r1
   18410:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18414:	4601      	movne	r1, r0
   18416:	0242      	lsls	r2, r0, #9
   18418:	bf06      	itte	eq
   1841a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1841e:	ea90 0f01 	teqeq	r0, r1
   18422:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18426:	4770      	bx	lr

00018428 <__aeabi_ui2f>:
   18428:	f04f 0300 	mov.w	r3, #0
   1842c:	e004      	b.n	18438 <__aeabi_i2f+0x8>
   1842e:	bf00      	nop

00018430 <__aeabi_i2f>:
   18430:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18434:	bf48      	it	mi
   18436:	4240      	negmi	r0, r0
   18438:	ea5f 0c00 	movs.w	ip, r0
   1843c:	bf08      	it	eq
   1843e:	4770      	bxeq	lr
   18440:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18444:	4601      	mov	r1, r0
   18446:	f04f 0000 	mov.w	r0, #0
   1844a:	e01c      	b.n	18486 <__aeabi_l2f+0x2a>

0001844c <__aeabi_ul2f>:
   1844c:	ea50 0201 	orrs.w	r2, r0, r1
   18450:	bf08      	it	eq
   18452:	4770      	bxeq	lr
   18454:	f04f 0300 	mov.w	r3, #0
   18458:	e00a      	b.n	18470 <__aeabi_l2f+0x14>
   1845a:	bf00      	nop

0001845c <__aeabi_l2f>:
   1845c:	ea50 0201 	orrs.w	r2, r0, r1
   18460:	bf08      	it	eq
   18462:	4770      	bxeq	lr
   18464:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18468:	d502      	bpl.n	18470 <__aeabi_l2f+0x14>
   1846a:	4240      	negs	r0, r0
   1846c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18470:	ea5f 0c01 	movs.w	ip, r1
   18474:	bf02      	ittt	eq
   18476:	4684      	moveq	ip, r0
   18478:	4601      	moveq	r1, r0
   1847a:	2000      	moveq	r0, #0
   1847c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18480:	bf08      	it	eq
   18482:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18486:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1848a:	fabc f28c 	clz	r2, ip
   1848e:	3a08      	subs	r2, #8
   18490:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18494:	db10      	blt.n	184b8 <__aeabi_l2f+0x5c>
   18496:	fa01 fc02 	lsl.w	ip, r1, r2
   1849a:	4463      	add	r3, ip
   1849c:	fa00 fc02 	lsl.w	ip, r0, r2
   184a0:	f1c2 0220 	rsb	r2, r2, #32
   184a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   184a8:	fa20 f202 	lsr.w	r2, r0, r2
   184ac:	eb43 0002 	adc.w	r0, r3, r2
   184b0:	bf08      	it	eq
   184b2:	f020 0001 	biceq.w	r0, r0, #1
   184b6:	4770      	bx	lr
   184b8:	f102 0220 	add.w	r2, r2, #32
   184bc:	fa01 fc02 	lsl.w	ip, r1, r2
   184c0:	f1c2 0220 	rsb	r2, r2, #32
   184c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   184c8:	fa21 f202 	lsr.w	r2, r1, r2
   184cc:	eb43 0002 	adc.w	r0, r3, r2
   184d0:	bf08      	it	eq
   184d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   184d6:	4770      	bx	lr

000184d8 <__aeabi_fmul>:
   184d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   184dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   184e0:	bf1e      	ittt	ne
   184e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   184e6:	ea92 0f0c 	teqne	r2, ip
   184ea:	ea93 0f0c 	teqne	r3, ip
   184ee:	d06f      	beq.n	185d0 <__aeabi_fmul+0xf8>
   184f0:	441a      	add	r2, r3
   184f2:	ea80 0c01 	eor.w	ip, r0, r1
   184f6:	0240      	lsls	r0, r0, #9
   184f8:	bf18      	it	ne
   184fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   184fe:	d01e      	beq.n	1853e <__aeabi_fmul+0x66>
   18500:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18504:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18508:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1850c:	fba0 3101 	umull	r3, r1, r0, r1
   18510:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18514:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18518:	bf3e      	ittt	cc
   1851a:	0049      	lslcc	r1, r1, #1
   1851c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18520:	005b      	lslcc	r3, r3, #1
   18522:	ea40 0001 	orr.w	r0, r0, r1
   18526:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1852a:	2afd      	cmp	r2, #253	; 0xfd
   1852c:	d81d      	bhi.n	1856a <__aeabi_fmul+0x92>
   1852e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18532:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18536:	bf08      	it	eq
   18538:	f020 0001 	biceq.w	r0, r0, #1
   1853c:	4770      	bx	lr
   1853e:	f090 0f00 	teq	r0, #0
   18542:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18546:	bf08      	it	eq
   18548:	0249      	lsleq	r1, r1, #9
   1854a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1854e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18552:	3a7f      	subs	r2, #127	; 0x7f
   18554:	bfc2      	ittt	gt
   18556:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1855a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1855e:	4770      	bxgt	lr
   18560:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18564:	f04f 0300 	mov.w	r3, #0
   18568:	3a01      	subs	r2, #1
   1856a:	dc5d      	bgt.n	18628 <__aeabi_fmul+0x150>
   1856c:	f112 0f19 	cmn.w	r2, #25
   18570:	bfdc      	itt	le
   18572:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   18576:	4770      	bxle	lr
   18578:	f1c2 0200 	rsb	r2, r2, #0
   1857c:	0041      	lsls	r1, r0, #1
   1857e:	fa21 f102 	lsr.w	r1, r1, r2
   18582:	f1c2 0220 	rsb	r2, r2, #32
   18586:	fa00 fc02 	lsl.w	ip, r0, r2
   1858a:	ea5f 0031 	movs.w	r0, r1, rrx
   1858e:	f140 0000 	adc.w	r0, r0, #0
   18592:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18596:	bf08      	it	eq
   18598:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1859c:	4770      	bx	lr
   1859e:	f092 0f00 	teq	r2, #0
   185a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   185a6:	bf02      	ittt	eq
   185a8:	0040      	lsleq	r0, r0, #1
   185aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   185ae:	3a01      	subeq	r2, #1
   185b0:	d0f9      	beq.n	185a6 <__aeabi_fmul+0xce>
   185b2:	ea40 000c 	orr.w	r0, r0, ip
   185b6:	f093 0f00 	teq	r3, #0
   185ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   185be:	bf02      	ittt	eq
   185c0:	0049      	lsleq	r1, r1, #1
   185c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   185c6:	3b01      	subeq	r3, #1
   185c8:	d0f9      	beq.n	185be <__aeabi_fmul+0xe6>
   185ca:	ea41 010c 	orr.w	r1, r1, ip
   185ce:	e78f      	b.n	184f0 <__aeabi_fmul+0x18>
   185d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   185d4:	ea92 0f0c 	teq	r2, ip
   185d8:	bf18      	it	ne
   185da:	ea93 0f0c 	teqne	r3, ip
   185de:	d00a      	beq.n	185f6 <__aeabi_fmul+0x11e>
   185e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   185e4:	bf18      	it	ne
   185e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   185ea:	d1d8      	bne.n	1859e <__aeabi_fmul+0xc6>
   185ec:	ea80 0001 	eor.w	r0, r0, r1
   185f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   185f4:	4770      	bx	lr
   185f6:	f090 0f00 	teq	r0, #0
   185fa:	bf17      	itett	ne
   185fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18600:	4608      	moveq	r0, r1
   18602:	f091 0f00 	teqne	r1, #0
   18606:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1860a:	d014      	beq.n	18636 <__aeabi_fmul+0x15e>
   1860c:	ea92 0f0c 	teq	r2, ip
   18610:	d101      	bne.n	18616 <__aeabi_fmul+0x13e>
   18612:	0242      	lsls	r2, r0, #9
   18614:	d10f      	bne.n	18636 <__aeabi_fmul+0x15e>
   18616:	ea93 0f0c 	teq	r3, ip
   1861a:	d103      	bne.n	18624 <__aeabi_fmul+0x14c>
   1861c:	024b      	lsls	r3, r1, #9
   1861e:	bf18      	it	ne
   18620:	4608      	movne	r0, r1
   18622:	d108      	bne.n	18636 <__aeabi_fmul+0x15e>
   18624:	ea80 0001 	eor.w	r0, r0, r1
   18628:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1862c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18630:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18634:	4770      	bx	lr
   18636:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1863a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1863e:	4770      	bx	lr

00018640 <__aeabi_fdiv>:
   18640:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18644:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18648:	bf1e      	ittt	ne
   1864a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1864e:	ea92 0f0c 	teqne	r2, ip
   18652:	ea93 0f0c 	teqne	r3, ip
   18656:	d069      	beq.n	1872c <__aeabi_fdiv+0xec>
   18658:	eba2 0203 	sub.w	r2, r2, r3
   1865c:	ea80 0c01 	eor.w	ip, r0, r1
   18660:	0249      	lsls	r1, r1, #9
   18662:	ea4f 2040 	mov.w	r0, r0, lsl #9
   18666:	d037      	beq.n	186d8 <__aeabi_fdiv+0x98>
   18668:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1866c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18670:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18674:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18678:	428b      	cmp	r3, r1
   1867a:	bf38      	it	cc
   1867c:	005b      	lslcc	r3, r3, #1
   1867e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   18682:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   18686:	428b      	cmp	r3, r1
   18688:	bf24      	itt	cs
   1868a:	1a5b      	subcs	r3, r3, r1
   1868c:	ea40 000c 	orrcs.w	r0, r0, ip
   18690:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   18694:	bf24      	itt	cs
   18696:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1869a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1869e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   186a2:	bf24      	itt	cs
   186a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   186a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   186ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   186b0:	bf24      	itt	cs
   186b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   186b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   186ba:	011b      	lsls	r3, r3, #4
   186bc:	bf18      	it	ne
   186be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   186c2:	d1e0      	bne.n	18686 <__aeabi_fdiv+0x46>
   186c4:	2afd      	cmp	r2, #253	; 0xfd
   186c6:	f63f af50 	bhi.w	1856a <__aeabi_fmul+0x92>
   186ca:	428b      	cmp	r3, r1
   186cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   186d0:	bf08      	it	eq
   186d2:	f020 0001 	biceq.w	r0, r0, #1
   186d6:	4770      	bx	lr
   186d8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   186dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   186e0:	327f      	adds	r2, #127	; 0x7f
   186e2:	bfc2      	ittt	gt
   186e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   186e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   186ec:	4770      	bxgt	lr
   186ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   186f2:	f04f 0300 	mov.w	r3, #0
   186f6:	3a01      	subs	r2, #1
   186f8:	e737      	b.n	1856a <__aeabi_fmul+0x92>
   186fa:	f092 0f00 	teq	r2, #0
   186fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18702:	bf02      	ittt	eq
   18704:	0040      	lsleq	r0, r0, #1
   18706:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1870a:	3a01      	subeq	r2, #1
   1870c:	d0f9      	beq.n	18702 <__aeabi_fdiv+0xc2>
   1870e:	ea40 000c 	orr.w	r0, r0, ip
   18712:	f093 0f00 	teq	r3, #0
   18716:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1871a:	bf02      	ittt	eq
   1871c:	0049      	lsleq	r1, r1, #1
   1871e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18722:	3b01      	subeq	r3, #1
   18724:	d0f9      	beq.n	1871a <__aeabi_fdiv+0xda>
   18726:	ea41 010c 	orr.w	r1, r1, ip
   1872a:	e795      	b.n	18658 <__aeabi_fdiv+0x18>
   1872c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18730:	ea92 0f0c 	teq	r2, ip
   18734:	d108      	bne.n	18748 <__aeabi_fdiv+0x108>
   18736:	0242      	lsls	r2, r0, #9
   18738:	f47f af7d 	bne.w	18636 <__aeabi_fmul+0x15e>
   1873c:	ea93 0f0c 	teq	r3, ip
   18740:	f47f af70 	bne.w	18624 <__aeabi_fmul+0x14c>
   18744:	4608      	mov	r0, r1
   18746:	e776      	b.n	18636 <__aeabi_fmul+0x15e>
   18748:	ea93 0f0c 	teq	r3, ip
   1874c:	d104      	bne.n	18758 <__aeabi_fdiv+0x118>
   1874e:	024b      	lsls	r3, r1, #9
   18750:	f43f af4c 	beq.w	185ec <__aeabi_fmul+0x114>
   18754:	4608      	mov	r0, r1
   18756:	e76e      	b.n	18636 <__aeabi_fmul+0x15e>
   18758:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1875c:	bf18      	it	ne
   1875e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18762:	d1ca      	bne.n	186fa <__aeabi_fdiv+0xba>
   18764:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18768:	f47f af5c 	bne.w	18624 <__aeabi_fmul+0x14c>
   1876c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18770:	f47f af3c 	bne.w	185ec <__aeabi_fmul+0x114>
   18774:	e75f      	b.n	18636 <__aeabi_fmul+0x15e>
   18776:	bf00      	nop

00018778 <__gesf2>:
   18778:	f04f 3cff 	mov.w	ip, #4294967295
   1877c:	e006      	b.n	1878c <__cmpsf2+0x4>
   1877e:	bf00      	nop

00018780 <__lesf2>:
   18780:	f04f 0c01 	mov.w	ip, #1
   18784:	e002      	b.n	1878c <__cmpsf2+0x4>
   18786:	bf00      	nop

00018788 <__cmpsf2>:
   18788:	f04f 0c01 	mov.w	ip, #1
   1878c:	f84d cd04 	str.w	ip, [sp, #-4]!
   18790:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18794:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18798:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1879c:	bf18      	it	ne
   1879e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   187a2:	d011      	beq.n	187c8 <__cmpsf2+0x40>
   187a4:	b001      	add	sp, #4
   187a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   187aa:	bf18      	it	ne
   187ac:	ea90 0f01 	teqne	r0, r1
   187b0:	bf58      	it	pl
   187b2:	ebb2 0003 	subspl.w	r0, r2, r3
   187b6:	bf88      	it	hi
   187b8:	17c8      	asrhi	r0, r1, #31
   187ba:	bf38      	it	cc
   187bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   187c0:	bf18      	it	ne
   187c2:	f040 0001 	orrne.w	r0, r0, #1
   187c6:	4770      	bx	lr
   187c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   187cc:	d102      	bne.n	187d4 <__cmpsf2+0x4c>
   187ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   187d2:	d105      	bne.n	187e0 <__cmpsf2+0x58>
   187d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   187d8:	d1e4      	bne.n	187a4 <__cmpsf2+0x1c>
   187da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   187de:	d0e1      	beq.n	187a4 <__cmpsf2+0x1c>
   187e0:	f85d 0b04 	ldr.w	r0, [sp], #4
   187e4:	4770      	bx	lr
   187e6:	bf00      	nop

000187e8 <__aeabi_cfrcmple>:
   187e8:	4684      	mov	ip, r0
   187ea:	4608      	mov	r0, r1
   187ec:	4661      	mov	r1, ip
   187ee:	e7ff      	b.n	187f0 <__aeabi_cfcmpeq>

000187f0 <__aeabi_cfcmpeq>:
   187f0:	b50f      	push	{r0, r1, r2, r3, lr}
   187f2:	f7ff ffc9 	bl	18788 <__cmpsf2>
   187f6:	2800      	cmp	r0, #0
   187f8:	bf48      	it	mi
   187fa:	f110 0f00 	cmnmi.w	r0, #0
   187fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018800 <__aeabi_fcmpeq>:
   18800:	f84d ed08 	str.w	lr, [sp, #-8]!
   18804:	f7ff fff4 	bl	187f0 <__aeabi_cfcmpeq>
   18808:	bf0c      	ite	eq
   1880a:	2001      	moveq	r0, #1
   1880c:	2000      	movne	r0, #0
   1880e:	f85d fb08 	ldr.w	pc, [sp], #8
   18812:	bf00      	nop

00018814 <__aeabi_fcmplt>:
   18814:	f84d ed08 	str.w	lr, [sp, #-8]!
   18818:	f7ff ffea 	bl	187f0 <__aeabi_cfcmpeq>
   1881c:	bf34      	ite	cc
   1881e:	2001      	movcc	r0, #1
   18820:	2000      	movcs	r0, #0
   18822:	f85d fb08 	ldr.w	pc, [sp], #8
   18826:	bf00      	nop

00018828 <__aeabi_fcmple>:
   18828:	f84d ed08 	str.w	lr, [sp, #-8]!
   1882c:	f7ff ffe0 	bl	187f0 <__aeabi_cfcmpeq>
   18830:	bf94      	ite	ls
   18832:	2001      	movls	r0, #1
   18834:	2000      	movhi	r0, #0
   18836:	f85d fb08 	ldr.w	pc, [sp], #8
   1883a:	bf00      	nop

0001883c <__aeabi_fcmpge>:
   1883c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18840:	f7ff ffd2 	bl	187e8 <__aeabi_cfrcmple>
   18844:	bf94      	ite	ls
   18846:	2001      	movls	r0, #1
   18848:	2000      	movhi	r0, #0
   1884a:	f85d fb08 	ldr.w	pc, [sp], #8
   1884e:	bf00      	nop

00018850 <__aeabi_fcmpgt>:
   18850:	f84d ed08 	str.w	lr, [sp, #-8]!
   18854:	f7ff ffc8 	bl	187e8 <__aeabi_cfrcmple>
   18858:	bf34      	ite	cc
   1885a:	2001      	movcc	r0, #1
   1885c:	2000      	movcs	r0, #0
   1885e:	f85d fb08 	ldr.w	pc, [sp], #8
   18862:	bf00      	nop

00018864 <__aeabi_f2iz>:
   18864:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18868:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1886c:	d30f      	bcc.n	1888e <__aeabi_f2iz+0x2a>
   1886e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   18872:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   18876:	d90d      	bls.n	18894 <__aeabi_f2iz+0x30>
   18878:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1887c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18880:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18884:	fa23 f002 	lsr.w	r0, r3, r2
   18888:	bf18      	it	ne
   1888a:	4240      	negne	r0, r0
   1888c:	4770      	bx	lr
   1888e:	f04f 0000 	mov.w	r0, #0
   18892:	4770      	bx	lr
   18894:	f112 0f61 	cmn.w	r2, #97	; 0x61
   18898:	d101      	bne.n	1889e <__aeabi_f2iz+0x3a>
   1889a:	0242      	lsls	r2, r0, #9
   1889c:	d105      	bne.n	188aa <__aeabi_f2iz+0x46>
   1889e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   188a2:	bf08      	it	eq
   188a4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   188a8:	4770      	bx	lr
   188aa:	f04f 0000 	mov.w	r0, #0
   188ae:	4770      	bx	lr

000188b0 <memcpy>:
   188b0:	2a0f      	cmp	r2, #15
   188b2:	b4f0      	push	{r4, r5, r6, r7}
   188b4:	d945      	bls.n	18942 <memcpy+0x92>
   188b6:	ea40 0301 	orr.w	r3, r0, r1
   188ba:	079b      	lsls	r3, r3, #30
   188bc:	d145      	bne.n	1894a <memcpy+0x9a>
   188be:	f1a2 0710 	sub.w	r7, r2, #16
   188c2:	460c      	mov	r4, r1
   188c4:	4603      	mov	r3, r0
   188c6:	093f      	lsrs	r7, r7, #4
   188c8:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   188cc:	3610      	adds	r6, #16
   188ce:	6825      	ldr	r5, [r4, #0]
   188d0:	3310      	adds	r3, #16
   188d2:	3410      	adds	r4, #16
   188d4:	f843 5c10 	str.w	r5, [r3, #-16]
   188d8:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   188dc:	f843 5c0c 	str.w	r5, [r3, #-12]
   188e0:	f854 5c08 	ldr.w	r5, [r4, #-8]
   188e4:	f843 5c08 	str.w	r5, [r3, #-8]
   188e8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   188ec:	f843 5c04 	str.w	r5, [r3, #-4]
   188f0:	42b3      	cmp	r3, r6
   188f2:	d1ec      	bne.n	188ce <memcpy+0x1e>
   188f4:	1c7b      	adds	r3, r7, #1
   188f6:	f002 0c0f 	and.w	ip, r2, #15
   188fa:	f1bc 0f03 	cmp.w	ip, #3
   188fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18902:	4419      	add	r1, r3
   18904:	4403      	add	r3, r0
   18906:	d922      	bls.n	1894e <memcpy+0x9e>
   18908:	460e      	mov	r6, r1
   1890a:	461d      	mov	r5, r3
   1890c:	4664      	mov	r4, ip
   1890e:	f856 7b04 	ldr.w	r7, [r6], #4
   18912:	3c04      	subs	r4, #4
   18914:	2c03      	cmp	r4, #3
   18916:	f845 7b04 	str.w	r7, [r5], #4
   1891a:	d8f8      	bhi.n	1890e <memcpy+0x5e>
   1891c:	f1ac 0404 	sub.w	r4, ip, #4
   18920:	f002 0203 	and.w	r2, r2, #3
   18924:	f024 0403 	bic.w	r4, r4, #3
   18928:	3404      	adds	r4, #4
   1892a:	4423      	add	r3, r4
   1892c:	4421      	add	r1, r4
   1892e:	b132      	cbz	r2, 1893e <memcpy+0x8e>
   18930:	440a      	add	r2, r1
   18932:	f811 4b01 	ldrb.w	r4, [r1], #1
   18936:	4291      	cmp	r1, r2
   18938:	f803 4b01 	strb.w	r4, [r3], #1
   1893c:	d1f9      	bne.n	18932 <memcpy+0x82>
   1893e:	bcf0      	pop	{r4, r5, r6, r7}
   18940:	4770      	bx	lr
   18942:	4603      	mov	r3, r0
   18944:	2a00      	cmp	r2, #0
   18946:	d1f3      	bne.n	18930 <memcpy+0x80>
   18948:	e7f9      	b.n	1893e <memcpy+0x8e>
   1894a:	4603      	mov	r3, r0
   1894c:	e7f0      	b.n	18930 <memcpy+0x80>
   1894e:	4662      	mov	r2, ip
   18950:	2a00      	cmp	r2, #0
   18952:	d1ed      	bne.n	18930 <memcpy+0x80>
   18954:	e7f3      	b.n	1893e <memcpy+0x8e>
   18956:	bf00      	nop

00018958 <memset>:
   18958:	0783      	lsls	r3, r0, #30
   1895a:	b4f0      	push	{r4, r5, r6, r7}
   1895c:	d048      	beq.n	189f0 <memset+0x98>
   1895e:	1e54      	subs	r4, r2, #1
   18960:	2a00      	cmp	r2, #0
   18962:	d043      	beq.n	189ec <memset+0x94>
   18964:	b2cd      	uxtb	r5, r1
   18966:	4603      	mov	r3, r0
   18968:	e002      	b.n	18970 <memset+0x18>
   1896a:	2c00      	cmp	r4, #0
   1896c:	d03e      	beq.n	189ec <memset+0x94>
   1896e:	4614      	mov	r4, r2
   18970:	f803 5b01 	strb.w	r5, [r3], #1
   18974:	f013 0f03 	tst.w	r3, #3
   18978:	f104 32ff 	add.w	r2, r4, #4294967295
   1897c:	d1f5      	bne.n	1896a <memset+0x12>
   1897e:	2c03      	cmp	r4, #3
   18980:	d92d      	bls.n	189de <memset+0x86>
   18982:	b2cd      	uxtb	r5, r1
   18984:	2c0f      	cmp	r4, #15
   18986:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1898a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1898e:	d918      	bls.n	189c2 <memset+0x6a>
   18990:	f1a4 0710 	sub.w	r7, r4, #16
   18994:	f103 0610 	add.w	r6, r3, #16
   18998:	461a      	mov	r2, r3
   1899a:	093f      	lsrs	r7, r7, #4
   1899c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   189a0:	6015      	str	r5, [r2, #0]
   189a2:	3210      	adds	r2, #16
   189a4:	f842 5c0c 	str.w	r5, [r2, #-12]
   189a8:	f842 5c08 	str.w	r5, [r2, #-8]
   189ac:	f842 5c04 	str.w	r5, [r2, #-4]
   189b0:	42b2      	cmp	r2, r6
   189b2:	d1f5      	bne.n	189a0 <memset+0x48>
   189b4:	f004 040f 	and.w	r4, r4, #15
   189b8:	3701      	adds	r7, #1
   189ba:	2c03      	cmp	r4, #3
   189bc:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   189c0:	d90d      	bls.n	189de <memset+0x86>
   189c2:	461e      	mov	r6, r3
   189c4:	4622      	mov	r2, r4
   189c6:	3a04      	subs	r2, #4
   189c8:	f846 5b04 	str.w	r5, [r6], #4
   189cc:	2a03      	cmp	r2, #3
   189ce:	d8fa      	bhi.n	189c6 <memset+0x6e>
   189d0:	1f22      	subs	r2, r4, #4
   189d2:	f004 0403 	and.w	r4, r4, #3
   189d6:	f022 0203 	bic.w	r2, r2, #3
   189da:	3204      	adds	r2, #4
   189dc:	4413      	add	r3, r2
   189de:	b12c      	cbz	r4, 189ec <memset+0x94>
   189e0:	b2c9      	uxtb	r1, r1
   189e2:	441c      	add	r4, r3
   189e4:	f803 1b01 	strb.w	r1, [r3], #1
   189e8:	42a3      	cmp	r3, r4
   189ea:	d1fb      	bne.n	189e4 <memset+0x8c>
   189ec:	bcf0      	pop	{r4, r5, r6, r7}
   189ee:	4770      	bx	lr
   189f0:	4614      	mov	r4, r2
   189f2:	4603      	mov	r3, r0
   189f4:	e7c3      	b.n	1897e <memset+0x26>
   189f6:	bf00      	nop

000189f8 <strncpy>:
   189f8:	ea40 0301 	orr.w	r3, r0, r1
   189fc:	079b      	lsls	r3, r3, #30
   189fe:	b470      	push	{r4, r5, r6}
   18a00:	d12b      	bne.n	18a5a <strncpy+0x62>
   18a02:	2a03      	cmp	r2, #3
   18a04:	bf84      	itt	hi
   18a06:	460b      	movhi	r3, r1
   18a08:	4605      	movhi	r5, r0
   18a0a:	d926      	bls.n	18a5a <strncpy+0x62>
   18a0c:	4619      	mov	r1, r3
   18a0e:	f853 4b04 	ldr.w	r4, [r3], #4
   18a12:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18a16:	ea26 0604 	bic.w	r6, r6, r4
   18a1a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18a1e:	d105      	bne.n	18a2c <strncpy+0x34>
   18a20:	3a04      	subs	r2, #4
   18a22:	f845 4b04 	str.w	r4, [r5], #4
   18a26:	2a03      	cmp	r2, #3
   18a28:	4619      	mov	r1, r3
   18a2a:	d8ef      	bhi.n	18a0c <strncpy+0x14>
   18a2c:	b19a      	cbz	r2, 18a56 <strncpy+0x5e>
   18a2e:	780c      	ldrb	r4, [r1, #0]
   18a30:	3a01      	subs	r2, #1
   18a32:	1c6b      	adds	r3, r5, #1
   18a34:	702c      	strb	r4, [r5, #0]
   18a36:	b13c      	cbz	r4, 18a48 <strncpy+0x50>
   18a38:	b16a      	cbz	r2, 18a56 <strncpy+0x5e>
   18a3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18a3e:	3a01      	subs	r2, #1
   18a40:	f803 4b01 	strb.w	r4, [r3], #1
   18a44:	2c00      	cmp	r4, #0
   18a46:	d1f7      	bne.n	18a38 <strncpy+0x40>
   18a48:	b12a      	cbz	r2, 18a56 <strncpy+0x5e>
   18a4a:	441a      	add	r2, r3
   18a4c:	2100      	movs	r1, #0
   18a4e:	f803 1b01 	strb.w	r1, [r3], #1
   18a52:	4293      	cmp	r3, r2
   18a54:	d1fb      	bne.n	18a4e <strncpy+0x56>
   18a56:	bc70      	pop	{r4, r5, r6}
   18a58:	4770      	bx	lr
   18a5a:	4605      	mov	r5, r0
   18a5c:	e7e6      	b.n	18a2c <strncpy+0x34>
   18a5e:	bf00      	nop

00018a60 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18a60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18a62:	e003      	b.n	18a6c <LoopCopyDataInit>

00018a64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18a64:	4b0a      	ldr	r3, [pc, #40]	; (18a90 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18a66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18a68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   18a6a:	3104      	adds	r1, #4

00018a6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18a6c:	4809      	ldr	r0, [pc, #36]	; (18a94 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   18a6e:	4b0a      	ldr	r3, [pc, #40]	; (18a98 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18a70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   18a72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18a74:	d3f6      	bcc.n	18a64 <CopyDataInit>
	ldr	r2, =_sbss
   18a76:	4a09      	ldr	r2, [pc, #36]	; (18a9c <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18a78:	e002      	b.n	18a80 <LoopFillZerobss>

00018a7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18a7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18a7c:	f842 3b04 	str.w	r3, [r2], #4

00018a80 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18a80:	4b07      	ldr	r3, [pc, #28]	; (18aa0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18a82:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18a84:	d3f9      	bcc.n	18a7a <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18a86:	f7e7 fc59 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18a8a:	f7fe fe85 	bl	17798 <main>
	bx	lr    
   18a8e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18a90:	00018b90 	.word	0x00018b90
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18a94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18a98:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18a9c:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18aa0:	2004cdd4 	.word	0x2004cdd4

00018aa4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18aa4:	e7fe      	b.n	18aa4 <ADC1_2_IRQHandler>
   18aa6:	0000      	movs	r0, r0
   18aa8:	75746341 	.word	0x75746341
   18aac:	726f7461 	.word	0x726f7461
   18ab0:	00000d0a 	.word	0x00000d0a
   18ab4:	454c4449 	.word	0x454c4449
   18ab8:	00000000 	.word	0x00000000

00018abc <ulKernelPriority>:
   18abc:	0000007f                                ....

00018ac0 <heapSTRUCT_SIZE>:
   18ac0:	00010010                                         ..

00018ac2 <version>:
   18ac2:	3d5a0001                                         ..

00018ac4 <utm_east0>:
   18ac4:	00093d5a                                Z=..

00018ac8 <utm_north0>:
   18ac8:	005875e6                                .uX.

00018acc <climb_pgain>:
   18acc:	bcf5c28f                                ....

00018ad0 <climb_igain>:
   18ad0:	3dcccccd                                ...=

00018ad4 <level_gaz>:
   18ad4:	3e9eb852                                R..>

00018ad8 <nav_east0>:
   18ad8:	00093d5a                                Z=..

00018adc <nav_north0>:
   18adc:	005875e6                                .uX.

00018ae0 <nb_waypoint>:
   18ae0:	00000007 33323130 37363534 42413938     ....0123456789AB
   18af0:	46454443                                CDEF

00018af4 <failsafe>:
	...
   18b08:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18b18:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18b28:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18b38:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18b48:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18b58:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18b68:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18b78:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18b88:	6e617672 00000074                       rvant...
